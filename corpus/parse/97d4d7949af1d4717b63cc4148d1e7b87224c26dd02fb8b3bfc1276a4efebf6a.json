{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/liferay/liferay-portal"
		},
		"file": {
			"name": "rest-openapi.yaml",
			"size": 0,
			"path": "modules/apps/headless/headless-delivery/headless-delivery-impl/rest-openapi.yaml",
			"byteSize": 502345,
			"content": "components:\n    schemas:\n        AggregateRating:\n            description:\n                Represents the average rating. See [AggregateRating](https://www.schema.org/AggregateRating) for more\n                information.\n            properties:\n                bestRating:\n                    description:\n                        The highest possible rating (by default normalized to 1.0).\n                    format: double\n                    readOnly: true\n                    type: number\n                ratingAverage:\n                    description:\n                        The average rating.\n                    format: double\n                    readOnly: true\n                    type: number\n                ratingCount:\n                    description:\n                        The number of ratings.\n                    readOnly: true\n                    type: integer\n                ratingValue:\n                    # @review\n                    description:\n                        The rating value.\n                    format: double\n                    readOnly: true\n                    type: number\n                worstRating:\n                    description:\n                        The lowest possible rating (by default normalized to 0.0).\n                    format: double\n                    readOnly: true\n                    type: number\n            type: object\n        BlogPosting:\n            description:\n                Represents a blog post. See [BlogPosting](https://www.schema.org/BlogPosting) for more information.\n            properties:\n                actions:\n                    additionalProperties:\n                        additionalProperties:\n                            type: string\n                        type: object\n                    # @review\n                    description:\n                        Block of actions allowed by the user making the request.\n                    readOnly: true\n                    type: object\n                aggregateRating:\n                    allOf:\n                        - $ref: \"#/components/schemas/AggregateRating\"\n                    description:\n                        The blog post's average rating.\n                    readOnly: true\n                alternativeHeadline:\n                    description:\n                        The blog post's subtitle.\n                    type: string\n                articleBody:\n                    description:\n                        The blog post's body (content).\n                    type: string\n                creator:\n                    allOf:\n                        - $ref: \"#/components/schemas/Creator\"\n                    description:\n                        The blog post's author.\n                    readOnly: true\n                customFields:\n                    # @review\n                    description:\n                        A list of the custom fields associated with the blog post.\n                    items:\n                        $ref: \"#/components/schemas/CustomField\"\n                    type: array\n                dateCreated:\n                    description:\n                        The blog post's creation date.\n                    format: date-time\n                    readOnly: true\n                    type: string\n                dateModified:\n                    description:\n                        The blog post's most recent modification date.\n                    format: date-time\n                    readOnly: true\n                    type: string\n                datePublished:\n                    description:\n                        The blog post's publication date.\n                    format: date-time\n                    type: string\n                description:\n                    description:\n                        The blog post's description.\n                    type: string\n                encodingFormat:\n                    description:\n                        The blog post's media format (e.g., HTML, BBCode, etc.).\n                    readOnly: true\n                    type: string\n                externalReferenceCode:\n                    description:\n                        The blog post's external reference code.\n                    type: string\n                friendlyUrlPath:\n                    description:\n                        The blog post's relative URL.\n                    type: string\n                headline:\n                    description:\n                        The blog post's main title.\n                    type: string\n                id:\n                    description:\n                        The blog post's identifier.\n                    format: int64\n                    readOnly: true\n                    type: integer\n                image:\n                    description:\n                        The blog post's cover image.\n                    properties:\n                        caption:\n                            description:\n                                The text describing the image.\n                            type: string\n                        contentUrl:\n                            description:\n                                The image's relative URL.\n                            format: uri\n                            readOnly: true\n                            type: string\n                        contentValue:\n                            # @review\n                            description:\n                                \"optional field with the content of the image in Base64, can be embedded with\n                                nestedFields\"\n                            readOnly: true\n                            type: string\n                        imageId:\n                            description:\n                                The image's ID. This can be used to retrieve more information in the `Document` API.\n                            format: int64\n                            type: integer\n                    type: object\n                keywords:\n                    description:\n                        A list of keywords describing the blog post.\n                    items:\n                        type: string\n                    type: array\n                numberOfComments:\n                    description:\n                        The number of comments this blog post has received.\n                    readOnly: true\n                    type: integer\n                relatedContents:\n                    # @review\n                    description:\n                        A list of related contents to this blog post.\n                    items:\n                        $ref: \"#/components/schemas/RelatedContent\"\n                    readOnly: true\n                    type: array\n                renderedContents:\n                    description:\n                        A list of rendered blogs posts, which results from using a display page to process the blogs\n                        post and return HTML.\n                    items:\n                        $ref: \"#/components/schemas/RenderedContent\"\n                    readOnly: true\n                    type: array\n                siteId:\n                    description:\n                        The ID of the site to which this blog post is scoped.\n                    format: int64\n                    readOnly: true\n                    type: integer\n                taxonomyCategoryBriefs:\n                    description:\n                        The categories associated with this blog post.\n                    items:\n                        $ref: \"#/components/schemas/TaxonomyCategoryBrief\"\n                    readOnly: true\n                    type: array\n                taxonomyCategoryIds:\n                    # @review\n                    description:\n                        A write-only field that adds `TaxonomyCategory` instances to the blog post.\n                    items:\n                        format: int64\n                        type: integer\n                    type: array\n                    writeOnly: true\n                viewableBy:\n                    description:\n                        A write-only property that specifies the default permissions.\n                    enum: [Anyone, Members, Owner]\n                    type: string\n                    writeOnly: true\n            required:\n                - articleBody\n                - headline\n            type: object\n        BlogPostingImage:\n            description:\n                Represents a blog post's image. Properties follow the [image](https://schema.org/image) specification.\n            properties:\n                contentUrl:\n                    description:\n                        The image's relative URL.\n                    readOnly: true\n                    type: string\n                contentValue:\n                    # @review\n                    description:\n                        optional field with the content of the image in Base64, can be embedded with nestedFields\n                    readOnly: true\n                    type: string\n                encodingFormat:\n                    description:\n                        The image's content type (e.g., `application/png`, etc.).\n                    readOnly: true\n                    type: string\n                fileExtension:\n                    description:\n                        The image's file extension.\n                    readOnly: true\n                    type: string\n                id:\n                    description:\n                        The image's ID.\n                    format: int64\n                    readOnly: true\n                    type: integer\n                sizeInBytes:\n                    description:\n                        The image's size in bytes.\n                    format: int64\n                    readOnly: true\n                    type: integer\n                title:\n                    description:\n                        The image's title text.\n                    type: string\n                viewableBy:\n                    description:\n                        A write-only property that specifies the default permissions.\n                    enum: [Anyone, Members, Owner]\n                    type: string\n                    writeOnly: true\n            type: object\n        ClassFieldReference:\n            properties:\n                className:\n                    type: string\n                fieldName:\n                    type: string\n                fieldValue:\n                    type: string\n            required:\n                - className\n                - fieldName\n                - fieldValue\n            type: object\n        ClassFieldsReference:\n            properties:\n                className:\n                    type: string\n                fields:\n                    description:\n                        The list of fields for the reference.\n                    items:\n                        properties:\n                            fieldName:\n                                description:\n                                    The name of the field.\n                                type: string\n                            fieldValue:\n                                description:\n                                    The internal value of the field.\n                                type: string\n                        type: object\n                    type: array\n            required:\n                - className\n                - fields\n            type: object\n        ClassNameReference:\n            properties:\n                className:\n                    type: string\n            required:\n                - className\n        ClassPKReference:\n            properties:\n                className:\n                    type: string\n                classPK:\n                    format: int64\n                    type: integer\n            required:\n                - className\n                - classPK\n            type: object\n        ColumnViewport:\n            properties:\n                columnViewportDefinition:\n                    properties:\n                        size:\n                            maximum: 12\n                            minimum: 1\n                            type: integer\n                    type: object\n                id:\n                    type: string\n            required:\n                - columnViewportDefinition\n                - id\n            type: object\n        Comment:\n            description:\n                Represents a comment. See [Comment](https://www.schema.org/Comment) for more details.\n            properties:\n                actions:\n                    additionalProperties:\n                        additionalProperties:\n                            type: string\n                        type: object\n                    # @review\n                    description:\n                        Block of actions allowed by the user making the request.\n                    readOnly: true\n                    type: object\n                creator:\n                    allOf:\n                        - $ref: \"#/components/schemas/Creator\"\n                    description:\n                        The comment's author.\n                    readOnly: true\n                dateCreated:\n                    description:\n                        The comment's creation date.\n                    format: date-time\n                    readOnly: true\n                    type: string\n                dateModified:\n                    description:\n                        The comment's latest modification date.\n                    format: date-time\n                    readOnly: true\n                    type: string\n                id:\n                    description:\n                        The comment's ID.\n                    format: int64\n                    readOnly: true\n                    type: integer\n                numberOfComments:\n                    description:\n                        The number of child comments on this comment.\n                    readOnly: true\n                    type: integer\n                parentCommentId:\n                    # @review\n                    description:\n                        the ID of the comment's parent, if it exists.\n                    format: int64\n                    type: integer\n                text:\n                    description:\n                        The comment's text content.\n                    type: string\n            type: object\n        ContentDocument:\n            description:\n                Represents a document (binary data and metadata) associated with structured content. Properties follow\n                the [Media Object](https://schema.org/MediaObject) specification.\n            properties:\n                actions:\n                    additionalProperties:\n                        additionalProperties:\n                            type: string\n                        type: object\n                    # @review\n                    description:\n                        Block of actions allowed by the user making the request.\n                    readOnly: true\n                    type: object\n                contentType:\n                    description:\n                        The type of content.\n                    readOnly: true\n                    type: string\n                contentUrl:\n                    description:\n                        The document's relative URL.\n                    format: uri\n                    readOnly: true\n                    type: string\n                contentValue:\n                    # @review\n                    description:\n                        optional field with the content of the document in Base64, can be embedded with nestedFields\n                    readOnly: true\n                    type: string\n                description:\n                    description:\n                        The document's description.\n                    type: string\n                encodingFormat:\n                    description:\n                        The document's content type (e.g., `application/pdf`, etc.).\n                    readOnly: true\n                    type: string\n                fileExtension:\n                    description:\n                        The document's file extension.\n                    readOnly: true\n                    type: string\n                id:\n                    description:\n                        The document's ID.\n                    format: int64\n                    type: integer\n                sizeInBytes:\n                    description:\n                        The document's file size in bytes.\n                    format: int64\n                    readOnly: true\n                    type: integer\n                title:\n                    description:\n                        The document's title.\n                    type: string\n            type: object\n        ContentElement:\n            # @review\n            properties:\n                content:\n                    description:\n                        The content's fields.\n                    readOnly: true\n                    type: object\n                contentType:\n                    description:\n                        The content set element's type.\n                    readOnly: true\n                    type: string\n                id:\n                    description:\n                        The content set element's ID.\n                    format: int64\n                    readOnly: true\n                    type: integer\n                title:\n                    description:\n                        The content's title.\n                    readOnly: true\n                    type: string\n                title_i18n:\n                    additionalProperties:\n                        type: string\n                    description:\n                        The localized content's titles.\n                    readOnly: true\n                    type: object\n        ContentField:\n            description:\n                Represents the value of each field in structured content. Fields can contain different information types\n                (e.g., documents, geolocation, etc.).\n            properties:\n                contentFieldValue:\n                    allOf:\n                        - $ref: \"#/components/schemas/ContentFieldValue\"\n                    description:\n                        The field's value.\n                contentFieldValue_i18n:\n                    additionalProperties:\n                        $ref: \"#/components/schemas/ContentFieldValue\"\n                    description:\n                        The localized field's values.\n                    type: object\n                dataType:\n                    description:\n                        The field type (e.g., image, text, etc.).\n                    readOnly: true\n                    type: string\n                inputControl:\n                    description:\n                        The field's control type (e.g., text, text area, etc.).\n                    readOnly: true\n                    type: string\n                label:\n                    description:\n                        The field's label.\n                    readOnly: true\n                    type: string\n                label_i18n:\n                    additionalProperties:\n                        type: string\n                    description:\n                        The localized field's labels.\n                    readOnly: true\n                    type: object\n                name:\n                    description:\n                        The field's internal name. This is valid for comparisons and unique in the structured content.\n                    type: string\n                nestedContentFields:\n                    description:\n                        A list of child content fields that depend on this resource.\n                    items:\n                        $ref: \"#/components/schemas/ContentField\"\n                    type: array\n                repeatable:\n                    description:\n                        A flag that indicates whether this field can be rendered multiple times.\n                    readOnly: true\n                    type: boolean\n        ContentFieldValue:\n            description:\n                # @review\n                Represents the value of a content field. Can contain different information types (e.g., geolocation,\n                documents, etc.).\n            properties:\n                data:\n                    description:\n                        The field's content for simple types.\n                    type: string\n                document:\n                    allOf:\n                        - $ref: \"#/components/schemas/ContentDocument\"\n                    description:\n                        A content document element.\n                geo:\n                    description:\n                        A point determined by latitude and longitude.\n                    properties:\n                        latitude:\n                            description:\n                                The latitude of a point in space.\n                            format: double\n                            type: number\n                        longitude:\n                            description:\n                                The longitude of a point in space.\n                            format: double\n                            type: number\n                    type: object\n                image:\n                    allOf:\n                        - $ref: \"#/components/schemas/ContentDocument\"\n                    description:\n                        A content document element that stores an image file.\n                link:\n                    description:\n                        A link to a page on the server.\n                    format: uri\n                    type: string\n                structuredContentLink:\n                    description:\n                        A link to structured content on the server.\n                    properties:\n                        contentType:\n                            description:\n                                The type of content.\n                            readOnly: true\n                            type: string\n                        embeddedStructuredContent:\n                            allOf:\n                                - $ref: \"#/components/schemas/StructuredContent\"\n                            # @review\n                            description:\n                                Optional field with the structured content, can be embedded with nestedFields.\n                            readOnly: true\n                        id:\n                            description:\n                                The resource's ID.\n                            format: int64\n                            type: integer\n                        title:\n                            description:\n                                The resource's title.\n                            type: string\n                    type: object\n        ContentSetElement:\n            description:\n                Represents each member of a content set and can contain different types of assets.\n            properties:\n                content:\n                    description:\n                        The content's fields.\n                    readOnly: true\n                    type: object\n                contentType:\n                    description:\n                        The content set element's type.\n                    readOnly: true\n                    type: string\n                id:\n                    description:\n                        The content set element's ID.\n                    format: int64\n                    readOnly: true\n                    type: integer\n                title:\n                    description:\n                        The content's title.\n                    readOnly: true\n                    type: string\n                title_i18n:\n                    additionalProperties:\n                        type: string\n                    # @review\n                    description:\n                        The localized content's titles.\n                    readOnly: true\n                    type: object\n        ContentStructure:\n            description:\n                Represents the content structure that backs structured content. This defines which form fields are\n                available and the possible types and values.\n            properties:\n                assetLibraryKey:\n                    # @review\n                    description:\n                        The key of the asset library to which the content structure is scoped.\n                    readOnly: true\n                    type: string\n                availableLanguages:\n                    description:\n                        The list of languages the content structure has a translation for.\n                    items:\n                        type: string\n                    readOnly: true\n                    type: array\n                contentStructureFields:\n                    description:\n                        The list of the content structure's fields.\n                    items:\n                        $ref: \"#/components/schemas/ContentStructureField\"\n                    readOnly: true\n                    type: array\n                creator:\n                    allOf:\n                        - $ref: \"#/components/schemas/Creator\"\n                    description:\n                        The content structure's creator.\n                    readOnly: true\n                dateCreated:\n                    description:\n                        The content structure's creation date.\n                    format: date-time\n                    readOnly: true\n                    type: string\n                dateModified:\n                    description:\n                        The last time a field of the content structure changed.\n                    format: date-time\n                    readOnly: true\n                    type: string\n                description:\n                    description:\n                        The content structure's description.\n                    readOnly: true\n                    type: string\n                description_i18n:\n                    additionalProperties:\n                        type: string\n                    # @review\n                    description:\n                        The localized content structure's description.\n                    readOnly: true\n                    type: object\n                id:\n                    description:\n                        The content structure's ID.\n                    format: int64\n                    readOnly: true\n                    type: integer\n                name:\n                    description:\n                        The content structure's name.\n                    readOnly: true\n                    type: string\n                name_i18n:\n                    additionalProperties:\n                        type: string\n                    # @review\n                    description:\n                        The localized content structure's names.\n                    readOnly: true\n                    type: object\n                siteId:\n                    description:\n                        The ID of the site to which the content structure is scoped.\n                    format: int64\n                    readOnly: true\n                    type: integer\n            type: object\n        ContentStructureField:\n            description:\n                Represents each field in a content structure, backed by a content field.\n            properties:\n                dataType:\n                    description:\n                        The form field's type (e.g., date, geolocation, text, etc.).\n                    readOnly: true\n                    type: string\n                inputControl:\n                    description:\n                        The form field's input control type (e.g., text, textarea, select field, etc.).\n                    readOnly: true\n                    type: string\n                label:\n                    description:\n                        The form field's label.\n                    readOnly: true\n                    type: string\n                label_i18n:\n                    additionalProperties:\n                        type: string\n                    # @review\n                    description:\n                        The form field's labels.\n                    readOnly: true\n                    type: object\n                localizable:\n                    description:\n                        A flag that indicates whether the content is accessible in different languages.\n                    readOnly: true\n                    type: boolean\n                multiple:\n                    description:\n                        A flag that indicates whether the form field can have several values.\n                    readOnly: true\n                    type: boolean\n                name:\n                    description:\n                        The form field's name.\n                    readOnly: true\n                    type: string\n                nestedContentStructureFields:\n                    description:\n                        The child content structure fields that depend on this form field.\n                    items:\n                        $ref: \"#/components/schemas/ContentStructureField\"\n                    readOnly: true\n                    type: array\n                options:\n                    description:\n                        The list of different possible values.\n                    items:\n                        properties:\n                            label:\n                                description:\n                                    The option's label.\n                                type: string\n                            label_i18n:\n                                additionalProperties:\n                                    type: string\n                                # @review\n                                description:\n                                    The localized option's labels.\n                                type: object\n                            value:\n                                description:\n                                    The internal value of the field option.\n                                type: string\n                        type: object\n                    readOnly: true\n                    type: array\n                predefinedValue:\n                    description:\n                        The form field's default value.\n                    readOnly: true\n                    type: string\n                predefinedValue_i18n:\n                    additionalProperties:\n                        type: string\n                    # @review\n                    description:\n                        The localized form field's default values.\n                    readOnly: true\n                    type: object\n                repeatable:\n                    description:\n                        A flag that indicates whether this content can be rendered (and answered) several times.\n                    readOnly: true\n                    type: boolean\n                required:\n                    description:\n                        A flag that indicates whether this form field is required.\n                    readOnly: true\n                    type: boolean\n                showLabel:\n                    description:\n                        A flag that indicates whether the structure's end target should render the field label.\n                    readOnly: true\n                    type: boolean\n            type: object\n        ContentTemplate:\n            # @review\n            description:\n                Represents a content template.\n            properties:\n                actions:\n                    additionalProperties:\n                        additionalProperties:\n                            type: string\n                        type: object\n                    # @review\n                    description:\n                        Block of actions allowed by the user making the request.\n                    readOnly: true\n                    type: object\n                assetLibraryKey:\n                    # @review\n                    description:\n                        The key of the asset library to which the content template is scoped.\n                    readOnly: true\n                    type: string\n                availableLanguages:\n                    # @review\n                    description:\n                        The list of languages the content template has a translation for.\n                    items:\n                        type: string\n                    readOnly: true\n                    type: array\n                contentStructureId:\n                    # @review\n                    description:\n                        The ID of the `ContentStructure`.\n                    format: int64\n                    type: integer\n                creator:\n                    allOf:\n                        - $ref: \"#/components/schemas/Creator\"\n                    # @review\n                    description:\n                        The content template's creator.\n                    readOnly: true\n                dateCreated:\n                    # @review\n                    description:\n                        The content template's creation date.\n                    format: date-time\n                    readOnly: true\n                    type: string\n                dateModified:\n                    # @review\n                    description:\n                        The last time the content template changed.\n                    format: date-time\n                    readOnly: true\n                    type: string\n                description:\n                    # @review\n                    description:\n                        the content template's description.\n                    type: string\n                description_i18n:\n                    # @review\n                    additionalProperties:\n                        type: string\n                    description:\n                        the localized content template's descriptions.\n                    type: object\n                id:\n                    # @review\n                    description:\n                        The content template's ID.\n                    readOnly: true\n                    type: string\n                name:\n                    # @review\n                    description:\n                        the content template's name.\n                    type: string\n                name_i18n:\n                    additionalProperties:\n                        type: string\n                    # @review\n                    description:\n                        the localized content template's name.\n                    type: object\n                programmingLanguage:\n                    # @review\n                    description:\n                        the content template's programming language.\n                    type: string\n                siteId:\n                    # @review\n                    description:\n                        The ID of the site to which the content template is scoped.\n                    format: int64\n                    readOnly: true\n                    type: integer\n                templateScript:\n                    # @review\n                    description:\n                        The content template's script.\n                    type: string\n            required:\n                - contentStructureId\n                - name\n        ContextReference:\n            properties:\n                contextSource:\n                    enum: [CollectionItem, DisplayPageItem]\n                    type: string\n            required:\n                - contextSource\n            type: object\n        Creator:\n            description:\n                Represents the user account of the content's creator/author. Properties follow the\n                [creator](https://schema.org/creator) specification.\n            properties:\n                additionalName:\n                    description:\n                        The author's additional name (e.g., middle name).\n                    readOnly: true\n                    type: string\n                contentType:\n                    # @review\n                    description:\n                        The type of the content.\n                    readOnly: true\n                    type: string\n                familyName:\n                    description:\n                        The author's surname.\n                    readOnly: true\n                    type: string\n                givenName:\n                    description:\n                        The author's first name.\n                    readOnly: true\n                    type: string\n                id:\n                    description:\n                        The author's ID.\n                    format: int64\n                    readOnly: true\n                    type: integer\n                image:\n                    description:\n                        A relative URL to the author's profile image.\n                    format: uri\n                    readOnly: true\n                    type: string\n                name:\n                    description:\n                        The author's full name.\n                    readOnly: true\n                    type: string\n                profileURL:\n                    # @review\n                    description:\n                        A relative URL to the author's user profile. Optional field, can be embedded with nestedFields.\n                    format: uri\n                    readOnly: true\n                    type: string\n            type: object\n        CreatorStatistics:\n            # @review\n            description:\n                Detailed info of the creator.\n            properties:\n                joinDate:\n                    description:\n                        Join date of the author.\n                    format: date-time\n                    readOnly: true\n                    type: string\n                lastPostDate:\n                    description:\n                        Last post created by the author.\n                    format: date-time\n                    readOnly: true\n                    type: string\n                postsNumber:\n                    description:\n                        Number of posts publicated by the author.\n                    readOnly: true\n                    type: integer\n                rank:\n                    description:\n                        The rank of the author.\n                    readOnly: true\n                    type: string\n            type: object\n        CustomField:\n            # @review\n            description:\n                Represents the value of each custom field. Fields can contain different information types (e.g.,\n                geolocation, strings, etc.).\n            properties:\n                customValue:\n                    allOf:\n                        - $ref: \"#/components/schemas/CustomValue\"\n                    description:\n                        The field's value.\n                dataType:\n                    description:\n                        The field type (e.g., image, text, etc.).\n                    readOnly: true\n                    type: string\n                name:\n                    description:\n                        The field's internal name. This is valid for comparisons and unique in the structured content.\n                    type: string\n        CustomMetaTag:\n            # @review\n            description:\n                Represents a custom meta tag.\n            properties:\n                key:\n                    # @review\n                    description:\n                        The custom metatag's key.\n                    type: string\n                value:\n                    # @review\n                    description:\n                        The custom metatag's value\n                    type: string\n                value_i18n:\n                    additionalProperties:\n                        type: string\n                    # @review\n                    description:\n                        The localized custom metatag's values.\n                    type: object\n            type: object\n        CustomValue:\n            # @review\n            description:\n                Represents a custom value.\n            properties:\n                data:\n                    # @review\n                    description:\n                        The field's content value for simple types.\n                    type: object\n                data_i18n:\n                    additionalProperties:\n                        type: string\n                    # @review\n                    description:\n                        The localized field's content values for simple types.\n                    type: object\n                geo:\n                    allOf:\n                        - $ref: \"#/components/schemas/Geo\"\n                    description:\n                        A point determined by latitude and longitude.\n            type: object\n        DisplayPageTemplate:\n            description:\n                Represents a Display Page template.\n            properties:\n                contentSubtype:\n                    # @review\n                    description:\n                        The display page template's content subtype.\n                    properties:\n                        subtypeId:\n                            # @review\n                            description:\n                                The content subtype's ID.\n                            format: int64\n                            type: integer\n                        subtypeKey:\n                            # @review\n                            description:\n                                The content subtype's Key.\n                            type: string\n                    type: object\n                contentType:\n                    # @review\n                    description:\n                        The type of content.\n                    properties:\n                        className:\n                            # @review\n                            description:\n                                The content type's class name.\n                            type: string\n                    type: object\n                defaultTemplate:\n                    # @review\n                    description:\n                        Specifies if the page template should be the default for the given content type/subtype.\n                    type: boolean\n                key:\n                    # @review\n                    description:\n                        The display page template's key.\n                    type: string\n                name:\n                    # @review\n                    description:\n                        The display page template's name.\n                    type: string\n            type: object\n        Document:\n            description:\n                Represents a Document Library file, storing binary and metadata information. Properties follow the\n                [MediaObject](https://schema.org/MediaObject) specification.\n            properties:\n                actions:\n                    additionalProperties:\n                        additionalProperties:\n                            type: string\n                        type: object\n                    # @review\n                    description:\n                        Block of actions allowed by the user making the request.\n                    readOnly: true\n                    type: object\n                adaptedImages:\n                    description:\n                        An array of images in several resolutions and sizes, created by the Adaptive Media framework.\n                    items:\n                        properties:\n                            contentUrl:\n                                description:\n                                    The image's relative URL.\n                                format: uri\n                                type: string\n                            contentValue:\n                                # @review\n                                description:\n                                    Optional field with the content of the image in Base64, can be embedded with\n                                    nestedFields.\n                                readOnly: true\n                                type: string\n                            height:\n                                description:\n                                    The image's height in pixels.\n                                type: integer\n                            resolutionName:\n                                description:\n                                    The name of the image's Adaptive Media image resolution.\n                                type: string\n                            sizeInBytes:\n                                description:\n                                    The image's size in bytes.\n                                format: int64\n                                type: integer\n                            width:\n                                description:\n                                    The image's width in pixels.\n                                type: integer\n                        type: object\n                    readOnly: true\n                    type: array\n                aggregateRating:\n                    allOf:\n                        - $ref: \"#/components/schemas/AggregateRating\"\n                    description:\n                        The document's average rating.\n                    readOnly: true\n                assetLibraryKey:\n                    # @review\n                    description:\n                        The key of the asset library to which the document is scoped.\n                    readOnly: true\n                    type: string\n                contentUrl:\n                    description:\n                        The document's relative URL.\n                    format: binary\n                    readOnly: true\n                    type: string\n                contentValue:\n                    # @review\n                    description:\n                        The optional field with the content of the document in Base64, can be embedded with\n                        nestedFields.\n                    readOnly: true\n                    type: string\n                creator:\n                    allOf:\n                        - $ref: \"#/components/schemas/Creator\"\n                    description:\n                        The document's creator.\n                    readOnly: true\n                customFields:\n                    # @review\n                    description:\n                        A list of the custom fields associated with the document.\n                    items:\n                        $ref: \"#/components/schemas/CustomField\"\n                    type: array\n                dateCreated:\n                    description:\n                        The document's creation date.\n                    format: date-time\n                    readOnly: true\n                    type: string\n                dateModified:\n                    description:\n                        The last time a field of the document changed.\n                    format: date-time\n                    readOnly: true\n                    type: string\n                description:\n                    description:\n                        The document's description.\n                    type: string\n                documentFolderId:\n                    description:\n                        The ID of the `DocumentFolder` where this document is stored.\n                    format: int64\n                    type: integer\n                documentType:\n                    properties:\n                        availableLanguages:\n                            # @review\n                            description:\n                                The list of languages the document type has a translation for.\n                            items:\n                                type: string\n                            readOnly: true\n                            type: array\n                        contentFields:\n                            # @review\n                            description:\n                                The list of content fields the document type has.\n                            items:\n                                $ref: \"#/components/schemas/ContentField\"\n                            type: array\n                        description:\n                            # @review\n                            description:\n                                The document type's description.\n                            type: string\n                        description_i18n:\n                            additionalProperties:\n                                type: string\n                            # @review\n                            description:\n                                The localized document type's description.\n                            readOnly: true\n                            type: object\n                        name:\n                            # @review\n                            description:\n                                The document type's name.\n                            type: string\n                        name_i18n:\n                            additionalProperties:\n                                type: string\n                            # @review\n                            description:\n                                The localized document type's name.\n                            readOnly: true\n                            type: object\n                    type: object\n                encodingFormat:\n                    description:\n                        The document's content type (e.g., `application/pdf`, etc.).\n                    readOnly: true\n                    type: string\n                externalReferenceCode:\n                    # @review\n                    description:\n                        The document's external reference code.\n                    type: string\n                fileExtension:\n                    description:\n                        The document's file extension.\n                    readOnly: true\n                    type: string\n                id:\n                    description:\n                        The document's ID.\n                    format: int64\n                    readOnly: true\n                    type: integer\n                keywords:\n                    description:\n                        A list of keywords describing the document.\n                    items:\n                        type: string\n                    type: array\n                numberOfComments:\n                    description:\n                        The number of comments on the document.\n                    readOnly: true\n                    type: integer\n                relatedContents:\n                    # @review\n                    description:\n                        A list of related contents to this document.\n                    items:\n                        $ref: \"#/components/schemas/RelatedContent\"\n                    readOnly: true\n                    type: array\n                renderedContents:\n                    description:\n                        A list of rendered documents, which results from using a display page to process the document\n                        and return HTML.\n                    items:\n                        $ref: \"#/components/schemas/RenderedContent\"\n                    readOnly: true\n                    type: array\n                siteId:\n                    # @review\n                    description:\n                        The ID of the site to which this document is scoped.\n                    format: int64\n                    readOnly: true\n                    type: integer\n                sizeInBytes:\n                    description:\n                        The document's size in bytes.\n                    format: int64\n                    readOnly: true\n                    type: integer\n                taxonomyCategoryBriefs:\n                    # @review\n                    description:\n                        The categories associated with this document.\n                    items:\n                        $ref: \"#/components/schemas/TaxonomyCategoryBrief\"\n                    readOnly: true\n                    type: array\n                taxonomyCategoryIds:\n                    description:\n                        A write-only field that adds `TaxonomyCategory` instances to the document.\n                    items:\n                        format: int64\n                        type: integer\n                    type: array\n                    writeOnly: true\n                title:\n                    description:\n                        The document's main title/name.\n                    type: string\n                viewableBy:\n                    description:\n                        A write-only property that specifies the document's default permissions.\n                    enum: [Anyone, Members, Owner]\n                    type: string\n                    writeOnly: true\n            type: object\n        DocumentFolder:\n            description:\n                Represents a document folder that can contain documents and other folders.\n            properties:\n                actions:\n                    additionalProperties:\n                        additionalProperties:\n                            type: string\n                        type: object\n                    # @review\n                    description:\n                        Block of actions allowed by the user making the request.\n                    readOnly: true\n                    type: object\n                assetLibraryKey:\n                    # @review\n                    description:\n                        The key of the asset library to which the folder is scoped.\n                    readOnly: true\n                    type: string\n                creator:\n                    allOf:\n                        - $ref: \"#/components/schemas/Creator\"\n                    description:\n                        The folder's creator.\n                    readOnly: true\n                customFields:\n                    # @review\n                    description:\n                        A list of the custom fields associated with the folder.\n                    items:\n                        $ref: \"#/components/schemas/CustomField\"\n                    type: array\n                dateCreated:\n                    description:\n                        The folder's creation date.\n                    format: date-time\n                    readOnly: true\n                    type: string\n                dateModified:\n                    description:\n                        The last time a field of the folder changed.\n                    format: date-time\n                    readOnly: true\n                    type: string\n                description:\n                    description:\n                        The folder's description.\n                    type: string\n                id:\n                    description:\n                        The folder's ID.\n                    format: int64\n                    readOnly: true\n                    type: integer\n                name:\n                    description:\n                        The folder's main title/name.\n                    type: string\n                numberOfDocumentFolders:\n                    description:\n                        The number of this folder's child folders.\n                    readOnly: true\n                    type: integer\n                numberOfDocuments:\n                    description:\n                        The number of documents in this folder.\n                    readOnly: true\n                    type: integer\n                parentDocumentFolderId:\n                    # @review\n                    description:\n                        The ID of the folder's parent, if it exists.\n                    format: int64\n                    type: integer\n                siteId:\n                    description:\n                        The ID of the site to which this folder is scoped.\n                    format: int64\n                    readOnly: true\n                    type: integer\n                subscribed:\n                    # @review\n                    description:\n                        A flag that indicates whether the user making the requests is subscribed to this folder.\n                    readOnly: true\n                    type: boolean\n                viewableBy:\n                    description:\n                        A write-only property that specifies the folder's default permissions.\n                    enum: [Anyone, Members, Owner]\n                    type: string\n                    writeOnly: true\n            required:\n                - name\n            type: object\n        Experience:\n            description:\n                # @review\n                Represents a customized experience for a given page.\n            properties:\n                key:\n                    # @review\n                    description:\n                        the experience's key.\n                    type: string\n                name:\n                    # @review\n                    description:\n                        the experience's name.\n                    type: string\n                name_i18n:\n                    additionalProperties:\n                        type: string\n                    # @review\n                    description:\n                        the localized experience's names.\n                    type: object\n                segments:\n                    # @review\n                    description:\n                        A list of segments the experience is used for.\n                    items:\n                        $ref: \"../../headless-admin-user/headless-admin-user-impl/rest-openapi.yaml#Segment\"\n                    type: array\n            type: object\n        Fragment:\n            # @review\n            description:\n                Represents a template made up of CSS, HTML, and JavaScript used to build Content Pages.\n            properties:\n                collectionName:\n                    # @review\n                    description:\n                        The collection name this fragment belongs to.\n                    type: string\n                key:\n                    # @review\n                    description:\n                        The fragment's key.\n                    type: string\n                name:\n                    # @review\n                    description:\n                        The fragment's name.\n                    type: string\n            type: object\n        FragmentField:\n            # @review\n            description:\n                Represents a fragment field.\n            properties:\n                id:\n                    # @review\n                    description:\n                        The fragment field's ID.\n                    type: string\n                value:\n                    anyOf:\n                        - $ref: \"#/components/schemas/FragmentFieldBackgroundImage\"\n                        - $ref: \"#/components/schemas/FragmentFieldHTML\"\n                        - $ref: \"#/components/schemas/FragmentFieldImage\"\n                        - $ref: \"#/components/schemas/FragmentFieldText\"\n                    # @review\n                    description:\n                        The fragment field's value.\n            type: object\n        FragmentFieldBackgroundImage:\n            # @review\n            description:\n                Represents a fragment field with a background image.\n            properties:\n                backgroundFragmentImage:\n                    allOf:\n                        - $ref: \"#/components/schemas/FragmentImage\"\n                    # @review\n                    description:\n                        The fragment field's background image.\n                backgroundImage:\n                    deprecated: true\n                    description:\n                        \"Deprecated as of Athanasius (7.3.x), replaced by backgroundFragmentImage\"\n                    properties:\n                        description:\n                            oneOf:\n                                - $ref: \"#/components/schemas/FragmentInlineValue\"\n                        title:\n                            oneOf:\n                                - $ref: \"#/components/schemas/FragmentInlineValue\"\n                        url:\n                            oneOf:\n                                - $ref: \"#/components/schemas/FragmentInlineValue\"\n                                - $ref: \"#/components/schemas/FragmentMappedValue\"\n                    type: object\n            type: object\n        FragmentFieldHTML:\n            # @review\n            description:\n                Represents a fragment field with HTML.\n            properties:\n                html:\n                    # @review\n                    description:\n                        The fragment field's HTML. Can be inline or mapped to an external value.\n                    oneOf:\n                        - $ref: \"#/components/schemas/FragmentInlineValue\"\n                        - $ref: \"#/components/schemas/FragmentMappedValue\"\n            type: object\n        FragmentFieldImage:\n            # @review\n            description:\n                Represents a fragment field with an image.\n            properties:\n                fragmentImage:\n                    allOf:\n                        - $ref: \"#/components/schemas/FragmentImage\"\n                    # @review\n                    description:\n                        The fragment field's image.\n                fragmentLink:\n                    allOf:\n                        - $ref: \"#/components/schemas/FragmentLink\"\n                    # @review\n                    description:\n                        A link to a fragment.\n            type: object\n        FragmentFieldText:\n            # @review\n            description:\n                Represents a fragment field with text.\n            properties:\n                fragmentLink:\n                    allOf:\n                        - $ref: \"#/components/schemas/FragmentLink\"\n                    # @review\n                    description:\n                        A link to a fragment.\n                text:\n                    # @review\n                    description:\n                        The fragment field's text.\n                    oneOf:\n                        - $ref: \"#/components/schemas/FragmentInlineValue\"\n                        - $ref: \"#/components/schemas/FragmentMappedValue\"\n            type: object\n        FragmentImage:\n            # @review\n            description:\n                Represents a fragment image.\n            properties:\n                description:\n                    # @review\n                    description:\n                        The fragment image's description.\n                    oneOf:\n                        - $ref: \"#/components/schemas/FragmentInlineValue\"\n                fragmentImageClassPKReference:\n                    allOf:\n                        - $ref: \"#/components/schemas/FragmentImageClassPKReference\"\n                    # @review\n                    description:\n                        A reference to a fragment image class primary key.\n                title:\n                    # @review\n                    description:\n                        The fragment image's title.\n                    oneOf:\n                        - $ref: \"#/components/schemas/FragmentInlineValue\"\n                url:\n                    # @review\n                    description:\n                        The fragment image's url. Can be inline or mapped to an external value.\n                    oneOf:\n                        - $ref: \"#/components/schemas/FragmentInlineValue\"\n                        - $ref: \"#/components/schemas/FragmentMappedValue\"\n            type: object\n        FragmentImageClassPKReference:\n            # @review\n            description:\n                Represents a reference to a fragment image class primary key.\n            properties:\n                classPKReferences:\n                    additionalProperties:\n                        $ref: \"#/components/schemas/ClassPKReference\"\n                    # @review\n                    description:\n                        A map of class primary key references.\n                    type: object\n                fragmentImageConfiguration:\n                    allOf:\n                        - $ref: \"#/components/schemas/FragmentImageConfiguration\"\n                    # @review\n                    description:\n                        The fragment image's configuration.\n            type: object\n        FragmentImageConfiguration:\n            # @review\n            description:\n                Represents the Adaptive Media fragment image configuration for different viewports.\n            properties:\n                landscapeMobile:\n                    # @review\n                    description:\n                        The landscape mobile configuration of the fragment image.\n                    type: string\n                portraitMobile:\n                    # @review\n                    description:\n                        The portrait mobile configuration of the fragment image.\n                    type: string\n                tablet:\n                    # @review\n                    description:\n                        The tablet configuration of the fragment image.\n                    type: string\n            type: object\n        FragmentInlineValue:\n            # @review\n            description:\n                Represents a fragment inline value.\n            properties:\n                value:\n                    # @review\n                    description:\n                        The fragment's inline value.\n                    type: string\n                value_i18n:\n                    additionalProperties:\n                        type: string\n                    # @review\n                    description:\n                        The localized fragment's inline values.\n                    type: object\n            type: object\n        FragmentLink:\n            # @review\n            description:\n                Represents a fragment link.\n            properties:\n                href:\n                    deprecated: true\n                    oneOf:\n                        - $ref: \"#/components/schemas/FragmentInlineValue\"\n                        - $ref: \"#/components/schemas/FragmentMappedValue\"\n                target:\n                    deprecated: true\n                    enum: [Blank, Parent, Self, Top]\n                    type: string\n                value:\n                    allOf:\n                        - $ref: \"#/components/schemas/FragmentLinkValue\"\n                    # @review\n                    description:\n                        The fragment link's value.\n                value_i18n:\n                    additionalProperties:\n                        $ref: \"#/components/schemas/FragmentLinkValue\"\n                    # @review\n                    description:\n                        The localized fragment link's values.\n                    type: object\n        FragmentLinkValue:\n            # @review\n            description:\n                Represents a fragment link value.\n            properties:\n                href:\n                    # @review\n                    description:\n                        The fragment link value's hypertext reference. Can be inline or mapped to an external value.\n                    oneOf:\n                        - $ref: \"#/components/schemas/FragmentInlineValue\"\n                        - $ref: \"#/components/schemas/FragmentMappedValue\"\n                target:\n                    # @review\n                    description:\n                        The fragment link value's target (blank, parent, self, top).\n                    enum: [Blank, Parent, Self, Top]\n                    type: string\n        FragmentMappedValue:\n            # @review\n            description:\n                Represents a fragment mapped value.\n            properties:\n                defaultFragmentInlineValue:\n                    allOf:\n                        - $ref: \"#/components/schemas/FragmentInlineValue\"\n                    # @review\n                    description:\n                        The default value of the fragment mapped value.\n                defaultValue:\n                    deprecated: true\n                    description:\n                        \"Deprecated as of Athanasius (7.3.x), replaced by defaultFragmentInlineValue\"\n                    properties:\n                        value:\n                            type: string\n                        value_i18n:\n                            additionalProperties:\n                                type: string\n                            type: object\n                    type: object\n                mapping:\n                    # @review\n                    description:\n                        The mapping of the fragment mapped value.\n                    properties:\n                        fieldKey:\n                            # @review\n                            description:\n                                The mapping's field key.\n                            type: string\n                        itemReference:\n                            # @review\n                            description:\n                                The mapping's item reference.\n                            oneOf:\n                                - $ref: \"#/components/schemas/ClassFieldReference\"\n                                - $ref: \"#/components/schemas/ClassFieldsReference\"\n                                - $ref: \"#/components/schemas/ClassPKReference\"\n                                - $ref: \"#/components/schemas/ContextReference\"\n                    type: object\n            type: object\n        FragmentSettingsAllowed:\n            # @review\n            description:\n                Represents the settings of allowed fragments in a page dropzone.\n            properties:\n                allowedFragments:\n                    # @review\n                    description:\n                        A list of allowed fragments.\n                    items:\n                        $ref: \"#/components/schemas/Fragment\"\n                    type: array\n            type: object\n        FragmentSettingsUnallowed:\n            # @review\n            description:\n                Represents the settings of unallowed fragments in a page dropzone.\n            properties:\n                unallowedFragments:\n                    items:\n                        $ref: \"#/components/schemas/Fragment\"\n                    type: array\n            type: object\n        FragmentStyle:\n            # @review\n            description:\n                Represents a fragment style.\n            properties:\n                backgroundColor:\n                    # @review\n                    description:\n                        The fragment's background color.\n                    type: string\n                backgroundFragmentImage:\n                    allOf:\n                        - $ref: \"#/components/schemas/FragmentImage\"\n                    # @review\n                    description:\n                        The fragment's background image.\n                borderColor:\n                    # @review\n                    description:\n                        The fragment's border color.\n                    type: string\n                borderRadius:\n                    # @review\n                    description:\n                        The fragment's background radius.\n                    type: string\n                borderWidth:\n                    # @review\n                    description:\n                        The fragment's border width.\n                    type: string\n                fontFamily:\n                    # @review\n                    description:\n                        The fragment's font family.\n                    type: string\n                fontSize:\n                    # @review\n                    description:\n                        The fragment's font size.\n                    type: string\n                fontWeight:\n                    # @review\n                    description:\n                        The fragment's font weight.\n                    type: string\n                height:\n                    # @review\n                    description:\n                        The fragment's height.\n                    type: string\n                hidden:\n                    # @review\n                    description:\n                        Specifies if the fragment is hidden to the user.\n                    type: boolean\n                marginBottom:\n                    # @review\n                    description:\n                        The fragment's margin bottom.\n                    type: string\n                marginLeft:\n                    # @review\n                    description:\n                        The fragment's margin left.\n                    type: string\n                marginRight:\n                    # @review\n                    description:\n                        The fragment's margin right.\n                    type: string\n                marginTop:\n                    # @review\n                    description:\n                        The fragment's margin top.\n                    type: string\n                maxHeight:\n                    # @review\n                    description:\n                        The fragment's max height.\n                    type: string\n                maxWidth:\n                    # @review\n                    description:\n                        The fragment's max width.\n                    type: string\n                minHeight:\n                    # @review\n                    description:\n                        The fragment's min height.\n                    type: string\n                minWidth:\n                    # @review\n                    description:\n                        The fragment's min width.\n                    type: string\n                opacity:\n                    # @review\n                    description:\n                        The fragment's opacity.\n                    type: string\n                overflow:\n                    # @review\n                    description:\n                        The fragment's overflow behavior.\n                    type: string\n                paddingBottom:\n                    # @review\n                    description:\n                        The fragment's padding bottom.\n                    type: string\n                paddingLeft:\n                    # @review\n                    description:\n                        The fragment's padding left.\n                    type: string\n                paddingRight:\n                    # @review\n                    description:\n                        The fragment's padding right.\n                    type: string\n                paddingTop:\n                    # @review\n                    description:\n                        The fragment's padding top.\n                    type: string\n                shadow:\n                    # @review\n                    description:\n                        The fragment's shadow effect.\n                    type: string\n                textAlign:\n                    # @review\n                    description:\n                        The fragment's text align.\n                    type: string\n                textColor:\n                    # @review\n                    description:\n                        The fragment's text color.\n                    type: string\n                width:\n                    # @review\n                    description:\n                        The fragment's width.\n                    type: string\n            type: object\n        FragmentViewport:\n            # @review\n            description:\n                Represents a fragment viewport.\n            properties:\n                fragmentViewportStyle:\n                    # @review\n                    description:\n                        The fragment's viewport style.\n                    properties:\n                        hidden:\n                            # @review\n                            description:\n                                Specifies if the fragment's viewport is hidden to the user.\n                            type: boolean\n                        marginBottom:\n                            # @review\n                            description:\n                                The fragment viewport's margin bottom.\n                            type: string\n                        marginLeft:\n                            # @review\n                            description:\n                                The fragment viewport's margin left.\n                            type: string\n                        marginRight:\n                            # @review\n                            description:\n                                The fragment viewport's margin right.\n                            type: string\n                        marginTop:\n                            # @review\n                            description:\n                                The fragment viewport's margin top.\n                            type: string\n                        paddingBottom:\n                            # @review\n                            description:\n                                The fragment viewport's padding bottom.\n                            type: string\n                        paddingLeft:\n                            # @review\n                            description:\n                                The fragment viewport's padding left.\n                            type: string\n                        paddingRight:\n                            # @review\n                            description:\n                                The fragment viewport's padding right.\n                            type: string\n                        paddingTop:\n                            # @review\n                            description:\n                                The fragment viewport's padding top.\n                            type: string\n                        textAlign:\n                            description:\n                                The fragment viewport's text align.\n                            type: string\n                    type: object\n                id:\n                    # @review\n                    description:\n                        The fragment viewport's ID.\n                    type: string\n            required:\n                - fragmentViewportStyle\n                - id\n            type: object\n        Geo:\n            description:\n                A point determined by latitude and longitude.\n            properties:\n                latitude:\n                    description:\n                        The latitude of a point in space.\n                    format: double\n                    type: number\n                longitude:\n                    description:\n                        The longitude of a point in space.\n                    format: double\n                    type: number\n            type: object\n        KnowledgeBaseArticle:\n            description:\n                Represents a Knowledge Base article (`KBArticle`), the main entity in the Knowledge Base API.\n            properties:\n                actions:\n                    additionalProperties:\n                        additionalProperties:\n                            type: string\n                        type: object\n                    # @review\n                    description:\n                        Block of actions allowed by the user making the request.\n                    readOnly: true\n                    type: object\n                aggregateRating:\n                    allOf:\n                        - $ref: \"#/components/schemas/AggregateRating\"\n                    description:\n                        The article's average rating.\n                    readOnly: true\n                articleBody:\n                    description:\n                        The article's main content.\n                    type: string\n                creator:\n                    allOf:\n                        - $ref: \"#/components/schemas/Creator\"\n                    description:\n                        The article's author.\n                    readOnly: true\n                customFields:\n                    # @review\n                    description:\n                        A list of the custom fields associated with the article.\n                    items:\n                        $ref: \"#/components/schemas/CustomField\"\n                    type: array\n                dateCreated:\n                    description:\n                        The date the article was created.\n                    format: date-time\n                    readOnly: true\n                    type: string\n                dateModified:\n                    description:\n                        The last time the article's content or metadata changed.\n                    format: date-time\n                    readOnly: true\n                    type: string\n                description:\n                    description:\n                        The article's description.\n                    type: string\n                encodingFormat:\n                    description:\n                        The article's media type (e.g., HTML, BBCode, etc.).\n                    readOnly: true\n                    type: string\n                externalReferenceCode:\n                    description:\n                        The article's external reference code.\n                    type: string\n                friendlyUrlPath:\n                    description:\n                        The article's relative URL.\n                    type: string\n                id:\n                    description:\n                        The article's ID.\n                    format: int64\n                    readOnly: true\n                    type: integer\n                keywords:\n                    description:\n                        A list of keywords describing the article.\n                    items:\n                        type: string\n                    type: array\n                numberOfAttachments:\n                    description:\n                        The article's number attachments.\n                    readOnly: true\n                    type: integer\n                numberOfKnowledgeBaseArticles:\n                    description:\n                        The number of this article's child articles.\n                    readOnly: true\n                    type: integer\n                parentKnowledgeBaseArticleId:\n                    # @review\n                    description:\n                        The ID of the article's parent, if it exists.\n                    format: int64\n                    type: integer\n                parentKnowledgeBaseFolder:\n                    description:\n                        The article's parent folder, if it exists.\n                    properties:\n                        folderId:\n                            # @review\n                            description:\n                                The folder's parent ID.\n                            format: int64\n                            type: integer\n                        folderName:\n                            # @review\n                            description:\n                                The folder's parent name.\n                            type: string\n                    readOnly: true\n                    type: object\n                parentKnowledgeBaseFolderId:\n                    description:\n                        The ID of the article's parent folder, if that folder exists.\n                    format: int64\n                    type: integer\n                    writeOnly: true\n                relatedContents:\n                    # @review\n                    description:\n                        A list of related contents to this article.\n                    items:\n                        $ref: \"#/components/schemas/RelatedContent\"\n                    readOnly: true\n                    type: array\n                siteId:\n                    description:\n                        The ID of the site to which this article is scoped.\n                    format: int64\n                    readOnly: true\n                    type: integer\n                subscribed:\n                    # @review\n                    description:\n                        A flag that indicates whether the user making the requests is subscribed to this article.\n                    readOnly: true\n                    type: boolean\n                taxonomyCategoryBriefs:\n                    # @review\n                    description:\n                        The categories associated with this article.\n                    items:\n                        $ref: \"#/components/schemas/TaxonomyCategoryBrief\"\n                    readOnly: true\n                    type: array\n                taxonomyCategoryIds:\n                    # @review\n                    description:\n                        A write-only field that adds `TaxonomyCategory` instances to the article.\n                    items:\n                        format: int64\n                        type: integer\n                    type: array\n                    writeOnly: true\n                title:\n                    description:\n                        The article's main title.\n                    type: string\n                viewableBy:\n                    description:\n                        A write-only property that specifies the article's default permissions.\n                    enum: [Anyone, Members, Owner]\n                    type: string\n                    writeOnly: true\n            required:\n                - articleBody\n                - title\n            type: object\n        KnowledgeBaseAttachment:\n            description:\n                Represents a binary file attached to a Knowledge Base article.\n            properties:\n                contentUrl:\n                    description:\n                        The file's relative URL.\n                    readOnly: true\n                    type: string\n                contentValue:\n                    # @review\n                    description:\n                        optional field with the content of the document in Base64, can be embedded with nestedFields\n                    readOnly: true\n                    type: string\n                encodingFormat:\n                    description:\n                        The file's media type (e.g., application/pdf, etc.).\n                    readOnly: true\n                    type: string\n                fileExtension:\n                    description:\n                        The file's extension.\n                    readOnly: true\n                    type: string\n                id:\n                    description:\n                        The file's ID.\n                    format: int64\n                    readOnly: true\n                    type: integer\n                sizeInBytes:\n                    description:\n                        The file's size in bytes.\n                    format: int64\n                    readOnly: true\n                    type: integer\n                title:\n                    description:\n                        The file's main title.\n                    type: string\n            type: object\n        KnowledgeBaseFolder:\n            description:\n                Represents a folder for organizing Knowledge Base articles.\n            properties:\n                actions:\n                    additionalProperties:\n                        additionalProperties:\n                            type: string\n                        type: object\n                    # @review\n                    description:\n                        Block of actions allowed by the user making the request.\n                    readOnly: true\n                    type: object\n                creator:\n                    allOf:\n                        - $ref: \"#/components/schemas/Creator\"\n                    description:\n                        The folder's creator.\n                    readOnly: true\n                customFields:\n                    # @review\n                    description:\n                        A list of the custom fields associated with the folder.\n                    items:\n                        $ref: \"#/components/schemas/CustomField\"\n                    type: array\n                dateCreated:\n                    description:\n                        The date the folder was created.\n                    format: date-time\n                    readOnly: true\n                    type: string\n                dateModified:\n                    description:\n                        The last time the folder was modified.\n                    format: date-time\n                    readOnly: true\n                    type: string\n                description:\n                    description:\n                        The folder's description.\n                    type: string\n                externalReferenceCode:\n                    description:\n                        The folder's external reference code.\n                    type: string\n                id:\n                    description:\n                        The folder's ID.\n                    format: int64\n                    readOnly: true\n                    type: integer\n                name:\n                    description:\n                        The folder's main title/name.\n                    type: string\n                numberOfKnowledgeBaseArticles:\n                    description:\n                        The number of Knowledge Base articles in this folder.\n                    readOnly: true\n                    type: integer\n                numberOfKnowledgeBaseFolders:\n                    description:\n                        The number of Knowledge Base folders in this folder.\n                    readOnly: true\n                    type: integer\n                parentKnowledgeBaseFolder:\n                    description:\n                        The folder's parent Knowledge Base folder, if it exists.\n                    properties:\n                        folderId:\n                            description:\n                                The parent folder's ID.\n                            format: int64\n                            type: integer\n                        folderName:\n                            description:\n                                The parent folder's name.\n                            type: string\n                    readOnly: true\n                    type: object\n                parentKnowledgeBaseFolderId:\n                    description:\n                        The ID of the folder's parent Knowledge Base folder, if such a parent folder exists.\n                    format: int64\n                    type: integer\n                    writeOnly: true\n                siteId:\n                    description:\n                        The ID of the site to which this folder is scoped.\n                    format: int64\n                    readOnly: true\n                    type: integer\n                viewableBy:\n                    description:\n                        A write-only property that specifies the folder's default permissions.\n                    enum: [Anyone, Members, Owner]\n                    type: string\n                    writeOnly: true\n            required:\n                - name\n            type: object\n        Language:\n            # @review\n            description:\n                Describes a specific language in the platform.\n            properties:\n                countryName:\n                    # @review\n                    description:\n                        The language's contry name.\n                    type: string\n                countryName_i18n:\n                    additionalProperties:\n                        type: string\n                    # @review\n                    description:\n                        The localized language's country name values.\n                    type: object\n                id:\n                    # @review\n                    description:\n                        The language's ID.\n                    type: string\n                markedAsDefault:\n                    # @review\n                    description:\n                        A flag that indicates whether the language has benn marked as default language.\n                    type: boolean\n                name:\n                    # @review\n                    description:\n                        The language's name.\n                    type: string\n                name_i18n:\n                    additionalProperties:\n                        type: string\n                    # @review\n                    description:\n                        The localized language's name values.\n                    type: object\n            type: object\n        MasterPage:\n            # @review\n            description:\n                Represents a page with common elements (header, footer, ...) used for all or several pages of a site.\n            properties:\n                key:\n                    # @review\n                    description:\n                        The master page's key.\n                    type: string\n                name:\n                    # @review\n                    description:\n                        The master page's name.\n                    type: string\n            type: object\n        MessageBoardAttachment:\n            description:\n                A binary file attached to a message on a message board (`MessageBoardMessage`).\n            properties:\n                contentUrl:\n                    description:\n                        The file's relative URL.\n                    readOnly: true\n                    type: string\n                contentValue:\n                    # @review\n                    description:\n                        optional field with the content of the document in Base64, can be embedded with nestedFields\n                    readOnly: true\n                    type: string\n                encodingFormat:\n                    description:\n                        The file's media format (e.g., application/pdf, etc.).\n                    readOnly: true\n                    type: string\n                fileExtension:\n                    description:\n                        The file's extension.\n                    readOnly: true\n                    type: string\n                id:\n                    description:\n                        The file's ID.\n                    format: int64\n                    readOnly: true\n                    type: integer\n                sizeInBytes:\n                    description:\n                        The file's size in bytes.\n                    format: int64\n                    readOnly: true\n                    type: integer\n                title:\n                    description:\n                        The file's title.\n                    type: string\n            type: object\n        MessageBoardMessage:\n            description:\n                Represents a message on a message board. Properties follow the [Discussion Forum\n                Posting](https://schema.org/DiscussionForumPosting) specification.\n            properties:\n                actions:\n                    additionalProperties:\n                        additionalProperties:\n                            type: string\n                        type: object\n                    # @review\n                    description:\n                        Block of actions allowed by the user making the request.\n                    readOnly: true\n                    type: object\n                aggregateRating:\n                    allOf:\n                        - $ref: \"#/components/schemas/AggregateRating\"\n                    description:\n                        The message's average rating.\n                    readOnly: true\n                anonymous:\n                    description:\n                        A flag that indicates whether the message's author is anonymous.\n                    type: boolean\n                articleBody:\n                    description:\n                        The message's main content.\n                    type: string\n                creator:\n                    allOf:\n                        - $ref: \"#/components/schemas/Creator\"\n                    description:\n                        The message's author.\n                    readOnly: true\n                creatorStatistics:\n                    allOf:\n                        - $ref: \"#/components/schemas/CreatorStatistics\"\n                    # @review\n                    description:\n                        The message's creator statistics (rank, join date, number of posts, ...)\n                customFields:\n                    # @review\n                    description:\n                        A list of the custom fields associated with the blog post.\n                    items:\n                        $ref: \"#/components/schemas/CustomField\"\n                    type: array\n                dateCreated:\n                    description:\n                        The date the message was created.\n                    format: date-time\n                    readOnly: true\n                    type: string\n                dateModified:\n                    description:\n                        The last time the content or metadata of the message was changed.\n                    format: date-time\n                    readOnly: true\n                    type: string\n                encodingFormat:\n                    description:\n                        The message's media format (e.g., HTML, BBCode, etc.).\n                    type: string\n                externalReferenceCode:\n                    description:\n                        The message's external reference code.\n                    type: string\n                friendlyUrlPath:\n                    type: string\n                headline:\n                    description:\n                        The message's main title.\n                    type: string\n                id:\n                    description:\n                        The message's ID.\n                    format: int64\n                    readOnly: true\n                    type: integer\n                keywords:\n                    description:\n                        A list of keywords describing the message.\n                    items:\n                        type: string\n                    type: array\n                messageBoardSectionId:\n                    # @review\n                    description:\n                        The ID of the Message Board Section to which this message is scoped.\n                    format: int64\n                    type: integer\n                messageBoardThreadId:\n                    # @review\n                    description:\n                        The ID of the Message Board Thread to which this message is scoped.\n                    format: int64\n                    readOnly: true\n                    type: integer\n                numberOfMessageBoardAttachments:\n                    description:\n                        The number of the message's attachments.\n                    readOnly: true\n                    type: integer\n                numberOfMessageBoardMessages:\n                    description:\n                        The number of the message's child messages.\n                    readOnly: true\n                    type: integer\n                parentMessageBoardMessageId:\n                    # @review\n                    description:\n                        The ID of the message's parent, if it exists.\n                    format: int64\n                    type: integer\n                relatedContents:\n                    # @review\n                    description:\n                        A list of related contents to this message.\n                    items:\n                        $ref: \"#/components/schemas/RelatedContent\"\n                    readOnly: true\n                    type: array\n                showAsAnswer:\n                    description:\n                        A flag that indicates whether the message is answering a question.\n                    type: boolean\n                siteId:\n                    description:\n                        The ID of the site to which this message is scoped.\n                    format: int64\n                    readOnly: true\n                    type: integer\n                status:\n                    # @review\n                    description:\n                        The message's status.\n                    readOnly: true\n                    type: string\n                subscribed:\n                    # @review\n                    description:\n                        A flag that indicates whether the user making the requests is subscribed to this message.\n                    readOnly: true\n                    type: boolean\n                viewableBy:\n                    description:\n                        A write-only property that specifies the default permissions.\n                    enum: [Anyone, Members, Owner]\n                    type: string\n                    writeOnly: true\n            type: object\n        MessageBoardSection:\n            description:\n                Represents a section/folder on a message board, used to organize messages.\n            properties:\n                actions:\n                    additionalProperties:\n                        additionalProperties:\n                            type: string\n                        type: object\n                    # @review\n                    description:\n                        Block of actions allowed by the user making the request.\n                    readOnly: true\n                    type: object\n                creator:\n                    allOf:\n                        - $ref: \"#/components/schemas/Creator\"\n                    description:\n                        The section's creator.\n                    readOnly: true\n                customFields:\n                    # @review\n                    description:\n                        A list of the custom fields associated with the section.\n                    items:\n                        $ref: \"#/components/schemas/CustomField\"\n                    type: array\n                dateCreated:\n                    description:\n                        The date the section was created.\n                    format: date-time\n                    readOnly: true\n                    type: string\n                dateModified:\n                    description:\n                        The last time the section was changed.\n                    format: date-time\n                    readOnly: true\n                    type: string\n                description:\n                    description:\n                        The section's description.\n                    type: string\n                id:\n                    description:\n                        The section's ID.\n                    format: int64\n                    readOnly: true\n                    type: integer\n                numberOfMessageBoardSections:\n                    description:\n                        The number of this section's child sections.\n                    readOnly: true\n                    type: integer\n                numberOfMessageBoardThreads:\n                    description:\n                        The number of message board threads in this section.\n                    readOnly: true\n                    type: integer\n                parentMessageBoardSectionId:\n                    # @review\n                    description:\n                        The ID of the section parent's, if it exists.\n                    format: int64\n                    type: integer\n                siteId:\n                    description:\n                        The ID of the site to which this section is scoped.\n                    format: int64\n                    readOnly: true\n                    type: integer\n                subscribed:\n                    # @review\n                    description:\n                        A flag that indicates whether the user making the requests is subscribed to this section.\n                    readOnly: true\n                    type: boolean\n                title:\n                    description:\n                        The section's main title.\n                    type: string\n                viewableBy:\n                    description:\n                        A write-only property that specifies the default permissions.\n                    enum: [Anyone, Members, Owner]\n                    type: string\n                    writeOnly: true\n            required:\n                - title\n            type: object\n        # @review\n        MessageBoardThread:\n            description:\n                Represents a discussion thread in a message board.\n            properties:\n                actions:\n                    additionalProperties:\n                        additionalProperties:\n                            type: string\n                        type: object\n                    # @review\n                    description:\n                        Block of actions allowed by the user making the request.\n                    readOnly: true\n                    type: object\n                aggregateRating:\n                    allOf:\n                        - $ref: \"#/components/schemas/AggregateRating\"\n                    description:\n                        The thread's average rating.\n                    readOnly: true\n                articleBody:\n                    description:\n                        The thread's main body content (the message written as the thread's description).\n                    type: string\n                creator:\n                    allOf:\n                        - $ref: \"#/components/schemas/Creator\"\n                    description:\n                        The thread's creator.\n                    readOnly: true\n                creatorStatistics:\n                    allOf:\n                        - $ref: \"#/components/schemas/CreatorStatistics\"\n                    # @review\n                    description:\n                        The thread's creator statistics (rank, join date, number of posts, ...)\n                customFields:\n                    # @review\n                    description:\n                        A list of the custom fields associated with the thread.\n                    items:\n                        $ref: \"#/components/schemas/CustomField\"\n                    type: array\n                dateCreated:\n                    description:\n                        The date the thread was created.\n                    format: date-time\n                    readOnly: true\n                    type: string\n                dateModified:\n                    description:\n                        The last time any field of the thread changed.\n                    format: date-time\n                    readOnly: true\n                    type: string\n                encodingFormat:\n                    description:\n                        The media format of the thread's content (e.g., HTML, BBCode, etc.).\n                    type: string\n                friendlyUrlPath:\n                    type: string\n                hasValidAnswer:\n                    # @review\n                    description:\n                        A flag that indicates whether this thread has a message considered as valid\n                    type: boolean\n                headline:\n                    description:\n                        The thread's main title.\n                    type: string\n                id:\n                    description:\n                        The thread's ID.\n                    format: int64\n                    readOnly: true\n                    type: integer\n                keywords:\n                    description:\n                        A list of keywords describing the thread.\n                    items:\n                        type: string\n                    type: array\n                locked:\n                    # @review\n                    description:\n                        A flag that indicates whether this thread is locked.\n                    readOnly: true\n                    type: boolean\n                messageBoardSectionId:\n                    # @review\n                    description:\n                        The ID of the Message Board Section to which this message is scoped.\n                    format: int64\n                    type: integer\n                numberOfMessageBoardAttachments:\n                    description:\n                        The number of the thread's attachments.\n                    readOnly: true\n                    type: integer\n                numberOfMessageBoardMessages:\n                    description:\n                        The number of the thread's messages.\n                    readOnly: true\n                    type: integer\n                relatedContents:\n                    # @review\n                    description:\n                        A list of related contents to this thread.\n                    items:\n                        $ref: \"#/components/schemas/RelatedContent\"\n                    readOnly: true\n                    type: array\n                seen:\n                    # @review\n                    description:\n                        A flag that indicates whether this thread has been seen.\n                    type: boolean\n                showAsQuestion:\n                    description:\n                        A flag that indicates whether this thread was posted as a question that can receive approved\n                        answers.\n                    type: boolean\n                siteId:\n                    description:\n                        The ID of the site to which this thread is scoped.\n                    format: int64\n                    readOnly: true\n                    type: integer\n                status:\n                    # @review\n                    description:\n                        The thread's status.\n                    readOnly: true\n                    type: string\n                subscribed:\n                    # @review\n                    description:\n                        A flag that indicates whether the user making the requests is subscribed to this thread.\n                    type: boolean\n                taxonomyCategoryBriefs:\n                    # @review\n                    description:\n                        The categories associated with this thread.\n                    items:\n                        $ref: \"#/components/schemas/TaxonomyCategoryBrief\"\n                    readOnly: true\n                    type: array\n                taxonomyCategoryIds:\n                    # @review\n                    description:\n                        A write-only field that adds `TaxonomyCategory` instances to the thread.\n                    items:\n                        format: int64\n                        type: integer\n                    type: array\n                    writeOnly: true\n                threadType:\n                    description:\n                        The thread's type.\n                    type: string\n                viewCount:\n                    description:\n                        The number of views of this thread.\n                    format: int64\n                    readOnly: true\n                    type: integer\n                viewableBy:\n                    description:\n                        A write-only property that specifies the thread's default permissions.\n                    enum: [Anyone, Members, Owner]\n                    type: string\n                    writeOnly: true\n            required:\n                - headline\n            type: object\n        NavigationMenu:\n            # @review\n            description:\n                Represents a navigation menu.\n            properties:\n                actions:\n                    additionalProperties:\n                        additionalProperties:\n                            type: string\n                        type: object\n                    # @review\n                    description:\n                        Block of actions allowed by the user making the request.\n                    readOnly: true\n                    type: object\n                creator:\n                    allOf:\n                        - $ref: \"#/components/schemas/Creator\"\n                    # @review\n                    description:\n                        The navigation menu's creator.\n                    readOnly: true\n                dateCreated:\n                    # @review\n                    description:\n                        The navigation menu's creation date.\n                    format: date-time\n                    readOnly: true\n                    type: string\n                dateModified:\n                    # @review\n                    description:\n                        The last time the navigation menu changed.\n                    format: date-time\n                    readOnly: true\n                    type: string\n                id:\n                    # @review\n                    description:\n                        The navigation menu's ID.\n                    format: int64\n                    readOnly: true\n                    type: integer\n                name:\n                    # @review\n                    description:\n                        The navigation menu's name.\n                    type: string\n                navigationMenuItems:\n                    # @review\n                    description:\n                        The list of navigation menu items this navigation menu has.\n                    items:\n                        $ref: \"#/components/schemas/NavigationMenuItem\"\n                    type: array\n                navigationType:\n                    # @review\n                    description:\n                        The navigation menu's type (primary, secondary, social).\n                    enum: [Primary, Secondary, Social]\n                    type: string\n                siteId:\n                    # @review\n                    description:\n                        The ID of the site to which this navigation menu is scoped.\n                    format: int64\n                    readOnly: true\n                    type: integer\n        NavigationMenuItem:\n            # @review\n            description:\n                Represents a navigation menu item.\n            properties:\n                availableLanguages:\n                    # @review\n                    description:\n                        The list of languages the navigation menu item has a translation for.\n                    items:\n                        type: string\n                    readOnly: true\n                    type: array\n                creator:\n                    allOf:\n                        - $ref: \"#/components/schemas/Creator\"\n                     # @review\n                    description:\n                        The navigation menu item's creator.\n                    readOnly: true\n                dateCreated:\n                    # @review\n                    description:\n                        The navigation menu item's creation date.\n                    format: date-time\n                    readOnly: true\n                    type: string\n                dateModified:\n                    # @review\n                    description:\n                        The last time the navigation menu item changed.\n                    format: date-time\n                    readOnly: true\n                    type: string\n                id:\n                    # @review\n                    description:\n                        The navigation menu item's ID.\n                    format: int64\n                    type: integer\n                link:\n                    # @review\n                    description:\n                        The link to a page on the server.\n                    format: uri\n                    type: string\n                link_i18n:\n                    additionalProperties:\n                        format: uri\n                        type: string\n                    # @review\n                    description:\n                        The localized links to a page on the server.\n                    type: object\n                name:\n                    # @review\n                    description:\n                        The navigation menu item's name.\n                    type: string\n                name_i18n:\n                    additionalProperties:\n                        type: string\n                    # @review\n                    description:\n                        The localized navigation menu item's names.\n                    type: object\n                navigationMenuItems:\n                    # @review\n                    description:\n                        The navigation menu items this navigation menu item has.\n                    items:\n                        $ref: \"#/components/schemas/NavigationMenuItem\"\n                    type: array\n                parentNavigationMenuId:\n                    # @review\n                    description:\n                        The ID of the navigation menu item's parent.\n                    format: int64\n                    readOnly: true\n                    type: integer\n                sitePageURL:\n                    # @review\n                    description:\n                        The navigation menu item's linked site page URL.\n                    readOnly: true\n                    type: string\n                type:\n                    # @review\n                    description:\n                        The navigation menu item's type.\n                    readOnly: true\n                    type: string\n                url:\n                    # @review\n                    description:\n                        The navigation menu item's linked URL.\n                    type: string\n                useCustomName:\n                    type: boolean\n        OpenGraphSettings:\n            # @review\n            description:\n                Represents settings related with Open Graph protocol.\n            properties:\n                description:\n                    # @review\n                    description:\n                        The Open Graph's description.\n                    type: string\n                description_i18n:\n                    additionalProperties:\n                        type: string\n                    # @review\n                    description:\n                        The localized Open Graph's descriptions.\n                    type: object\n                image:\n                    allOf:\n                        - $ref: \"#/components/schemas/ContentDocument\"\n                    # @review\n                    description:\n                        The Open Graph's image.\n                title:\n                    # @review\n                    description:\n                        The Open Graph's title.\n                    type: string\n                title_i18n:\n                    additionalProperties:\n                        type: string\n                    # @review\n                    description:\n                        The localized Open Graph's titles.\n                    type: object\n            type: object\n        PageCollectionDefinition:\n            # @review\n            description:\n                Represents a definition of a Page Collection.\n            properties:\n                collectionConfig:\n                    properties:\n                        collectionReference:\n                            # @review\n                            description:\n                                The page collection's reference.\n                            oneOf:\n                                - $ref: \"#/components/schemas/ClassNameReference\"\n                                - $ref: \"#/components/schemas/ClassPKReference\"\n                        collectionType:\n                            # @review\n                            description:\n                                The page collection's type (Collection, CollectionProvider).\n                            enum: [Collection, CollectionProvider]\n                            type: string\n                    required:\n                        - collectionReference\n                        - collectionType\n                    type: object\n                displayAllItems:\n                    # @review\n                    description:\n                        Whether to show all items when pagination is disabled.\n                    type: boolean\n                displayAllPages:\n                    # @review\n                    description:\n                        Whether to show all pages when pagination is enabled.\n                    type: boolean\n                fragmentStyle:\n                    allOf:\n                        - $ref: \"#/components/schemas/FragmentStyle\"\n                    # @review\n                    description:\n                        The fragment style of the page collection.\n                fragmentViewports:\n                    # @review\n                    description:\n                        The fragment viewports of the page collection.\n                    items:\n                        $ref: \"#/components/schemas/FragmentViewport\"\n                    type: array\n                listItemStyle:\n                    # @review\n                    description:\n                        The style of a list of items in the page collection.\n                    type: string\n                listStyle:\n                    # @review\n                    description:\n                        The style of a list in the page collection.\n                    type: string\n                numberOfColumns:\n                    # @review\n                    description:\n                        The number of columns in the page collection.\n                    type: integer\n                numberOfItems:\n                    # @review\n                    description:\n                        The maximum number of items to display in the page collection when pagination is disabled.\n                    type: integer\n                numberOfItemsPerPage:\n                    # @review\n                    description:\n                        The number of items per page in the page collection.\n                    type: integer\n                numberOfPages:\n                    # @review\n                    description:\n                        The maximum number of pages to show when pagination is enabled.\n                    type: integer\n                paginationType:\n                    # @review\n                    description:\n                        The type of pagination.\n                    enum: [\n                        None,\n                        Numeric,\n                        # \"Deprecated as of Cavanaugh (7.4.x), replaced by Numeric\"\n                        Regular,\n                        Simple]\n                    type: string\n                showAllItems:\n                    deprecated: true\n                    # @review\n                    description:\n                        Whether to show all items when pagination is enabled. Deprecated as of Cavanaugh (7.4.x),\n                        replaced by displayAllPages\n                    type: boolean\n                templateKey:\n                    # @review\n                    description:\n                        The page collection's template key.\n                    type: string\n            type: object\n        PageCollectionItemDefinition:\n            # @review\n            description:\n                Represents a definition of a Page Collection Item.\n            properties:\n                collectionItemConfig:\n                    # @review\n                    description:\n                        The page collection item's configuration.\n                    type: object\n            type: object\n        PageColumnDefinition:\n            # @review\n            description:\n                Represents a definition of a Page Column.\n            properties:\n                columnViewportConfig:\n                    deprecated: true\n                    description:\n                        \"Deprecated as of Athanasius (7.3.x), replaced by columnViewports\"\n                    properties:\n                        landscapeMobile:\n                            properties:\n                                size:\n                                    maximum: 12\n                                    minimum: 1\n                                    type: integer\n                            type: object\n                        portraitMobile:\n                            properties:\n                                size:\n                                    maximum: 12\n                                    minimum: 1\n                                    type: integer\n                            type: object\n                        tablet:\n                            properties:\n                                size:\n                                    maximum: 12\n                                    minimum: 1\n                                    type: integer\n                            type: object\n                    type: object\n                columnViewports:\n                    # @review\n                    description:\n                        A list of column viewports of the page column definition.\n                    items:\n                        $ref: \"#/components/schemas/ColumnViewport\"\n                    type: array\n                size:\n                    # @review\n                    description:\n                        The page column's size.\n                    maximum: 12\n                    minimum: 1\n                    type: integer\n            type: object\n        PageDefinition:\n            # @review\n            description:\n                Represent a definition of a Page.\n            properties:\n                pageElement:\n                    allOf:\n                        - $ref: \"#/components/schemas/PageElement\"\n                    # @review\n                    description:\n                        The page's page element.\n                settings:\n                    allOf:\n                        - $ref: \"#/components/schemas/Settings\"\n                    # @review\n                    description:\n                        The page's settings.\n                version:\n                    # @review\n                    description:\n                        The version of the JSON generated by page definition.\n                    format: double\n                    type: number\n            type: object\n        PageDropZoneDefinition:\n            # @review\n            description:\n                Represent a definition of a Page drop zone.\n            properties:\n                fragmentSettings:\n                    # @review\n                    description:\n                        The page drop zone's allowed or unallowed fragments.\n                    oneOf:\n                        - $ref: \"#/components/schemas/FragmentSettingsAllowed\"\n                        - $ref: \"#/components/schemas/FragmentSettingsUnallowed\"\n            type: object\n        PageElement:\n            # @review\n            description:\n                Represents a Page element.\n            properties:\n                definition:\n                    # @review\n                    description:\n                        The page element's definition.\n                    oneOf:\n                        - $ref: \"#/components/schemas/PageCollectionDefinition\"\n                        - $ref: \"#/components/schemas/PageCollectionItemDefinition\"\n                        - $ref: \"#/components/schemas/PageColumnDefinition\"\n                        - $ref: \"#/components/schemas/PageDropZoneDefinition\"\n                        - $ref: \"#/components/schemas/PageFragmentInstanceDefinition\"\n                        - $ref: \"#/components/schemas/PageRootDefinition\"\n                        - $ref: \"#/components/schemas/PageRowDefinition\"\n                        - $ref: \"#/components/schemas/PageSectionDefinition\"\n                        - $ref: \"#/components/schemas/PageWidgetInstanceDefinition\"\n                pageElements:\n                    # @review\n                    description:\n                        A list of the page elements this page element has.\n                    items:\n                        $ref: \"#/components/schemas/PageElement\"\n                    type: array\n                type:\n                    # @review\n                    description:\n                        The page element's type (collection, collection item,, column, drop zone, fragment, fragment\n                        drop zone, root, row, section or widget).\n                    enum: [Collection, CollectionItem, Column, DropZone, Fragment, FragmentDropZone, Root, Row, Section,\n                        Widget]\n                    type: string\n        PageFragmentInstanceDefinition:\n            # @review\n            description:\n                Represents a definition of a Page Fragment Instance.\n            properties:\n                fragment:\n                    allOf:\n                        - $ref: \"#/components/schemas/Fragment\"\n                    # @review\n                    description:\n                        The fragment of the page fragment instance.\n                fragmentConfig:\n                    additionalProperties:\n                        type: object\n                    # @review\n                    description:\n                        The page fragment instance's configuration.\n                    type: object\n                fragmentFields:\n                    # @review\n                    description:\n                        The fragment fields of the page fragment instance.\n                    items:\n                        $ref: \"#/components/schemas/FragmentField\"\n                    type: array\n                fragmentStyle:\n                    allOf:\n                        - $ref: \"#/components/schemas/FragmentStyle\"\n                    # @review\n                    description:\n                        The fragment style of the page fragment instance.\n                fragmentViewports:\n                    # @review\n                    description:\n                        A list of fragment viewports of the page fragment instance.\n                    items:\n                        $ref: \"#/components/schemas/FragmentViewport\"\n                    type: array\n                indexed:\n                    # @review\n                    description:\n                        A flag that indicates whether the page fragment instance is indexed or not.\n                    type: boolean\n                widgetInstances:\n                    # @review\n                    description:\n                        A list of widget instances of the page fragment instance.\n                    items:\n                        $ref: \"#/components/schemas/WidgetInstance\"\n                    type: array\n            type: object\n        PageRootDefinition:\n            # @review\n            description:\n                Represents a definition of a Root Page.\n            type: object\n        PageRowDefinition:\n            # @review\n            description:\n                Represents a definition of a Page row.\n            properties:\n                fragmentStyle:\n                    allOf:\n                        - $ref: \"#/components/schemas/FragmentStyle\"\n                    # @review\n                    description:\n                        The fragment style of a Page row.\n                fragmentViewports:\n                    # @review\n                    description:\n                        A list of fragment viewports of a Page row.\n                    items:\n                        $ref: \"#/components/schemas/FragmentViewport\"\n                    type: array\n                gutters:\n                    # @review\n                    description:\n                        A flag that indicates whether the page row has gutters.\n                    type: boolean\n                indexed:\n                    # @review\n                    description:\n                        A flag that indicates whether the page row is indexed or not.\n                    type: boolean\n                modulesPerRow:\n                    # @review\n                    description:\n                        The page row's modules per row.\n                    type: integer\n                numberOfColumns:\n                    # @review\n                    description:\n                        The page row's number of columns.\n                    type: integer\n                reverseOrder:\n                    # @review\n                    description:\n                        A flag that indicates whether the page row has reverse order.\n                    type: boolean\n                rowViewportConfig:\n                    deprecated: true\n                    description:\n                        \"Deprecated as of Athanasius (7.3.x), replaced by rowViewports\"\n                    properties:\n                        landscapeMobile:\n                            properties:\n                                modulesPerRow:\n                                    type: integer\n                                reverseOrder:\n                                    type: boolean\n                                verticalAlignment:\n                                    type: string\n                            type: object\n                        portraitMobile:\n                            properties:\n                                modulesPerRow:\n                                    type: integer\n                                reverseOrder:\n                                    type: boolean\n                                verticalAlignment:\n                                    type: string\n                            type: object\n                        tablet:\n                            properties:\n                                modulesPerRow:\n                                    type: integer\n                                reverseOrder:\n                                    type: boolean\n                                verticalAlignment:\n                                    type: string\n                            type: object\n                    type: object\n                rowViewports:\n                    # @review\n                    description:\n                        A list of viewports of the page row.\n                    items:\n                        $ref: \"#/components/schemas/RowViewport\"\n                    type: array\n                verticalAlignment:\n                    # @review\n                    description:\n                        The vertical aligment property of the page row.\n                    type: string\n            type: object\n        PageSectionDefinition:\n            # @review\n            description:\n                Represents a definition of a Page section.\n            properties:\n                backgroundColor:\n                    deprecated: true\n                    type: string\n                backgroundFragmentImage:\n                    allOf:\n                        - $ref: \"#/components/schemas/FragmentImage\"\n                    # @review\n                    description:\n                        The background fragment image of the page section.\n                backgroundImage:\n                    deprecated: true\n                    description:\n                        \"Deprecated as of Athanasius (7.3.x), replaced by backgroundFragmentImage\"\n                    properties:\n                        description:\n                            oneOf:\n                                - $ref: \"#/components/schemas/FragmentInlineValue\"\n                        title:\n                            oneOf:\n                                - $ref: \"#/components/schemas/FragmentInlineValue\"\n                        url:\n                            oneOf:\n                                - $ref: \"#/components/schemas/FragmentInlineValue\"\n                                - $ref: \"#/components/schemas/FragmentMappedValue\"\n                    type: object\n                fragmentLink:\n                    allOf:\n                        - $ref: \"#/components/schemas/FragmentLink\"\n                    # @review\n                    description:\n                        The fragment link of the page section.\n                fragmentStyle:\n                    allOf:\n                        - $ref: \"#/components/schemas/FragmentStyle\"\n                    # @review\n                    description:\n                        The fragment style of the page section.\n                fragmentViewports:\n                    # @review\n                    description:\n                        A list of fragment viewports of the page section.\n                    items:\n                        $ref: \"#/components/schemas/FragmentViewport\"\n                    type: array\n                indexed:\n                    # @review\n                    description:\n                        A flag that indicates whether the page section is indexed or not.\n                    type: boolean\n                layout:\n                    # @review\n                    description:\n                        the page section's layout.\n                    properties:\n                        align:\n                            deprecated: true\n                            enum: [Baseline, Center, End, None, Start, Stretch]\n                            type: string\n                        borderColor:\n                            deprecated: true\n                            type: string\n                        borderRadius:\n                            deprecated: true\n                            enum: [Circle, Large, None, Pill, Regular]\n                            type: string\n                        borderWidth:\n                            deprecated: true\n                            type: integer\n                        containerType:\n                            # @review\n                            description:\n                                The container's type (fixed or fluid).\n                            enum: [Fixed, Fluid]\n                            type: string\n                        contentDisplay:\n                            deprecated: true\n                            enum: [Block, FlexColumn, FlexRow]\n                            type: string\n                        flexWrap:\n                            enum: [NoWrap, Wrap, WrapReverse]\n                            type: string\n                        htmlTag:\n                            enum: [Article, Aside, Div, Footer, Header, Main, Nav, Section]\n                            type: string\n                        justify:\n                            deprecated: true\n                            enum: [Center, End, None, SpaceAround, SpaceBetween, Start]\n                            type: string\n                        marginBottom:\n                            deprecated: true\n                            type: integer\n                        marginLeft:\n                            deprecated: true\n                            type: integer\n                        marginRight:\n                            deprecated: true\n                            type: integer\n                        marginTop:\n                            deprecated: true\n                            type: integer\n                        opacity:\n                            deprecated: true\n                            type: integer\n                        paddingBottom:\n                            deprecated: true\n                            type: integer\n                        paddingHorizontal:\n                            deprecated: true\n                            type: integer\n                        paddingLeft:\n                            deprecated: true\n                            type: integer\n                        paddingRight:\n                            deprecated: true\n                            type: integer\n                        paddingTop:\n                            deprecated: true\n                            type: integer\n                        shadow:\n                            deprecated: true\n                            enum: [Default, Large, None, Regular, Small]\n                            type: string\n                        widthType:\n                            # @review\n                            description:\n                                The width's type (fixed or fluid).\n                            enum: [Fixed, Fluid]\n                            type: string\n                    type: object\n            type: object\n        PageSettings:\n            # @review\n            description:\n                Represents the settings of a Page.\n            properties:\n                customMetaTags:\n                    # @review\n                    description:\n                        A list of custom metatags this page has.\n                    items:\n                        $ref: \"#/components/schemas/CustomMetaTag\"\n                    type: array\n                hiddenFromNavigation:\n                    # @review\n                    description:\n                        A flag that indicates whether the page is hidden from navigation.\n                    type: boolean\n                openGraphSettings:\n                    allOf:\n                        - $ref: \"#/components/schemas/OpenGraphSettings\"\n                    # @review\n                    description:\n                        The page's Open Graph settings.\n                seoSettings:\n                    allOf:\n                        - $ref: \"#/components/schemas/SEOSettings\"\n                    # @review\n                    description:\n                        The page's SEO settings.\n            type: object\n        PageTemplate:\n            # @review\n            description:\n                Represents a Page template.\n            properties:\n                creator:\n                    allOf:\n                        - $ref: \"#/components/schemas/Creator\"\n                    # @review\n                    description:\n                        The page template's creator.\n                    readOnly: true\n                dateCreated:\n                    # @review\n                    description:\n                        The page template's creation date.\n                    format: date-time\n                    readOnly: true\n                    type: string\n                dateModified:\n                    # @review\n                    description:\n                        The last time the page template changed.\n                    format: date-time\n                    readOnly: true\n                    type: string\n                id:\n                    # @review\n                    description:\n                        The page template's ID.\n                    format: int64\n                    readOnly: true\n                    type: integer\n                keywords:\n                    # @review\n                    description:\n                        A list of keywords describing the page template.\n                    items:\n                        type: string\n                    type: array\n                name:\n                    # @review\n                    description:\n                        The page template's name.\n                    type: string\n                pageDefinition:\n                    allOf:\n                        - $ref: \"#/components/schemas/PageDefinition\"\n                    # @review\n                    description:\n                        The page template's definition.\n                pageTemplateCollection:\n                    allOf:\n                        - $ref: \"#/components/schemas/PageTemplateCollection\"\n                    # @review\n                    description:\n                        The page template's collection.\n                    readOnly: true\n                taxonomyCategoryBriefs:\n                    description:\n                        The categories associated with this page template.\n                    items:\n                        $ref: \"#/components/schemas/TaxonomyCategoryBrief\"\n                    readOnly: true\n                    type: array\n                taxonomyCategoryIds:\n                    # @review\n                    description:\n                        A write-only field that adds `TaxonomyCategory` instances to the page template.\n                    items:\n                        format: int64\n                        type: integer\n                    type: array\n                    writeOnly: true\n                uuid:\n                    description:\n                        A valid external identifier to reference this page template.\n                    readOnly: true\n                    type: string\n            type: object\n        PageTemplateCollection:\n            # @review\n            description:\n                Represents a Page template collection.\n            properties:\n                creator:\n                    allOf:\n                        - $ref: \"#/components/schemas/Creator\"\n                    # @review\n                    description:\n                        The page template collection's creator.\n                    readOnly: true\n                dateCreated:\n                    # @review\n                    description:\n                        The page template collection's creation date.\n                    format: date-time\n                    readOnly: true\n                    type: string\n                dateModified:\n                    # @review\n                    description:\n                        The last time the page template collection changed.\n                    format: date-time\n                    readOnly: true\n                    type: string\n                description:\n                    # @review\n                    description:\n                        The page template collection's description.\n                    type: string\n                id:\n                    # @review\n                    description:\n                        The page template collection's ID.\n                    format: int64\n                    readOnly: true\n                    type: integer\n                name:\n                    # @review\n                    description:\n                        The page template collection's name.\n                    type: string\n                uuid:\n                    description:\n                        A valid external identifier to reference this page template collection.\n                    readOnly: true\n                    type: string\n            type: object\n        PageWidgetInstanceDefinition:\n            # @review\n            description:\n                Represents a definition of a Page Widget instance.\n            properties:\n                fragmentStyle:\n                    allOf:\n                        - $ref: \"#/components/schemas/FragmentStyle\"\n                    # @review\n                    description:\n                        The fragment style of the page widget instance.\n                fragmentViewports:\n                    # @review\n                    description:\n                        A list of fragment viewports of the page widget instance.\n                    items:\n                        $ref: \"#/components/schemas/FragmentViewport\"\n                    type: array\n                widgetInstance:\n                    allOf:\n                        - $ref: \"#/components/schemas/WidgetInstance\"\n                    # @review\n                    description:\n                        The widget instance of the page widget instance.\n            type: object\n        Rating:\n            description:\n                Represents a rating/score received by any kind of asset. Properties follow the\n                [Rating](https://schema.org/Rating) specification.\n            properties:\n                actions:\n                    additionalProperties:\n                        additionalProperties:\n                            type: string\n                        type: object\n                    # @review\n                    description:\n                        Block of actions allowed by the user making the request.\n                    readOnly: true\n                    type: object\n                bestRating:\n                    description:\n                        The best possible rating an asset can receive (normalized to 1.0 by default).\n                    format: double\n                    readOnly: true\n                    type: number\n                creator:\n                    allOf:\n                        - $ref: \"#/components/schemas/Creator\"\n                    description:\n                        The rating's creator.\n                    readOnly: true\n                dateCreated:\n                    description:\n                        The rating's creation date.\n                    format: date-time\n                    readOnly: true\n                    type: string\n                dateModified:\n                    description:\n                        The last time a field of the rating changed.\n                    format: date-time\n                    readOnly: true\n                    type: string\n                id:\n                    description:\n                        The rating's ID.\n                    format: int64\n                    readOnly: true\n                    type: integer\n                ratingValue:\n                    description:\n                        The rating's value.\n                    format: double\n                    type: number\n                worstRating:\n                    description:\n                        The worst possible rating an asset can receive (normalized to 0.0 by default).\n                    format: double\n                    readOnly: true\n                    type: number\n            type: object\n        RelatedContent:\n            # @review\n            description:\n                Represents a relationship between two resources, internally modeled as AssetLink.\n            properties:\n                contentType:\n                    description:\n                        The type of the content.\n                    readOnly: true\n                    type: string\n                id:\n                    description:\n                        The identifier of the resource.\n                    format: int64\n                    readOnly: true\n                    type: integer\n                title:\n                    description:\n                        The title of the content.\n                    readOnly: true\n                    type: string\n        RenderedContent:\n            # @review\n            description:\n                Rendered content, which results from using a template or display page to process the content and return\n                HTML.\n            properties:\n                contentTemplateId:\n                    # @review\n                    description:\n                        The ID of the template or display page used to render the content.\n                    readOnly: true\n                    type: string\n                contentTemplateName:\n                    # @review\n                    description:\n                        The name of the template or display page used to render the content.\n                    type: string\n                contentTemplateName_i18n:\n                    additionalProperties:\n                        type: string\n                    # @review\n                    description:\n                        The localized names of the template or display page used to render the content.\n                    type: object\n                markedAsDefault:\n                    # @review\n                    description:\n                        Specifies if the template or display page are marked as default to display the content.\n                    type: boolean\n                renderedContentURL:\n                    # @review\n                    description:\n                        An absolute URL to the rendered content.\n                    format: uri\n                    type: string\n                renderedContentValue:\n                    # @review\n                    description:\n                        Optional field with the rendered content, can be embedded with nestedFields.\n                    type: string\n            type: object\n        RenderedPage:\n            # @review\n            description:\n                A list of rendered pages, which results from using a page template and the appropriate viewport to\n                process the page and return HTML.\n            properties:\n                masterPageId:\n                    # @review\n                    description:\n                        The ID of the master page used to render the content.\n                    readOnly: true\n                    type: string\n                masterPageName:\n                    # @review\n                    description:\n                        The name of the master page used to render the content.\n                    type: string\n                pageTemplateId:\n                    # @review\n                    description:\n                        The ID of the template used to render the content.\n                    readOnly: true\n                    type: string\n                pageTemplateName:\n                    # @review\n                    description:\n                        The name of the template used to render the content.\n                    type: string\n                renderedPageURL:\n                    # @review\n                    description:\n                        An absolute URL to the rendered page.\n                    type: string\n            type: object\n        RowViewport:\n            # @review\n            description:\n                Represents a row viewport.\n            properties:\n                id:\n                    # @review\n                    description:\n                        The row vieport's ID.\n                    type: string\n                rowViewportDefinition:\n                    # @review\n                    description:\n                        The definition of the row vieport.\n                    properties:\n                        modulesPerRow:\n                            # @review\n                            description:\n                                The number of modules per row.\n                            type: integer\n                        reverseOrder:\n                            # @review\n                            description:\n                                A flag that indicates whether the row viewport has reverse order.\n                            type: boolean\n                        verticalAlignment:\n                            # @review\n                            description:\n                                The vertical aligment property of the row viewport.\n                            type: string\n                    type: object\n            required:\n                - id\n                - rowViewportDefinition\n            type: object\n        SEOSettings:\n            # @review\n            description:\n                Represents settings related with SEO.\n            properties:\n                customCanonicalURL:\n                    # @review\n                    description:\n                        The canonical URL of the page, if it exists.\n                    type: string\n                customCanonicalURL_i18n:\n                    additionalProperties:\n                        type: string\n                    # @review\n                    description:\n                        The localized canonical URL of the page, if it exists.\n                    type: object\n                description:\n                    type: string\n                    # @review\n                    description:\n                        The page's description to be used as summary for search engines.\n                description_i18n:\n                    additionalProperties:\n                        type: string\n                    # @review\n                    description:\n                        The localized descriptions of the page to be used as summary for search engines.\n                    type: object\n                htmlTitle:\n                    # @review\n                    description:\n                        The page's main title to be used by search engines.\n                    type: string\n                htmlTitle_i18n:\n                    additionalProperties:\n                        type: string\n                    # @review\n                    description:\n                        The localized main titles of the page to be used by search engines.\n                    type: object\n                robots:\n                    # @review\n                    description:\n                        A tag telling search engines if and how they should crawl the page.\n                    type: string\n                robots_i18n:\n                    additionalProperties:\n                        type: string\n                    # @review\n                    description:\n                        A localized tag telling search engines if and how they should crawl the page.\n                    type: object\n                seoKeywords:\n                    # @review\n                    description:\n                        A list of target keywords of the page to be used by search engines.\n                    type: string\n                seoKeywords_i18n:\n                    additionalProperties:\n                        type: string\n                    # @review\n                    description:\n                        A list of localized target keywords of the page to be used by search engines.\n                    type: object\n            type: object\n        Settings:\n            # @review\n            description:\n                Represents the settings of a page.\n            properties:\n                colorSchemeName:\n                    # @review\n                    description:\n                        The page's color scheme name.\n                    type: string\n                css:\n                    # @review\n                    description:\n                        The page's CSS.\n                    type: string\n                javascript:\n                    # @review\n                    description:\n                        The page's JavaScript.\n                    type: string\n                masterPage:\n                    allOf:\n                        - $ref: \"#/components/schemas/MasterPage\"\n                    # @review\n                    description:\n                        The page's master page.\n                styleBook:\n                    # @review\n                    description:\n                        The StyleBook that is applied to the page.\n                    properties:\n                        key:\n                            # @review\n                            description:\n                                The stylebook's key.\n                            type: string\n                        name:\n                            # @review\n                            description:\n                                The stylebook's name.\n                            type: string\n                    type: object\n                themeName:\n                    # @review\n                    description:\n                        The page's theme name.\n                    type: string\n                themeSettings:\n                    # @review\n                    description:\n                        The page's theme settings.\n                    type: object\n            type: object\n        SitePage:\n            # @review\n            description:\n                Represents a site page. This is modeled internally as a `Layout`.\n            properties:\n                actions:\n                    additionalProperties:\n                        additionalProperties:\n                            type: string\n                        type: object\n                    # @review\n                    description:\n                        Block of actions allowed by the user making the request.\n                    readOnly: true\n                    type: object\n                aggregateRating:\n                    allOf:\n                        - $ref: \"#/components/schemas/AggregateRating\"\n                    # @review\n                    description:\n                        The page's average rating.\n                    readOnly: true\n                availableLanguages:\n                    # @review\n                    description:\n                        The list of languages the page has a translation for.\n                    items:\n                        type: string\n                    readOnly: true\n                    type: array\n                creator:\n                    allOf:\n                        - $ref: \"#/components/schemas/Creator\"\n                    # @review\n                    description:\n                        The page's creator.\n                    readOnly: true\n                customFields:\n                    # @review\n                    description:\n                        Custom fields associated with the page.\n                    items:\n                        $ref: \"#/components/schemas/CustomField\"\n                    type: array\n                dateCreated:\n                    # @review\n                    description:\n                        The page's creation date.\n                    format: date-time\n                    readOnly: true\n                    type: string\n                dateModified:\n                    # @review\n                    description:\n                        The last time any field of the page was changed.\n                    format: date-time\n                    readOnly: true\n                    type: string\n                datePublished:\n                    # @review\n                    description:\n                        The page's most recent publication date.\n                    format: date-time\n                    type: string\n                experience:\n                    allOf:\n                        - $ref: \"#/components/schemas/Experience\"\n                    # @review\n                    description:\n                        Experience of the page that it's being retrieved.\n                friendlyUrlPath:\n                    # @review\n                    description:\n                        A relative URL to the page's rendered content.\n                    type: string\n                friendlyUrlPath_i18n:\n                    additionalProperties:\n                        type: string\n                    # @review\n                    description:\n                        The localized relative URLs to the page's rendered content.\n                    type: object\n                keywords:\n                    # @review\n                    description:\n                        A list of keywords describing the page.\n                    items:\n                        type: string\n                    type: array\n                pageDefinition:\n                    allOf:\n                        - $ref: \"#/components/schemas/PageDefinition\"\n                    # @review\n                    description:\n                        Optional field with the structure of all the elements of the page. Can be embedded with\n                        nestedFields when retrieving the collection of site pages. When retrieving a single site page,\n                        it will automatically be included.\n                pageSettings:\n                    allOf:\n                        - $ref: \"#/components/schemas/PageSettings\"\n                    # @review\n                    description:\n                        Settings of the page, such as SEO or OpenGraph.\n                pageType:\n                    # @review\n                    description:\n                        The type of the page.\n                    type: string\n                renderedPage:\n                    allOf:\n                        - $ref: \"#/components/schemas/RenderedPage\"\n                    # @review\n                    description:\n                        Metadata of the page such as it's master page and template.\n                siteId:\n                    # @review\n                    description:\n                        The ID of the site to which this page is scoped.\n                    format: int64\n                    readOnly: true\n                    type: integer\n                taxonomyCategoryBriefs:\n                    # @review\n                    description:\n                        The categories associated with this page.\n                    items:\n                        $ref: \"#/components/schemas/TaxonomyCategoryBrief\"\n                    readOnly: true\n                    type: array\n                taxonomyCategoryIds:\n                    # @review\n                    description:\n                        A write-only field that adds `TaxonomyCategory` instances to the page.\n                    items:\n                        format: int64\n                        type: integer\n                    type: array\n                    writeOnly: true\n                title:\n                    # @review\n                    description:\n                        The page's title.\n                    type: string\n                title_i18n:\n                    additionalProperties:\n                        type: string\n                    # @review\n                    description:\n                        The localized page's titles.\n                    type: object\n                uuid:\n                    # @review\n                    description:\n                        A valid external identifier to reference this page.\n                    readOnly: true\n                    type: string\n                viewableBy:\n                    enum:\n                        - Anyone\n                        - Members\n                        - Owner\n                    type: string\n                    writeOnly: true\n            required:\n                - title\n            type: object\n        StructuredContent:\n            description:\n                Represents content that has fields and is rendered by a template backed by a `ContentStructure`. This is\n                modeled internally as a `JournalArticle`.\n            properties:\n                actions:\n                    additionalProperties:\n                        additionalProperties:\n                            type: string\n                        type: object\n                    # @review\n                    description:\n                        Block of actions allowed by the user making the request.\n                    readOnly: true\n                    type: object\n                aggregateRating:\n                    allOf:\n                        - $ref: \"#/components/schemas/AggregateRating\"\n                    description:\n                        The structured content's average rating.\n                    readOnly: true\n                assetLibraryKey:\n                    # @review\n                    description:\n                        The key of the asset library to which the structure content is scoped.\n                    readOnly: true\n                    type: string\n                availableLanguages:\n                    description:\n                        The list of languages the structured content has a translation for.\n                    items:\n                        type: string\n                    readOnly: true\n                    type: array\n                contentFields:\n                    description:\n                        The list of fields that store the structured content's information.\n                    items:\n                        $ref: \"#/components/schemas/ContentField\"\n                    type: array\n                contentStructureId:\n                    description:\n                        The ID of the `ContentStructure`.\n                    format: int64\n                    type: integer\n                creator:\n                    allOf:\n                        - $ref: \"#/components/schemas/Creator\"\n                    description:\n                        The structured content's creator.\n                    readOnly: true\n                customFields:\n                    # @review\n                    description:\n                        A list of the custom fields associated with the structured content.\n                    items:\n                        $ref: \"#/components/schemas/CustomField\"\n                    type: array\n                dateCreated:\n                    description:\n                        The structured content's creation date.\n                    format: date-time\n                    readOnly: true\n                    type: string\n                dateModified:\n                    description:\n                        The last time any field of the structured content was changed.\n                    format: date-time\n                    readOnly: true\n                    type: string\n                datePublished:\n                    description:\n                        The structured content's most recent publication date.\n                    format: date-time\n                    type: string\n                description:\n                    description:\n                        The structured content's description.\n                    type: string\n                description_i18n:\n                    additionalProperties:\n                        type: string\n                    # @review\n                    description:\n                        The localized structured content's descriptions.\n                    type: object\n                externalReferenceCode:\n                    # @review\n                    description:\n                        The structured content's external reference code.\n                    type: string\n                friendlyUrlPath:\n                    description:\n                        A relative URL to the structured content's rendered content.\n                    type: string\n                friendlyUrlPath_i18n:\n                    additionalProperties:\n                        type: string\n                    # @review\n                    description:\n                        The localized relative URLs to the structured content's rendered content.\n                    type: object\n                id:\n                    description:\n                        The structured content's ID.\n                    format: int64\n                    readOnly: true\n                    type: integer\n                key:\n                    description:\n                        An identifier, independent of the database, that can be used to reference the structured\n                        content.\n                    readOnly: true\n                    type: string\n                keywords:\n                    description:\n                        A list of keywords describing the structured content.\n                    items:\n                        type: string\n                    type: array\n                numberOfComments:\n                    description:\n                        The number of comments the structured content has received.\n                    readOnly: true\n                    type: integer\n                priority:\n                    # @review\n                    description:\n                        The structured content's priority.\n                    format: double\n                    type: number\n                relatedContents:\n                    # @review\n                    description:\n                        A list of related contents to this structured content.\n                    items:\n                        $ref: \"#/components/schemas/RelatedContent\"\n                    readOnly: true\n                    type: array\n                renderedContents:\n                    description:\n                        A list of rendered content, which results from using a template to process the content and\n                        return HTML.\n                    items:\n                        $ref: \"#/components/schemas/RenderedContent\"\n                    readOnly: true\n                    type: array\n                siteId:\n                    description:\n                        The ID of the site to which this structured content is scoped.\n                    format: int64\n                    readOnly: true\n                    type: integer\n                subscribed:\n                    # @review\n                    description:\n                        A flag that indicates whether the user making the requests is subscribed to this structured\n                        content.\n                    readOnly: true\n                    type: boolean\n                taxonomyCategoryBriefs:\n                    # @review\n                    description:\n                        The categories associated with this structured content.\n                    items:\n                        $ref: \"#/components/schemas/TaxonomyCategoryBrief\"\n                    readOnly: true\n                    type: array\n                taxonomyCategoryIds:\n                    # @review\n                    description:\n                        A write-only field that adds `TaxonomyCategory` instances to the structured content.\n                    items:\n                        format: int64\n                        type: integer\n                    type: array\n                    writeOnly: true\n                title:\n                    description:\n                        The structured content's main title.\n                    type: string\n                title_i18n:\n                    additionalProperties:\n                        type: string\n                    # @review\n                    description:\n                        The localized structured content's main titles.\n                    type: object\n                uuid:\n                    description:\n                        A valid external identifier to reference this structured content.\n                    readOnly: true\n                    type: string\n                viewableBy:\n                    description:\n                        A write-only property that specifies the structured content's default permissions.\n                    enum: [Anyone, Members, Owner]\n                    type: string\n                    writeOnly: true\n            required:\n                - contentStructureId\n                - title\n        StructuredContentFolder:\n            description:\n                Represents a folder that can be used to organize structured content.\n            properties:\n                actions:\n                    additionalProperties:\n                        additionalProperties:\n                            type: string\n                        type: object\n                    # @review\n                    description:\n                        Block of actions allowed by the user making the request.\n                    readOnly: true\n                    type: object\n                assetLibraryKey:\n                    # @review\n                    description:\n                        The key of the asset library to which the folder is scoped.\n                    readOnly: true\n                    type: string\n                creator:\n                    allOf:\n                        - $ref: \"#/components/schemas/Creator\"\n                    description:\n                        The folder's creator.\n                    readOnly: true\n                customFields:\n                    # @review\n                    description:\n                        A list of the custom fields associated with the folder.\n                    items:\n                        $ref: \"#/components/schemas/CustomField\"\n                    type: array\n                dateCreated:\n                    description:\n                        The date the folder was created.\n                    format: date-time\n                    readOnly: true\n                    type: string\n                dateModified:\n                    description:\n                        The last time any of the folder's fields changed.\n                    format: date-time\n                    readOnly: true\n                    type: string\n                description:\n                    description:\n                        The folder's description.\n                    type: string\n                id:\n                    description:\n                        The folder's ID.\n                    format: int64\n                    readOnly: true\n                    type: integer\n                name:\n                    description:\n                        The folder's name.\n                    type: string\n                numberOfStructuredContentFolders:\n                    description:\n                        The number of structured content folders inside this folder.\n                    readOnly: true\n                    type: integer\n                numberOfStructuredContents:\n                    description:\n                        The number of structured content objects inside this folder.\n                    readOnly: true\n                    type: integer\n                parentStructuredContentFolderId:\n                    # @review\n                    description:\n                        The ID of the folder's parent, if it exists.\n                    format: int64\n                    type: integer\n                siteId:\n                    description:\n                        The ID of the site to which this folder is scoped.\n                    format: int64\n                    readOnly: true\n                    type: integer\n                subscribed:\n                    # @review\n                    description:\n                        A flag that indicates whether the user making the requests is subscribed to this folder.\n                    readOnly: true\n                    type: boolean\n                viewableBy:\n                    description:\n                        A write-only property that specifies the folder's default permissions.\n                    enum: [Anyone, Members, Owner]\n                    type: string\n                    writeOnly: true\n            required:\n                - name\n            type: object\n        TaxonomyCategoryBrief:\n            properties:\n                embeddedTaxonomyCategory:\n                    # @review\n                    description:\n                        Optional field with the embedded taxonomy category, can be embedded with nestedFields\n                    readOnly: true\n                    type: object\n                taxonomyCategoryId:\n                    description:\n                        The category's ID. This can be used to retrieve more information in the `TaxonomyCategory` API.\n                    format: int64\n                    readOnly: true\n                    type: integer\n                taxonomyCategoryName:\n                    description:\n                        The category's name.\n                    readOnly: true\n                    type: string\n                taxonomyCategoryName_i18n:\n                    additionalProperties:\n                        type: string\n                    # @review\n                    description:\n                        The localized category's names.\n                    readOnly: true\n                    type: object\n            type: object\n        WidgetInstance:\n            # @review\n            description:\n                Represents a Widget Instance.\n            properties:\n                widgetConfig:\n                    additionalProperties:\n                        type: object\n                    type: object\n                widgetInstanceId:\n                    # @review\n                    description:\n                        The widget instance's ID.\n                    type: string\n                widgetName:\n                    # @review\n                    description:\n                        The widget instance's name.\n                    type: string\n                widgetPermissions:\n                    # @review\n                    description:\n                        The widget instance's permissions.\n                    items:\n                        properties:\n                            actionKeys:\n                                # @review\n                                description:\n                                    The keys of the actions the role has permission for.\n                                items:\n                                    type: string\n                                type: array\n                            roleKey:\n                                # @review\n                                description:\n                                    The role's key.\n                                type: string\n                        type: object\n                    type: array\n            type: object\n        WikiNode:\n            # @review\n            description:\n                Represents a wiki node that can be used to organize wiki pages.\n            properties:\n                actions:\n                    additionalProperties:\n                        additionalProperties:\n                            type: string\n                        type: object\n                    # @review\n                    description:\n                        Block of actions allowed by the user making the request.\n                    readOnly: true\n                    type: object\n                creator:\n                    allOf:\n                        - $ref: \"#/components/schemas/Creator\"\n                    description:\n                        The wiki node's creator.\n                    readOnly: true\n                dateCreated:\n                    description:\n                        The date the wiki node was created.\n                    format: date-time\n                    readOnly: true\n                    type: string\n                dateModified:\n                    description:\n                        The last time any of the wiki node's fields changed.\n                    format: date-time\n                    readOnly: true\n                    type: string\n                description:\n                    description:\n                        The wiki node's description.\n                    type: string\n                externalReferenceCode:\n                    description:\n                        The wiki node's external reference code.\n                    type: string\n                id:\n                    description:\n                        The wiki node's ID.\n                    format: int64\n                    readOnly: true\n                    type: integer\n                name:\n                    description:\n                        The wiki node's name.\n                    type: string\n                numberOfWikiPages:\n                    description:\n                        The number of child wiki page on this wiki node.\n                    readOnly: true\n                    type: integer\n                siteId:\n                    description:\n                        The ID of the site to which this wiki node is scoped.\n                    format: int64\n                    readOnly: true\n                    type: integer\n                subscribed:\n                    # @review\n                    description:\n                        A flag that indicates whether the user making the requests is subscribed to this wiki node.\n                    readOnly: true\n                    type: boolean\n                viewableBy:\n                    description:\n                        A write-only property that specifies the default permissions.\n                    enum: [Anyone, Members, Owner]\n                    type: string\n                    writeOnly: true\n            type: object\n        WikiPage:\n            # @review\n            description:\n                Represents a wiki page.\n            properties:\n                actions:\n                    additionalProperties:\n                        additionalProperties:\n                            type: string\n                        type: object\n                    # @review\n                    description:\n                        Block of actions allowed by the user making the request.\n                    readOnly: true\n                    type: object\n                aggregateRating:\n                    allOf:\n                        - $ref: \"#/components/schemas/AggregateRating\"\n                    description:\n                        The blog post's average rating.\n                    readOnly: true\n                content:\n                    description:\n                        The wiki page's content.\n                    type: string\n                creator:\n                    allOf:\n                        - $ref: \"#/components/schemas/Creator\"\n                    description:\n                        The wiki page's creator.\n                    readOnly: true\n                customFields:\n                    # @review\n                    description:\n                        A list of the custom fields associated with the wiki page.\n                    items:\n                        $ref: \"#/components/schemas/CustomField\"\n                    type: array\n                dateCreated:\n                    description:\n                        The date the wiki page was created.\n                    format: date-time\n                    readOnly: true\n                    type: string\n                dateModified:\n                    description:\n                        The last time any of the wiki page's fields changed.\n                    format: date-time\n                    readOnly: true\n                    type: string\n                description:\n                    description:\n                        The wiki page's description.\n                    type: string\n                encodingFormat:\n                    description:\n                        The wiki page's media format (e.g., HTML, BBCode, etc.).\n                    type: string\n                externalReferenceCode:\n                    description:\n                        The wiki page's external reference code.\n                    type: string\n                headline:\n                    description:\n                        The wiki page's main title.\n                    type: string\n                id:\n                    description:\n                        The wiki page's ID.\n                    format: int64\n                    readOnly: true\n                    type: integer\n                keywords:\n                    description:\n                        A list of keywords describing the blog post.\n                    items:\n                        type: string\n                    type: array\n                numberOfAttachments:\n                    description:\n                        The wiki page's number attachments.\n                    readOnly: true\n                    type: integer\n                numberOfWikiPages:\n                    description:\n                        The number of child wiki page on this wiki page.\n                    readOnly: true\n                    type: integer\n                parentWikiPageId:\n                    # @review\n                    description:\n                        The ID of the wiki page's parent, if it exists.\n                    format: int64\n                    type: integer\n                relatedContents:\n                    # @review\n                    description:\n                        A list of related contents to this wiki page.\n                    items:\n                        $ref: \"#/components/schemas/RelatedContent\"\n                    readOnly: true\n                    type: array\n                siteId:\n                    description:\n                        The ID of the site to which this wiki page is scoped.\n                    format: int64\n                    readOnly: true\n                    type: integer\n                subscribed:\n                    # @review\n                    description:\n                        A flag that indicates whether the user making the requests is subscribed to this wiki page.\n                    readOnly: true\n                    type: boolean\n                taxonomyCategoryBriefs:\n                    # @review\n                    description:\n                        The categories associated with this wiki page.\n                    items:\n                        $ref: \"#/components/schemas/TaxonomyCategoryBrief\"\n                    readOnly: true\n                    type: array\n                taxonomyCategoryIds:\n                    # @review\n                    description:\n                        A write-only field that adds `TaxonomyCategory` instances to the wiki page.\n                    items:\n                        format: int64\n                        type: integer\n                    type: array\n                    writeOnly: true\n                viewableBy:\n                    description:\n                        A write-only property that specifies the default permissions.\n                    enum: [Anyone, Members, Owner]\n                    type: string\n                    writeOnly: true\n                wikiNodeId:\n                    # @review\n                    description:\n                        The ID of the wiki node to which the wiki page belongs.\n                    format: int64\n                    type: integer\n            required:\n                - encodingFormat\n                - headline\n            type: object\n        WikiPageAttachment:\n            # @review\n            description:\n                A binary file attached to a wiki page.\n            properties:\n                contentUrl:\n                    description:\n                        The file's relative URL.\n                    readOnly: true\n                    type: string\n                contentValue:\n                    # @review\n                    description:\n                        Optional field with the content of the document in Base64, can be embedded with nestedFields.\n                    readOnly: true\n                    type: string\n                encodingFormat:\n                    description:\n                        The file's media format (e.g., application/pdf, etc.).\n                    readOnly: true\n                    type: string\n                fileExtension:\n                    description:\n                        The file's extension.\n                    readOnly: true\n                    type: string\n                id:\n                    description:\n                        The file's ID.\n                    format: int64\n                    readOnly: true\n                    type: integer\n                sizeInBytes:\n                    description:\n                        The file's size in bytes.\n                    format: int64\n                    readOnly: true\n                    type: integer\n                title:\n                    description:\n                        The file's title.\n                    type: string\n            type: object\ninfo:\n    description:\n        \"A Java client JAR is available for use with the group ID 'com.liferay', artifact ID\n        'com.liferay.headless.delivery.client', and version '4.0.23'.\"\n    license:\n        name: \"Apache 2.0\"\n        url: \"http://www.apache.org/licenses/LICENSE-2.0.html\"\n    title: \"Headless Delivery\"\n    version: v1.0\nopenapi: 3.0.1\npaths:\n    \"/asset-libraries/{assetLibraryId}/content-elements\":\n        get:\n            operationId: getAssetLibraryContentElementsPage\n            parameters:\n                - in: path\n                  name: assetLibraryId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: aggregationTerms\n                  schema:\n                      items:\n                          type: string\n                      type: array\n                - in: query\n                  name: filter\n                  schema:\n                      type: string\n                - in: query\n                  name: page\n                  schema:\n                      type: integer\n                - in: query\n                  name: pageSize\n                  schema:\n                      type: integer\n                - in: query\n                  name: search\n                  schema:\n                      type: string\n                - in: query\n                  name: sort\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/ContentElement\"\n                                type: array\n                        application/xml:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/ContentElement\"\n                                type: array\n            tags: [\"ContentElement\"]\n    \"/asset-libraries/{assetLibraryId}/content-sets/by-key/{key}/content-set-elements\":\n        get:\n            operationId: getAssetLibraryContentSetByKeyContentSetElementsPage\n            parameters:\n                - in: path\n                  name: assetLibraryId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: path\n                  name: key\n                  required: true\n                  schema:\n                      type: string\n                - in: query\n                  name: page\n                  schema:\n                      type: integer\n                - in: query\n                  name: pageSize\n                  schema:\n                      type: integer\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/ContentSetElement\"\n                                type: array\n                        application/xml:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/ContentSetElement\"\n                                type: array\n            tags: [\"ContentSetElement\"]\n    \"/asset-libraries/{assetLibraryId}/content-sets/by-uuid/{uuid}/content-set-elements\":\n        get:\n            operationId: getAssetLibraryContentSetByUuidContentSetElementsPage\n            parameters:\n                - in: path\n                  name: assetLibraryId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: path\n                  name: uuid\n                  required: true\n                  schema:\n                      type: string\n                - in: query\n                  name: page\n                  schema:\n                      type: integer\n                - in: query\n                  name: pageSize\n                  schema:\n                      type: integer\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/ContentSetElement\"\n                                type: array\n                        application/xml:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/ContentSetElement\"\n                                type: array\n            tags: [\"ContentSetElement\"]\n    \"/asset-libraries/{assetLibraryId}/content-structures\":\n        get:\n            operationId: getAssetLibraryContentStructuresPage\n            parameters:\n                - in: path\n                  name: assetLibraryId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: aggregationTerms\n                  schema:\n                      items:\n                          type: string\n                      type: array\n                - in: query\n                  name: filter\n                  schema:\n                      type: string\n                - in: query\n                  name: page\n                  schema:\n                      type: integer\n                - in: query\n                  name: pageSize\n                  schema:\n                      type: integer\n                - in: query\n                  name: search\n                  schema:\n                      type: string\n                - in: query\n                  name: sort\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/ContentStructure\"\n                                type: array\n                        application/xml:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/ContentStructure\"\n                                type: array\n            tags: [\"ContentStructure\"]\n    \"/asset-libraries/{assetLibraryId}/content-structures/permissions\":\n        get:\n            operationId: getAssetLibraryContentStructurePermissionsPage\n            parameters:\n                - in: path\n                  name: assetLibraryId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: roleNames\n                  schema:\n                      type: string\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"ContentStructure\"]\n        put:\n            operationId: putAssetLibraryContentStructurePermissionsPage\n            parameters:\n                - in: path\n                  name: assetLibraryId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"ContentStructure\"]\n    \"/asset-libraries/{assetLibraryId}/content-templates\":\n        get:\n            operationId: getAssetLibraryContentTemplatesPage\n            parameters:\n                - in: path\n                  name: assetLibraryId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: aggregationTerms\n                  schema:\n                      items:\n                          type: string\n                      type: array\n                - in: query\n                  name: filter\n                  schema:\n                      type: string\n                - in: query\n                  name: page\n                  schema:\n                      type: integer\n                - in: query\n                  name: pageSize\n                  schema:\n                      type: integer\n                - in: query\n                  name: search\n                  schema:\n                      type: string\n                - in: query\n                  name: sort\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/ContentTemplate\"\n                                type: array\n                        application/xml:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/ContentTemplate\"\n                                type: array\n            tags: [\"ContentTemplate\"]\n    \"/asset-libraries/{assetLibraryId}/document-folders\":\n        get:\n            operationId: getAssetLibraryDocumentFoldersPage\n            parameters:\n                - in: path\n                  name: assetLibraryId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: aggregationTerms\n                  schema:\n                      items:\n                          type: string\n                      type: array\n                - in: query\n                  name: flatten\n                  schema:\n                      type: boolean\n                - in: query\n                  name: filter\n                  schema:\n                      type: string\n                - in: query\n                  name: page\n                  schema:\n                      type: integer\n                - in: query\n                  name: pageSize\n                  schema:\n                      type: integer\n                - in: query\n                  name: search\n                  schema:\n                      type: string\n                - in: query\n                  name: sort\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/DocumentFolder\"\n                                type: array\n                        application/xml:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/DocumentFolder\"\n                                type: array\n            tags: [\"DocumentFolder\"]\n        post:\n            operationId: postAssetLibraryDocumentFolder\n            parameters:\n                - in: path\n                  name: assetLibraryId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/DocumentFolder\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/DocumentFolder\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/DocumentFolder\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/DocumentFolder\"\n            tags: [\"DocumentFolder\"]\n    \"/asset-libraries/{assetLibraryId}/document-folders/permissions\":\n        get:\n            operationId: getAssetLibraryDocumentFolderPermissionsPage\n            parameters:\n                - in: path\n                  name: assetLibraryId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: roleNames\n                  schema:\n                      type: string\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"DocumentFolder\"]\n        put:\n            operationId: putAssetLibraryDocumentFolderPermissionsPage\n            parameters:\n                - in: path\n                  name: assetLibraryId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"DocumentFolder\"]\n    \"/asset-libraries/{assetLibraryId}/documents\":\n        get:\n            operationId: getAssetLibraryDocumentsPage\n            parameters:\n                - in: path\n                  name: assetLibraryId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: aggregationTerms\n                  schema:\n                      items:\n                          type: string\n                      type: array\n                - in: query\n                  name: flatten\n                  schema:\n                      type: boolean\n                - in: query\n                  name: filter\n                  schema:\n                      type: string\n                - in: query\n                  name: page\n                  schema:\n                      type: integer\n                - in: query\n                  name: pageSize\n                  schema:\n                      type: integer\n                - in: query\n                  name: search\n                  schema:\n                      type: string\n                - in: query\n                  name: sort\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/Document\"\n                                type: array\n                        application/xml:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/Document\"\n                                type: array\n            tags: [\"Document\"]\n        post:\n            operationId: postAssetLibraryDocument\n            parameters:\n                - in: path\n                  name: assetLibraryId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    multipart/form-data:\n                        schema:\n                            properties:\n                                document:\n                                    $ref: \"#/components/schemas/Document\"\n                                file:\n                                    format: binary\n                                    type: string\n                            type: object\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Document\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/Document\"\n            tags: [\"Document\"]\n    \"/asset-libraries/{assetLibraryId}/documents/permissions\":\n        get:\n            operationId: getAssetLibraryDocumentPermissionsPage\n            parameters:\n                - in: path\n                  name: assetLibraryId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: roleNames\n                  schema:\n                      type: string\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"Document\"]\n        put:\n            operationId: putAssetLibraryDocumentPermissionsPage\n            parameters:\n                - in: path\n                  name: assetLibraryId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"Document\"]\n    \"/asset-libraries/{assetLibraryId}/languages\":\n        get:\n            # @review\n            description:\n                Retrieves the asset libraries languages.\n            operationId: getAssetLibraryLanguagesPage\n            parameters:\n                - in: path\n                  name: assetLibraryId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/Language\"\n                                type: array\n                        application/xml:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/Language\"\n                                type: array\n            tags: [\"Language\"]\n    \"/asset-libraries/{assetLibraryId}/structured-content-folders\":\n        get:\n            operationId: getAssetLibraryStructuredContentFoldersPage\n            parameters:\n                - in: path\n                  name: assetLibraryId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: aggregationTerms\n                  schema:\n                      items:\n                          type: string\n                      type: array\n                - in: query\n                  name: flatten\n                  schema:\n                      type: boolean\n                - in: query\n                  name: filter\n                  schema:\n                      type: string\n                - in: query\n                  name: page\n                  schema:\n                      type: integer\n                - in: query\n                  name: pageSize\n                  schema:\n                      type: integer\n                - in: query\n                  name: search\n                  schema:\n                      type: string\n                - in: query\n                  name: sort\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/StructuredContentFolder\"\n                                type: array\n                        application/xml:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/StructuredContentFolder\"\n                                type: array\n            tags: [\"StructuredContentFolder\"]\n        post:\n            operationId: postAssetLibraryStructuredContentFolder\n            parameters:\n                - in: path\n                  name: assetLibraryId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/StructuredContentFolder\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/StructuredContentFolder\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/StructuredContentFolder\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/StructuredContentFolder\"\n            tags: [\"StructuredContentFolder\"]\n    \"/asset-libraries/{assetLibraryId}/structured-content-folders/permissions\":\n        get:\n            operationId: getAssetLibraryStructuredContentFolderPermissionsPage\n            parameters:\n                - in: path\n                  name: assetLibraryId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: roleNames\n                  schema:\n                      type: string\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"StructuredContentFolder\"]\n        put:\n            operationId: putAssetLibraryStructuredContentFolderPermissionsPage\n            parameters:\n                - in: path\n                  name: assetLibraryId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"StructuredContentFolder\"]\n    \"/asset-libraries/{assetLibraryId}/structured-contents\":\n        get:\n            operationId: getAssetLibraryStructuredContentsPage\n            parameters:\n                - in: path\n                  name: assetLibraryId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: aggregationTerms\n                  schema:\n                      items:\n                          type: string\n                      type: array\n                - in: query\n                  name: flatten\n                  schema:\n                      type: boolean\n                - in: query\n                  name: filter\n                  schema:\n                      type: string\n                - in: query\n                  name: page\n                  schema:\n                      type: integer\n                - in: query\n                  name: pageSize\n                  schema:\n                      type: integer\n                - in: query\n                  name: search\n                  schema:\n                      type: string\n                - in: query\n                  name: sort\n                  schema:\n                      type: string\n                - in: header\n                  name: Accept-Language\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/StructuredContent\"\n                                type: array\n                        application/xml:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/StructuredContent\"\n                                type: array\n            tags: [\"StructuredContent\"]\n        post:\n            operationId: postAssetLibraryStructuredContent\n            parameters:\n                - in: path\n                  name: assetLibraryId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: header\n                  name: Accept-Language\n                  schema:\n                      type: string\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/StructuredContent\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/StructuredContent\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/StructuredContent\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/StructuredContent\"\n            tags: [\"StructuredContent\"]\n    \"/asset-libraries/{assetLibraryId}/structured-contents/permissions\":\n        get:\n            operationId: getAssetLibraryStructuredContentPermissionsPage\n            parameters:\n                - in: path\n                  name: assetLibraryId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: roleNames\n                  schema:\n                      type: string\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"StructuredContent\"]\n        put:\n            operationId: putAssetLibraryStructuredContentPermissionsPage\n            parameters:\n                - in: path\n                  name: assetLibraryId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"StructuredContent\"]\n    \"/blog-posting-images/{blogPostingImageId}\":\n        delete:\n            description:\n                Deletes the blog post's image.\n            operationId: deleteBlogPostingImage\n            parameters:\n                - in: path\n                  name: blogPostingImageId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"BlogPostingImage\"]\n        get:\n            description:\n                Retrieves the blog post's image. The binary image is returned as a relative URL to the image itself.\n            operationId: getBlogPostingImage\n            parameters:\n                - in: path\n                  name: blogPostingImageId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/BlogPostingImage\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/BlogPostingImage\"\n            tags: [\"BlogPostingImage\"]\n    \"/blog-postings/{blogPostingId}\":\n        delete:\n            description:\n                Deletes the blog post and returns a 204 if the operation succeeds.\n            operationId: deleteBlogPosting\n            parameters:\n                - in: path\n                  name: blogPostingId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"BlogPosting\"]\n        get:\n            description:\n                Retrieves the blog post.\n            operationId: getBlogPosting\n            parameters:\n                - in: path\n                  name: blogPostingId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/BlogPosting\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/BlogPosting\"\n            tags: [\"BlogPosting\"]\n        patch:\n            description:\n                Updates the blog post using only the fields received in the request body. Any other fields are left\n                untouched. Returns the updated blog post.\n            operationId: patchBlogPosting\n            parameters:\n                - in: path\n                  name: blogPostingId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/BlogPosting\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/BlogPosting\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/BlogPosting\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/BlogPosting\"\n            tags: [\"BlogPosting\"]\n        put:\n            description:\n                Replaces the blog post with the information sent in the request body. Any missing fields are deleted,\n                unless they are required.\n            operationId: putBlogPosting\n            parameters:\n                - in: path\n                  name: blogPostingId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/BlogPosting\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/BlogPosting\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/BlogPosting\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/BlogPosting\"\n            tags: [\"BlogPosting\"]\n    \"/blog-postings/{blogPostingId}/comments\":\n        get:\n            description:\n                Retrieves the blog post's comments in a list. Results can be paginated, filtered, searched, and sorted.\n            operationId: getBlogPostingCommentsPage\n            parameters:\n                - in: path\n                  name: blogPostingId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: aggregationTerms\n                  schema:\n                      items:\n                          type: string\n                      type: array\n                - in: query\n                  name: filter\n                  schema:\n                      type: string\n                - in: query\n                  name: page\n                  schema:\n                      type: integer\n                - in: query\n                  name: pageSize\n                  schema:\n                      type: integer\n                - in: query\n                  name: search\n                  schema:\n                      type: string\n                - in: query\n                  name: sort\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/Comment\"\n                                type: array\n                        application/xml:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/Comment\"\n                                type: array\n            tags: [\"Comment\"]\n        post:\n            description:\n                Creates a new comment on the blog post.\n            operationId: postBlogPostingComment\n            parameters:\n                - in: path\n                  name: blogPostingId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/Comment\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/Comment\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Comment\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/Comment\"\n            tags: [\"Comment\"]\n    \"/blog-postings/{blogPostingId}/my-rating\":\n        delete:\n            description:\n                Deletes the blog post rating of the user who authenticated the request.\n            operationId: deleteBlogPostingMyRating\n            parameters:\n                - in: path\n                  name: blogPostingId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"BlogPosting\"]\n        get:\n            description:\n                Retrieves the blog post rating of the user who authenticated the request.\n            operationId: getBlogPostingMyRating\n            parameters:\n                - in: path\n                  name: blogPostingId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Rating\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/Rating\"\n            tags: [\"BlogPosting\"]\n        post:\n            description:\n                Creates a new blog post rating by the user who authenticated the request.\n            operationId: postBlogPostingMyRating\n            parameters:\n                - in: path\n                  name: blogPostingId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/Rating\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/Rating\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Rating\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/Rating\"\n            tags: [\"BlogPosting\"]\n        put:\n            description:\n                Replaces an existing blog post rating by the user who authenticated the request.\n            operationId: putBlogPostingMyRating\n            parameters:\n                - in: path\n                  name: blogPostingId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/Rating\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/Rating\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Rating\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/Rating\"\n            tags: [\"BlogPosting\"]\n    \"/blog-postings/{blogPostingId}/permissions\":\n        get:\n            operationId: getBlogPostingPermissionsPage\n            parameters:\n                - in: path\n                  name: blogPostingId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: roleNames\n                  schema:\n                      type: string\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"BlogPosting\"]\n        put:\n            operationId: putBlogPostingPermissionsPage\n            parameters:\n                - in: path\n                  name: blogPostingId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"BlogPosting\"]\n    \"/blog-postings/{blogPostingId}/rendered-content-by-display-page/{displayPageKey}\":\n        get:\n            description:\n                Retrieves the blog post's rendered display page\n            operationId: getBlogPostingRenderedContentByDisplayPageDisplayPageKey\n            parameters:\n                - in: path\n                  name: blogPostingId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: path\n                  name: displayPageKey\n                  required: true\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        text/html:\n                            schema:\n                                type: string\n            tags: [\"BlogPosting\"]\n    \"/comments/{commentId}\":\n        delete:\n            description:\n                Deletes the comment and returns a 204 if the operation succeeded.\n            operationId: deleteComment\n            parameters:\n                - in: path\n                  name: commentId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"Comment\"]\n        get:\n            description:\n                Retrieves the comment.\n            operationId: getComment\n            parameters:\n                - in: path\n                  name: commentId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Comment\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/Comment\"\n            tags: [\"Comment\"]\n        put:\n            description:\n                Replaces the comment with the information sent in the request body. Any missing fields are deleted,\n                unless they are required.\n            operationId: putComment\n            parameters:\n                - in: path\n                  name: commentId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/Comment\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/Comment\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Comment\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/Comment\"\n            tags: [\"Comment\"]\n    \"/comments/{parentCommentId}/comments\":\n        get:\n            description:\n                Retrieves the parent comment's child comments. Results can be paginated, filtered, searched, and sorted.\n            operationId: getCommentCommentsPage\n            parameters:\n                - in: path\n                  name: parentCommentId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: aggregationTerms\n                  schema:\n                      items:\n                          type: string\n                      type: array\n                - in: query\n                  name: filter\n                  schema:\n                      type: string\n                - in: query\n                  name: page\n                  schema:\n                      type: integer\n                - in: query\n                  name: pageSize\n                  schema:\n                      type: integer\n                - in: query\n                  name: search\n                  schema:\n                      type: string\n                - in: query\n                  name: sort\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/Comment\"\n                                type: array\n                        application/xml:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/Comment\"\n                                type: array\n            tags: [\"Comment\"]\n        post:\n            description:\n                Creates a new child comment of the existing comment.\n            operationId: postCommentComment\n            parameters:\n                - in: path\n                  name: parentCommentId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/Comment\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/Comment\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Comment\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/Comment\"\n            tags: [\"Comment\"]\n    \"/content-sets/{contentSetId}/content-set-elements\":\n        get:\n            # @review\n            description:\n                \"Retrieves the content set's elements (e.g., structured content, blogs, etc.). Results can be paginated.\n                The set of available headers are: Accept-Language (string), Host (string), User-Agent (string),\n                X-Browser (string), X-Cookies (collection string), X-Device-Brand (string), X-Device-Model (string),\n                X-Device-Screen-Resolution-Height (double), X-Device-Screen-Resolution-Width (double),\n                X-Last-Sign-In-Date-Time (date time) and X-Signed-In (boolean). Local date will be always present in the\n                request.\"\n            operationId: getContentSetContentSetElementsPage\n            parameters:\n                - in: path\n                  name: contentSetId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: page\n                  schema:\n                      type: integer\n                - in: query\n                  name: pageSize\n                  schema:\n                      type: integer\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/ContentSetElement\"\n                                type: array\n                        application/xml:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/ContentSetElement\"\n                                type: array\n            tags: [\"ContentSetElement\"]\n    \"/content-structures/{contentStructureId}\":\n        get:\n            description:\n                Retrieves the content structure.\n            operationId: getContentStructure\n            parameters:\n                - in: path\n                  name: contentStructureId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/ContentStructure\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/ContentStructure\"\n            tags: [\"ContentStructure\"]\n    \"/content-structures/{contentStructureId}/permissions\":\n        get:\n            operationId: getContentStructurePermissionsPage\n            parameters:\n                - in: path\n                  name: contentStructureId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: roleNames\n                  schema:\n                      type: string\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"ContentStructure\"]\n        put:\n            operationId: putContentStructurePermissionsPage\n            parameters:\n                - in: path\n                  name: contentStructureId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"ContentStructure\"]\n    \"/content-structures/{contentStructureId}/structured-contents\":\n        get:\n            description:\n                Retrieves a list of the content structure's structured content. Results can be paginated, filtered,\n                searched, and sorted.\n            operationId: getContentStructureStructuredContentsPage\n            parameters:\n                - in: path\n                  name: contentStructureId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: aggregationTerms\n                  schema:\n                      items:\n                          type: string\n                      type: array\n                - in: query\n                  name: filter\n                  schema:\n                      type: string\n                - in: query\n                  name: page\n                  schema:\n                      type: integer\n                - in: query\n                  name: pageSize\n                  schema:\n                      type: integer\n                - in: query\n                  name: search\n                  schema:\n                      type: string\n                - in: query\n                  name: sort\n                  schema:\n                      type: string\n                - in: header\n                  name: Accept-Language\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/StructuredContent\"\n                                type: array\n                        application/xml:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/StructuredContent\"\n                                type: array\n            tags: [\"StructuredContent\"]\n    \"/document-folders/{documentFolderId}\":\n        delete:\n            description:\n                Deletes the document folder and returns a 204 if the operation succeeds.\n            operationId: deleteDocumentFolder\n            parameters:\n                - in: path\n                  name: documentFolderId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"DocumentFolder\"]\n        get:\n            description:\n                Retrieves the document folder.\n            operationId: getDocumentFolder\n            parameters:\n                - in: path\n                  name: documentFolderId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/DocumentFolder\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/DocumentFolder\"\n            tags: [\"DocumentFolder\"]\n        patch:\n            description:\n                Updates only the fields received in the request body. Any other fields are left untouched.\n            operationId: patchDocumentFolder\n            parameters:\n                - in: path\n                  name: documentFolderId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/DocumentFolder\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/DocumentFolder\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/DocumentFolder\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/DocumentFolder\"\n            tags: [\"DocumentFolder\"]\n        put:\n            description:\n                Replaces the document folder with the information sent in the request body. Any missing fields are\n                deleted, unless they are required.\n            operationId: putDocumentFolder\n            parameters:\n                - in: path\n                  name: documentFolderId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/DocumentFolder\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/DocumentFolder\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/DocumentFolder\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/DocumentFolder\"\n            tags: [\"DocumentFolder\"]\n    \"/document-folders/{documentFolderId}/documents\":\n        get:\n            description:\n                Retrieves the folder's documents. Results can be paginated, filtered, searched, and sorted.\n            operationId: getDocumentFolderDocumentsPage\n            parameters:\n                - in: path\n                  name: documentFolderId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: aggregationTerms\n                  schema:\n                      items:\n                          type: string\n                      type: array\n                - in: query\n                  name: flatten\n                  schema:\n                      type: boolean\n                - in: query\n                  name: filter\n                  schema:\n                      type: string\n                - in: query\n                  name: page\n                  schema:\n                      type: integer\n                - in: query\n                  name: pageSize\n                  schema:\n                      type: integer\n                - in: query\n                  name: search\n                  schema:\n                      type: string\n                - in: query\n                  name: sort\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/Document\"\n                                type: array\n                        application/xml:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/Document\"\n                                type: array\n            tags: [\"Document\"]\n        post:\n            description:\n                Creates a new document inside the folder identified by `documentFolderId`. The request body must be\n                `multipart/form-data` with two parts, the file's bytes (`file`), and an optional JSON string\n                (`document`) with the metadata.\n            operationId: postDocumentFolderDocument\n            parameters:\n                - in: path\n                  name: documentFolderId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    multipart/form-data:\n                        schema:\n                            properties:\n                                document:\n                                    $ref: \"#/components/schemas/Document\"\n                                file:\n                                    format: binary\n                                    type: string\n                            type: object\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Document\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/Document\"\n            tags: [\"Document\"]\n    \"/document-folders/{documentFolderId}/permissions\":\n        get:\n            operationId: getDocumentFolderPermissionsPage\n            parameters:\n                - in: path\n                  name: documentFolderId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: roleNames\n                  schema:\n                      type: string\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"DocumentFolder\"]\n        put:\n            operationId: putDocumentFolderPermissionsPage\n            parameters:\n                - in: path\n                  name: documentFolderId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"DocumentFolder\"]\n    \"/document-folders/{documentFolderId}/subscribe\":\n        put:\n            operationId: putDocumentFolderSubscribe\n            parameters:\n                - in: path\n                  name: documentFolderId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"DocumentFolder\"]\n    \"/document-folders/{documentFolderId}/unsubscribe\":\n        put:\n            operationId: putDocumentFolderUnsubscribe\n            parameters:\n                - in: path\n                  name: documentFolderId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"DocumentFolder\"]\n    \"/document-folders/{parentDocumentFolderId}/document-folders\":\n        get:\n            description:\n                Retrieves the folder's subfolders. Results can be paginated, filtered, searched, and sorted.\n            operationId: getDocumentFolderDocumentFoldersPage\n            parameters:\n                - in: path\n                  name: parentDocumentFolderId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: aggregationTerms\n                  schema:\n                      items:\n                          type: string\n                      type: array\n                - in: query\n                  name: flatten\n                  schema:\n                      type: boolean\n                - in: query\n                  name: filter\n                  schema:\n                      type: string\n                - in: query\n                  name: page\n                  schema:\n                      type: integer\n                - in: query\n                  name: pageSize\n                  schema:\n                      type: integer\n                - in: query\n                  name: search\n                  schema:\n                      type: string\n                - in: query\n                  name: sort\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/DocumentFolder\"\n                                type: array\n                        application/xml:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/DocumentFolder\"\n                                type: array\n            tags: [\"DocumentFolder\"]\n        post:\n            description:\n                Creates a new folder in a folder identified by `parentDocumentFolderId`.\n            operationId: postDocumentFolderDocumentFolder\n            parameters:\n                - in: path\n                  name: parentDocumentFolderId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/DocumentFolder\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/DocumentFolder\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/DocumentFolder\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/DocumentFolder\"\n            tags: [\"DocumentFolder\"]\n    \"/documents/{documentId}\":\n        delete:\n            description:\n                Deletes the document and returns a 204 if the operation succeeds.\n            operationId: deleteDocument\n            parameters:\n                - in: path\n                  name: documentId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"Document\"]\n        get:\n            description:\n                Retrieves the document.\n            operationId: getDocument\n            parameters:\n                - in: path\n                  name: documentId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Document\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/Document\"\n            tags: [\"Document\"]\n        patch:\n            description:\n                Updates only the fields received in the request body, leaving any other fields untouched. The request\n                body must be `multipart/form-data` with two parts, the file's bytes (`file`), and an optional JSON\n                string (`document`) with the metadata.\n            operationId: patchDocument\n            parameters:\n                - in: path\n                  name: documentId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    multipart/form-data:\n                        schema:\n                            properties:\n                                document:\n                                    $ref: \"#/components/schemas/Document\"\n                                file:\n                                    format: binary\n                                    type: string\n                            type: object\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Document\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/Document\"\n            tags: [\"Document\"]\n        put:\n            description:\n                Replaces the document with the information sent in the request body. Any missing fields are deleted,\n                unless they are required. The request body must be `multipart/form-data` with two parts, the file's\n                bytes (`file`), and an optional JSON string (`document`) with the metadata.\n            operationId: putDocument\n            parameters:\n                - in: path\n                  name: documentId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    multipart/form-data:\n                        schema:\n                            properties:\n                                document:\n                                    $ref: \"#/components/schemas/Document\"\n                                file:\n                                    format: binary\n                                    type: string\n                            type: object\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Document\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/Document\"\n            tags: [\"Document\"]\n    \"/documents/{documentId}/comments\":\n        get:\n            description:\n                Retrieves the document's comments. Results can be paginated, filtered, searched, and sorted.\n            operationId: getDocumentCommentsPage\n            parameters:\n                - in: path\n                  name: documentId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: aggregationTerms\n                  schema:\n                      items:\n                          type: string\n                      type: array\n                - in: query\n                  name: filter\n                  schema:\n                      type: string\n                - in: query\n                  name: page\n                  schema:\n                      type: integer\n                - in: query\n                  name: pageSize\n                  schema:\n                      type: integer\n                - in: query\n                  name: search\n                  schema:\n                      type: string\n                - in: query\n                  name: sort\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/Comment\"\n                                type: array\n                        application/xml:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/Comment\"\n                                type: array\n            tags: [\"Comment\"]\n        post:\n            description:\n                Creates a new comment on the document.\n            operationId: postDocumentComment\n            parameters:\n                - in: path\n                  name: documentId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/Comment\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/Comment\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Comment\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/Comment\"\n            tags: [\"Comment\"]\n    \"/documents/{documentId}/my-rating\":\n        delete:\n            description:\n                Deletes the document's rating and returns a 204 if the operation succeeded.\n            operationId: deleteDocumentMyRating\n            parameters:\n                - in: path\n                  name: documentId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"Document\"]\n        get:\n            description:\n                Retrieves the document's rating.\n            operationId: getDocumentMyRating\n            parameters:\n                - in: path\n                  name: documentId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Rating\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/Rating\"\n            tags: [\"Document\"]\n        post:\n            description:\n                Creates a new rating for the document, by the user who authenticated the request.\n            operationId: postDocumentMyRating\n            parameters:\n                - in: path\n                  name: documentId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/Rating\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/Rating\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Rating\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/Rating\"\n            tags: [\"Document\"]\n        put:\n            description:\n                Replaces the rating with the information sent in the request body. Any missing fields are deleted,\n                unless they are required.\n            operationId: putDocumentMyRating\n            parameters:\n                - in: path\n                  name: documentId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/Rating\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/Rating\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Rating\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/Rating\"\n            tags: [\"Document\"]\n    \"/documents/{documentId}/permissions\":\n        get:\n            operationId: getDocumentPermissionsPage\n            parameters:\n                - in: path\n                  name: documentId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: roleNames\n                  schema:\n                      type: string\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"Document\"]\n        put:\n            operationId: putDocumentPermissionsPage\n            parameters:\n                - in: path\n                  name: documentId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"Document\"]\n    \"/documents/{documentId}/rendered-content-by-display-page/{displayPageKey}\":\n        get:\n            description:\n                Retrieves the document's rendered display page\n            operationId: getDocumentRenderedContentByDisplayPageDisplayPageKey\n            parameters:\n                - in: path\n                  name: documentId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: path\n                  name: displayPageKey\n                  required: true\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        text/html:\n                            schema:\n                                type: string\n            tags: [\"Document\"]\n    \"/knowledge-base-articles/{knowledgeBaseArticleId}\":\n        delete:\n            description:\n                Deletes the knowledge base article and returns a 204 if the operation succeeds.\n            operationId: deleteKnowledgeBaseArticle\n            parameters:\n                - in: path\n                  name: knowledgeBaseArticleId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"KnowledgeBaseArticle\"]\n        get:\n            description:\n                Retrieves the knowledge base article.\n            operationId: getKnowledgeBaseArticle\n            parameters:\n                - in: path\n                  name: knowledgeBaseArticleId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/KnowledgeBaseArticle\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/KnowledgeBaseArticle\"\n            tags: [\"KnowledgeBaseArticle\"]\n        patch:\n            description:\n                Updates only the fields received in the request body, leaving any other fields untouched.\n            operationId: patchKnowledgeBaseArticle\n            parameters:\n                - in: path\n                  name: knowledgeBaseArticleId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/KnowledgeBaseArticle\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/KnowledgeBaseArticle\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/KnowledgeBaseArticle\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/KnowledgeBaseArticle\"\n            tags: [\"KnowledgeBaseArticle\"]\n        put:\n            description:\n                Replaces the knowledge base article with the information sent in the request body. Any missing fields\n                are deleted, unless they are required.\n            operationId: putKnowledgeBaseArticle\n            parameters:\n                - in: path\n                  name: knowledgeBaseArticleId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/KnowledgeBaseArticle\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/KnowledgeBaseArticle\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/KnowledgeBaseArticle\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/KnowledgeBaseArticle\"\n            tags: [\"KnowledgeBaseArticle\"]\n    \"/knowledge-base-articles/{knowledgeBaseArticleId}/knowledge-base-attachments\":\n        get:\n            description:\n                Retrieves the knowledge base article's attachments.\n            operationId: getKnowledgeBaseArticleKnowledgeBaseAttachmentsPage\n            parameters:\n                - in: path\n                  name: knowledgeBaseArticleId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/KnowledgeBaseAttachment\"\n                                type: array\n                        application/xml:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/KnowledgeBaseAttachment\"\n                                type: array\n            tags: [\"KnowledgeBaseAttachment\"]\n        post:\n            description:\n                Creates a new attachment for an existing knowledge base article. The request body must be\n                `multipart/form-data` with two parts, a `file` part with the file's bytes, and an optional JSON string\n                (`knowledgeBaseAttachment`) with the metadata.\n            operationId: postKnowledgeBaseArticleKnowledgeBaseAttachment\n            parameters:\n                - in: path\n                  name: knowledgeBaseArticleId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    multipart/form-data:\n                        schema:\n                            properties:\n                                file:\n                                    format: binary\n                                    type: string\n                                knowledgeBaseAttachment:\n                                    $ref: \"#/components/schemas/KnowledgeBaseAttachment\"\n                            type: object\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/KnowledgeBaseAttachment\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/KnowledgeBaseAttachment\"\n            tags: [\"KnowledgeBaseAttachment\"]\n    \"/knowledge-base-articles/{knowledgeBaseArticleId}/my-rating\":\n        delete:\n            description:\n                Deletes the knowledge base article's rating and returns a 204 if the operation succeeds.\n            operationId: deleteKnowledgeBaseArticleMyRating\n            parameters:\n                - in: path\n                  name: knowledgeBaseArticleId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"KnowledgeBaseArticle\"]\n        get:\n            description:\n                Retrieves the knowledge base article's rating.\n            operationId: getKnowledgeBaseArticleMyRating\n            parameters:\n                - in: path\n                  name: knowledgeBaseArticleId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Rating\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/Rating\"\n            tags: [\"KnowledgeBaseArticle\"]\n        post:\n            description:\n                Creates a rating for the knowledge base article.\n            operationId: postKnowledgeBaseArticleMyRating\n            parameters:\n                - in: path\n                  name: knowledgeBaseArticleId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/Rating\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/Rating\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Rating\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/Rating\"\n            tags: [\"KnowledgeBaseArticle\"]\n        put:\n            description:\n                Replaces the rating with the information sent in the request body. Any missing fields are deleted,\n                unless they are required.\n            operationId: putKnowledgeBaseArticleMyRating\n            parameters:\n                - in: path\n                  name: knowledgeBaseArticleId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/Rating\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/Rating\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Rating\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/Rating\"\n            tags: [\"KnowledgeBaseArticle\"]\n    \"/knowledge-base-articles/{knowledgeBaseArticleId}/permissions\":\n        get:\n            operationId: getKnowledgeBaseArticlePermissionsPage\n            parameters:\n                - in: path\n                  name: knowledgeBaseArticleId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: roleNames\n                  schema:\n                      type: string\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"KnowledgeBaseArticle\"]\n        put:\n            operationId: putKnowledgeBaseArticlePermissionsPage\n            parameters:\n                - in: path\n                  name: knowledgeBaseArticleId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"KnowledgeBaseArticle\"]\n    \"/knowledge-base-articles/{knowledgeBaseArticleId}/subscribe\":\n        put:\n            operationId: putKnowledgeBaseArticleSubscribe\n            parameters:\n                - in: path\n                  name: knowledgeBaseArticleId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"KnowledgeBaseArticle\"]\n    \"/knowledge-base-articles/{knowledgeBaseArticleId}/unsubscribe\":\n        put:\n            operationId: putKnowledgeBaseArticleUnsubscribe\n            parameters:\n                - in: path\n                  name: knowledgeBaseArticleId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"KnowledgeBaseArticle\"]\n    \"/knowledge-base-articles/{parentKnowledgeBaseArticleId}/knowledge-base-articles\":\n        get:\n            description:\n                Retrieves the parent knowledge base article's child knowledge base articles. Results can be paginated,\n                filtered, searched, and sorted.\n            operationId: getKnowledgeBaseArticleKnowledgeBaseArticlesPage\n            parameters:\n                - in: path\n                  name: parentKnowledgeBaseArticleId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: aggregationTerms\n                  schema:\n                      items:\n                          type: string\n                      type: array\n                - in: query\n                  name: flatten\n                  schema:\n                      type: boolean\n                - in: query\n                  name: filter\n                  schema:\n                      type: string\n                - in: query\n                  name: page\n                  schema:\n                      type: integer\n                - in: query\n                  name: pageSize\n                  schema:\n                      type: integer\n                - in: query\n                  name: search\n                  schema:\n                      type: string\n                - in: query\n                  name: sort\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/KnowledgeBaseArticle\"\n                                type: array\n                        application/xml:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/KnowledgeBaseArticle\"\n                                type: array\n            tags: [\"KnowledgeBaseArticle\"]\n        post:\n            description:\n                Creates a child knowledge base article of the knowledge base article identified by\n                `parentKnowledgeBaseArticleId`.\n            operationId: postKnowledgeBaseArticleKnowledgeBaseArticle\n            parameters:\n                - in: path\n                  name: parentKnowledgeBaseArticleId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/KnowledgeBaseArticle\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/KnowledgeBaseArticle\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/KnowledgeBaseArticle\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/KnowledgeBaseArticle\"\n            tags: [\"KnowledgeBaseArticle\"]\n    \"/knowledge-base-attachments/{knowledgeBaseAttachmentId}\":\n        delete:\n            description:\n                Deletes the knowledge base file attachment and returns a 204 if the operation succeeds.\n            operationId: deleteKnowledgeBaseAttachment\n            parameters:\n                - in: path\n                  name: knowledgeBaseAttachmentId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"KnowledgeBaseAttachment\"]\n        get:\n            description:\n                Retrieves the knowledge base attachment.\n            operationId: getKnowledgeBaseAttachment\n            parameters:\n                - in: path\n                  name: knowledgeBaseAttachmentId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/KnowledgeBaseAttachment\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/KnowledgeBaseAttachment\"\n            tags: [\"KnowledgeBaseAttachment\"]\n    \"/knowledge-base-folders/{knowledgeBaseFolderId}\":\n        delete:\n            description:\n                Deletes the knowledge base folder and returns a 204 if the operation succeeds.\n            operationId: deleteKnowledgeBaseFolder\n            parameters:\n                - in: path\n                  name: knowledgeBaseFolderId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"KnowledgeBaseFolder\"]\n        get:\n            description:\n                Retrieves the knowledge base folder.\n            operationId: getKnowledgeBaseFolder\n            parameters:\n                - in: path\n                  name: knowledgeBaseFolderId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/KnowledgeBaseFolder\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/KnowledgeBaseFolder\"\n            tags: [\"KnowledgeBaseFolder\"]\n        patch:\n            description:\n                Updates only the fields received in the request body, leaving any other fields untouched.\n            operationId: patchKnowledgeBaseFolder\n            parameters:\n                - in: path\n                  name: knowledgeBaseFolderId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/KnowledgeBaseFolder\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/KnowledgeBaseFolder\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/KnowledgeBaseFolder\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/KnowledgeBaseFolder\"\n            tags: [\"KnowledgeBaseFolder\"]\n        put:\n            description:\n                Replaces the knowledge base folder with the information sent in the request body. Any missing fields are\n                deleted, unless they are required.\n            operationId: putKnowledgeBaseFolder\n            parameters:\n                - in: path\n                  name: knowledgeBaseFolderId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/KnowledgeBaseFolder\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/KnowledgeBaseFolder\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/KnowledgeBaseFolder\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/KnowledgeBaseFolder\"\n            tags: [\"KnowledgeBaseFolder\"]\n    \"/knowledge-base-folders/{knowledgeBaseFolderId}/knowledge-base-articles\":\n        get:\n            description:\n                Retrieves the folder's knowledge base articles. Results can be paginated, filtered, searched, flattened,\n                and sorted.\n            operationId: getKnowledgeBaseFolderKnowledgeBaseArticlesPage\n            parameters:\n                - in: path\n                  name: knowledgeBaseFolderId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: aggregationTerms\n                  schema:\n                      items:\n                          type: string\n                      type: array\n                - in: query\n                  name: flatten\n                  schema:\n                      type: boolean\n                - in: query\n                  name: filter\n                  schema:\n                      type: string\n                - in: query\n                  name: page\n                  schema:\n                      type: integer\n                - in: query\n                  name: pageSize\n                  schema:\n                      type: integer\n                - in: query\n                  name: search\n                  schema:\n                      type: string\n                - in: query\n                  name: sort\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/KnowledgeBaseArticle\"\n                                type: array\n                        application/xml:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/KnowledgeBaseArticle\"\n                                type: array\n            tags: [\"KnowledgeBaseArticle\"]\n        post:\n            description:\n                Creates a new knowledge base article in the folder.\n            operationId: postKnowledgeBaseFolderKnowledgeBaseArticle\n            parameters:\n                - in: path\n                  name: knowledgeBaseFolderId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/KnowledgeBaseArticle\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/KnowledgeBaseArticle\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/KnowledgeBaseArticle\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/KnowledgeBaseArticle\"\n            tags: [\"KnowledgeBaseArticle\"]\n    \"/knowledge-base-folders/{knowledgeBaseFolderId}/permissions\":\n        get:\n            operationId: getKnowledgeBaseFolderPermissionsPage\n            parameters:\n                - in: path\n                  name: knowledgeBaseFolderId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: roleNames\n                  schema:\n                      type: string\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"KnowledgeBaseFolder\"]\n        put:\n            operationId: putKnowledgeBaseFolderPermissionsPage\n            parameters:\n                - in: path\n                  name: knowledgeBaseFolderId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"KnowledgeBaseFolder\"]\n    \"/knowledge-base-folders/{parentKnowledgeBaseFolderId}/knowledge-base-folders\":\n        get:\n            description:\n                Retrieves the knowledge base folder's subfolders.\n            operationId: getKnowledgeBaseFolderKnowledgeBaseFoldersPage\n            parameters:\n                - in: path\n                  name: parentKnowledgeBaseFolderId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: page\n                  schema:\n                      type: integer\n                - in: query\n                  name: pageSize\n                  schema:\n                      type: integer\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/KnowledgeBaseFolder\"\n                                type: array\n                        application/xml:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/KnowledgeBaseFolder\"\n                                type: array\n            tags: [\"KnowledgeBaseFolder\"]\n        post:\n            description:\n                Creates a knowledge base folder inside the parent folder.\n            operationId: postKnowledgeBaseFolderKnowledgeBaseFolder\n            parameters:\n                - in: path\n                  name: parentKnowledgeBaseFolderId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/KnowledgeBaseFolder\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/KnowledgeBaseFolder\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/KnowledgeBaseFolder\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/KnowledgeBaseFolder\"\n            tags: [\"KnowledgeBaseFolder\"]\n    \"/message-board-attachments/{messageBoardAttachmentId}\":\n        delete:\n            description:\n                Deletes the message board attachment and returns a 204 if the operation succeeds.\n            operationId: deleteMessageBoardAttachment\n            parameters:\n                - in: path\n                  name: messageBoardAttachmentId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"MessageBoardAttachment\"]\n        get:\n            description:\n                Retrieves the message board attachment.\n            operationId: getMessageBoardAttachment\n            parameters:\n                - in: path\n                  name: messageBoardAttachmentId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/MessageBoardAttachment\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/MessageBoardAttachment\"\n            tags: [\"MessageBoardAttachment\"]\n    \"/message-board-messages/{messageBoardMessageId}\":\n        delete:\n            description:\n                Deletes the message board message and returns a 204 if the operation succeeds.\n            operationId: deleteMessageBoardMessage\n            parameters:\n                - in: path\n                  name: messageBoardMessageId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"MessageBoardMessage\"]\n        get:\n            description:\n                Retrieves the message board message.\n            operationId: getMessageBoardMessage\n            parameters:\n                - in: path\n                  name: messageBoardMessageId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/MessageBoardMessage\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/MessageBoardMessage\"\n            tags: [\"MessageBoardMessage\"]\n        patch:\n            description:\n                Updates only the fields received in the request body, leaving any other fields untouched.\n            operationId: patchMessageBoardMessage\n            parameters:\n                - in: path\n                  name: messageBoardMessageId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/MessageBoardMessage\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/MessageBoardMessage\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/MessageBoardMessage\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/MessageBoardMessage\"\n            tags: [\"MessageBoardMessage\"]\n        put:\n            description:\n                Replaces the message board message with the information sent in the request body. Any missing fields are\n                deleted, unless they are required.\n            operationId: putMessageBoardMessage\n            parameters:\n                - in: path\n                  name: messageBoardMessageId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/MessageBoardMessage\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/MessageBoardMessage\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/MessageBoardMessage\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/MessageBoardMessage\"\n            tags: [\"MessageBoardMessage\"]\n    \"/message-board-messages/{messageBoardMessageId}/message-board-attachments\":\n        get:\n            description:\n                Retrieves the message board message's attachments.\n            operationId: getMessageBoardMessageMessageBoardAttachmentsPage\n            parameters:\n                - in: path\n                  name: messageBoardMessageId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/MessageBoardAttachment\"\n                                type: array\n                        application/xml:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/MessageBoardAttachment\"\n                                type: array\n            tags: [\"MessageBoardAttachment\"]\n        post:\n            description:\n                Creates an attachment for the message board message. The request body must be `multipart/form-data` with\n                two parts, the file's bytes (`file`), and an optional JSON string (`MessageBoardAttachment`) with the\n                metadata.\n            operationId: postMessageBoardMessageMessageBoardAttachment\n            parameters:\n                - in: path\n                  name: messageBoardMessageId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    multipart/form-data:\n                        schema:\n                            properties:\n                                MessageBoardAttachment:\n                                    $ref: \"#/components/schemas/MessageBoardAttachment\"\n                                file:\n                                    format: binary\n                                    type: string\n                            type: object\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/MessageBoardAttachment\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/MessageBoardAttachment\"\n            tags: [\"MessageBoardAttachment\"]\n    \"/message-board-messages/{messageBoardMessageId}/my-rating\":\n        delete:\n            description:\n                Deletes the message board message's rating and returns a 204 if the operation succeeds.\n            operationId: deleteMessageBoardMessageMyRating\n            parameters:\n                - in: path\n                  name: messageBoardMessageId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"MessageBoardMessage\"]\n        get:\n            description:\n                Retrieves the message board message's rating.\n            operationId: getMessageBoardMessageMyRating\n            parameters:\n                - in: path\n                  name: messageBoardMessageId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Rating\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/Rating\"\n            tags: [\"MessageBoardMessage\"]\n        post:\n            description:\n                Creates a rating for the message board message.\n            operationId: postMessageBoardMessageMyRating\n            parameters:\n                - in: path\n                  name: messageBoardMessageId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/Rating\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/Rating\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Rating\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/Rating\"\n            tags: [\"MessageBoardMessage\"]\n        put:\n            description:\n                Replaces the rating with the information sent in the request body. Any missing fields are deleted,\n                unless they are required.\n            operationId: putMessageBoardMessageMyRating\n            parameters:\n                - in: path\n                  name: messageBoardMessageId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/Rating\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/Rating\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Rating\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/Rating\"\n            tags: [\"MessageBoardMessage\"]\n    \"/message-board-messages/{messageBoardMessageId}/permissions\":\n        get:\n            operationId: getMessageBoardMessagePermissionsPage\n            parameters:\n                - in: path\n                  name: messageBoardMessageId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: roleNames\n                  schema:\n                      type: string\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"MessageBoardMessage\"]\n        put:\n            operationId: putMessageBoardMessagePermissionsPage\n            parameters:\n                - in: path\n                  name: messageBoardMessageId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"MessageBoardMessage\"]\n    \"/message-board-messages/{messageBoardMessageId}/subscribe\":\n        put:\n            operationId: putMessageBoardMessageSubscribe\n            parameters:\n                - in: path\n                  name: messageBoardMessageId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"MessageBoardMessage\"]\n    \"/message-board-messages/{messageBoardMessageId}/unsubscribe\":\n        put:\n            operationId: putMessageBoardMessageUnsubscribe\n            parameters:\n                - in: path\n                  name: messageBoardMessageId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"MessageBoardMessage\"]\n    \"/message-board-messages/{parentMessageBoardMessageId}/message-board-messages\":\n        get:\n            description:\n                Retrieves the parent message board message's child messages. Results can be paginated, filtered,\n                searched, and sorted.\n            operationId: getMessageBoardMessageMessageBoardMessagesPage\n            parameters:\n                - in: path\n                  name: parentMessageBoardMessageId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: aggregationTerms\n                  schema:\n                      items:\n                          type: string\n                      type: array\n                - in: query\n                  name: flatten\n                  schema:\n                      type: boolean\n                - in: query\n                  name: filter\n                  schema:\n                      type: string\n                - in: query\n                  name: page\n                  schema:\n                      type: integer\n                - in: query\n                  name: pageSize\n                  schema:\n                      type: integer\n                - in: query\n                  name: search\n                  schema:\n                      type: string\n                - in: query\n                  name: sort\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/MessageBoardMessage\"\n                                type: array\n                        application/xml:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/MessageBoardMessage\"\n                                type: array\n            tags: [\"MessageBoardMessage\"]\n        post:\n            description:\n                Creates a child message board message of the parent message.\n            operationId: postMessageBoardMessageMessageBoardMessage\n            parameters:\n                - in: path\n                  name: parentMessageBoardMessageId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/MessageBoardMessage\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/MessageBoardMessage\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/MessageBoardMessage\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/MessageBoardMessage\"\n            tags: [\"MessageBoardMessage\"]\n    \"/message-board-sections/{messageBoardSectionId}\":\n        delete:\n            description:\n                Deletes the message board section and returns a 204 if the operation succeeds.\n            operationId: deleteMessageBoardSection\n            parameters:\n                - in: path\n                  name: messageBoardSectionId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"MessageBoardSection\"]\n        get:\n            description:\n                Retrieves the message board section.\n            operationId: getMessageBoardSection\n            parameters:\n                - in: path\n                  name: messageBoardSectionId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/MessageBoardSection\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/MessageBoardSection\"\n            tags: [\"MessageBoardSection\"]\n        patch:\n            description:\n                Updates only the fields received in the request body, leaving any other fields untouched.\n            operationId: patchMessageBoardSection\n            parameters:\n                - in: path\n                  name: messageBoardSectionId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/MessageBoardSection\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/MessageBoardSection\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/MessageBoardSection\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/MessageBoardSection\"\n            tags: [\"MessageBoardSection\"]\n        put:\n            description:\n                Replaces the message board section with the information sent in the request body. Any missing fields are\n                deleted, unless they are required.\n            operationId: putMessageBoardSection\n            parameters:\n                - in: path\n                  name: messageBoardSectionId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/MessageBoardSection\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/MessageBoardSection\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/MessageBoardSection\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/MessageBoardSection\"\n            tags: [\"MessageBoardSection\"]\n    \"/message-board-sections/{messageBoardSectionId}/message-board-threads\":\n        get:\n            description:\n                Retrieves the message board section's threads. Results can be paginated, filtered, searched, and sorted.\n            operationId: getMessageBoardSectionMessageBoardThreadsPage\n            parameters:\n                - in: path\n                  name: messageBoardSectionId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: aggregationTerms\n                  schema:\n                      items:\n                          type: string\n                      type: array\n                - in: query\n                  name: filter\n                  schema:\n                      type: string\n                - in: query\n                  name: page\n                  schema:\n                      type: integer\n                - in: query\n                  name: pageSize\n                  schema:\n                      type: integer\n                - in: query\n                  name: search\n                  schema:\n                      type: string\n                - in: query\n                  name: sort\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/MessageBoardThread\"\n                                type: array\n                        application/xml:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/MessageBoardThread\"\n                                type: array\n            tags: [\"MessageBoardThread\"]\n        post:\n            description:\n                Creates a new message board thread inside a section.\n            operationId: postMessageBoardSectionMessageBoardThread\n            parameters:\n                - in: path\n                  name: messageBoardSectionId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/MessageBoardThread\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/MessageBoardThread\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/MessageBoardThread\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/MessageBoardThread\"\n            tags: [\"MessageBoardThread\"]\n    \"/message-board-sections/{messageBoardSectionId}/permissions\":\n        get:\n            operationId: getMessageBoardSectionPermissionsPage\n            parameters:\n                - in: path\n                  name: messageBoardSectionId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: roleNames\n                  schema:\n                      type: string\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"MessageBoardSection\"]\n        put:\n            operationId: putMessageBoardSectionPermissionsPage\n            parameters:\n                - in: path\n                  name: messageBoardSectionId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"MessageBoardSection\"]\n    \"/message-board-sections/{messageBoardSectionId}/subscribe\":\n        put:\n            operationId: putMessageBoardSectionSubscribe\n            parameters:\n                - in: path\n                  name: messageBoardSectionId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"MessageBoardSection\"]\n    \"/message-board-sections/{messageBoardSectionId}/unsubscribe\":\n        put:\n            operationId: putMessageBoardSectionUnsubscribe\n            parameters:\n                - in: path\n                  name: messageBoardSectionId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"MessageBoardSection\"]\n    \"/message-board-sections/{parentMessageBoardSectionId}/message-board-sections\":\n        get:\n            description:\n                Retrieves the parent message board section's subsections. Results can be paginated, filtered, searched,\n                and sorted.\n            operationId: getMessageBoardSectionMessageBoardSectionsPage\n            parameters:\n                - in: path\n                  name: parentMessageBoardSectionId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: aggregationTerms\n                  schema:\n                      items:\n                          type: string\n                      type: array\n                - in: query\n                  name: filter\n                  schema:\n                      type: string\n                - in: query\n                  name: page\n                  schema:\n                      type: integer\n                - in: query\n                  name: pageSize\n                  schema:\n                      type: integer\n                - in: query\n                  name: search\n                  schema:\n                      type: string\n                - in: query\n                  name: sort\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/MessageBoardSection\"\n                                type: array\n                        application/xml:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/MessageBoardSection\"\n                                type: array\n            tags: [\"MessageBoardSection\"]\n        post:\n            description:\n                Creates a new message board section in the parent section.\n            operationId: postMessageBoardSectionMessageBoardSection\n            parameters:\n                - in: path\n                  name: parentMessageBoardSectionId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/MessageBoardSection\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/MessageBoardSection\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/MessageBoardSection\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/MessageBoardSection\"\n            tags: [\"MessageBoardSection\"]\n    \"/message-board-threads/ranked\":\n        get:\n            operationId: getMessageBoardThreadsRankedPage\n            parameters:\n                - in: query\n                  name: dateCreated\n                  schema:\n                      format: date-time\n                      type: string\n                - in: query\n                  name: dateModified\n                  schema:\n                      format: date-time\n                      type: string\n                - in: query\n                  name: messageBoardSectionId\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: page\n                  schema:\n                      type: integer\n                - in: query\n                  name: pageSize\n                  schema:\n                      type: integer\n                - in: query\n                  name: sort\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/MessageBoardThread\"\n                                type: array\n                        application/xml:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/MessageBoardThread\"\n                                type: array\n            tags: [\"MessageBoardThread\"]\n    \"/message-board-threads/{messageBoardThreadId}\":\n        delete:\n            description:\n                Deletes the message board thread and returns a 204 if the operation succeeds.\n            operationId: deleteMessageBoardThread\n            parameters:\n                - in: path\n                  name: messageBoardThreadId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"MessageBoardThread\"]\n        get:\n            description:\n                Retrieves the message board thread.\n            operationId: getMessageBoardThread\n            parameters:\n                - in: path\n                  name: messageBoardThreadId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/MessageBoardThread\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/MessageBoardThread\"\n            tags: [\"MessageBoardThread\"]\n        patch:\n            description:\n                Updates only the fields received in the request body, leaving any other fields untouched.\n            operationId: patchMessageBoardThread\n            parameters:\n                - in: path\n                  name: messageBoardThreadId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/MessageBoardThread\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/MessageBoardThread\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/MessageBoardThread\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/MessageBoardThread\"\n            tags: [\"MessageBoardThread\"]\n        put:\n            description:\n                Replaces the message board thread with the information sent in the request body. Any missing fields are\n                deleted, unless they are required.\n            operationId: putMessageBoardThread\n            parameters:\n                - in: path\n                  name: messageBoardThreadId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/MessageBoardThread\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/MessageBoardThread\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/MessageBoardThread\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/MessageBoardThread\"\n            tags: [\"MessageBoardThread\"]\n    \"/message-board-threads/{messageBoardThreadId}/message-board-attachments\":\n        get:\n            description:\n                Retrieves the message board thread's attachments.\n            operationId: getMessageBoardThreadMessageBoardAttachmentsPage\n            parameters:\n                - in: path\n                  name: messageBoardThreadId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/MessageBoardAttachment\"\n                                type: array\n                        application/xml:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/MessageBoardAttachment\"\n                                type: array\n            tags: [\"MessageBoardAttachment\"]\n        post:\n            description:\n                Creates a new attachment for the message board thread. The request body should be `multipart/form-data`\n                with two parts, the file's bytes (`file`), and an optional JSON string (`knowledgeBaseAttachment`) with\n                the metadata.\n            operationId: postMessageBoardThreadMessageBoardAttachment\n            parameters:\n                - in: path\n                  name: messageBoardThreadId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    multipart/form-data:\n                        schema:\n                            properties:\n                                file:\n                                    format: binary\n                                    type: string\n                                knowledgeBaseAttachment:\n                                    $ref: \"#/components/schemas/MessageBoardAttachment\"\n                            type: object\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/MessageBoardAttachment\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/MessageBoardAttachment\"\n            tags: [\"MessageBoardAttachment\"]\n    \"/message-board-threads/{messageBoardThreadId}/message-board-messages\":\n        get:\n            description:\n                Retrieves the message board thread's messages. Results can be paginated, filtered, searched, and sorted.\n            operationId: getMessageBoardThreadMessageBoardMessagesPage\n            parameters:\n                - in: path\n                  name: messageBoardThreadId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: aggregationTerms\n                  schema:\n                      items:\n                          type: string\n                      type: array\n                - in: query\n                  name: filter\n                  schema:\n                      type: string\n                - in: query\n                  name: page\n                  schema:\n                      type: integer\n                - in: query\n                  name: pageSize\n                  schema:\n                      type: integer\n                - in: query\n                  name: search\n                  schema:\n                      type: string\n                - in: query\n                  name: sort\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/MessageBoardMessage\"\n                                type: array\n                        application/xml:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/MessageBoardMessage\"\n                                type: array\n            tags: [\"MessageBoardMessage\"]\n        post:\n            description:\n                Creates a new message in the message board thread.\n            operationId: postMessageBoardThreadMessageBoardMessage\n            parameters:\n                - in: path\n                  name: messageBoardThreadId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/MessageBoardMessage\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/MessageBoardMessage\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/MessageBoardMessage\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/MessageBoardMessage\"\n            tags: [\"MessageBoardMessage\"]\n    \"/message-board-threads/{messageBoardThreadId}/my-rating\":\n        delete:\n            description:\n                Deletes the message board thread's rating and returns a 204 if the operation succeeds.\n            operationId: deleteMessageBoardThreadMyRating\n            parameters:\n                - in: path\n                  name: messageBoardThreadId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"MessageBoardThread\"]\n        get:\n            description:\n                Retrieves the message board thread's rating.\n            operationId: getMessageBoardThreadMyRating\n            parameters:\n                - in: path\n                  name: messageBoardThreadId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Rating\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/Rating\"\n            tags: [\"MessageBoardThread\"]\n        post:\n            description:\n                Creates the message board thread's rating.\n            operationId: postMessageBoardThreadMyRating\n            parameters:\n                - in: path\n                  name: messageBoardThreadId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/Rating\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/Rating\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Rating\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/Rating\"\n            tags: [\"MessageBoardThread\"]\n        put:\n            description:\n                Replaces the rating with the information sent in the request body. Any missing fields are deleted,\n                unless they are required.\n            operationId: putMessageBoardThreadMyRating\n            parameters:\n                - in: path\n                  name: messageBoardThreadId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/Rating\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/Rating\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Rating\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/Rating\"\n            tags: [\"MessageBoardThread\"]\n    \"/message-board-threads/{messageBoardThreadId}/permissions\":\n        get:\n            operationId: getMessageBoardThreadPermissionsPage\n            parameters:\n                - in: path\n                  name: messageBoardThreadId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: roleNames\n                  schema:\n                      type: string\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"MessageBoardThread\"]\n        put:\n            operationId: putMessageBoardThreadPermissionsPage\n            parameters:\n                - in: path\n                  name: messageBoardThreadId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"MessageBoardThread\"]\n    \"/message-board-threads/{messageBoardThreadId}/subscribe\":\n        put:\n            operationId: putMessageBoardThreadSubscribe\n            parameters:\n                - in: path\n                  name: messageBoardThreadId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"MessageBoardThread\"]\n    \"/message-board-threads/{messageBoardThreadId}/unsubscribe\":\n        put:\n            operationId: putMessageBoardThreadUnsubscribe\n            parameters:\n                - in: path\n                  name: messageBoardThreadId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"MessageBoardThread\"]\n    \"/navigation-menus/{navigationMenuId}\":\n        delete:\n            # @review\n            description:\n                Deletes the navigation menu and returns a 204 if the operation succeeds\n            operationId: deleteNavigationMenu\n            parameters:\n                - in: path\n                  name: navigationMenuId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"NavigationMenu\"]\n        get:\n            operationId: getNavigationMenu\n            parameters:\n                - in: path\n                  name: navigationMenuId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/NavigationMenu\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/NavigationMenu\"\n            tags: [\"NavigationMenu\"]\n        put:\n            # @review\n            description:\n                Replaces the navigation menu with the information sent in the request body. Any missing fields are\n                deleted, unless they are required.\n            operationId: putNavigationMenu\n            parameters:\n                - in: path\n                  name: navigationMenuId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/NavigationMenu\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/NavigationMenu\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/NavigationMenu\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/NavigationMenu\"\n            tags: [\"NavigationMenu\"]\n    \"/navigation-menus/{navigationMenuId}/permissions\":\n        get:\n            operationId: getNavigationMenuPermissionsPage\n            parameters:\n                - in: path\n                  name: navigationMenuId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: roleNames\n                  schema:\n                      type: string\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"NavigationMenu\"]\n        put:\n            operationId: putNavigationMenuPermissionsPage\n            parameters:\n                - in: path\n                  name: navigationMenuId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"NavigationMenu\"]\n    \"/sites/{siteId}/blog-posting-images\":\n        get:\n            description:\n                Retrieves the site's blog post images. Results can be paginated, filtered, searched, and sorted.\n            operationId: getSiteBlogPostingImagesPage\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: aggregationTerms\n                  schema:\n                      items:\n                          type: string\n                      type: array\n                - in: query\n                  name: filter\n                  schema:\n                      type: string\n                - in: query\n                  name: page\n                  schema:\n                      type: integer\n                - in: query\n                  name: pageSize\n                  schema:\n                      type: integer\n                - in: query\n                  name: search\n                  schema:\n                      type: string\n                - in: query\n                  name: sort\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/BlogPostingImage\"\n                                type: array\n                        application/xml:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/BlogPostingImage\"\n                                type: array\n            tags: [\"BlogPostingImage\"]\n        post:\n            description:\n                Creates a blog post image. The request body must be `multipart/form-data` with two parts, the file's\n                bytes (`file`), and an optional JSON string (`blogPostingImage`) with the metadata.\n            operationId: postSiteBlogPostingImage\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    multipart/form-data:\n                        schema:\n                            properties:\n                                blogPostingImage:\n                                    $ref: \"#/components/schemas/BlogPostingImage\"\n                                file:\n                                    format: binary\n                                    type: string\n                            type: object\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/BlogPostingImage\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/BlogPostingImage\"\n            tags: [\"BlogPostingImage\"]\n    \"/sites/{siteId}/blog-postings\":\n        get:\n            description:\n                Retrieves the site's blog postings. Results can be paginated, filtered, searched, and sorted.\n            operationId: getSiteBlogPostingsPage\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: aggregationTerms\n                  schema:\n                      items:\n                          type: string\n                      type: array\n                - in: query\n                  name: filter\n                  schema:\n                      type: string\n                - in: query\n                  name: page\n                  schema:\n                      type: integer\n                - in: query\n                  name: pageSize\n                  schema:\n                      type: integer\n                - in: query\n                  name: search\n                  schema:\n                      type: string\n                - in: query\n                  name: sort\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/BlogPosting\"\n                                type: array\n                        application/xml:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/BlogPosting\"\n                                type: array\n            tags: [\"BlogPosting\"]\n        post:\n            description:\n                Creates a new blog post.\n            operationId: postSiteBlogPosting\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/BlogPosting\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/BlogPosting\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/BlogPosting\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/BlogPosting\"\n            tags: [\"BlogPosting\"]\n    \"/sites/{siteId}/blog-postings/by-external-reference-code/{externalReferenceCode}\":\n        delete:\n            # @review\n            description:\n                Deletes the blog post by external reference code.\n            operationId: deleteSiteBlogPostingByExternalReferenceCode\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: path\n                  name: externalReferenceCode\n                  required: true\n                  schema:\n                      type: string\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"BlogPosting\"]\n        get:\n            # @review\n            description:\n                Retrieves the site's blog post by external reference code.\n            operationId: getSiteBlogPostingByExternalReferenceCode\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: path\n                  name: externalReferenceCode\n                  required: true\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/BlogPosting\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/BlogPosting\"\n            tags: [\"BlogPosting\"]\n        put:\n            # @review\n            description:\n                Updates the site's blog post with the given external reference code, or creates it if it not exists.\n            operationId: putSiteBlogPostingByExternalReferenceCode\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: path\n                  name: externalReferenceCode\n                  required: true\n                  schema:\n                      type: string\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/BlogPosting\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/BlogPosting\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/BlogPosting\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/BlogPosting\"\n            tags: [\"BlogPosting\"]\n    \"/sites/{siteId}/blog-postings/permissions\":\n        get:\n            operationId: getSiteBlogPostingPermissionsPage\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: roleNames\n                  schema:\n                      type: string\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"BlogPosting\"]\n        put:\n            operationId: putSiteBlogPostingPermissionsPage\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"BlogPosting\"]\n    \"/sites/{siteId}/blog-postings/subscribe\":\n        put:\n            operationId: putSiteBlogPostingSubscribe\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"BlogPosting\"]\n    \"/sites/{siteId}/blog-postings/unsubscribe\":\n        put:\n            operationId: putSiteBlogPostingUnsubscribe\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"BlogPosting\"]\n    \"/sites/{siteId}/content-elements\":\n        get:\n            operationId: getSiteContentElementsPage\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: aggregationTerms\n                  schema:\n                      items:\n                          type: string\n                      type: array\n                - in: query\n                  name: filter\n                  schema:\n                      type: string\n                - in: query\n                  name: page\n                  schema:\n                      type: integer\n                - in: query\n                  name: pageSize\n                  schema:\n                      type: integer\n                - in: query\n                  name: search\n                  schema:\n                      type: string\n                - in: query\n                  name: sort\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/ContentElement\"\n                                type: array\n                        application/xml:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/ContentElement\"\n                                type: array\n            tags: [\"ContentElement\"]\n    \"/sites/{siteId}/content-sets/by-key/{key}/content-set-elements\":\n        get:\n            description:\n                Retrieves the content set elements by key. Results can be paginated.\n            operationId: getSiteContentSetByKeyContentSetElementsPage\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: path\n                  name: key\n                  required: true\n                  schema:\n                      type: string\n                - in: query\n                  name: page\n                  schema:\n                      type: integer\n                - in: query\n                  name: pageSize\n                  schema:\n                      type: integer\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/ContentSetElement\"\n                                type: array\n                        application/xml:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/ContentSetElement\"\n                                type: array\n            tags: [\"ContentSetElement\"]\n    \"/sites/{siteId}/content-sets/by-uuid/{uuid}/content-set-elements\":\n        get:\n            description:\n                Retrieves the content set elements by UUID. Results can be paginated.\n            operationId: getSiteContentSetByUuidContentSetElementsPage\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: path\n                  name: uuid\n                  required: true\n                  schema:\n                      type: string\n                - in: query\n                  name: page\n                  schema:\n                      type: integer\n                - in: query\n                  name: pageSize\n                  schema:\n                      type: integer\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/ContentSetElement\"\n                                type: array\n                        application/xml:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/ContentSetElement\"\n                                type: array\n            tags: [\"ContentSetElement\"]\n    \"/sites/{siteId}/content-structures\":\n        get:\n            description:\n                Retrieves the site's content structures. Results can be paginated, filtered, searched, and sorted.\n            operationId: getSiteContentStructuresPage\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: aggregationTerms\n                  schema:\n                      items:\n                          type: string\n                      type: array\n                - in: query\n                  name: filter\n                  schema:\n                      type: string\n                - in: query\n                  name: page\n                  schema:\n                      type: integer\n                - in: query\n                  name: pageSize\n                  schema:\n                      type: integer\n                - in: query\n                  name: search\n                  schema:\n                      type: string\n                - in: query\n                  name: sort\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/ContentStructure\"\n                                type: array\n                        application/xml:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/ContentStructure\"\n                                type: array\n            tags: [\"ContentStructure\"]\n    \"/sites/{siteId}/content-structures/permissions\":\n        get:\n            operationId: getSiteContentStructurePermissionsPage\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: roleNames\n                  schema:\n                      type: string\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"ContentStructure\"]\n        put:\n            operationId: putSiteContentStructurePermissionsPage\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"ContentStructure\"]\n    \"/sites/{siteId}/content-templates\":\n        get:\n            operationId: getSiteContentTemplatesPage\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: aggregationTerms\n                  schema:\n                      items:\n                          type: string\n                      type: array\n                - in: query\n                  name: filter\n                  schema:\n                      type: string\n                - in: query\n                  name: page\n                  schema:\n                      type: integer\n                - in: query\n                  name: pageSize\n                  schema:\n                      type: integer\n                - in: query\n                  name: search\n                  schema:\n                      type: string\n                - in: query\n                  name: sort\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/ContentTemplate\"\n                                type: array\n                        application/xml:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/ContentTemplate\"\n                                type: array\n            tags: [\"ContentTemplate\"]\n    \"/sites/{siteId}/content-templates/{contentTemplateId}\":\n        get:\n            operationId: getSiteContentTemplate\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: path\n                  name: contentTemplateId\n                  required: true\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/ContentTemplate\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/ContentTemplate\"\n            tags: [\"ContentTemplate\"]\n    \"/sites/{siteId}/document-folders\":\n        get:\n            description:\n                Retrieves the site's document folders. Results can be paginated, filtered, searched, flattened, and\n                sorted.\n            operationId: getSiteDocumentFoldersPage\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: aggregationTerms\n                  schema:\n                      items:\n                          type: string\n                      type: array\n                - in: query\n                  name: flatten\n                  schema:\n                      type: boolean\n                - in: query\n                  name: filter\n                  schema:\n                      type: string\n                - in: query\n                  name: page\n                  schema:\n                      type: integer\n                - in: query\n                  name: pageSize\n                  schema:\n                      type: integer\n                - in: query\n                  name: search\n                  schema:\n                      type: string\n                - in: query\n                  name: sort\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/DocumentFolder\"\n                                type: array\n                        application/xml:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/DocumentFolder\"\n                                type: array\n            tags: [\"DocumentFolder\"]\n        post:\n            description:\n                Creates a new document folder.\n            operationId: postSiteDocumentFolder\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/DocumentFolder\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/DocumentFolder\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/DocumentFolder\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/DocumentFolder\"\n            tags: [\"DocumentFolder\"]\n    \"/sites/{siteId}/document-folders/permissions\":\n        get:\n            operationId: getSiteDocumentFolderPermissionsPage\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: roleNames\n                  schema:\n                      type: string\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"DocumentFolder\"]\n        put:\n            operationId: putSiteDocumentFolderPermissionsPage\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"DocumentFolder\"]\n    \"/sites/{siteId}/documents\":\n        get:\n            description:\n                Retrieves the documents in the site's root folder. Results can be paginated, filtered, searched,\n                flattened, and sorted.\n            operationId: getSiteDocumentsPage\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: aggregationTerms\n                  schema:\n                      items:\n                          type: string\n                      type: array\n                - in: query\n                  name: flatten\n                  schema:\n                      type: boolean\n                - in: query\n                  name: filter\n                  schema:\n                      type: string\n                - in: query\n                  name: page\n                  schema:\n                      type: integer\n                - in: query\n                  name: pageSize\n                  schema:\n                      type: integer\n                - in: query\n                  name: search\n                  schema:\n                      type: string\n                - in: query\n                  name: sort\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/Document\"\n                                type: array\n                        application/xml:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/Document\"\n                                type: array\n            tags: [\"Document\"]\n        post:\n            description:\n                Creates a new document. The request body must be `multipart/form-data` with two parts, the file's bytes\n                (`file`), and an optional JSON string (`document`) with the metadata.\n            operationId: postSiteDocument\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    multipart/form-data:\n                        schema:\n                            properties:\n                                document:\n                                    $ref: \"#/components/schemas/Document\"\n                                file:\n                                    format: binary\n                                    type: string\n                            type: object\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Document\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/Document\"\n            tags: [\"Document\"]\n    \"/sites/{siteId}/documents/by-external-reference-code/{externalReferenceCode}\":\n        delete:\n            # @review\n            description:\n                Deletes the site's document by external reference code returns a 204 if the operation succeeds.\n            operationId: deleteSiteDocumentByExternalReferenceCode\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: path\n                  name: externalReferenceCode\n                  required: true\n                  schema:\n                      type: string\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"Document\"]\n        get:\n            # @review\n            description:\n                Retrieves the site's document by external reference code.\n            operationId: getSiteDocumentByExternalReferenceCode\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: path\n                  name: externalReferenceCode\n                  required: true\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Document\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/Document\"\n            tags: [\"Document\"]\n        put:\n            # @review\n            description:\n                Replaces the document by external reference code with the information sent in the request body, or\n                replaces it if it not exists. Any missing fields are deleted, unless they are required. The request body\n                must be `multipart/form-data` with two parts, the file'sbytes (`file`), and an optional JSON string\n                (`document`) with the metadata.\n            operationId: putSiteDocumentByExternalReferenceCode\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: path\n                  name: externalReferenceCode\n                  required: true\n                  schema:\n                      type: string\n            requestBody:\n                content:\n                    multipart/form-data:\n                        schema:\n                            properties:\n                                document:\n                                    $ref: \"#/components/schemas/Document\"\n                                file:\n                                    format: binary\n                                    type: string\n                            type: object\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Document\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/Document\"\n            tags: [\"Document\"]\n    \"/sites/{siteId}/documents/permissions\":\n        get:\n            operationId: getSiteDocumentPermissionsPage\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: roleNames\n                  schema:\n                      type: string\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"Document\"]\n        put:\n            operationId: putSiteDocumentPermissionsPage\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"Document\"]\n    \"/sites/{siteId}/knowledge-base-articles\":\n        get:\n            description:\n                Retrieves the site's knowledge base articles. Results can be paginated, filtered, searched, flattened,\n                and sorted.\n            operationId: getSiteKnowledgeBaseArticlesPage\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: aggregationTerms\n                  schema:\n                      items:\n                          type: string\n                      type: array\n                - in: query\n                  name: flatten\n                  schema:\n                      type: boolean\n                - in: query\n                  name: filter\n                  schema:\n                      type: string\n                - in: query\n                  name: page\n                  schema:\n                      type: integer\n                - in: query\n                  name: pageSize\n                  schema:\n                      type: integer\n                - in: query\n                  name: search\n                  schema:\n                      type: string\n                - in: query\n                  name: sort\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/KnowledgeBaseArticle\"\n                                type: array\n                        application/xml:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/KnowledgeBaseArticle\"\n                                type: array\n            tags: [\"KnowledgeBaseArticle\"]\n        post:\n            description:\n                Creates a new knowledge base article.\n            operationId: postSiteKnowledgeBaseArticle\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/KnowledgeBaseArticle\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/KnowledgeBaseArticle\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/KnowledgeBaseArticle\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/KnowledgeBaseArticle\"\n            tags: [\"KnowledgeBaseArticle\"]\n    \"/sites/{siteId}/knowledge-base-articles/by-external-reference-code/{externalReferenceCode}\":\n        delete:\n            # @review\n            description:\n                Deletes the knowledge base article by external reference code.\n            operationId: deleteSiteKnowledgeBaseArticleByExternalReferenceCode\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: path\n                  name: externalReferenceCode\n                  required: true\n                  schema:\n                      type: string\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"KnowledgeBaseArticle\"]\n        get:\n            # @review\n            description:\n                Retrieves the site's knowledge base article by external reference code.\n            operationId: getSiteKnowledgeBaseArticleByExternalReferenceCode\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: path\n                  name: externalReferenceCode\n                  required: true\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/KnowledgeBaseArticle\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/KnowledgeBaseArticle\"\n            tags: [\"KnowledgeBaseArticle\"]\n        put:\n            # @review\n            description:\n                Updates the site's knowledge base article with the given external reference code, or creates it if it\n                not exists.\n            operationId: putSiteKnowledgeBaseArticleByExternalReferenceCode\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: path\n                  name: externalReferenceCode\n                  required: true\n                  schema:\n                      type: string\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/KnowledgeBaseArticle\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/KnowledgeBaseArticle\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/KnowledgeBaseArticle\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/KnowledgeBaseArticle\"\n            tags: [\"KnowledgeBaseArticle\"]\n    \"/sites/{siteId}/knowledge-base-articles/permissions\":\n        get:\n            operationId: getSiteKnowledgeBaseArticlePermissionsPage\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: roleNames\n                  schema:\n                      type: string\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"KnowledgeBaseArticle\"]\n        put:\n            operationId: putSiteKnowledgeBaseArticlePermissionsPage\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"KnowledgeBaseArticle\"]\n    \"/sites/{siteId}/knowledge-base-articles/subscribe\":\n        put:\n            operationId: putSiteKnowledgeBaseArticleSubscribe\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"KnowledgeBaseArticle\"]\n    \"/sites/{siteId}/knowledge-base-articles/unsubscribe\":\n        put:\n            operationId: putSiteKnowledgeBaseArticleUnsubscribe\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"KnowledgeBaseArticle\"]\n    \"/sites/{siteId}/knowledge-base-folders\":\n        get:\n            description:\n                Retrieves the site's knowledge base folders. Results can be paginated.\n            operationId: getSiteKnowledgeBaseFoldersPage\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: page\n                  schema:\n                      type: integer\n                - in: query\n                  name: pageSize\n                  schema:\n                      type: integer\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/KnowledgeBaseFolder\"\n                                type: array\n                        application/xml:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/KnowledgeBaseFolder\"\n                                type: array\n            tags: [\"KnowledgeBaseFolder\"]\n        post:\n            description:\n                Creates a new knowledge base folder.\n            operationId: postSiteKnowledgeBaseFolder\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/KnowledgeBaseFolder\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/KnowledgeBaseFolder\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/KnowledgeBaseFolder\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/KnowledgeBaseFolder\"\n            tags: [\"KnowledgeBaseFolder\"]\n    \"/sites/{siteId}/knowledge-base-folders/by-external-reference-code/{externalReferenceCode}\":\n        delete:\n            # @review\n            description:\n                Deletes the knowledge base folder by external reference code.\n            operationId: deleteSiteKnowledgeBaseFolderByExternalReferenceCode\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: path\n                  name: externalReferenceCode\n                  required: true\n                  schema:\n                      type: string\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"KnowledgeBaseFolder\"]\n        get:\n            # @review\n            description:\n                Retrieves the site's knowledge base folder by external reference code.\n            operationId: getSiteKnowledgeBaseFolderByExternalReferenceCode\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: path\n                  name: externalReferenceCode\n                  required: true\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/KnowledgeBaseFolder\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/KnowledgeBaseFolder\"\n            tags: [\"KnowledgeBaseFolder\"]\n        put:\n            # @review\n            description:\n                Updates the site's knowledge base folder with the given external reference code, or creates it if it not\n                exists.\n            operationId: putSiteKnowledgeBaseFolderByExternalReferenceCode\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: path\n                  name: externalReferenceCode\n                  required: true\n                  schema:\n                      type: string\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/KnowledgeBaseFolder\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/KnowledgeBaseFolder\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/KnowledgeBaseFolder\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/KnowledgeBaseFolder\"\n            tags: [\"KnowledgeBaseFolder\"]\n    \"/sites/{siteId}/knowledge-base-folders/permissions\":\n        get:\n            operationId: getSiteKnowledgeBaseFolderPermissionsPage\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: roleNames\n                  schema:\n                      type: string\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"KnowledgeBaseFolder\"]\n        put:\n            operationId: putSiteKnowledgeBaseFolderPermissionsPage\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"KnowledgeBaseFolder\"]\n    \"/sites/{siteId}/languages\":\n        get:\n            # @review\n            description:\n                Retrieves the site's languages.\n            operationId: getSiteLanguagesPage\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/Language\"\n                                type: array\n                        application/xml:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/Language\"\n                                type: array\n            tags: [\"Language\"]\n    \"/sites/{siteId}/message-board-messages\":\n        # @review\n        get:\n            description:\n                Retrieves the site's message board messages.\n            operationId: getSiteMessageBoardMessagesPage\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: aggregationTerms\n                  schema:\n                      items:\n                          type: string\n                      type: array\n                - in: query\n                  name: flatten\n                  schema:\n                      type: boolean\n                - in: query\n                  name: filter\n                  schema:\n                      type: string\n                - in: query\n                  name: page\n                  schema:\n                      type: integer\n                - in: query\n                  name: pageSize\n                  schema:\n                      type: integer\n                - in: query\n                  name: search\n                  schema:\n                      type: string\n                - in: query\n                  name: sort\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/MessageBoardMessage\"\n                                type: array\n                        application/xml:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/MessageBoardMessage\"\n                                type: array\n            tags: [\"MessageBoardMessage\"]\n    \"/sites/{siteId}/message-board-messages/by-external-reference-code/{externalReferenceCode}\":\n        delete:\n            # @review\n            description:\n                Deletes the site's message board message by external reference code.\n            operationId: deleteSiteMessageBoardMessageByExternalReferenceCode\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: path\n                  name: externalReferenceCode\n                  required: true\n                  schema:\n                      type: string\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"MessageBoardMessage\"]\n        get:\n            # @review\n            description:\n                Retrieves the site's message board message by external reference code.\n            operationId: getSiteMessageBoardMessageByExternalReferenceCode\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: path\n                  name: externalReferenceCode\n                  required: true\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/MessageBoardMessage\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/MessageBoardMessage\"\n            tags: [\"MessageBoardMessage\"]\n        put:\n            # @review\n            description:\n                Updates the site's message board message with the given external reference code, or creates it if it not\n                exists.\n            operationId: putSiteMessageBoardMessageByExternalReferenceCode\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: path\n                  name: externalReferenceCode\n                  required: true\n                  schema:\n                      type: string\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/MessageBoardMessage\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/MessageBoardMessage\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/MessageBoardMessage\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/MessageBoardMessage\"\n            tags: [\"MessageBoardMessage\"]\n    \"/sites/{siteId}/message-board-messages/by-friendly-url-path/{friendlyUrlPath}\":\n        get:\n            operationId: getSiteMessageBoardMessageByFriendlyUrlPath\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: path\n                  name: friendlyUrlPath\n                  required: true\n                  schema:\n                      type: string\n                - in: header\n                  name: Accept-Language\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/MessageBoardMessage\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/MessageBoardMessage\"\n            tags: [\"MessageBoardMessage\"]\n    \"/sites/{siteId}/message-board-messages/permissions\":\n        get:\n            operationId: getSiteMessageBoardMessagePermissionsPage\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: roleNames\n                  schema:\n                      type: string\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"MessageBoardMessage\"]\n        put:\n            operationId: putSiteMessageBoardMessagePermissionsPage\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"MessageBoardMessage\"]\n    \"/sites/{siteId}/message-board-sections\":\n        get:\n            description:\n                Retrieves the site's message board sections. Results can be paginated, filtered, searched, flattened,\n                and sorted.\n            operationId: getSiteMessageBoardSectionsPage\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: aggregationTerms\n                  schema:\n                      items:\n                          type: string\n                      type: array\n                - in: query\n                  name: flatten\n                  schema:\n                      type: boolean\n                - in: query\n                  name: filter\n                  schema:\n                      type: string\n                - in: query\n                  name: page\n                  schema:\n                      type: integer\n                - in: query\n                  name: pageSize\n                  schema:\n                      type: integer\n                - in: query\n                  name: search\n                  schema:\n                      type: string\n                - in: query\n                  name: sort\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/MessageBoardSection\"\n                                type: array\n                        application/xml:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/MessageBoardSection\"\n                                type: array\n            tags: [\"MessageBoardSection\"]\n        post:\n            description:\n                Creates a new message board section.\n            operationId: postSiteMessageBoardSection\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/MessageBoardSection\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/MessageBoardSection\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/MessageBoardSection\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/MessageBoardSection\"\n            tags: [\"MessageBoardSection\"]\n    \"/sites/{siteId}/message-board-sections/permissions\":\n        get:\n            operationId: getSiteMessageBoardSectionPermissionsPage\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: roleNames\n                  schema:\n                      type: string\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"MessageBoardSection\"]\n        put:\n            operationId: putSiteMessageBoardSectionPermissionsPage\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"MessageBoardSection\"]\n    \"/sites/{siteId}/message-board-threads\":\n        get:\n            description:\n                Retrieves the site's message board threads. Results can be paginated, filtered, searched, flattened, and\n                sorted.\n            operationId: getSiteMessageBoardThreadsPage\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: aggregationTerms\n                  schema:\n                      items:\n                          type: string\n                      type: array\n                - in: query\n                  name: flatten\n                  schema:\n                      type: boolean\n                - in: query\n                  name: filter\n                  schema:\n                      type: string\n                - in: query\n                  name: page\n                  schema:\n                      type: integer\n                - in: query\n                  name: pageSize\n                  schema:\n                      type: integer\n                - in: query\n                  name: search\n                  schema:\n                      type: string\n                - in: query\n                  name: sort\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/MessageBoardThread\"\n                                type: array\n                        application/xml:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/MessageBoardThread\"\n                                type: array\n            tags: [\"MessageBoardThread\"]\n        post:\n            description:\n                Creates a new message board thread.\n            operationId: postSiteMessageBoardThread\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/MessageBoardThread\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/MessageBoardThread\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/MessageBoardThread\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/MessageBoardThread\"\n            tags: [\"MessageBoardThread\"]\n    \"/sites/{siteId}/message-board-threads/by-friendly-url-path/{friendlyUrlPath}\":\n        get:\n            operationId: getSiteMessageBoardThreadByFriendlyUrlPath\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: path\n                  name: friendlyUrlPath\n                  required: true\n                  schema:\n                      type: string\n                - in: header\n                  name: Accept-Language\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/MessageBoardThread\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/MessageBoardThread\"\n            tags: [\"MessageBoardThread\"]\n    \"/sites/{siteId}/message-board-threads/permissions\":\n        get:\n            operationId: getSiteMessageBoardThreadPermissionsPage\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: roleNames\n                  schema:\n                      type: string\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"MessageBoardThread\"]\n        put:\n            operationId: putSiteMessageBoardThreadPermissionsPage\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"MessageBoardThread\"]\n    \"/sites/{siteId}/navigation-menus\":\n        get:\n            operationId: getSiteNavigationMenusPage\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: page\n                  schema:\n                      type: integer\n                - in: query\n                  name: pageSize\n                  schema:\n                      type: integer\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/NavigationMenu\"\n                                type: array\n                        application/xml:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/NavigationMenu\"\n                                type: array\n            tags: [\"NavigationMenu\"]\n        post:\n            # @review\n            description:\n                Creates a new navigation menu.\n            operationId: postSiteNavigationMenu\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/NavigationMenu\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/NavigationMenu\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/NavigationMenu\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/NavigationMenu\"\n            tags: [\"NavigationMenu\"]\n    \"/sites/{siteId}/navigation-menus/permissions\":\n        get:\n            operationId: getSiteNavigationMenuPermissionsPage\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: roleNames\n                  schema:\n                      type: string\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"NavigationMenu\"]\n        put:\n            operationId: putSiteNavigationMenuPermissionsPage\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"NavigationMenu\"]\n    \"/sites/{siteId}/site-pages\":\n        get:\n            # @review\n            description:\n                Retrieves the public pages of the site\n            operationId: getSiteSitePagesPage\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: aggregationTerms\n                  schema:\n                      items:\n                          type: string\n                      type: array\n                - in: query\n                  name: filter\n                  schema:\n                      type: string\n                - in: query\n                  name: page\n                  schema:\n                      type: integer\n                - in: query\n                  name: pageSize\n                  schema:\n                      type: integer\n                - in: query\n                  name: search\n                  schema:\n                      type: string\n                - in: query\n                  name: sort\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/SitePage\"\n                                type: array\n                        application/xml:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/SitePage\"\n                                type: array\n            tags: [\"SitePage\"]\n    \"/sites/{siteId}/site-pages/{friendlyUrlPath}\":\n        get:\n            # @review\n            description:\n                Retrieves a specific public page of a site\n            operationId: getSiteSitePage\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: path\n                  name: friendlyUrlPath\n                  required: true\n                  schema:\n                      type: string\n                - in: header\n                  name: Accept-Language\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/SitePage\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/SitePage\"\n            tags: [\"SitePage\"]\n    \"/sites/{siteId}/site-pages/{friendlyUrlPath}/experiences\":\n        get:\n            # @review\n            description:\n                Retrieves the experiences of a given Page\n            operationId: getSiteSitePagesExperiencesPage\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: path\n                  name: friendlyUrlPath\n                  required: true\n                  schema:\n                      type: string\n                - in: header\n                  name: Accept-Language\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/SitePage\"\n                                type: array\n                        application/xml:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/SitePage\"\n                                type: array\n            tags: [\"SitePage\"]\n    \"/sites/{siteId}/site-pages/{friendlyUrlPath}/experiences/{experienceKey}\":\n        get:\n            # @review\n            description:\n                Retrieves a specific public page of a site for a given experience\n            operationId: getSiteSitePageExperienceExperienceKey\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: path\n                  name: friendlyUrlPath\n                  required: true\n                  schema:\n                      type: string\n                - in: path\n                  name: experienceKey\n                  required: true\n                  schema:\n                      type: string\n                - in: header\n                  name: Accept-Language\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/SitePage\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/SitePage\"\n            tags: [\"SitePage\"]\n    \"/sites/{siteId}/site-pages/{friendlyUrlPath}/experiences/{experienceKey}/rendered-page\":\n        get:\n            description:\n                Retrieves the rendered content of a given public page for a given experience.\n            operationId: getSiteSitePageExperienceExperienceKeyRenderedPage\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: path\n                  name: friendlyUrlPath\n                  required: true\n                  schema:\n                      type: string\n                - in: path\n                  name: experienceKey\n                  required: true\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        text/html:\n                            schema:\n                                type: string\n            tags: [\"SitePage\"]\n    \"/sites/{siteId}/site-pages/{friendlyUrlPath}/rendered-page\":\n        get:\n            description:\n                Retrieves the rendered content of a given public page.\n            operationId: getSiteSitePageRenderedPage\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: path\n                  name: friendlyUrlPath\n                  required: true\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        text/html:\n                            schema:\n                                type: string\n            tags: [\"SitePage\"]\n    \"/sites/{siteId}/structured-content-folders\":\n        get:\n            description:\n                Retrieves the site's structured content folders. Results can be paginated, filtered, searched,\n                flattened, and sorted.\n            operationId: getSiteStructuredContentFoldersPage\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: aggregationTerms\n                  schema:\n                      items:\n                          type: string\n                      type: array\n                - in: query\n                  name: flatten\n                  schema:\n                      type: boolean\n                - in: query\n                  name: filter\n                  schema:\n                      type: string\n                - in: query\n                  name: page\n                  schema:\n                      type: integer\n                - in: query\n                  name: pageSize\n                  schema:\n                      type: integer\n                - in: query\n                  name: search\n                  schema:\n                      type: string\n                - in: query\n                  name: sort\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/StructuredContentFolder\"\n                                type: array\n                        application/xml:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/StructuredContentFolder\"\n                                type: array\n            tags: [\"StructuredContentFolder\"]\n        post:\n            description:\n                Creates a new structured content folder.\n            operationId: postSiteStructuredContentFolder\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/StructuredContentFolder\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/StructuredContentFolder\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/StructuredContentFolder\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/StructuredContentFolder\"\n            tags: [\"StructuredContentFolder\"]\n    \"/sites/{siteId}/structured-content-folders/permissions\":\n        get:\n            operationId: getSiteStructuredContentFolderPermissionsPage\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: roleNames\n                  schema:\n                      type: string\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"StructuredContentFolder\"]\n        put:\n            operationId: putSiteStructuredContentFolderPermissionsPage\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"StructuredContentFolder\"]\n    \"/sites/{siteId}/structured-contents\":\n        get:\n            description:\n                Retrieves the site's structured content. Results can be paginated, filtered, searched, flattened, and\n                sorted.\n            operationId: getSiteStructuredContentsPage\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: aggregationTerms\n                  schema:\n                      items:\n                          type: string\n                      type: array\n                - in: query\n                  name: flatten\n                  schema:\n                      type: boolean\n                - in: query\n                  name: filter\n                  schema:\n                      type: string\n                - in: query\n                  name: page\n                  schema:\n                      type: integer\n                - in: query\n                  name: pageSize\n                  schema:\n                      type: integer\n                - in: query\n                  name: search\n                  schema:\n                      type: string\n                - in: query\n                  name: sort\n                  schema:\n                      type: string\n                - in: header\n                  name: Accept-Language\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/StructuredContent\"\n                                type: array\n                        application/xml:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/StructuredContent\"\n                                type: array\n            tags: [\"StructuredContent\"]\n        post:\n            description:\n                Creates a new structured content.\n            operationId: postSiteStructuredContent\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: header\n                  name: Accept-Language\n                  schema:\n                      type: string\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/StructuredContent\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/StructuredContent\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/StructuredContent\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/StructuredContent\"\n            tags: [\"StructuredContent\"]\n    \"/sites/{siteId}/structured-contents/by-external-reference-code/{externalReferenceCode}\":\n        delete:\n            # @review\n            description:\n                Deletes the site's structured content by external reference code.\n            operationId: deleteSiteStructuredContentByExternalReferenceCode\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: path\n                  name: externalReferenceCode\n                  required: true\n                  schema:\n                      type: string\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"StructuredContent\"]\n        get:\n            # @review\n            description:\n                Retrieves the site's structured content by external reference code.\n            operationId: getSiteStructuredContentByExternalReferenceCode\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: path\n                  name: externalReferenceCode\n                  required: true\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/StructuredContent\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/StructuredContent\"\n            tags: [\"StructuredContent\"]\n        put:\n            # @review\n            description:\n                Updates the site's structured content with the given external reference code, or creates it if it not\n                exists.\n            operationId: putSiteStructuredContentByExternalReferenceCode\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: path\n                  name: externalReferenceCode\n                  required: true\n                  schema:\n                      type: string\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/StructuredContent\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/StructuredContent\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/StructuredContent\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/StructuredContent\"\n            tags: [\"StructuredContent\"]\n    \"/sites/{siteId}/structured-contents/by-key/{key}\":\n        get:\n            description:\n                Retrieves a structured content by its key (`articleKey`).\n            operationId: getSiteStructuredContentByKey\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: path\n                  name: key\n                  required: true\n                  schema:\n                      type: string\n                - in: header\n                  name: Accept-Language\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/StructuredContent\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/StructuredContent\"\n            tags: [\"StructuredContent\"]\n    \"/sites/{siteId}/structured-contents/by-uuid/{uuid}\":\n        get:\n            description:\n                Retrieves a structured content by its UUID.\n            operationId: getSiteStructuredContentByUuid\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: path\n                  name: uuid\n                  required: true\n                  schema:\n                      type: string\n                - in: header\n                  name: Accept-Language\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/StructuredContent\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/StructuredContent\"\n            tags: [\"StructuredContent\"]\n    \"/sites/{siteId}/structured-contents/permissions\":\n        get:\n            operationId: getSiteStructuredContentPermissionsPage\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: roleNames\n                  schema:\n                      type: string\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"StructuredContent\"]\n        put:\n            operationId: putSiteStructuredContentPermissionsPage\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"StructuredContent\"]\n    \"/sites/{siteId}/wiki-nodes\":\n        get:\n            # @review\n            description:\n                Retrieves the wiki node's of a site. Results can be paginated, filtered, searched, and sorted.\n            operationId: getSiteWikiNodesPage\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: aggregationTerms\n                  schema:\n                      items:\n                          type: string\n                      type: array\n                - in: query\n                  name: filter\n                  schema:\n                      type: string\n                - in: query\n                  name: page\n                  schema:\n                      type: integer\n                - in: query\n                  name: pageSize\n                  schema:\n                      type: integer\n                - in: query\n                  name: search\n                  schema:\n                      type: string\n                - in: query\n                  name: sort\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/WikiNode\"\n                        application/xml:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/WikiNode\"\n            tags: [\"WikiNode\"]\n        post:\n            description:\n                Creates a new wiki node\n            operationId: postSiteWikiNode\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/WikiNode\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/WikiNode\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/WikiNode\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/WikiNode\"\n            tags: [\"WikiNode\"]\n    \"/sites/{siteId}/wiki-nodes/by-external-reference-code/{externalReferenceCode}\":\n        delete:\n            # @review\n            description:\n                Deletes the site's wiki node by external reference code.\n            operationId: deleteSiteWikiNodeByExternalReferenceCode\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: path\n                  name: externalReferenceCode\n                  required: true\n                  schema:\n                      type: string\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"WikiNode\"]\n        get:\n            # @review\n            description:\n                Retrieves the site's wiki node by external reference code.\n            operationId: getSiteWikiNodeByExternalReferenceCode\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: path\n                  name: externalReferenceCode\n                  required: true\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/WikiNode\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/WikiNode\"\n            tags: [\"WikiNode\"]\n        put:\n            # @review\n            description:\n                Updates the site's wiki node with the given external reference code, or creates it if it not exists.\n            operationId: putSiteWikiNodeByExternalReferenceCode\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: path\n                  name: externalReferenceCode\n                  required: true\n                  schema:\n                      type: string\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/WikiNode\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/WikiNode\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/WikiNode\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/WikiNode\"\n            tags: [\"WikiNode\"]\n    \"/sites/{siteId}/wiki-nodes/permissions\":\n        get:\n            operationId: getSiteWikiNodePermissionsPage\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: roleNames\n                  schema:\n                      type: string\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"WikiNode\"]\n        put:\n            operationId: putSiteWikiNodePermissionsPage\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"WikiNode\"]\n    \"/sites/{siteId}/wiki-pages/by-external-reference-code/{externalReferenceCode}\":\n        delete:\n            # @review\n            description:\n                Deletes the wiki page by external reference code.\n            operationId: deleteSiteWikiPageByExternalReferenceCode\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: path\n                  name: externalReferenceCode\n                  required: true\n                  schema:\n                      type: string\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"WikiPage\"]\n        get:\n            # @review\n            description:\n                Retrieves the wiki page by external reference code\n            operationId: getSiteWikiPageByExternalReferenceCode\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: path\n                  name: externalReferenceCode\n                  required: true\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/WikiPage\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/WikiPage\"\n            tags: [\"WikiPage\"]\n        put:\n            # @review\n            description:\n                Updates the wiki page with the given external reference code, or creates it if it not exists.\n            operationId: putSiteWikiPageByExternalReferenceCode\n            parameters:\n                - in: path\n                  name: siteId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: path\n                  name: externalReferenceCode\n                  required: true\n                  schema:\n                      type: string\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/WikiPage\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/WikiPage\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/WikiPage\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/WikiPage\"\n            tags: [\"WikiPage\"]\n    \"/structured-content-folder/{structuredContentFolderId}/permissions\":\n        get:\n            operationId: getStructuredContentFolderPermissionsPage\n            parameters:\n                - in: path\n                  name: structuredContentFolderId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: roleNames\n                  schema:\n                      type: string\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"StructuredContentFolder\"]\n        put:\n            operationId: putStructuredContentFolderPermissionsPage\n            parameters:\n                - in: path\n                  name: structuredContentFolderId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"StructuredContentFolder\"]\n    \"/structured-content-folders/{parentStructuredContentFolderId}/structured-content-folders\":\n        get:\n            description:\n                Retrieves the parent structured content folder's subfolders. Results can be paginated, filtered,\n                searched, and sorted.\n            operationId: getStructuredContentFolderStructuredContentFoldersPage\n            parameters:\n                - in: path\n                  name: parentStructuredContentFolderId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: aggregationTerms\n                  schema:\n                      items:\n                          type: string\n                      type: array\n                - in: query\n                  name: filter\n                  schema:\n                      type: string\n                - in: query\n                  name: page\n                  schema:\n                      type: integer\n                - in: query\n                  name: pageSize\n                  schema:\n                      type: integer\n                - in: query\n                  name: search\n                  schema:\n                      type: string\n                - in: query\n                  name: sort\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/StructuredContentFolder\"\n                                type: array\n                        application/xml:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/StructuredContentFolder\"\n                                type: array\n            tags: [\"StructuredContentFolder\"]\n        post:\n            description:\n                Creates a new structured content folder in an existing folder.\n            operationId: postStructuredContentFolderStructuredContentFolder\n            parameters:\n                - in: path\n                  name: parentStructuredContentFolderId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/StructuredContentFolder\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/StructuredContentFolder\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/StructuredContentFolder\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/StructuredContentFolder\"\n            tags: [\"StructuredContentFolder\"]\n    \"/structured-content-folders/{structuredContentFolderId}\":\n        delete:\n            description:\n                Deletes the structured content folder and returns a 204 if the operation succeeds.\n            operationId: deleteStructuredContentFolder\n            parameters:\n                - in: path\n                  name: structuredContentFolderId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"StructuredContentFolder\"]\n        get:\n            description:\n                Retrieves the structured content folder.\n            operationId: getStructuredContentFolder\n            parameters:\n                - in: path\n                  name: structuredContentFolderId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/StructuredContentFolder\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/StructuredContentFolder\"\n            tags: [\"StructuredContentFolder\"]\n        patch:\n            description:\n                Updates only the fields received in the request body, leaving any other fields untouched.\n            operationId: patchStructuredContentFolder\n            parameters:\n                - in: path\n                  name: structuredContentFolderId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/StructuredContentFolder\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/StructuredContentFolder\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/StructuredContentFolder\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/StructuredContentFolder\"\n            tags: [\"StructuredContentFolder\"]\n        put:\n            description:\n                Replaces the structured content folder with the information sent in the request body. Any missing fields\n                are deleted, unless they are required.\n            operationId: putStructuredContentFolder\n            parameters:\n                - in: path\n                  name: structuredContentFolderId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/StructuredContentFolder\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/StructuredContentFolder\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/StructuredContentFolder\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/StructuredContentFolder\"\n            tags: [\"StructuredContentFolder\"]\n    \"/structured-content-folders/{structuredContentFolderId}/structured-contents\":\n        get:\n            description:\n                Retrieves the folder's structured content. Results can be paginated, filtered, searched, and sorted.\n            operationId: getStructuredContentFolderStructuredContentsPage\n            parameters:\n                - in: path\n                  name: structuredContentFolderId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: aggregationTerms\n                  schema:\n                      items:\n                          type: string\n                      type: array\n                - in: query\n                  name: flatten\n                  schema:\n                      type: boolean\n                - in: query\n                  name: filter\n                  schema:\n                      type: string\n                - in: query\n                  name: page\n                  schema:\n                      type: integer\n                - in: query\n                  name: pageSize\n                  schema:\n                      type: integer\n                - in: query\n                  name: search\n                  schema:\n                      type: string\n                - in: query\n                  name: sort\n                  schema:\n                      type: string\n                - in: header\n                  name: Accept-Language\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/StructuredContent\"\n                                type: array\n                        application/xml:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/StructuredContent\"\n                                type: array\n            tags: [\"StructuredContent\"]\n        post:\n            description:\n                Creates a new structured content in the folder.\n            operationId: postStructuredContentFolderStructuredContent\n            parameters:\n                - in: path\n                  name: structuredContentFolderId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: header\n                  name: Accept-Language\n                  schema:\n                      type: string\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/StructuredContent\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/StructuredContent\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/StructuredContent\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/StructuredContent\"\n            tags: [\"StructuredContent\"]\n    \"/structured-content-folders/{structuredContentFolderId}/subscribe\":\n        put:\n            operationId: putStructuredContentFolderSubscribe\n            parameters:\n                - in: path\n                  name: structuredContentFolderId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"StructuredContentFolder\"]\n    \"/structured-content-folders/{structuredContentFolderId}/unsubscribe\":\n        put:\n            operationId: putStructuredContentFolderUnsubscribe\n            parameters:\n                - in: path\n                  name: structuredContentFolderId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"StructuredContentFolder\"]\n    \"/structured-contents/{structuredContentId}\":\n        delete:\n            description:\n                Deletes the structured content and returns a 204 if the operation succeeds.\n            operationId: deleteStructuredContent\n            parameters:\n                - in: path\n                  name: structuredContentId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"StructuredContent\"]\n        get:\n            description:\n                Retrieves the structured content via its ID.\n            operationId: getStructuredContent\n            parameters:\n                - in: path\n                  name: structuredContentId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: header\n                  name: Accept-Language\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/StructuredContent\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/StructuredContent\"\n            tags: [\"StructuredContent\"]\n        patch:\n            description:\n                Updates only the fields received in the request body, leaving any other fields untouched.\n            operationId: patchStructuredContent\n            parameters:\n                - in: path\n                  name: structuredContentId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: header\n                  name: Accept-Language\n                  schema:\n                      type: string\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/StructuredContent\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/StructuredContent\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/StructuredContent\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/StructuredContent\"\n            tags: [\"StructuredContent\"]\n        put:\n            description:\n                Replaces the structured content with the information sent in the request body. Any missing fields are\n                deleted, unless they are required.\n            operationId: putStructuredContent\n            parameters:\n                - in: path\n                  name: structuredContentId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: header\n                  name: Accept-Language\n                  schema:\n                      type: string\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/StructuredContent\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/StructuredContent\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/StructuredContent\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/StructuredContent\"\n            tags: [\"StructuredContent\"]\n    \"/structured-contents/{structuredContentId}/comments\":\n        get:\n            description:\n                Retrieves the structured content's comments. Results can be paginated, filtered, searched, and sorted.\n            operationId: getStructuredContentCommentsPage\n            parameters:\n                - in: path\n                  name: structuredContentId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: aggregationTerms\n                  schema:\n                      items:\n                          type: string\n                      type: array\n                - in: query\n                  name: filter\n                  schema:\n                      type: string\n                - in: query\n                  name: page\n                  schema:\n                      type: integer\n                - in: query\n                  name: pageSize\n                  schema:\n                      type: integer\n                - in: query\n                  name: search\n                  schema:\n                      type: string\n                - in: query\n                  name: sort\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/Comment\"\n                                type: array\n                        application/xml:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/Comment\"\n                                type: array\n            tags: [\"Comment\"]\n        post:\n            description:\n                Creates a new comment on the structured content.\n            operationId: postStructuredContentComment\n            parameters:\n                - in: path\n                  name: structuredContentId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/Comment\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/Comment\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Comment\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/Comment\"\n            tags: [\"Comment\"]\n    \"/structured-contents/{structuredContentId}/my-rating\":\n        delete:\n            description:\n                Deletes the structured content's rating and returns a 204 if the operation succeeds.\n            operationId: deleteStructuredContentMyRating\n            parameters:\n                - in: path\n                  name: structuredContentId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"StructuredContent\"]\n        get:\n            description:\n                Retrieves the structured content's rating.\n            operationId: getStructuredContentMyRating\n            parameters:\n                - in: path\n                  name: structuredContentId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Rating\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/Rating\"\n            tags: [\"StructuredContent\"]\n        post:\n            description:\n                Create a rating for the structured content.\n            operationId: postStructuredContentMyRating\n            parameters:\n                - in: path\n                  name: structuredContentId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/Rating\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/Rating\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Rating\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/Rating\"\n            tags: [\"StructuredContent\"]\n        put:\n            description:\n                Replaces the rating with the information sent in the request body. Any missing fields are deleted,\n                unless they are required.\n            operationId: putStructuredContentMyRating\n            parameters:\n                - in: path\n                  name: structuredContentId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/Rating\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/Rating\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Rating\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/Rating\"\n            tags: [\"StructuredContent\"]\n    \"/structured-contents/{structuredContentId}/permissions\":\n        get:\n            operationId: getStructuredContentPermissionsPage\n            parameters:\n                - in: path\n                  name: structuredContentId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: roleNames\n                  schema:\n                      type: string\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"StructuredContent\"]\n        put:\n            operationId: putStructuredContentPermissionsPage\n            parameters:\n                - in: path\n                  name: structuredContentId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"StructuredContent\"]\n    \"/structured-contents/{structuredContentId}/rendered-content-by-display-page/{displayPageKey}\":\n        get:\n            description:\n                Retrieves the structured content's rendered display page\n            operationId: getStructuredContentRenderedContentByDisplayPageDisplayPageKey\n            parameters:\n                - in: path\n                  name: structuredContentId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: path\n                  name: displayPageKey\n                  required: true\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        text/html:\n                            schema:\n                                type: string\n            tags: [\"StructuredContent\"]\n    \"/structured-contents/{structuredContentId}/rendered-content/{contentTemplateId}\":\n        get:\n            description:\n                Retrieves the structured content's rendered template (the result of applying the structure's values to a\n                template).\n            operationId: getStructuredContentRenderedContentContentTemplate\n            parameters:\n                - in: path\n                  name: structuredContentId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: path\n                  name: contentTemplateId\n                  required: true\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        text/html:\n                            schema:\n                                type: string\n            tags: [\"StructuredContent\"]\n    \"/structured-contents/{structuredContentId}/subscribe\":\n        put:\n            operationId: putStructuredContentSubscribe\n            parameters:\n                - in: path\n                  name: structuredContentId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"StructuredContent\"]\n    \"/structured-contents/{structuredContentId}/unsubscribe\":\n        put:\n            operationId: putStructuredContentUnsubscribe\n            parameters:\n                - in: path\n                  name: structuredContentId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"StructuredContent\"]\n    \"/wiki-nodes/{wikiNodeId}\":\n        # @review\n        delete:\n            description:\n                Deletes the wiki node and returns a 204 if the operation succeeds.\n            operationId: deleteWikiNode\n            parameters:\n                - in: path\n                  name: wikiNodeId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"WikiNode\"]\n        get:\n            description:\n                Retrieves the wiki node\n            operationId: getWikiNode\n            parameters:\n                - in: path\n                  name: wikiNodeId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/WikiNode\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/WikiNode\"\n            tags: [\"WikiNode\"]\n        put:\n            description:\n                Replaces the wiki node with the information sent in the request body. Any missing fields are deleted,\n                unless they are required.\n            operationId: putWikiNode\n            parameters:\n                - in: path\n                  name: wikiNodeId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/WikiNode\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/WikiNode\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/WikiNode\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/WikiNode\"\n            tags: [\"WikiNode\"]\n    \"/wiki-nodes/{wikiNodeId}/permissions\":\n        get:\n            operationId: getWikiNodePermissionsPage\n            parameters:\n                - in: path\n                  name: wikiNodeId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: roleNames\n                  schema:\n                      type: string\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"WikiNode\"]\n        put:\n            operationId: putWikiNodePermissionsPage\n            parameters:\n                - in: path\n                  name: wikiNodeId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"WikiNode\"]\n    \"/wiki-nodes/{wikiNodeId}/subscribe\":\n        put:\n            operationId: putWikiNodeSubscribe\n            parameters:\n                - in: path\n                  name: wikiNodeId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"WikiNode\"]\n    \"/wiki-nodes/{wikiNodeId}/unsubscribe\":\n        put:\n            operationId: putWikiNodeUnsubscribe\n            parameters:\n                - in: path\n                  name: wikiNodeId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"WikiNode\"]\n    \"/wiki-nodes/{wikiNodeId}/wiki-pages\":\n        get:\n            # @review\n            description:\n                Retrieves the wiki page's of a node. Results can be paginated, filtered, searched, and sorted.\n            operationId: getWikiNodeWikiPagesPage\n            parameters:\n                - in: path\n                  name: wikiNodeId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: aggregationTerms\n                  schema:\n                      items:\n                          type: string\n                      type: array\n                - in: query\n                  name: filter\n                  schema:\n                      type: string\n                - in: query\n                  name: page\n                  schema:\n                      type: integer\n                - in: query\n                  name: pageSize\n                  schema:\n                      type: integer\n                - in: query\n                  name: search\n                  schema:\n                      type: string\n                - in: query\n                  name: sort\n                  schema:\n                      type: string\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/WikiPage\"\n                        application/xml:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/WikiPage\"\n            tags: [\"WikiPage\"]\n        post:\n            description:\n                Creates a new wiki page\n            operationId: postWikiNodeWikiPage\n            parameters:\n                - in: path\n                  name: wikiNodeId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/WikiPage\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/WikiPage\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/WikiPage\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/WikiPage\"\n            tags: [\"WikiPage\"]\n    \"/wiki-page-attachments/{wikiPageAttachmentId}\":\n        delete:\n            # @review\n            description:\n                Deletes the wiki page attachment and returns a 204 if the operation succeeds.\n            operationId: deleteWikiPageAttachment\n            parameters:\n                - in: path\n                  name: wikiPageAttachmentId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"WikiPageAttachment\"]\n        get:\n            description:\n                Retrieves the wiki page attachment.\n            operationId: getWikiPageAttachment\n            parameters:\n                - in: path\n                  name: wikiPageAttachmentId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/WikiPageAttachment\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/WikiPageAttachment\"\n            tags: [\"WikiPageAttachment\"]\n    \"/wiki-pages/{parentWikiPageId}/wiki-pages\":\n        get:\n            # @review\n            description:\n                Retrieves the child wiki page's of a wiki page.\n            operationId: getWikiPageWikiPagesPage\n            parameters:\n                - in: path\n                  name: parentWikiPageId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/WikiPage\"\n                        application/xml:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/WikiPage\"\n            tags: [\"WikiPage\"]\n        post:\n            description:\n                Creates a child wiki page of the parent wiki page.\n            operationId: postWikiPageWikiPage\n            parameters:\n                - in: path\n                  name: parentWikiPageId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/WikiPage\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/WikiPage\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/WikiPage\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/WikiPage\"\n            tags: [\"WikiPage\"]\n    \"/wiki-pages/{wikiPageId}\":\n        # @review\n        delete:\n            description:\n                Deletes the wiki page and returns a 204 if the operation succeeds.\n            operationId: deleteWikiPage\n            parameters:\n                - in: path\n                  name: wikiPageId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"WikiPage\"]\n        get:\n            description:\n                Retrieves the wiki page\n            operationId: getWikiPage\n            parameters:\n                - in: path\n                  name: wikiPageId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/WikiPage\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/WikiPage\"\n            tags: [\"WikiPage\"]\n        put:\n            description:\n                Replaces the wiki page with the information sent in the request body. Any missing fields are deleted,\n                unless they are required.\n            operationId: putWikiPage\n            parameters:\n                - in: path\n                  name: wikiPageId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/WikiPage\"\n                    application/xml:\n                        schema:\n                            $ref: \"#/components/schemas/WikiPage\"\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/WikiPage\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/WikiPage\"\n            tags: [\"WikiPage\"]\n    \"/wiki-pages/{wikiPageId}/permissions\":\n        get:\n            operationId: getWikiPagePermissionsPage\n            parameters:\n                - in: path\n                  name: wikiPageId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n                - in: query\n                  name: roleNames\n                  schema:\n                      type: string\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"WikiPage\"]\n        put:\n            operationId: putWikiPagePermissionsPage\n            parameters:\n                - in: path\n                  name: wikiPageId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"WikiPage\"]\n    \"/wiki-pages/{wikiPageId}/subscribe\":\n        put:\n            operationId: putWikiPageSubscribe\n            parameters:\n                - in: path\n                  name: wikiPageId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"WikiPage\"]\n    \"/wiki-pages/{wikiPageId}/unsubscribe\":\n        put:\n            operationId: putWikiPageUnsubscribe\n            parameters:\n                - in: path\n                  name: wikiPageId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                204:\n                    content:\n                        application/json: {}\n                        application/xml: {}\n            tags: [\"WikiPage\"]\n    \"/wiki-pages/{wikiPageId}/wiki-page-attachments\":\n        get:\n            # @review\n            description:\n                Retrieves the wiki page's attachments.\n            operationId: getWikiPageWikiPageAttachmentsPage\n            parameters:\n                - in: path\n                  name: wikiPageId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/WikiPageAttachment\"\n                                type: array\n                        application/xml:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/WikiPageAttachment\"\n                                type: array\n            tags: [\"WikiPageAttachment\"]\n        post:\n            description:\n                Creates an attachment for the wiki page. The request body must be `multipart/form-data` with two parts,\n                the file's bytes (`file`), and an optional JSON string (`WikiPageAttachment`) with the metadata.\n            operationId: postWikiPageWikiPageAttachment\n            parameters:\n                - in: path\n                  name: wikiPageId\n                  required: true\n                  schema:\n                      format: int64\n                      type: integer\n            requestBody:\n                content:\n                    multipart/form-data:\n                        schema:\n                            properties:\n                                WikiPageAttachment:\n                                    $ref: \"#/components/schemas/WikiPageAttachment\"\n                                file:\n                                    format: binary\n                                    type: string\n                            type: object\n            responses:\n                200:\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/WikiPageAttachment\"\n                        application/xml:\n                            schema:\n                                $ref: \"#/components/schemas/WikiPageAttachment\"\n            tags: [\"WikiPageAttachment\"]"
		}
	},
	"Error": "parse: parse spec: paths: /sites/{siteId}/site-pages/{friendlyUrlPath}: get: operation \"getSiteSitePage\": responses: 200: content: \"application/json\": schema: parse schema: resolve \"#/components/schemas/SitePage\": parse schema: experience: parse schema: allOf: [0]: parse schema: resolve \"#/components/schemas/Experience\": parse schema: segments: parse schema: item: parse schema: resolve \"../../headless-admin-user/headless-admin-user-impl/rest-openapi.yaml#Segment\": find schema: external base \"../../headless-admin-user/headless-admin-user-impl/rest-openapi.yaml\" is not supported"
}