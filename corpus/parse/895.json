{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/stackinflow/node-rest-api-starter"
		},
		"file": {
			"name": "swagger.yaml",
			"path": "utils/swagger/swagger.yaml",
			"content": "openapi: 3.0.0\ninfo:\n  version: 1.0.0\n  title: Rest API Starter Explorer\n  description: A proposed openAPI explorer for Rest Api Starter Template\nschemes:\n  - http\nservers:\n  - url: http://localhost:3000/api/v1\n    description: Development server\ntags:\n  - name: Auth\n    description: Authentication and authorization operations\n  - name: Admin Auth\n    description: Authentication for Admin\n  - name: User\n    description: Routes related to End User\npaths:\n  /auth/register:\n    post:\n      tags:\n        - Auth\n      summary: Creates a new User\n      description: Creates a new user\n      consumes:\n        - application/json\n      produces:\n        - application/json\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                email:\n                  type: string\n                  required: true\n                  example: user@email.com\n                password:\n                  type: string\n                  example: Password@123\n      responses:\n        \"201\":\n          description: User Created successfully.\n        \"400\":\n          description: Unable to create user.\n        \"500\":\n          description: Internal Server Error\n  /auth/login:\n    post:\n      tags:\n        - Auth\n      summary: Login a user\n      description: Login a user using email and password.\n      consumes:\n        - application/json\n      produces:\n        - application/json\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                email:\n                  type: string\n                  required: true\n                  example: user@email.com\n                password:\n                  type: string\n                  example: Password@123\n      responses:\n        \"200\":\n          description: Logged In Successfully.\n        \"400\":\n          description: Unable to Login.\n        \"500\":\n          description: Internal Server Error\n  /auth/token/verify:\n    get:\n      tags:\n        - Auth\n      summary: Verifies a given token for a new user\n      description: Verifies a token for a new user\n      consumes:\n        - application/json\n      produces:\n        - application/json\n      parameters:\n        - in: query\n          name: t\n          schema:\n            type: string\n          description: Access token\n      responses:\n        \"200\":\n          description: Token Verified successfully.\n        \"400\":\n          description: Failed to verify the token.\n        \"500\":\n          description: Internal Server Error\n  /auth/token/resend:\n    post:\n      tags:\n        - Auth\n      summary: Resend Token\n      description: Resend Token for a new user\n      consumes:\n        - application/json\n      produces:\n        - application/json\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                email:\n                  type: string\n                  required: true\n                  example: user@email.com\n                password:\n                  type: string\n                  example: Password@123\n      responses:\n        \"200\":\n          description: Token Resent Successfully.\n        \"400\":\n          description: Unable to Resend token.\n        \"401\":\n          description: Incorrect Password.\n        \"500\":\n          description: Internal Server Error\n  /auth/password:\n    patch:\n      tags:\n        - Auth\n      summary: Change Password\n      description: Change password using old password\n      consumes:\n        - application/json\n      produces:\n        - application/json\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                oldPassword:\n                  type: string\n                  required: true\n                  example: Password@123\n                newPassword:\n                  type: string\n                  example: Password@124\n      responses:\n        \"200\":\n          description: Password Changed Successfully.\n        \"400\":\n          description: Bad Request.\n        \"403\":\n          description: Password Change Failed Try Again later\n        \"500\":\n          description: Internal Server Error\n      security:\n        - bearerAuth: []\n  /auth/password/reset/code/resend:\n    post:\n      tags:\n        - Auth\n      summary: Regenerate code to reset password\n      description: Regenerate OTP to reset password\n      consumes:\n        - application/json\n      produces:\n        - application/json\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                email:\n                  type: string\n                  required: true\n                  example: user@email.com\n      responses:\n        \"200\":\n          description: OTP Sent successfully to your email.\n        \"400\":\n          description: Failed, User doesn't exist.\n        \"500\":\n          description: Internal Server Error\n  /auth/password/reset/code:\n    post:\n      tags:\n        - Auth\n      summary: Generate code to reset password\n      description: Generate OTP to reset password\n      consumes:\n        - application/json\n      produces:\n        - application/json\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                email:\n                  type: string\n                  required: true\n                  example: user@email.com\n      responses:\n        \"200\":\n          description: OTP Sent successfully to your email.\n        \"400\":\n          description: Failed, User doesn't exist.\n        \"500\":\n          description: Internal Server Error\n  /auth/password/reset:\n    post:\n      tags:\n        - Auth\n      summary: Reset password using OTP\n      description: Reset password of a user using OTP.\n      consumes:\n        - application/json\n      produces:\n        - application/json\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                email:\n                  type: string\n                  required: true\n                  example: user@email.com\n                password:\n                  type: string\n                  required: true\n                  example: password@123\n                otp:\n                  type: integer\n                  required: true\n      responses:\n        \"200\":\n          description: Password Reset successfully.\n        \"400\":\n          description: Failed, Check the error message for details.\n        \"500\":\n          description: Internal Server Error\n  /auth:\n    delete:\n      tags:\n        - Auth\n      summary: Delete a user permanently\n      description: Deletes a user permanently.\n      consumes:\n        - application/json\n      produces:\n        - application/json\n      responses:\n        \"200\":\n          description: Deleted Successfully.\n        \"400\":\n          description: Bad Request.\n        \"403\":\n          description: Failed to delete user\n        \"500\":\n          description: Internal Server Error\n      security:\n        - bearerAuth: []\n  /admin/auth/register:\n    post:\n      tags:\n        - Admin Auth\n      summary: Creates a new Admin account\n      description: Creates a new Admin account\n      consumes:\n        - application/json\n      produces:\n        - application/json\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                email:\n                  type: string\n                  required: true\n                  example: user@email.com\n                password:\n                  type: string\n                  example: Password@123\n      responses:\n        \"201\":\n          description: Admin user Created successfully.\n        \"400\":\n          description: Unable to create Admin user.\n        \"500\":\n          description: Internal Server Error\n  /admin/auth/login:\n    post:\n      tags:\n        - Admin Auth\n      summary: Login as an Admin\n      description: Login as an admin using email and password.\n      consumes:\n        - application/json\n      produces:\n        - application/json\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                email:\n                  type: string\n                  required: true\n                  example: user@email.com\n                password:\n                  type: string\n                  example: Password@123\n      responses:\n        \"200\":\n          description: Logged In Successfully.\n        \"400\":\n          description: Unable to Login.\n        \"500\":\n          description: Internal Server Error\n  /admin/auth/users:\n    get:\n      tags:\n        - Admin Auth\n      summary: Get a list of all the users\n      description: Get a list of all the users registered in this app.\n      consumes:\n        - application/json\n      produces:\n        - application/json\n      responses:\n        \"200\":\n          description: Users Fetched successfully.\n        \"403\":\n          description: Failed, Forbidden to fetch user\n        \"500\":\n          description: Internal Server Error\n      security:\n        - bearerAuth: []\n  /admin/auth/admins:\n    patch:\n      tags:\n        - Admin Auth\n      summary: Get a list of all the admins.\n      description: Get a list of all the admins registered in the app.\n      consumes:\n        - application/json\n      produces:\n        - application/json\n      responses:\n        \"200\":\n          description: Admins Fetched successfully.\n        \"403\":\n          description: Failed, Forbidden to fetch admins.\n        \"500\":\n          description: Internal Server Error\n      security:\n        - bearerAuth: []\n  /admin/auth/user/enable:\n    get:\n      tags:\n        - Admin Auth\n      summary: Enable an admin account.\n      description: Enable an admin account using access token.\n      consumes:\n        - application/json\n      produces:\n        - application/json\n      responses:\n        \"200\":\n          description: Account enabled successfully.\n        \"403\":\n          description: Failed, Forbidden to enable user account.\n        \"500\":\n          description: Internal Server Error\n      security:\n        - bearerAuth: []\n  /admin/auth/user/disable:\n    get:\n      tags:\n        - Admin Auth\n      summary: Disable an admin account.\n      description: Disable an admin account using access token.\n      consumes:\n        - application/json\n      produces:\n        - application/json\n      responses:\n        \"200\":\n          description: Account disabled successfully.\n        \"403\":\n          description: Failed, Forbidden to disable user account.\n        \"500\":\n          description: Internal Server Error\n      security:\n        - bearerAuth: []\n\n  /user:\n    get:\n      tags:\n        - User\n      summary: Get all the details of a user\n      description: Get a list of all the details of a user by providing access token.\n      consumes:\n        - application/json\n      produces:\n        - application/json\n      responses:\n        \"200\":\n          description: User Data Fetched successfully.\n        \"403\":\n          description: Failed, Forbidden to fetch user data.\n        \"500\":\n          description: Internal Server Error\n      security:\n        - bearerAuth: []\n    patch:\n      tags:\n        - User\n      summary: Edit User Details\n      description: Edit data related to the user.\n      consumes:\n        - application/json\n      produces:\n        - application/json\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                firstName:\n                  type: string\n                  required: true\n                  example: Shubham\n                lastName:\n                  type: string\n                  example: Raj\n                gender:\n                  type: string\n                  example: Male\n                age:\n                  type: integer\n                  example: 20\n      responses:\n        \"200\":\n          description: User Data Fetched successfully.\n        \"403\":\n          description: Failed, Forbidden to fetch user data.\n        \"500\":\n          description: Internal Server Error\n      security:\n        - bearerAuth: []\ncomponents:\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n  schemas:\n    User:\n      type: object\n      properties:\n        userId:\n          type: string\n        email:\n          type: string\n        firstName:\n          type: string\n        lastName:\n          type: string\n        gender:\n          type: string\n        age:\n          type: integer\n        knownLanguages:\n          type: string\n        profession:\n          type: string\n        location:\n          type: string\n        latitude:\n          type: integer\n        longitude:\n          type: integer\n        photoUrl:\n          type: string\n        symptoms:\n          type: string\n      required:\n        - userId\n        - email\n    Auth:\n      type: object\n      properties:\n        email:\n          type: string\n        password:\n          type: string\n        admin:\n          type: boolean\n        adminVerified:\n          type: boolean\n        disabled:\n          type: boolean\n        emailVerified:\n          type: boolean\n        provider:\n          type: boolean\n        oauthToken:\n          type: string\n      required:\n        - email\n    Token:\n      type: object\n      properties:\n        _userId:\n          type: string\n        token:\n          type: string\n        createdAt:\n          type: string\n          format: date-time\n      required:\n        - _userId\n        - token\n        - createdAt\n"
		}
	},
	"Error": "callback: json: cannot unmarshal bool into Go struct field Schema.required of type []string"
}