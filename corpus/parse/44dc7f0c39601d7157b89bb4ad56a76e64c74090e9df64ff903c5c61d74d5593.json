{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/jdegre/5GC_APIs"
		},
		"file": {
			"name": "TS29598_Nudsf_DataRepository.yaml",
			"size": 0,
			"path": "TS29598_Nudsf_DataRepository.yaml",
			"byteSize": 77523,
			"content": "openapi: 3.0.0\ninfo:\n  title: Nudsf_DataRepository\n  version: 1.1.0-alpha.5\n  description: |\n    Nudsf Data Repository Service.\n    Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).\n    All rights reserved.\n\nexternalDocs:\n  description: 3GPP TS 29.598 UDSF Services, V17.4.0.\n  url: 'http://www.3gpp.org/ftp/Specs/archive/29_series/29.598/'\n\nservers:\n  - url: '{apiRoot}/nudsf-dr/v1'\n    variables:\n      apiRoot:\n        default: https://example.com\n        description: apiRoot as defined in clause 4.4 of 3GPP TS 29.501\n\nsecurity:\n  - {}\n  - oAuth2ClientCredentials:\n    - nudsf-dr\n\npaths:\n\n  /{realmId}/{storageId}/records:\n    summary: Access to all Records of a Storage\n    description: \u003e-\n      root of all Records of a Storage\n    get:\n      summary:     Records search with get\n      description: Retrieve one or multiple Records based on filter\n      operationId: SearchRecord\n      tags:\n        - Record CRUD\n      parameters:\n        - name: realmId\n          in: path\n          description: Identifier of the Realm\n          required: true\n          schema:\n            type: string\n            example: Realm01\n        - name: storageId\n          in: path\n          description: Identifier of the Storage\n          required: true\n          schema:\n            type: string\n            example: Storage01\n        - name: limit-range\n          in: query\n          description: The most number of record references to fetch\n          schema:\n            $ref: 'TS29571_CommonData.yaml#/components/schemas/Uinteger'\n        - name: filter\n          in: query\n          description: Query filter using conditions on tags\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SearchExpression'\n        - name: count-indicator\n          in: query\n          description: Indicates whether the number of records that matched the criteria shall be returned.\n          schema:\n            type: boolean\n            default: false\n        - name: supported-features\n          in: query\n          description: Features required to be supported by the target NF\n          schema:\n            $ref: 'TS29571_CommonData.yaml#/components/schemas/SupportedFeatures'\n        - name: retrieve-records\n          in: query\n          description: Indicates whether the UDSF is requested to include matching records within the response.\n          schema:\n            $ref: '#/components/schemas/RetrieveRecords'\n        - name: max-payload-size\n          in: query\n          description: Indicates the number of kilo octets the consumer is prepared to receive\n          schema:\n            $ref: 'TS29571_CommonData.yaml#/components/schemas/Uinteger'\n      responses:\n        '200':\n          description: Successful case. Response contains result of the search.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RecordSearchResult'\n        '204':\n          description: \u003e-\n            The search condition does not match any Record.\n        '400':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/400'\n        '401':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/401'\n        '403':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/403'\n        '404':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/404'\n        '406':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/406'\n        '429':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/429'\n        '500':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/500'\n        '503':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/503'\n        default:\n          $ref: 'TS29571_CommonData.yaml#/components/responses/default'\n    delete:\n      summary:     Bulk Deletion of Records\n      description: Delete multiple Records based on filter\n      operationId: BulkDeleteRecords\n      tags:\n        - Record CRUD\n      parameters:\n        - name: realmId\n          in: path\n          description: Identifier of the Realm\n          required: true\n          schema:\n            type: string\n            example: Realm01\n        - name: storageId\n          in: path\n          description: Identifier of the Storage\n          required: true\n          schema:\n            type: string\n            example: Storage01\n        - name: filter\n          in: query\n          required: true\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SearchExpression'\n        - name: supported-features\n          in: query\n          description: Features required to be supported by the target NF\n          schema:\n            $ref: 'TS29571_CommonData.yaml#/components/schemas/SupportedFeatures'\n      responses:\n        '200':\n          description: Successful case. Response contains RecordIdList.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RecordIdList'\n        '204':\n          description: Successful case.\n        '400':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/400'\n        '401':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/401'\n        '403':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/403'\n        '404':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/404'\n        '406':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/406'\n        '429':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/429'\n        '500':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/500'\n        '503':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/503'\n        default:\n          $ref: 'TS29571_CommonData.yaml#/components/responses/default'\n\n  /{realmId}/{storageId}/records/{recordId}:\n    summary: Access to a specific Record, identified by its RecordId\n    description: \u003e-\n      Access to a specific Record\n    get:\n      summary: Record access\n      description: retrieve one specific Record\n      operationId: GetRecord\n      tags:\n      - Record CRUD\n      parameters:\n        - name: realmId\n          in: path\n          description: Identifier of the Realm\n          required: true\n          schema:\n            type: string\n            example: Realm01\n        - name: storageId\n          in: path\n          description: Identifier of the Storage\n          required: true\n          schema:\n            type: string\n            example: Storage01\n        - name: recordId\n          in: path\n          description: Identifier of the Record\n          required: true\n          schema:\n            type: string\n            example: 'UserRecordValue000000001'\n        - name: If-None-Match\n          in: header\n          description: Validator for conditional requests, as described in RFC 7232, 3.2\n          schema:\n            type: string\n        - name: If-Modified-Since\n          in: header\n          description: Validator for conditional requests, as described in RFC 7232, 3.3\n          schema:\n            type: string\n        - name: supported-features\n          in: query\n          description: Features required to be supported by the target NF\n          schema:\n            $ref: 'TS29571_CommonData.yaml#/components/schemas/SupportedFeatures'\n      responses:\n        '200' : #result ok\n          $ref: '#/components/responses/RecordBody'\n        '304':\n          $ref: '#/components/responses/304'\n        '400':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/400'\n        '401':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/401'\n        '403':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/403'\n        '404':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/404'\n        '500':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/500'\n        '503':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/503'\n        default:\n          $ref: 'TS29571_CommonData.yaml#/components/responses/default'\n    put:\n      summary: Create/Modify Record\n      description: Create or Modify a Record with a user provided RecordId\n      operationId: CreateOrModifyRecord\n      tags:\n        - Record CRUD\n      parameters:\n        - name: realmId\n          in: path\n          description: Identifier(name) of the Realm\n          required: true\n          schema:\n            type: string\n            example: Realm01\n        - name: storageId\n          in: path\n          description: Identifier of the Storage\n          required: true\n          schema:\n            type: string\n            example: Storage01\n        - name: recordId\n          in: path\n          description: Identifier of the Record\n          required: true\n          schema:\n            type: string\n            example: UserRecordValue000000001\n        - name: If-None-Match\n          in: header\n          description: Validator for conditional requests, as described in RFC 7232, 3.2\n          schema:\n            type: string\n        - name: If-Match\n          in: header\n          description: Record validator for conditional requests, as described in RFC 7232, 3.2\n          schema:\n            type: string\n        - name: get-previous\n          in: query\n          description: Retrieve the Record before update\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: supported-features\n          in: query\n          description: Features required to be supported by the target NF\n          schema:\n            $ref: 'TS29571_CommonData.yaml#/components/schemas/SupportedFeatures'\n      requestBody:\n        $ref: '#/components/requestBodies/RecordBody'\n      callbacks:\n        recordExpired:\n          '{$request.body#/callbackReference}':\n            post:\n              parameters:\n                - name: Content-Location\n                  in: header\n                  description: The expired record URI\n                  schema:\n                    $ref: 'TS29571_CommonData.yaml#/components/schemas/Uri'\n              requestBody:\n                $ref: '#/components/requestBodies/RecordBody'\n              responses:\n                '204':\n                  description: Callback executed successfully\n                '400':\n                  $ref: 'TS29571_CommonData.yaml#/components/responses/400'\n                '401':\n                  $ref: 'TS29571_CommonData.yaml#/components/responses/401'\n                '403':\n                  $ref: 'TS29571_CommonData.yaml#/components/responses/403'\n                '500':\n                  $ref: 'TS29571_CommonData.yaml#/components/responses/500'\n                '503':\n                  $ref: 'TS29571_CommonData.yaml#/components/responses/503'\n                default:\n                  $ref: 'TS29571_CommonData.yaml#/components/responses/default'\n      responses:\n        '200' : # Update with return\n          $ref: '#/components/responses/RecordBody'\n        '201':\n          description: \u003e-\n            Create case. The resource has been successfully created, location header indicates\n            the URI of the created Record.\n            $ref: '#/components/responses/RecordBody'\n          headers:\n            Location:\n              $ref: '#/components/headers/Location'\n            Cache-Control:\n              $ref: '#/components/headers/Cache-Control'\n            ETag:\n              $ref: '#/components/headers/ETag'\n            Last-Modified:\n              $ref: '#/components/headers/Last-Modified'\n        '204': # Update without return\n          description: \u003e-\n            Update case. The resource has been successfully updated and no\n            additional content is included in the response message.\n          headers:\n            Cache-Control:\n              $ref: '#/components/headers/Cache-Control'\n            ETag:\n              $ref: '#/components/headers/ETag'\n            Last-Modified:\n              $ref: '#/components/headers/Last-Modified'\n        '304':\n          $ref: '#/components/responses/304'\n        '400':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/400'\n        '401':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/401'\n        '403':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/403'\n        '404':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/404'\n        '408':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/408'\n        '412': # Return Record value if get-previous=true\n          $ref: '#/components/responses/RecordBody'\n        '413':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/413'\n        '500':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/500'\n        '503':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/503'\n        default:\n          $ref: 'TS29571_CommonData.yaml#/components/responses/default'\n    delete:\n      summary: Delete a Record with an user provided RecordId\n      operationId: DeleteRecord\n      tags:\n        - Record CRUD\n      parameters:\n        - name: realmId\n          in: path\n          description: Identifier(name) of the Realm\n          required: true\n          schema:\n            type: string\n            example: Realm01\n        - name: storageId\n          in: path\n          description: Identifier of the Storage\n          required: true\n          schema:\n            type: string\n            example: Storage01\n        - name: recordId\n          in: path\n          description: Identifier of the Record\n          required: true\n          schema:\n            type: string\n            example: UserRecordValue000000001\n        - name: If-Match\n          in: header\n          description: Record validator for conditional requests, as described in RFC 7232, 3.2\n          schema:\n            type: string\n        - name: get-previous\n          in: query\n          description: Retrieve the Record before delete\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: supported-features\n          in: query\n          description: Features required to be supported by the target NF\n          schema:\n            $ref: 'TS29571_CommonData.yaml#/components/schemas/SupportedFeatures'\n      responses:\n        '200':\n          $ref: '#/components/responses/RecordBodyDelete'\n        '204':\n          description: Successful case.\n          headers:\n            ETag:\n              $ref: '#/components/headers/ETag'\n            Last-Modified:\n              $ref: '#/components/headers/Last-Modified'\n        '304':\n          $ref: '#/components/responses/304'\n        '400':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/400'\n        '401':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/401'\n        '403':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/403'\n        '404':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/404'\n        '408':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/408'\n        '412': # Return return value if get-previous=true\n          $ref: '#/components/responses/RecordBody'\n        '500':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/500'\n        '503':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/503'\n        default:\n          $ref: 'TS29571_CommonData.yaml#/components/responses/default'\n\n  /{realmId}/{storageId}/records/{recordId}/meta:\n    summary: Access to the meta of a specific Record, identified by its RecordId\n    description: \u003e-\n      Access to the meta of a specific Record\n    get:\n      summary: Record's meta access\n      description: retrieve meta of a specific Record\n      operationId: GetMeta\n      tags:\n      - Record CRUD\n      parameters:\n      - name: realmId\n        in: path\n        description: Identifier of the Realm\n        required: true\n        schema:\n          type: string\n          example: Realm01\n      - name: storageId\n        in: path\n        description: Identifier of the Storage\n        required: true\n        schema:\n          type: string\n          example: Storage01\n      - name: recordId\n        in: path\n        description: Identifier of the Record\n        required: true\n        schema:\n          type: string\n          example: 'UserRecordValue000000001'\n      - name: If-None-Match\n        in: header\n        description: Validator for conditional requests, as described in RFC 7232, 3.2\n        schema:\n          type: string\n      - name: If-Modified-Since\n        in: header\n        description: Validator for conditional requests, as described in RFC 7232, 3.3\n        schema:\n          type: string\n      - name: supported-features\n        in: query\n        description: Features required to be supported by the target NF\n        schema:\n          $ref: 'TS29571_CommonData.yaml#/components/schemas/SupportedFeatures'\n      responses:\n        '200':\n          description: Expected response to a valid request\n          headers:\n            Cache-Control:\n              $ref: '#/components/headers/Cache-Control'\n            ETag:\n              $ref: '#/components/headers/ETag'\n            Last-Modified:\n              $ref: '#/components/headers/Last-Modified'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RecordMeta'\n        '304':\n          $ref: '#/components/responses/304'\n        '400':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/400'\n        '401':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/401'\n        '403':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/403'\n        '404':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/404'\n        '500':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/500'\n        '503':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/503'\n        default:\n          $ref: 'TS29571_CommonData.yaml#/components/responses/default'\n    patch: # patch meta data\n      summary: Record's meta update\n      description: update meta of a specific Record\n      operationId: UpdateMeta\n      tags:\n      - Record CRUD\n      parameters:\n      - name: realmId\n        in: path\n        description: Identifier of the Realm\n        required: true\n        schema:\n          type: string\n          example: Realm01\n      - name: storageId\n        in: path\n        description: Identifier of the Storage\n        required: true\n        schema:\n          type: string\n          example: Storage01\n      - name: recordId\n        in: path\n        description: Identifier of the Record\n        required: true\n        schema:\n          type: string\n          example: 'UserRecordValue000000001'\n      - name: If-Match\n        in: header\n        description: Record validator for conditional requests, as described in RFC 7232, 3.2\n        schema:\n          type: string\n      - name: supported-features\n        in: query\n        description: Features required to be supported by the target NF\n        schema:\n          $ref: 'TS29571_CommonData.yaml#/components/schemas/SupportedFeatures'\n      requestBody:\n        description: Meta data to patch\n        content:\n          application/json-patch+json:\n            example: '[{ \"op\": \"replace\", \"path\": \"/tags/ueId\", \"value\": \"450005\" }, { \"op\": \"remove\", \"path\": \"/tags/recordId\" }]'\n            schema:\n              type: array\n              items:\n                $ref: 'TS29571_CommonData.yaml#/components/schemas/PatchItem'\n              minItems: 1\n        required: true\n      responses:\n        '200':\n          description: \u003e-\n            One or more modification instructions have been discarded, the execution report is returned in response PatchResult.\n          content:\n            application/json:\n              example:\n              schema:\n                $ref: 'TS29571_CommonData.yaml#/components/schemas/PatchResult'\n          headers:\n            Cache-Control:\n              $ref: '#/components/headers/Cache-Control'\n            ETag:\n              $ref: '#/components/headers/ETag'\n            Last-Modified:\n              $ref: '#/components/headers/Last-Modified'\n        '204':\n          description: \u003e-\n            Successful case. The meta has been successfully updated and no return is expected.\n          headers:\n            Cache-Control:\n              $ref: '#/components/headers/Cache-Control'\n            ETag:\n              $ref: '#/components/headers/ETag'\n            Last-Modified:\n              $ref: '#/components/headers/Last-Modified'\n        '304':\n          $ref: '#/components/responses/304'\n        '400':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/400'\n        '401':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/401'\n        '403':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/403'\n        '404':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/404'\n        '408':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/408'\n        '500':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/500'\n        '503':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/503'\n        default:\n          $ref: 'TS29571_CommonData.yaml#/components/responses/default'\n\n  /{realmId}/{storageId}/records/{recordId}/blocks:\n    summary: Access to the Blocks of a specific Record, identified by its RecordId\n    description: \u003e-\n      Access to the Blocks of a specific Record\n    get:\n      summary: Record's Blocks access\n      description: retrieve all Blocks of a specific Record\n      operationId: GetBlockList\n      tags:\n      - Block CRUD\n      parameters:\n      - name: realmId\n        in: path\n        description: Identifier of the Realm\n        required: true\n        schema:\n          type: string\n          example: Realm01\n      - name: storageId\n        in: path\n        description: Identifier of the Storage\n        required: true\n        schema:\n          type: string\n          example: Storage01\n      - name: recordId\n        in: path\n        description: Identifier of the Record\n        required: true\n        schema:\n          type: string\n          example: 'UserRecordValue000000001'\n      - name: supported-features\n        in: query\n        description: Features required to be supported by the target NF\n        schema:\n          $ref: 'TS29571_CommonData.yaml#/components/schemas/SupportedFeatures'\n      responses:\n        '200':\n          description: Expected response to a successful request\n          headers:\n            Cache-Control:\n              $ref: '#/components/headers/Cache-Control'\n            ETag:\n              $ref: '#/components/headers/ETag'\n            Last-Modified:\n              $ref: '#/components/headers/Last-Modified'\n          content:\n            multipart/parallel:\n              schema:\n                type: object\n                properties:\n                  blocks:\n                    type: array\n                    description: \u003e-\n                      an array of Block parts, can be empty\n                    items:\n                      $ref: '#/components/schemas/Block'\n              encoding:\n                blocks:\n                  contentType: '*/*' # Block content type can be of any type.\n                  headers:\n                    Content-Id: # Block identifier is defined by the Content-Id header.\n                      schema:\n                        type: string\n                      required: true\n                    Content-Transfer-Encoding:\n                      schema:\n                        type: string\n                      required: true\n        '204':\n          description: Successful response, the record contains no blocks\n        '400':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/400'\n        '401':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/401'\n        '403':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/403'\n        '404':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/404'\n        '500':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/500'\n        '503':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/503'\n        default:\n          $ref: 'TS29571_CommonData.yaml#/components/responses/default'\n\n  /{realmId}/{storageId}/records/{recordId}/blocks/{blockId}:\n    summary: Access to a Block of a specific Record, identified by its BlockId\n    description: \u003e-\n      Access to a specific Block of a specific Record\n    get:\n      summary: Retrieve a specific Block\n      description: retrieve a specific Block\n      operationId: GetBlock\n      tags:\n      - Block CRUD\n      parameters:\n      - name: realmId\n        in: path\n        description: Identifier of the Realm\n        required: true\n        schema:\n          type: string\n          example: Realm01\n      - name: storageId\n        in: path\n        description: Identifier of the Storage\n        required: true\n        schema:\n          type: string\n          example: Storage01\n      - name: recordId\n        in: path\n        description: Identifier of the Record\n        required: true\n        schema:\n          type: string\n          example: 'UserRecordValue000000001'\n      - name: blockId\n        in: path\n        description: Id of the Block\n        required: true\n        schema:\n          type: string\n          example: 'userDefjson01'\n      - name: If-None-Match\n        in: header\n        description: Validator for conditional requests, as described in RFC 7232, 3.2\n        schema:\n          type: string\n      - name: If-Modified-Since\n        in: header\n        description: Validator for conditional requests, as described in RFC 7232, 3.3\n        schema:\n          type: string\n      - name: supported-features\n        in: query\n        description: Features required to be supported by the target NF\n        schema:\n          $ref: 'TS29571_CommonData.yaml#/components/schemas/SupportedFeatures'\n      responses:\n        '200':\n          $ref: '#/components/responses/BlockBody'\n        '304':\n          $ref: '#/components/responses/304'\n        '400':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/400'\n        '401':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/401'\n        '403':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/403'\n        '404':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/404'\n        '500':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/500'\n        '503':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/503'\n        default:\n          $ref: 'TS29571_CommonData.yaml#/components/responses/default'\n    put:\n      summary: Create or Update a specific Block in a Record.\n      description: Create or update a specific Block, related to a Record\n      operationId: CreateOrModifyBlock\n      tags:\n      - Block CRUD\n      parameters:\n      - name: realmId\n        in: path\n        description: Identifier of the Realm\n        required: true\n        schema:\n          type: string\n          example: Realm01\n      - name: storageId\n        in: path\n        description: Identifier of the Storage\n        required: true\n        schema:\n          type: string\n          example: Storage01\n      - name: recordId\n        in: path\n        description: Identifier of the Record\n        required: true\n        schema:\n          type: string\n          example: 'UserRecordValue000000001'\n      - name: blockId\n        in: path\n        description: Id of the Block\n        required: true\n        schema:\n          type: string\n          example: 'userDefjson01'\n      - name: get-previous\n        in: query\n        description: Retrieve the Block before update\n        required: false\n        schema:\n          type: boolean\n          default: false\n      - name: If-None-Match\n        in: header\n        description: Validator for conditional requests, as described in RFC 7232, 3.2\n        schema:\n          type: string\n      - name: If-Match\n        in: header\n        description: Record validator for conditional requests, as described in RFC 7232, 3.2\n        schema:\n          type: string\n      - name: supported-features\n        in: query\n        description: Features required to be supported by the target NF\n        schema:\n          $ref: 'TS29571_CommonData.yaml#/components/schemas/SupportedFeatures'\n      requestBody:\n        description: information on the Block to create\n        required: true\n        content:\n          '*/*':\n             schema:\n               $ref: '#/components/schemas/Block'\n      responses:\n        '200':\n          $ref: '#/components/responses/BlockBody'\n        '201':\n          description: \u003e-\n            Creation case. The Block has been successfully created. Location header indicates the URI of the created Block.\n          headers:\n            Location:\n              $ref: '#/components/headers/Location'\n            Cache-Control:\n              $ref: '#/components/headers/Cache-Control'\n            ETag:\n              $ref: '#/components/headers/ETag'\n            Last-Modified:\n              $ref: '#/components/headers/Last-Modified'\n        '204':\n          description: \u003e-\n            Successful case. The resource has been successfully updated.\n          headers:\n            Cache-Control:\n              $ref: '#/components/headers/Cache-Control'\n            ETag:\n              $ref: '#/components/headers/ETag'\n            Last-Modified:\n              $ref: '#/components/headers/Last-Modified'\n        '400':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/400'\n        '401':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/401'\n        '403':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/403'\n        '404':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/404'\n        '408':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/408'\n        '412': # Return previous Block value if get-previous=true\n          $ref: '#/components/responses/BlockBody'\n        '413':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/413'\n        '500':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/500'\n        '503':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/503'\n        default:\n          $ref: 'TS29571_CommonData.yaml#/components/responses/default'\n    delete:\n      summary: Delete a specific Block. Then update the Record\n      description: delete a specific Block, related to a Record\n      operationId: DeleteBlock\n      tags:\n      - Block CRUD\n      parameters:\n      - name: realmId\n        in: path\n        description: Identifier of the Realm\n        required: true\n        schema:\n          type: string\n          example: Realm01\n      - name: storageId\n        in: path\n        description: Identifier of the Storage\n        required: true\n        schema:\n          type: string\n          example: Storage01\n      - name: recordId\n        in: path\n        description: Identifier of the Record\n        required: true\n        schema:\n          type: string\n          example: 'UserRecordValue000000001'\n      - name: blockId\n        in: path\n        description: Id of the Block\n        required: true\n        schema:\n          type: string\n          example: 'userDefjson01'\n      - name: get-previous\n        in: query\n        description: Retrieve the Block before delete\n        required: false\n        schema:\n          type: boolean\n          default: false\n      - name: If-Match\n        in: header\n        description: Record validator for conditional requests, as described in RFC 7232, 3.2\n        schema:\n          type: string\n      - name: supported-features\n        in: query\n        description: Features required to be supported by the target NF\n        schema:\n          $ref: 'TS29571_CommonData.yaml#/components/schemas/SupportedFeatures'\n      responses:\n        '200':\n          $ref: '#/components/responses/BlockBodyDelete'\n        '204':\n          description: \u003e-\n            Successful case. The Block has been successfully deleted.\n          headers:\n            ETag:\n              $ref: '#/components/headers/ETag'\n            Last-Modified:\n              $ref: '#/components/headers/Last-Modified'\n        '400':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/400'\n        '401':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/401'\n        '403':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/403'\n        '404':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/404'\n        '408':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/408'\n        '412': # Return previous Block value if get-previous=true\n          $ref: '#/components/responses/BlockBody'\n        '500':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/500'\n        '503':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/503'\n        default:\n          $ref: 'TS29571_CommonData.yaml#/components/responses/default'\n\n  /{realmId}/{storageId}/subs-to-notify:\n    summary: The notification subscription collection resource\n    description: \u003e-\n      Access to the subscription resource\n    get:\n      summary: Notification subscription retrieval\n      description: retrieve all notification subscriptions of the storage\n      operationId: GetNotificationSubscriptions\n      tags:\n      - NotificationSubscriptions CRUD\n      parameters:\n      - name: realmId\n        in: path\n        description: Identifier of the Realm\n        required: true\n        schema:\n          type: string\n          example: Realm01\n      - name: storageId\n        in: path\n        description: Identifier of the Storage\n        required: true\n        schema:\n          type: string\n          example: Storage01\n      - name: limit-range\n        in: query\n        description: The maximum number of NotificationSubscriptions to fetch\n        schema:\n          $ref: 'TS29571_CommonData.yaml#/components/schemas/Uinteger'\n      - name: supported-features\n        in: query\n        description: Features required to be supported by the target NF\n        schema:\n          $ref: 'TS29571_CommonData.yaml#/components/schemas/SupportedFeatures'\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/NotificationSubscription'\n        '304':\n          $ref: '#/components/responses/304'\n        '400':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/400'\n        '401':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/401'\n        '403':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/403'\n        '404':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/404'\n        '500':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/500'\n        '503':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/503'\n        default:\n          $ref: 'TS29571_CommonData.yaml#/components/responses/default'\n\n  /{realmId}/{storageId}/subs-to-notify/{subscriptionId}:\n    summary: The notification subscription resource\n    description: \u003e-\n      Access to the subscription resource\n    get:\n      summary: Notification subscription retrieval\n      description: retrieve a single notification subscription of the storage\n      operationId: GetNotificationSubscription\n      tags:\n      - NotificationSubscription CRUD\n      parameters:\n      - name: realmId\n        in: path\n        description: Identifier of the Realm\n        required: true\n        schema:\n          type: string\n          example: Realm01\n      - name: storageId\n        in: path\n        description: Identifier of the Storage\n        required: true\n        schema:\n          type: string\n          example: Storage01\n      - name: subscriptionId\n        in: path\n        description: Identifier of the NotificationSubscription\n        required: true\n        schema:\n          type: string\n          example: Subscription01\n      - name: supported-features\n        in: query\n        description: Features required to be supported by the target NF\n        schema:\n          $ref: 'TS29571_CommonData.yaml#/components/schemas/SupportedFeatures'\n      - name: If-None-Match\n        in: header\n        description: Validator for conditional requests, as described in RFC 7232, 3.2\n        schema:\n          type: string\n      - name: If-Modified-Since\n        in: header\n        description: Validator for conditional requests, as described in RFC 7232, 3.3\n        schema:\n          type: string\n      responses:\n        '200':\n          description: Expected response to a valid request\n          headers:\n            Cache-Control:\n              $ref: '#/components/headers/Cache-Control'\n            ETag:\n              $ref: '#/components/headers/ETag'\n            Last-Modified:\n              $ref: '#/components/headers/Last-Modified'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotificationSubscription'\n        '304':\n          $ref: '#/components/responses/304'\n        '400':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/400'\n        '401':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/401'\n        '403':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/403'\n        '404':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/404'\n        '500':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/500'\n        '503':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/503'\n        default:\n          $ref: 'TS29571_CommonData.yaml#/components/responses/default'\n\n    delete:\n      summary: Delete a Notification Subscription of the storage\n      description: delete a single subscriptions of the storage\n      operationId: DeleteNotificationSubscription\n      tags:\n      - NotificationSubscription CRUD\n      parameters:\n      - name: realmId\n        in: path\n        description: Identifier of the Realm\n        required: true\n        schema:\n          type: string\n          example: Realm01\n      - name: storageId\n        in: path\n        description: Identifier of the Storage\n        required: true\n        schema:\n          type: string\n          example: Storage01\n      - name: subscriptionId\n        in: path\n        description: Identifier of the NotificationSubscription\n        required: true\n        schema:\n          type: string\n          example: Subscription01\n      - name: client-id\n        in: query\n        description: Identifies the NF or NFSet\n        required: true\n        schema:\n          $ref: '#/components/schemas/ClientId'\n      - name: get-previous\n        in: query\n        description: Retrieve the NotificationSubscription before delete\n        required: false\n        schema:\n          type: boolean\n          default: false\n      - name: If-Match\n        in: header\n        description: Record validator for conditional requests, as described in RFC 7232, 3.2\n        schema:\n          type: string\n      - name: supported-features\n        in: query\n        description: Features required to be supported by the target NF\n        schema:\n          $ref: 'TS29571_CommonData.yaml#/components/schemas/SupportedFeatures'\n      responses:\n        '200':\n          description: Deleted NotificationSubscription if requested with get-previous\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/NotificationSubscription'\n        '204':\n          description: \u003e-\n            Successful case. The SubscriptionNotification has been successfully deleted.\n        '400':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/400'\n        '401':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/401'\n        '403':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/403'\n        '404':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/404'\n        '408':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/408'\n        '412':\n          description: Return previous NotificationSubscription value if get-previous=true\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotificationSubscription'\n        '500':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/500'\n        '503':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/503'\n        default:\n          $ref: 'TS29571_CommonData.yaml#/components/responses/default'\n\n    patch: # patch NotificationSubscription data\n      summary: NotificationSubscription update\n      description: update a specific NotificationSubscription\n      operationId: UpdateNotificationSubscription\n      tags:\n      - NotificationSubscription CRUD\n      parameters:\n      - name: realmId\n        in: path\n        description: Identifier of the Realm\n        required: true\n        schema:\n          type: string\n          example: Realm01\n      - name: storageId\n        in: path\n        description: Identifier of the Storage\n        required: true\n        schema:\n          type: string\n          example: Storage01\n      - name: subscriptionId\n        in: path\n        description: Identifier of the NotificationSubscription\n        required: true\n        schema:\n          type: string\n          example: Subscription01\n      - name: If-Match\n        in: header\n        description: Validator for conditional requests, as described in RFC 7232, 3.2\n        schema:\n          type: string\n      - name: supported-features\n        in: query\n        description: Features required to be supported by the target NF\n        schema:\n          $ref: 'TS29571_CommonData.yaml#/components/schemas/SupportedFeatures'\n      requestBody:\n        description: data to patch\n        content:\n          application/json-patch+json:\n            example: 'TBD'\n            schema:\n              type: array\n              items:\n                $ref: 'TS29571_CommonData.yaml#/components/schemas/PatchItem'\n              minItems: 1\n        required: true\n      responses:\n        '200':\n          description: \u003e-\n            One or more modification instructions have been discarded, the execution report is returned in response PatchResult.\n          content:\n            application/json:\n              example:\n              schema:\n                $ref: 'TS29571_CommonData.yaml#/components/schemas/PatchResult'\n          headers:\n            Cache-Control:\n              $ref: '#/components/headers/Cache-Control'\n            ETag:\n              $ref: '#/components/headers/ETag'\n            Last-Modified:\n              $ref: '#/components/headers/Last-Modified'\n        '204':\n          description: \u003e-\n            Successful case. The meta has been successfully updated and no return is expected.\n          headers:\n            Cache-Control:\n              $ref: '#/components/headers/Cache-Control'\n            ETag:\n              $ref: '#/components/headers/ETag'\n            Last-Modified:\n              $ref: '#/components/headers/Last-Modified'\n        '304':\n          $ref: '#/components/responses/304'\n        '400':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/400'\n        '401':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/401'\n        '403':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/403'\n        '404':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/404'\n        '408':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/408'\n        '500':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/500'\n        '503':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/503'\n        default:\n          $ref: 'TS29571_CommonData.yaml#/components/responses/default'\n\n    put:\n      summary: NotificationSubscription Create/Update\n      operationId: CreateAndUpdateNotificationSubscription\n      tags:\n        - NotificationSubscription CRUD\n      parameters:\n      - name: realmId\n        in: path\n        description: Identifier of the Realm\n        required: true\n        schema:\n          type: string\n          example: Realm01\n      - name: storageId\n        in: path\n        description: Identifier of the Storage\n        required: true\n        schema:\n          type: string\n          example: Storage01\n      - name: subscriptionId\n        in: path\n        description: Identifier of the NotificationSubscription\n        required: true\n        schema:\n          type: string\n          example: Subscription01\n      - name: supported-features\n        in: query\n        description: Features required to be supported by the target NF\n        schema:\n          $ref: 'TS29571_CommonData.yaml#/components/schemas/SupportedFeatures'\n      - name: If-None-Match\n        in: header\n        description: Validator for conditional requests, as described in RFC 7232, 3.2\n        schema:\n          type: string\n      - name: If-Match\n        in: header\n        description: Record validator for conditional requests, as described in RFC 7232, 3.2\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NotificationSubscription'\n        required: true\n      responses:\n        '200' : # Update\n          description: Expected response to a valid update request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotificationSubscription'\n        '201':\n          description: Expected response to a valid create request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotificationSubscription'\n          headers:\n            Location:\n              description: 'Contains the URI of the newly created resource according to the structure: {apiRoot}/nudsf-dr/\u003capiVersion\u003e/{realmId}/{storageId}/subs-to-notify/{subscriptionId}'\n              required: true\n              schema:\n                type: string\n            Cache-Control:\n              $ref: '#/components/headers/Cache-Control'\n            ETag:\n              $ref: '#/components/headers/ETag'\n            Last-Modified:\n              $ref: '#/components/headers/Last-Modified'\n        '304':\n          $ref: '#/components/responses/304'\n        '400':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/400'\n        '401':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/401'\n        '403':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/403'\n        '404':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/404'\n        '408':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/408'\n        '409':\n          description: Conflict\n          content:\n           application/json:\n            schema:\n              type: array\n              items:\n                $ref: 'TS29571_CommonData.yaml#/components/schemas/Uri'\n        '412':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/412'\n        '500':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/500'\n        '503':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/503'\n        default:\n          description: Unexpected error\n          content:\n            application/problem+json:\n              schema:\n                $ref: 'TS29571_CommonData.yaml#/components/schemas/ProblemDetails'\n      callbacks:\n        onDataChange:\n          '{request.body#/callbackReference}':\n            post:\n              requestBody:\n                $ref: '#/components/requestBodies/RecordNotificationBody'\n              responses:\n                '204':\n                  description: Callback executed successfully\n                '400':\n                  $ref: 'TS29571_CommonData.yaml#/components/responses/400'\n                '401':\n                  $ref: 'TS29571_CommonData.yaml#/components/responses/401'\n                '403':\n                  $ref: 'TS29571_CommonData.yaml#/components/responses/403'\n                '500':\n                  $ref: 'TS29571_CommonData.yaml#/components/responses/500'\n                '503':\n                  $ref: 'TS29571_CommonData.yaml#/components/responses/503'\n                default:\n                  $ref: 'TS29571_CommonData.yaml#/components/responses/default'\n        subscriptionExpiryNotification:\n          '{request.body#/expiryCallbackReference}':\n            post:\n              requestBody:\n                required: true\n                content:\n                  application/json:\n                    schema:\n                      $ref: '#/components/schemas/NotificationInfo'\n              responses:\n                '204':\n                  description: Successful Notification response\n                '400':\n                  $ref: 'TS29571_CommonData.yaml#/components/responses/400'\n                '401':\n                  $ref: 'TS29571_CommonData.yaml#/components/responses/401'\n                '403':\n                  $ref: 'TS29571_CommonData.yaml#/components/responses/403'\n                '404':\n                  $ref: 'TS29571_CommonData.yaml#/components/responses/404'\n                '500':\n                  $ref: 'TS29571_CommonData.yaml#/components/responses/500'\n                '503':\n                  $ref: 'TS29571_CommonData.yaml#/components/responses/503'\n                default:\n                  $ref: 'TS29571_CommonData.yaml#/components/responses/default'\n\n  /{realmId}/{storageId}/meta-schemas/{schemaId}:\n    summary: Access to a specific Meta Schema, identified by its SchemaId\n    description: \u003e-\n      Access to a specific Meta Schema\n    get:\n      summary: Meta Schema access\n      description: retrieve one specific Meta Schema\n      operationId: GetMetaSchema\n      tags:\n      - MetaSchema CRUD\n      parameters:\n        - name: realmId\n          in: path\n          description: Identifier of the Realm\n          required: true\n          schema:\n            type: string\n            example: Realm01\n        - name: storageId\n          in: path\n          description: Identifier of the Storage\n          required: true\n          schema:\n            type: string\n            example: Storage01\n        - name: schemaId\n          in: path\n          description: Identifier of the Meta Schema\n          required: true\n          schema:\n            $ref: '#/components/schemas/SchemaId'\n        - name: If-None-Match\n          in: header\n          description: Validator for conditional requests, as described in RFC 7232, 3.2\n          schema:\n            type: string\n        - name: If-Modified-Since\n          in: header\n          description: Validator for conditional requests, as described in RFC 7232, 3.3\n          schema:\n            type: string\n        - name: supported-features\n          in: query\n          description: Features required to be supported by the target NF\n          schema:\n            $ref: 'TS29571_CommonData.yaml#/components/schemas/SupportedFeatures'\n      responses:\n        '200' : #result ok\n          $ref: '#/components/responses/RecordBody'\n        '304':\n          $ref: '#/components/responses/304'\n        '400':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/400'\n        '401':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/401'\n        '403':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/403'\n        '404':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/404'\n        '500':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/500'\n        '503':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/503'\n        default:\n          $ref: 'TS29571_CommonData.yaml#/components/responses/default'\n    put:\n      summary: Create/Modify Meta Schema\n      description: Create or Modify a Meta Schema with a user provided SchemaId\n      operationId: CreateOrModifyMetaSchema\n      tags:\n        - MetaSchema CRUD\n      parameters:\n        - name: realmId\n          in: path\n          description: Identifier(name) of the Realm\n          required: true\n          schema:\n            type: string\n            example: Realm01\n        - name: storageId\n          in: path\n          description: Identifier of the Storage\n          required: true\n          schema:\n            type: string\n            example: Storage01\n        - name: schemaId\n          in: path\n          description: Identifier of the Meta Schema\n          required: true\n          schema:\n            $ref: '#/components/schemas/SchemaId'\n        - name: If-None-Match\n          in: header\n          description: Validator for conditional requests, as described in RFC 7232, 3.2\n          schema:\n            type: string\n        - name: If-Match\n          in: header\n          description: Validator for conditional requests, as described in RFC 7232, 3.2\n          schema:\n            type: string\n        - name: get-previous\n          in: query\n          description: Retrieve the Meta Schema before update\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: supported-features\n          in: query\n          description: Features required to be supported by the target NF\n          schema:\n            $ref: 'TS29571_CommonData.yaml#/components/schemas/SupportedFeatures'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MetaSchema'\n        required: true\n      responses:\n        '200':\n          description: Update with return\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MetaSchema'\n        '201':\n          description: \u003e-\n            Create case. The resource has been successfully created, location header indicates\n            the URI of the created Record.\n            $ref: '#/components/responses/RecordBody'\n          headers:\n            Location:\n              $ref: '#/components/headers/Location'\n            Cache-Control:\n              $ref: '#/components/headers/Cache-Control'\n            ETag:\n              $ref: '#/components/headers/ETag'\n            Last-Modified:\n              $ref: '#/components/headers/Last-Modified'\n        '204': # Update without return\n          description: \u003e-\n            Update case. The resource has been successfully updated and no\n            additional content is included in the response message.\n          headers:\n            Cache-Control:\n              $ref: '#/components/headers/Cache-Control'\n            ETag:\n              $ref: '#/components/headers/ETag'\n            Last-Modified:\n              $ref: '#/components/headers/Last-Modified'\n        '304':\n          $ref: '#/components/responses/304'\n        '400':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/400'\n        '401':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/401'\n        '403':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/403'\n        '404':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/404'\n        '408':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/408'\n        '412':\n          description: Return Meta Schema value if get-previous=true\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MetaSchema'\n        '413':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/413'\n        '500':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/500'\n        '501':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/501'\n        '503':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/503'\n        default:\n          $ref: 'TS29571_CommonData.yaml#/components/responses/default'\n    delete:\n      summary: Delete a Meta Schema with an user provided SchemaId\n      operationId: DeleteMetaSchema\n      tags:\n        - MetaSchema CRUD\n      parameters:\n        - name: realmId\n          in: path\n          description: Identifier(name) of the Realm\n          required: true\n          schema:\n            type: string\n            example: Realm01\n        - name: storageId\n          in: path\n          description: Identifier of the Storage\n          required: true\n          schema:\n            type: string\n            example: Storage01\n        - name: schemaId\n          in: path\n          description: Identifier of the Meta Schema\n          required: true\n          schema:\n            $ref: '#/components/schemas/SchemaId'\n        - name: If-Match\n          in: header\n          description: Record validator for conditional requests, as described in RFC 7232, 3.2\n          schema:\n            type: string\n        - name: get-previous\n          in: query\n          description: Retrieve the Meta Schema before delete\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: supported-features\n          in: query\n          description: Features required to be supported by the target NF\n          schema:\n            $ref: 'TS29571_CommonData.yaml#/components/schemas/SupportedFeatures'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MetaSchema'\n        '204':\n          description: Successful case.\n          headers:\n            ETag:\n              $ref: '#/components/headers/ETag'\n            Last-Modified:\n              $ref: '#/components/headers/Last-Modified'\n        '304':\n          $ref: '#/components/responses/304'\n        '400':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/400'\n        '401':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/401'\n        '403':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/403'\n        '404':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/404'\n        '408':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/408'\n        '412':\n          description: Return value if get-previous=true\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MetaSchema'\n        '500':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/500'\n        '503':\n          $ref: 'TS29571_CommonData.yaml#/components/responses/503'\n        default:\n          $ref: 'TS29571_CommonData.yaml#/components/responses/default'\n\ncomponents:\n  securitySchemes:\n    oAuth2ClientCredentials:\n      type: oauth2\n      flows:\n        clientCredentials:\n          tokenUrl: '{nrfApiRoot}/oauth2/token'\n          scopes:\n            nudsf-dr: Access to the nudsf-dr API\n\n  schemas:\n    RecordSearchResult:\n      description: Count and collection of Record references matching the providing filter.\n      type: object\n      properties:\n        count:      # The total number of elements found.\n          $ref: 'TS29571_CommonData.yaml#/components/schemas/Uinteger'\n        references: # The Record references found. If count-indicator is true, no references are sent back.\n          type: array\n          items:\n            $ref: 'TS29571_CommonData.yaml#/components/schemas/Uri'\n          minItems: 1\n        supportedFeatures:\n          $ref: 'TS29571_CommonData.yaml#/components/schemas/SupportedFeatures'\n        matchingRecords:\n          description: A map (list of key-value pairs where recordId serves as key) of Records\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/Record'\n          minProperties: 1\n      required:\n        - count\n    RecordMeta:\n      description: Meta data of a Record\n      type: object\n      properties:\n        ttl:\n          $ref: 'TS29571_CommonData.yaml#/components/schemas/DateTime'\n        callbackReference:\n          $ref: 'TS29571_CommonData.yaml#/components/schemas/Uri'\n        tags:\n          type: object # dictionary type\n          description: \u003e-\n              A dictionary of {\"tagName\": [ \"tagValue\", ...] }. A tag name can be used to retrieve a Record. The tagValue are unique.\n          additionalProperties:\n            type: array\n            items:\n              type: string\n            uniqueItems: true\n            minItems: 1\n          minProperties: 1\n          example:  '{\"ueId\" : [ \"455345\", \"455346\" ], \"recordId\" : [ \"1000106\" ] }'\n      example: \u003e-\n        { \"tags\" : {\"ueId\" : [ \"455345\", \"455346\" ], \"recordId\" : [ \"1000106\" ] }}\n        schemaId:\n          $ref: '#/components/schemas/SchemaId'\n\n    Record:\n      description: Definition of a Record\n      type: object\n      properties:\n        meta:\n          # json representation of the Meta Data\n          $ref: '#/components/schemas/RecordMeta'\n        blocks:\n          # List of multipart data\n          type: array\n          description: list of opaque Block's in this Record\n          items:\n            $ref: '#/components/schemas/Block'\n          minItems: 1\n      required:\n        - meta\n      example: \u003e-\n        {\"meta\": { \"tags\" : {\"tag1\" : [\"value1\"], \"tag2\" :[\"value2\"] } }, \"blocks\": [{\"Content-Id\": \"userDefBinaryBlob\", \"Content-Type\": \"text/plain\", \"content\": \"QmxvY2sgY29udGVudA==\"}, {\"Content-Id\": \"userDefJsonBlob\", \"Content-Type\": \"application/json\", \"content\": \"{\"key\": \"ftsimpletype-999550000000002\", \"value\": \"A3E71A78377179B5B91A;imsi-999550000000123\"}]}\n\n    RecordIdList:\n      description: List of Record IDs\n      type: object\n      properties:\n        recordIdList:\n          type: array\n          items:\n            type: string\n          minItems: 1\n      required:\n        - recordIdList\n\n    Block:\n      description: A Block can be of any type\n      example: \u003e-\n        \"QmxvY2sgY29udGVudA==\"\n    NotificationSubscription:\n      description: Definition of a notification subscription\n      type: object\n      properties:\n        clientId:\n          $ref: '#/components/schemas/ClientId'\n        callbackReference:\n          $ref: 'TS29571_CommonData.yaml#/components/schemas/Uri'\n        expiryCallbackReference:\n          $ref: 'TS29571_CommonData.yaml#/components/schemas/Uri'\n        expiry:\n          $ref: 'TS29571_CommonData.yaml#/components/schemas/DateTime'\n        expiryNotification:\n          $ref: 'TS29571_CommonData.yaml#/components/schemas/Uinteger'\n        subFilter:\n          $ref: '#/components/schemas/SubscriptionFilter'\n        supportedFeatures:\n          $ref: 'TS29571_CommonData.yaml#/components/schemas/SupportedFeatures'\n      required:\n        - clientId\n        - callbackReference\n\n    RecordNotification:\n      description: Definition of a notification on a record\n      type: object\n      properties:\n        descriptor:\n          # json representation of the notification description\n          $ref: '#/components/schemas/NotificationDescription'\n        meta:\n          # json representation of the Meta Data\n          $ref: '#/components/schemas/RecordMeta'\n        blocks:\n          # List of multipart data\n          type: array\n          description: list of opaque Block's in this Record\n          items:\n            $ref: '#/components/schemas/Block'\n      required:\n        - descriptor\n        - meta\n      example: \u003e-\n        {\"descriptor\": { \"recordRef\" : \"...\", \"operationType\" : \"DELETED\"}, \"meta\": { \"tags\" : {\"tag1\" : [\"value1\"], \"tag2\" :[\"value2\"] } }, \"blocks\": [{\"Content-Id\": \"userDefBinaryBlob\", \"Content-Type\": \"text/plain\", \"content\": \"QmxvY2sgY29udGVudA==\"}, {\"Content-Id\": \"userDefJsonBlob\", \"Content-Type\": \"application/json\", \"content\": \"{\"key\": \"ftsimpletype-999550000000002\", \"value\": \"A3E71A78377179B5B91A;imsi-999550000000123\"}]}\n\n    NotificationDescription:\n      description: Description of a record notification\n      type: object\n      properties:\n        recordRef:\n          $ref: 'TS29571_CommonData.yaml#/components/schemas/Uri'\n        operationType:\n          $ref: '#/components/schemas/RecordOperation'\n        subscriptionId:\n          # unique identifier of the NotificationSubscription\n          type: string\n      required:\n        - recordRef\n        - operationType\n      example: \u003e-\n        { \"record\" : \"...\", \"operationType\" : \"DELETED\"}\n\n    SubscriptionFilter:\n      description: A subscription filter\n      type: object\n      properties:\n        monitoredResourceUris:\n          type: array\n          description: list of resources applicable to the subscription\n          items:\n            $ref: 'TS29571_CommonData.yaml#/components/schemas/Uri'\n          minItems: 1\n        operations:\n          type: array\n          description: list of resources applicable to the subscription\n          items:\n            $ref: '#/components/schemas/RecordOperation'\n          maxItems: 3\n\n    ClientId:\n      description: Defines the identity of the NF Consumer\n      type: object\n      properties:\n        nfId:\n          $ref: 'TS29571_CommonData.yaml#/components/schemas/NfInstanceId'\n        nfSetId:\n          $ref: 'TS29571_CommonData.yaml#/components/schemas/NfSetId'\n\n    RecordOperation:\n      description: Indicate operation made on a record\n      anyOf:\n      - type: string\n        enum:\n          - CREATED\n          - UPDATED\n          - DELETED\n      - type: string\n\n    ConditionOperator:\n      description: TBD\n      anyOf:\n      - type: string\n        enum:\n          - AND\n          - OR\n          - NOT\n      - type: string\n\n    ComparisonOperator:\n      description: TBD\n      anyOf:\n        - type: string\n          enum:\n            # Equals\n            - EQ\n            # Not Equal\n            - NEQ\n            # Greater Than\n            - GT\n            # Greater Than or Equal\n            - GTE\n            # Less Than\n            - LT\n            # Less Than or Equal\n            - LTE\n        - type: string\n\n    SearchExpression:\n      description: A logical expression element\n      type: object\n      oneOf:\n        - $ref: '#/components/schemas/SearchCondition'\n        - $ref: '#/components/schemas/SearchComparison'\n        - $ref: '#/components/schemas/RecordIdList'\n      example:\n        { \"cond\": \"OR\", \"units\": [ { \"op\": \"EQ\", \"tag\" : \"ueId\", \"value\" : \"455345\" }, { \"op\": \"EQ\", \"tag\" : \"supi\", \"value\" : \"imsi-999559807001001\" } ] }\n\n    SearchCondition:\n      description: A logical condition\n      type: object\n      properties:\n        cond:\n          $ref: '#/components/schemas/ConditionOperator'\n        units:\n          type: array\n          items:\n            $ref: '#/components/schemas/SearchExpression'\n          minItems: 1\n        schemaId:\n          $ref: '#/components/schemas/SchemaId'\n      required:\n        - cond\n        - units\n      example:\n        { \"cond\": \"OR\", \"units\": [ { \"op\": \"EQ\", \"tag\" : \"ueId\", \"value\" : \"455345\" }, { \"op\": \"EQ\", \"tag\" : \"supi\", \"value\" : \"imsi-999559807001001\" } ] }\n\n    SearchComparison:\n      description: A comparison to apply on tag/values pairs.\n      type: object\n      properties:\n        op:\n          $ref: '#/components/schemas/ComparisonOperator'\n        tag:\n          type: string\n        value:\n          type: string\n      required:\n        - op\n        - tag\n        - value\n      example:\n        { \"op\": \"EQ\", \"tag\" : \"supi\", \"value\" : \"imsi-999559807001001\" }\n\n    MetaSchema:\n      description: Defines the Meta Schema\n      type: object\n      required:\n        - schemaId\n        - metaTags\n      properties:\n        schemaId:\n          $ref: '#/components/schemas/SchemaId'\n        metaTags:\n          type: array\n          items:\n            $ref: '#/components/schemas/TagType'\n\n    TagType:\n      description: Defines the Tag Type\n      type: object\n      required:\n        - tagName\n        - keyType\n      properties:\n        tagName:\n          type: string\n        keyType:\n          $ref: '#/components/schemas/KeyType'\n        sort:\n          type: boolean\n          default: false\n        presence:\n          type: boolean\n\n    SchemaId:\n      description: Represents the Identifier of a Meta schema.\n      type: string\n\n    KeyType:\n      description: Represents the type of a key.\n      anyOf:\n        - type: string\n          enum:\n          - UNIQUE_KEY\n          - SEARCH_KEY\n          - COUNT_KEY\n          - SEARCH_AND_COUNT_KEY\n          - OTHER_TAG\n        - type: string\n\n    RetrieveRecords:\n      description: Indicates the data to be retrieved.\n      anyOf:\n        - type: string\n          enum:\n          - ONLY_META\n          - META_AND_BLOCKS\n        - type: string\n\n    NotificationInfo:\n      type: object\n      required:\n        - expiredSubscriptions\n      properties:\n        expiredSubscriptions:\n          type: array\n          items:\n            $ref: '#/components/schemas/NotificationSubscription'\n          minItems: 1\n\n  headers:\n    Cache-Control:\n      description: Cache-Control containing max-age, as described in RFC 7234, 5.2\n      schema:\n        type: string\n    ETag:\n      description: Entity Tag, containing a strong validator, as described in RFC 7232, 2.3\n      schema:\n        type: string\n    Last-Modified:\n      description: Timestamp for last modification of the resource, as described in RFC 7232, 2.2\n      schema:\n        type: string\n    Location:\n      description: Contains the URI of the newly created resource\n      required: true\n      schema:\n        type: string\n    Retry-After:\n      description: 'Indicates the time the NF Consumer has to wait before making a new request. It can be a non-negative integer (decimal number) indicating the number of seconds the NF Consumer has to wait before making a new request or an HTTP-date after which the AF can retry a new request.'\n      schema:\n        anyOf:\n          - type: integer\n          - type: string\n\n  requestBodies:\n    RecordBody:\n      description: The record multipart request body. The meta part shall be the first part and is mandatory but can be empty and zero or more block parts may follow the meta part.\n      required: true\n      content:\n        multipart/mixed:\n          schema:\n            $ref: '#/components/schemas/Record'\n          encoding:\n            meta: # The meta part shall be the first part and is mandatory but can be empty\n              contentType: application/json\n              headers:\n                Content-Id:\n                  schema:\n                    type: string\n                  required: true\n            blocks: # 0 or more block parts may follow the meta part\n              contentType: '*/*' # Block part can be of any type\n              headers:\n                Content-Id: # Block identifier is defined by the Content-Id header.\n                  schema:\n                    type: string\n                  required: true\n                Content-Transfer-Encoding:\n                  schema:\n                    type: string\n                  required: true\n\n    RecordNotificationBody:\n      description: The record notification multipart request body. The descriptor part shall be the first one, followed by record meta part and by zero or more block parts.\n      required: true\n      content:\n        multipart/mixed:\n          schema:\n            $ref: '#/components/schemas/RecordNotification'\n          encoding:\n            descriptor: # The descriptor part shall be the first part and is mandatory\n              contentType: application/json\n              headers:\n                Content-Id:\n                  schema:\n                    type: string\n                  required: true\n            meta: # The meta part shall be the second part and is mandatory but can be empty\n              contentType: application/json\n              headers:\n                Content-Id:\n                  schema:\n                    type: string\n                  required: true\n            blocks: # 0 or more block parts may follow the meta part\n              contentType: '*/*' # Block part can be of any type\n              headers:\n                Content-Id: # Block identifier is defined by the Content-Id header.\n                  schema:\n                    type: string\n                  required: true\n                Content-Transfer-Encoding:\n                  schema:\n                    type: string\n                  required: true\n\n  responses:\n    '304': # Etag response if the value might differ from that sent\n      description: Not Modified\n      content:\n        application/problem+json:\n          schema:\n            $ref: 'TS29571_CommonData.yaml#/components/schemas/ProblemDetails'\n      headers:\n        Cache-Control:\n          $ref: '#/components/headers/Cache-Control'\n        ETag:\n          $ref: '#/components/headers/ETag'\n        Retry-After:\n          $ref: '#/components/headers/Retry-After'\n\n    'RecordBody': #  Record value with associated headers\n      description: \u003e-\n         - 200 Update. The resource has been successfully updated and previous value must be sent in the response message if requested.\n          - 200 Get. The resource exists, its value must be sent in the response message\n          - 412 Precondition Failed, the previous value must be sent in response message if requested.\n      content:\n        multipart/mixed:\n          schema:\n            $ref: '#/components/schemas/Record'\n          encoding:\n              meta: # The meta part shall be the first part and is mandatory but can be empty.\n                contentType: application/json\n                headers:\n                  Content-Id: # The meta part is identified by the 'meta' Content-Id header.\n                    schema:\n                      type: string\n                    required: true\n              blocks: # Zero or more block parts may follow the meta part\n                contentType: '*/*' # Block parts can be of any type.\n                headers:\n                  Content-Id: # Block identifier is defined by the Content-Id header.\n                    schema:\n                      type: string\n                    required: true\n                  Content-Transfer-Encoding:\n                    schema:\n                      type: string\n                    required: true\n      headers:\n        Cache-Control:\n          $ref: '#/components/headers/Cache-Control'\n        ETag:\n          $ref: '#/components/headers/ETag'\n        Last-Modified:\n          $ref: '#/components/headers/Last-Modified'\n\n    'RecordBodyDelete': #  Record value with associated headers\n      description: \u003e-\n          - 200 Delete. The resource has been successfully delete and previous value must be sent in the response message if requested.\n      content:\n        multipart/mixed:\n          schema:\n            $ref: '#/components/schemas/Record'\n          encoding:\n              meta: # The meta part shall be the first par and is mandatory but can be empty.\n                contentType: application/json\n                headers:\n                  Content-Id: # The meta part is identified by the Content-Id header.\n                    schema:\n                      type: string\n                    required: true\n              blocks: # Zero or more block parts may follow the meta part.\n                contentType: '*/*' # Block parts can be of any type.\n                headers:\n                  Content-Id: # Block identifier is defined by the Content-Id header.\n                    schema:\n                      type: string\n                    required: true\n                  Content-Transfer-Encoding:\n                    schema:\n                      type: string\n                    required: true\n      headers:\n        ETag:\n          $ref: '#/components/headers/ETag'\n        Last-Modified:\n          $ref: '#/components/headers/Last-Modified'\n\n    'BlockBody': #  Block value with associated headers\n      description: \u003e-\n         - 200 Update: The resource has been successfully updated and previous value must be sent in the response message if requested.\n          - 200 Get: The resource exists, its value must be sent in the response message\n          - 412 Precondition Failed: the previous value must be sent in response message if requested.\n      content:\n        '*/*':\n          schema:\n              $ref: '#/components/schemas/Block'\n      headers:\n        Cache-Control:\n          $ref: '#/components/headers/Cache-Control'\n        ETag:\n          $ref: '#/components/headers/ETag'\n        Last-Modified:\n          $ref: '#/components/headers/Last-Modified'\n\n    'BlockBodyDelete': #  Block value with associated headers\n      description: \u003e-\n          - 200 Delete: The resource has been successfully delete and previous value must be sent in the response message if requested.\n      content:\n        '*/*':\n          schema:\n              $ref: '#/components/schemas/Block'\n      headers:\n        ETag:\n          $ref: '#/components/headers/ETag'\n        Last-Modified:\n          $ref: '#/components/headers/Last-Modified'\n",
			"canonicalURL": "/github.com/jdegre/5GC_APIs@156cf6056495fbf2f1e81b2b9574ba6369f91640/-/blob/TS29598_Nudsf_DataRepository.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/jdegre/5GC_APIs/blob/156cf6056495fbf2f1e81b2b9574ba6369f91640/TS29598_Nudsf_DataRepository.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"ClientId\": parse schema: property \"nfId\": parse schema: resolve \"TS29571_CommonData.yaml#/components/schemas/NfInstanceId\": external \"TS29571_CommonData.yaml\": file: local file reference is not allowed"
}