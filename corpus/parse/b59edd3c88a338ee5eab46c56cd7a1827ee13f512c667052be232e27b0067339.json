{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/influxdata/openapi"
		},
		"file": {
			"name": "legacy.yml",
			"size": 0,
			"path": "contracts/legacy.yml",
			"byteSize": 28787,
			"content": "openapi: 3.0.0\ninfo:\n  title: Influx Legacy API\n  version: 2.0.1\n  license:\n    name: MIT\n    url: 'https://opensource.org/licenses/MIT'\nservers:\n  - url: ''\npaths:\n  /query:\n    get:\n      operationId: GetLegacyQuery\n      tags:\n        - Legacy Query\n      summary: Query with the 1.x compatibility API\n      description: Queries InfluxDB using InfluxQL.\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: header\n          name: Accept\n          schema:\n            type: string\n            description: |\n              Media type that the client can understand.\n\n              **Note**: With `application/csv`, query results include [**unix timestamps**]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#unix-timestamp) instead of [RFC3339 timestamps]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#rfc3339-timestamp).\n            default: application/json\n            enum:\n              - application/json\n              - application/csv\n              - text/csv\n              - application/x-msgpack\n        - in: header\n          name: Accept-Encoding\n          description: The content encoding (usually a compression algorithm) that the client can understand.\n          schema:\n            type: string\n            description: 'The content coding. Use `gzip` for compressed data or `identity` for unmodified, uncompressed data.'\n            default: identity\n            enum:\n              - gzip\n              - identity\n        - in: header\n          name: Content-Type\n          schema:\n            type: string\n            enum:\n              - application/json\n        - in: query\n          name: u\n          description: The InfluxDB 1.x username to authenticate the request.\n          schema:\n            type: string\n        - in: query\n          name: p\n          description: The InfluxDB 1.x password to authenticate the request.\n          schema:\n            type: string\n        - in: query\n          name: db\n          required: true\n          description: |\n            The database to query data from.\n            This is mapped to an InfluxDB [bucket]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#bucket).\n            For more information, see [Database and retention policy mapping]({{% INFLUXDB_DOCS_URL %}}/api/influxdb-1x/dbrp/).\n          schema:\n            type: string\n        - in: query\n          name: rp\n          description: |\n            The retention policy to query data from.\n            This is mapped to an InfluxDB [bucket]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#bucket).\n            For more information, see [Database and retention policy mapping]({{% INFLUXDB_DOCS_URL %}}/api/influxdb-1x/dbrp/).\n          schema:\n            type: string\n        - in: query\n          name: q\n          required: true\n          description: 'The InfluxQL query to execute. To execute multiple queries, delimit queries with a semicolon (`;`).'\n          schema:\n            type: string\n        - in: query\n          name: epoch\n          description: |\n            A unix timestamp precision.\n            Formats timestamps as [unix (epoch) timestamps]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#unix-timestamp) the specified precision\n            instead of [RFC3339 timestamps]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#rfc3339-timestamp) with nanosecond precision.\n          schema:\n            type: string\n            enum:\n              - ns\n              - u\n              - Âµ\n              - ms\n              - s\n              - m\n              - h\n      responses:\n        '200':\n          description: Query results\n          headers:\n            Content-Encoding:\n              description: Lists encodings (usually compression algorithms) that have been applied to the response payload.\n              schema:\n                type: string\n                description: |\n                  The content coding:\n                    - `gzip`: compressed data\n                    - `identity`: unmodified, uncompressed data.\n                default: identity\n                enum:\n                  - gzip\n                  - identity\n            Trace-Id:\n              description: 'The trace ID, if generated, of the request.'\n              schema:\n                type: string\n                description: Trace ID of a request.\n          content:\n            text/csv:\n              schema:\n                $ref: '#/components/schemas/InfluxqlCsvResponse'\n            application/csv:\n              schema:\n                $ref: '#/components/schemas/InfluxqlCsvResponse'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InfluxqlJsonResponse'\n            application/x-msgpack:\n              schema:\n                type: string\n                format: binary\n        '429':\n          description: |\n            #### InfluxDB Cloud:\n              - returns this error if a **read** or **write** request exceeds your\n                plan's [adjustable service quotas]({{% INFLUXDB_DOCS_URL %}}/account-management/limits/#adjustable-service-quotas)\n                or if a **delete** request exceeds the maximum\n                [global limit]({{% INFLUXDB_DOCS_URL %}}/account-management/limits/#global-limits)\n              - returns `Retry-After` header that describes when to try the write again.\n\n            #### InfluxDB OSS:\n              - doesn't return this error.\n          headers:\n            Retry-After:\n              description: A non-negative decimal integer indicating the seconds to delay after the response is received.\n              schema:\n                type: integer\n                format: int32\n        default:\n          description: Error processing query\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /write:\n    post:\n      operationId: PostLegacyWrite\n      tags:\n        - Legacy Write\n      summary: Write time series data into InfluxDB in a V1-compatible format\n      requestBody:\n        description: Line protocol body\n        required: true\n        content:\n          text/plain:\n            schema:\n              type: string\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: query\n          name: u\n          description: The InfluxDB 1.x username to authenticate the request.\n          schema:\n            type: string\n        - in: query\n          name: p\n          description: The InfluxDB 1.x password to authenticate the request.\n          schema:\n            type: string\n        - in: query\n          name: db\n          schema:\n            type: string\n          required: true\n          description: 'Bucket to write to. If none exists, InfluxDB creates a bucket with a default 3-day retention policy.'\n        - in: query\n          name: rp\n          schema:\n            type: string\n          description: Retention policy name.\n        - in: query\n          name: precision\n          schema:\n            type: string\n          description: Write precision.\n        - in: header\n          name: Content-Encoding\n          description: 'When present, its value indicates to the database that compression is applied to the line protocol body.'\n          schema:\n            type: string\n            description: Specifies that the line protocol in the body is encoded with gzip or not encoded with identity.\n            default: identity\n            enum:\n              - gzip\n              - identity\n      responses:\n        '204':\n          description: Write data is correctly formatted and accepted for writing to the bucket.\n        '400':\n          description: Line protocol poorly formed and no points were written.  Response can be used to determine the first malformed line in the body line-protocol. All data in body was rejected and not written.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LineProtocolError'\n        '401':\n          description: Token doesn't have sufficient permissions to write to this organization and bucket or the organization and bucket do not exist.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: No token was sent and they are required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '413':\n          description: Write has been rejected because the payload is too large. Error message returns max size supported. All data in body was rejected and not written.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LineProtocolLengthError'\n        '429':\n          description: Token is temporarily over quota. The Retry-After header describes when to try the write again.\n          headers:\n            Retry-After:\n              description: A non-negative decimal integer indicating the seconds to delay after the response is received.\n              schema:\n                type: integer\n                format: int32\n        '503':\n          description: Server is temporarily unavailable to accept writes.  The Retry-After header describes when to try the write again.\n          headers:\n            Retry-After:\n              description: A non-negative decimal integer indicating the seconds to delay after the response is received.\n              schema:\n                type: integer\n                format: int32\n        default:\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /legacy/authorizations:\n    servers:\n      - url: /private\n    get:\n      operationId: GetLegacyAuthorizations\n      tags:\n        - Legacy Authorizations\n      summary: List all legacy authorizations\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: query\n          name: userID\n          schema:\n            type: string\n          description: |\n            A user ID.\n            Only returns legacy authorizations scoped to the specified [user]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#user).\n        - in: query\n          name: user\n          schema:\n            type: string\n          description: |\n            A user name.\n            Only returns legacy authorizations scoped to the specified [user]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#user).\n        - in: query\n          name: orgID\n          schema:\n            type: string\n          description: |\n            An organization ID.\n            Only returns legacy authorizations that belong to the specified [organization]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#organization).\n        - in: query\n          name: org\n          schema:\n            type: string\n          description: |\n            An organization name.\n            Only returns legacy authorizations that belong to the specified [organization]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#organization).\n        - in: query\n          name: token\n          schema:\n            type: string\n          description: |\n            An authorization name token.\n            Only returns legacy authorizations with the specified name.\n        - in: query\n          name: authID\n          schema:\n            type: string\n          description: |\n            An authorization ID.\n            Returns the specified legacy authorization.\n      responses:\n        '200':\n          description: Success. The response body contains a list of legacy `authorizations`.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  links:\n                    readOnly: true\n                    $ref: '#/components/schemas/Links'\n                  authorizations:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Authorization'\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n    post:\n      operationId: PostLegacyAuthorizations\n      tags:\n        - Legacy Authorizations\n      summary: Create a legacy authorization\n      description: |\n        Creates a legacy authorization and returns the legacy authorization.\n\n        #### Required permissions\n\n        - `write-users USER_ID` if you pass the `userID` property in the request body.\n\n        *`USER_ID`* is the ID of the user that you want to scope the authorization to.\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n      requestBody:\n        description: The legacy authorization to create.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LegacyAuthorizationPostRequest'\n      responses:\n        '201':\n          description: |\n            Created. The legacy authorization is created.\n            The response body contains the newly created legacy authorization.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Authorization'\n        '400':\n          description: Invalid request\n          $ref: '#/components/responses/ServerError'\n        '401':\n          description: |\n            Unauthorized.\n            The API token passed doesn't have the permissions necessary for the\n            request.\n          content:\n            application/json:\n              schema:\n                properties:\n                  code:\n                    description: |\n                      The HTTP status code description. Default is `unauthorized`.\n                    readOnly: true\n                    type: string\n                    enum:\n                      - unauthorized\n                  message:\n                    readOnly: true\n                    description: A human-readable message that may contain detail about the error.\n                    type: string\n              examples:\n                unauthorizedWriteUsers:\n                  summary: 'The token doesn''t have the write:user permission'\n                  value:\n                    code: unauthorized\n                    message: 'write:users/08028e90933bf000 is unauthorized'\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n  '/legacy/authorizations/{authID}':\n    servers:\n      - url: /private\n    get:\n      operationId: GetLegacyAuthorizationsID\n      tags:\n        - Legacy Authorizations\n      summary: Retrieve a legacy authorization\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: authID\n          schema:\n            type: string\n          required: true\n          description: The ID of the legacy authorization to get.\n      responses:\n        '200':\n          description: Legacy authorization details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Authorization'\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n    patch:\n      operationId: PatchLegacyAuthorizationsID\n      tags:\n        - Legacy Authorizations\n      summary: Update a legacy authorization to be active or inactive\n      requestBody:\n        description: Legacy authorization to update\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AuthorizationUpdateRequest'\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: authID\n          schema:\n            type: string\n          required: true\n          description: The ID of the legacy authorization to update.\n      responses:\n        '200':\n          description: The active or inactive legacy authorization\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Authorization'\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n    delete:\n      operationId: DeleteLegacyAuthorizationsID\n      tags:\n        - Legacy Authorizations\n      summary: Delete a legacy authorization\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: authID\n          schema:\n            type: string\n          required: true\n          description: The ID of the legacy authorization to delete.\n      responses:\n        '204':\n          description: Legacy authorization deleted\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n  '/legacy/authorizations/{authID}/password':\n    servers:\n      - url: /private\n    post:\n      operationId: PostLegacyAuthorizationsIDPassword\n      tags:\n        - Legacy Authorizations\n      summary: Set a legacy authorization password\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: authID\n          schema:\n            type: string\n          required: true\n          description: The ID of the legacy authorization to update.\n      requestBody:\n        description: New password\n        required: true\n        content:\n          application/json:\n            schema:\n              properties:\n                password:\n                  type: string\n              required:\n                - password\n      responses:\n        '204':\n          description: Legacy authorization password set\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\ncomponents:\n  parameters:\n    TraceSpan:\n      in: header\n      name: Zap-Trace-Span\n      description: OpenTracing span context\n      example:\n        trace_id: '1'\n        span_id: '1'\n        baggage:\n          key: value\n      required: false\n      schema:\n        type: string\n  schemas:\n    LegacyAuthorizationPostRequest:\n      required:\n        - orgID\n        - permissions\n      allOf:\n        - $ref: '#/components/schemas/AuthorizationUpdateRequest'\n        - type: object\n          properties:\n            orgID:\n              type: string\n              description: The organization ID. Identifies the organization that the authorization is scoped to.\n            userID:\n              type: string\n              description: The user ID. Identifies the user that the authorization is scoped to.\n            token:\n              type: string\n              description: The name that you provide for the authorization.\n            permissions:\n              type: array\n              minItems: 1\n              description: |\n                The list of permissions that provide `read` and `write` access to organization resources.\n                An authorization must contain at least one permission.\n              items:\n                $ref: '#/components/schemas/Permission'\n    InfluxqlJsonResponse:\n      description: JSON Response to InfluxQL Query\n      type: object\n      properties:\n        results:\n          type: array\n          items:\n            type: object\n            properties:\n              statement_id:\n                type: integer\n              error:\n                type: string\n              series:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    name:\n                      type: string\n                    tags:\n                      type: object\n                      additionalProperties:\n                        type: string\n                    partial:\n                      type: boolean\n                    columns:\n                      type: array\n                      items:\n                        type: string\n                    values:\n                      type: array\n                      items:\n                        type: array\n                        items: {}\n    InfluxqlCsvResponse:\n      description: CSV Response to InfluxQL Query\n      type: string\n      example: |\n        name,tags,time,test_field,test_tag test_measurement,,1603740794286107366,1,tag_value test_measurement,,1603740870053205649,2,tag_value test_measurement,,1603741221085428881,3,tag_value\n    Authorization:\n      required:\n        - orgID\n        - permissions\n      allOf:\n        - $ref: '#/components/schemas/AuthorizationUpdateRequest'\n        - type: object\n          properties:\n            createdAt:\n              type: string\n              format: date-time\n              readOnly: true\n            updatedAt:\n              type: string\n              format: date-time\n              readOnly: true\n            orgID:\n              type: string\n              description: |\n                The organization ID.\n                Specifies the [organization]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#organization) that the authorization is scoped to.\n            permissions:\n              type: array\n              minItems: 1\n              description: |\n                The list of permissions.\n                An authorization must have at least one permission.\n              items:\n                $ref: '#/components/schemas/Permission'\n            id:\n              readOnly: true\n              type: string\n              description: The authorization ID.\n            token:\n              readOnly: true\n              type: string\n              description: |\n                The API token.\n                The token value is unique to the authorization.\n                [API tokens]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#token) are\n                used to authenticate and authorize InfluxDB API requests and `influx`\n                CLI commands--after receiving the request, InfluxDB checks that the\n                token is valid and that the `permissions` allow the requested action(s).\n            userID:\n              readOnly: true\n              type: string\n              description: 'The user ID. Specifies the [user]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#user) that owns the authorization. If _scoped_, the user that the authorization is scoped to; otherwise, the creator of the authorization.'\n            user:\n              readOnly: true\n              type: string\n              description: |\n                The user name.\n                Specifies the [user]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#user) that owns the authorization.\n                If the authorization is _scoped_ to a user, the user;\n                otherwise, the creator of the authorization.\n            org:\n              readOnly: true\n              type: string\n              description: |\n                The organization name.\n                Specifies the [organization]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#organization)\n                that the token is scoped to.\n            links:\n              type: object\n              readOnly: true\n              example:\n                self: /api/v2/authorizations/1\n                user: /api/v2/users/12\n              properties:\n                self:\n                  readOnly: true\n                  $ref: '#/components/schemas/Link'\n                user:\n                  readOnly: true\n                  $ref: '#/components/schemas/Link'\n    AuthorizationUpdateRequest:\n      properties:\n        status:\n          description: 'Status of the token. If `inactive`, InfluxDB rejects requests that use the token.'\n          default: active\n          type: string\n          enum:\n            - active\n            - inactive\n        description:\n          type: string\n          description: A description of the token.\n    Permission:\n      required:\n        - action\n        - resource\n      properties:\n        action:\n          type: string\n          enum:\n            - read\n            - write\n        resource:\n          type: object\n          required:\n            - type\n          properties:\n            type:\n              type: string\n              enum:\n                - authorizations\n                - buckets\n                - dashboards\n                - orgs\n                - tasks\n                - telegrafs\n                - users\n                - variables\n                - secrets\n                - labels\n                - views\n                - documents\n                - notificationRules\n                - notificationEndpoints\n                - checks\n                - dbrp\n                - annotations\n                - sources\n                - scrapers\n                - notebooks\n                - remotes\n                - replications\n                - instance\n                - flows\n                - functions\n                - subscriptions\n              description: |\n                A resource type.\n                Identifies the API resource's type (or _kind_).\n            id:\n              type: string\n              description: |\n                A resource ID.\n                Identifies a specific resource.\n            name:\n              type: string\n              description: |\n                The name of the resource.\n                _Note: not all resource types have a `name` property_.\n            orgID:\n              type: string\n              description: |\n                An organization ID.\n                Identifies the organization that owns the resource.\n            org:\n              type: string\n              description: |\n                An organization name.\n                The organization that owns the resource.\n    Links:\n      type: object\n      description: |\n        URI pointers for additional paged results.\n      properties:\n        next:\n          $ref: '#/components/schemas/Link'\n        self:\n          $ref: '#/components/schemas/Link'\n        prev:\n          $ref: '#/components/schemas/Link'\n      required:\n        - self\n    Link:\n      type: string\n      format: uri\n      readOnly: true\n      description: URI of resource.\n    LineProtocolError:\n      properties:\n        code:\n          description: Code is the machine-readable error code.\n          readOnly: true\n          type: string\n          enum:\n            - internal error\n            - not found\n            - conflict\n            - invalid\n            - empty value\n            - unavailable\n        message:\n          readOnly: true\n          description: Human-readable message.\n          type: string\n        op:\n          readOnly: true\n          description: Describes the logical code operation when the error occurred. Useful for debugging.\n          type: string\n        err:\n          readOnly: true\n          description: Stack of errors that occurred during processing of the request. Useful for debugging.\n          type: string\n        line:\n          readOnly: true\n          description: First line in the request body that contains malformed data.\n          type: integer\n          format: int32\n      required:\n        - code\n    LineProtocolLengthError:\n      properties:\n        code:\n          description: Code is the machine-readable error code.\n          readOnly: true\n          type: string\n          enum:\n            - invalid\n        message:\n          readOnly: true\n          description: Human-readable message.\n          type: string\n      required:\n        - code\n        - message\n    Error:\n      properties:\n        code:\n          $ref: '#/components/schemas/ErrorCode'\n        message:\n          readOnly: true\n          description: Human-readable message.\n          type: string\n        op:\n          readOnly: true\n          description: Describes the logical code operation when the error occurred. Useful for debugging.\n          type: string\n        err:\n          readOnly: true\n          description: Stack of errors that occurred during processing of the request. Useful for debugging.\n          type: string\n      required:\n        - code\n    ErrorCode:\n      description: code is the machine-readable error code.\n      readOnly: true\n      type: string\n      enum:\n        - internal error\n        - not found\n        - conflict\n        - invalid\n        - unprocessable entity\n        - empty value\n        - unavailable\n        - forbidden\n        - too many requests\n        - unauthorized\n        - method not allowed\n        - request too large\n        - unsupported media type\n  responses:\n    ServerError:\n      description: Non 2XX error response from server.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n",
			"canonicalURL": "/github.com/influxdata/openapi@00a445641ae596ea69e9cb74fd774bf92b9a2175/-/blob/contracts/legacy.yml",
			"externalURLs": [
				{
					"url": "https://github.com/influxdata/openapi/blob/00a445641ae596ea69e9cb74fd774bf92b9a2175/contracts/legacy.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse servers: at contracts/legacy.yml:9:10: server URL must not be empty"
}