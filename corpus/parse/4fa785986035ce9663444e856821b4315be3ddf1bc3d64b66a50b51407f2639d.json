{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/eclipse-dataspaceconnector/DataSpaceConnector"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "resources/openapi/openapi.yaml",
			"byteSize": 57645,
			"content": "openapi: 3.0.1\ninfo:\n  title: EDC REST API\n  description: All files merged by open api merger\n  license:\n    name: Apache License v2.0\n    url: http://apache.org/v2\n  version: 1.0.0-SNAPSHOT\nservers:\n- url: /\ntags:\n- name: Data Plane control API\n  description: 'Api targeted by the Control Plane to delegate a data transfer (Provider\n    Push or Streaming) to the Data Plane after the contract has been successfully\n    negotiated and agreed between the two participants. '\n- name: Data Plane public API\n  description: \"The public API of the Data Plane is a data proxy enabling a data consumer\\\n    \\ to actively querydata from the provider data source (e.g. backend Rest API,\\\n    \\ internal database...) through its Data Planeinstance. Thus the Data Plane is\\\n    \\ the only entry/output door for the data, which avoids the provider to exposedirectly\\\n    \\ its data externally.The Data Plane public API being a proxy, it supports all\\\n    \\ verbs (i.e. GET, POST, PUT, PATCH, DELETE), whichcan then conveyed until the\\\n    \\ data source is required. This is especially useful when the actual data sourceis\\\n    \\ a Rest API itself.In the same manner, any set of arbitrary query parameters,\\\n    \\ path parameters and request body are supported (in the limits fixed by the HTTP\\\n    \\ server) and can also conveyed to the actual data source.\"\npaths:\n  /assets:\n    get:\n      tags:\n      - Asset\n      description: Gets all assets according to a particular query\n      operationId: getAllAssets\n      parameters:\n      - name: offset\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: integer\n          format: int32\n      - name: limit\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: integer\n          format: int32\n      - name: filter\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n      - name: sort\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n          enum:\n          - ASC\n          - DESC\n      - name: sortField\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AssetDto'\n        \"400\":\n          description: Request body was malformed\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiErrorDetail'\n    post:\n      tags:\n      - Asset\n      description: Creates a new asset together with a data address\n      operationId: createAsset\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AssetEntryDto'\n      responses:\n        \"200\":\n          description: Asset was created successfully\n        \"400\":\n          description: Request body was malformed\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiErrorDetail'\n        \"409\":\n          description: \"Could not create asset, because an asset with that ID already\\\n            \\ exists\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiErrorDetail'\n  /assets/{id}:\n    get:\n      tags:\n      - Asset\n      description: Gets an asset with the given ID\n      operationId: getAsset\n      parameters:\n      - name: id\n        in: path\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: The asset\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AssetDto'\n        \"400\":\n          description: \"Request was malformed, e.g. id was null\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiErrorDetail'\n        \"404\":\n          description: An asset with the given ID does not exist\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiErrorDetail'\n    delete:\n      tags:\n      - Asset\n      description: \"Removes an asset with the given ID if possible. Deleting an asset\\\n        \\ is only possible if that asset is not yet referenced by a contract agreement,\\\n        \\ in which case an error is returned. DANGER ZONE: Note that deleting assets\\\n        \\ can have unexpected results, especially for contract offers that have been\\\n        \\ sent out or ongoing or contract negotiations.\"\n      operationId: removeAsset\n      parameters:\n      - name: id\n        in: path\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: Asset was deleted successfully\n        \"400\":\n          description: \"Request was malformed, e.g. id was null\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiErrorDetail'\n        \"404\":\n          description: An asset with the given ID does not exist\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiErrorDetail'\n        \"409\":\n          description: \"The asset cannot be deleted, because it is referenced by a\\\n            \\ contract agreement\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiErrorDetail'\n  /catalog:\n    get:\n      tags:\n      - Catalog\n      operationId: getCatalog\n      parameters:\n      - name: providerUrl\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n      - name: offset\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: integer\n          format: int32\n      - name: limit\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: integer\n          format: int32\n      - name: filter\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n      - name: sort\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n          enum:\n          - ASC\n          - DESC\n      - name: sortField\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n      responses:\n        default:\n          description: Gets contract offers (=catalog) of a single connector\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Catalog'\n  /check/health:\n    get:\n      tags:\n      - Application Observability\n      description: Performs a liveness probe to determine whether the runtime is working\n        properly.\n      operationId: checkHealth\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/HealthStatus'\n  /check/liveness:\n    get:\n      tags:\n      - Application Observability\n      description: Performs a liveness probe to determine whether the runtime is working\n        properly.\n      operationId: getLiveness\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/HealthStatus'\n  /check/readiness:\n    get:\n      tags:\n      - Application Observability\n      description: Performs a readiness probe to determine whether the runtime is\n        able to accept requests.\n      operationId: getReadiness\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/HealthStatus'\n  /check/startup:\n    get:\n      tags:\n      - Application Observability\n      description: Performs a startup probe to determine whether the runtime has completed\n        startup.\n      operationId: getStartup\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/HealthStatus'\n  /instances:\n    get:\n      tags:\n      - Dataplane Selector\n      operationId: getAll\n      responses:\n        default:\n          description: default response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DataPlaneInstance'\n    post:\n      tags:\n      - Dataplane Selector\n      operationId: addEntry\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DataPlaneInstance'\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n  /instances/select:\n    post:\n      tags:\n      - Dataplane Selector\n      operationId: find\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SelectionRequest'\n      responses:\n        default:\n          description: default response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DataPlaneInstance'\n  /contractnegotiations:\n    get:\n      tags:\n      - Contract Negotiation\n      description: Returns all contract negotiations according to a query\n      operationId: getNegotiations\n      parameters:\n      - name: offset\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: integer\n          format: int32\n      - name: limit\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: integer\n          format: int32\n      - name: filter\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n      - name: sort\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n          enum:\n          - ASC\n          - DESC\n      - name: sortField\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ContractNegotiationDto'\n        \"400\":\n          description: Request was malformed\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiErrorDetail'\n    post:\n      tags:\n      - Contract Negotiation\n      description: \"Initiates a contract negotiation for a given offer and with the\\\n        \\ given counter part. Please note that successfully invoking this endpoint\\\n        \\ only means that the negotiation was initiated. Clients must poll the /{id}/state\\\n        \\ endpoint to track the state\"\n      operationId: initiateContractNegotiation\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NegotiationInitiateRequestDto'\n      responses:\n        \"200\":\n          description: The negotiation was successfully initiated. Returns the contract\n            negotiation ID\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NegotiationId'\n          links:\n            poll-state:\n              operationId: getNegotiationState\n              parameters:\n                id: $response.body#/id\n        \"400\":\n          description: Request body was malformed\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiErrorDetail'\n  /contractnegotiations/{id}:\n    get:\n      tags:\n      - Contract Negotiation\n      description: Gets an contract negotiation with the given ID\n      operationId: getNegotiation\n      parameters:\n      - name: id\n        in: path\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: The contract negotiation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ContractNegotiationDto'\n        \"400\":\n          description: \"Request was malformed, e.g. id was null\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiErrorDetail'\n        \"404\":\n          description: An contract negotiation with the given ID does not exist\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiErrorDetail'\n  /contractnegotiations/{id}/agreement:\n    get:\n      tags:\n      - Contract Negotiation\n      description: Gets a contract agreement for a contract negotiation with the given\n        ID\n      operationId: getAgreementForNegotiation\n      parameters:\n      - name: id\n        in: path\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: \"The contract agreement that is attached to the negotiation,\\\n            \\ or null\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ContractNegotiationDto'\n        \"400\":\n          description: \"Request was malformed, e.g. id was null\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiErrorDetail'\n        \"404\":\n          description: An contract negotiation with the given ID does not exist\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiErrorDetail'\n  /contractnegotiations/{id}/cancel:\n    post:\n      tags:\n      - Contract Negotiation\n      description: \"Requests aborting the contract negotiation. Due to the asynchronous\\\n        \\ nature of contract negotiations, a successful response only indicates that\\\n        \\ the request was successfully received. Clients must poll the /{id}/state\\\n        \\ endpoint to track the state.\"\n      operationId: cancelNegotiation\n      parameters:\n      - name: id\n        in: path\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: Request to cancel the Contract negotiation was successfully\n            received\n          links:\n            poll-state:\n              operationId: getNegotiationState\n        \"400\":\n          description: \"Request was malformed, e.g. id was null\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiErrorDetail'\n        \"404\":\n          description: A contract negotiation with the given ID does not exist\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiErrorDetail'\n  /contractnegotiations/{id}/decline:\n    post:\n      tags:\n      - Contract Negotiation\n      description: \"Requests cancelling the contract negotiation. Due to the asynchronous\\\n        \\ nature of contract negotiations, a successful response only indicates that\\\n        \\ the request was successfully received. Clients must poll the /{id}/state\\\n        \\ endpoint to track the state.\"\n      operationId: declineNegotiation\n      parameters:\n      - name: id\n        in: path\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: Request to decline the Contract negotiation was successfully\n            received\n          links:\n            poll-state:\n              operationId: getNegotiationState\n        \"400\":\n          description: \"Request was malformed, e.g. id was null\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiErrorDetail'\n        \"404\":\n          description: A contract negotiation with the given ID does not exist\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiErrorDetail'\n  /contractnegotiations/{id}/state:\n    get:\n      tags:\n      - Contract Negotiation\n      description: Gets the state of a contract negotiation with the given ID\n      operationId: getNegotiationState\n      parameters:\n      - name: id\n        in: path\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: The contract negotiation's state\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NegotiationState'\n        \"400\":\n          description: \"Request was malformed, e.g. id was null\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiErrorDetail'\n        \"404\":\n          description: An contract negotiation with the given ID does not exist\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiErrorDetail'\n  /token:\n    get:\n      tags:\n      - Token Validation\n      description: \"Checks that the provided token has been signed by the present\\\n        \\ entity and asserts its validity. If token is valid, then the data address\\\n        \\ contained in its claims is decrypted and returned back to the caller.\"\n      operationId: validate\n      parameters:\n      - name: Authorization\n        in: header\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: Token is valid\n        \"400\":\n          description: Request was malformed\n        \"403\":\n          description: Token is invalid\n  /callback/{processId}/deprovision:\n    post:\n      tags:\n      - HTTP Provisioner Webhook\n      operationId: callDeprovisionWebhook\n      parameters:\n      - name: processId\n        in: path\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DeprovisionedResource'\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n  /callback/{processId}/provision:\n    post:\n      tags:\n      - HTTP Provisioner Webhook\n      operationId: callProvisionWebhook\n      parameters:\n      - name: processId\n        in: path\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ProvisionerWebhookRequest'\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n  /contractdefinitions:\n    get:\n      tags:\n      - Contract Definition\n      description: Returns all contract definitions according to a query\n      operationId: getAllContractDefinitions\n      parameters:\n      - name: offset\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: integer\n          format: int32\n      - name: limit\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: integer\n          format: int32\n      - name: filter\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n      - name: sort\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n          enum:\n          - ASC\n          - DESC\n      - name: sortField\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ContractDefinitionDto'\n        \"400\":\n          description: Request was malformed\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiErrorDetail'\n    post:\n      tags:\n      - Contract Definition\n      description: Creates a new contract definition\n      operationId: createContractDefinition\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              $ref: '#/components/schemas/ContractDefinitionDto'\n      responses:\n        \"200\":\n          description: contract definition was created successfully\n        \"400\":\n          description: Request body was malformed\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiErrorDetail'\n        \"409\":\n          description: \"Could not create contract definition, because a contract definition\\\n            \\ with that ID already exists\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiErrorDetail'\n  /contractdefinitions/{id}:\n    get:\n      tags:\n      - Contract Definition\n      description: Gets an contract definition with the given ID\n      operationId: getContractDefinition\n      parameters:\n      - name: id\n        in: path\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: The contract definition\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ContractDefinitionDto'\n        \"400\":\n          description: \"Request was malformed, e.g. id was null\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiErrorDetail'\n        \"404\":\n          description: An contract agreement with the given ID does not exist\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiErrorDetail'\n    delete:\n      tags:\n      - Contract Definition\n      description: \"Removes a contract definition with the given ID if possible. DANGER\\\n        \\ ZONE: Note that deleting contract definitions can have unexpected results,\\\n        \\ especially for contract offers that have been sent out or ongoing or contract\\\n        \\ negotiations.\"\n      operationId: deleteContractDefinition\n      parameters:\n      - name: id\n        in: path\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: Contract definition was deleted successfully\n        \"400\":\n          description: \"Request was malformed, e.g. id was null\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiErrorDetail'\n        \"404\":\n          description: A contract definition with the given ID does not exist\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiErrorDetail'\n  /transfer:\n    post:\n      tags:\n      - Data Plane control API\n      description: Initiates a data transfer for the given request. The transfer will\n        be performed asynchronously.\n      operationId: initiateTransfer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DataFlowRequest'\n      responses:\n        \"200\":\n          description: Data transfer initiated\n        \"400\":\n          description: Failed to validate request\n  /transfer/{processId}:\n    get:\n      tags:\n      - Data Plane control API\n      description: Get the current state of a data transfer.\n      operationId: getTransferState\n      parameters:\n      - name: processId\n        in: path\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: Missing access token\n  /{any}:\n    get:\n      tags:\n      - Data Plane public API\n      description: Send `GET` data query to the Data Plane.\n      operationId: get\n      responses:\n        \"400\":\n          description: Missing access token\n        \"403\":\n          description: Access token is expired or invalid\n        \"500\":\n          description: Failed to transfer data\n    put:\n      tags:\n      - Data Plane public API\n      description: Send `PUT` data query to the Data Plane.\n      operationId: put\n      responses:\n        \"400\":\n          description: Missing access token\n        \"403\":\n          description: Access token is expired or invalid\n        \"500\":\n          description: Failed to transfer data\n    post:\n      tags:\n      - Data Plane public API\n      description: Send `POST` data query to the Data Plane.\n      operationId: post\n      responses:\n        \"400\":\n          description: Missing access token\n        \"403\":\n          description: Access token is expired or invalid\n        \"500\":\n          description: Failed to transfer data\n    delete:\n      tags:\n      - Data Plane public API\n      description: Send `DELETE` data query to the Data Plane.\n      operationId: delete\n      responses:\n        \"400\":\n          description: Missing access token\n        \"403\":\n          description: Access token is expired or invalid\n        \"500\":\n          description: Failed to transfer data\n    patch:\n      tags:\n      - Data Plane public API\n      description: Send `PATCH` data query to the Data Plane.\n      operationId: patch\n      responses:\n        \"400\":\n          description: Missing access token\n        \"403\":\n          description: Access token is expired or invalid\n        \"500\":\n          description: Failed to transfer data\n  /identity-hub/collections:\n    post:\n      tags:\n      - Identity Hub\n      operationId: write\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json:\n              schema:\n                type: string\n  /identity-hub/collections-commit:\n    post:\n      tags:\n      - Identity Hub\n      operationId: writeCommit\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              additionalProperties:\n                type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n  /identity-hub/query-commits:\n    post:\n      tags:\n      - Identity Hub\n      operationId: queryCommits\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json:\n              schema:\n                type: string\n  /identity-hub/query-objects:\n    post:\n      tags:\n      - Identity Hub\n      operationId: queryObjects\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json:\n              schema:\n                type: string\n  /federatedcatalog:\n    post:\n      operationId: getCachedCatalog\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FederatedCatalogCacheQuery'\n      responses:\n        default:\n          description: default response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ContractOffer'\n  /policydefinitions:\n    get:\n      tags:\n      - Policy\n      description: Returns all policy definitions according to a query\n      operationId: getAllPolicies\n      parameters:\n      - name: offset\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: integer\n          format: int32\n      - name: limit\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: integer\n          format: int32\n      - name: filter\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n      - name: sort\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n          enum:\n          - ASC\n          - DESC\n      - name: sortField\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/PolicyDefinition'\n        \"400\":\n          description: Request was malformed\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiErrorDetail'\n    post:\n      tags:\n      - Policy\n      description: Creates a new policy definition\n      operationId: createPolicy\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PolicyDefinition'\n      responses:\n        \"200\":\n          description: policy definition was created successfully\n        \"400\":\n          description: Request body was malformed\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiErrorDetail'\n        \"409\":\n          description: \"Could not create policy definition, because a contract definition\\\n            \\ with that ID already exists\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiErrorDetail'\n  /policydefinitions/{id}:\n    get:\n      tags:\n      - Policy\n      description: Gets a policy definition with the given ID\n      operationId: getPolicy\n      parameters:\n      - name: id\n        in: path\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: The  policy definition\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PolicyDefinition'\n        \"400\":\n          description: \"Request was malformed, e.g. id was null\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiErrorDetail'\n        \"404\":\n          description: An  policy definition with the given ID does not exist\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiErrorDetail'\n    delete:\n      tags:\n      - Policy\n      description: \"Removes a policy definition with the given ID if possible. Deleting\\\n        \\ a policy definition is only possible if that policy definition is not yet\\\n        \\ referenced by a contract definition, in which case an error is returned.\\\n        \\ DANGER ZONE: Note that deleting policy definitions can have unexpected results,\\\n        \\ do this at your own risk!\"\n      operationId: deletePolicy\n      parameters:\n      - name: id\n        in: path\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: Policy definition was deleted successfully\n        \"400\":\n          description: \"Request was malformed, e.g. id was null\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiErrorDetail'\n        \"404\":\n          description: An policy definition with the given ID does not exist\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiErrorDetail'\n        \"409\":\n          description: \"The policy definition cannot be deleted, because it is referenced\\\n            \\ by a contract definition\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiErrorDetail'\n  /contractagreements:\n    get:\n      tags:\n      - Contract Agreement\n      description: Gets all contract agreements according to a particular query\n      operationId: getAllAgreements\n      parameters:\n      - name: offset\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: integer\n          format: int32\n      - name: limit\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: integer\n          format: int32\n      - name: filter\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n      - name: sort\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n          enum:\n          - ASC\n          - DESC\n      - name: sortField\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ContractAgreementDto'\n        \"400\":\n          description: Request body was malformed\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiErrorDetail'\n  /contractagreements/{id}:\n    get:\n      tags:\n      - Contract Agreement\n      description: Gets an contract agreement with the given ID\n      operationId: getContractAgreement\n      parameters:\n      - name: id\n        in: path\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: The contract agreement\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ContractAgreementDto'\n        \"400\":\n          description: \"Request was malformed, e.g. id was null\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiErrorDetail'\n        \"404\":\n          description: An contract agreement with the given ID does not exist\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiErrorDetail'\n  /transferprocess:\n    get:\n      tags:\n      - Transfer Process\n      description: Returns all transfer process according to a query\n      operationId: getAllTransferProcesses\n      parameters:\n      - name: offset\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: integer\n          format: int32\n      - name: limit\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: integer\n          format: int32\n      - name: filter\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n      - name: sort\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n          enum:\n          - ASC\n          - DESC\n      - name: sortField\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/TransferProcessDto'\n        \"400\":\n          description: Request was malformed\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiErrorDetail'\n    post:\n      tags:\n      - Transfer Process\n      description: \"Initiates a data transfer with the given parameters. Please note\\\n        \\ that successfully invoking this endpoint only means that the transfer was\\\n        \\ initiated. Clients must poll the /{id}/state endpoint to track the state\"\n      operationId: initiateTransfer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TransferRequestDto'\n      responses:\n        \"200\":\n          description: The transfer was successfully initiated. Returns the transfer\n            process ID\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransferId'\n          links:\n            poll-state:\n              operationId: getTransferProcessState\n              parameters:\n                id: $response.body#/id\n        \"400\":\n          description: Request body was malformed\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiErrorDetail'\n  /transferprocess/{id}:\n    get:\n      tags:\n      - Transfer Process\n      description: Gets an transfer process with the given ID\n      operationId: getTransferProcess\n      parameters:\n      - name: id\n        in: path\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: The transfer process\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransferProcessDto'\n        \"400\":\n          description: \"Request was malformed, e.g. id was null\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiErrorDetail'\n        \"404\":\n          description: A transfer process with the given ID does not exist\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiErrorDetail'\n  /transferprocess/{id}/cancel:\n    post:\n      tags:\n      - Transfer Process\n      description: \"Requests aborting the transfer process. Due to the asynchronous\\\n        \\ nature of transfers, a successful response only indicates that the request\\\n        \\ was successfully received. Clients must poll the /{id}/state endpoint to\\\n        \\ track the state.\"\n      operationId: cancelTransferProcess\n      parameters:\n      - name: id\n        in: path\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: Request to cancel the transfer process was successfully received\n          links:\n            poll-state:\n              operationId: getTransferProcessState\n        \"400\":\n          description: \"Request was malformed, e.g. id was null\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiErrorDetail'\n        \"404\":\n          description: A contract negotiation with the given ID does not exist\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiErrorDetail'\n  /transferprocess/{id}/deprovision:\n    post:\n      tags:\n      - Transfer Process\n      description: \"Requests the deprovisioning of resources associated with a transfer\\\n        \\ process. Due to the asynchronous nature of transfers, a successful response\\\n        \\ only indicates that the request was successfully received. This may take\\\n        \\ a long time, so clients must poll the /{id}/state endpoint to track the\\\n        \\ state.\"\n      operationId: deprovisionTransferProcess\n      parameters:\n      - name: id\n        in: path\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: Request to deprovision the transfer process was successfully\n            received\n          links:\n            poll-state:\n              operationId: getTransferProcessState\n        \"400\":\n          description: \"Request was malformed, e.g. id was null\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiErrorDetail'\n        \"404\":\n          description: A contract negotiation with the given ID does not exist\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiErrorDetail'\n  /transferprocess/{id}/state:\n    get:\n      tags:\n      - Transfer Process\n      description: Gets the state of a transfer process with the given ID\n      operationId: getTransferProcessState\n      parameters:\n      - name: id\n        in: path\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: The  transfer process's state\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransferState'\n        \"400\":\n          description: \"Request was malformed, e.g. id was null\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiErrorDetail'\n        \"404\":\n          description: An  transfer process with the given ID does not exist\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiErrorDetail'\ncomponents:\n  schemas:\n    Action:\n      type: object\n      properties:\n        constraint:\n          $ref: '#/components/schemas/Constraint'\n        includedIn:\n          type: string\n        type:\n          type: string\n    ApiErrorDetail:\n      type: object\n      properties:\n        invalidValue:\n          type: string\n        message:\n          type: string\n        path:\n          type: string\n        type:\n          type: string\n    Asset:\n      type: object\n      properties:\n        properties:\n          type: object\n          additionalProperties:\n            type: object\n    AssetDto:\n      required:\n      - properties\n      type: object\n      properties:\n        properties:\n          type: object\n          additionalProperties:\n            type: object\n    AssetEntryDto:\n      required:\n      - asset\n      - dataAddress\n      type: object\n      properties:\n        asset:\n          $ref: '#/components/schemas/AssetDto'\n        dataAddress:\n          $ref: '#/components/schemas/DataAddressDto'\n    Catalog:\n      type: object\n      properties:\n        contractOffers:\n          type: array\n          items:\n            $ref: '#/components/schemas/ContractOffer'\n        id:\n          type: string\n    Constraint:\n      required:\n      - edctype\n      type: object\n      properties:\n        edctype:\n          type: string\n      discriminator:\n        propertyName: edctype\n    ContractAgreementDto:\n      required:\n      - assetId\n      - consumerAgentId\n      - id\n      - policy\n      - providerAgentId\n      type: object\n      properties:\n        assetId:\n          type: string\n        consumerAgentId:\n          type: string\n        contractEndDate:\n          type: integer\n          format: int64\n        contractSigningDate:\n          type: integer\n          format: int64\n        contractStartDate:\n          type: integer\n          format: int64\n        id:\n          type: string\n        policy:\n          $ref: '#/components/schemas/Policy'\n        providerAgentId:\n          type: string\n    ContractDefinitionDto:\n      required:\n      - accessPolicyId\n      - contractPolicyId\n      - criteria\n      - id\n      type: object\n      properties:\n        accessPolicyId:\n          type: string\n        contractPolicyId:\n          type: string\n        criteria:\n          type: array\n          items:\n            $ref: '#/components/schemas/Criterion'\n        id:\n          type: string\n    ContractNegotiationDto:\n      type: object\n      properties:\n        contractAgreementId:\n          type: string\n        counterPartyAddress:\n          type: string\n        errorDetail:\n          type: string\n        id:\n          type: string\n        protocol:\n          type: string\n        state:\n          type: string\n        type:\n          type: string\n          enum:\n          - CONSUMER\n          - PROVIDER\n    ContractOffer:\n      type: object\n      properties:\n        asset:\n          $ref: '#/components/schemas/Asset'\n        assetId:\n          type: string\n        consumer:\n          type: string\n          format: uri\n        contractEnd:\n          type: string\n          format: date-time\n        contractStart:\n          type: string\n          format: date-time\n        id:\n          type: string\n        offerEnd:\n          type: string\n          format: date-time\n        offerStart:\n          type: string\n          format: date-time\n        policy:\n          $ref: '#/components/schemas/Policy'\n        provider:\n          type: string\n          format: uri\n    ContractOfferDescription:\n      required:\n      - assetId\n      - offerId\n      - policy\n      type: object\n      properties:\n        assetId:\n          type: string\n        offerId:\n          type: string\n        policy:\n          $ref: '#/components/schemas/Policy'\n    Criterion:\n      type: object\n      properties:\n        operandLeft:\n          type: object\n        operandRight:\n          type: object\n        operator:\n          type: string\n    DataAddress:\n      type: object\n      properties:\n        properties:\n          type: object\n          additionalProperties:\n            type: string\n    DataAddressDto:\n      required:\n      - properties\n      type: object\n      properties:\n        properties:\n          type: object\n          additionalProperties:\n            type: string\n    DataAddressInformationDto:\n      type: object\n      properties:\n        properties:\n          type: object\n          additionalProperties:\n            type: string\n    DataFlowRequest:\n      type: object\n      properties:\n        destinationDataAddress:\n          $ref: '#/components/schemas/DataAddress'\n        id:\n          type: string\n        processId:\n          type: string\n        properties:\n          type: object\n          additionalProperties:\n            type: string\n        sourceDataAddress:\n          $ref: '#/components/schemas/DataAddress'\n        traceContext:\n          type: object\n          additionalProperties:\n            type: string\n        trackable:\n          type: boolean\n    DataPlaneInstance:\n      type: object\n      properties:\n        id:\n          type: string\n        lastActive:\n          type: integer\n          format: int64\n        properties:\n          type: object\n          additionalProperties:\n            type: object\n        turnCount:\n          type: integer\n          format: int32\n        url:\n          type: string\n          format: url\n    DataRequestDto:\n      type: object\n      properties:\n        assetId:\n          type: string\n        connectorId:\n          type: string\n        contractId:\n          type: string\n    DeprovisionedResource:\n      type: object\n      properties:\n        error:\n          type: boolean\n        errorMessage:\n          type: string\n        inProcess:\n          type: boolean\n        provisionedResourceId:\n          type: string\n    Duty:\n      type: object\n      properties:\n        action:\n          $ref: '#/components/schemas/Action'\n        assignee:\n          type: string\n        assigner:\n          type: string\n        consequence:\n          $ref: '#/components/schemas/Duty'\n        constraints:\n          type: array\n          items:\n            $ref: '#/components/schemas/Constraint'\n        parentPermission:\n          $ref: '#/components/schemas/Permission'\n        target:\n          type: string\n        uid:\n          type: string\n    Failure:\n      type: object\n      properties:\n        messages:\n          type: array\n          items:\n            type: string\n    FederatedCatalogCacheQuery:\n      type: object\n      properties:\n        criteria:\n          type: array\n          items:\n            $ref: '#/components/schemas/Criterion'\n    HealthCheckResult:\n      type: object\n      properties:\n        component:\n          type: string\n        failure:\n          $ref: '#/components/schemas/Failure'\n        isHealthy:\n          type: boolean\n    HealthStatus:\n      type: object\n      properties:\n        componentResults:\n          type: array\n          items:\n            $ref: '#/components/schemas/HealthCheckResult'\n        isSystemHealthy:\n          type: boolean\n    NegotiationId:\n      type: object\n      properties:\n        id:\n          type: string\n    NegotiationInitiateRequestDto:\n      required:\n      - connectorAddress\n      - connectorId\n      - offer\n      - protocol\n      type: object\n      properties:\n        connectorAddress:\n          type: string\n        connectorId:\n          type: string\n        offer:\n          $ref: '#/components/schemas/ContractOfferDescription'\n        protocol:\n          type: string\n    NegotiationState:\n      type: object\n      properties:\n        state:\n          type: string\n    Permission:\n      type: object\n      properties:\n        action:\n          $ref: '#/components/schemas/Action'\n        assignee:\n          type: string\n        assigner:\n          type: string\n        constraints:\n          type: array\n          items:\n            $ref: '#/components/schemas/Constraint'\n        duties:\n          type: array\n          items:\n            $ref: '#/components/schemas/Duty'\n        target:\n          type: string\n        uid:\n          type: string\n    Policy:\n      type: object\n      properties:\n        '@type':\n          type: string\n          enum:\n          - SET\n          - OFFER\n          - CONTRACT\n        assignee:\n          type: string\n        assigner:\n          type: string\n        extensibleProperties:\n          type: object\n          additionalProperties:\n            type: object\n        inheritsFrom:\n          type: string\n        obligations:\n          type: array\n          items:\n            $ref: '#/components/schemas/Duty'\n        permissions:\n          type: array\n          items:\n            $ref: '#/components/schemas/Permission'\n        prohibitions:\n          type: array\n          items:\n            $ref: '#/components/schemas/Prohibition'\n        target:\n          type: string\n    PolicyDefinition:\n      type: object\n      properties:\n        policy:\n          $ref: '#/components/schemas/Policy'\n        uid:\n          type: string\n    Prohibition:\n      type: object\n      properties:\n        action:\n          $ref: '#/components/schemas/Action'\n        assignee:\n          type: string\n        assigner:\n          type: string\n        constraints:\n          type: array\n          items:\n            $ref: '#/components/schemas/Constraint'\n        target:\n          type: string\n        uid:\n          type: string\n    ProvisionerWebhookRequest:\n      required:\n      - apiKeyJwt\n      - assetId\n      - contentDataAddress\n      - resourceDefinitionId\n      - resourceName\n      type: object\n      properties:\n        apiKeyJwt:\n          type: string\n        assetId:\n          type: string\n        contentDataAddress:\n          $ref: '#/components/schemas/DataAddress'\n        hasToken:\n          type: boolean\n        resourceDefinitionId:\n          type: string\n        resourceName:\n          type: string\n    SelectionRequest:\n      type: object\n      properties:\n        destination:\n          $ref: '#/components/schemas/DataAddress'\n        source:\n          $ref: '#/components/schemas/DataAddress'\n        strategy:\n          type: string\n    TransferId:\n      type: object\n      properties:\n        id:\n          type: string\n    TransferProcessDto:\n      type: object\n      properties:\n        createdTimestamp:\n          type: integer\n          format: int64\n        dataDestination:\n          $ref: '#/components/schemas/DataAddressInformationDto'\n        dataRequest:\n          $ref: '#/components/schemas/DataRequestDto'\n        errorDetail:\n          type: string\n        id:\n          type: string\n        state:\n          type: string\n        stateTimestamp:\n          type: integer\n          format: int64\n        type:\n          type: string\n    TransferRequestDto:\n      required:\n      - assetId\n      - connectorAddress\n      - connectorId\n      - contractId\n      - dataDestination\n      - protocol\n      - transferType\n      type: object\n      properties:\n        assetId:\n          type: string\n        connectorAddress:\n          type: string\n        connectorId:\n          type: string\n        contractId:\n          type: string\n        dataDestination:\n          $ref: '#/components/schemas/DataAddress'\n        id:\n          type: string\n        managedResources:\n          type: boolean\n        properties:\n          type: object\n          additionalProperties:\n            type: string\n        protocol:\n          type: string\n        transferType:\n          $ref: '#/components/schemas/TransferType'\n    TransferState:\n      type: object\n      properties:\n        state:\n          type: string\n    TransferType:\n      type: object\n      properties:\n        contentType:\n          type: string\n        isFinite:\n          type: boolean\n",
			"canonicalURL": "/github.com/eclipse-dataspaceconnector/DataSpaceConnector@fc0705696023d56173d959f561aa377e9f69dc45/-/blob/resources/openapi/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/eclipse-dataspaceconnector/DataSpaceConnector/blob/fc0705696023d56173d959f561aa377e9f69dc45/resources/openapi/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/transferprocess\": at 1:35357: post: duplicate operationId: \"initiateTransfer\""
}