{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/haiku/haikudepotserver"
		},
		"file": {
			"name": "user.yaml",
			"size": 0,
			"path": "haikudepotserver-api2/src/main/resources/api2/user.yaml",
			"byteSize": 8627,
			"content": "# Copyright 2021, Andrew Lindesay\n# Distributed under the terms of the MIT License.\n\nopenapi: 3.0.3\ninfo:\n  title: HDS User API\n  version: \"2.0\"\n  description: \u003e\n    This API defines operations that can be undertaken around users.\ntags:\n  - name: user\npaths:\n\n\n  /__api/v2/user/create-user:\n    description: \u003e\n      This method will create a user in the system.  It is identified by a username\n      and authenticated by a password.  The password is supplied in the clear.  This\n      method will return not found in the case that the referenced 'natural language'\n      is not able to be found.\n    post:\n      tags:\n        - user\n      operationId: createUser\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/createUserRequestEnvelope\"\n      responses:\n        200:\n          description: \u003e\n            The result of having created the user.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/createUserResponseEnvelope\"\n\n\n  /__api/v2/user/get-user-usage-conditions:\n    description: \u003e\n      This method will return details for the user usage agreement that is\n      identifier in the request.\n    post:\n      tags:\n        - user\n      operationId: getUserUsageConditions\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/getUserUsageConditionsRequestEnvelope\"\n      responses:\n        200:\n          description: \u003e\n            The data detailing the user.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/getUserUsageConditionsResponseEnvelope\"\n\n\n  /__api/v2/user/get-user:\n    description: \u003e\n      This method will get the user identified by the nickname in the request object.\n      If no user was able to be found then a not-found error is returned.\n    post:\n      tags:\n        - user\n      operationId: getUser\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/getUserRequestEnvelope\"\n      responses:\n        200:\n          description: \u003e\n            The data detailing the user.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/getUserResponseEnvelope\"\n\n\n  /__api/v2/user/authenticate-user:\n    description: \u003e\n      This endpoint will allow a client to authenticate against the server.  If this is\n      successful then it will return a json web token that can be used for further API\n      calls for some period of time.  If it is unsuccessful then it will return null.\n    post:\n      tags:\n        - user\n      operationId: authenticateUser\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/authenticateUserRequestEnvelope\"\n      responses:\n        200:\n          description: \u003e\n            The authentication result.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/authenticateUserResponseEnvelope\"\n\n\n  /__api/v2/user/agree-user-usage-conditions:\n    description: \u003e\n      This method will allow the user to, at any time, agree to the terms\n      and conditions.  This may be required for example when the terms change\n      and the user has agreed to some older terms and conditions.\n    post:\n      tags:\n        - user\n      operationId: agreeUserUsageConditions\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/agreeUserUsageConditionsRequestEnvelope\"\n      responses:\n        200:\n          description: \u003e\n            The agree to user usage conditions response\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/agreeUserUsageConditionsResponseEnvelope\"\n\n\ncomponents:\n  schemas:\n\n\n    agreeUserUsageConditionsRequestEnvelope:\n      type: object\n      properties:\n        nickname:\n          type: string\n        userUsageConditionsCode:\n          type: string\n    agreeUserUsageConditionsResponseEnvelope:\n      type: object\n      properties:\n        result:\n          $ref: \"#/components/schemas/agreeUserUsageConditionsResult\"\n        error:\n          $ref: \"./error.yaml#/components/schemas/error\"\n    agreeUserUsageConditionsResult:\n      type: object\n\n\n    createUserRequestEnvelope:\n      type: object\n      properties:\n        nickname:\n          type: string\n        passwordClear:\n          type: string\n        email:\n          type: string\n        captchaToken:\n          type: string\n          description: \u003e\n            The captcha token is obtained from an earlier invocation to the\n            captcha API to get a captcha.  This identifies the captcha for\n            which the captcha response should correlate.\n        captchaResponse:\n          type: string\n          description: \u003e\n            This is the human-supplied text string that matches the image that would have been\n            provided with the captcha that is identified by the cpatchaToken.\n        naturalLanguageCode:\n          type: string\n          description: \u003e\n            This code comes from the \"get all natural languages\" endpoint.\n        userUsageConditionsCode:\n          type: string\n    createUserResponseEnvelope:\n      type: object\n      properties:\n        result:\n          $ref: \"#/components/schemas/createUserResult\"\n        error:\n          $ref: \"./error.yaml#/components/schemas/error\"\n    createUserResult:\n      type: object\n\n\n    getUserUsageConditionsRequestEnvelope:\n      type: object\n      properties:\n        code:\n          description: \u003e\n            If this value is NULL then it signifies that the latest\n            user usage conditions should be provided.\n          type: string\n    getUserUsageConditionsResponseEnvelope:\n      type: object\n      properties:\n        result:\n          $ref: \"#/components/schemas/getUserUsageConditionsResult\"\n        error:\n          $ref: \"./error.yaml#/components/schemas/error\"\n    getUserUsageConditionsResult:\n      type: object\n      properties:\n        code:\n          type: string\n        minimumAge:\n          type: integer\n          format: int32\n\n    getUserRequestEnvelope:\n      type: object\n      properties:\n        nickname:\n          type: string\n    getUserResponseEnvelope:\n      type: object\n      properties:\n        result:\n          $ref: \"#/components/schemas/getUserResult\"\n        error:\n          $ref: \"./error.yaml#/components/schemas/error\"\n    getUserResult:\n      type: object\n      properties:\n        nickname:\n          type: string\n        email:\n          type: string\n        active:\n          type: boolean\n        isRoot:\n          type: boolean\n        createTimestamp:\n          type: integer\n          format: int64\n        modifyTimestamp:\n          type: integer\n          format: int64\n        naturalLanguageCode:\n          type: string\n        lastAuthenticationTimestamp:\n          type: integer\n          format: int64\n        userUsageConditionsAgreement:\n          description: \u003e\n            This relates to the user's required understanding of the terms of\n            use.\n          type: object\n          properties:\n            timestampAgreed:\n              type: integer\n              format: int64\n            userUsageConditionsCode:\n              description: \u003e\n                The code of the conditions agreed to.\n              type: string\n            isLatest:\n              description: \u003e\n                Are the terms that the user agreed to current with the most\n                recent wording.\n              type: boolean\n\n\n    authenticateUserRequestEnvelope:\n      type: object\n      properties:\n        nickname:\n          type: string\n        passwordClear:\n          type: string\n    authenticateUserResponseEnvelope:\n      type: object\n      properties:\n        result:\n          $ref: \"#/components/schemas/authenticateUserResult\"\n        error:\n          $ref: \"./error.yaml#/components/schemas/error\"\n    authenticateUserResult:\n      type: object\n      properties:\n        token:\n          type: string\n          description: \u003e\n            In the case of a successful authentication, this field will be non-null and will contain a standard\n            formatted json-web-token.  If the authentication had failed then this token will be null.\n\n"
		}
	},
	"Error": "parse: parse spec: paths: /__api/v2/user/create-user: post: operation \"createUser\": responses: 200: content: \"application/json\": schema: parse schema: reference \"#/components/schemas/createUserResponseEnvelope\": parse schema: error: parse schema: reference \"./error.yaml#/components/schemas/error\": resolve reference \"./error.yaml#/components/schemas/error\": invalid schema reference \"./error.yaml#/components/schemas/error\""
}