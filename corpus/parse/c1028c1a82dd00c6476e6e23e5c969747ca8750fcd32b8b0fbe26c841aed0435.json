{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/wso2/product-apim-tooling"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "import-export-cli/cmd/testdata/MyProduct-1.0.0-malformed/Definitions/swagger.yaml",
			"byteSize": 7921,
			"content": "openapi: 3.0.1\ninfo:\n  title: MyProduct\n  version: 1.0.0\nservers:\n -\n  url: /\nsecurity:\n -\n  default: []\npaths:\n  /pet:\n    put:\n      tags:\n       - pet\n      summary: Update an existing pet\n      operationId: updatePet\n      requestBody:\n        description: Pet object that needs to be added to the store\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Pet'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/Pet'\n        required: true\n      responses:\n        \"400\":\n          description: Invalid ID supplied\n          content: {}\n        \"404\":\n          description: Pet not found\n          content: {}\n        \"405\":\n          description: Validation exception\n          content: {}\n      security:\n       -\n        petstore_auth:\n         - write:pets\n         - read:pets\n       -\n        default:\n         - write:pets\n         - read:pets\n      x-auth-type: Application & Application User\n      x-throttling-tier: Unlimited\n      x-codegen-request-body-name: body\n  /pet/findByStatus:\n    get:\n      tags:\n       - pet\n      summary: Finds Pets by status\n      description: Multiple status values can be provided with comma separated strings\n      operationId: findPetsByStatus\n      parameters:\n       -\n        name: status\n        in: query\n        description: Status values that need to be considered for filter\n        required: true\n        style: form\n        explode: true\n        schema:\n          type: array\n          items:\n            type: string\n            enum:\n             - available\n             - pending\n             - sold\n            default: available\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n        \"400\":\n          description: Invalid status value\n          content: {}\n      security:\n       -\n        petstore_auth:\n         - write:pets\n         - read:pets\n       -\n        default:\n         - write:pets\n         - read:pets\n      x-auth-type: Application & Application User\n      x-throttling-tier: Unlimited\n  /order:\n    post:\n      description: Create a new Order\n      requestBody:\n        $ref: '#/components/requestBodies/Order'\n      responses:\n        \"201\":\n          description: Created. Successful response with the newly created object as entity inthe body.Location header contains URL of newly created entity.\n          headers:\n            Location:\n              description: The URL of the newly created resource.\n              style: simple\n              explode: false\n              schema:\n                type: string\n            Content-Type:\n              description: The content type of the body.\n              style: simple\n              explode: false\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Order'\n        \"400\":\n          description: Bad Request. Invalid request or validation error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"415\":\n          description: Unsupported Media Type. The entity of the request was in a not supported format.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n       -\n        default: []\n      x-auth-type: Application & Application User\n      x-throttling-tier: Unlimited\n  /menu:\n    get:\n      description: Return a list of available menu items\n      responses:\n        \"200\":\n          description: OK. List of APIs is returned.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/MenuItem'\n        \"406\":\n          description: Not Acceptable. The requested media type is not supported\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n       -\n        default: []\n      x-auth-type: Application & Application User\n      x-throttling-tier: Unlimited\ncomponents:\n  schemas:\n    Order:\n      title: Pizza Order\n      required:\n       - orderId\n      properties:\n        customerName:\n          type: string\n        delivered:\n          type: boolean\n        address:\n          type: string\n        pizzaType:\n          type: string\n        creditCardNumber:\n          type: string\n        quantity:\n          type: number\n        orderId:\n          type: string\n    Category:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      xml:\n        name: Category\n    Tag:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      xml:\n        name: Tag\n    Pet:\n      required:\n       - name\n       - photoUrls\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        category:\n          $ref: '#/components/schemas/Category'\n        name:\n          type: string\n          example: doggie\n        photoUrls:\n          type: array\n          xml:\n            wrapped: true\n          items:\n            type: string\n            xml:\n              name: photoUrl\n        tags:\n          type: array\n          xml:\n            wrapped: true\n          items:\n            $ref: '#/components/schemas/Tag'\n        status:\n          type: string\n          description: pet status in the store\n          enum:\n           - available\n           - pending\n           - sold\n      xml:\n        name: Pet\n    ErrorListItem:\n      title: Description of individual errors that may have occurred during a request.\n      required:\n       - code\n       - message\n      properties:\n        message:\n          type: string\n          description: Description about individual errors occurred\n        code:\n          type: integer\n          format: int64\n    Error:\n      title: Error object returned with 4XX HTTP status\n      required:\n       - code\n       - message\n      properties:\n        message:\n          type: string\n          description: Error message.\n        error:\n          type: array\n          description: If there are more than one error list them out. Ex. list out validation errors by each field.\n          items:\n            $ref: '#/components/schemas/ErrorListItem'\n        description:\n          type: string\n          description: A detail description about the error message.\n        code:\n          type: integer\n          format: int64\n        moreInfo:\n          type: string\n          description: Preferably an url with more details about the error.\n    MenuItem:\n      title: Pizza menu Item\n      required:\n       - name\n      properties:\n        price:\n          type: string\n        description:\n          type: string\n        name:\n          type: string\n        image:\n          type: string\n  requestBodies:\n    Order:\n      description: Order object that needs to be added\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Order'\n      required: true\n  securitySchemes:\n    default:\n      type: oauth2\n      flows:\n        implicit:\n          authorizationUrl: https://test.com\n          scopes:\n            read:pets: read your pets\n            write:pets: modify pets in your account\n          x-scopes-bindings:\n            write:pets: \"\"\n            read:pets: \"\"\n",
			"canonicalURL": "/github.com/wso2/product-apim-tooling@4d849906c450c817cebbb9c5d0b8c59242211a00/-/blob/import-export-cli/cmd/testdata/MyProduct-1.0.0-malformed/Definitions/swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/wso2/product-apim-tooling/blob/4d849906c450c817cebbb9c5d0b8c59242211a00/import-export-cli/cmd/testdata/MyProduct-1.0.0-malformed/Definitions/swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/pet\": at 1:4262: put: operation \"updatePet\": at 1:4269: security: unknown security schema \"petstore_auth\""
}