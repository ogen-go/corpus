{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/FraunhoferISST/diva"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "core/services/asset-management/apiDoc/openapi.yml",
			"byteSize": 25846,
			"content": "openapi: 3.0.0\ninfo:\n  description: \"Asset Management Service is responsible for all CRUD operations on assets\"\n  version: 1.0.0\n  title: Asset Management API\nservers:\n  - url: http://localhost:3002\ntags:\n  - name: assets\n    description: Operations about assets\n  - name: entites\n    description: Operation about asset linked entites\n  - name: assetImages\n    description: Operations on assets image. Only PNG and JPEG supported.  \npaths:\n  /assets:\n    parameters:\n      - $ref: \"#/components/parameters/actoridParam\"\n    post:\n      tags:\n        - assets\n      summary: Create assets\n      description: Create new assets with the provided data. The attributes of the asset may vary depending on the\n        `assetType`. The request body must containt at least all the attributes defined in the schema below. This opperations\n        supports bulk mode so that multiple asset can be created with one request\n      operationId: createAsset\n      requestBody:\n        $ref: \"#/components/requestBodies/AssetCreate\"\n      responses:\n        201:\n          $ref: \"#/components/responses/AssetCreateSuccess\"\n        207:\n          $ref: \"#/components/responses/Multi\"\n        406:\n          $ref: \"#/components/responses/InvalidDataError\"\n        409:\n          $ref: \"#/components/responses/AssetAlreadyExistsError\"\n        500:\n          $ref: \"#/components/responses/UnexpectedError\"\n    get:\n      tags:\n        - assets\n      summary: Get list of assets\n      description: To get the list of assets you can specify projection with `fields` paramter and set the\n        page size with `pageSize`. Default page size is **30**. The next page can be fatched by using `cursor`\n        parameter. The cursor to the next page will be included in the response body.\n      operationId: getAssets\n      parameters:\n        - name: fields\n          in: query\n          description: Coma separated projection fields\n          example: \"title,assetType,description\"\n          required: false\n          explode: true\n          allowReserved: true\n          schema:\n            type: string\n        - name: cursor\n          in: query\n          description: Pagination cursor\n          required: false\n          explode: true\n          example: \"aHVpXzYwMTkzZmJlZTM0NmZhODVkNTE4YzJlYg==\"\n          schema:\n            type: string\n        - name: pageSize\n          in: query\n          description: Page size\n          required: false\n          explode: true\n          example: 10\n          schema:\n            type: integer\n            format: int32\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  collectionSize:\n                    type: integer\n                  collection:\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/Asset\"\n                  cursor:\n                    type: string\n                  total:\n                    type: number\n        \"500\":\n          $ref: \"#/components/responses/UnexpectedError\"\n  \"/assets/{id}\":\n    parameters:\n      - $ref: \"#/components/parameters/actoridParam\"\n    get:\n      tags:\n        - assets\n      summary: Get asset by id\n      description: Projection can be specified with `fields` paramter\n      operationId: getAssetById\n      parameters:\n        - name: id\n          in: path\n          description: The id of the asset to fetch\n          required: true\n          schema:\n            type: string\n        - name: fields\n          in: query\n          description: Coma separated projection fields\n          example: \"title,assetType,description\"\n          required: false\n          explode: true\n          allowReserved: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/AssetResponse\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n        \"500\":\n          $ref: \"#/components/responses/UnexpectedError\"\n    put:\n      tags:\n        - assets\n      summary: Update asset\n      description: Use this method, if you want to replace complete asset. New asset is created if no asset with\n        the provided `id` exists. Note that on this operation **all** fields are replaced.\n      operationId: updateAsset\n      parameters:\n        - name: id\n          in: path\n          description: id of the asset\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: \"#/components/requestBodies/AssetUpdate\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SuccessEmpty\"\n        \"201\":\n          description: Asset created\n        \"406\":\n          $ref: \"#/components/responses/InvalidDataError\"\n        \"409\":\n          $ref: \"#/components/responses/AssetAlreadyExistsError\"\n        \"500\":\n          $ref: \"#/components/responses/UnexpectedError\"\n    patch:\n      tags:\n        - assets\n      summary: Patch asset\n      description: Use this method to do a partial update of the asset. In the request provided fields\n        will be merged with the existing asset object.\n      operationId: patchAsset\n      parameters:\n        - name: id\n          in: path\n          description: id of the asset\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: \"#/components/requestBodies/AssetsPatch\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SuccessEmpty\"\n        \"406\":\n          $ref: \"#/components/responses/InvalidDataError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n        \"409\":\n          $ref: \"#/components/responses/AssetAlreadyExistsError\"\n        \"500\":\n          $ref: \"#/components/responses/UnexpectedError\"\n    post:\n      tags:\n        - assets\n      summary: Patch asset (alias for PATCH)\n      description: Use this method to do a partial update of the asset. In the request provided fields\n        will be merged with the existing asset object.\n      operationId: patchAsset\n      parameters:\n        - name: id\n          in: path\n          description: id of the asset\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: \"#/components/requestBodies/AssetsPatch\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SuccessEmpty\"\n        \"406\":\n          $ref: \"#/components/responses/InvalidDataError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n        \"409\":\n          $ref: \"#/components/responses/AssetAlreadyExistsError\"\n        \"500\":\n          $ref: \"#/components/responses/UnexpectedError\"\n    delete:\n      tags:\n        - assets\n      summary: Delete asset\n      description: Delete existing asset by id\n      operationId: deleteAsset\n      parameters:\n        - name: id\n          in: path\n          description: id of the asset\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SuccessEmpty\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n        \"500\":\n          $ref: \"#/components/responses/UnexpectedError\"\n  \"/assets/{id}/entities\":\n    parameters:\n      - $ref: \"#/components/parameters/actoridParam\"\n    put:\n      tags:\n        - entites\n      summary: Link entity to asset\n      description: Link an entity with the asset by entity id. The operation supports bulk request to link multiple entites\n        in one request\n      operationId: linkEntity\n      parameters:\n        - name: id\n          in: path\n          description: id of the asset\n          required: true\n          schema:\n            type: string\n            example: \"asset:uuid:4600ea84-485a-49b3-8f15-85fc5ce2e0f9\"\n            pattern: \"^asset:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$\"\n      requestBody:\n        $ref: \"#/components/requestBodies/LinkEntity\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/Success\"\n        \"207\":\n          $ref: \"#/components/responses/Multi\"\n        \"406\":\n          $ref: \"#/components/responses/InvalidDataError\"\n        \"409\":\n          $ref: \"#/components/responses/AssetAlreadyExistsError\"\n        \"5XX\":\n          $ref: \"#/components/responses/UnexpectedError\"\n    get:\n      tags:\n        - entites\n      summary: Get entities associated with the given asset\n      description: Retuns a list of entities `id`'s linked with the give asset. You have the possibility to paginate\n        throug the list with `pagesSize` and `cursor` query parameters.\n      operationId: linkEntity\n      parameters:\n        - name: id\n          in: path\n          description: id of the asset\n          required: true\n          schema:\n            type: string\n            example: \"asset:uuid:4600ea84-485a-49b3-8f15-85fc5ce2e0f9\"\n            pattern: \"^asset:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$\"\n        - name: cursor\n          in: query\n          description: Pagination cursor\n          required: false\n          explode: true\n          example: \"aHVpXzYwMTkzZmJlZTM0NmZhODVkNTE4YzJlYg==\"\n          schema:\n            type: string\n        - name: pageSize\n          in: query\n          description: Page size\n          required: false\n          explode: true\n          example: 10\n          schema:\n            type: integer\n            format: int32\n      responses:\n        \"200\":\n          description: Asset data response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n                  example: \"resource:uuid:4600ea84-485a-49b3-8f15-85fc5ce2e0f9\"\n                  pattern: \"^(asset|user|resource):uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n        \"5XX\":\n          $ref: \"#/components/responses/UnexpectedError\"\n  \"/assets/{id}/entities/{entityId}\":\n    parameters:\n      - $ref: \"#/components/parameters/actoridParam\"\n    delete:\n      tags:\n        - entities\n      summary: Unlikn entity from asset\n      description: Unlikn an entity from the asset by entity id\n      operationId: unliknAsset\n      parameters:\n        - name: id\n          in: path\n          description: id of the asset\n          required: true\n          schema:\n            type: string\n            example: \"asset:uuid:4600ea84-485a-49b3-8f15-85fc5ce2e0f9\"\n            pattern: \"^asset:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$\"\n        - name: entityId\n          in: path\n          description: id of the entity\n          required: true\n          schema:\n            example: \"resource:uuid:4600ea84-485a-49b3-8f15-85fc5ce2e0f9\"\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/Success\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n        \"500\":\n          $ref: \"#/components/responses/UnexpectedError\"\n  /assetImages:\n    parameters:\n      - $ref: \"#/components/parameters/actoridParam\"\n    post:\n      tags:\n        - assetImages\n      summary: Add asset image\n      description: Creates uploaded asset image. The operation returns image `id`. Note that you have to set asset `imageId`\n        to the uploaded image `id` manually.\n      operationId: addAssetImage\n      requestBody:\n        $ref: \"#/components/requestBodies/Image\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/Success\"\n        \"400\":\n          $ref: \"#/components/responses/RequestValidationError\"\n        \"406\":\n          $ref: \"#/components/responses/InvalidDataError\"\n        \"500\":\n          $ref: \"#/components/responses/UnexpectedError\"\n  /assetImages/{id}:\n    get:\n      tags:\n        - assetImages\n      summary: Get asset image\n      description: Get uploaded asset profile image by image ID. You can obtain the image ID from the\n        corresponding asset document\n      operationId: getAssetImage\n      parameters:\n        - name: id\n          in: path\n          description: ID of the asset image\n          required: true\n          explode: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Success\n          content:\n            image/png:\n              schema:\n                description: Asset image as PNG\n                type: string\n                format: binary\n            image/jpeg:\n              schema:\n                description: Asset image as JPG\n                type: string\n                format: binary\n        \"400\":\n          $ref: \"#/components/responses/RequestValidationError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n        \"500\":\n          $ref: \"#/components/responses/UnexpectedError\"\n    put:\n      tags:\n        - assetImages\n      summary: Update asset image\n      description: Upload and update asset image by image ID. Please note that in fact the old image will be deleted and a\n        new one will be created. This method acts as an alias for POST and DELETE methods and simplifies this for the API assets.\n        Furthermore, this means that the new image gets **new** ID. The new ID is returned in the response\n      operationId: updateAssetImage\n      parameters:\n        - name: id\n          in: path\n          description: ID of the assets image\n          required: true\n          explode: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/actoridParam\"\n      requestBody:\n        $ref: \"#/components/requestBodies/Image\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/Success\"\n        \"400\":\n          $ref: \"#/components/responses/RequestValidationError\"\n        \"406\":\n          $ref: \"#/components/responses/InvalidDataError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n        \"500\":\n          $ref: \"#/components/responses/UnexpectedError\"\n    delete:\n      tags:\n        - assetImages\n      summary: Delete asset image\n      description: Delete uploaded asset image by image ID\n      operationId: deleteAssetImage\n      parameters:\n        - name: id\n          in: path\n          description: ID of the assets image\n          required: true\n          explode: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/actoridParam\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SuccessEmpty\"\n        \"400\":\n          $ref: \"#/components/responses/RequestValidationError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n        \"500\":\n          $ref: \"#/components/responses/UnexpectedError\"        \n\ncomponents:\n  requestBodies:\n    AssetCreate:\n      required: true\n      content:\n        application/json:\n          schema:\n            oneOf:\n              - $ref: \"#/components/schemas/AssetCreate\"\n              - $ref: \"#/components/schemas/AssetCreateBulk\"\n    LinkEntity:\n      required: true\n      content:\n        application/json:\n          schema:\n            oneOf:\n              - $ref: \"#/components/schemas/LinkEntity\"\n              - $ref: \"#/components/schemas/LinkEntityBulk\"\n    AssetUpdate:\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/AssetCreate\"\n    AssetsPatch:\n      required: true\n      content:\n        application/json:\n          schema:\n            title: Patch body\n            description: The body can be any attribute defined in the asset schema. The supplied attributes\n              overwrite the existing\n            type: object\n            minProperties: 1\n    Image:\n      required: true\n      content:\n        multipart/form-data:\n          schema:\n            type: object\n            additionalProperties: false\n            required:\n              - image\n            properties:\n              image:\n                type: string\n                format: binary\n          encoding:\n            image:\n              contentType: image/png, image/jpeg        \n  schemas:\n    AssetCreate:\n      description: Minimal required attributes for asset creation\n      type: object\n      required:\n        - assetType\n        - title\n        - entities\n      properties:\n        title:\n          type: string\n          title: Title\n          description: The title of the entity\n          minLength: 1\n          pattern: \"^(.*)$\"\n        assetType:\n          type: string\n          title: Asset Type\n          description: The general type of the asset\n          minLength: 1\n          enum:\n            - generic\n            - urbanPulse\n        entities:\n          type: array\n          title: Asset linked entities\n          description: The array of entites id's linked with the asset\n          uniqueItems: true\n          items:\n            type: string\n            pattern: \"^.+:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$\"\n            example: \"resource:uuid:4600ea84-485a-49b3-8f15-85fc5ce2e0f9\"\n        uniqueFingerprint:\n          type: string\n          title: Unique asset identifier\n          description: Global unique asset identifier from title hash\n          example: g2jh3g4j2g34jh23jh423jh4f2oöklkcghjfajsfklj3294urjk\n\n    AssetCreateBulk:\n      type: array\n      title: Asset create bulk request\n      description: Array of assets to create multiple asset in one bulk request\n      uniqueItems: true\n      minItems: 1\n      maxItems: 500\n      items:\n        $ref: \"#/components/schemas/AssetCreate\"\n    LinkEntity:\n      description: Entity id of the entity to link\n      type: object\n      required:\n        - entityId\n      properties:\n        entityId:\n          type: string\n          example: \"resource:uuid:4600ea84-485a-49b3-8f15-85fc5ce2e0f9\"\n          pattern: \"^(asset|user|resource):uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$\"\n\n    LinkEntityBulk:\n      type: array\n      title: Link entites bulk request\n      description: Array of entites id's to link multiple with an asset in one bulk request\n      uniqueItems: true\n      minItems: 1\n      maxItems: 500\n      items:\n        $ref: \"#/components/schemas/LinkEntity\"\n\n    Entity:\n      title: General Entity Data\n      type: object\n      required:\n        - title\n        - id\n        - creatorId\n        - created\n        - modified\n        - entityType\n      additionalProperties: true\n      properties:\n        id:\n          type: string\n          title: Unique ID\n          description: An unique ID of the entity\n          example: \"entity:uuid:4600ea84-485a-49b3-8f15-85fc5ce2e0f9\"\n          format: uri\n          pattern: \"^asset:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$\"\n        created:\n          type: string\n          title: Creation date\n          description: Creation date of the entity\n          example: '2018-11-08T13:55:45Z'\n          format: date-time\n        creatorId:\n          type: string\n          title: Creator of the asset\n          description: The user or the service that created the asset\n          example: \"user:uuid:4600ea84-485a-49b3-8f15-85fc5ce2e0f9\"\n          \"pattern\": \"^(user|service):uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$\"\n        modified:\n          type: string\n          title: Modification date\n          description: Timestamp of the last change of the data\n          example: '2018-11-08T13:55:45Z'\n          format: date-time\n        title:\n          type: string\n          title: Title\n          description: The title of the entity\n          pattern: \"^(.*)$\"\n        entityType:\n          type: string\n          title: Asset Type\n          description: The general type of the asset\n          enum:\n            - asset\n    Asset:\n      allOf:\n        - $ref: \"#/components/schemas/Entity\"\n        - type: object\n          title: General Asset Data\n          description: General Asset schema\n          additionalProperties: true\n          required:\n            - assetType\n          properties:\n            assetType:\n              type: string\n              title: Asset Type\n              description: The general type of the asset\n              enum:\n                - generic\n                - urbanPulse\n            entities:\n              type: array\n              title: Asset linked entities\n              description: The array of entites id's linked with the asset\n              uniqueItems: true\n              items:\n                type: string\n                pattern: \"^.+:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$\"\n                example: \"resource:uuid:4600ea84-485a-49b3-8f15-85fc5ce2e0f9\"\n            uniqueFingerprint:\n              type: string\n              title: Unique asset identifier\n              description: Global unique asset identifier from title hash\n              example: g2jh3g4j2g34jh23jh423jh4f2oöklkcghjfajsfklj3294urjk\n\n    Error:\n      type: object\n      title: Operation error\n      description: Error that can occure on request processing\n      required:\n        - type\n        - message\n        - code\n      properties:\n        type:\n          title: Error type\n          description: Futher error type information\n          type: string\n        message:\n          title: Error message\n          description: Details about error\n          type: string\n        code:\n          title: Error code\n          description: HTTP error code\n          type: number\n          format: int32\n          example: 409\n        errors:\n          title: Errors\n          description: More error details that are reference in most case specification or schema validation errors\n          type: array\n          items:\n            type: object\n    UserId:\n      title: User id\n      description: Unique user identifier\n      type: string\n      example: \"user:uuid:asdsad4d1fcb08-b894-4bdf-b662-0f105d597189\"\n      pattern: \"^user:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$\"\n\n  responses:\n    Success:\n      description: Succesful\n      content:\n        text/html:\n          schema:\n            type: string\n    SuccessEmpty:\n      description: Succesful operation without return data\n    Multi:\n      description: Multi-status response in case of a bulk request\n      content:\n        application/json:\n          schema:\n            title: Multi-status response\n            description: Indicates the status for operation for each asset in a bulk request\n            type: array\n            items:\n              type: object\n              required:\n                - statusCode\n                - uniqueFingerprint\n              properties:\n                statusCode:\n                  title: Status Code\n                  description: Status Code for single asset operation. Can be one of the codes that is returned for\n                    opeartion on a single asset\n                  type: integer\n                  example: 201\n                uniqueFingerprint:\n                  type: string\n                  title: Unique indentifier\n                  description: Global Unique indentifier as described in asset schema\n                data:\n                  title: Operation data\n                  description: Data as a result of a single asset operation\n                  oneOf:\n                    - type: string\n                    - type: object\n                error:\n                  $ref: \"#/components/schemas/Error\"\n\n    AssetCreateSuccess:\n      description: Succesful asset creation retruns created asset id\n      content:\n        text/html:\n          schema:\n            type: string\n            title: Created asset id\n            description: An unique id of the processed entity\n            example: \"asset:uuid:4600ea84-485a-49b3-8f15-85fc5ce2e0f9\"\n            format: uri\n            pattern: \"^asset:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$\"\n    AssetResponse:\n      description: Asset data response\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Asset\"\n\n    UnexpectedError:\n      description: Internal error\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n    NotFoundError:\n      description: Entity not found\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n    InvalidDataError:\n      description: Invalid data supplied\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n    AssetAlreadyExistsError:\n      description: Asset with the given `uniqueFingerprint` already exists\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n    RequestValidationError:\n      description: Request violates API Specification\n      content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Error\"        \n  parameters:\n    actoridParam:\n      in: header\n      description: The id of the origin that produces action/message. Can be a user or service\n      name: x-actorid\n      schema:\n        type: string\n        minLength: 1\n        pattern: \"^(user|service):uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$\"\n      required: true\n    userIdParam:\n      in: path\n      description: Existing identifier of the user that should be affected by the operation\n      name: id\n      schema:\n        $ref: \"#/components/schemas/UserId\"\n      required: true\n"
		}
	},
	"Error": "parse: parse spec: paths: /assets/{id}: patch: duplicate operationId: \"patchAsset\""
}