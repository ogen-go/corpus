{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/scarf-sh/tie"
		},
		"file": {
			"name": "test1.yaml",
			"size": 0,
			"path": "test/golden/test1.yaml",
			"byteSize": 4418,
			"content": "openapi: \"3.0.0\"\ninfo:\n  version: 1.0.0\n  title: simple_violation_bool\n  license:\n    name: MIT\n  description: |\n    Simple violation in simple_violation_bool module\nservers:\n  - url: https://swagger.io/specification/\npaths:\n  /users/{id}/create/{name}:\n    parameters:\n      - in: path\n        name: id\n        description: Uniquely identifies a user\n        schema: \n          type: integer\n        required: true\n      - in: path\n        description: Name of a user\n        name: name\n        schema: \n          type: string\n        required: true\n      - in: query\n        required: true\n        name: page\n        schema: \n          type: integer\n      - in: query\n        name: offset\n        schema: \n          type: integer\n    get:\n      operationId: getUser\n      responses:\n        '404':\n          description: xxxx\n        '200':\n          description: xxxx\n          content: \n            application/json:\n              schema:      # Request body contents\n                $ref: \"#/components/schemas/Vehicle\"\n    post:\n      operationId: createUser\n      summary: Adds a new user\n      requestBody:\n        description: Some nice request body\n        content:\n          application/json:\n            schema:      # Request body contents\n              properties: \n                nise: \n                  $ref: \"#/components/schemas/NISE\"\n      responses:\n        '200':\n          description: xxxx\n          content: \n            application/json:\n              schema:\n                properties: \n                  name: \n                    type: string              \ncomponents:\n  schemas:\n    Vehicle:\n      type: object\n      required:\n        - id\n        - type\n      properties:\n        id:\n          type: integer\n        type:\n          type: string\n        model:\n          type: string\n        name:\n          type: string\n        \n    Car:\n      allOf:\n        - $ref: \"#/components/schemas/Vehicle\"\n        - type: object\n          properties:\n            type:\n              enum:\n                - car\n            has_4_wheel_drive:\n              type: boolean\n    \n    Plane:\n      anyOf:\n        - $ref: \"#/components/schemas/Vehicle\"\n        - type: object\n          properties:\n            type:\n              enum:\n                - plane\n            car: \n              $ref: \"#/components/schemas/Car\"              \n            has_reactor:\n              type: boolean\n            nb_passengers:\n              type: integer\n        \n    Error:\n      required:\n        - code\n        - message\n      properties:\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string\n  \n    PackageId: \n      oneOf: \n        - $ref: \"#/components/schemas/Plane\"\n        - $ref: \"#/components/schemas/Car\"\n        - type: integer            \n        - required:\n            - name\n            - sub\n            - enum\n          properties: \n            name: \n              type: string\n            age:\n              type: integer\n            enum: \n              type: string\n              enum: \n                - A\n                - B\n            list: \n              type: array\n              items:\n                properties: \n                  cool: \n                    type: string\n              properties: \n                subProperty:\n                  type: string\n    NISE:\n      type: object\n      title: The Root Schema\n      required:\n        - description\n        - id\n        - name\n        - ports\n      properties:\n        description:\n          $ref: \"#/components/schemas/PackageId\"\n        id:\n          type: integer\n          title: The Id Schema\n          default: 0\n          format: int64\n          schema:\n            $ref: './violation_schema.yaml#/NISE'\n        name:\n          type: string\n          title: The Name Schema\n          schema:\n            $ref: './violation_schema.yaml#/NISE'\n        ports:\n          type: array\n          title: The Ports Schema\n          schema:\n            $ref: './violation_schema.yaml#/NISE'\n          items:\n            type: integer\n            title: The items Schema\n            default: 0\n            schema:\n              $ref: './violation_schema.yaml#/NISE'\n        value:\n          type: object\n          title: The Value Schema\n          properties: \n            name: \n              type: string\n          schema:\n            $ref: './violation_schema.yaml#/NISE'\n\n\n",
			"canonicalURL": "/github.com/scarf-sh/tie@b11089494536a44d2658de5db0b89ad58aba8976/-/blob/test/golden/test1.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/scarf-sh/tie/blob/b11089494536a44d2658de5db0b89ad58aba8976/test/golden/test1.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"NISE\": parse schema: property \"description\": parse schema: parse schema: parse schema: property \"list\": parse schema: at 1:1333: array cannot contain properties"
}