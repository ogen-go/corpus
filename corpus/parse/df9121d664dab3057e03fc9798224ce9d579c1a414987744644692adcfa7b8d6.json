{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/MetOffice/forest"
		},
		"file": {
			"name": "app-stack.yaml",
			"size": 0,
			"path": "stack/app-stack.yaml",
			"byteSize": 7923,
			"content": "Parameters:\n\n  KeyName:\n    Description: Name of an existing EC2 KeyPair to enable SSH access to an instance\n    Type: AWS::EC2::KeyPair::KeyName\n\n  ServiceOwner:\n    Description: The owner of the service which costs are attributed to\n    Type: String\n\n  ServiceCode:\n    Description: The code attached to the service which costs are attributed to\n    Type: String\n\n  ServiceName:\n    Description: The name of the service which costs are attributed to\n    Type: String\n\n  ProjectName:\n    Description: The name of the project\n    Default: forest\n    Type: String\n    AllowedPattern: \"[a-z0-9]+\"\n    ConstraintDescription: Name must be in lower case or numeric\n\n  ArtifactS3Bucket:\n    Description: Bucket used by CodePipeline to store code\n    Type: String\n\n  ArtifactS3Key:\n    Description: Object key used by CodePipeline to store code\n    Type: String\n\n  UniqueEnvName:\n    Type: String\n    Default: prototype\n    Description: Unique environment name\n\n  CollaborationBucketName:\n    Type: String\n    Default: met-office-rmed-collab-stack\n    Description: Collaboration bucket name\n\n\nResources:\n  HelloBucket:\n    Type: AWS::S3::Bucket\n    Properties:\n      AccessControl: PublicReadWrite\n      BucketName: !Ref CollaborationBucketName\n      Tags:\n        - Key: ServiceOwner\n          Value: !Ref ServiceOwner\n        - Key: ServiceCode\n          Value: !Ref ServiceCode\n        - Key: ServiceName\n          Value: !Ref ServiceName\n\n  HelloWorldLambdaExecutionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: !Sub \"${ProjectName}-${UniqueEnvName}-${AWS::Region}-lambda-role\"\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n            Action:\n              - sts:AssumeRole\n      Path: /\n      Policies:\n        - PolicyName: !Sub \"${ProjectName}-${UniqueEnvName}-${AWS::Region}-lambda-policy\"\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Effect: Allow\n                Action:\n                  - logs:CreateLogStream\n                  - logs:PutLogEvents\n                  - logs:CreateLogEvents\n                  - s3:PutObject\n                Resource:\n                  - !Sub \"arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ProjectName}-${UniqueEnvName}-${AWS::Region}-lambda\"\n                  - !Sub \"arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ProjectName}-${UniqueEnvName}-${AWS::Region}-lambda:*\"\n                  - !Sub \"arn:aws:s3:::${CollaborationBucketName}\"\n                  - !Sub \"arn:aws:s3:::${CollaborationBucketName}/*\"\n\n  HelloWorldLambda:\n    Type: AWS::Lambda::Function\n    Properties:\n      FunctionName: !Sub \"${ProjectName}-${UniqueEnvName}-${AWS::Region}-lambda\"\n      Handler: stack/src/presign.handler\n      Runtime: python3.7\n      MemorySize: 128\n      Timeout: 30\n      Role: !GetAtt HelloWorldLambdaExecutionRole.Arn\n      Code:\n        S3Bucket: !Sub \"${ArtifactS3Bucket}\"\n        S3Key: !Sub \"${ArtifactS3Key}\"\n      Environment:\n        Variables:\n          BUCKET: !Ref CollaborationBucketName\n      Tags:\n        - Key: Name\n          Value: !Sub \"${ProjectName}-${UniqueEnvName}-${AWS::Region}-lambda\"\n        - Key: ServiceOwner\n          Value: !Ref ServiceOwner\n        - Key: ServiceCode\n          Value: !Ref ServiceCode\n        - Key: ServiceName\n          Value: !Ref ServiceName\n\n  HelloWorldLambdaPermission:\n    Type: AWS::Lambda::Permission\n    Properties:\n      Action: lambda:invokeFunction\n      FunctionName: !GetAtt HelloWorldLambda.Arn\n      Principal: apigateway.amazonaws.com\n      SourceArn: !Sub \"arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${APIGateway}/*\"\n\n  APIGateway:\n    Type: AWS::ApiGateway::RestApi\n    Properties:\n      Name: !Sub \"${ProjectName}-${UniqueEnvName}-${AWS::Region}-api-gateway\"\n      Description: Pre-signed URL API\n      # The Body is the OPEN API (Swagger) Standard.\n      # http://editor.swagger.io/\n      Body:\n        components:\n          schemas:\n            Presign:\n              type: \"object\"\n            Multipart:\n              type: string\n              enum:\n                - start\n                - stop\n        info:\n          description: Simple pre-signed URL API with Lambda integration\n          title: Pre-signed URL API\n          version: 0.1.0\n        openapi: 3.0.1\n        paths:\n          /hello:\n            get:\n              description: Hello, world!\n              parameters:\n                - name: \"action\"\n                  in: query\n                  schema:\n                    $ref: \"#components/schemas/Multipart\"\n              responses:\n                \"200\":\n                  description: Boiler-plate to understand OpenAPI syntax\n                  content:\n                    application/json:\n                      schema:\n                        type: string\n              security:\n              - api_key: []\n              x-amazon-apigateway-integration:\n                type: \"aws_proxy\"\n                httpMethod: \"POST\"\n                contentHandling: \"CONVERT_TO_TEXT\"\n                uri: !Sub \"arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ProjectName}-${UniqueEnvName}-${AWS::Region}-lambda/invocations\"\n                responses:\n                  default:\n                    statusCode: \"200\"\n                requestTemplates:\n                  application/json: |\n                    {\n                      \"body\": \"$input.json('$')\",\n                      \"params\": \"$input.params()\"\n                    }\n\n          /presign:\n            get:\n              description: Generate pre-signed S3 URL\n              parameters:\n              - name: \"file\"\n                in: query\n                required: true\n                schema:\n                  type: string\n              responses:\n                \"200\":\n                  description: Successful pre-signed URL generation\n                  content:\n                    application/json:\n                      schema:\n                        type: string\n              security:\n              - api_key: []\n              x-amazon-apigateway-integration:\n                type: \"aws_proxy\"\n                httpMethod: \"POST\"\n                contentHandling: \"CONVERT_TO_TEXT\"\n                uri: !Sub \"arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ProjectName}-${UniqueEnvName}-${AWS::Region}-lambda/invocations\"\n                responses:\n                  default:\n                    statusCode: \"200\"\n                requestTemplates:\n                  application/json: |\n                    {\n                      \"body\": \"$input.json('$')\",\n                      \"params\": \"$input.params()\"\n                    }\n        components:\n          securitySchemes:\n            api_key:\n              type: \"apiKey\"\n              name: \"x-api-key\"\n              in: \"header\"\n\n\n  # The API Gateway Deployment after the gateway is done.\n  # NOTE: A manual re-deploy is needed to get REST API changes\n  APIGatewayDeployment:\n    Type: AWS::ApiGateway::Deployment\n    DependsOn: [HelloWorldLambdaPermission]\n    Properties:\n      RestApiId: !Ref APIGateway\n      StageDescription:\n        #### Uncomment to enable caching ###\n        # CacheClusterEnabled: true\n        # CacheClusterSize: '0.5'\n        # CacheTtlInSeconds: 60\n        # CachingEnabled: true\n        MetricsEnabled: true\n        Tags:\n          - Key: Environment\n            Value: !Ref UniqueEnvName\n          - Key: ServiceCode\n            Value: !Ref ServiceCode\n          - Key: ServiceName\n            Value: !Ref ServiceName\n          - Key: ServiceOwner\n            Value: !Ref ServiceOwner\n      StageName: v1\n",
			"canonicalURL": "/github.com/MetOffice/forest@6712dc8b62228e850ad37eae378a86efa71c7bdb/-/blob/stack/app-stack.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/MetOffice/forest/blob/6712dc8b62228e850ad37eae378a86efa71c7bdb/stack/app-stack.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse version: at stack/app-stack.yaml:1:1: invalid version: invalid major version: strconv.Atoi: parsing \"\": invalid syntax"
}