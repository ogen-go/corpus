{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/drogue-iot/drogue-cloud"
		},
		"file": {
			"name": "index.yaml",
			"size": 0,
			"path": "console-backend/api/index.yaml",
			"byteSize": 30199,
			"content": "openapi: \"3.0.0\"\ninfo:\n  title: Drogue Cloud API\n  version: \"0.10\"\n  contact:\n    url: https://drogue.io\n  description: |\n    This describes the Drogue IoT cloud management API. It is intended to be used to manage and configure cloud side\n    aspects of Drogue IoT cloud.\n\n    For device-facing endpoints, see the different protocol endpoints documentation.\n\nservers:\n  - url: \"http://localhost:8080\"\n\nexternalDocs:\n  description: Drogue Cloud Documentation\n  url: https://book.drogue.io\n\nsecurity:\n  - api_key: [ ]\n\ntags:\n  - name: Access Token\n    description: Manage personal access tokens to authenticate with Drogue Cloud.\n  - name: Registry\n    description: Manage application and devices in the registry.\n  - name: Application administration\n    description: Manage applications members and authorizations.\n  - name: User administration\n    description: Manage users\n  - name: Command & Control\n    description: Send commands to devices and check the results.\n  - name: System information\n    description: Get information of the system.\n\npaths:\n\n  #\n  # Console\n  #\n\n  \"/.well-known/drogue-version\":\n    get:\n      description: \"Get version\"\n      tags:\n        - System information\n      responses:\n        \"200\":\n          description: \"Version response\"\n          content:\n            \"application/json\":\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: string\n                    enum: [ \"true\" ]\n                required:\n                  - success\n\n  \"/.well-known/drogue-endpoints\":\n    get:\n      description: \"Get publicly known endpoints\"\n      tags:\n        - System information\n      responses:\n        \"200\":\n          description: Public endpoints\n          content:\n            \"application/json\":\n              schema:\n                type: object\n\n  \"/api/tokens/v1alpha1\":\n    get:\n      description: List access tokens for this user.\n      tags:\n        - Access Token\n      responses:\n        \"200\":\n          description: All access tokens for this user.\n          content:\n            \"application/json\":\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    created:\n                      type: string\n                      format: date-time\n                    prefix:\n                      type: string\n    post:\n      description: Create a new access tokens for this user.\n      tags:\n        - Access Token\n      parameters:\n        - name: description\n          required: false\n          in: query\n          description: A description to attach to the token entry.\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: A new access token was created.\n          content:\n            \"application/json\":\n              schema:\n                type: object\n                properties:\n                  key:\n                    type: string\n                  prefix:\n                    type: string\n                required:\n                  - key\n                  - prefix\n  \"/api/tokens/v1alpha1/{prefix}\":\n    delete:\n      description: Delete an access token by prefix.\n      tags:\n        - Access Token\n      parameters:\n        - name: prefix\n          required: true\n          in: path\n          description: The prefix of the access token to delete.\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: |\n            Successfully deleted the token.\n\n            If the access token didn't exist, still 204 will be returned.\n\n\n  #\n  # ## Registry\n  #\n\n  #\n  # ### Apps\n  #\n\n  /api/registry/v1alpha1/apps:\n    get:\n      tags:\n        - Registry\n      description: Return all the applications the user has access to\n      parameters:\n        - $ref: '#/components/parameters/Labels'\n        - $ref: '#/components/parameters/Limit'\n        - $ref: '#/components/parameters/Offset'\n      responses:\n        200:\n          description: A list of applications.\n        401:\n          description: Unauthorized.\n    post:\n      tags:\n        - Registry\n      description: create new application.\n      requestBody:\n        description: The data section of the application to add\n        content:\n          'application/json':\n            schema:\n              $ref: '#/components/schemas/App'\n      responses:\n        201:\n          description: If the application is created\n        409:\n          description: If the application id is already used.\n\n  /api/registry/v1alpha1/apps/{application}:\n    parameters:\n      - $ref: '#/components/parameters/ApplicationName'\n    get:\n      tags:\n        - Registry\n      description: Return application details.\n      responses:\n        200:\n          description: The data of the application\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/App'\n        404:\n          description: If the requested application does not exist or if the user has no access to it.\n    put:\n      tags:\n        - Registry\n      description: update existing app\n      requestBody:\n        description: The data of the application to update\n        required: true\n        content:\n          'application/json':\n            schema:\n              $ref: '#/components/schemas/App'\n      responses:\n        204:\n          description: If the application is updated\n        404:\n          description: If the requested application does not exist or if the user has no access to it.\n    delete:\n      tags:\n        - Registry\n      description: Delete existing application\n      parameters:\n        - $ref: '#/components/parameters/Uid'\n        - $ref: '#/components/parameters/ResourceVersion'\n      responses:\n        204:\n          description: If the application is deleted\n        404:\n          description: If the requested application does not exist or if the user has not access to it.\n    patch:\n      tags:\n        - Registry\n      description: \"FUTURE USE: Patch existing app\"\n      deprecated: false\n      parameters:\n        - $ref: '#/components/parameters/Uid'\n        - $ref: '#/components/parameters/ResourceVersion'\n      requestBody:\n        description: The JSON patch to apply\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schema/Patch'\n            example:\n              [\n                { \"op\": \"replace\", \"path\": \"/baz\", \"value\": \"boo\" },\n                { \"op\": \"add\", \"path\": \"/hello\", \"value\": [ \"world\" ] },\n                { \"op\": \"remove\", \"path\": \"/foo\" }\n              ]\n      responses:\n        204:\n          description: If the app is updated\n        404:\n          description: If requested apps do not exits or if the user has not access to them.\n\n\n  #\n  # ### Devices\n  #\n\n  /api/registry/v1alpha1/apps/{application}/devices:\n    parameters:\n      - $ref: '#/components/parameters/ApplicationName'\n    get:\n      tags:\n        - Registry\n      description: Return all the devices of the application.\n      parameters:\n        - $ref: '#/components/parameters/Labels'\n        - $ref: '#/components/parameters/Limit'\n        - $ref: '#/components/parameters/Offset'\n      responses:\n        200:\n          description: A list of devices.\n        401:\n          description: Unauthorized.\n    post:\n      tags:\n        - Registry\n      description: Create a new device.\n      requestBody:\n        description: The device object to add.\n        content:\n          'application/json':\n            schema:\n              $ref: '#/components/schemas/Device'\n      responses:\n        201:\n          description: If the device is created.\n        409:\n          description: If the device id is already used.\n\n  /api/registry/v1alpha1/apps/{application}/devices/{device}:\n    parameters:\n      - $ref: '#/components/parameters/ApplicationName'\n      - $ref: '#/components/parameters/DeviceName'\n    get:\n      tags:\n        - Registry\n      description: Return device details.\n      responses:\n        200:\n          description: The data of the device\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/Device'\n        404:\n          description: If requested device does not exist or if the user has no access to it.\n    put:\n      tags:\n        - Registry\n      description: update existing device\n      requestBody:\n        description: The data object of the device to update\n        required: true\n        content:\n          'application/json':\n            schema:\n              $ref: '#/components/schemas/Device'\n      responses:\n        204:\n          description: If the device is updated\n        404:\n          description: If requested device does not exist or if the user has no access to it.\n    delete:\n      tags:\n        - Registry\n      description: Delete existing device\n      parameters:\n        - $ref: '#/components/parameters/Uid'\n        - $ref: '#/components/parameters/ResourceVersion'\n      responses:\n        204:\n          description: If the device is deleted\n        404:\n          description: If requested device does not exist or if the user has no access to it.\n    patch:\n      tags:\n        - Registry\n      description: \"FUTURE USE: Patch existing device\"\n      deprecated: false\n      parameters:\n        - $ref: '#/components/parameters/Uid'\n        - $ref: '#/components/parameters/ResourceVersion'\n      requestBody:\n        description: The JSON patch to apply\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Patch'\n            example:\n              [\n                { \"op\": \"replace\", \"path\": \"/baz\", \"value\": \"boo\" },\n                { \"op\": \"add\", \"path\": \"/hello\", \"value\": [ \"world\" ] },\n                { \"op\": \"remove\", \"path\": \"/foo\" }\n              ]\n      responses:\n        204:\n          description: If the device is updated\n        404:\n          description: If requested device does not exist or if the user has no access to it.\n\n  #\n  # ## Admin\n  #\n\n  /api/admin/v1alpha1/user/whoami:\n    get:\n      tags:\n        - User administration\n      description: Get information about the current user.\n      responses:\n        200:\n          description: Information about the current user.\n          content:\n            'application/json':\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: string\n                    description: |\n                      The ID of the current user.\n\n                      NOTE: This ID may be different to the name of the user.\n                required:\n                  - id\n        403:\n          description: In case the user is not logged in.\n\n  /api/admin/v1alpha1/apps/{application}/transfer-ownership:\n    parameters:\n      - $ref: '#/components/parameters/ApplicationName'\n    put:\n      tags:\n        - Application administration\n      description: Initiate the process to transfer the ownership.\n      requestBody:\n        content:\n          'application/json':\n            schema:\n              type: object\n              properties:\n                newUser:\n                  type: string\n              required:\n                - newUser\n      responses:\n        202:\n          description: Transfer process is initiated.\n        404:\n          description: If the requested application does not exist or if the user has no access to it.\n    get:\n      tags:\n        - Application administration\n      description: Retrieve state of the application transfer\n      responses:\n        200:\n          description: An transfer is pending for this application.\n          content:\n            'application/json':\n              schema:\n                type: object\n                properties:\n                  newUser:\n                    type: string\n                required:\n                  - newUser\n        204:\n          description: There is no current pending transfer for this application.\n        404:\n          description:  The application does not exist, or the user does not have access to the information.\n\n    delete:\n      tags:\n        - Application administration\n      description: Cancel an ownership transfer.\n      responses:\n        204:\n          description: The transfer was successfully canceled.\n        404:\n          description: |\n            The user has no access to the resource.\n\n            This is also the case, when the transfer was already completed successfully.\n\n  /api/admin/v1alpha1/apps/{application}/accept-ownership:\n    parameters:\n      - $ref: '#/components/parameters/ApplicationName'\n    put:\n      tags:\n        - Application administration\n      description: Accept an application as new owner.\n      responses:\n        204:\n          description: Ownership is transfered.\n        404:\n          description: If the requested application does not exist or if the user has no access to it.\n\n  /api/admin/v1alpha1/apps/{application}/members:\n    parameters:\n      - $ref: '#/components/parameters/ApplicationName'\n    get:\n      tags:\n        - Application administration\n      description: Get the application members.\n      responses:\n        200:\n          description: The list of members for this application.\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/ApplicationMembers'\n        404:\n          description: If the requested application does not exist or if the user has no access to it.\n\n    put:\n      tags:\n        - Application administration\n      description: Update existing application member list.\n      requestBody:\n        description: The new application member list.\n        required: true\n        content:\n          'application/json':\n            schema:\n              $ref: '#/components/schemas/ApplicationMembers'\n      responses:\n        204:\n          description: The application's member list was updated.\n        400:\n          description: The payload format was invalid.\n        404:\n          description: If requested application does not exist or if the user has no access to it.\n        409:\n          description: |\n            In case a resource version was provided in the update, but it did not match the\n            current version of the resource.\n\n  #\n  # ## Command & control\n  #\n\n  /api/command/v1alpha1/apps/{application}/devices/{device}:\n    parameters:\n      - $ref: '#/components/parameters/ApplicationName'\n      - $ref: '#/components/parameters/DeviceName'\n    post:\n      tags:\n        - Command & Control\n      description: Send one way commands to devices.\n      parameters:\n        - name: command\n          required: true\n          in: query\n          schema:\n            $ref: '#/components/schemas/CommandName'\n          description: Command to execute\n      requestBody:\n        description: Optional payload for the command\n        required: false\n        content:\n          'application/json':\n            schema:\n              $ref: '#/components/schemas/CommandObject'\n      responses:\n        202:\n          description: |\n            The command was accepted for processing, but there is no further information if or when the command will\n            be sent to the device.\n\n            As commands are considered short-lived, command which cannot be sent in the near future will get discarded.\n        401:\n          description: Invalid authentication.\n        404:\n          description: Device or application not found.\n        406:\n          description: Device is not found or disabled.\n\n  /api/command/v1alpha1/inbox/apps/{application}/devices/{device}:\n    parameters:\n      - $ref: '#/components/parameters/ApplicationName'\n      - $ref: '#/components/parameters/DeviceName'\n    get:\n      tags:\n        - Command & Control\n      description: Explicitly wait for commands\n      parameters:\n        - name: timeout\n          required: false\n          in: query\n          description: Wait for commands for specified amount of time in seconds.\n          schema:\n            $ref: '#/components/schemas/Timeout'\n      responses:\n        200:\n          description: The response contain a command.\n          headers:\n            Command:\n              description: Command to be executed\n              schema:\n                type: object\n            Request:\n              required: false\n              description: Request identifier used to correlate response with.\n              schema:\n                type: string\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/CommandObject'\n        404:\n          description: No command available.\n\n  /api/command/v1alpha1/outbox/apps/{application}/devices/{device}:\n    parameters:\n      - $ref: '#/components/parameters/ApplicationName'\n      - $ref: '#/components/parameters/DeviceName'\n    post:\n      tags:\n        - Command & Control\n      description: Send a command result.\n      parameters:\n        - name: request\n          required: false\n          in: query\n          description: Request identifier used to correlate response with.\n          schema:\n            type: string\n        - name: status\n          required: true\n          in: query\n          description: Status code of commands execution.\n          schema:\n            type: string\n      requestBody:\n        content:\n          'application/json':\n            schema:\n              type: object\n            example:\n              { error: light disconnected }\n        description: Optional payload for the command response\n      responses:\n        200:\n          description: Command result saved.\n\ncomponents:\n\n  parameters:\n    ApplicationName:\n      name: application\n      in: path\n      required: true\n      description: The name of the application.\n      schema:\n        type: string\n        description: Must be DNS labels as defined by RFC1123\n    DeviceName:\n      name: device\n      in: path\n      required: true\n      description: The name of the device.\n      schema:\n        type: string\n        maxLength: 255\n        description: Must conform to UTF-8\n    Channel:\n      name: channel\n      in: path\n      required: true\n      description: The kafka channel to publish the data in.\n      schema:\n        type: string\n        description: A valid Kafka channel name.\n\n    Uid:\n      name: uid\n      in: query\n      required: false\n      description: The expected UID of the entry, for optimistic locking.\n      schema:\n        type: string\n        description: The expected UID of the entry.\n\n    ResourceVersion:\n      name: resourceVersion\n      in: query\n      required: false\n      description: The resource version of the existing data, for optimistic locking.\n      schema:\n        type: string\n        description: A resource version identifier.\n\n    Limit:\n      name: limit\n      in: query\n      required: false\n      description: The maximum number of elements to return.\n      schema:\n        type: integer\n        minimum: 0\n\n    Offset:\n      name: offset\n      in: query\n      required: false\n      description: The number of elements to skip when returning. The elements will by ordered \"by name\".\n      schema:\n        type: integer\n        minimum: 0\n\n    Labels:\n      name: labels\n      in: query\n      required: false\n      description: |\n        Labels selectors.\n\n        Labels are arbitrary \\<key\\>:\\<value\\> pairs that can be associated with a resource.\n        A selector matches labels values using equality, inequality and filtering.\n        It can check the existence of a label key, ignoring the value.<br/>\n        To summarize, there are 6 available operations and their associated symbol :\n          * equality: `=`\n          * inequality: `!=`\n          * filtering: `in`\n          * negative-filetering: `notin`\n          * existence: `<key>`\n          * non-existence: `!<key>`\n\n        For example :<br/>\n        `zone=europe` will match a label where the value for key `zone` is equal to `europe`. <br/>\n        `zone!=europe` will match all the labels where the value for key `zone` is not equal to `europe`. <br/>\n        `country in (france, germany)` will match all the labels where the value for key `country` is equal to `france` or `germany`. <br/>\n        `country notin (spain, italy)` will match all the labels where the value for key `country` is not equal to `spain` or `italy`. <br/>\n        `power` will match all the labels where the key `power` exist, regardless of the value. <br/>\n        `!power` will match all the labels where the key `power` do not exist.\n\n        Multiple selectors can be submited, separated with a coma. A coma implies a AND operation between selectors.<br/>\n        This is modeled after the [kubernetes labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/).\n      schema:\n        type: array\n        items:\n          type: string\n          description: URL encoded list of labels selectors.\n      examples:\n        all:\n          value: \"\"\n          summary: No filter\n        hasLabel:\n          summary: Filter by label existence\n          value: \"zone\"\n          description: Return only resources that have a label named \"zone\"\n        hasValueEq:\n          summary: Filter by label value (equals)\n          value: \"zone=europe\"\n          description: Return only resources that have a label named \"zone\" with a value equals to \"europe\"\n        hasValueIn:\n          value: \"country in (spain, france, italy)\"\n          summary: Filter by label value (in set)\n          description: Return only resources that have a label named \"zone\" with a value of either \"spain\", \"france\", or \"italy\"\n        complex:\n          value: zone=europe,country=germany,!development,city notin (berlin,hamburg,kiel)\n          summary: Complex example\n          description: This will require all filters to match (and).\n\n  #\n  # Schemas\n  #\n\n  schemas:\n\n    Metadata:\n      type: object\n      required:\n        - creationTimestamp\n        - name\n        - generation\n        - resourceVersion\n        - uid\n      properties:\n        creationTimestamp:\n          type: string\n          format: date-time\n        name:\n          type: string\n        resourceVersion:\n          type: string\n          description: |\n            An ID of the current version of this resource. This should be treated as a string and its content should\n            not be interpreted by clients in any way.\n        uid:\n          type: string\n          description: |\n            A unique ID of the resource. Deleting and re-creating a resource with the same name will still result\n            in a different unique ID.\n        generation:\n          type: integer\n        deletionTimestamp:\n          type: string\n          format: date-time\n          description: |\n            A marker for soft-deletion. When the resource is deleted, it will first be marked as deleted, by setting\n            the deletion timestamp. Once all finalizers are removed, the resource will actually be deleted.\n        finalizers:\n          type: array\n          items:\n            type: string\n          description: |\n            A list of finalizers. As long as finalizers are present, the resource will not be deleted\n            even if the `deletionTimestamp` is set.\n        annotations:\n          type: object\n          additionalProperties:\n            type: string\n          description: Arbitrary additional information.\n        labels:\n          type: object\n          additionalProperties:\n            type: string\n          description: |\n            Additional labels which can used for searching.\n\n            Labels are limited in size and format, similar to the Kubernetes labels.\n\n            Also see:\n              * https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/\n\n    ScopedMetadata:\n      allOf:\n        - $ref: '#/components/schemas/Metadata'\n        - type: object\n          required:\n            - application\n          properties:\n            application:\n              type: string\n              description: The name of the application the resource is scoped to.\n\n    NonScopedMetadata:\n      allOf:\n        - $ref: '#/components/schemas/Metadata'\n\n    App:\n      type: object\n      additionalProperties: false\n      properties:\n        metadata:\n          $ref: '#/components/schemas/NonScopedMetadata'\n        spec:\n          $ref: '#/components/schemas/ApplicationSpec'\n        status:\n          $ref: '#/components/schemas/ApplicationStatus'\n\n    Device:\n      type: object\n      additionalProperties: false\n      properties:\n        metadata:\n          $ref: '#/components/schemas/ScopedMetadata'\n        spec:\n          $ref: '#/components/schemas/DeviceSpec'\n        status:\n          $ref: '#/components/schemas/DeviceStatus'\n\n    ApplicationMembers:\n      type: object\n      additionalProperties: false\n      required:\n        - members\n      properties:\n        resourceVersion:\n          type: string\n          description: |\n            The version of the resource. When setting a new member list, this value is\n            optional. But if present, the application will only be updated if the resource\n            version matches. Otherwise it will return a \"Conflict\".\n\n        members:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/MemberEntry'\n      example:\n        resourceVersion: ced63698-a0da-11eb-97e8-d45d6455d2cc\n        members:\n          d84eb308-a0da-11eb-9e90-d45d6455d2cc:\n            role: admin\n          03e32c1a-a0db-11eb-9e9b-d45d6455d2cc:\n            role: manager\n          0a111dfe-a0db-11eb-a953-d45d6455d2cc:\n            role: reader\n\n    MemberEntry:\n      type: object\n      additionalProperties: false\n      required:\n        - role\n      properties:\n        role:\n          type: string\n          enum:\n            - reader\n            - writer\n            - admin\n\n    ApplicationSpec:\n      type: object\n      additionalProperties: true\n      description: A JSON object containing arbritrary data attached to an application.\n\n    ApplicationStatus:\n      type: object\n      additionalProperties: true\n      description: A JSON object containing arbritrary status information attached to an application.\n\n    CommandName:\n      type: string\n      description: The name of the command.\n      example: set-value\n\n    CommandObject:\n      type: object\n      additionalProperties: true\n      description: Additional command payload.\n      example:\n        set-temp: 21\n        set-light-color: FDF4DC\n\n    Timeout:\n      type: integer\n      minimum: 0\n      example: 30\n\n    DeviceSpec:\n      type: object\n      additionalProperties: true\n      description: A JSON object containing arbritrary data attached to a device.\n      properties:\n        credentials:\n          type: object\n          additionalProperties: false\n          properties:\n            credentials:\n              $ref: '#/components/schemas/DeviceCredentials'\n        gatewaySelector:\n          $ref: '#/components/schemas/GatewaySelector'\n        alias:\n          $ref: '#/components/schemas/Alias'\n\n\n    Alias:\n      type: object\n      additionalProperties: false\n      properties:\n        aliases:\n          type: array\n          description: |\n            A list of alternates names that the device can authenticate with.\n            Must conform to UTF-8.\n          items:\n            type: string\n            maxLength: 255\n\n    GatewaySelector:\n      type: object\n      additionalProperties: false\n      properties:\n        matchNames:\n          type: array\n          items:\n            type: string\n            description: The device ID of the device to use as a gateway.\n\n\n    DeviceStatus:\n      type: object\n      additionalProperties: true\n      description: A JSON object containing arbritrary status information attached to a device.\n\n    DeviceCredentials:\n      type: array\n      additionalProperties: false\n      items:\n        oneOf:\n          - $ref: '#/components/schemas/UserCredential'\n          - $ref: '#/components/schemas/PassCredential'\n          - $ref: '#/components/schemas/CertCredential'\n\n    Password:\n      description: A password, either plain or hashed.\n      oneOf:\n        - type: string\n        - type: object\n          additionalProperties: false\n          required:\n            - plain\n          properties:\n            plain:\n              type: string\n        - type: object\n          additionalProperties: false\n          required:\n            - bcrypt\n          properties:\n            bcrypt:\n              type: string\n        - type: object\n          additionalProperties: false\n          required:\n            - sha512\n          properties:\n            sha512:\n              type: string\n\n    UserCredential:\n      type: object\n      additionalProperties: false\n      description: Username and password credentials.\n      required:\n        - user\n      properties:\n        user:\n          type: object\n          additionalProperties: false\n          description: The username and password combination.\n          properties:\n            usename:\n              type: string\n            password:\n              $ref: '#/components/schemas/Password'\n\n    PassCredential:\n      type: object\n      description: password credential.\n      additionalProperties: false\n      required:\n        - pass\n      properties:\n        pass:\n          $ref: '#/components/schemas/Password'\n\n    CertCredential:\n      type: object\n      description: The public key of the device X509 certificate.\n      additionalProperties: false\n      required:\n        - cert\n      properties:\n        cert:\n          type: string\n\n  #\n  # Security schemes\n  #\n\n  securitySchemes:\n    api_key:\n      type: oauth2\n      description: Log in using your Drogue Cloud account\n      flows:\n        implicit:\n          authorizationUrl: \"https://keycloak-drogue-dev.apps.wonderful.iot-playground.org/realms/drogue/protocol/openid-connect/auth\"\n          scopes:\n            openid: OpenID Connect\n",
			"canonicalURL": "/github.com/drogue-iot/drogue-cloud@b7a811435ebd3aca5fe035b0e92b699cabaf7030/-/blob/console-backend/api/index.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/drogue-iot/drogue-cloud/blob/b7a811435ebd3aca5fe035b0e92b699cabaf7030/console-backend/api/index.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/api/registry/v1alpha1/apps/{application}\": at 1:18157: patch: at 1:18905: requestBody: at 1:19091: content: application/json: at 1:19122: schema: at 1:19266: parse schema: resolve \"#/components/schema/Patch\": find schema: resolve \"#/components/schema/Patch\": can't find value for \"components/schema/Patch\""
}