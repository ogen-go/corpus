{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/influxdata/openapi"
		},
		"file": {
			"name": "cloud-priv.yml",
			"size": 0,
			"path": "contracts/priv/cloud-priv.yml",
			"byteSize": 37501,
			"content": "openapi: 3.0.0\ninfo:\n  title: IDPE-exclusive API endpoints\n  version: 2.3.3\nservers:\n  - description: |-\n      V2 Private is not necessarily private in the sense that the world cannot view it,\n      but defines routes that are of little use to the world (quartz-specific routes that\n      require a super token (`/setup/user`)), or routes that are not yet guaranteed to\n      not change.\n    url: /api/v2private\npaths:\n  /oauth/clientConfig:\n    get:\n      tags:\n        - OAuth\n      summary: Retrieve required OAuth client variables\n      parameters:\n        - in: query\n          name: redirectTo\n          schema:\n            type: string\n          description: optional parameter to redirect the user to after a successful login.\n          required: false\n      responses:\n        '200':\n          description: Required OAuth client variables\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OAuthClientConfig'\n        default:\n          description: unexpected error\n          $ref: '#/components/responses/ServerError'\n  /flags:\n    get:\n      tags:\n        - Public Flags\n      summary: Retrieve public/preauth feature flags\n      responses:\n        '200':\n          description: Pre-authentication exposed feature flags\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties: true\n        default:\n          description: unexpected error\n          $ref: '#/components/responses/ServerError'\n  /limitevents:\n    get:\n      tags:\n        - Limits\n      summary: List all limit events\n      parameters:\n        - in: query\n          name: orgID\n          required: true\n          description: only show events belonging to specified organization\n          schema:\n            type: string\n        - in: query\n          name: start\n          description: limit to only events at or after start time\n          schema:\n            type: string\n            format: date-time\n        - in: query\n          name: stop\n          description: limit to only events before stop time\n          schema:\n            type: string\n            format: date-time\n        - in: query\n          name: limit\n          schema:\n            type: integer\n            minimum: 1\n            default: 100\n            maximum: 100\n        - in: query\n          name: offset\n          schema:\n            type: integer\n            minimum: 0\n      responses:\n        '200':\n          description: A list of limit events\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LimitEvents'\n        default:\n          description: unexpected error\n          $ref: '#/components/responses/ServerError'\n  '/orgs/{orgID}/limits':\n    get:\n      tags:\n        - Limits\n      summary: Retrieve limits for an organization\n      parameters:\n        - in: path\n          name: orgID\n          description: The identifier of the organization.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A limit\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Limit'\n        default:\n          description: unexpected error\n          $ref: '#/components/responses/ServerError'\n    put:\n      tags:\n        - Limits\n      summary: Create or update limits for an organization\n      parameters:\n        - in: path\n          name: orgID\n          description: The identifier of the organization.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: limit that will be updated\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Limit'\n      responses:\n        '200':\n          description: The updated or created limit\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Limit'\n        default:\n          description: unexpected error\n          $ref: '#/components/responses/ServerError'\n    patch:\n      tags:\n        - Limits\n      summary: Patch limit\n      parameters:\n        - in: path\n          name: orgID\n          description: The identifier of the organization.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: fields in the limit that require updates\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              description: These are org limits similar to those configured in/by quartz.\n              properties:\n                orgID:\n                  type: string\n                rate:\n                  type: object\n                  properties:\n                    queryTime:\n                      type: integer\n                      description: Query Time in nanoseconds\n                    readKBs:\n                      type: integer\n                      description: Query limit in kb/sec. 0 is unlimited.\n                    concurrentReadRequests:\n                      type: integer\n                      description: Allowed concurrent queries. 0 is unlimited.\n                    writeKBs:\n                      type: integer\n                      description: Write limit in kb/sec. 0 is unlimited.\n                    concurrentWriteRequests:\n                      type: integer\n                      description: Allowed concurrent writes. 0 is unlimited.\n                    cardinality:\n                      type: integer\n                      description: Allowed organization total cardinality. 0 is unlimited.\n                    concurrentDeleteRequests:\n                      type: integer\n                      description: Allowed organization concurrent outstanding delete requests.\n                    deleteRequestsPerSecond:\n                      type: integer\n                      description: Allowed organization delete request rate.\n                bucket:\n                  type: object\n                  properties:\n                    maxBuckets:\n                      type: integer\n                    maxRetentionDuration:\n                      type: integer\n                      description: Max bucket retention duration in nanoseconds. 0 is unlimited.\n                task:\n                  type: object\n                  properties:\n                    maxTasks:\n                      type: integer\n                  required:\n                    - maxTasks\n                dashboard:\n                  type: object\n                  properties:\n                    maxDashboards:\n                      type: integer\n                  required:\n                    - maxDashboards\n                check:\n                  type: object\n                  properties:\n                    maxChecks:\n                      type: integer\n                  required:\n                    - maxChecks\n                notificationRule:\n                  type: object\n                  properties:\n                    maxNotifications:\n                      type: integer\n                    blockedNotificationRules:\n                      type: string\n                      description: comma separated list of notification rules\n                      example: 'http,pagerduty'\n                notificationEndpoint:\n                  type: object\n                  properties:\n                    blockedNotificationEndpoints:\n                      type: string\n                      description: comma separated list of notification endpoints\n                      example: 'http,pagerduty'\n                  required:\n                    - blockNotificationEndpoints\n      responses:\n        '200':\n          description: The updated limit\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Limit'\n        '422':\n          description: Request body could not be processed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ServerError'\n        default:\n          description: unexpected error\n          $ref: '#/components/responses/ServerError'\n  '/orgs/{orgID}/limits/status':\n    get:\n      tags:\n        - Limits\n      summary: Get current limit status for an org\n      parameters:\n        - in: path\n          name: orgID\n          schema:\n            type: string\n          required: true\n          description: The identifier of the organization.\n      responses:\n        '200':\n          description: Current limit status\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LimitStatuses'\n        default:\n          description: unexpected error\n          $ref: '#/components/responses/ServerError'\n  '/orgs/{orgID}/settings':\n    get:\n      summary: Get settings for an org\n      parameters:\n        - in: path\n          name: orgID\n          description: org to get settings for\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Current settings for org\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OrgSettings'\n        default:\n          description: unexpected error\n          $ref: '#/components/responses/ServerError'\n    put:\n      summary: Create or update settings for an org\n      parameters:\n        - in: path\n          name: orgID\n          description: org to create settings for\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Org settings that will be updated\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/OrgSettings'\n      responses:\n        '200':\n          description: The updated or created settings\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OrgSettings'\n        default:\n          description: unexpected error\n          $ref: '#/components/responses/ServerError'\n  /setup/user:\n    post:\n      operationId: PostSetupUser\n      tags:\n        - Setup\n      summary: 'Create a new user, organization, and bucket'\n      description: 'Post an onboarding request to create a new user, organization, and bucket.'\n      requestBody:\n        description: Source to create\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/OnboardingRequest'\n      responses:\n        '201':\n          description: 'The created default user, bucket, and organization.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OnboardingResponse'\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n  /provision:\n    put:\n      operationId: PutProvision\n      tags:\n        - Provision\n      description: 'Create a new user, organization, and bucket. Idempotent. Requests can be retried.'\n      requestBody:\n        description: Create user and org with supplied IDs\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ProvisionRequest'\n      responses:\n        '201':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProvisionResponse'\n          description: 'The user name and ID, the org name and ID, the token for user if requested'\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ServerError'\n          description: 'Bad request. Data in request is invalid. Examples include Invalid IDs, invalid names, and invalid limits'\n        '401':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ServerError'\n          description: Credentials not provided\n        '403':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ServerError'\n          description: Insufficient credentials to create an organization\n        '422':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ServerError'\n          description: |\n            Unprocessable Entity\n                      - Retention seconds that are higher than max allowed.\n            Conflict\n                      - user with ID exists with different name\n                      - org with ID exists with different name\n                      - user name already in use with different id\n                      - org name already in use with differnet id\n        '501':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ServerError'\n          description: Internal Server Error. Request can be retried\n        default:\n          $ref: '#/components/responses/ServerError'\n          description: Unexpected error\n  /provision/user:\n    put:\n      operationId: PutProvisionUser\n      tags:\n        - ProvisionUser\n      summary: Create/Add a user to an existing org. Creates a user if doesn't exist. Idempotent\n      parameters:\n        - in: header\n          name: Zap-Trace-Span\n          description: OpenTracing span context\n          example:\n            trace_id: '1'\n            span_id: '1'\n            baggage:\n              key: value\n          required: false\n          schema:\n            type: string\n      requestBody:\n        description: User to create and org id to add user to\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ProvisionUserRequest'\n      responses:\n        '201':\n          description: User created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProvisionUserResponse'\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ServerError'\n          description: 'Bad request. Data in request is invalid. Examples include Invalid IDs, invalid names.'\n        '401':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ServerError'\n          description: Credentials not provided or insufficient credentials to provision a user\n        '422':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ServerError'\n          description: |\n            Unprocessable Entity\n                      - Org with ID does not exist.\n            Conflict\n                      - user with ID exists with different name\n                      - user name already in use with different id\n        '501':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ServerError'\n          description: Internal Server Error. Request can be retried.\n        default:\n          $ref: '#/components/responses/ServerError'\n          description: Unexpected error\ncomponents:\n  schemas:\n    OnboardingRequest:\n      type: object\n      properties:\n        username:\n          type: string\n        password:\n          type: string\n        org:\n          type: string\n        bucket:\n          type: string\n        retentionPeriodHrs:\n          type: integer\n          deprecated: true\n        retentionPeriodSeconds:\n          type: integer\n        limit:\n          $ref: '#/components/schemas/Limit'\n      required:\n        - username\n        - org\n        - bucket\n    OnboardingResponse:\n      type: object\n      properties:\n        user:\n          properties:\n            id:\n              readOnly: true\n              type: string\n            oauthID:\n              type: string\n            name:\n              type: string\n            status:\n              description: If inactive the user is inactive.\n              default: active\n              type: string\n              enum:\n                - active\n                - inactive\n            links:\n              type: object\n              readOnly: true\n              example:\n                self: /api/v2/users/1\n              properties:\n                self:\n                  type: string\n                  format: uri\n          required:\n            - name\n        org:\n          properties:\n            links:\n              type: object\n              readOnly: true\n              example:\n                self: /api/v2/orgs/1\n                members: /api/v2/orgs/1/members\n                owners: /api/v2/orgs/1/owners\n                labels: /api/v2/orgs/1/labels\n                secrets: /api/v2/orgs/1/secrets\n                buckets: /api/v2/buckets?org=myorg\n                tasks: /api/v2/tasks?org=myorg\n                dashboards: /api/v2/dashboards?org=myorg\n              properties:\n                self:\n                  $ref: '#/components/schemas/Link'\n                members:\n                  $ref: '#/components/schemas/Link'\n                owners:\n                  $ref: '#/components/schemas/Link'\n                labels:\n                  $ref: '#/components/schemas/Link'\n                secrets:\n                  $ref: '#/components/schemas/Link'\n                buckets:\n                  $ref: '#/components/schemas/Link'\n                tasks:\n                  $ref: '#/components/schemas/Link'\n                dashboards:\n                  $ref: '#/components/schemas/Link'\n            id:\n              readOnly: true\n              type: string\n            name:\n              type: string\n            description:\n              type: string\n            createdAt:\n              type: string\n              format: date-time\n              readOnly: true\n            updatedAt:\n              type: string\n              format: date-time\n              readOnly: true\n            status:\n              description: If inactive the organization is inactive.\n              default: active\n              type: string\n              enum:\n                - active\n                - inactive\n          required:\n            - name\n        bucket:\n          properties:\n            links:\n              type: object\n              readOnly: true\n              example:\n                labels: /api/v2/buckets/1/labels\n                members: /api/v2/buckets/1/members\n                org: /api/v2/orgs/2\n                owners: /api/v2/buckets/1/owners\n                self: /api/v2/buckets/1\n                write: /api/v2/write?org=2\u0026bucket=1\n              properties:\n                labels:\n                  description: URL to retrieve labels for this bucket.\n                  $ref: '#/components/schemas/Link'\n                members:\n                  description: URL to retrieve members that can read this bucket.\n                  $ref: '#/components/schemas/Link'\n                org:\n                  description: URL to retrieve parent organization for this bucket.\n                  $ref: '#/components/schemas/Link'\n                owners:\n                  description: URL to retrieve owners that can read and write to this bucket.\n                  $ref: '#/components/schemas/Link'\n                self:\n                  description: URL for this bucket.\n                  $ref: '#/components/schemas/Link'\n                write:\n                  description: URL to write line protocol to this bucket.\n                  $ref: '#/components/schemas/Link'\n            id:\n              readOnly: true\n              type: string\n            type:\n              readOnly: true\n              type: string\n              default: user\n              enum:\n                - user\n                - system\n            name:\n              type: string\n            description:\n              type: string\n            orgID:\n              type: string\n            rp:\n              type: string\n            schemaType:\n              default: implicit\n              type: string\n              enum:\n                - implicit\n                - explicit\n            createdAt:\n              type: string\n              format: date-time\n              readOnly: true\n            updatedAt:\n              type: string\n              format: date-time\n              readOnly: true\n            retentionRules:\n              type: array\n              description: Rules to expire or retain data.  No rules means data never expires.\n              items:\n                type: object\n                properties:\n                  type:\n                    type: string\n                    default: expire\n                    enum:\n                      - expire\n                  everySeconds:\n                    type: integer\n                    format: int64\n                    description: Duration in seconds for how long data will be kept in the database. 0 means infinite.\n                    example: 86400\n                    minimum: 0\n                  shardGroupDurationSeconds:\n                    type: integer\n                    format: int64\n                    description: Shard duration measured in seconds.\n                required:\n                  - type\n                  - everySeconds\n            labels:\n              type: array\n              items:\n                type: object\n                properties:\n                  id:\n                    readOnly: true\n                    type: string\n                  orgID:\n                    readOnly: true\n                    type: string\n                  name:\n                    type: string\n                  properties:\n                    type: object\n                    additionalProperties:\n                      type: string\n                    description: Key/Value pairs associated with this label. Keys can be removed by sending an update with an empty value.\n                    example:\n                      color: ffb3b3\n                      description: this is a description\n          required:\n            - name\n            - retentionRules\n        auth:\n          required:\n            - orgID\n            - permissions\n          allOf:\n            - properties:\n                status:\n                  description: 'Status of the token. If `inactive`, requests using the token will be rejected.'\n                  default: active\n                  type: string\n                  enum:\n                    - active\n                    - inactive\n                description:\n                  type: string\n                  description: A description of the token.\n            - type: object\n              properties:\n                createdAt:\n                  type: string\n                  format: date-time\n                  readOnly: true\n                updatedAt:\n                  type: string\n                  format: date-time\n                  readOnly: true\n                orgID:\n                  type: string\n                  description: ID of org that authorization is scoped to.\n                permissions:\n                  type: array\n                  minItems: 1\n                  description: List of permissions for an auth.  An auth must have at least one Permission.\n                  items:\n                    required:\n                      - action\n                      - resource\n                    properties:\n                      action:\n                        type: string\n                        enum:\n                          - read\n                          - write\n                      resource:\n                        type: object\n                        required:\n                          - type\n                        properties:\n                          type:\n                            type: string\n                            enum:\n                              - authorizations\n                              - buckets\n                              - dashboards\n                              - orgs\n                              - tasks\n                              - telegrafs\n                              - users\n                              - variables\n                              - secrets\n                              - labels\n                              - views\n                              - documents\n                              - notificationRules\n                              - notificationEndpoints\n                              - checks\n                              - dbrp\n                              - flows\n                              - annotations\n                              - functions\n                          id:\n                            type: string\n                            nullable: true\n                            description: If ID is set that is a permission for a specific resource. if it is not set it is a permission for all resources of that resource type.\n                          name:\n                            type: string\n                            nullable: true\n                            description: Optional name of the resource if the resource has a name field.\n                          orgID:\n                            type: string\n                            nullable: true\n                            description: If orgID is set that is a permission for all resources owned my that org. if it is not set it is a permission for all resources of that resource type.\n                          org:\n                            type: string\n                            nullable: true\n                            description: Optional name of the organization of the organization with orgID.\n                id:\n                  readOnly: true\n                  type: string\n                token:\n                  readOnly: true\n                  type: string\n                  description: Passed via the Authorization Header and Token Authentication type.\n                userID:\n                  readOnly: true\n                  type: string\n                  description: ID of user that created and owns the token.\n                user:\n                  readOnly: true\n                  type: string\n                  description: Name of user that created and owns the token.\n                org:\n                  readOnly: true\n                  type: string\n                  description: Name of the org token is scoped to.\n                links:\n                  type: object\n                  readOnly: true\n                  example:\n                    self: /api/v2/authorizations/1\n                    user: /api/v2/users/12\n                  properties:\n                    self:\n                      readOnly: true\n                      $ref: '#/components/schemas/Link'\n                    user:\n                      readOnly: true\n                      $ref: '#/components/schemas/Link'\n    ProvisionRequest:\n      type: object\n      properties:\n        user:\n          $ref: '#/components/schemas/Identity'\n        org:\n          $ref: '#/components/schemas/Identity'\n        config:\n          type: object\n          properties:\n            bucket:\n              type: string\n              description: name of non system bucket\n            retentionPeriodSeconds:\n              type: integer\n              description: retention period of non system bucket\n            limit:\n              $ref: '#/components/schemas/Limit'\n        returnToken:\n          type: boolean\n          description: if true will return the auth token in the response\n      required:\n        - user\n        - org\n        - config\n    ProvisionUserRequest:\n      type: object\n      properties:\n        user:\n          $ref: '#/components/schemas/Identity'\n        orgID:\n          type: string\n          description: organization id to add user to\n        role:\n          type: string\n          description: Role of the User\n          enum:\n            - owner\n            - member\n      required:\n        - user\n        - orgID\n        - role\n    ProvisionUserResponse:\n      type: object\n      properties:\n        user:\n          $ref: '#/components/schemas/Identity'\n        org:\n          $ref: '#/components/schemas/Identity'\n    ProvisionResponse:\n      type: object\n      properties:\n        user:\n          $ref: '#/components/schemas/Identity'\n        org:\n          $ref: '#/components/schemas/IdentityWithLinks'\n        token:\n          type: string\n          description: the token for the created user\n    InvalidRequestError:\n      properties:\n        code:\n          description: returns error code 400\n          readOnly: true\n          type: string\n          enum:\n            - invalid\n        message:\n          readOnly: true\n          description: message is a human-readable message.\n          type: string\n    UnauthorizedRequestError:\n      properties:\n        code:\n          description: returns error code 401\n          readOnly: true\n          type: string\n          enum:\n            - unauthorized\n        message:\n          readOnly: true\n          description: message is a human-readable message.\n          type: string\n    ForbiddenRequestError:\n      properties:\n        code:\n          description: returns error code 403\n          readOnly: true\n          type: string\n          enum:\n            - forbidden\n        message:\n          readOnly: true\n          description: message is a human-readable message.\n          type: string\n    Error:\n      properties:\n        code:\n          description: code is the machine-readable error code.\n          readOnly: true\n          type: string\n          enum:\n            - internal error\n            - not found\n            - conflict\n            - invalid\n            - unprocessable entity\n            - empty value\n            - unavailable\n            - forbidden\n            - too many requests\n            - unauthorized\n            - method not allowed\n            - request too large\n            - unsupported media type\n        message:\n          readOnly: true\n          description: Human-readable message.\n          type: string\n        op:\n          readOnly: true\n          description: Describes the logical code operation when the error occurred. Useful for debugging.\n          type: string\n        err:\n          readOnly: true\n          description: Stack of errors that occurred during processing of the request. Useful for debugging.\n          type: string\n      required:\n        - code\n    OAuthClientConfig:\n      type: object\n      properties:\n        clientID:\n          type: string\n        domain:\n          type: string\n          format: uri\n        redirectURL:\n          type: string\n          format: uri\n        state:\n          type: string\n      required:\n        - clientID\n        - domain\n        - redirectURL\n        - state\n    Identity:\n      type: object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n    IdentityWithLinks:\n      type: object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        links:\n          $ref: '#/components/schemas/Links'\n    LimitEvent:\n      type: object\n      properties:\n        orgID:\n          type: string\n        type:\n          type: string\n          enum:\n            - limited_quota\n            - limited_write\n            - limited_query\n            - limited_cardinality\n        timestamp:\n          readOnly: true\n          type: string\n          format: date-time\n    LimitEvents:\n      type: object\n      properties:\n        links:\n          $ref: '#/components/schemas/Links'\n        events:\n          type: array\n          items:\n            $ref: '#/components/schemas/LimitEvent'\n    LimitStatuses:\n      type: object\n      properties:\n        read:\n          $ref: '#/components/schemas/LimitStatus'\n        write:\n          $ref: '#/components/schemas/LimitStatus'\n        cardinality:\n          $ref: '#/components/schemas/LimitStatus'\n      required:\n        - read\n        - write\n        - cardinality\n    LimitStatus:\n      type: object\n      properties:\n        status:\n          type: string\n          enum:\n            - ok\n            - exceeded\n      required:\n        - status\n    Limit:\n      type: object\n      description: These are org limits similar to those configured in/by quartz.\n      properties:\n        orgID:\n          type: string\n        rate:\n          type: object\n          properties:\n            queryTime:\n              type: integer\n              description: Query Time in nanoseconds\n            readKBs:\n              type: integer\n              description: Query limit in kb/sec. 0 is unlimited.\n            concurrentReadRequests:\n              type: integer\n              description: Allowed concurrent queries. 0 is unlimited.\n            writeKBs:\n              type: integer\n              description: Write limit in kb/sec. 0 is unlimited.\n            concurrentWriteRequests:\n              type: integer\n              description: Allowed concurrent writes. 0 is unlimited.\n            cardinality:\n              type: integer\n              description: Allowed organization total cardinality. 0 is unlimited.\n            concurrentDeleteRequests:\n              type: integer\n              description: Allowed organization concurrent outstanding delete requests.\n            deleteRequestsPerSecond:\n              type: integer\n              description: Allowed organization delete request rate.\n          required:\n            - readKBs\n            - queryTime\n            - concurrentReadRequests\n            - writeKBs\n            - concurrentWriteRequests\n            - cardinality\n        bucket:\n          type: object\n          properties:\n            maxBuckets:\n              type: integer\n            maxRetentionDuration:\n              type: integer\n              description: Max bucket retention duration in nanoseconds. 0 is unlimited.\n          required:\n            - maxBuckets\n            - maxRetentionDuration\n        task:\n          type: object\n          properties:\n            maxTasks:\n              type: integer\n          required:\n            - maxTasks\n        dashboard:\n          type: object\n          properties:\n            maxDashboards:\n              type: integer\n          required:\n            - maxDashboards\n        check:\n          type: object\n          properties:\n            maxChecks:\n              type: integer\n          required:\n            - maxChecks\n        notificationRule:\n          type: object\n          properties:\n            maxNotifications:\n              type: integer\n            blockedNotificationRules:\n              type: string\n              description: comma separated list of notification rules\n              example: 'http,pagerduty'\n          required:\n            - maxNotifications\n            - blockNotificationRules\n        notificationEndpoint:\n          type: object\n          properties:\n            blockedNotificationEndpoints:\n              type: string\n              description: comma separated list of notification endpoints\n              example: 'http,pagerduty'\n          required:\n            - blockNotificationEndpoints\n        features:\n          type: object\n          properties:\n            allowDelete:\n              type: boolean\n              description: allow delete predicate endpoint\n      required:\n        - rate\n        - bucket\n        - task\n        - dashboard\n        - check\n        - notificationRule\n        - notificationEndpoint\n    OrgSettings:\n      type: object\n      properties:\n        orgID:\n          type: string\n          description: the influxDB ID of the created organization\n        settings:\n          type: array\n          items:\n            $ref: '#/components/schemas/OrgSetting'\n    OrgSetting:\n      type: object\n      properties:\n        key:\n          type: string\n        value:\n          type: string\n    Link:\n      type: string\n      format: uri\n      readOnly: true\n      description: URI of resource.\n    Links:\n      type: object\n      properties:\n        next:\n          $ref: '#/components/schemas/Link'\n        self:\n          $ref: '#/components/schemas/Link'\n        prev:\n          $ref: '#/components/schemas/Link'\n      required:\n        - self\n    OrganizationRequest:\n      type: object\n      properties:\n        username:\n          type: string\n          description: username of the Quartz user to be added in IDPE\n          example: user@email.com\n        org:\n          type: string\n          description: the name of the organization to be added\n        limit:\n          $ref: '#/components/schemas/Limit'\n        retentionSeconds:\n          type: integer\n          description: length of time to retain data in seconds\n        bucket:\n          type: string\n          description: the name of the bucket to be created\n  responses:\n    ServerError:\n      description: Non 2XX error response from server.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n"
		}
	},
	"Error": "parse: parse spec: paths: /orgs/{orgID}/limits: patch: operation \"\": responses: 422: content: \"application/json\": schema: parse schema: reference \"#/components/responses/ServerError\": resolve reference \"#/components/responses/ServerError\": invalid schema reference \"#/components/responses/ServerError\""
}