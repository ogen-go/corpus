{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/XeroAPI/Xero-OpenAPI"
		},
		"file": {
			"name": "xero_files.yaml",
			"size": 0,
			"path": "xero_files.yaml",
			"byteSize": 32353,
			"content": "openapi: 3.0.0\nservers:\n  - description: Xero Files API\n    url: https://api.xero.com/files.xro/1.0/\ninfo:\n  title: Xero Files API\n  version: \"2.23.0\"\n  description: \"These endpoints are specific to Xero Files API\"\n  termsOfService: \"https://developer.xero.com/xero-developer-platform-terms-conditions/\"\n  contact:\n    name: \"Xero Platform Team\"\n    email: \"api@xero.com\"\n    url: \"https://developer.xero.com\"\ntags:\n  - name: Files\n    description: Operations available to regular developers\npaths:\n  /Files:\n    parameters:\n      - $ref: '#/components/parameters/requiredHeader'\n    get:\n      security:\n        - OAuth2: [files, files.read]\n      tags:\n        - Files\n      operationId: getFiles\n      summary: Retrieves files\n      parameters:\n        - in: query\n          name: pagesize\n          description: pass an optional page size value\n          schema:\n            type: integer\n            maximum: 100\n            example: 50\n        - in: query\n          name: page\n          description: number of records to skip for pagination\n          schema:\n            type: integer\n            minimum: 1\n            example: 2\n        - in: query\n          name: sort\n          description: values to sort by\n          schema:\n            type: string\n            enum: \n            - Name\n            - Size\n            - CreatedDateUTC\n            example: \"CreatedDateUTC DESC\"\n      responses:\n        '200':\n          description: search results matching criteria\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Files'\n              example: '{\n                          \"TotalCount\": 100,\n                          \"Page\": 1,\n                          \"PerPage\": 2,\n                          \"Items\": [\n                            {\n                              \"Name\": \"helo-heros.jpg\",\n                              \"MimeType\": \"application/jpg\",\n                              \"Size\": 2878711,\n                              \"CreatedDateUtc\": \"2021-02-10T16:02:54.9930000\",\n                              \"UpdatedDateUtc\": \"2021-02-10T16:02:54.9930000\",\n                              \"User\": {\n                                \"Name\": \"sid.maestre@xero.com\",\n                                \"FirstName\": \"Sidney\",\n                                \"LastName\": \"Maestre\",\n                                \"FullName\": \"Sidney Maestre\",\n                                \"Id\": \"740add2a-a703-4b8a-a670-1093919c2040\"\n                              },\n                              \"FolderId\": \"bf924975-7097-46f2-a143-1ecfbab3c8c3\",\n                              \"Id\": \"3d413bfe-f40f-4807-b953-9a42f834ff15\"\n                            },\n                            {\n                              \"Name\": \"helo-heros.jpg\",\n                              \"MimeType\": \"application/jpg\",\n                              \"Size\": 2878711,\n                              \"CreatedDateUtc\": \"2021-02-09T21:16:00.6130000\",\n                              \"UpdatedDateUtc\": \"2021-02-09T21:16:00.6130000\",\n                              \"User\": {\n                                \"Name\": \"sid.maestre@xero.com\",\n                                \"FirstName\": \"Sidney\",\n                                \"LastName\": \"Maestre\",\n                                \"FullName\": \"Sidney Maestre\",\n                                \"Id\": \"740add2a-a703-4b8a-a670-1093919c2040\"\n                              },\n                              \"FolderId\": \"bf924975-7097-46f2-a143-1ecfbab3c8c3\",\n                              \"Id\": \"22f87409-cdfd-4813-a868-559481bcb052\"\n                            }\n                          ]\n                        }'\n    post:\n      security:\n        - OAuth2: [files]\n      tags:\n        - Files\n      summary: Uploads a File to the inbox\n      operationId: uploadFile\n      responses:\n        '201':\n          description: A successful request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileObject'\n              example: '{\n                          \"Name\": \"helo-heros.jpg\",\n                          \"MimeType\": \"application/jpg\",\n                          \"Size\": 2878711,\n                          \"CreatedDateUtc\": \"2021-02-10T23:17:50.1930000\",\n                          \"UpdatedDateUtc\": \"2021-02-10T23:17:50.1930000\",\n                          \"User\": {\n                            \"Name\": \"sid.maestre@xero.com\",\n                            \"FirstName\": \"Sidney\",\n                            \"LastName\": \"Maestre\",\n                            \"FullName\": \"Sidney Maestre\",\n                            \"Id\": \"740add2a-a703-4b8a-a670-1093919c2040\"\n                          },\n                          \"FolderId\": \"bf924975-7097-46f2-a143-1ecfbab3c8c3\",\n                          \"Id\": \"22f87409-cdfd-4813-a868-559481bcb052\"\n                        }'\n        '400':\n          description: invalid input, object invalid\n          content:\n            application/json:\n              example: '[\n                      {\n                          \"type\":\"Validation\",\n                          \"title\":\"Validation failure\",\n                          \"detail\":\"Extension: boo is not a valid File extension.\"\n                      }\n                    ]'\n      requestBody:\n        content:\n          multipart/form-data:\n            schema: \n              $ref: '#/components/schemas/UploadObject'\n  /Files/{FileId}:\n    parameters:\n      - $ref: '#/components/parameters/requiredHeader'\n    get:\n      security:\n        - OAuth2: [files, files.read]\n      tags:\n        - Files\n      summary: Retrieves a file by a unique file ID\n      operationId: getFile\n      parameters: \n        - name: FileId\n          x-snake: file_id\n          in: path\n          required: true\n          description: File id for single object\n          schema: \n            type: string\n            format: uuid\n            example: 4ff1e5cc-9835-40d5-bb18-09fdb118db9c\n      responses:\n        '200':\n          description: search results matching criteria\n          content:\n             application/json:\n              schema:\n                $ref: '#/components/schemas/FileObject'\n              example: '{\n                          \"Name\": \"helo-heros.jpg\",\n                          \"MimeType\": \"application/jpg\",\n                          \"Size\": 2878711,\n                          \"CreatedDateUtc\": \"2021-02-10T23:17:50.1930000\",\n                          \"UpdatedDateUtc\": \"2021-02-10T23:17:50.1930000\",\n                          \"User\": {\n                            \"Name\": \"sid.maestre@xero.com\",\n                            \"FirstName\": \"Sidney\",\n                            \"LastName\": \"Maestre\",\n                            \"FullName\": \"Sidney Maestre\",\n                            \"Id\": \"740add2a-a703-4b8a-a670-1093919c2040\"\n                          },\n                          \"FolderId\": \"bf924975-7097-46f2-a143-1ecfbab3c8c3\",\n                          \"Id\": \"efd77bfc-7018-4da1-b251-7aa2d438382c\"\n                        }'\n    put:\n      security:\n        - OAuth2: [files]\n      tags:\n        - Files\n      summary: Update a file \n      operationId: updateFile\n      description:  Updates file properties of a single file\n      parameters: \n        - name: FileId\n          x-snake: file_id\n          in: path\n          required: true\n          description: File id for single object\n          schema: \n            type: string\n            format: uuid\n            example: 4ff1e5cc-9835-40d5-bb18-09fdb118db9c\n      responses:\n        '200':\n          description: A successful request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileObject'\n              example: '{\n                          \"Name\": \"helo-heros.jpg\",\n                          \"MimeType\": \"application/jpg\",\n                          \"Size\": 2878711,\n                          \"CreatedDateUtc\": \"2021-02-10T23:17:50.1930000\",\n                          \"UpdatedDateUtc\": \"2021-02-10T23:58:54.1000000\",\n                          \"User\": {\n                            \"Name\": \"sid.maestre@xero.com\",\n                            \"FirstName\": \"Sidney\",\n                            \"LastName\": \"Maestre\",\n                            \"FullName\": \"Sidney Maestre\",\n                            \"Id\": \"740add2a-a703-4b8a-a670-1093919c2040\"\n                          },\n                          \"FolderId\": \"bf924975-7097-46f2-a143-1ecfbab3c8c3\",\n                          \"Id\": \"efd77bfc-7018-4da1-b251-7aa2d438382c\"\n                        }'\n        '400':\n          description: invalid input, object invalid \n          content:\n            application/json:\n              example: '[\n                          {\n                              \"type\":\"Rename\",\n                              \"title\":\"Rename failed\",\n                              \"detail\":\"Unable to rename efd77bfc-7018-4da1-b251-7aa2d438382c to FooBar\"\n                          }\n                        ]'\n      requestBody:\n        content:\n          application/json:\n              schema:\n                $ref: '#/components/schemas/FileObject'\n              example: '{\n                          \"FolderId\": \"bf924975-7097-46f2-a143-1ecfbab3c8c3\"\n                        }'\n    delete:\n      security:\n        - OAuth2: [files]\n      tags:\n        - Files\n      summary: Deletes a specific file\n      operationId: deleteFile\n      description:  Delete a specific file\n      parameters: \n        - name: FileId\n          x-snake: file_id\n          in: path\n          required: true\n          description: File id for single object\n          schema: \n            type: string\n            format: uuid\n            example: 4ff1e5cc-9835-40d5-bb18-09fdb118db9c\n      responses:\n        '204':\n          description: Successful deletion - return response 204 no content\n          x-isEmpty: true\n  /Files/{FolderId}:\n    parameters:\n      - $ref: '#/components/parameters/requiredHeader'\n    post:\n      security:\n        - OAuth2: [files]\n      tags:\n        - Files\n      summary: Uploads a File to a specific folder\n      operationId: uploadFileToFolder\n      parameters:\n        - in: path\n          x-snake: folder_id\n          name: FolderId\n          required: true\n          description: pass required folder id to save file to specific folder\n          schema:\n            type: string\n            format: uuid\n            example: 4ff1e5cc-9835-40d5-bb18-09fdb118db9c\n      responses:\n        '201':\n          description: A successful request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileObject'\n              example: '{\n                          \"Name\": \"helo-heros.jpg\",\n                          \"MimeType\": \"application/jpg\",\n                          \"Size\": 2878711,\n                          \"CreatedDateUtc\": \"2021-02-10T23:17:50.1930000\",\n                          \"UpdatedDateUtc\": \"2021-02-10T23:17:50.1930000\",\n                          \"User\": {\n                            \"Name\": \"sid.maestre@xero.com\",\n                            \"FirstName\": \"Sidney\",\n                            \"LastName\": \"Maestre\",\n                            \"FullName\": \"Sidney Maestre\",\n                            \"Id\": \"740add2a-a703-4b8a-a670-1093919c2040\"\n                          },\n                          \"FolderId\": \"bf924975-7097-46f2-a143-1ecfbab3c8c3\",\n                          \"Id\": \"22f87409-cdfd-4813-a868-559481bcb052\"\n                        }'\n        '400':\n          description: invalid input, object invalid\n          content:\n            application/json:\n              example: '[\n                      {\n                          \"type\":\"Validation\",\n                          \"title\":\"Validation failure\",\n                          \"detail\":\"Extension: boo is not a valid File extension.\"\n                      }\n                    ]'\n      requestBody:\n        content:\n          multipart/form-data:\n            schema: \n              $ref: '#/components/schemas/UploadObject'\n  /Files/{FileId}/Content:\n    parameters:\n      - $ref: '#/components/parameters/requiredHeader'\n    get:\n      security:\n        - OAuth2: [files, files.read]\n      tags:\n        - Files\n      summary: Retrieves the content of a specific file\n      operationId: getFileContent\n      description:  By passing in the appropriate options, retrieve data for specific file\n      parameters: \n        - name: FileId\n          x-snake: file_id\n          in: path\n          required: true\n          description: File id for single object\n          schema: \n            type: string\n            format: uuid\n            example: 4ff1e5cc-9835-40d5-bb18-09fdb118db9c\n      responses:\n        '200':\n          description: returns the byte array of the specific file based on id\n          content:\n             application/octet-stream:\n              schema:\n                type: string\n                format: binary\n  /Files/{FileId}/Associations:\n    parameters:\n      - $ref: '#/components/parameters/requiredHeader'\n    get:\n      security:\n        - OAuth2: [files, files.read]\n      tags:\n        - Files\n      summary: Retrieves a specific file associations\n      operationId: getFileAssociations\n      description: |\n        By passing in the appropriate options, \n      parameters: \n        - name: FileId\n          x-snake: file_id\n          in: path\n          required: true\n          description: File id for single object\n          schema: \n            type: string\n            format: uuid\n            example: 4ff1e5cc-9835-40d5-bb18-09fdb118db9c\n      responses:\n        '200':\n          description: search results matching criteria\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Association'\n              example: '[\n                          {\n                              \"FileId\":\"6beccb4a-0d7d-4518-93f3-e0cd1dccb254\",\n                              \"ObjectId\":\"1270bf7c-5d18-473a-9231-1e36c4bd33ed\",\n                              \"ObjectType\":\"Business\",\n                              \"ObjectGroup\":\"Contact\"\n                          }\n                        ]'\n    post:\n      security:\n        - OAuth2: [files]\n      tags:\n        - Files\n      summary: Creates a new file association\n      operationId: createFileAssociation\n      description: By passing in the appropriate options, you can create a new folder\n      parameters: \n        - name: FileId\n          x-snake: file_id\n          in: path\n          required: true\n          description: File id for single object\n          schema: \n            type: string\n            format: uuid\n            example: 4ff1e5cc-9835-40d5-bb18-09fdb118db9c\n      responses:\n        '201':\n          description: A successful request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Association'\n              example: '{\n                          \"FileId\": \"6beccb4a-0d7d-4518-93f3-e0cd1dccb254\",\n                          \"ObjectId\": \"1270bf7c-5d18-473a-9231-1e36c4bd33ed\",\n                          \"ObjectType\": \"Business\",\n                          \"ObjectGroup\": \"Contact\"\n                        }'\n        '400':\n          description: invalid input, object invalid\n          content:\n            application/json:\n              example: '[\n                          {\n                              \"type\":\"Validation\",\n                              \"title\":\"Validation failure\",\n                              \"detail\":\"Object is not a Account\"\n                          }\n                        ]'\n      requestBody:\n        content:\n          application/json:\n              schema:\n                $ref: '#/components/schemas/Association'\n              example: '{\n                          \"ObjectId\": \"1270bf7c-5d18-473a-9231-1e36c4bd33ed\",\n                          \"ObjectGroup\": \"Contact\",\n                          \"ObjectType\": \"Business\"\n                        }'\n  /Files/{FileId}/Associations/{ObjectId}:\n    parameters:\n      - $ref: '#/components/parameters/requiredHeader'\n    delete:\n      security:\n        - OAuth2: [files]\n      tags:\n        - Files\n      summary: Deletes an existing file association\n      operationId: deleteFileAssociation\n      description: By passing in the appropriate options, you can create a new folder\n      parameters: \n        - name: FileId\n          x-snake: file_id\n          in: path\n          required: true\n          description: File id for single object\n          schema: \n            type: string\n            format: uuid\n            example: 4ff1e5cc-9835-40d5-bb18-09fdb118db9c\n        - name: ObjectId\n          x-snake: object_id\n          in: path\n          required: true\n          description: Object id for single object\n          schema: \n            type: string\n            format: uuid\n            example: 4ff1e5cc-9835-40d5-bb18-09fdb118db9c\n      responses:\n        '204':\n          description: Successful deletion - return response 204 no content\n          x-isEmpty: true\n  /Associations/{ObjectId}:\n    parameters:\n      - $ref: '#/components/parameters/requiredHeader'\n    get:\n      security:\n        - OAuth2: [files, files.read]\n      tags:\n        - Files\n      summary: Retrieves an association object using a unique object ID\n      operationId: getAssociationsByObject\n      description: By passing in the appropriate options, \n      parameters: \n        - name: ObjectId\n          x-snake: object_id\n          in: path\n          required: true\n          description: Object id for single object\n          schema: \n            type: string\n            format: uuid\n            example: 4ff1e5cc-9835-40d5-bb18-09fdb118db9c\n      responses:\n        '200':\n          description: search results matching criteria\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Association'\n              example: '[\n                          {\n                              \"FileId\":\"6beccb4a-0d7d-4518-93f3-e0cd1dccb254\",\n                              \"ObjectId\":\"1270bf7c-5d18-473a-9231-1e36c4bd33ed\",\n                              \"ObjectType\":\"Business\",\n                              \"ObjectGroup\":\"Contact\"\n                          }\n                        ]'\n  /Folders:\n    parameters:\n      - $ref: '#/components/parameters/requiredHeader'\n    get:\n      security:\n        - OAuth2: [files, files.read]\n      tags:\n        - Files\n      summary: Retrieves folders\n      operationId: getFolders\n      description: By passing in the appropriate options, you can search for\n        available folders\n      parameters:\n        - in: query\n          name: sort\n          description: values to sort by\n          schema:\n            type: string\n            enum: \n            - Name\n            - Size\n            - CreatedDateUTC\n            example: \"CreatedDateUTC DESC\"\n      responses:\n        '200':\n          description: search results matching criteria\n          content:\n            application/json:\n              schema:\n                type: array\n                items: \n                  $ref: '#/components/schemas/Folder'\n              example: '[\n                          {\n                              \"Name\":\"Inbox\",\n                              \"FileCount\":14,\n                              \"Email\":\"xero.inbox.jpf4.6oo29retajkhtfus@xerofiles.com\",\n                              \"IsInbox\":true,\n                              \"Id\":\"bf924975-7097-46f2-a143-1ecfbab3c8c3\"\n                          },\n                          {\n                              \"Name\":\"Contracts\",\n                              \"FileCount\":7,\n                              \"IsInbox\":false,\n                              \"Id\":\"554ff1ad-4b94-4266-9b45-e29bcb75e6bf\"\n                          }\n                        ]'\n    post:\n      security:\n        - OAuth2: [files]\n      tags:\n        - Files\n      summary: Creates a new folder\n      operationId: createFolder\n      description: By passing in the appropriate properties, you can create a new folder\n      responses:\n        '200':\n          description: search results matching criteria\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Folder'\n              example: '{\n                          \"Name\": \"My Docs\",\n                          \"FileCount\": 0,\n                          \"IsInbox\": false,\n                          \"Id\": \"913970ad-8c8e-4666-8294-35b9cac23206\"\n                        }'\n        '400':\n          description: invalid input, object invalid\n          content:\n            application/json:\n              example: '[\n                          {\n                              \"type\":\"Validation\",\n                              \"title\":\"Validation failure\",\n                              \"detail\":\"Name contains one or more bad characters\"\n                          }\n                        ]'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Folder'\n            example: '{\n                        \"Name\": \"My Docs\"\n                      }'  \n  /Folders/{FolderId}:\n    parameters:\n      - $ref: '#/components/parameters/requiredHeader'\n    get:\n      security:\n        - OAuth2: [files, files.read]\n      tags:\n        - Files\n      summary: Retrieves specific folder by using a unique folder ID\n      operationId: getFolder\n      description: By passing in the appropriate ID, you can search for specific folder\n      parameters:\n        - name: FolderId\n          x-snake: folder_id\n          in: path\n          required: true\n          description: Folder id for single object\n          schema: \n            type: string\n            format: uuid\n            example: 4ff1e5cc-9835-40d5-bb18-09fdb118db9c\n      responses:\n        '200':\n          description: search results matching criteria\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Folder'\n              example: '{\n                          \"Name\": \"My Docs\",\n                          \"FileCount\": 0,\n                          \"IsInbox\": false,\n                          \"Id\": \"4c5f3fe4-2516-4863-ac88-3029351773bf\"\n                        }'\n    put:\n      security:\n        - OAuth2: [files]\n      tags:\n        - Files\n      summary: Updates an existing folder\n      operationId: updateFolder\n      description: By passing in the appropriate ID and properties, you can update a folder\n      parameters:\n        - name: FolderId\n          x-snake: folder_id\n          in: path\n          required: true\n          description: Folder id for single object\n          schema: \n            type: string\n            format: uuid\n            example: 4ff1e5cc-9835-40d5-bb18-09fdb118db9c\n      responses:\n        '200':\n          description: return the updated object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Folder'\n              example: '{\n                          \"Name\": \"Your Docs\",\n                          \"FileCount\": 0,\n                          \"IsInbox\": false,\n                          \"Id\": \"4c5f3fe4-2516-4863-ac88-3029351773bf\"\n                        }'\n        '400':\n          description: invalid input, object invalid\n          content:\n            application/json:\n              example: '[\n                          {\n                              \"type\":\"Validation\",\n                              \"title\":\"Validation failure\",\n                              \"detail\":\"Name contains one or more bad characters\"\n                          }\n                        ]'\n      requestBody:\n        required: true\n        content:\n          application/json:\n              schema:\n                $ref: '#/components/schemas/Folder'\n              example: '{\n                          \"Name\": \"Your Docs\"\n                        }'\n    delete:\n      security:\n        - OAuth2: [files]\n      tags:\n        - Files\n      summary: Deletes a folder\n      operationId: deleteFolder\n      description: By passing in the appropriate ID, you can delete a folder\n      parameters:\n        - name: FolderId\n          x-snake: folder_id\n          in: path\n          required: true\n          description: Folder id for single object\n          schema: \n            type: string\n            format: uuid\n            example: 4ff1e5cc-9835-40d5-bb18-09fdb118db9c\n      responses:\n        '204':\n          description: Successful deletion - return response 204 no content\n          x-isEmpty: true\n  /Inbox:\n    parameters:\n      - $ref: '#/components/parameters/requiredHeader'\n    get:\n      security:\n        - OAuth2: [files, files.read]\n      tags:\n        - Files\n      summary: Retrieves inbox folder \n      operationId: getInbox\n      description: Search for the user inbox\n      responses:\n        '200':\n          description: search results matching criteria\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Folder'\n              example: '{\n                          \"Name\": \"Inbox\",\n                          \"FileCount\": 14,\n                          \"Email\": \"xero.inbox.jpf4.6oo29retajkhtfus@xerofiles.com\",\n                          \"IsInbox\": true,\n                          \"Id\": \"bf924975-7097-46f2-a143-1ecfbab3c8c3\"\n                        }'\ncomponents:\n  securitySchemes:\n    OAuth2:\n      type: oauth2\n      description: For more information\n      flows: \n        authorizationCode:\n          authorizationUrl: 'https://login.xero.com/identity/connect/authorize'\n          tokenUrl: 'https://identity.xero.com/connect/token'\n          scopes:\n            email: Grant read-only access to your email\n            openid: Grant read-only access to your open id\n            profile: your profile information\n            files: Grant read-write access to files and folders\n            files.read: Grant read-only access to files and folders\n  parameters:\n    requiredHeader: \n      in: header\n      name: xero-tenant-id\n      x-snake: xero_tenant_id\n      description: Xero identifier for Tenant\n      example: YOUR_XERO_TENANT_ID\n      schema:\n        type: string\n      required: true\n  schemas:\n    Files:\n      type: object\n      properties:\n        TotalCount:\n          type: integer\n          example: 2\n        Page:\n          type: integer\n          example: 1\n        PerPage: \n          type: integer\n          example: 50\n        Items:\n          type: array\n          items:\n            $ref: '#/components/schemas/FileObject'\n    FileObject:\n      type: object\n      required:\n        - id\n        - name\n        - manufacturer\n        - releaseDate\n      properties:\n        Name:\n          description: File Name\n          type: string\n          example: File2.jpg\n        MimeType:\n          description: MimeType of the file (image/png, image/jpeg, application/pdf, etc..)\n          type: string\n          example: image/jpeg \n        Size:\n          description: Numeric value in bytes\n          type: integer\n          example: 3615\n        CreatedDateUtc:\n          description: Created date in UTC\n          type: string\n          example: '2020-12-03T19:04:58.6970000'\n        UpdatedDateUtc:\n          description: Updated date in UTC\n          type: string\n          example: '2020-12-03T19:04:58.6970000'\n        User:\n          $ref: '#/components/schemas/User'\n        Id:\n          description: File object's UUID\n          type: string\n          format: uuid\n          example: d290f1ee-6c54-4b01-90e6-d701748f0851\n        FolderId:\n          description: Folder relation object's UUID\n          type: string\n          format: uuid\n          example: 0f8ccf21-7267-4268-9167-a1e2c40c84c8\n    UploadObject:\n      type: object\n      required:\n        - body\n        - name\n        - filename\n      properties: \n        body:\n          type: string\n          format: byte\n        name:\n          type: string\n          description: exact name of the file you are uploading\n        filename:\n          type: string\n        mimeType:\n          type: string\n    User:\n      required:\n        - Id\n      properties:\n        Id:\n          description: Xero identifier\n          type: string\n          format: uuid\n          example: 4ff1e5cc-9835-40d5-bb18-09fdb118db9c\n        Name:\n          description: Key is Name, but returns Email address of user who created the file\n          type: string\n          example: john.smith@mail.com\n        FirstName:\n          description: First name of user\n          type: string\n          example: John\n        LastName:\n          description: Last name of user\n          type: string\n          example: Smith\n        FullName:\n          description: Last name of user\n          type: string\n          example: Smith\n      type: object\n    Folders:\n      type: object\n      properties:\n        Folders:\n          type: array\n          items:\n            $ref: '#/components/schemas/Folder'\n    Folder:\n      required:\n        - name\n      properties:\n        Name:\n          description: The name of the folder\n          type: string\n          example: assets\n        FileCount:\n          description: The number of files in the folder\n          type: integer\n          example: 5\n        Email:\n          description: The email address used to email files to the inbox. Only the inbox will have this element.\n          type: string\n          example: foo@bar.com\n        IsInbox:\n          description:  to indicate if the folder is the Inbox. The Inbox cannot be renamed or deleted.\n          type: boolean\n          example: true\n        Id:\n          description:  Xero unique identifier for a folder  Files\n          type: string\n          format: uuid\n          example: 4ff1e5cc-9835-40d5-bb18-09fdb118db9c\n    Association:\n      type: object\n      properties:\n        FileId:\n          description: The unique identifier of the file  \n          type: string\n          format: uuid\n        ObjectId:  \n          description: The identifier of the object that the file is being associated with (e.g. InvoiceID, BankTransactionID, ContactID)  \n          type: string\n          format: uuid\n        ObjectGroup:\n          $ref: '#/components/schemas/ObjectGroup'\n        ObjectType:\n          $ref: '#/components/schemas/ObjectType'\n    ObjectGroup:\n      description: The Object Group that the object is in. These roughly correlate to the endpoints that can be used to retrieve the object via the core accounting API. \n      type: string\n      enum:\n      - Account  \n      - BankTransaction\n      - Contact\n      - CreditNote\n      - Invoice\n      - Item\n      - ManualJournal\n      - Overpayment\n      - Payment  \n      - Prepayment\n      - Quote\n      - Receipt\n    ObjectType:\n      description: The Object Type\n      type: string\n      enum:\n      - Unknown\n      - Accpay\n      - AccPayCredit\n      - AccPayPayment\n      - AccRec\n      - AccRecCredit\n      - AccRecPayment\n      - Adjustment\n      - ApCreditPayment\n      - ApOverPayment\n      - ApOverPaymentPayment\n      - ApOverPaymentSourcePayment\n      - ApPrepayment\n      - ApPrepaymentPayment\n      - ApPrepaymentSourcePayment\n      - ArCreditPayment\n      - ArOverPayment\n      - ArOverpaymentPayment\n      - ArOverpaymentSourcePayment\n      - ArPrepayment\n      - ArPrepaymentPayment\n      - ArPrepaymentSourcePayment\n      - CashPaid\n      - CashRec\n      - ExpPayment\n      - ManJournal\n      - PurchaseOrder\n      - Receipt\n      - Transfer\n      - Account\n      - Contact\n      - Business\n      - Employee\n      - Person\n      - User\n      - Org\n      - FixedAsset\n      - PayRun\n      - PriceListItem\n      - Bank\n      - Current\n      - Equity\n      - Expense\n      - Fixed\n      - Liability\n      - Prepayment\n      - Revenue\n      - Sales\n      - Overheads\n      - Depreciatn\n      - OtherIncome\n      - DirectCosts\n      - Currliab\n      - Termliab\n      - NonCurrent\n      - SalesQuote",
			"canonicalURL": "/github.com/XeroAPI/Xero-OpenAPI@36ba3f99bd14a6111b631ae9153811960f272727/-/blob/xero_files.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/XeroAPI/Xero-OpenAPI/blob/36ba3f99bd14a6111b631ae9153811960f272727/xero_files.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: at 1:9355: duplicate path: \"/Files/{FileId}\""
}