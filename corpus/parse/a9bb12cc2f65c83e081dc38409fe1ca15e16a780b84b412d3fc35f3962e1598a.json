{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "npm/stacks/stacks-blockchain-api-types"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi.yaml",
			"byteSize": 108485,
			"content": "openapi: 3.0.2\nservers:\n  - url: https://stacks-node-api.mainnet.stacks.co/\n    description: Mainnet\n  - url: https://stacks-node-api.testnet.stacks.co/\n    description: Testnet\n  - url: http://localhost:3999/\n    description: Local\ninfo:\n  title: Stacks Blockchain API\n  version: 'STACKS_API_VERSION'\n  description: |\n    Welcome to the API reference overview for the \u003ca href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\"\u003eStacks Blockchain API\u003c/a\u003e.\n\n    \u003ca href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\"\u003eDownload Postman collection\u003c/a\u003e\ntags:\n  - name: Accounts\n    description: Read-only endpoints to obtain Stacks account details\n    externalDocs:\n      description: Stacks Documentation - Accounts\n      url: https://docs.stacks.co/understand-stacks/accounts\n  - name: Blocks\n    description: Read-only endpoints to obtain Stacks block details\n  - name: Faucets\n    description: Endpoints to request STX or BTC tokens (not possible on Mainnet)\n  - name: Fees\n    description: Read-only endpoints to obtain fee details\n  - name: Fungible Tokens\n    description: Read-only endpoints to obtain fungible token details\n    externalDocs:\n      description: Stacks Documentation - Tokens\n      url: https://docs.stacks.co/write-smart-contracts/tokens\n  - name: Info\n    description: Read-only endpoints to obtain network, Proof-of-Transfer, Stacking, STX token, and node information\n  - name: Microblocks\n    description: Read-only endpoints to obtain microblocks details\n    externalDocs:\n      description: Stacks Documentation - Microblocks\n      url: https://docs.stacks.co/understand-stacks/microblocks\n  - name: Names\n    description: Read-only endpoints realted to the Blockchain Naming System on Stacks\n    externalDocs:\n      description: Stacks Documentation - Blockchain Naming System\n      url: https://docs.stacks.co/build-apps/references/bns\n  - name: Non-Fungible Tokens\n    description: Read-only endpoints to obtain non-fungible token details\n    externalDocs:\n      description: Stacks Documentation - Tokens\n      url: https://docs.stacks.co/write-smart-contracts/tokens\n  - name: Rosetta\n    description: Endpoints to support the Rosetta API open blockchain standard\n    externalDocs:\n      description: Hiro Documentation - Rosetta Support\n      url: https://docs.hiro.so/get-started/stacks-blockchain-api#rosetta-support\n  - name: Search\n    description: Read-only endpoints to search for accounts, blocks, smart contracts, and transactions\n  - name: Smart Contracts\n    description: Read-only endpoints to obtain Clarity smart contract details\n    externalDocs:\n      description: Stacks Documentation - Clarity Smart Contracts\n      url: https://docs.stacks.co/write-smart-contracts/overview\n  - name: Stacking Rewards\n    description: Read-only endpoints to obtain Stacking reward details\n    externalDocs:\n      description: Stacks Documentation - Stacking\n      url: https://docs.stacks.co/understand-stacks/stacking\n  - name: Transactions\n    description: Endpoints to obtain transaction details and to broadcast transactions to the network\n    externalDocs:\n      description: Hiro Documentation - Transactions\n      url: https://docs.hiro.so/get-started/transactions\n\npaths:\n  /extended/v1/faucets/stx:\n    parameters:\n      - name: address\n        in: query\n        description: A valid testnet STX address\n        required: true\n        schema:\n          type: string\n          example: ST3M7N9Q9HDRM7RVP1Q26P0EE69358PZZAZD7KMXQ\n      - name: stacking\n        in: query\n        description: Request the amount of STX tokens needed for individual address stacking\n        required: false\n        schema:\n          type: boolean\n          default: false\n    post:\n      summary: Get STX testnet tokens\n      description: |\n        Add 500 STX tokens to the specified testnet address. Testnet STX addresses begin with `ST`. If the `stacking`\n        parameter is set to `true`, the faucet will add the required number of tokens for individual stacking to the\n        specified testnet address.\n\n        The endpoint returns the transaction ID, which you can use to view the transaction in the\n        [Stacks Explorer](https://explorer.stacks.co/?chain=testnet). The tokens are delivered once the transaction has\n        been included in an anchor block.\n\n        A common reason for failed faucet transactions is that the faucet has run out of tokens. If you are experiencing\n        failed faucet transactions to a testnet address, you can get help in [Discord](https://stacks.chat).\n\n        **Note:** This is a testnet only endpoint. This endpoint will not work on the mainnet.\n      tags:\n        - Faucets\n      operationId: run_faucet_stx\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                address:\n                  description: STX testnet address\n                  type: string\n                stacking:\n                  description: Use required number of tokens for stacking\n                  type: boolean\n              example:\n                address: ST3M7N9Q9HDRM7RVP1Q26P0EE69358PZZAZD7KMXQ\n                stacking: false\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/faucet/run-faucet.schema.json\n              example:\n                $ref: ./api/faucet/run-faucet.example.json\n        500:\n          description: Faucet call failed\n  /extended/v1/faucets/btc:\n    parameters:\n      - name: address\n        in: query\n        description: A valid testnet BTC address\n        required: true\n        schema:\n          type: string\n          example: 2N4M94S1ZPt8HfxydXzL2P7qyzgVq7MHWts\n    post:\n      summary: Add testnet BTC tokens to address\n      description: |\n        Add 1 BTC token to the specified testnet BTC address.\n\n        The endpoint returns the transaction ID, which you can use to view the transaction in a testnet Bitcoin block\n        explorer. The tokens are delivered once the transaction has been included in a block.\n\n        **Note:** This is a testnet only endpoint. This endpoint will not work on the mainnet.\n      tags:\n        - Faucets\n      operationId: run_faucet_btc\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                address:\n                  description: BTC testnet address\n                  type: string\n              example:\n                address: 2N4M94S1ZPt8HfxydXzL2P7qyzgVq7MHWts\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/faucet/run-faucet.schema.json\n              example:\n                $ref: ./api/faucet/run-faucet.example.json\n        500:\n          description: Faucet call failed\n\n  /extended/v1/tx:\n    get:\n      summary: Get recent transactions\n      tags:\n        - Transactions\n      operationId: get_transaction_list\n      description: |\n        Retrieves all recently mined transactions\n\n        If using TypeScript, import typings for this response from our types package:\n\n        `import type { TransactionResults } from '@stacks/stacks-blockchain-api-types';`\n      parameters:\n        - name: limit\n          in: query\n          description: max number of transactions to fetch\n          required: false\n          schema:\n            type: integer\n            default: 96\n            maximum: 200\n        - name: offset\n          in: query\n          description: index of first transaction to fetch\n          required: false\n          schema:\n            type: integer\n        - name: type\n          in: query\n          description: Filter by transaction type\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n              enum: [coinbase, token_transfer, smart_contract, contract_call, poison_microblock]\n        - name: unanchored\n          in: query\n          description: Include transaction data from unanchored (i.e. unconfirmed) microblocks\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        200:\n          description: List of transactions\n          content:\n            application/json:\n              schema:\n                $ref: ./api/transaction/get-transactions.schema.json\n              example:\n                $ref: ./api/transaction/get-transactions.example.json\n\n  /extended/v1/tx/mempool:\n    get:\n      summary: Get mempool transactions\n      tags:\n        - Transactions\n      operationId: get_mempool_transaction_list\n      description: |\n          Retrieves all transactions that have been recently broadcast to the mempool. These are pending transactions awaiting confirmation.\n\n          If you need to monitor new transactions, we highly recommend subscribing to [WebSockets or Socket.io](https://github.com/hirosystems/stacks-blockchain-api/tree/master/client) for real-time updates.\n      parameters:\n        - name: sender_address\n          in: query\n          description: Filter to only return transactions with this sender address.\n          required: false\n          schema:\n            type: string\n        - name: recipient_address\n          in: query\n          description: Filter to only return transactions with this recipient address (only applicable for STX transfer tx types).\n          required: false\n          schema:\n            type: string\n        - name: address\n          in: query\n          description: Filter to only return transactions with this address as the sender or recipient (recipient only applicable for STX transfer tx types).\n          required: false\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: max number of mempool transactions to fetch\n          required: false\n          schema:\n            type: integer\n            default: 96\n            maximum: 200\n        - name: offset\n          in: query\n          description: index of first mempool transaction to fetch\n          required: false\n          schema:\n            type: integer\n        - name: unanchored\n          in: query\n          description: Include transaction data from unanchored (i.e. unconfirmed) microblocks\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        200:\n          description: List of mempool transactions\n          content:\n            application/json:\n              schema:\n                $ref: ./api/transaction/get-mempool-transactions.schema.json\n              example:\n                $ref: ./api/transaction/get-mempool-transactions.example.json\n\n  /extended/v1/tx/mempool/dropped:\n    get:\n      summary: Get dropped mempool transactions\n      tags:\n        - Transactions\n      operationId: get_dropped_mempool_transaction_list\n      description: |\n        Retrieves all recently-broadcast transactions that have been dropped from the mempool.\n\n        Transactions are dropped from the mempool if:\n         * they were stale and awaiting garbage collection or,\n         * were expensive,  or\n         * were replaced with a new fee\n      parameters:\n        - name: limit\n          in: query\n          description: max number of mempool transactions to fetch\n          required: false\n          schema:\n            type: integer\n            default: 96\n            maximum: 200\n        - name: offset\n          in: query\n          description: index of first mempool transaction to fetch\n          required: false\n          schema:\n            type: integer\n      responses:\n        200:\n          description: List of dropped mempool transactions\n          content:\n            application/json:\n              schema:\n                $ref: ./api/transaction/get-mempool-transactions.schema.json\n              example:\n                $ref: ./api/transaction/get-mempool-transactions.example.json\n\n  /extended/v1/tx/multiple:\n    parameters:\n      - name: tx_id\n        in: query\n        description: Array of transaction ids\n        required: true\n        schema:\n          type: array\n          items:\n            type: string\n      - name: event_offset\n        in: query\n        schema:\n          type: integer\n          default: 0\n        description: The number of events to skip\n      - name: event_limit\n        in: query\n        schema:\n          type: integer\n          default: 96\n        description: The numbers of events to return\n      - name: unanchored\n        in: query\n        description: Include transaction data from unanchored (i.e. unconfirmed) microblocks\n        required: false\n        schema:\n          type: boolean\n          default: false\n    get:\n      summary: Get list of details for transactions\n      tags:\n        - Transactions\n      operationId: get_tx_list_details\n      description: |\n        Retrieves a list of transactions for a given list of transaction IDs\n\n        If using TypeScript, import typings for this response from our types package:\n\n        `import type { Transaction } from '@stacks/stacks-blockchain-api-types';`\n      responses:\n        200:\n          description: Returns list of transactions with their details for corresponding requested tx_ids.\n          content:\n            application/json:\n              schema:\n                $ref: ./entities/transactions/transaction-list.schema.json\n              example:\n                $ref: ./entities/transactions/transactions-list-detail.example.json\n        404:\n          description: Could not find any transaction by ID\n\n  /extended/v1/tx/{tx_id}:\n    parameters:\n      - name: tx_id\n        in: path\n        description: Hash of transaction\n        required: true\n        schema:\n          type: string\n      - name: event_offset\n        in: query\n        schema:\n          type: integer\n          default: 0\n        description: The number of events to skip\n      - name: event_limit\n        in: query\n        schema:\n          type: integer\n          default: 96\n        description: The numbers of events to return\n      - name: unanchored\n        in: query\n        description: Include transaction data from unanchored (i.e. unconfirmed) microblocks\n        required: false\n        schema:\n          type: boolean\n          default: false\n    get:\n      summary: Get transaction\n      tags:\n        - Transactions\n      operationId: get_transaction_by_id\n      description: |\n        Retrieves transaction details for a given transaction ID\n\n        `import type { Transaction } from '@stacks/stacks-blockchain-api-types';`\n      responses:\n        200:\n          description: Transaction\n          content:\n            application/json:\n              schema:\n                $ref: ./entities/transactions/transaction.schema.json\n              example:\n                $ref: ./entities/transactions/transaction-4-coinbase.example.json\n        404:\n          description: Cannot find transaction for given ID\n\n  /extended/v1/tx/{tx_id}/raw:\n    parameters:\n      - name: tx_id\n        in: path\n        description: Hash of transaction\n        required: true\n        schema:\n          type: string\n    get:\n      summary: Get Raw Transaction\n      tags:\n        - Transactions\n      operationId: get_raw_transaction_by_id\n      description: |\n        Retrieves a hex encoded serialized transaction for a given ID\n      responses:\n        200:\n          description: Hex encoded serialized transaction\n          content:\n            application/json:\n              schema:\n                $ref: ./api/transaction/get-raw-transaction.schema.json\n              example:\n                $ref: ./api/transaction/get-raw-transaction.example.json\n        404:\n          description: Cannot find transaction for given ID\n\n  /v2/transactions:\n    post:\n      summary: Broadcast raw transaction\n      tags:\n        - Transactions\n      description: Broadcasts raw transactions on the network. You can use the [@stacks/transactions](https://github.com/blockstack/stacks.js) project to generate a raw transaction payload.\n      operationId: post_core_node_transactions\n      requestBody:\n        content:\n          application/octet-stream:\n            schema:\n              type: string\n              format: binary\n            example: binary format of 00000000010400bed38c2aadffa348931bcb542880ff79d607afec000000000000000000000000000000c800012b0b1fff6cccd0974966dcd665835838f0985be508e1322e09fb3d751eca132c492bda720f9ef1768d14fdabed6127560ba52d5e3ac470dcb60b784e97dc88c9030200000000000516df0ba3e79792be7be5e50a370289accfc8c9e032000000000000303974657374206d656d6f00000000000000000000000000000000000000000000000000\n      responses:\n        200:\n          description: Transaction id of successful post of a raw tx to the node's mempool\n          content:\n            text/plain:\n              schema:\n                type: string\n                example: '\"e161978626f216b2141b156ade10501207ae535fa365a13ef5d7a7c9310a09f2\"'\n        400:\n          description: Rejections result in a 400 error\n          content:\n            application/json:\n              schema:\n                $ref: ./api/transaction/post-core-node-transactions-error.schema.json\n              example:\n                $ref: ./api/transaction/post-core-node-transactions-error.example.json\n\n  /extended/v1/microblock:\n    get:\n      summary: Get recent microblocks\n      tags:\n        - Microblocks\n      operationId: get_microblock_list\n      description: |\n          Retrieves a list of microblocks.\n\n          If you need to actively monitor new microblocks, we highly recommend subscribing to [WebSockets or Socket.io](https://github.com/hirosystems/stacks-blockchain-api/tree/master/client) for real-time updates.\n      parameters:\n        - name: limit\n          in: query\n          description: Max number of microblocks to fetch\n          required: false\n          schema:\n            type: integer\n            default: 20\n            maximum: 200\n        - name: offset\n          in: query\n          description: Index of the first microblock to fetch\n          required: false\n          schema:\n            type: integer\n      responses:\n        200:\n          description: List of microblocks\n          content:\n            application/json:\n              schema:\n                $ref: ./api/microblocks/get-microblocks.schema.json\n\n  /extended/v1/microblock/{hash}:\n    parameters:\n      - name: hash\n        in: path\n        description: Hash of the microblock\n        required: true\n        schema:\n          type: string\n    get:\n      summary: Get microblock\n      description: Retrieves a specific microblock by `hash`\n      tags:\n        - Microblocks\n      operationId: get_microblock_by_hash\n      responses:\n        200:\n          description: Microblock\n          content:\n            application/json:\n              schema:\n                $ref: ./entities/microblocks/microblock.schema.json\n        404:\n          description: Cannot find microblock with given hash\n          content:\n            application/json:\n              example:\n                $ref: ./api/errors/microblock-not-found.example.json\n\n  /extended/v1/microblock/unanchored/txs:\n    get:\n      summary: Get the list of current transactions that belong to unanchored microblocks\n      description: Retrieves transactions that have been streamed in microblocks but not yet accepted or rejected in an anchor block\n      tags:\n        - Microblocks\n      operationId: get_unanchored_txs\n      responses:\n        200:\n          description: Transactions\n          content:\n            application/json:\n              schema:\n                $ref: ./api/microblocks/get-unanchored-txs.schema.json\n\n  /extended/v1/block:\n    get:\n      summary: Get recent blocks\n      description: |\n          Retrieves a list of recently mined blocks\n\n          If you need to actively monitor new blocks, we highly recommend subscribing to [WebSockets or Socket.io](https://github.com/hirosystems/stacks-blockchain-api/tree/master/client) for real-time updates.\n      tags:\n        - Blocks\n      operationId: get_block_list\n      parameters:\n        - name: limit\n          in: query\n          description: max number of blocks to fetch\n          required: false\n          schema:\n            type: integer\n            default: 20\n            maximum: 200\n        - name: offset\n          in: query\n          description: index of first block to fetch\n          required: false\n          schema:\n            type: integer\n      responses:\n        200:\n          description: List of blocks\n          content:\n            application/json:\n              schema:\n                $ref: ./api/blocks/get-blocks.schema.json\n              example:\n                $ref: ./api/blocks/get-blocks.example.json\n  /extended/v1/block/{hash}:\n    parameters:\n      - name: hash\n        in: path\n        description: Hash of the block\n        required: true\n        schema:\n          type: string\n    get:\n      summary: Get block by hash\n      description: Retrieves block details of a specific block for a given chain height\n      tags:\n        - Blocks\n      operationId: get_block_by_hash\n      responses:\n        200:\n          description: Block\n          content:\n            application/json:\n              schema:\n                $ref: ./entities/blocks/block.schema.json\n              example:\n                $ref: ./entities/blocks/block.example.json\n        404:\n          description: Cannot find block with given ID\n          content:\n            application/json:\n              example:\n                $ref: ./api/errors/block-not-found.example.json\n  /extended/v1/block/by_height/{height}:\n    parameters:\n      - name: height\n        in: path\n        description: Height of the block\n        required: true\n        schema:\n          type: number\n    get:\n      summary: Get block by height\n      description: Retrieves block details of a specific block at a given block height\n      tags:\n        - Blocks\n      operationId: get_block_by_height\n      responses:\n        200:\n          description: Block\n          content:\n            application/json:\n              schema:\n                $ref: ./entities/blocks/block.schema.json\n              example:\n                $ref: ./entities/blocks/block.example.json\n        404:\n          description: Cannot find block with given height\n          content:\n            application/json:\n              example:\n                $ref: ./api/errors/block-not-found.example.json\n  /extended/v1/block/by_burn_block_hash/{burn_block_hash}:\n    parameters:\n      - name: burn_block_hash\n        in: path\n        description: Hash of the burnchain block\n        required: true\n        schema:\n          type: string\n    get:\n      summary: Get block by burnchain block hash\n      description: Retrieves block details of a specific block for a given burnchain block hash\n      tags:\n        - Blocks\n      operationId: get_block_by_burn_block_hash\n      responses:\n        200:\n          description: Block\n          content:\n            application/json:\n              schema:\n                $ref: ./entities/blocks/block.schema.json\n              example:\n                $ref: ./entities/blocks/block.example.json\n        404:\n          description: Cannot find block with given height\n          content:\n            application/json:\n              example:\n                $ref: ./api/errors/block-not-found.example.json\n\n  /extended/v1/block/by_burn_block_height/{burn_block_height}:\n    parameters:\n      - name: burn_block_height\n        in: path\n        description: Height of the burn chain block\n        required: true\n        schema:\n          type: number\n    get:\n      summary: Get block by burnchain height\n      description: Retrieves block details of a specific block for a given burn chain height\n      tags:\n        - Blocks\n      operationId: get_block_by_burn_block_height\n      responses:\n        200:\n          description: Block\n          content:\n            application/json:\n              schema:\n                $ref: ./entities/blocks/block.schema.json\n              example:\n                $ref: ./entities/blocks/block.example.json\n        404:\n          description: Cannot find block with given height\n          content:\n            application/json:\n              example:\n                $ref: ./api/errors/block-not-found.example.json\n\n  /extended/v1/burnchain/reward_slot_holders:\n    get:\n      summary: Get recent reward slot holders\n      description: Retrieves a list of the Bitcoin addresses that would validly receive Proof-of-Transfer commitments.\n      tags:\n        - Stacking Rewards\n      operationId: get_burnchain_reward_slot_holders\n      parameters:\n        - name: limit\n          in: query\n          description: max number of items to fetch\n          required: false\n          schema:\n            type: integer\n            default: 96\n            maximum: 250\n        - name: offset\n          in: query\n          description: index of the first items to fetch\n          required: false\n          schema:\n            type: integer\n      responses:\n        200:\n          description: List of burnchain reward recipients and amounts\n          content:\n            application/json:\n              schema:\n                $ref: ./api/burnchain/get-reward-slot-holders.schema.json\n              example:\n                $ref: ./api/burnchain/get-reward-slot-holders.example.json\n\n  /extended/v1/burnchain/reward_slot_holders/{address}:\n    get:\n      summary: Get recent reward slot holder entries for the given address\n      description: Retrieves a list of the Bitcoin addresses that would validly receive Proof-of-Transfer commitments for a given reward slot holder recipient address.\n      tags:\n        - Stacking Rewards\n      operationId: get_burnchain_reward_slot_holders_by_address\n      parameters:\n        - name: address\n          in: path\n          description: Reward slot holder recipient address. Should either be in the native burnchain's format (e.g. B58 for Bitcoin), or if a STX principal address is provided it will be encoded as into the equivalent burnchain format\n          required: true\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: max number of items to fetch\n          required: false\n          schema:\n            type: integer\n        - name: offset\n          in: query\n          description: index of the first items to fetch\n          required: false\n          schema:\n            type: integer\n      responses:\n        200:\n          description: List of burnchain reward recipients and amounts\n          content:\n            application/json:\n              schema:\n                $ref: ./api/burnchain/get-reward-slot-holders.schema.json\n              example:\n                $ref: ./api/burnchain/get-reward-slot-holders.example.json\n\n  /extended/v1/burnchain/rewards:\n    get:\n      summary: Get recent burnchain reward recipients\n      description: Retrieves a list of recent burnchain (e.g. Bitcoin) reward recipients with the associated amounts and block info\n      tags:\n        - Stacking Rewards\n      operationId: get_burnchain_reward_list\n      parameters:\n        - name: limit\n          in: query\n          description: max number of rewards to fetch\n          required: false\n          schema:\n            type: integer\n            default: 96\n            maximum: 250\n        - name: offset\n          in: query\n          description: index of first rewards to fetch\n          required: false\n          schema:\n            type: integer\n      responses:\n        200:\n          description: List of burnchain reward recipients and amounts\n          content:\n            application/json:\n              schema:\n                $ref: ./api/burnchain/get-rewards.schema.json\n              example:\n                $ref: ./api/burnchain/get-rewards.example.json\n  /extended/v1/burnchain/rewards/{address}:\n    get:\n      summary: Get recent burnchain reward for the given recipient\n      description: Retrieves a list of recent burnchain (e.g. Bitcoin) rewards for the given recipient with the associated amounts and block info\n      tags:\n        - Stacking Rewards\n      operationId: get_burnchain_reward_list_by_address\n      parameters:\n        - name: address\n          in: path\n          description: Reward recipient address. Should either be in the native burnchain's format (e.g. B58 for Bitcoin), or if a STX principal address is provided it will be encoded as into the equivalent burnchain format\n          required: true\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: max number of rewards to fetch\n          required: false\n          schema:\n            type: integer\n        - name: offset\n          in: query\n          description: index of first rewards to fetch\n          required: false\n          schema:\n            type: integer\n      responses:\n        200:\n          description: List of burnchain reward recipients and amounts\n          content:\n            application/json:\n              schema:\n                $ref: ./api/burnchain/get-rewards.schema.json\n              example:\n                $ref: ./api/burnchain/get-rewards.example.json\n  /extended/v1/burnchain/rewards/{address}/total:\n    get:\n      summary: Get total burnchain rewards for the given recipient\n      description: Retrieves the total burnchain (e.g. Bitcoin) rewards for a given recipient `address`\n      tags:\n        - Stacking Rewards\n      operationId: get_burnchain_rewards_total_by_address\n      parameters:\n        - name: address\n          in: path\n          description: Reward recipient address. Should either be in the native burnchain's format (e.g. B58 for Bitcoin), or if a STX principal address is provided it will be encoded as into the equivalent burnchain format\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: List of burnchain reward recipients and amounts\n          content:\n            application/json:\n              schema:\n                $ref: ./entities/burnchain/rewards-total.schema.json\n              example:\n                $ref: ./entities/burnchain/rewards-total.example.json\n\n  /extended/v1/contract/{contract_id}:\n    get:\n      summary: Get contract info\n      description: Retrieves details of a contract with a given `contract_id`\n      tags:\n        - Smart Contracts\n      operationId: get_contract_by_id\n      responses:\n        200:\n          description: Contract found\n          content:\n            application/json:\n              schema:\n                $ref: ./entities/transactions/transaction-1-smart-contract.schema.json\n              example:\n                $ref: ./entities/transactions/transaction-1-smart-contract.example.json\n        404:\n          description: Cannot find contract of given ID\n    parameters:\n      - name: contract_id\n        in: path\n        description: Contract identifier formatted as `\u003ccontract_address\u003e.\u003ccontract_name\u003e`\n        required: true\n        schema:\n          type: string\n      - name: unanchored\n        in: query\n        description: Include transaction data from unanchored (i.e. unconfirmed) microblocks\n        required: false\n        schema:\n          type: boolean\n          default: false\n\n  /extended/v1/contract/by_trait:\n    get:\n      summary: Get contracts by trait\n      description: Retrieves a list of contracts based on the following traits listed in JSON format -  functions, variables, maps, fungible tokens and non-fungible tokens\n      tags:\n        - Smart Contracts\n      operationId: get_contracts_by_trait\n      responses:\n        200:\n          description: List of contracts implement given trait\n          content:\n            application/json:\n              schema:\n                $ref: ./api/contract/smart-contract-list-response.schema.json\n              example:\n                $ref: ./api/contract/smart-contract-list-response.example.json\n      parameters:\n        - name: trait_abi\n          in: query\n          description: JSON abi of the trait.\n          required: true\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: max number of contracts fetch\n          required: false\n          schema:\n            type: integer\n        - name: offset\n          in: query\n          description: index of first contract event to fetch\n          required: false\n          schema:\n            type: integer\n\n  /extended/v1/contract/{contract_id}/events:\n    get:\n      summary: Get contract events\n      description: Retrieves a list of events that have been triggered by a given `contract_id`\n      tags:\n        - Smart Contracts\n      operationId: get_contract_events_by_id\n      parameters:\n        - name: contract_id\n          in: path\n          description: Contract identifier formatted as `\u003ccontract_address\u003e.\u003ccontract_name\u003e`\n          required: true\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: max number of contract events to fetch\n          required: false\n          schema:\n            type: integer\n        - name: offset\n          in: query\n          description: index of first contract event to fetch\n          required: false\n          schema:\n            type: integer\n        - name: unanchored\n          in: query\n          description: Include transaction data from unanchored (i.e. unconfirmed) microblocks\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        200:\n          description: List of events\n          content:\n            application/json:\n              schema:\n                $ref: ./entities/transaction-events/transaction-event.schema.json\n              example:\n                $ref: ./entities/transaction-events/transaction-event-smart-contract-log.example.json\n\n  /v2/contracts/interface/{contract_address}/{contract_name}:\n    get:\n      summary: Get contract interface\n      description: Retrieves a contract interface with a given `contract_address` and `contract name`\n      tags:\n        - Smart Contracts\n      operationId: get_contract_interface\n      responses:\n        200:\n          description: Contract interface\n          content:\n            application/json:\n              schema:\n                $ref: ./api/core-node/get-contract-interface.schema.json\n              example:\n                $ref: ./api/core-node/get-contract-interface.example.json\n    parameters:\n      - name: contract_address\n        in: path\n        required: true\n        description: Stacks address\n        schema:\n          type: string\n      - name: contract_name\n        in: path\n        required: true\n        description: Contract name\n        schema:\n          type: string\n      - name: tip\n        in: query\n        schema:\n          type: string\n        description: The Stacks chain tip to query from\n\n  /v2/map_entry/{contract_address}/{contract_name}/{map_name}:\n    post:\n      summary: Get specific data-map inside a contract\n      tags:\n        - Smart Contracts\n      operationId: get_contract_data_map_entry\n      description: |\n        Attempt to fetch data from a contract data map. The contract is identified with Stacks Address `contract_address` and Contract Name `contract_address` in the URL path. The map is identified with [Map Name].\n\n        The key to lookup in the map is supplied via the POST body. This should be supplied as the hex string serialization of the key (which should be a Clarity value). Note, this is a JSON string atom.\n\n        In the response, `data` is the hex serialization of the map response. Note that map responses are Clarity option types, for non-existent values, this is a serialized none, and for all other responses, it is a serialized (some ...) object.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/core-node/get-contract-data-map-entry.schema.json\n              example:\n                $ref: ./api/core-node/get-contract-data-map-entry.example.json\n        400:\n          description: Failed loading data map\n      parameters:\n        - name: contract_address\n          in: path\n          required: true\n          description: Stacks address\n          schema:\n            type: string\n        - name: contract_name\n          in: path\n          required: true\n          description: Contract name\n          schema:\n            type: string\n        - name: map_name\n          in: path\n          required: true\n          description: Map name\n          schema:\n            type: string\n        - name: proof\n          in: query\n          description: Returns object without the proof field when set to 0\n          schema:\n            type: integer\n        - name: tip\n          in: query\n          schema:\n            type: string\n          description: The Stacks chain tip to query from\n      x-codegen-request-body-name: key\n      requestBody:\n        description: Hex string serialization of the lookup key (which should be a Clarity value)\n        required: true\n        content:\n          application/json:\n            schema:\n              type: string\n\n  /v2/contracts/source/{contract_address}/{contract_name}:\n    get:\n      summary: Get contract source\n      tags:\n        - Smart Contracts\n      operationId: get_contract_source\n      description: Retrieves the Clarity source code of a given contract, along with the block height it was published in, and the MARF proof for the data\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/core-node/get-contract-source.schema.json\n              example:\n                $ref: ./api/core-node/get-contract-source.example.json\n    parameters:\n      - name: contract_address\n        in: path\n        required: true\n        description: Stacks address\n        schema:\n          type: string\n      - name: contract_name\n        in: path\n        required: true\n        description: Contract name\n        schema:\n          type: string\n      - name: proof\n        in: query\n        description: Returns object without the proof field if set to 0\n        schema:\n          type: integer\n      - name: tip\n        in: query\n        schema:\n          type: string\n        description: The Stacks chain tip to query from\n        required: false\n\n  /v2/contracts/call-read/{contract_address}/{contract_name}/{function_name}:\n    post:\n      summary: Call read-only function\n      tags:\n        - Smart Contracts\n      operationId: call_read_only_function\n      description: |\n        Call a read-only public function on a given smart contract.\n\n        The smart contract and function are specified using the URL path. The arguments and the simulated tx-sender are supplied via the POST body in the following JSON format:\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/contract/post-call-read-only-fn.schema.json\n              examples:\n                success:\n                  $ref: ./api/contract/post-call-read-only-fn-success.example.json\n                fail:\n                  $ref: ./api/contract/post-call-read-only-fn-fail.example.json\n      parameters:\n        - name: contract_address\n          in: path\n          required: true\n          description: Stacks address\n          schema:\n            type: string\n        - name: contract_name\n          in: path\n          required: true\n          description: Contract name\n          schema:\n            type: string\n        - name: function_name\n          in: path\n          required: true\n          description: Function name\n          schema:\n            type: string\n        - name: tip\n          in: query\n          schema:\n            type: string\n          description: The Stacks chain tip to query from\n          required: false\n      requestBody:\n        description: map of arguments and the simulated tx-sender where sender is either a Contract identifier or a normal Stacks address, and arguments is an array of hex serialized Clarity values.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: './entities/contracts/read-only-function-args.schema.json'\n              example:\n                sender: 'SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info'\n                arguments:\n                  - '0x0011...'\n                  - '0x00231...'\n\n  /extended/v1/address/{principal}/balances:\n    get:\n      summary: Get account balances\n      description: Retrieves total account balance information for a given Address or Contract Identifier. This includes the balances of  STX Tokens, Fungible Tokens and Non-Fungible Tokens for the account.\n      tags:\n        - Accounts\n      operationId: get_account_balance\n      parameters:\n        - name: principal\n          in: path\n          description: Stacks address or a Contract identifier (e.g. `SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info`)\n          required: true\n          schema:\n            type: string\n        - name: unanchored\n          in: query\n          description: Include transaction data from unanchored (i.e. unconfirmed) microblocks\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: until_block\n          in: query\n          description: returned data representing the state up until that point in time, rather than the current block.\n          required: false\n          schema:\n            type: string\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/address/get-address-balances.schema.json\n              example:\n                $ref: ./api/address/get-address-balances.example.json\n\n  /extended/v1/address/{principal}/stx:\n    get:\n      summary: Get account STX balance\n      description: Retrieves STX token balance for a given Address or Contract Identifier.\n      tags:\n        - Accounts\n      operationId: get_account_stx_balance\n      parameters:\n        - name: principal\n          in: path\n          description: Stacks address or a Contract identifier (e.g. `SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info`)\n          required: true\n          schema:\n            type: string\n        - name: unanchored\n          in: query\n          description: Include transaction data from unanchored (i.e. unconfirmed) microblocks\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: until_block\n          in: query\n          description: returned data representing the state up until that point in time, rather than the current block.\n          required: false\n          schema:\n            type: string\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/address/get-address-stx-balance.schema.json\n              example:\n                $ref: ./api/address/get-address-stx-balance.example.json\n\n  /extended/v1/address/{principal}/transactions:\n    get:\n      summary: Get account transactions\n      description: |\n          Retrieves a list of all Transactions for a given Address or Contract Identifier. More information on Transaction types can be found [here](https://docs.stacks.co/understand-stacks/transactions#types).\n\n          If you need to actively monitor new transactions for an address or contract id, we highly recommend subscribing to [WebSockets or Socket.io](https://github.com/hirosystems/stacks-blockchain-api/tree/master/client) for real-time updates.\n      tags:\n        - Accounts\n      operationId: get_account_transactions\n      parameters:\n        - name: principal\n          in: path\n          description: Stacks address or a Contract identifier (e.g. `SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info`)\n          required: true\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: max number of account transactions to fetch\n          required: false\n          schema:\n            type: integer\n        - name: offset\n          in: query\n          description: index of first account transaction to fetch\n          required: false\n          schema:\n            type: integer\n        - name: height\n          in: query\n          description: Filter for transactions only at this given block height\n          required: false\n          schema:\n            type: number\n        - name: unanchored\n          in: query\n          description: Include transaction data from unanchored (i.e. unconfirmed) microblocks\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: until_block\n          in: query\n          description: returned data representing the state up until that point in time, rather than the current block.\n          required: false\n          schema:\n            type: string\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/address/get-address-transactions.schema.json\n              example:\n                $ref: ./api/address/get-address-transactions.example.json\n\n  /extended/v1/address/{principal}/{tx_id}/with_transfers:\n    get:\n      summary: Get account transaction information for specific transaction\n      description: Retrieves transaction details for a given Transcation Id `tx_id`, for a given account or contract Identifier.\n      tags:\n        - Accounts\n      operationId: get_single_transaction_with_transfers\n      parameters:\n        - name: principal\n          in: path\n          description: Stacks address or a contract identifier\n          required: true\n          schema:\n            type: string\n        - name: tx_id\n          in: path\n          description: Transaction id\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./entities/address/transaction-with-transfers.schema.json\n              example:\n                $ref: ./api/address/get-address-single-transaction-with-transfers.example.json\n        404:\n          description: Not found\n          content:\n            application/json:\n              example:\n                $ref: ./api/errors/transaction-not-found.example.json\n\n  /extended/v1/address/{principal}/transactions_with_transfers:\n    get:\n      summary: Get account transactions including STX transfers for each transaction.\n      description: Retrieve all transactions for an account or contract identifier including STX transfers for each transaction.\n      tags:\n        - Accounts\n      operationId: get_account_transactions_with_transfers\n      parameters:\n        - name: principal\n          in: path\n          description: Stacks address or a Contract identifier (e.g. `SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info`)\n          required: true\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: max number of account transactions to fetch\n          required: false\n          schema:\n            type: integer\n        - name: offset\n          in: query\n          description: index of first account transaction to fetch\n          required: false\n          schema:\n            type: integer\n        - name: height\n          in: query\n          description: Filter for transactions only at this given block height\n          required: false\n          schema:\n            type: number\n        - name: unanchored\n          in: query\n          description: Include transaction data from unanchored (i.e. unconfirmed) microblocks\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: until_block\n          in: query\n          description: returned data representing the state up until that point in time, rather than the current block.\n          required: false\n          schema:\n            type: string\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/address/get-address-transactions-with-transfers.schema.json\n              example:\n                $ref: ./api/address/get-address-transactions-with-transfers.example.json\n\n  /extended/v1/address/{principal}/nonces:\n    get:\n      summary: Get the latest nonce used by an account\n      description: Retrieves the latest nonce values used by an account by inspecting the mempool, microblock transactions, and anchored transactions.\n      tags:\n        - Accounts\n      operationId: get_account_nonces\n      parameters:\n        - name: principal\n          in: path\n          description: Stacks address (e.g. `SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0`)\n          required: true\n          schema:\n            type: string\n        - name: block_height\n          in: query\n          description: Optionally get the nonce at a given block height\n          required: false\n          schema:\n            type: number\n        - name: block_hash\n          in: query\n          description: Optionally get the nonce at a given block hash\n          required: false\n          schema:\n            type: string\n\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./entities/address/address-nonces.schema.json\n              example:\n                $ref: ./entities/address/address-nonces.example.json\n\n  /extended/v1/address/{principal}/assets:\n    get:\n      summary: Get account assets\n      description: Retrieves a list of all assets events associated with an account or a Contract Identifier. This includes Transfers, Mints.\n      tags:\n        - Accounts\n      operationId: get_account_assets\n      parameters:\n        - name: principal\n          in: path\n          description: Stacks address or a Contract identifier (e.g. `SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info`)\n          required: true\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: max number of account assets to fetch\n          required: false\n          schema:\n            type: integer\n        - name: offset\n          in: query\n          description: index of first account assets to fetch\n          required: false\n          schema:\n            type: integer\n        - name: unanchored\n          in: query\n          description: Include transaction data from unanchored (i.e. unconfirmed) microblocks\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: until_block\n          in: query\n          description: returned data representing the state at that point in time, rather than the current block.\n          required: false\n          schema:\n            type: string\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/address/get-address-assets.schema.json\n              example:\n                $ref: ./api/address/get-address-assets.example.json\n\n  /extended/v1/address/{principal}/stx_inbound:\n    get:\n      summary: Get inbound STX transfers\n      description: |\n        Retrieves a list of STX transfers with memos to the given principal. This includes regular transfers from a stx-transfer transaction type,\n        and transfers from contract-call transactions a the `send-many-memo` bulk sending contract.\n      tags:\n        - Accounts\n      operationId: get_account_inbound\n      parameters:\n        - name: principal\n          in: path\n          description: Stacks address or a Contract identifier (e.g. `SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info`)\n          required: true\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: number of items to return\n          required: false\n          schema:\n            type: integer\n        - name: offset\n          in: query\n          description: number of items to skip\n          required: false\n          schema:\n            type: integer\n        - name: height\n          in: query\n          description: Filter for transfers only at this given block height\n          required: false\n          schema:\n            type: number\n        - name: unanchored\n          in: query\n          description: Include transaction data from unanchored (i.e. unconfirmed) microblocks\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: until_block\n          in: query\n          description: returned data representing the state up until that point in time, rather than the current block.\n          required: false\n          schema:\n            type: string\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/address/get-address-stx-inbound.schema.json\n              example:\n                $ref: ./api/address/get-address-stx-inbound.example.json\n\n  /extended/v1/address/{principal}/nft_events:\n    get:\n      summary: Get nft events\n      deprecated: true\n      description: |\n        **NOTE:** This endpoint is deprecated in favor of [Non-Fungible Token holdings](#operation/get_nft_holdings).\n\n        Retrieves a list of all nfts owned by an address, contains the clarity value of the identifier of the nft.\n      tags:\n        - Accounts\n      operationId: get_account_nft\n      parameters:\n        - name: principal\n          in: path\n          description: Stacks address or a Contract identifier (e.g. `SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info`)\n          required: true\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: number of items to return\n          required: false\n          schema:\n            type: integer\n        - name: offset\n          in: query\n          description: number of items to skip\n          required: false\n          schema:\n            type: integer\n        - name: unanchored\n          in: query\n          description: Include transaction data from unanchored (i.e. unconfirmed) microblocks\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: until_block\n          in: query\n          description: returned data representing the state up until that point in time, rather than the current block.\n          required: false\n          schema:\n            type: string\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/address/get-address-nft-events.schema.json\n              example:\n                $ref: ./api/address/get-address-nft-events.example.json\n\n  /v2/accounts/{principal}:\n    get:\n      summary: Get account info\n      tags:\n        - Accounts\n      operationId: get_account_info\n      description: |\n        Retrieves the account data for a given Account or a Contract Identifier\n\n        Where balance is the hex encoding of a unsigned 128-bit integer (big-endian), nonce is an unsigned 64-bit integer, and the proofs are provided as hex strings.\n\n        For non-existent accounts, this does not return a 404 error, rather it returns an object with balance and nonce of 0.\n      parameters:\n        - name: principal\n          in: path\n          description: Stacks address or a Contract identifier (e.g. `SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info`)\n          required: true\n          schema:\n            type: string\n        - name: proof\n          in: query\n          description: Returns object without the proof field if set to 0\n          schema:\n            type: integer\n        - name: tip\n          in: query\n          schema:\n            type: string\n          description: The Stacks chain tip to query from\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/core-node/get-account-data.schema.json\n              example:\n                $ref: ./api/core-node/get-account-data.example.json\n\n  /v2/fees/transfer:\n    get:\n      summary: Get estimated fee\n      tags:\n        - Fees\n      operationId: get_fee_transfer\n      description: Retrieves an estimated fee rate for STX transfer transactions. This a a fee rate / byte, and is returned as a JSON integer\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/core-node/get-fee-transfer.schema.json\n              example:\n                $ref: ./api/core-node/get-fee-transfer.example.json\n\n  /v2/info:\n    get:\n      summary: Get Core API info\n      description: Retrieves information about the Core API including the server version\n      tags:\n        - Info\n      operationId: get_core_api_info\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/core-node/get-info.schema.json\n              example:\n                $ref: ./api/core-node/get-info.example.json\n\n  /extended/v1/status:\n    get:\n      summary: API status\n      description: Retrieves the running status of the Stacks Blockchain API, including the server version and current chain tip information.\n      tags:\n        - Info\n      operationId: get_status\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/info/get-status.schema.json\n              example:\n                $ref: ./api/info/get-status.example.json\n\n  /extended/v1/info/network_block_times:\n    get:\n      tags:\n        - Info\n      operationId: get_network_block_times\n      summary: Get the network target block time\n      description: Retrieves the target block times for mainnet and testnet. The block time is hardcoded and will change throughout the implementation phases of the testnet.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              example:\n                $ref: ./api/info/get-network-block-times.example.json\n              schema:\n                $ref: ./api/info/get-network-block-times.schema.json\n  /extended/v1/info/network_block_time/{network}:\n    get:\n      tags:\n        - Info\n      operationId: get_network_block_time_by_network\n      summary: Get a given network's target block time\n      description: Retrieves the target block time for a given network. The network can be\n        mainnet or testnet. The block time is hardcoded and will change\n        throughout the implementation phases of the testnet.\n      parameters:\n        - in: path\n          name: network\n          required: true\n          schema:\n            type: string\n            enum: [testnet, mainnet]\n          description: Which network to retrieve the target block time of\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              example:\n                $ref: ./api/info/get-network-block-time-by-network.example.json\n              schema:\n                $ref: ./api/info/get-network-block-time-by-network.schema.json\n\n  /extended/v1/stx_supply:\n    get:\n      tags:\n        - Info\n      operationId: get_stx_supply\n      summary: Get total and unlocked STX supply\n      description: Retrieves the total and unlocked STX supply. More information on Stacking can be found [here] (https://docs.stacks.co/understand-stacks/stacking).\n      parameters:\n        - in: query\n          name: height\n          required: false\n          schema:\n            type: number\n          description: The block height at which to query supply details from, if not provided then the latest block height is used\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              example:\n                $ref: ./api/info/get-stx-supply.example.json\n              schema:\n                $ref: ./api/info/get-stx-supply.schema.json\n\n  /extended/v1/stx_supply/total/plain:\n    get:\n      tags:\n        - Info\n      operationId: get_stx_supply_total_supply_plain\n      summary: Get total STX supply in plain text format\n      description: Retrieves the total supply for STX tokens as plain text.\n      responses:\n        200:\n          description: success\n          content:\n            text/plain:\n              example: '123.456789'\n              schema:\n                $ref: ./api/info/get-stx-supply-total-plain.schema.json\n\n  /extended/v1/stx_supply/circulating/plain:\n    get:\n      tags:\n        - Info\n      operationId: get_stx_supply_circulating_plain\n      summary: Get circulating STX supply in plain text format\n      description: Retrieves the STX tokens currently in circulation that have been unlocked as plain text.\n      responses:\n        200:\n          description: success\n          content:\n            text/plain:\n              example: '123.456789'\n              schema:\n                $ref: ./api/info/get-stx-supply-circulating-plain.schema.json\n\n  /extended/v1/stx_supply/legacy_format:\n    get:\n      tags:\n        - Info\n      operationId: get_total_stx_supply_legacy_format\n      summary: Get total and unlocked STX supply (results formatted the same as the legacy 1.0 API)\n      description: Retrieves total supply of STX tokens including those currently in circulation that have been unlocked.\n      parameters:\n        - in: query\n          name: height\n          required: false\n          schema:\n            type: number\n          description: The block height at which to query supply details from, if not provided then the latest block height is used\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              example:\n                $ref: ./api/info/get-stx-supply-legacy-format.example.json\n              schema:\n                $ref: ./api/info/get-stx-supply-legacy-format.schema.json\n\n  /v2/pox:\n    get:\n      summary: Get Proof-of-Transfer details\n      description: Retrieves Proof-of-Transfer (PoX) information. Can be used for Stacking.\n      tags:\n        - Info\n      operationId: get_pox_info\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/core-node/get-pox.schema.json\n              example:\n                $ref: ./api/core-node/get-pox.example.json\n\n  /extended/v1/search/{id}:\n    get:\n      summary: Search\n      description: Search blocks, transactions, contracts, or accounts by hash/ID\n      tags:\n        - Search\n      parameters:\n        - in: path\n          name: id\n          required: true\n          schema:\n            type: string\n          description: The hex hash string for a block or transaction, account address, or contract address\n        - in: query\n          name: include_metadata\n          schema:\n            type: boolean\n          description: This includes the detailed data for purticular hash in the response\n      operationId: search_by_id\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/search/search.schema.json\n              example:\n                $ref: ./api/search/search-contract.example.json\n        404:\n          description: Not found\n          content:\n            application/json:\n              example:\n                $ref: ./api/errors/search-not-found.example.json\n\n  /rosetta/v1/network/list:\n    post:\n      tags:\n        - Rosetta\n      summary: Get List of Available Networks\n      operationId: rosetta_network_list\n      description: Retrieves a list of NetworkIdentifiers that the Rosetta server supports.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/rosetta/rosetta-network-list-response.schema.json\n        400:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: ./entities/rosetta/rosetta-error.schema.json\n\n  /rosetta/v1/network/options:\n    post:\n      tags:\n        - Rosetta\n      summary: Get Network Options\n      operationId: rosetta_network_options\n      description: |\n        Retrieves the version information and allowed network-specific types for a NetworkIdentifier.\n        Any NetworkIdentifier returned by /network/list should be accessible here.\n        Because options are retrievable in the context of a NetworkIdentifier, it is possible to define unique options for each network.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/rosetta/rosetta-network-options-response.schema.json\n        400:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: ./entities/rosetta/rosetta-error.schema.json\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: ./api/rosetta/rosetta-network-options-request.schema.json\n\n  /rosetta/v1/network/status:\n    post:\n      tags:\n        - Rosetta\n      summary: Get Network Status\n      operationId: rosetta_network_status\n      description: |\n        Retrieves the current status of the network requested.\n        Any NetworkIdentifier returned by /network/list should be accessible here.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/rosetta/rosetta-network-status-response.schema.json\n        400:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: ./entities/rosetta/rosetta-error.schema.json\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: ./api/rosetta/rosetta-network-status-request.schema.json\n\n  /rosetta/v1/account/balance:\n    post:\n      tags:\n        - Rosetta\n      summary: Get an Account Balance\n      operationId: rosetta_account_balance\n      description: |\n        An AccountBalanceRequest is utilized to make a balance request on the /account/balance endpoint.\n        If the block_identifier is populated, a historical balance query should be performed.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/rosetta/rosetta-account-response.schema.json\n        400:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: ./entities/rosetta/rosetta-error.schema.json\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: ./api/rosetta/rosetta-account-balance-request.schema.json\n\n  /rosetta/v1/block:\n    post:\n      tags:\n        - Rosetta\n      summary: Get a Block\n      operationId: rosetta_block\n      description: Retrieves the Block information for a given block identifier including a list of all transactions in the block.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/rosetta/rosetta-block-response.schema.json\n        400:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: ./entities/rosetta/rosetta-error.schema.json\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: ./api/rosetta/rosetta-block-request.schema.json\n\n  /rosetta/v1/block/transaction:\n    post:\n      tags:\n        - Rosetta\n      summary: Get a Block Transaction\n      operationId: rosetta_block_transaction\n      description: Retrieves a Transaction included in a block that is not returned in a BlockResponse.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/rosetta/rosetta-block-transaction-response.schema.json\n        400:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: ./entities/rosetta/rosetta-error.schema.json\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: ./api/rosetta/rosetta-block-transaction-request.schema.json\n\n  /rosetta/v1/mempool:\n    post:\n      tags:\n        - Rosetta\n      summary: Get All Mempool Transactions\n      operationId: rosetta_mempool\n      description: Retrieves a list of transcations currently in the mempool for a given network.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/rosetta/rosetta-mempool-response.schema.json\n        400:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: ./entities/rosetta/rosetta-error.schema.json\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: ./api/rosetta/rosetta-mempool-request.schema.json\n\n  /rosetta/v1/mempool/transaction:\n    post:\n      tags:\n        - Rosetta\n      summary: Get a Mempool Transaction\n      operationId: rosetta_mempool_transaction\n      description: Retrieves transaction details from the mempool for a given transaction id from a given network.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/rosetta/rosetta-mempool-transaction-response.schema.json\n        400:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: ./entities/rosetta/rosetta-error.schema.json\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: ./api/rosetta/rosetta-mempool-transaction-request.schema.json\n\n  /rosetta/v1/construction/derive:\n    post:\n      tags:\n        - Rosetta\n      summary: Derive an AccountIdentifier from a PublicKey\n      operationId: rosetta_construction_derive\n      description: Retrieves the Account Identifier information based on a Public Key for a given network\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/rosetta/rosetta-construction-derive-response.schema.json\n        400:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: ./entities/rosetta/rosetta-error.schema.json\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: ./api/rosetta/rosetta-construction-derive-request.schema.json\n\n  /rosetta/v1/construction/hash:\n    post:\n      tags:\n        - Rosetta\n      summary: Get the Hash of a Signed Transaction\n      operationId: rosetta_construction_hash\n      description: Retrieves the network-specific transaction hash for a signed transaction.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/rosetta/rosetta-construction-hash-response.schema.json\n        400:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: ./entities/rosetta/rosetta-error.schema.json\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: ./api/rosetta/rosetta-construction-hash-request.schema.json\n\n  /rosetta/v1/construction/metadata:\n    post:\n      tags:\n        - Rosetta\n      summary: Get Metadata for Transaction Construction\n      operationId: rosetta_construction_metadata\n      description: To Do\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/rosetta/rosetta-construction-metadata-response.schema.json\n        400:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: ./entities/rosetta/rosetta-error.schema.json\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: ./api/rosetta/rosetta-construction-metadata-request.schema.json\n\n  /rosetta/v1/construction/parse:\n    post:\n      tags:\n        - Rosetta\n      summary: Parse a Transaction\n      operationId: rosetta_construction_parse\n      description: TODO\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/rosetta/rosetta-construction-parse-response.schema.json\n        400:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: ./entities/rosetta/rosetta-error.schema.json\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: ./api/rosetta/rosetta-construction-parse-request.schema.json\n\n  /rosetta/v1/construction/preprocess:\n    post:\n      tags:\n        - Rosetta\n      summary: Create a Request to Fetch Metadata\n      operationId: rosetta_construction_preprocess\n      description: TODO\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/rosetta/rosetta-construction-preprocess-response.schema.json\n        400:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: ./entities/rosetta/rosetta-error.schema.json\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: ./api/rosetta/rosetta-construction-preprocess-request.schema.json\n\n  /rosetta/v1/construction/submit:\n    post:\n      tags:\n        - Rosetta\n      summary: Submit a Signed Transaction\n      operationId: rosetta_construction_submit\n      description: Submit a pre-signed transaction to the node.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/rosetta/rosetta-construction-submit-response.schema.json\n        400:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: ./entities/rosetta/rosetta-error.schema.json\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: ./api/rosetta/rosetta-construction-submit-request.schema.json\n\n  /rosetta/v1/construction/payloads:\n    post:\n      tags:\n        - Rosetta\n      summary: Generate an Unsigned Transaction and Signing Payloads\n      operationId: rosetta_construction_payloads\n      description: Generate and unsigned transaction from operations and metadata\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/rosetta/rosetta-construction-payloads-response.schema.json\n        400:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: ./entities/rosetta/rosetta-error.schema.json\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: ./api/rosetta/rosetta-construction-payloads-request.schema.json\n\n  /rosetta/v1/construction/combine:\n    post:\n      tags:\n        - Rosetta\n      summary: Create Network Transaction from Signatures\n      operationId: rosetta_construction_combine\n      description: Take unsigned transaction and signature, combine both and return signed transaction\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/rosetta/rosetta-construction-combine-response.schema.json\n        400:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: ./entities/rosetta/rosetta-error.schema.json\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: ./api/rosetta/rosetta-construction-combine-request.schema.json\n\n  /v2/prices/namespaces/{tld}:\n    get:\n      summary: Get Namespace Price\n      description: Retrieves the price of a namespace. The `amount` given will be in the smallest possible units of the currency.\n      tags:\n        - Names\n      operationId: get_namespace_price\n      parameters:\n        - name: tld\n          in: path\n          description: the namespace to fetch price for\n          required: true\n          example: id\n          schema:\n            type: string\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/bns/namespace-operations/bns-get-namespace-price-response.schema.json\n              example:\n                $ref: ./api/bns/namespace-operations/bns-get-namespace-price-response.example.json\n\n  /v2/prices/names/{name}:\n    get:\n      summary: Get Name Price\n      description: Retrieves the price of a name. The `amount` given will be in the smallest possible units of the currency.\n      tags:\n        - Names\n      operationId: get_name_price\n      parameters:\n        - name: name\n          in: path\n          description: the name to query price information for\n          required: true\n          example: muneeb.id\n          schema:\n            type: string\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/bns/name-querying/bns-get-name-price-response.schema.json\n              example:\n                $ref: ./api/bns/name-querying/bns-get-name-price-response.example.json\n\n  /v1/namespaces:\n    get:\n      summary: Get All Namespaces\n      description: Retrieves a list of all namespaces known to the node.\n      tags:\n        - Names\n      operationId: get_all_namespaces\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/bns/namespace-operations/bns-get-all-namespaces-response.schema.json\n              example:\n                $ref: ./api/bns/namespace-operations/bns-get-all-namespaces-response.example.json\n\n  /v1/namespaces/{tld}/names:\n    get:\n      summary: Get Namespace Names\n      description: Retrieves a list of names within a given namespace.\n      tags:\n        - Names\n      operationId: get_namespace_names\n      parameters:\n        - name: tld\n          in: path\n          description: the namespace to fetch names from\n          required: true\n          example: id\n          schema:\n            type: string\n        - name: page\n          in: query\n          description: names are returned in pages of size 100, so specify the page number.\n          required: true\n          example: 23\n          schema:\n            type: integer\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/bns/namespace-operations/bns-get-all-namespaces-names-response.schema.json\n              example:\n                $ref: ./api/bns/namespace-operations/bns-get-all-namespaces-names-response.example.json\n        400:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: ./api/bns/errors/bns-error.schema.json\n              example:\n                $ref: ./api/bns/errors/bns-invalid-page.example.json\n        404:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: ./api/bns/errors/bns-error.schema.json\n              example:\n                $ref: ./api/bns/errors/bns-no-such-namespace.example.json\n\n  /v1/names:\n    get:\n      summary: Get All Names\n      description: Retrieves a list of all names known to the node.\n      tags:\n        - Names\n      operationId: get_all_names\n      parameters:\n        - name: page\n          in: query\n          description: names are returned in pages of size 100, so specify the page number.\n          required: true\n          example: 23\n          schema:\n            type: integer\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/bns/name-querying/bns-get-all-names-response.schema.json\n              example:\n                $ref: ./api/bns/name-querying/bns-get-all-names-response.example.json\n        400:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: ./api/bns/errors/bns-error.schema.json\n              example:\n                $ref: ./api/bns/errors/bns-invalid-page.example.json\n\n  /v1/names/{name}:\n    get:\n      summary: Get Name Details\n      description: Retrieves details of a given name including the `address`, `status` and last transaction id - `last_txid`.\n      tags:\n        - Names\n      operationId: get_name_info\n      parameters:\n        - name: name\n          in: path\n          description: fully-qualified name\n          required: true\n          example: muneeb.id\n          schema:\n            type: string\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/bns/name-querying/bns-get-name-info.response.schema.json\n              example:\n                $ref: ./api/bns/name-querying/bns-get-name-info.response.example.json\n        400:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: ./api/bns/errors/bns-error.schema.json\n              example:\n                $ref: ./api/bns/errors/bns-invalid-name-subdomain.example.json\n        404:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: ./api/bns/errors/bns-error.schema.json\n              example:\n                $ref: ./api/bns/errors/bns-no-such-name.example.json\n\n  /v1/names/{name}/history:\n    get:\n      summary: Get Name History\n      description: Retrieves a history of all blockchain records of a registered name.\n      tags:\n        - Names\n      operationId: get_name_history\n      parameters:\n        - name: name\n          in: path\n          description: name to query\n          required: true\n          example: muneeb.id\n          schema:\n            type: string\n        - name: page\n          in: query\n          description: the page (in 20-entry pages) of the history to fetch\n          required: true\n          example: 0\n          schema:\n            type: integer\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/bns/name-querying/bns-get-name-history-response.schema.json\n              example:\n                $ref: ./api/bns/name-querying/bns-get-name-history-response.example.json\n        400:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: ./api/bns/errors/bns-error.schema.json\n              example:\n                $ref: ./api/bns/errors/bns-invalid-page.example.json\n        404:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: ./api/bns/errors/bns-error.schema.json\n              example:\n                $ref: ./api/bns/errors/bns-no-such-name.example.json\n\n  /v1/names/{name}/zonefile:\n    get:\n      summary: Get Zone File\n      description: Retrieves a user’s raw zone file. This only works for RFC-compliant zone files. This method returns an error for names that have non-standard zone files.\n      tags:\n        - Names\n      operationId: fetch_zone_file\n      parameters:\n        - name: name\n          in: path\n          description: fully-qualified name\n          required: true\n          example: bar.test\n          schema:\n            type: string\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/bns/manage-names/bns-fetch-zone-file-response.schema.json\n              example:\n                $ref: ./api/bns/manage-names/bns-fetch-zone-file-response.example.json\n        400:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: ./api/bns/errors/bns-error.schema.json\n              example:\n                $ref: ./api/bns/errors/bns-invalid-name-subdomain.example.json\n        404:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: ./api/bns/errors/bns-error.schema.json\n              example:\n                $ref: ./api/bns/errors/bns-no-zone-file.example.json\n\n  /v1/names/{name}/zonefile/{zoneFileHash}:\n    get:\n      summary: Get Historical Zone File\n      description: Retrieves the historical zonefile specified by the username and zone hash.\n      tags:\n        - Names\n      operationId: get_historical_zone_file\n      parameters:\n        - name: name\n          in: path\n          description: fully-qualified name\n          required: true\n          example: muneeb.id\n          schema:\n            type: string\n        - name: zoneFileHash\n          in: path\n          description: zone file hash\n          required: true\n          example: b100a68235244b012854a95f9114695679002af9\n          schema:\n            type: string\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/bns/name-querying/bns-get-historical-zone-file-response.schema.json\n              example:\n                $ref: ./api/bns/name-querying/bns-get-historical-zone-file-response.example.json\n        400:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: ./api/bns/errors/bns-error.schema.json\n              example:\n                $ref: ./api/bns/errors/bns-invalid-name-subdomain.example.json\n        404:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: ./api/bns/errors/bns-error.schema.json\n              example:\n                $ref: ./api/bns/errors/bns-no-zone-file.example.json\n\n  /v1/addresses/{blockchain}/{address}:\n    get:\n      summary: Get Names Owned by Address\n      description: Retrieves a list of names owned by the address provided.\n      tags:\n        - Names\n      operationId: get_names_owned_by_address\n      parameters:\n        - name: blockchain\n          in: path\n          description: the layer-1 blockchain for the address\n          required: true\n          example: bitcoin\n          schema:\n            type: string\n        - name: address\n          in: path\n          description: the address to lookup\n          required: true\n          example: 1QJQxDas5JhdiXhEbNS14iNjr8auFT96GP\n          schema:\n            type: string\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/bns/name-querying/bns-get-names-owned-by-address-response.schema.json\n              example:\n                $ref: ./api/bns/name-querying/bns-get-names-owned-by-address-response.example.json\n        404:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: ./api/bns/errors/bns-error.schema.json\n              example:\n                $ref: ./api/bns/errors/bns-unsupported-blockchain.example.json\n\n#  /v1/subdomains:\n#    get:\n#      summary: Get All Subdomains\n#      description: Retrieves a list of all subdomains known to the node.\n#      tags:\n#        - Names\n#      operationId: get_all_subdomains\n#      parameters:\n#        - name: page\n#          in: query\n#          description: names are returned in pages of size 100, so specify the page number.\n#          required: true\n#          example: 3\n#          schema:\n#            type: integer\n#      responses:\n#        200:\n#          description: Success\n#          content:\n#            application/json:\n#              schema:\n#                $ref: ./api/bns/name-querying/bns-get-all-subdomains-response.schema.json\n#              example:\n#                $ref: ./api/bns/name-querying/bns-get-all-subdomains-response.example.json\n#        400:\n#          description: Error\n#          content:\n#            application/json:\n#              schema:\n#                $ref: ./api/bns/errors/bns-error.schema.json\n#              example:\n#                $ref: ./api/bns/errors/bns-invalid-page.example.json\n#\n#  /v1/subdomains/{txid}:\n#    get:\n#      summary: Get Subdomain at Transaction\n#      description: Retrieves the list of subdomain operations processed by a given transaction. The returned array includes subdomain operations that have not yet been accepted as part of any subdomain’s history (checkable via the accepted field). If the given transaction ID does not correspond to a Stacks transaction that introduced new subdomain operations, and empty array will be returned.\n#      tags:\n#        - Names\n#      operationId: get_subdomain_at_transaction\n#      parameters:\n#        - name: txid\n#          in: path\n#          description: transaction id\n#          required: true\n#          example: d04d708472ea3c147f50e43264efdb1535f71974053126dc4db67b3ac19d41fe\n#          schema:\n#            type: string\n#      responses:\n#        200:\n#          description: Success\n#          content:\n#            application/json:\n#              schema:\n#                $ref: ./api/bns/name-querying/bns-get-subdomain-at-tx-response.schema.json\n#              example:\n#                $ref: ./api/bns/name-querying/bns-get-subdomain-at-tx-response.example.json\n#        400:\n#          description: Error\n#          content:\n#            application/json:\n#              schema:\n#                $ref: ./api/bns/errors/bns-error.schema.json\n#              example:\n#                $ref: ./api/bns/errors/bns-invalid-tx-id.example.json\n\n  /extended/v1/tx/block/{block_hash}:\n    get:\n      operationId: get_transactions_by_block_hash\n      summary: Transactions by block hash\n      description: Retrieves a list of all transactions within a block for a given block hash.\n      tags:\n        - Transactions\n      parameters:\n        - name: block_hash\n          in: path\n          description: Hash of block\n          required: true\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: max number of transactions to fetch\n          required: false\n          schema:\n            type: integer\n        - name: offset\n          in: query\n          description: index of first transaction to fetch\n          required: false\n          schema:\n            type: integer\n      responses:\n        200:\n          description: List of Transactions\n          content:\n            application/json:\n              schema:\n                $ref: ./api/transaction/get-transactions.schema.json\n              example:\n                $ref: ./api/transaction/get-transactions.example.json\n\n  /extended/v1/tx/block_height/{height}:\n    get:\n      operationId: get_transactions_by_block_height\n      summary: Transactions by block height\n      description: Retrieves all transactions within a block at a given height\n      tags:\n        - Transactions\n      parameters:\n        - name: height\n          in: path\n          description: Height of block\n          required: true\n          schema:\n            type: integer\n        - name: limit\n          in: query\n          description: max number of transactions to fetch\n          required: false\n          schema:\n            type: integer\n        - name: offset\n          in: query\n          description: index of first transaction to fetch\n          required: false\n          schema:\n            type: integer\n        - name: unanchored\n          in: query\n          description: Include transaction data from unanchored (i.e. unconfirmed) microblocks\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        200:\n          description: List of Transactions\n          content:\n            application/json:\n              schema:\n                $ref: ./api/transaction/get-transactions.schema.json\n              example:\n                $ref: ./api/transaction/get-transactions.example.json\n\n  /extended/v1/address/{address}/mempool:\n    get:\n      operationId: get_address_mempool_transactions\n      summary: Transactions for address\n      description: Retrieves all transactions for a given address that are currently in mempool\n      tags:\n        - Transactions\n      parameters:\n        - name: address\n          in: path\n          description: Transactions for the address\n          required: true\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: max number of transactions to fetch\n          required: false\n          schema:\n            type: integer\n        - name: offset\n          in: query\n          description: index of first transaction to fetch\n          required: false\n          schema:\n            type: integer\n        - name: unanchored\n          in: query\n          description: Include transaction data from unanchored (i.e. unconfirmed) microblocks\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        200:\n          description: List of Transactions\n          content:\n            application/json:\n              schema:\n                $ref: ./api/transaction/get-mempool-transactions.schema.json\n              example:\n                $ref: ./api/transaction/get-mempool-transactions.example.json\n\n  /extended/v1/tokens/ft/metadata:\n    get:\n      operationId: get_ft_metadata_list\n      summary: Fungible tokens metadata list\n      description: Retrieves list of fungible tokens with their metadata. More information on Fungible Tokens on the Stacks blockchain can be found [here](https://docs.stacks.co/write-smart-contracts/tokens#fungible-tokens).\n      tags:\n        - Fungible Tokens\n      parameters:\n        - name: limit\n          in: query\n          description: max number of tokens to fetch\n          required: false\n          schema:\n            type: integer\n        - name: offset\n          in: query\n          description: index of first tokens to fetch\n          required: false\n          schema:\n            type: integer\n      responses:\n        200:\n          description: List of fungible tokens metadata\n          content:\n            application/json:\n              schema:\n                $ref: ./api/tokens/get-fungible-tokens-metadata-list.schema.json\n              example:\n                $ref: ./api/tokens/get-fungible-tokens-metadata-list.example.schema.json\n\n  /extended/v1/tokens/nft/holdings:\n    get:\n      operationId: get_nft_holdings\n      summary: Non-Fungible Token holdings\n      description: |\n        Retrieves the list of Non-Fungible Tokens owned by the given principal (STX address or Smart Contract ID).\n        Results can be filtered by one or more asset identifiers and can include metadata about the transaction that made the principal own each token.\n\n        More information on Non-Fungible Tokens on the Stacks blockchain can be found [here](https://docs.stacks.co/write-smart-contracts/tokens#non-fungible-tokens-nfts).\n      tags:\n        - Non-Fungible Tokens\n      parameters:\n        - name: principal\n          in: query\n          description: token owner's STX address or Smart Contract ID\n          required: true\n          example: SPNWZ5V2TPWGQGVDR6T7B6RQ4XMGZ4PXTEE0VQ0S.marketplace-v3\n          schema:\n            type: string\n        - name: asset_identifiers\n          in: query\n          description: identifiers of the token asset classes to filter for\n          required: false\n          example: SPQZF23W7SEYBFG5JQ496NMY0G7379SRYEDREMSV.Candy::candy\n          schema:\n            type: array\n            items:\n              type: string\n        - name: limit\n          in: query\n          description: max number of tokens to fetch\n          required: false\n          schema:\n            type: integer\n            default: 50\n        - name: offset\n          in: query\n          description: index of first tokens to fetch\n          required: false\n          schema:\n            type: integer\n            default: 0\n        - name: unanchored\n          in: query\n          description: whether or not to include tokens from unconfirmed transactions\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: tx_metadata\n          in: query\n          description: whether or not to include the complete transaction metadata instead of just `tx_id`. Enabling this option can affect performance and response times.\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        200:\n          description: List of Non-Fungible Token holdings\n          content:\n            application/json:\n              schema:\n                $ref: ./api/tokens/get-non-fungible-token-holdings.schema.json\n              examples:\n                default:\n                  value:\n                    $ref: ./api/tokens/get-non-fungible-token-holdings.example.schema.json\n                with transaction metadata:\n                  value:\n                    $ref: ./api/tokens/get-non-fungible-token-holdings-tx-metadata.example.schema.json\n\n  /extended/v1/tokens/nft/history:\n    get:\n      operationId: get_nft_history\n      summary: Non-Fungible Token history\n      description: |\n        Retrieves all events relevant to a Non-Fungible Token. Useful to determine the ownership history of a particular asset.\n\n        More information on Non-Fungible Tokens on the Stacks blockchain can be found [here](https://docs.stacks.co/write-smart-contracts/tokens#non-fungible-tokens-nfts).\n      tags:\n        - Non-Fungible Tokens\n      parameters:\n        - name: asset_identifier\n          in: query\n          description: token asset class identifier\n          required: true\n          example: SP2X0TZ59D5SZ8ACQ6YMCHHNR2ZN51Z32E2CJ173.the-explorer-guild::The-Explorer-Guild\n          schema:\n            type: string\n        - name: value\n          in: query\n          description: hex representation of the token's unique value\n          required: true\n          example: '0x0100000000000000000000000000000803'\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: max number of events to fetch\n          required: false\n          schema:\n            type: integer\n            default: 50\n        - name: offset\n          in: query\n          description: index of first event to fetch\n          required: false\n          schema:\n            type: integer\n            default: 0\n        - name: unanchored\n          in: query\n          description: whether or not to include events from unconfirmed transactions\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: tx_metadata\n          in: query\n          description: whether or not to include the complete transaction metadata instead of just `tx_id`. Enabling this option can affect performance and response times.\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        200:\n          description: Non-Fungible Token event history\n          content:\n            application/json:\n              schema:\n                $ref: ./api/tokens/get-non-fungible-token-history.schema.json\n              examples:\n                default:\n                  value:\n                    $ref: ./api/tokens/get-non-fungible-token-history.example.schema.json\n                with transaction metadata:\n                  value:\n                    $ref: ./api/tokens/get-non-fungible-token-history-tx-metadata.example.schema.json\n  \n  /extended/v1/tokens/nft/mints:\n    get:\n      operationId: get_nft_mints\n      summary: Non-Fungible Token mints\n      description: |\n        Retrieves all mint events for a Non-Fungible Token asset class. Useful to determine which NFTs of a particular collection have been claimed.\n\n        More information on Non-Fungible Tokens on the Stacks blockchain can be found [here](https://docs.stacks.co/write-smart-contracts/tokens#non-fungible-tokens-nfts).\n      tags:\n        - Non-Fungible Tokens\n      parameters:\n        - name: asset_identifier\n          in: query\n          description: token asset class identifier\n          required: true\n          example: SP2X0TZ59D5SZ8ACQ6YMCHHNR2ZN51Z32E2CJ173.the-explorer-guild::The-Explorer-Guild\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: max number of events to fetch\n          required: false\n          schema:\n            type: integer\n            default: 50\n        - name: offset\n          in: query\n          description: index of first event to fetch\n          required: false\n          schema:\n            type: integer\n            default: 0\n        - name: unanchored\n          in: query\n          description: whether or not to include events from unconfirmed transactions\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: tx_metadata\n          in: query\n          description: whether or not to include the complete transaction metadata instead of just `tx_id`. Enabling this option can affect performance and response times.\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        200:\n          description: Non-Fungible Token mints\n          content:\n            application/json:\n              schema:\n                $ref: ./api/tokens/get-non-fungible-token-mints.schema.json\n              examples:\n                default:\n                  value:\n                    $ref: ./api/tokens/get-non-fungible-token-mints.example.schema.json\n                with transaction metadata:\n                  value:\n                    $ref: ./api/tokens/get-non-fungible-token-mints-tx-metadata.example.schema.json\n\n  /extended/v1/tokens/nft/metadata:\n    get:\n      operationId: get_nft_metadata_list\n      summary: Non fungible tokens metadata list\n      description: Retrieves a list of non fungible tokens with their metadata. More information on Non-Fungible Tokens on the Stacks blockchain can be found [here](https://docs.stacks.co/write-smart-contracts/tokens#non-fungible-tokens-nfts).\n      tags:\n        - Non-Fungible Tokens\n      parameters:\n        - name: limit\n          in: query\n          description: max number of tokens to fetch\n          required: false\n          schema:\n            type: integer\n        - name: offset\n          in: query\n          description: index of first tokens to fetch\n          required: false\n          schema:\n            type: integer\n      responses:\n        200:\n          description: List of non fungible tokens metadata\n          content:\n            application/json:\n              schema:\n                $ref: ./api/tokens/get-non-fungible-tokens-metadata-list.schema.json\n              example:\n                $ref: ./api/tokens/get-non-fungible-tokens-metadata-list.example.schema.json\n\n  /extended/v1/tokens/{contractId}/nft/metadata:\n    get:\n      operationId: get_contract_nft_metadata\n      summary: Non fungible tokens metadata for contract id\n      description: Retrieves metadata for non fungible tokens for a given contract id. More information on Non-Fungible Tokens on the Stacks blockchain can be found [here](https://docs.stacks.co/write-smart-contracts/tokens#non-fungible-tokens-nfts).\n      tags:\n        - Non-Fungible Tokens\n      parameters:\n        - name: contractId\n          in: path\n          description: token's contract id\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Non fungible tokens metadata for contract id\n          content:\n            application/json:\n              schema:\n                $ref: ./entities/tokens/non-fungible-token.schema.json\n              example:\n                $ref: ./entities/tokens/non-fungible-token.schema.example.json\n\n  /extended/v1/tokens/{contractId}/ft/metadata:\n    get:\n      operationId: get_contract_ft_metadata\n      summary: Fungible tokens metadata for contract id\n      description: Retrieves the metadata for fungible tokens for a given contract id\n      tags:\n        - Fungible Tokens\n      parameters:\n        - name: contractId\n          in: path\n          description: token's contract id\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Fungible tokens metadata for contract id\n          content:\n            application/json:\n              schema:\n                $ref: ./entities/tokens/fungible-token.schema.json\n              example:\n                $ref: ./entities/tokens/fungible-token.schema.example.json\n\n  /extended/v1/fee_rate:\n    post:\n      operationId: fetch_fee_rate\n      summary: fetch fee rate\n      description: Retrieves estimated fee rate.\n      tags:\n        - Fees\n      responses:\n        200:\n          description: Transaction fee rate\n          content:\n            application/json:\n              schema:\n                $ref: ./api/info/get-fee-rate-response.schema.json\n              example:\n                $ref: ./api/info/get-fee-rate-response.example.json\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: ./api/info/get-fee-rate-request.schema.json\n            example:\n              $ref: ./api/info/get-fee-rate-request.example.json\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /extended/v1/block/by_height/{height}: get: operation \"get_block_by_height\": responses: 200: content: application/json: schema: parse schema: resolve \"./entities/blocks/block.schema.json\": find schema: external base \"./entities/blocks/block.schema.json\" is not supported"
}