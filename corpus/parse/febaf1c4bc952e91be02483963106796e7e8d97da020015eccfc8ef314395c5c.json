{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/stackql/stackql-provider-registry"
		},
		"file": {
			"name": "domain_names.yaml",
			"size": 0,
			"path": "providers/src/netlify/v0.1.0/services/domain_names.yaml",
			"byteSize": 16157,
			"content": "paths:\n  /dns_zones:\n    get:\n      parameters:\n        - in: query\n          name: account_slug\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/dnsZones'\n          description: get all DNS zones the user has access to\n        default:\n          $ref: '#/components/responses/error'\n      tags:\n        - dnsZone\n      operationId: getDnsZones\n    post:\n      responses:\n        '201':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/dnsZone'\n          description: Created\n        default:\n          $ref: '#/components/responses/error'\n      tags:\n        - dnsZone\n      operationId: createDnsZone\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/dnsZoneSetup'\n        required: true\n  /dns_zones/{zone_id}:\n    delete:\n      responses:\n        '204':\n          description: delete a single DNS zone\n        default:\n          $ref: '#/components/responses/error'\n      tags:\n        - dnsZone\n      operationId: deleteDnsZone\n      parameters: \u0026ref_0\n        - in: path\n          name: zone_id\n          required: true\n          schema:\n            type: string\n    get:\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/dnsZone'\n          description: get a single DNS zone\n        default:\n          $ref: '#/components/responses/error'\n      tags:\n        - dnsZone\n      operationId: getDnsZone\n      parameters: *ref_0\n  /dns_zones/{zone_id}/dns_records:\n    get:\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/dnsRecords'\n          description: get all DNS records for a single DNS zone\n        default:\n          $ref: '#/components/responses/error'\n      tags:\n        - dnsZone\n      operationId: getDnsRecords\n      parameters: \u0026ref_1\n        - in: path\n          name: zone_id\n          required: true\n          schema:\n            type: string\n    post:\n      responses:\n        '201':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/dnsRecord'\n          description: Created\n        default:\n          $ref: '#/components/responses/error'\n      tags:\n        - dnsZone\n      operationId: createDnsRecord\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/dnsRecordCreate'\n        required: true\n      parameters: *ref_1\n  /dns_zones/{zone_id}/dns_records/{dns_record_id}:\n    delete:\n      responses:\n        '204':\n          description: record deleted\n        default:\n          $ref: '#/components/responses/error'\n      tags:\n        - dnsZone\n      operationId: deleteDnsRecord\n      parameters: \u0026ref_2\n        - in: path\n          name: zone_id\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: dns_record_id\n          required: true\n          schema:\n            type: string\n    get:\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/dnsRecord'\n          description: get a single DNS record\n        default:\n          $ref: '#/components/responses/error'\n      tags:\n        - dnsZone\n      operationId: getIndividualDnsRecord\n      parameters: *ref_2\n  /dns_zones/{zone_id}/transfer:\n    put:\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/dnsZone'\n          description: transfer a DNS zone to another account\n        default:\n          $ref: '#/components/responses/error'\n      tags:\n        - dnsZone\n      operationId: transferDnsZone\n      parameters:\n        - in: path\n          name: zone_id\n          required: true\n          schema:\n            type: string\n        - description: the account of the dns zone\n          in: query\n          name: account_id\n          required: true\n          schema:\n            type: string\n        - description: the account you want to transfer the dns zone to\n          in: query\n          name: transfer_account_id\n          required: true\n          schema:\n            type: string\n        - description: the user you want to transfer the dns zone to\n          in: query\n          name: transfer_user_id\n          required: true\n          schema:\n            type: string\n  /sites/{site_id}/dns:\n    get:\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/dnsZone'\n                type: array\n          description: OK\n        default:\n          $ref: '#/components/responses/error'\n      tags:\n        - dnsZone\n      operationId: getDNSForSite\n      parameters: \u0026ref_3\n        - in: path\n          name: site_id\n          required: true\n          schema:\n            type: string\n    put:\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/dnsZone'\n                type: array\n          description: OK\n        default:\n          $ref: '#/components/responses/error'\n      tags:\n        - dnsZone\n      operationId: configureDNSForSite\n      parameters: *ref_3\n  /sites/{site_id}/ssl:\n    get:\n      parameters:\n        - in: path\n          name: site_id\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/sniCertificate'\n          description: OK\n        default:\n          $ref: '#/components/responses/error'\n      tags:\n        - sniCertificate\n      operationId: showSiteTLSCertificate\n    post:\n      parameters:\n        - in: path\n          name: site_id\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: certificate\n          schema:\n            type: string\n        - in: query\n          name: key\n          schema:\n            type: string\n        - in: query\n          name: ca_certificates\n          schema:\n            type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/sniCertificate'\n          description: OK\n        default:\n          $ref: '#/components/responses/error'\n      tags:\n        - sniCertificate\n      operationId: provisionSiteTLSCertificate\ncomponents:\n  schemas:\n    dnsZones:\n      items:\n        $ref: '#/components/schemas/dnsZone'\n      type: array\n    dnsZone:\n      properties:\n        account_id:\n          type: string\n        account_name:\n          type: string\n        account_slug:\n          type: string\n        created_at:\n          format: dateTime\n          type: string\n        dedicated:\n          type: boolean\n        dns_servers:\n          items:\n            type: string\n          type: array\n        domain:\n          type: string\n        errors:\n          items:\n            type: string\n          type: array\n        id:\n          type: string\n        ipv6_enabled:\n          type: boolean\n        name:\n          type: string\n        records:\n          items:\n            $ref: '#/components/schemas/dnsRecord'\n          type: array\n        site_id:\n          type: string\n        supported_record_types:\n          items:\n            type: string\n          type: array\n        updated_at:\n          format: dateTime\n          type: string\n        user_id:\n          type: string\n      type: object\n    error:\n      properties:\n        code:\n          format: int64\n          type: integer\n        message:\n          nullable: false\n          type: string\n      required:\n        - message\n      type: object\n    dnsZoneSetup:\n      properties:\n        account_slug:\n          type: string\n        name:\n          type: string\n        site_id:\n          type: string\n      type: object\n    dnsRecord:\n      properties:\n        dns_zone_id:\n          type: string\n        flag:\n          type: integer\n        hostname:\n          type: string\n        id:\n          type: string\n        managed:\n          type: boolean\n        priority:\n          format: int64\n          type: integer\n        site_id:\n          type: string\n        tag:\n          type: string\n        ttl:\n          format: int64\n          type: integer\n        type:\n          type: string\n        value:\n          type: string\n      type: object\n    dnsRecords:\n      items:\n        $ref: '#/components/schemas/dnsRecord'\n      type: array\n    dnsRecordCreate:\n      properties:\n        flag:\n          format: int64\n          type: integer\n        hostname:\n          type: string\n        port:\n          format: int64\n          type: integer\n        priority:\n          format: int64\n          type: integer\n        tag:\n          type: string\n        ttl:\n          format: int64\n          type: integer\n        type:\n          type: string\n        value:\n          type: string\n        weight:\n          format: int64\n          type: integer\n      type: object\n    sniCertificate:\n      properties:\n        created_at:\n          format: dateTime\n          type: string\n        domains:\n          items:\n            type: string\n          type: array\n        expires_at:\n          format: dateTime\n          type: string\n        state:\n          type: string\n        updated_at:\n          format: dateTime\n          type: string\n      type: object\n  parameters: {}\n  responses:\n    error:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/error'\n      description: error\n  securitySchemes: {}\n  callbacks: {}\n  examples: {}\n  requestBodies: {}\n  headers: {}\n  links: {}\n  x-stackQL-resources:\n    dnsRecords:\n      id: netlify.domain_names.dnsRecords\n      name: dnsRecords\n      title: dnsRecords\n      methods:\n        getDnsRecords:\n          operation:\n            $ref: '#/paths/~1dns_zones~1{zone_id}~1dns_records/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        createDnsRecord:\n          operation:\n            $ref: '#/paths/~1dns_zones~1{zone_id}~1dns_records/post'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '201'\n        deleteDnsRecord:\n          operation:\n            $ref: '#/paths/~1dns_zones~1{zone_id}~1dns_records~1{dns_record_id}/delete'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '204'\n        getIndividualDnsRecord:\n          operation:\n            $ref: '#/paths/~1dns_zones~1{zone_id}~1dns_records~1{dns_record_id}/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select:\n          - $ref: '#/components/x-stackQL-resources/dnsRecords/methods/getIndividualDnsRecord'\n          - $ref: '#/components/x-stackQL-resources/dnsRecords/methods/getDnsRecords'\n        insert:\n          - $ref: '#/components/x-stackQL-resources/dnsRecords/methods/createDnsRecord'\n        update: []\n        delete:\n          - $ref: '#/components/x-stackQL-resources/dnsRecords/methods/deleteDnsRecord'\n    dnsZone:\n      id: netlify.domain_names.dnsZone\n      name: dnsZone\n      title: dnsZone\n      methods:\n        getDnsZones:\n          operation:\n            $ref: '#/paths/~1dns_zones/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        createDnsZone:\n          operation:\n            $ref: '#/paths/~1dns_zones/post'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '201'\n        deleteDnsZone:\n          operation:\n            $ref: '#/paths/~1dns_zones~1{zone_id}/delete'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '204'\n        getDnsZone:\n          operation:\n            $ref: '#/paths/~1dns_zones~1{zone_id}/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        transferDnsZone:\n          operation:\n            $ref: '#/paths/~1dns_zones~1{zone_id}~1transfer/put'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        getDNSForSite:\n          operation:\n            $ref: '#/paths/~1sites~1{site_id}~1dns/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        configureDNSForSite:\n          operation:\n            $ref: '#/paths/~1sites~1{site_id}~1dns/put'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select:\n          - $ref: '#/components/x-stackQL-resources/dnsZone/methods/getDnsZone'\n          - $ref: '#/components/x-stackQL-resources/dnsZone/methods/getDNSForSite'\n          - $ref: '#/components/x-stackQL-resources/dnsZone/methods/getDnsZones'\n        insert:\n          - $ref: '#/components/x-stackQL-resources/dnsZone/methods/createDnsZone'\n        update: []\n        delete:\n          - $ref: '#/components/x-stackQL-resources/dnsZone/methods/deleteDnsZone'\n    sniCertificate:\n      id: netlify.domain_names.sniCertificate\n      name: sniCertificate\n      title: sniCertificate\n      methods:\n        showSiteTLSCertificate:\n          operation:\n            $ref: '#/paths/~1sites~1{site_id}~1ssl/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        provisionSiteTLSCertificate:\n          operation:\n            $ref: '#/paths/~1sites~1{site_id}~1ssl/post'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select: []\n        insert: []\n        update: []\n        delete: []\nopenapi: 3.0.0\nservers:\n  - url: https://api.netlify.com/api/v1\nsecurity:\n  - netlifyAuth: []\ntags:\n  - name: ticket\n    x-displayName: Ticket\n  - name: accessToken\n    x-displayName: Access token\n  - name: user\n    x-displayName: User\n  - name: accountMembership\n    x-displayName: Accounts\n  - name: member\n    x-displayName: Member\n  - name: accountType\n    x-displayName: Access type\n  - name: paymentMethod\n    x-displayName: Payment method\n  - name: auditLog\n    x-displayName: Audit log\n  - name: site\n    x-displayName: Site\n  - name: file\n    x-displayName: File\n  - name: metadata\n    x-displayName: Metadata\n  - name: snippet\n    x-displayName: Snippet\n  - name: dnsZone\n    x-displayName: DNS zone\n  - name: sniCertificate\n    x-displayName: SNI certificate\n  - name: deploy\n    x-displayName: Deploy\n  - name: deployedBranch\n    x-displayName: Deployed branch\n  - name: deployKey\n    x-displayName: Deploy key\n  - name: build\n    x-displayName: Build\n  - name: buildLogMsg\n    x-displayName: Build log message\n  - name: hook\n    x-displayName: Hook\n  - name: hookType\n    x-displayName: Hook type\n  - name: buildHook\n    x-displayName: Build hook\n  - name: service\n    x-displayName: Service\n  - name: serviceInstance\n    x-displayName: Service instance\n  - name: function\n    x-displayName: Function\n  - name: form\n    x-displayName: Form\n  - name: submission\n    x-displayName: Form submission\n  - name: splitTest\n    x-displayName: Split test\n  - name: asset\n    x-displayName: Asset\n  - name: assetPublicSignature\n    x-displayName: Asset public signature\nexternalDocs:\n  description: Online documentation\n  url: https://www.netlify.com/docs/api/\ninfo:\n  description: Domain Names\n  termsOfService: https://www.netlify.com/legal/terms-of-use/\n  title: Netlify's API documentation - domain_names\n  version: 2.9.0\n  x-logo:\n    altText: Netlify\n    href: https://www.netlify.com/docs/\n    url: netlify-logo.png\n",
			"canonicalURL": "/github.com/stackql/stackql-provider-registry@7482bc9b2425a6491d640bf921a1dc9cf508f339/-/blob/providers/src/netlify/v0.1.0/services/domain_names.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/stackql/stackql-provider-registry/blob/7482bc9b2425a6491d640bf921a1dc9cf508f339/providers/src/netlify/v0.1.0/services/domain_names.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /sites/{site_id}/dns: get: operation \"getDNSForSite\": security: unknown security schema \"netlifyAuth\""
}