{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/izderadicka/audioserve"
		},
		"file": {
			"name": "audioserve-api-v1.yaml",
			"size": 0,
			"path": "docs/audioserve-api-v1.yaml",
			"byteSize": 41725,
			"content": "openapi: 3.0.1\ninfo:\n  title: audioserve API\n  description: REST API for audioserve\n  version: 1.3.0\nservers:\n  - url: https://audioserve.zderadicka.eu\n    description: Public demo server\n  - url: http://localhost:3000\n    description: Your local test server\n\ntags:\n- name: \"Authentication\"\n  description: Authentication endpoint\n- name: \"Collections\"\n  description: Audio collections browsing and playing\n- name: Positions\n  description: Playback position\n\n\npaths:\n# authentication endpoint\n  /authenticate:\n    post:\n      tags:\n        - \"Authentication\"\n      description: |- \n        Authentication to server via salted shared secret\n\n        Salted shared secret is calculated as:\n          * shared secret is encoded as UTF-8 bytes\n          * client generates 32 random bytes\n          * secret is concatenated with random bytes (secret+random_bytes)\n          * these bytes are hashed with SHA-256\n          * random bytes are encoded with base64 encoding\n          * hash is encoded with base64 encoding\n          * resulting secret is string concation of three strings : \"encoded random\" + \"|\" + \"encoded hash\"\n\n      security: [] # no security as this is an authentication endpoint\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: \"#/components/schemas/SharedSecret\"\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/SharedSecret\"\n\n            examples:\n              sample:\n                description: Salted shared secred `mypass`\n                value:\n                  secret: \"w8lTEszPU3idF9sEawmRR3Ps3IVdMEnnaFZj5DV5tqY=|6+iBRdZRz/o6fvwHiEuS2sgDZS6YCw7wNHVX59YCh50=\"\n      responses:\n        \"200\":\n          description: Successfull authentication, response contains authentication token\n          content:\n            text/plain:\n              schema:\n                type: string\n                maxLength: 250\n                pattern: '^[a-zA-Z0-9+/]+=*$'\n              examples:\n                '0':\n                  value: \u003e-\n                    E114Vfv45RowIr0bFMNiJFRsPweZfINmhfTUFFy1Er8AAAAAY2drA/2XKsZSMnsc3a+yRIKjQIFaAEOcROCaTYR1jUjo6ow1\n        \"401\":\n          description: Failed authentication\n\n  # collections end point\n  /collections/:\n    get:\n      tags:\n        - \"Collections\"\n      description: |-\n        Returns list of available collections (collection is a directory provided as parameter to audioserve server). \n        It should be first call to server, after client authenticates itself.\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CollectionsInfo\"\n              example:\n                {\"version\":\"0.16.3\",\"folder_download\":true,\"shared_positions\":true,\"count\":1,\"names\":[\"audiobooks\"]}\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n\n# transcodings endpoint\n  /transcodings/:\n    get:\n      tags:\n        - \"Collections\"\n      description: |-\n        Gets current transcoding settings on the server.\n        Server has 3 transcodings presets: `high`, `medium`, `low` (or no transcoding), between which client can choose, when \n        streaming audofile. \n        If `max_transcodings` is reached server returns `503 Service Unavailable` -  it's client responsibility to retry later.\n        Normally should be called after `collections` call, unless client is not interested in transcoding capabilities at all.\n\n      responses:\n        '200':\n          description: Success - returns transcodings settings\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TranscodingsInfo\"\n              example:\n                {\"max_transcodings\":24,\"low\":{\"bitrate\":32,\"name\":\"opus-in-ogg\"},\"medium\":{\"bitrate\":48,\"name\":\"opus-in-ogg\"},\"high\":{\"bitrate\":64,\"name\":\"opus-in-ogg\"}}\n        \"401\":\n          $ref:  \"#/components/responses/Unauthorized\"\n  \n  # Cover endpoint\n  /{col_id}/cover/{path}:\n    get:\n      tags:\n        - \"Collections\"\n      description: | \n        Returns cover image for indicated `path` (if exists)\n        Path for cover should be taken from object returend by `folder` endpoint.\n      parameters:\n        - $ref: \"#/components/parameters/CollectionId\"\n        - $ref: \"#/components/parameters/Path\"\n          \n      responses:\n        '200':\n          description: Success - returns image binary - jpeg or png\n          content:\n            \"image/*\":\n              schema:\n                type: string\n                format: binary\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n\n  # Icon endpoint\n  /{col_id}/icon/{path}:\n    get:\n      tags:\n        - \"Collections\"\n      description: | \n        Returns folder icon (icon is scaled down normalize cover image) \n        for indicated path `path` (if cover exists).\n        Path is folder path.\n      parameters:\n        - $ref: \"#/components/parameters/CollectionId\"\n        - $ref: \"#/components/parameters/Path\"\n          \n      responses:\n        '200':\n          description: Success - returns image binary - png\n          content:\n            \"image/png\":\n              schema:\n                type: string\n                format: binary\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"    \n      \n  /{col_id}/desc/{path}:\n    get:\n      tags:\n        - \"Collections\"\n      description: |\n        Returns description file (if exists)\n        Path for description file should be taken from object returend by `folder` endpoint.\n      parameters:\n        - $ref: \"#/components/parameters/CollectionId\"\n        - $ref: \"#/components/parameters/Path\"\n      responses:\n        '200':\n          description: Success - returns description text - plain, html or markdown\n          content:\n            \"text/*\":\n              schema:\n                type: string\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n\n\n  /{col_id}/folder/:\n    get:\n      tags:\n        - \"Collections\"\n      description: | \n        List contents of  root folder of the collection.\n        See `/{col_id}/folder/{path}` for more detailed description.\n      parameters:\n        - $ref: \"#/components/parameters/CollectionId\"\n        - $ref: \"#/components/parameters/Ordering\"\n        - $ref: \"#/components/parameters/Group\"\n      responses:\n        '200':\n          description: Success -  returns JSON object describing audio folder\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AudioFolder\"\n              example:\n                {\n                  \"is_file\": false,\n                  \"is_collapsed\": false,\n                  \"modified\": 1613948393506,\n                  \"total_time\": 0,\n                  \"files\": [],\n                  \"subfolders\": [\n                    {\n                      \"name\": \"Austene Jane\",\n                      \"modified\": 1613941742570,\n                      \"path\": \"Austene Jane\",\n                      \"is_file\": false,\n                      \"finished\": false\n                    },\n                    {\n                      \"name\": \"Chesterton Gilbert Keith\",\n                      \"modified\": 1613824355322,\n                      \"path\": \"Chesterton Gilbert Keith\",\n                      \"is_file\": false,\n                      \"finished\": false\n                    },\n                    {\n                      \"name\": \"Doyle Arthur Conan\",\n                      \"modified\": 1613825015324,\n                      \"path\": \"Doyle Arthur Conan\",\n                      \"is_file\": false,\n                      \"finished\": false\n                    },\n                    {\n                      \"name\": \"Wells H G\",\n                      \"modified\": 1613902871789,\n                      \"path\": \"Wells H G\",\n                      \"is_file\": false,\n                      \"finished\": false\n                    }\n                  ],\n                  \"cover\": null,\n                  \"description\": {\n                    \"path\": \"welcome.md\",\n                    \"mime\": \"text/markdown\"\n                  },\n                  \"tags\": null\n                }\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n\n              \n  /{col_id}/folder/{path}:\n    get:\n      tags:\n        - \"Collections\"\n      description: |\n        Lists available subfolders or audio files in the folder.\n        Response contains arrays `files` and/or `subfolders` (each can be null or empty array). \n        Subfolders can be listed using this API endpoint, `files` contains playable files -  \n        their `path` should be used with `audio` endpoint for streaming file content.\n      parameters:\n        - $ref: \"#/components/parameters/CollectionId\"\n        - $ref: \"#/components/parameters/Path\"\n        - $ref: \"#/components/parameters/Ordering\"\n        - $ref: \"#/components/parameters/Group\"\n      responses:\n        '200':\n          description: Success -  returns JSON object describing audio folder\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AudioFolder\"\n              examples:\n                \"Author folder\":\n                  value:\n                      {\n                        \"is_file\": false,\n                        \"is_collapsed\": false,\n                        \"modified\": 1613902871789,\n                        \"total_time\": 0,\n                        \"files\": [],\n                        \"subfolders\": [\n                          {\n                            \"name\": \"Invisible Man\",\n                            \"modified\": 1613902936821,\n                            \"path\": \"Wells H G/Invisible Man\",\n                            \"is_file\": false,\n                            \"finished\": false\n                          }\n                        ],\n                        \"cover\": {\n                          \"path\": \"Wells H G/H.G._Wells_by_Beresford.jpg\",\n                          \"mime\": \"image/jpeg\"\n                        },\n                        \"description\": {\n                          \"path\": \"Wells H G/info.txt\",\n                          \"mime\": \"text/plain\"\n                        },\n                        \"tags\": null\n                      }\n                \"Audiobook folder\":\n                  value: \n                    {\n                      \"is_file\": false,\n                      \"modified\": 1613902936821,\n                      \"total_time\": 18079,\n                      \"files\": [\n                        {\n                          \"name\": \"invisibleman_01_wells_64kb.mp3\",\n                          \"path\": \"Wells H G/Invisible Man/invisibleman_01_wells_64kb.mp3\",\n                          \"meta\": {\n                            \"duration\": 1362,\n                            \"bitrate\": 64,\n                            \"tags\": {\n                              \"title\": \"01 - Chapters I and II\"\n                            }\n                          },\n                          \"mime\": \"audio/mpeg\",\n                          \"section\": null\n                        },\n                        {\n                          \"name\": \"invisibleman_02_wells_64kb.mp3\",\n                          \"path\": \"Wells H G/Invisible Man/invisibleman_02_wells_64kb.mp3\",\n                          \"meta\": {\n                            \"duration\": 1482,\n                            \"bitrate\": 64,\n                            \"tags\": {\n                              \"title\": \"02 - Chapters III and IV\"\n                            }\n                          },\n                          \"mime\": \"audio/mpeg\",\n                          \"section\": null\n                        }\n                      ],\n                      \"subfolders\": [],\n                      \"cover\": {\n                        \"path\": \"Wells H G/Invisible Man/220px-Wells_-_The_Invisible_Man_-_Pearson_cover_1897.jpg\",\n                        \"mime\": \"image/jpeg\"\n                      },\n                      \"description\": {\n                        \"path\": \"Wells H G/Invisible Man/info.html\",\n                        \"mime\": \"text/html\"\n                      },\n                      \"position\": {\n                        \"path\": \"Wells H G/Invisible Man/invisibleman_09_wells_64kb.mp3\",\n                        \"timestamp\": 1635427462226,\n                        \"position\": 1324.175\n                      },\n                      \"tags\": {\n                        \"genre\": \"speech\",\n                        \"artist\": \"H. G. Wells\",\n                        \"album\": \"The Invisible Man\"\n                      }\n                    }\n                \"m4b folder\": \n                  value:\n                    {\n                      \"is_file\": true,\n                      \"modified\": 1615456636344,\n                      \"total_time\": 63547,\n                      \"files\": [\n                          {\n                              \"name\": \"000 - Chapter_1\",\n                              \"path\": \"Stoker Bram/Dracula/Dracula.m4b$$000 - Chapter_1$$0-1020288$$.m4b\",\n                              \"meta\": {\n                                  \"duration\": 1020,\n                                  \"bitrate\": 54,\n                                  \"tags\": null\n                              },\n                              \"mime\": \"audio/m4b\",\n                              \"section\": {\n                                  \"start\": 0,\n                                  \"duration\": 1020288\n                              }\n                          },\n                          {\n                              \"name\": \"001 - Chapter_2\",\n                              \"path\": \"Stoker Bram/Dracula/Dracula.m4b$$001 - Chapter_2$$1020288-2029004$$.m4b\",\n                              \"meta\": {\n                                  \"duration\": 1008,\n                                  \"bitrate\": 54,\n                                  \"tags\": null\n                              },\n                              \"mime\": \"audio/m4b\",\n                              \"section\": {\n                                  \"start\": 1020288,\n                                  \"duration\": 1008716\n                              }\n                          }\n                      ],\n                      \"subfolders\": [],\n                      \"cover\": {\n                          \"path\": \"Stoker Bram/Dracula/800px-Dracula-First-Edition-1897_(cropped).jpg\",\n                          \"mime\": \"image/jpeg\"\n                      },\n                      \"description\": {\n                          \"path\": \"Stoker Bram/Dracula/info.txt\",\n                          \"mime\": \"text/plain\"\n                      },\n                      \"position\": {\n                          \"path\": \"Stoker Bram/Dracula/Dracula.m4b$$004 - Chapter_5$$3452020-4080784$$.m4b\",\n                          \"timestamp\": 1635963253408,\n                          \"position\": 111.82\n                      },\n                      \"tags\": {\n                          \"title\": \"Dracula\",\n                          \"album\": \"Dracula\",\n                          \"genre\": \"Audio Book\",\n                          \"date\": \"2014\",\n                          \"artist\": \"Bram Stoker\"\n                      }\n                    }\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n      \n  /{col_id}/audio/{path}:\n    get:\n      tags:\n        - \"Collections\"\n      description: | \n        Streams (possibly transcoded) audio file\n\n        File is sent either directly  (in this case [http bytes range](https://developer.mozilla.org/en-US/docs/Web/HTTP/Range_requests) \n        is supported - but only one range per response)  \n        or transcoded  (in this case response content is [chunck encoded](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Transfer-Encoding) \n        and its length is not known in advance). Transcoding is triggered by query string paramater `trans`.\n\n        Typical usecase is that client loads transcoding parameters from `transcodings` endpoint \n        and then for each audio file decides if transcoding is required or not based on `mime` and `bitrate` values \n        available in folder listing.\n\n        Transcoded files can be also seek for playback start-  query string parameter `seek` can contain start of stream in seconds (related to \n        normal begining of file).  Plain, not transcoded files cannot be seeked in this way (they support byte ranges, which are \n        usually enough for a player to seek efficiently). So `seek` can be used only with `trans`.\n\n        Number of transcoding processing is limited on server, as it is lengthy and resources demanding (mainly CPU) \n        process. If maximum number of transcodings is already used, this endpoint will return HTTP response 503 Service Unavailable. \n        It's client responsibility to handle such cases.\n\n      parameters:\n        - $ref: \"#/components/parameters/CollectionId\"\n        - $ref: \"#/components/parameters/Path\"\n          example: Austene Jane/Pride And Prejudice/prideandprejudice_22_austen_64kb.mp3\n        - name: seek\n          in: query\n          description: |-\n            Stars playback as \u003cseek\u003e seconds from beginning of file.\n            Beware overusing this parameter, as it can cause quite ineffective usage\n            of bandwidth and transcoding (which each seek like this part of file from\n            seek position is send again)\n          schema:\n            type: number\n            format: float\n          example: 223.299\n        - name: trans\n          in: query\n          description: |-\n            Required transcoding of the file **l**ow, **m**edium or **h**igh\n            as described by `/transcodings` endpoint response\n            If omitted or set to **0** no transcoding is done\n          schema:\n            type: string\n            enum: [l, m, h, \"0\"]\n          example: m\n        - name: range\n          in: header\n          description: |-\n            Optionally client can request range of bytes from file, will only work if\n            file is not actually transcoded.\n            Range is standard HTTP header as per [RFC 7233](https://datatracker.ietf.org/doc/html/rfc7233) \n          schema:\n            type: string\n          example: bytes=14286848-\n          \n      responses:\n        '200':\n          description: Success - audio is sent in response body\n          content:\n            \"audio:*\":\n              example: N/A\n              schema:\n                type: string\n                format: binary\n                description: |-\n                  Audio stream in original or transcoded version.\n                  If size of stream is not know (transcoded stream) response body is chunked\n          headers:\n            x-transcode:\n              description: If file is transcoded contains information about transcoding\n              schema:\n                type: string\n              example: codec=opus-in-ogg; bitrate=48\n        '206':\n          description: \"Success - part of audio file, if Range: bytes were requested\"\n          content:\n            \"audio/*\":\n              example: N/A\n              schema:\n                type: string\n                format: binary\n          headers:\n            content-range:\n              description: Bytes range returned in response to request header `Range`\n              schema:\n                type: string\n              example: bytes 14286848-14296697/14296698\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"503\":\n          description: Number of transcodings over limit\n                             \n  /{col_id}/search:\n    get:\n      tags:\n        - \"Collections\"\n      description: |\n        Search collection - search for terms with collection paths (path only not metadata tags).\n        Search is looking only for folders (including virtual folders for chaptered files).\n\n        Search term is split to words and each word is searched in full path (relative collection root - \n        the path you see in folder listing).\n        First path that includes all words in added to results (and it's subfolders are not searched further).\n      parameters:\n        - $ref: \"#/components/parameters/CollectionId\"\n        - $ref: \"#/components/parameters/Ordering\"\n        - $ref: \"#/components/parameters/Group\"\n        - name: q\n          in: query\n          required: true\n          description: |\n            Search terms (separated by space). Looks for all terms on folder path.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success -  all found folders within this collection\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SearchResult\"\n              example: \n                {\"files\":[],\"subfolders\":[{\"name\":\"Around The World in Eighty Days\",\"modified\":1613824559416,\"path\":\"Verne Jules/Around The World in Eighty Days\",\"is_file\":false,\"finished\":false},\n                {\"name\":\"Austene Jane\",\"modified\":1613941742570,\"path\":\"Austene Jane\",\"is_file\":false,\"finished\":false}]}\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n\n  /{col_id}/recent:\n    get:\n      tags:\n        - \"Collections\"\n      description: |\n        Lists top 100 most recent folders in the collection (based on folder modification time). \n        Sorted by folder modification time descendently - e.g most recent is first.\n      parameters:\n        - $ref: \"#/components/parameters/CollectionId\"\n        - $ref: \"#/components/parameters/Group\"\n      responses:\n        '200':\n          description: Success -  most recent folders\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SearchResult\"\n              example: \n                {\"files\":[],\"subfolders\":[{\"name\":\"Around The World in Eighty Days\",\"modified\":1613824559416,\"path\":\"Verne Jules/Around The World in Eighty Days\",\"is_file\":false,\"finished\":false},\n                {\"name\":\"Austene Jane\",\"modified\":1613941742570,\"path\":\"Austene Jane\",\"is_file\":false,\"finished\":false}]}\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n\n  /{col_id}/download/{path}:\n    get:\n      tags:\n        - \"Collections\"\n      description: | \n        Downloads content of folder as an archive (zip or tar)\n        Downloads all files (audio files, cover, description) from this folder as an archive (zip or tar). \n        Default format of the archive is zip, tar archive is also supported - format can be chosen by `fmt` query parameter \n        Also if you want to change default format by compiling audioserve with `folder-download-default-tar` feature.\n\n        This endpoint can be disabled, if audioserve is compiled without default feature `folder-download` \n        or with command line argument `--disable-folder-download` .\n      parameters:\n        - $ref: \"#/components/parameters/CollectionId\"\n        - $ref: \"#/components/parameters/Path\"\n        - name: fmt\n          in: query\n          description: |-\n            Archive format - zip(default) or tar\n          schema:\n            type: string\n            enum: [zip, tar]\n          example: zip\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/zip:\n              schema:\n                type: string\n                format: binary\n                description: zip archive\n            application/x-tar:\n              schema:\n                type: string\n                format: binary\n                description: tar archive\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n  \n  /positions/{group}:\n    get:\n      tags:\n        - Positions\n      description: Get recent positions for the group\n      parameters:\n        - $ref: \"#/components/parameters/GroupInPath\"\n        - $ref: \"#/components/parameters/Finished\"\n        - $ref: \"#/components/parameters/Unfinished\"\n        - $ref: \"#/components/parameters/From\"\n        - $ref: \"#/components/parameters/To\"\n      responses:\n        \"200\":\n          description: |-\n            List of recent positions for given group.\n            Ordered from most recent.\n            Limited to 1000 items max.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Position\"\n                maxItems: 1000\n              example:\n                [\n                  {\n                    \"timestamp\": 1636726423847,\n                    \"collection\": 0,\n                    \"folder\": \"Wells H G/Invisible Man\",\n                    \"file\": \"invisibleman_09_wells_64kb.mp3\",\n                    \"folder_finished\": false,\n                    \"position\": 1395.955\n                  },\n                  {\n                    \"timestamp\": 1636484689121,\n                    \"collection\": 0,\n                    \"folder\": \"Stevenson Robert Louis/Treasure Island\",\n                    \"file\": \"treasureisland_04_stevenson_64kb.mp3\",\n                    \"folder_finished\": false,\n                    \"position\": 38.555\n                  },\n                  {\n                    \"timestamp\": 1636484567281,\n                    \"collection\": 0,\n                    \"folder\": \"Stoker Bram/Dracula\",\n                    \"file\": \"Dracula.m4b$$004 - Chapter_5$$3452020-4080784$$.m4b\",\n                    \"folder_finished\": false,\n                    \"position\": 195.34\n                  }\n                ]\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n    post:\n      tags:\n        - Positions\n      parameters:\n        - $ref: \"#/components/parameters/GroupInPath\"\n      description: Updates recent position for given group\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Position\"\n      responses:\n        \"201\":\n          description: Position updated\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"400\":\n          $ref: \"#/components/responses/InvalidRequest\"\n        \"422\": \n          description: Post ignored - either there no such folder/file or there is newer position there\n          content:\n            text/plain:\n              schema:\n                type: string\n              example: Ignored\n\n  /positions/{group}/last:\n    get:\n      tags:\n        - Positions\n      parameters:\n        - $ref: \"#/components/parameters/GroupInPath\"\n      description: Last recent position for this group \n      responses:\n        \"200\":\n          description: |-\n            Last recent position or null\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Position\"\n              examples:\n                Position for group exists:\n                  value:\n                    {\n                      \"timestamp\": 1636793358494,\n                      \"collection\": 0,\n                      \"folder\": \"Wells H G/Invisible Man\",\n                      \"file\": \"invisibleman_09_wells_64kb.mp3\",\n                      \"folder_finished\": false,\n                      \"position\": 130\n                    }\n                No last position:\n                  value: null\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n\n  /positions/{group}/{col_id}/{path}:\n    get:\n      tags:\n        - Positions\n      parameters:\n        - $ref: \"#/components/parameters/GroupInPath\"\n        - $ref: \"#/components/parameters/CollectionId\"\n        - $ref: \"#/components/parameters/Path\"\n        - $ref: \"#/components/parameters/Finished\"\n        - $ref: \"#/components/parameters/Unfinished\"\n        - $ref: \"#/components/parameters/From\"\n        - $ref: \"#/components/parameters/To\"\n        - name: rec\n          description: |- \n            Recursively look for all subdirectories\n          in: query\n          required: false\n          schema:\n            type: boolean\n      description: |-\n        Last recent position for given folder path (`path` can be empty to for root of collection, \n        but in this case / must be present after  `col_id`` ).\n        If `rec` query parameter is given recursive search is done for this folder and all subfolders and\n        list of postions is returned.\n      responses:\n        \"200\":\n          description: |-\n            Last recent position or null\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/Position\"\n                  - type: array\n                    items:\n                      $ref: \"#/components/schemas/Position\"\n                    maxItems: 1000\n              examples:\n                Without rec parameter:\n                  description: Returns single position or null\n                  value:\n                    {\n                      \"timestamp\": 1636793358494,\n                      \"collection\": 0,\n                      \"folder\": \"Wells H G/Invisible Man\",\n                      \"file\": \"invisibleman_09_wells_64kb.mp3\",\n                      \"folder_finished\": false,\n                      \"position\": 130\n                    }\n                With rec parameter:\n                  description: Returns list of positions\n                  value:\n                    [\n                      {\n                        \"timestamp\": 1636793358494,\n                        \"collection\": 0,\n                        \"folder\": \"Wells H G/Invisible Man\",\n                        \"file\": \"invisibleman_09_wells_64kb.mp3\",\n                        \"folder_finished\": false,\n                        \"position\": 130\n                      }\n                    ]    \n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"400\":\n          $ref: \"#/components/responses/InvalidRequest\"\n\ncomponents:\n  schemas:\n    Transcoding:\n      type: object\n      required:\n        - \"name\"\n        - \"bitrate\"\n      properties:\n        name:\n          type: string\n          description: Name of transcoding in form of audio_codec-in-container, for instance opus-in-ogg\n        bitrate:\n          type: integer\n          description: Average bitrate of the transcoding in kbps\n          minimum: 0\n    TypedFile:\n      type: object\n      nullable: true\n      required:\n        - \"path\"\n        - \"mime\"\n      properties:\n        path:\n          type: string\n          description: path to the file with collection\n          maxLength: 512\n        mime:\n          type: string\n          description: mime type of the file\n    Subfolder:\n      type: object\n      required:\n        - \"name\"\n        - \"path\"\n      properties:\n        name:\n          type: string\n        path:\n          type: string\n        is_file:\n          type: boolean\n          description: Is virtual folder - e.g. representing big chapterized file (.m4b etc.)\n        modified:\n          type: number\n          description: last modification timestamp (unix time in miliseconds)\n        finished:\n          type: boolean\n          description: was folder listened to the end (by given group, valid only if group parameter was provided)\n    AudioFolder:\n      type: object\n      properties:\n        is_file:\n          type: boolean\n          description: Is virtual folder - e.g. representing big chapterized file (.m4b etc.)\n        is_collapsed:\n          type: boolean\n          description: Folder contains files from CD subfolders, structure is collapsed\n        modified:\n          type: number\n          description: last modification timestamp (unix time in miliseconds)\n        total_time:\n          type: integer\n          description: Total playback time of the audiofolder in seconds\n        subfolders:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Subfolder\"\n        files:\n          type: array\n          items:\n            $ref: \"#/components/schemas/AudioFile\"\n        cover:\n          description: Cover image\n          $ref: \"#/components/schemas/TypedFile\"\n        description:\n          $ref: \"#/components/schemas/TypedFile\"\n        tags: \n          type: object\n          nullable: true\n          description: Metadata tags for this folders - map of name to value\n        position:\n          $ref: \"#/components/schemas/PositionShort\"\n    AudioFile:\n      type: object\n      required:\n        - \"name\"\n        - \"path\"\n        - \"mime\"\n      properties:\n        \"name\": \n          type: string\n          example: \"000 - Chapter_1\"\n        \"path\": \n          type: string\n          example: \"Stoker Bram/Dracula/Dracula.m4b$$000 - Chapter_1$$0-1020288$$.m4b\"\n        \"meta\":\n          type: object\n          nullable: true\n          properties:\n            \"duration\":\n              type: integer\n              description: Duration of audio file in seconds\n              example: 1020,\n            \"bitrate\": \n              type: integer\n              description: Encoding bitrate of file - original, before transcoding \n              example: 54,\n            \"tags\":\n              type: object\n              description: Metadata tags as map of name to value\n              nullable: true\n        \"mime\": \n          type: string\n          description: Mime type of audio file (before transcoding)\n          example: \"audio/m4b\"\n        \"section\":\n          type: object\n          nullable: true\n          description: | \n            For chapter chunk out from big chaptered file (like .m4b) \n            this is start and duration (in milliseconds) of chapter with the that file\n          properties:\n            \"start\": \n              type: integer\n              description: Start of chapter in ms\n              example: 0\n            \"duration\": \n              type: integer\n              description: Duration of chapter in ms\n              example: 1020288\n    SearchResult:\n      type: object\n      properties:\n        files:\n          type: array\n          items: \n            $ref: \"#/components/schemas/AudioFile\"\n          description: Not used now, only subfolders are searched\n        subfolders:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Subfolder\"\n    PositionShort:\n      type: object\n      description: |- \n        Last shared playback position within a folder.\n        Only available if group parameter was used and there are some audiofiles in the folder.\n      nullable: true\n      properties:\n        timestamp:\n          type: integer\n          format: int64\n          description: |-\n            Position timestamp - unix time in ms\n            Timestamp is generated on server, so if you post new  position \n            it is used to check, if there is not newer position, \n            but actual value then is assigned by server\n        path: \n          type: string\n          description: Audio file (or chapter)\n        position:\n          type: number \n          format: float\n          description: Position in audiofile in seconds\n      required:\n        - timestamp\n        - path\n        - position\n      example:\n        {\n          \"timestamp\": 1636726423847,\n          \"folder\": \"Wells H G/Invisible Man/invisibleman_09_wells_64kb.mp3\",\n          \"position\": 1395.955\n        }\n      \n\n    Position:\n      type: object\n      description: Playback position\n      nullable: true\n      properties:\n        timestamp:\n          type: integer\n          format: int64\n          description: |-\n            Position timestamp - unix time in ms\n            Timestamp is generated on server, so if you post new  position \n            it is used to check, if there is not newer position, \n            but actual value then is assigned by server\n        collection:\n          type: integer\n          format: int32\n          description: Collection number (index in names from response in /collections endpoint)\n        folder: \n          type: string\n          description: Audio folder path\n        file: \n          type: string\n          description: Audio file (or chapter)\n        folder_finished: \n          type: boolean\n          description: Folder was listened to the end\n        position:\n          type: number \n          format: float\n          description: Position in audiofile in seconds\n      required:\n        - timestamp\n        - collection\n        - folder\n        - file\n        - position\n      example:\n        {\n          \"timestamp\": 1636726423847,\n          \"collection\": 0,\n          \"folder\": \"Wells H G/Invisible Man\",\n          \"file\": \"invisibleman_09_wells_64kb.mp3\",\n          \"folder_finished\": false,\n          \"position\": 1395.955\n        }\n    SharedSecret:\n      type: object\n      properties:\n        secret:\n          type: string\n          description: Salted shared secret\n          example: \"w8lTEszPU3idF9sEawmRR3Ps3IVdMEnnaFZj5DV5tqY=|6+iBRdZRz/o6fvwHiEuS2sgDZS6YCw7wNHVX59YCh50=\"\n          pattern: '^[A-Za-z0-9+/]+=*\\|[A-Za-z0-9+/]+=*$'\n          maxLength: 250\n      required:\n        - \"secret\"\n    CollectionsInfo:\n      type: object\n      properties:\n        names:\n          description: Names of available collections\n          type: array\n          maxItems: 100\n          items:\n            type: string\n        count:\n          type: integer\n          minimum: 1\n          maximum: 100\n          description: Size of names array\n        folder_download:\n          type: boolean\n          description: Is folder download endpoint enabled on server?\n        shared_positions:\n          type: boolean\n          description: Is playback position API enabled on server?\n        version:\n          type: string\n          description: Version of audioserve (and thus also version of API)\n    TranscodingsInfo:\n      type: object\n      properties:\n        high:\n          $ref:  \"#/components/schemas/Transcoding\"\n        low:\n          $ref:  \"#/components/schemas/Transcoding\"\n        medium:\n          $ref:  \"#/components/schemas/Transcoding\"\n        max_transcodings:\n          type: integer\n          description: Maximum number of parallel transcodings allowed by server\n          minimum: 2\n          maximum: 100\n\n  parameters:\n    CollectionId:\n      name: col_id\n      description: id of collection, is index of collection from `names` array returned by `/collections` endpoint\n      in: path\n      required: true\n      schema:\n        type: integer\n        minimum: 0\n        maximum: 100\n      example: 0\n    Path:\n      name: path\n      description:  path to the item (as returned in by API, do not forget to urlencode the value)\n      in: path\n      required: true\n      schema:\n        type: string\n        # format: path # non-standard type\n        maxLength: 512\n    Ordering:\n      name: ord\n      in: query\n      description: |-\n        ordering of subfolders, two values are now supported:\n        - `a` alphabetical (default if not present)\n        - `m` recent first (using folder mtime)\n      schema:\n        type: string\n        enum: [a, m]\n    Group:\n      name: group\n      description: |\n        Playback position sharing group.\n        If present last know position for the folder can be included in response\n      required: false\n      in: query\n      schema:\n        type: string\n      example: your_group\n    GroupInPath:\n      name: group\n      description: |\n        Playback position sharing group.\n      required: true\n      in: path\n      schema:\n        type: string\n      example: your_group\n    Finished:\n      name: finished\n      description: Filters only positions for finished folders\n      required: false\n      in: query\n      schema:\n        type: boolean\n    Unfinished:\n      name: unfinished\n      description: Filters only positions for unfinished folders\n      required: false\n      in: query\n      schema:\n        type: boolean\n    From:\n      name: from\n      description: Filters positions that are older than this timestamp  (unix time in ms)\n      required: false\n      in: query\n      schema:\n        type: integer\n        format: int64\n    To:\n      name: to\n      description: Filters positions that are newer or equal than this timestamp  (unix time in ms)\n      required: false\n      in: query\n      schema:\n        type: integer\n        format: int64\n      example: 1636484567281\n\n  responses:\n    NotFound:\n      description: The specified resource was not found\n      content:\n        text/plain:\n          schema: \n            type: string\n          example: Not Found\n    Unauthorized:\n      description: Not authorized to access this resurce, authentication token invalid or missing\n      content:\n        text/plain:\n          schema: \n            type: string\n          example:  Access denied\n    InvalidRequest:\n      description: Invalid request - either invalid parameters or body\n      content:\n        text/plain:\n          schema:\n            type: string\n          example: Bad request\n    \n\n  securitySchemes:\n    bearerAuth:            # arbitrary name for the security scheme\n      type: http\n      scheme: bearer\n      bearerFormat: custom\n      description: audioserve custom authentication scheme, get token from /authenticate endpoint\n\nsecurity:\n  - bearerAuth: []\n",
			"canonicalURL": "/github.com/izderadicka/audioserve@ae34d901add658e04fba0869919d440e4905828d/-/blob/docs/audioserve-api-v1.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/izderadicka/audioserve/blob/ae34d901add658e04fba0869919d440e4905828d/docs/audioserve-api-v1.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/{col_id}/audio/{path}\": get: responses: 200: content: at 1:18338: content type \"audio:*\": mime: expected slash after first token"
}