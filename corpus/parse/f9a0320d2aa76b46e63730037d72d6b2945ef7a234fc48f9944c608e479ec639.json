{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/devtron-labs/devtron"
		},
		"file": {
			"name": "user_policy.yaml",
			"size": 0,
			"path": "specs/user_policy.yaml",
			"byteSize": 5968,
			"content": "openapi: \"3.0.0\"\ninfo:\n  version: 1.0.0\n  title: Swagger Petstore\n  description: A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification\n  termsOfService: http://swagger.io/terms/\n  contact:\n    name: Swagger API Team\n    email: apiteam@swagger.io\n    url: http://swagger.io\n  license:\n    name: Apache 2.0\n    url: https://www.apache.org/licenses/LICENSE-2.0.html\nservers:\n  - url: http://petstore.swagger.io/api\npaths:\n  /user:\n    get:\n      summary: Returns all users\n      description: all the template users\n      operationId: findAllUsers\n      responses:\n        '200':\n          description: list response\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/User'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      summary: Creates a new User\n      description: create user api, with multiple environment in one row of policy, plus chart group additional type of policy.\n      operationId: addUser\n      requestBody:\n        description: json as request body\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        '200':\n          description: create user response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    put:\n      summary: update a new pet\n      description: Creates a new pet in the store. Duplicates are allowed\n      operationId: updateUser\n      requestBody:\n        description: json as request body\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        '200':\n          description: user response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /user/email:\n    get:\n      summary: search a user list by name\n      description: search user detail by name\n      operationId: findUserByEmail\n      parameters:\n        - name: email-id\n          in: query\n          description: ID of pet to delete\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: list response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /user/{id}:\n    get:\n      summary: Returns user detail with role filter\n      description: all the template group policies\n      operationId: findUserById\n      parameters:\n        - name: id\n          in: path\n          description: ID of user id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: user detail response\n          content:\n            application/json:\n              schema:\n                type: object\n                items:\n                  $ref: '#/components/schemas/User'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n\ncomponents:\n  schemas:\n    User:\n      type: object\n      required:\n        - email_id\n      properties:\n        id:\n          type: integer\n          description: Unique id of user\n        email_id:\n          type: string\n          description: Unique valid email-id of user, comma separated emails ids for multiple users\n        groups:\n          type: array\n          items:\n            type: string\n        roleFilters:\n          type: array\n          items:\n            $ref: '#/components/schemas/roleFilter'\n          description: role filters objects\n\n\n    roleFilter:\n      type: object\n      required:\n        - action\n      properties:\n        entity:\n          type: string\n          description: global entity name, i.e chart-group, git, docker, cluster etc. if this key is present than field team, application and environment are ignored, here empty entity means Devtron apps permission.\n          enum:\n            - chart-group\n            - docker\n            - git\n            - cluster\n            - notification\n        team:\n          type: string\n          description: team name\n        entityName:\n          type: string\n          description: global entity name item name, i.e chart-group (\"abc\"), git(\"devtron-gt\") etc.\n        environment:\n          type: string\n          description: comma saperated environments names.\n        action:\n          type: string\n          description: action is type of role, i.e manager, admin, trigger, view, etc.\n        accessType:\n          type: string\n          enum: [\"\", \"helm-app\"]\n          description: accessType difine permission type \"devtron-app\"=devtron app work flow, \"helm-app\"=helm app work flow. based on this flag data categoriesed into devtron and helm permission tabs in user auth section.\n\n\n\n    Error:\n      required:\n        - code\n        - message\n      properties:\n        code:\n          type: integer\n          format: int32\n          description: Error code\n        message:\n          type: string\n          description: Error message",
			"canonicalURL": "/github.com/devtron-labs/devtron@a2f8a0105207da71b443f423300906b7c45321bf/-/blob/specs/user_policy.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/devtron-labs/devtron/blob/a2f8a0105207da71b443f423300906b7c45321bf/specs/user_policy.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/user/{id}\": get: operation \"findUserById\": responses: 200: content: application/json: schema: parse schema: at specs/user_policy.yaml:132:19: items: object cannot contain 'items' field"
}