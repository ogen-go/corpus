{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/voluntarily/vly2"
		},
		"file": {
			"name": "openapi.yaml",
			"path": "reference/voluntarily-api/openapi.yaml",
			"content": "openapi: 3.0.0\ninfo:\n  title: voluntarily api\n  version: '1.0'\n  contact:\n    name: Andrew Watkins\n    url: voluntarily.nz\n    email: andrew@voluntarily.nz\n  license:\n    name: MPL 2.0\n  description: 'Allows the creation and access to voluntarily resources such as people, opportunities, activities etc.'\nservers:\n  - url: 'http://localhost:3122'\n    description: development\n  - url: 'https://alpha.voluntarily.nz'\n    description: alpha\n  - url: 'https://beta.voluntarily.nz'\n    description: beta\n  - url: 'https://voluntarily.nz'\n    description: production\npaths:\n  '/api/people/{personId}':\n    parameters:\n      name: personId\n      in: path\n      required: true\n      type: string\n    get:\n      summary: Your GET endpoint\n      tags: []\n      responses:\n        '200':\n          description: OK\n          headers: {}\n          content:\n            application/json:\n              schema:\n                $ref: ../common/models/person.v1.yaml\n              examples: {}\n      description: A volunteer or other person on the platform. Full list of people only available to admins. Otherwise via a search or members list\n      requestBody: {}\n    post:\n      summary: ''\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: ../common/models/person.v1.yaml\n      description: Create a new Person\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: ../common/models/person.v1.yaml\n        description: ''\n    put:\n      summary: ''\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: ../common/models/person.v1.yaml\n      description: |\n        Update a person record\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: ../common/models/person.v1.yaml\n    delete:\n      summary: ''\n      responses:\n        '200':\n          description: OK\n      description: Remove a person\n  '/api/opportunities/{opportunityId}':\n    parameters:\n      name: opportunityId\n      in: path\n      required: true\n      type: string\n    get:\n      summary: 'List opportunities,'\n      tags: \u0026ref_0 []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: ../common/models/opportunity.v1.yaml\n      description: \u003e\n        get a list of matching opportunities, query params are json encoded Mongo\n        DB specs\n      parameters:\n        - schema:\n            type: string\n          in: query\n          name: q\n          description: 'MongoDB Query - select matching opportunity  '\n        - schema:\n            type: string\n          in: query\n          name: s\n          description: sort order\n        - schema:\n            type: string\n          in: query\n          name: p\n          description: 'product - select fields  '\n        - schema:\n            type: string\n          in: query\n          name: search\n          description: search tokens\n        - schema:\n            type: string\n          in: query\n          name: location\n          description: region or city\n    post:\n      summary: Create Opportunity\n      tags: *ref_0\n      responses: {}\n    put:\n      summary: Update Opportunity\n      tags: *ref_0\n      responses: {}\n  '/api/organisations/{orgId}':\n    parameters:\n      name: orgId\n      in: path\n      required: true\n      type: string\n    get:\n      summary: 'List orgs,'\n      tags: \u0026ref_1 []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: ../common/models/organisation.v1.yaml\n      description: List organisations or get single organisation\n      parameters:\n        - schema:\n            type: string\n          in: query\n          name: q\n          description: |\n            selection query\n        - schema:\n            type: string\n          in: query\n          name: s\n          description: |\n            sort order\n        - schema:\n            type: string\n          in: query\n          name: p\n          description: product fields\n    post:\n      summary: Create Org\n      tags: *ref_1\n      responses: {}\n    put:\n      summary: Update Org\n      tags: *ref_1\n      responses: {}\ncomponents:\n  schemas: {}\n  securitySchemes: {}\n"
		}
	},
	"Error": "json: cannot unmarshal object into Go struct field PathItem.paths.parameters of type []*ogen.Parameter"
}