{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/hpi-schul-cloud/schulcloud-server"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "src/services/user-group/docs/openapi.yaml",
			"byteSize": 39979,
			"content": "security:\n  - jwtBearer: []\ninfo:\n  title: Schul-Cloud User Group Service API\n  description:\n    This is the API specification for the Schul-Cloud User Group service.\n    \n  contact:\n    name: support\n    email: info@dbildungscloud.de\n  license:\n    name: GPL-3.0\n    url: 'https://github.com/hpi-schul-cloud/schulcloud-server/blob/master/LICENSE'\n  version: 1.0.0\ncomponents:\n  securitySchemes:\n    jwtBearer:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n  schemas:\n    copy:\n      description: TODO\n    share:\n      description: TODO\n    share_list:\n      description: TODO\n    courseModel:\n      description: TODO\n    courseModel_list:\n      description: TODO\n    courses:\n      description: TODO\n    courses_list:\n      description: TODO\n    courseGroupModel:\n      description: TODO\n    courseGroupModel_list:\n      description: TODO\n    courseGroups:\n      description: TODO\n    courseGroups_list:\n      description: TODO\n    classModel:\n      description: TODO\n    classModel_list:\n      description: TODO\n    classes:\n      description: TODO\n    classes_list:\n      description: TODO\n    successor:\n      description: TODO\n    successor_list:\n      description: TODO\n    scopeId:\n      description: TODO\n    scopeId_list:\n      description: TODO\n\npaths:\n  /courses/copy:\n    post:\n      parameters: []\n      responses:\n        '201':\n          description: created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/copy'\n        '401':\n          description: not authenticated\n        '500':\n          description: general error\n      description: Creates a new resource with data.\n      summary: ''\n      tags:\n        - courses\n      security: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/copy'\n  /courses/share:\n    get:\n      parameters:\n        - description: Number of results to return\n          in: query\n          name: $limit\n          schema:\n            type: integer\n        - description: Number of results to skip\n          in: query\n          name: $skip\n          schema:\n            type: integer\n        - description: Property to sort results\n          in: query\n          name: $sort\n          style: deepObject\n          schema:\n            type: object\n        - description: Query parameters to filter\n          in: query\n          name: filter\n          style: form\n          explode: true\n          schema:\n            $ref: '#/components/schemas/share'\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/share_list'\n        '401':\n          description: not authenticated\n        '500':\n          description: general error\n      description: Retrieves a list of all resources from the service.\n      summary: ''\n      tags:\n        - courses\n      security: []\n    post:\n      parameters: []\n      responses:\n        '201':\n          description: created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/share'\n        '401':\n          description: not authenticated\n        '500':\n          description: general error\n      description: Creates a new resource with data.\n      summary: ''\n      tags:\n        - courses\n      security: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/share'\n  '/courses/share/{id}':\n    get:\n      parameters:\n        - in: path\n          name: id\n          description: ID of share to return\n          schema:\n            type: integer\n          required: true\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/share'\n        '401':\n          description: not authenticated\n        '404':\n          description: not found\n        '500':\n          description: general error\n      description: Retrieves a single resource with the given id from the service.\n      summary: ''\n      tags:\n        - courses\n      security: []\n  /courseModel:\n    get:\n      parameters:\n        - description: Number of results to return\n          in: query\n          name: $limit\n          schema:\n            type: integer\n        - description: Number of results to skip\n          in: query\n          name: $skip\n          schema:\n            type: integer\n        - description: Property to sort results\n          in: query\n          name: $sort\n          style: deepObject\n          schema:\n            type: object\n        - description: Query parameters to filter\n          in: query\n          name: filter\n          style: form\n          explode: true\n          schema:\n            $ref: '#/components/schemas/courseModel'\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/courseModel_list'\n        '401':\n          description: not authenticated\n        '500':\n          description: general error\n      description: Retrieves a list of all resources from the service.\n      summary: ''\n      tags:\n        - courseModel\n      security: []\n    post:\n      parameters: []\n      responses:\n        '201':\n          description: created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/courseModel'\n        '401':\n          description: not authenticated\n        '500':\n          description: general error\n      description: Creates a new resource with data.\n      summary: ''\n      tags:\n        - courseModel\n      security: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/courseModel'\n  '/courseModel/{_id}':\n    get:\n      parameters:\n        - in: path\n          name: _id\n          description: ID of courseModel to return\n          schema:\n            type: integer\n          required: true\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/courseModel'\n        '401':\n          description: not authenticated\n        '404':\n          description: not found\n        '500':\n          description: general error\n      description: Retrieves a single resource with the given id from the service.\n      summary: ''\n      tags:\n        - courseModel\n      security: []\n    put:\n      parameters:\n        - in: path\n          name: _id\n          description: ID of courseModel to update\n          schema:\n            type: integer\n          required: true\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/courseModel'\n        '401':\n          description: not authenticated\n        '404':\n          description: not found\n        '500':\n          description: general error\n      description: Updates the resource identified by id using data.\n      summary: ''\n      tags:\n        - courseModel\n      security: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/courseModel'\n    patch:\n      parameters:\n        - in: path\n          name: _id\n          description: ID of courseModel to update\n          schema:\n            type: integer\n          required: true\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/courseModel'\n        '401':\n          description: not authenticated\n        '404':\n          description: not found\n        '500':\n          description: general error\n      description: Updates the resource identified by id using data.\n      summary: ''\n      tags:\n        - courseModel\n      security: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/courseModel'\n    delete:\n      parameters:\n        - in: path\n          name: _id\n          description: ID of courseModel to remove\n          schema:\n            type: integer\n          required: true\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/courseModel'\n        '401':\n          description: not authenticated\n        '404':\n          description: not found\n        '500':\n          description: general error\n      description: Removes the resource with id.\n      summary: ''\n      tags:\n        - courseModel\n      security: []\n  /courses:\n    get:\n      parameters:\n        - description: Number of results to return\n          in: query\n          name: $limit\n          schema:\n            type: integer\n        - description: Number of results to skip\n          in: query\n          name: $skip\n          schema:\n            type: integer\n        - description: Property to sort results\n          in: query\n          name: $sort\n          style: deepObject\n          schema:\n            type: object\n        - description: Query parameters to filter\n          in: query\n          name: filter\n          style: form\n          explode: true\n          schema:\n            $ref: '#/components/schemas/courses'\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/courses_list'\n        '401':\n          description: not authenticated\n        '500':\n          description: general error\n      description: Retrieves a list of all resources from the service.\n      summary: ''\n      tags:\n        - courses\n      security: []\n    post:\n      parameters: []\n      responses:\n        '201':\n          description: created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/courses'\n        '401':\n          description: not authenticated\n        '500':\n          description: general error\n      description: Creates a new resource with data.\n      summary: ''\n      tags:\n        - courses\n      security: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/courses'\n  '/courses/{id}':\n    get:\n      parameters:\n        - in: path\n          name: id\n          description: ID of courses to return\n          schema:\n            type: integer\n          required: true\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/courses'\n        '401':\n          description: not authenticated\n        '404':\n          description: not found\n        '500':\n          description: general error\n      description: Retrieves a single resource with the given id from the service.\n      summary: ''\n      tags:\n        - courses\n      security: []\n    put:\n      parameters:\n        - in: path\n          name: id\n          description: ID of courses to update\n          schema:\n            type: integer\n          required: true\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/courses'\n        '401':\n          description: not authenticated\n        '404':\n          description: not found\n        '500':\n          description: general error\n      description: Updates the resource identified by id using data.\n      summary: ''\n      tags:\n        - courses\n      security: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/courses'\n    patch:\n      parameters:\n        - in: path\n          name: id\n          description: ID of courses to update\n          schema:\n            type: integer\n          required: true\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/courses'\n        '401':\n          description: not authenticated\n        '404':\n          description: not found\n        '500':\n          description: general error\n      description: Updates the resource identified by id using data.\n      summary: ''\n      tags:\n        - courses\n      security: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/courses'\n    delete:\n      parameters:\n        - in: path\n          name: id\n          description: ID of courses to remove\n          schema:\n            type: integer\n          required: true\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/courses'\n        '401':\n          description: not authenticated\n        '404':\n          description: not found\n        '500':\n          description: general error\n      description: Removes the resource with id.\n      summary: ''\n      tags:\n        - courses\n      security: []\n  /courseGroupModel:\n    get:\n      parameters:\n        - description: Number of results to return\n          in: query\n          name: $limit\n          schema:\n            type: integer\n        - description: Number of results to skip\n          in: query\n          name: $skip\n          schema:\n            type: integer\n        - description: Property to sort results\n          in: query\n          name: $sort\n          style: deepObject\n          schema:\n            type: object\n        - description: Query parameters to filter\n          in: query\n          name: filter\n          style: form\n          explode: true\n          schema:\n            $ref: '#/components/schemas/courseGroupModel'\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/courseGroupModel_list'\n        '401':\n          description: not authenticated\n        '500':\n          description: general error\n      description: Retrieves a list of all resources from the service.\n      summary: ''\n      tags:\n        - courseGroupModel\n      security: []\n    post:\n      parameters: []\n      responses:\n        '201':\n          description: created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/courseGroupModel'\n        '401':\n          description: not authenticated\n        '500':\n          description: general error\n      description: Creates a new resource with data.\n      summary: ''\n      tags:\n        - courseGroupModel\n      security: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/courseGroupModel'\n  '/courseGroupModel/{_id}':\n    get:\n      parameters:\n        - in: path\n          name: _id\n          description: ID of courseGroupModel to return\n          schema:\n            type: integer\n          required: true\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/courseGroupModel'\n        '401':\n          description: not authenticated\n        '404':\n          description: not found\n        '500':\n          description: general error\n      description: Retrieves a single resource with the given id from the service.\n      summary: ''\n      tags:\n        - courseGroupModel\n      security: []\n    put:\n      parameters:\n        - in: path\n          name: _id\n          description: ID of courseGroupModel to update\n          schema:\n            type: integer\n          required: true\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/courseGroupModel'\n        '401':\n          description: not authenticated\n        '404':\n          description: not found\n        '500':\n          description: general error\n      description: Updates the resource identified by id using data.\n      summary: ''\n      tags:\n        - courseGroupModel\n      security: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/courseGroupModel'\n    patch:\n      parameters:\n        - in: path\n          name: _id\n          description: ID of courseGroupModel to update\n          schema:\n            type: integer\n          required: true\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/courseGroupModel'\n        '401':\n          description: not authenticated\n        '404':\n          description: not found\n        '500':\n          description: general error\n      description: Updates the resource identified by id using data.\n      summary: ''\n      tags:\n        - courseGroupModel\n      security: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/courseGroupModel'\n    delete:\n      parameters:\n        - in: path\n          name: _id\n          description: ID of courseGroupModel to remove\n          schema:\n            type: integer\n          required: true\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/courseGroupModel'\n        '401':\n          description: not authenticated\n        '404':\n          description: not found\n        '500':\n          description: general error\n      description: Removes the resource with id.\n      summary: ''\n      tags:\n        - courseGroupModel\n      security: []\n  /courseGroups:\n    get:\n      parameters:\n        - description: Number of results to return\n          in: query\n          name: $limit\n          schema:\n            type: integer\n        - description: Number of results to skip\n          in: query\n          name: $skip\n          schema:\n            type: integer\n        - description: Property to sort results\n          in: query\n          name: $sort\n          style: deepObject\n          schema:\n            type: object\n        - description: Query parameters to filter\n          in: query\n          name: filter\n          style: form\n          explode: true\n          schema:\n            $ref: '#/components/schemas/courseGroups'\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/courseGroups_list'\n        '401':\n          description: not authenticated\n        '500':\n          description: general error\n      description: Retrieves a list of all resources from the service.\n      summary: ''\n      tags:\n        - courseGroups\n      security: []\n    post:\n      parameters: []\n      responses:\n        '201':\n          description: created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/courseGroups'\n        '401':\n          description: not authenticated\n        '500':\n          description: general error\n      description: Creates a new resource with data.\n      summary: ''\n      tags:\n        - courseGroups\n      security: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/courseGroups'\n  '/courseGroups/{id}':\n    get:\n      parameters:\n        - in: path\n          name: id\n          description: ID of courseGroups to return\n          schema:\n            type: integer\n          required: true\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/courseGroups'\n        '401':\n          description: not authenticated\n        '404':\n          description: not found\n        '500':\n          description: general error\n      description: Retrieves a single resource with the given id from the service.\n      summary: ''\n      tags:\n        - courseGroups\n      security: []\n    put:\n      parameters:\n        - in: path\n          name: id\n          description: ID of courseGroups to update\n          schema:\n            type: integer\n          required: true\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/courseGroups'\n        '401':\n          description: not authenticated\n        '404':\n          description: not found\n        '500':\n          description: general error\n      description: Updates the resource identified by id using data.\n      summary: ''\n      tags:\n        - courseGroups\n      security: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/courseGroups'\n    patch:\n      parameters:\n        - in: path\n          name: id\n          description: ID of courseGroups to update\n          schema:\n            type: integer\n          required: true\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/courseGroups'\n        '401':\n          description: not authenticated\n        '404':\n          description: not found\n        '500':\n          description: general error\n      description: Updates the resource identified by id using data.\n      summary: ''\n      tags:\n        - courseGroups\n      security: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/courseGroups'\n    delete:\n      parameters:\n        - in: path\n          name: id\n          description: ID of courseGroups to remove\n          schema:\n            type: integer\n          required: true\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/courseGroups'\n        '401':\n          description: not authenticated\n        '404':\n          description: not found\n        '500':\n          description: general error\n      description: Removes the resource with id.\n      summary: ''\n      tags:\n        - courseGroups\n      security: []\n  /classModel:\n    get:\n      parameters:\n        - description: Number of results to return\n          in: query\n          name: $limit\n          schema:\n            type: integer\n        - description: Number of results to skip\n          in: query\n          name: $skip\n          schema:\n            type: integer\n        - description: Property to sort results\n          in: query\n          name: $sort\n          style: deepObject\n          schema:\n            type: object\n        - description: Query parameters to filter\n          in: query\n          name: filter\n          style: form\n          explode: true\n          schema:\n            $ref: '#/components/schemas/classModel'\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/classModel_list'\n        '401':\n          description: not authenticated\n        '500':\n          description: general error\n      description: Retrieves a list of all resources from the service.\n      summary: ''\n      tags:\n        - classModel\n      security: []\n    post:\n      parameters: []\n      responses:\n        '201':\n          description: created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/classModel'\n        '401':\n          description: not authenticated\n        '500':\n          description: general error\n      description: Creates a new resource with data.\n      summary: ''\n      tags:\n        - classModel\n      security: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/classModel'\n  '/classModel/{_id}':\n    get:\n      parameters:\n        - in: path\n          name: _id\n          description: ID of classModel to return\n          schema:\n            type: integer\n          required: true\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/classModel'\n        '401':\n          description: not authenticated\n        '404':\n          description: not found\n        '500':\n          description: general error\n      description: Retrieves a single resource with the given id from the service.\n      summary: ''\n      tags:\n        - classModel\n      security: []\n    put:\n      parameters:\n        - in: path\n          name: _id\n          description: ID of classModel to update\n          schema:\n            type: integer\n          required: true\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/classModel'\n        '401':\n          description: not authenticated\n        '404':\n          description: not found\n        '500':\n          description: general error\n      description: Updates the resource identified by id using data.\n      summary: ''\n      tags:\n        - classModel\n      security: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/classModel'\n    patch:\n      parameters:\n        - in: path\n          name: _id\n          description: ID of classModel to update\n          schema:\n            type: integer\n          required: true\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/classModel'\n        '401':\n          description: not authenticated\n        '404':\n          description: not found\n        '500':\n          description: general error\n      description: Updates the resource identified by id using data.\n      summary: ''\n      tags:\n        - classModel\n      security: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/classModel'\n    delete:\n      parameters:\n        - in: path\n          name: _id\n          description: ID of classModel to remove\n          schema:\n            type: integer\n          required: true\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/classModel'\n        '401':\n          description: not authenticated\n        '404':\n          description: not found\n        '500':\n          description: general error\n      description: Removes the resource with id.\n      summary: ''\n      tags:\n        - classModel\n      security: []\n  /classes:\n    get:\n      parameters:\n        - description: Number of results to return\n          in: query\n          name: $limit\n          schema:\n            type: integer\n        - description: Number of results to skip\n          in: query\n          name: $skip\n          schema:\n            type: integer\n        - description: Property to sort results\n          in: query\n          name: $sort\n          style: deepObject\n          schema:\n            type: object\n        - description: Query parameters to filter\n          in: query\n          name: filter\n          style: form\n          explode: true\n          schema:\n            $ref: '#/components/schemas/classes'\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/classes_list'\n        '401':\n          description: not authenticated\n        '500':\n          description: general error\n      description: Retrieves a list of all resources from the service.\n      summary: ''\n      tags:\n        - classes\n      security: []\n    post:\n      parameters: []\n      responses:\n        '201':\n          description: created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/classes'\n        '401':\n          description: not authenticated\n        '500':\n          description: general error\n      description: Creates a new resource with data.\n      summary: ''\n      tags:\n        - classes\n      security: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/classes'\n  '/classes/{id}':\n    get:\n      parameters:\n        - in: path\n          name: id\n          description: ID of classes to return\n          schema:\n            type: integer\n          required: true\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/classes'\n        '401':\n          description: not authenticated\n        '404':\n          description: not found\n        '500':\n          description: general error\n      description: Retrieves a single resource with the given id from the service.\n      summary: ''\n      tags:\n        - classes\n      security: []\n    put:\n      parameters:\n        - in: path\n          name: id\n          description: ID of classes to update\n          schema:\n            type: integer\n          required: true\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/classes'\n        '401':\n          description: not authenticated\n        '404':\n          description: not found\n        '500':\n          description: general error\n      description: Updates the resource identified by id using data.\n      summary: ''\n      tags:\n        - classes\n      security: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/classes'\n    patch:\n      parameters:\n        - in: path\n          name: id\n          description: ID of classes to update\n          schema:\n            type: integer\n          required: true\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/classes'\n        '401':\n          description: not authenticated\n        '404':\n          description: not found\n        '500':\n          description: general error\n      description: Updates the resource identified by id using data.\n      summary: ''\n      tags:\n        - classes\n      security: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/classes'\n    delete:\n      parameters:\n        - in: path\n          name: id\n          description: ID of classes to remove\n          schema:\n            type: integer\n          required: true\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/classes'\n        '401':\n          description: not authenticated\n        '404':\n          description: not found\n        '500':\n          description: general error\n      description: Removes the resource with id.\n      summary: ''\n      tags:\n        - classes\n      security: []\n  /classes/successor:\n    get:\n      parameters:\n        - description: Number of results to return\n          in: query\n          name: $limit\n          schema:\n            type: integer\n        - description: Number of results to skip\n          in: query\n          name: $skip\n          schema:\n            type: integer\n        - description: Property to sort results\n          in: query\n          name: $sort\n          style: deepObject\n          schema:\n            type: object\n        - description: Query parameters to filter\n          in: query\n          name: filter\n          style: form\n          explode: true\n          schema:\n            $ref: '#/components/schemas/successor'\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/successor_list'\n        '401':\n          description: not authenticated\n        '500':\n          description: general error\n      description: Retrieves a list of all resources from the service.\n      summary: ''\n      tags:\n        - classes\n      security: []\n  '/classes/successor/{id}':\n    get:\n      parameters:\n        - in: path\n          name: id\n          description: ID of successor to return\n          schema:\n            type: integer\n          required: true\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/successor'\n        '401':\n          description: not authenticated\n        '404':\n          description: not found\n        '500':\n          description: general error\n      description: Retrieves a single resource with the given id from the service.\n      summary: ''\n      tags:\n        - classes\n      security: []\n  '/users/{scopeId}/courses':\n    get:\n      parameters:\n        - in: path\n          name: scopeId\n          schema:\n            type: string\n          required: true\n          description: scopeId parameter\n        - description: Number of results to return\n          in: query\n          name: $limit\n          schema:\n            type: integer\n        - description: Number of results to skip\n          in: query\n          name: $skip\n          schema:\n            type: integer\n        - description: Property to sort results\n          in: query\n          name: $sort\n          style: deepObject\n          schema:\n            type: object\n        - description: Query parameters to filter\n          in: query\n          name: filter\n          style: form\n          explode: true\n          schema:\n            $ref: '#/components/schemas/scopeId'\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/scopeId_list'\n        '401':\n          description: not authenticated\n        '500':\n          description: general error\n      description: Retrieves a list of all resources from the service.\n      summary: ''\n      tags:\n        - users\n      security: []\n  '/courses/{scopeId}/userPermissions':\n    get:\n      parameters:\n        - in: path\n          name: scopeId\n          schema:\n            type: string\n          required: true\n          description: scopeId parameter\n        - description: Number of results to return\n          in: query\n          name: $limit\n          schema:\n            type: integer\n        - description: Number of results to skip\n          in: query\n          name: $skip\n          schema:\n            type: integer\n        - description: Property to sort results\n          in: query\n          name: $sort\n          style: deepObject\n          schema:\n            type: object\n        - description: Query parameters to filter\n          in: query\n          name: filter\n          style: form\n          explode: true\n          schema:\n            $ref: '#/components/schemas/scopeId'\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/scopeId_list'\n        '401':\n          description: not authenticated\n        '500':\n          description: general error\n      description: Retrieves a list of all resources from the service.\n      summary: ''\n      tags:\n        - courses\n      security: []\n  '/courses/{scopeId}/userPermissions/{id}':\n    get:\n      parameters:\n        - in: path\n          name: scopeId\n          schema:\n            type: string\n          required: true\n          description: scopeId parameter\n        - in: path\n          name: id\n          description: 'ID of :scopeId to return'\n          schema:\n            type: integer\n          required: true\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/scopeId'\n        '401':\n          description: not authenticated\n        '404':\n          description: not found\n        '500':\n          description: general error\n      description: Retrieves a single resource with the given id from the service.\n      summary: ''\n      tags:\n        - courses\n      security: []\n  '/courses/{scopeId}/members':\n    get:\n      parameters:\n        - in: path\n          name: scopeId\n          schema:\n            type: string\n          required: true\n          description: scopeId parameter\n        - description: Number of results to return\n          in: query\n          name: $limit\n          schema:\n            type: integer\n        - description: Number of results to skip\n          in: query\n          name: $skip\n          schema:\n            type: integer\n        - description: Property to sort results\n          in: query\n          name: $sort\n          style: deepObject\n          schema:\n            type: object\n        - description: Query parameters to filter\n          in: query\n          name: filter\n          style: form\n          explode: true\n          schema:\n            $ref: '#/components/schemas/scopeId'\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/scopeId_list'\n        '401':\n          description: not authenticated\n        '500':\n          description: general error\n      description: Retrieves a list of all resources from the service.\n      summary: ''\n      tags:\n        - courses\n      security: []\nopenapi: 3.0.2\ntags:\n  - name: courses\n    description: A courses service.\n  - name: courseModel\n    description: A courseModel service.\n  - name: courseGroupModel\n    description: A courseGroupModel service.\n  - name: courseGroups\n    description: A courseGroups service.\n  - name: classModel\n    description: A classModel service.\n  - name: classes\n    description: A classes service.\n  - name: users\n    description: A users service.\n    "
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /courseGroupModel: get: parameters: parse parameter \"filter\": invalid schema:style:explode combination"
}