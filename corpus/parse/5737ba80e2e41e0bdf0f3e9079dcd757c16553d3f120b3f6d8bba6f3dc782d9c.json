{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/vickz84259/lolesports-api-docs"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi.yaml",
			"byteSize": 104734,
			"content": "openapi: 3.0.1\ninfo:\n  title: Lolesports API\n  description: Unofficial documentation to the lolesports API\n  version: \"1.0.0-alpha-1\"\n\ntags:\n  - name: leagues\n    description: |\n      Get information about a league, the standings and its various tournaments.\n  - name: events\n    description: |\n      Get information about ongoing, completed or upcoming events.\n  - name: teams\n    description: |\n      Get information about a team and its roster.\n  - name: match details\n    description: |\n      Get the full match details of a game either live or after it has occured.\n  - name: highlander\n    description: |\n      These are the old api endpoints.\n\nx-tagGroups:\n  - name: Rel Api\n    tags:\n      - leagues\n      - events\n      - teams\n      - match details\n  - name: Highlander Api\n    tags:\n      - highlander\n\npaths:\n  /getLeagues:\n    get:\n      operationId: getLeagues\n      parameters:\n        - $ref: '#/components/parameters/hl'\n\n      tags:\n        - leagues\n\n      responses:\n        '200':\n          description: Successful request\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties: false\n                required: [data]\n                properties:\n                  data:\n                    type: object\n                    additionalProperties: false\n                    required: [leagues]\n                    properties:\n                      leagues:\n                        type: array\n                        items:\n                          allOf:\n                            - $ref: '#/components/schemas/extendedLeague'\n                            - type: object\n                              required: [region]\n                              additionalProperties: false\n                              properties:\n                                region:\n                                  description: |\n                                    Indicates which type of tournament the league is. Whether\n                                    international or a regional tournament. The region name is\n                                    given.\n                                  type: string\n\n      security:\n        - apiKeyAuth: []\n\n      servers: \u0026esports-api-servers\n        - url: https://esports-api.lolesports.com/persisted/gw\n        - url: https://prod-relapi.ewp.gg/persisted/gw\n\n  /getSchedule:\n    get:\n      operationId: getSchedule\n      parameters:\n        - $ref: '#/components/parameters/hl'\n        - $ref: '#/components/parameters/leagueIds'\n        - $ref: '#/components/parameters/pageToken'\n\n      tags:\n        - events\n\n      responses:\n        '200':\n          description: Successful request\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties: false\n                required: [data]\n                properties:\n                  data:\n                    type: object\n                    additionalProperties: false\n                    required: [schedule]\n                    properties:\n                      schedule:\n                        type: object\n                        additionalProperties: false\n                        required: [updated, pages, events]\n                        properties:\n                          updated:\n                            description: The time the data presented was last updated\n                            type: string\n                            format: date-time\n                          pages:\n                            type: object\n                            additionalProperties: false\n                            required: [older, newer]\n                            properties:\n                              older:\n                                $ref: \"#/components/schemas/pageToken\"\n                              newer:\n                                $ref: \"#/components/schemas/pageToken\"\n                          events:\n                            type: array\n                            items:\n                              allOf:\n                                - $ref: '#/components/schemas/extendedEvent'\n                                - type: object\n                                  additionalProperties: false\n                                  required: [league, match]\n                                  properties:\n                                    league:\n                                      $ref: '#/components/schemas/baseLeague'\n                                    match:\n                                      type: object\n                                      additionalProperties: false\n                                      required: [teams]\n                                      properties:\n                                        teams:\n                                          type: array\n                                          items:\n                                            type: object\n                                            additionalProperties: false\n                                            required: [record, result]\n                                            properties:\n                                              record:\n                                                $ref: '#/components/schemas/record'\n                                              result:\n                                                type: object\n                                                additionalProperties: false\n                                                required: [outcome]\n                                                properties:\n                                                  outcome:\n                                                    $ref: '#/components/schemas/outcome'\n\n      security:\n        - apiKeyAuth: []\n\n      servers: *esports-api-servers\n\n  # Need to test if the leagueId and tournamentId work with this endpoint\n  /getLive:\n    get:\n      operationId: getLive\n      parameters:\n        - $ref: '#/components/parameters/hl'\n\n      tags:\n        - events\n\n      responses:\n        '200':\n          description: Successful request\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties: false\n                required: [data]\n                properties:\n                  data:\n                    type: object\n                    additionalProperties: false\n                    required: [schedule]\n                    properties:\n                      schedule:\n                        type: object\n                        additionalProperties: false\n                        required: [events]\n                        properties:\n                          events:\n                            type: array\n                            description: |\n                              Array of event objects representing matches that are\n                              currently ongoing.\n\n                              This will be null if no match is taking place at that\n                              time\n                            nullable: true\n                            items:\n                              allOf:\n                                - $ref: '#/components/schemas/extendedEvent'\n                                - type: object\n                                  additionalProperties: false\n                                  required: [id, league]\n                                  properties:\n                                    id:\n                                      type: string\n                                    league:\n                                      $ref: '#/components/schemas/extendedLeague'\n                                    match:\n                                      type: object\n                                      additionalProperties: false\n                                      required: [teams]\n                                      properties:\n                                        teams:\n                                          type: array\n                                          items:\n                                            type: object\n                                            additionalProperties: false\n                                            required: [slug, record, result]\n                                            properties:\n                                              slug:\n                                                $ref: '#/components/schemas/teamSlug'\n                                              record:\n                                                $ref: '#/components/schemas/record'\n                                              result:\n                                                type: object\n                                                additionalProperties: false\n                                                required: [outcome]\n                                                properties:\n                                                  outcome:\n                                                    $ref: '#/components/schemas/outcome'\n\n      security:\n        - apiKeyAuth: []\n\n      servers: *esports-api-servers\n\n  /getTournamentsForLeague:\n      get:\n        operationId: getTournamentsForLeague\n        parameters:\n          - $ref: '#/components/parameters/hl'\n          - $ref: '#/components/parameters/leagueId'\n\n        tags:\n          - leagues\n\n        responses:\n          '200':\n            description: Successful request\n            content:\n              application/json:\n                schema:\n                  type: object\n                  additionalProperties: false\n                  required: [data]\n                  properties:\n                    data:\n                      type: object\n                      additionalProperties: false\n                      required: [leagues]\n                      properties:\n                        leagues:\n                          type: array\n                          description: |\n                            An array of league object(s) where each object contains an array of\n                            tournaments.\n                          items:\n                            type: object\n                            additionalProperties: false\n                            required: [tournaments]\n                            properties:\n                              tournaments:\n                                type: array\n                                description: |\n                                  An array of tournament object(s) where each object describes a\n                                  specific tournament.\n                                items:\n                                  $ref: '#/components/schemas/tournament'\n\n        security:\n          - apiKeyAuth: []\n\n        servers: *esports-api-servers\n\n  /getStandings:\n    get:\n      operationId: getStandings\n      parameters:\n        - $ref: '#/components/parameters/hl'\n        - $ref: '#/components/parameters/tournamentIds'\n\n      tags:\n        - leagues\n\n      responses:\n        '200':\n          description: Successful request\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties: false\n                required: [data]\n                properties:\n                  data:\n                    type: object\n                    additionalProperties: false\n                    required: [standings]\n                    properties:\n                      standings:\n                        type: array\n                        description: |\n                          Each object in the array contains details of each tournament requested.\n                        items:\n                          type: object\n                          additionalProperties: false\n                          required: [stages]\n                          properties:\n                            stages:\n                              type: array\n                              items:\n                                $ref: '#/components/schemas/stage'\n\n      security:\n        - apiKeyAuth: []\n\n      servers: *esports-api-servers\n\n  /getCompletedEvents:\n    get:\n      operationId: getCompletedEvents\n      parameters:\n        - $ref: '#/components/parameters/hl'\n        - $ref: '#/components/parameters/tournamentIds'\n\n      tags:\n        - events\n\n      responses:\n        '200':\n          description: Successful request\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties: false\n                required: [data]\n                properties:\n                  data:\n                    type: object\n                    additionalProperties: false\n                    required: [schedule]\n                    properties:\n                      schedule:\n                        type: object\n                        additionalProperties: false\n                        required: [events]\n                        properties:\n                          events:\n                            type: array\n                            items:\n                              allOf:\n                                - $ref: '#/components/schemas/simpleEvent'\n                                - type: object\n                                  additionalProperties: false\n                                  required: [games, match]\n                                  properties:\n                                    games:\n                                      type: array\n                                      items:\n                                        $ref: '#/components/schemas/game'\n                                    match:\n                                      type: object\n                                      additionalProperties: false\n                                      required: [type]\n                                      properties:\n                                        type:\n                                          type: string\n                                          enum: [normal]\n\n      security:\n        - apiKeyAuth: []\n\n      servers: *esports-api-servers\n\n  /getEventDetails:\n    get:\n      operationId: getEventDetails\n      parameters:\n        - $ref: '#/components/parameters/hl'\n        - $ref: '#/components/parameters/id'\n\n      tags:\n        - events\n\n      responses:\n        '200':\n          description: Succesful request\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties: false\n                required: [data]\n                properties:\n                  data:\n                    type: object\n                    additionalProperties: false\n                    required: [event]\n                    properties:\n                      event:\n                        allOf:\n                          - $ref: '#/components/schemas/baseEvent'\n                          - type: object\n                            additionalProperties: false\n                            required: [id, type, league, match, streams]\n                            properties:\n                              id:\n                                type: string\n                              type:\n                                $ref: '#/components/schemas/eventType'\n                              league:\n                                $ref: '#/components/schemas/simpleLeague'\n                              match:\n                                type: object\n                                additionalProperties: false\n                                required: [games, strategy, teams]\n                                properties:\n                                  games:\n                                    type: array\n                                    items:\n                                      $ref: '#/components/schemas/extendedGame'\n                                  strategy:\n                                    $ref: '#/components/schemas/baseStrategy'\n                                  teams:\n                                    type: array\n                                    minItems: 2\n                                    maxItems: 2\n                                    items:\n                                      type: object\n                                      additionalProperties: false\n                                      required: [id, result]\n                                      properties:\n                                        id:\n                                          $ref: '#/components/schemas/teamId'\n                                        result:\n                                          $ref: '#/components/schemas/result'\n                              streams:\n                                type: array\n                                nullable: true\n                                description: |\n                                  For a live match this will contain information about various streams,\n                                  the platforms they are on and the locale.\n\n                                  Otherwise it will be null.\n                                items:\n                                  $ref: '#/components/schemas/extendedVod'\n      security:\n        - apiKeyAuth: []\n\n      servers: *esports-api-servers\n\n  /getTeams:\n    get:\n      operationId: getTeams\n      parameters:\n        - $ref: '#/components/parameters/hl'\n        - $ref: '#/components/parameters/teamSlugs'\n\n      tags:\n        - teams\n\n      responses:\n        '200':\n          description: Successful request\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties: false\n                required: [data]\n                properties:\n                  data:\n                    type: object\n                    additionalProperties: false\n                    required: [teams]\n                    properties:\n                      teams:\n                        type: array\n                        items:\n                          $ref: '#/components/schemas/extendedTeam'\n\n      security:\n        - apiKeyAuth: []\n\n      servers: *esports-api-servers\n\n  /getGames:\n    get:\n      operationId: getGames\n      parameters:\n        - $ref: '#/components/parameters/hl'\n        - $ref: '#/components/parameters/gameIds'\n\n      tags:\n        - events\n\n      responses:\n        '200':\n          description: Successful request\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties: false\n                required: [data]\n                properties:\n                  data:\n                    type: object\n                    additionalProperties: false\n                    required: [games]\n                    properties:\n                      games:\n                        type: array\n                        items:\n                          $ref: '#/components/schemas/simpleGame'\n\n      security:\n        - apiKeyAuth: []\n\n      servers: *esports-api-servers\n\n  /window/{gameId}:\n    get:\n      operationId: getWindow\n      parameters:\n        - $ref: '#/components/parameters/pathGameId'\n        - $ref: '#/components/parameters/startingTime'\n\n      tags:\n        - match details\n\n      responses:\n        '200':\n          description: Successful request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/window'\n\n      servers: \u0026livestats-api\n        - url: https://feed.lolesports.com/livestats/v1\n\n  /details/{gameId}:\n    get:\n      operationId: getDetails\n      parameters:\n        - $ref: '#/components/parameters/pathGameId'\n        - $ref: '#/components/parameters/startingTime'\n        - name: participantIds\n          in: query\n          description: |\n            A list of the participant Ids separated by underscores and not commas\n          schema:\n            type: string\n            pattern: '^\\d{1,2}(?:_\\d{1,2}){0,9}$'\n\n      tags:\n        - match details\n\n      responses:\n        '200':\n          description: Successful request\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties: false\n                required: [frames]\n                properties:\n                  frames:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/detailsFrame'\n\n      servers: *livestats-api\n\n  /navItems:\n    get:\n      operationId: navItems\n\n      tags:\n        - highlander\n\n      responses:\n        '200':\n          description: Successful request\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties: false\n                required: [navItems, leagues]\n                properties:\n                  navItems:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/navItem'\n                  leagues:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/highlanderLeague'\n\n      servers: \u0026v1\n        - url: https://api.lolesports.com/api/v1\n\n  /videos:\n    get:\n      description: |\n        This endpoint returns details about esports vods on YouTube.\n\n        The data returned by this endpoint is fairly large (more than 5MB) since\n        it includes vods from 2015 up to (at the time of writing this) June 2019\n        and it will continue growing.\n\n        Do consider this when dealing with clients (like mobile phones) where\n        bandwidth and memory may be scarce.\n\n        It is highly advised that you cache the data from this endpoint.\n      operationId: videos\n\n      tags:\n        - highlander\n\n      responses:\n        '200':\n          description: Successful request\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties: false\n                required: [videos]\n                properties:\n                  videos:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/video'\n\n      servers: \u0026v2\n        - url: https://api.lolesports.com/api/v2\n\n  /highlanderTournaments:\n    get:\n      operationId: highlanderTournaments\n\n      tags:\n        - highlander\n\n      parameters:\n        - $ref: '#/components/parameters/league'\n\n      description: |\n        If a league does not have highlanderTournament objects, the API will return 404\n\n      responses:\n        '200':\n          description: Successful request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/highlanderTournaments'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                type: object\n                required: [error]\n                properties:\n                  error:\n                    type: object\n                    required: [statusCode, message]\n                    properties:\n                      statusCode:\n                        type: integer\n                        enum: [404]\n                      message:\n                        type: string\n                        pattern: ^404 - http:\\/\\/highlander\\.lolesports\\.com\\/v1\\/leagues\\/\\d+$\n\n      servers: *v2\n\n  /leagues:\n    get:\n      operationId: leagues\n\n      tags:\n        - highlander\n\n      parameters:\n        - name: query\n          in: query\n          description: |\n            'This endpoint requires either the id or the slug to be passed. If both are present then only the first\n            one will be considered.\n\n            _Due to a limitation in the OpenApi specification it is not possible to show the mutual exclusive nature\n            that the query parameters in this endpoint require. The schema below is as close as a representation I\n            could get in expressing the nature of the query parameters._\n\n            Check the examples below to help better understand the query parameters needed.\n\n            **Example 1**\n\n            `https://api.lolesports.com/api/v1/leagues?id=3`\n\n            This will return the details for **LEC**.\n\n            **Example 2**\n\n            `https://api.lolesports.com/api/v1/leagues?slug=worlds`\n\n            This will return the details for **Worlds**\n\n            **Example 3**\n\n            `https://api.lolesports.com/api/v1/leagues?id=3\u0026slug=worlds`\n\n            In such a scenario where both query parameters are used only the first will be considered, hence it will\n            only return the details for **LEC**.\n\n            **Example 4**\n\n            `https://api.lolesports.com/api/v1/leagues`\n\n            This is not valid. At least one of the two query parameters (id or slug) is required.'\n          required: true\n          schema:\n            type: object\n            oneOf:\n              - type: object\n                required: [id]\n                properties:\n                  id:\n                    type: integer\n                additionalProperties: false\n              - type: object\n                required: [slug]\n                properties:\n                  slug:\n                    type: string\n                additionalProperties: false\n\n      responses:\n        '200':\n          description: Successful request\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties: false\n                required: [leagues]\n                properties:\n                  leagues:\n                    type: array\n                    description: |\n                      This array contains information about the league retrieved.\n                    minItems: 1\n                    maxItems: 1\n                    items:\n                      $ref: '#/components/schemas/highlanderLeague'\n                  highlanderTournaments:\n                    $ref: '#/components/schemas/highlanderTournaments'\n                  highlanderRecords:\n                    $ref: '#/components/schemas/highlanderRecords'\n                  teams:\n                    $ref: '#/components/schemas/highlanderTeams'\n                  players:\n                    $ref: '#/components/schemas/highlanderPlayers'\n\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties: false\n                properties:\n                  error:\n                    type: string\n                    enum: [Invalid Input Error]\n\n      servers: *v1\n\n  /scheduleItems:\n    get:\n      operationId: scheduleItems\n\n      tags:\n        - highlander\n\n      parameters:\n        - $ref: '#/components/parameters/highlanderLeagueId'\n\n      responses:\n        '200':\n          description: Successful request\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties: false\n                properties:\n                  scheduleItems:\n                    type: array\n                    minItems: 0\n                    items:\n                      $ref: '#/components/schemas/scheduleItem'\n                  highlanderTournaments:\n                    $ref: '#/components/schemas/highlanderTournaments'\n                  teams:\n                    $ref: '#/components/schemas/highlanderTeams'\n                  highlanderRecords:\n                    $ref: '#/components/schemas/highlanderRecords'\n                  players:\n                    $ref: '#/components/schemas/highlanderPlayers'\n\n      servers: *v1\n\n  /teams:\n    get:\n      operationId: teams\n\n      tags:\n        - highlander\n\n      description: |\n        If the `teamStatsSummaries`, `teamRosterStats` and `teamStatsHistories` keys are not present,\n        then the team did not take part in that particular tournament.\n\n      parameters:\n        - $ref: '#/components/parameters/teamSlug'\n        - $ref: '#/components/parameters/highlanderTournamentId'\n\n      responses:\n        '200':\n          description: Successful request\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties: false\n                required: [players, highlanderTournaments, scheduleItems, teams]\n                properties:\n                  players:\n                    type: array\n                    description: Contains the players currently in the team.\n                    items:\n                      allOf:\n                        - $ref: '#/components/schemas/highlanderPlayer'\n                        - type: object\n                          additionalProperties: false\n                          properties:\n                            teamRosterStat:\n                              type: string\n                              pattern: '^urn:rg:lolesports:global:player:player:\\d+$'\n                  highlanderTournaments:\n                    $ref: '#/components/schemas/highlanderTournaments'\n                  scheduleItems:\n                    type: array\n                    description: Contains details about a few of the team's upcoming matches\n                    items:\n                      $ref: '#/components/schemas/scheduleItem'\n                  teamStatsSummaries:\n                    type: array\n                    minItems: 1\n                    maxItems: 1\n                    description: |\n                      Contains a summary of the team stats during that particular tournament.\n                    items:\n                      type: object\n                      additionalProperties: false\n                      required: [teamId, kdaRatio, kdaRatioRank, averageWinLength, averageWinLengthRank,\n                        firstDragonKillRatio, firstDragonKillRatioRank, firstTowerRatio, firstTowerRatioRank,\n                        averageDamageByPosition]\n                      properties:\n                        teamId:\n                          type: string\n                          pattern: '^urn:rg:lolesports:global:team:team:\\d+$'\n                          description: Contains the team ID\n                        kdaRatio:\n                          type: number\n                          format: double\n                          description: The team's KDA Ratio\n                        kdaRatioRank:\n                          type: integer\n                          format: int32\n                          description: |\n                            The position the team ranks at compared to other teams' KDA ratio\n                        averageWinLength:\n                          type: integer\n                          format: int32\n                          description: |\n                            The average length of the team's wins in seconds.\n                        averageWinLengthRank:\n                          type: integer\n                          format: int32\n                          description: |\n                            The position the team ranks at compared to other team's average win lengths.\n                        firstDragonKillRatio:\n                          type: number\n                          format: double\n                          description: |\n                            The ratio of first dragons killed by this team compared to the total first dragons killed\n                            in this team's matches.\n                        firstDragonKillRatioRank:\n                          type: integer\n                          format: int32\n                          description: |\n                            The position the teams ranks at compared to other team's first dragon kill ratio\n                        firstTowerRatio:\n                          type: number\n                          format: double\n                          description: |\n                            The ratio of first tower secured by this team compared to the total first towers secured\n                            in this team's matches.\n                        firstTowerRatioRank:\n                          type: integer\n                          format: int32\n                          description: |\n                            The position the teams ranks at compared to other team's first tower ratio.\n                        averageDamageByPosition:\n                          type: object\n                          additionalProperties: false\n                          description: |\n                            It is assumed that the values represent the damage dealt in thousands.\n                          properties:\n                            DUO_CARRY:\n                              type: integer\n                              format: int32\n                            DUO_SUPPORT:\n                              type: integer\n                              format: int32\n                            SOLO:\n                              type: integer\n                              format: int32\n                            NONE:\n                              type: integer\n                              format: int32\n                            DUO:\n                              type: integer\n                              format: int32\n                  teamRosterStats:\n                    type: array\n                    description: |\n                      Contains stats of the players of the particular team who played in that tournament.\n                    items:\n                      type: object\n                      additionalProperties: false\n                      required: [playerId, gamesPlayed, averageAssists, averageDeaths, averageKillParticipation,\n                        averageKills, summonerName, championIds]\n                      properties:\n                        playerId:\n                          type: string\n                          pattern: \u0026playerId '^urn:rg:lolesports:global:player:player:\\d+$'\n                        gamesPlayed:\n                          type: integer\n                          format: int32\n                        averageAssists:\n                          type: integer\n                          format: int32\n                        averageDeaths:\n                          type: number\n                          format: double\n                        averageKillParticipation:\n                          type: number\n                          format: double\n                        averageKills:\n                          type: number\n                          format: double\n                        summonerName:\n                          type: string\n                        championIds:\n                          type: array\n                          minItems: 1\n                          maxItems: 3\n                          items:\n                            type: integer\n                            format: int32\n                  teamStatsHistories:\n                    type: array\n                    maxItems: 4\n                    description: |\n                      A contains stats of the team's previous 4 matches in that particular tournament.\n                    items:\n                      type: object\n                      additionalProperties: false\n                      required: [id, timestamp, assists, deaths, kills, win, championsIds, match, team,\n                        opponent, game]\n                      properties:\n                        id:\n                          type: string\n                          pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}:\\d+$'\n                          description: Contains the game ID and the team ID.\n                        timestamp: \u0026timestamp\n                          type: integer\n                          format: int64\n                          description: 'Unix timestamp in milliseconds of when the match started.'\n                        assists:\n                          type: integer\n                          format: int32\n                        kills:\n                          type: integer\n                          format: int32\n                        win:\n                          type: boolean\n                          enum: [true, false]\n                        championIds:\n                          type: array\n                          minItems: 5\n                          maxItems: 5\n                          items:\n                            type: integer\n                            format: int32\n                        match:\n                          type: string\n                          pattern: \u0026uuidRegex '^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$'\n                          description: The match ID\n                        team:\n                          type: integer\n                          format: int32\n                          description: The team ID\n                        opponent:\n                          type: integer\n                          format: int32\n                          description: The opponent's team ID\n                        game:\n                          type: integer\n                          format: int32\n                          description: The game ID\n\n                  teams:\n                    $ref: '#/components/schemas/highlanderTeams'\n\n      servers: *v1\n\n  /players:\n    get:\n      operationId: players\n\n      tags:\n        - highlander\n\n      description: |\n        If the `playerStatsSummaries` and `playerStatsHistories` keys are not present,\n        then the player did not take part in that particular tournament.\n\n      parameters:\n        - $ref: '#/components/parameters/playerSlug'\n        - $ref: '#/components/parameters/highlanderTournamentId'\n\n      responses:\n        '200':\n          description: Successful request\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties: false\n                required: [players, highlanderTournaments, scheduleItems, teams]\n                properties:\n                  players:\n                    type: array\n                    description: |\n                      Contains information about the player in question.\n\n                      If `playerStatsSummary` and `playerStatsHistory` are missing then the player did not take part\n                      in the tournament specificed by the tournament ID in the url.\n                    minItems: 1\n                    maxItems: 1\n                    items:\n                      allOf:\n                        - $ref: '#/components/schemas/highlanderPlayer'\n                        - type: object\n                          additionalProperties: false\n                          required: [starterOnTeams, subOnTeams, teams, photoInformation, scheduleItems]\n                          properties:\n                            starterOnTeams:\n                              type: array\n                              description: |\n                                The IDs of the team(s) this player is/has been on the starting\n                                lineup\n                              items:\n                                type: integer\n                            subOnTeams:\n                              type: array\n                              description: |\n                                The IDs of the team(s) this player is/has been on as a sub player\n                              items:\n                                type: integer\n                            teams:\n                              type: array\n                              description: |\n                                A combination of the teamIDs in `starterOnTeams` and `subOnTeams`\n                              items:\n                                type: integer\n                            photoInformation:\n                              type: object\n                              additionalProperties: false\n                              required: [width, height, type, url, transferred, size, time]\n                              properties:\n                                width:\n                                  type: integer\n                                  description: The width of the image in pixels.\n                                height:\n                                  type: integer\n                                  description: The height of the image in pixels.\n                                type:\n                                  type: string\n                                  description: The image's file format.\n                                url:\n                                  type: string\n                                  description: URL to the player's photo.\n                                transferred:\n                                  type: integer\n                                size:\n                                  type: integer\n                                  description: Size of the image in bytes\n                                time:\n                                  type: number\n                                  format: float32\n                            scheduleItems:\n                              type: array\n                              description: |\n                                Contains the ids to schedule items representing the player's/team's next matches.\n\n                                This is regardless of the tournament ID passed in the url.\n                              maxItems: 4\n                              items:\n                                type: string\n                            playerStatsSummary:\n                              type: string\n                              pattern: '^urn:rg:lolesports:global:player:player:\\d+$'\n                            playerStatsHistory:\n                              type: array\n                              description: |\n                                Contains the `playerStatsHistory` IDs, which are just the game ID of the match and the player\n                                ID separated by a colon.\n\n                                Contains the last 4 played matches in the specified tournament. The first ID is of the most\n                                recently played match.\n                              maxItems: 4\n                              items:\n                                type: string\n                                pattern: \u0026statsHistoryId '^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}:\\d+$'\n                  highlanderTournaments:\n                    type: array\n                    description: |\n                      Contains the various tournaments the player has participated in.\n                    items:\n                      $ref: '#/components/schemas/highlanderTournament'\n                  scheduleItems:\n                    type: array\n                    maxItems: 4\n                    description: |\n                      Contains details about the next 4 matches the player's team is schedule to participate in.\n                    items:\n                      $ref: '#/components/schemas/matchScheduleItem'\n                  teams:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/highlanderTeam'\n                  playerStatsSummaries:\n                    type: array\n                    description: |\n                      The stats displayed here are for the player during the tournament specified in the url\n                    minItems: 1\n                    maxItems: 1\n                    items:\n                      type: object\n                      additionalProperties: false\n                      required: [playerId, kdaRatio, kdaRatioRank, csPerTenMinutes, csPerTenMinutesRank, killParticipation,\n                        killParticipationRank, mostplayedchampions]\n                      properties:\n                        playerId:\n                          type: string\n                          pattern: *playerId\n                        kdaRatio:\n                          type: number\n                          format: double\n                        kdaRatioRank:\n                          type: number\n                          format: integer\n                        csPerTenMinutes:\n                          type: number\n                          format: double\n                        csPerTenMinutesRank:\n                          type: number\n                          format: integer\n                        killParticipation:\n                          type: number\n                          format: double\n                        killParticipationRank:\n                          type: number\n                        mostplayedchampions:\n                          type: array\n                          maxItems: 3\n                          items:\n                            type: object\n                            additionalProperties: false\n                            required: [championId, wins, losses, total, kdaRatio]\n                            properties:\n                              championId:\n                                type: number\n                                format: integer\n                              wins:\n                                type: number\n                                format: integer\n                              losses:\n                                type: number\n                                format: integer\n                              total:\n                                type: number\n                                format: integer\n                              kdaRatio:\n                                type: number\n                                format: double\n                  playerStatsHistories:\n                    type: array\n                    description: |\n                      Displays stats from the recently played matches in that particular tournaments.\n                      The array starts with the most recently played match.\n                    maxItems: 4\n                    items:\n                      type: object\n                      additionalProperties: false\n                      required: [id, playerId, championId, timestamp, assists, deaths, kills, csPerTenMinutes,\n                        kdaRatio, killParticipation, win, match, team, opponent, game]\n                      properties:\n                        id:\n                          type: string\n                          pattern: *statsHistoryId\n                        playerId:\n                          type: string\n                          pattern: *playerId\n                        championId:\n                          type: number\n                          format: integer\n                        timestamp: *timestamp\n                        assists:\n                          type: number\n                          format: integer\n                        deaths:\n                          type: number\n                          format: integer\n                        kills:\n                          type: number\n                          format: integer\n                        csPerTenMinutes:\n                          type: number\n                          format: double\n                        kdaRatio:\n                          type: number\n                          format: double\n                        killParticipation:\n                          type: number\n                          format: double\n                        win:\n                          type: boolean\n                          enum: [true, false]\n                        match:\n                          type: string\n                          description: The match ID\n                          format: *uuidRegex\n                        team:\n                          type: number\n                          format: integer\n                          description: The team ID the player playes for.\n                        opponent:\n                          type: number\n                          format: integer\n                          description: The opponent's team ID.\n                        game:\n                          type: string\n                          description: The game ID\n                          format: *uuidRegex\n\n      servers: *v1\n\ncomponents:\n  schemas:\n    pageToken:\n      description: \u0026pagetoken |\n        Base 64 encoded string used to determine the\n        next \"page\" of data to pull\n      type: string\n      format: byte\n      nullable: true\n\n    baseLeague:\n      type: object\n      required: [name, slug]\n      additionalProperties: false\n      properties:\n        name: \u0026leagueName\n          type: string\n          description: The name of the league\n          minLength: 1\n        slug:\n          type: string\n          description: URL friendly version of the league's name\n          minLength: 1\n\n    simpleLeague:\n      allOf:\n        - $ref: '#/components/schemas/baseLeague'\n        - type: object\n          additionalProperties: false\n          required: [id, image]\n          properties:\n            id:\n              description: The league's ID\n              type: string\n            image:\n              description: URL to an image of the League's logo\n              type: string\n              minLength: 1\n\n    extendedLeague:\n      allOf:\n        - $ref: '#/components/schemas/simpleLeague'\n        - type: object\n          additionalProperties: false\n          required: [priority]\n          properties:\n            priority:\n              description: Unknown\n              type: integer\n\n    highlanderLeague:\n      allOf:\n        - $ref: '#/components/schemas/baseLeague'\n        - type: object\n          required: [id, guid, region, drupalId, logoUrl, createdAt, updatedAt, abouts, names]\n          additionalProperties: false\n          properties:\n            id:\n              description: The league's ID\n              type: integer\n            guid:\n              description: |\n                The [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier) for the league.\n              type: string\n            region:\n              type: string\n            drupalId:\n              type: integer\n              nullable: true\n            logoUrl:\n              type: string\n            createdAt: \u0026createdAt\n              type: string\n              description: The date and time when this entry was created.\n              format: date-time\n            updatedAt: \u0026updatedAt\n              type: string\n              description: The date and time when this entry was last updated.\n              format: date-time\n            # Add example to better explain this property\n            abouts:\n              type: object\n              description: |\n                Contains a description of the league translated in various languages.\n\n                The keys are presented in the format ([ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1)\n                and [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2))\n\n                `{languageCode}_{countryCode}`\n\n                The value is a string containing\n                html tags representing the description in that specific locale.\n              minProperties: 0\n              additionalProperties:\n                type: string\n            names:\n              type: object\n              description: |\n                Contains the names of the league translated in various languages.\n\n                The keys are presented in the format ([ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1)\n                and [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2))\n\n                `{languageCode}_{countryCode}`\n\n                The value is a string containing\n                the name of the league in that specific locale.\n              minProperties: 0\n              additionalProperties:\n                type: string\n            tournaments:\n              type: array\n              description: |\n                An array containing the [UUIDs](https://en.wikipedia.org/wiki/Universally_unique_identifier)\n                for the tournaments in this league.\n              items:\n                type: string\n                pattern: *uuidRegex\n\n    record:\n      type: object\n      nullable: true\n      description: |\n        Describes the amount of wins and losses the team has incurred\n        in a particular stage of the tournament specifically group stage\n\n        For knockout phase, each series is treated individually.\n\n        This object is null when the match is ongoing and it is in the\n        knockout stage.\n      additionalProperties: false\n      required: [losses, wins]\n      properties:\n        losses:\n          type: integer\n          minLength: 1\n        wins:\n          type: integer\n          minLength: 1\n\n    result:\n      type: object\n      additionalProperties: false\n      required: [gameWins]\n      properties:\n        gameWins:\n          type: integer\n          description: |\n            The number of games the team has won in that\n            in the series\n          minLength: 1\n\n    outcome:\n      type: string\n      nullable: true\n      description: |\n        Indicate whether the team won or lost the series\n\n        This will be null if the match is ongoing\n      enum: [loss, win]\n\n    team:\n      type: object\n      additionalProperties: false\n      required: [code, image, name]\n      properties:\n        code:\n          type: string\n          minLength: 1\n        image:\n          type: string\n          minLength: 1\n        name:\n          type: string\n          minLength: 1\n\n    customTeam:\n      type: object\n      additionalProperties: false\n      required: [id, side]\n      properties:\n        id:\n          $ref: '#/components/schemas/teamId'\n        side:\n          type: string\n          enum: [blue, red]\n\n    extendedTeam:\n      allOf:\n        - $ref: '#/components/schemas/team'\n        - type: object\n          additionalProperties: false\n          required: [id, slug, alternativeImage, homeLeague, players]\n          properties:\n            id:\n              $ref: '#/components/schemas/teamId'\n            slug:\n              $ref: '#/components/schemas/teamSlug'\n            alternativeImage:\n              type: string\n              minLength: 1\n            homeLeague:\n              $ref: '#/components/schemas/homeLeague'\n            players:\n              type: array\n              items:\n                $ref: '#/components/schemas/player'\n\n    homeLeague:\n      type: object\n      additionalProperties: false\n      required: [name, region]\n      properties:\n        name: *leagueName\n        region:\n          type: string\n          description: The region where the league is located\n\n    teamSlug:\n      type: string\n      description: The URL friendly version of the team name\n\n    teamId:\n      type: string\n      description: The team id\n\n    baseStrategy:\n      type: object\n      additionalProperties: false\n      required: [count]\n      properties:\n        count:\n          type: integer\n          enum: [1, 3, 5]\n\n    strategy:\n      allOf:\n        - $ref: '#/components/schemas/baseStrategy'\n        - type: object\n          additionalProperties: false\n          required: [type]\n          properties:\n            type:\n              type: string\n              enum: [bestOf]\n\n    teams:\n      type: array\n      minItems: 2\n      maxItems: 2\n      items:\n        $ref: '#/components/schemas/team'\n\n    baseMatch:\n      type: object\n      additionalProperties: false\n      required: [teams]\n      properties:\n        teams:\n          $ref: '#/components/schemas/teams'\n\n    simpleMatch:\n      allOf:\n        - $ref: '#/components/schemas/baseMatch'\n        - type: object\n          additionalProperties: false\n          required: [id]\n          properties:\n            id:\n              description: The match id\n              type: string\n\n    state:\n      type: string\n      enum: [completed, unstarted, inProgress]\n\n    eventType:\n      type: string\n      enum: [match, show]\n\n    baseEvent:\n      type: object\n      properties:\n        match:\n          $ref: '#/components/schemas/baseMatch'\n\n    simpleEvent:\n      type: object\n      additionalProperties: false\n      required: [startTime, blockName, match]\n      properties:\n        startTime:\n          type: string\n          description: The time the match started\n          format: date-time\n        blockName:\n          type: string\n          nullable: true\n        match:\n          allOf:\n            - $ref: '#/components/schemas/simpleMatch'\n            - type: object\n              additionalProperties: false\n              required: [strategy, teams]\n              properties:\n                strategy:\n                  $ref: '#/components/schemas/strategy'\n                teams:\n                  type: array\n                  items:\n                    type: object\n                    additionalProperties: false\n                    required: [result]\n                    properties:\n                      result:\n                        $ref: '#/components/schemas/result'\n\n    extendedEvent:\n      allOf:\n        - $ref: '#/components/schemas/simpleEvent'\n        - type: object\n          additionalProperties: false\n          required: [state, type]\n          properties:\n            state:\n              $ref: '#/components/schemas/state'\n            type:\n              $ref: '#/components/schemas/eventType'\n\n    tournament:\n      type: object\n      additionalProperties: false\n      required: [endDate, id, slug, startDate]\n      properties:\n        endDate:\n          type: string\n          description: The date the tournament ends/ended.\n          format: full-date\n        id:\n          type: string\n          description: This is the tournament id\n        slug:\n          type: string\n        startDate:\n          type: string\n          description: The date the tournament starts/started.\n          format: full-date\n\n    stage:\n      type: object\n      description: |\n        Represents a stage in a tournament.\n\n        Whether it is the group or knockout stage.\n      additionalProperties: false\n      required: [name, type, slug, sections]\n      properties:\n          name:\n            type: string\n            description: The name of that stage of the tournament\n          type:\n            type: string\n            description: The type of the stage.\n            enum: [groups, bracket]\n          slug:\n            type: string\n          sections:\n            type: array\n            description: |\n              Each object in the array represents a particular round in that\n              specific stage in the tournament.\n\n              For the knockout stages, we could have the quarter finals,\n              semi finals and the finals under their own sections.\n\n              For the group stage, there is usually only one section.\n            items:\n              $ref: '#/components/schemas/section'\n\n    section:\n      type: object\n      additionalProperties: false\n      required: [name, matches, rankings]\n      properties:\n        name:\n          type: string\n          description: The name of the section\n        matches:\n          type: array\n          items:\n            allOf:\n              - $ref: '#/components/schemas/simpleMatch'\n              - type: object\n                additionalProperties: false\n                required: [state, previousMatchIds, flags, teams]\n                properties:\n                  state:\n                    $ref: '#/components/schemas/state'\n                  previousMatchIds:\n                    type: array\n                    description: |\n                      This stores the previous match ids for the teams in the current\n                      match were involved in.\n\n                      For group stages this is usually null. For bracket stage it is\n                      used to indicate the matches that were played before the match\n                      in question.\n                    nullable: true\n                    items:\n                      type: string\n                  flags:\n                  # Test this to see if it ever contains any other value apart from null\n                    type: string\n                    nullable: true\n                    description: |\n                      The purpose of this key is unknown. So far the only value it\n                      has seems to be null.\n                  teams:\n                    type: array\n                    items:\n                      type: object\n                      additionalProperties: false\n                      required: [id, slug, result]\n                      properties:\n                        id:\n                          $ref: '#/components/schemas/teamId'\n                        slug:\n                          $ref: '#/components/schemas/teamSlug'\n                        result:\n                          allOf:\n                            - $ref: '#/components/schemas/result'\n                            - type: object\n                              additionalProperties: false\n                              required: [outcome]\n                              properties:\n                                outcome:\n                                  $ref: '#/components/schemas/outcome'\n        rankings:\n          type: array\n          description: |\n            Contains details about the actual standings for that particular\n            section\n\n            This is mostly used for the group stage. For the knockout stages, it\n            is usually empty.\n          items:\n            $ref: '#/components/schemas/ranking'\n\n    ranking:\n      type: object\n      additionalProperties: false\n      required: [ordinal, teams]\n      properties:\n        ordinal:\n          type: integer\n          description: The league position\n        teams:\n          type: array\n          description: |\n            The teams that are at that league position.\n\n            In most cases there will only be one team object in this array. In\n            cases where several teams are tied with the same score, this array will\n            contain all teams tied for that position.\n          items:\n            allOf:\n              - $ref: '#/components/schemas/team'\n              - type: object\n                properties:\n                  id:\n                    $ref: '#/components/schemas/teamId'\n                  slug:\n                    $ref: '#/components/schemas/teamSlug'\n                  record:\n                    $ref: '#/components/schemas/record'\n\n    game:\n      type: object\n      additionalProperties: false\n      required: [vods]\n      properties:\n        vods:\n          type: array\n          items:\n            $ref: '#/components/schemas/vod'\n\n    simpleGame:\n      type: object\n      additionalProperties: false\n      required: [id, state, number, vods]\n      properties:\n        id:\n          type: string\n          description: The game ID\n        state:\n          $ref: '#/components/schemas/state'\n        number:\n          type: integer\n          description: The number of the game\n          enum: [1, 2, 3, 4, 5]\n        vods:\n          type: array\n          items:\n            $ref: '#/components/schemas/extendedVod'\n\n    extendedGame:\n      allOf:\n        - $ref: '#/components/schemas/simpleGame'\n        - type: object\n          additionalProperties: false\n          required: [teams]\n          properties:\n            teams:\n              type: array\n              items:\n                $ref: '#/components/schemas/customTeam'\n\n    vod:\n      type: object\n      additionalProperties: false\n      required: [parameter]\n      properties:\n        parameter:\n          type: string\n\n    extendedVod:\n      allOf:\n        - $ref: '#/components/schemas/vod'\n        - type: object\n          additionalProperties: false\n          required: [locale, provider, offset]\n          properties:\n            locale:\n              $ref: '#/components/schemas/locale'\n            provider:\n              type: string\n              description: |\n                The platform that is hosting the vod\n              enum: [youtube, twitch]\n            offset:\n              type: integer\n              description: Purpose Unknown\n\n    locale:\n      type: string\n      description: |\n        This is the locale or language code using [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1)\n        and [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\n      enum: [en-US, en-GB, en-AU, cs-CZ, de-DE, el-GR, es-ES,\n        es-MX, fr-FR, hu-HU, it-IT, pl-PL, pt-BR, ro-RO, ru-RU,\n        tr-TR, ja-JP, ko-KR]\n\n    player:\n      type: object\n      additionalProperties: false\n      required: [id, summonerName, firstName, lastName, image, role]\n      properties:\n        id:\n          type: string\n        summonerName:\n          type: string\n        firstName:\n          type: string\n        lastName:\n          type: string\n        image:\n          type: string\n        role:\n          type: string\n\n    window:\n      type: object\n      additionalProperties: false\n      required: [esportsGameId, esportsMatchId, gameMetadata, frames]\n      properties:\n        esportsGameId:\n          type: string\n          description: The game Id of the match\n        esportsMatchId:\n          type: string\n          description: The match Id of the match\n        gameMetadata:\n          $ref: '#/components/schemas/gameMetadata'\n        frames:\n          type: array\n          items:\n            $ref: '#/components/schemas/windowFrame'\n\n    gameMetadata:\n      type: object\n      additionalProperties: false\n      required: [patchVersion, blueTeamMetadata, redTeamMetadata]\n      properties:\n        patchVersion:\n          type: string\n          description: The patch the match was played on\n        blueTeamMetadata:\n          $ref: '#/components/schemas/teamMetadata'\n        redTeamMetadata:\n          $ref: '#/components/schemas/teamMetadata'\n\n    teamMetadata:\n      type: object\n      additionalProperties: false\n      required: [esportsTeamId, participantMetadata]\n      properties:\n        esportsTeamId:\n          type: string\n          description: The team Id\n        participantMetadata:\n          type: array\n          items:\n            oneOf:\n              - $ref: '#/components/schemas/participantMetadata'\n              - $ref: '#/components/schemas/participantMetadataExtended'\n\n    participantMetadata:\n      type: object\n      additionalProperties: false\n      required: [participantId, summonerName, championId, role]\n      properties:\n        participantId:\n          $ref: '#/components/schemas/participantId'\n        summonerName:\n          type: string\n        championId:\n          type: string\n        role:\n          type: string\n          enum: [top, jungle, mid, bottom, support]\n\n    participantMetadataExtended:\n      allOf:\n        - $ref: '#/components/schemas/participantMetadata'\n        - type: object\n          additionalProperties: false\n          required: [esportsPlayerId]\n          properties:\n            esportsPlayerId:\n              type: string\n\n    participantId:\n      type: integer\n      enum: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    baseFrame:\n      type: object\n      additionalProperties: false\n      required: [rfc460Timestamp]\n      properties:\n        rfc460Timestamp:\n          type: string\n          format: date-time\n\n    windowFrame:\n      allOf:\n        - $ref: '#/components/schemas/baseFrame'\n        - type: object\n          additionalProperties: false\n          required: [rfc460Timestamp, gameState, blueTeam, redTeam]\n          properties:\n            rfc460Timestamp:\n              type: string\n              format: date-time\n            gameState:\n              type: string\n              enum: [in_game, finished]\n            blueTeam:\n              $ref: '#/components/schemas/teamStats'\n            redTeam:\n              $ref: '#/components/schemas/teamStats'\n\n    detailsFrame:\n      allOf:\n        - $ref: '#/components/schemas/baseFrame'\n        - type: object\n          additionalProperties: false\n          required: [participants]\n          properties:\n            participants:\n              type: array\n              minItems: 1\n              maxItems: 10\n              items:\n                $ref: '#/components/schemas/extendedParticipantStats'\n\n    teamStats:\n      type: object\n      additionalProperties: false\n      required: [totalGold, inhibitors, towers, barons, totalKills, dragons, participants]\n      properties:\n        totalGold:\n          type: integer\n        inhibitors:\n          type: integer\n        towers:\n          type: integer\n        barons:\n          type: integer\n        totalKills:\n          type: integer\n        dragons:\n          type: array\n          items:\n            type: string\n            enum: [ocean, mountain, infernal, cloud, elder]\n        participants:\n          type: array\n          maxItems: 5\n          items:\n            $ref: '#/components/schemas/participantStats'\n\n    baseParticipantStats:\n      type: object\n      additionalProperties: false\n      required: [participantId, level, kills, deaths, assists, creepScore]\n      properties:\n        participantId:\n          $ref: '#/components/schemas/participantId'\n        level:\n          type: integer\n        kills:\n          type: integer\n        deaths:\n          type: integer\n        assists:\n          type: integer\n        creepScore:\n          type: integer\n\n    participantStats:\n      allOf:\n        - $ref: '#/components/schemas/baseParticipantStats'\n        - type: object\n          additionalProperties: false\n          required: [totalGold, currentHealth, maxHealth]\n          properties:\n            totalGold:\n              type: integer\n            currentHealth:\n              type: integer\n            maxHealth:\n              type: integer\n\n    extendedParticipantStats:\n      allOf:\n        - $ref: '#/components/schemas/participantStats'\n        - type: object\n          additionalProperties: false\n          required: [totalGoldEarned, killParticipation, championDamageShare, wardsPlaced, wardsDestroyed,\n            attackDamage, abilityPower, criticalChance, attackSpeed, lifeSteal, armor, magicResistance, tenacity,\n            items, perkMetadata, abilities]\n          properties:\n            totalGoldEarned:\n              type: integer\n            killParticipation:\n              type: number\n              format: float\n            championDamageShare:\n              type: number\n              format: float\n            wardsPlaced:\n              type: integer\n            wardsDestroyed:\n              type: integer\n            attackDamage:\n              type: integer\n            abilityPower:\n              type: integer\n            criticalChance:\n              type: number\n              format: float\n            attackSpeed:\n              type: integer\n            lifeSteal:\n              type: integer\n            armor:\n              type: integer\n            magicResistance:\n              type: integer\n            tenacity:\n              type: number\n              format: float\n            items:\n              type: array\n              maxItems: 7\n              description: |\n                Contains the item Ids of the items in the inventory\n              items:\n                type: integer\n            perkMetadata:\n              $ref: '#/components/schemas/perkMetadata'\n            abilities:\n              $ref: '#/components/schemas/abilities'\n\n    perkMetadata:\n      type: object\n      additionalProperties: false\n      required: [styleId, subStyleId, perks]\n      properties:\n        styleId:\n          type: integer\n          description: |\n            The id of the primary rune path\n          enum: [8000, 8100, 8200, 8300, 8400]\n        subStyleId:\n          type: integer\n          description: |\n            The id of the secondary rune path\n          enum: [8000, 8100, 8200, 8300, 8400]\n        perks:\n          type: array\n          minItems: 9\n          maxItems: 9\n          description: |\n            The runes selected.\n\n            Index 0 - 3 are the ids of the primary runes\n            Index 4 - 5 are the ids of the secondary runes\n            Index 6 - 8 are the ids of the stats shard\n          items:\n            type: integer\n\n    abilities:\n      type: array\n      description: |\n        Contains the abilities the summoner levelled up at each level\n      maxItems: 18\n      enum: [Q, W, E, R]\n      items:\n        type: string\n\n    navItem:\n      type: object\n      additionalProperties: false\n      required: [id, link, slug, label, imageUrl, order, external, parentNavItem, createdAt, updatedAt]\n      properties:\n        id:\n          type: integer\n        link:\n          type: string\n        slug:\n          type: string\n          nullable: true\n        label:\n          type: string\n        imageUrl:\n          type: string\n          nullable: true\n        order:\n          type: integer\n        external:\n          type: boolean\n        parentNavItem:\n          allOf:\n            - $ref: '#/components/schemas/navItem'\n            - type: object\n              nullable: true\n        createdAt: *createdAt\n        updatedAt: *updatedAt\n\n    video:\n      type: object\n      additionalProperties: false\n      required: [id, slug, label, locale, reference, source, createdAt, updatedAt, game]\n      properties:\n        id:\n          type: integer\n        slug:\n          type: string\n          nullable: true\n        label:\n          type: string\n          nullable: true\n        locale:\n          type: string\n          description: |\n            The video's locale. The value is a [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1)\n            language code.\n        reference:\n          type: string\n          pattern: '^urn:rg:lolesports:global:highlander:tournament:(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}):game:(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12})$'\n          description: |\n            Contains the tournament Id and the game Id of that match.\n        source:\n          type: string\n          description: |\n            URL to the YouTube video of the match\n        createdAt: *createdAt\n        updatedAt: *updatedAt\n        game:\n          $ref: '#/components/schemas/gameId'\n\n    gameId:\n      type: string\n      description: |\n        The game Id of the match.\n\n        It is a [UUID version 4](https://en.wikipedia.org/wiki/Universally_unique_identifier)\n      pattern: *uuidRegex\n\n    highlanderTournaments:\n      type: array\n      items:\n        $ref: '#/components/schemas/highlanderTournament'\n\n    highlanderTournament:\n      type: object\n      required: [id, title, description, leagueReference, roles, queues, published, rosters,\n        brackets, liveMatches, startDate, endDate, platformIds, gameIds,\n        leagueId, league]\n      properties:\n        id:\n          type: string\n          pattern: *uuidRegex\n          description: |\n            The tournament Id\n\n            It is a [UUID version 4](https://en.wikipedia.org/wiki/Universally_unique_identifier)\n        title:\n          type: string\n          description: URL friendly version of the tournament name\n        description:\n          type: string\n          description: The tournament's name\n        leagueReference:\n          type: string\n          pattern: \u0026leagueReference '^urn:rg:lolesports:global:league:league:\\d+$'\n          description: The integer in the string represents the league ID.\n        roles:\n          $ref: '#/components/schemas/roles'\n        bracketType:\n          $ref: '#/components/schemas/bracketType'\n        matchType:\n          $ref: '#/components/schemas/matchType'\n        rosteringStrategy:\n          $ref: '#/components/schemas/rosteringStrategy'\n        seedingStrategy:\n          $ref: '#/components/schemas/rosteringStrategy'\n        queues:\n          type: object\n          minProperties: 0\n        rosters:\n          type: object\n          description: |\n            The keys to this object are [UUID version 4](https://en.wikipedia.org/wiki/Universally_unique_identifier)\n            representing the roster ID.\n\n            Their values are objects but they don't contain anything useful about the roster.\n          additionalProperties:\n            type: object\n            required: [id, name, roles, teamReference, substitutions, team]\n            properties:\n              id:\n                type: string\n                pattern: *uuidRegex\n                description: |\n                  The roster ID.\n\n                  It is a [UUID version 4](https://en.wikipedia.org/wiki/Universally_unique_identifier)\n              state:\n                type: string\n                enum: [eliminated]\n              name:\n                type: string\n                description: The abbreviated version of the team's name.\n              roles:\n                type: object\n                minProperties: 0\n              teamReference:\n                type: string\n                pattern: '^urn:rg:lolesports:global:team:team:\\d+$'\n              substitutions:\n                type: object\n                minProperties: 0\n              team:\n                type: string\n                pattern: '^\\d+$'\n                description: The Team ID\n        published:\n          type: boolean\n          enum: [true, false]\n          description: |\n            If the value is true then the league/tournament has concluded, otherwise it is ongoing.\n        breakpoints:\n          $ref: '#/components/schemas/breakpoints'\n        brackets:\n          $ref: '#/components/schemas/brackets'\n        standings:\n          $ref: '#/components/schemas/standings'\n        liveMatches:\n          type: array\n          description: |\n            The array contains [UUID version 4](https://en.wikipedia.org/wiki/Universally_unique_identifier) Match IDs\n\n            Despite the name of this property it is unreliable as for some tournaments this array will\n            contain match IDs yet the matches are over.\n          items:\n            type: string\n            pattern: *uuidRegex\n        startDate:\n          type: string\n          description: The day the tournament starts/started.\n          format: date\n        endDate:\n          type: string\n          description: The day the tournament ends/ended.\n          format: date\n        platformIds:\n          type: array\n          description: |\n            Contains all the platform IDs in for this tournaments.\n\n            A platform ID is combination of the gameRealm and the gameId.\n            The regex below describes the format.\n\n            `^[A-Z]+\\d+:\\d+$`\n          items:\n            type: string\n        gameIds:\n          type: array\n          description: |\n            'Contains all the gameIds in this tournament.\n\n            **Note:** The gameIds are in the format [UUID version 4](https://en.wikipedia.org/wiki/Universally_unique_identifier)'\n          items:\n            type: string\n        leagueId:\n          type: string\n          description: The league ID\n          pattern: '^\\d+$'\n        league:\n          type: string\n          description: The league ID\n          pattern: '^\\d+$'\n\n    rosteringStrategy:\n      type: object\n      required: [identifier]\n      properties:\n        identifier:\n          type: string\n          enum: [passthru, random]\n\n    roles:\n      type: object\n      required: [creator, owner]\n      properties:\n        creator: \u0026roleArray\n          type: array\n          minItems: 1\n          items:\n            $ref: '#/components/schemas/role'\n        owner: *roleArray\n\n    role:\n      type: object\n      required: [origin, region, summonerName, summonerLevel, profileIconId, admin]\n      properties:\n        origin:\n          type: string\n          enum: [BEARER_TOKEN]\n        region:\n          type: string\n          enum: [global]\n        summonerName:\n          type: string\n          enum: [test-user]\n        summonerLevel:\n          type: integer\n          enum: [0]\n        profileIconId:\n          type: integer\n          enum: [0]\n        admin:\n          type: boolean\n          enum: [true]\n\n    simpleRoster:\n      type: object\n      properties:\n        roster:\n          type: string\n          pattern: *uuidRegex\n          description: The roster ID\n\n    breakpoints:\n    # Give more information on this....\n      type: object\n      description: |\n        The keys to this object are [UUID version 4](https://en.wikipedia.org/wiki/Universally_unique_identifier)\n        representing the roster ID.\n      additionalProperties:\n        type: object\n        required: [id, name, position, input, scores, roles, generator]\n        properties:\n          id:\n            type: string\n            pattern: *uuidRegex\n            description: The breakpoint's ID\n          name:\n            type: string\n          position:\n            type: integer\n          input:\n            type: array\n            items:\n              allOf:\n                - $ref: '#/components/schemas/simpleRoster'\n                - type: object\n                  properties:\n                    bracket:\n                      type: string\n                      pattern: *uuidRegex\n                      description: The bracket ID\n                    standing:\n                      type: integer\n          standings:\n            $ref: '#/components/schemas/standings'\n          scores:\n            $ref: '#/components/schemas/scores'\n          roles:\n            $ref: '#/components/schemas/roles'\n          generator:\n            type: object\n            properties:\n              identifier:\n                type: string\n                enum: [noop]\n\n    standings:\n      type: object\n      required: [result, timestamp, closed]\n      properties:\n        result:\n          $ref: '#/components/schemas/highlanderResult'\n        timestamp: *timestamp\n        source:\n          type: string\n          enum: [manual, bestOf]\n          description: How the record was created/updated.\n        note:\n          type: string\n        history:\n          type: array\n          items:\n            $ref: '#/components/schemas/standings'\n        closed:\n          type: boolean\n          description: |\n            If the value is true then the league/tournament has concluded, otherwise it is ongoing.\n          enum: [true, false]\n\n    highlanderResult:\n      type: array\n      items:\n        type: array\n        items:\n          $ref: '#/components/schemas/simpleRoster'\n\n    brackets:\n      type: object\n      description: |\n        The keys to this object are [UUID version 4](https://en.wikipedia.org/wiki/Universally_unique_identifier)\n        representing the bracket ID.\n      additionalProperties:\n        type: object\n        required: [id, name, position, groupPosition, canManufacture, state,\n          matches, roles, scores, matchScores]\n        properties:\n          id:\n            type: string\n            pattern: *uuidRegex\n            description: The bracket ID.\n          name:\n            type: string\n            description: The name of the bracket\n          position:\n            type: integer\n          groupPosition:\n            type: integer\n          groupName:\n            type: string\n          canManufacture:\n            type: boolean\n          state: \u0026highlanderState\n            type: string\n            enum: [resolved, unresolved, unlinked]\n            description: |\n              Whether it is ongoing or completed.\n\n              This is unreliable since some tournaments have the state unresolved yet they concluded\n              a long time ago.\n          bracketType:\n            $ref: '#/components/schemas/bracketType'\n          matchType:\n            $ref: '#/components/schemas/matchType'\n          gameMode:\n            $ref: '#/components/schemas/gameMode'\n          input:\n            type: array\n            items:\n              allOf:\n                - $ref: '#/components/schemas/simpleRoster'\n                - type: object\n                  properties:\n                    breakpoint:\n                      type: string\n                      pattern: *uuidRegex\n                      description: The breakpoint ID\n                    standing:\n                      type: integer\n          matches:\n            type: object\n            description: |\n              The keys to this object are [UUID version 4](https://en.wikipedia.org/wiki/Universally_unique_identifier)\n              representing the match ID.\n            additionalProperties:\n              $ref: '#/components/schemas/highlanderMatch'\n          standings:\n            $ref: '#/components/schemas/standings'\n          inheritableMatchScoringStrategy:\n            $ref: '#/components/schemas/scoring'\n          roles:\n            $ref: '#/components/schemas/roles'\n          scoring:\n            $ref: '#/components/schemas/scoring'\n          scores:\n            $ref: '#/components/schemas/scores'\n          matchScoring:\n            $ref: '#/components/schemas/scoring'\n          matchScores:\n            $ref: '#/components/schemas/scores'\n\n    bracketType:\n      type: object\n      required: [identifier]\n      properties:\n        identifier:\n          type: string\n          enum: [round_robin, single_elim, gauntlet, bestOf]\n        options:\n          type: object\n          required: [rounds]\n          properties:\n            rounds:\n              type: string\n              pattern: '^\\d+$'\n\n    matchType:\n      type: object\n      required: [identifier]\n      properties:\n        identifier:\n          type: string\n          enum: [bestOf, single_elim]\n        options:\n          type: object\n          required: [best_of]\n          properties:\n            best_of:\n              type: string\n              pattern: '^\\d+$'\n\n    gameMode:\n      type: object\n      required: [identifier, requiredPlayers, mapName]\n      properties:\n        identifier:\n          type: string\n          enum: ['lol:duel', 'lol:classic']\n        requiredPlayers:\n          type: integer\n          enum: [1, 5]\n        mapName:\n          type: string\n          enum: [summoner_rift, howling_abyss]\n\n    highlanderMatch:\n      type: object\n      required: [id, name, position, state, groupPosition, input, games,\n        tiebreaker, remadeGames, roles, scores]\n      properties:\n        id:\n          type: string\n          pattern: *uuidRegex\n          description: The match ID\n        name:\n          type: string\n        position:\n          type: integer\n        state:\n          \u003c\u003c: *highlanderState\n          description: |\n            Whether it is ongoing or completed.\n        groupPosition:\n          type: integer\n        matchType:\n          $ref: '#/components/schemas/matchType'\n        gameMode:\n          $ref: '#/components/schemas/gameMode'\n        input: \u0026matchInput\n          type: array\n          items:\n            allOf:\n              - $ref: '#/components/schemas/simpleRoster'\n              - oneOf:\n                - type: object\n                  properties:\n                    match:\n                      type: string\n                      pattern: *uuidRegex\n                      description: The match ID\n                - type: object\n                  properties:\n                    breakpoint:\n                      type: string\n                      pattern: *uuidRegex\n                      description: The breakpoint ID\n              - type: object\n                properties:\n                  standing:\n                    type: integer\n\n        games:\n          type: object\n          description: |\n            The keys to this object are [UUID version 4](https://en.wikipedia.org/wiki/Universally_unique_identifier)\n            representing the game ID.\n\n            These are the games played in that series.\n\n            The number of properties(key and value pair) in this object will be equal to the type of series that was\n            played. For a best of 1 there will be only 1 game, 3 for best of 3s and 5 for best of 5s.\n          additionalProperties:\n            $ref: '#/components/schemas/highlanderGame'\n        standings:\n          $ref: '#/components/schemas/standings'\n        tiebreaker:\n          type: boolean\n          enum: [true, false]\n        remadeGames:\n          type: array\n          items:\n            $ref: '#/components/schemas/highlanderGame'\n        roles:\n          $ref: '#/components/schemas/roles'\n        scoring:\n          $ref: '#/components/schemas/scoring'\n        scores:\n          $ref: '#/components/schemas/scores'\n\n\n    highlanderGame:\n      type: object\n      required: [id, name, generatedName, input, scores, revision, roles]\n      properties:\n        id:\n          $ref: '#/components/schemas/gameId'\n        name:\n          type: string\n        generatedName:\n          type: string\n        state:\n          type: string\n          enum: [remade]\n        gameMode:\n          $ref: '#/components/schemas/gameMode'\n        input: *matchInput\n        standings:\n          $ref: '#/components/schemas/standings'\n        scores:\n          $ref: '#/components/schemas/scores'\n        gameId:\n          type: string\n          pattern: '^\\d+$'\n          description: |\n            The numeric version of the game ID\n\n            This is what is used to access the ACS endpoint.\n        gameRealm:\n          type: string\n          pattern: '^[A-Z]+\\d+$'\n          description: |\n            The ID of the tournament realm on which the game was played on\n        platformId:\n          type: string\n          pattern: '^[A-Z]+\\d+:\\d+$'\n          description:\n            A combination of the gameRealm and the gameId\n        revision:\n          type: integer\n        roles:\n          $ref: '#/components/schemas/roles'\n\n    scoring:\n      type: object\n      required: [identifier, options]\n      properties:\n        identifier:\n          type: string\n          description: '**Note:** The `LegacyScoringStrategy` value has only been found in the 2015 worlds championship.'\n          enum: [standard, LegacyScoringStrategy]\n        options:\n          type: object\n          required: [points]\n          properties:\n            points:\n              type: array\n              minItems: 2\n              maxItems: 2\n              items:\n                type: integer\n\n    scores:\n      type: object\n      minProperties: 0\n      description: |\n        The keys to this object are [UUID version 4](https://en.wikipedia.org/wiki/Universally_unique_identifier)\n        representing the roster ID.\n      additionalProperties:\n        type: integer\n\n    highlanderRecords:\n      type: array\n      items:\n        $ref: '#/components/schemas/highlanderRecord'\n\n    highlanderRecord:\n      type: object\n      additionalProperties: false\n      required: [wins, losses, ties, score, roster, tournament, bracket, id]\n      properties:\n        wins:\n          type: integer\n        losses:\n          type: integer\n        ties:\n          type: integer\n        score:\n          type: integer\n        roster: \u0026uuidObject\n          type: string\n          description: The roster's [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier)\n          pattern: *uuidRegex\n        tournament:\n          \u003c\u003c: *uuidObject\n          description: The tournament's [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier)\n        bracket:\n          \u003c\u003c: *uuidObject\n          description: The bracket's [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier)\n        id:\n          type: string\n          description: |\n            A combination of the bracket and roster UUIDs. The two are separated by a colon\\\n          pattern: '^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}):(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12})$'\n\n    highlanderTeam:\n      type: object\n      additionalProperties: false\n      required: [id, slug, name, guid, teamPhotoUrl, logoUrl, acronym, homeLeague,\n        altLogoUrl, createdAt, updatedAt, bios, foreignIds, players, starters, subs]\n      properties:\n        id:\n          type: integer\n          description: The team ID.\n        slug:\n          type: string\n          description: URL friendly version of the team name.\n        name:\n          type: string\n          description: The team name.\n        guid:\n          type: string\n          description: The team's [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier).\n          pattern: *uuidRegex\n        teamPhotoUrl:\n          type: string\n          nullable: true\n        logoUrl:\n          type: string\n          description: URL to an image of the team's logo.\n        acronym:\n          type: string\n          description: The acronym form of the team name\n        homeLeague:\n          type: string\n          description: |\n            Describes the league this team participates in during the regular seasons.\n          pattern: *leagueReference\n        altLogoUrl:\n          type: string\n          nullable: true\n          description: Alternative URL to the team's logo.\n        createdAt: *createdAt\n        updatedAt: *updatedAt\n        bios:\n          type: object\n          description: |\n            Contains a description of the team translated to various languages.\n\n            The keys are presented in the format ([ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1)\n            and [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2))\n\n            `{languageCode}_{countryCode}`\n\n            The value is a string containing\n            html tags representing the description in that specific locale.\n          additionalProperties:\n            type: string\n        foreignIds:\n          $ref: '#/components/schemas/foreignIds'\n        players:\n          type: array\n          description: An array containing the player IDs for those belonging in that team.\n          items:\n            type: integer\n        starters:\n          type: array\n          description: An array of the player IDs of those in the main roster\n          items:\n            type: integer\n        subs:\n          type: array\n          description: An array of the player IDs of the subs.\n          items:\n            type: integer\n\n    foreignIds:\n      type: object\n      properties:\n        drupalId:\n          type: string\n\n    highlanderPlayer:\n      type: object\n      additionalProperties: false\n      required: [id, slug, name, firstName, lastName, roleSlug, photoUrl, hometown, region,\n        birthdate, createdAt, updatedAt, bios, foreignIds, socialNetworks, champions]\n      properties:\n        id:\n          type: integer\n          description: The player ID\n        slug:\n          type: string\n          description: URL friendly version of the player's in game name\n        name:\n          type: string\n          description: The player's in game name\n        firstName:\n          type: string\n        LastName:\n          type: string\n          nullable: true\n        roleSlug:\n          type: string\n          description: The role they usually play\n        photoUrl:\n          type: string\n          nullable: true\n          description: URL to the player's photo\n        hometown:\n          type: string\n          nullable: true\n        region:\n          type: string\n        birthdate:\n          type: string\n          format: date-time\n          nullable: true\n        createdAt: *createdAt\n        updatedAt: *updatedAt\n        bios:\n          type: object\n          description: |\n            Contains a description of the player translated to various languages.\n\n            The keys are presented in the format ([ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1)\n            and [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2))\n\n            `{languageCode}_{countryCode}`\n\n            The value is a string containing\n            html tags representing the description in that specific locale.\n          additionalProperties:\n            type: string\n        foreignIds:\n          allOf:\n            - $ref: '#/components/schemas/foreignIds'\n            - type: object\n              description: |\n                'This object may contain keys which are the names of various tournament realms.\n\n                **Example:** `ESPORTSTMNT02: \"200008392\"`\n\n                The purpose of the value in those strings is unknown.'\n              additionalProperties:\n                type: string\n        socialNetworks:\n          type: object\n          description: |\n            Contains links to the player's social media accounts.\n\n            The key is the name of the social media platform and the value is the URL\n          additionalProperties:\n            type: string\n        champions:\n          type: array\n          items:\n            type: object\n            additionalProperties: false\n            required: [id, playerId, championId, championKey, championName, createdAt, updatedAt]\n            properties:\n              id:\n                type: integer\n              playerId:\n                type: integer\n                description: The player ID\n              championId:\n                type: integer\n                description: The champion ID\n              championKey:\n                type: string\n                description: The champion's name\n              championName:\n                type: string\n                description: The champion's name\n              createdAt: *createdAt\n              updatedAt: *updatedAt\n\n    highlanderTeams:\n      type: array\n      description: |\n        An array containing the teams that have participated in this league.\n      items:\n        $ref: '#/components/schemas/highlanderTeam'\n\n    highlanderPlayers:\n      type: array\n      items:\n        $ref: '#/components/schemas/highlanderPlayer'\n\n    baseScheduleItem:\n      type: object\n      additionalProperties: false\n      required: [id, scheduledTime, tags, tournament, league]\n      properties:\n        id:\n          description: The schedule item ID.\n          type: string\n        scheduledTime:\n          type: string\n          format: date-time\n          description: The time the match/event is/was scheduled to start.\n        tags:\n          $ref: '#/components/schemas/tags'\n        tournament:\n          type: string\n          pattern: *uuidRegex\n          description: The tournament ID\n        league:\n          type: string\n          description: The League ID\n\n    matchScheduleItem:\n      allOf:\n        - $ref: '#/components/schemas/baseScheduleItem'\n        - type: object\n          additionalProperties: false\n          required: [content, match, bracket]\n          properties:\n            content:\n              type: string\n              pattern: '^urn:rg:lolesports:global:highlander:tournament:(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}):match:(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12})$'\n              description: |\n                Contains the tournament and match Ids for the specific match.\n            match:\n              type: string\n              pattern: *uuidRegex\n              description: The match ID\n            bracket:\n              type: string\n              pattern: *uuidRegex\n              description: The bracket ID\n\n    eventScheduleItem:\n      allOf:\n        - $ref: '#/components/schemas/baseScheduleItem'\n        - type: object\n          additionalProperties: false\n          required: [content]\n          properties:\n            content:\n              type: string\n              pattern: '^{\\\\\"imageUrl\\\\\":null,\\\\\"label\\\\\":\\\\\"(?:rebroadcast|pt1|opening-ceremony|worlds-pre-show)\\\\\"}$'\n\n    scheduleItem:\n      oneOf:\n        - $ref: '#/components/schemas/matchScheduleItem'\n        - $ref: '#/components/schemas/eventScheduleItem'\n\n    tags:\n      type: object\n      additionalProperties: false\n      required: [leagueLabel, tournamentLabel, blockLabel, subBlockLabel, subBlockPrefix]\n      description: |\n        The labels are used to describe the week and day the match/event is taking place in.\n        Also, it could indicate the stage of the tournament.\n\n        The blockPrefix comes before the block Label. Same with the subBlockPrefix and the subBlockLabel.\n      properties:\n        subBlockLabel:\n          type: string\n        blockLabel:\n          type: string\n        leagueLabel:\n          type: string\n          pattern: *leagueReference\n        blockPrefix:\n          type: string\n        subBlockPrefix:\n          type: string\n        yearLabel:\n          type: string\n        stageLabel:\n          type: string\n          pattern: '^urn:rg:lolesports:global:highlander:tournament:(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}):bracket:(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12})$'\n          description: |\n            Contains the tournament and bracket Ids the match/event belongs to.\n        tournamentLabel:\n          type: string\n          pattern: '^urn:rg:lolesports:global:highlander:tournament:(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12})$'\n          description: |\n            Contains the tournament ID.\n\n  securitySchemes:\n    apiKeyAuth:\n      type: apiKey\n      description: |\n        The key is, `0TvQnueqKa5mxJntVWt0w4LpLfEkrV1Ta8rQBb9Z`\n      in: header\n      name: x-api-key\n\n  parameters:\n    hl:\n      name: hl\n      in: query\n      required: true\n      schema:\n        $ref: '#/components/schemas/locale'\n\n    leagueIds:\n      name: leagueId\n      in: query\n      description: |\n        The id(s) of the league(s) you want details of\n      schema:\n        type: array\n        items:\n          type: integer\n          format: int64\n\n    leagueId:\n      name: leagueId\n      in: query\n      description: |\n        The id of the league you want details of\n      schema:\n        type: integer\n        format: int64\n\n    highlanderLeagueId:\n      name: leagueId\n      required: true\n      in: query\n      description: The id of the league you want details of\n      schema:\n        type: integer\n        format: int32\n\n    pageToken:\n      name: pageToken\n      in: query\n      description: *pagetoken\n      schema:\n        type: string\n        format: byte\n\n    tournamentIds:\n      name: tournamentId\n      in: query\n      description: |\n        The id(s) of the tournament(s) you want details ofs\n      schema:\n        type: array\n        items:\n          type: integer\n          format: int64\n\n    id:\n      name: id\n      in: query\n      required: true\n      description: |\n        The id of the match that you want\n      schema:\n        type: integer\n        format: int64\n\n    teamSlugs:\n      name: id\n      in: query\n      description: |\n        The team slug(s).\n\n        You can input more than one slug.\n      schema:\n        type: array\n        items:\n          type: string\n\n    gameIds:\n      name: id\n      in: query\n      description: |\n        The game Id(s).\n\n        You can input more than one game Id(s).\n      schema:\n        type: array\n        items:\n          type: integer\n          format: int64\n\n    pathGameId:\n      name: gameId\n      in: path\n      required: true\n      description: |\n        The game id of the match\n      schema:\n        type: integer\n        format: int64\n\n    startingTime:\n      name: startingTime\n      in: query\n      description: |\n        The date-time (RFC3339)\n      schema:\n        type: string\n        format: date-time\n\n    league:\n      name: league\n      in: query\n      required: true\n      description: The id of the league you want details of\n      schema:\n        type: string\n        format: int32\n\n    teamSlug:\n      name: slug\n      in: query\n      required: true\n      description: The team slug.\n      schema:\n        type: string\n\n    highlanderTournamentId:\n      name: tournament\n      in: query\n      required: true\n      description: The tournament ID.\n      schema:\n        type: string\n        pattern: *uuidRegex\n\n    playerSlug:\n      name: slug\n      in: query\n      required: true\n      description: The player slug.\n      schema:\n        type: string\n",
			"canonicalURL": "/github.com/vickz84259/lolesports-api-docs@74027a7950c7e4629d3cab01ddd3990457a9956d/-/blob/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/vickz84259/lolesports-api-docs/blob/74027a7950c7e4629d3cab01ddd3990457a9956d/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"abilities\": at 1:2509: parse enum values: parse value \"\\\"Q\\\"\": expected type \"array\", got \"string\""
}