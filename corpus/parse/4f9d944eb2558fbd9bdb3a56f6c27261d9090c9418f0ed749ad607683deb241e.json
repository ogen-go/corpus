{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/tatumio/tatum-blockchain-connector"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "tron-connector/module/openapi.yaml",
			"byteSize": 60267,
			"content": "openapi: 3.0.0\nservers:\n  - url: 'https://api-eu1.tatum.io'\ninfo:\n  version: 1.1.1\n  title: Tatum Tron API\ntags:\n  - description: |\n      \u003cp\u003eTron Blockchain enables access to most commonly used Tron methods. It's possible to generate TRON account, send TRX, TRC10 and TRC20 assets. It's also possible to generate custom TRC10 or TRC20 tokens using API.\u003cbr/\u003e\n      Tatum supports 2 chains:\n      \u003cul\u003e\u003cli\u003eMainnet - regular live chain\n      \u003cli\u003eShasta Testnet - test chain used for testing purposes. Coins on test chain have no value and can be obtained from\n      Faucet, e.g. \u003ca target=\"_blank\" href=\"https://www.trongrid.io/shasta/\"\u003ehttps://www.trongrid.io/shasta/\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\n    name: Blockchain / Tron\npaths:\n  /v3/tron/wallet:\n    get:\n      summary: Generate Tron wallet\n      description: |\n        \u003ch4\u003e1 credit per API call.\u003c/h4\u003e\u003cbr/\u003e\u003cp\u003eTatum supports BIP44 HD wallets. It is very convenient and secure, since it can generate 2^31 addresses from 1 mnemonic phrase. Mnemonic phrase consists of 24 special words in defined order and can restore access to all generated addresses and private keys.\u003cbr/\u003eEach address is identified by 3 main values:\u003cul\u003e\u003cli\u003ePrivate Key - your secret value, which should never be revealed\u003c/li\u003e\u003cli\u003ePublic Key - public address to be published\u003c/li\u003e\u003cli\u003eDerivation index - index of generated address\u003c/li\u003e\u003c/ul\u003e\u003c/p\u003e\u003cp\u003eTatum follows BIP44 specification and generates for Bitcoin wallet with derivation path m'/44'/195'/0'/0. More about BIP44 HD wallets can be found here - \u003ca target=\"_blank\" href=\"https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki\"\u003ehttps://github.com/tron/bips/blob/master/bip-0044.mediawiki\u003c/a\u003e.\n                Generate BIP44 compatible Tron wallet.\u003c/p\u003e\n      operationId: GenerateTronwallet\n      parameters:\n        - description: \"Mnemonic to use for generation of extended public and private keys.\"\n          in: query\n          name: mnemonic\n          required: false\n          schema:\n            type: string\n            maxLength: 500\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TronWallet\"\n          description: OK\n        400: \u0026API400\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error400\"\n          description: Bad Request. Validation failed for the given object in the HTTP Body or Request parameters.\n        401: \u0026API401\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/Error401NotActive\"\n                  - $ref: \"#/components/schemas/Error401Invalid\"\n          description: Unauthorized. Not valid or inactive subscription key present in the HTTP Header.\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/Error403\"\n        500: \u0026API500\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error500\"\n          description: Internal server error. There was an error on the server during the processing of the request.\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      tags:\n        - Blockchain / Tron\n  /v3/tron/address/{xpub}/{index}:\n    get:\n      description: |\n        \u003ch4\u003e5 credit per API call.\u003c/h4\u003e\u003cbr/\u003e\n        \u003cp\u003eGenerate Tron deposit address from Extended public key. Deposit address is generated for the specific index - each extended public key can generate\n        up to 2^32 addresses starting from index 0 until 2^31.\u003c/p\u003e\n      operationId: TronGenerateAddress\n      parameters:\n        - description: \"Extended public key of wallet.\"\n          in: path\n          name: xpub\n          required: true\n          example: 0244b3f40c6e570ae0032f6d7be87737a6c4e5314a4a1a82e22d0460a0d0cd794936c61f0c80dc74ace4cd04690d4eeb1aa6555883be006e1748306faa7ed3a26a\n          schema:\n            type: string\n        - description: \"Derivation index of desired address to be generated.\"\n          in: path\n          name: index\n          required: true\n          example: 1\n          schema:\n            type: number\n            minimum: 0\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  address:\n                    type: string\n                    description: Tron address\n                    example: TFFBpkRNro4Pe4154ayGWx7C6Ev7BvQZ6t\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/Error403AccountAddressGeneral\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Generate Tron deposit address from Extended public key\n      tags:\n        - Blockchain / Tron\n  /v3/tron/wallet/priv:\n    post:\n      description: |\n        \u003ch4\u003e10 credit per API call.\u003c/h4\u003e\u003cbr/\u003e\n        \u003cp\u003eGenerate private key for address from mnemonic for given derivation path index. Private key is generated for the specific index - each mnemonic\n        can generate up to 2^31 private keys starting from index 0 until 2^31.\u003c/p\u003e\n      operationId: TronGenerateAddressPrivateKey\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PrivKeyRequest\"\n        required: true\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PrivKey\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error403BlockchainPrivateFailed\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Generate Tron private key\n      tags:\n        - Blockchain / Tron\n  /v3/tron/info:\n    get:\n      tags:\n        - Blockchain / Tron\n      summary: Get current Tron block\n      description: \u003ch4\u003e5 credits per API call.\u003c/h4\u003e\u003cbr/\u003e\u003cp\u003eGet current Tron block.\u003c/p\u003e\n      operationId: TronGetCurrentBlock\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  blockNumber:\n                    description: Block height.\n                    type: number\n                    example: 26585295\n                  hash:\n                    description: Block hash.\n                    type: string\n                    example: 000000000195a8cfe2ea4ca60ce921b30e95980a96c6bb1da4a35aa03da9c5a8\n                  testnet:\n                    description: Wether the block is from mainnet of Shasta testnet\n                    type: boolean\n                    example: false\n          description: OK\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error403Tron\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n  /v3/tron/block/{hash}:\n    get:\n      tags:\n        - Blockchain / Tron\n      summary: Get Tron block\n      description: \u003ch4\u003e5 credits per API call.\u003c/h4\u003e\u003cbr/\u003e\u003cp\u003eGet Tron block by hash or height.\u003c/p\u003e\n      operationId: TronGetBlock\n      parameters:\n        - in: path\n          name: hash\n          required: true\n          description: Block hash or height.\n          schema:\n            type: string\n            example: \"000000000195a8cfe2ea4ca60ce921b30e95980a96c6bb1da4a35aa03da9c5a8\"\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TronBlock\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error403Tron\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n  /v3/tron/transaction/account/{address}:\n    get:\n      tags:\n        - Blockchain / Tron\n      summary: Get Tron Account transactions\n      description: \u003ch4\u003e5 credits per API call.\u003c/h4\u003e\u003cbr/\u003e\u003cp\u003eGet Tron Account transactions. Default page size is 200 transactions per request.\u003c/p\u003e\n      operationId: TronAccountTx\n      parameters:\n        - in: path\n          name: address\n          description: Address to get transactions for.\n          required: true\n          schema:\n            type: string\n            example: TGDqQAP5bduoPKVgdbk7fGyW4DwEt3RRn8\n        - in: query\n          name: next\n          description: If\n          required: false\n          schema:\n            type: string\n            example: 81d0524acf5967f3b361e03fd7d141ab511791cd7aad7ae406c4c8d408290991\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - transactions\n                properties:\n                  next:\n                    type: string\n                    description: If present, there are more transactions for address.\n                    example: 81d0524acf5967f3b361e03fd7d141ab511791cd7aad7ae406c4c8d408290991\n                  transactions:\n                    type: array\n                    description: List of transactions.\n                    items:\n                      $ref: \"#/components/schemas/TronTx\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error403Tron\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n  /v3/tron/transaction/account/{address}/trc20:\n    get:\n      tags:\n        - Blockchain / Tron\n      summary: Get Tron Account TRC20 transactions\n      description: \u003ch4\u003e5 credits per API call.\u003c/h4\u003e\u003cbr/\u003e\u003cp\u003eGet Tron Account TRC20 transactions. Default page size is 200 transactions per request.\u003c/p\u003e\n      operationId: TronAccountTx20\n      parameters:\n        - in: path\n          name: address\n          description: Address to get transactions for.\n          required: true\n          schema:\n            type: string\n            example: TGDqQAP5bduoPKVgdbk7fGyW4DwEt3RRn8\n        - in: query\n          name: next\n          description: If\n          required: false\n          schema:\n            type: string\n            example: 81d0524acf5967f3b361e03fd7d141ab511791cd7aad7ae406c4c8d408290991\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - transactions\n                properties:\n                  next:\n                    type: string\n                    description: If present, there are more transactions for address.\n                    example: 81d0524acf5967f3b361e03fd7d141ab511791cd7aad7ae406c4c8d408290991\n                  transactions:\n                    type: array\n                    description: List of transactions.\n                    items:\n                      $ref: \"#/components/schemas/TronTx20\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error403Tron\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n  /v3/tron/account/{address}:\n    get:\n      tags:\n        - Blockchain / Tron\n      summary: Get Tron Account by address\n      description: \u003ch4\u003e5 credits per API call.\u003c/h4\u003e\u003cbr/\u003e\u003cp\u003eGet Tron account by address.\u003c/p\u003e\n      operationId: TronGetAccount\n      parameters:\n        - in: path\n          name: address\n          required: true\n          description: Account address.\n          schema:\n            type: string\n            example: TGDqQAP5bduoPKVgdbk7fGyW4DwEt3RRn8\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TronAccount\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error403Tron\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n  /v3/tron/transaction/{hash}:\n    get:\n      tags:\n        - Blockchain / Tron\n      summary: Get Tron transaction by hash\n      description: \u003ch4\u003e5 credits per API call.\u003c/h4\u003e\u003cbr/\u003e\u003cp\u003eGet Tron transaction by hash.\u003c/p\u003e\n      operationId: TronGetTransaction\n      parameters:\n        - in: path\n          name: hash\n          required: true\n          description: Transaction hash.\n          schema:\n            type: string\n            example: \"81d0524acf5967f3b361e03fd7d141ab511791cd7aad7ae406c4c8d408290991\"\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TronTx\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error403Tron\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n  /v3/tron/transaction:\n    post:\n      tags:\n        - Blockchain / Tron\n      summary: Send Tron transaction\n      description: |\n        \u003ch4\u003e10 credits per API call.\u003c/h4\u003e\u003cbr/\u003e\n        \u003cp\u003eSend Tron transaction from address to address.\u003cbr/\u003e\u003cbr/\u003e\n        This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key.\n        No one should ever send it's own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey.\n        PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production,\n        it is possible to use the Tatum client library for supported languages or Tatum Middleware with a custom key management system.\n        \u003c/p\u003e\n      operationId: TronTransfer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: \"#/components/schemas/TransferTronBlockchain\"\n                - $ref: \"#/components/schemas/TransferTronBlockchainKMS\"\n        required: true\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TransactionHash\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error403Tron\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n  /v3/tron/freezeBalance:\n    post:\n      tags:\n        - Blockchain / Tron\n      summary: Freeze Tron balance\n      description: |\n        \u003ch4\u003e10 credits per API call.\u003c/h4\u003e\u003cbr/\u003e\n        \u003cp\u003eFreeze Tron assets on the address. By freezing assets, you can obtain energy or bandwith to perform transactions.\u003cbr/\u003e\u003cbr/\u003e\n        This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key.\n        No one should ever send it's own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey.\n        PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production,\n        it is possible to use the Tatum client library for supported languages or Tatum Middleware with a custom key management system.\n        \u003c/p\u003e\n      operationId: TronFreeze\n      requestBody:\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: \"#/components/schemas/FreezeTron\"\n                - $ref: \"#/components/schemas/FreezeTronKMS\"\n        required: true\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TransactionHash\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error403Tron\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n  /v3/tron/trc10/transaction:\n    post:\n      tags:\n        - Blockchain / Tron\n      summary: Send Tron TRC10 transaction\n      description: |\n        \u003ch4\u003e10 credits per API call.\u003c/h4\u003e\u003cbr/\u003e\n        \u003cp\u003eSend Tron TRC10 transaction from address to address.\u003cbr/\u003e\u003cbr/\u003e\n        This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key.\n        No one should ever send it's own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey.\n        PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production,\n        it is possible to use the Tatum client library for supported languages or Tatum Middleware with a custom key management system.\n        \u003c/p\u003e\n      operationId: TronTransferTrc10\n      requestBody:\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: \"#/components/schemas/TransferTronTrc10Blockchain\"\n                - $ref: \"#/components/schemas/TransferTronTrc10BlockchainKMS\"\n        required: true\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TransactionHash\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error403Tron\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n  /v3/tron/trc10/deploy:\n    post:\n      tags:\n        - Blockchain / Tron\n      summary: Create Tron TRC10 token\n      description: |\n        \u003ch4\u003e10 credits per API call.\u003c/h4\u003e\u003cbr/\u003e\n        \u003cp\u003eCreate Tron TRC10 token. 1 account can create only 1 token. All supply of the tokens are transfered to the issuer account 100 seconds after the creation.\u003cbr/\u003e\u003cbr/\u003e\n        This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key.\n        No one should ever send it's own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey.\n        PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production,\n        it is possible to use the Tatum client library for supported languages or Tatum Middleware with a custom key management system.\n        \u003c/p\u003e\n      operationId: TronCreateTrc10\n      requestBody:\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: \"#/components/schemas/CreateTronTrc10Blockchain\"\n                - $ref: \"#/components/schemas/CreateTronTrc10BlockchainKMS\"\n        required: true\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TransactionHash\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error403Tron\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n  /v3/tron/trc10/detail/{id}:\n    get:\n      tags:\n        - Blockchain / Tron\n      summary: Get Tron TRC10 token detail\n      description: |\n        \u003ch4\u003e5 credits per API call.\u003c/h4\u003e\u003cbr/\u003e\n        \u003cp\u003eGet Tron TRC10 token details.\u003c/p\u003e\n      operationId: TronTrc10Detail\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: TRC10 token ID\n          schema:\n            type: number\n            example: 1000540\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TronTrc10Detail\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error403Tron\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n  /v3/tron/trc20/transaction:\n    post:\n      tags:\n        - Blockchain / Tron\n      summary: Send Tron TRC20 transaction\n      description: |\n        \u003ch4\u003e10 credits per API call.\u003c/h4\u003e\u003cbr/\u003e\n        \u003cp\u003eSend Tron TRC20 transaction from address to address.\u003cbr/\u003e\u003cbr/\u003e\n        This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key.\n        No one should ever send it's own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey.\n        PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production,\n        it is possible to use the Tatum client library for supported languages or Tatum Middleware with a custom key management system.\n        \u003c/p\u003e\n      operationId: TronTransferTrc20\n      requestBody:\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: \"#/components/schemas/TransferTronTrc20Blockchain\"\n                - $ref: \"#/components/schemas/TransferTronTrc20BlockchainKMS\"\n        required: true\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TransactionHash\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error403Tron\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n  /v3/tron/trc20/deploy:\n    post:\n      tags:\n        - Blockchain / Tron\n      summary: Create Tron TRC20 token\n      description: |\n        \u003ch4\u003e10 credits per API call.\u003c/h4\u003e\u003cbr/\u003e\n        \u003cp\u003eCreate Tron TRC20 token. 1 account can create only 1 token. All supply of the tokens are transfered to the issuer account 100 seconds after the creation.\u003cbr/\u003e\u003cbr/\u003e\n        This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key.\n        No one should ever send it's own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey.\n        PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production,\n        it is possible to use the Tatum client library for supported languages or Tatum Middleware with a custom key management system.\n        \u003c/p\u003e\n      operationId: TronCreateTrc20\n      requestBody:\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: \"#/components/schemas/CreateTronTrc20Blockchain\"\n                - $ref: \"#/components/schemas/CreateTronTrc20BlockchainKMS\"\n        required: true\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TransactionHash\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error403Tron\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n  /v3/tron/broadcast:\n    post:\n      tags:\n        - Blockchain / Tron\n      summary: Broadcast Tron transaction\n      description: |\n        \u003ch4\u003e5 credits per API call.\u003c/h4\u003e\u003cbr/\u003e\n        \u003cp\u003eBroadcast Tron transaction. This method is used internally from Tatum Middleware or Tatum client libraries.\n        It is possible to create custom signing mechanism and use this method only for broadcasting data to the blockchian.\u003c/p\u003e\n      operationId: TronBroadcast\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/TronBroadcast\"\n        required: true\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TransactionHash\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error403Tron\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\ncomponents:\n  securitySchemes:\n    X-Api-Key:\n      description: |\n        To maintain the highest security level, Tatum requires X-API-Key HTTP header.\n        This X-API-Key represents identification of the plan and can be used by 1 developer or per environment.\n        Each X-API-Key is bound to the test or production blockchains.\n      in: header\n      name: x-api-key\n      type: apiKey\n  schemas:\n    TransferTronBlockchain:\n      type: object\n      properties:\n        fromPrivateKey:\n          type: string\n          minLength: 64\n          maxLength: 64\n          description: Private key of the address, from which the TRX will be sent.\n          example: 842E09EB40D8175979EFB0071B28163E11AED0F14BDD84090A4CEFB936EF5701\n        to:\n          type: string\n          minLength: 34\n          maxLength: 34\n          description: Recipient address of TRON account in Base58 format.\n          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh\n        amount:\n          description: Amount to be sent in TRX.\n          example: \"100000\"\n          pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n          type: string\n      required:\n        - fromPrivateKey\n        - to\n        - amount\n    TransferTronBlockchainKMS:\n      type: object\n      properties:\n        from:\n          type: string\n          minLength: 34\n          maxLength: 34\n          description: Sender address of TRON account in Base58 format.\n          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh\n        signatureId:\n          type: string\n          minimum: 36\n          maximum: 36\n          format: uuid\n          example: 1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        to:\n          type: string\n          minLength: 34\n          maxLength: 34\n          description: Recipient address of TRON account in Base58 format.\n          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh\n        amount:\n          description: Amount to be sent in TRX.\n          example: \"100000\"\n          pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n          type: string\n        index:\n          type: number\n          minimum: 0\n          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.\n      required:\n        - from\n        - signatureId\n        - to\n        - amount\n        - index\n    TransferTronTrc10Blockchain:\n      type: object\n      properties:\n        fromPrivateKey:\n          type: string\n          minLength: 64\n          maxLength: 64\n          description: Private key of the address, from which the TRX will be sent.\n          example: 842E09EB40D8175979EFB0071B28163E11AED0F14BDD84090A4CEFB936EF5701\n        to:\n          type: string\n          minLength: 34\n          maxLength: 34\n          description: Recipient address of TRON account in Base58 format.\n          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh\n        tokenId:\n          type: string\n          minLength: 1\n          maxLength: 100\n          description: ID of the token to transfer.\n          example: \"1000538\"\n        amount:\n          description: Amount to be sent in TRX.\n          example: \"100000\"\n          pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n          type: string\n      required:\n        - fromPrivateKey\n        - tokenId\n        - to\n        - amount\n    TransferTronTrc10BlockchainKMS:\n      type: object\n      properties:\n        from:\n          type: string\n          minLength: 34\n          maxLength: 34\n          description: Sender address of TRON account in Base58 format.\n          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh\n        signatureId:\n          type: string\n          minimum: 36\n          maximum: 36\n          format: uuid\n          example: 1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        index:\n          type: number\n          minimum: 0\n          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.\n        to:\n          type: string\n          minLength: 34\n          maxLength: 34\n          description: Recipient address of TRON account in Base58 format.\n          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh\n        tokenId:\n          type: string\n          minLength: 1\n          maxLength: 100\n          description: ID of the token to transfer.\n          example: \"1000538\"\n        amount:\n          description: Amount to be sent in TRX.\n          example: \"100000\"\n          pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n          type: string\n      required:\n        - from\n        - signatureId\n        - index\n        - tokenId\n        - to\n        - amount\n    TransferTronTrc20Blockchain:\n      type: object\n      properties:\n        fromPrivateKey:\n          type: string\n          minLength: 64\n          maxLength: 64\n          description: Private key of the address, from which the TRX will be sent.\n          example: 842E09EB40D8175979EFB0071B28163E11AED0F14BDD84090A4CEFB936EF5701\n        to:\n          type: string\n          minLength: 34\n          maxLength: 34\n          description: Recipient address of TRON account in Base58 format.\n          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh\n        tokenAddress:\n          type: string\n          minLength: 34\n          maxLength: 34\n          description: Address of the TRC20 token to transfer.\n          example: \"TVAEYCmc15awaDRAjUZ1kvcHwQQaoPw2CW\"\n        feeLimit:\n          type: number\n          minimum: 0\n          description: Fee in TRX to be paid.\n          example: 0.01\n        amount:\n          description: Amount to be sent in TRX.\n          example: \"100000\"\n          pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n          type: string\n      required:\n        - fromPrivateKey\n        - tokenAddress\n        - to\n        - amount\n        - feeLimit\n    TransferTronTrc20BlockchainKMS:\n      type: object\n      properties:\n        from:\n          type: string\n          minLength: 34\n          maxLength: 34\n          description: Sender address of TRON account in Base58 format.\n          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh\n        signatureId:\n          type: string\n          minimum: 36\n          maximum: 36\n          format: uuid\n          example: 1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        index:\n          type: number\n          minimum: 0\n          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.\n        to:\n          type: string\n          minLength: 34\n          maxLength: 34\n          description: Recipient address of TRON account in Base58 format.\n          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh\n        tokenAddress:\n          type: string\n          minLength: 34\n          maxLength: 34\n          description: Address of the TRC20 token to transfer.\n          example: \"TVAEYCmc15awaDRAjUZ1kvcHwQQaoPw2CW\"\n        feeLimit:\n          type: number\n          minimum: 0\n          description: Fee in TRX to be paid.\n          example: 0.01\n        amount:\n          description: Amount to be sent in TRX.\n          example: \"100000\"\n          pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n          type: string\n      required:\n        - from\n        - signatureId\n        - index\n        - tokenAddress\n        - to\n        - amount\n        - feeLimit\n    CreateTronTrc20Blockchain:\n      type: object\n      properties:\n        fromPrivateKey:\n          type: string\n          minLength: 64\n          maxLength: 64\n          description: Private key of the address, from which the TRX will be sent.\n          example: 842E09EB40D8175979EFB0071B28163E11AED0F14BDD84090A4CEFB936EF5701\n        recipient:\n          type: string\n          minLength: 34\n          maxLength: 34\n          description: Recipient address of created TRC20 tokens.\n          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh\n        name:\n          type: string\n          minLength: 1\n          maxLength: 100\n          description: Name of the token.\n          example: My token\n        symbol:\n          type: string\n          minLength: 1\n          maxLength: 100\n          description: Symbol of the token.\n          example: SYM\n        totalSupply:\n          type: number\n          minimum: 0\n          description: Total supply of the tokens.\n          example: 100000\n        decimals:\n          type: number\n          minimum: 0\n          maximum: 30\n          description: Number of decimal places of the token.\n          example: 10\n      required:\n        - fromPrivateKey\n        - name\n        - recipient\n        - symbol\n        - totalSupply\n        - decimals\n    CreateTronTrc20BlockchainKMS:\n      type: object\n      properties:\n        from:\n          type: string\n          minLength: 34\n          maxLength: 34\n          description: Sender address of TRON account in Base58 format.\n          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh\n        signatureId:\n          type: string\n          minimum: 36\n          maximum: 36\n          format: uuid\n          example: 1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        index:\n          type: number\n          minimum: 0\n          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.\n        recipient:\n          type: string\n          minLength: 34\n          maxLength: 34\n          description: Recipient address of created TRC20 tokens.\n          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh\n        name:\n          type: string\n          minLength: 1\n          maxLength: 100\n          description: Name of the token.\n          example: My token\n        symbol:\n          type: string\n          minLength: 1\n          maxLength: 100\n          description: Symbol of the token.\n          example: SYM\n        totalSupply:\n          type: number\n          minimum: 0\n          description: Total supply of the tokens.\n          example: 100000\n        decimals:\n          type: number\n          minimum: 0\n          maximum: 30\n          description: Number of decimal places of the token.\n          example: 10\n      required:\n        - from\n        - signatureId\n        - index\n        - name\n        - recipient\n        - symbol\n        - totalSupply\n        - decimals\n    CreateTronTrc10Blockchain:\n      type: object\n      properties:\n        fromPrivateKey:\n          type: string\n          minLength: 64\n          maxLength: 64\n          description: Private key of the address, from which the TRX will be sent.\n          example: 842E09EB40D8175979EFB0071B28163E11AED0F14BDD84090A4CEFB936EF5701\n        recipient:\n          type: string\n          minLength: 34\n          maxLength: 34\n          description: Recipient address of created TRC 10 tokens.\n          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh\n        name:\n          type: string\n          minLength: 1\n          maxLength: 100\n          description: Name of the token.\n          example: My token\n        abbreviation:\n          type: string\n          minLength: 1\n          maxLength: 100\n          description: Abbreviation of the token.\n          example: SYM\n        description:\n          type: string\n          minLength: 1\n          maxLength: 100\n          description: Description of the token.\n          example: My short description\n        url:\n          type: string\n          minLength: 1\n          maxLength: 100\n          description: URL of the token.\n          example: https://mytoken.com\n        totalSupply:\n          type: number\n          minimum: 0\n          description: Total supply of the tokens.\n          example: 100000\n        decimals:\n          type: number\n          minimum: 0\n          maximum: 5\n          description: Number of decimal places of the token.\n          example: 10\n      required:\n        - fromPrivateKey\n        - recipient\n        - name\n        - abbreviation\n        - description\n        - url\n        - totalSupply\n        - decimals\n    CreateTronTrc10BlockchainKMS:\n      type: object\n      properties:\n        from:\n          type: string\n          minLength: 34\n          maxLength: 34\n          description: Sender address of TRON account in Base58 format.\n          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh\n        signatureId:\n          type: string\n          minimum: 36\n          maximum: 36\n          format: uuid\n          example: 1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        index:\n          type: number\n          minimum: 0\n          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.\n        recipient:\n          type: string\n          minLength: 34\n          maxLength: 34\n          description: Recipient address of created TRC 10 tokens.\n          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh\n        name:\n          type: string\n          minLength: 1\n          maxLength: 100\n          description: Name of the token.\n          example: My token\n        abbreviation:\n          type: string\n          minLength: 1\n          maxLength: 100\n          description: Abbreviation of the token.\n          example: SYM\n        description:\n          type: string\n          minLength: 1\n          maxLength: 100\n          description: Description of the token.\n          example: My short description\n        url:\n          type: string\n          minLength: 1\n          maxLength: 100\n          description: URL of the token.\n          example: https://mytoken.com\n        totalSupply:\n          type: number\n          minimum: 0\n          description: Total supply of the tokens.\n          example: 100000\n        decimals:\n          type: number\n          minimum: 0\n          maximum: 5\n          description: Number of decimal places of the token.\n          example: 10\n      required:\n        - from\n        - signatureId\n        - index\n        - recipient\n        - name\n        - abbreviation\n        - description\n        - url\n        - totalSupply\n        - decimals\n    TronTrc10Detail:\n      type: object\n      properties:\n        ownerAddress:\n          type: string\n          minLength: 34\n          maxLength: 34\n          description: Address of the owner of the token, in hex.\n          example: '41d2803f9c22aa429d71554c9427e97ffedcec17c7'\n        name:\n          type: string\n          minLength: 1\n          maxLength: 100\n          description: Name of the token.\n          example: My token\n        abbr:\n          type: string\n          minLength: 1\n          maxLength: 100\n          description: Abbreviation of the token.\n          example: SYM\n        description:\n          type: string\n          minLength: 1\n          maxLength: 100\n          description: Description of the token.\n          example: My short description\n        url:\n          type: string\n          minLength: 1\n          maxLength: 100\n          description: URL of the token.\n          example: https://mytoken.com\n        totalSupply:\n          type: number\n          minimum: 0\n          description: Total supply of the tokens.\n          example: 100000\n        precision:\n          type: number\n          minimum: 0\n          maximum: 5\n          description: Number of decimal places of the token.\n          example: 10\n    FreezeTron:\n      type: object\n      properties:\n        fromPrivateKey:\n          type: string\n          minLength: 64\n          maxLength: 64\n          description: Private key of the address, from which the TRX will be sent.\n          example: 842E09EB40D8175979EFB0071B28163E11AED0F14BDD84090A4CEFB936EF5701\n        receiver:\n          type: string\n          minLength: 34\n          maxLength: 34\n          description: Recipient address of frozen BANDWIDTH or ENERGY.\n          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh\n        duration:\n          type: number\n          description: Duration of frozen funds, in days.\n          example: 3\n          minimum: 3\n        resource:\n          type: string\n          description: Resource to obtain, BANDWIDTH or ENERGY.\n          example: ENERGY\n          enum:\n            - BANDWIDTH\n            - ENERGY\n        amount:\n          description: Amount to be frozen in TRX.\n          example: \"100000\"\n          pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n          type: string\n      required:\n        - fromPrivateKey\n        - receiver\n        - resource\n        - duration\n        - amount\n    FreezeTronKMS:\n      type: object\n      properties:\n        from:\n          type: string\n          minLength: 34\n          maxLength: 34\n          description: Sender address of TRON account in Base58 format.\n          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh\n        signatureId:\n          type: string\n          minimum: 36\n          maximum: 36\n          format: uuid\n          example: 1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        index:\n          type: number\n          minimum: 0\n          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.\n        receiver:\n          type: string\n          minLength: 34\n          maxLength: 34\n          description: Recipient address of frozen BANDWIDTH or ENERGY.\n          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh\n        duration:\n          type: number\n          description: Duration of frozen funds, in days.\n          example: 3\n          minimum: 3\n        resource:\n          type: string\n          description: Resource to obtain, BANDWIDTH or ENERGY.\n          example: ENERGY\n          enum:\n            - BANDWIDTH\n            - ENERGY\n        amount:\n          description: Amount to be frozen in TRX.\n          example: \"100000\"\n          pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n          type: string\n      required:\n        - from\n        - signatureId\n        - index\n        - receiver\n        - resource\n        - duration\n        - amount\n    Error403Tron:\n      properties:\n        errorCode:\n          description: tron.failed\n          example: tron.failed\n          type: string\n        message:\n          description: Unable to communicate to blockchain. ${error}\n          example: Unable to communicate to blockchain. ${error}\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    TronWallet:\n      type: object\n      required:\n        - mnemonic\n        - xpub\n      properties:\n        mnemonic:\n          description: Generated mnemonic for wallet.\n          example: \"urge pulp usage sister evidence arrest palm math please chief egg abuse\"\n          type: string\n        xpub:\n          description: Generated Extended public key for wallet with derivation path according to BIP44. This key can be used to generate addresses.\n          example: 0244b3f40c6e570ae0032f6d7be87737a6c4e5314a4a1a82e22d0460a0d0cd794936c61f0c80dc74ace4cd04690d4eeb1aa6555883be006e1748306faa7ed3a26a\n          type: string\n    TronBlock:\n      type: object\n      properties:\n        hash:\n          type: string\n          description: Block hash\n          example: 000000000195a8cfe2ea4ca60ce921b30e95980a96c6bb1da4a35aa03da9c5a8\n        blockNumber:\n          type: number\n          description: Block number.\n          example: 26585295\n        timestamp:\n          type: number\n          description: Time of the block in UTC millis.\n          example: 1610134209000\n        parentHash:\n          type: string\n          description: Hash of the parent block.\n          example: 000000000195a8ce6003aa8b6443c52734b80aefdcd079bf40e7f165b046370e\n        witnessAddress:\n          type: string\n          description: Witness address.\n          example: 4118e2e1c6cdf4b74b7c1eb84682e503213a174955\n        witnessSignature:\n          type: string\n          description: Witness signature.\n          example: e20cb7a1f01d279ebe9c20baa0d747bea160042639ba0be63460cbb21ae63f072520e7766cb7aa1bd4e74bebbdea64be431ecf52c2aa2123ca0b1d7495bd581d00\n        transactions:\n          type: array\n          description: Transactions that occurs in this block.\n          items:\n            $ref: \"#/components/schemas/TronTx\"\n    TronBroadcast:\n      type: object\n      required:\n        - txData\n      properties:\n        txData:\n          type: string\n          description: Raw signed transaction to be published to network.\n          minLength: 1\n          maxLength: 50000\n          example: '{\"raw_data\": \"{\\\"contract\\\":[{\\\"parameter\\\":{\\\"value\\\":{\\\"amount\\\":1000,\\\"owner_address\\\":\\\"41608f8da72479edc7dd921e4c30bb7e7cddbe722e\\\",\\\"to_address\\\":\\\"41e9d79cc47518930bc322d9bf7cddd260a0260a8d\\\"},\\\"type_url\\\":\\\"type.googleapis.com/protocol.TransferContract\\\"},\\\"type\\\":\\\"TransferContract\\\"}],\\\"ref_block_bytes\\\":\\\"5e4b\\\",\\\"ref_block_hash\\\":\\\"47c9dc89341b300d\\\",\\\"expiration\\\":1591089627000,\\\"timestamp\\\":1591089567635}\",\"raw_data_hex\": \"0a025e4b220847c9dc89341b300d40f8fed3a2a72e5a66080112620a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412310a1541608f8da72479edc7dd921e4c30bb7e7cddbe722e121541e9d79cc47518930bc322d9bf7cddd260a0260a8d18e8077093afd0a2a72e\"}'\n    TronTx:\n      type: object\n      required:\n        - txID\n        - signature\n        - blockNumber\n        - ret\n        - rawData\n      properties:\n        blockNumber:\n          type: number\n          description: Block, where which the transactio nwas included.\n          example: 11223344\n        ret:\n          type: object\n          description: Result of the smart contract invocation.\n          properties:\n            contractRet:\n              type: string\n              description: Return value of the smart contract invocation.\n              example: SUCCESS\n            fee:\n              type: number\n              description: Fee of the blockchain transaction. Not present every time, depends on the type of the smart contract, which was invoked.\n              example:\n          required:\n            - contractRet\n        signature:\n          type: array\n          description: List of signatures of the transaction.\n          items:\n            type: string\n            example: 91fa5d81f9578970d21fdcde4ebb849674d437b62774f34e8d9e4cb50960c0031362cbcb649553b1f5f9daf19495ae46e517d4401172b5e53bb06bfe6896e2e300\n        txID:\n          type: string\n          description: Transaction ID.\n          example: 24dd2f121a24516f22df78adf1ccc32119e3edb7760297f76a925b879f2baa98\n        netFee:\n          type: number\n          description: Fee paid for the transaction.\n          example: 13800\n        netUsage:\n          type: number\n          description: Usage of the network.\n          example: 0\n        energyFee:\n          type: number\n          description: Fee paid for the energy.\n          example: 1157080\n        energyUsage:\n          type: number\n          description: Usage of the energy.\n          example: 2\n        energyUsageTotal:\n          type: number\n          description: Total energy used.\n          example: 28929\n        internalTransactions:\n          type: array\n          items:\n            type: object\n            properties:\n              internal_tx_id:\n                type: string\n                description: Internal TX ID.\n                example: e1543ab5ac85e8fbf2397f30f19dc5b7a32abd508a57ff0c13642c9963d9f312\n              to_address:\n                type: string\n                description: Recipient address.\n                example: 41a614f803b6fd780986a42c78ec9c7f77e6ded13c\n              from_address:\n                type: string\n                description: Sender address.\n                example: 41a2726afbecbd8e936000ed684cef5e2f5cf43008\n          description: List of internal smart contract transactions.\n        rawData:\n          type: object\n          description: Raw data of the transaction.\n          properties:\n            expiration:\n              description: Expiration of the transaction.\n              type: number\n              example: 1610067216000\n            timestamp:\n              description: Time of the transaction.\n              type: number\n              example: 1609980816000\n            fee_limit:\n              description: Max limit of the fee.\n              type: number\n              example: 100000000\n            contract:\n              type: array\n              description: Smart contract invocations details.\n              items:\n                type: object\n                properties:\n                  type:\n                    example: TriggerSmartContract\n                    type: string\n                    description: Type of the Smart contract.\n                  parameter:\n                    type: object\n                    properties:\n                      type_url:\n                        type: string\n                        example: type.googleapis.com/protocol.TriggerSmartContract\n                        description: Type of the smart contract event.\n                      value:\n                        type: object\n                        properties:\n                          data:\n                            type: string\n                            description: Data of the contract method.\n                            example: a9059cbb0000000000000000000000418bea410241bc77c1da7fc8bc13929c4035596c5f0000000000000000000000000000000000000000000000022571499fd43aec00\n                          owner_address:\n                            type: string\n                            example: 418632237fd33f62c549ee044dd3da779aba947dcc\n                            description: Address of the sender.\n                          contract_address:\n                            type: string\n                            example: 41af2c205a7e44f79f680d149d339b733f6d34b6d5\n                            description: Address of the recipient.\n                          ownerAddressBase58:\n                            type: string\n                            example: TNCmcTdyrYKMtmE1KU2itzeCX76jGm5Not\n                            description: Address of the sender in Base58 encoding.\n                          contractAddressBase58:\n                              type: string\n                              example: TRwS7apsNdRGzMBfhB2hVC4RhqfubUYZ8P\n                              description: Address of the recipient in Base58 encoding.\n          required:\n            - contract\n            - timestamp\n            - expiration\n    TronInternalTx:\n      type: object\n      required:\n        - internal_tx_id\n        - tx_id\n        - to_address\n        - from_address\n      properties:\n        tx_id:\n          type: string\n          description: Transaction ID.\n          example: 24dd2f121a24516f22df78adf1ccc32119e3edb7760297f76a925b879f2baa98\n        internal_tx_id:\n          type: string\n          description: Internal TX ID.\n          example: e1543ab5ac85e8fbf2397f30f19dc5b7a32abd508a57ff0c13642c9963d9f312\n        to_address:\n          type: string\n          description: Recipient address.\n          example: 41a614f803b6fd780986a42c78ec9c7f77e6ded13c\n        from_address:\n          type: string\n          description: Sender address.\n          example: 41a2726afbecbd8e936000ed684cef5e2f5cf43008\n    TronTx20:\n      type: object\n      required:\n        - txID\n        - to\n        - tokenInfo\n        - type\n        - value\n        - from\n      properties:\n        txID:\n          type: string\n          description: Transaction ID.\n          example: 24dd2f121a24516f22df78adf1ccc32119e3edb7760297f76a925b879f2baa98\n        tokenInfo:\n          type: object\n          required:\n            - symbol\n            - decimals\n            - address\n            - name\n          properties:\n            symbol:\n              type: string\n              example: USDT\n            address:\n              type: string\n              example: TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t\n            decimals:\n              type: number\n              example: 6\n            name:\n              type: string\n              example: Tether USD\n        from:\n          type: string\n          example: TPn72oEg7WPaffgNBf62vGx8G1s4chx2fp\n        to:\n          type: string\n          example: TJyhbP1bQfo8tLPxEVjaka9gh2qkN7MvD3\n        type:\n          type: string\n          example: Transfer\n        value:\n          type: string\n          example: \"1800\"\n    TronAccount:\n      type: object\n      required:\n        - address\n        - freeNetUsage\n        - balance\n        - trc10\n        - trc20\n        - createTime\n      properties:\n        address:\n          type: string\n          description: Account address\n          example: TGDqQAP5bduoPKVgdbk7fGyW4DwEt3RRn8\n        freeNetUsage:\n          type: number\n          description: Free usage of the network\n          example: 1900\n        balance:\n          type: number\n          description: Balance of the TRX, in SUN. SUN is 1/1000000 TRX.\n          example: 2342342\n        trc10:\n          type: array\n          items:\n            type: object\n            description: Balance of the TRC10 assets.\n            properties:\n              key:\n                type: string\n                description: Name of the TRC10 asset.\n                example: TEST_TRC_10\n              value:\n                type: number\n                description: Balance of the TRC10 asset.\n                example: 123\n            required:\n              - key\n              - value\n        trc20:\n          type: array\n          items:\n            type: object\n            description: Balance of the TRC20 assets. It is structured as key value array, where key is the address of the TRC20 and value is the balance.\n            example:\n              TRkuKAxmWZ4G74MvZnFpoosQZsfvtNpmwH: \"30958\"\n              TVKXY8DJ9aVTcg3wwVrRRs2FbTUwi4UZWR: \"70000\"\n        createTime:\n          type: number\n          description: Date of creation of the account in UTC millis.\n          example: 1602848895000\n        assetIssuedId:\n          type: string\n          description: ID of the issued TRC10 token, if any.\n          example: \"1003475\"\n        assetIssuedName:\n          type: number\n          description: Balance of the issued TRC10 token, if any.\n          example: 100\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /v3/tron/transaction: post: operation \"TronTransfer\": responses: 401: content: application/json: schema: parse schema: oneOf: [0]: parse schema: resolve \"#/components/schemas/Error401NotActive\": find schema: resolve \"#/components/schemas/Error401NotActive\": can't find value for \"components/schemas/Error401NotActive\""
}