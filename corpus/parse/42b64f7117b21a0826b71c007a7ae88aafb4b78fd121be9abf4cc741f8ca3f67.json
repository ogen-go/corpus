{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/kennyk65/aws-teaching-demos"
		},
		"file": {
			"name": "dev4-lab5.template.yml",
			"size": 0,
			"path": "cloud-formation-demos/dev4-lab5.template.yml",
			"byteSize": 10941,
			"content": "AWSTemplateFormatVersion: 2010-09-09\nTransform: AWS::Serverless-2016-10-31\n\n# Implement Lab 5 of AWS Dev 4\n# Create an API Gateway with Lambdas and DynamoDB\n\nGlobals:  # This section defines settings that we don't want to repeat over and over in each Lambda.\n  Function:\n    MemorySize: 128\n    Timeout: 5         # Usually runs in less than one second.\n    Runtime: python3.9\n    Handler: index.lambda_handler\n    Environment:\n      Variables:\n        TABLE_NAME: !Ref DynamoDbTable\n\nResources:\n\n  TheApi:\n    Type: AWS::Serverless::Api\n    Properties:\n      StageName: prod\n      EndpointConfiguration: REGIONAL\n      DefinitionBody:   # THIS IS ALL OPENAPI:\n        openapi: \"3.0.1\"\n        info:\n          title: \"PollyNotesAPI\"\n          version: \"2022-03-10T13:57:07Z\"\n        servers:\n        - url: \"https://j44eg20nn3.execute-api.us-west-2.amazonaws.com/{basePath}\"\n          variables:\n            basePath:\n              default: \"/prod\"\n        paths:\n          /notes:\n            get:\n              responses:\n                \"200\":\n                  description: \"200 response\"\n                  headers:\n                    Access-Control-Allow-Origin:\n                      schema:\n                        type: \"string\"\n                  content:\n                    application/json:\n                      schema:\n                        $ref: \"#/components/schemas/Empty\"\n              x-amazon-apigateway-integration:\n                type: \"aws\"\n                httpMethod: \"POST\"\n                uri: !Sub \"arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListLambda.Arn}/invocations\"\n                responses:\n                  default:\n                    statusCode: \"200\"\n                    responseParameters:\n                      method.response.header.Access-Control-Allow-Origin: \"'*'\"\n                    responseTemplates:\n                      application/json: \"#set($inputRoot = $input.path('$'))\\r\\n[\\r\\n    #foreach($elem\\\n                        \\ in $inputRoot)\\r\\n    {\\r\\n        \\\"NoteId\\\" : \\\"$elem.NoteId\\\"\\\n                        ,\\r\\n        \\\"Note\\\" : \\\"$elem.Note\\\"\\r\\n    }\\r\\n    #if($foreach.hasNext),#end\\r\\\n                        \\n    #end\\r\\n]\\r\\n\"\n                requestTemplates:\n                  application/json: \"{\\\"UserId\\\":\\\"student\\\"}\"\n                passthroughBehavior: \"when_no_templates\"\n                contentHandling: \"CONVERT_TO_TEXT\"\n            post:\n              requestBody:\n                content:\n                  application/json:\n                    schema:\n                      $ref: \"#/components/schemas/NoteInput\"\n                required: true\n              responses:\n                \"200\":\n                  description: \"200 response\"\n                  headers:\n                    Access-Control-Allow-Origin:\n                      schema:\n                        type: \"string\"\n                  content:\n                    application/json:\n                      schema:\n                        $ref: \"#/components/schemas/Empty\"\n              x-amazon-apigateway-integration:\n                type: \"aws\"\n                httpMethod: \"POST\"\n                uri: !Sub \"arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateUpdateLambda.Arn}/invocations\"\n                responses:\n                  default:\n                    statusCode: \"200\"\n                    responseParameters:\n                      method.response.header.Access-Control-Allow-Origin: \"'*'\"\n                passthroughBehavior: \"when_no_templates\"\n                contentHandling: \"CONVERT_TO_TEXT\"\n            options:\n              responses:\n                \"200\":\n                  description: \"200 response\"\n                  headers:\n                    Access-Control-Allow-Origin:\n                      schema:\n                        type: \"string\"\n                    Access-Control-Allow-Methods:\n                      schema:\n                        type: \"string\"\n                    Access-Control-Allow-Headers:\n                      schema:\n                        type: \"string\"\n                  content:\n                    application/json:\n                      schema:\n                        $ref: \"#/components/schemas/Empty\"\n              x-amazon-apigateway-integration:\n                type: \"mock\"\n                responses:\n                  default:\n                    statusCode: \"200\"\n                    responseParameters:\n                      method.response.header.Access-Control-Allow-Methods: \"'GET,OPTIONS,POST'\"\n                      method.response.header.Access-Control-Allow-Headers: \"'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'\"\n                      method.response.header.Access-Control-Allow-Origin: \"'*'\"\n                requestTemplates:\n                  application/json: \"{\\\"statusCode\\\": 200}\"\n                passthroughBehavior: \"when_no_match\"\n        components:\n          schemas:\n            Empty:\n              title: \"Empty Schema\"\n              type: \"object\"\n            NoteInput:\n              title: \"Note\"\n              required:\n              - \"Note\"\n              - \"NoteId\"\n              - \"UserId\"\n              type: \"object\"\n              properties:\n                UserId:\n                  type: \"string\"\n                NoteId:\n                  type: \"integer\"\n                Note:\n                  type: \"string\"\n\n\n  # GET on /notes calls the PollyNotes-ListFunction\n  ListLambda:\n    Type: AWS::Serverless::Function\n    Properties: \n      FunctionName: !Sub ListFunction-${AWS::StackName}\n      Description: List all notes for a given userId.  Respond to /notes GET\n      Policies: !Ref LambdaFunctionPolicy\n      InlineCode: |\n        # PollyNotes-ListFunction\n        #\n        # This lambda function is integrated with the following API methods:\n        # /notes GET (list operation)\n        #\n        # Its purpose is to get notes from our DynamoDB table\n\n        from __future__ import print_function\n        import boto3\n        import os\n        from boto3.dynamodb.conditions import Key\n\n        dynamoDBResource = boto3.resource('dynamodb')\n\n        def lambda_handler(event, context):\n            # Log debug information\n            print(event)\n            ddbTable = os.environ['TABLE_NAME']\n\n            # Get the database items from the pollynotes table\n            databaseItems = getDatabaseItems(dynamoDBResource, ddbTable, event)\n\n            return databaseItems\n\n        def getDatabaseItems(dynamoDBResource, ddbTable, event):\n            print(\"getDatabaseItems Function\")\n\n            # Create our DynamoDB table resource\n            table = dynamoDBResource.Table(ddbTable)\n\n            # If a userId was passed, query the table for that user's items\n            if \"UserId\" in event:\n                UserId = event['UserId']\n                records = table.query(KeyConditionExpression=Key(\"UserId\").eq(UserId))\n            else:\n                # if not, scan the table and return all items\n                records = table.scan()\n\n            return records[\"Items\"]\n\n\n  # POST on /notes calls the PollyNotes-CreateUpdateFunction\n  CreateUpdateLambda:\n    Type: AWS::Serverless::Function\n    Properties: \n      FunctionName: !Sub CreateUpdateFunction-${AWS::StackName}\n      Description: Create or update note for a given userId.  Respond to /notes POST\n      Policies: !Ref LambdaFunctionPolicy\n      InlineCode: |\n        # PollyNotes-CreateUpdateFunction\n        # This function allows us to create and update items in DynamoDB\n        #\n        # This lambda function is integrated with the following API method:\n        # /notes POST (create or update a note)\n\n        from __future__ import print_function\n        import boto3\n        import os\n\n        dynamoDBResource = boto3.resource('dynamodb')\n\n        def lambda_handler(event, context):\n            \n            # Log debug information\n            print(event)\n            \n            # Extracting the user parameters from the event\n            UserId = event[\"UserId\"]\n            NoteId = event['NoteId']\n            Note = event['Note']\n            ddbTable = os.environ['TABLE_NAME']\n            \n            # DynamoDB 'put_item' to add or update a note\n            newNoteId = upsertItem(dynamoDBResource, ddbTable, UserId, NoteId, Note)\n\n            return newNoteId\n\n        def upsertItem(dynamoDBResource, ddbTable, UserId, NoteId, Note):\n            print('upsertItem Function')\n\n            # set the table's name identifier\n            table = dynamoDBResource.Table(ddbTable)\n            \n            # Put the item in the database, this will create a new item if the UserId and NoteId\n            # do not match an existing note. If it does, it will update that note.\n            table.put_item(\n                Item={\n                    'UserId': UserId,\n                    'NoteId': int(NoteId),\n                    'Note': Note\n                }\n            )\n            return NoteId\n\n\n  # Permission to invoke Lambda function from API Gateway:\n  LambdaInvokePermissionList:\n    Type: AWS::Lambda::Permission\n    Properties:\n      FunctionName: !GetAtt ListLambda.Arn\n      Action: lambda:InvokeFunction\n      Principal: apigateway.amazonaws.com\n\n  LambdaInvokePermissionCreateUpdate:\n    Type: AWS::Lambda::Permission\n    Properties:\n      FunctionName: !GetAtt CreateUpdateLambda.Arn\n      Action: lambda:InvokeFunction\n      Principal: apigateway.amazonaws.com\n\n  # This Policy is attached to the Lambda functions.\n  LambdaFunctionPolicy:\n    Type: AWS::IAM::ManagedPolicy\n    Properties: \n      ManagedPolicyName: !Sub ${AWS::StackName}-LambdaFunctionPolicy\n      PolicyDocument: \n        Version: 2012-10-17\n        Statement: \n          Effect: Allow\n          Action: \n            - dynamodb:DeleteItem\n            - dynamodb:PutItem\n            - dynamodb:GetItem\n            - dynamodb:Query\n            - dynamodb:Scan\n            - dynamodb:UpdateItem\n            - dynamodb:DescribeTable\n            - polly:SynthesizeSpeech\n            - s3:PutObject\n            - s3:GetObject\n            - logs:CreateLogGroup\n            - logs:CreateLogStream\n            - logs:PutLogEvents\n          Resource: \"*\"\n\n  DynamoDbTable:\n    Type: AWS::DynamoDB::Table\n    Properties:\n      TableName: !Sub PollyNotes-${AWS::StackName}\n      AttributeDefinitions:\n      - AttributeName: UserId\n        AttributeType: S\n      - AttributeName: NoteId\n        AttributeType: S\n      KeySchema:\n      - AttributeName: UserId\n        KeyType: HASH\n      - AttributeName: NoteId\n        KeyType: RANGE\n      ProvisionedThroughput:\n        ReadCapacityUnits: 5\n        WriteCapacityUnits: 5\n\nOutputs:\n\n  ApiGatewayProductionStageUrl:\n    Description: The URL to use in your web code to point at the API gateway endpoint.  \n    Value: !Sub https://${TheApi}.execute-api.${AWS::Region}.amazonaws.com/prod\n    \n",
			"canonicalURL": "/github.com/kennyk65/aws-teaching-demos@38b75a8aadc6d8d6e3955d7cee7df9c6085d184d/-/blob/cloud-formation-demos/dev4-lab5.template.yml",
			"externalURLs": [
				{
					"url": "https://github.com/kennyk65/aws-teaching-demos/blob/38b75a8aadc6d8d6e3955d7cee7df9c6085d184d/cloud-formation-demos/dev4-lab5.template.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse version: at cloud-formation-demos/dev4-lab5.template.yml:1:1: invalid version: invalid major version: strconv.Atoi: parsing \"\": invalid syntax"
}