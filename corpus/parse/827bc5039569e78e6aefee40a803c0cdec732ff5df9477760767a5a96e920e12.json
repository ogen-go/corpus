{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/web3j/web3j-eth2"
		},
		"file": {
			"name": "beacon-node-oapi.yml",
			"size": 0,
			"path": "beacon-node-api/beacon-node-oapi.yml",
			"byteSize": 421223,
			"content": "openapi: 3.0.3\ninfo:\n  title: Eth2 Beacon Node API\n  description: 'API specification for the beacon node, which enables users to query and participate in Ethereum 2.0 phase 0 beacon chain.'\n  version: Dev - Eth2Spec v0.12.2\n  contact:\n    name: Ethereum Github\n    url: 'https://github.com/ethereum/eth2.0-apis/issues'\n  license:\n    name: Apache 2.0\n    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'\nservers:\n  - url: '{server_url}'\n    variables:\n      server_url:\n        description: Beacon node API url\n        default: 'http://public-mainnet-node.ethereum.org/api'\ntags:\n  - name: Beacon\n    description: Set of endpoints to query beacon chain.\n  - name: Config\n    description: 'Endpoints to query chain configuration, specification, and fork schedules.'\n  - name: Debug\n    description: Set of endpoints to debug chain and shouldn't be exposed publicly.\n  - name: Events\n    description: Set of endpoints to for event subscription.\n  - name: Node\n    description: Endpoints to query node related informations\n  - name: Validator\n    description: Endpoints intended for validator clients\n  - name: ValidatorRequiredApi\n    description: |\n      Minimal set of endpoints to enable a working validator implementation.\n\n      [Checkout validator flow](./validator-flow.md) to learn how to use this api.\npaths:\n  /eth/v1/beacon/genesis:\n    get:\n      operationId: getGenesis\n      tags:\n        - Beacon\n        - ValidatorRequiredApi\n      summary: Retrieve details of the chain's genesis.\n      description: Retrieve details of the chain's genesis which can be used to identify chain.\n      responses:\n        '200':\n          description: Request successful\n          content:\n            application/json:\n              schema:\n                type: object\n                title: GetGenesisResponse\n                properties:\n                  data:\n                    type: object\n                    properties:\n                      genesis_time:\n                        allOf:\n                          - type: string\n                            example: '1'\n                          - example: '1590832934'\n                          - description: 'The genesis_time configured for the beacon node, which is the unix time in seconds at which the Eth2.0 chain began.'\n                      genesis_validators_root:\n                        type: string\n                        example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                        pattern: '^0x[a-fA-F0-9]{64}$'\n                      genesis_fork_version:\n                        type: string\n                        description: a fork version number\n                        example: '0x00000000'\n                        pattern: '^0x[a-fA-F0-9]{8}$'\n        '404':\n          description: Chain genesis info is not yet known\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - type: object\n                    properties:\n                      code:\n                        description: Either specific error code in case of invalid request or http status code\n                        type: number\n                        example: 404\n                      message:\n                        description: Message describing error\n                        type: string\n                      stacktraces:\n                        description: 'Optional stacktraces, sent when node is in debug mode'\n                        type: array\n                        items:\n                          type: string\n                  - example:\n                      code: 404\n                      message: Chain genesis info is not yet known\n        '500':\n          description: Beacon node internal error.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    description: Either specific error code in case of invalid request or http status code\n                    type: number\n                    example: 404\n                  message:\n                    description: Message describing error\n                    type: string\n                  stacktraces:\n                    description: 'Optional stacktraces, sent when node is in debug mode'\n                    type: array\n                    items:\n                      type: string\n              example:\n                code: 500\n                message: Internal server error\n  '/eth/v1/beacon/states/{state_id}/root':\n    get:\n      operationId: getStateRoot\n      summary: Get state SSZ HashTreeRoot\n      description: 'Calculates HashTreeRoot for state with given ''stateId''. If stateId is root, same value will be returned.'\n      tags:\n        - Beacon\n      parameters:\n        - name: state_id\n          in: path\n          required: true\n          example: head\n          schema:\n            type: string\n          description: |\n            State identifier.\n            Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\\u003cslot\\\u003e, \\\u003chex encoded stateRoot with 0x prefix\\\u003e.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                title: GetStateRootResponse\n                type: object\n                properties:\n                  data:\n                    type: object\n                    properties:\n                      root:\n                        allOf:\n                          - type: string\n                            example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                            pattern: '^0x[a-fA-F0-9]{64}$'\n                          - description: HashTreeRoot of BeaconState object\n        '400':\n          description: Invalid state ID\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - type: object\n                    properties:\n                      code:\n                        description: Either specific error code in case of invalid request or http status code\n                        type: number\n                        example: 404\n                      message:\n                        description: Message describing error\n                        type: string\n                      stacktraces:\n                        description: 'Optional stacktraces, sent when node is in debug mode'\n                        type: array\n                        items:\n                          type: string\n                  - example:\n                      code: 400\n                      message: 'Invalid state ID: current'\n        '404':\n          description: State not found\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - type: object\n                    properties:\n                      code:\n                        description: Either specific error code in case of invalid request or http status code\n                        type: number\n                        example: 404\n                      message:\n                        description: Message describing error\n                        type: string\n                      stacktraces:\n                        description: 'Optional stacktraces, sent when node is in debug mode'\n                        type: array\n                        items:\n                          type: string\n              example:\n                code: 404\n                message: State not found\n        '500':\n          description: Beacon node internal error.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    description: Either specific error code in case of invalid request or http status code\n                    type: number\n                    example: 404\n                  message:\n                    description: Message describing error\n                    type: string\n                  stacktraces:\n                    description: 'Optional stacktraces, sent when node is in debug mode'\n                    type: array\n                    items:\n                      type: string\n              example:\n                code: 500\n                message: Internal server error\n  '/eth/v1/beacon/states/{state_id}/fork':\n    get:\n      operationId: getStateFork\n      summary: Get Fork object for requested state\n      description: 'Returns [Fork](https://github.com/ethereum/eth2.0-specs/blob/v0.11.1/specs/phase0/beacon-chain.md#fork) object for state with given ''stateId''.'\n      tags:\n        - Beacon\n        - ValidatorRequiredApi\n      parameters:\n        - name: state_id\n          in: path\n          required: true\n          example: head\n          schema:\n            type: string\n          description: |\n            State identifier.\n            Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\\u003cslot\\\u003e, \\\u003chex encoded stateRoot with 0x prefix\\\u003e.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                title: GetStateForkResponse\n                type: object\n                properties:\n                  data:\n                    type: object\n                    description: 'The [`Fork`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#fork) object from the Eth2.0 spec.'\n                    properties:\n                      previous_version:\n                        type: string\n                        description: a fork version number\n                        example: '0x00000000'\n                        pattern: '^0x[a-fA-F0-9]{8}$'\n                      current_version:\n                        type: string\n                        description: a fork version number\n                        example: '0x00000000'\n                        pattern: '^0x[a-fA-F0-9]{8}$'\n                      epoch:\n                        type: string\n                        example: '1'\n        '400':\n          description: Invalid state ID\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - type: object\n                    properties:\n                      code:\n                        description: Either specific error code in case of invalid request or http status code\n                        type: number\n                        example: 404\n                      message:\n                        description: Message describing error\n                        type: string\n                      stacktraces:\n                        description: 'Optional stacktraces, sent when node is in debug mode'\n                        type: array\n                        items:\n                          type: string\n                  - example:\n                      code: 400\n                      message: 'Invalid state ID: current'\n        '404':\n          description: State not found\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - type: object\n                    properties:\n                      code:\n                        description: Either specific error code in case of invalid request or http status code\n                        type: number\n                        example: 404\n                      message:\n                        description: Message describing error\n                        type: string\n                      stacktraces:\n                        description: 'Optional stacktraces, sent when node is in debug mode'\n                        type: array\n                        items:\n                          type: string\n                  - example:\n                      code: 404\n                      message: State not found\n        '500':\n          description: Beacon node internal error.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    description: Either specific error code in case of invalid request or http status code\n                    type: number\n                    example: 404\n                  message:\n                    description: Message describing error\n                    type: string\n                  stacktraces:\n                    description: 'Optional stacktraces, sent when node is in debug mode'\n                    type: array\n                    items:\n                      type: string\n              example:\n                code: 500\n                message: Internal server error\n  '/eth/v1/beacon/states/{state_id}/finality_checkpoints':\n    get:\n      operationId: getStateFinalityCheckpoints\n      summary: Get state finality checkpoints\n      description: |\n        Returns finality checkpoints for state with given 'stateId'.\n        In case finality is not yet achieved, checkpoint should return epoch 0 and ZERO_HASH as root.\n      tags:\n        - Beacon\n      parameters:\n        - name: state_id\n          in: path\n          required: true\n          example: head\n          schema:\n            type: string\n          description: |\n            State identifier.\n            Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\\u003cslot\\\u003e, \\\u003chex encoded stateRoot with 0x prefix\\\u003e.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                title: GetStateFinalityCheckpointsResponse\n                type: object\n                properties:\n                  data:\n                    type: object\n                    properties:\n                      previous_justified:\n                        type: object\n                        description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                        properties:\n                          epoch:\n                            type: string\n                            example: '1'\n                          root:\n                            type: string\n                            example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                            pattern: '^0x[a-fA-F0-9]{64}$'\n                      current_justified:\n                        type: object\n                        description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                        properties:\n                          epoch:\n                            type: string\n                            example: '1'\n                          root:\n                            type: string\n                            example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                            pattern: '^0x[a-fA-F0-9]{64}$'\n                      finalized:\n                        type: object\n                        description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                        properties:\n                          epoch:\n                            type: string\n                            example: '1'\n                          root:\n                            type: string\n                            example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                            pattern: '^0x[a-fA-F0-9]{64}$'\n        '400':\n          description: Invalid state ID\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - type: object\n                    properties:\n                      code:\n                        description: Either specific error code in case of invalid request or http status code\n                        type: number\n                        example: 404\n                      message:\n                        description: Message describing error\n                        type: string\n                      stacktraces:\n                        description: 'Optional stacktraces, sent when node is in debug mode'\n                        type: array\n                        items:\n                          type: string\n                  - example:\n                      code: 400\n                      message: 'Invalid state ID: current'\n        '404':\n          description: State not found\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - type: object\n                    properties:\n                      code:\n                        description: Either specific error code in case of invalid request or http status code\n                        type: number\n                        example: 404\n                      message:\n                        description: Message describing error\n                        type: string\n                      stacktraces:\n                        description: 'Optional stacktraces, sent when node is in debug mode'\n                        type: array\n                        items:\n                          type: string\n                  - example:\n                      code: 404\n                      message: State not found\n        '500':\n          description: Beacon node internal error.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    description: Either specific error code in case of invalid request or http status code\n                    type: number\n                    example: 404\n                  message:\n                    description: Message describing error\n                    type: string\n                  stacktraces:\n                    description: 'Optional stacktraces, sent when node is in debug mode'\n                    type: array\n                    items:\n                      type: string\n              example:\n                code: 500\n                message: Internal server error\n  '/eth/v1/beacon/states/{state_id}/validators':\n    get:\n      operationId: getStateValidators\n      summary: Get validators from state\n      description: 'Returns filterable list of validators with their balance, status and index.'\n      tags:\n        - Beacon\n      parameters:\n        - name: state_id\n          in: path\n          required: true\n          example: head\n          schema:\n            type: string\n          description: |\n            State identifier.\n            Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\\u003cslot\\\u003e, \\\u003chex encoded stateRoot with 0x prefix\\\u003e.\n        - name: id\n          description: Either hex encoded public key (with 0x prefix) or validator index\n          in: query\n          required: false\n          schema:\n            type: array\n            maxItems: 30\n            uniqueItems: true\n            items:\n              description: Either hex encoded public key (with 0x prefix) or validator index\n              type: string\n        - name: status\n          description: '[Validator status specification](https://hackmd.io/ofFJ5gOmQpu1jjHilHbdQQ)'\n          in: query\n          required: false\n          schema:\n            type: array\n            uniqueItems: true\n            items:\n              allOf:\n                - description: |\n                    Possible statuses:\n                    - **pending_initialized** - When the first deposit is processed, but not enough funds are available (or not yet the end of the first epoch) to get validator into the activation queue.\n                    - **pending_queued** - When validator is waiting to get activated, and have enough funds etc. while in the queue, validator activation epoch keeps changing until it gets to the front and make it through (finalization is a requirement here too).\n                    - **active_ongoing** - When validator must be attesting, and have not initiated any exit.\n                    - **active_exiting** - When validator is still active, but filed a voluntary request to exit.\n                    - **active_slashed** - When validator is still active, but have a slashed status and is scheduled to exit.\n                    - **exited_unslashed** - When validator has reached reguler exit epoch, not being slashed, and doesn't have to attest any more, but cannot withdraw yet.\n                    - **exited_slashed** - When validator has reached reguler exit epoch, but was slashed, have to wait for a longer withdrawal period.\n                    - **withdrawal_possible** - After validator has exited, a while later is permitted to move funds, and is truly out of the system.\n                    - **withdrawal_done** - (not possible in phase0, except slashing full balance) - actually having moved funds away\n\n                    [Validator status specification](https://hackmd.io/ofFJ5gOmQpu1jjHilHbdQQ)\n                  enum:\n                    - pending_initialized\n                    - pending_queued\n                    - active_ongoing\n                    - active_exiting\n                    - active_slashed\n                    - exited_unslashed\n                    - exited_slashed\n                    - withdrawal_possible\n                    - withdrawal_done\n                  example: active_ongoing\n                - enum:\n                    - active\n                    - pending\n                    - exited\n                    - withdrawal\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                title: GetStateValidatorsResponse\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        index:\n                          allOf:\n                            - type: string\n                              example: '1'\n                            - description: Index of validator in validator registry.\n                        balance:\n                          allOf:\n                            - type: string\n                              example: '1'\n                            - description: Current validator balance in gwei.\n                        status:\n                          description: |\n                            Possible statuses:\n                            - **pending_initialized** - When the first deposit is processed, but not enough funds are available (or not yet the end of the first epoch) to get validator into the activation queue.\n                            - **pending_queued** - When validator is waiting to get activated, and have enough funds etc. while in the queue, validator activation epoch keeps changing until it gets to the front and make it through (finalization is a requirement here too).\n                            - **active_ongoing** - When validator must be attesting, and have not initiated any exit.\n                            - **active_exiting** - When validator is still active, but filed a voluntary request to exit.\n                            - **active_slashed** - When validator is still active, but have a slashed status and is scheduled to exit.\n                            - **exited_unslashed** - When validator has reached reguler exit epoch, not being slashed, and doesn't have to attest any more, but cannot withdraw yet.\n                            - **exited_slashed** - When validator has reached reguler exit epoch, but was slashed, have to wait for a longer withdrawal period.\n                            - **withdrawal_possible** - After validator has exited, a while later is permitted to move funds, and is truly out of the system.\n                            - **withdrawal_done** - (not possible in phase0, except slashing full balance) - actually having moved funds away\n\n                            [Validator status specification](https://hackmd.io/ofFJ5gOmQpu1jjHilHbdQQ)\n                          enum:\n                            - pending_initialized\n                            - pending_queued\n                            - active_ongoing\n                            - active_exiting\n                            - active_slashed\n                            - exited_unslashed\n                            - exited_slashed\n                            - withdrawal_possible\n                            - withdrawal_done\n                          example: active_ongoing\n                        validator:\n                          type: object\n                          properties:\n                            pubkey:\n                              type: string\n                              pattern: '^0x[a-fA-F0-9]{96}$'\n                              description: 'The validator''s BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._'\n                              example: '0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a'\n                            withdrawal_credentials:\n                              allOf:\n                                - type: string\n                                  example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                  pattern: '^0x[a-fA-F0-9]{64}$'\n                                - description: Root of withdrawal credentials\n                            effective_balance:\n                              allOf:\n                                - type: string\n                                  example: '1'\n                                - description: Balance at stake in Gwei.\n                            slashed:\n                              type: boolean\n                              example: false\n                              description: Was validator slashed (not longer active).\n                            activation_eligibility_epoch:\n                              allOf:\n                                - type: string\n                                  example: '1'\n                                - description: When criteria for activation were met.\n                            activation_epoch:\n                              allOf:\n                                - type: string\n                                  example: '1'\n                                - description: Epoch when validator activated. 'FAR_FUTURE_EPOCH' if not activated\n                            exit_epoch:\n                              allOf:\n                                - type: string\n                                  example: '1'\n                                - description: Epoch when validator exited. 'FAR_FUTURE_EPOCH' if not exited.\n                            withdrawable_epoch:\n                              allOf:\n                                - type: string\n                                  example: '1'\n                                - description: When validator can withdraw or transfer funds. 'FAR_FUTURE_EPOCH' if not defined\n        '400':\n          description: 'Invalid state or validator ID, or status'\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - type: object\n                    properties:\n                      code:\n                        description: Either specific error code in case of invalid request or http status code\n                        type: number\n                        example: 404\n                      message:\n                        description: Message describing error\n                        type: string\n                      stacktraces:\n                        description: 'Optional stacktraces, sent when node is in debug mode'\n                        type: array\n                        items:\n                          type: string\n                  - example:\n                      code: 400\n                      message: 'Invalid state ID: current'\n        '500':\n          description: Beacon node internal error.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    description: Either specific error code in case of invalid request or http status code\n                    type: number\n                    example: 404\n                  message:\n                    description: Message describing error\n                    type: string\n                  stacktraces:\n                    description: 'Optional stacktraces, sent when node is in debug mode'\n                    type: array\n                    items:\n                      type: string\n              example:\n                code: 500\n                message: Internal server error\n  '/eth/v1/beacon/states/{state_id}/validators/{validator_id}':\n    get:\n      operationId: getStateValidator\n      summary: Get validator from state by id\n      description: Returns validator specified by state and id or public key along with status and balance.\n      tags:\n        - Beacon\n        - ValidatorRequiredApi\n      parameters:\n        - name: state_id\n          in: path\n          required: true\n          example: head\n          schema:\n            type: string\n          description: |\n            State identifier.\n            Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\\u003cslot\\\u003e, \\\u003chex encoded stateRoot with 0x prefix\\\u003e.\n        - name: validator_id\n          description: Either hex encoded public key (with 0x prefix) or validator index\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                title: GetStateValidatorResponse\n                type: object\n                properties:\n                  data:\n                    type: object\n                    properties:\n                      index:\n                        allOf:\n                          - type: string\n                            example: '1'\n                          - description: Index of validator in validator registry.\n                      balance:\n                        allOf:\n                          - type: string\n                            example: '1'\n                          - description: Current validator balance in gwei.\n                      status:\n                        description: |\n                          Possible statuses:\n                          - **pending_initialized** - When the first deposit is processed, but not enough funds are available (or not yet the end of the first epoch) to get validator into the activation queue.\n                          - **pending_queued** - When validator is waiting to get activated, and have enough funds etc. while in the queue, validator activation epoch keeps changing until it gets to the front and make it through (finalization is a requirement here too).\n                          - **active_ongoing** - When validator must be attesting, and have not initiated any exit.\n                          - **active_exiting** - When validator is still active, but filed a voluntary request to exit.\n                          - **active_slashed** - When validator is still active, but have a slashed status and is scheduled to exit.\n                          - **exited_unslashed** - When validator has reached reguler exit epoch, not being slashed, and doesn't have to attest any more, but cannot withdraw yet.\n                          - **exited_slashed** - When validator has reached reguler exit epoch, but was slashed, have to wait for a longer withdrawal period.\n                          - **withdrawal_possible** - After validator has exited, a while later is permitted to move funds, and is truly out of the system.\n                          - **withdrawal_done** - (not possible in phase0, except slashing full balance) - actually having moved funds away\n\n                          [Validator status specification](https://hackmd.io/ofFJ5gOmQpu1jjHilHbdQQ)\n                        enum:\n                          - pending_initialized\n                          - pending_queued\n                          - active_ongoing\n                          - active_exiting\n                          - active_slashed\n                          - exited_unslashed\n                          - exited_slashed\n                          - withdrawal_possible\n                          - withdrawal_done\n                        example: active_ongoing\n                      validator:\n                        type: object\n                        properties:\n                          pubkey:\n                            type: string\n                            pattern: '^0x[a-fA-F0-9]{96}$'\n                            description: 'The validator''s BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._'\n                            example: '0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a'\n                          withdrawal_credentials:\n                            allOf:\n                              - type: string\n                                example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                pattern: '^0x[a-fA-F0-9]{64}$'\n                              - description: Root of withdrawal credentials\n                          effective_balance:\n                            allOf:\n                              - type: string\n                                example: '1'\n                              - description: Balance at stake in Gwei.\n                          slashed:\n                            type: boolean\n                            example: false\n                            description: Was validator slashed (not longer active).\n                          activation_eligibility_epoch:\n                            allOf:\n                              - type: string\n                                example: '1'\n                              - description: When criteria for activation were met.\n                          activation_epoch:\n                            allOf:\n                              - type: string\n                                example: '1'\n                              - description: Epoch when validator activated. 'FAR_FUTURE_EPOCH' if not activated\n                          exit_epoch:\n                            allOf:\n                              - type: string\n                                example: '1'\n                              - description: Epoch when validator exited. 'FAR_FUTURE_EPOCH' if not exited.\n                          withdrawable_epoch:\n                            allOf:\n                              - type: string\n                                example: '1'\n                              - description: When validator can withdraw or transfer funds. 'FAR_FUTURE_EPOCH' if not defined\n        '400':\n          description: Invalid state or validator ID\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - type: object\n                    properties:\n                      code:\n                        description: Either specific error code in case of invalid request or http status code\n                        type: number\n                        example: 404\n                      message:\n                        description: Message describing error\n                        type: string\n                      stacktraces:\n                        description: 'Optional stacktraces, sent when node is in debug mode'\n                        type: array\n                        items:\n                          type: string\n                  - example:\n                      code: 400\n                      message: 'Invalid state ID: current'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    description: Either specific error code in case of invalid request or http status code\n                    type: number\n                    example: 404\n                  message:\n                    description: Message describing error\n                    type: string\n                  stacktraces:\n                    description: 'Optional stacktraces, sent when node is in debug mode'\n                    type: array\n                    items:\n                      type: string\n              examples:\n                StateNotFound:\n                  value:\n                    code: 404\n                    message: State not found\n                ValidatorNotFound:\n                  value:\n                    code: 404\n                    message: Validator not found\n        '500':\n          description: Beacon node internal error.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    description: Either specific error code in case of invalid request or http status code\n                    type: number\n                    example: 404\n                  message:\n                    description: Message describing error\n                    type: string\n                  stacktraces:\n                    description: 'Optional stacktraces, sent when node is in debug mode'\n                    type: array\n                    items:\n                      type: string\n              example:\n                code: 500\n                message: Internal server error\n  '/eth/v1/beacon/states/{state_id}/validator_balances':\n    get:\n      operationId: getStateValidatorBalances\n      summary: Get validator balances from state\n      description: Returns filterable list of validator balances.\n      tags:\n        - Beacon\n      parameters:\n        - name: state_id\n          in: path\n          required: true\n          example: head\n          schema:\n            type: string\n          description: |\n            State identifier.\n            Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\\u003cslot\\\u003e, \\\u003chex encoded stateRoot with 0x prefix\\\u003e.\n        - name: id\n          description: Either hex encoded public key (with 0x prefix) or validator index\n          in: query\n          required: false\n          schema:\n            type: array\n            maxItems: 30\n            uniqueItems: true\n            items:\n              description: Either hex encoded public key (with 0x prefix) or validator index\n              type: string\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                title: GetStateValidatorBalancesResponse\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        index:\n                          allOf:\n                            - type: string\n                              example: '1'\n                            - description: Index of validator in validator registry.\n                        balance:\n                          allOf:\n                            - type: string\n                              example: '1'\n                            - description: Current validator balance in gwei.\n        '400':\n          description: Invalid state or validator ID\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - type: object\n                    properties:\n                      code:\n                        description: Either specific error code in case of invalid request or http status code\n                        type: number\n                        example: 404\n                      message:\n                        description: Message describing error\n                        type: string\n                      stacktraces:\n                        description: 'Optional stacktraces, sent when node is in debug mode'\n                        type: array\n                        items:\n                          type: string\n                  - example:\n                      code: 400\n                      message: 'Invalid state ID: current'\n        '500':\n          description: Beacon node internal error.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    description: Either specific error code in case of invalid request or http status code\n                    type: number\n                    example: 404\n                  message:\n                    description: Message describing error\n                    type: string\n                  stacktraces:\n                    description: 'Optional stacktraces, sent when node is in debug mode'\n                    type: array\n                    items:\n                      type: string\n              example:\n                code: 500\n                message: Internal server error\n  '/eth/v1/beacon/states/{state_id}/committees/{epoch}':\n    get:\n      operationId: getEpochCommittees\n      summary: Get all committees for epoch\n      description: Retrieves the committees for the given state at the given epoch.\n      tags:\n        - Beacon\n      parameters:\n        - name: state_id\n          in: path\n          required: true\n          example: head\n          schema:\n            type: string\n          description: |\n            State identifier.\n            Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\\u003cslot\\\u003e, \\\u003chex encoded stateRoot with 0x prefix\\\u003e.\n        - name: epoch\n          description: Epoch for which to calculate committees. Defaults to beacon state epoch.\n          in: path\n          required: true\n          allowEmptyValue: true\n          schema:\n            allOf:\n              - type: string\n                example: '1'\n              - example: ''\n        - name: index\n          description: Committee index\n          in: query\n          required: false\n          schema:\n            allOf:\n              - type: string\n                example: '1'\n              - example: ''\n        - name: slot\n          in: query\n          required: false\n          schema:\n            allOf:\n              - type: string\n                example: '1'\n              - example: ''\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                title: GetEpochCommitteesResponse\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      description: Group of validators assigned to attest at specific slot and that have the same committee index (shard in phase 1)\n                      type: object\n                      properties:\n                        index:\n                          allOf:\n                            - type: string\n                              example: '1'\n                            - description: Committee index at a slot\n                        slot:\n                          type: string\n                          example: '1'\n                        validators:\n                          type: array\n                          description: List of validator indices assigned to this committee\n                          items:\n                            type: string\n                            example: '1'\n        '400':\n          description: 'Invalid state ID, index, epoch, slot, or combination thereof'\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - type: object\n                    properties:\n                      code:\n                        description: Either specific error code in case of invalid request or http status code\n                        type: number\n                        example: 404\n                      message:\n                        description: Message describing error\n                        type: string\n                      stacktraces:\n                        description: 'Optional stacktraces, sent when node is in debug mode'\n                        type: array\n                        items:\n                          type: string\n                  - example:\n                      code: 400\n                      message: Slot does not belong in epoch\n        '404':\n          description: State not found\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - type: object\n                    properties:\n                      code:\n                        description: Either specific error code in case of invalid request or http status code\n                        type: number\n                        example: 404\n                      message:\n                        description: Message describing error\n                        type: string\n                      stacktraces:\n                        description: 'Optional stacktraces, sent when node is in debug mode'\n                        type: array\n                        items:\n                          type: string\n              example:\n                code: 404\n                message: State not found\n        '500':\n          description: Beacon node internal error.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    description: Either specific error code in case of invalid request or http status code\n                    type: number\n                    example: 404\n                  message:\n                    description: Message describing error\n                    type: string\n                  stacktraces:\n                    description: 'Optional stacktraces, sent when node is in debug mode'\n                    type: array\n                    items:\n                      type: string\n              example:\n                code: 500\n                message: Internal server error\n  /eth/v1/beacon/headers:\n    get:\n      operationId: getBlockHeaders\n      summary: Get block headers\n      description: Retrieves block headers matching given query. By default it will fetch current head slot blocks.\n      tags:\n        - Beacon\n      parameters:\n        - name: slot\n          in: query\n          required: false\n          schema:\n            allOf:\n              - type: string\n                example: '1'\n              - example: ''\n        - name: parent_root\n          in: query\n          required: false\n          schema:\n            allOf:\n              - type: string\n                example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                pattern: '^0x[a-fA-F0-9]{64}$'\n              - example: ''\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                title: GetBlockHeadersResponse\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        root:\n                          type: string\n                          example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                          pattern: '^0x[a-fA-F0-9]{64}$'\n                        canonical:\n                          type: boolean\n                        header:\n                          type: object\n                          description: 'The [`SignedBeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the Eth2.0 spec.'\n                          properties:\n                            message:\n                              description: 'The [`BeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblockheader) object from the Eth2.0 spec.'\n                              allOf:\n                                - type: object\n                                  properties:\n                                    slot:\n                                      allOf:\n                                        - type: string\n                                          example: '1'\n                                        - description: The slot to which this block corresponds.\n                                    proposer_index:\n                                      allOf:\n                                        - type: string\n                                          example: '1'\n                                        - description: Index of validator in validator registry.\n                                    parent_root:\n                                      allOf:\n                                        - type: string\n                                          example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                          pattern: '^0x[a-fA-F0-9]{64}$'\n                                        - description: The signing merkle root of the parent `BeaconBlock`.\n                                    state_root:\n                                      allOf:\n                                        - type: string\n                                          example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                          pattern: '^0x[a-fA-F0-9]{64}$'\n                                        - description: The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.\n                                - type: object\n                                  properties:\n                                    body_root:\n                                      allOf:\n                                        - type: string\n                                          example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                          pattern: '^0x[a-fA-F0-9]{64}$'\n                                        - description: The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`\n                            signature:\n                              type: string\n                              pattern: '^0x[a-fA-F0-9]{192}$'\n                              example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n        '400':\n          description: The block ID supplied could not be parsed\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - type: object\n                    properties:\n                      code:\n                        description: Either specific error code in case of invalid request or http status code\n                        type: number\n                        example: 404\n                      message:\n                        description: Message describing error\n                        type: string\n                      stacktraces:\n                        description: 'Optional stacktraces, sent when node is in debug mode'\n                        type: array\n                        items:\n                          type: string\n                  - example:\n                      code: 400\n                      message: 'Invalid block ID: current'\n        '500':\n          description: Beacon node internal error.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    description: Either specific error code in case of invalid request or http status code\n                    type: number\n                    example: 404\n                  message:\n                    description: Message describing error\n                    type: string\n                  stacktraces:\n                    description: 'Optional stacktraces, sent when node is in debug mode'\n                    type: array\n                    items:\n                      type: string\n              example:\n                code: 500\n                message: Internal server error\n  '/eth/v1/beacon/headers/{block_id}':\n    get:\n      operationId: getBlockHeader\n      summary: Get block header\n      description: Retrieves block header for given block id.\n      tags:\n        - Beacon\n      parameters:\n        - name: block_id\n          in: path\n          required: true\n          example: head\n          schema:\n            type: string\n          description: |\n            Block identifier.\n            Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \\\u003cslot\\\u003e, \\\u003chex encoded blockRoot with 0x prefix\\\u003e.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                title: GetBlockHeaderResponse\n                type: object\n                properties:\n                  data:\n                    type: object\n                    properties:\n                      root:\n                        type: string\n                        example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                        pattern: '^0x[a-fA-F0-9]{64}$'\n                      canonical:\n                        type: boolean\n                      header:\n                        type: object\n                        description: 'The [`SignedBeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the Eth2.0 spec.'\n                        properties:\n                          message:\n                            description: 'The [`BeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblockheader) object from the Eth2.0 spec.'\n                            allOf:\n                              - type: object\n                                properties:\n                                  slot:\n                                    allOf:\n                                      - type: string\n                                        example: '1'\n                                      - description: The slot to which this block corresponds.\n                                  proposer_index:\n                                    allOf:\n                                      - type: string\n                                        example: '1'\n                                      - description: Index of validator in validator registry.\n                                  parent_root:\n                                    allOf:\n                                      - type: string\n                                        example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                        pattern: '^0x[a-fA-F0-9]{64}$'\n                                      - description: The signing merkle root of the parent `BeaconBlock`.\n                                  state_root:\n                                    allOf:\n                                      - type: string\n                                        example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                        pattern: '^0x[a-fA-F0-9]{64}$'\n                                      - description: The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.\n                              - type: object\n                                properties:\n                                  body_root:\n                                    allOf:\n                                      - type: string\n                                        example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                        pattern: '^0x[a-fA-F0-9]{64}$'\n                                      - description: The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`\n                          signature:\n                            type: string\n                            pattern: '^0x[a-fA-F0-9]{192}$'\n                            example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n        '400':\n          description: The block ID supplied could not be parsed\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - type: object\n                    properties:\n                      code:\n                        description: Either specific error code in case of invalid request or http status code\n                        type: number\n                        example: 404\n                      message:\n                        description: Message describing error\n                        type: string\n                      stacktraces:\n                        description: 'Optional stacktraces, sent when node is in debug mode'\n                        type: array\n                        items:\n                          type: string\n                  - example:\n                      code: 400\n                      message: 'Invalid block ID: current'\n        '404':\n          description: Block not found\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - type: object\n                    properties:\n                      code:\n                        description: Either specific error code in case of invalid request or http status code\n                        type: number\n                        example: 404\n                      message:\n                        description: Message describing error\n                        type: string\n                      stacktraces:\n                        description: 'Optional stacktraces, sent when node is in debug mode'\n                        type: array\n                        items:\n                          type: string\n                  - example:\n                      code: 404\n                      message: Block not found\n        '500':\n          description: Beacon node internal error.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    description: Either specific error code in case of invalid request or http status code\n                    type: number\n                    example: 404\n                  message:\n                    description: Message describing error\n                    type: string\n                  stacktraces:\n                    description: 'Optional stacktraces, sent when node is in debug mode'\n                    type: array\n                    items:\n                      type: string\n              example:\n                code: 500\n                message: Internal server error\n  /eth/v1/beacon/blocks:\n    post:\n      tags:\n        - Beacon\n        - ValidatorRequiredApi\n      summary: Publish a signed block.\n      operationId: publishBlock\n      description: 'Instructs the beacon node to broadcast a newly signed beacon block to the beacon network, to be included in the beacon chain. The beacon node is not required to validate the signed `BeaconBlock`, and a successful response (20X) only indicates that the broadcast has been successful. The beacon node is expected to integrate the new block into its state, and therefore validate the block internally, however blocks which fail the validation are still broadcast but a different status code is returned (202)'\n      requestBody:\n        description: The `SignedBeaconBlock` object composed of `BeaconBlock` object (produced by beacon node) and validator signature.\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              description: 'The [`SignedBeaconBlock`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#signedbeaconblock) object envelope from the Eth2.0 spec.'\n              properties:\n                message:\n                  description: 'The [`BeaconBlock`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblock) object from the Eth2.0 spec.'\n                  allOf:\n                    - type: object\n                      properties:\n                        slot:\n                          allOf:\n                            - type: string\n                              example: '1'\n                            - description: The slot to which this block corresponds.\n                        proposer_index:\n                          allOf:\n                            - type: string\n                              example: '1'\n                            - description: Index of validator in validator registry.\n                        parent_root:\n                          allOf:\n                            - type: string\n                              example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                              pattern: '^0x[a-fA-F0-9]{64}$'\n                            - description: The signing merkle root of the parent `BeaconBlock`.\n                        state_root:\n                          allOf:\n                            - type: string\n                              example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                              pattern: '^0x[a-fA-F0-9]{64}$'\n                            - description: The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.\n                    - type: object\n                      properties:\n                        body:\n                          type: object\n                          description: 'The [`BeaconBlockBody`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblockbody) object from the Eth2.0 spec.'\n                          properties:\n                            randao_reveal:\n                              allOf:\n                                - type: string\n                                  pattern: '^0x[a-fA-F0-9]{192}$'\n                                  example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n                                - description: The RanDAO reveal value provided by the validator.\n                            eth1_data:\n                              type: object\n                              description: 'The [`Eth1Data`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#eth1data) object from the Eth2.0 spec.'\n                              properties:\n                                deposit_root:\n                                  allOf:\n                                    - type: string\n                                      example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                      pattern: '^0x[a-fA-F0-9]{64}$'\n                                    - description: Root of the deposit tree.\n                                deposit_count:\n                                  allOf:\n                                    - type: string\n                                      example: '1'\n                                    - description: Total number of deposits.\n                                block_hash:\n                                  allOf:\n                                    - type: string\n                                      example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                      pattern: '^0x[a-fA-F0-9]{64}$'\n                                    - description: Ethereum 1.x block hash.\n                            graffiti:\n                              type: string\n                              pattern: '^0x[a-fA-F0-9]{64}$'\n                            proposer_slashings:\n                              type: array\n                              items:\n                                type: object\n                                description: 'The [`ProposerSlashing`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#proposerslashing) object from the Eth2.0 spec.'\n                                properties:\n                                  signed_header_1:\n                                    type: object\n                                    description: 'The [`SignedBeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the Eth2.0 spec.'\n                                    properties:\n                                      message:\n                                        description: 'The [`BeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblockheader) object from the Eth2.0 spec.'\n                                        allOf:\n                                          - type: object\n                                            properties:\n                                              slot:\n                                                allOf:\n                                                  - type: string\n                                                    example: '1'\n                                                  - description: The slot to which this block corresponds.\n                                              proposer_index:\n                                                allOf:\n                                                  - type: string\n                                                    example: '1'\n                                                  - description: Index of validator in validator registry.\n                                              parent_root:\n                                                allOf:\n                                                  - type: string\n                                                    example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                                    pattern: '^0x[a-fA-F0-9]{64}$'\n                                                  - description: The signing merkle root of the parent `BeaconBlock`.\n                                              state_root:\n                                                allOf:\n                                                  - type: string\n                                                    example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                                    pattern: '^0x[a-fA-F0-9]{64}$'\n                                                  - description: The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.\n                                          - type: object\n                                            properties:\n                                              body_root:\n                                                allOf:\n                                                  - type: string\n                                                    example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                                    pattern: '^0x[a-fA-F0-9]{64}$'\n                                                  - description: The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`\n                                      signature:\n                                        type: string\n                                        pattern: '^0x[a-fA-F0-9]{192}$'\n                                        example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n                                  signed_header_2:\n                                    type: object\n                                    description: 'The [`SignedBeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the Eth2.0 spec.'\n                                    properties:\n                                      message:\n                                        description: 'The [`BeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblockheader) object from the Eth2.0 spec.'\n                                        allOf:\n                                          - type: object\n                                            properties:\n                                              slot:\n                                                allOf:\n                                                  - type: string\n                                                    example: '1'\n                                                  - description: The slot to which this block corresponds.\n                                              proposer_index:\n                                                allOf:\n                                                  - type: string\n                                                    example: '1'\n                                                  - description: Index of validator in validator registry.\n                                              parent_root:\n                                                allOf:\n                                                  - type: string\n                                                    example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                                    pattern: '^0x[a-fA-F0-9]{64}$'\n                                                  - description: The signing merkle root of the parent `BeaconBlock`.\n                                              state_root:\n                                                allOf:\n                                                  - type: string\n                                                    example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                                    pattern: '^0x[a-fA-F0-9]{64}$'\n                                                  - description: The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.\n                                          - type: object\n                                            properties:\n                                              body_root:\n                                                allOf:\n                                                  - type: string\n                                                    example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                                    pattern: '^0x[a-fA-F0-9]{64}$'\n                                                  - description: The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`\n                                      signature:\n                                        type: string\n                                        pattern: '^0x[a-fA-F0-9]{192}$'\n                                        example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n                            attester_slashings:\n                              type: array\n                              items:\n                                type: object\n                                description: 'The [`AttesterSlashing`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/core/0_beacon-chain.md#attesterslashing) object from the Eth2.0 spec.'\n                                properties:\n                                  attestation_1:\n                                    type: object\n                                    description: 'The [`IndexedAttestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#indexedattestation) object from the Eth2.0 spec.'\n                                    properties:\n                                      attesting_indices:\n                                        type: array\n                                        maxItems: 2048\n                                        description: Attesting validator indices\n                                        items:\n                                          type: string\n                                          example: '1'\n                                      signature:\n                                        allOf:\n                                          - type: string\n                                            pattern: '^0x[a-fA-F0-9]{192}$'\n                                            example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n                                          - description: 'The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.'\n                                      data:\n                                        type: object\n                                        description: 'The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata) object from the Eth2.0 spec.'\n                                        properties:\n                                          slot:\n                                            type: string\n                                            example: '1'\n                                          index:\n                                            type: string\n                                            example: '1'\n                                          beacon_block_root:\n                                            allOf:\n                                              - type: string\n                                                example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                                pattern: '^0x[a-fA-F0-9]{64}$'\n                                              - description: LMD GHOST vote.\n                                          source:\n                                            type: object\n                                            description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                                            properties:\n                                              epoch:\n                                                type: string\n                                                example: '1'\n                                              root:\n                                                type: string\n                                                example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                                pattern: '^0x[a-fA-F0-9]{64}$'\n                                          target:\n                                            type: object\n                                            description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                                            properties:\n                                              epoch:\n                                                type: string\n                                                example: '1'\n                                              root:\n                                                type: string\n                                                example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                                pattern: '^0x[a-fA-F0-9]{64}$'\n                                  attestation_2:\n                                    type: object\n                                    description: 'The [`IndexedAttestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#indexedattestation) object from the Eth2.0 spec.'\n                                    properties:\n                                      attesting_indices:\n                                        type: array\n                                        maxItems: 2048\n                                        description: Attesting validator indices\n                                        items:\n                                          type: string\n                                          example: '1'\n                                      signature:\n                                        allOf:\n                                          - type: string\n                                            pattern: '^0x[a-fA-F0-9]{192}$'\n                                            example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n                                          - description: 'The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.'\n                                      data:\n                                        type: object\n                                        description: 'The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata) object from the Eth2.0 spec.'\n                                        properties:\n                                          slot:\n                                            type: string\n                                            example: '1'\n                                          index:\n                                            type: string\n                                            example: '1'\n                                          beacon_block_root:\n                                            allOf:\n                                              - type: string\n                                                example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                                pattern: '^0x[a-fA-F0-9]{64}$'\n                                              - description: LMD GHOST vote.\n                                          source:\n                                            type: object\n                                            description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                                            properties:\n                                              epoch:\n                                                type: string\n                                                example: '1'\n                                              root:\n                                                type: string\n                                                example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                                pattern: '^0x[a-fA-F0-9]{64}$'\n                                          target:\n                                            type: object\n                                            description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                                            properties:\n                                              epoch:\n                                                type: string\n                                                example: '1'\n                                              root:\n                                                type: string\n                                                example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                                pattern: '^0x[a-fA-F0-9]{64}$'\n                            attestations:\n                              type: array\n                              items:\n                                type: object\n                                description: 'The [`Attestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestation) object from the Eth2.0 spec.'\n                                properties:\n                                  aggregation_bits:\n                                    type: string\n                                    example: '0x01'\n                                    pattern: '^0x[a-fA-F0-9]+$'\n                                    description: Attester aggregation bits.\n                                  signature:\n                                    allOf:\n                                      - type: string\n                                        pattern: '^0x[a-fA-F0-9]{192}$'\n                                        example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n                                      - description: BLS aggregate signature.\n                                  data:\n                                    type: object\n                                    description: 'The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata) object from the Eth2.0 spec.'\n                                    properties:\n                                      slot:\n                                        type: string\n                                        example: '1'\n                                      index:\n                                        type: string\n                                        example: '1'\n                                      beacon_block_root:\n                                        allOf:\n                                          - type: string\n                                            example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                            pattern: '^0x[a-fA-F0-9]{64}$'\n                                          - description: LMD GHOST vote.\n                                      source:\n                                        type: object\n                                        description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                                        properties:\n                                          epoch:\n                                            type: string\n                                            example: '1'\n                                          root:\n                                            type: string\n                                            example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                            pattern: '^0x[a-fA-F0-9]{64}$'\n                                      target:\n                                        type: object\n                                        description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                                        properties:\n                                          epoch:\n                                            type: string\n                                            example: '1'\n                                          root:\n                                            type: string\n                                            example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                            pattern: '^0x[a-fA-F0-9]{64}$'\n                            deposits:\n                              type: array\n                              items:\n                                type: object\n                                description: 'The [`Deposit`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#deposit) object from the Eth2.0 spec.'\n                                properties:\n                                  proof:\n                                    type: array\n                                    description: Branch in the deposit tree.\n                                    items:\n                                      allOf:\n                                        - type: string\n                                          example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                          pattern: '^0x[a-fA-F0-9]{64}$'\n                                    minItems: 32\n                                    maxItems: 32\n                                  data:\n                                    type: object\n                                    description: 'The [`DepositData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#depositdata) object from the Eth2.0 spec.'\n                                    properties:\n                                      pubkey:\n                                        type: string\n                                        pattern: '^0x[a-fA-F0-9]{96}$'\n                                        description: 'The validator''s BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._'\n                                        example: '0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a'\n                                      withdrawal_credentials:\n                                        allOf:\n                                          - type: string\n                                            example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                            pattern: '^0x[a-fA-F0-9]{64}$'\n                                          - description: The withdrawal credentials.\n                                      amount:\n                                        allOf:\n                                          - type: string\n                                            example: '1'\n                                          - description: Amount in Gwei.\n                                      signature:\n                                        allOf:\n                                          - type: string\n                                            pattern: '^0x[a-fA-F0-9]{192}$'\n                                            example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n                                          - description: Container self-signature.\n                            voluntary_exits:\n                              type: array\n                              items:\n                                type: object\n                                description: 'The [`SignedVoluntaryExit`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#signedvoluntaryexit) object from the Eth2.0 spec.'\n                                properties:\n                                  message:\n                                    type: object\n                                    description: 'The [`VoluntaryExit`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#voluntaryexit) object from the Eth2.0 spec.'\n                                    properties:\n                                      epoch:\n                                        allOf:\n                                          - type: string\n                                            example: '1'\n                                          - description: Minimum epoch for processing exit.\n                                      validator_index:\n                                        allOf:\n                                          - type: string\n                                            example: '1'\n                                          - description: Index of the exiting validator.\n                                  signature:\n                                    type: string\n                                    pattern: '^0x[a-fA-F0-9]{192}$'\n                                    example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n                signature:\n                  type: string\n                  pattern: '^0x[a-fA-F0-9]{192}$'\n                  example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n      responses:\n        '200':\n          description: The block was validated successfully and has been broadcast. It has also been integrated into the beacon node's database.\n        '202':\n          description: 'The block failed validation, but was successfully broadcast anyway. It was not integrated into the beacon node''s database.'\n        '400':\n          description: The `SignedBeaconBlock` object is invalid\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - type: object\n                    properties:\n                      code:\n                        description: Either specific error code in case of invalid request or http status code\n                        type: number\n                        example: 404\n                      message:\n                        description: Message describing error\n                        type: string\n                      stacktraces:\n                        description: 'Optional stacktraces, sent when node is in debug mode'\n                        type: array\n                        items:\n                          type: string\n                  - example:\n                      code: 400\n                      message: 'Invalid block: missing signature'\n        '500':\n          description: Beacon node internal error.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    description: Either specific error code in case of invalid request or http status code\n                    type: number\n                    example: 404\n                  message:\n                    description: Message describing error\n                    type: string\n                  stacktraces:\n                    description: 'Optional stacktraces, sent when node is in debug mode'\n                    type: array\n                    items:\n                      type: string\n              example:\n                code: 500\n                message: Internal server error\n        '503':\n          description: 'Beacon node is currently syncing, try again later.'\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    description: Either specific error code in case of invalid request or http status code\n                    type: number\n                    example: 404\n                  message:\n                    description: Message describing error\n                    type: string\n                  stacktraces:\n                    description: 'Optional stacktraces, sent when node is in debug mode'\n                    type: array\n                    items:\n                      type: string\n              example:\n                code: 503\n                message: Beacon node is currently syncing and not serving request on that endpoint\n  '/eth/v1/beacon/blocks/{block_id}':\n    get:\n      operationId: getBlock\n      summary: Get block\n      description: Retrieves block details for given block id.\n      tags:\n        - Beacon\n      parameters:\n        - name: block_id\n          in: path\n          required: true\n          example: head\n          schema:\n            type: string\n          description: |\n            Block identifier.\n            Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \\\u003cslot\\\u003e, \\\u003chex encoded blockRoot with 0x prefix\\\u003e.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                title: GetBlockResponse\n                type: object\n                properties:\n                  data:\n                    type: object\n                    description: 'The [`SignedBeaconBlock`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#signedbeaconblock) object envelope from the Eth2.0 spec.'\n                    properties:\n                      message:\n                        description: 'The [`BeaconBlock`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblock) object from the Eth2.0 spec.'\n                        allOf:\n                          - type: object\n                            properties:\n                              slot:\n                                allOf:\n                                  - type: string\n                                    example: '1'\n                                  - description: The slot to which this block corresponds.\n                              proposer_index:\n                                allOf:\n                                  - type: string\n                                    example: '1'\n                                  - description: Index of validator in validator registry.\n                              parent_root:\n                                allOf:\n                                  - type: string\n                                    example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                    pattern: '^0x[a-fA-F0-9]{64}$'\n                                  - description: The signing merkle root of the parent `BeaconBlock`.\n                              state_root:\n                                allOf:\n                                  - type: string\n                                    example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                    pattern: '^0x[a-fA-F0-9]{64}$'\n                                  - description: The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.\n                          - type: object\n                            properties:\n                              body:\n                                type: object\n                                description: 'The [`BeaconBlockBody`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblockbody) object from the Eth2.0 spec.'\n                                properties:\n                                  randao_reveal:\n                                    allOf:\n                                      - type: string\n                                        pattern: '^0x[a-fA-F0-9]{192}$'\n                                        example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n                                      - description: The RanDAO reveal value provided by the validator.\n                                  eth1_data:\n                                    type: object\n                                    description: 'The [`Eth1Data`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#eth1data) object from the Eth2.0 spec.'\n                                    properties:\n                                      deposit_root:\n                                        allOf:\n                                          - type: string\n                                            example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                            pattern: '^0x[a-fA-F0-9]{64}$'\n                                          - description: Root of the deposit tree.\n                                      deposit_count:\n                                        allOf:\n                                          - type: string\n                                            example: '1'\n                                          - description: Total number of deposits.\n                                      block_hash:\n                                        allOf:\n                                          - type: string\n                                            example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                            pattern: '^0x[a-fA-F0-9]{64}$'\n                                          - description: Ethereum 1.x block hash.\n                                  graffiti:\n                                    type: string\n                                    pattern: '^0x[a-fA-F0-9]{64}$'\n                                  proposer_slashings:\n                                    type: array\n                                    items:\n                                      type: object\n                                      description: 'The [`ProposerSlashing`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#proposerslashing) object from the Eth2.0 spec.'\n                                      properties:\n                                        signed_header_1:\n                                          type: object\n                                          description: 'The [`SignedBeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the Eth2.0 spec.'\n                                          properties:\n                                            message:\n                                              description: 'The [`BeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblockheader) object from the Eth2.0 spec.'\n                                              allOf:\n                                                - type: object\n                                                  properties:\n                                                    slot:\n                                                      allOf:\n                                                        - type: string\n                                                          example: '1'\n                                                        - description: The slot to which this block corresponds.\n                                                    proposer_index:\n                                                      allOf:\n                                                        - type: string\n                                                          example: '1'\n                                                        - description: Index of validator in validator registry.\n                                                    parent_root:\n                                                      allOf:\n                                                        - type: string\n                                                          example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                                          pattern: '^0x[a-fA-F0-9]{64}$'\n                                                        - description: The signing merkle root of the parent `BeaconBlock`.\n                                                    state_root:\n                                                      allOf:\n                                                        - type: string\n                                                          example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                                          pattern: '^0x[a-fA-F0-9]{64}$'\n                                                        - description: The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.\n                                                - type: object\n                                                  properties:\n                                                    body_root:\n                                                      allOf:\n                                                        - type: string\n                                                          example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                                          pattern: '^0x[a-fA-F0-9]{64}$'\n                                                        - description: The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`\n                                            signature:\n                                              type: string\n                                              pattern: '^0x[a-fA-F0-9]{192}$'\n                                              example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n                                        signed_header_2:\n                                          type: object\n                                          description: 'The [`SignedBeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the Eth2.0 spec.'\n                                          properties:\n                                            message:\n                                              description: 'The [`BeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblockheader) object from the Eth2.0 spec.'\n                                              allOf:\n                                                - type: object\n                                                  properties:\n                                                    slot:\n                                                      allOf:\n                                                        - type: string\n                                                          example: '1'\n                                                        - description: The slot to which this block corresponds.\n                                                    proposer_index:\n                                                      allOf:\n                                                        - type: string\n                                                          example: '1'\n                                                        - description: Index of validator in validator registry.\n                                                    parent_root:\n                                                      allOf:\n                                                        - type: string\n                                                          example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                                          pattern: '^0x[a-fA-F0-9]{64}$'\n                                                        - description: The signing merkle root of the parent `BeaconBlock`.\n                                                    state_root:\n                                                      allOf:\n                                                        - type: string\n                                                          example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                                          pattern: '^0x[a-fA-F0-9]{64}$'\n                                                        - description: The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.\n                                                - type: object\n                                                  properties:\n                                                    body_root:\n                                                      allOf:\n                                                        - type: string\n                                                          example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                                          pattern: '^0x[a-fA-F0-9]{64}$'\n                                                        - description: The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`\n                                            signature:\n                                              type: string\n                                              pattern: '^0x[a-fA-F0-9]{192}$'\n                                              example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n                                  attester_slashings:\n                                    type: array\n                                    items:\n                                      type: object\n                                      description: 'The [`AttesterSlashing`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/core/0_beacon-chain.md#attesterslashing) object from the Eth2.0 spec.'\n                                      properties:\n                                        attestation_1:\n                                          type: object\n                                          description: 'The [`IndexedAttestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#indexedattestation) object from the Eth2.0 spec.'\n                                          properties:\n                                            attesting_indices:\n                                              type: array\n                                              maxItems: 2048\n                                              description: Attesting validator indices\n                                              items:\n                                                type: string\n                                                example: '1'\n                                            signature:\n                                              allOf:\n                                                - type: string\n                                                  pattern: '^0x[a-fA-F0-9]{192}$'\n                                                  example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n                                                - description: 'The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.'\n                                            data:\n                                              type: object\n                                              description: 'The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata) object from the Eth2.0 spec.'\n                                              properties:\n                                                slot:\n                                                  type: string\n                                                  example: '1'\n                                                index:\n                                                  type: string\n                                                  example: '1'\n                                                beacon_block_root:\n                                                  allOf:\n                                                    - type: string\n                                                      example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                                      pattern: '^0x[a-fA-F0-9]{64}$'\n                                                    - description: LMD GHOST vote.\n                                                source:\n                                                  type: object\n                                                  description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                                                  properties:\n                                                    epoch:\n                                                      type: string\n                                                      example: '1'\n                                                    root:\n                                                      type: string\n                                                      example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                                      pattern: '^0x[a-fA-F0-9]{64}$'\n                                                target:\n                                                  type: object\n                                                  description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                                                  properties:\n                                                    epoch:\n                                                      type: string\n                                                      example: '1'\n                                                    root:\n                                                      type: string\n                                                      example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                                      pattern: '^0x[a-fA-F0-9]{64}$'\n                                        attestation_2:\n                                          type: object\n                                          description: 'The [`IndexedAttestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#indexedattestation) object from the Eth2.0 spec.'\n                                          properties:\n                                            attesting_indices:\n                                              type: array\n                                              maxItems: 2048\n                                              description: Attesting validator indices\n                                              items:\n                                                type: string\n                                                example: '1'\n                                            signature:\n                                              allOf:\n                                                - type: string\n                                                  pattern: '^0x[a-fA-F0-9]{192}$'\n                                                  example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n                                                - description: 'The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.'\n                                            data:\n                                              type: object\n                                              description: 'The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata) object from the Eth2.0 spec.'\n                                              properties:\n                                                slot:\n                                                  type: string\n                                                  example: '1'\n                                                index:\n                                                  type: string\n                                                  example: '1'\n                                                beacon_block_root:\n                                                  allOf:\n                                                    - type: string\n                                                      example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                                      pattern: '^0x[a-fA-F0-9]{64}$'\n                                                    - description: LMD GHOST vote.\n                                                source:\n                                                  type: object\n                                                  description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                                                  properties:\n                                                    epoch:\n                                                      type: string\n                                                      example: '1'\n                                                    root:\n                                                      type: string\n                                                      example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                                      pattern: '^0x[a-fA-F0-9]{64}$'\n                                                target:\n                                                  type: object\n                                                  description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                                                  properties:\n                                                    epoch:\n                                                      type: string\n                                                      example: '1'\n                                                    root:\n                                                      type: string\n                                                      example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                                      pattern: '^0x[a-fA-F0-9]{64}$'\n                                  attestations:\n                                    type: array\n                                    items:\n                                      type: object\n                                      description: 'The [`Attestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestation) object from the Eth2.0 spec.'\n                                      properties:\n                                        aggregation_bits:\n                                          type: string\n                                          example: '0x01'\n                                          pattern: '^0x[a-fA-F0-9]+$'\n                                          description: Attester aggregation bits.\n                                        signature:\n                                          allOf:\n                                            - type: string\n                                              pattern: '^0x[a-fA-F0-9]{192}$'\n                                              example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n                                            - description: BLS aggregate signature.\n                                        data:\n                                          type: object\n                                          description: 'The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata) object from the Eth2.0 spec.'\n                                          properties:\n                                            slot:\n                                              type: string\n                                              example: '1'\n                                            index:\n                                              type: string\n                                              example: '1'\n                                            beacon_block_root:\n                                              allOf:\n                                                - type: string\n                                                  example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                                  pattern: '^0x[a-fA-F0-9]{64}$'\n                                                - description: LMD GHOST vote.\n                                            source:\n                                              type: object\n                                              description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                                              properties:\n                                                epoch:\n                                                  type: string\n                                                  example: '1'\n                                                root:\n                                                  type: string\n                                                  example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                                  pattern: '^0x[a-fA-F0-9]{64}$'\n                                            target:\n                                              type: object\n                                              description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                                              properties:\n                                                epoch:\n                                                  type: string\n                                                  example: '1'\n                                                root:\n                                                  type: string\n                                                  example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                                  pattern: '^0x[a-fA-F0-9]{64}$'\n                                  deposits:\n                                    type: array\n                                    items:\n                                      type: object\n                                      description: 'The [`Deposit`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#deposit) object from the Eth2.0 spec.'\n                                      properties:\n                                        proof:\n                                          type: array\n                                          description: Branch in the deposit tree.\n                                          items:\n                                            allOf:\n                                              - type: string\n                                                example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                                pattern: '^0x[a-fA-F0-9]{64}$'\n                                          minItems: 32\n                                          maxItems: 32\n                                        data:\n                                          type: object\n                                          description: 'The [`DepositData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#depositdata) object from the Eth2.0 spec.'\n                                          properties:\n                                            pubkey:\n                                              type: string\n                                              pattern: '^0x[a-fA-F0-9]{96}$'\n                                              description: 'The validator''s BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._'\n                                              example: '0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a'\n                                            withdrawal_credentials:\n                                              allOf:\n                                                - type: string\n                                                  example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                                  pattern: '^0x[a-fA-F0-9]{64}$'\n                                                - description: The withdrawal credentials.\n                                            amount:\n                                              allOf:\n                                                - type: string\n                                                  example: '1'\n                                                - description: Amount in Gwei.\n                                            signature:\n                                              allOf:\n                                                - type: string\n                                                  pattern: '^0x[a-fA-F0-9]{192}$'\n                                                  example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n                                                - description: Container self-signature.\n                                  voluntary_exits:\n                                    type: array\n                                    items:\n                                      type: object\n                                      description: 'The [`SignedVoluntaryExit`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#signedvoluntaryexit) object from the Eth2.0 spec.'\n                                      properties:\n                                        message:\n                                          type: object\n                                          description: 'The [`VoluntaryExit`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#voluntaryexit) object from the Eth2.0 spec.'\n                                          properties:\n                                            epoch:\n                                              allOf:\n                                                - type: string\n                                                  example: '1'\n                                                - description: Minimum epoch for processing exit.\n                                            validator_index:\n                                              allOf:\n                                                - type: string\n                                                  example: '1'\n                                                - description: Index of the exiting validator.\n                                        signature:\n                                          type: string\n                                          pattern: '^0x[a-fA-F0-9]{192}$'\n                                          example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n                      signature:\n                        type: string\n                        pattern: '^0x[a-fA-F0-9]{192}$'\n                        example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n        '400':\n          description: The block ID supplied could not be parsed\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - type: object\n                    properties:\n                      code:\n                        description: Either specific error code in case of invalid request or http status code\n                        type: number\n                        example: 404\n                      message:\n                        description: Message describing error\n                        type: string\n                      stacktraces:\n                        description: 'Optional stacktraces, sent when node is in debug mode'\n                        type: array\n                        items:\n                          type: string\n                  - example:\n                      code: 400\n                      message: 'Invalid block ID: current'\n        '404':\n          description: Block not found\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - type: object\n                    properties:\n                      code:\n                        description: Either specific error code in case of invalid request or http status code\n                        type: number\n                        example: 404\n                      message:\n                        description: Message describing error\n                        type: string\n                      stacktraces:\n                        description: 'Optional stacktraces, sent when node is in debug mode'\n                        type: array\n                        items:\n                          type: string\n                  - example:\n                      code: 404\n                      message: Block not found\n        '500':\n          description: Beacon node internal error.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    description: Either specific error code in case of invalid request or http status code\n                    type: number\n                    example: 404\n                  message:\n                    description: Message describing error\n                    type: string\n                  stacktraces:\n                    description: 'Optional stacktraces, sent when node is in debug mode'\n                    type: array\n                    items:\n                      type: string\n              example:\n                code: 500\n                message: Internal server error\n  '/eth/v1/beacon/blocks/{block_id}/root':\n    get:\n      operationId: getBlockRoot\n      summary: Get block root\n      description: Retrieves hashTreeRoot of BeaconBlock/BeaconBlockHeader\n      tags:\n        - Beacon\n      parameters:\n        - name: block_id\n          in: path\n          required: true\n          example: head\n          schema:\n            type: string\n          description: |\n            Block identifier.\n            Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \\\u003cslot\\\u003e, \\\u003chex encoded blockRoot with 0x prefix\\\u003e.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                title: GetBlockRootResponse\n                properties:\n                  data:\n                    type: object\n                    properties:\n                      root:\n                        allOf:\n                          - description: HashTreeRoot of BeaconBlock/BeaconBlockHeader object\n                          - type: string\n                            example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                            pattern: '^0x[a-fA-F0-9]{64}$'\n        '400':\n          description: The block ID supplied could not be parsed\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - type: object\n                    properties:\n                      code:\n                        description: Either specific error code in case of invalid request or http status code\n                        type: number\n                        example: 404\n                      message:\n                        description: Message describing error\n                        type: string\n                      stacktraces:\n                        description: 'Optional stacktraces, sent when node is in debug mode'\n                        type: array\n                        items:\n                          type: string\n                  - example:\n                      code: 400\n                      message: 'Invalid block ID: current'\n        '404':\n          description: Block not found\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - type: object\n                    properties:\n                      code:\n                        description: Either specific error code in case of invalid request or http status code\n                        type: number\n                        example: 404\n                      message:\n                        description: Message describing error\n                        type: string\n                      stacktraces:\n                        description: 'Optional stacktraces, sent when node is in debug mode'\n                        type: array\n                        items:\n                          type: string\n                  - example:\n                      code: 404\n                      message: Block not found\n        '500':\n          description: Beacon node internal error.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    description: Either specific error code in case of invalid request or http status code\n                    type: number\n                    example: 404\n                  message:\n                    description: Message describing error\n                    type: string\n                  stacktraces:\n                    description: 'Optional stacktraces, sent when node is in debug mode'\n                    type: array\n                    items:\n                      type: string\n              example:\n                code: 500\n                message: Internal server error\n  '/eth/v1/beacon/blocks/{block_id}/attestations':\n    get:\n      operationId: getBlockAttestations\n      summary: Get block attestations\n      description: Retrieves attestation included in requested block.\n      tags:\n        - Beacon\n      parameters:\n        - name: block_id\n          in: path\n          required: true\n          example: head\n          schema:\n            type: string\n          description: |\n            Block identifier.\n            Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \\\u003cslot\\\u003e, \\\u003chex encoded blockRoot with 0x prefix\\\u003e.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                title: GetBlockAttestationsResponse\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      type: object\n                      description: 'The [`Attestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestation) object from the Eth2.0 spec.'\n                      properties:\n                        aggregation_bits:\n                          type: string\n                          example: '0x01'\n                          pattern: '^0x[a-fA-F0-9]+$'\n                          description: Attester aggregation bits.\n                        signature:\n                          allOf:\n                            - type: string\n                              pattern: '^0x[a-fA-F0-9]{192}$'\n                              example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n                            - description: BLS aggregate signature.\n                        data:\n                          type: object\n                          description: 'The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata) object from the Eth2.0 spec.'\n                          properties:\n                            slot:\n                              type: string\n                              example: '1'\n                            index:\n                              type: string\n                              example: '1'\n                            beacon_block_root:\n                              allOf:\n                                - type: string\n                                  example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                  pattern: '^0x[a-fA-F0-9]{64}$'\n                                - description: LMD GHOST vote.\n                            source:\n                              type: object\n                              description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                              properties:\n                                epoch:\n                                  type: string\n                                  example: '1'\n                                root:\n                                  type: string\n                                  example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                  pattern: '^0x[a-fA-F0-9]{64}$'\n                            target:\n                              type: object\n                              description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                              properties:\n                                epoch:\n                                  type: string\n                                  example: '1'\n                                root:\n                                  type: string\n                                  example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                  pattern: '^0x[a-fA-F0-9]{64}$'\n        '400':\n          description: The block ID supplied could not be parsed\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - type: object\n                    properties:\n                      code:\n                        description: Either specific error code in case of invalid request or http status code\n                        type: number\n                        example: 404\n                      message:\n                        description: Message describing error\n                        type: string\n                      stacktraces:\n                        description: 'Optional stacktraces, sent when node is in debug mode'\n                        type: array\n                        items:\n                          type: string\n                  - example:\n                      code: 400\n                      message: 'Invalid block ID: current'\n        '404':\n          description: Block not found\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - type: object\n                    properties:\n                      code:\n                        description: Either specific error code in case of invalid request or http status code\n                        type: number\n                        example: 404\n                      message:\n                        description: Message describing error\n                        type: string\n                      stacktraces:\n                        description: 'Optional stacktraces, sent when node is in debug mode'\n                        type: array\n                        items:\n                          type: string\n                  - example:\n                      code: 404\n                      message: Block not found\n        '500':\n          description: Beacon node internal error.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    description: Either specific error code in case of invalid request or http status code\n                    type: number\n                    example: 404\n                  message:\n                    description: Message describing error\n                    type: string\n                  stacktraces:\n                    description: 'Optional stacktraces, sent when node is in debug mode'\n                    type: array\n                    items:\n                      type: string\n              example:\n                code: 500\n                message: Internal server error\n  /eth/v1/beacon/pool/attestations:\n    get:\n      operationId: getPoolAttestations\n      summary: Get Attestations from operations pool\n      description: Retrieves attestations known by the node but not necessarily incorporated into any block\n      parameters:\n        - name: slot\n          in: query\n          required: false\n          schema:\n            type: string\n            example: '1'\n        - name: committee_index\n          in: query\n          required: false\n          schema:\n            type: string\n            example: '1'\n      tags:\n        - Beacon\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                title: GetPoolAttestationsResponse\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      type: object\n                      description: 'The [`Attestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestation) object from the Eth2.0 spec.'\n                      properties:\n                        aggregation_bits:\n                          type: string\n                          example: '0x01'\n                          pattern: '^0x[a-fA-F0-9]+$'\n                          description: Attester aggregation bits.\n                        signature:\n                          allOf:\n                            - type: string\n                              pattern: '^0x[a-fA-F0-9]{192}$'\n                              example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n                            - description: BLS aggregate signature.\n                        data:\n                          type: object\n                          description: 'The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata) object from the Eth2.0 spec.'\n                          properties:\n                            slot:\n                              type: string\n                              example: '1'\n                            index:\n                              type: string\n                              example: '1'\n                            beacon_block_root:\n                              allOf:\n                                - type: string\n                                  example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                  pattern: '^0x[a-fA-F0-9]{64}$'\n                                - description: LMD GHOST vote.\n                            source:\n                              type: object\n                              description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                              properties:\n                                epoch:\n                                  type: string\n                                  example: '1'\n                                root:\n                                  type: string\n                                  example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                  pattern: '^0x[a-fA-F0-9]{64}$'\n                            target:\n                              type: object\n                              description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                              properties:\n                                epoch:\n                                  type: string\n                                  example: '1'\n                                root:\n                                  type: string\n                                  example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                  pattern: '^0x[a-fA-F0-9]{64}$'\n        '400':\n          description: The slot or committee index could not be parsed\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - type: object\n                    properties:\n                      code:\n                        description: Either specific error code in case of invalid request or http status code\n                        type: number\n                        example: 404\n                      message:\n                        description: Message describing error\n                        type: string\n                      stacktraces:\n                        description: 'Optional stacktraces, sent when node is in debug mode'\n                        type: array\n                        items:\n                          type: string\n                  - example:\n                      code: 400\n                      message: 'Invalid slot: current'\n        '500':\n          description: Beacon node internal error.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    description: Either specific error code in case of invalid request or http status code\n                    type: number\n                    example: 404\n                  message:\n                    description: Message describing error\n                    type: string\n                  stacktraces:\n                    description: 'Optional stacktraces, sent when node is in debug mode'\n                    type: array\n                    items:\n                      type: string\n              example:\n                code: 500\n                message: Internal server error\n    post:\n      operationId: submitPoolAttestations\n      summary: Submit Attestation object to node\n      description: 'Submits Attestation object to node. If attestation passes all validation constraints, node MUST publish attestation on appropriate subnet.'\n      tags:\n        - Beacon\n        - ValidatorRequiredApi\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              description: 'The [`Attestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestation) object from the Eth2.0 spec.'\n              properties:\n                aggregation_bits:\n                  type: string\n                  example: '0x01'\n                  pattern: '^0x[a-fA-F0-9]+$'\n                  description: Attester aggregation bits.\n                signature:\n                  allOf:\n                    - type: string\n                      pattern: '^0x[a-fA-F0-9]{192}$'\n                      example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n                    - description: BLS aggregate signature.\n                data:\n                  type: object\n                  description: 'The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata) object from the Eth2.0 spec.'\n                  properties:\n                    slot:\n                      type: string\n                      example: '1'\n                    index:\n                      type: string\n                      example: '1'\n                    beacon_block_root:\n                      allOf:\n                        - type: string\n                          example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                          pattern: '^0x[a-fA-F0-9]{64}$'\n                        - description: LMD GHOST vote.\n                    source:\n                      type: object\n                      description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                      properties:\n                        epoch:\n                          type: string\n                          example: '1'\n                        root:\n                          type: string\n                          example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                          pattern: '^0x[a-fA-F0-9]{64}$'\n                    target:\n                      type: object\n                      description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                      properties:\n                        epoch:\n                          type: string\n                          example: '1'\n                        root:\n                          type: string\n                          example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                          pattern: '^0x[a-fA-F0-9]{64}$'\n      responses:\n        '200':\n          description: Attestation is stored in pool and broadcast on appropriate subnet\n        '400':\n          description: Invalid attestation\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - type: object\n                    properties:\n                      code:\n                        description: Either specific error code in case of invalid request or http status code\n                        type: number\n                        example: 404\n                      message:\n                        description: Message describing error\n                        type: string\n                      stacktraces:\n                        description: 'Optional stacktraces, sent when node is in debug mode'\n                        type: array\n                        items:\n                          type: string\n                  - example:\n                      code: 400\n                      message: 'Invalid attestation, it will never pass validation so it''s rejected'\n        '500':\n          description: Beacon node internal error.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    description: Either specific error code in case of invalid request or http status code\n                    type: number\n                    example: 404\n                  message:\n                    description: Message describing error\n                    type: string\n                  stacktraces:\n                    description: 'Optional stacktraces, sent when node is in debug mode'\n                    type: array\n                    items:\n                      type: string\n              example:\n                code: 500\n                message: Internal server error\n  /eth/v1/beacon/pool/attester_slashings:\n    get:\n      operationId: getPoolAttesterSlashings\n      summary: Get AttesterSlashings from operations pool\n      description: Retrieves attester slashings known by the node but not necessarily incorporated into any block\n      tags:\n        - Beacon\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                title: GetPoolAttesterSlashingsResponse\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      type: object\n                      description: 'The [`AttesterSlashing`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/core/0_beacon-chain.md#attesterslashing) object from the Eth2.0 spec.'\n                      properties:\n                        attestation_1:\n                          type: object\n                          description: 'The [`IndexedAttestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#indexedattestation) object from the Eth2.0 spec.'\n                          properties:\n                            attesting_indices:\n                              type: array\n                              maxItems: 2048\n                              description: Attesting validator indices\n                              items:\n                                type: string\n                                example: '1'\n                            signature:\n                              allOf:\n                                - type: string\n                                  pattern: '^0x[a-fA-F0-9]{192}$'\n                                  example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n                                - description: 'The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.'\n                            data:\n                              type: object\n                              description: 'The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata) object from the Eth2.0 spec.'\n                              properties:\n                                slot:\n                                  type: string\n                                  example: '1'\n                                index:\n                                  type: string\n                                  example: '1'\n                                beacon_block_root:\n                                  allOf:\n                                    - type: string\n                                      example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                      pattern: '^0x[a-fA-F0-9]{64}$'\n                                    - description: LMD GHOST vote.\n                                source:\n                                  type: object\n                                  description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                                  properties:\n                                    epoch:\n                                      type: string\n                                      example: '1'\n                                    root:\n                                      type: string\n                                      example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                      pattern: '^0x[a-fA-F0-9]{64}$'\n                                target:\n                                  type: object\n                                  description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                                  properties:\n                                    epoch:\n                                      type: string\n                                      example: '1'\n                                    root:\n                                      type: string\n                                      example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                      pattern: '^0x[a-fA-F0-9]{64}$'\n                        attestation_2:\n                          type: object\n                          description: 'The [`IndexedAttestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#indexedattestation) object from the Eth2.0 spec.'\n                          properties:\n                            attesting_indices:\n                              type: array\n                              maxItems: 2048\n                              description: Attesting validator indices\n                              items:\n                                type: string\n                                example: '1'\n                            signature:\n                              allOf:\n                                - type: string\n                                  pattern: '^0x[a-fA-F0-9]{192}$'\n                                  example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n                                - description: 'The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.'\n                            data:\n                              type: object\n                              description: 'The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata) object from the Eth2.0 spec.'\n                              properties:\n                                slot:\n                                  type: string\n                                  example: '1'\n                                index:\n                                  type: string\n                                  example: '1'\n                                beacon_block_root:\n                                  allOf:\n                                    - type: string\n                                      example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                      pattern: '^0x[a-fA-F0-9]{64}$'\n                                    - description: LMD GHOST vote.\n                                source:\n                                  type: object\n                                  description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                                  properties:\n                                    epoch:\n                                      type: string\n                                      example: '1'\n                                    root:\n                                      type: string\n                                      example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                      pattern: '^0x[a-fA-F0-9]{64}$'\n                                target:\n                                  type: object\n                                  description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                                  properties:\n                                    epoch:\n                                      type: string\n                                      example: '1'\n                                    root:\n                                      type: string\n                                      example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                      pattern: '^0x[a-fA-F0-9]{64}$'\n        '500':\n          description: Beacon node internal error.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    description: Either specific error code in case of invalid request or http status code\n                    type: number\n                    example: 404\n                  message:\n                    description: Message describing error\n                    type: string\n                  stacktraces:\n                    description: 'Optional stacktraces, sent when node is in debug mode'\n                    type: array\n                    items:\n                      type: string\n              example:\n                code: 500\n                message: Internal server error\n    post:\n      operationId: submitPoolAttesterSlashings\n      summary: Submit AttesterSlashing object to node's pool\n      description: Submits AttesterSlashing object to node's pool and if passes validation node MUST broadcast it to network.\n      tags:\n        - Beacon\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              description: 'The [`AttesterSlashing`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/core/0_beacon-chain.md#attesterslashing) object from the Eth2.0 spec.'\n              properties:\n                attestation_1:\n                  type: object\n                  description: 'The [`IndexedAttestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#indexedattestation) object from the Eth2.0 spec.'\n                  properties:\n                    attesting_indices:\n                      type: array\n                      maxItems: 2048\n                      description: Attesting validator indices\n                      items:\n                        type: string\n                        example: '1'\n                    signature:\n                      allOf:\n                        - type: string\n                          pattern: '^0x[a-fA-F0-9]{192}$'\n                          example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n                        - description: 'The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.'\n                    data:\n                      type: object\n                      description: 'The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata) object from the Eth2.0 spec.'\n                      properties:\n                        slot:\n                          type: string\n                          example: '1'\n                        index:\n                          type: string\n                          example: '1'\n                        beacon_block_root:\n                          allOf:\n                            - type: string\n                              example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                              pattern: '^0x[a-fA-F0-9]{64}$'\n                            - description: LMD GHOST vote.\n                        source:\n                          type: object\n                          description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                          properties:\n                            epoch:\n                              type: string\n                              example: '1'\n                            root:\n                              type: string\n                              example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                              pattern: '^0x[a-fA-F0-9]{64}$'\n                        target:\n                          type: object\n                          description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                          properties:\n                            epoch:\n                              type: string\n                              example: '1'\n                            root:\n                              type: string\n                              example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                              pattern: '^0x[a-fA-F0-9]{64}$'\n                attestation_2:\n                  type: object\n                  description: 'The [`IndexedAttestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#indexedattestation) object from the Eth2.0 spec.'\n                  properties:\n                    attesting_indices:\n                      type: array\n                      maxItems: 2048\n                      description: Attesting validator indices\n                      items:\n                        type: string\n                        example: '1'\n                    signature:\n                      allOf:\n                        - type: string\n                          pattern: '^0x[a-fA-F0-9]{192}$'\n                          example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n                        - description: 'The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.'\n                    data:\n                      type: object\n                      description: 'The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata) object from the Eth2.0 spec.'\n                      properties:\n                        slot:\n                          type: string\n                          example: '1'\n                        index:\n                          type: string\n                          example: '1'\n                        beacon_block_root:\n                          allOf:\n                            - type: string\n                              example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                              pattern: '^0x[a-fA-F0-9]{64}$'\n                            - description: LMD GHOST vote.\n                        source:\n                          type: object\n                          description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                          properties:\n                            epoch:\n                              type: string\n                              example: '1'\n                            root:\n                              type: string\n                              example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                              pattern: '^0x[a-fA-F0-9]{64}$'\n                        target:\n                          type: object\n                          description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                          properties:\n                            epoch:\n                              type: string\n                              example: '1'\n                            root:\n                              type: string\n                              example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                              pattern: '^0x[a-fA-F0-9]{64}$'\n      responses:\n        '200':\n          description: Success\n        '400':\n          description: Invalid attester slashing\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - type: object\n                    properties:\n                      code:\n                        description: Either specific error code in case of invalid request or http status code\n                        type: number\n                        example: 404\n                      message:\n                        description: Message describing error\n                        type: string\n                      stacktraces:\n                        description: 'Optional stacktraces, sent when node is in debug mode'\n                        type: array\n                        items:\n                          type: string\n                  - example:\n                      code: 400\n                      message: 'Invalid attester slashing, it will never pass validation so it''s rejected'\n        '500':\n          description: Beacon node internal error.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    description: Either specific error code in case of invalid request or http status code\n                    type: number\n                    example: 404\n                  message:\n                    description: Message describing error\n                    type: string\n                  stacktraces:\n                    description: 'Optional stacktraces, sent when node is in debug mode'\n                    type: array\n                    items:\n                      type: string\n              example:\n                code: 500\n                message: Internal server error\n  /eth/v1/beacon/pool/proposer_slashings:\n    get:\n      operationId: getPoolProposerSlashings\n      summary: Get ProposerSlashings from operations pool\n      description: Retrieves proposer slashings known by the node but not necessarily incorporated into any block\n      tags:\n        - Beacon\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                title: GetPoolProposerSlashingsResponse\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      type: object\n                      description: 'The [`ProposerSlashing`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#proposerslashing) object from the Eth2.0 spec.'\n                      properties:\n                        signed_header_1:\n                          type: object\n                          description: 'The [`SignedBeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the Eth2.0 spec.'\n                          properties:\n                            message:\n                              description: 'The [`BeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblockheader) object from the Eth2.0 spec.'\n                              allOf:\n                                - type: object\n                                  properties:\n                                    slot:\n                                      allOf:\n                                        - type: string\n                                          example: '1'\n                                        - description: The slot to which this block corresponds.\n                                    proposer_index:\n                                      allOf:\n                                        - type: string\n                                          example: '1'\n                                        - description: Index of validator in validator registry.\n                                    parent_root:\n                                      allOf:\n                                        - type: string\n                                          example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                          pattern: '^0x[a-fA-F0-9]{64}$'\n                                        - description: The signing merkle root of the parent `BeaconBlock`.\n                                    state_root:\n                                      allOf:\n                                        - type: string\n                                          example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                          pattern: '^0x[a-fA-F0-9]{64}$'\n                                        - description: The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.\n                                - type: object\n                                  properties:\n                                    body_root:\n                                      allOf:\n                                        - type: string\n                                          example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                          pattern: '^0x[a-fA-F0-9]{64}$'\n                                        - description: The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`\n                            signature:\n                              type: string\n                              pattern: '^0x[a-fA-F0-9]{192}$'\n                              example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n                        signed_header_2:\n                          type: object\n                          description: 'The [`SignedBeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the Eth2.0 spec.'\n                          properties:\n                            message:\n                              description: 'The [`BeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblockheader) object from the Eth2.0 spec.'\n                              allOf:\n                                - type: object\n                                  properties:\n                                    slot:\n                                      allOf:\n                                        - type: string\n                                          example: '1'\n                                        - description: The slot to which this block corresponds.\n                                    proposer_index:\n                                      allOf:\n                                        - type: string\n                                          example: '1'\n                                        - description: Index of validator in validator registry.\n                                    parent_root:\n                                      allOf:\n                                        - type: string\n                                          example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                          pattern: '^0x[a-fA-F0-9]{64}$'\n                                        - description: The signing merkle root of the parent `BeaconBlock`.\n                                    state_root:\n                                      allOf:\n                                        - type: string\n                                          example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                          pattern: '^0x[a-fA-F0-9]{64}$'\n                                        - description: The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.\n                                - type: object\n                                  properties:\n                                    body_root:\n                                      allOf:\n                                        - type: string\n                                          example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                          pattern: '^0x[a-fA-F0-9]{64}$'\n                                        - description: The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`\n                            signature:\n                              type: string\n                              pattern: '^0x[a-fA-F0-9]{192}$'\n                              example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n        '500':\n          description: Beacon node internal error.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    description: Either specific error code in case of invalid request or http status code\n                    type: number\n                    example: 404\n                  message:\n                    description: Message describing error\n                    type: string\n                  stacktraces:\n                    description: 'Optional stacktraces, sent when node is in debug mode'\n                    type: array\n                    items:\n                      type: string\n              example:\n                code: 500\n                message: Internal server error\n    post:\n      operationId: submitPoolProposerSlashings\n      summary: Submit ProposerSlashing object to node's pool\n      description: Submits ProposerSlashing object to node's pool and if passes validation  node MUST broadcast it to network.\n      tags:\n        - Beacon\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              description: 'The [`ProposerSlashing`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#proposerslashing) object from the Eth2.0 spec.'\n              properties:\n                signed_header_1:\n                  type: object\n                  description: 'The [`SignedBeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the Eth2.0 spec.'\n                  properties:\n                    message:\n                      description: 'The [`BeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblockheader) object from the Eth2.0 spec.'\n                      allOf:\n                        - type: object\n                          properties:\n                            slot:\n                              allOf:\n                                - type: string\n                                  example: '1'\n                                - description: The slot to which this block corresponds.\n                            proposer_index:\n                              allOf:\n                                - type: string\n                                  example: '1'\n                                - description: Index of validator in validator registry.\n                            parent_root:\n                              allOf:\n                                - type: string\n                                  example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                  pattern: '^0x[a-fA-F0-9]{64}$'\n                                - description: The signing merkle root of the parent `BeaconBlock`.\n                            state_root:\n                              allOf:\n                                - type: string\n                                  example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                  pattern: '^0x[a-fA-F0-9]{64}$'\n                                - description: The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.\n                        - type: object\n                          properties:\n                            body_root:\n                              allOf:\n                                - type: string\n                                  example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                  pattern: '^0x[a-fA-F0-9]{64}$'\n                                - description: The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`\n                    signature:\n                      type: string\n                      pattern: '^0x[a-fA-F0-9]{192}$'\n                      example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n                signed_header_2:\n                  type: object\n                  description: 'The [`SignedBeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the Eth2.0 spec.'\n                  properties:\n                    message:\n                      description: 'The [`BeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblockheader) object from the Eth2.0 spec.'\n                      allOf:\n                        - type: object\n                          properties:\n                            slot:\n                              allOf:\n                                - type: string\n                                  example: '1'\n                                - description: The slot to which this block corresponds.\n                            proposer_index:\n                              allOf:\n                                - type: string\n                                  example: '1'\n                                - description: Index of validator in validator registry.\n                            parent_root:\n                              allOf:\n                                - type: string\n                                  example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                  pattern: '^0x[a-fA-F0-9]{64}$'\n                                - description: The signing merkle root of the parent `BeaconBlock`.\n                            state_root:\n                              allOf:\n                                - type: string\n                                  example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                  pattern: '^0x[a-fA-F0-9]{64}$'\n                                - description: The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.\n                        - type: object\n                          properties:\n                            body_root:\n                              allOf:\n                                - type: string\n                                  example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                  pattern: '^0x[a-fA-F0-9]{64}$'\n                                - description: The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`\n                    signature:\n                      type: string\n                      pattern: '^0x[a-fA-F0-9]{192}$'\n                      example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n      responses:\n        '200':\n          description: Success\n        '400':\n          description: Invalid proposer slashing\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - type: object\n                    properties:\n                      code:\n                        description: Either specific error code in case of invalid request or http status code\n                        type: number\n                        example: 404\n                      message:\n                        description: Message describing error\n                        type: string\n                      stacktraces:\n                        description: 'Optional stacktraces, sent when node is in debug mode'\n                        type: array\n                        items:\n                          type: string\n                  - example:\n                      code: 400\n                      message: 'Invalid proposer slashing, it will never pass validation so it''s rejected'\n        '500':\n          description: Beacon node internal error.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    description: Either specific error code in case of invalid request or http status code\n                    type: number\n                    example: 404\n                  message:\n                    description: Message describing error\n                    type: string\n                  stacktraces:\n                    description: 'Optional stacktraces, sent when node is in debug mode'\n                    type: array\n                    items:\n                      type: string\n              example:\n                code: 500\n                message: Internal server error\n  /eth/v1/beacon/pool/voluntary_exits:\n    get:\n      operationId: getPoolVoluntaryExits\n      summary: Get SignedVoluntaryExit from operations pool\n      description: Retrieves voluntary exits known by the node but not necessarily incorporated into any block\n      tags:\n        - Beacon\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                title: GetPoolVoluntaryExitsResponse\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      type: object\n                      description: 'The [`SignedVoluntaryExit`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#signedvoluntaryexit) object from the Eth2.0 spec.'\n                      properties:\n                        message:\n                          type: object\n                          description: 'The [`VoluntaryExit`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#voluntaryexit) object from the Eth2.0 spec.'\n                          properties:\n                            epoch:\n                              allOf:\n                                - type: string\n                                  example: '1'\n                                - description: Minimum epoch for processing exit.\n                            validator_index:\n                              allOf:\n                                - type: string\n                                  example: '1'\n                                - description: Index of the exiting validator.\n                        signature:\n                          type: string\n                          pattern: '^0x[a-fA-F0-9]{192}$'\n                          example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n        '500':\n          description: Beacon node internal error.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    description: Either specific error code in case of invalid request or http status code\n                    type: number\n                    example: 404\n                  message:\n                    description: Message describing error\n                    type: string\n                  stacktraces:\n                    description: 'Optional stacktraces, sent when node is in debug mode'\n                    type: array\n                    items:\n                      type: string\n              example:\n                code: 500\n                message: Internal server error\n    post:\n      operationId: submitPoolVoluntaryExit\n      summary: Submit SignedVoluntaryExit object to node's pool\n      description: Submits SignedVoluntaryExit object to node's pool and if passes validation node MUST broadcast it to network.\n      tags:\n        - Beacon\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              description: 'The [`SignedVoluntaryExit`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#signedvoluntaryexit) object from the Eth2.0 spec.'\n              properties:\n                message:\n                  type: object\n                  description: 'The [`VoluntaryExit`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#voluntaryexit) object from the Eth2.0 spec.'\n                  properties:\n                    epoch:\n                      allOf:\n                        - type: string\n                          example: '1'\n                        - description: Minimum epoch for processing exit.\n                    validator_index:\n                      allOf:\n                        - type: string\n                          example: '1'\n                        - description: Index of the exiting validator.\n                signature:\n                  type: string\n                  pattern: '^0x[a-fA-F0-9]{192}$'\n                  example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n      responses:\n        '200':\n          description: Voluntary exit is stored in node and broadcasted to network\n        '400':\n          description: Invalid voluntary exit\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - type: object\n                    properties:\n                      code:\n                        description: Either specific error code in case of invalid request or http status code\n                        type: number\n                        example: 404\n                      message:\n                        description: Message describing error\n                        type: string\n                      stacktraces:\n                        description: 'Optional stacktraces, sent when node is in debug mode'\n                        type: array\n                        items:\n                          type: string\n                  - example:\n                      code: 400\n                      message: 'Invalid voluntary exit, it will never pass validation so it''s rejected'\n        '500':\n          description: Beacon node internal error.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    description: Either specific error code in case of invalid request or http status code\n                    type: number\n                    example: 404\n                  message:\n                    description: Message describing error\n                    type: string\n                  stacktraces:\n                    description: 'Optional stacktraces, sent when node is in debug mode'\n                    type: array\n                    items:\n                      type: string\n              example:\n                code: 500\n                message: Internal server error\n  '/eth/v1/debug/beacon/states/{state_id}':\n    get:\n      operationId: getState\n      summary: Get full BeaconState object\n      description: Returns full BeaconState object for given stateId.\n      tags:\n        - Debug\n      parameters:\n        - name: state_id\n          in: path\n          required: true\n          example: head\n          schema:\n            type: string\n          description: |\n            State identifier.\n            Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\\u003cslot\\\u003e, \\\u003chex encoded stateRoot with 0x prefix\\\u003e.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                title: GetStateResponse\n                type: object\n                properties:\n                  data:\n                    type: object\n                    description: 'The [`BeaconState`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblock) object from the Eth2.0 spec.'\n                    properties:\n                      genesis_time:\n                        type: string\n                        example: '1'\n                      genesis_validators_root:\n                        type: string\n                        example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                        pattern: '^0x[a-fA-F0-9]{64}$'\n                      slot:\n                        type: string\n                        example: '1'\n                      fork:\n                        type: object\n                        description: 'The [`Fork`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#fork) object from the Eth2.0 spec.'\n                        properties:\n                          previous_version:\n                            type: string\n                            description: a fork version number\n                            example: '0x00000000'\n                            pattern: '^0x[a-fA-F0-9]{8}$'\n                          current_version:\n                            type: string\n                            description: a fork version number\n                            example: '0x00000000'\n                            pattern: '^0x[a-fA-F0-9]{8}$'\n                          epoch:\n                            type: string\n                            example: '1'\n                      latest_block_header:\n                        description: 'The [`BeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblockheader) object from the Eth2.0 spec.'\n                        allOf:\n                          - type: object\n                            properties:\n                              slot:\n                                allOf:\n                                  - type: string\n                                    example: '1'\n                                  - description: The slot to which this block corresponds.\n                              proposer_index:\n                                allOf:\n                                  - type: string\n                                    example: '1'\n                                  - description: Index of validator in validator registry.\n                              parent_root:\n                                allOf:\n                                  - type: string\n                                    example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                    pattern: '^0x[a-fA-F0-9]{64}$'\n                                  - description: The signing merkle root of the parent `BeaconBlock`.\n                              state_root:\n                                allOf:\n                                  - type: string\n                                    example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                    pattern: '^0x[a-fA-F0-9]{64}$'\n                                  - description: The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.\n                          - type: object\n                            properties:\n                              body_root:\n                                allOf:\n                                  - type: string\n                                    example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                    pattern: '^0x[a-fA-F0-9]{64}$'\n                                  - description: The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`\n                      block_roots:\n                        type: array\n                        items:\n                          allOf:\n                            - type: string\n                              example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                              pattern: '^0x[a-fA-F0-9]{64}$'\n                        minItems: 8192\n                        maxItems: 8192\n                      state_roots:\n                        type: array\n                        items:\n                          allOf:\n                            - type: string\n                              example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                              pattern: '^0x[a-fA-F0-9]{64}$'\n                        minItems: 8192\n                        maxItems: 8192\n                      historical_roots:\n                        type: array\n                        items:\n                          allOf:\n                            - type: string\n                              example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                              pattern: '^0x[a-fA-F0-9]{64}$'\n                        maxItems: 16777216\n                      eth1_data:\n                        type: object\n                        description: 'The [`Eth1Data`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#eth1data) object from the Eth2.0 spec.'\n                        properties:\n                          deposit_root:\n                            allOf:\n                              - type: string\n                                example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                pattern: '^0x[a-fA-F0-9]{64}$'\n                              - description: Root of the deposit tree.\n                          deposit_count:\n                            allOf:\n                              - type: string\n                                example: '1'\n                              - description: Total number of deposits.\n                          block_hash:\n                            allOf:\n                              - type: string\n                                example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                pattern: '^0x[a-fA-F0-9]{64}$'\n                              - description: Ethereum 1.x block hash.\n                      eth1_data_votes:\n                        type: array\n                        items:\n                          allOf:\n                            - type: object\n                              description: 'The [`Eth1Data`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#eth1data) object from the Eth2.0 spec.'\n                              properties:\n                                deposit_root:\n                                  allOf:\n                                    - type: string\n                                      example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                      pattern: '^0x[a-fA-F0-9]{64}$'\n                                    - description: Root of the deposit tree.\n                                deposit_count:\n                                  allOf:\n                                    - type: string\n                                      example: '1'\n                                    - description: Total number of deposits.\n                                block_hash:\n                                  allOf:\n                                    - type: string\n                                      example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                      pattern: '^0x[a-fA-F0-9]{64}$'\n                                    - description: Ethereum 1.x block hash.\n                        maxItems: 1024\n                      eth1_deposit_index:\n                        type: string\n                        example: '1'\n                      validators:\n                        type: array\n                        maxItems: 1099511627776\n                        items:\n                          allOf:\n                            - type: object\n                              properties:\n                                pubkey:\n                                  type: string\n                                  pattern: '^0x[a-fA-F0-9]{96}$'\n                                  description: 'The validator''s BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._'\n                                  example: '0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a'\n                                withdrawal_credentials:\n                                  allOf:\n                                    - type: string\n                                      example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                      pattern: '^0x[a-fA-F0-9]{64}$'\n                                    - description: Root of withdrawal credentials\n                                effective_balance:\n                                  allOf:\n                                    - type: string\n                                      example: '1'\n                                    - description: Balance at stake in Gwei.\n                                slashed:\n                                  type: boolean\n                                  example: false\n                                  description: Was validator slashed (not longer active).\n                                activation_eligibility_epoch:\n                                  allOf:\n                                    - type: string\n                                      example: '1'\n                                    - description: When criteria for activation were met.\n                                activation_epoch:\n                                  allOf:\n                                    - type: string\n                                      example: '1'\n                                    - description: Epoch when validator activated. 'FAR_FUTURE_EPOCH' if not activated\n                                exit_epoch:\n                                  allOf:\n                                    - type: string\n                                      example: '1'\n                                    - description: Epoch when validator exited. 'FAR_FUTURE_EPOCH' if not exited.\n                                withdrawable_epoch:\n                                  allOf:\n                                    - type: string\n                                      example: '1'\n                                    - description: When validator can withdraw or transfer funds. 'FAR_FUTURE_EPOCH' if not defined\n                      balances:\n                        type: array\n                        description: Validator balances in gwei\n                        maxItems: 1099511627776\n                        items:\n                          allOf:\n                            - type: string\n                              example: '1'\n                      randao_mixes:\n                        type: array\n                        items:\n                          allOf:\n                            - type: string\n                              example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                              pattern: '^0x[a-fA-F0-9]{64}$'\n                        minItems: 65536\n                        maxItems: 65536\n                      slashings:\n                        type: array\n                        description: Per-epoch sums of slashed effective balances\n                        items:\n                          allOf:\n                            - type: string\n                              example: '1'\n                        minItems: 8192\n                        maxItems: 8192\n                      previous_epoch_attestations:\n                        type: array\n                        items:\n                          allOf:\n                            - type: object\n                              description: 'The [`PendingAttestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#pendingattestation) object from the Eth2.0 spec.'\n                              properties:\n                                aggregation_bits:\n                                  type: string\n                                  pattern: '^0x[a-fA-F0-9]+$'\n                                  description: Attester aggregation bits.\n                                data:\n                                  type: object\n                                  description: 'The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata) object from the Eth2.0 spec.'\n                                  properties:\n                                    slot:\n                                      type: string\n                                      example: '1'\n                                    index:\n                                      type: string\n                                      example: '1'\n                                    beacon_block_root:\n                                      allOf:\n                                        - type: string\n                                          example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                          pattern: '^0x[a-fA-F0-9]{64}$'\n                                        - description: LMD GHOST vote.\n                                    source:\n                                      type: object\n                                      description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                                      properties:\n                                        epoch:\n                                          type: string\n                                          example: '1'\n                                        root:\n                                          type: string\n                                          example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                          pattern: '^0x[a-fA-F0-9]{64}$'\n                                    target:\n                                      type: object\n                                      description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                                      properties:\n                                        epoch:\n                                          type: string\n                                          example: '1'\n                                        root:\n                                          type: string\n                                          example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                          pattern: '^0x[a-fA-F0-9]{64}$'\n                                inclusion_delay:\n                                  type: string\n                                  example: '1'\n                                proposer_index:\n                                  type: string\n                                  example: '1'\n                      current_epoch_attestations:\n                        type: array\n                        items:\n                          allOf:\n                            - type: object\n                              description: 'The [`PendingAttestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#pendingattestation) object from the Eth2.0 spec.'\n                              properties:\n                                aggregation_bits:\n                                  type: string\n                                  pattern: '^0x[a-fA-F0-9]+$'\n                                  description: Attester aggregation bits.\n                                data:\n                                  type: object\n                                  description: 'The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata) object from the Eth2.0 spec.'\n                                  properties:\n                                    slot:\n                                      type: string\n                                      example: '1'\n                                    index:\n                                      type: string\n                                      example: '1'\n                                    beacon_block_root:\n                                      allOf:\n                                        - type: string\n                                          example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                          pattern: '^0x[a-fA-F0-9]{64}$'\n                                        - description: LMD GHOST vote.\n                                    source:\n                                      type: object\n                                      description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                                      properties:\n                                        epoch:\n                                          type: string\n                                          example: '1'\n                                        root:\n                                          type: string\n                                          example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                          pattern: '^0x[a-fA-F0-9]{64}$'\n                                    target:\n                                      type: object\n                                      description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                                      properties:\n                                        epoch:\n                                          type: string\n                                          example: '1'\n                                        root:\n                                          type: string\n                                          example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                          pattern: '^0x[a-fA-F0-9]{64}$'\n                                inclusion_delay:\n                                  type: string\n                                  example: '1'\n                                proposer_index:\n                                  type: string\n                                  example: '1'\n                      justification_bits:\n                        type: string\n                        pattern: '^0x[a-fA-F0-9]+$'\n                        example: '0x01'\n                        description: Bit set for every recent justified epoch\n                      previous_justified_checkpoint:\n                        type: object\n                        description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                        properties:\n                          epoch:\n                            type: string\n                            example: '1'\n                          root:\n                            type: string\n                            example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                            pattern: '^0x[a-fA-F0-9]{64}$'\n                      current_justified_checkpoint:\n                        type: object\n                        description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                        properties:\n                          epoch:\n                            type: string\n                            example: '1'\n                          root:\n                            type: string\n                            example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                            pattern: '^0x[a-fA-F0-9]{64}$'\n                      finalized_checkpoint:\n                        type: object\n                        description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                        properties:\n                          epoch:\n                            type: string\n                            example: '1'\n                          root:\n                            type: string\n                            example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                            pattern: '^0x[a-fA-F0-9]{64}$'\n        '400':\n          description: Invalid state ID\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - type: object\n                    properties:\n                      code:\n                        description: Either specific error code in case of invalid request or http status code\n                        type: number\n                        example: 404\n                      message:\n                        description: Message describing error\n                        type: string\n                      stacktraces:\n                        description: 'Optional stacktraces, sent when node is in debug mode'\n                        type: array\n                        items:\n                          type: string\n                  - example:\n                      code: 400\n                      message: 'Invalid state ID: current'\n        '500':\n          description: Beacon node internal error.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    description: Either specific error code in case of invalid request or http status code\n                    type: number\n                    example: 404\n                  message:\n                    description: Message describing error\n                    type: string\n                  stacktraces:\n                    description: 'Optional stacktraces, sent when node is in debug mode'\n                    type: array\n                    items:\n                      type: string\n              example:\n                code: 500\n                message: Internal server error\n  /eth/v1/debug/beacon/heads:\n    get:\n      operationId: getDebugChainHeads\n      summary: Get fork choice leaves\n      description: Retrieves all possible chain heads (leaves of fork choice tree).\n      tags:\n        - Debug\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                title: GetDebugChainHeadsResponse\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        root:\n                          type: string\n                          example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                          pattern: '^0x[a-fA-F0-9]{64}$'\n                        slot:\n                          type: string\n                          example: '1'\n        '500':\n          description: Beacon node internal error.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    description: Either specific error code in case of invalid request or http status code\n                    type: number\n                    example: 404\n                  message:\n                    description: Message describing error\n                    type: string\n                  stacktraces:\n                    description: 'Optional stacktraces, sent when node is in debug mode'\n                    type: array\n                    items:\n                      type: string\n              example:\n                code: 500\n                message: Internal server error\n  /eth/v1/node/identity:\n    get:\n      operationId: getNetworkIdentity\n      tags:\n        - Node\n      summary: Get node network identity\n      description: Retrieves data about the node's network presence\n      responses:\n        '200':\n          description: Request successful\n          content:\n            application/json:\n              schema:\n                title: GetNetworkIdentityResponse\n                type: object\n                properties:\n                  data:\n                    type: object\n                    properties:\n                      peer_id:\n                        type: string\n                        description: 'Cryptographic hash of a peer’s public key. [Read more](https://docs.libp2p.io/concepts/peer-id/)'\n                        example: QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N\n                      enr:\n                        type: string\n                        description: 'Ethereum node record. [Read more](https://eips.ethereum.org/EIPS/eip-778)'\n                        example: 'enr:-IS4QHCYrYZbAKWCBRlAy5zzaDZXJBGkcnh4MHcBFZntXNFrdvJjX04jRzjzCBOonrkTfj499SZuOh8R33Ls8RRcy5wBgmlkgnY0gmlwhH8AAAGJc2VjcDI1NmsxoQPKY0yuDUmstAHYpMa2_oxVtw0RW_QAdpzBQA8yWM0xOIN1ZHCCdl8'\n                      p2p_addresses:\n                        type: array\n                        items:\n                          allOf:\n                            - type: string\n                              description: '[Read more](https://docs.libp2p.io/reference/glossary/#multiaddr)'\n                              example: /ip4/7.7.7.7/tcp/4242/p2p/QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N\n                            - description: 'Node''s addresses on which eth2 rpc requests are served. [Read more](https://docs.libp2p.io/reference/glossary/#multiaddr)'\n                      discovery_addresses:\n                        type: array\n                        items:\n                          allOf:\n                            - type: string\n                              description: '[Read more](https://docs.libp2p.io/reference/glossary/#multiaddr)'\n                              example: /ip4/7.7.7.7/tcp/4242/p2p/QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N\n                            - description: 'Node''s addresses on which is listening for discv5 requests. [Read more](https://docs.libp2p.io/reference/glossary/#multiaddr)'\n                      metadata:\n                        type: object\n                        description: 'Based on eth2 [Metadata object](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/p2p-interface.md#metadata)'\n                        properties:\n                          seq_number:\n                            allOf:\n                              - description: 'Uint64 starting at 0 used to version the node''s metadata. If any other field in the local MetaData changes, the node MUST increment seq_number by 1.'\n                              - type: string\n                                example: '1'\n                          attnets:\n                            allOf:\n                              - description: Bitvector representing the node's persistent attestation subnet subscriptions.\n                              - type: string\n                                pattern: '^0x[a-fA-F0-9]{2,}$'\n        '500':\n          description: Beacon node internal error.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    description: Either specific error code in case of invalid request or http status code\n                    type: number\n                    example: 404\n                  message:\n                    description: Message describing error\n                    type: string\n                  stacktraces:\n                    description: 'Optional stacktraces, sent when node is in debug mode'\n                    type: array\n                    items:\n                      type: string\n              example:\n                code: 500\n                message: Internal server error\n  /eth/v1/node/peers:\n    get:\n      operationId: getPeers\n      tags:\n        - Node\n      summary: Get node network peers\n      description: Retrieves data about the node's network peers\n      responses:\n        '200':\n          description: Request successful\n          content:\n            application/json:\n              schema:\n                title: GetPeersResponse\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        peer_id:\n                          type: string\n                          description: 'Cryptographic hash of a peer’s public key. [Read more](https://docs.libp2p.io/concepts/peer-id/)'\n                          example: QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N\n                        enr:\n                          allOf:\n                            - type: string\n                              description: 'Ethereum node record. [Read more](https://eips.ethereum.org/EIPS/eip-778)'\n                              example: 'enr:-IS4QHCYrYZbAKWCBRlAy5zzaDZXJBGkcnh4MHcBFZntXNFrdvJjX04jRzjzCBOonrkTfj499SZuOh8R33Ls8RRcy5wBgmlkgnY0gmlwhH8AAAGJc2VjcDI1NmsxoQPKY0yuDUmstAHYpMa2_oxVtw0RW_QAdpzBQA8yWM0xOIN1ZHCCdl8'\n                            - nullable: true\n                        address:\n                          type: string\n                          description: '[Read more](https://docs.libp2p.io/reference/glossary/#multiaddr)'\n                          example: /ip4/7.7.7.7/tcp/4242/p2p/QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N\n                        state:\n                          type: string\n                          enum:\n                            - disconnected\n                            - connecting\n                            - connected\n                            - disconnecting\n                        direction:\n                          type: string\n                          enum:\n                            - inbound\n                            - outbound\n        '500':\n          description: Beacon node internal error.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    description: Either specific error code in case of invalid request or http status code\n                    type: number\n                    example: 404\n                  message:\n                    description: Message describing error\n                    type: string\n                  stacktraces:\n                    description: 'Optional stacktraces, sent when node is in debug mode'\n                    type: array\n                    items:\n                      type: string\n              example:\n                code: 500\n                message: Internal server error\n  '/eth/v1/node/peers/{peer_id}':\n    get:\n      operationId: getPeer\n      tags:\n        - Node\n      summary: Get peer\n      description: Retrieves data about the given peer\n      parameters:\n        - name: peer_id\n          in: path\n          required: true\n          schema:\n            type: string\n            description: 'Cryptographic hash of a peer’s public key. [Read more](https://docs.libp2p.io/concepts/peer-id/)'\n            example: QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N\n      responses:\n        '200':\n          description: Request successful\n          content:\n            application/json:\n              schema:\n                title: GetPeerResponse\n                type: object\n                properties:\n                  data:\n                    type: object\n                    properties:\n                      peer_id:\n                        type: string\n                        description: 'Cryptographic hash of a peer’s public key. [Read more](https://docs.libp2p.io/concepts/peer-id/)'\n                        example: QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N\n                      enr:\n                        allOf:\n                          - type: string\n                            description: 'Ethereum node record. [Read more](https://eips.ethereum.org/EIPS/eip-778)'\n                            example: 'enr:-IS4QHCYrYZbAKWCBRlAy5zzaDZXJBGkcnh4MHcBFZntXNFrdvJjX04jRzjzCBOonrkTfj499SZuOh8R33Ls8RRcy5wBgmlkgnY0gmlwhH8AAAGJc2VjcDI1NmsxoQPKY0yuDUmstAHYpMa2_oxVtw0RW_QAdpzBQA8yWM0xOIN1ZHCCdl8'\n                          - nullable: true\n                      address:\n                        type: string\n                        description: '[Read more](https://docs.libp2p.io/reference/glossary/#multiaddr)'\n                        example: /ip4/7.7.7.7/tcp/4242/p2p/QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N\n                      state:\n                        type: string\n                        enum:\n                          - disconnected\n                          - connecting\n                          - connected\n                          - disconnecting\n                      direction:\n                        type: string\n                        enum:\n                          - inbound\n                          - outbound\n        '400':\n          description: The peer ID supplied could not be parsed\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - type: object\n                    properties:\n                      code:\n                        description: Either specific error code in case of invalid request or http status code\n                        type: number\n                        example: 404\n                      message:\n                        description: Message describing error\n                        type: string\n                      stacktraces:\n                        description: 'Optional stacktraces, sent when node is in debug mode'\n                        type: array\n                        items:\n                          type: string\n                  - example:\n                      code: 400\n                      message: 'Invalid peer ID: localhost'\n        '404':\n          description: Peer not found\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - type: object\n                    properties:\n                      code:\n                        description: Either specific error code in case of invalid request or http status code\n                        type: number\n                        example: 404\n                      message:\n                        description: Message describing error\n                        type: string\n                      stacktraces:\n                        description: 'Optional stacktraces, sent when node is in debug mode'\n                        type: array\n                        items:\n                          type: string\n                  - example:\n                      code: 404\n                      message: Peer not found\n        '500':\n          description: Beacon node internal error.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    description: Either specific error code in case of invalid request or http status code\n                    type: number\n                    example: 404\n                  message:\n                    description: Message describing error\n                    type: string\n                  stacktraces:\n                    description: 'Optional stacktraces, sent when node is in debug mode'\n                    type: array\n                    items:\n                      type: string\n              example:\n                code: 500\n                message: Internal server error\n  /eth/v1/node/version:\n    get:\n      operationId: getNodeVersion\n      tags:\n        - Node\n      summary: Get version string of the running beacon node.\n      description: 'Requests that the beacon node identify information about its implementation in a format similar to a  [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3) field.'\n      responses:\n        '200':\n          description: Request successful\n          content:\n            application/json:\n              schema:\n                title: GetVersionResponse\n                type: object\n                properties:\n                  data:\n                    type: object\n                    properties:\n                      version:\n                        type: string\n                        description: 'A string which uniquely identifies the client implementation and its version; similar to [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3).'\n                        example: Lighthouse/v0.1.5 (Linux x86_64)\n        '500':\n          description: Beacon node internal error.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    description: Either specific error code in case of invalid request or http status code\n                    type: number\n                    example: 404\n                  message:\n                    description: Message describing error\n                    type: string\n                  stacktraces:\n                    description: 'Optional stacktraces, sent when node is in debug mode'\n                    type: array\n                    items:\n                      type: string\n              example:\n                code: 500\n                message: Internal server error\n  /eth/v1/node/syncing:\n    get:\n      operationId: getSyncingStatus\n      tags:\n        - Node\n        - ValidatorRequiredApi\n      summary: Get node syncing status\n      description: 'Requests the beacon node to describe if it''s currently syncing or not, and if it is, what block it is up to.'\n      responses:\n        '200':\n          description: Request successful\n          content:\n            application/json:\n              schema:\n                title: GetSyncingStatusResponse\n                type: object\n                properties:\n                  data:\n                    type: object\n                    properties:\n                      head_slot:\n                        allOf:\n                          - description: Head slot node is trying to reach\n                          - type: string\n                            example: '1'\n                      sync_distance:\n                        allOf:\n                          - description: How many slots node needs to process to reach head. 0 if synced.\n                          - type: string\n                            example: '1'\n        '500':\n          description: Beacon node internal error.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    description: Either specific error code in case of invalid request or http status code\n                    type: number\n                    example: 404\n                  message:\n                    description: Message describing error\n                    type: string\n                  stacktraces:\n                    description: 'Optional stacktraces, sent when node is in debug mode'\n                    type: array\n                    items:\n                      type: string\n              example:\n                code: 500\n                message: Internal server error\n  /eth/v1/node/health:\n    get:\n      operationId: getHealth\n      tags:\n        - Node\n      summary: Get health check\n      description: Returns node health status in http status codes. Useful for load balancers.\n      responses:\n        '200':\n          description: Node is ready\n        '206':\n          description: Node is syncing but can serve incomplete data\n        '503':\n          description: Node not initialized or having issues\n  /eth/v1/config/fork_schedule:\n    get:\n      operationId: getForkSchedule\n      summary: Get scheduled upcoming forks.\n      description: Retrieve all scheduled upcoming forks this node is aware of.\n      tags:\n        - Config\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                title: GetForkScheduleResponse\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      type: object\n                      description: 'The [`Fork`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#fork) object from the Eth2.0 spec.'\n                      properties:\n                        previous_version:\n                          type: string\n                          description: a fork version number\n                          example: '0x00000000'\n                          pattern: '^0x[a-fA-F0-9]{8}$'\n                        current_version:\n                          type: string\n                          description: a fork version number\n                          example: '0x00000000'\n                          pattern: '^0x[a-fA-F0-9]{8}$'\n                        epoch:\n                          type: string\n                          example: '1'\n        '500':\n          description: Beacon node internal error.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    description: Either specific error code in case of invalid request or http status code\n                    type: number\n                    example: 404\n                  message:\n                    description: Message describing error\n                    type: string\n                  stacktraces:\n                    description: 'Optional stacktraces, sent when node is in debug mode'\n                    type: array\n                    items:\n                      type: string\n              example:\n                code: 500\n                message: Internal server error\n  /eth/v1/config/spec:\n    get:\n      operationId: getSpec\n      summary: Get spec params.\n      description: |\n        Retrieve specification configuration used on this node.\n        [Specification params list](https://github.com/ethereum/eth2.0-specs/blob/v1.0.0-rc.0/configs/mainnet/phase0.yaml)\n\n        Values are returned with following format:\n          - any value starting with 0x in the spec is returned as a hex string\n          - numeric values are returned as a quoted integer\n      tags:\n        - Config\n        - ValidatorRequiredApi\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                title: GetSpecResponse\n                type: object\n                properties:\n                  data:\n                    description: |\n                      Key value mapping of [spec variables](https://github.com/ethereum/eth2.0-specs/blob/v1.0.0-rc.0/configs/mainnet/phase0.yaml).\n                      Values are returned with following format:\n                        - any value starting with 0x in the spec is returned as a hex string\n                        - numeric values are returned as a quoted integer\n                    type: object\n        '500':\n          description: Beacon node internal error.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    description: Either specific error code in case of invalid request or http status code\n                    type: number\n                    example: 404\n                  message:\n                    description: Message describing error\n                    type: string\n                  stacktraces:\n                    description: 'Optional stacktraces, sent when node is in debug mode'\n                    type: array\n                    items:\n                      type: string\n              example:\n                code: 500\n                message: Internal server error\n  /eth/v1/config/deposit_contract:\n    get:\n      operationId: getDepositContract\n      summary: Get deposit contract address.\n      description: Retrieve deposit contract address and genesis fork version.\n      tags:\n        - Config\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                title: GetDepositContractResponse\n                type: object\n                properties:\n                  data:\n                    type: object\n                    properties:\n                      chain_id:\n                        description: Id of Eth1 chain on which contract is deployed.\n                        type: integer\n                        format: int32\n                        example: 1\n                        minimum: 1\n                      address:\n                        allOf:\n                          - type: string\n                            pattern: '^0x[a-fA-F0-9]{2,}$'\n                          - description: Hex encoded deposit contract address with 0x prefix\n                          - example: '0x1Db3439a222C519ab44bb1144fC28167b4Fa6EE6'\n        '500':\n          description: Beacon node internal error.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    description: Either specific error code in case of invalid request or http status code\n                    type: number\n                    example: 404\n                  message:\n                    description: Message describing error\n                    type: string\n                  stacktraces:\n                    description: 'Optional stacktraces, sent when node is in debug mode'\n                    type: array\n                    items:\n                      type: string\n              example:\n                code: 500\n                message: Internal server error\n  '/eth/v1/validator/duties/attester/{epoch}':\n    post:\n      tags:\n        - ValidatorRequiredApi\n        - Validator\n      summary: Get attester duties\n      operationId: getAttesterDuties\n      description: |-\n        Requests the beacon node to provide a set of attestation duties, which should be performed by validators, for a particular epoch.\n        Duties should only need to be checked once per epoch, however a chain reorganization (of \u003e MIN_SEED_LOOKAHEAD epochs) could occur, resulting in a change of duties. For full safety, you should monitor chain reorganizations events.\n      parameters:\n        - name: epoch\n          description: Should only be allowed 1 epoch ahead\n          in: path\n          required: true\n          schema:\n            type: string\n            example: '1'\n      requestBody:\n        description: An array of the validator indices for which to obtain the duties.\n        required: true\n        content:\n          application/json:\n            schema:\n              title: GetAttesterDutiesBody\n              type: array\n              items:\n                minItems: 1\n                type: string\n                example: '1'\n      responses:\n        '200':\n          description: Success response\n          content:\n            application/json:\n              schema:\n                title: GetAttesterDutiesResponse\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        pubkey:\n                          type: string\n                          pattern: '^0x[a-fA-F0-9]{96}$'\n                          description: 'The validator''s BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._'\n                          example: '0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a'\n                        validator_index:\n                          allOf:\n                            - type: string\n                              example: '1'\n                            - description: Index of validator in validator registry\n                        committee_index:\n                          allOf:\n                            - type: string\n                              example: '1'\n                            - description: The committee index\n                        committee_length:\n                          allOf:\n                            - type: string\n                              example: '1'\n                            - description: Number of validators in committee\n                        committees_at_slot:\n                          allOf:\n                            - type: string\n                              example: '1'\n                            - description: Number of committees at the provided slot\n                        validator_committee_index:\n                          allOf:\n                            - type: string\n                              example: '1'\n                            - description: Index of validator in committee\n                        slot:\n                          allOf:\n                            - type: string\n                              example: '1'\n                            - description: The slot at which the validator must attest.\n        '400':\n          description: Invalid epoch or index\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - type: object\n                    properties:\n                      code:\n                        description: Either specific error code in case of invalid request or http status code\n                        type: number\n                        example: 404\n                      message:\n                        description: Message describing error\n                        type: string\n                      stacktraces:\n                        description: 'Optional stacktraces, sent when node is in debug mode'\n                        type: array\n                        items:\n                          type: string\n                  - example:\n                      code: 400\n                      message: 'Invalid epoch: -2'\n        '500':\n          description: Beacon node internal error.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    description: Either specific error code in case of invalid request or http status code\n                    type: number\n                    example: 404\n                  message:\n                    description: Message describing error\n                    type: string\n                  stacktraces:\n                    description: 'Optional stacktraces, sent when node is in debug mode'\n                    type: array\n                    items:\n                      type: string\n              example:\n                code: 500\n                message: Internal server error\n        '503':\n          description: 'Beacon node is currently syncing, try again later.'\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    description: Either specific error code in case of invalid request or http status code\n                    type: number\n                    example: 404\n                  message:\n                    description: Message describing error\n                    type: string\n                  stacktraces:\n                    description: 'Optional stacktraces, sent when node is in debug mode'\n                    type: array\n                    items:\n                      type: string\n              example:\n                code: 503\n                message: Beacon node is currently syncing and not serving request on that endpoint\n  '/eth/v1/validator/duties/proposer/{epoch}':\n    get:\n      tags:\n        - ValidatorRequiredApi\n        - Validator\n      summary: Get block proposers duties\n      operationId: getProposerDuties\n      description: Request beacon node to provide all validators that are scheduled to propose a block in the given epoch\n      parameters:\n        - name: epoch\n          in: path\n          required: true\n          schema:\n            type: string\n            example: '1'\n      responses:\n        '200':\n          description: Success response\n          content:\n            application/json:\n              schema:\n                title: GetProposerDutiesResponse\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        pubkey:\n                          type: string\n                          pattern: '^0x[a-fA-F0-9]{96}$'\n                          description: 'The validator''s BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._'\n                          example: '0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a'\n                        validator_index:\n                          allOf:\n                            - type: string\n                              example: '1'\n                            - description: Index of validator in validator registry.\n                        slot:\n                          allOf:\n                            - type: string\n                              example: '1'\n                            - description: The slot at which the validator must propose block.\n        '400':\n          description: Invalid epoch\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - type: object\n                    properties:\n                      code:\n                        description: Either specific error code in case of invalid request or http status code\n                        type: number\n                        example: 404\n                      message:\n                        description: Message describing error\n                        type: string\n                      stacktraces:\n                        description: 'Optional stacktraces, sent when node is in debug mode'\n                        type: array\n                        items:\n                          type: string\n                  - example:\n                      code: 400\n                      message: 'Invalid epoch: -2'\n        '500':\n          description: Beacon node internal error.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    description: Either specific error code in case of invalid request or http status code\n                    type: number\n                    example: 404\n                  message:\n                    description: Message describing error\n                    type: string\n                  stacktraces:\n                    description: 'Optional stacktraces, sent when node is in debug mode'\n                    type: array\n                    items:\n                      type: string\n              example:\n                code: 500\n                message: Internal server error\n        '503':\n          description: 'Beacon node is currently syncing, try again later.'\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    description: Either specific error code in case of invalid request or http status code\n                    type: number\n                    example: 404\n                  message:\n                    description: Message describing error\n                    type: string\n                  stacktraces:\n                    description: 'Optional stacktraces, sent when node is in debug mode'\n                    type: array\n                    items:\n                      type: string\n              example:\n                code: 503\n                message: Beacon node is currently syncing and not serving request on that endpoint\n  '/eth/v1/validator/blocks/{slot}':\n    get:\n      tags:\n        - ValidatorRequiredApi\n        - Validator\n      operationId: produceBlock\n      summary: 'Produce a new block, without signature.'\n      description: 'Requests a beacon node to produce a valid block, which can then be signed by a validator.'\n      parameters:\n        - name: slot\n          in: path\n          required: true\n          description: The slot for which the block should be proposed.\n          schema:\n            type: string\n            example: '1'\n        - name: randao_reveal\n          in: query\n          required: true\n          description: The validator's randao reveal value.\n          schema:\n            type: string\n            pattern: '^0x[a-fA-F0-9]{192}$'\n            example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n        - name: graffiti\n          in: query\n          required: false\n          description: Arbitrary data validator wants to include in block.\n          schema:\n            type: string\n            format: hex\n            example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n            pattern: '^0x[a-fA-F0-9]{64}$'\n      responses:\n        '200':\n          description: Success response\n          content:\n            application/json:\n              schema:\n                title: ProduceBlockResponse\n                type: object\n                properties:\n                  data:\n                    description: 'The [`BeaconBlock`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblock) object from the Eth2.0 spec.'\n                    allOf:\n                      - type: object\n                        properties:\n                          slot:\n                            allOf:\n                              - type: string\n                                example: '1'\n                              - description: The slot to which this block corresponds.\n                          proposer_index:\n                            allOf:\n                              - type: string\n                                example: '1'\n                              - description: Index of validator in validator registry.\n                          parent_root:\n                            allOf:\n                              - type: string\n                                example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                pattern: '^0x[a-fA-F0-9]{64}$'\n                              - description: The signing merkle root of the parent `BeaconBlock`.\n                          state_root:\n                            allOf:\n                              - type: string\n                                example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                pattern: '^0x[a-fA-F0-9]{64}$'\n                              - description: The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.\n                      - type: object\n                        properties:\n                          body:\n                            type: object\n                            description: 'The [`BeaconBlockBody`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblockbody) object from the Eth2.0 spec.'\n                            properties:\n                              randao_reveal:\n                                allOf:\n                                  - type: string\n                                    pattern: '^0x[a-fA-F0-9]{192}$'\n                                    example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n                                  - description: The RanDAO reveal value provided by the validator.\n                              eth1_data:\n                                type: object\n                                description: 'The [`Eth1Data`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#eth1data) object from the Eth2.0 spec.'\n                                properties:\n                                  deposit_root:\n                                    allOf:\n                                      - type: string\n                                        example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                        pattern: '^0x[a-fA-F0-9]{64}$'\n                                      - description: Root of the deposit tree.\n                                  deposit_count:\n                                    allOf:\n                                      - type: string\n                                        example: '1'\n                                      - description: Total number of deposits.\n                                  block_hash:\n                                    allOf:\n                                      - type: string\n                                        example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                        pattern: '^0x[a-fA-F0-9]{64}$'\n                                      - description: Ethereum 1.x block hash.\n                              graffiti:\n                                type: string\n                                pattern: '^0x[a-fA-F0-9]{64}$'\n                              proposer_slashings:\n                                type: array\n                                items:\n                                  type: object\n                                  description: 'The [`ProposerSlashing`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#proposerslashing) object from the Eth2.0 spec.'\n                                  properties:\n                                    signed_header_1:\n                                      type: object\n                                      description: 'The [`SignedBeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the Eth2.0 spec.'\n                                      properties:\n                                        message:\n                                          description: 'The [`BeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblockheader) object from the Eth2.0 spec.'\n                                          allOf:\n                                            - type: object\n                                              properties:\n                                                slot:\n                                                  allOf:\n                                                    - type: string\n                                                      example: '1'\n                                                    - description: The slot to which this block corresponds.\n                                                proposer_index:\n                                                  allOf:\n                                                    - type: string\n                                                      example: '1'\n                                                    - description: Index of validator in validator registry.\n                                                parent_root:\n                                                  allOf:\n                                                    - type: string\n                                                      example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                                      pattern: '^0x[a-fA-F0-9]{64}$'\n                                                    - description: The signing merkle root of the parent `BeaconBlock`.\n                                                state_root:\n                                                  allOf:\n                                                    - type: string\n                                                      example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                                      pattern: '^0x[a-fA-F0-9]{64}$'\n                                                    - description: The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.\n                                            - type: object\n                                              properties:\n                                                body_root:\n                                                  allOf:\n                                                    - type: string\n                                                      example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                                      pattern: '^0x[a-fA-F0-9]{64}$'\n                                                    - description: The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`\n                                        signature:\n                                          type: string\n                                          pattern: '^0x[a-fA-F0-9]{192}$'\n                                          example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n                                    signed_header_2:\n                                      type: object\n                                      description: 'The [`SignedBeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the Eth2.0 spec.'\n                                      properties:\n                                        message:\n                                          description: 'The [`BeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblockheader) object from the Eth2.0 spec.'\n                                          allOf:\n                                            - type: object\n                                              properties:\n                                                slot:\n                                                  allOf:\n                                                    - type: string\n                                                      example: '1'\n                                                    - description: The slot to which this block corresponds.\n                                                proposer_index:\n                                                  allOf:\n                                                    - type: string\n                                                      example: '1'\n                                                    - description: Index of validator in validator registry.\n                                                parent_root:\n                                                  allOf:\n                                                    - type: string\n                                                      example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                                      pattern: '^0x[a-fA-F0-9]{64}$'\n                                                    - description: The signing merkle root of the parent `BeaconBlock`.\n                                                state_root:\n                                                  allOf:\n                                                    - type: string\n                                                      example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                                      pattern: '^0x[a-fA-F0-9]{64}$'\n                                                    - description: The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.\n                                            - type: object\n                                              properties:\n                                                body_root:\n                                                  allOf:\n                                                    - type: string\n                                                      example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                                      pattern: '^0x[a-fA-F0-9]{64}$'\n                                                    - description: The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`\n                                        signature:\n                                          type: string\n                                          pattern: '^0x[a-fA-F0-9]{192}$'\n                                          example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n                              attester_slashings:\n                                type: array\n                                items:\n                                  type: object\n                                  description: 'The [`AttesterSlashing`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/core/0_beacon-chain.md#attesterslashing) object from the Eth2.0 spec.'\n                                  properties:\n                                    attestation_1:\n                                      type: object\n                                      description: 'The [`IndexedAttestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#indexedattestation) object from the Eth2.0 spec.'\n                                      properties:\n                                        attesting_indices:\n                                          type: array\n                                          maxItems: 2048\n                                          description: Attesting validator indices\n                                          items:\n                                            type: string\n                                            example: '1'\n                                        signature:\n                                          allOf:\n                                            - type: string\n                                              pattern: '^0x[a-fA-F0-9]{192}$'\n                                              example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n                                            - description: 'The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.'\n                                        data:\n                                          type: object\n                                          description: 'The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata) object from the Eth2.0 spec.'\n                                          properties:\n                                            slot:\n                                              type: string\n                                              example: '1'\n                                            index:\n                                              type: string\n                                              example: '1'\n                                            beacon_block_root:\n                                              allOf:\n                                                - type: string\n                                                  example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                                  pattern: '^0x[a-fA-F0-9]{64}$'\n                                                - description: LMD GHOST vote.\n                                            source:\n                                              type: object\n                                              description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                                              properties:\n                                                epoch:\n                                                  type: string\n                                                  example: '1'\n                                                root:\n                                                  type: string\n                                                  example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                                  pattern: '^0x[a-fA-F0-9]{64}$'\n                                            target:\n                                              type: object\n                                              description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                                              properties:\n                                                epoch:\n                                                  type: string\n                                                  example: '1'\n                                                root:\n                                                  type: string\n                                                  example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                                  pattern: '^0x[a-fA-F0-9]{64}$'\n                                    attestation_2:\n                                      type: object\n                                      description: 'The [`IndexedAttestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#indexedattestation) object from the Eth2.0 spec.'\n                                      properties:\n                                        attesting_indices:\n                                          type: array\n                                          maxItems: 2048\n                                          description: Attesting validator indices\n                                          items:\n                                            type: string\n                                            example: '1'\n                                        signature:\n                                          allOf:\n                                            - type: string\n                                              pattern: '^0x[a-fA-F0-9]{192}$'\n                                              example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n                                            - description: 'The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.'\n                                        data:\n                                          type: object\n                                          description: 'The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata) object from the Eth2.0 spec.'\n                                          properties:\n                                            slot:\n                                              type: string\n                                              example: '1'\n                                            index:\n                                              type: string\n                                              example: '1'\n                                            beacon_block_root:\n                                              allOf:\n                                                - type: string\n                                                  example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                                  pattern: '^0x[a-fA-F0-9]{64}$'\n                                                - description: LMD GHOST vote.\n                                            source:\n                                              type: object\n                                              description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                                              properties:\n                                                epoch:\n                                                  type: string\n                                                  example: '1'\n                                                root:\n                                                  type: string\n                                                  example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                                  pattern: '^0x[a-fA-F0-9]{64}$'\n                                            target:\n                                              type: object\n                                              description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                                              properties:\n                                                epoch:\n                                                  type: string\n                                                  example: '1'\n                                                root:\n                                                  type: string\n                                                  example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                                  pattern: '^0x[a-fA-F0-9]{64}$'\n                              attestations:\n                                type: array\n                                items:\n                                  type: object\n                                  description: 'The [`Attestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestation) object from the Eth2.0 spec.'\n                                  properties:\n                                    aggregation_bits:\n                                      type: string\n                                      example: '0x01'\n                                      pattern: '^0x[a-fA-F0-9]+$'\n                                      description: Attester aggregation bits.\n                                    signature:\n                                      allOf:\n                                        - type: string\n                                          pattern: '^0x[a-fA-F0-9]{192}$'\n                                          example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n                                        - description: BLS aggregate signature.\n                                    data:\n                                      type: object\n                                      description: 'The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata) object from the Eth2.0 spec.'\n                                      properties:\n                                        slot:\n                                          type: string\n                                          example: '1'\n                                        index:\n                                          type: string\n                                          example: '1'\n                                        beacon_block_root:\n                                          allOf:\n                                            - type: string\n                                              example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                              pattern: '^0x[a-fA-F0-9]{64}$'\n                                            - description: LMD GHOST vote.\n                                        source:\n                                          type: object\n                                          description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                                          properties:\n                                            epoch:\n                                              type: string\n                                              example: '1'\n                                            root:\n                                              type: string\n                                              example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                              pattern: '^0x[a-fA-F0-9]{64}$'\n                                        target:\n                                          type: object\n                                          description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                                          properties:\n                                            epoch:\n                                              type: string\n                                              example: '1'\n                                            root:\n                                              type: string\n                                              example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                              pattern: '^0x[a-fA-F0-9]{64}$'\n                              deposits:\n                                type: array\n                                items:\n                                  type: object\n                                  description: 'The [`Deposit`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#deposit) object from the Eth2.0 spec.'\n                                  properties:\n                                    proof:\n                                      type: array\n                                      description: Branch in the deposit tree.\n                                      items:\n                                        allOf:\n                                          - type: string\n                                            example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                            pattern: '^0x[a-fA-F0-9]{64}$'\n                                      minItems: 32\n                                      maxItems: 32\n                                    data:\n                                      type: object\n                                      description: 'The [`DepositData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#depositdata) object from the Eth2.0 spec.'\n                                      properties:\n                                        pubkey:\n                                          type: string\n                                          pattern: '^0x[a-fA-F0-9]{96}$'\n                                          description: 'The validator''s BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._'\n                                          example: '0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a'\n                                        withdrawal_credentials:\n                                          allOf:\n                                            - type: string\n                                              example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                              pattern: '^0x[a-fA-F0-9]{64}$'\n                                            - description: The withdrawal credentials.\n                                        amount:\n                                          allOf:\n                                            - type: string\n                                              example: '1'\n                                            - description: Amount in Gwei.\n                                        signature:\n                                          allOf:\n                                            - type: string\n                                              pattern: '^0x[a-fA-F0-9]{192}$'\n                                              example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n                                            - description: Container self-signature.\n                              voluntary_exits:\n                                type: array\n                                items:\n                                  type: object\n                                  description: 'The [`SignedVoluntaryExit`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#signedvoluntaryexit) object from the Eth2.0 spec.'\n                                  properties:\n                                    message:\n                                      type: object\n                                      description: 'The [`VoluntaryExit`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#voluntaryexit) object from the Eth2.0 spec.'\n                                      properties:\n                                        epoch:\n                                          allOf:\n                                            - type: string\n                                              example: '1'\n                                            - description: Minimum epoch for processing exit.\n                                        validator_index:\n                                          allOf:\n                                            - type: string\n                                              example: '1'\n                                            - description: Index of the exiting validator.\n                                    signature:\n                                      type: string\n                                      pattern: '^0x[a-fA-F0-9]{192}$'\n                                      example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n        '400':\n          description: Invalid block production request\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    description: Either specific error code in case of invalid request or http status code\n                    type: number\n                    example: 404\n                  message:\n                    description: Message describing error\n                    type: string\n                  stacktraces:\n                    description: 'Optional stacktraces, sent when node is in debug mode'\n                    type: array\n                    items:\n                      type: string\n              examples:\n                InvalidRequest:\n                  value:\n                    code: 400\n                    message: Invalid request to produce a block\n        '500':\n          description: Beacon node internal error.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    description: Either specific error code in case of invalid request or http status code\n                    type: number\n                    example: 404\n                  message:\n                    description: Message describing error\n                    type: string\n                  stacktraces:\n                    description: 'Optional stacktraces, sent when node is in debug mode'\n                    type: array\n                    items:\n                      type: string\n              example:\n                code: 500\n                message: Internal server error\n        '503':\n          description: 'Beacon node is currently syncing, try again later.'\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    description: Either specific error code in case of invalid request or http status code\n                    type: number\n                    example: 404\n                  message:\n                    description: Message describing error\n                    type: string\n                  stacktraces:\n                    description: 'Optional stacktraces, sent when node is in debug mode'\n                    type: array\n                    items:\n                      type: string\n              example:\n                code: 503\n                message: Beacon node is currently syncing and not serving request on that endpoint\n  /eth/v1/validator/attestation_data:\n    get:\n      tags:\n        - ValidatorRequiredApi\n        - Validator\n      operationId: produceAttestationData\n      summary: Produce an attestation data\n      description: Requests that the beacon node produce an AttestationData.\n      parameters:\n        - name: slot\n          in: query\n          required: true\n          description: The slot for which an attestation data should be created.\n          schema:\n            type: string\n            example: '1'\n        - name: committee_index\n          in: query\n          description: The committee index for which an attestation data should be created.\n          required: true\n          schema:\n            type: string\n            example: '1'\n      responses:\n        '200':\n          description: Success response\n          content:\n            application/json:\n              schema:\n                title: ProduceAttestationDataResponse\n                type: object\n                properties:\n                  data:\n                    type: object\n                    description: 'The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata) object from the Eth2.0 spec.'\n                    properties:\n                      slot:\n                        type: string\n                        example: '1'\n                      index:\n                        type: string\n                        example: '1'\n                      beacon_block_root:\n                        allOf:\n                          - type: string\n                            example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                            pattern: '^0x[a-fA-F0-9]{64}$'\n                          - description: LMD GHOST vote.\n                      source:\n                        type: object\n                        description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                        properties:\n                          epoch:\n                            type: string\n                            example: '1'\n                          root:\n                            type: string\n                            example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                            pattern: '^0x[a-fA-F0-9]{64}$'\n                      target:\n                        type: object\n                        description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                        properties:\n                          epoch:\n                            type: string\n                            example: '1'\n                          root:\n                            type: string\n                            example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                            pattern: '^0x[a-fA-F0-9]{64}$'\n        '400':\n          description: Invalid request syntax.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    description: Either specific error code in case of invalid request or http status code\n                    type: number\n                    example: 400\n                  message:\n                    description: Message describing error\n                    type: string\n                  stacktraces:\n                    description: 'Optional stacktraces, sent when node is in debug mode'\n                    type: array\n                    items:\n                      type: string\n        '500':\n          description: Beacon node internal error.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    description: Either specific error code in case of invalid request or http status code\n                    type: number\n                    example: 404\n                  message:\n                    description: Message describing error\n                    type: string\n                  stacktraces:\n                    description: 'Optional stacktraces, sent when node is in debug mode'\n                    type: array\n                    items:\n                      type: string\n              example:\n                code: 500\n                message: Internal server error\n        '503':\n          description: 'Beacon node is currently syncing, try again later.'\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    description: Either specific error code in case of invalid request or http status code\n                    type: number\n                    example: 404\n                  message:\n                    description: Message describing error\n                    type: string\n                  stacktraces:\n                    description: 'Optional stacktraces, sent when node is in debug mode'\n                    type: array\n                    items:\n                      type: string\n              example:\n                code: 503\n                message: Beacon node is currently syncing and not serving request on that endpoint\n  /eth/v1/validator/aggregate_attestation:\n    get:\n      operationId: getAggregatedAttestation\n      summary: Get aggregated attestation\n      description: Aggregates all attestations matching given attestation data root and slot\n      tags:\n        - ValidatorRequiredApi\n        - Validator\n      parameters:\n        - name: attestation_data_root\n          in: query\n          required: true\n          description: HashTreeRoot of AttestationData that validator want's aggregated\n          schema:\n            type: string\n            example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n            pattern: '^0x[a-fA-F0-9]{64}$'\n        - name: slot\n          in: query\n          required: true\n          schema:\n            type: string\n            example: '1'\n      responses:\n        '200':\n          description: Returns aggregated `Attestation` object with same `AttestationData` root.\n          content:\n            application/json:\n              schema:\n                title: GetAggregatedAttestationResponse\n                type: object\n                properties:\n                  data:\n                    type: object\n                    description: 'The [`Attestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestation) object from the Eth2.0 spec.'\n                    properties:\n                      aggregation_bits:\n                        type: string\n                        example: '0x01'\n                        pattern: '^0x[a-fA-F0-9]+$'\n                        description: Attester aggregation bits.\n                      signature:\n                        allOf:\n                          - type: string\n                            pattern: '^0x[a-fA-F0-9]{192}$'\n                            example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n                          - description: BLS aggregate signature.\n                      data:\n                        type: object\n                        description: 'The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata) object from the Eth2.0 spec.'\n                        properties:\n                          slot:\n                            type: string\n                            example: '1'\n                          index:\n                            type: string\n                            example: '1'\n                          beacon_block_root:\n                            allOf:\n                              - type: string\n                                example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                pattern: '^0x[a-fA-F0-9]{64}$'\n                              - description: LMD GHOST vote.\n                          source:\n                            type: object\n                            description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                            properties:\n                              epoch:\n                                type: string\n                                example: '1'\n                              root:\n                                type: string\n                                example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                pattern: '^0x[a-fA-F0-9]{64}$'\n                          target:\n                            type: object\n                            description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                            properties:\n                              epoch:\n                                type: string\n                                example: '1'\n                              root:\n                                type: string\n                                example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                pattern: '^0x[a-fA-F0-9]{64}$'\n        '400':\n          description: Invalid request\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    description: Either specific error code in case of invalid request or http status code\n                    type: number\n                    example: 404\n                  message:\n                    description: Message describing error\n                    type: string\n                  stacktraces:\n                    description: 'Optional stacktraces, sent when node is in debug mode'\n                    type: array\n                    items:\n                      type: string\n              examples:\n                NotAggregator:\n                  value:\n                    code: 403\n                    message: Beacon node was not assigned to aggregate on that subnet.\n        '500':\n          description: Beacon node internal error.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    description: Either specific error code in case of invalid request or http status code\n                    type: number\n                    example: 404\n                  message:\n                    description: Message describing error\n                    type: string\n                  stacktraces:\n                    description: 'Optional stacktraces, sent when node is in debug mode'\n                    type: array\n                    items:\n                      type: string\n              example:\n                code: 500\n                message: Internal server error\n  /eth/v1/validator/aggregate_and_proofs:\n    post:\n      operationId: publishAggregateAndProofs\n      summary: Publish multiple aggregate and proofs\n      description: Verifies given aggregate and proofs and publishes them on appropriate gossipsub topic.\n      tags:\n        - ValidatorRequiredApi\n        - Validator\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                description: 'The [`SignedAggregateAndProof`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/validator.md#signedaggregateandproof) object'\n                properties:\n                  message:\n                    allOf:\n                      - type: object\n                        description: 'The [`AggregateAndProof`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/validator.md#aggregateandproof) without selection_proof'\n                        properties:\n                          aggregator_index:\n                            type: string\n                            example: '1'\n                          attestation:\n                            type: object\n                            description: 'The [`Attestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestation) object from the Eth2.0 spec.'\n                            properties:\n                              aggregation_bits:\n                                type: string\n                                example: '0x01'\n                                pattern: '^0x[a-fA-F0-9]+$'\n                                description: Attester aggregation bits.\n                              signature:\n                                allOf:\n                                  - type: string\n                                    pattern: '^0x[a-fA-F0-9]{192}$'\n                                    example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n                                  - description: BLS aggregate signature.\n                              data:\n                                type: object\n                                description: 'The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata) object from the Eth2.0 spec.'\n                                properties:\n                                  slot:\n                                    type: string\n                                    example: '1'\n                                  index:\n                                    type: string\n                                    example: '1'\n                                  beacon_block_root:\n                                    allOf:\n                                      - type: string\n                                        example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                        pattern: '^0x[a-fA-F0-9]{64}$'\n                                      - description: LMD GHOST vote.\n                                  source:\n                                    type: object\n                                    description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                                    properties:\n                                      epoch:\n                                        type: string\n                                        example: '1'\n                                      root:\n                                        type: string\n                                        example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                        pattern: '^0x[a-fA-F0-9]{64}$'\n                                  target:\n                                    type: object\n                                    description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                                    properties:\n                                      epoch:\n                                        type: string\n                                        example: '1'\n                                      root:\n                                        type: string\n                                        example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                        pattern: '^0x[a-fA-F0-9]{64}$'\n                      - type: object\n                        properties:\n                          selection_proof:\n                            type: string\n                            pattern: '^0x[a-fA-F0-9]{192}$'\n                            example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n                  signature:\n                    type: string\n                    pattern: '^0x[a-fA-F0-9]{192}$'\n                    example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n      responses:\n        '200':\n          description: Successful response\n        '400':\n          description: Invalid request syntax.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    description: Either specific error code in case of invalid request or http status code\n                    type: number\n                    example: 400\n                  message:\n                    description: Message describing error\n                    type: string\n                  stacktraces:\n                    description: 'Optional stacktraces, sent when node is in debug mode'\n                    type: array\n                    items:\n                      type: string\n        '500':\n          description: Beacon node internal error.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    description: Either specific error code in case of invalid request or http status code\n                    type: number\n                    example: 404\n                  message:\n                    description: Message describing error\n                    type: string\n                  stacktraces:\n                    description: 'Optional stacktraces, sent when node is in debug mode'\n                    type: array\n                    items:\n                      type: string\n              example:\n                code: 500\n                message: Internal server error\n  /eth/v1/validator/beacon_committee_subscriptions:\n    post:\n      operationId: prepareBeaconCommitteeSubnet\n      summary: Signal beacon node to prepare for a committee subnet\n      description: |\n        After beacon node receives this request,\n        search using discv5 for peers related to this subnet\n        and replace current peers with those ones if necessary\n        If validator `is_aggregator`, beacon node must:\n        - announce subnet topic subscription on gossipsub\n        - aggregate attestations received on that subnet\n      tags:\n        - ValidatorRequiredApi\n        - Validator\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: SubscribeToBeaconCommitteeSubnetRequestBody\n              type: array\n              items:\n                type: object\n                properties:\n                  committee_index:\n                    type: string\n                    example: '1'\n                  committees_at_slot:\n                    allOf:\n                      - type: string\n                        example: '1'\n                      - description: Number of committees at the returned slot\n                  slot:\n                    allOf:\n                      - type: string\n                        example: '1'\n                      - description: Should be slot at which validator is assigned to attest\n                  is_aggregator:\n                    type: boolean\n                    description: Signals to BN that a validator on the VC has been chosed for aggregator role.\n      responses:\n        '200':\n          description: |\n            Slot signature is valid and beacon node has prepared the attestation subnet.\n\n            Note that, we cannot be certain Beacon node will find peers for that subnet for various reasons,\"\n        '400':\n          description: Invalid request syntax.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    description: Either specific error code in case of invalid request or http status code\n                    type: number\n                    example: 400\n                  message:\n                    description: Message describing error\n                    type: string\n                  stacktraces:\n                    description: 'Optional stacktraces, sent when node is in debug mode'\n                    type: array\n                    items:\n                      type: string\n        '500':\n          description: Beacon node internal error.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    description: Either specific error code in case of invalid request or http status code\n                    type: number\n                    example: 404\n                  message:\n                    description: Message describing error\n                    type: string\n                  stacktraces:\n                    description: 'Optional stacktraces, sent when node is in debug mode'\n                    type: array\n                    items:\n                      type: string\n              example:\n                code: 500\n                message: Internal server error\n        '503':\n          description: 'Beacon node is currently syncing, try again later.'\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    description: Either specific error code in case of invalid request or http status code\n                    type: number\n                    example: 404\n                  message:\n                    description: Message describing error\n                    type: string\n                  stacktraces:\n                    description: 'Optional stacktraces, sent when node is in debug mode'\n                    type: array\n                    items:\n                      type: string\n              example:\n                code: 503\n                message: Beacon node is currently syncing and not serving request on that endpoint\n  /eth/v1/events:\n    get:\n      operationId: eventstream\n      summary: Subscribe to beacon node events\n      tags:\n        - Events\n        - ValidatorRequiredApi\n      description: |\n        Provides endpoint to subscribe to beacon node Server-Sent-Events stream.\n        Consumers should use [eventsource](https://html.spec.whatwg.org/multipage/server-sent-events.html#the-eventsource-interface)\n        implementation to listen on those events.\n      parameters:\n        - name: topics\n          in: query\n          required: true\n          description: Event types to subscribe to\n          schema:\n            type: array\n            items:\n              type: string\n              uniqueItems: true\n              enum:\n                - head\n                - block\n                - attestation\n                - voluntary_exit\n                - finalized_checkpoint\n                - chain_reorg\n      responses:\n        '200':\n          description: Opened SSE stream.\n          content:\n            text/event-stream:\n              schema:\n                type: string\n                description: 'https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format'\n              examples:\n                head:\n                  description: 'The node has finished processing, resulting in a new head'\n                  value: |\n                    event: head\\n\n                    data: \"{\\\"slot\\\": \\\"10\\\", \\\"block\\\": \\\"0x9a2fefd2fdb57f74993c7780ea5b9030d2897b615b89f808011ca5aebed54eaf\\\", \\\"state\\\":\\\"0x600e852a08c1200654ddf11025f1ceacb3c2e74bdd5c630cde0838b2591b69f9\\\", \\\"epoch_transition\\\": false}\"\\n\n                    \\n\n                block:\n                  description: The node has received a block (from P2P or API)\n                  value: |\n                    event: block\\n\n                    data: \"{\\\"slot\\\": \\\"10\\\", \\\"block\\\": \\\"0x9a2fefd2fdb57f74993c7780ea5b9030d2897b615b89f808011ca5aebed54eaf\\\"}\"\\n\n                    \\n\n                attestation:\n                  description: The node has received an attestation (from P2P or API)\n                  value: |\n                    event: attestation\\n\n                    data: \"{\\n      \\\"aggregation_bits\\\": \\\"0x01\\\",\\n      \\\"signature\\\": \\\"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\\\",\\n      \\\"data\\\": {\\n        \\\"slot\\\": \\\"1\\\",\\n        \\\"index\\\": \\\"1\\\",\\n        \\\"beacon_block_root\\\": \\\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\\\",\\n        \\\"source\\\": {\\n          \\\"epoch\\\": \\\"1\\\",\\n          \\\"root\\\": \\\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\\\"\\n        },\\n        \\\"target\\\": {\\n          \\\"epoch\\\": \\\"1\\\",\\n          \\\"root\\\": \\\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\\\"\\n        }\\n      }\\n    }\"\\n\n                    \\n\n                voluntary_exit:\n                  description: The node has received a voluntary exit (from P2P or API)\n                  value: |\n                    event: voluntary_exit\\n\n                    data: \"{\\n      \\\"message\\\": {\\n        \\\"epoch\\\": \\\"1\\\",\\n        \\\"validator_index\\\": \\\"1\\\"\\n      },\\n      \\\"signature\\\": \\\"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\\\"\\n    }\"\\n\n                    \\n\n                finalized_checkpoint:\n                  description: Finalized checkpoint has been updated\n                  value: |\n                    event: finalized_checkpoint\\n\n                    data: \"{\\\"block\\\":\\\"0x9a2fefd2fdb57f74993c7780ea5b9030d2897b615b89f808011ca5aebed54eaf\\\", \\\"state\\\": \\\"0x600e852a08c1200654ddf11025f1ceacb3c2e74bdd5c630cde0838b2591b69f9\\\", \\\"epoch\\\": \\\"2\\\" }\"\\n\n                    \\n\n                chain_reorg:\n                  description: The node has reorganized its chain\n                  value: |\n                    event: chain_reorg\\n\n                    data: \"{\\\"slot\\\":\\\"200\\\", \\\"depth\\\": \\\"50\\\", \\\"old_head_block\\\": \\\"0x9a2fefd2fdb57f74993c7780ea5b9030d2897b615b89f808011ca5aebed54eaf\\\", \\\"new_head_block\\\": \\\"0x76262e91970d375a19bfe8a867288d7b9cde43c8635f598d93d39d041706fc76\\\", \\\"old_head_state\\\":\\\"0x9a2fefd2fdb57f74993c7780ea5b9030d2897b615b89f808011ca5aebed54eaf\\\", \\\"new_head_state\\\": \\\"0x600e852a08c1200654ddf11025f1ceacb3c2e74bdd5c630cde0838b2591b69f9\\\", \\\"epoch\\\": \\\"2\\\" }\"\\n\n                    \\n\n        '400':\n          description: The topics supplied could not be parsed\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - type: object\n                    properties:\n                      code:\n                        description: Either specific error code in case of invalid request or http status code\n                        type: number\n                        example: 404\n                      message:\n                        description: Message describing error\n                        type: string\n                      stacktraces:\n                        description: 'Optional stacktraces, sent when node is in debug mode'\n                        type: array\n                        items:\n                          type: string\n                  - example:\n                      code: 400\n                      message: 'Invalid topic: weather_forecast'\n        '500':\n          description: Beacon node internal error.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    description: Either specific error code in case of invalid request or http status code\n                    type: number\n                    example: 404\n                  message:\n                    description: Message describing error\n                    type: string\n                  stacktraces:\n                    description: 'Optional stacktraces, sent when node is in debug mode'\n                    type: array\n                    items:\n                      type: string\n              example:\n                code: 500\n                message: Internal server error\ncomponents:\n  schemas:\n    BeaconState:\n      type: object\n      description: 'The [`BeaconState`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblock) object from the Eth2.0 spec.'\n      properties:\n        genesis_time:\n          type: string\n          example: '1'\n        genesis_validators_root:\n          type: string\n          example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n          pattern: '^0x[a-fA-F0-9]{64}$'\n        slot:\n          type: string\n          example: '1'\n        fork:\n          type: object\n          description: 'The [`Fork`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#fork) object from the Eth2.0 spec.'\n          properties:\n            previous_version:\n              type: string\n              description: a fork version number\n              example: '0x00000000'\n              pattern: '^0x[a-fA-F0-9]{8}$'\n            current_version:\n              type: string\n              description: a fork version number\n              example: '0x00000000'\n              pattern: '^0x[a-fA-F0-9]{8}$'\n            epoch:\n              type: string\n              example: '1'\n        latest_block_header:\n          description: 'The [`BeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblockheader) object from the Eth2.0 spec.'\n          allOf:\n            - type: object\n              properties:\n                slot:\n                  allOf:\n                    - type: string\n                      example: '1'\n                    - description: The slot to which this block corresponds.\n                proposer_index:\n                  allOf:\n                    - type: string\n                      example: '1'\n                    - description: Index of validator in validator registry.\n                parent_root:\n                  allOf:\n                    - type: string\n                      example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                      pattern: '^0x[a-fA-F0-9]{64}$'\n                    - description: The signing merkle root of the parent `BeaconBlock`.\n                state_root:\n                  allOf:\n                    - type: string\n                      example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                      pattern: '^0x[a-fA-F0-9]{64}$'\n                    - description: The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.\n            - type: object\n              properties:\n                body_root:\n                  allOf:\n                    - type: string\n                      example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                      pattern: '^0x[a-fA-F0-9]{64}$'\n                    - description: The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`\n        block_roots:\n          type: array\n          items:\n            allOf:\n              - type: string\n                example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                pattern: '^0x[a-fA-F0-9]{64}$'\n          minItems: 8192\n          maxItems: 8192\n        state_roots:\n          type: array\n          items:\n            allOf:\n              - type: string\n                example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                pattern: '^0x[a-fA-F0-9]{64}$'\n          minItems: 8192\n          maxItems: 8192\n        historical_roots:\n          type: array\n          items:\n            allOf:\n              - type: string\n                example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                pattern: '^0x[a-fA-F0-9]{64}$'\n          maxItems: 16777216\n        eth1_data:\n          type: object\n          description: 'The [`Eth1Data`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#eth1data) object from the Eth2.0 spec.'\n          properties:\n            deposit_root:\n              allOf:\n                - type: string\n                  example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                  pattern: '^0x[a-fA-F0-9]{64}$'\n                - description: Root of the deposit tree.\n            deposit_count:\n              allOf:\n                - type: string\n                  example: '1'\n                - description: Total number of deposits.\n            block_hash:\n              allOf:\n                - type: string\n                  example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                  pattern: '^0x[a-fA-F0-9]{64}$'\n                - description: Ethereum 1.x block hash.\n        eth1_data_votes:\n          type: array\n          items:\n            allOf:\n              - type: object\n                description: 'The [`Eth1Data`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#eth1data) object from the Eth2.0 spec.'\n                properties:\n                  deposit_root:\n                    allOf:\n                      - type: string\n                        example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                        pattern: '^0x[a-fA-F0-9]{64}$'\n                      - description: Root of the deposit tree.\n                  deposit_count:\n                    allOf:\n                      - type: string\n                        example: '1'\n                      - description: Total number of deposits.\n                  block_hash:\n                    allOf:\n                      - type: string\n                        example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                        pattern: '^0x[a-fA-F0-9]{64}$'\n                      - description: Ethereum 1.x block hash.\n          maxItems: 1024\n        eth1_deposit_index:\n          type: string\n          example: '1'\n        validators:\n          type: array\n          maxItems: 1099511627776\n          items:\n            allOf:\n              - type: object\n                properties:\n                  pubkey:\n                    type: string\n                    pattern: '^0x[a-fA-F0-9]{96}$'\n                    description: 'The validator''s BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._'\n                    example: '0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a'\n                  withdrawal_credentials:\n                    allOf:\n                      - type: string\n                        example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                        pattern: '^0x[a-fA-F0-9]{64}$'\n                      - description: Root of withdrawal credentials\n                  effective_balance:\n                    allOf:\n                      - type: string\n                        example: '1'\n                      - description: Balance at stake in Gwei.\n                  slashed:\n                    type: boolean\n                    example: false\n                    description: Was validator slashed (not longer active).\n                  activation_eligibility_epoch:\n                    allOf:\n                      - type: string\n                        example: '1'\n                      - description: When criteria for activation were met.\n                  activation_epoch:\n                    allOf:\n                      - type: string\n                        example: '1'\n                      - description: Epoch when validator activated. 'FAR_FUTURE_EPOCH' if not activated\n                  exit_epoch:\n                    allOf:\n                      - type: string\n                        example: '1'\n                      - description: Epoch when validator exited. 'FAR_FUTURE_EPOCH' if not exited.\n                  withdrawable_epoch:\n                    allOf:\n                      - type: string\n                        example: '1'\n                      - description: When validator can withdraw or transfer funds. 'FAR_FUTURE_EPOCH' if not defined\n        balances:\n          type: array\n          description: Validator balances in gwei\n          maxItems: 1099511627776\n          items:\n            allOf:\n              - type: string\n                example: '1'\n        randao_mixes:\n          type: array\n          items:\n            allOf:\n              - type: string\n                example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                pattern: '^0x[a-fA-F0-9]{64}$'\n          minItems: 65536\n          maxItems: 65536\n        slashings:\n          type: array\n          description: Per-epoch sums of slashed effective balances\n          items:\n            allOf:\n              - type: string\n                example: '1'\n          minItems: 8192\n          maxItems: 8192\n        previous_epoch_attestations:\n          type: array\n          items:\n            allOf:\n              - type: object\n                description: 'The [`PendingAttestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#pendingattestation) object from the Eth2.0 spec.'\n                properties:\n                  aggregation_bits:\n                    type: string\n                    pattern: '^0x[a-fA-F0-9]+$'\n                    description: Attester aggregation bits.\n                  data:\n                    type: object\n                    description: 'The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata) object from the Eth2.0 spec.'\n                    properties:\n                      slot:\n                        type: string\n                        example: '1'\n                      index:\n                        type: string\n                        example: '1'\n                      beacon_block_root:\n                        allOf:\n                          - type: string\n                            example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                            pattern: '^0x[a-fA-F0-9]{64}$'\n                          - description: LMD GHOST vote.\n                      source:\n                        type: object\n                        description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                        properties:\n                          epoch:\n                            type: string\n                            example: '1'\n                          root:\n                            type: string\n                            example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                            pattern: '^0x[a-fA-F0-9]{64}$'\n                      target:\n                        type: object\n                        description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                        properties:\n                          epoch:\n                            type: string\n                            example: '1'\n                          root:\n                            type: string\n                            example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                            pattern: '^0x[a-fA-F0-9]{64}$'\n                  inclusion_delay:\n                    type: string\n                    example: '1'\n                  proposer_index:\n                    type: string\n                    example: '1'\n        current_epoch_attestations:\n          type: array\n          items:\n            allOf:\n              - type: object\n                description: 'The [`PendingAttestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#pendingattestation) object from the Eth2.0 spec.'\n                properties:\n                  aggregation_bits:\n                    type: string\n                    pattern: '^0x[a-fA-F0-9]+$'\n                    description: Attester aggregation bits.\n                  data:\n                    type: object\n                    description: 'The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata) object from the Eth2.0 spec.'\n                    properties:\n                      slot:\n                        type: string\n                        example: '1'\n                      index:\n                        type: string\n                        example: '1'\n                      beacon_block_root:\n                        allOf:\n                          - type: string\n                            example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                            pattern: '^0x[a-fA-F0-9]{64}$'\n                          - description: LMD GHOST vote.\n                      source:\n                        type: object\n                        description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                        properties:\n                          epoch:\n                            type: string\n                            example: '1'\n                          root:\n                            type: string\n                            example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                            pattern: '^0x[a-fA-F0-9]{64}$'\n                      target:\n                        type: object\n                        description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                        properties:\n                          epoch:\n                            type: string\n                            example: '1'\n                          root:\n                            type: string\n                            example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                            pattern: '^0x[a-fA-F0-9]{64}$'\n                  inclusion_delay:\n                    type: string\n                    example: '1'\n                  proposer_index:\n                    type: string\n                    example: '1'\n        justification_bits:\n          type: string\n          pattern: '^0x[a-fA-F0-9]+$'\n          example: '0x01'\n          description: Bit set for every recent justified epoch\n        previous_justified_checkpoint:\n          type: object\n          description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n          properties:\n            epoch:\n              type: string\n              example: '1'\n            root:\n              type: string\n              example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n              pattern: '^0x[a-fA-F0-9]{64}$'\n        current_justified_checkpoint:\n          type: object\n          description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n          properties:\n            epoch:\n              type: string\n              example: '1'\n            root:\n              type: string\n              example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n              pattern: '^0x[a-fA-F0-9]{64}$'\n        finalized_checkpoint:\n          type: object\n          description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n          properties:\n            epoch:\n              type: string\n              example: '1'\n            root:\n              type: string\n              example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n              pattern: '^0x[a-fA-F0-9]{64}$'\n    BeaconBlock:\n      description: 'The [`BeaconBlock`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblock) object from the Eth2.0 spec.'\n      allOf:\n        - type: object\n          properties:\n            slot:\n              allOf:\n                - type: string\n                  example: '1'\n                - description: The slot to which this block corresponds.\n            proposer_index:\n              allOf:\n                - type: string\n                  example: '1'\n                - description: Index of validator in validator registry.\n            parent_root:\n              allOf:\n                - type: string\n                  example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                  pattern: '^0x[a-fA-F0-9]{64}$'\n                - description: The signing merkle root of the parent `BeaconBlock`.\n            state_root:\n              allOf:\n                - type: string\n                  example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                  pattern: '^0x[a-fA-F0-9]{64}$'\n                - description: The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.\n        - type: object\n          properties:\n            body:\n              type: object\n              description: 'The [`BeaconBlockBody`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblockbody) object from the Eth2.0 spec.'\n              properties:\n                randao_reveal:\n                  allOf:\n                    - type: string\n                      pattern: '^0x[a-fA-F0-9]{192}$'\n                      example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n                    - description: The RanDAO reveal value provided by the validator.\n                eth1_data:\n                  type: object\n                  description: 'The [`Eth1Data`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#eth1data) object from the Eth2.0 spec.'\n                  properties:\n                    deposit_root:\n                      allOf:\n                        - type: string\n                          example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                          pattern: '^0x[a-fA-F0-9]{64}$'\n                        - description: Root of the deposit tree.\n                    deposit_count:\n                      allOf:\n                        - type: string\n                          example: '1'\n                        - description: Total number of deposits.\n                    block_hash:\n                      allOf:\n                        - type: string\n                          example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                          pattern: '^0x[a-fA-F0-9]{64}$'\n                        - description: Ethereum 1.x block hash.\n                graffiti:\n                  type: string\n                  pattern: '^0x[a-fA-F0-9]{64}$'\n                proposer_slashings:\n                  type: array\n                  items:\n                    type: object\n                    description: 'The [`ProposerSlashing`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#proposerslashing) object from the Eth2.0 spec.'\n                    properties:\n                      signed_header_1:\n                        type: object\n                        description: 'The [`SignedBeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the Eth2.0 spec.'\n                        properties:\n                          message:\n                            description: 'The [`BeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblockheader) object from the Eth2.0 spec.'\n                            allOf:\n                              - type: object\n                                properties:\n                                  slot:\n                                    allOf:\n                                      - type: string\n                                        example: '1'\n                                      - description: The slot to which this block corresponds.\n                                  proposer_index:\n                                    allOf:\n                                      - type: string\n                                        example: '1'\n                                      - description: Index of validator in validator registry.\n                                  parent_root:\n                                    allOf:\n                                      - type: string\n                                        example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                        pattern: '^0x[a-fA-F0-9]{64}$'\n                                      - description: The signing merkle root of the parent `BeaconBlock`.\n                                  state_root:\n                                    allOf:\n                                      - type: string\n                                        example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                        pattern: '^0x[a-fA-F0-9]{64}$'\n                                      - description: The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.\n                              - type: object\n                                properties:\n                                  body_root:\n                                    allOf:\n                                      - type: string\n                                        example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                        pattern: '^0x[a-fA-F0-9]{64}$'\n                                      - description: The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`\n                          signature:\n                            type: string\n                            pattern: '^0x[a-fA-F0-9]{192}$'\n                            example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n                      signed_header_2:\n                        type: object\n                        description: 'The [`SignedBeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the Eth2.0 spec.'\n                        properties:\n                          message:\n                            description: 'The [`BeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblockheader) object from the Eth2.0 spec.'\n                            allOf:\n                              - type: object\n                                properties:\n                                  slot:\n                                    allOf:\n                                      - type: string\n                                        example: '1'\n                                      - description: The slot to which this block corresponds.\n                                  proposer_index:\n                                    allOf:\n                                      - type: string\n                                        example: '1'\n                                      - description: Index of validator in validator registry.\n                                  parent_root:\n                                    allOf:\n                                      - type: string\n                                        example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                        pattern: '^0x[a-fA-F0-9]{64}$'\n                                      - description: The signing merkle root of the parent `BeaconBlock`.\n                                  state_root:\n                                    allOf:\n                                      - type: string\n                                        example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                        pattern: '^0x[a-fA-F0-9]{64}$'\n                                      - description: The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.\n                              - type: object\n                                properties:\n                                  body_root:\n                                    allOf:\n                                      - type: string\n                                        example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                        pattern: '^0x[a-fA-F0-9]{64}$'\n                                      - description: The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`\n                          signature:\n                            type: string\n                            pattern: '^0x[a-fA-F0-9]{192}$'\n                            example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n                attester_slashings:\n                  type: array\n                  items:\n                    type: object\n                    description: 'The [`AttesterSlashing`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/core/0_beacon-chain.md#attesterslashing) object from the Eth2.0 spec.'\n                    properties:\n                      attestation_1:\n                        type: object\n                        description: 'The [`IndexedAttestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#indexedattestation) object from the Eth2.0 spec.'\n                        properties:\n                          attesting_indices:\n                            type: array\n                            maxItems: 2048\n                            description: Attesting validator indices\n                            items:\n                              type: string\n                              example: '1'\n                          signature:\n                            allOf:\n                              - type: string\n                                pattern: '^0x[a-fA-F0-9]{192}$'\n                                example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n                              - description: 'The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.'\n                          data:\n                            type: object\n                            description: 'The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata) object from the Eth2.0 spec.'\n                            properties:\n                              slot:\n                                type: string\n                                example: '1'\n                              index:\n                                type: string\n                                example: '1'\n                              beacon_block_root:\n                                allOf:\n                                  - type: string\n                                    example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                    pattern: '^0x[a-fA-F0-9]{64}$'\n                                  - description: LMD GHOST vote.\n                              source:\n                                type: object\n                                description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                                properties:\n                                  epoch:\n                                    type: string\n                                    example: '1'\n                                  root:\n                                    type: string\n                                    example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                    pattern: '^0x[a-fA-F0-9]{64}$'\n                              target:\n                                type: object\n                                description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                                properties:\n                                  epoch:\n                                    type: string\n                                    example: '1'\n                                  root:\n                                    type: string\n                                    example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                    pattern: '^0x[a-fA-F0-9]{64}$'\n                      attestation_2:\n                        type: object\n                        description: 'The [`IndexedAttestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#indexedattestation) object from the Eth2.0 spec.'\n                        properties:\n                          attesting_indices:\n                            type: array\n                            maxItems: 2048\n                            description: Attesting validator indices\n                            items:\n                              type: string\n                              example: '1'\n                          signature:\n                            allOf:\n                              - type: string\n                                pattern: '^0x[a-fA-F0-9]{192}$'\n                                example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n                              - description: 'The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.'\n                          data:\n                            type: object\n                            description: 'The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata) object from the Eth2.0 spec.'\n                            properties:\n                              slot:\n                                type: string\n                                example: '1'\n                              index:\n                                type: string\n                                example: '1'\n                              beacon_block_root:\n                                allOf:\n                                  - type: string\n                                    example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                    pattern: '^0x[a-fA-F0-9]{64}$'\n                                  - description: LMD GHOST vote.\n                              source:\n                                type: object\n                                description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                                properties:\n                                  epoch:\n                                    type: string\n                                    example: '1'\n                                  root:\n                                    type: string\n                                    example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                    pattern: '^0x[a-fA-F0-9]{64}$'\n                              target:\n                                type: object\n                                description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                                properties:\n                                  epoch:\n                                    type: string\n                                    example: '1'\n                                  root:\n                                    type: string\n                                    example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                    pattern: '^0x[a-fA-F0-9]{64}$'\n                attestations:\n                  type: array\n                  items:\n                    type: object\n                    description: 'The [`Attestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestation) object from the Eth2.0 spec.'\n                    properties:\n                      aggregation_bits:\n                        type: string\n                        example: '0x01'\n                        pattern: '^0x[a-fA-F0-9]+$'\n                        description: Attester aggregation bits.\n                      signature:\n                        allOf:\n                          - type: string\n                            pattern: '^0x[a-fA-F0-9]{192}$'\n                            example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n                          - description: BLS aggregate signature.\n                      data:\n                        type: object\n                        description: 'The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata) object from the Eth2.0 spec.'\n                        properties:\n                          slot:\n                            type: string\n                            example: '1'\n                          index:\n                            type: string\n                            example: '1'\n                          beacon_block_root:\n                            allOf:\n                              - type: string\n                                example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                pattern: '^0x[a-fA-F0-9]{64}$'\n                              - description: LMD GHOST vote.\n                          source:\n                            type: object\n                            description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                            properties:\n                              epoch:\n                                type: string\n                                example: '1'\n                              root:\n                                type: string\n                                example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                pattern: '^0x[a-fA-F0-9]{64}$'\n                          target:\n                            type: object\n                            description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                            properties:\n                              epoch:\n                                type: string\n                                example: '1'\n                              root:\n                                type: string\n                                example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                pattern: '^0x[a-fA-F0-9]{64}$'\n                deposits:\n                  type: array\n                  items:\n                    type: object\n                    description: 'The [`Deposit`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#deposit) object from the Eth2.0 spec.'\n                    properties:\n                      proof:\n                        type: array\n                        description: Branch in the deposit tree.\n                        items:\n                          allOf:\n                            - type: string\n                              example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                              pattern: '^0x[a-fA-F0-9]{64}$'\n                        minItems: 32\n                        maxItems: 32\n                      data:\n                        type: object\n                        description: 'The [`DepositData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#depositdata) object from the Eth2.0 spec.'\n                        properties:\n                          pubkey:\n                            type: string\n                            pattern: '^0x[a-fA-F0-9]{96}$'\n                            description: 'The validator''s BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._'\n                            example: '0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a'\n                          withdrawal_credentials:\n                            allOf:\n                              - type: string\n                                example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                pattern: '^0x[a-fA-F0-9]{64}$'\n                              - description: The withdrawal credentials.\n                          amount:\n                            allOf:\n                              - type: string\n                                example: '1'\n                              - description: Amount in Gwei.\n                          signature:\n                            allOf:\n                              - type: string\n                                pattern: '^0x[a-fA-F0-9]{192}$'\n                                example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n                              - description: Container self-signature.\n                voluntary_exits:\n                  type: array\n                  items:\n                    type: object\n                    description: 'The [`SignedVoluntaryExit`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#signedvoluntaryexit) object from the Eth2.0 spec.'\n                    properties:\n                      message:\n                        type: object\n                        description: 'The [`VoluntaryExit`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#voluntaryexit) object from the Eth2.0 spec.'\n                        properties:\n                          epoch:\n                            allOf:\n                              - type: string\n                                example: '1'\n                              - description: Minimum epoch for processing exit.\n                          validator_index:\n                            allOf:\n                              - type: string\n                                example: '1'\n                              - description: Index of the exiting validator.\n                      signature:\n                        type: string\n                        pattern: '^0x[a-fA-F0-9]{192}$'\n                        example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n    SignedBeaconBlock:\n      type: object\n      description: 'The [`SignedBeaconBlock`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#signedbeaconblock) object envelope from the Eth2.0 spec.'\n      properties:\n        message:\n          description: 'The [`BeaconBlock`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblock) object from the Eth2.0 spec.'\n          allOf:\n            - type: object\n              properties:\n                slot:\n                  allOf:\n                    - type: string\n                      example: '1'\n                    - description: The slot to which this block corresponds.\n                proposer_index:\n                  allOf:\n                    - type: string\n                      example: '1'\n                    - description: Index of validator in validator registry.\n                parent_root:\n                  allOf:\n                    - type: string\n                      example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                      pattern: '^0x[a-fA-F0-9]{64}$'\n                    - description: The signing merkle root of the parent `BeaconBlock`.\n                state_root:\n                  allOf:\n                    - type: string\n                      example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                      pattern: '^0x[a-fA-F0-9]{64}$'\n                    - description: The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.\n            - type: object\n              properties:\n                body:\n                  type: object\n                  description: 'The [`BeaconBlockBody`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblockbody) object from the Eth2.0 spec.'\n                  properties:\n                    randao_reveal:\n                      allOf:\n                        - type: string\n                          pattern: '^0x[a-fA-F0-9]{192}$'\n                          example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n                        - description: The RanDAO reveal value provided by the validator.\n                    eth1_data:\n                      type: object\n                      description: 'The [`Eth1Data`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#eth1data) object from the Eth2.0 spec.'\n                      properties:\n                        deposit_root:\n                          allOf:\n                            - type: string\n                              example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                              pattern: '^0x[a-fA-F0-9]{64}$'\n                            - description: Root of the deposit tree.\n                        deposit_count:\n                          allOf:\n                            - type: string\n                              example: '1'\n                            - description: Total number of deposits.\n                        block_hash:\n                          allOf:\n                            - type: string\n                              example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                              pattern: '^0x[a-fA-F0-9]{64}$'\n                            - description: Ethereum 1.x block hash.\n                    graffiti:\n                      type: string\n                      pattern: '^0x[a-fA-F0-9]{64}$'\n                    proposer_slashings:\n                      type: array\n                      items:\n                        type: object\n                        description: 'The [`ProposerSlashing`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#proposerslashing) object from the Eth2.0 spec.'\n                        properties:\n                          signed_header_1:\n                            type: object\n                            description: 'The [`SignedBeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the Eth2.0 spec.'\n                            properties:\n                              message:\n                                description: 'The [`BeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblockheader) object from the Eth2.0 spec.'\n                                allOf:\n                                  - type: object\n                                    properties:\n                                      slot:\n                                        allOf:\n                                          - type: string\n                                            example: '1'\n                                          - description: The slot to which this block corresponds.\n                                      proposer_index:\n                                        allOf:\n                                          - type: string\n                                            example: '1'\n                                          - description: Index of validator in validator registry.\n                                      parent_root:\n                                        allOf:\n                                          - type: string\n                                            example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                            pattern: '^0x[a-fA-F0-9]{64}$'\n                                          - description: The signing merkle root of the parent `BeaconBlock`.\n                                      state_root:\n                                        allOf:\n                                          - type: string\n                                            example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                            pattern: '^0x[a-fA-F0-9]{64}$'\n                                          - description: The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.\n                                  - type: object\n                                    properties:\n                                      body_root:\n                                        allOf:\n                                          - type: string\n                                            example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                            pattern: '^0x[a-fA-F0-9]{64}$'\n                                          - description: The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`\n                              signature:\n                                type: string\n                                pattern: '^0x[a-fA-F0-9]{192}$'\n                                example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n                          signed_header_2:\n                            type: object\n                            description: 'The [`SignedBeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the Eth2.0 spec.'\n                            properties:\n                              message:\n                                description: 'The [`BeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblockheader) object from the Eth2.0 spec.'\n                                allOf:\n                                  - type: object\n                                    properties:\n                                      slot:\n                                        allOf:\n                                          - type: string\n                                            example: '1'\n                                          - description: The slot to which this block corresponds.\n                                      proposer_index:\n                                        allOf:\n                                          - type: string\n                                            example: '1'\n                                          - description: Index of validator in validator registry.\n                                      parent_root:\n                                        allOf:\n                                          - type: string\n                                            example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                            pattern: '^0x[a-fA-F0-9]{64}$'\n                                          - description: The signing merkle root of the parent `BeaconBlock`.\n                                      state_root:\n                                        allOf:\n                                          - type: string\n                                            example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                            pattern: '^0x[a-fA-F0-9]{64}$'\n                                          - description: The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.\n                                  - type: object\n                                    properties:\n                                      body_root:\n                                        allOf:\n                                          - type: string\n                                            example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                            pattern: '^0x[a-fA-F0-9]{64}$'\n                                          - description: The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`\n                              signature:\n                                type: string\n                                pattern: '^0x[a-fA-F0-9]{192}$'\n                                example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n                    attester_slashings:\n                      type: array\n                      items:\n                        type: object\n                        description: 'The [`AttesterSlashing`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/core/0_beacon-chain.md#attesterslashing) object from the Eth2.0 spec.'\n                        properties:\n                          attestation_1:\n                            type: object\n                            description: 'The [`IndexedAttestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#indexedattestation) object from the Eth2.0 spec.'\n                            properties:\n                              attesting_indices:\n                                type: array\n                                maxItems: 2048\n                                description: Attesting validator indices\n                                items:\n                                  type: string\n                                  example: '1'\n                              signature:\n                                allOf:\n                                  - type: string\n                                    pattern: '^0x[a-fA-F0-9]{192}$'\n                                    example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n                                  - description: 'The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.'\n                              data:\n                                type: object\n                                description: 'The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata) object from the Eth2.0 spec.'\n                                properties:\n                                  slot:\n                                    type: string\n                                    example: '1'\n                                  index:\n                                    type: string\n                                    example: '1'\n                                  beacon_block_root:\n                                    allOf:\n                                      - type: string\n                                        example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                        pattern: '^0x[a-fA-F0-9]{64}$'\n                                      - description: LMD GHOST vote.\n                                  source:\n                                    type: object\n                                    description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                                    properties:\n                                      epoch:\n                                        type: string\n                                        example: '1'\n                                      root:\n                                        type: string\n                                        example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                        pattern: '^0x[a-fA-F0-9]{64}$'\n                                  target:\n                                    type: object\n                                    description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                                    properties:\n                                      epoch:\n                                        type: string\n                                        example: '1'\n                                      root:\n                                        type: string\n                                        example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                        pattern: '^0x[a-fA-F0-9]{64}$'\n                          attestation_2:\n                            type: object\n                            description: 'The [`IndexedAttestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#indexedattestation) object from the Eth2.0 spec.'\n                            properties:\n                              attesting_indices:\n                                type: array\n                                maxItems: 2048\n                                description: Attesting validator indices\n                                items:\n                                  type: string\n                                  example: '1'\n                              signature:\n                                allOf:\n                                  - type: string\n                                    pattern: '^0x[a-fA-F0-9]{192}$'\n                                    example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n                                  - description: 'The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.'\n                              data:\n                                type: object\n                                description: 'The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata) object from the Eth2.0 spec.'\n                                properties:\n                                  slot:\n                                    type: string\n                                    example: '1'\n                                  index:\n                                    type: string\n                                    example: '1'\n                                  beacon_block_root:\n                                    allOf:\n                                      - type: string\n                                        example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                        pattern: '^0x[a-fA-F0-9]{64}$'\n                                      - description: LMD GHOST vote.\n                                  source:\n                                    type: object\n                                    description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                                    properties:\n                                      epoch:\n                                        type: string\n                                        example: '1'\n                                      root:\n                                        type: string\n                                        example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                        pattern: '^0x[a-fA-F0-9]{64}$'\n                                  target:\n                                    type: object\n                                    description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                                    properties:\n                                      epoch:\n                                        type: string\n                                        example: '1'\n                                      root:\n                                        type: string\n                                        example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                        pattern: '^0x[a-fA-F0-9]{64}$'\n                    attestations:\n                      type: array\n                      items:\n                        type: object\n                        description: 'The [`Attestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestation) object from the Eth2.0 spec.'\n                        properties:\n                          aggregation_bits:\n                            type: string\n                            example: '0x01'\n                            pattern: '^0x[a-fA-F0-9]+$'\n                            description: Attester aggregation bits.\n                          signature:\n                            allOf:\n                              - type: string\n                                pattern: '^0x[a-fA-F0-9]{192}$'\n                                example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n                              - description: BLS aggregate signature.\n                          data:\n                            type: object\n                            description: 'The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata) object from the Eth2.0 spec.'\n                            properties:\n                              slot:\n                                type: string\n                                example: '1'\n                              index:\n                                type: string\n                                example: '1'\n                              beacon_block_root:\n                                allOf:\n                                  - type: string\n                                    example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                    pattern: '^0x[a-fA-F0-9]{64}$'\n                                  - description: LMD GHOST vote.\n                              source:\n                                type: object\n                                description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                                properties:\n                                  epoch:\n                                    type: string\n                                    example: '1'\n                                  root:\n                                    type: string\n                                    example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                    pattern: '^0x[a-fA-F0-9]{64}$'\n                              target:\n                                type: object\n                                description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                                properties:\n                                  epoch:\n                                    type: string\n                                    example: '1'\n                                  root:\n                                    type: string\n                                    example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                    pattern: '^0x[a-fA-F0-9]{64}$'\n                    deposits:\n                      type: array\n                      items:\n                        type: object\n                        description: 'The [`Deposit`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#deposit) object from the Eth2.0 spec.'\n                        properties:\n                          proof:\n                            type: array\n                            description: Branch in the deposit tree.\n                            items:\n                              allOf:\n                                - type: string\n                                  example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                  pattern: '^0x[a-fA-F0-9]{64}$'\n                            minItems: 32\n                            maxItems: 32\n                          data:\n                            type: object\n                            description: 'The [`DepositData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#depositdata) object from the Eth2.0 spec.'\n                            properties:\n                              pubkey:\n                                type: string\n                                pattern: '^0x[a-fA-F0-9]{96}$'\n                                description: 'The validator''s BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._'\n                                example: '0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a'\n                              withdrawal_credentials:\n                                allOf:\n                                  - type: string\n                                    example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                                    pattern: '^0x[a-fA-F0-9]{64}$'\n                                  - description: The withdrawal credentials.\n                              amount:\n                                allOf:\n                                  - type: string\n                                    example: '1'\n                                  - description: Amount in Gwei.\n                              signature:\n                                allOf:\n                                  - type: string\n                                    pattern: '^0x[a-fA-F0-9]{192}$'\n                                    example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n                                  - description: Container self-signature.\n                    voluntary_exits:\n                      type: array\n                      items:\n                        type: object\n                        description: 'The [`SignedVoluntaryExit`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#signedvoluntaryexit) object from the Eth2.0 spec.'\n                        properties:\n                          message:\n                            type: object\n                            description: 'The [`VoluntaryExit`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#voluntaryexit) object from the Eth2.0 spec.'\n                            properties:\n                              epoch:\n                                allOf:\n                                  - type: string\n                                    example: '1'\n                                  - description: Minimum epoch for processing exit.\n                              validator_index:\n                                allOf:\n                                  - type: string\n                                    example: '1'\n                                  - description: Index of the exiting validator.\n                          signature:\n                            type: string\n                            pattern: '^0x[a-fA-F0-9]{192}$'\n                            example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n        signature:\n          type: string\n          pattern: '^0x[a-fA-F0-9]{192}$'\n          example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n    SignedBeaconBlockHeader:\n      type: object\n      description: 'The [`SignedBeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the Eth2.0 spec.'\n      properties:\n        message:\n          description: 'The [`BeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblockheader) object from the Eth2.0 spec.'\n          allOf:\n            - type: object\n              properties:\n                slot:\n                  allOf:\n                    - type: string\n                      example: '1'\n                    - description: The slot to which this block corresponds.\n                proposer_index:\n                  allOf:\n                    - type: string\n                      example: '1'\n                    - description: Index of validator in validator registry.\n                parent_root:\n                  allOf:\n                    - type: string\n                      example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                      pattern: '^0x[a-fA-F0-9]{64}$'\n                    - description: The signing merkle root of the parent `BeaconBlock`.\n                state_root:\n                  allOf:\n                    - type: string\n                      example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                      pattern: '^0x[a-fA-F0-9]{64}$'\n                    - description: The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.\n            - type: object\n              properties:\n                body_root:\n                  allOf:\n                    - type: string\n                      example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                      pattern: '^0x[a-fA-F0-9]{64}$'\n                    - description: The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`\n        signature:\n          type: string\n          pattern: '^0x[a-fA-F0-9]{192}$'\n          example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n    ValidatorResponse:\n      type: object\n      properties:\n        index:\n          allOf:\n            - type: string\n              example: '1'\n            - description: Index of validator in validator registry.\n        balance:\n          allOf:\n            - type: string\n              example: '1'\n            - description: Current validator balance in gwei.\n        status:\n          description: |\n            Possible statuses:\n            - **pending_initialized** - When the first deposit is processed, but not enough funds are available (or not yet the end of the first epoch) to get validator into the activation queue.\n            - **pending_queued** - When validator is waiting to get activated, and have enough funds etc. while in the queue, validator activation epoch keeps changing until it gets to the front and make it through (finalization is a requirement here too).\n            - **active_ongoing** - When validator must be attesting, and have not initiated any exit.\n            - **active_exiting** - When validator is still active, but filed a voluntary request to exit.\n            - **active_slashed** - When validator is still active, but have a slashed status and is scheduled to exit.\n            - **exited_unslashed** - When validator has reached reguler exit epoch, not being slashed, and doesn't have to attest any more, but cannot withdraw yet.\n            - **exited_slashed** - When validator has reached reguler exit epoch, but was slashed, have to wait for a longer withdrawal period.\n            - **withdrawal_possible** - After validator has exited, a while later is permitted to move funds, and is truly out of the system.\n            - **withdrawal_done** - (not possible in phase0, except slashing full balance) - actually having moved funds away\n\n            [Validator status specification](https://hackmd.io/ofFJ5gOmQpu1jjHilHbdQQ)\n          enum:\n            - pending_initialized\n            - pending_queued\n            - active_ongoing\n            - active_exiting\n            - active_slashed\n            - exited_unslashed\n            - exited_slashed\n            - withdrawal_possible\n            - withdrawal_done\n          example: active_ongoing\n        validator:\n          type: object\n          properties:\n            pubkey:\n              type: string\n              pattern: '^0x[a-fA-F0-9]{96}$'\n              description: 'The validator''s BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._'\n              example: '0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a'\n            withdrawal_credentials:\n              allOf:\n                - type: string\n                  example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                  pattern: '^0x[a-fA-F0-9]{64}$'\n                - description: Root of withdrawal credentials\n            effective_balance:\n              allOf:\n                - type: string\n                  example: '1'\n                - description: Balance at stake in Gwei.\n            slashed:\n              type: boolean\n              example: false\n              description: Was validator slashed (not longer active).\n            activation_eligibility_epoch:\n              allOf:\n                - type: string\n                  example: '1'\n                - description: When criteria for activation were met.\n            activation_epoch:\n              allOf:\n                - type: string\n                  example: '1'\n                - description: Epoch when validator activated. 'FAR_FUTURE_EPOCH' if not activated\n            exit_epoch:\n              allOf:\n                - type: string\n                  example: '1'\n                - description: Epoch when validator exited. 'FAR_FUTURE_EPOCH' if not exited.\n            withdrawable_epoch:\n              allOf:\n                - type: string\n                  example: '1'\n                - description: When validator can withdraw or transfer funds. 'FAR_FUTURE_EPOCH' if not defined\n    ValidatorBalanceResponse:\n      type: object\n      properties:\n        index:\n          allOf:\n            - type: string\n              example: '1'\n            - description: Index of validator in validator registry.\n        balance:\n          allOf:\n            - type: string\n              example: '1'\n            - description: Current validator balance in gwei.\n    ValidatorStatus:\n      description: |\n        Possible statuses:\n        - **pending_initialized** - When the first deposit is processed, but not enough funds are available (or not yet the end of the first epoch) to get validator into the activation queue.\n        - **pending_queued** - When validator is waiting to get activated, and have enough funds etc. while in the queue, validator activation epoch keeps changing until it gets to the front and make it through (finalization is a requirement here too).\n        - **active_ongoing** - When validator must be attesting, and have not initiated any exit.\n        - **active_exiting** - When validator is still active, but filed a voluntary request to exit.\n        - **active_slashed** - When validator is still active, but have a slashed status and is scheduled to exit.\n        - **exited_unslashed** - When validator has reached reguler exit epoch, not being slashed, and doesn't have to attest any more, but cannot withdraw yet.\n        - **exited_slashed** - When validator has reached reguler exit epoch, but was slashed, have to wait for a longer withdrawal period.\n        - **withdrawal_possible** - After validator has exited, a while later is permitted to move funds, and is truly out of the system.\n        - **withdrawal_done** - (not possible in phase0, except slashing full balance) - actually having moved funds away\n\n        [Validator status specification](https://hackmd.io/ofFJ5gOmQpu1jjHilHbdQQ)\n      enum:\n        - pending_initialized\n        - pending_queued\n        - active_ongoing\n        - active_exiting\n        - active_slashed\n        - exited_unslashed\n        - exited_slashed\n        - withdrawal_possible\n        - withdrawal_done\n      example: active_ongoing\n    Committee:\n      description: Group of validators assigned to attest at specific slot and that have the same committee index (shard in phase 1)\n      type: object\n      properties:\n        index:\n          allOf:\n            - type: string\n              example: '1'\n            - description: Committee index at a slot\n        slot:\n          type: string\n          example: '1'\n        validators:\n          type: array\n          description: List of validator indices assigned to this committee\n          items:\n            type: string\n            example: '1'\n    AttesterSlashing:\n      type: object\n      description: 'The [`AttesterSlashing`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/core/0_beacon-chain.md#attesterslashing) object from the Eth2.0 spec.'\n      properties:\n        attestation_1:\n          type: object\n          description: 'The [`IndexedAttestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#indexedattestation) object from the Eth2.0 spec.'\n          properties:\n            attesting_indices:\n              type: array\n              maxItems: 2048\n              description: Attesting validator indices\n              items:\n                type: string\n                example: '1'\n            signature:\n              allOf:\n                - type: string\n                  pattern: '^0x[a-fA-F0-9]{192}$'\n                  example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n                - description: 'The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.'\n            data:\n              type: object\n              description: 'The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata) object from the Eth2.0 spec.'\n              properties:\n                slot:\n                  type: string\n                  example: '1'\n                index:\n                  type: string\n                  example: '1'\n                beacon_block_root:\n                  allOf:\n                    - type: string\n                      example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                      pattern: '^0x[a-fA-F0-9]{64}$'\n                    - description: LMD GHOST vote.\n                source:\n                  type: object\n                  description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                  properties:\n                    epoch:\n                      type: string\n                      example: '1'\n                    root:\n                      type: string\n                      example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                      pattern: '^0x[a-fA-F0-9]{64}$'\n                target:\n                  type: object\n                  description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                  properties:\n                    epoch:\n                      type: string\n                      example: '1'\n                    root:\n                      type: string\n                      example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                      pattern: '^0x[a-fA-F0-9]{64}$'\n        attestation_2:\n          type: object\n          description: 'The [`IndexedAttestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#indexedattestation) object from the Eth2.0 spec.'\n          properties:\n            attesting_indices:\n              type: array\n              maxItems: 2048\n              description: Attesting validator indices\n              items:\n                type: string\n                example: '1'\n            signature:\n              allOf:\n                - type: string\n                  pattern: '^0x[a-fA-F0-9]{192}$'\n                  example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n                - description: 'The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.'\n            data:\n              type: object\n              description: 'The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata) object from the Eth2.0 spec.'\n              properties:\n                slot:\n                  type: string\n                  example: '1'\n                index:\n                  type: string\n                  example: '1'\n                beacon_block_root:\n                  allOf:\n                    - type: string\n                      example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                      pattern: '^0x[a-fA-F0-9]{64}$'\n                    - description: LMD GHOST vote.\n                source:\n                  type: object\n                  description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                  properties:\n                    epoch:\n                      type: string\n                      example: '1'\n                    root:\n                      type: string\n                      example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                      pattern: '^0x[a-fA-F0-9]{64}$'\n                target:\n                  type: object\n                  description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                  properties:\n                    epoch:\n                      type: string\n                      example: '1'\n                    root:\n                      type: string\n                      example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                      pattern: '^0x[a-fA-F0-9]{64}$'\n    ProposerSlashing:\n      type: object\n      description: 'The [`ProposerSlashing`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#proposerslashing) object from the Eth2.0 spec.'\n      properties:\n        signed_header_1:\n          type: object\n          description: 'The [`SignedBeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the Eth2.0 spec.'\n          properties:\n            message:\n              description: 'The [`BeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblockheader) object from the Eth2.0 spec.'\n              allOf:\n                - type: object\n                  properties:\n                    slot:\n                      allOf:\n                        - type: string\n                          example: '1'\n                        - description: The slot to which this block corresponds.\n                    proposer_index:\n                      allOf:\n                        - type: string\n                          example: '1'\n                        - description: Index of validator in validator registry.\n                    parent_root:\n                      allOf:\n                        - type: string\n                          example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                          pattern: '^0x[a-fA-F0-9]{64}$'\n                        - description: The signing merkle root of the parent `BeaconBlock`.\n                    state_root:\n                      allOf:\n                        - type: string\n                          example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                          pattern: '^0x[a-fA-F0-9]{64}$'\n                        - description: The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.\n                - type: object\n                  properties:\n                    body_root:\n                      allOf:\n                        - type: string\n                          example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                          pattern: '^0x[a-fA-F0-9]{64}$'\n                        - description: The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`\n            signature:\n              type: string\n              pattern: '^0x[a-fA-F0-9]{192}$'\n              example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n        signed_header_2:\n          type: object\n          description: 'The [`SignedBeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the Eth2.0 spec.'\n          properties:\n            message:\n              description: 'The [`BeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblockheader) object from the Eth2.0 spec.'\n              allOf:\n                - type: object\n                  properties:\n                    slot:\n                      allOf:\n                        - type: string\n                          example: '1'\n                        - description: The slot to which this block corresponds.\n                    proposer_index:\n                      allOf:\n                        - type: string\n                          example: '1'\n                        - description: Index of validator in validator registry.\n                    parent_root:\n                      allOf:\n                        - type: string\n                          example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                          pattern: '^0x[a-fA-F0-9]{64}$'\n                        - description: The signing merkle root of the parent `BeaconBlock`.\n                    state_root:\n                      allOf:\n                        - type: string\n                          example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                          pattern: '^0x[a-fA-F0-9]{64}$'\n                        - description: The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.\n                - type: object\n                  properties:\n                    body_root:\n                      allOf:\n                        - type: string\n                          example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                          pattern: '^0x[a-fA-F0-9]{64}$'\n                        - description: The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`\n            signature:\n              type: string\n              pattern: '^0x[a-fA-F0-9]{192}$'\n              example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n    SignedVoluntaryExit:\n      type: object\n      description: 'The [`SignedVoluntaryExit`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#signedvoluntaryexit) object from the Eth2.0 spec.'\n      properties:\n        message:\n          type: object\n          description: 'The [`VoluntaryExit`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#voluntaryexit) object from the Eth2.0 spec.'\n          properties:\n            epoch:\n              allOf:\n                - type: string\n                  example: '1'\n                - description: Minimum epoch for processing exit.\n            validator_index:\n              allOf:\n                - type: string\n                  example: '1'\n                - description: Index of the exiting validator.\n        signature:\n          type: string\n          pattern: '^0x[a-fA-F0-9]{192}$'\n          example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n    AttesterDuty:\n      type: object\n      properties:\n        pubkey:\n          type: string\n          pattern: '^0x[a-fA-F0-9]{96}$'\n          description: 'The validator''s BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._'\n          example: '0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a'\n        validator_index:\n          allOf:\n            - type: string\n              example: '1'\n            - description: Index of validator in validator registry\n        committee_index:\n          allOf:\n            - type: string\n              example: '1'\n            - description: The committee index\n        committee_length:\n          allOf:\n            - type: string\n              example: '1'\n            - description: Number of validators in committee\n        committees_at_slot:\n          allOf:\n            - type: string\n              example: '1'\n            - description: Number of committees at the provided slot\n        validator_committee_index:\n          allOf:\n            - type: string\n              example: '1'\n            - description: Index of validator in committee\n        slot:\n          allOf:\n            - type: string\n              example: '1'\n            - description: The slot at which the validator must attest.\n    ProposerDuty:\n      type: object\n      properties:\n        pubkey:\n          type: string\n          pattern: '^0x[a-fA-F0-9]{96}$'\n          description: 'The validator''s BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._'\n          example: '0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a'\n        validator_index:\n          allOf:\n            - type: string\n              example: '1'\n            - description: Index of validator in validator registry.\n        slot:\n          allOf:\n            - type: string\n              example: '1'\n            - description: The slot at which the validator must propose block.\n    SignedAggregateAndProof:\n      description: 'The [`SignedAggregateAndProof`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/validator.md#signedaggregateandproof) object'\n      properties:\n        message:\n          allOf:\n            - type: object\n              description: 'The [`AggregateAndProof`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/validator.md#aggregateandproof) without selection_proof'\n              properties:\n                aggregator_index:\n                  type: string\n                  example: '1'\n                attestation:\n                  type: object\n                  description: 'The [`Attestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestation) object from the Eth2.0 spec.'\n                  properties:\n                    aggregation_bits:\n                      type: string\n                      example: '0x01'\n                      pattern: '^0x[a-fA-F0-9]+$'\n                      description: Attester aggregation bits.\n                    signature:\n                      allOf:\n                        - type: string\n                          pattern: '^0x[a-fA-F0-9]{192}$'\n                          example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n                        - description: BLS aggregate signature.\n                    data:\n                      type: object\n                      description: 'The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata) object from the Eth2.0 spec.'\n                      properties:\n                        slot:\n                          type: string\n                          example: '1'\n                        index:\n                          type: string\n                          example: '1'\n                        beacon_block_root:\n                          allOf:\n                            - type: string\n                              example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                              pattern: '^0x[a-fA-F0-9]{64}$'\n                            - description: LMD GHOST vote.\n                        source:\n                          type: object\n                          description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                          properties:\n                            epoch:\n                              type: string\n                              example: '1'\n                            root:\n                              type: string\n                              example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                              pattern: '^0x[a-fA-F0-9]{64}$'\n                        target:\n                          type: object\n                          description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n                          properties:\n                            epoch:\n                              type: string\n                              example: '1'\n                            root:\n                              type: string\n                              example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                              pattern: '^0x[a-fA-F0-9]{64}$'\n            - type: object\n              properties:\n                selection_proof:\n                  type: string\n                  pattern: '^0x[a-fA-F0-9]{192}$'\n                  example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n        signature:\n          type: string\n          pattern: '^0x[a-fA-F0-9]{192}$'\n          example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n    Attestation:\n      type: object\n      description: 'The [`Attestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestation) object from the Eth2.0 spec.'\n      properties:\n        aggregation_bits:\n          type: string\n          example: '0x01'\n          pattern: '^0x[a-fA-F0-9]+$'\n          description: Attester aggregation bits.\n        signature:\n          allOf:\n            - type: string\n              pattern: '^0x[a-fA-F0-9]{192}$'\n              example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n            - description: BLS aggregate signature.\n        data:\n          type: object\n          description: 'The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata) object from the Eth2.0 spec.'\n          properties:\n            slot:\n              type: string\n              example: '1'\n            index:\n              type: string\n              example: '1'\n            beacon_block_root:\n              allOf:\n                - type: string\n                  example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                  pattern: '^0x[a-fA-F0-9]{64}$'\n                - description: LMD GHOST vote.\n            source:\n              type: object\n              description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n              properties:\n                epoch:\n                  type: string\n                  example: '1'\n                root:\n                  type: string\n                  example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                  pattern: '^0x[a-fA-F0-9]{64}$'\n            target:\n              type: object\n              description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n              properties:\n                epoch:\n                  type: string\n                  example: '1'\n                root:\n                  type: string\n                  example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n                  pattern: '^0x[a-fA-F0-9]{64}$'\n    AttestationData:\n      type: object\n      description: 'The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata) object from the Eth2.0 spec.'\n      properties:\n        slot:\n          type: string\n          example: '1'\n        index:\n          type: string\n          example: '1'\n        beacon_block_root:\n          allOf:\n            - type: string\n              example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n              pattern: '^0x[a-fA-F0-9]{64}$'\n            - description: LMD GHOST vote.\n        source:\n          type: object\n          description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n          properties:\n            epoch:\n              type: string\n              example: '1'\n            root:\n              type: string\n              example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n              pattern: '^0x[a-fA-F0-9]{64}$'\n        target:\n          type: object\n          description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n          properties:\n            epoch:\n              type: string\n              example: '1'\n            root:\n              type: string\n              example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n              pattern: '^0x[a-fA-F0-9]{64}$'\n    Fork:\n      type: object\n      description: 'The [`Fork`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#fork) object from the Eth2.0 spec.'\n      properties:\n        previous_version:\n          type: string\n          description: a fork version number\n          example: '0x00000000'\n          pattern: '^0x[a-fA-F0-9]{8}$'\n        current_version:\n          type: string\n          description: a fork version number\n          example: '0x00000000'\n          pattern: '^0x[a-fA-F0-9]{8}$'\n        epoch:\n          type: string\n          example: '1'\n    Checkpoint:\n      type: object\n      description: 'The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint'\n      properties:\n        epoch:\n          type: string\n          example: '1'\n        root:\n          type: string\n          example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n          pattern: '^0x[a-fA-F0-9]{64}$'\n    Uint64:\n      type: string\n      example: '1'\n    NetworkIdentity:\n      type: object\n      properties:\n        peer_id:\n          type: string\n          description: 'Cryptographic hash of a peer’s public key. [Read more](https://docs.libp2p.io/concepts/peer-id/)'\n          example: QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N\n        enr:\n          type: string\n          description: 'Ethereum node record. [Read more](https://eips.ethereum.org/EIPS/eip-778)'\n          example: 'enr:-IS4QHCYrYZbAKWCBRlAy5zzaDZXJBGkcnh4MHcBFZntXNFrdvJjX04jRzjzCBOonrkTfj499SZuOh8R33Ls8RRcy5wBgmlkgnY0gmlwhH8AAAGJc2VjcDI1NmsxoQPKY0yuDUmstAHYpMa2_oxVtw0RW_QAdpzBQA8yWM0xOIN1ZHCCdl8'\n        p2p_addresses:\n          type: array\n          items:\n            allOf:\n              - type: string\n                description: '[Read more](https://docs.libp2p.io/reference/glossary/#multiaddr)'\n                example: /ip4/7.7.7.7/tcp/4242/p2p/QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N\n              - description: 'Node''s addresses on which eth2 rpc requests are served. [Read more](https://docs.libp2p.io/reference/glossary/#multiaddr)'\n        discovery_addresses:\n          type: array\n          items:\n            allOf:\n              - type: string\n                description: '[Read more](https://docs.libp2p.io/reference/glossary/#multiaddr)'\n                example: /ip4/7.7.7.7/tcp/4242/p2p/QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N\n              - description: 'Node''s addresses on which is listening for discv5 requests. [Read more](https://docs.libp2p.io/reference/glossary/#multiaddr)'\n        metadata:\n          type: object\n          description: 'Based on eth2 [Metadata object](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/p2p-interface.md#metadata)'\n          properties:\n            seq_number:\n              allOf:\n                - description: 'Uint64 starting at 0 used to version the node''s metadata. If any other field in the local MetaData changes, the node MUST increment seq_number by 1.'\n                - type: string\n                  example: '1'\n            attnets:\n              allOf:\n                - description: Bitvector representing the node's persistent attestation subnet subscriptions.\n                - type: string\n                  pattern: '^0x[a-fA-F0-9]{2,}$'\n    Peer:\n      type: object\n      properties:\n        peer_id:\n          type: string\n          description: 'Cryptographic hash of a peer’s public key. [Read more](https://docs.libp2p.io/concepts/peer-id/)'\n          example: QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N\n        enr:\n          allOf:\n            - type: string\n              description: 'Ethereum node record. [Read more](https://eips.ethereum.org/EIPS/eip-778)'\n              example: 'enr:-IS4QHCYrYZbAKWCBRlAy5zzaDZXJBGkcnh4MHcBFZntXNFrdvJjX04jRzjzCBOonrkTfj499SZuOh8R33Ls8RRcy5wBgmlkgnY0gmlwhH8AAAGJc2VjcDI1NmsxoQPKY0yuDUmstAHYpMa2_oxVtw0RW_QAdpzBQA8yWM0xOIN1ZHCCdl8'\n            - nullable: true\n        address:\n          type: string\n          description: '[Read more](https://docs.libp2p.io/reference/glossary/#multiaddr)'\n          example: /ip4/7.7.7.7/tcp/4242/p2p/QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N\n        state:\n          type: string\n          enum:\n            - disconnected\n            - connecting\n            - connected\n            - disconnecting\n        direction:\n          type: string\n          enum:\n            - inbound\n            - outbound\n    PeerId:\n      type: string\n      description: 'Cryptographic hash of a peer’s public key. [Read more](https://docs.libp2p.io/concepts/peer-id/)'\n      example: QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N\n    GenesisTime:\n      allOf:\n        - type: string\n          example: '1'\n        - example: '1590832934'\n        - description: 'The genesis_time configured for the beacon node, which is the unix time in seconds at which the Eth2.0 chain began.'\n    Version:\n      type: string\n      description: 'A string which uniquely identifies the client implementation and its version; similar to [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3).'\n      example: Lighthouse/v0.1.5 (Linux x86_64)\n    ForkVersion:\n      type: string\n      description: a fork version number\n      example: '0x00000000'\n      pattern: '^0x[a-fA-F0-9]{8}$'\n    Root:\n      type: string\n      example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n      pattern: '^0x[a-fA-F0-9]{64}$'\n    Hex:\n      type: string\n      pattern: '^0x[a-fA-F0-9]{2,}$'\n    Graffiti:\n      type: string\n      format: hex\n      example: '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2'\n      pattern: '^0x[a-fA-F0-9]{64}$'\n    Signature:\n      type: string\n      pattern: '^0x[a-fA-F0-9]{192}$'\n      example: '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505'\n    ErrorMessage:\n      type: object\n      properties:\n        code:\n          description: Either specific error code in case of invalid request or http status code\n          type: number\n          example: 404\n        message:\n          description: Message describing error\n          type: string\n        stacktraces:\n          description: 'Optional stacktraces, sent when node is in debug mode'\n          type: array\n          items:\n            type: string\n  parameters:\n    StateId:\n      name: state_id\n      in: path\n      required: true\n      example: head\n      schema:\n        type: string\n      description: |\n        State identifier.\n        Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\\u003cslot\\\u003e, \\\u003chex encoded stateRoot with 0x prefix\\\u003e.\n    BlockId:\n      name: block_id\n      in: path\n      required: true\n      example: head\n      schema:\n        type: string\n      description: |\n        Block identifier.\n        Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \\\u003cslot\\\u003e, \\\u003chex encoded blockRoot with 0x prefix\\\u003e.\n  responses:\n    InvalidRequest:\n      description: Invalid request syntax.\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              code:\n                description: Either specific error code in case of invalid request or http status code\n                type: number\n                example: 400\n              message:\n                description: Message describing error\n                type: string\n              stacktraces:\n                description: 'Optional stacktraces, sent when node is in debug mode'\n                type: array\n                items:\n                  type: string\n    InternalError:\n      description: Beacon node internal error.\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              code:\n                description: Either specific error code in case of invalid request or http status code\n                type: number\n                example: 404\n              message:\n                description: Message describing error\n                type: string\n              stacktraces:\n                description: 'Optional stacktraces, sent when node is in debug mode'\n                type: array\n                items:\n                  type: string\n          example:\n            code: 500\n            message: Internal server error\n    CurrentlySyncing:\n      description: 'Beacon node is currently syncing, try again later.'\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              code:\n                description: Either specific error code in case of invalid request or http status code\n                type: number\n                example: 404\n              message:\n                description: Message describing error\n                type: string\n              stacktraces:\n                description: 'Optional stacktraces, sent when node is in debug mode'\n                type: array\n                items:\n                  type: string\n          example:\n            code: 503\n            message: Beacon node is currently syncing and not serving request on that endpoint\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /eth/v1/beacon/headers: get: operation \"getBlockHeaders\": parameters: parse parameter \"slot\": invalid schema:style:explode combination: (\"\":\"form\":true)"
}