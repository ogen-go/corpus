{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/someengineering/resoto"
		},
		"file": {
			"name": "api-doc.yaml",
			"size": 0,
			"path": "resotocore/resotocore/static/api-doc.yaml",
			"byteSize": 102718,
			"content": "openapi: 3.0.0\nservers:\n    -   url: ../\n        description: current system\ninfo:\n    description: API provided by resotocore\n    version: V1\n    title: resotocore REST API\ntags:\n    -   name: graph_search\n        description: Endpoints to search all sections of the graph.\n    -   name: graph_management\n        description: Create, update wipe or delete a complete graph.\n    -   name: node_management\n        description: Create, update, delete and get a node in the graph.\n    -   name: model\n        description: Endpoints to maintain the schema and model of the entities inside a graph.\n    -   name: config\n        description: Endpoints to maintain configuration data.\n    -   name: cli\n        description: Endpoints to evaluate and execute cli commands.\n    -   name: subscriptions\n        description: Endpoints to manipulate event subscriptions.\n    -   name: work_queue\n        description: Endpoints to attach to the work queue.\n    -   name: certificate\n        description: Endpoints to access the certificate authority as well as signing functionality.\n    -   name: system\n        description: Endpoints to get information about the system.\n    -   name: debug\n        description: Endpoints to debug the system.\n\npaths:\n\n    # region model\n    /model:\n        get:\n            summary: \"Get the currently defined model.\"\n            tags:\n                - model\n            responses:\n                \"200\":\n                    description: \"The list of all kinds.\"\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Kind\"\n        patch:\n            summary: \"Add or update the current defined model.\"\n            tags:\n                - model\n            requestBody:\n                description: \"Complete model or part of the model.\"\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/Kind\"\n            responses:\n                \"200\":\n                    description: \"OK if the model is updated successfully\"\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Kind\"\n                \"400\":\n                    description: \"Message that explains the error\"\n                    content:\n                        text/plain:\n                            schema:\n                                type: string\n    /model/uml:\n        get:\n            summary: \"Get the currently defined model as svg uml image.\"\n            tags:\n                - model\n            parameters:\n                - name: show\n                  description: comma separated list of resources to show. Entries can be regexps.\n                  in: query\n                  schema:\n                      type: string\n                  required: false\n                  explode: false\n                  example: aws_ec2_instance,gcp.*\n                - name: hide\n                  description: |\n                      comma separated list of resources to hide. Entries can be regexps.\n                      hide takes precedence over show.\n                  in: query\n                  schema:\n                      type: string\n                  required: false\n                  explode: false\n                  example: aws_ec2_instance,gcp.*\n                - name: with_bases\n                  description: Include all base classes of visible entries\n                  in: query\n                  schema:\n                      type: boolean\n                      default: true\n                - name: with_descendants\n                  description: Include all descendant classes of visible entries\n                  in: query\n                  schema:\n                      type: boolean\n                      default: false\n            responses:\n                \"200\":\n                    description: \"Returns the model as uml diagram in svg format\"\n    # endregion\n\n    # region graph management\n    /graph:\n        get:\n            summary: \"List all graphs\"\n            tags:\n                - graph_management\n            responses:\n                \"200\":\n                    description: \"The names of all graphs\"\n                    content:\n                        application/json:\n                            schema:\n                                type: array\n                                items:\n                                    type: string\n                                example: [ \"main\", \"test\" ]\n    /graph/{graph_id}:\n        get:\n            summary: \"Get root of a specific graph\"\n            tags:\n                - graph_management\n            parameters:\n                -   name: graph_id\n                    in: path\n                    description: \"The identifier of the graph\"\n                    example: resoto\n                    required: true\n                    schema:\n                        type: string\n            responses:\n                \"200\":\n                    description: \"The graph with the root node\"\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Node\"\n                \"404\":\n                    description: \"The graph does not exist\"\n        post:\n            summary: \"Create a new graph\"\n            tags:\n                - graph_management\n            parameters:\n                -   name: graph_id\n                    in: path\n                    description: \"The identifier of the graph\"\n                    example: resoto\n                    required: true\n                    schema:\n                        type: string\n            responses:\n                \"200\":\n                    description: \"The created graph with the root node\"\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Node\"\n        delete:\n            summary: \"Delete an existing graph\"\n            tags:\n                - graph_management\n            parameters:\n                -   name: graph_id\n                    in: path\n                    description: \"The identifier of the graph\"\n                    example: resoto\n                    required: true\n                    schema:\n                        type: string\n                -   name: truncate\n                    in: query\n                    schema:\n                        type: boolean\n                    description: \"If this parameter is set, leave the graph definition, but wipe the data.\"\n            responses:\n                \"200\":\n                    description: \"Ok when the delete operation was successful\"\n                    content:\n                        text/plain:\n                            example: \"Graph deleted.\"\n\n    /graph/{graph_id}/merge:\n        post:\n            summary: \"Merge a given graph with the existing graph under marked merge nodes.\"\n            tags:\n                - graph_management\n            parameters:\n                -   name: graph_id\n                    in: path\n                    description: \"The identifier of the graph\"\n                    example: resoto\n                    required: true\n                    schema:\n                        type: string\n            requestBody:\n                description:\n                    \"The graph is sent as newline delimited json, where each line holds a document, which is either a node or an edge.\"\n                required: true\n                content:\n                    application/x-ndjson:\n                        schema:\n                            oneOf:\n                                -   $ref: \"#/components/schemas/NodeInGraph\"\n                                -   $ref: \"#/components/schemas/Edge\"\n                        example:\n                          # TODO: is there a way to show ndjson instead of json?\n                          [\n                              { \"id\": \"a\", \"data\": { \"kind\": \"loadbalancer\", \"ip\": \"1.2.3.4\", \"mathod\": \"roundrobin\" } },\n                              { \"id\": \"b\", \"data\": { \"kind\": \"compute_instance\", \"machine_type\": \"gt-5\", \"cores\": 24 } },\n                              { \"from\": \"a\", \"to\": \"b\", \"edge_type\": \"default\" },\n                              { \"id\": \"c\", \"data\": { \"kind\": \"compute_instance\", \"machine_type\": \"gt-5\", \"cores\": 24 } },\n                              { \"from\": \"a\", \"to\": \"c\", \"edge_type\": \"default\" }\n                          ]\n            responses:\n                \"200\":\n                    description: \"Return a summary of actions that has been applied.\"\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/GraphUpdate\"\n    /graph/{graph_id}/batch/merge:\n        post:\n            summary: \"Merge a given graph with the existing graph under marked merge nodes as batch update.\"\n            description: |\n                **Experimental**: This API is not stable and might be subject of change.\u003cbr/\u003e\n                Merge a given graph with the existing graph under marked merge nodes as batch update.\n            tags:\n                - graph_management\n            parameters:\n                -   name: graph_id\n                    in: path\n                    description: \"The identifier of the graph\"\n                    example: resoto\n                    required: true\n                    schema:\n                        type: string\n                -   name: batch_id\n                    in: query\n                    description: \u003e\n                        A batch identifier is a string that uniquely identifies the batch update.\n                        If this parameter is omitted, a new batch identifier is created automatically.\n                        The resulting batch identifier can be retrieved via the response message.\n                    required: false\n                    schema:\n                        default: null\n                        type: string\n            requestBody:\n                description:\n                    \"The graph is sent as newline delimited json, where each line holds a document, which is either a node or an edge.\"\n                required: true\n                content:\n                    application/x-ndjson:\n                        schema:\n                            oneOf:\n                                -   $ref: \"#/components/schemas/NodeInGraph\"\n                                -   $ref: \"#/components/schemas/Edge\"\n                        example:\n                          # TODO: is there a way to show ndjson instead of json?\n                          [\n                              { \"id\": \"a\", \"data\": { \"kind\": \"loadbalancer\", \"ip\": \"1.2.3.4\", \"mathod\": \"roundrobin\" } },\n                              { \"id\": \"b\", \"data\": { \"kind\": \"compute_instance\", \"machine_type\": \"gt-5\", \"cores\": 24 } },\n                              { \"from\": \"a\", \"to\": \"b\", \"edge_type\": \"default\" },\n                              { \"id\": \"c\", \"data\": { \"kind\": \"compute_instance\", \"machine_type\": \"gt-5\", \"cores\": 24 } },\n                              { \"from\": \"a\", \"to\": \"c\", \"edge_type\": \"default\" }\n                          ]\n            responses:\n                \"200\":\n                    description: \"Return a summary of actions that has been applied.\"\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/GraphUpdate\"\n    /graph/{graph_id}/batch:\n        get:\n            summary: \"Get a list of all running batch updates\"\n            description: |\n                **Experimental**: This API is not stable and might be subject of change.\u003cbr/\u003e\n                Get a list of all running batch updates.\n            tags:\n                - graph_management\n            parameters:\n                -   name: graph_id\n                    in: path\n                    description: \"The identifier of the graph\"\n                    example: resoto\n                    required: true\n                    schema:\n                        type: string\n            responses:\n                \"200\":\n                    description: \"Ok message\"\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/BatchUpdate\"\n    /graph/{graph_id}/batch/{batch_id}:\n        post:\n            summary: \"Commit a batch update\"\n            description: |\n                **Experimental**: This API is not stable and might be subject of change.\u003cbr/\u003e\n                Commit a batch update.\n            tags:\n                - graph_management\n            parameters:\n                -   name: graph_id\n                    in: path\n                    description: \"The identifier of the graph\"\n                    example: resoto\n                    required: true\n                    schema:\n                        type: string\n                -   name: batch_id\n                    in: path\n                    description: \"A batch identifier is a string that uniquely identifies the batch update.\"\n                    required: true\n                    schema:\n                        type: string\n            responses:\n                \"200\":\n                    description: \"Ok message\"\n                    content:\n                        application/json:\n                            schema:\n                                type: string\n                                example: \"Batch committed.\"\n        delete:\n            summary: \"Abort a batch update\"\n            description: |\n                **Experimental**: This API is not stable and might be subject of change.\u003cbr/\u003e\n                Abort a batch update.\n            tags:\n                - graph_management\n            parameters:\n                -   name: graph_id\n                    in: path\n                    description: \"The identifier of the graph\"\n                    example: resoto\n                    required: true\n                    schema:\n                        type: string\n                -   name: batch_id\n                    in: path\n                    description: \"A batch identifier is a string that uniquely identifies the batch update.\"\n                    required: true\n                    schema:\n                        type: string\n            responses:\n                \"200\":\n                    description: \"Ok message\"\n                    content:\n                        application/json:\n                            schema:\n                                type: string\n                                example: \"Batch aborted.\"\n    # endregion\n\n    # region node management\n    /graph/{graph_id}/nodes:\n        patch:\n            summary: \"Patch a list of nodes.\"\n            description: |\n                Apply a patch on existing nodes. Non existing nodes are not updated!\n                Consider to stream the request body as new line delimited json (application/x-ndjson).\n            tags:\n                - node_management\n            parameters:\n                -   name: graph_id\n                    in: path\n                    description: \"The identifier of the graph\"\n                    example: resoto\n                    required: true\n                    schema:\n                        type: string\n            requestBody:\n                description: \"The partial object data to patch.\"\n                content:\n                    application/x-ndjson:\n                        schema:\n                            type: object\n                            properties:\n                                id:\n                                    type: string\n                                    description: The identifier of the node.\n                                reported:\n                                    type: object\n                                    additionalProperties: true\n                                desired:\n                                    type: object\n                                    additionalProperties: true\n                                metadata:\n                                    type: object\n                                    additionalProperties: true\n\n                    application/json:\n                        schema:\n                            type: array\n                            items:\n                                type: object\n                                properties:\n                                    id:\n                                        type: string\n                                        description: The identifier of the node.\n                                    reported:\n                                        type: object\n                                        additionalProperties: true\n                                    desired:\n                                        type: object\n                                        additionalProperties: true\n                                    metadata:\n                                        type: object\n                                        additionalProperties: true\n\n\n\n\n            responses:\n                \"200\":\n                    description: \"Return the patched node\"\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Node\"\n    /graph/{graph_id}/node/{node_id}/under/{parent_node_id}:\n        post:\n            summary: \"Create a new node under the given parent node\"\n            description: |\n                **Experimental**: This API is not stable and might be subject of change.\u003cbr/\u003e\n                Create a new node under the given parent node.\n            tags:\n                - node_management\n            parameters:\n                -   name: graph_id\n                    in: path\n                    description: \"The identifier of the graph\"\n                    example: resoto\n                    required: true\n                    schema:\n                        type: string\n                -   name: node_id\n                    in: path\n                    description: \"The identifier of the node\"\n                    required: true\n                    schema:\n                        type: string\n                -   name: parent_node_id\n                    in: path\n                    description: \"The identifier of the parent node\"\n                    required: true\n                    schema:\n                        type: string\n            requestBody:\n                description: \"The node document to create.\"\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/Node\"\n            responses:\n                \"200\":\n                    description: \"Return the created node\"\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Node\"\n    /graph/{graph_id}/node/{node_id}:\n        get:\n            summary: \"Get a node with the given node id\"\n            description: |\n                **Experimental**: This API is not stable and might be subject of change.\u003cbr/\u003e\n                Get a node with the given node id\n            tags:\n                - node_management\n            parameters:\n                -   name: graph_id\n                    in: path\n                    description: \"The identifier of the graph\"\n                    example: resoto\n                    required: true\n                    schema:\n                        type: string\n                -   name: node_id\n                    in: path\n                    description: \"The identifier of the node\"\n                    required: true\n                    schema:\n                        type: string\n            responses:\n                \"200\":\n                    description: \"Return the defined node\"\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Node\"\n        patch:\n            summary: \"Update a node with the given node id\"\n            description: |\n                **Experimental**: This API is not stable and might be subject of change.\u003cbr/\u003e\n                Update a node with the given node id\n            tags:\n                - node_management\n            parameters:\n                -   name: graph_id\n                    in: path\n                    description: \"The identifier of the graph\"\n                    example: resoto\n                    required: true\n                    schema:\n                        type: string\n                -   name: node_id\n                    in: path\n                    description: \"The identifier of the node\"\n                    required: true\n                    schema:\n                        type: string\n            requestBody:\n                description: \"The partial object data to patch.\"\n                content:\n                    application/json:\n                        schema:\n                            type: object\n                            additionalProperties: true\n            responses:\n                \"200\":\n                    description: \"Return the patched node\"\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Node\"\n        delete:\n            summary: \"Delete a node with the given node id.\"\n            description: |\n                **Experimental**: This API is not stable and might be subject of change.\u003cbr/\u003e\n                Delete a node with the given node id.\n            tags:\n                - node_management\n            parameters:\n                -   name: graph_id\n                    in: path\n                    description: \"The identifier of the graph\"\n                    example: resoto\n                    required: true\n                    schema:\n                        type: string\n                -   name: node_id\n                    in: path\n                    description: \"The identifier of the node\"\n                    required: true\n                    schema:\n                        type: string\n            responses:\n                \"204\":\n                    description: \"Node is deleted\"\n    /graph/{graph_id}/node/{node_id}/section/{section}:\n        patch:\n            summary: \"Patch a node with the given node id in given section\"\n            description: |\n                **Experimental**: This API is not stable and might be subject of change.\u003cbr/\u003e\n                Patch a node with the given node id in given section\n            tags:\n                - node_management\n            parameters:\n                -   name: graph_id\n                    in: path\n                    description: \"The identifier of the graph\"\n                    example: resoto\n                    required: true\n                    schema:\n                        type: string\n                -   name: node_id\n                    in: path\n                    description: \"The identifier of the node\"\n                    required: true\n                    schema:\n                        type: string\n                -   name: section\n                    in: path\n                    description: \"The identifier of the section\"\n                    required: true\n                    schema:\n                        type: string\n                        enum:\n                            - reported\n                            - desired\n                            - metadata\n            requestBody:\n                description: \"The partial object data to patch.\"\n                content:\n                    application/json:\n                        schema:\n                            type: object\n                            additionalProperties: true\n            responses:\n                \"200\":\n                    description: \"Return the patched node\"\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Node\"\n    # endregion\n\n    # region search graph\n    /graph/{graph_id}/search/raw:\n        post:\n            summary: \"Transform the search into the raw database search\"\n            description: |\n                **Experimental**: This API is not stable and might be subject of change.\u003cbr/\u003e\n                Show the underlying raw search.\n            tags:\n                - debug\n            parameters:\n                -   name: graph_id\n                    in: path\n                    description: \"The identifier of the graph\"\n                    example: resoto\n                    required: true\n                    schema:\n                        type: string\n                -   name: section\n                    in: query\n                    description: \"The name of the section used for all property paths. If not defined root is assumed.\"\n                    required: false\n                    schema:\n                        type: string\n                        enum:\n                            - reported\n                            - desired\n                            - metadata\n            requestBody:\n                description: \"The search to perform\"\n                content:\n                    text/plain:\n                        schema:\n                            type: string\n                            example: is(graph_root) and reported.name==\"root\" --\u003e\n            responses:\n                \"200\":\n                    description: \"Returns the search as performed by the database.\"\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/RawQuery\"\n    /graph/{graph_id}/search/list:\n        post:\n            summary: \"Search the graph and return all nodes as list (this will not contain any edges)\"\n            description: |\n                Search the graph and return the matching nodes as list.\n                A section can be defined (defaults to `/` == root) to interpret relative property paths.\n                Example: is(volume) and (reported.age\u003e23d or desired.clean==true or metadata.version==2)\n            tags:\n                - graph_search\n            parameters:\n                -   name: graph_id\n                    in: path\n                    example: resoto\n                    description: \"The identifier of the graph\"\n                    required: true\n                    schema:\n                        type: string\n                -   name: section\n                    in: query\n                    description: \"The name of the section used for all property paths. If not defined root is assumed.\"\n                    required: false\n                    schema:\n                        type: string\n                        enum:\n                            - reported\n                            - desired\n                            - metadata\n                -   name: count\n                    in: query\n                    description: \"Optional parameter to get a Ck-Element-Count header which returns the number of returned json elements\"\n                    required: false\n                    schema:\n                        type: boolean\n                        default: true\n            requestBody:\n                description: \"The search to perform\"\n                content:\n                    text/plain:\n                        schema:\n                            type: string\n                            example: is(graph_root) and reported.name==\"root\" --\u003e\n            responses:\n                \"200\":\n                    description: \"The result of this search in the defined format\"\n                    content:\n                        application/json:\n                            schema:\n                                type: array\n                                items:\n                                    $ref: \"#/components/schemas/Node\"\n                        application/x-ndjson:\n                            schema:\n                                $ref: \"#/components/schemas/Node\"\n                            example: |\n                                {\"type\": \"node\", \"id\": \"root\", \"revision\": \"123\", \"reported\": {\"kind\": \"graph_root\", \"id\": \"root\", \"tags\": {}, \"name\": \"root\"}}\n                                {\"type\": \"node\", \"id\": \"cloud_id\",  \"revision\": \"12\", \"reported\": {\"kind\": \"cloud\", \"id\": \"onelogin\", \"tags\": {}, \"name\": \"onelogin\", \"ctime\": \"2021-12-14T08:49:52Z\", \"age\": \"6d7h\"}}\n                                {\"type\": \"edge\", \"from\": \"root\", \"to\": \"cloud_id\", \"edge_type\": \"default\"}\n                        text/plain:\n                            example: |\n                                reported:\n                                  kind: graph_root\n                                  id: root\n                                  tags: {}\n                                  name: root\n                                metadata:\n                                  cleaned: false\n                                  phantom: true\n                                  protected: false\n                        application/yaml:\n                            example: |\n                                id: root\n                                type: node\n                                revision: _daGy-Bu---\n                                reported:\n                                    kind: graph_root\n                                    id: root\n                                    tags: { }\n                                    name: root\n                                metadata:\n                                    python_type: resotolib.baseresources.GraphRoot\n                                    cleaned: false\n                                    phantom: true\n                                    protected: false\n                                kinds:\n                                    - graph_root\n                                ---\n                                id: 2RZlTX9yzeBwTNT_H1KZVA\n                                type: node\n                                revision: _daGy-Bi---\n                                reported:\n                                    kind: cloud\n                                    id: onelogin\n                                    tags: { }\n                                    name: onelogin\n                                    ctime: '2021-12-14T08:49:52Z'\n                                    age: 6d7h\n                                metadata:\n                                    python_type: resotolib.baseresources.Cloud\n                                    cleaned: false\n                                    phantom: false\n                                    protected: false\n                                    descendant_summary:\n                                        onelogin_account: 1\n                                        onelogin_region: 1\n                                        onelogin_user: 1034\n                                    descendant_count: 1036\n                                ancestors:\n                                    cloud:\n                                        reported:\n                                            name: onelogin\n                                            id: onelogin\n                                kinds:\n                                    - cloud\n                                    - base_cloud\n                                    - resource\n                                ---\n                                type: edge\n                                from: root\n                                to: 2RZlTX9yzeBwTNT_H1KZVA\n                                edge_type: default\n\n                        application/vnd.graphml+xml:\n                            example: |\n                                \u003cgraphml xmlns=\"http://graphml.graphdrawing.org/xmlns\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd\"\u003e\n                                    \u003ckey id=\"d4\" for=\"node\" attr.name=\"age\" attr.type=\"string\"/\u003e\n                                    \u003ckey id=\"d3\" for=\"node\" attr.name=\"ctime\" attr.type=\"string\"/\u003e\n                                    \u003ckey id=\"d2\" for=\"node\" attr.name=\"name\" attr.type=\"string\"/\u003e\n                                    \u003ckey id=\"d1\" for=\"node\" attr.name=\"id\" attr.type=\"string\"/\u003e\n                                    \u003ckey id=\"d0\" for=\"node\" attr.name=\"kind\" attr.type=\"string\"/\u003e\n                                    \u003cgraph edgedefault=\"directed\"\u003e\n                                        \u003cnode id=\"root\"\u003e\n                                            \u003cdata key=\"d0\"\u003egraph_root\u003c/data\u003e\n                                            \u003cdata key=\"d1\"\u003eroot\u003c/data\u003e\n                                            \u003cdata key=\"d2\"\u003eroot\u003c/data\u003e\n                                        \u003c/node\u003e\n                                        \u003cnode id=\"cloud_id\"\u003e\n                                            \u003cdata key=\"d0\"\u003ecloud\u003c/data\u003e\n                                            \u003cdata key=\"d1\"\u003eonelogin\u003c/data\u003e\n                                            \u003cdata key=\"d2\"\u003eonelogin\u003c/data\u003e\n                                            \u003cdata key=\"d3\"\u003e2021-12-14T08:49:52Z\u003c/data\u003e\n                                            \u003cdata key=\"d4\"\u003e6d7h\u003c/data\u003e\n                                        \u003c/node\u003e\n                                        \u003cedge source=\"root\" target=\"cloud_id\"/\u003e\n                                    \u003c/graph\u003e\n                                \u003c/graphml\u003e\n\n                        application/vnd.cytoscape+json:\n                            example: |\n                                {\n                                    \"data\": [ ],\n                                    \"directed\": true,\n                                    \"elements\": {\n                                        \"edges\": [\n                                            {\n                                                \"data\": {\n                                                    \"source\": \"root\",\n                                                    \"target\": \"cloud_id\"\n                                                }\n                                            }\n                                        ],\n                                        \"nodes\": [\n                                            {\n                                                \"data\": {\n                                                    \"id\": \"root\",\n                                                    \"kind\": \"graph_root\",\n                                                    \"name\": \"root\",\n                                                    \"tags\": { },\n                                                    \"value\": \"root\"\n                                                }\n                                            },\n                                            {\n                                                \"data\": {\n                                                    \"age\": \"6d7h\",\n                                                    \"ctime\": \"2021-12-14T08:49:52Z\",\n                                                    \"id\": \"onelogin\",\n                                                    \"kind\": \"cloud\",\n                                                    \"name\": \"onelogin\",\n                                                    \"tags\": { },\n                                                    \"value\": \"cloud_id\"\n                                                }\n                                            }\n                                        ]\n                                    },\n                                    \"multigraph\": false\n                                }\n                        text/vnd.graphviz:\n                            example: |\n                                digraph {\n                                rankdir=LR\n                                overlap=false\n                                splines=true\n                                node [shape=Mrecord colorscheme=paired12]\n                                edge [arrowsize=0.5]\n                                  \"root\" [label=\"root|graph_root\", style=filled fillcolor=1];\n                                  \"2RZlTX9yzeBwTNT_H1KZVA\" [label=\"onelogin|cloud\", style=filled fillcolor=2];\n                                  \"root\" -\u003e \"2RZlTX9yzeBwTNT_H1KZVA\"\n                                  subgraph \"graph_root\" {\n                                    \"root\"\n                                    \"2RZlTX9yzeBwTNT_H1KZVA\"\n                                  }\n                                }\n\n    /graph/{graph_id}/search/graph:\n        post:\n            summary: \"Search the graph and return the resulting graph.\"\n            description: |\n                Search the graph and return the matching nodes including the traversed edges.\n                The resulting data can be interpreted as a graph.\n                A section can be defined (defaults to `/` == root) to interpret relative property paths.\n                Example: is(volume) and (reported.age\u003e23d or desired.clean==true or metadata.version==2)\n            tags:\n                - graph_search\n            parameters:\n                -   name: graph_id\n                    in: path\n                    description: \"The identifier of the graph\"\n                    example: resoto\n                    required: true\n                    schema:\n                        type: string\n                -   name: section\n                    in: query\n                    description: \"The name of the section used for all property paths. If not defined root is assumed.\"\n                    required: false\n                    schema:\n                        type: string\n                        enum:\n                            - reported\n                            - desired\n                            - metadata\n                -   name: count\n                    in: query\n                    description: \"Optional parameter to get a Ck-Element-Count header which returns the number of returned json elements\"\n                    required: false\n                    schema:\n                        type: boolean\n                        default: true\n                -   name: search_timeout\n                    in: query\n                    description: \"Optional duration the search is allowed to run.\"\n                    required: false\n                    schema:\n                        type: string\n                        example: \"30s\"\n            requestBody:\n                description: \"The search to perform\"\n                content:\n                    text/plain:\n                        schema:\n                            type: string\n                            example: is(graph_root) and reported.name==\"root\" --\u003e\n            responses:\n                \"200\":\n                    description: \"The result of this search in the defined format\"\n                    content:\n                        application/json:\n                            schema:\n                                type: array\n                                items:\n                                    $ref: \"#/components/schemas/Node\"\n                        application/x-ndjson:\n                            schema:\n                                $ref: \"#/components/schemas/Node\"\n                            example: |\n                                {\"type\": \"node\", \"id\": \"root\", \"revision\": \"123\", \"reported\": {\"kind\": \"graph_root\", \"id\": \"root\", \"tags\": {}, \"name\": \"root\"}}\n                                {\"type\": \"node\", \"id\": \"cloud_id\",  \"revision\": \"12\", \"reported\": {\"kind\": \"cloud\", \"id\": \"onelogin\", \"tags\": {}, \"name\": \"onelogin\", \"ctime\": \"2021-12-14T08:49:52Z\", \"age\": \"6d7h\"}}\n                                {\"type\": \"edge\", \"from\": \"root\", \"to\": \"cloud_id\", \"edge_type\": \"default\"}\n                        text/plain:\n                            example: |\n                                reported:\n                                  kind: graph_root\n                                  id: root\n                                  tags: {}\n                                  name: root\n                                metadata:\n                                  cleaned: false\n                                  phantom: true\n                                  protected: false\n                        application/yaml:\n                            example: |\n                                id: root\n                                type: node\n                                revision: _daGy-Bu---\n                                reported:\n                                    kind: graph_root\n                                    id: root\n                                    tags: { }\n                                    name: root\n                                metadata:\n                                    python_type: resotolib.baseresources.GraphRoot\n                                    cleaned: false\n                                    phantom: true\n                                    protected: false\n                                kinds:\n                                    - graph_root\n                                ---\n                                id: 2RZlTX9yzeBwTNT_H1KZVA\n                                type: node\n                                revision: _daGy-Bi---\n                                reported:\n                                    kind: cloud\n                                    id: onelogin\n                                    tags: { }\n                                    name: onelogin\n                                    ctime: '2021-12-14T08:49:52Z'\n                                    age: 6d7h\n                                metadata:\n                                    python_type: resotolib.baseresources.Cloud\n                                    cleaned: false\n                                    phantom: false\n                                    protected: false\n                                    descendant_summary:\n                                        onelogin_account: 1\n                                        onelogin_region: 1\n                                        onelogin_user: 1034\n                                    descendant_count: 1036\n                                ancestors:\n                                    cloud:\n                                        reported:\n                                            name: onelogin\n                                            id: onelogin\n                                kinds:\n                                    - cloud\n                                    - base_cloud\n                                    - resource\n                                ---\n                                type: edge\n                                from: root\n                                to: 2RZlTX9yzeBwTNT_H1KZVA\n                                edge_type: default\n\n                        application/vnd.graphml+xml:\n                            example: |\n                                \u003cgraphml xmlns=\"http://graphml.graphdrawing.org/xmlns\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd\"\u003e\n                                    \u003ckey id=\"d4\" for=\"node\" attr.name=\"age\" attr.type=\"string\"/\u003e\n                                    \u003ckey id=\"d3\" for=\"node\" attr.name=\"ctime\" attr.type=\"string\"/\u003e\n                                    \u003ckey id=\"d2\" for=\"node\" attr.name=\"name\" attr.type=\"string\"/\u003e\n                                    \u003ckey id=\"d1\" for=\"node\" attr.name=\"id\" attr.type=\"string\"/\u003e\n                                    \u003ckey id=\"d0\" for=\"node\" attr.name=\"kind\" attr.type=\"string\"/\u003e\n                                    \u003cgraph edgedefault=\"directed\"\u003e\n                                        \u003cnode id=\"root\"\u003e\n                                            \u003cdata key=\"d0\"\u003egraph_root\u003c/data\u003e\n                                            \u003cdata key=\"d1\"\u003eroot\u003c/data\u003e\n                                            \u003cdata key=\"d2\"\u003eroot\u003c/data\u003e\n                                        \u003c/node\u003e\n                                        \u003cnode id=\"cloud_id\"\u003e\n                                            \u003cdata key=\"d0\"\u003ecloud\u003c/data\u003e\n                                            \u003cdata key=\"d1\"\u003eonelogin\u003c/data\u003e\n                                            \u003cdata key=\"d2\"\u003eonelogin\u003c/data\u003e\n                                            \u003cdata key=\"d3\"\u003e2021-12-14T08:49:52Z\u003c/data\u003e\n                                            \u003cdata key=\"d4\"\u003e6d7h\u003c/data\u003e\n                                        \u003c/node\u003e\n                                        \u003cedge source=\"root\" target=\"cloud_id\"/\u003e\n                                    \u003c/graph\u003e\n                                \u003c/graphml\u003e\n\n                        application/vnd.cytoscape+json:\n                            example: |\n                                {\n                                    \"data\": [ ],\n                                    \"directed\": true,\n                                    \"elements\": {\n                                        \"edges\": [\n                                            {\n                                                \"data\": {\n                                                    \"source\": \"root\",\n                                                    \"target\": \"cloud_id\"\n                                                }\n                                            }\n                                        ],\n                                        \"nodes\": [\n                                            {\n                                                \"data\": {\n                                                    \"id\": \"root\",\n                                                    \"kind\": \"graph_root\",\n                                                    \"name\": \"root\",\n                                                    \"tags\": { },\n                                                    \"value\": \"root\"\n                                                }\n                                            },\n                                            {\n                                                \"data\": {\n                                                    \"age\": \"6d7h\",\n                                                    \"ctime\": \"2021-12-14T08:49:52Z\",\n                                                    \"id\": \"onelogin\",\n                                                    \"kind\": \"cloud\",\n                                                    \"name\": \"onelogin\",\n                                                    \"tags\": { },\n                                                    \"value\": \"cloud_id\"\n                                                }\n                                            }\n                                        ]\n                                    },\n                                    \"multigraph\": false\n                                }\n                        text/vnd.graphviz:\n                            example: |\n                                digraph {\n                                rankdir=LR\n                                overlap=false\n                                splines=true\n                                node [shape=Mrecord colorscheme=paired12]\n                                edge [arrowsize=0.5]\n                                  \"root\" [label=\"root|graph_root\", style=filled fillcolor=1];\n                                  \"2RZlTX9yzeBwTNT_H1KZVA\" [label=\"onelogin|cloud\", style=filled fillcolor=2];\n                                  \"root\" -\u003e \"2RZlTX9yzeBwTNT_H1KZVA\"\n                                  subgraph \"graph_root\" {\n                                    \"root\"\n                                    \"2RZlTX9yzeBwTNT_H1KZVA\"\n                                  }\n                                }\n\n    /graph/{graph_id}/search/aggregate:\n        post:\n            summary: \"Search the aggregate function on the specified graph and return the aggregation result.\"\n            description: |\n                Search and aggregate the graph and return the resulting aggregated data.\n                A section can be defined (defaults to `/` == root) to interpret relative property paths.\n                Example: is(volume) and (reported.age\u003e23d or desired.clean==true or metadata.version==2)\n            tags:\n                - graph_search\n            parameters:\n                -   name: graph_id\n                    in: path\n                    description: \"The identifier of the graph\"\n                    example: resoto\n                    required: true\n                    schema:\n                        type: string\n                -   name: section\n                    in: query\n                    description: \"The name of the section used for all property paths. If not defined root is assumed.\"\n                    required: false\n                    schema:\n                        type: string\n                        enum:\n                            - reported\n                            - desired\n                            - metadata\n            requestBody:\n                description: \"The aggregation search to perform\"\n                content:\n                    text/plain:\n                        schema:\n                            type: string\n                            example: |\n                                aggregate(reported.kind: sum(1) as nodes): is(node)\n            responses:\n                \"200\":\n                    description: \"The result of this search in the defined format\"\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Aggregated\"\n                        application/x-ndjson:\n                            schema:\n                                $ref: \"#/components/schemas/Aggregated\"\n    /graph/{graph_id}/search/explain:\n        post:\n            summary: \"Explain the search execution plan\"\n            description: |\n                Explain the runtime characteristics of a search without performing the search.\n                A section can be defined (defaults to `/` == root) to interpret relative property paths.\n                Example: is(volume) and (reported.age\u003e23d or desired.clean==true or metadata.version==2)\n\n            tags:\n                - graph_search\n            parameters:\n                -   name: graph_id\n                    in: path\n                    description: \"The identifier of the graph\"\n                    example: resoto\n                    required: true\n                    schema:\n                        type: string\n                -   name: section\n                    in: query\n                    description: \"The name of the section used for all property paths. If not defined root is assumed.\"\n                    required: false\n                    schema:\n                        type: string\n                        enum:\n                            - reported\n                            - desired\n                            - metadata\n            requestBody:\n                description: \"The search to perform\"\n                content:\n                    text/plain:\n                        schema:\n                            type: string\n                            example: is(graph_root) and reported.name==\"root\" --\u003e\n            responses:\n                \"200\":\n                    description: \"The execution plan of the database\"\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/EstimatedSearchCost\"\n    # endregion\n\n    # region events\n    /events:\n        get:\n            summary: \"[WebSocket] Register as event listener and receive all events.\"\n            description:\n              ## WebSocket Endpoint\n                The client needs to send all the required headers for a ws connection\n                and has to handle the websocket protocol.\u003cbr/\u003e\n                **Note this can not be tested from within swagger!**\n\n            parameters:\n                -   name: show\n                    in: query\n                    description: \"All events to show as a comma separated list\"\n                    required: false\n                    explode: false\n                    schema:\n                        type: string\n            tags:\n                - system\n            responses:\n                default:\n                    description: \"\"\n    # endregion\n\n    # region subscriptions\n\n    /subscribers:\n        get:\n            summary: \"List all subscriptions\"\n            description: \"Get all subscriptions of all subscribers in the system\"\n            tags:\n                - subscriptions\n            responses:\n                \"200\":\n                    description: \"The list of all subscribers with all subscriptions\"\n                    content:\n                        application/json:\n                            schema:\n                                type: array\n                                items:\n                                    $ref: \"#/components/schemas/Subscriber\"\n\n    /subscribers/for/{event_type}:\n        get:\n            summary: \"List all subscribers for a given event type\"\n            description: \"Get all subscriptions of registered subscribers\"\n            tags:\n                - subscriptions\n            parameters:\n                -   name: event_type\n                    in: path\n                    description: \"The type of message\"\n                    required: true\n                    schema:\n                        type: string\n\n            responses:\n                \"200\":\n                    description: \"The list of all subscribers which are subscribed\"\n                    content:\n                        application/json:\n                            schema:\n                                type: array\n                                items:\n                                    $ref: \"#/components/schemas/Subscriber\"\n\n    /subscriber/{subscriber_id}:\n        get:\n            summary: \"Get subscriber by id\"\n            description: \"Get the subscriber with a defined id.\"\n            tags:\n                - subscriptions\n            parameters:\n                -   name: subscriber_id\n                    in: path\n                    description: \"The identifier of the subscriber\"\n                    required: true\n                    schema:\n                        type: string\n\n            responses:\n                \"200\":\n                    description: \"The subscriber\"\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Subscriber\"\n                \"404\":\n                    description: \"No subscriber found\"\n                    content:\n                        text/plain:\n                            schema:\n                                type: string\n                                example: No subscriber with this id\n        put:\n            summary: \"Define subscriber with all subscriptions\"\n            description: |\n                Define or redefine a subscriber with all subscriptions.\n                In case the subscriber does not exist, it is created.\n                In case the subscriber exist, all subscriptions get replaced.\n            tags:\n                - subscriptions\n            parameters:\n                -   name: subscriber_id\n                    in: path\n                    description: \"The identifier of the subscriber\"\n                    required: true\n                    schema:\n                        type: string\n            requestBody:\n                description: \"The list of all subscriptions.\"\n                content:\n                    application/json:\n                        schema:\n                            type: array\n                            items:\n                                $ref: \"#/components/schemas/Subscription\"\n            responses:\n                \"200\":\n                    description: \"The subscriber\"\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Subscriber\"\n        delete:\n            summary: \"Delete by id\"\n            description: \"Delete the subscriber with a defined id.\"\n            tags:\n                - subscriptions\n            parameters:\n                -   name: subscriber_id\n                    in: path\n                    description: \"The identifier of the subscriber\"\n                    required: true\n                    schema:\n                        type: string\n\n            responses:\n                \"204\":\n                    description: \"no content\"\n\n    /subscriber/{subscriber_id}/{event_type}:\n        post:\n            summary: \"Add subscription to subscriber\"\n            description: \"Add a specific subscription to a subscriber.\"\n            tags:\n                - subscriptions\n            parameters:\n                -   name: subscriber_id\n                    in: path\n                    description: \"The identifier of the subscriber\"\n                    required: true\n                    schema:\n                        type: string\n                -   name: event_type\n                    in: path\n                    description: \"The action event type.\"\n                    required: true\n                    schema:\n                        type: string\n                -   name: timeout\n                    in: query\n                    required: false\n                    description: |\n                        This is the duration in seconds this subscriber has time to execute the action.\n                        After this time the sender assumes a failure and rejects the result of this actor.\n                    schema:\n                        type: number\n                        default: 60\n                -   name: wait_for_completion\n                    in: query\n                    required: false\n                    description: |\n                        If an action is sent to this subscriber, the event sender should wait until this\n                        subscriber has processed the message and send a done message.\n                        This is the expected behaviour of every actor and defaults to true.\n                    schema:\n                        type: boolean\n                        default: true\n            responses:\n                \"200\":\n                    description: \"The subscriber\"\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Subscriber\"\n        delete:\n            summary: \"Delete a specific subscription from the subscriber.\"\n            description: \"Delete a specific subscription from the subscriber.\"\n            tags:\n                - subscriptions\n            parameters:\n                -   name: subscriber_id\n                    in: path\n                    description: \"The identifier of the subscriber\"\n                    required: true\n                    schema:\n                        type: string\n                -   name: event_type\n                    in: path\n                    description: \"The action event type.\"\n                    required: true\n                    schema:\n                        type: string\n            responses:\n                \"200\":\n                    description: \"The subscriber\"\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Subscriber\"\n\n    /subscriber/{subscriber_id}/handle:\n        get:\n            summary: \"[WebSocket] Listen to registered events of given subscriber\"\n            description: |\n                ## WebSocket Endpoint\n                The client needs to send all the required headers for a ws connection\n                and has to handle the websocket protocol.\u003cbr/\u003e\n                **Note this can not be tested from within swagger!**\n\n                The connection to this endpoint will never be closed.\n                All action events of the system this subscriber has registerd will be send to this\n                connection.\n            tags:\n                - subscriptions\n            parameters:\n                -   name: subscriber_id\n                    in: path\n                    description: \"The identifier of the subscriber\"\n                    required: true\n                    schema:\n                        type: string\n\n            responses:\n                \"404\":\n                    description: \"No subscriber found\"\n                    content:\n                        text/plain:\n                            schema:\n                                type: string\n                                example: No subscriber with this id\n    # endregion\n\n    # region task queue\n    /work/queue:\n        get:\n            summary: \"[WebSocket] Attach to the working queue\"\n            description: |\n                ## WebSocket Endpoint\n                The client needs to send all the required headers for a ws connection\n                and has to handle the websocket protocol.\u003cbr/\u003e\n                **Note this can not be tested from within swagger!**\n\n                This endpoint is used by worker nodes which can perform work.\n                A worker would use this endpoint to establish a websocket connection and register the tasks\n                that can be performed by the worker. One worker can perform one or more tasks over one connection.\n\n                In case the connection is lost, all outstanding tasks are rescheduled to other workers.\n                This means the local tasks queue should be wiped in case of connection loss.\n\n                Note: the server tries to spread the number of tasks evenly over the number of workers.\n                This number is derived by the number of outstanding messages in the queue irrelevant which tasks\n                are outstanding.\n\n            parameters:\n                -   name: task\n                    description: \"The name of all tasks that this worker is able to perform.\"\n                    in: query\n                    style: form\n                    explode: false\n                    schema:\n                        type: array\n                        items:\n                            type: string\n                -   name: filter\n                    description: |\n                        Additional properties to filter tasks of provided task name.\n                        The value of the parameter is either a string or a list of strings separated by comma.\n                        The available filter criteria are defined by the specific task to execute.\n\n                        All specified filter criteria need to match by the task to execute.\n                        If a list of values is defined for a filter criteria, at least one needs to match.\n                        (e.g. cloud=aws,gcp would match a task for cloud=aws).\n\n                        Example:\n                                 The worker is able to perform tasks of type tag, but only for cloud AWS:\n                                 cloud=aws\n\n                                 The worker is able to perform tasks of type tag, for AWS and GCP:\n                                 cloud=aws,gcp\n\n                                 Maybe the worker is only capable to perform the work in a specific account.\n                                 cloud=aws\u0026account=123 could be specified to only filter for tasks in this cloud in this\n                                 account.\n\n                        In case there are multiple workers that match the task criteria, the most specific\n                        worker is taken.\n\n                        Example:\n                                worker1: cloud=aws,gcp\n                                worker2: cloud=aws account=123\n\n                        If the task is for cloud=aws and account=123, then only worker2 would get the task to execute\n                        not worker1.\n\n\n                    in: query\n                    required: false\n                    schema:\n                        type: object\n                        additionalProperties: true\n                        example: { \"cloud\": \"aws\", \"account\": \"123,124,125\" }\n            tags:\n                - work_queue\n            responses:\n                \"200\":\n                    description: When the connection is established.\n                    content:\n                        application/json:\n                            schema:\n                                type: array\n                                items:\n                                    type: object\n                                    additionalProperties: true\n    /work/list:\n        get:\n            summary: \"List all outstanding work items\"\n            description: |\n                All work items that are initiated but not done are listed via this endpoint.\n            tags:\n                - work_queue\n            responses:\n                \"200\":\n                    description: The list of all outstanding work items\n                    content:\n                        application/json:\n                            schema:\n                                type: array\n                                items:\n                                    type: object\n                                    properties:\n                                        task:\n                                            type: object\n                                            properties:\n                                                task_id:\n                                                    type: string\n                                                task_name:\n                                                    type: string\n                                                data:\n                                                    type: object\n                                                    additionalProperties: true\n                                                attrs:\n                                                    type: object\n                                                    additionalProperties: true\n                                        worker:\n                                            type: string\n                                        retry_counter:\n                                            type: integer\n                                        deadline:\n                                            type: string\n\n    # endregion\n\n    # region config\n    /configs:\n\n        get:\n            summary: \"Get all configuration data\"\n            description: |\n                **Experimental**: This API is not stable and might be subject of change.\u003cbr/\u003e\n                Get all configuration data in the system.\n            tags:\n                - config\n            responses:\n                \"200\":\n                    description: All configuration objects by key.\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Config\"\n\n    /config/{config_id}:\n        get:\n            summary: \"Get a configuration by its id\"\n            description: |\n                **Experimental**: This API is not stable and might be subject of change.\u003cbr/\u003e\n                Fetch a configuration by id.\n            tags:\n                - config\n            parameters:\n                -   name: config_id\n                    required: true\n                    in: path\n                    description: the identifier of the config to get.\n                    schema:\n                        type: string\n            responses:\n                \"200\":\n                    description: The configuration\n                    content:\n                        application/json:\n                            schema:\n                                type: object\n                                additionalProperties: true\n                \"404\":\n                    description: No configuration for this key.\n\n        put:\n            summary: \"Replace a configuration with given id\"\n            description: |\n                **Experimental**: This API is not stable and might be subject of change.\u003cbr/\u003e\n                Replace a configuration identified by id with provided value.\n            tags:\n                - config\n            parameters:\n                -   name: config_id\n                    required: true\n                    in: path\n                    description: the identifier of the config to get.\n                    schema:\n                        type: string\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            type: object\n                            additionalProperties: true\n            responses:\n                \"200\":\n                    description: The configuration\n                    content:\n                        application/json:\n                            schema:\n                                type: object\n                                additionalProperties: true\n        patch:\n            summary: \"Patch a configuration by its id\"\n            description: |\n                **Experimental**: This API is not stable and might be subject of change.\u003cbr/\u003e\n                Patch a configuration identified by id with provided value.\n            tags:\n                - config\n            parameters:\n                -   name: config_id\n                    required: true\n                    in: path\n                    description: the identifier of the config to get.\n                    schema:\n                        type: string\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            type: object\n                            additionalProperties: true\n            responses:\n                \"200\":\n                    description: The configuration\n                    content:\n                        application/json:\n                            schema:\n                                type: object\n                                additionalProperties: true\n        delete:\n            summary: \"Delete a configuration by its id\"\n            description: |\n                **Experimental**: This API is not stable and might be subject of change.\u003cbr/\u003e\n                Delete a configuration identified by id with provided value.\n            tags:\n                - config\n            parameters:\n                -   name: config_id\n                    in: path\n                    required: true\n                    description: the identifier of the config to get.\n                    schema:\n                        type: string\n            responses:\n                \"204\":\n                    description: Signals success of this operation.\n\n    # endregion\n\n    # region cli\n    /cli/evaluate:\n        post:\n            summary: \"Evaluate a cli command\"\n            description: |\n                This method can be used to analyze if the command can be interpreted without executing it.\n                When this method returns a 200 OK, the command can be parsed and evaluated.\n            parameters:\n                -   name: env\n                    description: \"All search parameter form the environment passed to the CLI interpreter.\"\n                    in: query\n                    schema:\n                        type: object\n                        additionalProperties: true\n            requestBody:\n                description: |\n                    The command will be sent as request body.\n                    A command can contain multiple command line separated by semicolon.\n                    Every single line can contain multiple commands that are combined via the pipe operator.\n                content:\n                    text/plain:\n                        schema:\n                            type: string\n                            example: json [1,2,3,4,5,6] | count\n            tags:\n                - cli\n            responses:\n                \"200\":\n                    description: When the command can be evaluated.\n                    content:\n                        application/json:\n                            schema:\n                                type: array\n                                items:\n                                    type: object\n                                    additionalProperties: true\n                \"300\":\n                    description: When the command can not be evaluated.\n                    content:\n                        text/plain:\n                            schema:\n                                type: string\n\n    /cli/execute:\n        post:\n            summary: \"Execute a cli command\"\n            description: |\n                The body defines the command to execute.\n                The command is executed and the result is returned to the client.\n                Request and execution are synchronized: the request is done, when the command is done.\n            parameters:\n                -   name: env\n                    description: \"All search parameter form the environment passed to the CLI interpreter.\"\n                    in: query\n                    schema:\n                        type: object\n                        additionalProperties: true\n            requestBody:\n                description: |\n                    The command will be sent as request body.\n                    A command can contain multiple command line separated by semicolon.\n                    Every single line can contain multiple commands that are combined via the pipe operator.\n                content:\n                    text/plain:\n                        schema:\n                            type: string\n                            example: json [1,2,3,4,5,6] | count\n            tags:\n                - cli\n            responses:\n                \"200\":\n                    description: The result of the command.\n                    content:\n                        application/json:\n                            schema:\n                                type: array\n                                items:\n                                    type: object\n                                    additionalProperties: true\n                        application/x-ndjson:\n                            schema:\n                                type: array\n                                items:\n                                    type: object\n                                    additionalProperties: true\n    /cli/info:\n        get:\n            summary: Get information about CLI\n            description: |\n                **Experimental**: This API is not stable and might be subject of change.\u003cbr/\u003e\n                Get information about CLI\n            tags:\n                - cli\n            responses:\n                \"200\":\n                    description: name, information and help of available commands.\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/CLIInfo\"\n\n    # endregion\n\n    # region certificate\n    /ca/cert:\n        get:\n            summary: Retrieve the certificate authorities public certificate.\n            description: The certificate served here is only used to sign and validate.\n            tags:\n                - certificate\n            responses:\n                \"200\":\n                    description: \"The certificate in PEM format.\"\n                    content:\n                        application/x-pem-file:\n                            schema:\n                                type: string\n                                example: |\n                                    -----BEGIN CERTIFICATE-----\n                                    MIIDUjCCAjqgAwIBAgIUEtDMkiSa2FYM5LVhZiPlspro39owDQYJKoZIhvcNAQEL\n                                    BQAweDELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFjAUBgNVBAcM\n                                    DVNhbiBGcmFuY2lzY28xHjAcBgNVBAoMFVNvbWUgRW5naW5lZXJpbmcgSW5jLjEc\n                                    MBoGA1UEAwwTQ2xvdWRrZWVwZXIgUm9vdCBDQTAeFw0yMTEyMjIwOTQ1NDJaFw0y\n                                    MjEyMjIwOTQ1NDJaMBsxGTAXBgNVBAMMEHNvbWUuZW5naW5lZXJpbmcwggEiMA0G\n                                    CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC5VIgOTR95jIxWJZHXUo6FUv4CyDn/\n                                    fZWxZQmFXC8c6SqspRNpXMgZq+riTm+yQ1l/kc2xVpr5S8tVeFGGjzaCcf51DMSx\n                                    j7SaUXP2oDtMi7e9wkfTaoN3z3erVwJl39znKQviEL8G7vYPCn7oDqt1HHry7ctN\n                                    crEMWYSQXUYe4s++K1q65VyGNBp6AcIrmefoH0pGARZs4MbvR74U44xsj25VFS+W\n                                    M3YSomBv4oB4QkqlcVWOU/Tlx7Tq7ASfkSqEkUigKMx/QKrdeQHxCkEtmjbiHhOk\n                                    VaCYsVbi8pVvE5URNrycvzJXGdimSL8pVZ8M89gUDoxUoiAneSswoRZrAgMBAAGj\n                                    MTAvMA4GA1UdDwEB/wQEAwIFoDAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUH\n                                    AwIwDQYJKoZIhvcNAQELBQADggEBAA70yqOYfYtguJKji+IeIsZflNH2DH6lZ2Xe\n                                    mv5suRbjuKEApSDUL59rpliT1dAcX6+cfKDQjzZ/7VWmp+XZmehGRlhRNWJMzsOz\n                                    Xv8/5l0LL59yN4w4FNq2cREcLj35RVYUU7lssNr/RNE9xNMHeqLdC4oW22PUi1lY\n                                    iq212G5yQTg31lVmzA9Uzvz+p/A8CG24tSBFbydSIogprmALS+5rnso0bWJ3Owf1\n                                    CVz6Dc9UM4kBWDsb+iTffXwbgSDbG+lJ+9TEndcAzb7Zxs6ghMtv/PKR/tmw+O32\n                                    3da9fAZE2eZoDvssH6LAUcFjtP9SFb8ZOdHJ15l279vzgCvWsvU=\n                                    -----END CERTIFICATE-----\n    /ca/sign:\n        post:\n            summary: Sign a certificate request.\n            tags:\n                - certificate\n            requestBody:\n                description: The certificate signing request (csr) in pkcs10 format.\n                content:\n                    application/pkcs10:\n                        schema:\n                            type: string\n                            example: |\n                                -----BEGIN CERTIFICATE REQUEST-----\n                                MIICYDCCAUgCAQAwGzEZMBcGA1UEAwwQc29tZS5lbmdpbmVlcmluZzCCASIwDQYJ\n                                KoZIhvcNAQEBBQADggEPADCCAQoCggEBAM6QVB0C0G1yJRD1aWye8a1IscJa4cN4\n                                +PDWim+2qemCRpiIafgsict5AtlqmvDaYYs7uaLI8PLASMz0pnrxLaVbRVu5H7Ix\n                                KSh1Vz/WjsqTDNw5Q+qPpT/YPP5l02IrKrP/pdMNC0FYnDxr6Y4bXVuFqtMv+Zr2\n                                amJSIpOET2wswo6MRflfiO9jh8mD5mdU+SqDHAvBpU7H3L4rd3cWyVsz3Q4cqpwa\n                                SDayhRMewxusI2MTj/uNEzZYTWiHb2TXUkYYSMYazdbVRUKFNWOsq+z1RPV1IUUe\n                                g0yjNS+tfYF0numPzwt9GNuB18O3X1G5rs2nHDRQL8pAbcy5Wjsuwf0CAwEAAaAA\n                                MA0GCSqGSIb3DQEBCwUAA4IBAQAuI5ijV9ahWtRhondwOYuYFMZL+i+tXPdn+O/B\n                                V7WFVdbaV13TpJ3giJBhCY3mlQ+Vb7BNDhgqdcsiXr4M1fDC0gf8J/GYA2s4yvrf\n                                fCqnFA97UET0AwpIA22+JZnZVs+FXqDsU2VMBgmGToU0QgzBSVi8/exSx3CWBgAk\n                                x2q98/r/Dhbi2KQkOYJ7yQx1t0416UiFB9xUnDIreg0k5chP5NF1YRbsatParYhG\n                                OviEEbELaTnWbmfnveBWjxAImv5w3tkF/dapH+QQ5yTIzDEl/UoG2pXC6QGRaRsp\n                                Mft1XSBtZDykb6SrTTz/lUfjn3XX+zqQ7g466HvglAwqUfX1\n                                -----END CERTIFICATE REQUEST-----\n            responses:\n                \"200\":\n                    description: \"The certificate in PEM format.\"\n                    content:\n                        application/x-pem-file:\n                            schema:\n                                type: string\n                                example: |\n                                    -----BEGIN CERTIFICATE-----\n                                    MIIDUjCCAjqgAwIBAgIUEtDMkiSa2FYM5LVhZiPlspro39owDQYJKoZIhvcNAQEL\n                                    BQAweDELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFjAUBgNVBAcM\n                                    DVNhbiBGcmFuY2lzY28xHjAcBgNVBAoMFVNvbWUgRW5naW5lZXJpbmcgSW5jLjEc\n                                    MBoGA1UEAwwTQ2xvdWRrZWVwZXIgUm9vdCBDQTAeFw0yMTEyMjIwOTQ1NDJaFw0y\n                                    MjEyMjIwOTQ1NDJaMBsxGTAXBgNVBAMMEHNvbWUuZW5naW5lZXJpbmcwggEiMA0G\n                                    CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC5VIgOTR95jIxWJZHXUo6FUv4CyDn/\n                                    fZWxZQmFXC8c6SqspRNpXMgZq+riTm+yQ1l/kc2xVpr5S8tVeFGGjzaCcf51DMSx\n                                    j7SaUXP2oDtMi7e9wkfTaoN3z3erVwJl39znKQviEL8G7vYPCn7oDqt1HHry7ctN\n                                    crEMWYSQXUYe4s++K1q65VyGNBp6AcIrmefoH0pGARZs4MbvR74U44xsj25VFS+W\n                                    M3YSomBv4oB4QkqlcVWOU/Tlx7Tq7ASfkSqEkUigKMx/QKrdeQHxCkEtmjbiHhOk\n                                    VaCYsVbi8pVvE5URNrycvzJXGdimSL8pVZ8M89gUDoxUoiAneSswoRZrAgMBAAGj\n                                    MTAvMA4GA1UdDwEB/wQEAwIFoDAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUH\n                                    AwIwDQYJKoZIhvcNAQELBQADggEBAA70yqOYfYtguJKji+IeIsZflNH2DH6lZ2Xe\n                                    mv5suRbjuKEApSDUL59rpliT1dAcX6+cfKDQjzZ/7VWmp+XZmehGRlhRNWJMzsOz\n                                    Xv8/5l0LL59yN4w4FNq2cREcLj35RVYUU7lssNr/RNE9xNMHeqLdC4oW22PUi1lY\n                                    iq212G5yQTg31lVmzA9Uzvz+p/A8CG24tSBFbydSIogprmALS+5rnso0bWJ3Owf1\n                                    CVz6Dc9UM4kBWDsb+iTffXwbgSDbG+lJ+9TEndcAzb7Zxs6ghMtv/PKR/tmw+O32\n                                    3da9fAZE2eZoDvssH6LAUcFjtP9SFb8ZOdHJ15l279vzgCvWsvU=\n                                    -----END CERTIFICATE-----\n    # endregion\n\n    # region system\n    /system/ready:\n        get:\n            summary: This endpoint signals if the system is ready to serve traffic.\n            tags:\n                - system\n            responses:\n                \"200\":\n                    description: \"This response code signals, that the system is ready.\"\n                    content:\n                        text/plain:\n                            schema:\n                                type: string\n                                example: \"200: OK\"\n    /system/ping:\n        get:\n            summary: Send a ping to the system and expect a pong.\n            tags:\n                - system\n            responses:\n                \"200\":\n                    description: \"The pong answer\"\n                    content:\n                        text/plain:\n                            schema:\n                                type: string\n                                example: pong\n\n    # endregion\ncomponents:\n    schemas:\n        Config:\n            description: \"A config object\"\n            type: object\n            properties:\n                id:\n                    type: string\n                    description: The id of this config object.\n                config:\n                    type: object\n                    additionalProperties: true\n        Subscriber:\n            description: \"A subscriber has a unique name and a list of subscriptions\"\n            type: object\n            properties:\n                id:\n                    type: string\n                    description: \"The identifier of this subscriber\"\n                subscriptions:\n                    type: object\n                    description: \"The dictionary of subscriptions, where the key is the message type\"\n                    additionalProperties:\n                        $ref: \"#/components/schemas/Subscription\"\n        Subscription:\n            description: \"The definition of an action subscription\"\n            type: object\n            properties:\n                message_type:\n                    type: string\n                    description: \"The name of the action to listen to\"\n                wait_for_completion:\n                    type: boolean\n                    description: |\n                        If an action is sent to this subscriber, the event sender should wait until this\n                        subscriber has processed the message and send a done message.\n                        This is the expected behaviour of every actor and defaults to true.\n                    default: true\n                timeout:\n                    type: number\n                    description: |\n                        This is the duration in seconds this subscriber has time to execute the action.\n                        After this time the sender assumes a failure and rejects the result of this actor.\n                    default: 60\n        Aggregated:\n            description: \"The result of the aggregation. The properties depend on the aggregation function.\"\n            type: object\n            additionalProperties: true\n            example: |\n                [\n                    { \"count\": 60, \"kind\": \"aws_ec2_instance_type\", \"mem_avg\": 28.45, \"mem_max\": 64, \"mem_min\": 1, \"mem_total\": 1707 },\n                    { \"count\": 105686, \"kind\": \"gcp_machine_type\", \"mem_avg\": 213.57744392143945, \"mem_max\": 3844, \"mem_min\": 0.599609375, \"mem_total\": 22572145.73828125 }\n                ]\n        BatchUpdate:\n            type: object\n            properties:\n                id:\n                    type: string\n                    description: \"the id of the change.\"\n                created:\n                    type: string\n                    description: \"datetime in utc, when the batch update has been created\"\n                affected_nodes:\n                    type: array\n                    items:\n                        type: string\n                    description: \"The root nodes of the subgraphs that will be changed during the update\"\n            example:\n              [\n                  {\n                      \"id\": \"XYQaijCNJUVc\",\n                      \"created\": \"2021-06-29T13:53:39.329Z\",\n                      \"affected_nodes\": [ \"sub_graph_root_1\", \"sub_graph_root_2\" ]\n                  }\n              ]\n        Node:\n            type: object\n            additionalProperties: true\n            properties:\n                kind:\n                    type: string\n                    description: \"The kind of this node.\"\n            example:\n              {\n                  \"kind\": \"test.person\",\n                  \"name\": \"Batman\",\n                  \"city\": \"Gotham\"\n              }\n        NodeInGraph:\n            type: object\n            properties:\n                id:\n                    type: string\n                    description: \"The identifier of this node.\"\n                type:\n                    type: string\n                reported:\n                    $ref: \"#/components/schemas/Node\"\n                desired:\n                    type: object\n                    additionalProperties: true\n                metadata:\n                    type: object\n                    additionalProperties: true\n            example:\n              {\n                  \"type\": \"node\",\n                  \"id\": \"id-in-graph\",\n                  \"reported\": {\n                      \"kind\": \"test.person\",\n                      \"name\": \"Batman\",\n                      \"city\": \"Gotham\"\n                  },\n                  \"desired\": {\n                      \"clean\": true\n                  },\n                  \"metadata\": {\n                      \"version\": 1\n                  }\n\n              }\n        DesiredNode:\n            type: object\n            properties:\n                reported:\n                    $ref: \"#/components/schemas/Node\"\n                desired:\n                    type: object\n                    description: \"The desired section does not contain a complete node, but only the desired changes.\"\n                    additionalProperties: true\n            example:\n              {\n                  \"reported\": {\n                      \"kind\": \"test.person\",\n                      \"name\": \"Batman\",\n                      \"city\": \"Gotham\"\n                  },\n                  \"desired\": {\n                      \"name\": \"Superman\"\n                  }\n              }\n        Edge:\n            type: object\n            properties:\n                from:\n                    description: \"The id of node to start from\"\n                    type: string\n                to:\n                    description: \"The id of the node to go to\"\n                    type: string\n                edge_type:\n                    description: \"The type of this edge\"\n                    type: string\n                    enum:\n                        - default\n                        - delete\n            example:\n              {\n                  \"type\": \"edge\",\n                  \"from\": \"node_id_of_a_in_graph\",\n                  \"to\": \"node_id_of_b_in_graph\",\n                  \"edge_type\": \"default\"\n              }\n        Graph:\n            description: \"A graph is just an array of nodes and edges\"\n            type: array\n            items:\n                discriminator:\n                    propertyName: \"type\"\n                    mapping:\n                        \"node\": \"#/components/schemas/NodeInGraph\"\n                        \"edge\": \"#/components/schemas/Edge\"\n                oneOf:\n                    -   $ref: \"#/components/schemas/NodeInGraph\"\n                    -   $ref: \"#/components/schemas/Edge\"\n        GraphUpdate:\n            description: \"Summary of a graph change action\"\n            type: object\n            properties:\n                nodes_created:\n                    description: \"The number of nodes that have been created.\"\n                    type: integer\n                nodes_updates:\n                    description: \"The number of nodes that have been updated.\"\n                    type: integer\n                nodes_deleted:\n                    description: \"The number of nodes that have been deleted.\"\n                    type: integer\n                edges_created:\n                    description: \"The number of edges that have been created.\"\n                    type: integer\n                edges_updated:\n                    description: \"The number of edges that have been updated.\"\n                    type: integer\n                edges_deleted:\n                    description: \"The number of edges that have been deleted.\"\n                    type: integer\n\n        Kind:\n            description: \"Definition of a kind\"\n            type: array\n            items:\n                oneOf:\n                    -   $ref: '#/components/schemas/StringKind'\n                    -   $ref: '#/components/schemas/NumberKind'\n                    -   $ref: '#/components/schemas/BooleanKind'\n                    -   $ref: '#/components/schemas/DateTimeKind'\n                    -   $ref: '#/components/schemas/ArrayKind'\n                    -   $ref: '#/components/schemas/DateKind'\n                    -   $ref: '#/components/schemas/ComplexKind'\n                    -   $ref: '#/components/schemas/StringDictKind'\n            example:\n              [\n                  {\n                      \"fqn\": \"test.dice\",\n                      \"runtime_kind\": \"int32\",\n                      \"description\": \"A dice has 6 sides.\",\n                      \"minimum\": 1,\n                      \"maximum\": 6\n                  },\n                  {\n                      \"fqn\": \"test.social_security_number\",\n                      \"runtime_kind\": \"string\",\n                      \"description\": \"A dice has 6 sides.\",\n                      \"pattern\": \"^(?!666|000|9\\\\d{2})\\\\d{3}-(?!00)\\\\d{2}-(?!0{4})\\\\d{4}$\"\n                  },\n                  {\n                      \"fqn\": \"test.base\",\n                      \"properties\": [\n                          {\n                              \"name\": \"kind\",\n                              \"kind\": \"string\",\n                              \"required\": true,\n                              \"description\": \"The kind of this compound type.\"\n                          },\n                          {\n                              \"name\": \"name\",\n                              \"kind\": \"string\",\n                              \"description\": \"The name of the resource.\",\n                              \"required\": true\n                          },\n                          {\n                              \"name\": \"tags\",\n                              \"kind\": \"dictionary\",\n                              \"description\": \"Tags that describe the resource.\",\n                              \"required\": false\n                          }\n                      ]\n                  },\n                  {\n                      \"fqn\": \"test.person\",\n                      \"properties\": [\n                          {\n                              \"name\": \"fortune\",\n                              \"kind\": \"test.dice\",\n                              \"description\": \"The current dice value.\",\n                              \"required\": true\n                          },\n                          {\n                              \"name\": \"ssn\",\n                              \"kind\": \"test.social_security_number\",\n                              \"description\": \"The social security number of this person.\",\n                              \"required\": true\n                          }\n                      ]\n                  }\n              ]\n        KindBase:\n            type: object\n            properties:\n                fqn:\n                    type: string\n                    description: \"The fully qualified name of the kind\"\n        SimpleKind:\n            type: object\n            allOf:\n                -   $ref: '#/components/schemas/KindBase'\n            discriminator:\n                propertyName: runtime_kind\n                mapping:\n                    string: \"#/components/schemas/StringKind\"\n                    int32: \"#/components/schemas/NumberKind\"\n                    int64: \"#/components/schemas/NumberKind\"\n                    float: \"#/components/schemas/NumberKind\"\n                    double: \"#/components/schemas/NumberKind\"\n                    boolean: \"#/components/schemas/BooleanKind\"\n                    date: \"#/components/schemas/DateKind\"\n                    datetime: \"#/components/schemas/DateTimeKind\"\n\n            properties:\n                runtime_kind:\n                    type: string\n                    enum:\n                        - string\n                        - int32\n                        - int64\n                        - float\n                        - double\n                        - boolean\n                        - date\n                        - datetime\n                    description: \"The runtime kind of this kind\"\n        StringKind:\n            type: object\n            allOf:\n                -   $ref: '#/components/schemas/SimpleKind'\n            properties:\n                min_length:\n                    type: string\n                    description: \"The minimal length of this string\"\n                max_length:\n                    type: string\n                    description: \"The maximal length of this string\"\n                pattern:\n                    type: string\n                    description: \"The regexp pattern, that this string has to adhere to\"\n                enum:\n                    type: array\n                    items:\n                        type: string\n                    description: \"The allowed values of this string enumerated here\"\n        NumberKind:\n            type: object\n            allOf:\n                -   $ref: '#/components/schemas/SimpleKind'\n            properties:\n                minimum:\n                    oneOf:\n                        -   type: integer\n                        -   type: number\n                    description: \"The minimal value of this number\"\n                maximum:\n                    oneOf:\n                        -   type: integer\n                        -   type: number\n                    description: \"The maximum value of this number\"\n                enum:\n                    type: array\n                    items:\n                        type: integer\n                    description: \"The allowed values of this number enumerated here\"\n        BooleanKind:\n            type: object\n            allOf:\n                -   $ref: '#/components/schemas/SimpleKind'\n        DateTimeKind:\n            type: object\n            allOf:\n                -   $ref: '#/components/schemas/SimpleKind'\n        DateKind:\n            type: object\n            allOf:\n                -   $ref: '#/components/schemas/SimpleKind'\n        ArrayKind:\n            type: object\n            allOf:\n                -   $ref: '#/components/schemas/KindBase'\n            properties:\n                inner:\n                    $ref: \"#/components/schemas/KindBase\"\n        Property:\n            type: object\n            properties:\n                name:\n                    type: string\n                    description: \"The name of this property\"\n                kind:\n                    type: string\n                    description: \"The fully qualified kind of this property\"\n                required:\n                    type: boolean\n                    description: \"Defines if this property is required or not\"\n                    default: false\n                description:\n                    type: string\n                    description: \"Some human readable description of this property\"\n        ComplexKind:\n            type: object\n            allOf:\n                -   $ref: '#/components/schemas/KindBase'\n            properties:\n                base:\n                    type: string\n                    description: \"In case of inheritance, this defines the base kind.\"\n                properties:\n                    type: array\n                    description: \"Defines all properties of this complex kind\"\n                    items:\n                        $ref: '#/components/schemas/Property'\n        StringDictKind:\n            type: object\n            description: \"A simple dictionary where all keys and values are strings\"\n            allOf:\n                -   $ref: '#/components/schemas/KindBase'\n\n        RawQuery:\n            type: object\n            description: \"The raw query as performed by the database\"\n            properties:\n                query:\n                    type: string\n                    description: \"The string representation of the query\"\n                bind_vars:\n                    type: object\n                    description: \"All binding variables for this query\"\n                    additionalProperties: true\n\n        EstimatedSearchCost:\n            type: object\n            description: \"The estimated cost of a search\"\n            properties:\n                estimated_cost:\n                    type: integer\n                    description: Absolute number that shows the cost of this search. See rating for an interpreted number.\n                estimated_nr_items:\n                    type: integer\n                    description: |\n                        This is the estimated number of items returned for this search.\n                        Please note: it is computed based on search statistics and heuristics and does not reflect the real number.\n                available_nr_items:\n                    type: integer\n                    description: This is the number of available nodes in the graph.\n                full_collection_scan:\n                    type: boolean\n                    description: |\n                        Indicates, if a full collection scan is required.\n                        This means, that the search does not take advantage of any indexes!\n                rating:\n                    type: string\n                    description: |\n                        The rating of this search.\n                        A simple search is usually fine.\n                        A complex search might be acceptable in certain cases. Maybe an index can be used to make this search simple?\n                        A bad search is usually something where an index is missing or the search has to be rewritten.\n                    enum:\n                        - simple\n                        - complex\n                        - bad\n\n        CLIInfo:\n            type: object\n            description: Information about the CLI\n            properties:\n                commands:\n                    description: All available commands\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/CLICommand'\n                replacements:\n                    description: All available replacements with current value\n                    type: object\n                    additionalProperties:\n                        type: string\n                aliases:\n                    description: All available aliases\n                    type: object\n                    additionalProperties:\n                        type: string\n        CLICommand:\n            type: object\n            description: Information about a CLI command\n            properties:\n                name:\n                    type: string\n                    description: The name of the CLI command.\n                info:\n                    type: string\n                    description: Short description.\n                help:\n                    type: string\n                    description: Help text of the CLI command.\n\n\n\n"
		}
	},
	"Error": "parse: parse spec: paths: /graph/{graph_id}/batch/merge: post: operation \"\": parameters: parse parameter \"batch_id\": schema: unexpected default \"null\" value"
}