{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/smilofoundation/go-smilo"
		},
		"file": {
			"name": "swagger.yml",
			"size": 0,
			"path": "vendor/github.com/influxdata/platform/http/swagger.yml",
			"byteSize": 137368,
			"content": "openapi: \"3.0.0\"\ninfo:\n  title: Influx API Service\n  version: 0.1.0\nservers:\n  - url: /api/v2\npaths:\n  /signin:\n    post:\n      summary: Exchange basic auth credentials for session\n      security:\n        - basicAuth: []\n      responses:\n        '204':\n          description: succesfully authenticated\n        default:\n          description: unsuccessful authentication\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /signout:\n    post:\n      summary: Expire the current session\n      responses:\n        '204':\n          description: session successfully expired\n        default:\n          description: unsuccessful session exipry\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /:\n    get:\n      summary: Map of all top level routes available\n      responses:\n        default:\n          description: All routes\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Routes\"\n  /setup:\n    get:\n      tags:\n        - Setup\n      summary: check if database has default user, org, bucket created, returns true if not.\n      responses:\n        '200':\n          description:\n            allowed true or false\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/IsOnboarding\"\n    post:\n      tags:\n        - Setup\n      summary: post onboarding request, to setup initial user, org and bucket\n      requestBody:\n        description: source to create\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/OnboardingRequest\"\n      responses:\n        '201':\n          description: Created default user, bucket, org\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/OnboardingResponse\"\n  /telegrafs:\n    get:\n      tags:\n        - Telegrafs\n      parameters:\n          - in: query\n            name: org\n            description: specifies the organization of the resource\n            required: true\n            schema:\n              type: string\n      responses:\n        '200':\n          description: a list of telegraf configs\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Telegrafs\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      tags:\n        - Telegrafs\n      summary: Create a telegraf config\n      parameters:\n          - in: query\n            name: org\n            description: specifies the organization of the resource\n            required: true\n            schema:\n              type: string\n      requestBody:\n        description: telegraf config to create\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/TelegrafRequest\"\n      responses:\n        '201':\n          description: Telegraf config created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Telegraf\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/telegrafs/{telegrafID}':\n    get:\n      tags:\n        - Telegrafs\n      summary: Retrieve a telegraf config\n      parameters:\n        - in: path\n          name: telegrafID\n          schema:\n            type: string\n          required: true\n          description: ID of telegraf config\n      responses:\n        '200':\n          description: telegraf config details\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Telegraf\"\n            application/toml:\n              example: \"[agent]\\ninterval = \\\"10s\\\"\"\n              schema:\n                type: string\n            application/octet-stream:\n              example: \"[agent]\\ninterval = \\\"10s\\\"\"\n              schema:\n                type: string\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    put:\n      tags:\n        - Telegrafs\n      summary: Update a telegraf config\n      parameters:\n        - in: path\n          name: telegrafID\n          schema:\n            type: string\n          required: true\n          description: ID of telegraf config\n      requestBody:\n        description: telegraf config update to apply\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/TelegrafRequest\"\n      responses:\n        '200':\n          description: An updated telegraf\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Telegraf\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/telegrafs/{telegrafID}/members':\n    get:\n      tags:\n        - Users\n        - Telegrafs\n      summary: List all users with member privileges for a telegraf config\n      parameters:\n        - in: path\n          name: telegrafID\n          schema:\n            type: string\n          required: true\n          description: ID of the telegraf config\n      responses:\n        '200':\n          description: a list of telegraf config members\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Users\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      tags:\n        - Users\n        - Telegrafs\n      summary: Add telegraf config member\n      parameters:\n        - in: path\n          name: telegrafID\n          schema:\n            type: string\n          required: true\n          description: ID of the telegraf config\n      requestBody:\n        description: user to add as member\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n      responses:\n        '201':\n          description: member added to telegraf\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/telegrafs/{telegrafID}/members/{userID}':\n    delete:\n      tags:\n        - Users\n        - Telegrafs\n      summary: removes a member from a telegraf config\n      parameters:\n        - in: path\n          name: userID\n          schema:\n            type: string\n          required: true\n          description: ID of member to remove\n        - in: path\n          name: telegrafID\n          schema:\n            type: string\n          required: true\n          description: ID of the telegraf\n      responses:\n        '204':\n          description: member removed\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/telegrafs/{telegrafID}/owners':\n    get:\n      tags:\n        - Users\n        - Telegrafs\n      summary: List all owners of a telegraf config\n      parameters:\n        - in: path\n          name: telegrafID\n          schema:\n            type: string\n          required: true\n          description: ID of the telegraf config\n      responses:\n        '200':\n          description: a list of telegraf config owners\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Users\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      tags:\n        - Users\n        - Telegrafs\n      summary: Add telegraf config owner\n      parameters:\n        - in: path\n          name: telegrafID\n          schema:\n            type: string\n          required: true\n          description: ID of the telegraf config\n      requestBody:\n        description: user to add as owner\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n      responses:\n        '201':\n          description: telegraf config owner added\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/telegrafs/{telegrafID}/owners/{userID}':\n    delete:\n      tags:\n        - Users\n        - Telegrafs\n      summary: removes an owner from a telegraf config\n      parameters:\n        - in: path\n          name: userID\n          schema:\n            type: string\n          required: true\n          description: ID of owner to remove\n        - in: path\n          name: telegrafID\n          schema:\n            type: string\n          required: true\n          description: ID of the telegraf config\n      responses:\n        '204':\n          description: owner removed\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /macros:\n    get:\n      tags:\n        - Macros\n      summary: keywords that specify how input data gets mapped to a replacement output sequence\n      parameters:\n        - in: header\n          name: Authorization\n          description: the authorization header should be in the format of `Token \u003ckey\u003e`\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: org\n          required: true\n          schema:\n            type: string\n          description: filter macros to a specific organization name\n      responses:\n        '200':\n          description: all macros for an organization\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Macros\"\n        default:\n          description: internal server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      summary: keywords that specify how input data gets mapped to a replacement output sequence\n      tags:\n        - Macros\n      parameters:\n        - in: header\n          name: Authorization\n          description: the authorization header should be in the format of `Token \u003ckey\u003e`\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: org\n          required: true\n          schema:\n            type: string\n          description: filter macros to a specific organization name\n      responses:\n        '201':\n          description: macro created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Macros\"\n        default:\n          description: internal server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/macros/{macroID}':\n    delete:\n      tags:\n        - Macros\n      summary: keywords that specify how input data gets mapped to a replacement output sequence\n      parameters:\n        - in: header\n          name: Authorization\n          description: the authorization header should be in the format of `Token \u003ckey\u003e`\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: macroID\n          required: true\n          schema:\n            type: string\n          description: id of the macro\n        - in: query\n          name: org\n          required: true\n          schema:\n            type: string\n          description: filter macros to a specific organization name\n      responses:\n        '204':\n          description: macro deleted\n        default:\n          description: internal server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    patch:\n      summary: keywords that specify how input data gets mapped to a replacement output sequence\n      tags:\n        - Macros\n      parameters:\n        - in: header\n          name: Authorization\n          description: the authorization header should be in the format of `Token \u003ckey\u003e`\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: macroID\n          required: true\n          schema:\n            type: string\n          description: id of the macro\n        - in: query\n          name: org\n          required: true\n          schema:\n            type: string\n          description: filter macros to a specific organization name\n      responses:\n        '200':\n          description: macro updated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Macros\"\n        default:\n          description: internal server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /write:\n    post:\n      tags:\n        - Write\n      summary: write time-series data into influxdb\n      parameters:\n        - in: header\n          name: Content-Encoding\n          description: when present, its value indicates to the database that compression is applied to the line-protocol body.\n          schema:\n            type: string\n            description: specifies that the line protocol in the body is encoded with gzip or not encoded with identity.\n            default: identity\n            enum:\n              - gzip\n              - identity\n        - in: header\n          name: Content-Type\n          description: Content-Type is used to indicate the format of the data sent to the server.\n          schema:\n            type: string\n            description: text/plain specifies the text line protocol; charset is assumed to be utf-8.\n            default: text/plain; charset=utf-8\n            enum:\n              - text/plain\n              - text/plain; charset=utf-8\n              - application/vnd.influx.arrow\n        - in: header\n          name: Content-Length\n          description: Content-Length is an entity header is indicating the size of the entity-body, in bytes, sent to the database. If the length is greater than the database max body configuration option, a 413 response is sent.\n          schema:\n            type: integer\n            description: The length in decimal number of octets.\n        - in: header\n          name: Accept\n          description: specifies the return content format.\n          schema:\n            type: string\n            description: return format of any errors\n            default: application/json\n            enum:\n              - application/json\n        - in: query\n          name: org\n          description: specifies the destination organization for writes\n          required: true\n          schema:\n            type: string\n            description: all points within batch are written to this organization.\n        - in: query\n          name: bucket\n          description: specifies the destination bucket for writes\n          required: true\n          schema:\n            type: string\n            description: all points within batch are written to this bucket.\n        - in: query\n          name: precision\n          description: specifies the precision for the unix timestamps within the body line-protocol\n          schema:\n            type: string\n            default: ns\n            description: specifies the unit of time\n            enum:\n              - ns\n              - us\n              - u\n              - ms\n              - s\n      responses:\n        '204':\n          description: write data is correctly formatted and accepted for writing to the bucket.\n        '400':\n          description: line protocol poorly formed and no points were written.  Response can be used to determine the first malformed line in the body line-protocol. All data in body was rejected and not written.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LineProtocolError\"\n        '401':\n          description: token does not have sufficient permissions to write to this organization and bucket or the organization and bucket do not exist.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        '403':\n          description: no token was sent and they are required.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        '413':\n          description: write has been rejected because the payload is too large. Error message returns max size supported. All data in body was rejected and not written.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LineProtocolLengthError\"\n        '429':\n          description: token is temporarily over quota. The Retry-After header describes when to try the write again.\n          headers:\n            Retry-After:\n              description: A non-negative decimal integer indicating the seconds to delay after the response is received.\n              schema:\n                type: integer\n                format: int32\n        '503':\n          description: server is temporarily unavailable to accept writes.  The Retry-After header describes when to try the write again.\n          headers:\n            Retry-After:\n              description: A non-negative decimal integer indicating the seconds to delay after the response is received.\n              schema:\n                type: integer\n                format: int32\n        default:\n          description: internal server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /health:\n    get:\n      tags:\n        - Health\n      summary: Get the health of an instance\n      responses:\n        '200':\n          description: the instance is healthy\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Health\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /sources:\n    post:\n      tags:\n        - Sources\n      summary: Creates a Source\n      parameters:\n          - in: query\n            name: org\n            description: specifies the organization of the resource\n            required: true\n            schema:\n              type: string\n      requestBody:\n          description: source to create\n          required: true\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Source\"\n      responses:\n        '201':\n          description: Created Source\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Source\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    get:\n      tags:\n        - Sources\n      summary: Get all sources\n      parameters:\n          - in: query\n            name: org\n            description: specifies the organization of the resource\n            required: true\n            schema:\n              type: string\n      responses:\n        '200':\n          description: all sources\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Sources\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /sources/{sourceID}:\n    patch:\n      tags:\n        - Sources\n      summary: Updates a Source\n      parameters:\n          - in: path\n            name: sourceID\n            schema:\n              type: string\n            required: true\n            description: ID of the source\n      requestBody:\n          description: source update\n          required: true\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Source\"\n      responses:\n        '200':\n          description: Created Source\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Source\"\n        '404':\n          description: source not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    get:\n      tags:\n        - Sources\n      summary: Get a source\n      parameters:\n          - in: path\n            name: sourceID\n            schema:\n              type: string\n            required: true\n            description: ID of the source\n      responses:\n        '200':\n          description: a source\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Source\"\n        '404':\n          description: source not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /sources/{sourceID}/health:\n    get:\n      tags:\n        - Sources\n      summary: Get a sources health\n      parameters:\n          - in: path\n            name: sourceID\n            schema:\n              type: string\n            required: true\n            description: ID of the source\n      responses:\n        '200':\n          description: a source\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Source\"\n        '404':\n          description: source not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /sources/{sourceID}/buckets:\n    get:\n      tags:\n        - Sources\n        - Buckets\n      summary: Get a sources buckets (will return dbrps in the form of buckets if it is a v1 source)\n      parameters:\n          - in: path\n            name: sourceID\n            schema:\n              type: string\n            required: true\n            description: ID of the source\n          - in: query\n            name: org\n            description: specifies the organization of the resource\n            required: true\n            schema:\n              type: string\n      responses:\n        '200':\n          description: a source\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Buckets\"\n        '404':\n          description: source not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /views:\n    post:\n      tags:\n        - Views\n      summary: A view contains information about the visual representation of data\n      parameters:\n          - in: query\n            name: org\n            description: specifies the organization of the resource\n            required: true\n            schema:\n              type: string\n      requestBody:\n          description: view to create\n          required: true\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/View\"\n      responses:\n        '201':\n          description: Added view\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/View\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    get:\n      tags:\n        - Views\n      summary: Get all views\n      parameters:\n          - in: query\n            name: org\n            description: specifies the organization of the resource\n            required: true\n            schema:\n              type: string\n      responses:\n        '200':\n          description: all views\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Views\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/views/{viewID}':\n   get:\n    tags:\n      - Views\n    summary: Get a single View\n    parameters:\n        - in: path\n          name: viewID\n          schema:\n            type: string\n          required: true\n          description: ID of view to update\n    responses:\n        '200':\n          description: get a single view\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/View\"\n        '404':\n          description: view not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n   patch:\n      tags:\n        - Views\n      summary: Update a single view\n      requestBody:\n          description: patching of a view\n          required: true\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/View\"\n      parameters:\n        - in: path\n          name: viewID\n          schema:\n            type: string\n          required: true\n          description: ID of view to update\n      responses:\n        '200':\n          description: Updated view\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/View\"\n        '404':\n          description: view not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n   delete:\n      tags:\n        - Views\n      summary: Delete a view\n      parameters:\n        - in: path\n          name: viewID\n          schema:\n            type: string\n          required: true\n          description: ID of view to update\n      responses:\n        '204':\n          description: delete has been accepted\n        '404':\n          description: view not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /dashboards:\n    post:\n      tags:\n        - Dashboards\n      summary: Create a dashboard\n      parameters:\n          - in: query\n            name: org\n            description: specifies the organization of the resource\n            required: true\n            schema:\n              type: string\n      requestBody:\n          description: dashboard to create\n          required: true\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Dashboard\"\n      responses:\n        '201':\n          description: Added dashboard\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Dashboard\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    get:\n      tags:\n        - Dashboards\n      summary: Get all dashboards\n      parameters:\n          - in: query\n            name: owner\n            description: specifies the owner id to return resources for\n            schema:\n              type: string\n          - in: query\n            name: sortBy\n            description: specifies the owner id to return resources for\n            schema:\n              type: string\n              enum:\n                - \"ID\"\n                - \"CreatedAt\"\n                - \"UpdatedAt\"\n          - in: query\n            name: id\n            description: ID list of dashboards to return. If both this and owner are specified, only ids is used.\n            schema:\n              type: array\n              items:\n                type: string\n      responses:\n        '200':\n          description: all dashboards\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Dashboards\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/dashboards/{dashboardID}':\n   get:\n    tags:\n      - Dashboards\n    summary: Get a single Dashboard\n    parameters:\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: ID of dashboard to update\n    responses:\n        '200':\n          description: get a single dashboard\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Dashboard\"\n        '404':\n          description: dashboard not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n   patch:\n      tags:\n        - Dashboards\n      summary: Update a single dashboard\n      requestBody:\n          description: patching of a dashboard\n          required: true\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Dashboard\"\n      parameters:\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: ID of dashboard to update\n      responses:\n        '200':\n          description: Updated dashboard\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Dashboard\"\n        '404':\n          description: dashboard not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n   delete:\n      tags:\n        - Dashboards\n      summary: Delete a dashboard\n      parameters:\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: ID of dashboard to update\n      responses:\n        '204':\n          description: delete has been accepted\n        '404':\n          description: dashboard not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/dashboards/{dashboardID}/cells':\n   put:\n      tags:\n        - Cells\n        - Dashboards\n      summary: Replace a dashboards cells\n      requestBody:\n          description: batch replaces all of a dashboards cells (this is used primarily to update the positional information of all of the cells)\n          required: true\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Cells\"\n      parameters:\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: ID of dashboard to update\n      responses:\n        '200':\n          description: Replaced dashboard cells\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Dashboard\"\n        '404':\n          description: dashboard not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n   post:\n      tags:\n        - Cells\n        - Dashboards\n      summary: Create a dashboard cell\n      requestBody:\n          description: cell that will be added\n          required: true\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CreateCell\"\n      parameters:\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: ID of dashboard to update\n      responses:\n        '201':\n          description: Cell successfully added\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Cell\"\n        '404':\n          description: dashboard not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/dashboards/{dashboardID}/cells/{cellID}':\n    patch:\n      tags:\n        - Cells\n        - Dashboards\n      summary: Update the non positional information related to a cell (because updates to a single cells positional data could cause grid conflicts)\n      requestBody:\n          description: updates the non positional information related to a cell\n          required: true\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CellUpdate\"\n      parameters:\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: ID of dashboard to update\n        - in: path\n          name: cellID\n          schema:\n            type: string\n          required: true\n          description: ID of cell to update\n      responses:\n        '200':\n          description: Updated dashboard cell\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Cell\"\n        '404':\n          description: cell or dashboard not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    delete:\n      tags:\n        - Cells\n        - Dashboards\n      summary: Delete a dashboard cell\n      parameters:\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: ID of dashboard to delte\n        - in: path\n          name: cellID\n          schema:\n            type: string\n          required: true\n          description: ID of cell to delete\n      responses:\n        '204':\n          description: Cell successfully deleted\n        '404':\n          description: cell or dashboard not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/dashboards/{dashboardID}/members':\n    get:\n      tags:\n        - Users\n        - Dashboards\n      summary: List all dashboard members\n      parameters:\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: ID of the dashboard\n      responses:\n        '200':\n          description: a list of users who have member privileges for a dashboard\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Users\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      tags:\n        - Users\n        - Dashboards\n      summary: Add dashboard member\n      parameters:\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: ID of the dashboard\n      requestBody:\n        description: user to add as member\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n      responses:\n        '201':\n          description: added to dashboard members\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/dashboards/{dashboardID}/members/{userID}':\n    delete:\n      tags:\n        - Users\n        - Dashboards\n      summary: removes a member from an dashboard\n      parameters:\n        - in: path\n          name: userID\n          schema:\n            type: string\n          required: true\n          description: ID of member to remove\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: ID of the dashboard\n      responses:\n        '204':\n          description: member removed\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/dashboards/{dashboardID}/owners':\n      get:\n        tags:\n          - Users\n          - Dashboards\n        summary: List all dashboard owners\n        parameters:\n          - in: path\n            name: dashboardID\n            schema:\n              type: string\n            required: true\n            description: ID of the dashboard\n        responses:\n          '200':\n            description: a list of users who have owner privileges for a dashboard\n            content:\n              application/json:\n                schema:\n                  $ref: \"#/components/schemas/Users\"\n          default:\n            description: unexpected error\n            content:\n              application/json:\n                schema:\n                  $ref: \"#/components/schemas/Error\"\n      post:\n        tags:\n          - Users\n          - Dashboards\n        summary: Add dashboard owner\n        parameters:\n          - in: path\n            name: dashboardID\n            schema:\n              type: string\n            required: true\n            description: ID of the dashboard\n        requestBody:\n          description: user to add as owner\n          required: true\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        responses:\n          '201':\n            description: added to dashboard owners\n            content:\n              application/json:\n                schema:\n                  $ref: \"#/components/schemas/User\"\n          default:\n            description: unexpected error\n            content:\n              application/json:\n                schema:\n                  $ref: \"#/components/schemas/Error\"\n  '/dashboards/{dashboardID}/owners/{userID}':\n    delete:\n      tags:\n        - Users\n        - Dashboards\n      summary: removes an owner from an dashboard\n      parameters:\n        - in: path\n          name: userID\n          schema:\n            type: string\n          required: true\n          description: ID of owner to remove\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: ID of the dashboard\n      responses:\n        '204':\n          description: owner removed\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /query/ast:\n    post:\n      description: analyzes flux query and generates a query specification.\n      tags:\n        - Query\n      parameters:\n      - in: header\n        name: Content-Type\n        schema:\n          type: string\n          enum:\n            - application/json\n      - in: header\n        name: Authorization\n        description: the authorization header should be in the format of `Token \u003ckey\u003e`\n        schema:\n          type: string\n      requestBody:\n        description: analyzed flux query to generate abstract syntax tree.\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/LanguageRequest\"\n      responses:\n        '200':\n          description: Abstract syntax tree of flux query.\n          content:\n            application/json: #TODO(goller): document the AST JSON schema\n        default:\n          description: Any response other than 200 is an internal server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /query/spec:\n    post:\n      description: analyzes flux query and generates a query specification.\n      tags:\n        - Query\n      parameters:\n      - in: header\n        name: Content-Type\n        schema:\n          type: string\n          enum:\n            - application/json\n      - in: header\n        name: Authorization\n        description: the authorization header should be in the format of `Token \u003ckey\u003e`\n        schema:\n          type: string\n      requestBody:\n        description: analyzed flux query to generate specification.\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/LanguageRequest\"\n      responses:\n        '200':\n          description: Specification of flux query.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/QuerySpecification\"\n        default:\n          description: Any response other than 200 is an internal server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /query/plan:\n    post:\n      description: analyzes flux query or specification and generates a query plan.\n      tags:\n        - Query\n      parameters:\n      - in: header\n        name: Content-Type\n        schema:\n          type: string\n          enum:\n            - application/json\n      - in: header\n        name: Authorization\n        description: the authorization header should be in the format of `Token \u003ckey\u003e`\n        schema:\n          type: string\n      requestBody:\n        description: flux query or specification to generate plan.\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PlanRequest\"\n      responses:\n        '200':\n          description: Logical plan of flux query.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PlanResponse\"\n        default:\n          description: Any response other than 200 is an internal server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /query/suggestions:\n    get:\n      tags:\n        - Query\n      responses:\n        '200':\n          description: Suggestions for next functions in call chain\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FluxSuggestions\"\n        default:\n          description: Any response other than 200 is an internal server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /query/suggestions/{name}:\n    parameters:\n      - in: path\n        name: name\n        schema:\n          type: string\n        required: true\n        description: name of branching suggestion\n    get:\n      tags:\n        - Query\n      responses:\n        '200':\n          description: Suggestions for next functions in call chain\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FluxSuggestions\"\n        default:\n          description: Any response other than 200 is an internal server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /authorizations:\n    get:\n      tags:\n        - Authorizations\n      summary: List all authorizations\n      parameters:\n        - in: query\n          name: userID\n          schema:\n            type: string\n          description: filter authorizations belonging to a user id\n        - in: query\n          name: user\n          schema:\n            type: string\n          description: filter authorizations belonging to a user name\n      responses:\n        '200':\n          description: A list of authorizations\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Authorizations\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      tags:\n        - Authorizations\n      summary: Create an authorization\n      requestBody:\n        description: authorization to create\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Authorization\"\n      responses:\n        '201':\n          description: authorization created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Authorization\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /authorizations/{authID}:\n    get:\n      tags:\n        - Authorizations\n      summary: Retrieve an authorization\n      parameters:\n        - in: path\n          name: authID\n          schema:\n            type: string\n          required: true\n          description: ID of authorization to get\n      responses:\n        '200':\n          description: authorization details\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Authorization\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    patch:\n      tags:\n        - Authorizations\n      summary: update authorization to be active or inactive. requests using an inactive authorization will be rejected.\n      requestBody:\n        description: authorization to update to apply\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Authorization\"\n      parameters:\n        - in: path\n          name: authID\n          schema:\n            type: string\n          required: true\n          description: ID of authorization to update\n      responses:\n        '200':\n          description: the active or inactie authorization\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Authorization\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    delete:\n      tags:\n        - Authorizations\n      summary: Delete a authorization\n      parameters:\n        - in: path\n          name: authID\n          schema:\n            type: string\n          required: true\n          description: ID of authorization to delete\n      responses:\n        '204':\n          description: authorization deleted\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /query:\n   get:\n    tags:\n      - Query\n    summary: query influx with specified return formatting. The spec and query fields are mutually exclusive.\n    parameters:\n      - in: query\n        name: org\n        description: specifies the organization of the resource\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: query\n        description: query script to execute.\n        required: true\n        schema:\n          type: string\n      - in: header\n        name: Authorization\n        description: the authorization header should be in the format of `Token \u003ckey\u003e`\n        schema:\n          type: string\n    responses:\n        '200':\n          description: query results\n          content:\n            text/csv:\n              schema:\n                type: string\n                example: \u003e\n                  result,table,_start,_stop,_time,region,host,_value\n                  mean,0,2018-05-08T20:50:00Z,2018-05-08T20:51:00Z,2018-05-08T20:50:00Z,east,A,15.43\n                  mean,0,2018-05-08T20:50:00Z,2018-05-08T20:51:00Z,2018-05-08T20:50:20Z,east,B,59.25\n                  mean,0,2018-05-08T20:50:00Z,2018-05-08T20:51:00Z,2018-05-08T20:50:40Z,east,C,52.62\n        '400':\n          description: error processing query\n          headers:\n            X-Influx-Error:\n              description: error string describing the problem\n              schema:\n                type: string\n            X-Influx-Reference:\n              description: reference code unique to the error type\n              schema:\n                type: integer\n          content:\n            text/csv:\n              schema:\n                type: string\n                example: \u003e\n                  error,reference\n                  Failed to parse query,897\n        default:\n          description: internal server error\n          headers:\n            X-Influx-Error:\n              description: error string describing the problem\n              schema:\n                type: string\n            X-Influx-Reference:\n              description: reference code unique to the error type\n              schema:\n                type: integer\n          content:\n            text/csv:\n              schema:\n                type: string\n                example: \u003e\n                  error,reference\n                  Failed to parse query,897\n   post:\n    tags:\n      - Query\n    summary: query an influx\n    parameters:\n      - in: header\n        name: Accept\n        description: specifies the return content format. Each response content type will have its own dialect options.\n        schema:\n          type: string\n          description: return format of either CSV or Arrow buffers\n          default: text/csv\n          enum:\n            - text/csv\n            - application/vnd.influx.arrow\n      - in: header\n        name: Content-Type\n        schema:\n          type: string\n          enum:\n            - application/json\n      - in: header\n        name: Authorization\n        description: the authorization header should be in the format of `Token \u003ckey\u003e`\n        schema:\n          type: string\n      - in: query\n        name: org\n        description: specifies the name of the organization executing the query.\n        schema:\n          type: string\n    requestBody:\n        description: flux query or specification to execute\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Query\"\n    responses:\n        '200':\n          description: query results\n          content:\n            text/csv:\n              schema:\n                type: string\n                example: \u003e\n                  result,table,_start,_stop,_time,region,host,_value\n                  mean,0,2018-05-08T20:50:00Z,2018-05-08T20:51:00Z,2018-05-08T20:50:00Z,east,A,15.43\n                  mean,0,2018-05-08T20:50:00Z,2018-05-08T20:51:00Z,2018-05-08T20:50:20Z,east,B,59.25\n                  mean,0,2018-05-08T20:50:00Z,2018-05-08T20:51:00Z,2018-05-08T20:50:40Z,east,C,52.62\n            application/vnd.influx.arrow:\n              schema:\n                type: string\n                format: binary\n        '400':\n          description: error processing query\n          headers:\n            X-Influx-Error:\n              description: error string describing the problem\n              schema:\n                type: string\n            X-Influx-Reference:\n              description: reference code unique to the error type\n              schema:\n                type: integer\n          content:\n            text/csv:\n              schema:\n                type: string\n                example: \u003e\n                  error,reference\n                  Failed to parse query,897\n            application/vnd.influx.arrow:\n              schema:\n                  type: string\n                  format: binary\n        default:\n          description: internal server error\n          headers:\n            X-Influx-Error:\n              description: error string describing the problem\n              schema:\n                type: string\n            X-Influx-Reference:\n              description: reference code unique to the error type\n              schema:\n                type: integer\n          content:\n            text/csv:\n              schema:\n                type: string\n                example: \u003e\n                  error,reference\n                  Failed to parse query,897\n            application/vnd.influx.arrow:\n              schema:\n                  type: string\n                  format: binary\n  /buckets:\n    get:\n      tags:\n        - Buckets\n      summary: List all buckets\n      parameters:\n          - in: query\n            name: org\n            description: specifies the organization of the resource\n            required: true\n            schema:\n              type: string\n      responses:\n        '200':\n          description: a list of buckets\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Buckets\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      tags:\n        - Buckets\n      summary: Create a bucket\n      parameters:\n          - in: query\n            name: org\n            description: specifies the organization of the resource\n            required: true\n            schema:\n              type: string\n      requestBody:\n        description: bucket to create\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Bucket\"\n      responses:\n        '201':\n          description: Bucket created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Bucket\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/buckets/{bucketID}':\n    get:\n      tags:\n        - Buckets\n      summary: Retrieve a bucket\n      parameters:\n        - in: path\n          name: bucketID\n          schema:\n            type: string\n          required: true\n          description: ID of bucket to get\n      responses:\n        '200':\n          description: bucket details\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Bucket\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    patch:\n      tags:\n        - Buckets\n      summary: Update a bucket\n      requestBody:\n        description: bucket update to apply\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Bucket\"\n      parameters:\n        - in: path\n          name: bucketID\n          schema:\n            type: string\n          required: true\n          description: ID of bucket to update\n      responses:\n        '200':\n          description: An updated bucket\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Bucket\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/buckets/{bucketID}/members':\n    get:\n      tags:\n        - Users\n        - Buckets\n      summary: List all users with member privileges for a bucket\n      parameters:\n        - in: path\n          name: bucketID\n          schema:\n            type: string\n          required: true\n          description: ID of the bucket\n      responses:\n        '200':\n          description: a list of bucket members\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Users\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      tags:\n        - Users\n        - Buckets\n      summary: Add bucket member\n      parameters:\n        - in: path\n          name: bucketID\n          schema:\n            type: string\n          required: true\n          description: ID of the bucket\n      requestBody:\n        description: user to add as member\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n      responses:\n        '201':\n          description: member added to bucket\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/buckets/{bucketID}/members/{userID}':\n    delete:\n      tags:\n        - Users\n        - Buckets\n      summary: removes a member from an bucket\n      parameters:\n        - in: path\n          name: userID\n          schema:\n            type: string\n          required: true\n          description: ID of member to remove\n        - in: path\n          name: bucketID\n          schema:\n            type: string\n          required: true\n          description: ID of the bucket\n      responses:\n        '204':\n          description: member removed\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/buckets/{bucketID}/owners':\n    get:\n      tags:\n        - Users\n        - Buckets\n      summary: List all owners of a bucket\n      parameters:\n        - in: path\n          name: bucketID\n          schema:\n            type: string\n          required: true\n          description: ID of the bucket\n      responses:\n        '200':\n          description: a list of bucket owners\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Users\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      tags:\n        - Users\n        - Buckets\n      summary: Add bucket owner\n      parameters:\n        - in: path\n          name: bucketID\n          schema:\n            type: string\n          required: true\n          description: ID of the bucket\n      requestBody:\n        description: user to add as owner\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n      responses:\n        '201':\n          description: bucket owner added\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/buckets/{bucketID}/owners/{userID}':\n    delete:\n      tags:\n        - Users\n        - Buckets\n      summary: removes an owner from a bucket\n      parameters:\n        - in: path\n          name: userID\n          schema:\n            type: string\n          required: true\n          description: ID of owner to remove\n        - in: path\n          name: bucketID\n          schema:\n            type: string\n          required: true\n          description: ID of the bucket\n      responses:\n        '204':\n          description: owner removed\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /orgs:\n    get:\n      tags:\n        - Organizations\n      summary: List all organizations\n      responses:\n        '200':\n          description: A list of organizations\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Organizations\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      tags:\n        - Organizations\n      summary: Create an organization\n      requestBody:\n        description: organization to create\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Organization\"\n      responses:\n        '201':\n          description: organization created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Organization\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/orgs/{orgID}':\n    get:\n      tags:\n        - Organizations\n      summary: Retrieve an organization\n      parameters:\n        - in: path\n          name: orgID\n          schema:\n            type: string\n          required: true\n          description: ID of organization to get\n      responses:\n        '200':\n          description: organization details\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Organization\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    patch:\n      tags:\n        - Organizations\n      summary: Update an organization\n      requestBody:\n        description: organization update to apply\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Organization\"\n      parameters:\n        - in: path\n          name: orgID\n          schema:\n            type: string\n          required: true\n          description: ID of organization to get\n      responses:\n        '200':\n          description: organization updated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Organization\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/orgs/{orgID}/members':\n    get:\n      tags:\n        - Users\n        - Organizations\n      summary: List all members of an organization\n      parameters:\n        - in: path\n          name: orgID\n          schema:\n            type: string\n          required: true\n          description: ID of the organization\n      responses:\n        '200':\n          description: a list of organization members\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Users\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      tags:\n        - Users\n        - Organizations\n      summary: Add organization member\n      parameters:\n        - in: path\n          name: orgID\n          schema:\n            type: string\n          required: true\n          description: ID of the organization\n      requestBody:\n        description: user to add as member\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n      responses:\n        '201':\n          description: added to organization created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/orgs/{orgID}/members/{userID}':\n    delete:\n      tags:\n        - Users\n        - Organizations\n      summary: removes a member from an organization\n      parameters:\n        - in: path\n          name: userID\n          schema:\n            type: string\n          required: true\n          description: ID of member to remove\n        - in: path\n          name: orgID\n          schema:\n            type: string\n          required: true\n          description: ID of the organization\n      responses:\n        '204':\n          description: member removed\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/orgs/{orgID}/owners':\n    get:\n      tags:\n        - Users\n        - Organizations\n      summary: List all owners of an organization\n      parameters:\n        - in: path\n          name: orgID\n          schema:\n            type: string\n          required: true\n          description: ID of the organization\n      responses:\n        '200':\n          description: a list of organization owners\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Users\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      tags:\n        - Users\n        - Organizations\n      summary: Add organization owner\n      parameters:\n        - in: path\n          name: orgID\n          schema:\n            type: string\n          required: true\n          description: ID of the organization\n      requestBody:\n        description: user to add as owner\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n      responses:\n        '201':\n          description: organization owner added\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/orgs/{orgID}/owners/{userID}':\n    delete:\n      tags:\n        - Users\n        - Organizations\n      summary: removes an owner from an organization\n      parameters:\n        - in: path\n          name: userID\n          schema:\n            type: string\n          required: true\n          description: ID of owner to remove\n        - in: path\n          name: orgID\n          schema:\n            type: string\n          required: true\n          description: ID of the organization\n      responses:\n        '204':\n          description: owner removed\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /tasks:\n    get:\n      tags:\n        - Tasks\n      summary: List tasks.\n      description: Lists tasks, limit 100\n      parameters:\n        - in: query\n          name: after\n          schema:\n            type: string\n          description: returns tasks after specified ID\n        - in: query\n          name: user\n          schema:\n            type: string\n          description: filter tasks to a specific user name\n        - in: query\n          name: org\n          schema:\n            type: string\n          description: filter tasks to a specific organization name\n      responses:\n        '200':\n          description: A list of tasks\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  runs:\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/Tasks\"\n                  links:\n                    $ref: \"#/components/schemas/Links\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      tags:\n        - Tasks\n      summary: Create a new task\n      parameters:\n        - in: query\n          name: org\n          schema:\n            type: string\n          description: filter tasks to a specific organization name\n      requestBody:\n        description: task to create\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Task\"\n      responses:\n        '201':\n          description: Task created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Task\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/tasks/{taskID}':\n    get:\n      tags:\n        - Tasks\n      summary: Retrieve an task\n      parameters:\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: ID of task to get\n      responses:\n        '200':\n          description: task details\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Task\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    patch:\n      tags:\n        - Tasks\n      summary: Update a task\n      description: Update a task. This will cancel all queued runs.\n      requestBody:\n        description: task update to apply\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Task\"\n      parameters:\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: ID of task to get\n      responses:\n        '200':\n          description: task updated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Task\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    delete:\n      tags:\n        - Tasks\n      summary: Delete a task\n      description: Deletes a task and all associated records\n      parameters:\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: ID of task to delete\n      responses:\n        '204':\n          description: task deleted\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/tasks/{taskID}/runs':\n    get:\n      tags:\n        - Tasks\n      summary: Retrieve list of run records for a task\n      parameters:\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: ID of task to get runs for\n        - in: query\n          name: after\n          schema:\n            type: string\n          description: returns runs after specified ID\n        - in: query\n          name: limit\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 100\n            default: 20\n          description: the number of runs to return\n        - in: query\n          name: afterTime\n          schema:\n            type: string\n            format: date-time\n          description: filter runs to those scheduled after this time, RFC3339\n        - in: query\n          name: beforeTime\n          schema:\n            type: string\n            format: date-time\n          description: filter runs to those scheduled before this time, RFC3339\n      responses:\n        '200':\n          description: a list of task runs\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  runs:\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/Run\"\n                  links:\n                    $ref: \"#/components/schemas/Links\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/tasks/{taskID}/runs/{runID}':\n    get:\n      tags:\n        - Tasks\n      summary: Retrieve a single run record for a task\n      parameters:\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: task ID\n        - in: path\n          name: runID\n          schema:\n            type: string\n          required: true\n          description: run ID\n      responses:\n        '200':\n          description: The run record\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Run\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/tasks/{taskID}/runs/{runID}/retry':\n    post:\n      tags:\n        - Tasks\n      summary: Retry a task run\n      parameters:\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: task ID\n        - in: path\n          name: runID\n          schema:\n            type: string\n          required: true\n          description: run ID\n      responses:\n        '204':\n          description: retry has been queued\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/tasks/{taskID}/logs':\n    get:\n      tags:\n        - Tasks\n      summary: Retrieve all logs for a task\n      parameters:\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: ID of task to get logs for\n      responses:\n        '200':\n          description: all logs for a task\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Logs\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/tasks/{taskID}/runs/{runID}/logs':\n    get:\n      tags:\n        - Tasks\n      summary: Retrieve all logs for a run\n      parameters:\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: ID of task to get logs for.\n        - in: path\n          name: runID\n          schema:\n            type: string\n          required: true\n          description: ID of run to get logs for.\n      responses:\n        '200':\n          description: all logs for a run\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Logs\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /me:\n    get:\n      tags:\n        - Users\n      summary: Returns currently authenticated user\n      responses:\n        '200':\n          description: currently authenticated user\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /me/password:\n    put:\n      tags:\n        - Users\n      summary: Update password\n      security:\n        - basicAuth: []\n      requestBody:\n        description: new password\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PasswordResetBody\"\n      responses:\n        '204':\n          description: password succesfully updated\n        default:\n          description: unsuccessful authentication\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/tasks/{taskID}/members':\n    get:\n      tags:\n        - Users\n        - Tasks\n      summary: List all task members\n      parameters:\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: ID of the task\n      responses:\n        '200':\n          description: a list of users who have member privileges for a task\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Users\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      tags:\n        - Users\n        - Tasks\n      summary: Add task member\n      parameters:\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: ID of the task\n      requestBody:\n        description: user to add as member\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n      responses:\n        '201':\n          description: added to task members\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/tasks/{taskID}/members/{userID}':\n    delete:\n      tags:\n        - Users\n        - Tasks\n      summary: removes a member from an task\n      parameters:\n        - in: path\n          name: userID\n          schema:\n            type: string\n          required: true\n          description: ID of member to remove\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: ID of the task\n      responses:\n        '204':\n          description: member removed\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/tasks/{taskID}/owners':\n      get:\n        tags:\n          - Users\n          - Tasks\n        summary: List all task owners\n        parameters:\n          - in: path\n            name: taskID\n            schema:\n              type: string\n            required: true\n            description: ID of the task\n        responses:\n          '200':\n            description: a list of users who have owner privileges for a task\n            content:\n              application/json:\n                schema:\n                  $ref: \"#/components/schemas/Users\"\n          default:\n            description: unexpected error\n            content:\n              application/json:\n                schema:\n                  $ref: \"#/components/schemas/Error\"\n      post:\n        tags:\n          - Users\n          - Tasks\n        summary: Add task owner\n        parameters:\n          - in: path\n            name: taskID\n            schema:\n              type: string\n            required: true\n            description: ID of the task\n        requestBody:\n          description: user to add as owner\n          required: true\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        responses:\n          '201':\n            description: added to task owners\n            content:\n              application/json:\n                schema:\n                  $ref: \"#/components/schemas/User\"\n          default:\n            description: unexpected error\n            content:\n              application/json:\n                schema:\n                  $ref: \"#/components/schemas/Error\"\n  '/tasks/taskID}/owners/{userID}':\n    delete:\n      tags:\n        - Users\n        - Tasks\n      summary: removes an owner from an task\n      parameters:\n        - in: path\n          name: userID\n          schema:\n            type: string\n          required: true\n          description: ID of owner to remove\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: ID of the task\n      responses:\n        '204':\n          description: owner removed\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /users:\n    get:\n      tags:\n        - Users\n      summary: List all users\n      responses:\n        '200':\n          description: a list of users\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Users\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      tags:\n        - Users\n      summary: Create a user\n      requestBody:\n        description: user to create\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n      responses:\n        '201':\n          description: user created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserResponse\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/users/{userID}':\n    get:\n      tags:\n        - Users\n      summary: Retrieve a user\n      parameters:\n        - in: path\n          name: userID\n          schema:\n            type: string\n          required: true\n          description: ID of user to get\n      responses:\n        '200':\n          description: user details\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserResponse\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    patch:\n      tags:\n        - Users\n      summary: Update a user\n      requestBody:\n        description: user update to apply\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n      parameters:\n        - in: path\n          name: userID\n          schema:\n            type: string\n          required: true\n          description: ID of user to update\n      responses:\n        '200':\n          description: user updated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    delete:\n      tags:\n        - Users\n      summary: deletes a user\n      parameters:\n        - in: path\n          name: userID\n          schema:\n            type: string\n          required: true\n          description: ID of user to delete\n      responses:\n        '204':\n          description: user deleted\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/users/{userID}/password':\n    put:\n      tags:\n        - Users\n      summary: Update password\n      security:\n        - basicAuth: []\n      parameters:\n        - in: path\n          name: userID\n          schema:\n            type: string\n          required: true\n          description: ID of the user\n      requestBody:\n        description: new password\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PasswordResetBody\"\n      responses:\n        '200':\n          description: user details\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserResponse\"\n        default:\n          description: unsuccessful authentication\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/views/{viewID}/members':\n    get:\n      tags:\n        - Users\n        - Views\n      summary: List all view members\n      parameters:\n        - in: path\n          name: viewID\n          schema:\n            type: string\n          required: true\n          description: ID of the view\n      responses:\n        '200':\n          description: a list of users who have member privileges for a view\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Users\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      tags:\n        - Users\n        - Views\n      summary: Add view member\n      parameters:\n        - in: path\n          name: viewID\n          schema:\n            type: string\n          required: true\n          description: ID of the view\n      requestBody:\n        description: user to add as member\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n      responses:\n        '201':\n          description: added to view members\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/views/{viewID}/members/{userID}':\n    delete:\n      tags:\n        - Users\n        - Views\n      summary: removes a member from an view\n      parameters:\n        - in: path\n          name: userID\n          schema:\n            type: string\n          required: true\n          description: ID of member to remove\n        - in: path\n          name: viewID\n          schema:\n            type: string\n          required: true\n          description: ID of the view\n      responses:\n        '204':\n          description: member removed\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/views/{viewID}/owners':\n      get:\n        tags:\n          - Users\n          - Views\n        summary: List all view owners\n        parameters:\n          - in: path\n            name: viewID\n            schema:\n              type: string\n            required: true\n            description: ID of the view\n        responses:\n          '200':\n            description: a list of users who have owner privileges for a view\n            content:\n              application/json:\n                schema:\n                  $ref: \"#/components/schemas/Users\"\n          default:\n            description: unexpected error\n            content:\n              application/json:\n                schema:\n                  $ref: \"#/components/schemas/Error\"\n      post:\n        tags:\n          - Users\n          - Views\n        summary: Add view owner\n        parameters:\n          - in: path\n            name: viewID\n            schema:\n              type: string\n            required: true\n            description: ID of the view\n        requestBody:\n          description: user to add as owner\n          required: true\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        responses:\n          '201':\n            description: added to view owners\n            content:\n              application/json:\n                schema:\n                  $ref: \"#/components/schemas/User\"\n          default:\n            description: unexpected error\n            content:\n              application/json:\n                schema:\n                  $ref: \"#/components/schemas/Error\"\n  '/views/{viewID}/owners/{userID}':\n    delete:\n      tags:\n        - Users\n        - Views\n      summary: removes an owner from a view\n      parameters:\n        - in: path\n          name: userID\n          schema:\n            type: string\n          required: true\n          description: ID of owner to remove\n        - in: path\n          name: viewID\n          schema:\n            type: string\n          required: true\n          description: ID of the view\n      responses:\n        '204':\n          description: owner removed\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\ncomponents:\n  schemas:\n    LanguageRequest:\n      description: flux query to be analyzed.\n      type: object\n      required:\n        - query\n      properties:\n        query:\n          description: flux query script to be analyzed\n          type: string\n    PlanRequest:\n      description: flux query or specification to be planned. The spec and query fields are mutually exclusive.\n      type: object\n      properties:\n        query:\n          description: flux query script to be analyzed\n          type: string\n        spec:\n          $ref: \"#/components/schemas/QuerySpecification\"\n    PlanResponse:\n      description: flux query or specification to be planned.\n      type: object\n      required:\n        - query\n      properties:\n        spec:\n          $ref: \"#/components/schemas/QuerySpecification\"\n          readOnly: true\n        logical:\n          description: logical plan of the query.\n          readOnly: true\n          type: object #TODO(goller): document the logical plan format\n        physical:\n          description: physical plan of the query.\n          readOnly: true\n          type: object #TODO(goller): document the physical plan format\n    Query:\n      description: query influx with specified return formatting. The spec and query fields are mutually exclusive.\n      type: object\n      required:\n        - query\n      properties:\n        query:\n          description: query script to execute.\n          type: string\n        spec:\n          $ref: \"#/components/schemas/QuerySpecification\"\n        type:\n          description: type of query\n          type: string\n          default: flux\n          enum:\n            - flux\n            - influxql\n        db:\n          description: required for influxql type queries\n          type: string\n        rp:\n          description: required for influxql type queries\n          type: string\n        cluster:\n          description: required for influxql type queries\n          type: string\n        dialect:\n          $ref: \"#/components/schemas/Dialect\"\n    QuerySpecification:\n      description: consists of a set of operations and a set of edges between those operations to instruct the query engine to operate.\n      type: object\n      properties:\n        operations:\n          type: array\n          items:\n            type: object\n            properties:\n              kind:\n                description: name of the operation to perform\n                type: string\n              id:\n                description: identifier for this operation; it must be unique per query specification; used in edges\n                type: string\n              spec:\n                description: set of properties that specify details of the operation. These vary by the kind of operation.\n                type: object\n        edges:\n          description: list of declaring a parent child id relationship between operations\n          type: array\n          items:\n            type: object\n            properties:\n              parent:\n                description: id of parent node of child within graph of opertions\n                type: string\n              child:\n                description: id of child node of parent within the graph of operations\n                type: string\n        resources:\n          description: optional set of contraints on the resources the query can consume\n          type: object\n          properties:\n            priority:\n              description: priority of the query\n              oneOf:\n              - type: string\n                description: lower value will move to the front of the priority queue\n                pattern: '^\\d+$'\n              - type: string\n                description: constants to represent the extreme high and low priorities; high is effectively 0.\n                enum:\n                  - high\n                  - low\n            concurrency_quota:\n              description: number of concurrent workers allowed to process this query; 0 indicates the planner can pick the optimal concurrency.\n              type: integer\n              default: 0\n            memory_bytes_quota:\n              description: number of bytes of RAM this query may consume; 0 means unlimited.\n              type: integer\n              default: 0\n        dialect:\n          $ref: \"#/components/schemas/Dialect\"\n    Dialect:\n          description: dialect are options to change the default CSV output format; https://www.w3.org/TR/2015/REC-tabular-metadata-20151217/#dialect-descriptions\n          type: object\n          properties:\n            header:\n              description: if true, the results will contain a header row\n              type: boolean\n              default: true\n            delimiter:\n              description: separator between cells; the default is ,\n              type: string\n              default: \",\"\n              maxLength: 1\n              minLength: 1\n            annotations:\n              description: https://www.w3.org/TR/2015/REC-tabular-data-model-20151217/#columns\n              type: array\n              default: []\n              items:\n                type: string\n                enum:\n                  - group\n                  - datatype\n                  - default\n                uniqueItems: true\n            commentPrefix:\n              description: character prefixed to comment strings\n              type: string\n              default: \\#\n              maxLength: 1\n              minLength: 0\n            dateTimeFormat:\n              description: format of timestamps\n              type: string\n              default: RFC3339\n              enum:\n                - RFC3339\n                - RFC3339Nano\n    Permission:\n      properties:\n        action:\n          type: string\n          enum:\n            - read\n            - write\n            - create\n            - delete\n        resource:\n          type: string\n          enum:\n            - user\n            - org\n            - task/:id\n            - bucket/:id\n            - dashboard/:id\n            - org/:id\n            - org/:id/task\n            - org/:id/bucket\n            - org/:id/source\n            - org/:id/dashboard\n    Authorization:\n      properties:\n        links:\n          type: object\n          readOnly: true\n          example:\n            self: \"/api/v2/authorizations/1\"\n            user: \"/api/v2/users/12\"\n          properties:\n            self:\n              readOnly: true\n              type: string\n              format: uri\n            user:\n              readOnly: true\n              type: string\n              format: uri\n        id:\n          readOnly: true\n          type: string\n        status:\n          description: if inactive the token is inactive and requests using the token will be rejected.\n          default: active\n          type: string\n          enum:\n            - active\n            - inactive\n        token:\n          readOnly: true\n          type: string\n        permissions:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Permission\"\n        owner:\n          $ref: \"#/components/schemas/Owners\"\n      required: [owner]\n    Authorizations:\n      type: object\n      properties:\n        links:\n          readOnly: true\n          $ref: \"#/components/schemas/Links\"\n        authorizations:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Authorization\"\n    Bucket:\n      properties:\n        links:\n          type: object\n          readOnly: true\n          example:\n            self: \"/api/v2/buckets/1\"\n            org: \"/api/v2/orgs/2\"\n            write: \"/api/v2/write?org=myorg\"\n          properties:\n            self:\n              readOnly: true\n              type: string\n              format: uri\n            org:\n              readOnly: true\n              type: string\n              format: uri\n            write:\n              readOnly: true\n              type: string\n              format: uri\n        id:\n          readOnly: true\n          type: string\n        owners:\n          $ref: \"#/components/schemas/Owners\"\n        name:\n          type: string\n        retentionRules:\n          type: array\n          description: rules to expire or retain data.  No rules means data never expires.\n          items:\n            type: object\n            properties:\n              type:\n                type: string\n                default: expire\n                enum:\n                  - expire\n              everySeconds:\n                type: integer\n                description: duration in seconds for how long data will be kept in the database.\n                example: 86400\n                minimum: 1\n            required: [type, everySeconds]\n      required: [name, retentionRules]\n    Buckets:\n      type: object\n      properties:\n        links:\n          readOnly: true\n          $ref: \"#/components/schemas/Links\"\n        buckets:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Bucket\"\n    Link:\n      type: object\n      readOnly: true\n      description: URI of resource.\n      properties:\n        href:\n          type: string\n          format: uri\n      required: [href]\n    Links:\n      type: object\n      properties:\n        next:\n          $ref: \"#/components/schemas/Link\"\n        self:\n          $ref: \"#/components/schemas/Link\"\n        prev:\n          $ref: \"#/components/schemas/Link\"\n      required: [self]\n    Logs:\n      type: object\n      properties:\n        events:\n          readOnly: true\n          type: array\n          items:\n            $ref: \"#/components/schemas/LogEvent\"\n    LogEvent:\n      type: object\n      properties:\n        time:\n          readOnly: true\n          description: Time event occurred, RFC3339Nano.\n          type: string\n          format: date-time\n        message:\n          readOnly: true\n          description: A description of the event that occurred.\n          type: string\n          example: Halt and catch fire\n    Organization:\n      properties:\n        links:\n          type: object\n          readOnly: true\n          example:\n            self: \"/api/v2/orgs/1\"\n            users: \"/api/v2/orgs/1/users\"\n            buckets: \"/api/v2/buckets?org=myorg\"\n            tasks: \"/api/v2/tasks?org=myorg\"\n            dashboards: \"/api/v2/dashboards?org=myorg\"\n          properties:\n            self:\n              readOnly: true\n              type: string\n              format: uri\n            users:\n              readOnly: true\n              type: string\n              format: uri\n            buckets:\n              readOnly: true\n              type: string\n              format: uri\n            tasks:\n              readOnly: true\n              type: string\n              format: uri\n            dashboards:\n              readOnly: true\n              type: string\n              format: uri\n        id:\n          readOnly: true\n          type: string\n        name:\n          type: string\n        status:\n          description: if inactive the organization is inactive.\n          default: active\n          type: string\n          enum:\n            - active\n            - inactive\n        owners:\n          $ref: \"#/components/schemas/Owners\"\n      required: [name]\n    Organizations:\n      type: object\n      properties:\n        links:\n          $ref: \"#/components/schemas/Links\"\n        orgs:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Organization\"\n    Owners:\n      properties:\n        users:\n          $ref: \"#/components/schemas/Users\"\n        organizations:\n          $ref: \"#/components/schemas/Organizations\"\n    Run:\n      properties:\n        id:\n          readOnly: true\n          type: string\n        taskID:\n          readOnly: true\n          type: string\n        status:\n          readOnly: true\n          type: string\n          enum: [\n            \"scheduled\",\n            \"executing\",\n            \"failed\",\n            \"success\"\n          ]\n        scheduledFor:\n          description: Time used for run's \"now\" option, RFC3339.\n          type: string\n          format: date-time\n        startedAt:\n          readOnly: true\n          description: Time run started executing, RFC3339Nano.\n          type: string\n          format: date-time\n        finishedAt:\n          readOnly: true\n          description: Time run finished executing, RFC3339Nano.\n          type: string\n          format: date-time\n        requestedAt:\n          readOnly: true\n          description: Time run was manually requested, RFC3339Nano.\n          type: string\n          format: date-time\n        error:\n          $ref: \"#/components/schemas/Error\"\n        log:\n          readOnly: true\n          description: Link to the full logs for a run.\n          type: string\n    Task:\n      properties:\n        id:\n          readOnly: true\n          type: string\n        organization:\n          description: The ID of the organization that owns this Task.\n          type: string\n        name:\n          description: A description of the task.\n          type: string\n        status:\n          description: The current status of the task. When updated to 'inactive', cancels all queued jobs of this task.\n          default: active\n          type: string\n          enum:\n            - active\n            - inactive\n        owners:\n          $ref: \"#/components/schemas/Owners\"\n        flux:\n          description: The Flux script to run for this task.\n          type: string\n        every:\n          description: A simple task repetition schedule; parsed from Flux.\n          type: string\n        cron:\n          description: A task repetition schedule in the form '* * * * * *'; parsed from Flux.\n          type: string\n      required: [name, organization, flux]\n    Tasks:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Task\"\n    UserResponse:\n      type: object\n      properties:\n        user:\n          $ref: \"#/components/schemas/User\"\n        links:\n          type: object\n          properties:\n            self:\n              type: string\n              format: uri\n    User:\n      properties:\n        id:\n          readOnly: true\n          type: string\n        name:\n          type: string\n        status:\n          description: if inactive the user is inactive.\n          default: active\n          type: string\n          enum:\n            - active\n            - inactive\n      required: [name]\n    Users:\n      type: object\n      properties:\n        links:\n          type: object\n          properties:\n            self:\n              type: string\n              format: uri\n        users:\n          type: array\n          items:\n            $ref: \"#/components/schemas/UserResponse\"\n    FluxSuggestions:\n      type: object\n      properties:\n        funcs:\n          type: object\n          properties:\n            name:\n              type: string\n            params:\n              type: object\n    FluxLinks:\n      type: object\n      properties:\n        ast:\n          type: string\n          format: uri\n        self:\n          type: string\n          format: uri\n        suggestions:\n          type: string\n          format: uri\n    Routes:\n      properties:\n        sources:\n          type: string\n          format: uri\n        dashboards:\n          type: string\n          format: uri\n        query:\n          type: string\n          format: uri\n        write:\n          type: string\n          format: uri\n        orgs:\n          type: string\n          format: uri\n        auths:\n          type: string\n          format: uri\n        buckets:\n          type: string\n          format: uri\n        users:\n          type: string\n          format: uri\n        tasks:\n          type: string\n          format: uri\n        system:\n          type: object\n          properties:\n            metrics:\n              type: string\n              format: uri\n            debug:\n              type: string\n              format: uri\n            health:\n              type: string\n              format: uri\n        external:\n          type: object\n          properties:\n            statusFeed:\n              type: string\n              format: uri\n        flux:\n          $ref: \"#/components/schemas/FluxLinks\"\n    Error:\n      properties:\n        code:\n          description: code is the machine-readable error code.\n          readOnly: true\n          type: string\n          enum:\n            - internal error\n            - not found\n            - conflict\n            - invalid\n            - empty value\n        message:\n          readOnly: true\n          description: message is a human-readable message.\n          type: string\n        op:\n          readOnly: true\n          description: op describes the logical code operation during error. Useful for debugging.\n          type: string\n        err:\n          readOnly: true\n          description: err is a stack of errors that occurred during processing of the request. Useful for debugging.\n          type: string\n      required: [code, message, op, err]\n    LineProtocolError:\n      properties:\n        code:\n          description: code is the machine-readable error code.\n          readOnly: true\n          type: string\n          enum:\n            - internal error\n            - not found\n            - conflict\n            - invalid\n            - empty value\n        message:\n          readOnly: true\n          description: message is a human-readable message.\n          type: string\n        op:\n          readOnly: true\n          description: op describes the logical code operation during error. Useful for debugging.\n          type: string\n        err:\n          readOnly: true\n          description: err is a stack of errors that occurred during processing of the request. Useful for debugging.\n          type: string\n        line:\n          readOnly: true\n          description: first line within sent body containing malformed data\n          type: integer\n          format: int32\n      required: [code, message, op, err]\n    LineProtocolLengthError:\n      properties:\n        code:\n          description: code is the machine-readable error code.\n          readOnly: true\n          type: string\n          enum:\n            - invalid\n        message:\n          readOnly: true\n          description: message is a human-readable message.\n          type: string\n        maxLength:\n          readOnly: true\n          description: max length in bytes for a body of line-protocol.\n          type: integer\n          format: int32\n      required: [code, message, maxLength]\n    InfluxQLResults:\n      properties:\n        error:\n          description: error during processing of the message\n          type: string\n        results:\n          type: array\n          description: result for each query\n          items:\n            type: object\n            properties:\n              error:\n                type: string\n                description: error during processing of the message\n              partial:\n                type: boolean\n                description: If a max row limit has been placed in the configuration file and the number of returned values is larger, this will be set to true and values truncated.\n              statement_id:\n                type: integer\n                description: statement's position in the query.\n              series:\n                description: The collection of data in InfluxDB’s data structure that share a measurement, tag set, and retention policy.\n                type: array\n                items:\n                  type: object\n                  description: values for a unique series\n                  properties:\n                    name:\n                      description: The part of InfluxDB’s structure that describes the data stored in the associated fields. Measurements are strings.\n                      type: string\n                    tags:\n                      description: The key-value pairs in InfluxDB’s data structure that records metadata.\n                      type: object\n                    columns:\n                      description: list of columns describing the content of a single value array\n                      type: array\n                      items:\n                        type: string\n                    values:\n                      description: array of arrays of the values return from the query\n                      type: array\n                      items:\n                        type: array\n                        description: single row of results in the order of the columns field.\n                        items:\n                          oneOf:\n                            - type: string\n                            - type: number\n                            - type: integer\n                    partial:\n                      type: boolean\n              messages:\n                type: array\n                description: represents a user-facing message to be included with the result.\n                items:\n                  type: object\n                  properties:\n                    level:\n                      type: string\n                    text:\n                      type: string\n    InfluxqlQueryError:\n      properties:\n        error:\n          description: message describing why the query was rejected\n          readOnly: true\n          type: string\n      required:\n        - error\n    Field:\n      type: object\n      properties:\n        value:\n          description: \u003e-\n            value is the value of the field.  Meaning of the value is implied by\n            the `type` key\n          type: string\n        type:\n          description: \u003e-\n            type describes the field type. func is a function; field is a field\n            reference\n          type: string\n          enum:\n            - func\n            - field\n            - integer\n            - number\n            - regex\n            - wildcard\n        alias:\n          description: \u003e-\n            Alias overrides the field name in the returned response.  Applies only\n            if type is `func`\n          type: string\n        args:\n          description: Args are the arguments to the function\n          type: array\n          items:\n            $ref: '#/components/schemas/Field'\n    QueryConfig:\n      type: object\n      required:\n        - database\n        - measurement\n        - retentionPolicy\n        - areTagsAccepted\n        - tags\n        - groupBy\n        - fields\n      properties:\n        id:\n          type: string\n        database:\n          type: string\n        measurement:\n          type: string\n        retentionPolicy:\n          type: string\n        areTagsAccepted:\n          type: boolean\n        rawText:\n          type: string\n        tags:\n          type: object\n        groupBy:\n          type: object\n          properties:\n            time:\n              type: string\n            tags:\n              type: array\n              items:\n                type: string\n          required:\n            - time\n            - tags\n        fields:\n          type: array\n          items:\n            $ref: '#/components/schemas/Field'\n        range:\n          type: object\n          properties:\n            lower:\n              type: string\n            upper:\n              type: string\n          required:\n            - lower\n            - upper\n    DashboardQuery:\n      type: object\n      required:\n        - query\n      properties:\n        label:\n          type: string\n          description: Optional Y-axis user-facing label\n        range:\n          description: Optional default range of the Y-axis\n          type: object\n          required:\n            - upper\n            - lower\n          properties:\n            upper:\n              description: Upper bound of the display range of the Y-axis\n              type: integer\n              format: int64\n            lower:\n              description: Lower bound of the display range of the Y-axis\n              type: integer\n              format: int64\n        query:\n          type: string\n        source:\n          type: string\n          format: uri\n          description: Optional URI for data source for this query\n        queryConfig:\n          $ref: '#/components/schemas/QueryConfig'\n    Axis:\n      type: object\n      description: A description of a particular axis for a visualization\n      properties:\n        bounds:\n          type: array\n          minItems: 0\n          maxItems: 2\n          description: \u003e-\n            The extents of an axis in the form [lower, upper]. Clients determine\n            whether bounds are to be inclusive or exclusive of their limits\n          items:\n            type: integer\n            format: int64\n        label:\n          description: label is a description of this Axis\n          type: string\n        prefix:\n          description: Prefix represents a label prefix for formatting axis values.\n          type: string\n        suffix:\n          description: Suffix represents a label suffix for formatting axis values.\n          type: string\n        base:\n          description: Base represents the radix for formatting axis values.\n          type: string\n        scale:\n          description: 'Scale is the axis formatting scale. Supported: \"log\", \"linear\"'\n          type: string\n    DashboardColor:\n      type: object\n      description: Color defines an encoding of data value into color space\n      properties:\n        id:\n          description: ID is the unique id of the view color\n          type: string\n        type:\n          description: Type is how the color is used.\n          type: string\n          enum:\n            - min\n            - max\n            - threshold\n        hex:\n          description: Hex is the hex number of the color\n          type: string\n          maxLength: 7\n          minLength: 7\n        name:\n          description: Name is the user-facing name of the hex color\n          type: string\n        value:\n          description: Value is the data value mapped to this color\n          type: string\n    RenamableField:\n      description: Describes a field that can be renamed and made visible or invisible\n      type: object\n      properties:\n        internalName:\n          description: This is the calculated name of a field\n          readOnly: true\n          type: string\n        displayName:\n          description: This is the name that a field is renamed to by the user\n          type: string\n        visible:\n          description: Indicates whether this field should be visible on the table\n          type: boolean\n    LogViewProperties:\n      description: Contains the configuration for the log viewer\n      type: object\n      required:\n      - columns\n      - shape\n      - type\n      properties:\n        shape:\n            type: string\n            enum: [\"chronograf-v2\"]\n        type:\n            type: string\n            enum: [\"log-viewer\"]\n        columns:\n          description: Defines the order, names, and visibility of columns in the log\n            viewer table\n          type: array\n          items:\n            \"$ref\": \"#/components/schemas/LogViewerColumn\"\n      example:\n        columns:\n        - name: severity\n          position: 0\n          settings:\n          - type: label\n            value: icon\n          - type: label\n            value: text\n          - type: visibility\n            value: visible\n          - type: color\n            name: ruby\n            value: emergency\n          - type: color\n            name: rainforest\n            value: info\n          - type: displayName\n            value: Log Severity!\n        - name: messages\n          position: 1\n          settings:\n          - type: visibility\n            value: hidden\n    LogViewerColumn:\n      description: Contains a specific column's settings.\n      type: object\n      required:\n      - name\n      - position\n      - settings\n      properties:\n        name:\n          description: Unique identifier name of the column\n          type: string\n        position:\n          type: integer\n          format: int32\n        settings:\n          description: Composable settings options for the column\n          type: array\n          items:\n            description: Type and value and optional name of a setting.\n            type: object\n            required:\n            - type\n            - value\n            properties:\n              type:\n                type: string\n              value:\n                type: string\n              name:\n                type: string\n      example:\n        name: severity\n        position: 0\n        settings:\n        - type: label\n          value: icon\n        - type: label\n          value: text\n        - type: visibility\n          value: visible\n        - type: color\n          name: ruby\n          value: emergency\n        - type: color\n          name: rainforest\n          value: info\n        - type: displayName\n          value: Log Severity!\n    V1ViewProperties:\n      properties:\n        type:\n          type: string\n          enum: [\"chronograf-v1\"]\n        queries:\n          type: array\n          items:\n            $ref: \"#/components/schemas/DashboardQuery\"\n        axes:\n          description: The viewport for a View's visualizations\n          type: object\n          properties:\n            x:\n              $ref: '#/components/schemas/Axis'\n            y:\n              $ref: '#/components/schemas/Axis'\n            y2:\n              $ref: '#/components/schemas/Axis'\n        graphType:\n          description: The viewport for a view's graph/visualization\n          type: string\n          enum:\n            - single-stat\n            - line\n            - line-plus-single-stat\n            - line-stacked\n            - line-stepplot\n            - bar\n            - gauge\n            - table\n          default: line\n        colors:\n          description: Colors define color encoding of data into a visualization\n          type: array\n          items:\n            $ref: \"#/components/schemas/DashboardColor\"\n        legend:\n          description: Legend define encoding of data into a view's legend\n          type: object\n          properties:\n            type:\n              description: type is the style of the legend\n              type: string\n              enum:\n                - static\n            orientation:\n              description: \u003e-\n                orientation is the location of the legend with respect to the view\n                graph\n              type: string\n              enum:\n                - top\n                - bottom\n                - left\n                - right\n        tableOptions:\n          properties:\n            verticalTimeAxis:\n              description: \u003e-\n                verticalTimeAxis describes the orientation of the table by\n                indicating whether the time axis will be displayed vertically\n              type: boolean\n            sortBy:\n              $ref: \"#/components/schemas/RenamableField\"\n            wrapping:\n              description: wrapping describes the text wrapping style to be used in table views\n              type: string\n              enum:\n                - truncate\n                - wrap\n                - single-line\n            fixFirstColumn:\n              description: \u003e-\n                fixFirstColumn indicates whether the first column of the table\n                should be locked\n              type: boolean\n        fieldOptions:\n          description: \u003e-\n            fieldOptions represent the fields retrieved by the query with\n            customization options\n          type: array\n          items:\n            $ref: '#/components/schemas/RenamableField'\n        timeFormat:\n          description: \u003e-\n            timeFormat describes the display format for time values according to\n            moment.js date formatting\n          type: string\n        decimalPoints:\n          description: \u003e-\n            decimal points indicates whether and how many digits to show after\n            decimal point\n          type: object\n          properties:\n            isEnforced:\n              description: Indicates whether decimal point setting should be enforced\n              type: boolean\n            digits:\n              description: The number of digists after decimal to display\n              type: integer\n    EmptyViewProperties:\n      properties:\n        type:\n          type: string\n          enum: [\"empty\"]\n    ConstantMacroProperties:\n      properties:\n        type:\n          type: string\n          enum: [\"constant\"]\n        values:\n          type: array\n          items:\n            type: string\n    MapMacroProperties:\n      properties:\n        type:\n          type: string\n          enum: [\"map\"]\n        values:\n          type: object\n    QueryMacroProperties:\n      properties:\n        type:\n          type: string\n          enum: [\"query\"]\n        query:\n          type: string\n        queryType:\n          type: string\n    Macro:\n      type: object\n      properties:\n        links:\n          type: object\n          properties:\n            self:\n              type: string\n              format: uri\n        id:\n          readOnly: true\n          type: string\n        name:\n          type: string\n        selected:\n          type: array\n          items:\n            type: string\n        arguments:\n          type: object\n          oneOf:\n            - $ref: \"#/components/schemas/QueryMacroProperties\"\n            - $ref: \"#/components/schemas/ConstantMacroProperties\"\n            - $ref: \"#/components/schemas/MapMacroProperties\"\n    Macros:\n      type: object\n      example:\n        macros:\n        - id: '1221432'\n          name: \":ok:\"\n          selected:\n          - hello\n          arguments:\n            type: constant\n            values:\n            - howdy\n            - hello\n            - hi\n            - yo\n            - oy\n        - id: '1221432'\n          name: \":ok:\"\n          selected:\n          - c\n          arguments:\n            type: map\n            values:\n              a: fdjaklfdjkldsfjlkjdsa\n              b: dfaksjfkljekfajekdljfas\n              c: fdjksajfdkfeawfeea\n        - id: '1221432'\n          name: \":ok:\"\n          selected:\n          - host\n          arguments:\n            type: query\n            query: 'from(bucket: \"foo\") |\u003e showMeasurements()'\n            language: flux\n      properties:\n        macros:\n          $ref: \"#/components/schemas/Macro\"\n    View:\n      properties:\n        links:\n          type: object\n          readOnly: true\n          properties:\n            self:\n              type: string\n        id:\n          readOnly: true\n          type: string\n        name:\n          type: string\n        properties:\n          oneOf:\n            - $ref: \"#/components/schemas/V1ViewProperties\"\n            - $ref: \"#/components/schemas/EmptyViewProperties\"\n            - $ref: \"#/components/schemas/LogViewProperties\"\n    Views:\n      type: object\n      properties:\n        links:\n          type: object\n          properties:\n            self:\n              type: string\n        views:\n          type: array\n          items:\n            $ref: \"#/components/schemas/View\"\n    CellUpdate:\n      type: object\n      properties:\n        name:\n          type: string\n    CreateCell:\n      type: object\n      properties:\n        name:\n          type: string\n        x:\n          type: integer\n          format: int32\n        y:\n          type: integer\n          format: int32\n        w:\n          type: integer\n          format: int32\n        h:\n          type: integer\n          format: int32\n        viewID:\n          type: string\n          description: uses the view provided in the request\n        usingView:\n          type: string\n          description: makes a copy of the provided view\n    Cell:\n      type: object\n      properties:\n        links:\n          type: object\n          properties:\n            self:\n              type: string\n            view:\n              type: string\n        name:\n          type: string\n        x:\n          type: integer\n          format: int32\n        y:\n          type: integer\n          format: int32\n        w:\n          type: integer\n          format: int32\n        h:\n          type: integer\n          format: int32\n        viewID:\n          type: string\n          description: The reference to a view from the views API\n    Cells:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Cell\"\n    Dashboard:\n      properties:\n        links:\n          type: object\n          properties:\n            self:\n              type: string\n            cells:\n              type: string\n        id:\n          readOnly: true\n          type: string\n        name:\n          type: string\n          description: user-facing name of the dashboard\n        description:\n          type: string\n          description: user-facing description of the dashboard\n        meta:\n          type: object\n          properties:\n            createdAt:\n              type: string\n              format: date\n            updatedAt:\n              type: string\n              format: date\n        cells:\n            $ref: \"#/components/schemas/Cells\"\n    Dashboards:\n      type: object\n      properties:\n        links:\n          $ref: \"#/components/schemas/Links\"\n        dashboards:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Dashboard\"\n    Source:\n      type: object\n      properties:\n        links:\n          type: object\n          properties:\n            self:\n              type: string\n        id:\n          type: string\n        organizationID:\n          type: string\n        default:\n          type: boolean\n        name:\n          type: string\n        type:\n          type: string\n          enum: [\"v1\",\"v2\",\"self\"]\n        url:\n          type: string\n          format: uri\n        insecureSkipVerify:\n          type: boolean\n        telegraf:\n          type: string\n        token:\n          type: string\n        username:\n          type: string\n        password:\n          type: string\n        sharedSecret:\n          type: string\n        metaUrl:\n          type: string\n          format: uri\n        defaultRP:\n          type: string\n        languages:\n          type: array\n          readOnly: true\n          items:\n            type: string\n            enum:\n              - flux\n              - influxql\n              - spec\n    Sources:\n      type: object\n      properties:\n        links:\n          type: object\n          properties:\n            self:\n              type: string\n              format: uri\n        sources:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Source\"\n    TelegrafRequest:\n      type: object\n      properties:\n        name:\n          type: string\n        agent:\n          type: object\n          properties:\n            interval:\n              type: integer\n        plugins:\n          type: array\n          items:\n            type: object\n            properties:\n              name:\n                type: string\n                enum: [cpu, disk, diskio, docker, file, kernel, kubernetes, logparser, mem, net_response, net, ngnix, processes, procstats, prometheus, redis, swap, syslog, system, tail, influxdb_v2]\n              type:\n                type: string\n                enum: [input, output, processor, aggregator]\n              comment:\n                type: string\n              config:\n                oneOf:\n                - $ref: '#/components/schemas/TelegrafPluginInput'\n                - $ref: '#/components/schemas/TelegrafPluginInputDocker'\n                - $ref: '#/components/schemas/TelegrafPluginInputFile'\n                - $ref: '#/components/schemas/TelegrafPluginInputKubernetes'\n                - $ref: '#/components/schemas/TelegrafPluginInputLogParser'\n                - $ref: '#/components/schemas/TelegrafPluginInputProcstat'\n                - $ref: '#/components/schemas/TelegrafPluginInputPrometheus'\n                - $ref: '#/components/schemas/TelegrafPluginInputRedis'\n                - $ref: '#/components/schemas/TelegrafPluginInputSyslog'\n                - $ref: '#/components/schemas/TelegrafPluginOutputFile'\n                - $ref: '#/components/schemas/TelegrafPluginOutputInfluxDBV2'\n    Telegraf:\n      type: object\n      allOf:\n        - $ref: \"#/components/schemas/TelegrafRequest\"\n        - type: object\n          properties:\n            id:\n              type: string\n            links:\n              type: object\n              properties:\n                self:\n                  type: string\n            owners:\n              $ref: \"#/components/schemas/Owners\"\n    Telegrafs:\n      type: object\n      properties:\n        configurations:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Telegraf\"\n    TelegrafPluginInput:\n      type: object\n    TelegrafPluginInputDocker:\n      type: object\n      properties:\n        endpoint:\n          type: string\n    TelegrafPluginInputFile:\n      type: object\n      properties:\n        files:\n          type: array\n          items:\n            type: string\n    TelegrafPluginInputKubernetes:\n      type: object\n      properties:\n        url:\n          type: string\n          format: uri\n    TelegrafPluginInputLogParser:\n      type: object\n      properties:\n        files:\n          type: array\n          items:\n            type: string\n    TelegrafPluginInputNginx:\n      type: object\n      properties:\n        urls:\n          type: array\n          items:\n            type: string\n            format: uri\n    TelegrafPluginInputProcstat:\n      type: object\n      properties:\n        exe:\n          type: string\n    TelegrafPluginInputPrometheus:\n      type: object\n      properties:\n        urls:\n          type: array\n          items:\n            type: string\n            format: uri\n    TelegrafPluginInputRedis:\n      type: object\n      properties:\n        servers:\n          type: array\n          items:\n            type: string\n        password:\n          type: string\n    TelegrafPluginInputSyslog:\n      type: object\n      properties:\n        server:\n          type: string\n    TelegrafPluginOutputFile:\n      type: object\n      required:\n        - files\n      properties:\n        files:\n          type: array\n          items:\n            type: object\n            properties:\n              type:\n                type: string\n                enum: [stdout, path]\n              path:\n                type: string\n    TelegrafPluginOutputInfluxDBV2:\n      type: object\n      required:\n        - urls\n        - token\n        - organization\n        - bucket\n      properties:\n        urls:\n          type: array\n          items:\n            type: string\n            format: uri\n        token:\n          type: string\n        organization:\n          type: string\n        bucket:\n          type: string\n    IsOnboarding:\n      type: object\n      properties:\n        allowed:\n          type: boolean\n    OnboardingRequest:\n      type: object\n      properties:\n        username:\n          type: string\n        password:\n          type: string\n        org:\n          type: string\n        bucket:\n          type: string\n        retentionPeriodHrs:\n          type: integer\n      required:\n        - username\n        - password\n        - org\n        - bucket\n    OnboardingResponse:\n      type: object\n      properties:\n        user:\n          $ref: \"#/components/schemas/User\"\n        org:\n          $ref: \"#/components/schemas/Organization\"\n        bucket:\n          $ref: \"#/components/schemas/Bucket\"\n        auth:\n          $ref: \"#/components/schemas/Authorization\"\n    PasswordResetBody:\n      properties:\n        password:\n          type: string\n      required:\n        - password\n    Health:\n      type: object\n      properties:\n        name:\n          type: string\n        message:\n          type: string\n        checks:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Health\"\n        status:\n          type: string\n          enum:\n            - unhealthy\n            - healthy\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /users/{userID}/password: put: security: unknown security schema \"basicAuth\""
}