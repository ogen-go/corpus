{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/woleet/woleet.id-server"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "swagger.yaml",
			"byteSize": 70605,
			"content": "openapi: 3.0.0\ninfo:\n  description: This is Woleet.ID Server API documentation.\n  version: 1.2.8\n  title: Woleet.ID Server\n  contact:\n    email: contact@woleet.com\n  license:\n    name: CC BY-NC-SA 4.0\nsecurity:\n  - CookieAuth: []\n  - APITokenAuth: []\npaths:\n  /login:\n    get:\n      tags:\n        - Authentication\n      summary: Log into the system.\n      description: Both email or username can be used to authenticate.\n      operationId: login\n      security:\n        - BasicAuth: []\n      responses:\n        '200':\n          description: User successfully logged in. A session cookie is returned.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/UserInfo'\n        '400':\n          description: Missing email/username or password.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n        '401':\n          description: Invalid email/username or password.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n  /logout:\n    get:\n      tags:\n        - Authentication\n      summary: Log out from the system.\n      operationId: logout\n      security:\n        - CookieAuth: []\n      responses:\n        '204':\n          description: User successfully logged out.\n  /info:\n    get:\n      tags:\n        - Authentication\n      summary: Get information about the current logged user.\n      operationId: getUserInfo\n      responses:\n        '200':\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/UserInfo'\n        '401':\n          description: Missing or invalid session cookie.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n  /sign:\n    get:\n      operationId: getSignature\n      summary: Sign a message or a SHA256 hash using a key.\n      tags:\n        - Signature\n      description: \u003e\n        Use this endpoint to sign a message or a SHA256 hash using one of the keys managed by the server.\u003cbr\u003e\n        **NOTE: this endpoint is by default exposed on the port 3002, and not on port 3000 like for other API endpoints.\n        It is not recommended to expose this endpoint publicly on the internet.**\u003cbr\u003e\n        Provide the message to sign in the `messageToSign` parameter, or the SHA256 hash to sign in the `hashToSign` parameter.\u003cbr\u003e\n        When authenticated as an admin, the key to use can be specified using the `pubKey`, `userId` and/or `customUserId` parameters:\u003cbr\u003e\n        - set the `pubKey` parameter only: the referred key is used\u003cbr\u003e\n        - set the `userId` (or the `customUserId`) parameter only: the default key of the referred user is used (if any).\u003cbr\u003e\n        - set none of the 3 parameters: the default key of the server is used (if any).\u003cbr\u003e\n        When authenticated as a user, the key to use must be one of the authenticated user's keys and can be specified using the `pubKey` parameter.\u003cbr\u003e\n        If not specified, the authenticated user's default key is used (if any).\u003cbr\u003e\n        If the server is configured to prevent identity exposure, the caller must always provide the `identityToSign` parameter.\n      parameters:\n        - $ref: '#/components/parameters/HashToSignQueryParameter'\n        - $ref: '#/components/parameters/MessageToSignQueryParameter'\n        - $ref: '#/components/parameters/UserIdQueryParameter'\n        - $ref: '#/components/parameters/CustomUserIdQueryParameter'\n        - $ref: '#/components/parameters/PubKeyQueryParameter'\n        - $ref: '#/components/parameters/PathQueryParameter'\n        - $ref: '#/components/parameters/IdentityToSignQueryParameter'\n      security:\n        - APITokenAuth: []\n        - OAuthTokenAuth: []\n      responses:\n        '200':\n          description: \u003e\n            Successful operation. The produced signature and its associated parameters are returned as a JSON object\u003cbr\u003e\n            Note that if your are using the Woleet API and you want to anchor this signature,\n            you can simply add a `name` field to the returned JSON object, and provide it as is to the `POST /anchor` endpoint.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SignatureResult'\n        '400':\n          description: Missing or invalid query parameter. More details are returned in the response body.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n        '401':\n          description: Missing or invalid token. More details are returned in the response body.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n        '404':\n          description: Key or User not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n        '403':\n          description: No `pubKey` parameter is provided and the server or the user has no default key to fallback on.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n  /identity:\n    get:\n      operationId: getIdentity\n      summary: Verify the identity of a user.\n      security: []\n      tags:\n        - Identity\n      description: \u003e\n        Use this endpoint to verify that the server knows a given public key and to get or check the identity of the user owning that key.\u003cbr\u003e\n        **NOTE: this endpoint is not protected and by default exposed on the port 3001, and not on port 3000 like for other API endpoints.\u003cbr\u003e\n        It is recommended to expose this endpoint publicly on the internet on HTTPS default port 443 and to configure the server's identity URL so that it resolves on this endpoint.**\u003cbr\u003e\n        If the server controls the private key associated to the public key, it can also sign some random data and return the produced signature to prove it owns the key.\u003cbr\u003e\n        The random data is built by concatenating the `leftData` parameter (provided by the client) and some random data generated by the server (returned in the `rightData` field).\u003cbr\u003e\n        The caller can then verify that the returned signature is valid for the public key (which proves the ownership of the private key by the server).\u003cbr\u003e\n        The caller can optionally read the TLS certificate securing this endpoint to get the certified identity of the owner of the domain of this identity endpoint.\u003cbr\u003e\n        If the server is configured to prevent identity exposure, the caller must always provide the `signedIdentity` parameter.\n      parameters:\n        - $ref: '#/components/parameters/PubKeyToVerifyQueryParameter'\n        - $ref: '#/components/parameters/SignedIdentityToVerifyQueryParameter'\n        - $ref: '#/components/parameters/LeftDataQueryParameter'\n      responses:\n        '200':\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IdentityResult'\n        '400':\n          description: Missing or invalid query parameter.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n        '404':\n          description: Public key not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n  /discover/users:\n    get:\n      operationId: discoverUsers\n      summary: Get all the users matching a set of filters.\n      description: \u003e\n        Use this operation to get all the users, or a subset of the users matching specified filters.\u003cbr\u003e\n        Results can be paged.\n      security:\n        - APITokenAuth: []\n        - OAuthTokenAuth: []\n      tags:\n        - Discovery\n      parameters:\n        - $ref: '#/components/parameters/PagingOffsetQueryParameter'\n        - $ref: '#/components/parameters/PagingLimitQueryParameter'\n        - $ref: '#/components/parameters/FilterUserSearchQueryParameter'\n      responses:\n        '200':\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/UserDiscoArray'\n        '401':\n          description: Missing or invalid session cookie.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n  /discover/user/{pubKey}:\n    get:\n      operationId: discoverUserByPubKey\n      summary: Get the user associated to a public key.\n      security:\n        - APITokenAuth: []\n        - OAuthTokenAuth: []\n      tags:\n        - Discovery\n      parameters:\n        - $ref: '#/components/parameters/PubKeyParameter'\n      responses:\n        '200':\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/UserDisco'\n        '401':\n          description: Missing or invalid session cookie.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n        '404':\n          description: User not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n  /discover/user:\n    get:\n      operationId: discoverUser\n      summary: Get the current authenticated user.\n      security:\n        - APITokenAuth: []\n        - OAuthTokenAuth: []\n      tags:\n        - Discovery\n      responses:\n        '200':\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/UserDisco'\n        '204':\n          description: Successful operation. The current authenticated user is a server admin.\n        '401':\n          description: Missing or invalid session cookie.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n        '404':\n          description: User not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n  /discover/keys/{userId}:\n    get:\n      operationId: discoverUserKeys\n      summary: Get all the public keys of a user.\n      security:\n        - APITokenAuth: []\n        - OAuthTokenAuth: []\n      tags:\n        - Discovery\n      parameters:\n        - $ref: '#/components/parameters/UserIdParameter'\n      responses:\n        '200':\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/KeyDiscoArray'\n        '400':\n          description: Invalid user identifier.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n        '401':\n          description: Missing or invalid session cookie.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n        '404':\n          description: User not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n  /discover/config:\n    get:\n      operationId: discoverConfig\n      summary: Get the server configuration.\n      security:\n        - APITokenAuth: []\n        - OAuthTokenAuth: []\n      tags:\n        - Discovery\n      responses:\n        '200':\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ConfigDisco'\n        '401':\n          description: Missing or invalid session cookie.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n  /key/{keyId}:\n    get:\n      tags:\n        - Key\n      summary: Get a key by its identifier.\n      operationId: getKeyById\n      parameters:\n        - $ref: '#/components/parameters/KeyIdParameter'\n      responses:\n        '200':\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/KeyGet'\n        '400':\n          description: Invalid key identifier.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n        '401':\n          description: Missing or invalid session cookie.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n        '404':\n          description: Key not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n    put:\n      tags:\n        - Key\n      summary: Update a key.\n      operationId: updateKey\n      parameters:\n        - $ref: '#/components/parameters/KeyIdParameter'\n      requestBody:\n        $ref: '#/components/requestBodies/KeyPut'\n      responses:\n        '200':\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/KeyGet'\n        '400':\n          description: Invalid key identifier.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n        '401':\n          description: Missing or invalid session cookie.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n        '404':\n          description: Key not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n    delete:\n      tags:\n        - Key\n      summary: Delete a key.\n      operationId: deleteKey\n      parameters:\n        - $ref: '#/components/parameters/KeyIdParameter'\n      responses:\n        '200':\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/KeyGet'\n        '400':\n          description: Invalid key identifier.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n        '401':\n          description: Missing or invalid session cookie.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n        '404':\n          description: Key not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n  /user/{userId}/extern-key:\n    post:\n      tags:\n        - Key\n      summary: Create a new external key for a user.\n      description: \u003e\n        Use this endpoint to register a public key that is controlled by a user on an external device.\n      operationId: createExternalKey\n      parameters:\n        - $ref: '#/components/parameters/UserIdParameter'\n      requestBody:\n        $ref: '#/components/requestBodies/ExternalKeyPost'\n      responses:\n        '200':\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/KeyGet'\n        '400':\n          description: Invalid input.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n        '401':\n          description: Missing or invalid session cookie.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n        '404':\n          description: User not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n  /user/{userId}/key:\n    post:\n      tags:\n        - Key\n      summary: Create a new key for a user.\n      operationId: createKey\n      parameters:\n        - $ref: '#/components/parameters/UserIdParameter'\n      requestBody:\n        $ref: '#/components/requestBodies/KeyPost'\n      responses:\n        '200':\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/KeyGet'\n        '400':\n          description: Invalid input.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n        '401':\n          description: Missing or invalid session cookie.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n        '404':\n          description: User not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n  /user/{userId}/key/list:\n    get:\n      tags:\n        - Key\n      summary: Get all the keys of a user.\n      operationId: getUserKeys\n      parameters:\n        - $ref: '#/components/parameters/UserIdParameter'\n      responses:\n        '200':\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/KeyArray'\n        '400':\n          description: Invalid user identifier.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n        '401':\n          description: Missing or invalid session cookie.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n        '404':\n          description: User not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n  /user:\n    post:\n      tags:\n        - User\n      summary: Create a new user.\n      operationId: createUser\n      requestBody:\n        description: User object to create.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserPost'\n      responses:\n        '200':\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/UserGet'\n        '401':\n          description: Missing or invalid session cookie.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n        '400':\n          description: Invalid object supplied.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n  /user/{userId}:\n    get:\n      tags:\n        - User\n      summary: Get a user by his identifier.\n      operationId: getUserById\n      parameters:\n        - $ref: '#/components/parameters/UserIdParameter'\n      responses:\n        '200':\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/UserGet'\n        '400':\n          description: Invalid user identifier.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n        '401':\n          description: Missing or invalid session cookie.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n        '404':\n          description: User not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n    put:\n      tags:\n        - User\n      summary: Update a user.\n      operationId: updateUser\n      parameters:\n        - $ref: '#/components/parameters/UserIdParameter'\n      requestBody:\n        description: User object to update.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserPut'\n        required: true\n      responses:\n        '200':\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/UserGet'\n        '400':\n          description: Invalid object supplied / Invalid user identifier.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n        '401':\n          description: Missing or invalid session cookie.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n        '404':\n          description: User not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n    delete:\n      tags:\n        - User\n      summary: Delete a user.\n      operationId: deleteUser\n      parameters:\n        - $ref: '#/components/parameters/UserIdParameter'\n      responses:\n        '200':\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/UserGet'\n        '400':\n          description: Invalid user identifier.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n        '401':\n          description: Missing or invalid session cookie.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n        '404':\n          description: User not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n  /user/list:\n    get:\n      operationId: getUsers\n      summary: Get all the users matching a set of filters.\n      description: \u003e\n        Use this operation to get all the users, or a subset of the users matching specified filters.\u003cbr\u003e\n        Results can be paged.\n      tags:\n        - User\n      parameters:\n        - $ref: '#/components/parameters/PagingOffsetQueryParameter'\n        - $ref: '#/components/parameters/PagingLimitQueryParameter'\n        - $ref: '#/components/parameters/FilterUserSearchQueryParameter'\n        - $ref: '#/components/parameters/FilterUserModeQueryParameter'\n        - $ref: '#/components/parameters/FilterUserRoleQueryParameter'\n        - $ref: '#/components/parameters/FilterUserEmailQueryParameter'\n        - $ref: '#/components/parameters/FilterUserUsernameQueryParameter'\n        - $ref: '#/components/parameters/FilterUserCommonNameQueryParameter'\n        - $ref: '#/components/parameters/FilterUserOrganizationQueryParameter'\n        - $ref: '#/components/parameters/FilterUserOrganizationalUnitQueryParameter'\n        - $ref: '#/components/parameters/FilterUserLocalityQueryParameter'\n        - $ref: '#/components/parameters/FilterUserCountryQueryParameter'\n        - $ref: '#/components/parameters/FilterUserUserIdQueryParameter'\n        - $ref: '#/components/parameters/FilterUserCountryCallingCodeQueryParameter'\n        - $ref: '#/components/parameters/FilterUserPhoneQueryParameter'\n        - $ref: '#/components/parameters/FilterUserStatusQueryParameter'\n      responses:\n        '200':\n          description: Array of users.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/UserArray'\n  /api-token:\n    post:\n      tags:\n        - API Token\n      summary: Create an API token.\n      operationId: createAPIToken\n      requestBody:\n        description: API token object to create.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/APITokenPost'\n      responses:\n        '200':\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APITokenGet'\n        '400':\n          description: Invalid object supplied.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n        '401':\n          description: Missing or invalid session cookie.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n        '403':\n          description: Users cannot manage other users' API tokens.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n  /api-token/{APITokenId}:\n    get:\n      tags:\n        - API Token\n      summary: Get an API token by its identifier.\n      operationId: getAPITokenById\n      parameters:\n        - $ref: '#/components/parameters/APITokenIdParameter'\n      responses:\n        '200':\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APITokenGet'\n        '400':\n          description: Invalid API token identifier.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n        '401':\n          description: Missing or invalid session cookie.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n        '403':\n          description: Users cannot manage other users' API tokens.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n        '404':\n          description: API token not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n    put:\n      tags:\n        - API Token\n      summary: Update an API token.\n      operationId: updateAPIToken\n      parameters:\n        - $ref: '#/components/parameters/APITokenIdParameter'\n      requestBody:\n        description: API token object to update.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/APITokenPut'\n        required: true\n      responses:\n        '200':\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APITokenGet'\n        '400':\n          description: Invalid object supplied.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n        '401':\n          description: Missing or invalid session cookie.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n        '403':\n          description: Users cannot manage other users' API tokens.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n        '404':\n          description: API token not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n    delete:\n      tags:\n        - API Token\n      summary: Delete an API token.\n      operationId: deleteAPIToken\n      parameters:\n        - $ref: '#/components/parameters/APITokenIdParameter'\n      responses:\n        '200':\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APITokenGet'\n        '400':\n          description: Invalid API token identifier.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n        '401':\n          description: Missing or invalid session cookie.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n        '403':\n          description: Users cannot manage other users' API tokens.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n        '404':\n          description: API token not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n  /api-token/list:\n    get:\n      tags:\n        - API Token\n      summary: Get all API tokens.\n      description:  When logged as a user, only the tokens belonging to the user are returned.\n      operationId: getAPITokens\n      responses:\n        '200':\n          description: Succesful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APITokenArray'\n        '401':\n          description: Missing or invalid session cookie.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n  /server-config:\n    get:\n      tags:\n        - Server Config\n      summary: Get the server configuration.\n      operationId: getServerConfig\n      responses:\n        '200':\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ServerConfig'\n        '400':\n          description: Invalid API token identifier.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n        '401':\n          description: Missing or invalid session cookie.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n        '404':\n          description: API token not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n    put:\n      tags:\n        - Server Config\n      summary: Update the server configuration.\n      operationId: updateServerConfig\n      requestBody:\n        $ref: '#/components/requestBodies/ServerConfig'\n      responses:\n        '200':\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ServerConfig'\n        '400':\n          description: Invalid object supplied.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n        '401':\n          description: Missing or invalid session cookie.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n        '404':\n          description: API token not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n  /enrollment:\n    post:\n      tags:\n        - Enrollment\n      summary: Create a key enrollment request.\n      operationId: createEnrollment\n      requestBody:\n        $ref: '#/components/requestBodies/EnrollmentPost'\n      responses:\n        '200':\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/EnrollmentGet'\n        '400':\n          description: Invalid object supplied.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n        '401':\n          description: Missing or invalid session cookie.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n  /enrollment/list:\n    get:\n      tags:\n        - Enrollment\n      summary: Get all key enrollment requests.\n      operationId: getEnrollments\n      responses:\n        '200':\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/EnrollmentArray'\n  /enrollment/{EnrollmentId}:\n    get:\n      tags:\n        - Enrollment\n      summary: Get a key enrollment request.\n      operationId: getEnrollment\n      parameters:\n        - $ref: '#/components/parameters/EnrollmentIdParameter'\n      responses:\n        '200':\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/EnrollmentGet'\n    put:\n      tags:\n        - Enrollment\n      summary: Update a key enrollment request.\n      operationId: updateEnrollment\n      parameters:\n        - $ref: '#/components/parameters/EnrollmentIdParameter'\n      requestBody:\n        $ref: '#/components/requestBodies/EnrollmentPut'\n      responses:\n        '200':\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/EnrollmentGet'\n        '400':\n          description: Invalid object supplied.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n        '401':\n          description: Missing or invalid session cookie.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n    delete:\n      tags:\n        - Enrollment\n      summary: Delete a key enrollment request.\n      operationId: deleteEnrollment\n      parameters:\n        - $ref: '#/components/parameters/EnrollmentIdParameter'\n      responses:\n        '200':\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/EnrollmentGet'\n        '400':\n          description: Invalid object supplied.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n        '401':\n          description: Missing or invalid session cookie.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n  /enrollment/{EnrollmentId}/create-signature-request:\n    post:\n      tags:\n        - Enrollment\n      summary: Create and send the signature request of the TCU to the owner of the enrolled key.\n      security: []\n      operationId: createSignatureRequest\n      parameters:\n        - $ref: '#/components/parameters/EnrollmentIdParameter'\n      responses:\n        '200':\n          description: Successful operation.\n        '400':\n          description: Invalid object supplied / The signature request creation is not possible.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/APIError'\n  /enrollment/{EnrollmentId}/user:\n    get:\n      tags:\n        - Enrollment\n      summary: Get the user of a key enrollment request.\n      security: []\n      operationId: getEnrollmentUser\n      parameters:\n        - $ref: '#/components/parameters/EnrollmentIdParameter'\n      responses:\n        '200':\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/UserGet'\n  /check:\n    get:\n      operationId: check\n      tags:\n        - Healthcheck\n      summary: Check the database availability.\n      security: []\n      responses:\n        '200':\n          description: Successful operation.\n        '503':\n          description: the database is unavailable.\ncomponents:\n  schemas:\n    Identity:\n      type: object\n      description: User identity provided as a set of X500 Distinguished Name attributes (see https://www.ietf.org/rfc/rfc4519.txt).\n      properties:\n        commonName:\n          type: string\n          description: Common name (CN) (2.5.4.3)\n          example: \"John Doe\"\n        organization:\n          type: string\n          description: Organization name (O) (2.5.4.10)\n          example: \"Acme corp\"\n        organizationalUnit:\n          type: string\n          description: Organizational unit name (OU) (2.5.4.11)\n          example: \"Sales dept\"\n        locality:\n          type: string\n          description: Locality name (L) (2.5.4.7)\n          example: \"Rennes\"\n        country:\n          type: string\n          description: Country code (C) (2.5.4.6)\n          example: \"FR\"\n        emailAddress:\n          type: string\n          format: email\n          description: Email address.\n          example: \"john.doe@acme.com\"\n      required:\n        - commonName\n    Key:\n      type: object\n      description: Key information.\n      properties:\n        name:\n          type: string\n          description: Key name.\n          example: \"Jim Smith's key\"\n        pubKey:\n          type: string\n          description: Public key (bitcoin address when using BIP39 keys).\n          example: \"1GChJMuyxvq28F3Uksqf5v7QkxQ4WLQdBh\"\n        status:\n          type: string\n          example: \"valid\"\n          enum:\n            - valid\n            - expired\n            - revoked\n          description: \u003e\n            Key status:\u003cbr\u003e\n            `valid`: the key is valid and can be used to sign\u003cbr\u003e\n            `expired`: the key expired at `expiration`\u003cbr\u003e\n            `revoked`: the key was revoked at `revokedAt`\n        expiration:\n          type: integer\n          format: int64\n          example: 1569542400000\n          description: \u003e\n            Key expiration date (Unix ms timestamp).\u003cbr\u003e\n            Note that the field is not returned if the key has no expiration date.\n        revokedAt:\n          type: integer\n          format: int64\n          example: 1569542400000\n          description: \u003e\n            Key revocation date (Unix ms timestamp).\u003cbr\u003e\n            Note that the field is not returned if the key is not yet revoked.\n    FullIdentity:\n      allOf:\n        - $ref: '#/components/schemas/Identity'\n        - type: object\n          properties:\n            userId:\n              type: string\n              description: Custom user identifier (UID) (0.9.2342.19200300.100.1.1) must be unique for each user.\n              example: \"wol.jim-smith.01\"\n    Password:\n      type: string\n      format: password\n      description: User password.\n      example: \"nSBa+rV3%2/LpD\"\n    PubKey:\n      type: string\n      description: Public key (bitcoin address when using BIP39 keys).\n      example: \"1GChJMuyxvq28F3Uksqf5v7QkxQ4WLQdBh\"\n    CreatedAt:\n      type: integer\n      format: int64\n      readOnly: true\n      description: Date of creation (Unix ms timestamp).\n      example: 1529052551419\n    UpdatedAt:\n      type: integer\n      format: int64\n      readOnly: true\n      description: Date of last modification (Unix ms timestamp).\n      example: 1529052551419\n    LastUsed:\n      type: integer\n      format: int64\n      readOnly: true\n      description: Date of last usage (Unix ms timestamp).\n      example: 1529059167339\n    LastLogin:\n      type: integer\n      format: int64\n      readOnly: true\n      description: Date of last login (Unix ms timestamp).\n      example: 1529050155459\n    UserRoleEnum:\n      type: string\n      enum:\n        - user\n        - manager\n        - admin\n      default: \"user\"\n      description: \u003e\n        User role.\u003cbr\u003e\n        - `user`: a user can sign using his keys\u003cbr\u003e\n        - `manager`: a manager can manage user and seal identities and keys\u003cbr\u003e\n        - `admin`: an administrator can do everything on the server\n      example: \"user\"\n    UserStatusEnum:\n      type: string\n      enum:\n        - active\n        - blocked\n      default: \"active\"\n      description: \u003e\n        User status:\u003cbr\u003e\n        - `active`: the user is active: he can use his keys to sign\u003cbr\u003e\n        - `blocked`: the user is blocked: he cannot use his keys to sign\n      example: \"active\"\n    UserModeEnum:\n      type: string\n      enum:\n        - seal\n        - esign\n      default: \"seal\"\n      description: \u003e\n        User mode.\u003cbr\u003e\n        - `esign`: the user is a regular user, and his keys are used to create electronic signatures.\u003cbr\u003e\n        - `seal`: the user represents a legal entity, and his keys are used to create server seals.\n      example: \"seal\"\n    UserBase:\n      type: object\n      properties:\n        email:\n          type: string\n          format: email\n          description: User email (can be used for login).\n          example: \"john.doe@acme.com\"\n        username:\n          type: string\n          description: User name (can be used for login).\n          example: \"johndoe\"\n        countryCallingCode:\n          type: string\n          description: User country calling code\n          example: \"33\"\n        phone:\n          type: string\n          description: User phone number\n          example: \"123456789\"\n        status:\n          $ref: '#/components/schemas/UserStatusEnum'\n        role:\n          $ref: '#/components/schemas/UserRoleEnum'\n        identity:\n          $ref: '#/components/schemas/FullIdentity'\n    UserGet:\n      allOf:\n        - $ref: '#/components/schemas/UserBase'\n        - type: object\n          properties:\n            id:\n              type: string\n              format: uuid\n              readOnly: true\n              description: User identifier (allocated by the server).\n              example: \"7c42e7e9-aec5-4d56-9a3b-bd55e129aae3\"\n            createdAt:\n              $ref: '#/components/schemas/CreatedAt'\n            updatedAt:\n              $ref: '#/components/schemas/UpdatedAt'\n            lastLogin:\n              $ref: '#/components/schemas/LastLogin'\n            mode:\n              $ref: '#/components/schemas/UserModeEnum'\n            defaultKeyId:\n              type: string\n              format: uuid\n              description: Identifier of the default key to use to sign for this user (cannot be the an external key nor a e-signature key).\n              example: \"c7c6e0de-2acb-4311-80b4-17dbf0b76806\"\n    UserPost:\n      allOf:\n        - $ref: '#/components/schemas/UserBase'\n        - type: object\n          required:\n            - identity\n          properties:\n            password:\n              $ref: '#/components/schemas/Password'\n            createDefaultKey:\n              type: boolean\n              description: If true create a key holded by the server when this user is created.\n            mode:\n              $ref: '#/components/schemas/UserModeEnum'\n    UserPut:\n      allOf:\n        - $ref: '#/components/schemas/UserBase'\n        - type: object\n          properties:\n            password:\n              $ref: '#/components/schemas/Password'\n            defaultKeyId:\n              type: string\n              format: uuid\n              description: Identifier of the default key to use to sign for this user (cannot be the an external key).\n              example: \"c7c6e0de-2acb-4311-80b4-17dbf0b76806\"\n    UserArray:\n      type: array\n      items:\n        $ref: '#/components/schemas/UserGet'\n    UserInfo:\n      allOf:\n        - $ref: '#/components/schemas/UserBase'\n    UserDisco:\n      allOf:\n        - $ref: '#/components/schemas/UserGet'\n    UserDiscoArray:\n      type: array\n      items:\n        $ref: '#/components/schemas/UserDisco'\n    APITokenStatusEnum:\n      type: string\n      enum:\n        - active\n        - blocked\n      default: \"active\"\n      description: \u003e\n        API token status:\u003cbr\u003e\n        - `active`: the token is active: it can be used to sign\u003cbr\u003e\n        - `blocked`: the token is blocked: it cannot be used to sign\n      example: \"active\"\n    APITokenBase:\n      type: object\n      properties:\n        name:\n          type: string\n          description: API token name.\n          example: \"My API token name\"\n        status:\n          $ref: '#/components/schemas/APITokenStatusEnum'\n    APITokenGet:\n      allOf:\n        - $ref: '#/components/schemas/APITokenBase'\n        - type: object\n          properties:\n            id:\n              type: string\n              format: uuid\n              readOnly: true\n              description: API token identifier (allocated by the platform).\n              example: \"a35c9fee-3893-4eb7-adde-205e1be03209\"\n            value:\n              type: string\n              readOnly: true\n              description: Token to use for the signature endpoint.\n              example: \"b9PXEeMpSCyeaPpQiZ3Bvw==\"\n            userId:\n              type: string\n              format: uuid\n              description: Identifier of the authorized user.\n              example: 'feb37e23-d04e-4e71-bf53-1f1a75ba3a68'\n            createdAt:\n              $ref: '#/components/schemas/CreatedAt'\n            updatedAt:\n              $ref: '#/components/schemas/UpdatedAt'\n            lastUsed:\n              $ref: '#/components/schemas/LastUsed'\n    APITokenPost:\n      allOf:\n        - $ref: '#/components/schemas/APITokenBase'\n        - type: object\n          required:\n            - name\n          properties:\n            userId:\n              type: string\n              format: uuid\n              description: \u003e\n                Identifier of the authorized user.\u003cbr\u003e\n                If set, the token allows to authenticate as the user, if not the token allow to authenticate as a server admin.\n              example: 'feb37e23-d04e-4e71-bf53-1f1a75ba3a68'\n    APITokenPut:\n      allOf:\n        - $ref: '#/components/schemas/APITokenBase'\n    APITokenArray:\n      type: array\n      items:\n        $ref: '#/components/schemas/APITokenGet'\n    IdentityURL:\n      type: string\n      format: url\n      example: \"https://identity.mydomain.com/identity\"\n      description: \u003e\n        Public URL of the **Identity endpoint** (ie. the URL that anyone can use to get the identity associated to a public key).\n    SignatureURL:\n      type: string\n      format: url\n      example: \"https://sign.mydomain.com:3002\"\n      description: \u003e\n        Public base URL of **Signature endpoints** (ie. the base URL that authorized users can use to sign and to discover other users).\n    APIURL:\n      type: string\n      format: url\n      example: \"https://mydomain.com/api\"\n      description: \u003e\n        Public base URL of **API endpoints** (ie. the base URL that authorized users can use to call the server API).\n    APIVersion:\n      type: string\n      example: \"1.2.5\"\n      description: \u003e\n        API version number of this Woleet.ID Server instance (extraced from the swagger file).\n    ServerConfig:\n      type: object\n      properties:\n        identityURL:\n          $ref: '#/components/schemas/IdentityURL'\n        preventIdentityExposure:\n          type: boolean\n          description: \u003e\n            True to prevent the identity endpoint from exposing the identities.\u003cbr\u003e\n            In this mode, the `/sign` endpoint requires the `identityToSign` parameter and the `/identity` endpoint requires the `signedIdentity` parameter:\n            the sign endpoint records each (public key, signed identity) pair in the database, so that the identity endpoint can verify that the given signed identity was actually signed at least once by the given public key.\n            If yes, the identity endpoint succeeds and returns only the identity fields present in the provided signed identity.\n        signatureURL:\n          $ref: '#/components/schemas/SignatureURL'\n        APIURL:\n          $ref: '#/components/schemas/APIURL'\n        defaultKeyId:\n          type: string\n          format: uuid\n          example: \"7b8e5c49-18c6-4ef7-9dab-261a5e717b31\"\n          description: Identifier of the default key to use when signing with no user and no key specified.\n        fallbackOnDefaultKey:\n          type: boolean\n          example: true\n          description: True is the server must fallback on the default key (if any).\n    KeyStatusEnum:\n      type: string\n      enum:\n        - active\n        - blocked\n        - revoked\n      default: \"active\"\n      description: \u003e\n        The status of the key:\u003cbr\u003e\n        - `active`: the key is active: it can be used to sign\u003cbr\u003e\n        - `blocked`: the key is blocked: it cannot be used to sign\u003cbr\u003e\n        - `revoked` the key is revoked: it will no longer be used to sign\n      example: \"active\"\n    KeyTypeEnum:\n      type: string\n      enum:\n        - bip39\n      description: \u003e\n        The type of the key (only `bip39` is supported).\u003cbr\u003e\n        - `bip39`: Bitcoin BIP39\n      example: \"bip39\"\n    KeyDeviceEnum:\n      type: string\n      enum:\n        - server\n        - mobile\n        - nano\n      description: \u003e\n        The type of device storing the key.\u003cbr\u003e\n        - `server`: Woleet.ID Server or equivalent\u003cbr\u003e\n        - `mobile`: Woleet.ID Mobile or equivalent\u003cbr\u003e\n        - `nano`: Ledger Nano S or equivalent\n      example: \"server\"\n    KeyHolderEnum:\n      type: string\n      enum:\n        - server\n        - user\n      description: \u003e\n        The type of entity holding the private key.\u003cbr\u003e\n        - `server`: the server (Woleet.ID Server or equivalent)\u003cbr\u003e\n        - `user`: the user (eg. by using a Ledger Nano S or Woleet.ID Mobile or equivalent)\n      example: \"server\"\n    KeyBase:\n      type: object\n      properties:\n        name:\n          type: string\n          description: Key name.\n          example: \"Jim Smith's key\"\n        expiration:\n          type: integer\n          format: int64\n          example: 1569542400000\n          description: \u003e\n            Key expiration date (Unix ms timestamp).\u003cbr\u003e\n            Note that the field is not returned if the key has no expiration date.\n        status:\n          $ref: '#/components/schemas/KeyStatusEnum'\n    KeyGet:\n      allOf:\n        - $ref: '#/components/schemas/KeyBase'\n        - type: object\n          required:\n            - name\n          properties:\n            id:\n              type: string\n              format: uuid\n              readOnly: true\n              description: Key identifier (allocated by the platform).\n              example: \"a35c9fee-3893-4eb7-adde-205e1be03209\"\n            pubKey:\n              $ref: '#/components/schemas/PubKey'\n            type:\n              $ref: '#/components/schemas/KeyTypeEnum'\n            holder:\n              $ref: '#/components/schemas/KeyHolderEnum'\n            device:\n              $ref: '#/components/schemas/KeyDeviceEnum'\n            expired:\n              type: boolean\n              example: false\n              description: \u003e\n                Indicates whether the key has expired or not.\u003cbr\u003e\n                Note that the field is not returned if the key has not expired.\n            revokedAt:\n              type: integer\n              format: int64\n              example: 1569542400000\n              description: \u003e\n                Key revocation date (Unix ms timestamp).\u003cbr\u003e\n                Note that the field is not returned if the key has no revocation date.\n            createdAt:\n              $ref: '#/components/schemas/CreatedAt'\n            updatedAt:\n              $ref: '#/components/schemas/UpdatedAt'\n            lastUsed:\n              $ref: '#/components/schemas/LastUsed'\n    KeyPost:\n      allOf:\n        - $ref: '#/components/schemas/KeyBase'\n        - type: object\n          required:\n            - name\n    KeyPut:\n      allOf:\n        - $ref: '#/components/schemas/KeyBase'\n        - type: object\n          properties:\n            device:\n              $ref: '#/components/schemas/KeyDeviceEnum'\n    KeyArray:\n      type: array\n      items:\n        $ref: '#/components/schemas/KeyGet'\n    KeyDisco:\n      allOf:\n        - $ref: '#/components/schemas/KeyGet'\n    KeyDiscoArray:\n      type: array\n      items:\n        $ref: '#/components/schemas/KeyDisco'\n    ConfigDisco:\n      type: object\n      properties:\n        identityURL:\n          $ref: '#/components/schemas/IdentityURL'\n        signatureURL:\n          $ref: '#/components/schemas/SignatureURL'\n        APIURL:\n          $ref: '#/components/schemas/APIURL'\n        APIVersion:\n          $ref: '#/components/schemas/APIVersion'\n    ExternalKeyPost:\n      type: object\n      properties:\n        name:\n          type: string\n          description: Key name.\n          example: \"Jim Smith's key\"\n        publicKey:\n          type: string\n          description: Public key (bitcoin address when using BIP39 keys).\n          example: \"1HA79GnnZdHLZBMBQusXcgPEeMcrpnWahb\"\n        device:\n          $ref: '#/components/schemas/KeyDeviceEnum'\n        status:\n          $ref: '#/components/schemas/KeyStatusEnum'\n        expiration:\n          type: integer\n          format: int64\n          example: 1569542400000\n          description: \u003e\n            Key expiration date (Unix ms timestamp).\n      required:\n        - name\n        - publicKey\n    SignatureResult:\n      type: object\n      properties:\n        pubKey:\n          type: string\n          example: \"1KjQ8LgUgYVSqeK7JFhA9W8FVsHCzFrFi8\"\n          description: Public key used to sign (must be the same as the `pubKey` parameter if provided).\n        signedHash:\n          type: string\n          format: hex\n          example: \"01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b\"\n          description: SHA256 hash that is signed (same as the `hashToSign` parameter).\n        signedMessage:\n          type: string\n          format: hex\n          example: \"Love is the message!\"\n          description: Message that is signed (same as the `messageToSign` parameter).\n        signature:\n          type: string\n          format: base64\n          example: \"IKnOvW2/BQqahssC2l9Icz7qiJQqesgu0HCKvW/L5xZLaMCLyg19ATDNJojMILdUijFOqiRzgk6ieDXi89DeB0Q=\"\n          description: \u003e\n            Signature of `signedMessage` or `signedHash` using the public key `pubKey`,\n            or signature of SHA256(`signedMessage` or `signedHash` + `signedIdentity` + `signedIssuerDomain`)\n            if the identity of the signer and the domain of the identity issuer are included to the signed data.\n        identityURL:\n          $ref: '#/components/schemas/IdentityURL'\n        signedIdentity:\n          type: string\n          example: \"CN=John Doe,EMAILADDRESS=john.doe@acme.com,O=Acme corp,OU=Sales dept\"\n          description: \u003e\n            Identity of the signer (as a X500 Distinguished Name).\u003cbr\u003e\n            Returned only if `identityToSign` is used.\n        signedIssuerDomain:\n          type: string\n          example: \"acme.com\"\n          description: \u003e\n            Domain of the identity issuer (ie. of the organization who verified the identity).\u003cbr\u003e\n            Returned only if `identityToSign` is used.\n    IdentityResult:\n      type: object\n      properties:\n        rightData:\n          type: string\n          description: \u003e\n            The right part of the signed data (generated randomly).\u003cbr\u003e\n            To prevent man-in-the-middle attacks, the data starts with the server's identity URL and this should be verified by the caller.\n        signature:\n          type: string\n          format: base64\n          example: \"IKnOvW2/BQqahssC2l9Icz7qiJQqesgu0HCKvW/L5xZLaMCLyg19ATDNJojMILdUijFOqiRzgk6ieDXi89DeB0Q=\"\n          description: \u003e\n            The signature of the concatenation of `leftData` and `rightData` using the public key `pubKey`.\n        identity:\n          $ref: '#/components/schemas/Identity'\n        key:\n          $ref: '#/components/schemas/Key'\n    APIError:\n      type: object\n      properties:\n        error:\n          type: object\n          properties:\n            code:\n              type: integer\n              format: int32\n              example: 418\n            message:\n              type: string\n              example: \"I'm a teapot\"\n          required:\n            - code\n            - message\n    EnrollmentBase:\n      type: object\n      properties:\n        name:\n          type: string\n          description: Name of the enrolled key.\n          example: 'test'\n        device:\n          $ref: '#/components/schemas/KeyDeviceEnum'\n        expiration:\n          type: integer\n          format: int64\n          example: 1569542400000\n          description: \u003e\n            Enrollment expiration date (Unix ms timestamp).\u003cbr\u003e\n            Note that the field is not returned if the enrollment has no expiration date.\n        keyExpiration:\n          type: integer\n          format: int64\n          example: 1569542400000\n          description: \u003e\n            Enrolled key expiration date (Unix ms timestamp).\u003cbr\u003e\n            Note that the field is not returned if the enrollment has no expiration date.\n    EnrollmentGet:\n      allOf:\n        - $ref: '#/components/schemas/EnrollmentBase'\n        - type: object\n          properties:\n            id:\n              type: string\n              format: uuid\n              description: Enrollment identifier (allocated by the server).\n              example: \"feb37e23-d04e-4e71-bf53-1f1a75ba3a68\"\n            userId:\n              type: string\n              format: uuid\n              description: Identifier of the enrolled user.\n              example: 'feb37e23-d04e-4e71-bf53-1f1a75ba3a68'\n    EnrollmentPost:\n      allOf:\n        - $ref: '#/components/schemas/EnrollmentBase'\n        - type: object\n          required:\n            - userId\n            - name\n          properties:\n            userId:\n              type: string\n              format: uuid\n              description: Identifier of the enrolled user.\n              example: 'feb37e23-d04e-4e71-bf53-1f1a75ba3a68'\n            test:\n              type: boolean\n              description: Used only for test purpose only.\n    EnrollmentPut:\n      allOf:\n        - $ref: '#/components/schemas/EnrollmentBase'\n    EnrollmentArray:\n      type: array\n      items:\n        $ref: '#/components/schemas/EnrollmentGet'\n  parameters:\n    UserIdParameter:\n      name: userId\n      in: path\n      description: Identifier of the user.\n      required: true\n      schema:\n        type: string\n        format: uuid\n        example: 'feb37e23-d04e-4e71-bf53-1f1a75ba3a68'\n    KeyIdParameter:\n      name: keyId\n      in: path\n      description: Identifier of the key.\n      required: true\n      schema:\n        type: string\n        format: uuid\n        example: \"552aa3fd-3b5e-434f-bdd3-9b6c58c269c1\"\n    APITokenIdParameter:\n      name: APITokenId\n      in: path\n      description: Identifier of the API token.\n      required: true\n      schema:\n        type: string\n        format: uuid\n        example: \"f34d92e3-4f71-49ab-862f-69443bd48266\"\n    PubKeyParameter:\n      name: pubKey\n      in: path\n      description: Public key (bitcoin address when using BIP39 keys).\n      required: true\n      schema:\n        type: string\n        example: \"1GChJMuyxvq28F3Uksqf5v7QkxQ4WLQdBh\"\n    PubKeyQueryParameter:\n      name: pubKey\n      in: query\n      description: \u003e\n        The public key to use to sign.\u003cbr\u003e\n        When not provided and a user is provided, the default key of the user is used (if any).\u003cbr\u003e\n        When not provided and no user is provided, the default key of the server is used (if any).\n      required: false\n      schema:\n        type: string\n        example: \"1GChJMuyxvq28F3Uksqf5v7QkxQ4WLQdBh\"\n    PathQueryParameter:\n      name: path\n      in: query\n      description: \u003e\n        The derivation path of the key to use to sign.\u003cbr\u003e\n        When not provided, the default derivation path \"m/44'/0'/0'\" is used.\n      required: false\n      schema:\n        type: string\n        example: \"m/'44/'0/'1\"\n    IdentityToSignQueryParameter:\n      name: identityToSign\n      in: query\n      description: \u003e\n        Identity to sign: when set, the identity of the signer and the domain of the identity issuer are included to the signed data.\u003cbr\u003e\n        The identity of the signer is the X500 Distinguished Name built by the server from the identity associated to the key.\u003cbr\u003e\n        The domain of the identity issuer is extracted from the server's identity URL.\u003cbr\u003e\n        Both are included to the signed data: the signature produced in this case is the signature of SHA256(hash or message to sign + identity of the signer + domain of the identity issuer).\u003cbr\u003e\n        The identity of the signer and the domain of the identity issuer are returned respectively in the `signedIdentity` and the `signedIssuerDomain` fields of the signature result.\u003cbr\u003e\n        You must specify the fields you want to include in the identity of the signer by providing a string containing the list of the X500 fields to include, separated with ',':\u003cbr\u003e\n          CN: Common name\u003cbr\u003e\n          EMAILADDRESS: Email address\u003cbr\u003e\n          O: Organization\u003cbr\u003e\n          OU: Organizational unit\u003cbr\u003e\n          L: Locality\u003cbr\u003e\n          C: Country\u003cbr\u003e\n        If you want to include all fields, you can also provide ALL.\n      required: false\n      schema:\n        type: string\n        example: \"CN,EMAILADDRESS,O,OU,L,C\"\n    PubKeyToVerifyQueryParameter:\n      name: pubKey\n      in: query\n      description: Public key to verify.\n      required: true\n      schema:\n        type: string\n        example: \"1GChJMuyxvq28F3Uksqf5v7QkxQ4WLQdBh\"\n    SignedIdentityToVerifyQueryParameter:\n      name: signedIdentity\n      in: query\n      description: \u003e\n        Identity to verify (as a X500 Distinguished Name).\u003cbr\u003e\n        This identity must have been signed at least once by the public key.\n      required: false\n      schema:\n        type: string\n        example: 'CN=John Doe,EMAILADDRESS=john.doe@acme.com'\n    LeftDataQueryParameter:\n      name: leftData\n      in: query\n      description: \u003e\n        Left part of the random data to sign (should be generated randomly).\u003cbr\u003e\n        When not provided, the server does not return a signature, even if it controls the key.\n      required: false\n      schema:\n        type: string\n        example: '00c8a2b0c373050e7f2abbb2e4c631a42c10d402'\n    CustomUserIdQueryParameter:\n      name: customUserId\n      in: query\n      description: Custom user identifier (ie. `userId` field of the user identity).\n      required: false\n      schema:\n        type: string\n        example: \"wol.jim-smith.01\"\n    UserIdQueryParameter:\n      name: userId\n      in: query\n      description: User identifier.\n      required: false\n      schema:\n        type: string\n        format: uuid\n        example: \"345a4513-0266-419a-8344-2daf645b78ed\"\n    HashToSignQueryParameter:\n      name: hashToSign\n      in: query\n      description: SHA256 hash to be signed (a string formatted like [a-f0-9]{64}).\n      schema:\n        type: string\n        example: 'd8e734d7c02e5b889e3e15acd5aaf231a67e1d9974f17b2c907148c4f4a7f975'\n    MessageToSignQueryParameter:\n      name: messageToSign\n      in: query\n      description: Message to be signed.\n      schema:\n        type: string\n        example: 'This is the message to be signed'\n    PagingOffsetQueryParameter:\n      name: offset\n      in: query\n      description: Offset of the returned results (0 to get all results from the beginning).\n      required: false\n      schema:\n        type: integer\n        example: 20\n    PagingLimitQueryParameter:\n      name: limit\n      in: query\n      description: Maximum number of returned results.\n      required: false\n      schema:\n        type: integer\n        example: 20\n    FilterUserSearchQueryParameter:\n      name: search\n      in: query\n      description: \u003e\n        Filter the users using a search string.\u003cbr\u003e\n        Only users whose `email`, `username`, `identity.commonName`, `identity.organization` or `identity.organizationalUnit` contains the search string match.\n      required: false\n      schema:\n        type: string\n        example: \"John Doe\"\n    FilterUserModeQueryParameter:\n      name: mode\n      in: query\n      description: Filter the users by their mode (exact match).\n      required: false\n      schema:\n        type: string\n        enum:\n          - seal\n          - esign\n        example: 'seal'\n    FilterUserRoleQueryParameter:\n      name: role\n      in: query\n      description: Filter the users by their role (exact match).\n      required: false\n      schema:\n        type: string\n        enum:\n          - user\n          - manager\n          - admin\n        example: 'user'\n    FilterUserEmailQueryParameter:\n      name: email\n      in: query\n      description: Filter the users by their email (exact match).\n      required: false\n      schema:\n        type: string\n        example: 'john.doe@acme.com'\n    FilterUserUsernameQueryParameter:\n      name: username\n      in: query\n      description: Filter the users by their username (exact match).\n      required: false\n      schema:\n        type: string\n        example: 'johndoe'\n    FilterUserCommonNameQueryParameter:\n      name: commonName\n      in: query\n      description: Filter the users by their X500 common name (exact match).\n      required: false\n      schema:\n        type: string\n        example: 'John Doe'\n    FilterUserOrganizationQueryParameter:\n      name: organization\n      in: query\n      description: Filter the users by their X500 organization (exact match).\n      required: false\n      schema:\n        type: string\n        example: 'Acme corp'\n    FilterUserOrganizationalUnitQueryParameter:\n      name: organizationalUnit\n      in: query\n      description: Filter the users by their X500 organizational unit (exact match).\n      required: false\n      schema:\n        type: string\n        example: 'Sales dept'\n    FilterUserLocalityQueryParameter:\n      name: locality\n      in: query\n      description: Filter the users by their X500 locality (exact match).\n      required: false\n      schema:\n        type: string\n        example: 'Rennes'\n    FilterUserCountryQueryParameter:\n      name: country\n      in: query\n      description: Filter the users by their X500 country (exact match).\n      required: false\n      schema:\n        type: string\n        example: 'FR'\n    FilterUserUserIdQueryParameter:\n      name: userId\n      in: query\n      description: Filter the users by their X500 custom user identifier (exact match).\n      required: false\n      schema:\n        type: string\n        example: 'wol.jim-smith.01'\n    FilterUserCountryCallingCodeQueryParameter:\n      name: countryCallingCode\n      in: query\n      description: Filter the users by their country calling code (exact match).\n      required: false\n      schema:\n        type: string\n        example: '33'\n    FilterUserPhoneQueryParameter:\n      name: phone\n      in: query\n      description: Filter the users by their phone (exact match).\n      required: false\n      schema:\n        type: string\n        example: '123456789'\n    FilterUserStatusQueryParameter:\n      name: status\n      in: query\n      description: Filter the users by their status (exact match).\n      required: false\n      schema:\n        type: string\n        enum:\n          - active\n          - blocked\n        example: 'active'\n    EnrollmentIdParameter:\n      name: EnrollmentId\n      in: path\n      description: Identifier of the enrollment.\n      required: true\n      schema:\n        type: string\n        format: uuid\n        example: \"813797c8-01e3-4a80-8068-bc2bda13df16\"\n  requestBodies:\n    KeyPost:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/KeyPost'\n      description: Key object to add.\n      required: true\n    ExternalKeyPost:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ExternalKeyPost'\n      description: External key object to add.\n      required: true\n    KeyPut:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/KeyPut'\n      description: Key object to update.\n      required: true\n    APITokenPost:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/APITokenPost'\n      description: API token object to add.\n      required: true\n    APITokenPut:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/APITokenPut'\n      description: API token object to update.\n      required: true\n    ServerConfig:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ServerConfig'\n      description: Server config object.\n      required: true\n    EnrollmentPost:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/EnrollmentPost'\n      description: Enrollment object to add.\n      required: true\n    EnrollmentPut:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/EnrollmentPut'\n      description: Enrollment object to update.\n      required: true\n  responses:\n    UserGet:\n      $ref: '#/components/schemas/UserGet'\n    UserArray:\n      $ref: '#/components/schemas/UserArray'\n    UserInfo:\n      $ref: '#/components/schemas/UserInfo'\n    UserDisco:\n      $ref: '#/components/schemas/UserDisco'\n    KeyDiscoArray:\n      $ref: '#/components/schemas/KeyDiscoArray'\n    UserDiscoArray:\n      $ref: '#/components/schemas/UserDiscoArray'\n    ConfigDisco:\n      $ref: '#/components/schemas/ConfigDisco'\n    APIError:\n      $ref: '#/components/schemas/APIError'\n    KeyGet:\n      $ref: '#/components/schemas/KeyGet'\n    KeyArray:\n      $ref: '#/components/schemas/KeyArray'\n    APITokenGet:\n      $ref: '#/components/schemas/APITokenGet'\n    APITokenArray:\n      $ref: '#/components/schemas/APITokenArray'\n    ServerConfig:\n      $ref: '#/components/schemas/ServerConfig'\n    EnrollmentGet:\n      $ref: '#/components/schemas/EnrollmentGet'\n    EnrollmentArray:\n      $ref: '#/components/schemas/EnrollmentArray'\n  securitySchemes:\n    BasicAuth:\n      type: http\n      scheme: basic\n      description: Use email/username and password to authenticate.\n    CookieAuth:\n      type: apiKey\n      in: cookie\n      name: session\n      description: Use a session cookie to authenticate (see /login).\n    APITokenAuth:\n      type: http\n      scheme: bearer\n      description: Use an API token to authenticate (see /api-token).\n    OAuthTokenAuth:\n      type: http\n      scheme: bearer\n      description: Use an OAuth access token to authenticate.\n"
		}
	},
	"Error": "parse: parse spec: parse components: responses: \"UserDisco\": resolve \"#/components/schemas/UserDisco\" reference: invalid response reference"
}