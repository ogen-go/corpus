{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ballerina-platform/openapi-connectors"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi/saps4hana.pp.idm/openapi.yaml",
			"byteSize": 15137,
			"content": "openapi: 3.0.2\ninfo:\n  description: \u003e-\n    This is a generated connector for [SAP S/4HANA Procurement Planning System for Cross-domain Identity Management API v1.0.0](https://api.sap.com/api/SCIMService/overview) OpenAPI specification. \n\n    This service allows to read and write user data. It will be used by the\n    Identity Provisioning Service. The SCIM Service is protected by the Identity\n    Authentication Service, so the customer must configure the authentication in\n    the Identity Provisioning Service.\n  x-ballerina-init-description: \u003e\n    The connector initialization requires setting the API credentials.\n\n    Create and configure an OAuth2 client credentials by following [this guide](https://help.sap.com/viewer/b865ed651e414196b39f8922db2122c7/LATEST/en-US/7aefa21a65f94b25b7e639c3931b6f83.html).\n  x-ballerina-display:\n    label: SAPS4HANA Cross-domain Identity Management\n    iconPath: \"icon.png\"\n  version: 1.0.0\n  title: System for Cross-domain Identity Management\nx-sap-shortText: This service enables you to write and read user data.\nsecurity:\n  - OAuth2: []\n# servers:\n#   - url: https://procplanning-api.cfapps.eu10.hana.ondemand.com/api/scim/v1\n#     description: Production URL.\nexternalDocs:\n  description: \u003e-\n    More information is available at the SAP S/4HANA for procurement planning\n    SAP Help Portal page.\n  url: https://help.sap.com/viewer/product/SAP_PROCUREMENT_PLANNING/1.0/en-US\ntags:\n  - name: Users\npaths:\n  /Users:\n    post:\n      tags:\n        - Users\n      summary: Adds a new user.\n      description: \u003e-\n        Adds a new user to the system. To add a user, an ID, a primary email, a\n        display name, and the \"active\" status are required.\n      operationId: addNewUser\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n          application/scim+json:\n            schema:\n              $ref: '#/components/schemas/User'\n        description: User object\n        required: true\n      responses:\n        '201':\n          description: Created.\n        '400':\n          $ref: '#/components/responses/error400'\n        '401':\n          $ref: '#/components/responses/error401'\n        '403':\n          $ref: '#/components/responses/error403'\n        '404':\n          $ref: '#/components/responses/error404'\n        '405':\n          $ref: '#/components/responses/error405'\n        '406':\n          $ref: '#/components/responses/error406'\n        '409':\n          description: Email or User ID is not unique.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error409'\n        4XX:\n          $ref: '#/components/responses/error'\n    get:\n      tags:\n        - Users\n      summary: Retrieves all users.\n      description: Retrieves the data of all users.\n      operationId: getAllUsers\n      responses:\n        '200':\n          description: Retrieved entities.\n          content:\n            application/scim+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ReadMultipleUsers'\n  /Users/{id}:\n    get:\n      tags:\n        - Users\n      summary: Retrieves the user.\n      description: Retrieves the user from the system with the corresponding ID parameter.\n      operationId: getUserById\n      parameters:\n        - name: id\n          in: path\n          description: ID of the user that will be created.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Retrieved entities.\n          content:\n            application/scim+json:\n              schema:\n                $ref: '#/components/schemas/ReadSingleUser'\n        '400':\n          $ref: '#/components/responses/error400'\n        '401':\n          $ref: '#/components/responses/error401'\n        '403':\n          $ref: '#/components/responses/error403'\n        '404':\n          $ref: '#/components/responses/error404'\n        '405':\n          $ref: '#/components/responses/error405'\n        '406':\n          $ref: '#/components/responses/error406'\n        4XX:\n          $ref: '#/components/responses/error'\n    put:\n      tags:\n        - Users\n      summary: Updates the user.\n      operationId: updateUserById\n      description: Updates the user with the corresponding ID parameter.\n      parameters:\n        - name: id\n          in: path\n          description: ID of the user that will be updated.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: User details\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n          application/scim+json:\n            schema:\n              $ref: '#/components/schemas/User'\n        required: true\n      responses:\n        '200':\n          description: Retrieved entities.\n          content:\n            application/scim+json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '400':\n          $ref: '#/components/responses/error400'\n        '401':\n          $ref: '#/components/responses/error401'\n        '403':\n          $ref: '#/components/responses/error403'\n        '404':\n          $ref: '#/components/responses/error404'\n        '405':\n          $ref: '#/components/responses/error405'\n        '406':\n          $ref: '#/components/responses/error406'\n        4XX:\n          $ref: '#/components/responses/error'\n    delete:\n      tags:\n        - Users\n      summary: Deletes a user from the system.\n      operationId: deleteUserById\n      description: Deletes a user from the system. To delete a user, the ID is required.\n      parameters:\n        - name: id\n          in: path\n          description: ID of the user that will be deleted.\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: The task was successfully completed and the context was updated.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/success204'\n        '400':\n          $ref: '#/components/responses/error400'\n        '401':\n          $ref: '#/components/responses/error401'\n        '403':\n          $ref: '#/components/responses/error403'\n        '404':\n          $ref: '#/components/responses/error404'\n        '405':\n          $ref: '#/components/responses/error405'\n        '406':\n          $ref: '#/components/responses/error406'\n        4XX:\n          $ref: '#/components/responses/error'\ncomponents:\n  schemas:\n    Emails:\n      type: object\n      required:\n        - value\n      properties:\n        value:\n          type: string\n          example: paula.projectsteerer@sap.procplan.com\n        type:\n          type: string\n          example: work\n        primary:\n          type: boolean\n    UserMeta:\n      type: object\n      properties:\n        resourceType:\n          type: string\n          example: User\n        created:\n          type: string\n          format: date\n          example: '2021-08-18T10:45:02.700Z'\n        lastModified:\n          type: string\n          format: date\n          example: '2021-08-18T10:45:02.700Z'\n        location:\n          type: string\n          example: ../Users/a638213c-177c-426d-9a5e-375367e17fa9\n    ReadSingleUser:\n      type: object\n      properties:\n        schemas:\n          type: array\n          items:\n            type: string\n            example: urn:ietf:params:scim:schemas:core:2.0:User\n        meta:\n          $ref: '#/components/schemas/UserMeta'\n        id:\n          type: string\n          example: paula.projectsteerer@sap.procplan.com\n        userName:\n          type: string\n          example: paula.projectsteerer\n        displayName:\n          type: string\n          example: Paula Project Steerer\n        active:\n          type: boolean\n        emails:\n          type: array\n          items:\n            $ref: '#/components/schemas/Emails'\n    ReadMultipleUsers:\n      type: object\n      properties:\n        schemas:\n          type: array\n          items:\n            type: string\n            example: urn:ietf:params:scim:api:messages:2.0:ListResponse\n        totalResults:\n          type: number\n          example: 1\n        itemsPerPage:\n          type: number\n          example: 500\n        startIndex:\n          type: number\n          example: 1\n        Resources:\n          type: array\n          items:\n            $ref: '#/components/schemas/ReadSingleUser'\n    User:\n      type: object\n      required:\n        - id\n        - displayName\n        - active\n      properties:\n        id:\n          type: string\n          example: paula.projectsteerer@sap.procplan.com\n        userName:\n          type: string\n          example: paula.projectsteerer\n        displayName:\n          type: string\n          example: Paula Project Steerer\n        active:\n          type: boolean\n        emails:\n          type: array\n          items:\n            $ref: '#/components/schemas/Emails'\n    error:\n      type: object\n      required:\n        - error\n      properties:\n        error:\n          type: object\n          required:\n            - status\n            - message\n          properties:\n            status:\n              type: integer\n            message:\n              type: string\n    error400:\n      type: object\n      required:\n        - error\n      properties:\n        error:\n          type: object\n          required:\n            - status\n            - message\n          properties:\n            status:\n              type: integer\n              example: 400\n            message:\n              type: string\n              example: Bad Request\n    error401:\n      type: object\n      required:\n        - error\n      properties:\n        error:\n          type: object\n          required:\n            - status\n            - message\n          properties:\n            status:\n              type: integer\n              example: 401\n            message:\n              type: string\n              example: Unauthorized\n    error403:\n      type: object\n      required:\n        - error\n      properties:\n        error:\n          type: object\n          required:\n            - status\n            - message\n          properties:\n            status:\n              type: integer\n              example: 403\n            message:\n              type: string\n              example: Forbidden\n    error404:\n      type: object\n      required:\n        - error\n      properties:\n        error:\n          type: object\n          required:\n            - status\n            - message\n          properties:\n            status:\n              type: integer\n              example: 404\n            message:\n              type: string\n              example: Not Found\n    error405:\n      type: object\n      required:\n        - error\n      properties:\n        error:\n          type: object\n          required:\n            - status\n            - message\n          properties:\n            status:\n              type: integer\n              example: 405\n            message:\n              type: string\n              example: Method Not Allowed\n    error406:\n      type: object\n      required:\n        - error\n      properties:\n        error:\n          type: object\n          required:\n            - status\n            - message\n          properties:\n            status:\n              type: integer\n              example: 406\n            message:\n              type: string\n              example: Not Acceptable\n    error409:\n      type: object\n      required:\n        - error\n      properties:\n        error:\n          type: object\n          required:\n            - status\n            - message\n          properties:\n            status:\n              type: integer\n              example: 409\n            message:\n              type: string\n              example: Email or User ID is not unique.\n    success204:\n      type: object\n      required:\n        - body\n      properties:\n        body:\n          type: object\n          required:\n            - status\n            - message\n          properties:\n            status:\n              type: integer\n              example: 204\n            message:\n              type: string\n              example: No Content\n  securitySchemes:\n    OAuth2:\n      type: oauth2\n      description: \u003e-\n        To use this REST API, you need to get OAuth client credentials (client\n        ID and secret) from SAP Cloud Platform using the cockpit. After that,\n        you need to pass the obtained client credentials to the SAP Cloud\n        Platform token endpoint to obtain an access token.\n      flows:\n        clientCredentials:\n          tokenUrl: \"\"\n          scopes:\n            scimapi.read: Can read user data from the service.\n            scimapi.write: Can write user data data.\n  responses:\n    error:\n      description: Error\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/error'\n    error400:\n      description: \u003e-\n        Bad Request: The server cannot or will not process the request due to an\n        apparent client error (e.g. malformed request syntax, size too large,\n        invalid request message framing, or deceptive request routing).\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/error400'\n    error401:\n      description: \u003e-\n        Unauthorized: The user does not have valid authentication credentials\n        for the target resource.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/error401'\n    error403:\n      description: \u003e-\n        Forbidden: The request contained valid data and was understood by the\n        server, but the server is refusing action. This may be due to the user\n        not having the necessary permissions for a resource or needing an\n        account of some sort, or attempting a prohibited action (e.g. creating a\n        duplicate record where only one is allowed).\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/error403'\n    error404:\n      description: \u003e-\n        Not Found: The requested resource could not be found but may be\n        available in the future. Subsequent requests by the client are\n        permissible.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/error404'\n    error405:\n      description: \u003e-\n        Method Not Allowed: A request method is not supported for the requested\n        resource; for example, a GET request on a form that requires data to be\n        presented via POST, or a PUT request on a read-only resource.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/error405'\n    error406:\n      description: \u003e-\n        Not Acceptable: The requested resource is capable of generating only\n        content not acceptable according to the Accept headers sent in the\n        request.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/error406'\n",
			"canonicalURL": "/github.com/ballerina-platform/openapi-connectors@c3641dddbc4e41686ae3d1b9bacf1621b639a019/-/blob/openapi/saps4hana.pp.idm/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ballerina-platform/openapi-connectors/blob/c3641dddbc4e41686ae3d1b9bacf1621b639a019/openapi/saps4hana.pp.idm/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/Users\": at 1:7520: get: operation \"getAllUsers\": at 1:7527: at 1:11469: security: parse security scheme \"OAuth2\": at 1:5882: oauth2: at 1:6165: flow \"clientCredentials\": at 1:6186: at 1:6307: \"tokenUrl\" MUST be in the form of a URL: parse \"\": empty url"
}