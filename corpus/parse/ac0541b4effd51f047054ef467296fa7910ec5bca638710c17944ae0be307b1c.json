{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/hoprnet/hoprnet"
		},
		"file": {
			"name": "rest-api-v2-full-spec.json",
			"size": 0,
			"path": "docs/hopr-documentation/rest-api-v2-full-spec.json",
			"byteSize": 70367,
			"content": "{\n  \"openapi\": \"3.0.3\",\n  \"servers\": [{ \"url\": \"/api/v2\" }],\n  \"info\": {\n    \"description\": \"This Rest API enables developers to interact with a hoprd node programatically.\",\n    \"version\": \"2.0.0\",\n    \"title\": \"HOPRd Rest API v2\",\n    \"contact\": { \"email\": \"tech@hoprnet.org\" },\n    \"license\": { \"name\": \"GPL-3.0\", \"url\": \"https://github.com/hoprnet/hoprnet/blob/master/LICENSE\" }\n  },\n  \"paths\": {\n    \"/tickets/statistics\": {\n      \"parameters\": [],\n      \"get\": {\n        \"description\": \"Get statistics regarding all your tickets. Node gets a ticket everytime it relays data packet in channel.\",\n        \"tags\": [\"Tickets\"],\n        \"operationId\": \"ticketsGetStatistics\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Tickets statistics fetched successfully. Check schema for description of every field in the statistics.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"pending\": {\n                      \"type\": \"number\",\n                      \"description\": \"Number of tickets that other node in the channel earned and didn't redeem yet.\"\n                    },\n                    \"unredeemed\": {\n                      \"type\": \"number\",\n                      \"description\": \"Number of tickets that wait to be redeemed as for Hopr tokens.\"\n                    },\n                    \"unredeemedValue\": {\n                      \"type\": \"string\",\n                      \"description\": \"Total value of all unredeemed tickets in Hopr tokens.\"\n                    },\n                    \"redeemed\": { \"type\": \"number\", \"description\": \"Number of tickets already redeemed on this node.\" },\n                    \"redeemedValue\": {\n                      \"type\": \"string\",\n                      \"description\": \"Total value of all redeemed tickets in Hopr tokens.\"\n                    },\n                    \"losingTickets\": {\n                      \"type\": \"number\",\n                      \"description\": \"Number of tickets that didn't win any Hopr tokens. To better understand how tickets work read about probabilistic payments (https://docs.hoprnet.org/core/probabilistic-payments)\"\n                    },\n                    \"winProportion\": {\n                      \"type\": \"number\",\n                      \"description\": \"Proportion of number of winning tickets vs loosing tickets, 1 means 100% of tickets won and 0 means that all tickets were losing ones.\"\n                    },\n                    \"neglected\": {\n                      \"type\": \"number\",\n                      \"description\": \"Number of tickets that were not redeemed in time before channel was closed. Those cannot be redeemed anymore.\"\n                    },\n                    \"rejected\": {\n                      \"type\": \"number\",\n                      \"description\": \"Number of tickets that were rejected by the network by not passing validation. In other words tickets that look suspicious and are not eligible for redeeming.\"\n                    },\n                    \"rejectedValue\": {\n                      \"type\": \"string\",\n                      \"description\": \"Total value of rejected tickets in Hopr tokens\"\n                    }\n                  }\n                }\n              }\n            }\n          },\n          \"422\": {\n            \"description\": \"Unknown failure.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"status\": { \"type\": \"string\", \"example\": \"UNKNOWN_FAILURE\" },\n                    \"error\": { \"type\": \"string\", \"example\": \"Full error message.\" }\n                  }\n                },\n                \"example\": { \"status\": \"UNKNOWN_FAILURE\", \"error\": \"Full error message.\" }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/tickets/redeem\": {\n      \"parameters\": [],\n      \"post\": {\n        \"description\": \"Redeems all tickets from all the channels and exchanges them for Hopr tokens. Every ticket have a chance to be winning one, rewarding you with Hopr tokens.\",\n        \"tags\": [\"Tickets\"],\n        \"operationId\": \"ticketsRedeemTickets\",\n        \"responses\": {\n          \"204\": { \"description\": \"Tickets redeemed succesfully.\" },\n          \"422\": {\n            \"description\": \"Unknown failure.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"status\": { \"type\": \"string\", \"example\": \"UNKNOWN_FAILURE\" },\n                    \"error\": { \"type\": \"string\", \"example\": \"Full error message.\" }\n                  }\n                },\n                \"example\": { \"status\": \"UNKNOWN_FAILURE\", \"error\": \"Full error message.\" }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/tickets/\": {\n      \"parameters\": [],\n      \"get\": {\n        \"description\": \"Get all tickets earned by relaying data packets by your node from every channel.\",\n        \"tags\": [\"Tickets\"],\n        \"operationId\": \"ticketsGetTickets\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Tickets fetched successfully.\",\n            \"content\": {\n              \"application/json\": { \"schema\": { \"type\": \"array\", \"items\": { \"$ref\": \"#/components/schemas/Ticket\" } } }\n            }\n          },\n          \"422\": {\n            \"description\": \"Unknown failure.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"status\": { \"type\": \"string\", \"example\": \"UNKNOWN_FAILURE\" },\n                    \"error\": { \"type\": \"string\", \"example\": \"Full error message.\" }\n                  }\n                },\n                \"example\": { \"status\": \"UNKNOWN_FAILURE\", \"error\": \"Full error message.\" }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/settings/\": {\n      \"parameters\": [],\n      \"get\": {\n        \"description\": \"Get all of the node's settings.\",\n        \"tags\": [\"Settings\"],\n        \"operationId\": \"settingsGetSettings\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Settings fetched succesfully.\",\n            \"content\": { \"application/json\": { \"schema\": { \"$ref\": \"#/components/schemas/Settings\" } } }\n          },\n          \"422\": {\n            \"description\": \"Unknown failure.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"status\": { \"type\": \"string\", \"example\": \"UNKNOWN_FAILURE\" },\n                    \"error\": { \"type\": \"string\", \"example\": \"Full error message.\" }\n                  }\n                },\n                \"example\": { \"status\": \"UNKNOWN_FAILURE\", \"error\": \"Full error message.\" }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/node/version\": {\n      \"parameters\": [],\n      \"get\": {\n        \"description\": \"Get release version of the running node.\",\n        \"tags\": [\"Node\"],\n        \"operationId\": \"nodeGetVersion\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Returns the release version of the running node.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": { \"type\": \"string\", \"description\": \"Node version.\", \"example\": \"1.83.5\" }\n              }\n            }\n          },\n          \"422\": {\n            \"description\": \"Unknown failure.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"status\": { \"type\": \"string\", \"example\": \"UNKNOWN_FAILURE\" },\n                    \"error\": { \"type\": \"string\", \"example\": \"Full error message.\" }\n                  }\n                },\n                \"example\": { \"status\": \"UNKNOWN_FAILURE\", \"error\": \"Full error message.\" }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/node/stream/websocket\": {\n      \"parameters\": [],\n      \"get\": {\n        \"description\": \"This is a websocket endpoint which streams legacy hopr-admin data excluding messages. Authentication (if enabled) is done via either passing an `apiToken` parameter in the url or cookie `X-Auth-Token`. Connect to the endpoint by using a WS client. No preview available. Example: `ws://127.0.0.1:3001/api/v2/node/stream/websocket/?apiToken=myApiToken`\",\n        \"tags\": [\"Node\"],\n        \"operationId\": \"nodeStreamWebsocket\",\n        \"deprecated\": true,\n        \"responses\": {\n          \"101\": { \"description\": \"Switching protocols\" },\n          \"206\": {\n            \"description\": \"Incoming data.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"type\": {\n                      \"type\": \"string\",\n                      \"description\": \"Type of data\",\n                      \"example\": [\"log\", \"fatal-error\", \"status\", \"connected\"]\n                    },\n                    \"timestamp\": {\n                      \"type\": \"number\",\n                      \"description\": \"Timestamp in miliseconds\",\n                      \"example\": 1644587213977\n                    },\n                    \"content\": { \"type\": \"string\", \"description\": \"The text content\", \"example\": \"Opening channel...\" }\n                  }\n                },\n                \"example\": { \"type\": \"log\", \"timestamp\": 1644587213977, \"content\": \"Opening channel...\" }\n              }\n            }\n          },\n          \"401\": { \"description\": \"Unauthorized\" },\n          \"404\": { \"description\": \"Not found\" }\n        }\n      }\n    },\n    \"/node/ping\": {\n      \"parameters\": [],\n      \"post\": {\n        \"description\": \"Pings another node to check its availability.\",\n        \"tags\": [\"Node\"],\n        \"operationId\": \"nodePing\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"required\": [\"peerId\"],\n                \"properties\": {\n                  \"peerId\": {\n                    \"format\": \"peerId\",\n                    \"type\": \"string\",\n                    \"description\": \"PeerId associated to the other node that we want to ping.\"\n                  }\n                },\n                \"example\": { \"peerId\": \"16Uiu2HAmUsJwbECMroQUC29LQZZWsYpYZx1oaM1H9DBoZHLkYn12\" }\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Ping successful.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"latency\": {\n                      \"type\": \"number\",\n                      \"example\": 10,\n                      \"description\": \"Number of miliseconds it took to get the response from the pinged node.\"\n                    }\n                  }\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"Invalid peerId.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": { \"$ref\": \"#/components/schemas/RequestStatus\" },\n                \"example\": { \"status\": \"INVALID_PEERID\" }\n              }\n            }\n          },\n          \"422\": {\n            \"description\": \"Timout, node with specified PeerId didn't respond in time.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": { \"$ref\": \"#/components/schemas/RequestStatus\" },\n                \"example\": { \"status\": \"TIMEOUT\" }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/node/peers\": {\n      \"parameters\": [],\n      \"get\": {\n        \"description\": \"Lists information for `connected peers` and `announced peers`.\\nConnected peers are nodes which are connected to the node while announced peers are nodes which have announced to the network.\\nOptionally, you can pass `quality` parameter which would filter out peers with lower quality to the one specified.\",\n        \"tags\": [\"Node\"],\n        \"operationId\": \"nodeGetPeers\",\n        \"parameters\": [\n          {\n            \"in\": \"query\",\n            \"name\": \"quality\",\n            \"description\": \"When quality is passed, the response will only include peers with higher or equal quality to the one specified.\",\n            \"schema\": { \"type\": \"number\", \"example\": \"0.5\" }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Peers information fetched successfuly.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"connected\": {\n                      \"type\": \"array\",\n                      \"items\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"peerId\": { \"$ref\": \"#/components/schemas/HoprAddress\" },\n                          \"multiAddr\": { \"$ref\": \"#/components/schemas/MultiAddress\" },\n                          \"heartbeats\": {\n                            \"type\": \"object\",\n                            \"properties\": {\n                              \"sent\": { \"type\": \"number\", \"description\": \"Heartbeats sent to the node\", \"example\": 10 },\n                              \"success\": {\n                                \"type\": \"number\",\n                                \"description\": \"Successful heartbeats sent to the node\",\n                                \"example\": 8\n                              }\n                            }\n                          },\n                          \"lastSeen\": {\n                            \"type\": \"number\",\n                            \"description\": \"Timestamp on when the node was last seen (in milliseconds)\",\n                            \"example\": 1646410980793\n                          },\n                          \"quality\": {\n                            \"type\": \"number\",\n                            \"description\": \"A float between 0 (completely unreliable) and 1 (completely reliable) estimating the quality of service of a peer's network connection\",\n                            \"example\": 0.8\n                          },\n                          \"backoff\": { \"type\": \"number\" },\n                          \"isNew\": {\n                            \"type\": \"boolean\",\n                            \"description\": \"True if the node is new (no heartbeats sent yet).\"\n                          }\n                        }\n                      }\n                    },\n                    \"announced\": {\n                      \"type\": \"array\",\n                      \"items\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"peerId\": { \"$ref\": \"#/components/schemas/HoprAddress\" },\n                          \"multiAddr\": { \"$ref\": \"#/components/schemas/MultiAddress\" },\n                          \"heartbeats\": {\n                            \"type\": \"object\",\n                            \"properties\": {\n                              \"sent\": { \"type\": \"number\", \"description\": \"Heartbeats sent to the node\", \"example\": 10 },\n                              \"success\": {\n                                \"type\": \"number\",\n                                \"description\": \"Successful heartbeats sent to the node\",\n                                \"example\": 8\n                              }\n                            }\n                          },\n                          \"lastSeen\": {\n                            \"type\": \"number\",\n                            \"description\": \"Timestamp on when the node was last seen (in milliseconds)\",\n                            \"example\": 1646410980793\n                          },\n                          \"quality\": {\n                            \"type\": \"number\",\n                            \"description\": \"A float between 0 (completely unreliable) and 1 (completely reliable) estimating the quality of service of a peer's network connection\",\n                            \"example\": 0.8\n                          },\n                          \"backoff\": { \"type\": \"number\" },\n                          \"isNew\": {\n                            \"type\": \"boolean\",\n                            \"description\": \"True if the node is new (no heartbeats sent yet).\"\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"Invalid input. One of the parameters passed is in an incorrect format.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": { \"$ref\": \"#/components/schemas/RequestStatus\" },\n                \"example\": { \"status\": \"INVALID_QUALITY\" }\n              }\n            }\n          },\n          \"422\": {\n            \"description\": \"Unknown failure.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"status\": { \"type\": \"string\", \"example\": \"UNKNOWN_FAILURE\" },\n                    \"error\": { \"type\": \"string\", \"example\": \"Full error message.\" }\n                  }\n                },\n                \"example\": { \"status\": \"UNKNOWN_FAILURE\", \"error\": \"Full error message.\" }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/node/info\": {\n      \"parameters\": [],\n      \"get\": {\n        \"description\": \"Information about the HOPR Node, including any options it started with. See the schema of the response to get more information on each field.\",\n        \"tags\": [\"Node\"],\n        \"operationId\": \"nodeGetInfo\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Node information fetched successfuly.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"environment\": {\n                      \"type\": \"string\",\n                      \"example\": \"hardhat-localhost\",\n                      \"description\": \"Name of the enviroment the node is running on.\"\n                    },\n                    \"announcedAddress\": {\n                      \"type\": \"array\",\n                      \"items\": {\n                        \"type\": \"string\",\n                        \"description\": \"description: Public IP address that the node announced on network when it was launched. Node anouncing means notifying all the other nodes on the network about its presence and readiness to be connected to via websocket.\"\n                      },\n                      \"example\": [\n                        \"/ip4/128.0.215.32/tcp/9080/p2p/16Uiu2HAm91QFjPepnwjuZWzK5pb5ZS8z8qxQRfKZJNXjkgGNUAit\",\n                        \"/p2p/16Uiu2HAmLpqczAGfgmJchVgVk233rmB2T3DSn2gPG6JMa5brEHZ1/p2p-circuit/p2p/16Uiu2HAm91QFjPepnwjuZWzK5pb5ZS8z8qxQRfKZJNXjkgGNUAit\",\n                        \"/ip4/127.0.0.1/tcp/9080/p2p/16Uiu2HAm91QFjPepnwjuZWzK5pb5ZS8z8qxQRfKZJNXjkgGNUAit\",\n                        \"/ip4/192.168.178.56/tcp/9080/p2p/16Uiu2HAm91QFjPepnwjuZWzK5pb5ZS8z8qxQRfKZJNXjkgGNUAit\"\n                      ]\n                    },\n                    \"listeningAddress\": {\n                      \"type\": \"array\",\n                      \"items\": {\n                        \"type\": \"string\",\n                        \"description\": \"Other nodes IP address that this node is listening to for websocket events.\"\n                      },\n                      \"example\": [\"/ip4/0.0.0.0/tcp/9080/p2p/16Uiu2HAm91QFjPepnwjuZWzK5pb5ZS8z8qxQRfKZJNXjkgGNUAit\"]\n                    },\n                    \"network\": {\n                      \"type\": \"string\",\n                      \"example\": \"hardhat\",\n                      \"description\": \"Name of the Hopr network this node connects to.\"\n                    },\n                    \"hoprToken\": {\n                      \"type\": \"string\",\n                      \"example\": \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\",\n                      \"description\": \"Contract address of the Hopr token on the ethereum network.\"\n                    },\n                    \"hoprChannels\": {\n                      \"type\": \"string\",\n                      \"example\": \"0x2a54194c8fe0e3CdeAa39c49B95495aA3b44Db63\",\n                      \"description\": \"Contract address of the HoprChannels smart contract on ethereum network. This smart contract is used to open payment channels between nodes on blockchain.\"\n                    },\n                    \"hoprNetworkRegistryAddress\": {\n                      \"type\": \"string\",\n                      \"example\": \"0xBEE1F5d64b562715E749771408d06D57EE0892A7\",\n                      \"description\": \"Contract address of the contract that allows to control the number of nodes in the network\"\n                    },\n                    \"connectivityStatus\": {\n                      \"type\": \"string\",\n                      \"example\": \"GREEN\",\n                      \"description\": \"Indicates how good is the connectivity of this node to the HOPR network: either RED, ORANGE, YELLOW or GREEN\"\n                    },\n                    \"isEligible\": {\n                      \"type\": \"boolean\",\n                      \"example\": true,\n                      \"description\": \"Determines whether the staking account associated with this node is eligible for accessing the HOPR network. Always true if network registry is disabled.\"\n                    },\n                    \"channelClosurePeriod\": {\n                      \"type\": \"number\",\n                      \"example\": 1,\n                      \"description\": \"Time (in minutes) that this node needs in order to clean up before closing the channel. When requesting to close the channel each node needs some time to make sure that channel can be closed securely and cleanly. After this channelClosurePeriod passes the second request for closing channel will close the channel.\"\n                    }\n                  }\n                }\n              }\n            }\n          },\n          \"422\": {\n            \"description\": \"Unknown failure.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"status\": { \"type\": \"string\", \"example\": \"UNKNOWN_FAILURE\" },\n                    \"error\": { \"type\": \"string\", \"example\": \"Full error message.\" }\n                  }\n                },\n                \"example\": { \"status\": \"UNKNOWN_FAILURE\", \"error\": \"Full error message.\" }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/messages/websocket\": {\n      \"parameters\": [],\n      \"get\": {\n        \"description\": \"This is a websocket endpoint which streams incoming messages from other nodes. Data is streamed in a stringified Uint8Array instance. Authentication (if enabled) is done via either passing an `apiToken` parameter in the url or cookie `X-Auth-Token`. Connect to the endpoint by using a WS client. No preview available. Example: `ws://127.0.0.1:3001/api/v2/messages/websocket/?apiToken=myApiToken`\",\n        \"tags\": [\"Messages\"],\n        \"operationId\": \"messagesWebsocket\",\n        \"responses\": {\n          \"101\": { \"description\": \"Switching protocols\" },\n          \"206\": {\n            \"description\": \"Incoming data\",\n            \"content\": {\n              \"application/text\": {\n                \"schema\": { \"type\": \"string\" },\n                \"example\": \"104,101,108,108,111,32,119,111,114,108,100\"\n              }\n            }\n          },\n          \"401\": { \"description\": \"Unauthorized\" },\n          \"404\": { \"description\": \"Not found\" }\n        }\n      }\n    },\n    \"/messages/sign\": {\n      \"parameters\": [],\n      \"post\": {\n        \"description\": \"Signs a message given using the node’s private key. Prefixes messsage with “HOPR Signed Message: ” before signing.\",\n        \"tags\": [\"Messages\"],\n        \"operationId\": \"messagesSign\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"required\": [\"message\"],\n                \"properties\": { \"message\": { \"description\": \"The message to be signed.\", \"type\": \"string\" } }\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The message was signed successfully.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": { \"signature\": { \"$ref\": \"#/components/schemas/Signature\" } }\n                }\n              }\n            }\n          },\n          \"422\": {\n            \"description\": \"Unknown failure.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"status\": { \"type\": \"string\", \"example\": \"UNKNOWN_FAILURE\" },\n                    \"error\": { \"type\": \"string\", \"example\": \"Full error message.\" }\n                  }\n                },\n                \"example\": { \"status\": \"UNKNOWN_FAILURE\", \"error\": \"Full error message.\" }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/messages/\": {\n      \"parameters\": [],\n      \"post\": {\n        \"description\": \"Send a message to another peer using a given path (list of node addresses that should relay our message through network). If no path is given, HOPR will attempt to find a path.\",\n        \"tags\": [\"Messages\"],\n        \"operationId\": \"messagesSendMessage\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"required\": [\"body\", \"recipient\"],\n                \"properties\": {\n                  \"body\": {\n                    \"description\": \"The message body which should be sent.\",\n                    \"type\": \"string\",\n                    \"example\": \"Hello\"\n                  },\n                  \"recipient\": {\n                    \"description\": \"The recipient HOPR peer id, to which the message is sent.\",\n                    \"type\": \"string\",\n                    \"format\": \"peerId\",\n                    \"example\": \"16Uiu2HAm2SF8EdwwUaaSoYTiZSddnG4hLVF7dizh32QFTNWMic2b\"\n                  },\n                  \"path\": {\n                    \"description\": \"The path is ordered list of peer ids through which the message should be sent. If no path is provided, a path which covers the nodes minimum required hops will be determined automatically.\",\n                    \"type\": \"array\",\n                    \"items\": {\n                      \"description\": \"A valid HOPR peer id\",\n                      \"type\": \"string\",\n                      \"format\": \"peerId\",\n                      \"minItems\": 1,\n                      \"maxItems\": 3,\n                      \"example\": \"16Uiu2HAm1uV82HyD1iJ5DmwJr4LftmJUeMfj8zFypBRACmrJc16n\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"204\": { \"description\": \"The message was sent successfully. NOTE: This does not imply successful delivery.\" },\n          \"422\": {\n            \"description\": \"Unknown failure.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"status\": { \"type\": \"string\", \"example\": \"UNKNOWN_FAILURE\" },\n                    \"error\": { \"type\": \"string\", \"example\": \"Full error message.\" }\n                  }\n                },\n                \"example\": { \"status\": \"UNKNOWN_FAILURE\", \"error\": \"Full error message.\" }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/message/sign\": {\n      \"parameters\": [],\n      \"post\": {\n        \"description\": \"Signs a message given using the node’s private key. Prefixes messsage with “HOPR Signed Message: ” before signing.\",\n        \"tags\": [\"Messages\"],\n        \"operationId\": \"messageSign\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"required\": [\"message\"],\n                \"properties\": { \"message\": { \"description\": \"The message to be signed.\", \"type\": \"string\" } }\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The message was signed successfully.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": { \"signature\": { \"$ref\": \"#/components/schemas/Signature\" } }\n                }\n              }\n            }\n          },\n          \"422\": {\n            \"description\": \"Unknown failure.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"status\": { \"type\": \"string\", \"example\": \"UNKNOWN_FAILURE\" },\n                    \"error\": { \"type\": \"string\", \"example\": \"Full error message.\" }\n                  }\n                },\n                \"example\": { \"status\": \"UNKNOWN_FAILURE\", \"error\": \"Full error message.\" }\n              }\n            }\n          }\n        },\n        \"deprecated\": true\n      }\n    },\n    \"/channels/\": {\n      \"parameters\": [],\n      \"post\": {\n        \"description\": \"Opens a payment channel between this node and the counter party provided. This channel can be used to send messages between two nodes using other nodes on the network to relay the messages. Each message will deduce its cost from the funded amount to pay other nodes for relaying your messages. Opening a channel can take a little bit of time, because it requires some block confirmations on the blockchain.\",\n        \"tags\": [\"Channels\"],\n        \"operationId\": \"channelsOpenChannel\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"required\": [\"peerId\", \"amount\"],\n                \"properties\": {\n                  \"peerId\": {\n                    \"format\": \"peerId\",\n                    \"type\": \"string\",\n                    \"description\": \"PeerId that we want to transact with using this channel.\"\n                  },\n                  \"amount\": {\n                    \"format\": \"amount\",\n                    \"type\": \"string\",\n                    \"description\": \"Amount of HOPR tokens to fund the channel. It will be used to pay for sending messages through channel\"\n                  }\n                },\n                \"example\": { \"peerId\": \"16Uiu2HAmUsJwbECMroQUC29LQZZWsYpYZx1oaM1H9DBoZHLkYn12\", \"amount\": \"1000000\" }\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"201\": {\n            \"description\": \"Channel succesfully opened.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"channelId\": {\n                      \"type\": \"string\",\n                      \"example\": \"0x04e50b7ddce9770f58cebe51f33b472c92d1c40384759f5a0b1025220bf15ec5\",\n                      \"description\": \"Channel ID that can be used in other calls, not to confuse with transaction hash.\"\n                    },\n                    \"receipt\": {\n                      \"type\": \"string\",\n                      \"example\": \"0x37954ca4a630aa28f045df2e8e604cae22071046042e557355acf00f4ef20d2e\",\n                      \"description\": \"Receipt for open channel transaction. Can be used to check status of the smart contract call on blockchain.\"\n                    }\n                  }\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"Problem with inputs.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": { \"$ref\": \"#/components/schemas/RequestStatus\" },\n                \"example\": { \"status\": \"INVALID_AMOUNT | INVALID_ADDRESS\" }\n              }\n            }\n          },\n          \"403\": {\n            \"description\": \"Failed to open the channel because of insufficient HOPR balance.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"status\": {\n                      \"type\": \"string\",\n                      \"example\": \"NOT_ENOUGH_BALANCE\",\n                      \"description\": \"Insufficient balance to open channel. Amount passed in request body exeeds current balance.\"\n                    }\n                  }\n                },\n                \"example\": { \"status\": \"NOT_ENOUGH_BALANCE\" }\n              }\n            }\n          },\n          \"409\": {\n            \"description\": \"Failed to open the channel because the channel between this nodes already exists.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"status\": {\n                      \"type\": \"string\",\n                      \"example\": \"CHANNEL_ALREADY_OPEN\",\n                      \"description\": \"Channel already open. Cannot open more than one channel between two nodes.\"\n                    }\n                  }\n                },\n                \"example\": { \"status\": \"CHANNEL_ALREADY_OPEN\" }\n              }\n            }\n          },\n          \"422\": {\n            \"description\": \"Unknown failure.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"status\": { \"type\": \"string\", \"example\": \"UNKNOWN_FAILURE\" },\n                    \"error\": { \"type\": \"string\", \"example\": \"Full error message.\" }\n                  }\n                },\n                \"example\": { \"status\": \"UNKNOWN_FAILURE\", \"error\": \"Full error message.\" }\n              }\n            }\n          }\n        }\n      },\n      \"get\": {\n        \"description\": \"Lists all active channels between this node and other nodes on the Hopr network. By default response will contain all incomming and outgoing channels that are either open, waiting to be opened, or waiting to be closed. If you also want to receive past channels that were closed, you can pass `includingClosed` in the request url query.\",\n        \"tags\": [\"Channels\"],\n        \"operationId\": \"channelsGetChannels\",\n        \"parameters\": [\n          {\n            \"in\": \"query\",\n            \"name\": \"includingClosed\",\n            \"description\": \"When includingClosed is passed the response will include closed channels which are ommited by default.\",\n            \"schema\": { \"type\": \"string\", \"example\": \"false\" }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Channels fetched succesfully.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"incoming\": {\n                      \"type\": \"array\",\n                      \"items\": { \"$ref\": \"#/components/schemas/Channel\" },\n                      \"description\": \"Incomming channels are the ones that were opened by a different node and this node acts as relay.\"\n                    },\n                    \"outgoing\": {\n                      \"type\": \"array\",\n                      \"items\": { \"$ref\": \"#/components/schemas/Channel\" },\n                      \"description\": \"Outgoing channels are the ones that were opened by this node and is using other node as relay.\"\n                    }\n                  }\n                }\n              }\n            }\n          },\n          \"422\": {\n            \"description\": \"Unknown failure.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"status\": { \"type\": \"string\", \"example\": \"UNKNOWN_FAILURE\" },\n                    \"error\": { \"type\": \"string\", \"example\": \"Full error message.\" }\n                  }\n                },\n                \"example\": { \"status\": \"UNKNOWN_FAILURE\", \"error\": \"Full error message.\" }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/aliases/\": {\n      \"parameters\": [],\n      \"get\": {\n        \"description\": \"Get all aliases you set previously and thier corresponding peer IDs.\",\n        \"tags\": [\"Aliases\"],\n        \"operationId\": \"aliasesGetAliases\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Returns List of Aliases and corresponding peerIds.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"alice\": { \"$ref\": \"#/components/schemas/HoprAddress\" },\n                    \"bob\": { \"$ref\": \"#/components/schemas/HoprAddress\" }\n                  }\n                }\n              }\n            }\n          },\n          \"422\": {\n            \"description\": \"Unknown failure.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"status\": { \"type\": \"string\", \"example\": \"UNKNOWN_FAILURE\" },\n                    \"error\": { \"type\": \"string\", \"example\": \"Full error message.\" }\n                  }\n                },\n                \"example\": { \"status\": \"UNKNOWN_FAILURE\", \"error\": \"Full error message.\" }\n              }\n            }\n          }\n        }\n      },\n      \"post\": {\n        \"description\": \"Instead of using HOPR address, we can assign HOPR address to a specific name called alias. Give an address a more memorable alias and use it instead of Hopr address. Aliases are kept locally and are not saved or shared on the network.\",\n        \"tags\": [\"Aliases\"],\n        \"operationId\": \"aliasesSetAlias\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"required\": [\"peerId\", \"alias\"],\n                \"properties\": {\n                  \"peerId\": {\n                    \"format\": \"peerId\",\n                    \"type\": \"string\",\n                    \"description\": \"PeerId that we want to set alias to.\"\n                  },\n                  \"alias\": { \"type\": \"string\", \"description\": \"Alias that we want to attach to peerId.\" }\n                },\n                \"example\": { \"peerId\": \"16Uiu2HAmUsJwbECMroQUC29LQZZWsYpYZx1oaM1H9DBoZHLkYn12\", \"alias\": \"Alice\" }\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"201\": { \"description\": \"Alias set succesfully\" },\n          \"400\": {\n            \"description\": \"Invalid peerId. The format or length of the peerId is incorrect.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": { \"$ref\": \"#/components/schemas/RequestStatus\" },\n                \"example\": { \"status\": \"INVALID_PEERID\" }\n              }\n            }\n          },\n          \"422\": {\n            \"description\": \"Unknown failure.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"status\": { \"type\": \"string\", \"example\": \"UNKNOWN_FAILURE\" },\n                    \"error\": { \"type\": \"string\", \"example\": \"Full error message.\" }\n                  }\n                },\n                \"example\": { \"status\": \"UNKNOWN_FAILURE\", \"error\": \"Full error message.\" }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/account/withdraw\": {\n      \"parameters\": [],\n      \"post\": {\n        \"description\": \"Withdraw funds from this node to your ethereum wallet address. You can choose whitch currency you want to withdraw, NATIVE or HOPR.\",\n        \"tags\": [\"Account\"],\n        \"operationId\": \"accountWithdraw\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"required\": [\"currency\", \"amount\", \"recipient\"],\n                \"properties\": {\n                  \"currency\": { \"$ref\": \"#/components/schemas/Currency\" },\n                  \"amount\": {\n                    \"type\": \"string\",\n                    \"format\": \"amount\",\n                    \"description\": \"Amount to withdraw in the currency's smallest unit.\",\n                    \"example\": \"1337\"\n                  },\n                  \"recipient\": { \"$ref\": \"#/components/schemas/NativeAddress\" }\n                }\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Withdraw successful. Receipt from this response can be used to check details of the transaction on ethereum network.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"receipt\": {\n                      \"type\": \"string\",\n                      \"example\": \"0x37954ca4a630aa28f045df2e8e604cae22071046042e557355acf00f4ef20d2e\",\n                      \"description\": \"Withdraw txn hash that can be used to check details of the transaction on ethereum network.\"\n                    }\n                  }\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"Incorrect data in request body. Make sure to provide valid currency ('NATIVE' | 'HOPR') or amount.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": { \"$ref\": \"#/components/schemas/RequestStatus\" },\n                \"example\": { \"status\": \"INVALID_CURRENCY | INVALID_AMOUNT\" }\n              }\n            }\n          },\n          \"422\": {\n            \"description\": \"Withdraw amount exeeds current balance or unknown error. You can check current balance using /account/balance endpoint.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"status\": { \"type\": \"string\", \"example\": \"NOT_ENOUGH_BALANCE | UNKNOWN_FAILURE\" },\n                    \"error\": { \"type\": \"string\", \"example\": \"NOT_ENOUGH_BALANCE\" }\n                  }\n                },\n                \"example\": { \"status\": \"NOT_ENOUGH_BALANCE\" }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/account/balances\": {\n      \"parameters\": [],\n      \"get\": {\n        \"description\": \"Get node's HOPR and native balances. HOPR tokens from this balance is used to fund payment channels between this node and other nodes on the network. NATIVE balance is used to pay for the gas fees for the blockchain network.\",\n        \"tags\": [\"Account\"],\n        \"operationId\": \"accountGetBalances\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Balances fetched successfuly.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"native\": { \"$ref\": \"#/components/schemas/NativeBalance\" },\n                    \"hopr\": { \"$ref\": \"#/components/schemas/HoprBalance\" }\n                  }\n                }\n              }\n            }\n          },\n          \"422\": {\n            \"description\": \"Unknown failure.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"status\": { \"type\": \"string\", \"example\": \"UNKNOWN_FAILURE\" },\n                    \"error\": { \"type\": \"string\", \"example\": \"Full error message.\" }\n                  }\n                },\n                \"example\": { \"status\": \"UNKNOWN_FAILURE\", \"error\": \"Full error message.\" }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/account/addresses\": {\n      \"parameters\": [],\n      \"get\": {\n        \"description\": \"Get node's HOPR and native addresses. HOPR address is also called PeerId and can be used by other node owner to interact with this node.\",\n        \"tags\": [\"Account\"],\n        \"operationId\": \"accountGetAddresses\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Addresses fetched successfully.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"nativeAddress\": {\n                      \"allOf\": [{ \"$ref\": \"#/components/schemas/NativeAddress\" }, { \"deprecated\": true }]\n                    },\n                    \"hoprAddress\": {\n                      \"allOf\": [{ \"$ref\": \"#/components/schemas/HoprAddress\" }, { \"deprecated\": true }]\n                    },\n                    \"native\": { \"$ref\": \"#/components/schemas/NativeAddress\" },\n                    \"hopr\": { \"$ref\": \"#/components/schemas/HoprAddress\" }\n                  }\n                }\n              }\n            }\n          },\n          \"422\": {\n            \"description\": \"Unknown failure.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"status\": { \"type\": \"string\", \"example\": \"UNKNOWN_FAILURE\" },\n                    \"error\": { \"type\": \"string\", \"example\": \"Full error message.\" }\n                  }\n                },\n                \"example\": { \"status\": \"UNKNOWN_FAILURE\", \"error\": \"Full error message.\" }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/account/address\": {\n      \"parameters\": [],\n      \"get\": {\n        \"description\": \"Get node's HOPR and native addresses. HOPR address is also called PeerId and can be used by other node owner to interact with this node.\",\n        \"tags\": [\"Account\"],\n        \"operationId\": \"accountGetAddress\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Addresses fetched successfully.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"nativeAddress\": {\n                      \"allOf\": [{ \"$ref\": \"#/components/schemas/NativeAddress\" }, { \"deprecated\": true }]\n                    },\n                    \"hoprAddress\": {\n                      \"allOf\": [{ \"$ref\": \"#/components/schemas/HoprAddress\" }, { \"deprecated\": true }]\n                    },\n                    \"native\": { \"$ref\": \"#/components/schemas/NativeAddress\" },\n                    \"hopr\": { \"$ref\": \"#/components/schemas/HoprAddress\" }\n                  }\n                }\n              }\n            }\n          },\n          \"422\": {\n            \"description\": \"Unknown failure.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"status\": { \"type\": \"string\", \"example\": \"UNKNOWN_FAILURE\" },\n                    \"error\": { \"type\": \"string\", \"example\": \"Full error message.\" }\n                  }\n                },\n                \"example\": { \"status\": \"UNKNOWN_FAILURE\", \"error\": \"Full error message.\" }\n              }\n            }\n          }\n        },\n        \"deprecated\": true\n      }\n    },\n    \"/settings/{setting}\": {\n      \"parameters\": [],\n      \"put\": {\n        \"description\": \"Change this node's setting value. Check Settings schema to learn more about each setting and the type of value it expects.\",\n        \"tags\": [\"Settings\"],\n        \"operationId\": \"settingsSetSetting\",\n        \"parameters\": [\n          {\n            \"in\": \"path\",\n            \"name\": \"setting\",\n            \"required\": true,\n            \"schema\": {\n              \"format\": \"settingKey\",\n              \"type\": \"string\",\n              \"description\": \"Name of the setting we want to change.\",\n              \"example\": \"includeRecipient\"\n            }\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"required\": [\"settingValue\"],\n                \"properties\": { \"settingValue\": {} },\n                \"example\": { \"settingValue\": true }\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"204\": { \"description\": \"Setting set succesfully\" },\n          \"400\": {\n            \"description\": \"Invalid input. Either setting with that name doesn't exist or the value is incorrect.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": { \"$ref\": \"#/components/schemas/RequestStatus\" },\n                \"example\": { \"status\": \"INVALID_SETTING | INVALID_SETTING_VALUE\" }\n              }\n            }\n          },\n          \"422\": {\n            \"description\": \"Unknown failure.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"status\": { \"type\": \"string\", \"example\": \"UNKNOWN_FAILURE\" },\n                    \"error\": { \"type\": \"string\", \"example\": \"Full error message.\" }\n                  }\n                },\n                \"example\": { \"status\": \"UNKNOWN_FAILURE\", \"error\": \"Full error message.\" }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/channels/{peerid}/tickets/redeem\": {\n      \"parameters\": [],\n      \"post\": {\n        \"description\": \"Redeems your tickets for this channel. Redeeming will change your tickets into Hopr tokens if they are winning ones. You can check how much tickets given channel has by calling /channels/{peerid}/tickets endpoint. Do this before channel is closed as neglected tickets are no longer valid for redeeming.\",\n        \"tags\": [\"Channels\"],\n        \"operationId\": \"channelsRedeemTickets\",\n        \"parameters\": [\n          {\n            \"in\": \"path\",\n            \"name\": \"peerid\",\n            \"example\": \"16Uiu2HAm91QFjPepnwjuZWzK5pb5ZS8z8qxQRfKZJNXjkgGNUAit\",\n            \"required\": true,\n            \"schema\": {\n              \"format\": \"peerId\",\n              \"type\": \"string\",\n              \"description\": \"PeerId attached to the channel.\",\n              \"example\": \"16Uiu2HAmUsJwbECMroQUC29LQZZWsYpYZx1oaM1H9DBoZHLkYn12\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"204\": { \"description\": \"Tickets redeemed succesfully.\" },\n          \"400\": {\n            \"description\": \"Invalid peerId.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": { \"$ref\": \"#/components/schemas/RequestStatus\" },\n                \"example\": { \"status\": \"INVALID_PEERID\" }\n              }\n            }\n          },\n          \"404\": {\n            \"description\": \"Tickets were not found for that channel. That means that no messages were sent inside this channel yet.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": { \"$ref\": \"#/components/schemas/RequestStatus\" },\n                \"example\": { \"status\": \"TICKETS_NOT_FOUND\" }\n              }\n            }\n          },\n          \"422\": {\n            \"description\": \"Unknown failure.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"status\": { \"type\": \"string\", \"example\": \"UNKNOWN_FAILURE\" },\n                    \"error\": { \"type\": \"string\", \"example\": \"Full error message.\" }\n                  }\n                },\n                \"example\": { \"status\": \"UNKNOWN_FAILURE\", \"error\": \"Full error message.\" }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/channels/{peerid}/tickets\": {\n      \"parameters\": [],\n      \"get\": {\n        \"description\": \"Get tickets earned by relaying data packets by your node for the particular channel.\",\n        \"tags\": [\"Channels\"],\n        \"operationId\": \"channelsGetTickets\",\n        \"parameters\": [\n          {\n            \"in\": \"path\",\n            \"name\": \"peerid\",\n            \"example\": \"16Uiu2HAm91QFjPepnwjuZWzK5pb5ZS8z8qxQRfKZJNXjkgGNUAit\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"peerId\",\n              \"description\": \"PeerId attached to the channel.\",\n              \"example\": \"16Uiu2HAmUsJwbECMroQUC29LQZZWsYpYZx1oaM1H9DBoZHLkYn12\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Tickets fetched successfully.\",\n            \"content\": {\n              \"application/json\": { \"schema\": { \"type\": \"array\", \"items\": { \"$ref\": \"#/components/schemas/Ticket\" } } }\n            }\n          },\n          \"400\": {\n            \"description\": \"Invalid peerId.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": { \"$ref\": \"#/components/schemas/RequestStatus\" },\n                \"example\": { \"status\": \"INVALID_PEERID\" }\n              }\n            }\n          },\n          \"404\": {\n            \"description\": \"Tickets were not found for that channel. That means that no messages were sent inside this channel yet.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": { \"$ref\": \"#/components/schemas/RequestStatus\" },\n                \"example\": { \"status\": \"TICKETS_NOT_FOUND\" }\n              }\n            }\n          },\n          \"422\": {\n            \"description\": \"Unknown failure.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"status\": { \"type\": \"string\", \"example\": \"UNKNOWN_FAILURE\" },\n                    \"error\": { \"type\": \"string\", \"example\": \"Full error message.\" }\n                  }\n                },\n                \"example\": { \"status\": \"UNKNOWN_FAILURE\", \"error\": \"Full error message.\" }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/channels/{peerid}/{direction}/\": {\n      \"parameters\": [],\n      \"delete\": {\n        \"description\": \"Close a opened channel between this node and other node. Once you've initiated channel closure, you have to wait for a specified closure time, it will show you a closure initiation message with cool-off time you need to wait.\\n  Then you will need to send the same command again to finalize closure. This is a cool down period to give the other party in the channel sufficient time to redeem their tickets.\",\n        \"tags\": [\"Channels\"],\n        \"operationId\": \"channelsCloseChannel\",\n        \"parameters\": [\n          {\n            \"in\": \"path\",\n            \"name\": \"peerid\",\n            \"required\": true,\n            \"schema\": {\n              \"format\": \"peerId\",\n              \"type\": \"string\",\n              \"description\": \"PeerId attached to the channel that we want to close.\",\n              \"example\": \"16Uiu2HAmUsJwbECMroQUC29LQZZWsYpYZx1oaM1H9DBoZHLkYn12\"\n            }\n          },\n          {\n            \"in\": \"path\",\n            \"name\": \"direction\",\n            \"description\": \"Specify which channel should be fetched, incoming or outgoing.\",\n            \"required\": true,\n            \"schema\": { \"type\": \"string\", \"enum\": [\"incoming\", \"outgoing\"] }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Channel closed succesfully.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"receipt\": {\n                      \"type\": \"string\",\n                      \"description\": \"Receipt of the closing transaction\",\n                      \"example\": \"0x37954ca4a630aa28f045df2e8e604cae22071046042e557355acf00f4ef20d2e\"\n                    },\n                    \"channelStatus\": {\n                      \"type\": \"string\",\n                      \"description\": \"Current status of the channel\",\n                      \"example\": \"Closed\"\n                    }\n                  }\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"Invalid peerId.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": { \"$ref\": \"#/components/schemas/RequestStatus\" },\n                \"example\": { \"status\": \"INVALID_PEERID\" }\n              }\n            }\n          },\n          \"422\": {\n            \"description\": \"Unknown failure.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"status\": { \"type\": \"string\", \"example\": \"UNKNOWN_FAILURE\" },\n                    \"error\": { \"type\": \"string\", \"example\": \"Full error message.\" }\n                  }\n                },\n                \"example\": { \"status\": \"UNKNOWN_FAILURE\", \"error\": \"Full error message.\" }\n              }\n            }\n          }\n        }\n      },\n      \"get\": {\n        \"description\": \"Returns information about the channel between this node and provided peerId.\",\n        \"tags\": [\"Channels\"],\n        \"operationId\": \"channelsGetChannel\",\n        \"parameters\": [\n          {\n            \"in\": \"path\",\n            \"name\": \"peerid\",\n            \"description\": \"Counterparty peerId assigned to the channel you want to fetch.\",\n            \"required\": true,\n            \"schema\": { \"$ref\": \"#/components/schemas/HoprAddress\" }\n          },\n          {\n            \"in\": \"path\",\n            \"name\": \"direction\",\n            \"description\": \"Specify which channel should be fetched, incoming or outgoing.\",\n            \"required\": true,\n            \"schema\": { \"type\": \"string\", \"enum\": [\"incoming\", \"outgoing\"] }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Channel fetched succesfully.\",\n            \"content\": { \"application/json\": { \"schema\": { \"items\": { \"$ref\": \"#/components/schemas/Channel\" } } } }\n          },\n          \"400\": {\n            \"description\": \"Invalid peerId.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": { \"$ref\": \"#/components/schemas/RequestStatus\" },\n                \"example\": { \"status\": \"INVALID_PEERID\" }\n              }\n            }\n          },\n          \"404\": {\n            \"description\": \"Channel with that peerId was not found. You can list all channels using /channels/ endpoint.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": { \"$ref\": \"#/components/schemas/RequestStatus\" },\n                \"example\": { \"status\": \"CHANNEL_NOT_FOUND\" }\n              }\n            }\n          },\n          \"422\": {\n            \"description\": \"Unknown failure.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"status\": { \"type\": \"string\", \"example\": \"UNKNOWN_FAILURE\" },\n                    \"error\": { \"type\": \"string\", \"example\": \"Full error message.\" }\n                  }\n                },\n                \"example\": { \"status\": \"UNKNOWN_FAILURE\", \"error\": \"Full error message.\" }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/aliases/{alias}\": {\n      \"parameters\": [],\n      \"get\": {\n        \"description\": \"Get the PeerId (Hopr address) that have this alias assigned to it.\",\n        \"tags\": [\"Aliases\"],\n        \"operationId\": \"aliasesGetAlias\",\n        \"parameters\": [\n          {\n            \"name\": \"alias\",\n            \"in\": \"path\",\n            \"description\": \"Alias that we previously assigned to some PeerId.\",\n            \"required\": true,\n            \"schema\": { \"type\": \"string\", \"example\": \"Alice\" }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"HOPR address was found for the provided alias.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": { \"peerId\": { \"$ref\": \"#/components/schemas/HoprAddress\" } }\n                }\n              }\n            }\n          },\n          \"404\": {\n            \"description\": \"This alias was not assigned to any PeerId before. You can get the list of all PeerId's and thier corresponding aliases using /aliases endpoint.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": { \"$ref\": \"#/components/schemas/RequestStatus\" },\n                \"example\": { \"status\": \"PEERID_NOT_FOUND\" }\n              }\n            }\n          },\n          \"422\": {\n            \"description\": \"Unknown failure.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"status\": { \"type\": \"string\", \"example\": \"UNKNOWN_FAILURE\" },\n                    \"error\": { \"type\": \"string\", \"example\": \"Full error message.\" }\n                  }\n                },\n                \"example\": { \"status\": \"UNKNOWN_FAILURE\", \"error\": \"Full error message.\" }\n              }\n            }\n          }\n        }\n      },\n      \"delete\": {\n        \"description\": \"Unassign an alias from a PeerId. You can always assign back alias to that PeerId using /aliases endpoint.\",\n        \"tags\": [\"Aliases\"],\n        \"operationId\": \"aliasesRemoveAlias\",\n        \"parameters\": [\n          {\n            \"name\": \"alias\",\n            \"in\": \"path\",\n            \"description\": \"Alias that we want to remove.\",\n            \"required\": true,\n            \"schema\": { \"type\": \"string\", \"example\": \"Alice\" }\n          }\n        ],\n        \"responses\": {\n          \"204\": { \"description\": \"Alias removed succesfully.\" },\n          \"422\": {\n            \"description\": \"Unknown failure.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"status\": { \"type\": \"string\", \"example\": \"UNKNOWN_FAILURE\" },\n                    \"error\": { \"type\": \"string\", \"example\": \"Full error message.\" }\n                  }\n                },\n                \"example\": { \"status\": \"UNKNOWN_FAILURE\", \"error\": \"Full error message.\" }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"security\": [{ \"keyScheme\": [\"write\"] }, { \"passwordScheme\": [\"write\"] }],\n  \"externalDocs\": { \"description\": \"Find out more about HOPR and HOPRd.\", \"url\": \"http://docs.hoprnet.org\" },\n  \"components\": {\n    \"schemas\": {\n      \"RequestStatus\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"status\": { \"type\": \"string\", \"description\": \"Status declaring success/failure of the request.\" }\n        },\n        \"example\": { \"status\": \"success\" }\n      },\n      \"Signature\": {\n        \"type\": \"string\",\n        \"description\": \"Signature from requested message.\",\n        \"example\": \"0x304402201065a95fd22fc3e48266c3b270ace032489b0177e07d33c59e0d13dccc89108402205f41fb911bcfe485a8e58162ebce90382dc96ccafff378e5c8960e07efcf9e92\"\n      },\n      \"MultiAddress\": {\n        \"type\": \"string\",\n        \"description\": \"A multi address is a composable and future-proof network address, usually announced by Public HOPR nodes.\",\n        \"example\": [\n          \"/ip4/128.0.215.32/tcp/9080/p2p/16Uiu2HAm91QFjPepnwjuZWzK5pb5ZS8z8qxQRfKZJNXjkgGNUAit\",\n          \"/p2p/16Uiu2HAmLpqczAGfgmJchVgVk233rmB2T3DSn2gPG6JMa5brEHZ1/p2p-circuit/p2p/16Uiu2HAm91QFjPepnwjuZWzK5pb5ZS8z8qxQRfKZJNXjkgGNUAit\",\n          \"/ip4/127.0.0.1/tcp/9080/p2p/16Uiu2HAm91QFjPepnwjuZWzK5pb5ZS8z8qxQRfKZJNXjkgGNUAit\",\n          \"/ip4/192.168.178.56/tcp/9080/p2p/16Uiu2HAm91QFjPepnwjuZWzK5pb5ZS8z8qxQRfKZJNXjkgGNUAit\"\n        ]\n      },\n      \"Currency\": {\n        \"type\": \"string\",\n        \"enum\": [\"NATIVE\", \"HOPR\"],\n        \"description\": \"Supported currencies, NATIVE used for the interacting with blockchain or HOPR used to fund channels.\",\n        \"example\": \"NATIVE\"\n      },\n      \"NativeAddress\": {\n        \"type\": \"string\",\n        \"format\": \"address\",\n        \"description\": \"Blockchain-native account address. Can be funded from external wallets (starts with **0x...**). It **can't be used** internally to send / receive messages, open / close payment channels.\",\n        \"example\": \"0xEA9eDAE5CfC794B75C45c8fa89b605508A03742a\"\n      },\n      \"HoprAddress\": {\n        \"format\": \"peerId\",\n        \"type\": \"string\",\n        \"description\": \"HOPR account address, also called a PeerId. Used to send / receive messages, open / close payment channels.\",\n        \"example\": \"16Uiu2HAmVfV4GKQhdECMqYmUMGLy84RjTJQxTWDcmUX5847roBar\"\n      },\n      \"NativeBalance\": {\n        \"type\": \"string\",\n        \"example\": \"1000000000000000000\",\n        \"description\": \"Amount of NATIVE (ETH) balance in the smallest unit. Used only for gas fees on the blockchain the current release is running on. For example, when you will open or close the payment channel, it will use gas fees to execute this action.\"\n      },\n      \"HoprBalance\": {\n        \"type\": \"string\",\n        \"example\": \"10000000000000000000\",\n        \"description\": \"Amount of HOPR tokens in the smallest unit. Used for funding payment channels.\"\n      },\n      \"Channel\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"type\": {\n            \"type\": \"string\",\n            \"enum\": [\"incoming\", \"outgoing\"],\n            \"description\": \"Channel can be either incomming or outgoing. Incomming means that other node can send messages using this node as relay. Outgoing means that this node can use other node to send message as realy.\",\n            \"example\": \"incoming\"\n          },\n          \"channelId\": {\n            \"type\": \"string\",\n            \"description\": \"Channel ID that can be used in other calls, not to confuse with transaction hash.\",\n            \"example\": \"0x04e50b7ddce9770f58cebe51f33b472c92d1c40384759f5a0b1025220bf15ec5\"\n          },\n          \"peerId\": { \"$ref\": \"#/components/schemas/HoprAddress\" },\n          \"status\": {\n            \"type\": \"string\",\n            \"enum\": [\"WaitingForCommitment\", \"Open\", \"PendingToClose\", \"Closed\"],\n            \"description\": \"Status of the channel can be: WaitingForCommitment, Open, PendingToClose, or Closed.\",\n            \"example\": \"Open\"\n          },\n          \"balance\": { \"$ref\": \"#/components/schemas/HoprBalance\" }\n        }\n      },\n      \"Ticket\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"counterparty\": { \"$ref\": \"#/components/schemas/HoprAddress\" },\n          \"challenge\": {\n            \"type\": \"string\",\n            \"description\": \"The ticket's challenge which needs to be solved before being able to claim the embedded incentive.\"\n          },\n          \"epoch\": {\n            \"type\": \"string\",\n            \"description\": \"Ticket redemption relies on providing the value opening to a series of commitments that have previously been stored on-chain by the ticket recipient.\"\n          },\n          \"index\": {\n            \"type\": \"string\",\n            \"description\": \"Each ticket is labeled by an ongoing serial number named ticket index i and its current value is stored in the smart contract.\"\n          },\n          \"amount\": { \"type\": \"string\", \"description\": \"The ticket's value in HOPR.\" },\n          \"winProb\": {\n            \"type\": \"string\",\n            \"description\": \"The ticket's winning probability normalized with the common base of Ethereum which is 2^256-1.\"\n          },\n          \"channelEpoch\": {\n            \"type\": \"string\",\n            \"description\": \"Payment channels might run through multiple open and close sequences, this epoch tracks the sequence.\"\n          },\n          \"signature\": { \"$ref\": \"#/components/schemas/Signature\" }\n        }\n      },\n      \"Settings\": {\n        \"type\": \"object\",\n        \"description\": \"Various settings that affects how this node is interacting with the network.\",\n        \"properties\": {\n          \"includeRecipient\": {\n            \"type\": \"boolean\",\n            \"description\": \"Prepends your address to all messages so that receiver of the message can know that you sent that message.\",\n            \"example\": true\n          },\n          \"strategy\": {\n            \"type\": \"string\",\n            \"enum\": [\"passive\", \"promiscuous\"],\n            \"example\": \"passive\",\n            \"description\": \"By default, hoprd runs in **passive** mode, this means that your node will not attempt to open or close any channels automatically. When you set your strategy to **promiscuous** mode, your node will attempt to open channels to a _randomly_ selected group of nodes which you have a healthy connection to. At the same time, your node will also attempt to close channels that are running low on balance or are unhealthy.\"\n          }\n        }\n      }\n    },\n    \"securitySchemes\": {\n      \"keyScheme\": {\n        \"type\": \"apiKey\",\n        \"name\": \"x-auth-token\",\n        \"in\": \"header\",\n        \"description\": \"A valid API token which had been configured at node startup.\"\n      },\n      \"passwordScheme\": {\n        \"type\": \"http\",\n        \"scheme\": \"basic\",\n        \"description\": \"A valid API token is used as the user which had been configured at node startup. No password is required.\"\n      }\n    }\n  },\n  \"tags\": [\n    { \"name\": \"Account\" },\n    { \"name\": \"Aliases\" },\n    { \"name\": \"Channels\" },\n    { \"name\": \"Messages\" },\n    { \"name\": \"Node\" },\n    { \"name\": \"Settings\" },\n    { \"name\": \"Tickets\" }\n  ]\n}\n",
			"canonicalURL": "/github.com/hoprnet/hoprnet@148b028097bfaee3b36a07babbfb8fdc21a41a45/-/blob/docs/hopr-documentation/rest-api-v2-full-spec.json",
			"externalURLs": [
				{
					"url": "https://github.com/hoprnet/hoprnet/blob/148b028097bfaee3b36a07babbfb8fdc21a41a45/docs/hopr-documentation/rest-api-v2-full-spec.json",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/account/address\": get: operation \"accountGetAddress\": security: at 1570:32: list of scopes MUST be empty for \"type\" \"apiKey\""
}