{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/zxkane/cdk-collections"
		},
		"file": {
			"name": "rest-sqs.yaml",
			"size": 0,
			"path": "create-apis-from-openapi-spec/src/rest-sqs.yaml",
			"byteSize": 5150,
			"content": "openapi: \"3.0.3\"\ninfo:\n  title: \"restful-api-to-sqs\"\n  version: \"v1.0.0\"\n  license:\n    name: \"Apache 2.0\"\n    url: \"https://www.apache.org/licenses/LICENSE-2.0.html\"  \nservers:\n- url:\n  variables:\n    basePath:\n      default: \"\"\npaths:\n  /i:\n    options:\n      summary: CORS support\n      description: |\n        Enable CORS by returning correct headers\n      tags:\n      - CORS\n      responses:\n        200:\n          description: Default response for CORS method\n          headers:\n            Access-Control-Allow-Origin:\n              schema:\n                type: string\n            Access-Control-Allow-Methods:\n              schema:\n                type: string\n            Access-Control-Allow-Headers:\n              schema:\n                type: string\n          content: {}\n      x-amazon-apigateway-integration:\n        type: mock\n        requestTemplates:\n          application/json: |-\n            {\n              \"statusCode\" : 200\n            }\n        responses:\n          default:\n            statusCode: \"200\"\n            responseParameters:\n              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''\n              method.response.header.Access-Control-Allow-Methods: '''OPTIONS,POST'''\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            responseTemplates:\n              application/json: |-\n                {}\n    post:\n      description: \"Writing sessions, metrics and events\"\n      operationId: \"sendEvents\"\n      parameters:\n      - name: \"content-type\"\n        in: \"header\"\n        required: true\n        schema:\n          type: \"string\"\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: \"#/components/schemas/events\"\n        required: true\n      responses:\n        \"404\":\n          description: \"404 response\"\n          headers:\n            Content-Type:\n              schema:\n                type: \"string\"\n          content: {}\n        \"200\":\n          description: \"200 response\"\n          headers:\n            Content-Type:\n              schema:\n                type: \"string\"\n            Access-Control-Allow-Origin:\n              schema:\n                type: \"string\"\n          content: {}\n        \"400\":\n          description: \"400 response\"\n          headers:\n            Content-Type:\n              schema:\n                type: \"string\"\n          content: {}\n        \"500\":\n          description: \"500 response\"\n          headers:\n            Content-Type:\n              schema:\n                type: \"string\"\n          content: {}\n      x-amazon-apigateway-request-validator: \"requestvalidator\"\n      x-amazon-apigateway-integration:\n        credentials: \"{{integrationRoleArn}}\"\n        httpMethod: \"POST\"\n        uri: \"arn:${AWS::Partition}:apigateway:${AWS::Region}:sqs:path/${AWS::AccountId}/{{queueName}}\"\n        responses:\n          \"4\\\\d{2}\":\n            statusCode: \"400\"\n            responseTemplates:\n              application/json: \"#if($input.path('$.Error.Code') == \\\"InvalidMessageContents\\\"\\\n                )\\n{\\n  \\\"message\\\": \\\"The message contains characters outside the\\\n                \\ allowed set.\\\"\\n}\\n#elseif($input.path('$.Error.Code') == \\\"AWS.SimpleQueueService.UnsupportedOperation\\\"\\\n                )\\n{\\n  \\\"message\\\": \\\"Unsupported operation.\\\"\\n}\\n#else\\n{\\n  \\\"\\\n                message\\\": \\\"$input.path('$.Error.Code')\\\"\\n}\\n#end\"\n          default:\n            statusCode: \"200\"\n            responseTemplates:\n              application/json: \"{\\n  \\\"result\\\": \\\"Success\\\"\\n}\\n\"\n            responseParameters:\n              \"method.response.header.Access-Control-Allow-Origin\": '''*'''              \n          \"5\\\\d{2}\":\n            statusCode: \"500\"\n            responseTemplates:\n              application/json: \"{\\\"result\\\": \\\"internal error\\\"}\"\n        requestParameters:\n          integration.request.header.Content-Type: \"'application/x-www-form-urlencoded'\"\n        requestTemplates:\n          application/x-www-form-urlencoded: \"Action=SendMessage\u0026MessageBody=$util.base64Encode($input.body)\\\n            \u0026MessageAttribute.1.Name=encoding\u0026MessageAttribute.1.Value.StringValue=base64\u0026MessageAttribute.1.Value.DataType=String\\\n            \u0026MessageAttribute.2.Name=sourceIp\u0026MessageAttribute.2.Value.StringValue=$context.identity.sourceIp\u0026MessageAttribute.2.Value.DataType=String\\\n            \u0026MessageAttribute.3.Name=apiTimestamp\u0026MessageAttribute.3.Value.StringValue=$context.requestTimeEpoch\u0026MessageAttribute.3.Value.DataType=Number\"\n        passthroughBehavior: \"when_no_match\"\n        type: \"aws\"\n        timeoutInMillis: 2000\ncomponents:\n  schemas:\n    events:\n      type: object\n      required:\n        - app_key\n        - device_id\n      properties:\n        app_key:\n          type: string\n          example: d7d3f96f594f26acd566577a1501e3c82c7ba8fc\n        device_id:\n          type: string\n          example: b452f74e-4770-48f9-b850-eac57240d547\nx-amazon-apigateway-request-validators:\n  requestvalidator:\n    validateRequestParameters: true\n    validateRequestBody: false",
			"canonicalURL": "/github.com/zxkane/cdk-collections@91e1b8ea98e1ccd5a37e02ea0274f1f214a7d592/-/blob/create-apis-from-openapi-spec/src/rest-sqs.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/zxkane/cdk-collections/blob/91e1b8ea98e1ccd5a37e02ea0274f1f214a7d592/create-apis-from-openapi-spec/src/rest-sqs.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse servers: at create-apis-from-openapi-spec/src/rest-sqs.yaml:9:7: server URL must not be empty"
}