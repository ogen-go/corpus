{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/restful-ma/thresholds"
		},
		"file": {
			"name": "adyen.com-CheckoutService-32-openapi.yaml",
			"size": 0,
			"path": "benchmark-repository/openapi/adyen.com-CheckoutService-32-openapi.yaml",
			"byteSize": 38336,
			"content": "openapi: 3.0.0\nservers:\n  - url: https://checkout-test.adyen.com/services/PaymentSetupAndVerification/v32\ninfo:\n  contact:\n    x-twitter: Adyen\n  description: A web service to initiate and authorise payments with Adyen Checkout. You\n    can use the same integration for payments made with cards (including\n    One-Click and 3D Secure), mobile wallets, and local payment methods (e.g.\n    iDEAL and Sofort). For more information, refer to [Checkout\n    documentation](https://docs.adyen.com/developers/checkout).\n  title: Adyen Checkout Service\n  version: \"32\"\n  x-apisguru-categories:\n    - payment\n  x-logo:\n    url: https://twitter.com/Adyen/profile_image?size=original\n  x-origin:\n    - converter:\n        url: https://github.com/lucybot/api-spec-converter\n        version: 2.6.2\n      format: openapi\n      url: https://raw.githubusercontent.com/adyen/adyen-openapi/master/specs/3.0/CheckoutService-V32.json\n      version: \"3.0\"\n  x-preferred: true\n  x-providerName: adyen.com\n  x-serviceName: CheckoutService\npaths:\n  /setup:\n    post:\n      description: \u003e-\n        Provides the data object that can be used to start the Checkout SDK. For\n        the initial payment setup, pass the payment amount, currency, and other\n        information that can be used by Adyen to optimize the payment flow and\n        perform better risk assessment of the transaction.\n\n\n        For more information, refer to [Set up a payment](https://docs.adyen.com/developers/checkout/implement-your-server-checkout/set-up-a-payment-checkout).\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PaymentSetupRequest\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PaymentSetupResponse\"\n          description: OK - the request has succeeded.\n        \"400\":\n          description: Bad Request - a problem reading or understanding the request.\n        \"401\":\n          description: Unauthorized - authentication required.\n        \"403\":\n          description: Forbidden - insufficient permissions to process the request.\n        \"422\":\n          description: Unprocessable Entity - a request validation error.\n        \"500\":\n          description: Internal Server Error - the server could not process the request.\n      summary: Creates a payment setup\n      x-groupName: General\n      x-sortIndex: 1\n  /verify:\n    post:\n      description: \u003e-\n        Verifies the payment result using the payload returned from the SDK.\n\n\n        For more information, refer to [Verify a payment](https://docs.adyen.com/developers/checkout/implement-your-server-checkout/verify-a-payment-checkout).\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PaymentVerificationRequest\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PaymentVerificationResponse\"\n          description: OK - the request has succeeded.\n        \"400\":\n          description: Bad Request - a problem reading or understanding the request.\n        \"401\":\n          description: Unauthorized - authentication required.\n        \"403\":\n          description: Forbidden - insufficient permissions to process the request.\n        \"422\":\n          description: Unprocessable Entity - a request validation error.\n        \"500\":\n          description: Internal Server Error - the server could not process the request.\n      summary: Verifies payment result\n      x-groupName: General\n      x-sortIndex: 2\ncomponents:\n  schemas:\n    Address:\n      properties:\n        city:\n          description: The city name.\n          type: string\n        country:\n          description: A valid value is an ISO two-character country code (e.g. 'NL').\n          type: string\n        houseNumberOrName:\n          description: The house number or name.\n          type: string\n        postalCode:\n          description: The postal code with a maximum of 5 characters for USA and maximum\n            of 10 characters for any other country.\n          type: string\n        stateOrProvince:\n          description: For USA or Canada, a valid 2-character abbreviation for the state or\n            province respectively. For other countries any abbreviation with\n            maximum 3 characters for the state or province.\n          type: string\n        street:\n          description: \u003e\n            The street name.\n\n            \u003e Don't append the house number to this field. Instead, pass the house number separately as `houseNumberOrName`.\n          type: string\n      required:\n        - street\n        - houseNumberOrName\n        - city\n        - country\n    Amount:\n      properties:\n        currency:\n          description: The three-character [ISO currency\n            code](https://docs.adyen.com/developers/currency-codes).\n          maxLength: 3\n          minLength: 3\n          type: string\n        value:\n          description: \u003e-\n            The payable amount that can be charged for the transaction.\n\n\n            The transaction amount needs to be represented in minor units according to the [following table](https://docs.adyen.com/developers/currency-codes).\n          format: int64\n          type: integer\n      required:\n        - value\n        - currency\n    Avs:\n      properties:\n        addressEditable:\n          type: boolean\n        enabled:\n          type: string\n    BankAccount:\n      properties:\n        bankAccountNumber:\n          description: The bank account number (without separators).\n          type: string\n        bankCity:\n          description: The bank city.\n          type: string\n        bankLocationId:\n          description: The location id of the bank. The field value is `nil` in most cases.\n          type: string\n        bankName:\n          description: The name of the bank.\n          type: string\n        bic:\n          description: The [Business Identifier\n            Code](https://en.wikipedia.org/wiki/ISO_9362) (BIC) is the SWIFT\n            address assigned to a bank. The field value is `nil` in most cases.\n          type: string\n        countryCode:\n          description: |-\n            Country code where the bank is located.\n\n            A valid value is an ISO two-character country code (e.g. 'NL').\n          type: string\n        iban:\n          description: The [International Bank Account\n            Number](https://en.wikipedia.org/wiki/International_Bank_Account_Number)\n            (IBAN).\n          type: string\n        ownerName:\n          description: \u003e-\n            The name of the bank account holder.\n\n            If you submit a name with non-Latin characters, we automatically replace some of them with corresponding Latin characters to meet the FATF recommendations. For example:\n\n            * χ12 is converted to ch12.\n\n            * üA is converted to euA.\n\n            * Peter Møller is converted to Peter Mller, because banks don't accept 'ø'.\n\n            After replacement, the ownerName must have at least three alphanumeric characters (A-Z, a-z, 0-9), and at least one of them must be a valid Latin character (A-Z, a-z). For example:\n\n            * John17 - allowed.\n\n            * J17 - allowed.\n\n            * 171 - not allowed.\n\n            * John-7 - allowed.\n\n            \u003e If provided details don't match the required format, the response returns the error message: 203 'Invalid bank account holder name'.\n          type: string\n        taxId:\n          description: The bank account holder's tax ID.\n          type: string\n    BrowserInfo:\n      properties:\n        acceptHeader:\n          description: The accept header value of the shopper's browser.\n          maxLength: 50\n          minLength: 10\n          type: string\n        userAgent:\n          description: The user agent value of the shopper's browser.\n          maxLength: 50\n          minLength: 10\n          type: string\n      required:\n        - userAgent\n        - acceptHeader\n    Card:\n      properties:\n        cvc:\n          description: \u003e-\n            The [card verification\n            code](https://docs.adyen.com/developers/payment-glossary#cardsecuritycodecvccvvcid)\n            (1-20 characters). Depending on the card brand, it is known also as:\n\n            * CVV2/CVC2 – length: 3 digits\n\n            * CID – length: 4 digits\n\n            \u003e If you are using [Client-Side Encryption](https://docs.adyen.com/developers/ecommerce-integration), the CVC code is present in the encrypted data. You must never post the card details to the server.\n\n            \u003e This field must be always present in a [one-click payment request](https://docs.adyen.com/developers/features/recurring-payments).\n\n            \u003e When this value is returned in a response, it is always empty because it is not stored.\n          maxLength: 20\n          minLength: 1\n          type: string\n        expiryMonth:\n          description: |-\n            The card expiry month.\n            Format: 2 digits, zero-padded for single digits. For example:\n            * 03 = March\n            * 11 = November\n          maxLength: 2\n          minLength: 1\n          type: string\n        expiryYear:\n          description: |-\n            The card expiry year.\n            Format: 4 digits. For example: 2018\n          maxLength: 4\n          minLength: 4\n          type: string\n        holderName:\n          description: The name of the cardholder, as printed on the card.\n          maxLength: 50\n          minLength: 1\n          type: string\n        issueNumber:\n          description: The issue number of the card (for some UK debit cards only).\n          maxLength: 2\n          minLength: 1\n          type: string\n        number:\n          description: \u003e-\n            The card number (4-19 characters). Do not use any separators.\n\n            When this value is returned in a response, only the last 4 digits of the card number are returned.\n          maxLength: 19\n          minLength: 4\n          type: string\n        startMonth:\n          description: The month component of the start date (for some UK debit cards only).\n          maxLength: 2\n          minLength: 1\n          type: string\n        startYear:\n          description: The year component of the start date (for some UK debit cards only).\n          maxLength: 4\n          minLength: 4\n          type: string\n      required:\n        - number\n        - expiryMonth\n        - expiryYear\n        - holderName\n    Collection: {}\n    Configuration:\n      properties:\n        avs:\n          $ref: \"#/components/schemas/Avs\"\n          description: Describes the configuration for AVS ([Address Verification\n            System](https://en.wikipedia.org/wiki/Address_Verification_System)).\n        cardHolderNameRequired:\n          type: boolean\n        installments:\n          $ref: \"#/components/schemas/Installments\"\n          description: Describes the configuration for [installment\n            payments](https://docs.adyen.com/developers/payment-methods/installment-payments).\n    ForexQuote:\n      properties:\n        account:\n          description: The account name.\n          type: string\n        accountType:\n          description: The account type.\n          type: string\n        baseAmount:\n          $ref: \"#/components/schemas/Amount\"\n          description: The base amount.\n        basePoints:\n          description: The base points.\n          format: int32\n          type: integer\n        buy:\n          $ref: \"#/components/schemas/Amount\"\n          description: The buy rate.\n        interbank:\n          $ref: \"#/components/schemas/Amount\"\n          description: The interbank amount.\n        reference:\n          description: The reference assigned to the forex quote request.\n          type: string\n        sell:\n          $ref: \"#/components/schemas/Amount\"\n          description: The sell rate.\n        signature:\n          description: The signature to validate the integrity.\n          type: string\n        source:\n          description: The source of the forex quote.\n          type: string\n        type:\n          description: The type of forex.\n          type: string\n        validTill:\n          description: The date until which the forex quote is valid.\n          format: date-time\n          type: string\n      required:\n        - validTill\n        - basePoints\n    FraudResult:\n      properties:\n        accountScore:\n          description: The total fraud score generated by the risk checks.\n          format: int32\n          type: integer\n        results:\n          $ref: \"#/components/schemas/Collection\"\n          description: The result of the individual risk checks.\n      required:\n        - accountScore\n    InputDetail:\n      properties:\n        configuration:\n          additionalProperties:\n            type: string\n          description: Configuration parameters for the required input.\n          type: object\n        inputDetails:\n          description: In case of address data, inputDetails can be set recursively.\n          items:\n            $ref: \"#/components/schemas/SubInputDetail\"\n          type: array\n        itemSearchUrl:\n          description: In case of a select, the URL from which to query the items.\n          type: string\n        items:\n          description: In case of a select, the items to choose from.\n          items:\n            $ref: \"#/components/schemas/Item\"\n          type: array\n        key:\n          description: The value to provide in the result.\n          type: string\n        optional:\n          description: True if this input is optional to provide.\n          type: boolean\n        type:\n          description: The type of the required input.\n          type: string\n        value:\n          description: The value can be pre-filled, if available.\n          type: string\n    Installments:\n      properties:\n        value:\n          description: \u003e-\n            Defines the number of installments. Its value needs to be greater\n            than zero.\n\n\n            Usually, the maximum allowed number of installments is capped. For example, it may not be possible to split a payment in more than 24 installments. The acquirer sets this upper limit, so its value may vary.\n          format: int32\n          type: integer\n      required:\n        - value\n    Item:\n      properties:\n        id:\n          description: value to provide in the result\n          type: string\n        imageUrl:\n          description: optional image URL\n          type: string\n        name:\n          description: display name\n          type: string\n    Name:\n      properties:\n        firstName:\n          description: A person's first name.\n          type: string\n        gender:\n          description: A person's gender (can be unknown).\n          enum:\n            - MALE\n            - FEMALE\n            - UNKNOWN\n          maxLength: 1\n          minLength: 1\n          type: string\n        infix:\n          description: \"A person name's infix, if applicable. Maximum length: 20\n            characters.\"\n          type: string\n        lastName:\n          description: A person's last name.\n          type: string\n      required:\n        - firstName\n        - lastName\n        - gender\n    PaymentDetails:\n      properties:\n        additionalAmount:\n          $ref: \"#/components/schemas/Amount\"\n          description: The portion of the `amount`, which is additional/surcharged.\n            Required to be in the same currency as the amount.\n        amount:\n          $ref: \"#/components/schemas/Amount\"\n          description: The amount to charge.\n        countryCode:\n          description: The shopper's country code.\n          type: string\n        reference:\n          description: The reference assigned to the payment.\n          type: string\n        sessionValidity:\n          description: The maximum validity of the session.\n          type: string\n        shopperLocale:\n          description: The shopper's locale.\n          type: string\n        shopperReference:\n          description: The reference used to uniquely identify the shopper (e.g. user ID or\n            account ID).\n          type: string\n    PaymentMethod:\n      properties:\n        configuration:\n          additionalProperties:\n            type: string\n          description: The configuration.\n          type: object\n        group:\n          $ref: \"#/components/schemas/PaymentMethodGroup\"\n          description: The group where this payment method belongs to.\n        inputDetails:\n          description: All input details to be provided to complete the payment with this\n            payment method.\n          items:\n            $ref: \"#/components/schemas/InputDetail\"\n          type: array\n        name:\n          description: The displayable name of this payment method.\n          type: string\n        paymentMethodData:\n          description: echo data required to send in next calls.\n          type: string\n        type:\n          description: The unique payment method code.\n          type: string\n    PaymentMethodGroup:\n      properties:\n        name:\n          description: The name of the group.\n          type: string\n        paymentMethodData:\n          description: Echo data to be used if the payment method is displayed as part of\n            this group.\n          type: string\n        type:\n          description: The unique code of the group.\n          type: string\n    PaymentSetupRequest:\n      properties:\n        additionalAmount:\n          $ref: \"#/components/schemas/Amount\"\n          description: \u003e-\n            If you want a [BIN or card\n            verification](https://docs.adyen.com/developers/ecommerce-integration/cards/bin-data-and-card-verification)\n            request to use a non-zero value, assign this value to\n            `additionalAmount` (while the amount must be still set to 0 to\n            trigger BIN or card verification).\n\n            Required to be in the same currency as the `amount`.\n        additionalData:\n          additionalProperties:\n            type: string\n          description: \u003e-\n            This field contains additional data, which may be required for a\n            particular payment request.\n\n\n            The `additionalData` object consists of entries, each of which includes the key and value. For more information on possible key-value pairs, refer to the [additionalData section](https://docs.adyen.com/developers/api-reference/payments-api#paymentrequestadditionaldata).\n          type: object\n        amount:\n          $ref: \"#/components/schemas/Amount\"\n          description: The amount information for the transaction. For [BIN or card\n            verification](https://docs.adyen.com/developers/ecommerce-integration/cards/bin-data-and-card-verification)\n            requests, set amount to 0 (zero).\n        bankAccount:\n          $ref: \"#/components/schemas/BankAccount\"\n          description: \u003e-\n            The details of the bank account, from which the payment should be\n            made.\n\n            \u003e Either `bankAccount` or `card` field must be provided in a payment request.\n        billingAddress:\n          $ref: \"#/components/schemas/Address\"\n          description: The address where to send the invoice.\n        browserInfo:\n          $ref: \"#/components/schemas/BrowserInfo\"\n          description: The shopper's browser information.\n        captureDelayHours:\n          description: The delay between the authorisation and scheduled auto-capture,\n            specified in hours.\n          format: int32\n          type: integer\n        card:\n          $ref: \"#/components/schemas/Card\"\n          description: \u003e-\n            A container for card data.\n\n            \u003e Either `bankAccount` or `card` field must be provided in a payment request.\n        channel:\n          description: The platform where a payment transaction takes place. This field is\n            required for filtering out payment methods that are only available\n            on specific platforms.\n          enum:\n            - iOS\n            - Android\n            - Web\n          type: string\n        configuration:\n          $ref: \"#/components/schemas/Configuration\"\n          description: Specify configurations to enable additional features.\n        countryCode:\n          description: \u003e-\n            The shopper country.\n\n\n            Format: [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\n\n            Example: NL or DE\n          type: string\n        dateOfBirth:\n          description: |-\n            The shopper's date of birth.\n\n            Format [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD\n          format: date-time\n          type: string\n        dccQuote:\n          $ref: \"#/components/schemas/ForexQuote\"\n          description: The forex quote as returned in the response of the forex service.\n        deliveryAddress:\n          $ref: \"#/components/schemas/Address\"\n          description: The address where the purchased goods should be delivered.\n        deliveryDate:\n          description: \u003e-\n            The date and time the purchased goods should be delivered.\n\n\n            Format [ISO 8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DDThh:mm:ss.sssTZD\n\n\n            Example: 2017-07-17T13:42:40.428+01:00\n          format: date-time\n          type: string\n        deviceFingerprint:\n          description: A string containing the shopper's device fingerprint. For more\n            information, refer to [Device\n            fingerprinting](https://docs.adyen.com/developers/risk-management/device-fingerprinting).\n          type: string\n        enableOneClick:\n          description: When true and `shopperReference` is provided, the shopper will be\n            asked if the payment details should be stored for future one-click\n            payments.\n          type: boolean\n        enableRecurring:\n          description: When true and `shopperReference` is provided, 'Recurring' will be\n            added to the recurring contract.\n          type: boolean\n        entityType:\n          description: The type of the entity the payment is processed for.\n          enum:\n            - NaturalPerson\n            - CompanyName\n          type: string\n        fraudOffset:\n          description: An integer value that is added to the normal fraud score. The value\n            can be either positive or negative.\n          format: int32\n          type: integer\n        html:\n          description: \u003e-\n            Required for the Web integration.\n\n\n            Set this parameter to true to use the default Checkout UI from the SDK.\n          type: boolean\n        installments:\n          $ref: \"#/components/schemas/Installments\"\n          description: Contains installment settings. For more information, refer to\n            [Installments](https://docs.adyen.com/developers/payment-methods/installment-payments).\n        mcc:\n          description: The [merchant category\n            code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is\n            a four-digit number, which relates to a particular market segment.\n            This code reflects the predominant activity that is conducted by the\n            merchant.\n          type: string\n        merchantAccount:\n          description: The merchant account identifier, with which you want to process the\n            transaction.\n          type: string\n        merchantOrderReference:\n          description: \u003e-\n            This reference allows linking multiple transactions to each other.\n\n            \u003e When providing the `merchantOrderReference` value, we also recommend you submit `retry.orderAttemptNumber`, `retry.chainAttemptNumber`, and `retry.skipRetry` values.\n          type: string\n        metadata:\n          additionalProperties:\n            type: string\n          description: \u003e-\n            Metadata consists of entries, each of which includes a key and a\n            value.\n\n            Limitations: Error \"177\", \"Metadata size exceeds limit\"\n          type: object\n        mpiData:\n          $ref: \"#/components/schemas/ThreeDSecureData\"\n          description: Authentication data produced by an MPI (Mastercard SecureCode or\n            Verified By Visa).\n        nationality:\n          description: The two-character country code of the shopper's nationality.\n          maxLength: 2\n          type: string\n        orderReference:\n          description: The order reference to link multiple partial payments.\n          type: string\n        origin:\n          description: \u003e-\n            Required for the Web integration.\n\n\n            Set this parameter to the page URL, on which you are loading the SDK.\n          type: string\n        recurring:\n          $ref: \"#/components/schemas/Recurring\"\n          description: The recurring settings for the payment. Use this property when you\n            want to enable [recurring\n            payments](https://docs.adyen.com/developers/features/recurring-payments).\n        recurringProcessingModel:\n          description: \u003e-\n            Defines a recurring payment type.\n\n            Allowed values:\n\n            * `Subscription` – A transaction for a fixed or variable amount, which follows a fixed schedule.\n\n            * `CardOnFile` – Card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction.\n          enum:\n            - CardOnFile\n            - Subscription\n          type: string\n        reference:\n          description: \u003e-\n            The reference to uniquely identify a payment. This reference is used\n            in all communication with you about the payment status. We recommend\n            using a unique value per payment; however, it is not a requirement.\n\n            If you need to provide multiple references for a transaction, separate them with hyphens (\"-\").\n\n            Maximum length: 80 characters.\n          type: string\n        returnUrl:\n          description: The URL to return to.\n          type: string\n        selectedBrand:\n          description: \u003e-\n            Some payment methods require defining a value for this field to\n            specify how to process the transaction.\n\n\n            For the Bancontact payment method, it can be set to:\n\n            * `maestro` (default), to be processed like a Maestro card, or\n\n            * `bcmc`, to be processed like a Bancontact card.\n          type: string\n        selectedRecurringDetailReference:\n          description: The `recurringDetailReference` you want to use for this payment. The\n            value `LATEST` can be used to select the most recently stored\n            recurring detail.\n          type: string\n        sessionId:\n          description: A session ID used to identify a payment session.\n          type: string\n        sessionValidity:\n          description: The maximum validity of the session.\n          type: string\n        shopperEmail:\n          description: The shopper's email address. We recommend that you provide this\n            data, as it is used in velocity fraud checks.\n          type: string\n        shopperIP:\n          description: \u003e-\n            The shopper's IP address. We recommend that you provide this data,\n            as it is used in a number of risk checks (for instance, number of\n            payment attempts or location-based checks).\n\n            \u003e This field is mandatory for some merchants depending on your business model. Contact Adyen Support for more information.\n          type: string\n        shopperInteraction:\n          description: \u003e-\n            Specifies the sales channel, through which the shopper gives their\n            card details, and whether the shopper is a returning customer.\n\n            For the web service API, Adyen assumes Ecommerce shopper interaction by default.\n\n\n            This field has the following possible values:\n\n            * `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request.\n\n            * `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment).\n\n            * `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone.\n\n            * `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.\n          enum:\n            - Ecommerce\n            - ContAuth\n            - Moto\n            - POS\n          type: string\n        shopperLocale:\n          description: The combination of a language code and a country code to specify the\n            language to be used in the payment.\n          type: string\n        shopperName:\n          $ref: \"#/components/schemas/Name\"\n          description: The shopper's full name and gender (if specified).\n        shopperReference:\n          description: \u003e-\n            The shopper's reference to uniquely identify this shopper (e.g. user\n            ID or account ID).\n\n            \u003e This field is required for recurring payments.\n          type: string\n        shopperStatement:\n          description: The text to appear on the shopper's bank statement.\n          type: string\n        socialSecurityNumber:\n          description: The shopper's social security number.\n          type: string\n        store:\n          description: The physical store, for which this payment is processed.\n          maxLength: 16\n          minLength: 1\n          type: string\n        telephoneNumber:\n          description: The shopper's telephone number.\n          type: string\n        token:\n          description: \u003e-\n            The token obtained when initializing the SDK.\n\n\n            \u003e This parameter is required for iOS and Android; not required for Web.\n          type: string\n        totalsGroup:\n          description: The reference value to aggregate sales totals in reporting. When not\n            specified, the store field is used (if available).\n          maxLength: 16\n          minLength: 1\n          type: string\n      required:\n        - merchantAccount\n        - reference\n        - amount\n        - channel\n    PaymentSetupResponse:\n      properties:\n        disableRecurringDetailUrl:\n          description: The URL to disable recurring details.\n          type: string\n        generationtime:\n          description: The generationtime of this request, required for encryption.\n          type: string\n        html:\n          description: The stream with html logic, if the html flag was set in the request.\n          type: string\n        initiationUrl:\n          description: The URL for the initiation call.\n          type: string\n        logoBaseUrl:\n          description: The base URL for payment method logos.\n          type: string\n        origin:\n          description: The user origin.\n          type: string\n        originKey:\n          description: The encrypted user origin.\n          type: string\n        payment:\n          $ref: \"#/components/schemas/PaymentDetails\"\n          description: The summary of the payment setup request.\n        paymentData:\n          description: The data blob required to be sent in every future session call.\n          type: string\n        paymentMethods:\n          description: The detailed list of payment methods required to generate payment\n            forms.\n          items:\n            $ref: \"#/components/schemas/PaymentMethod\"\n          type: array\n        publicKey:\n          description: The public key required to encrypt sensitive data.\n          type: string\n        publicKeyToken:\n          description: The public key token.\n          type: string\n        recurringDetails:\n          description: The detailed list of stored payment details required to generate\n            payment forms. Will be empty if oneClick is set to false in the\n            request.\n          items:\n            $ref: \"#/components/schemas/RecurringDetail\"\n          type: array\n    PaymentVerificationRequest:\n      properties:\n        payload:\n          description: Encrypted and signed payment result data. You should receive this\n            value from the Checkout SDK after the shopper completes the payment.\n          type: string\n      required:\n        - payload\n    PaymentVerificationResponse:\n      properties:\n        additionalData:\n          additionalProperties:\n            type: string\n          description: This field contains additional data, which may be required to return\n            in a particular payment response. To choose data fields to be\n            returned, go to **Customer Area** \u003e **Settings** \u003e **API and\n            Response**.\n          type: object\n        authResponse:\n          description: |-\n            The authorisation code representing the authentication result.\n\n            Possible values:\n            * Received\n            * Authorised\n            * Error\n            * Refused\n            * Cancelled\n            * Unknown\n          type: string\n        errorMessage:\n          description: The error message.\n          type: string\n        fraudResult:\n          $ref: \"#/components/schemas/FraudResult\"\n          description: The fraud result properties of the payment.\n        merchantReference:\n          description: A unique value that you provided in the initial /setup request as a\n            `reference` field.\n          type: string\n        pspReference:\n          description: Adyen's 16-digit unique reference associated with the\n            transaction/the request. This value is globally unique; quote it\n            when communicating with us about this request.\n          type: string\n        refusalReason:\n          description: \u003e-\n            If the payment's authorisation is refused or an error occurs during\n            authorisation, this field holds Adyen's mapped reason for the\n            refusal or a description of the error.\n\n\n            When a transaction fails, the authorisation response includes `resultCode` and `refusalReason` values.\n          type: string\n        resultCode:\n          description: The result of the payment.\n          enum:\n            - Authorised\n            - PartiallyAuthorised\n            - Refused\n            - Error\n            - Cancelled\n            - Received\n            - RedirectShopper\n          type: string\n      required:\n        - authResponse\n        - merchantReference\n    Recurring:\n      properties:\n        contract:\n          description: \u003e-\n            The type of recurring contract to be used.\n\n            Possible values:\n\n            * `ONECLICK` – The shopper opts to store their card details for future use. The shopper is present for the subsequent transaction, for cards the security code (CVC/CVV) is required.\n\n            * `RECURRING` – Payment details are stored for future use. For cards, the security code (CVC/CVV) is not required for subsequent payments. This is used for shopper not present transactions.\n\n            * `ONECLICK,RECURRING` – Payment details are stored for future use. This allows the use of the stored payment details regardless of whether the shopper is on your site or not.\n          enum:\n            - ONECLICK\n            - RECURRING\n            - PAYOUT\n          type: string\n        recurringDetailName:\n          description: A descriptive name for this detail.\n          type: string\n        tokenService:\n          description: The name of the token service.\n          enum:\n            - VISATOKENSERVICE\n          type: string\n    RecurringDetail:\n      properties:\n        bank:\n          $ref: \"#/components/schemas/BankAccount\"\n        card:\n          $ref: \"#/components/schemas/Card\"\n        configuration:\n          additionalProperties:\n            type: string\n          description: The configuration.\n          type: object\n        emailAddress:\n          type: string\n        group:\n          $ref: \"#/components/schemas/PaymentMethodGroup\"\n          description: The group where this payment method belongs to.\n        inputDetails:\n          description: All input details to be provided to complete the payment with this\n            payment method.\n          items:\n            $ref: \"#/components/schemas/InputDetail\"\n          type: array\n        name:\n          description: The displayable name of this payment method.\n          type: string\n        paymentMethodData:\n          description: echo data required to send in next calls.\n          type: string\n        type:\n          description: The unique payment method code.\n          type: string\n    SubInputDetail:\n      properties:\n        key:\n          description: The value to provide in the result.\n          type: string\n        optional:\n          description: True if this input is optional to provide.\n          type: boolean\n        type:\n          description: The type of the required input.\n          type: string\n        value:\n          description: The value can be pre-filled, if available.\n          type: string\n    ThreeDSecureData:\n      properties:\n        authenticationResponse:\n          description: The authentication response if the shopper was redirected.\n          enum:\n            - Y\n            - N\n            - U\n            - A\n          type: string\n        cavv:\n          description: The cardholder authentication value (base64 encoded, 20 bytes in a\n            decoded form).\n          format: byte\n          type: string\n        cavvAlgorithm:\n          description: The CAVV algorithm used.\n          type: string\n        directoryResponse:\n          description: The enrollment response from the 3D directory server.\n          enum:\n            - Y\n            - N\n            - U\n            - E\n          type: string\n        eci:\n          description: The electronic commerce indicator.\n          type: string\n        xid:\n          description: The transaction identifier (base64 encoded, 20 bytes in a decoded\n            form).\n          format: byte\n          type: string\nx-groups:\n  - General\n",
			"canonicalURL": "/github.com/restful-ma/thresholds@5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/-/blob/benchmark-repository/openapi/adyen.com-CheckoutService-32-openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/restful-ma/thresholds/blob/5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/benchmark-repository/openapi/adyen.com-CheckoutService-32-openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"PaymentSetupRequest\": parse schema: property \"mpiData\": parse schema: parse schema: property \"authenticationResponse\": at 1:27400: parse enum values: parse value \"true\": expected type \"string\", got \"bool\""
}