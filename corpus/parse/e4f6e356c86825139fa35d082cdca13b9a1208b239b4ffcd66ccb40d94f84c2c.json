{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/meterio/meter-pov"
		},
		"file": {
			"name": "meter.yaml",
			"size": 0,
			"path": "api/doc/meter.yaml",
			"byteSize": 44043,
			"content": "openapi: 3.0.1\ninfo:\n  title: Meterest\n  description: |\n    RESTful API to access Meter.io\n\n    [Project Home](https://github.com/meterio)\n  license:\n    name: LGPL 3.0\n    url: \"https://www.gnu.org/licenses/lgpl-3.0.en.html\"\n  version: 1.2.0\n\nservers:\n  - url: \"/\"\n    description: local meter node\n\ntags:\n  - name: Accounts\n    description: Access to account objects\n  - name: Transactions\n    description: Access to transactions\n  - name: Blocks\n    description: Access to blocks\n  - name: Logs\n    description: Access to event \u0026 transfer logs\n  - name: Node\n    description: Access to node status info\n  - name: Subscriptions\n    description: Subscribe interested subjects\n  - name: Debug\n    description: Debug utilities\n  - name: Staking\n    description: Access to staking data\n\npaths:\n  /accounts/{address}:\n    parameters:\n      - $ref: \"#/components/parameters/AddressInPath\"\n      - $ref: \"#/components/parameters/RevisionInQuery\"\n    get:\n      tags:\n        - Accounts\n      summary: Retrieve account detail\n      description: |\n        includes `balance`, `energy` and `hasCode`, by account `address`. An account with `hasCode` be *true* is a contract.\n\n        Historical account detail can be queried by specifying `revision` query string.\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Account\"\n\n    post:\n      tags:\n        - Accounts\n      summary: Execute account code\n      description: |\n        to simulate contract method call, without sending transaction to block chain.\n\n        It's useful to estimate gas usage and execution result of a clause.\n      requestBody:\n        description: arguments and environment\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CallData\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CallResult\"\n  /accounts/*:\n    post:\n      parameters:\n        - $ref: \"#/components/parameters/RevisionInQuery\"\n      tags:\n        - Accounts\n      summary: Execute a batch of codes\n      description: |\n        to simulate execution of a transaction.\n      requestBody:\n        description: arguments and environment\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/BatchCallData\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BatchCallResult\"\n\n  /accounts:\n    post:\n      parameters:\n        - $ref: \"#/components/parameters/RevisionInQuery\"\n      tags:\n        - Accounts\n      summary: Execute bytecodes\n      description: |\n        to simulate contract deployment without sending transaction to block chain.\n\n        It's useful to estimate gas usage and contract deployment result of a clause.\n\n        ### TIPS:\n          - `data` in request body is the bytecodes of a contract\n          - `data` in response body is the runtime bytecodes assigned to account which the contract to be deployed\n      requestBody:\n        description: arguments and environment\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CallData\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CallResult\"\n\n  /accounts/{address}/code:\n    parameters:\n      - $ref: \"#/components/parameters/AddressInPath\"\n      - $ref: \"#/components/parameters/RevisionInQuery\"\n    get:\n      tags:\n        - Accounts\n      summary: Retrieve account code\n      description: |\n        if any. Here the code is runtime bytecodes.\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Code\"\n\n  /accounts/{address}/storage/{key}:\n    parameters:\n      - $ref: \"#/components/parameters/AddressInPath\"\n      - $ref: \"#/components/parameters/StorageKeyInPath\"\n      - $ref: \"#/components/parameters/RevisionInQuery\"\n    get:\n      tags:\n        - Accounts\n      summary: Retrieve account storage value\n      description: |\n        for given key.\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Storage\"\n\n  /transactions/{id}:\n    parameters:\n      - $ref: \"#/components/parameters/TxIDInPath\"\n      - $ref: \"#/components/parameters/RawInQuery\"\n      - $ref: \"#/components/parameters/HeadInQuery\"\n    get:\n      tags:\n        - Transactions\n      summary: Retrieve transaction\n      description: |\n        by ID.\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TxOrRawTxWithMeta\"\n\n  /transactions/{id}/receipt:\n    parameters:\n      - $ref: \"#/components/parameters/TxIDInPath\"\n      - $ref: \"#/components/parameters/HeadInQuery\"\n    get:\n      tags:\n        - Transactions\n      summary: Retrieve transaction receipt\n      description: |\n        by ID.\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Receipt\"\n\n  /transactions:\n    post:\n      tags:\n        - Transactions\n      summary: Commit transaction\n      description: |\n        in raw or structured format. If no signature in structured format,\n        `signingHash` is returned in response body.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/RawOrSignedOrUnsignedTx\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/IDOrSigningHash\"\n\n  /blocks/{revision}:\n    parameters:\n      - $ref: \"#/components/parameters/RevisionInPath\"\n    get:\n      tags:\n        - Blocks\n      summary: Retrieve block\n      description: |\n        by ID or number, or 'best' for latest block.\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/Block\"\n                  - type: object\n                    properties:\n                      isTrunk:\n                        type: boolean\n                        description: whether the block is on th trunk\n\n  /logs/event:\n    post:\n      tags:\n        - Logs\n      summary: Filter event logs\n      description: |\n        Event logs are produced by `OP_LOG` in EVM.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/EventFilter\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  allOf:\n                    - $ref: \"#/components/schemas/Event\"\n                    - type: object\n                      properties:\n                        meta:\n                          $ref: \"#/components/schemas/LogMeta\"\n\n  /logs/transfer:\n    post:\n      tags:\n        - Logs\n      summary: Filter transfer logs\n      description: |\n        Transfer logs are recorded on MTRG transferring.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/TransferFilter\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  allOf:\n                    - $ref: \"#/components/schemas/Transfer\"\n                    - type: object\n                      properties:\n                        meta:\n                          $ref: \"#/components/schemas/LogMeta\"\n\n  /logs/events:\n    post:\n      deprecated: true\n      tags:\n        - Logs\n      summary: Filter event logs\n      description: |\n        Event logs are produced by `OP_LOG` in EVM.\n      parameters:\n        - $ref: \"#/components/parameters/FilterOrderInQuery\"\n        - $ref: \"#/components/parameters/FilterAddressInQuery\"\n      requestBody:\n        description: event filter criteria\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/EventFilterLegacy\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  allOf:\n                    - $ref: \"#/components/schemas/Event\"\n                    - type: object\n                      properties:\n                        meta:\n                          $ref: \"#/components/schemas/LogMeta\"\n\n  /logs/transfers:\n    post:\n      deprecated: true\n      tags:\n        - Logs\n      summary: Filter transfer logs\n      description: |\n        Transfer logs are recorded on MTR transferring.\n      parameters:\n        - $ref: \"#/components/parameters/FilterOrderInQuery\"\n      requestBody:\n        description: transfer log filter criteria\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/TransferFilterLegacy\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  allOf:\n                    - $ref: \"#/components/schemas/Transfer\"\n                    - type: object\n                      properties:\n                        meta:\n                          $ref: \"#/components/schemas/LogMeta\"\n\n  /events:\n    post:\n      deprecated: true\n      tags:\n        - Logs\n      summary: Filter event logs\n      parameters:\n        - $ref: \"#/components/parameters/FilterOrderInQuery\"\n        - $ref: \"#/components/parameters/FilterAddressInQuery\"\n      requestBody:\n        description: event filter criteria\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/EventFilterLegacy\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  allOf:\n                    - $ref: \"#/components/schemas/Event\"\n                    - type: object\n                      properties:\n                        meta:\n                          $ref: \"#/components/schemas/LogMeta\"\n\n  /transfers:\n    post:\n      deprecated: true\n      tags:\n        - Logs\n      summary: Filter transfer logs\n      parameters:\n        - $ref: \"#/components/parameters/FilterOrderInQuery\"\n      requestBody:\n        description: transfer log filter criteria\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/TransferFilterLegacy\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  allOf:\n                    - $ref: \"#/components/schemas/Transfer\"\n                    - type: object\n                      properties:\n                        meta:\n                          $ref: \"#/components/schemas/LogMeta\"\n\n  /node/network/peers:\n    get:\n      tags:\n        - Node\n      summary: Retrieve connected peers\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/PeerStats\"\n\n  /node/consensus/committee:\n    get:\n      tags:\n        - Node\n      summary: Retrieve current committee members\n      reponses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref:\n\n  /staking/buckets:\n    get:\n      tags:\n        - Staking\n      summary: Retrieve staking buckets\n      reponses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref:\n\n  /staking/candidates:\n    get:\n      tags:\n        - Staking\n      summary: Retrieve staking candidates\n      reponses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref:\n\n  /staking/stakeholders:\n    get:\n      tags:\n        - Staking\n      summary: Retrieve staking stakeholder\n      reponses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref:\n\n  /staking/delegates:\n    get:\n      tags:\n        - Staking\n      summary: Retrieve staking delegates for consensus\n      reponses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref:\n\n  /subscriptions/block:\n    get:\n      tags:\n        - Subscriptions\n      summary: (Websocket) Subscribe new blocks\n      parameters:\n        - $ref: \"#/components/parameters/PositionInQuery\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/Block\"\n                  - $ref: \"#/components/schemas/Obsolete\"\n\n  /subscriptions/event:\n    get:\n      tags:\n        - Subscriptions\n      summary: (Websocket) Subscribe new events\n      description: |\n        which satisfy criteria in query.\n\n      parameters:\n        - $ref: \"#/components/parameters/PositionInQuery\"\n        - name: addr\n          in: query\n          schema:\n            type: string\n          description: address of event emitter\n        - name: t0\n          in: query\n          schema:\n            type: string\n          description: topic0 of event\n        - name: t1\n          in: query\n          schema:\n            type: string\n          description: topic1 of event\n        - name: t2\n          in: query\n          schema:\n            type: string\n          description: topic2 of event\n        - name: t3\n          in: query\n          schema:\n            type: string\n          description: topic3 of event\n        - name: t4\n          in: query\n          schema:\n            type: string\n          description: topic4 of event\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/Event\"\n                  - $ref: \"#/components/schemas/Obsolete\"\n                  - type: object\n                    properties:\n                      meta:\n                        $ref: \"#/components/schemas/LogMeta\"\n\n  /subscriptions/transfer:\n    get:\n      tags:\n        - Subscriptions\n      summary: (Websocket) Subscribe new transfers\n      description: |\n        which satisfy criteria in query.\n      parameters:\n        - $ref: \"#/components/parameters/PositionInQuery\"\n        - name: txOrigin\n          in: query\n          schema:\n            type: string\n          description: signer address of tx which contains the transfer\n        - name: sender\n          in: query\n          schema:\n            type: string\n          description: address of token sender\n        - name: recipient\n          in: query\n          schema:\n            type: string\n          description: address of token recipient\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/Transfer\"\n                  - $ref: \"#/components/schemas/Obsolete\"\n                  - type: object\n                    properties:\n                      meta:\n                        $ref: \"#/components/schemas/LogMeta\"\n\n  /subscriptions/beat:\n    get:\n      tags:\n        - Subscriptions\n      summary: (Websocket) Subscribe block chain's beats\n      description: |\n        which contain summary of new blocks, and bloom filters that composited with affected addresses.\n      parameters:\n        - $ref: \"#/components/parameters/PositionInQuery\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/Beat\"\n                  - $ref: \"#/components/schemas/Obsolete\"\n\n  /debug/tracers:\n    post:\n      tags:\n        - Debug\n      summary: Create a tracer\n      description: for a clause\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/TracerOption\"\n\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n\n  /debug/storage-range:\n    post:\n      tags:\n        - Debug\n      summary: Retrieve storage range\n      description: |\n        of the account with given address\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/StorageRangeOption\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StorageRange\"\n\ncomponents:\n  schemas:\n    Account:\n      properties:\n        balance:\n          type: string\n          description: balance in unit WEI, presented with hex string\n          example: \"0x47ff1f90327aa0f8e\"\n        energy:\n          type: string\n          description: energy in uint WEI, presented with hex string\n          example: \"0xcf624158d591398\"\n        hasCode:\n          type: boolean\n          description: whether the account has code\n          example: false\n\n    Code:\n      properties:\n        code:\n          type: string\n          example: \"0x6060604052600080fd00a165627a7a72305820c23d3ae2dc86ad130561a2829d87c7cb8435365492bd1548eb7e7fc0f3632be90029\"\n\n    Storage:\n      properties:\n        value:\n          type: string\n          example: \"0x0000000000000000000000000000000000000000000000000000000000000001\"\n\n    TxMeta:\n      description: transaction meta info\n      properties:\n        blockID:\n          type: string\n          description: block identifier (bytes32)\n          example: \"0x0004f6cc88bb4626a92907718e82f255b8fa511453a78e8797eb8cea3393b215\"\n        blockNumber:\n          type: integer\n          format: uint32\n          description: block number (height)\n          example: 325324\n        blockTimestamp:\n          type: integer\n          format: uint64\n          description: block unix timestamp\n          example: 1533267900\n\n    LogMeta:\n      description: event or transfer log meta info\n      properties:\n        blockID:\n          type: string\n          description: block identifier (bytes32)\n          example: \"0x0004f6cc88bb4626a92907718e82f255b8fa511453a78e8797eb8cea3393b215\"\n        blockNumber:\n          type: integer\n          format: uint32\n          description: block number (height)\n          example: 325324\n        blockTimestamp:\n          type: integer\n          format: uint64\n          description: block unix timestamp\n          example: 1533267900\n        txID:\n          type: string\n          description: transaction identifier\n          example: \"0x284bba50ef777889ff1a367ed0b38d5e5626714477c40de38d71cedd6f9fa477\"\n        txOrigin:\n          type: string\n          description: transaction origin (signer)\n          example: \"0xdb4027477b2a8fe4c83c6dafe7f86678bb1b8a8d\"\n\n    Block:\n      properties:\n        number:\n          type: integer\n          format: uint32\n          description: block number (height)\n          example: 325324\n        id:\n          type: string\n          format: bytes32\n          description: block identifier\n          example: \"0x0004f6cc88bb4626a92907718e82f255b8fa511453a78e8797eb8cea3393b215\"\n        size:\n          type: integer\n          format: uint32\n          description: RLP encoded block size in bytes\n          example: 373\n        parentID:\n          type: string\n          format: bytes32\n          description: parent block ID\n          example: \"0x0004f6cb730dbd90fed09d165bfdf33cc0eed47ec068938f6ee7b7c12a4ea98d\"\n        timestamp:\n          type: integer\n          format: uint64\n          description: block unix timestamp\n          example: 1533267900\n        gasLimit:\n          type: integer\n          format: uint64\n          description: block gas limit (max allowed accumulative gas usage of transactions)\n          example: 11253579\n        beneficiary:\n          type: string\n          format: bytes32\n          description: address of account to receive block reward\n          example: \"0xb4094c25f86d628fdd571afc4077f0d0196afb48\"\n        gasUsed:\n          type: integer\n          format: uint64\n          description: accumulative gas usage of transactions\n          example: 21000\n        totalScore:\n          type: integer\n          format: uint64\n          description: sum of all ancestral blocks' score\n          example: 1029988\n        txsRoot:\n          type: string\n          format: bytes32\n          description: root hash of transactions in the block\n          example: \"0x89dfd9fcd10c9e53d68592cf8b540b280b72d381b868523223992f3e09a806bb\"\n        stateRoot:\n          type: string\n          format: bytes32\n          description: root hash of accounts state\n          example: \"0x86bcc6d214bc9d8d0dedba1012a63c8317d19ce97f60c8a2ef5c59bbd40d4261\"\n        receiptsRoot:\n          type: string\n          format: bytes32\n          description: root hash of transaction receipts\n          example: \"0x15787e2533c470e8a688e6cd17a1ee12d8457778d5f82d2c109e2d6226d8e54e\"\n        signer:\n          type: string\n          format: bytes20\n          description: the one who signed this block\n          example: \"0xab7b27fc9e7d29f9f2e5bd361747a5515d0cc2d1\"\n        transactions:\n          type: array\n          description: transactions IDs\n          items:\n            type: string\n            format: bytes32\n            description: transaction ID\n            example: \"0x284bba50ef777889ff1a367ed0b38d5e5626714477c40de38d71cedd6f9fa477\"\n\n    Clause:\n      properties:\n        to:\n          type: string\n          description: \"recipient of clause, null for contract deployment (bytes32)\"\n          example: \"0x5034aa590125b64023a0262112b98d72e3c8e40e\"\n        value:\n          type: string\n          description: hex form of token to be transferred\n          example: \"0x47fdb3c3f456c0000\"\n        data:\n          type: string\n          description: input data (bytes)\n          example: \"0x\"\n\n    TxBody:\n      properties:\n        chainTag:\n          type: integer\n          format: uint8\n          description: last byte of genesis block ID\n          example: 39\n        blockRef:\n          type: string\n          description: 8 bytes prefix of some block ID\n          example: \"0x0004f6cb730dbd90\"\n        expiration:\n          type: integer\n          format: uint32\n          description: \"expiration relative to blockRef, in unit block\"\n          example: 720\n        clauses:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Clause\"\n        gasPriceCoef:\n          type: integer\n          format: uint8\n          description: coefficient used to calculate the final gas price\n          example: 0\n        gas:\n          type: integer\n          format: uint64\n          description: max amount of gas can be consumed to execute this transaction\n          example: 21000\n        dependsOn:\n          type: string\n          format: bytes32\n          description: ID of the transaction on which the current transaction depends on. can be null.\n          example: null\n        nonce:\n          type: string\n          example: \"0x29c257e36ea6e72a\"\n\n    SignedTx:\n      allOf:\n        - $ref: \"#/components/schemas/TxBody\"\n        - type: object\n          properties:\n            signature:\n              type: string\n              description: signature hex string\n              example: \"0x67cd851b90fb016457bb30ccbdaa3405f3db667daeb95258e1859c545be30c10f1780476f7c6ba24c75d26c8f1a9df59fe89b105c6f86733c1d5c1c74f14cd9201\"\n\n    TxWithMeta:\n      allOf:\n        - $ref: \"#/components/schemas/TxBody\"\n        - type: object\n          properties:\n            id:\n              type: string\n              description: identifier of the transaction\n              example: \"0x284bba50ef777889ff1a367ed0b38d5e5626714477c40de38d71cedd6f9fa477\"\n            origin:\n              type: string\n              description: the one who signed the transaction\n              example: \"0xdb4027477b2a8fe4c83c6dafe7f86678bb1b8a8d\"\n            size:\n              type: integer\n              format: uint32\n              description: byte size of the transaction that is RLP encoded\n              example: 130\n            meta:\n              $ref: \"#/components/schemas/TxMeta\"\n\n    RawTx:\n      properties:\n        raw:\n          type: string\n          description: hex form of encoded transaction\n          example: \"0xf86981ba800adad994000000000000000000000000000000000000746f82271080018252088001c0b8414792c9439594098323900e6470742cd877ec9f9906bca05510e421f3b013ed221324e77ca10d3466b32b1800c72e12719b213f1d4c370305399dd27af962626400\"\n\n    RawTxWithMeta:\n      properties:\n        raw:\n          type: string\n          description: hex form of encoded transaction\n          example: \"0xf86981ba800adad994000000000000000000000000000000000000746f82271080018252088001c0b8414792c9439594098323900e6470742cd877ec9f9906bca05510e421f3b013ed221324e77ca10d3466b32b1800c72e12719b213f1d4c370305399dd27af962626400\"\n        meta:\n          $ref: \"#/components/schemas/TxMeta\"\n\n    Event:\n      properties:\n        address:\n          type: string\n          description: the address of contract which produces the event (bytes20)\n          example: \"0x7567d83b7b8d80addcb281a71d54fc7b3364ffed\"\n        topics:\n          type: array\n          items:\n            type: string\n            example: \"0x4de71f2d588aa8a1ea00fe8312d92966da424d9939a511fc0be81e65fad52af8\"\n        data:\n          type: string\n          example: \"0x4de71f2d588aa8a1ea00fe8312d92966da424d9939a511fc0be81e65fad52af8\"\n\n    Transfer:\n      properties:\n        sender:\n          type: string\n          description: address that sends tokens\n          example: \"0xdb4027477b2a8fe4c83c6dafe7f86678bb1b8a8d\"\n        recipient:\n          type: string\n          description: address that receives tokens\n          example: \"0x5034aa590125b64023a0262112b98d72e3c8e40e\"\n        amount:\n          type: string\n          description: amount of tokens\n          example: \"0x47fdb3c3f456c0000\"\n\n    Receipt:\n      properties:\n        gasUsed:\n          type: integer\n          format: uint64\n          example: 21000\n        gasPayer:\n          type: string\n          description: address of account who paid used gas\n          example: \"0xdb4027477b2a8fe4c83c6dafe7f86678bb1b8a8d\"\n        paid:\n          type: string\n          description: hex form of amount of paid energy\n          example: \"0x1236efcbcbb340000\"\n        reward:\n          type: string\n          description: hex form of amount of reward\n          example: \"0x576e189f04f60000\"\n        reverted:\n          type: boolean\n          description: true means the transaction was reverted\n          example: false\n        outputs:\n          type: array\n          items:\n            properties:\n              contractAddress:\n                type: string\n                description: |\n                  deployed contract address, if the corresponding clause is a\n                  contract deployment clause\n                example: null\n              events:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Event\"\n              transfers:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Transfer\"\n        meta:\n          $ref: \"#/components/schemas/LogMeta\"\n\n    CallData:\n      properties:\n        value:\n          type: string\n          description: amount of token to be transferred\n        data:\n          type: string\n          description: input data for contract call\n        gas:\n          type: integer\n          format: uint64\n          description: max allowed gas for execution\n        gasPrice:\n          type: string\n          description: absolute gas price\n        caller:\n          type: string\n          description: caller address (msg.sender)\n      example:\n        value: \"0xde0b6b3a7640000\"\n        data: \"0x5665436861696e2054686f72\"\n\n    CallResult:\n      properties:\n        data:\n          type: string\n          description: the output data\n          example: \"0x103556a73c10e38ffe2fc4aa50fc9d46ad0148f07e26417e117bd1ece9d948b5\"\n        events:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Event\"\n        transfers:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Transfer\"\n        gasUsed:\n          type: integer\n          format: uint64\n          description: gas used during execution\n          example: 21000\n        reverted:\n          type: boolean\n          example: false\n        vmError:\n          type: string\n          example: \"\"\n\n    BatchCallData:\n      properties:\n        clauses:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Clause\"\n        gas:\n          type: integer\n          format: uint64\n          description: max allowed gas for execution\n        gasPrice:\n          type: string\n          description: absolute gas price\n        caller:\n          type: string\n          description: caller address (msg.sender)\n      example:\n        clauses:\n          - to: \"0x5034aa590125b64023a0262112b98d72e3c8e40e\"\n            value: \"0xde0b6b3a7640000\"\n            data: \"0x5665436861696e2054686f72\"\n\n    BatchCallResult:\n      type: array\n      items:\n        $ref: \"#/components/schemas/CallResult\"\n\n    FilterOptions:\n      properties:\n        offset:\n          type: integer\n          example: 0\n          description: |\n            offset in matched record set\n        limit:\n          type: integer\n          example: 10\n          description: |\n            limit of records to output\n      description: |\n        pass these parameters if you need filtered results paged. e.g. \n        ```\n        {\n          \"options\": {\n            \"offset\": 0,\n            \"limit\": 10   \n          }\n        }\n        ```\n        the above refers that page offset is 0, and the page size is 10.\n        pass options `null` if you don't need to demand paging.\n\n    FilterRange:\n      properties:\n        unit:\n          type: string\n          enum:\n            - block\n            - time\n\n          example: block\n          description: |\n            defines the unit of `from` and `to`.\n            `block` means block number, `time` means block timestamp, default to `block`.\n\n        from:\n          type: integer\n          format: uint64\n          example: 0\n\n        to:\n          type: integer\n          format: uint64\n          example: 100000\n\n      description: |\n        defines the range to filter in. e.g.\n        ```\n        {\n          \"range\": {\n            \"unit\": \"block\",\n            \"from\": 10,\n            \"to\": 1000\n          }\n        }\n        ```\n        refers to the range from block 10 to block 1000.\n        `null` stands for the full range.\n\n    TopicSetLegacy:\n      properties:\n        topic0:\n          type: string\n        topic1:\n          type: string\n        topic2:\n          type: string\n        topic3:\n          type: string\n        topic4:\n          type: string\n      description: |\n        a set of topics joined with `and` operator. `null` topics are ignored. e.g. \n        ```\n        {\n          \"topic0\": \"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\",\n          \"topic1\": null\n        }\n        ```\n        matches events whose `topic0` equals `0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef`.\n      example:\n        topic0: \"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\"\n\n    EventFilterLegacy:\n      properties:\n        range:\n          $ref: \"#/components/schemas/FilterRange\"\n        options:\n          $ref: \"#/components/schemas/FilterOptions\"\n        topicSets:\n          type: array\n          items:\n            $ref: \"#/components/schemas/TopicSetLegacy\"\n\n    AddressSetLegacy:\n      properties:\n        txOrigin:\n          type: string\n          example: \"0xe59d475abe695c7f67a8a2321f33a856b0b4c71d\"\n        sender:\n          type: string\n          example: \"0xe59d475abe695c7f67a8a2321f33a856b0b4c71d\"\n        recipient:\n          type: string\n          example: \"0x7567d83b7b8d80addcb281a71d54fc7b3364ffed\"\n\n    TransferFilterLegacy:\n      properties:\n        range:\n          $ref: \"#/components/schemas/FilterRange\"\n        options:\n          $ref: \"#/components/schemas/FilterOptions\"\n        addressSets:\n          type: array\n          items:\n            $ref: \"#/components/schemas/AddressSetLegacy\"\n\n    EventCriteria:\n      properties:\n        address:\n          type: string\n          description: address of event emitter\n        topic0:\n          type: string\n        topic1:\n          type: string\n        topic2:\n          type: string\n        topic3:\n          type: string\n        topic4:\n          type: string\n      description: |\n        criteria to filter out event. All fields are joined with `and` operator. `null` field are ignored. e.g. \n        ```\n        {\n          \"address\": \"0xe59d475abe695c7f67a8a2321f33a856b0b4c71d\",\n          \"topic0\": \"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\"\n        }\n        ```\n        matches events emitted by `0xe59d475abe695c7f67a8a2321f33a856b0b4c71d` and with `topic0` equals `0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef`.\n      example:\n        address: \"0xe59d475abe695c7f67a8a2321f33a856b0b4c71d\"\n        topic0: \"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\"\n\n    EventFilter:\n      properties:\n        range:\n          $ref: \"#/components/schemas/FilterRange\"\n        options:\n          $ref: \"#/components/schemas/FilterOptions\"\n        criteriaSet:\n          type: array\n          items:\n            $ref: \"#/components/schemas/EventCriteria\"\n        order:\n          description: |\n            order of filters, defaults to `asc`\n          type: string\n          enum:\n            - asc\n            - desc\n\n    TransferCriteria:\n      properties:\n        txOrigin:\n          type: string\n          example: \"0xe59d475abe695c7f67a8a2321f33a856b0b4c71d\"\n        sender:\n          type: string\n          example: \"0xe59d475abe695c7f67a8a2321f33a856b0b4c71d\"\n        recipient:\n          type: string\n          example: \"0x7567d83b7b8d80addcb281a71d54fc7b3364ffed\"\n\n    TransferFilter:\n      properties:\n        range:\n          $ref: \"#/components/schemas/FilterRange\"\n        options:\n          $ref: \"#/components/schemas/FilterOptions\"\n        criteriaSet:\n          type: array\n          items:\n            $ref: \"#/components/schemas/TransferCriteria\"\n        order:\n          description: |\n            order of filters, defaults to `asc`\n          type: string\n          enum:\n            - asc\n            - desc\n\n    PeerStats:\n      properties:\n        name:\n          type: string\n          example: \"meter/v1.0.0-6680b98-dev/linux/go1.10.3\"\n        bestBlockID:\n          type: string\n          example: \"0x000087b3a4d4cdf1cc52d56b9704f4c18f020e1b48dbbf4a23d1ee4f1fa5ff94\"\n        totalScore:\n          type: integer\n          example: 68497\n        peerID:\n          type: string\n          example: \"50e122a505ee55b84331068acfd857e37ad58f463a0fab9aaff2c1e4b2e2d22ae71dc14fdaf6eead74bd3f60594644aa35c588f9ca6be3341e2ce18ddc413321\"\n        netAddr:\n          type: string\n          example: \"128.1.39.120:11235\"\n        inbound:\n          type: boolean\n          example: false\n        duration:\n          type: integer\n          example: 28\n\n    TxOrRawTxWithMeta:\n      oneOf:\n        - $ref: \"#/components/schemas/TxWithMeta\"\n        - $ref: \"#/components/schemas/RawTxWithMeta\"\n      example:\n        id: \"0x4de71f2d588aa8a1ea00fe8312d92966da424d9939a511fc0be81e65fad52af8\"\n        chainTag: 1\n        blockRef: \"0x00000001511fc0be\"\n        expiration: 30\n        clauses: []\n        gasPriceCoef: 128\n        gas: 21000\n        origin: \"0x7567d83b7b8d80addcb281a71d54fc7b3364ffed\"\n        nonce: \"0xd92966da424d9939\"\n        dependsOn: null\n        size: 180\n        meta:\n          blockID: \"0x00000001c458949985a6d86b7139690b8811dd3b4647c02d4f41cdefb7d32327\"\n          blockNumber: 1\n          blockTimestamp: 1523156271\n\n    RawOrSignedOrUnsignedTx:\n      oneOf:\n        - $ref: \"#/components/schemas/RawTx\"\n        - $ref: \"#/components/schemas/SignedTx\"\n        - $ref: \"#/components/schemas/TxBody\"\n      example:\n        raw: \"0xf86981ba800adad994000000000000000000000000000000000000746f82271080018252088001c0b8414792c9439594098323900e6470742cd877ec9f9906bca05510e421f3b013ed221324e77ca10d3466b32b1800c72e12719b213f1d4c370305399dd27af962626400\"\n\n    IDOrSigningHash:\n      oneOf:\n        - type: object\n          properties:\n            id:\n              type: string\n        - type: object\n          properties:\n            signingHash:\n              type: string\n      example:\n        id: \"0x4de71f2d588aa8a1ea00fe8312d92966da424d9939a511fc0be81e65fad52af8\"\n\n    Obsolete:\n      properties:\n        obsolete:\n          type: boolean\n          description: |\n            indicates whether the block containing this data become branch block\n\n    TracerOption:\n      properties:\n        name:\n          type: string\n          enum:\n            - 4byte\n            - bigram\n            - call\n            - evmdis\n            - noop\n            - opcount\n            - prestate\n            - trigram\n            - unigram\n          description: |\n            name of tracer. Empty name stands for default struct logger tracer.\n          example: \"\"\n        target:\n          type: string\n          description: |\n            the unified path of target to be traced.\n            Currently, only clause is supported. Format:\n            `blockID/(txIndex|txId)/clauseIndex`\n          example: \"0x000dabb4d6f0a80ad7ad7cd0e07a1f20b546db0730d869d5ccb0dd2a16e7595b/0/0\"\n\n    StorageRangeOption:\n      properties:\n        address:\n          type: string\n          description: |\n            address of account\n          example: \"0xa4627036e2095eb71c2341054daa63577c062498\"\n        keyStart:\n          type: string\n          example: \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n        maxResult:\n          type: number\n          example: 10\n        target:\n          type: string\n          example: \"0x000edefb448685f9c72fc2b946980ef51d8d208bbaa4d3fdcf0c57d4847aca2e/0/0\"\n\n    StorageRange:\n      properties:\n        nextKey:\n          type: string\n          example: null\n        storage:\n          type: object\n          example:\n            ? \"0x33e423980c9b37d048bd5fadbd4a2aeb95146922045405accc2f468d0ef96988\"\n            : key: \"0x0000000000000000000000000000000000000000000000000000000000000001\"\n              value: \"0x00000000000000000000000000000000000000000000000000000000000000c8\"\n    Beat:\n      properties:\n        number:\n          type: integer\n          format: uint32\n          description: block number (height)\n          example: 325324\n        id:\n          type: string\n          format: bytes32\n          description: block identifier\n          example: \"0x0004f6cc88bb4626a92907718e82f255b8fa511453a78e8797eb8cea3393b215\"\n        parentID:\n          type: string\n          format: bytes32\n          description: parent block ID\n          example: \"0x0004f6cb730dbd90fed09d165bfdf33cc0eed47ec068938f6ee7b7c12a4ea98d\"\n        timestamp:\n          type: integer\n          format: uint64\n          description: block unix timestamp\n          example: 1533267900\n        bloom:\n          type: string\n          format: hex\n          description: |\n            the bloom filter composited with affected addresses\n          example: \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n        k:\n          type: integer\n          format: uint32\n          description: |\n            the number of hash functions for bloom filter\n          example: 3\n\n  parameters:\n    AddressInPath:\n      name: address\n      in: path\n      description: address of account\n      required: true\n      schema:\n        type: string\n        format: bytes20\n      example: \"0x5034aa590125b64023a0262112b98d72e3c8e40e\"\n\n    RawInQuery:\n      name: raw\n      in: query\n      description: whether retrieve a raw transaction.\n      required: false\n      schema:\n        type: boolean\n\n    RevisionInQuery:\n      name: revision\n      in: query\n      description: can be block number or ID. best block is assumed if omitted.\n      schema:\n        type: string\n\n    RevisionInPath:\n      name: revision\n      in: path\n      description: |\n        block ID or number, or 'best' stands for latest block\n      required: true\n      schema:\n        type: string\n      example: best\n\n    HeadInQuery:\n      name: head\n      in: query\n      description: ID of head block. best block is assumed if omitted\n      schema:\n        type: string\n\n    StorageKeyInPath:\n      in: path\n      description: the key(position) to access account storage\n      required: true\n      name: key\n      schema:\n        type: string\n      example: \"0x0000000000000000000000000000000000000000000000000000000000000001\"\n\n    FilterAddressInQuery:\n      name: address\n      in: query\n      description: address of account which is the events emitter\n      required: false\n      schema:\n        type: string\n      example: \"0x0000000000000000000000000000456e65726779\"\n\n    FilterOrderInQuery:\n      name: order\n      in: query\n      description: |\n        order of filters, defaults to `asc`\n      required: false\n      schema:\n        type: string\n        enum:\n          - asc\n          - desc\n      example: asc\n\n    TxIDInPath:\n      in: path\n      description: ID of transaction\n      required: true\n      name: id\n      schema:\n        type: string\n      example: \"0x9bcc6526a76ae560244f698805cc001977246cb92c2b4f1e2b7a204e445409ea\"\n\n    PositionInQuery:\n      name: pos\n      in: query\n      description: |\n        a saved block ID for resuming the subscription. best block ID is assumed if omitted.\n      schema:\n        type: string\n",
			"canonicalURL": "/github.com/meterio/meter-pov@0c3236119708e8805954b38ef384310c02e21765/-/blob/api/doc/meter.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/meterio/meter-pov/blob/0c3236119708e8805954b38ef384310c02e21765/api/doc/meter.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /staking/buckets: get: responses: no responses"
}