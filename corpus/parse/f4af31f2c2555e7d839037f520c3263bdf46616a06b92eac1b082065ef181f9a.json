{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/PrefectHQ/prefect-hightouch"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "prefect_hightouch/schemas/original/swagger.yaml",
			"byteSize": 44091,
			"content": "components:\n  examples: {}\n  headers: {}\n  parameters: {}\n  requestBodies: {}\n  responses: {}\n  schemas:\n    CronSchedule:\n      additionalProperties: true\n      properties:\n        expression:\n          type: string\n      required:\n      - expression\n      type: object\n    DBTSchedule:\n      additionalProperties: true\n      properties:\n        account:\n          properties:\n            id:\n              type: string\n          required:\n          - id\n          type: object\n        dbtCredentialId:\n          type: string\n        job:\n          properties:\n            id:\n              type: string\n          required:\n          - id\n          type: object\n      required:\n      - dbtCredentialId\n      - account\n      - job\n      type: object\n    Destination:\n      additionalProperties: true\n      description: 'The service receiving your data (e.g. Salesforce, Hubspot, Customer.io,\n        or a\n\n        SFTP server)'\n      properties:\n        configuration:\n          additionalProperties: {}\n          description: 'The destination''s configuration. This specifies general metadata\n            about destination, like hostname and username.\n\n            Hightouch will be using this configuration to connect to destination.\n\n\n            The schema depends on the destination.\n\n\n            Consumers should NOT make assumptions on the contents of the\n\n            configuration. It may change as Hightouch updates its internal code.'\n          properties: {}\n          type: object\n        createdAt:\n          description: The timestamp when the destination was created\n          format: date-time\n          type: string\n        id:\n          description: The destination's id\n          type: string\n        name:\n          description: The destination's name\n          type: string\n        slug:\n          description: The destination's slug\n          type: string\n        syncs:\n          description: A list of syncs that sync to this destination.\n          items:\n            type: string\n          type: array\n        type:\n          description: The destination's type (e.g. salesforce or hubspot).\n          type: string\n        updatedAt:\n          description: The timestamp when the destination was last updated\n          format: date-time\n          type: string\n        workspaceId:\n          description: The id of the workspace that the destination belongs to\n          type: string\n      required:\n      - id\n      - name\n      - slug\n      - workspaceId\n      - createdAt\n      - updatedAt\n      - type\n      - configuration\n      - syncs\n      type: object\n    Interval:\n      additionalProperties: true\n      properties:\n        quantity:\n          format: double\n          type: number\n        unit:\n          $ref: '#/components/schemas/IntervalUnit'\n      required:\n      - unit\n      - quantity\n      type: object\n    IntervalSchedule:\n      additionalProperties: true\n      properties:\n        interval:\n          $ref: '#/components/schemas/Interval'\n      required:\n      - interval\n      type: object\n    IntervalUnit:\n      enum:\n      - minute\n      - hour\n      - day\n      - week\n      type: string\n    Model:\n      additionalProperties: true\n      description: 'The SQL query that pulls data from your source to send to your\n        destination.\n\n        We send your SQL query directly to your source so any SQL that is valid for\n        your source (including functions) is valid in Hightouch.'\n      properties:\n        createdAt:\n          description: The timestamp when model was created\n          format: date-time\n          type: string\n        custom:\n          description: Custom query for sources that doesn't support sql. For example,\n            Airtable.\n          properties:\n            query: {}\n          required:\n          - query\n          type: object\n        dbt:\n          description: Query that is based on a dbt model\n          properties:\n            compiledSql:\n              description: Compiled SQL in the dbt model\n              type: string\n            database:\n              description: Name of the database containing the generated table\n              type: string\n            dbtUniqueId:\n              description: Unique ID of the model assigned by dbt (usually some combination\n                of the schema and table name)\n              type: string\n            modelId:\n              description: Model id that refer to a dbt model\n              type: string\n            name:\n              description: Name of the table generated by the dbt model\n              type: string\n            rawSql:\n              description: Raw SQL in the dbt model\n              type: string\n            schema:\n              description: Name of the schema containing the generated table\n              type: string\n          required:\n          - dbtUniqueId\n          - compiledSql\n          - rawSql\n          - database\n          - schema\n          - name\n          - modelId\n          type: object\n        id:\n          description: The id of the model\n          type: string\n        isSchema:\n          description: 'If is_schema is true, the model is just used to build other\n            models.\n\n            Either as part of visual querying, or as the root of a visual query.'\n          type: boolean\n        name:\n          description: The name of the model\n          type: string\n        primaryKey:\n          description: The primary key will be null if the query doesn't get directly\n            synced (e.g. a relationship table for visual querying)\n          type: string\n        queryType:\n          description: 'The type of the query. Available options: custom, raw_sql,\n            tabel, dbt and visual.'\n          type: string\n        raw:\n          description: Standard raw SQL query\n          properties:\n            sql:\n              type: string\n          required:\n          - sql\n          type: object\n        slug:\n          description: The slug of the model\n          type: string\n        sourceId:\n          description: The id of the source that model is connected to\n          type: string\n        syncs:\n          description: The list of id of syncs that uses this model\n          items:\n            type: string\n          type: array\n        table:\n          description: Table-based query that fetches on a table instead of SQL\n          properties:\n            name:\n              type: string\n          required:\n          - name\n          type: object\n        tags:\n          additionalProperties:\n            type: string\n          description: The tags of the model\n          properties: {}\n          type: object\n        updatedAt:\n          description: The timestamp when model was lastly updated\n          format: date-time\n          type: string\n        visual:\n          description: Visual query, used by audience\n          properties:\n            filter: {}\n            parentId:\n              description: Parent id of the schema that visual query is based on\n              type: string\n            primaryLabel:\n              type: string\n            secondaryLabel:\n              type: string\n          required:\n          - secondaryLabel\n          - primaryLabel\n          - filter\n          - parentId\n          type: object\n        workspaceId:\n          description: The id of the workspace where the model belongs to\n          type: string\n      required:\n      - id\n      - name\n      - slug\n      - workspaceId\n      - primaryKey\n      - createdAt\n      - updatedAt\n      - sourceId\n      - queryType\n      - tags\n      - isSchema\n      - syncs\n      type: object\n    Record_Day.boolean-or-undefined_:\n      description: Construct a type with a set of properties K of type T\n      properties:\n        friday:\n          type: boolean\n        monday:\n          type: boolean\n        saturday:\n          type: boolean\n        sunday:\n          type: boolean\n        thursday:\n          type: boolean\n        tuesday:\n          type: boolean\n        wednesday:\n          type: boolean\n      type: object\n    Source:\n      additionalProperties: true\n      description: 'The database or warehouse where your data is stored. The starting\n        point for\n\n        a Hightouch data pipeline.'\n      properties:\n        configuration:\n          additionalProperties: {}\n          description: 'The source''s configuration. This specifies general metadata\n            about sources, like connection details\n\n            Hightouch will use this configuration to connect to underlying source.\n\n\n            The schema depends on the destination.\n\n\n            Consumers should NOT make assumptions on the contents of the\n\n            configuration. It may change as Hightouch updates its internal code.'\n          properties: {}\n          type: object\n        createdAt:\n          description: The timestamp when the source was created\n          format: date-time\n          type: string\n        id:\n          description: The source's id\n          type: string\n        name:\n          description: The source's name\n          type: string\n        slug:\n          description: The source's slug\n          type: string\n        type:\n          description: The source's type (e.g. snowflake or postgres).\n          type: string\n        updatedAt:\n          description: The timestamp when the source was last updated\n          format: date-time\n          type: string\n        workspaceId:\n          description: The id of the workspace that the source belongs to\n          type: string\n      required:\n      - id\n      - name\n      - slug\n      - workspaceId\n      - createdAt\n      - updatedAt\n      - configuration\n      - type\n      type: object\n    Sync:\n      additionalProperties: true\n      description: 'Syncs define how data from models are mapped to destinations.\n        Each time a\n\n        sync runs, Hightouch calculates the rows that have changed since the last\n\n        run, and syncs them to Sync''s destination.'\n      properties:\n        configuration:\n          additionalProperties: {}\n          description: 'The sync''s configuration. This specifies how data is mapped,\n            among other\n\n            configuration.\n\n\n            The schema depends on the destination.\n\n\n            Consumers should NOT make assumptions on the contents of the\n\n            configuration. It may change as Hightouch updates its internal code.'\n          properties: {}\n          type: object\n        createdAt:\n          description: The timestamp when the sync was created\n          format: date-time\n          type: string\n        destinationId:\n          description: The id of the Destination that sync is connected to\n          type: string\n        disabled:\n          description: Whether the sync has been disabled by the user.\n          type: boolean\n        id:\n          description: The sync's id\n          type: string\n        lastRunAt:\n          description: The timestamp of the last sync run\n          format: date-time\n          type: string\n        modelId:\n          description: The id of the Model that sync is connected to\n          type: string\n        primaryKey:\n          description: The primary key that sync uses to identify data from source\n          type: string\n        referencedColumns:\n          description: The reference column that sync depends on to sync data from\n            source\n          items:\n            type: string\n          type: array\n        schedule:\n          description: 'The scheduling configuration. It can be triggerd based on\n            several ways:\n\n\n            Interval: the sync will be trigged based on certain interval(minutes/hours/days/weeks)\n\n\n            Cron: the sync will be trigged based on cron expression https://en.wikipedia.org/wiki/Cron.\n\n\n            Visual: the sync will be trigged based a visual cron configuration on\n            UI\n\n\n            DBT-cloud: the sync will be trigged based on a dbt cloud job'\n          properties:\n            schedule:\n              anyOf:\n              - $ref: '#/components/schemas/IntervalSchedule'\n              - $ref: '#/components/schemas/CronSchedule'\n              - $ref: '#/components/schemas/VisualCronSchedule'\n              - $ref: '#/components/schemas/DBTSchedule'\n            type:\n              type: string\n          required:\n          - schedule\n          - type\n          type: object\n        slug:\n          description: The sync's slug\n          type: string\n        status:\n          $ref: '#/components/schemas/SyncStatus'\n          description: The overall status of the sync\n        updatedAt:\n          description: The timestamp when the sync was last updated\n          format: date-time\n          type: string\n        workspaceId:\n          description: The id of the workspace that the sync belongs to\n          type: string\n      required:\n      - id\n      - slug\n      - workspaceId\n      - createdAt\n      - updatedAt\n      - destinationId\n      - modelId\n      - configuration\n      - schedule\n      - status\n      - disabled\n      - lastRunAt\n      - referencedColumns\n      - primaryKey\n      type: object\n    SyncRun:\n      additionalProperties: true\n      properties:\n        completionRatio:\n          description: The completion ratio of sync run, showing the progress of a\n            sync run\n          format: double\n          type: number\n        createdAt:\n          description: 'The timestamp when sync run was created. In most cases this\n            will be\n\n            equivalent to `startedAt`, but it may be earlier if the sync was triggered\n\n            while a run was already in progress, and the new run didn''t start for\n\n            a while.'\n          format: date-time\n          type: string\n        error:\n          description: Error message if the sync run didn't finish successfully\n          type: string\n        failedRows:\n          description: 'The number of rows that we attempted to sync, but were rejected\n            by the\n\n            destination.\n\n\n            This does not include rows that weren''t attempted due to the sync being\n\n            cancelled.'\n          properties:\n            addedCount:\n              description: The number of failed adds.\n              format: double\n              type: number\n            changedCount:\n              description: The number of failed changes.\n              format: double\n              type: number\n            removedCount:\n              description: The number of failed removes.\n              format: double\n              type: number\n          required:\n          - removedCount\n          - changedCount\n          - addedCount\n          type: object\n        finishedAt:\n          description: The timestamp when the sync run finished\n          format: date-time\n          type: string\n        id:\n          description: The sync run's id\n          type: string\n        plannedRows:\n          description: 'The number of planned rows that this sync run was supposed\n            to execute.\n\n\n            Note that the counts for `successfulRows` and `failedRows` may not add\n            up\n\n            to `plannedRows` if the sync was cancelled.'\n          properties:\n            addedCount:\n              description: The number of added rows.\n              format: double\n              type: number\n            changedCount:\n              description: The number of changed rows.\n              format: double\n              type: number\n            removedCount:\n              description: The number of removed rows.\n              format: double\n              type: number\n          required:\n          - removedCount\n          - changedCount\n          - addedCount\n          type: object\n        querySize:\n          description: The number of rows in the query.\n          format: double\n          type: number\n        startedAt:\n          description: The timestamp when the sync run started\n          format: date-time\n          type: string\n        status:\n          $ref: '#/components/schemas/SyncRunStatus'\n          description: The status of sync run\n        successfulRows:\n          description: The number of rows that were successfully processed by the\n            destination.\n          properties:\n            addedCount:\n              description: The number of successful adds.\n              format: double\n              type: number\n            changedCount:\n              description: The number of successful changes.\n              format: double\n              type: number\n            removedCount:\n              description: The number of successful removes.\n              format: double\n              type: number\n          required:\n          - removedCount\n          - changedCount\n          - addedCount\n          type: object\n      required:\n      - id\n      - createdAt\n      - startedAt\n      - finishedAt\n      - querySize\n      - status\n      - completionRatio\n      - plannedRows\n      - successfulRows\n      - failedRows\n      type: object\n    SyncRunStatus:\n      description: The status of sync runs\n      enum:\n      - cancelled\n      - failed\n      - queued\n      - success\n      - warning\n      - querying\n      - processing\n      - reporting\n      - interrupted\n      type: string\n    SyncStatus:\n      enum:\n      - disabled\n      - pending\n      - cancelled\n      - failed\n      - queued\n      - success\n      - warning\n      - querying\n      - processing\n      - reporting\n      - interrupted\n      type: string\n    TriggerRunCustomInput:\n      description: The input of a trigger action to run syncs based on sync ID, slug\n        or other filters\n      properties:\n        fullResync:\n          default: 'false'\n          description: 'Whether to resync all the rows in the query (i.e. ignoring\n            previously\n\n            synced rows).'\n          type: boolean\n        syncId:\n          description: Trigger run based on sync id\n          type: string\n        syncSlug:\n          description: Trigger run based on sync slug\n          type: string\n      type: object\n    TriggerRunInput:\n      description: The input of a trigger action to run syncs\n      properties:\n        fullResync:\n          default: 'false'\n          description: 'Whether to resync all the rows in the query (i.e. ignoring\n            previously\n\n            synced rows).'\n          type: boolean\n      type: object\n    TriggerRunOutput:\n      additionalProperties: true\n      description: The output of a trigger action to run syncs\n      properties:\n        id:\n          description: 'The id of the triggered sync run. This can be passed to `/sync/runs`\n            to\n\n            get the run''s status.'\n          type: string\n      required:\n      - id\n      type: object\n    ValidateErrorJSON:\n      additionalProperties: true\n      properties:\n        details:\n          additionalProperties: {}\n          properties: {}\n          type: object\n        message:\n          enum:\n          - Validation failed\n          nullable: false\n          type: string\n      required:\n      - message\n      - details\n      type: object\n    VisualCronSchedule:\n      additionalProperties: true\n      properties:\n        expressions:\n          items:\n            properties:\n              days:\n                $ref: '#/components/schemas/Record_Day.boolean-or-undefined_'\n              time:\n                type: string\n            required:\n            - days\n            - time\n            type: object\n          type: array\n      required:\n      - expressions\n      type: object\n  securitySchemes:\n    bearerAuth:\n      bearerFormat: Bearer\n      scheme: bearer\n      type: http\ninfo:\n  contact:\n    email: hello@hightouch.com\n    name: Hightouch\n    url: https://hightouch.com\n  description: Hightouch Public Rest API to access syncs, models, sources and destinations\n  license:\n    name: MIT\n  title: Hightouch API\n  version: 1.0.0\nopenapi: 3.0.0\npaths:\n  /destinations:\n    get:\n      description: List the destinations in the user's workspace\n      operationId: ListDestination\n      parameters:\n      - description: Filter based on the destination's name\n        in: query\n        name: name\n        required: false\n        schema:\n          type: string\n      - description: Filter based on destination's slug\n        in: query\n        name: slug\n        required: false\n        schema:\n          type: string\n      - description: Limit the number of returned destinations\n        in: query\n        name: limit\n        required: false\n        schema:\n          format: double\n          type: number\n      - description: Order the returned destinations\n        in: query\n        name: orderBy\n        required: false\n        schema:\n          default: id\n          enum:\n          - id\n          - name\n          - slug\n          - createdAt\n          - updatedAt\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              examples:\n                Example 1:\n                  value:\n                    data:\n                    - configuration:\n                        hostname: foo\n                        region: bar\n                      createdAt: '2022-02-16T21:37:58.510Z'\n                      id: '1'\n                      name: testdestination1\n                      slug: testdestination1\n                      syncs:\n                      - '1'\n                      - '2'\n                      type: salesforce\n                      updatedAt: '2022-02-16T21:37:58.510Z'\n                      workspaceId: '1'\n                    - configuration:\n                        hostname: foo\n                        region: bar\n                      createdAt: '2022-02-16T21:37:58.510Z'\n                      id: '2'\n                      name: testdestination2\n                      slug: testdestination2\n                      syncs:\n                      - '1'\n                      - '2'\n                      type: hubspot\n                      updatedAt: '2022-02-16T21:37:58.510Z'\n                      workspaceId: '1'\n              schema:\n                properties:\n                  data:\n                    items:\n                      $ref: '#/components/schemas/Destination'\n                    type: array\n                required:\n                - data\n                type: object\n          description: Ok\n        '400':\n          description: Bad request\n        '401':\n          description: Unauthorized\n        '422':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidateErrorJSON'\n          description: Validation Failed\n      security:\n      - bearerAuth: []\n      summary: List Destinations\n  /destinations/{destinationId}:\n    get:\n      description: Retrieve a destination based on its Hightouch ID\n      operationId: GetDestination\n      parameters:\n      - description: The destination's ID\n        in: path\n        name: destinationId\n        required: true\n        schema:\n          format: double\n          type: number\n      responses:\n        '200':\n          content:\n            application/json:\n              examples:\n                Example 1:\n                  value:\n                    configuration:\n                      hostname: foo\n                      region: bar\n                    createdAt: '2022-02-16T21:37:58.510Z'\n                    id: '1'\n                    name: testdestination\n                    slug: testdestination\n                    syncs:\n                    - '1'\n                    - '2'\n                    type: salesforce\n                    updatedAt: '2022-02-16T21:37:58.510Z'\n                    workspaceId: '1'\n              schema:\n                $ref: '#/components/schemas/Destination'\n          description: Ok\n        '401':\n          description: Unauthorized\n        '404':\n          description: Not found\n      security:\n      - bearerAuth: []\n      summary: Get Destination\n  /models:\n    get:\n      description: List all the models in the current workspace\n      operationId: ListModel\n      parameters:\n      - description: filter based on name\n        in: query\n        name: name\n        required: false\n        schema:\n          type: string\n      - description: filter based on slug\n        in: query\n        name: slug\n        required: false\n        schema:\n          type: string\n      - description: limit the number of object it returns. Default is 100.\n        in: query\n        name: limit\n        required: false\n        schema:\n          format: double\n          type: number\n      - description: specify the order\n        in: query\n        name: orderBy\n        required: false\n        schema:\n          default: id\n          enum:\n          - id\n          - name\n          - slug\n          - createdAt\n          - updatedAt\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              examples:\n                Example 1:\n                  value:\n                    data:\n                    - createdAt: '2022-02-16T21:37:58.510Z'\n                      id: '1'\n                      isSchema: false\n                      name: testModel\n                      primaryKey: id\n                      queryType: raw_sql\n                      raw:\n                        sql: select * from users\n                      slug: testModel\n                      sourceId: '1'\n                      syncs:\n                      - '1'\n                      - '2'\n                      tags:\n                        foo: bar\n                      updatedAt: '2022-02-16T21:37:58.510Z'\n                      workspaceId: '1'\n                    - createdAt: '2022-02-16T21:37:58.510Z'\n                      id: '2'\n                      isSchema: false\n                      name: testModel2\n                      primaryKey: id\n                      queryType: raw_sql\n                      raw:\n                        sql: select * from accounts\n                      slug: testModel2\n                      sourceId: '1'\n                      syncs:\n                      - '1'\n                      - '2'\n                      tags:\n                        foo: baz\n                      updatedAt: '2022-02-16T21:37:58.510Z'\n                      workspaceId: '1'\n              schema:\n                properties:\n                  data:\n                    items:\n                      $ref: '#/components/schemas/Model'\n                    type: array\n                required:\n                - data\n                type: object\n          description: Ok\n        '400':\n          description: Bad request\n        '401':\n          description: Unauthorized\n        '422':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidateErrorJSON'\n          description: Validation Failed\n      security:\n      - bearerAuth: []\n      summary: List Models\n  /models/{modelId}:\n    get:\n      description: Retrieve models from model ID\n      operationId: GetModel\n      parameters:\n      - description: The id of the model\n        in: path\n        name: modelId\n        required: true\n        schema:\n          format: double\n          type: number\n      responses:\n        '200':\n          content:\n            application/json:\n              examples:\n                Example 1:\n                  value:\n                    createdAt: '2022-02-16T21:37:58.510Z'\n                    id: '1'\n                    isSchema: false\n                    name: testModel\n                    primaryKey: id\n                    queryType: raw_sql\n                    raw:\n                      sql: select * from users\n                    slug: testModel\n                    sourceId: '1'\n                    syncs:\n                    - '1'\n                    - '2'\n                    tags:\n                      foo: bar\n                    updatedAt: '2022-02-16T21:37:58.510Z'\n                    workspaceId: '1'\n              schema:\n                $ref: '#/components/schemas/Model'\n          description: Ok\n        '401':\n          description: Unauthorized\n        '404':\n          description: Not found\n      security:\n      - bearerAuth: []\n      summary: Get Model\n  /sources:\n    get:\n      description: List all the sources in the current workspace\n      operationId: ListSource\n      parameters:\n      - description: filter based on name\n        in: query\n        name: name\n        required: false\n        schema:\n          type: string\n      - description: filter based on slug\n        in: query\n        name: slug\n        required: false\n        schema:\n          type: string\n      - description: limit the number of object it returns\n        in: query\n        name: limit\n        required: false\n        schema:\n          format: double\n          type: number\n      - description: specify the order\n        in: query\n        name: orderBy\n        required: false\n        schema:\n          default: id\n          enum:\n          - id\n          - name\n          - slug\n          - createdAt\n          - updatedAt\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              examples:\n                Example 1:\n                  value:\n                    data:\n                    - configuration:\n                        hostname: foo\n                        region: bar\n                      createdAt: '2022-02-16T21:37:58.510Z'\n                      id: '1'\n                      name: testSource1\n                      slug: testSource1\n                      type: snowflake\n                      updatedAt: '2022-02-16T21:37:58.510Z'\n                      workspaceId: '1'\n                    - configuration:\n                        hostname: foo\n                        region: bar\n                      createdAt: '2022-02-16T21:37:58.510Z'\n                      id: '2'\n                      name: testSource2\n                      slug: testSource2\n                      type: googlesheet\n                      updatedAt: '2022-02-16T21:37:58.510Z'\n                      workspaceId: '1'\n              schema:\n                properties:\n                  data:\n                    items:\n                      $ref: '#/components/schemas/Source'\n                    type: array\n                required:\n                - data\n                type: object\n          description: Ok\n        '400':\n          description: Bad request\n        '401':\n          description: Unauthorized\n      security:\n      - bearerAuth: []\n      summary: List Sources\n  /sources/{sourceId}:\n    get:\n      description: Retrieve source from source ID\n      operationId: GetSource\n      parameters:\n      - description: The id of the source\n        in: path\n        name: sourceId\n        required: true\n        schema:\n          format: double\n          type: number\n      responses:\n        '200':\n          content:\n            application/json:\n              examples:\n                Example 1:\n                  value:\n                    configuration:\n                      hostname: foo\n                      region: bar\n                    createdAt: '2022-02-16T21:37:58.510Z'\n                    id: '1'\n                    name: testSource\n                    slug: testSource\n                    type: snowflake\n                    updatedAt: '2022-02-16T21:37:58.510Z'\n                    workspaceId: '1'\n              schema:\n                $ref: '#/components/schemas/Source'\n          description: Ok\n        '401':\n          description: Unauthorized\n        '404':\n          description: Not found\n        '422':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidateErrorJSON'\n          description: Validation Failed\n      security:\n      - bearerAuth: []\n      summary: Get Source\n  /syncs:\n    get:\n      description: List all the syncs in the current workspace\n      operationId: ListSync\n      parameters:\n      - description: filter based on slug\n        in: query\n        name: slug\n        required: false\n        schema:\n          type: string\n      - description: filter based on modelId\n        in: query\n        name: modelId\n        required: false\n        schema:\n          format: double\n          type: number\n      - description: select syncs that were run after given time\n        in: query\n        name: after\n        required: false\n        schema:\n          format: date-time\n          type: string\n      - description: select syncs that were run before given time\n        in: query\n        name: before\n        required: false\n        schema:\n          format: date-time\n          type: string\n      - description: limit the number of object it returns. Default is 100.\n        in: query\n        name: limit\n        required: false\n        schema:\n          format: double\n          type: number\n      - description: specify the order\n        in: query\n        name: orderBy\n        required: false\n        schema:\n          default: id\n          enum:\n          - id\n          - name\n          - slug\n          - createdAt\n          - updatedAt\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              examples:\n                Example 1:\n                  value:\n                    data:\n                    - configuration:\n                        associationMappings: []\n                        externalIdMapping:\n                          from: test_id\n                          to: firstname\n                          type: standard\n                        mappings:\n                        - from: email\n                          to: email\n                          type: standard\n                        - from: phone\n                          to: phone\n                          type: standard\n                        mode: upsert\n                        object: contacts\n                        objectId: 0-1\n                      createdAt: '2022-02-16T21:37:58.510Z'\n                      destinationId: '1'\n                      disabled: false\n                      id: '1'\n                      lastRunAt: '2022-02-16T21:37:58.510Z'\n                      modelId: '1'\n                      primaryKey: id\n                      referencedColumns:\n                      - email\n                      - name\n                      schedule:\n                        schedule:\n                          interval:\n                            quantity: 1\n                            unit: day\n                        type: interval\n                      slug: testsync\n                      status: success\n                      updatedAt: '2022-02-16T21:37:58.510Z'\n                      workspaceId: '1'\n              schema:\n                properties:\n                  data:\n                    items:\n                      $ref: '#/components/schemas/Sync'\n                    type: array\n                required:\n                - data\n                type: object\n          description: Ok\n        '400':\n          description: Bad request\n        '401':\n          description: Unauthorized\n        '422':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidateErrorJSON'\n          description: Validation Failed\n      security:\n      - bearerAuth: []\n      summary: List Syncs\n  /syncs/trigger:\n    post:\n      description: 'Trigger a new run globally based on sync id or sync slug\n\n\n        If a run is already in progress, this queues a sync run that will get\n\n        executed immediately after the current run completes.'\n      operationId: TriggerRunCustom\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TriggerRunCustomInput'\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                anyOf:\n                - $ref: '#/components/schemas/TriggerRunOutput'\n                - $ref: '#/components/schemas/ValidateErrorJSON'\n          description: Ok\n        '400':\n          description: Bad request\n        '401':\n          description: Unauthorized\n        '422':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidateErrorJSON'\n          description: Validation Failed\n      security:\n      - bearerAuth: []\n      summary: Trigger Sync From ID or Slug\n  /syncs/{syncId}:\n    get:\n      description: Retrieve sync from sync ID\n      operationId: GetSync\n      parameters:\n      - description: The id of the sync\n        in: path\n        name: syncId\n        required: true\n        schema:\n          format: double\n          type: number\n      responses:\n        '200':\n          content:\n            application/json:\n              examples:\n                Example 1:\n                  value:\n                    configuration:\n                      associationMappings: []\n                      externalIdMapping:\n                        from: test_id\n                        to: firstname\n                        type: standard\n                      mappings:\n                      - from: email\n                        to: email\n                        type: standard\n                      - from: phone\n                        to: phone\n                        type: standard\n                      mode: upsert\n                      object: contacts\n                      objectId: 0-1\n                    createdAt: '2022-02-16T21:37:58.510Z'\n                    destinationId: '1'\n                    disabled: false\n                    id: '1'\n                    lastRunAt: '2022-02-16T21:37:58.510Z'\n                    modelId: '1'\n                    primaryKey: id\n                    referencedColumns:\n                    - email\n                    - name\n                    schedule:\n                      schedule:\n                        interval:\n                          quantity: 1\n                          unit: day\n                      type: interval\n                    slug: testsync\n                    status: success\n                    updatedAt: '2022-02-16T21:37:58.510Z'\n                    workspaceId: '1'\n              schema:\n                $ref: '#/components/schemas/Sync'\n          description: Ok\n        '401':\n          description: Unauthorized\n        '404':\n          description: Not found\n      security:\n      - bearerAuth: []\n      summary: Get Sync\n  /syncs/{syncId}/runs:\n    get:\n      description: List all sync runs under a sync\n      operationId: ListSyncRuns\n      parameters:\n      - in: path\n        name: syncId\n        required: true\n        schema:\n          format: double\n          type: number\n      - description: query for specific run id\n        in: query\n        name: runId\n        required: false\n        schema:\n          format: double\n          type: number\n      - description: limit the number of object it returns. Default is 5.\n        in: query\n        name: limit\n        required: false\n        schema:\n          format: double\n          type: number\n      - description: setting offset from result(for pagination)\n        in: query\n        name: offset\n        required: false\n        schema:\n          format: double\n          type: number\n      - description: select sync runs that are started after given timestamp\n        in: query\n        name: after\n        required: false\n        schema:\n          format: date-time\n          type: string\n      - description: select sync runs that are started before certain timestamp\n        in: query\n        name: before\n        required: false\n        schema:\n          format: date-time\n          type: string\n      - description: select sync runs that are started within last given minutes\n        in: query\n        name: within\n        required: false\n        schema:\n          format: double\n          type: number\n      - description: specify the order\n        in: query\n        name: orderBy\n        required: false\n        schema:\n          default: id\n          enum:\n          - id\n          - createdAt\n          - startedAt\n          - finishedAt\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              examples:\n                Example 1:\n                  value:\n                    data:\n                    - completionRatio: 0.54\n                      createdAt: '2022-02-08T16:11:04.712Z'\n                      error: null\n                      failedRows:\n                        addedCount: 0\n                        changedCount: 0\n                        removedCount: 0\n                      finishedAt: '2022-02-08T16:11:11.698Z'\n                      id: '42'\n                      plannedRows:\n                        addedCount: 773\n                        changedCount: 0\n                        removedCount: 0\n                      querySize: 773\n                      startedAt: '2022-02-08T16:11:04.712Z'\n                      status: success\n                      successfulRows:\n                        addedCount: 773\n                        changedCount: 0\n                        removedCount: 0\n                    - completionRatio: 0.54\n                      createdAt: '2022-02-08T17:44:05.198Z'\n                      error: null\n                      failedRows:\n                        addedCount: 0\n                        changedCount: 0\n                        removedCount: 0\n                      finishedAt: '2022-02-08T17:44:25.366Z'\n                      id: '43'\n                      plannedRows:\n                        addedCount: 0\n                        changedCount: 765\n                        removedCount: 0\n                      querySize: 773\n                      startedAt: '2022-02-08T16:11:04.712Z'\n                      status: success\n                      successfulRows:\n                        addedCount: 0\n                        changedCount: 765\n                        removedCount: 0\n              schema:\n                properties:\n                  data:\n                    items:\n                      $ref: '#/components/schemas/SyncRun'\n                    type: array\n                required:\n                - data\n                type: object\n          description: Ok\n        '400':\n          description: Bad request\n        '401':\n          description: Unauthorized\n        '422':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidateErrorJSON'\n          description: Validation Failed\n      security:\n      - bearerAuth: []\n      summary: List Sync Runs\n  /syncs/{syncId}/trigger:\n    post:\n      description: 'Trigger a new run for the given sync.\n\n\n        If a run is already in progress, this queues a sync run that will get\n\n        executed immediately after the current run completes.'\n      operationId: TriggerRun\n      parameters:\n      - description: The id of the sync to trigger a run\n        in: path\n        name: syncId\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TriggerRunInput'\n        required: false\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TriggerRunOutput'\n          description: Ok\n        '400':\n          description: Bad request\n        '401':\n          description: Unauthorized\n        '422':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidateErrorJSON'\n          description: Validation Failed\n      security:\n      - bearerAuth: []\n      summary: Trigger Sync\nservers:\n- url: https://api.hightouch.com/api/v1\n",
			"canonicalURL": "/github.com/PrefectHQ/prefect-hightouch@f938fb3d6b974e27989edafcb0a6d8d8b9ff0d42/-/blob/prefect_hightouch/schemas/original/swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/PrefectHQ/prefect-hightouch/blob/f938fb3d6b974e27989edafcb0a6d8d8b9ff0d42/prefect_hightouch/schemas/original/swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"TriggerRunInput\": resolve \"#/components/schemas/TriggerRunInput\": property \"fullResync\": at prefect_hightouch/schemas/original/swagger.yaml:637:20: parse default: expected type \"boolean\", got \"string\""
}