{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/lilnounsDAO/lilnouns-monorepo"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "packages/nouns-webapp/functions/docs/swagger.yaml",
			"byteSize": 9275,
			"content": "openapi: \"3.0.3\"\ninfo:\n  description: |\n    The Nouns serverless API can provide projected data that may be easier to use for non-blockchain-native clients.\n\n    ## Function Versioning\n    `v0-` prefixed functions are in development and may change before becoming finalized.\n  version: \"0.1.0\"\n  title: \"Nouns Serverless API\"\n  license:\n    name: \"CC0\"\ntags:\n- name: \"Address Data\"\n  description: \"Functions that check status of Ethereum addresses\"\n- name: \"Governance\"\n  description: \"Functions for fetching governance data\"\n- name: \"Nouns\"\n  description: \"Information about Noun tokens\"\n- name: \"Cryptography\"\n  description: \"Functions for verifying identity\"\nservers:\n  - url: \"https://nouns.wtf/.netlify/functions/\"\n    description: Production Deployment\npaths:\n  /v0-is-noun-owner:\n    post:\n      tags:\n        - \"Address Data\"\n      summary: \"Check if an Ethereum address owns a Noun\"\n      operationId: \"isNounOwner\"\n      requestBody:\n        description: The Ethereum address to check for Noun ownership\n        content:\n          \"text/plain\":\n            schema:\n              type: string\n            example: \"0x2536c09e5f5691498805884fa37811be3b2bddb4\"\n      responses:\n        \"200\":\n          description: \"Does address own a Noun\"\n          content:\n            application/json:\n              schema:\n                type: boolean\n              example: true\n  /v0-is-noun-delegate:\n    post:\n      tags:\n        - \"Address Data\"\n      summary: \"Check if an Ethereum is delegated the voting power of a Noun\"\n      operationId: \"isNounDelegate\"\n      requestBody:\n        description: The Ethereum address to check for Noun delegation\n        content:\n          \"text/plain\":\n            schema:\n              type: string\n            example: \"0x75ee6eb3d8dacf41ee2e5307090b197d3e1cca6e\"\n      responses:\n        \"200\":\n          description: \"Is address delegated the voting power of a Noun\"\n          content:\n            application/json:\n              schema:\n                type: boolean\n              example: true\n  /v0-noun-owners:\n    get:\n      summary: \"Ethereum addresses that own Nouns or are delegated voting power\"\n      tags:\n        - \"Address Data\"\n      operationId: \"getNounOwners\"\n      responses:\n        \"200\":\n          description: \"Lite Noun information including owners and delegates\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/LiteNoun\"\n  /v0-noun-votes:\n    get:\n      summary: \"All Nouns and their votes\"\n      tags:\n        - \"Governance\"\n      operationId: \"getNounVotes\"\n      responses:\n        \"200\":\n          description: \"All Nouns and how the votes they cast in Nouns governance proposals\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/NounWithVotes\"\n  /v0-proposal-votes:\n    get:\n      summary: \"All governance proposals and their votes\"\n      tags:\n        - \"Governance\"\n      operationId: \"getProposalVotes\"\n      responses:\n        \"200\":\n          description: \"All governance proposals and an array of votes cast\"\n          content:\n            application/json:\n              schema:\n                type: object\n  /v0-noun-seeds:\n    get:\n      summary: \"All Nouns and their seeds\"\n      tags:\n        - \"Nouns\"\n      operationId: \"getNounSeeds\"\n      responses:\n        \"200\":\n          description: \"All Nouns and their seeds\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/NounWithSeeds\"\n  /v0-verify-signature:\n    post:\n      summary: \"Verify an ethereum signed message\"\n      tags:\n        - \"Cryptography\"\n      operationId: \"getProposalVotes\"\n      parameters:\n        - name: fetchParticipation\n          in: \"query\"\n          description: If set to true and the signature is valid, fetch to see if the signer owns or is delegated a Noun\n          schema:\n            type: boolean\n          example: false\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/VerifySignatureRequest\"\n            example:\n              message: \"I am 0x28f1F4ea77Af433c45366151F6f9906435d9DB19\\n\\nThis is me testing the Nouns serverless API\"\n              signer: \"0x28f1F4ea77Af433c45366151F6f9906435d9DB19\"\n              signature\": \"0xc82fd716033ae41efd155258622a6c7d0d42ce56d03d6ba0bef1091d54675c4872e99f5718dfe0cb1a1a8dfd8d62fd35dfa10445d40e001174756a7059dd80d81b\"\n      responses:\n        \"200\":\n          description: \"All governance proposals and an array of votes cast\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VerifySignatureResponse\"\ncomponents:\n  schemas:\n    NormalizedVote:\n      type: object\n      description: A Nouns proposal vote\n      properties:\n        proposalId:\n          type: integer\n          format: uint256\n          description: The ID of the Nouns Governance proposal\n        supportDetailed:\n          type: integer\n          format: uint256\n          description: \"The integer support value: against (0), for (1), or abstain (2)\"\n    Seed:\n      type: object\n      description: The attributes that make up a Noun's seed\n      properties:\n        head:\n          type: integer\n        body:\n          type: integer\n        background:\n          type: integer\n        accessory:\n          type: integer\n        glasses:\n          type: integer\n    NormalizedNoun:\n      type: object\n      description: A Noun record\n      properties:\n        id:\n          type: integer\n          format: uint256\n        owner:\n          type: string\n        delegatedTo:\n          type: string\n          description: The address that the Noun's voting power is delegated to\n        votes:\n          type: array\n          items:\n            $ref: \"#/components/schemas/NormalizedVote\"\n        seed:\n          $ref: \"#/components/schemas/Seed\"\n    ProposalVote:\n      type: object\n      description: How a Noun voted on a governance proposal\n      properties:\n        nounId:\n          type: integer\n        owner:\n          type: string\n          description: The owner of the Noun\n        delegatedTo:\n          type: string\n          description: The Ethereum address the Noun's voting power is delegated\n        supportDetailed:\n          type: integer\n          description: \"The integer support value: against (0), for (1), or abstain (2)\"\n    ProposalVotes:\n      type: object\n      description: A map of Noun governance proposal ID to an array of votes\n    NounWithSeeds:\n      type: object\n      description: A Noun and its seed attributes\n      properties:\n        id:\n          type: integer\n          format: uint256\n        seed:\n          type: object\n          $ref: \"#/components/schemas/Seed\"\n    NounWithVotes:\n      type: object\n      description: How a Noun has voted on Nouns governance proposals\n      properties:\n        id:\n          type: integer\n          format: uint256\n        owner:\n          type: string\n          description: The owner of the Noun\n        delegatedTo:\n          type: string\n          description: The Ethereum address a Noun's voting power has been delegated to\n        votes:\n          type: array\n          items:\n            $ref: \"#/components/schemas/NormalizedVote\"\n    LiteNoun:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: uint256\n        owner:\n          type: string\n          description: The owner of the Noun\n        delegatedTo:\n          type: string\n          description: The Ethereum address a Noun's voting power has been delegated to\n    VerifySignatureRequest:\n      type: object\n      required:\n        - \"message\"\n        - \"signature\"\n        - \"signer\"\n      properties:\n        message:\n          type: string\n          description: The original signed message\n        signature:\n          type: string\n          description: Signature submitted for verification\n        signer:\n          type: string\n          description: The address attesting to have signed the message\n    VerifySignatureResponse:\n      type: object\n      required:\n        - \"message\"\n        - \"signature\"\n        - \"providedSignature\"\n        - \"recoveredAddress\"\n        - \"validSignature\"\n      properties:\n        message:\n          type: string\n          description: The original signed message\n        signature:\n          type: string\n          description: Signature submitted for verification\n        providedSigner:\n          type: string\n          description: The signer address provided in the request\n        recoveredAddress:\n          type: string\n          description: The address recovered from the signature\n        validSignature:\n          type: boolean\n          description: If the supplied signature is valid\n        isNounOwner:\n          type: boolean\n          description: If the signature is valid and the address owns a Noun\n        isNounDelegate:\n          type: boolean\n          description: If the signature is valid and the address is delegated a Noun"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /v0-proposal-votes: get: duplicate operationId: \"getProposalVotes\""
}