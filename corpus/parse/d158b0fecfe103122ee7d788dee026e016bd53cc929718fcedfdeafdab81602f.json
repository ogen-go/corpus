{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/restful-ma/thresholds"
		},
		"file": {
			"name": "amazonaws.com-ecr-2015-09-21-swagger.yaml",
			"size": 0,
			"path": "benchmark-repository/openapi/amazonaws.com-ecr-2015-09-21-swagger.yaml",
			"byteSize": 93268,
			"content": "openapi: 3.0.0\ninfo:\n  version: 2015-09-21\n  x-release: v4\n  title: Amazon EC2 Container Registry\n  description: \u003cfullname\u003eAmazon Elastic Container Registry\u003c/fullname\u003e \u003cp\u003eAmazon Elastic\n    Container Registry (Amazon ECR) is a managed Docker registry service.\n    Customers can use the familiar Docker CLI to push, pull, and manage images.\n    Amazon ECR provides a secure, scalable, and reliable registry. Amazon ECR\n    supports private Docker repositories with resource-based permissions using\n    IAM so that specific users or Amazon EC2 instances can access repositories\n    and images. Developers can use the Docker CLI to author and manage\n    images.\u003c/p\u003e\n  x-logo:\n    url: https://twitter.com/awscloud/profile_image?size=original\n    backgroundColor: \"#FFFFFF\"\n  termsOfService: https://aws.amazon.com/service-terms/\n  contact:\n    name: Mike Ralphson\n    email: mike.ralphson@gmail.com\n    url: https://github.com/mermade/aws2openapi\n    x-twitter: PermittedSoc\n  license:\n    name: Apache 2.0 License\n    url: http://www.apache.org/licenses/\n  x-providerName: amazonaws.com\n  x-serviceName: ecr\n  x-origin:\n    - contentType: application/json\n      url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/ecr-2015-09-21.normal.json\n      converter:\n        url: https://github.com/mermade/aws2openapi\n        version: 1.0.0\n      x-apisguru-direct: true\n  x-apiClientRegistration:\n    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct\n  x-apisguru-categories:\n    - cloud\n  x-preferred: true\nexternalDocs:\n  description: Amazon Web Services documentation\n  url: https://docs.aws.amazon.com/ecr/\nx-hasEquivalentPaths: true\nsecurity:\n  - hmac: []\npaths:\n  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.BatchCheckLayerAvailability:\n    post:\n      operationId: BatchCheckLayerAvailability\n      description: \u003cp\u003eCheck the availability of multiple image layers in a specified\n        registry and repository.\u003c/p\u003e \u003cnote\u003e \u003cp\u003eThis operation is used by the\n        Amazon ECR proxy, and it is not intended for general use by customers\n        for pulling and pushing images. In most cases, you should use the\n        \u003ccode\u003edocker\u003c/code\u003e CLI to pull, tag, and push images.\u003c/p\u003e \u003c/note\u003e\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BatchCheckLayerAvailabilityResponse\"\n        \"480\":\n          description: RepositoryNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RepositoryNotFoundException\"\n        \"481\":\n          description: InvalidParameterException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidParameterException\"\n        \"482\":\n          description: ServerException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServerException\"\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - AmazonEC2ContainerRegistry_V20150921.BatchCheckLayerAvailability\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/BatchCheckLayerAvailabilityRequest\"\n        required: true\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\n  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.BatchDeleteImage:\n    post:\n      operationId: BatchDeleteImage\n      description: \u003cp\u003eDeletes a list of specified images within a specified repository.\n        Images are specified with either \u003ccode\u003eimageTag\u003c/code\u003e or\n        \u003ccode\u003eimageDigest\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eYou can remove a tag from an image by\n        specifying the image's tag in your request. When you remove the last tag\n        from an image, the image is deleted from your repository.\u003c/p\u003e \u003cp\u003eYou can\n        completely delete an image (and all of its tags) by specifying the\n        image's digest in your request.\u003c/p\u003e\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BatchDeleteImageResponse\"\n        \"480\":\n          description: ServerException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServerException\"\n        \"481\":\n          description: InvalidParameterException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidParameterException\"\n        \"482\":\n          description: RepositoryNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RepositoryNotFoundException\"\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - AmazonEC2ContainerRegistry_V20150921.BatchDeleteImage\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/BatchDeleteImageRequest\"\n        required: true\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\n  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.BatchGetImage:\n    post:\n      operationId: BatchGetImage\n      description: Gets detailed information for specified images within a specified\n        repository. Images are specified with either \u003ccode\u003eimageTag\u003c/code\u003e or\n        \u003ccode\u003eimageDigest\u003c/code\u003e.\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BatchGetImageResponse\"\n        \"480\":\n          description: ServerException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServerException\"\n        \"481\":\n          description: InvalidParameterException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidParameterException\"\n        \"482\":\n          description: RepositoryNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RepositoryNotFoundException\"\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - AmazonEC2ContainerRegistry_V20150921.BatchGetImage\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/BatchGetImageRequest\"\n        required: true\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\n  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.CompleteLayerUpload:\n    post:\n      operationId: CompleteLayerUpload\n      description: \u003cp\u003eInforms Amazon ECR that the image layer upload has completed for a\n        specified registry, repository name, and upload ID. You can optionally\n        provide a \u003ccode\u003esha256\u003c/code\u003e digest of the image layer for data\n        validation purposes.\u003c/p\u003e \u003cnote\u003e \u003cp\u003eThis operation is used by the Amazon\n        ECR proxy, and it is not intended for general use by customers for\n        pulling and pushing images. In most cases, you should use the\n        \u003ccode\u003edocker\u003c/code\u003e CLI to pull, tag, and push images.\u003c/p\u003e \u003c/note\u003e\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CompleteLayerUploadResponse\"\n        \"480\":\n          description: ServerException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServerException\"\n        \"481\":\n          description: InvalidParameterException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidParameterException\"\n        \"482\":\n          description: RepositoryNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RepositoryNotFoundException\"\n        \"483\":\n          description: UploadNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UploadNotFoundException\"\n        \"484\":\n          description: InvalidLayerException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidLayerException\"\n        \"485\":\n          description: LayerPartTooSmallException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LayerPartTooSmallException\"\n        \"486\":\n          description: LayerAlreadyExistsException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LayerAlreadyExistsException\"\n        \"487\":\n          description: EmptyUploadException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/EmptyUploadException\"\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - AmazonEC2ContainerRegistry_V20150921.CompleteLayerUpload\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CompleteLayerUploadRequest\"\n        required: true\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\n  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.CreateRepository:\n    post:\n      operationId: CreateRepository\n      description: Creates an image repository.\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CreateRepositoryResponse\"\n        \"480\":\n          description: ServerException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServerException\"\n        \"481\":\n          description: InvalidParameterException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidParameterException\"\n        \"482\":\n          description: InvalidTagParameterException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidTagParameterException\"\n        \"483\":\n          description: TooManyTagsException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TooManyTagsException\"\n        \"484\":\n          description: RepositoryAlreadyExistsException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RepositoryAlreadyExistsException\"\n        \"485\":\n          description: LimitExceededException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LimitExceededException\"\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - AmazonEC2ContainerRegistry_V20150921.CreateRepository\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CreateRepositoryRequest\"\n        required: true\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\n  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DeleteLifecyclePolicy:\n    post:\n      operationId: DeleteLifecyclePolicy\n      description: Deletes the specified lifecycle policy.\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DeleteLifecyclePolicyResponse\"\n        \"480\":\n          description: ServerException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServerException\"\n        \"481\":\n          description: InvalidParameterException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidParameterException\"\n        \"482\":\n          description: RepositoryNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RepositoryNotFoundException\"\n        \"483\":\n          description: LifecyclePolicyNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LifecyclePolicyNotFoundException\"\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - AmazonEC2ContainerRegistry_V20150921.DeleteLifecyclePolicy\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/DeleteLifecyclePolicyRequest\"\n        required: true\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\n  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DeleteRepository:\n    post:\n      operationId: DeleteRepository\n      description: Deletes an existing image repository. If a repository contains images,\n        you must use the \u003ccode\u003eforce\u003c/code\u003e option to delete it.\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DeleteRepositoryResponse\"\n        \"480\":\n          description: ServerException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServerException\"\n        \"481\":\n          description: InvalidParameterException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidParameterException\"\n        \"482\":\n          description: RepositoryNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RepositoryNotFoundException\"\n        \"483\":\n          description: RepositoryNotEmptyException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RepositoryNotEmptyException\"\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - AmazonEC2ContainerRegistry_V20150921.DeleteRepository\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/DeleteRepositoryRequest\"\n        required: true\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\n  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DeleteRepositoryPolicy:\n    post:\n      operationId: DeleteRepositoryPolicy\n      description: Deletes the repository policy from a specified repository.\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DeleteRepositoryPolicyResponse\"\n        \"480\":\n          description: ServerException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServerException\"\n        \"481\":\n          description: InvalidParameterException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidParameterException\"\n        \"482\":\n          description: RepositoryNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RepositoryNotFoundException\"\n        \"483\":\n          description: RepositoryPolicyNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RepositoryPolicyNotFoundException\"\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - AmazonEC2ContainerRegistry_V20150921.DeleteRepositoryPolicy\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/DeleteRepositoryPolicyRequest\"\n        required: true\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\n  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DescribeImages:\n    post:\n      operationId: DescribeImages\n      description: \u003cp\u003eReturns metadata about the images in a repository, including image\n        size, image tags, and creation date.\u003c/p\u003e \u003cnote\u003e \u003cp\u003eBeginning with Docker\n        version 1.9, the Docker client compresses image layers before pushing\n        them to a V2 Docker registry. The output of the \u003ccode\u003edocker\n        images\u003c/code\u003e command shows the uncompressed image size, so it may\n        return a larger image size than the image sizes returned by\n        \u003ca\u003eDescribeImages\u003c/a\u003e.\u003c/p\u003e \u003c/note\u003e\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DescribeImagesResponse\"\n        \"480\":\n          description: ServerException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServerException\"\n        \"481\":\n          description: InvalidParameterException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidParameterException\"\n        \"482\":\n          description: RepositoryNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RepositoryNotFoundException\"\n        \"483\":\n          description: ImageNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ImageNotFoundException\"\n      parameters:\n        - name: maxResults\n          in: query\n          description: Pagination limit\n          required: false\n          schema:\n            type: string\n        - name: nextToken\n          in: query\n          description: Pagination token\n          required: false\n          schema:\n            type: string\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - AmazonEC2ContainerRegistry_V20150921.DescribeImages\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/DescribeImagesRequest\"\n        required: true\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\n  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DescribeRepositories:\n    post:\n      operationId: DescribeRepositories\n      description: Describes image repositories in a registry.\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DescribeRepositoriesResponse\"\n        \"480\":\n          description: ServerException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServerException\"\n        \"481\":\n          description: InvalidParameterException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidParameterException\"\n        \"482\":\n          description: RepositoryNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RepositoryNotFoundException\"\n      parameters:\n        - name: maxResults\n          in: query\n          description: Pagination limit\n          required: false\n          schema:\n            type: string\n        - name: nextToken\n          in: query\n          description: Pagination token\n          required: false\n          schema:\n            type: string\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - AmazonEC2ContainerRegistry_V20150921.DescribeRepositories\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/DescribeRepositoriesRequest\"\n        required: true\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\n  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetAuthorizationToken:\n    post:\n      operationId: GetAuthorizationToken\n      description: \u003cp\u003eRetrieves a token that is valid for a specified registry for 12\n        hours. This command allows you to use the \u003ccode\u003edocker\u003c/code\u003e CLI to\n        push and pull images with Amazon ECR. If you do not specify a registry,\n        the default registry is assumed.\u003c/p\u003e \u003cp\u003eThe\n        \u003ccode\u003eauthorizationToken\u003c/code\u003e returned for each registry specified is\n        a base64 encoded string that can be decoded and used in a \u003ccode\u003edocker\n        login\u003c/code\u003e command to authenticate to a registry. The AWS CLI offers\n        an \u003ccode\u003eaws ecr get-login\u003c/code\u003e command that simplifies the login\n        process.\u003c/p\u003e\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GetAuthorizationTokenResponse\"\n        \"480\":\n          description: ServerException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServerException\"\n        \"481\":\n          description: InvalidParameterException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidParameterException\"\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - AmazonEC2ContainerRegistry_V20150921.GetAuthorizationToken\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/GetAuthorizationTokenRequest\"\n        required: true\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\n  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetDownloadUrlForLayer:\n    post:\n      operationId: GetDownloadUrlForLayer\n      description: \u003cp\u003eRetrieves the pre-signed Amazon S3 download URL corresponding to an\n        image layer. You can only get URLs for image layers that are referenced\n        in an image.\u003c/p\u003e \u003cnote\u003e \u003cp\u003eThis operation is used by the Amazon ECR\n        proxy, and it is not intended for general use by customers for pulling\n        and pushing images. In most cases, you should use the\n        \u003ccode\u003edocker\u003c/code\u003e CLI to pull, tag, and push images.\u003c/p\u003e \u003c/note\u003e\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GetDownloadUrlForLayerResponse\"\n        \"480\":\n          description: ServerException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServerException\"\n        \"481\":\n          description: InvalidParameterException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidParameterException\"\n        \"482\":\n          description: LayersNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LayersNotFoundException\"\n        \"483\":\n          description: LayerInaccessibleException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LayerInaccessibleException\"\n        \"484\":\n          description: RepositoryNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RepositoryNotFoundException\"\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - AmazonEC2ContainerRegistry_V20150921.GetDownloadUrlForLayer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/GetDownloadUrlForLayerRequest\"\n        required: true\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\n  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetLifecyclePolicy:\n    post:\n      operationId: GetLifecyclePolicy\n      description: Retrieves the specified lifecycle policy.\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GetLifecyclePolicyResponse\"\n        \"480\":\n          description: ServerException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServerException\"\n        \"481\":\n          description: InvalidParameterException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidParameterException\"\n        \"482\":\n          description: RepositoryNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RepositoryNotFoundException\"\n        \"483\":\n          description: LifecyclePolicyNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LifecyclePolicyNotFoundException\"\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - AmazonEC2ContainerRegistry_V20150921.GetLifecyclePolicy\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/GetLifecyclePolicyRequest\"\n        required: true\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\n  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetLifecyclePolicyPreview:\n    post:\n      operationId: GetLifecyclePolicyPreview\n      description: Retrieves the results of the specified lifecycle policy preview request.\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GetLifecyclePolicyPreviewResponse\"\n        \"480\":\n          description: ServerException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServerException\"\n        \"481\":\n          description: InvalidParameterException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidParameterException\"\n        \"482\":\n          description: RepositoryNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RepositoryNotFoundException\"\n        \"483\":\n          description: LifecyclePolicyPreviewNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LifecyclePolicyPreviewNotFoundException\"\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - AmazonEC2ContainerRegistry_V20150921.GetLifecyclePolicyPreview\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/GetLifecyclePolicyPreviewRequest\"\n        required: true\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\n  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetRepositoryPolicy:\n    post:\n      operationId: GetRepositoryPolicy\n      description: Retrieves the repository policy for a specified repository.\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GetRepositoryPolicyResponse\"\n        \"480\":\n          description: ServerException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServerException\"\n        \"481\":\n          description: InvalidParameterException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidParameterException\"\n        \"482\":\n          description: RepositoryNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RepositoryNotFoundException\"\n        \"483\":\n          description: RepositoryPolicyNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RepositoryPolicyNotFoundException\"\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - AmazonEC2ContainerRegistry_V20150921.GetRepositoryPolicy\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/GetRepositoryPolicyRequest\"\n        required: true\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\n  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.InitiateLayerUpload:\n    post:\n      operationId: InitiateLayerUpload\n      description: \u003cp\u003eNotify Amazon ECR that you intend to upload an image layer.\u003c/p\u003e\n        \u003cnote\u003e \u003cp\u003eThis operation is used by the Amazon ECR proxy, and it is not\n        intended for general use by customers for pulling and pushing images. In\n        most cases, you should use the \u003ccode\u003edocker\u003c/code\u003e CLI to pull, tag, and\n        push images.\u003c/p\u003e \u003c/note\u003e\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InitiateLayerUploadResponse\"\n        \"480\":\n          description: ServerException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServerException\"\n        \"481\":\n          description: InvalidParameterException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidParameterException\"\n        \"482\":\n          description: RepositoryNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RepositoryNotFoundException\"\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - AmazonEC2ContainerRegistry_V20150921.InitiateLayerUpload\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/InitiateLayerUploadRequest\"\n        required: true\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\n  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.ListImages:\n    post:\n      operationId: ListImages\n      description: \u003cp\u003eLists all the image IDs for a given repository.\u003c/p\u003e \u003cp\u003eYou can filter\n        images based on whether or not they are tagged by setting the\n        \u003ccode\u003etagStatus\u003c/code\u003e parameter to \u003ccode\u003eTAGGED\u003c/code\u003e or\n        \u003ccode\u003eUNTAGGED\u003c/code\u003e. For example, you can filter your results to\n        return only \u003ccode\u003eUNTAGGED\u003c/code\u003e images and then pipe that result to a\n        \u003ca\u003eBatchDeleteImage\u003c/a\u003e operation to delete them. Or, you can filter\n        your results to return only \u003ccode\u003eTAGGED\u003c/code\u003e images to list all of\n        the tags in your repository.\u003c/p\u003e\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ListImagesResponse\"\n        \"480\":\n          description: ServerException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServerException\"\n        \"481\":\n          description: InvalidParameterException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidParameterException\"\n        \"482\":\n          description: RepositoryNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RepositoryNotFoundException\"\n      parameters:\n        - name: maxResults\n          in: query\n          description: Pagination limit\n          required: false\n          schema:\n            type: string\n        - name: nextToken\n          in: query\n          description: Pagination token\n          required: false\n          schema:\n            type: string\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - AmazonEC2ContainerRegistry_V20150921.ListImages\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ListImagesRequest\"\n        required: true\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\n  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.ListTagsForResource:\n    post:\n      operationId: ListTagsForResource\n      description: List the tags for an Amazon ECR resource.\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ListTagsForResourceResponse\"\n        \"480\":\n          description: InvalidParameterException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidParameterException\"\n        \"481\":\n          description: RepositoryNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RepositoryNotFoundException\"\n        \"482\":\n          description: ServerException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServerException\"\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - AmazonEC2ContainerRegistry_V20150921.ListTagsForResource\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ListTagsForResourceRequest\"\n        required: true\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\n  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.PutImage:\n    post:\n      operationId: PutImage\n      description: \u003cp\u003eCreates or updates the image manifest and tags associated with an\n        image.\u003c/p\u003e \u003cnote\u003e \u003cp\u003eThis operation is used by the Amazon ECR proxy, and\n        it is not intended for general use by customers for pulling and pushing\n        images. In most cases, you should use the \u003ccode\u003edocker\u003c/code\u003e CLI to\n        pull, tag, and push images.\u003c/p\u003e \u003c/note\u003e\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PutImageResponse\"\n        \"480\":\n          description: ServerException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServerException\"\n        \"481\":\n          description: InvalidParameterException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidParameterException\"\n        \"482\":\n          description: RepositoryNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RepositoryNotFoundException\"\n        \"483\":\n          description: ImageAlreadyExistsException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ImageAlreadyExistsException\"\n        \"484\":\n          description: LayersNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LayersNotFoundException\"\n        \"485\":\n          description: LimitExceededException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LimitExceededException\"\n        \"486\":\n          description: ImageTagAlreadyExistsException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ImageTagAlreadyExistsException\"\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - AmazonEC2ContainerRegistry_V20150921.PutImage\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PutImageRequest\"\n        required: true\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\n  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.PutImageTagMutability:\n    post:\n      operationId: PutImageTagMutability\n      description: Updates the image tag mutability settings for a repository.\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PutImageTagMutabilityResponse\"\n        \"480\":\n          description: ServerException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServerException\"\n        \"481\":\n          description: InvalidParameterException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidParameterException\"\n        \"482\":\n          description: RepositoryNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RepositoryNotFoundException\"\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - AmazonEC2ContainerRegistry_V20150921.PutImageTagMutability\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PutImageTagMutabilityRequest\"\n        required: true\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\n  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.PutLifecyclePolicy:\n    post:\n      operationId: PutLifecyclePolicy\n      description: Creates or updates a lifecycle policy. For information about lifecycle\n        policy syntax, see \u003ca\n        href=\"https://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html\"\u003eLifecycle\n        Policy Template\u003c/a\u003e.\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PutLifecyclePolicyResponse\"\n        \"480\":\n          description: ServerException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServerException\"\n        \"481\":\n          description: InvalidParameterException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidParameterException\"\n        \"482\":\n          description: RepositoryNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RepositoryNotFoundException\"\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - AmazonEC2ContainerRegistry_V20150921.PutLifecyclePolicy\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PutLifecyclePolicyRequest\"\n        required: true\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\n  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.SetRepositoryPolicy:\n    post:\n      operationId: SetRepositoryPolicy\n      description: Applies a repository policy on a specified repository to control access\n        permissions. For more information, see \u003ca\n        href=\"https://docs.aws.amazon.com/AmazonECR/latest/userguide/RepositoryPolicies.html\"\u003eAmazon\n        ECR Repository Policies\u003c/a\u003e in the \u003ci\u003eAmazon Elastic Container Registry\n        User Guide\u003c/i\u003e.\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SetRepositoryPolicyResponse\"\n        \"480\":\n          description: ServerException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServerException\"\n        \"481\":\n          description: InvalidParameterException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidParameterException\"\n        \"482\":\n          description: RepositoryNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RepositoryNotFoundException\"\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - AmazonEC2ContainerRegistry_V20150921.SetRepositoryPolicy\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/SetRepositoryPolicyRequest\"\n        required: true\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\n  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.StartLifecyclePolicyPreview:\n    post:\n      operationId: StartLifecyclePolicyPreview\n      description: Starts a preview of the specified lifecycle policy. This allows you to\n        see the results before creating the lifecycle policy.\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StartLifecyclePolicyPreviewResponse\"\n        \"480\":\n          description: ServerException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServerException\"\n        \"481\":\n          description: InvalidParameterException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidParameterException\"\n        \"482\":\n          description: RepositoryNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RepositoryNotFoundException\"\n        \"483\":\n          description: LifecyclePolicyNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LifecyclePolicyNotFoundException\"\n        \"484\":\n          description: LifecyclePolicyPreviewInProgressException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LifecyclePolicyPreviewInProgressExcepti\\\n                  on\"\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - AmazonEC2ContainerRegistry_V20150921.StartLifecyclePolicyPreview\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/StartLifecyclePolicyPreviewRequest\"\n        required: true\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\n  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.TagResource:\n    post:\n      operationId: TagResource\n      description: Adds specified tags to a resource with the specified ARN. Existing tags\n        on a resource are not changed if they are not specified in the request\n        parameters.\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TagResourceResponse\"\n        \"480\":\n          description: InvalidParameterException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidParameterException\"\n        \"481\":\n          description: InvalidTagParameterException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidTagParameterException\"\n        \"482\":\n          description: TooManyTagsException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TooManyTagsException\"\n        \"483\":\n          description: RepositoryNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RepositoryNotFoundException\"\n        \"484\":\n          description: ServerException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServerException\"\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - AmazonEC2ContainerRegistry_V20150921.TagResource\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/TagResourceRequest\"\n        required: true\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\n  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.UntagResource:\n    post:\n      operationId: UntagResource\n      description: Deletes specified tags from a resource.\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UntagResourceResponse\"\n        \"480\":\n          description: InvalidParameterException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidParameterException\"\n        \"481\":\n          description: InvalidTagParameterException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidTagParameterException\"\n        \"482\":\n          description: TooManyTagsException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TooManyTagsException\"\n        \"483\":\n          description: RepositoryNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RepositoryNotFoundException\"\n        \"484\":\n          description: ServerException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServerException\"\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - AmazonEC2ContainerRegistry_V20150921.UntagResource\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UntagResourceRequest\"\n        required: true\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\n  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.UploadLayerPart:\n    post:\n      operationId: UploadLayerPart\n      description: \u003cp\u003eUploads an image layer part to Amazon ECR.\u003c/p\u003e \u003cnote\u003e \u003cp\u003eThis\n        operation is used by the Amazon ECR proxy, and it is not intended for\n        general use by customers for pulling and pushing images. In most cases,\n        you should use the \u003ccode\u003edocker\u003c/code\u003e CLI to pull, tag, and push\n        images.\u003c/p\u003e \u003c/note\u003e\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UploadLayerPartResponse\"\n        \"480\":\n          description: ServerException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServerException\"\n        \"481\":\n          description: InvalidParameterException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidParameterException\"\n        \"482\":\n          description: InvalidLayerPartException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidLayerPartException\"\n        \"483\":\n          description: RepositoryNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RepositoryNotFoundException\"\n        \"484\":\n          description: UploadNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UploadNotFoundException\"\n        \"485\":\n          description: LimitExceededException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LimitExceededException\"\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - AmazonEC2ContainerRegistry_V20150921.UploadLayerPart\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UploadLayerPartRequest\"\n        required: true\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\nservers:\n  - url: http://api.ecr.{region}.amazonaws.com\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - us-east-1\n          - us-east-2\n          - us-west-1\n          - us-west-2\n          - us-gov-west-1\n          - us-gov-east-1\n          - ca-central-1\n          - eu-north-1\n          - eu-west-1\n          - eu-west-2\n          - eu-west-3\n          - eu-central-1\n          - ap-northeast-1\n          - ap-northeast-2\n          - ap-northeast-3\n          - ap-southeast-1\n          - ap-southeast-2\n          - ap-south-1\n          - sa-east-1\n        default: us-east-1\n    description: The Amazon ECR multi-region endpoint\n  - url: https://api.ecr.{region}.amazonaws.com\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - us-east-1\n          - us-east-2\n          - us-west-1\n          - us-west-2\n          - us-gov-west-1\n          - us-gov-east-1\n          - ca-central-1\n          - eu-north-1\n          - eu-west-1\n          - eu-west-2\n          - eu-west-3\n          - eu-central-1\n          - ap-northeast-1\n          - ap-northeast-2\n          - ap-northeast-3\n          - ap-southeast-1\n          - ap-southeast-2\n          - ap-south-1\n          - sa-east-1\n        default: us-east-1\n    description: The Amazon ECR multi-region endpoint\n  - url: http://api.ecr.{region}.amazonaws.com.cn\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - cn-north-1\n          - cn-northwest-1\n        default: cn-north-1\n    description: The Amazon ECR endpoint for China (Beijing) and China (Ningxia)\n  - url: https://api.ecr.{region}.amazonaws.com.cn\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - cn-north-1\n          - cn-northwest-1\n        default: cn-north-1\n    description: The Amazon ECR endpoint for China (Beijing) and China (Ningxia)\ncomponents:\n  parameters:\n    X-Amz-Content-Sha256:\n      name: X-Amz-Content-Sha256\n      in: header\n      required: false\n      schema:\n        type: string\n    X-Amz-Date:\n      name: X-Amz-Date\n      in: header\n      required: false\n      schema:\n        type: string\n    X-Amz-Algorithm:\n      name: X-Amz-Algorithm\n      in: header\n      required: false\n      schema:\n        type: string\n    X-Amz-Credential:\n      name: X-Amz-Credential\n      in: header\n      required: false\n      schema:\n        type: string\n    X-Amz-Security-Token:\n      name: X-Amz-Security-Token\n      in: header\n      required: false\n      schema:\n        type: string\n    X-Amz-Signature:\n      name: X-Amz-Signature\n      in: header\n      required: false\n      schema:\n        type: string\n    X-Amz-SignedHeaders:\n      name: X-Amz-SignedHeaders\n      in: header\n      required: false\n      schema:\n        type: string\n  securitySchemes:\n    hmac:\n      type: apiKey\n      name: Authorization\n      in: header\n      description: Amazon Signature authorization v4\n      x-amazon-apigateway-authtype: awsSigv4\n  schemas:\n    BatchCheckLayerAvailabilityResponse:\n      type: object\n      properties:\n        layers:\n          $ref: \"#/components/schemas/LayerList\"\n        failures:\n          $ref: \"#/components/schemas/LayerFailureList\"\n    BatchCheckLayerAvailabilityRequest:\n      type: object\n      required:\n        - repositoryName\n        - layerDigests\n      properties:\n        registryId:\n          $ref: \"#/components/schemas/RegistryId\"\n        repositoryName:\n          $ref: \"#/components/schemas/RepositoryName\"\n        layerDigests:\n          $ref: \"#/components/schemas/BatchedOperationLayerDigestList\"\n    RepositoryNotFoundException: {}\n    InvalidParameterException: {}\n    ServerException: {}\n    BatchDeleteImageResponse:\n      type: object\n      example:\n        failures: []\n        imageIds:\n          - imageDigest: sha256:examplee6d1e504117a17000003d3753086354a38375961f2e665416ef4b1b2f\n            imageTag: precise\n      properties:\n        imageIds:\n          $ref: \"#/components/schemas/ImageIdentifierList\"\n        failures:\n          $ref: \"#/components/schemas/ImageFailureList\"\n    BatchDeleteImageRequest:\n      type: object\n      required:\n        - repositoryName\n        - imageIds\n      properties:\n        registryId:\n          $ref: \"#/components/schemas/RegistryId\"\n        repositoryName:\n          $ref: \"#/components/schemas/RepositoryName\"\n        imageIds:\n          $ref: \"#/components/schemas/ImageIdentifierList\"\n      description: Deletes specified images within a specified repository. Images are\n        specified with either the \u003ccode\u003eimageTag\u003c/code\u003e or\n        \u003ccode\u003eimageDigest\u003c/code\u003e.\n    BatchGetImageResponse:\n      type: object\n      example:\n        failures: []\n        images:\n          - imageId:\n              imageDigest: sha256:example76bdff6d83a09ba2a818f0d00000063724a9ac3ba5019c56f74ebf42a\n              imageTag: precise\n            imageManifest: |-\n              {\n               \"schemaVersion\": 1,\n               \"name\": \"ubuntu\",\n               \"tag\": \"precise\",\n              ...\n            registryId: \"244698725403\"\n            repositoryName: ubuntu\n      properties:\n        images:\n          $ref: \"#/components/schemas/ImageList\"\n        failures:\n          $ref: \"#/components/schemas/ImageFailureList\"\n    BatchGetImageRequest:\n      type: object\n      required:\n        - repositoryName\n        - imageIds\n      properties:\n        registryId:\n          $ref: \"#/components/schemas/RegistryId\"\n        repositoryName:\n          $ref: \"#/components/schemas/RepositoryName\"\n        imageIds:\n          $ref: \"#/components/schemas/ImageIdentifierList\"\n        acceptedMediaTypes:\n          $ref: \"#/components/schemas/MediaTypeList\"\n    CompleteLayerUploadResponse:\n      type: object\n      properties:\n        registryId:\n          $ref: \"#/components/schemas/RegistryId\"\n        repositoryName:\n          $ref: \"#/components/schemas/RepositoryName\"\n        uploadId:\n          $ref: \"#/components/schemas/UploadId\"\n        layerDigest:\n          $ref: \"#/components/schemas/LayerDigest\"\n    CompleteLayerUploadRequest:\n      type: object\n      required:\n        - repositoryName\n        - uploadId\n        - layerDigests\n      properties:\n        registryId:\n          $ref: \"#/components/schemas/RegistryId\"\n        repositoryName:\n          $ref: \"#/components/schemas/RepositoryName\"\n        uploadId:\n          $ref: \"#/components/schemas/UploadId\"\n        layerDigests:\n          $ref: \"#/components/schemas/LayerDigestList\"\n    UploadNotFoundException: {}\n    InvalidLayerException: {}\n    LayerPartTooSmallException: {}\n    LayerAlreadyExistsException: {}\n    EmptyUploadException: {}\n    CreateRepositoryResponse:\n      type: object\n      example:\n        repository:\n          registryId: 12345678901\n          repositoryArn: arn:aws:ecr:us-west-2:012345678901:repository/project-a/nginx-web-app\n          repositoryName: project-a/nginx-web-app\n      properties:\n        repository:\n          $ref: \"#/components/schemas/Repository\"\n    CreateRepositoryRequest:\n      type: object\n      required:\n        - repositoryName\n      properties:\n        repositoryName:\n          $ref: \"#/components/schemas/RepositoryName\"\n        tags:\n          $ref: \"#/components/schemas/TagList\"\n        imageTagMutability:\n          $ref: \"#/components/schemas/ImageTagMutability\"\n    InvalidTagParameterException: {}\n    TooManyTagsException: {}\n    RepositoryAlreadyExistsException: {}\n    LimitExceededException: {}\n    DeleteLifecyclePolicyResponse:\n      type: object\n      properties:\n        registryId:\n          $ref: \"#/components/schemas/RegistryId\"\n        repositoryName:\n          $ref: \"#/components/schemas/RepositoryName\"\n        lifecyclePolicyText:\n          $ref: \"#/components/schemas/LifecyclePolicyText\"\n        lastEvaluatedAt:\n          $ref: \"#/components/schemas/EvaluationTimestamp\"\n    DeleteLifecyclePolicyRequest:\n      type: object\n      required:\n        - repositoryName\n      properties:\n        registryId:\n          $ref: \"#/components/schemas/RegistryId\"\n        repositoryName:\n          $ref: \"#/components/schemas/RepositoryName\"\n    LifecyclePolicyNotFoundException: {}\n    DeleteRepositoryResponse:\n      type: object\n      example:\n        repository:\n          registryId: 12345678901\n          repositoryArn: arn:aws:ecr:us-west-2:012345678901:repository/ubuntu\n          repositoryName: ubuntu\n      properties:\n        repository:\n          $ref: \"#/components/schemas/Repository\"\n    DeleteRepositoryRequest:\n      type: object\n      required:\n        - repositoryName\n      properties:\n        registryId:\n          $ref: \"#/components/schemas/RegistryId\"\n        repositoryName:\n          $ref: \"#/components/schemas/RepositoryName\"\n        force:\n          $ref: \"#/components/schemas/ForceFlag\"\n    RepositoryNotEmptyException: {}\n    DeleteRepositoryPolicyResponse:\n      type: object\n      example:\n        policyText: \"{ ... }\"\n        registryId: 12345678901\n        repositoryName: ubuntu\n      properties:\n        registryId:\n          $ref: \"#/components/schemas/RegistryId\"\n        repositoryName:\n          $ref: \"#/components/schemas/RepositoryName\"\n        policyText:\n          $ref: \"#/components/schemas/RepositoryPolicyText\"\n    DeleteRepositoryPolicyRequest:\n      type: object\n      required:\n        - repositoryName\n      properties:\n        registryId:\n          $ref: \"#/components/schemas/RegistryId\"\n        repositoryName:\n          $ref: \"#/components/schemas/RepositoryName\"\n    RepositoryPolicyNotFoundException: {}\n    DescribeImagesResponse:\n      type: object\n      properties:\n        imageDetails:\n          $ref: \"#/components/schemas/ImageDetailList\"\n        nextToken:\n          $ref: \"#/components/schemas/NextToken\"\n    DescribeImagesRequest:\n      type: object\n      required:\n        - repositoryName\n      properties:\n        registryId:\n          $ref: \"#/components/schemas/RegistryId\"\n        repositoryName:\n          $ref: \"#/components/schemas/RepositoryName\"\n        imageIds:\n          $ref: \"#/components/schemas/ImageIdentifierList\"\n        nextToken:\n          $ref: \"#/components/schemas/NextToken\"\n        maxResults:\n          $ref: \"#/components/schemas/MaxResults\"\n        filter:\n          $ref: \"#/components/schemas/DescribeImagesFilter\"\n    ImageNotFoundException: {}\n    DescribeRepositoriesResponse:\n      type: object\n      example:\n        repositories:\n          - registryId: 12345678910\n            repositoryArn: arn:aws:ecr:us-west-2:012345678910:repository/ubuntu\n            repositoryName: ubuntu\n          - registryId: 12345678910\n            repositoryArn: arn:aws:ecr:us-west-2:012345678910:repository/test\n            repositoryName: test\n      properties:\n        repositories:\n          $ref: \"#/components/schemas/RepositoryList\"\n        nextToken:\n          $ref: \"#/components/schemas/NextToken\"\n    DescribeRepositoriesRequest:\n      type: object\n      properties:\n        registryId:\n          $ref: \"#/components/schemas/RegistryId\"\n        repositoryNames:\n          $ref: \"#/components/schemas/RepositoryNameList\"\n        nextToken:\n          $ref: \"#/components/schemas/NextToken\"\n        maxResults:\n          $ref: \"#/components/schemas/MaxResults\"\n    GetAuthorizationTokenResponse:\n      type: object\n      example:\n        authorizationData:\n          - authorizationToken: QVdTOkN...\n            expiresAt: \"1470951892432\"\n            proxyEndpoint: https://012345678901.dkr.ecr.us-west-2.amazonaws.com\n      properties:\n        authorizationData:\n          $ref: \"#/components/schemas/AuthorizationDataList\"\n    GetAuthorizationTokenRequest:\n      type: object\n      properties:\n        registryIds:\n          $ref: \"#/components/schemas/GetAuthorizationTokenRegistryIdList\"\n    GetDownloadUrlForLayerResponse:\n      type: object\n      properties:\n        downloadUrl:\n          $ref: \"#/components/schemas/Url\"\n        layerDigest:\n          $ref: \"#/components/schemas/LayerDigest\"\n    GetDownloadUrlForLayerRequest:\n      type: object\n      required:\n        - repositoryName\n        - layerDigest\n      properties:\n        registryId:\n          $ref: \"#/components/schemas/RegistryId\"\n        repositoryName:\n          $ref: \"#/components/schemas/RepositoryName\"\n        layerDigest:\n          $ref: \"#/components/schemas/LayerDigest\"\n    LayersNotFoundException: {}\n    LayerInaccessibleException: {}\n    GetLifecyclePolicyResponse:\n      type: object\n      properties:\n        registryId:\n          $ref: \"#/components/schemas/RegistryId\"\n        repositoryName:\n          $ref: \"#/components/schemas/RepositoryName\"\n        lifecyclePolicyText:\n          $ref: \"#/components/schemas/LifecyclePolicyText\"\n        lastEvaluatedAt:\n          $ref: \"#/components/schemas/EvaluationTimestamp\"\n    GetLifecyclePolicyRequest:\n      type: object\n      required:\n        - repositoryName\n      properties:\n        registryId:\n          $ref: \"#/components/schemas/RegistryId\"\n        repositoryName:\n          $ref: \"#/components/schemas/RepositoryName\"\n    GetLifecyclePolicyPreviewResponse:\n      type: object\n      properties:\n        registryId:\n          $ref: \"#/components/schemas/RegistryId\"\n        repositoryName:\n          $ref: \"#/components/schemas/RepositoryName\"\n        lifecyclePolicyText:\n          $ref: \"#/components/schemas/LifecyclePolicyText\"\n        status:\n          $ref: \"#/components/schemas/LifecyclePolicyPreviewStatus\"\n        nextToken:\n          $ref: \"#/components/schemas/NextToken\"\n        previewResults:\n          $ref: \"#/components/schemas/LifecyclePolicyPreviewResultList\"\n        summary:\n          $ref: \"#/components/schemas/LifecyclePolicyPreviewSummary\"\n    GetLifecyclePolicyPreviewRequest:\n      type: object\n      required:\n        - repositoryName\n      properties:\n        registryId:\n          $ref: \"#/components/schemas/RegistryId\"\n        repositoryName:\n          $ref: \"#/components/schemas/RepositoryName\"\n        imageIds:\n          $ref: \"#/components/schemas/ImageIdentifierList\"\n        nextToken:\n          $ref: \"#/components/schemas/NextToken\"\n        maxResults:\n          $ref: \"#/components/schemas/LifecyclePreviewMaxResults\"\n        filter:\n          $ref: \"#/components/schemas/LifecyclePolicyPreviewFilter\"\n    LifecyclePolicyPreviewNotFoundException: {}\n    GetRepositoryPolicyResponse:\n      type: object\n      example:\n        policyText: \u003e-\n          {\n            \"Version\" : \"2008-10-17\",\n            \"Statement\" : [ {\n              \"Sid\" : \"new statement\",\n              \"Effect\" : \"Allow\",\n              \"Principal\" : {\n               \"AWS\" : \"arn:aws:iam::012345678901:role/CodeDeployDemo\"\n              },\n          \"Action\" : [ \"ecr:GetDownloadUrlForLayer\", \"ecr:BatchGetImage\", \"ecr:BatchCheckLayerAvailability\" ]\n           } ]\n          }\n        registryId: 12345678901\n        repositoryName: ubuntu\n      properties:\n        registryId:\n          $ref: \"#/components/schemas/RegistryId\"\n        repositoryName:\n          $ref: \"#/components/schemas/RepositoryName\"\n        policyText:\n          $ref: \"#/components/schemas/RepositoryPolicyText\"\n    GetRepositoryPolicyRequest:\n      type: object\n      required:\n        - repositoryName\n      properties:\n        registryId:\n          $ref: \"#/components/schemas/RegistryId\"\n        repositoryName:\n          $ref: \"#/components/schemas/RepositoryName\"\n    InitiateLayerUploadResponse:\n      type: object\n      properties:\n        uploadId:\n          $ref: \"#/components/schemas/UploadId\"\n        partSize:\n          $ref: \"#/components/schemas/PartSize\"\n    InitiateLayerUploadRequest:\n      type: object\n      required:\n        - repositoryName\n      properties:\n        registryId:\n          $ref: \"#/components/schemas/RegistryId\"\n        repositoryName:\n          $ref: \"#/components/schemas/RepositoryName\"\n    ListImagesResponse:\n      type: object\n      example:\n        imageIds:\n          - imageDigest: sha256:764f63476bdff6d83a09ba2a818f0d35757063724a9ac3ba5019c56f74ebf42a\n            imageTag: precise\n      properties:\n        imageIds:\n          $ref: \"#/components/schemas/ImageIdentifierList\"\n        nextToken:\n          $ref: \"#/components/schemas/NextToken\"\n    ListImagesRequest:\n      type: object\n      required:\n        - repositoryName\n      properties:\n        registryId:\n          $ref: \"#/components/schemas/RegistryId\"\n        repositoryName:\n          $ref: \"#/components/schemas/RepositoryName\"\n        nextToken:\n          $ref: \"#/components/schemas/NextToken\"\n        maxResults:\n          $ref: \"#/components/schemas/MaxResults\"\n        filter:\n          $ref: \"#/components/schemas/ListImagesFilter\"\n    ListTagsForResourceResponse:\n      type: object\n      properties:\n        tags:\n          $ref: \"#/components/schemas/TagList\"\n    ListTagsForResourceRequest:\n      type: object\n      required:\n        - resourceArn\n      properties:\n        resourceArn:\n          $ref: \"#/components/schemas/Arn\"\n    PutImageResponse:\n      type: object\n      properties:\n        image:\n          $ref: \"#/components/schemas/Image\"\n    PutImageRequest:\n      type: object\n      required:\n        - repositoryName\n        - imageManifest\n      properties:\n        registryId:\n          $ref: \"#/components/schemas/RegistryId\"\n        repositoryName:\n          $ref: \"#/components/schemas/RepositoryName\"\n        imageManifest:\n          $ref: \"#/components/schemas/ImageManifest\"\n        imageTag:\n          $ref: \"#/components/schemas/ImageTag\"\n    ImageAlreadyExistsException: {}\n    ImageTagAlreadyExistsException: {}\n    PutImageTagMutabilityResponse:\n      type: object\n      properties:\n        registryId:\n          $ref: \"#/components/schemas/RegistryId\"\n        repositoryName:\n          $ref: \"#/components/schemas/RepositoryName\"\n        imageTagMutability:\n          $ref: \"#/components/schemas/ImageTagMutability\"\n    PutImageTagMutabilityRequest:\n      type: object\n      required:\n        - repositoryName\n        - imageTagMutability\n      properties:\n        registryId:\n          $ref: \"#/components/schemas/RegistryId\"\n        repositoryName:\n          $ref: \"#/components/schemas/RepositoryName\"\n        imageTagMutability:\n          $ref: \"#/components/schemas/ImageTagMutability\"\n    PutLifecyclePolicyResponse:\n      type: object\n      properties:\n        registryId:\n          $ref: \"#/components/schemas/RegistryId\"\n        repositoryName:\n          $ref: \"#/components/schemas/RepositoryName\"\n        lifecyclePolicyText:\n          $ref: \"#/components/schemas/LifecyclePolicyText\"\n    PutLifecyclePolicyRequest:\n      type: object\n      required:\n        - repositoryName\n        - lifecyclePolicyText\n      properties:\n        registryId:\n          $ref: \"#/components/schemas/RegistryId\"\n        repositoryName:\n          $ref: \"#/components/schemas/RepositoryName\"\n        lifecyclePolicyText:\n          $ref: \"#/components/schemas/LifecyclePolicyText\"\n    SetRepositoryPolicyResponse:\n      type: object\n      properties:\n        registryId:\n          $ref: \"#/components/schemas/RegistryId\"\n        repositoryName:\n          $ref: \"#/components/schemas/RepositoryName\"\n        policyText:\n          $ref: \"#/components/schemas/RepositoryPolicyText\"\n    SetRepositoryPolicyRequest:\n      type: object\n      required:\n        - repositoryName\n        - policyText\n      properties:\n        registryId:\n          $ref: \"#/components/schemas/RegistryId\"\n        repositoryName:\n          $ref: \"#/components/schemas/RepositoryName\"\n        policyText:\n          $ref: \"#/components/schemas/RepositoryPolicyText\"\n        force:\n          $ref: \"#/components/schemas/ForceFlag\"\n    StartLifecyclePolicyPreviewResponse:\n      type: object\n      properties:\n        registryId:\n          $ref: \"#/components/schemas/RegistryId\"\n        repositoryName:\n          $ref: \"#/components/schemas/RepositoryName\"\n        lifecyclePolicyText:\n          $ref: \"#/components/schemas/LifecyclePolicyText\"\n        status:\n          $ref: \"#/components/schemas/LifecyclePolicyPreviewStatus\"\n    StartLifecyclePolicyPreviewRequest:\n      type: object\n      required:\n        - repositoryName\n      properties:\n        registryId:\n          $ref: \"#/components/schemas/RegistryId\"\n        repositoryName:\n          $ref: \"#/components/schemas/RepositoryName\"\n        lifecyclePolicyText:\n          $ref: \"#/components/schemas/LifecyclePolicyText\"\n    LifecyclePolicyPreviewInProgressException: {}\n    TagResourceResponse:\n      type: object\n      properties: {}\n    TagResourceRequest:\n      type: object\n      required:\n        - resourceArn\n        - tags\n      properties:\n        resourceArn:\n          $ref: \"#/components/schemas/Arn\"\n        tags:\n          $ref: \"#/components/schemas/TagList\"\n    UntagResourceResponse:\n      type: object\n      properties: {}\n    UntagResourceRequest:\n      type: object\n      required:\n        - resourceArn\n        - tagKeys\n      properties:\n        resourceArn:\n          $ref: \"#/components/schemas/Arn\"\n        tagKeys:\n          $ref: \"#/components/schemas/TagKeyList\"\n    UploadLayerPartResponse:\n      type: object\n      properties:\n        registryId:\n          $ref: \"#/components/schemas/RegistryId\"\n        repositoryName:\n          $ref: \"#/components/schemas/RepositoryName\"\n        uploadId:\n          $ref: \"#/components/schemas/UploadId\"\n        lastByteReceived:\n          $ref: \"#/components/schemas/PartSize\"\n    UploadLayerPartRequest:\n      type: object\n      required:\n        - repositoryName\n        - uploadId\n        - partFirstByte\n        - partLastByte\n        - layerPartBlob\n      properties:\n        registryId:\n          $ref: \"#/components/schemas/RegistryId\"\n        repositoryName:\n          $ref: \"#/components/schemas/RepositoryName\"\n        uploadId:\n          $ref: \"#/components/schemas/UploadId\"\n        partFirstByte:\n          $ref: \"#/components/schemas/PartSize\"\n        partLastByte:\n          $ref: \"#/components/schemas/PartSize\"\n        layerPartBlob:\n          $ref: \"#/components/schemas/LayerPartBlob\"\n    InvalidLayerPartException: {}\n    Arn:\n      type: string\n    Base64:\n      type: string\n      pattern: ^\\S+$\n    ExpirationTimestamp:\n      type: string\n      format: date-time\n    ProxyEndpoint:\n      type: string\n    AuthorizationData:\n      type: object\n      properties:\n        authorizationToken:\n          $ref: \"#/components/schemas/Base64\"\n        expiresAt:\n          $ref: \"#/components/schemas/ExpirationTimestamp\"\n        proxyEndpoint:\n          $ref: \"#/components/schemas/ProxyEndpoint\"\n      description: An object representing authorization data for an Amazon ECR registry.\n    AuthorizationDataList:\n      type: array\n      items:\n        $ref: \"#/components/schemas/AuthorizationData\"\n    RegistryId:\n      type: string\n      pattern: \"[0-9]{12}\"\n    RepositoryName:\n      type: string\n      pattern: (?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*\n      minLength: 2\n      maxLength: 256\n    BatchedOperationLayerDigestList:\n      type: array\n      items:\n        $ref: \"#/components/schemas/BatchedOperationLayerDigest\"\n      minItems: 1\n      maxItems: 100\n    LayerList:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Layer\"\n    LayerFailureList:\n      type: array\n      items:\n        $ref: \"#/components/schemas/LayerFailure\"\n    ImageIdentifierList:\n      type: array\n      items:\n        $ref: \"#/components/schemas/ImageIdentifier\"\n      minItems: 1\n      maxItems: 100\n    ImageFailureList:\n      type: array\n      items:\n        $ref: \"#/components/schemas/ImageFailure\"\n    MediaTypeList:\n      type: array\n      items:\n        $ref: \"#/components/schemas/MediaType\"\n      minItems: 1\n      maxItems: 100\n    ImageList:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Image\"\n    BatchedOperationLayerDigest:\n      type: string\n      minLength: 0\n      maxLength: 1000\n    UploadId:\n      type: string\n      pattern: \"[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F\\\n        ]{12}\"\n    LayerDigestList:\n      type: array\n      items:\n        $ref: \"#/components/schemas/LayerDigest\"\n      minItems: 1\n      maxItems: 100\n    LayerDigest:\n      type: string\n      pattern: \"[a-zA-Z0-9-_+.]+:[a-fA-F0-9]+\"\n    TagList:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Tag\"\n    ImageTagMutability:\n      type: string\n      enum:\n        - MUTABLE\n        - IMMUTABLE\n    Repository:\n      type: object\n      properties:\n        repositoryArn:\n          $ref: \"#/components/schemas/Arn\"\n        registryId:\n          $ref: \"#/components/schemas/RegistryId\"\n        repositoryName:\n          $ref: \"#/components/schemas/RepositoryName\"\n        repositoryUri:\n          $ref: \"#/components/schemas/Url\"\n        createdAt:\n          $ref: \"#/components/schemas/CreationTimestamp\"\n        imageTagMutability:\n          $ref: \"#/components/schemas/ImageTagMutability\"\n      description: An object representing a repository.\n    CreationTimestamp:\n      type: string\n      format: date-time\n    LifecyclePolicyText:\n      type: string\n      minLength: 100\n      maxLength: 30720\n    EvaluationTimestamp:\n      type: string\n      format: date-time\n    RepositoryPolicyText:\n      type: string\n      minLength: 0\n      maxLength: 10240\n    ForceFlag:\n      type: boolean\n    TagStatus:\n      type: string\n      enum:\n        - TAGGED\n        - UNTAGGED\n        - ANY\n    DescribeImagesFilter:\n      type: object\n      properties:\n        tagStatus:\n          $ref: \"#/components/schemas/TagStatus\"\n      description: An object representing a filter on a \u003ca\u003eDescribeImages\u003c/a\u003e operation.\n    NextToken:\n      type: string\n    MaxResults:\n      type: integer\n      minimum: 1\n      maximum: 1000\n    ImageDetailList:\n      type: array\n      items:\n        $ref: \"#/components/schemas/ImageDetail\"\n    RepositoryNameList:\n      type: array\n      items:\n        $ref: \"#/components/schemas/RepositoryName\"\n      minItems: 1\n      maxItems: 100\n    RepositoryList:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Repository\"\n    GetAuthorizationTokenRegistryIdList:\n      type: array\n      items:\n        $ref: \"#/components/schemas/RegistryId\"\n      minItems: 1\n      maxItems: 10\n    Url:\n      type: string\n    LifecyclePreviewMaxResults:\n      type: integer\n      minimum: 1\n      maximum: 100\n    LifecyclePolicyPreviewFilter:\n      type: object\n      properties:\n        tagStatus:\n          $ref: \"#/components/schemas/TagStatus\"\n      description: The filter for the lifecycle policy preview.\n    LifecyclePolicyPreviewStatus:\n      type: string\n      enum:\n        - IN_PROGRESS\n        - COMPLETE\n        - EXPIRED\n        - FAILED\n    LifecyclePolicyPreviewResultList:\n      type: array\n      items:\n        $ref: \"#/components/schemas/LifecyclePolicyPreviewResult\"\n    LifecyclePolicyPreviewSummary:\n      type: object\n      properties:\n        expiringImageTotalCount:\n          $ref: \"#/components/schemas/ImageCount\"\n      description: The summary of the lifecycle policy preview request.\n    ImageIdentifier:\n      type: object\n      properties:\n        imageDigest:\n          $ref: \"#/components/schemas/ImageDigest\"\n        imageTag:\n          $ref: \"#/components/schemas/ImageTag\"\n      description: An object with identifying information for an Amazon ECR image.\n    ImageManifest:\n      type: string\n    Image:\n      type: object\n      properties:\n        registryId:\n          $ref: \"#/components/schemas/RegistryId\"\n        repositoryName:\n          $ref: \"#/components/schemas/RepositoryName\"\n        imageId:\n          $ref: \"#/components/schemas/ImageIdentifier\"\n        imageManifest:\n          $ref: \"#/components/schemas/ImageManifest\"\n      description: An object representing an Amazon ECR image.\n    ImageActionType:\n      type: string\n      enum:\n        - EXPIRE\n    ImageCount:\n      type: integer\n      minimum: 0\n    ImageDigest:\n      type: string\n    ImageTagList:\n      type: array\n      items:\n        $ref: \"#/components/schemas/ImageTag\"\n    ImageSizeInBytes:\n      type: integer\n    PushTimestamp:\n      type: string\n      format: date-time\n    ImageDetail:\n      type: object\n      properties:\n        registryId:\n          $ref: \"#/components/schemas/RegistryId\"\n        repositoryName:\n          $ref: \"#/components/schemas/RepositoryName\"\n        imageDigest:\n          $ref: \"#/components/schemas/ImageDigest\"\n        imageTags:\n          $ref: \"#/components/schemas/ImageTagList\"\n        imageSizeInBytes:\n          $ref: \"#/components/schemas/ImageSizeInBytes\"\n        imagePushedAt:\n          $ref: \"#/components/schemas/PushTimestamp\"\n      description: An object that describes an image returned by a \u003ca\u003eDescribeImages\u003c/a\u003e\n        operation.\n    ImageFailureCode:\n      type: string\n      enum:\n        - InvalidImageDigest\n        - InvalidImageTag\n        - ImageTagDoesNotMatchDigest\n        - ImageNotFound\n        - MissingDigestAndTag\n    ImageFailureReason:\n      type: string\n    ImageFailure:\n      type: object\n      properties:\n        imageId:\n          $ref: \"#/components/schemas/ImageIdentifier\"\n        failureCode:\n          $ref: \"#/components/schemas/ImageFailureCode\"\n        failureReason:\n          $ref: \"#/components/schemas/ImageFailureReason\"\n      description: An object representing an Amazon ECR image failure.\n    ImageTag:\n      type: string\n      minLength: 1\n      maxLength: 300\n    PartSize:\n      type: integer\n      minimum: 0\n    LayerAvailability:\n      type: string\n      enum:\n        - AVAILABLE\n        - UNAVAILABLE\n    LayerSizeInBytes:\n      type: integer\n    MediaType:\n      type: string\n    Layer:\n      type: object\n      properties:\n        layerDigest:\n          $ref: \"#/components/schemas/LayerDigest\"\n        layerAvailability:\n          $ref: \"#/components/schemas/LayerAvailability\"\n        layerSize:\n          $ref: \"#/components/schemas/LayerSizeInBytes\"\n        mediaType:\n          $ref: \"#/components/schemas/MediaType\"\n      description: An object representing an Amazon ECR image layer.\n    LayerFailureCode:\n      type: string\n      enum:\n        - InvalidLayerDigest\n        - MissingLayerDigest\n    LayerFailureReason:\n      type: string\n    LayerFailure:\n      type: object\n      properties:\n        layerDigest:\n          $ref: \"#/components/schemas/BatchedOperationLayerDigest\"\n        failureCode:\n          $ref: \"#/components/schemas/LayerFailureCode\"\n        failureReason:\n          $ref: \"#/components/schemas/LayerFailureReason\"\n      description: An object representing an Amazon ECR image layer failure.\n    LayerPartBlob:\n      type: string\n    LifecyclePolicyRuleAction:\n      type: object\n      properties:\n        type:\n          $ref: \"#/components/schemas/ImageActionType\"\n      description: The type of action to be taken.\n    LifecyclePolicyRulePriority:\n      type: integer\n      minimum: 1\n    LifecyclePolicyPreviewResult:\n      type: object\n      properties:\n        imageTags:\n          $ref: \"#/components/schemas/ImageTagList\"\n        imageDigest:\n          $ref: \"#/components/schemas/ImageDigest\"\n        imagePushedAt:\n          $ref: \"#/components/schemas/PushTimestamp\"\n        action:\n          $ref: \"#/components/schemas/LifecyclePolicyRuleAction\"\n        appliedRulePriority:\n          $ref: \"#/components/schemas/LifecyclePolicyRulePriority\"\n      description: The result of the lifecycle policy preview.\n    ListImagesFilter:\n      type: object\n      properties:\n        tagStatus:\n          $ref: \"#/components/schemas/TagStatus\"\n      description: An object representing a filter on a \u003ca\u003eListImages\u003c/a\u003e operation.\n    TagKey:\n      type: string\n    TagValue:\n      type: string\n    Tag:\n      type: object\n      properties:\n        Key:\n          $ref: \"#/components/schemas/TagKey\"\n        Value:\n          $ref: \"#/components/schemas/TagValue\"\n      description: The metadata that you apply to a resource to help you categorize and\n        organize them. Each tag consists of a key and an optional value, both of\n        which you define. Tag keys can have a maximum character length of 128\n        characters, and tag values can have a maximum length of 256 characters.\n    TagKeyList:\n      type: array\n      items:\n        $ref: \"#/components/schemas/TagKey\"\n",
			"canonicalURL": "/github.com/restful-ma/thresholds@5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/-/blob/benchmark-repository/openapi/amazonaws.com-ecr-2015-09-21-swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/restful-ma/thresholds/blob/5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/benchmark-repository/openapi/amazonaws.com-ecr-2015-09-21-swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetRepositoryPolicy: post: operation \"GetRepositoryPolicy\": parse path \"/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetRepositoryPolicy\": path MUST NOT contain a fragment"
}