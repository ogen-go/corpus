{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/geoserver/geoserver"
		},
		"file": {
			"name": "coverages.yaml",
			"size": 0,
			"path": "src/community/rest-openapi/openapi/src/main/resources/org/geoserver/rest/openapi/1.0.0/coverages.yaml",
			"byteSize": 7913,
			"content": "openapi: 3.0.0\ninfo:\n  version: 1.0.0\n  title: GeoServer Coverages\n  description: A coverage is a raster data set which originates from a coverage store.\n\ntags:\n  - name: coverages\n    description: Coverage API\n\npaths:\n  /workspaces/{workspace}/coveragestores/{store}/coverages:\n    parameters:\n      - name: workspace\n        in: path\n        description: The name of the workspace\n        required: true\n        schema:\n          type: string\n      - name: store\n        in: path\n        description: The name of the coverage data store\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - coverages\n      operationId: findCoveragesByStore\n      description: Get the coverages available for the provided workspace and data store.\n      parameters:\n        - name: list\n          description:  If the list parameter value is equal to \"all\" all the coverages available in the data source (even the non published ones) will be returned.\n          in: query\n          required: false\n          schema:\n            type: string\n            enum:\n              - all\n      responses:\n        200:\n          $ref: \"#/components/responses/CoveragesResponse\"\n    post:\n      tags:\n        - coverages\n      operationId: createCoverageAtStore\n      description: Create a new coverage, the underlying data store must exists.\n      requestBody:\n        $ref: \"#/components/requestBodies/CoverageInfo\"\n      responses:\n        201:\n          description: The coverage was successfully created.\n          headers:\n            Location:\n              description: The location of the newly created coverage.\n              schema:\n                type: string\n\n  /workspaces/{workspace}/coverages:\n    parameters:\n      - name: workspace\n        in: path\n        description: The name of the workspace\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - coverages\n      operationId: findCoveragesByWorkspace\n      description: Get the coverages available for the provided workspace.\n      parameters:\n        - name: list\n          description:  If the list parameter value is equal to \"all\" all the coverages available in the data source (even the non published ones) will be returned.\n          in: query\n          required: false\n          schema:\n            type: string\n            enum:\n              - all\n      responses:\n        200:\n          $ref: \"#/components/responses/CoveragesResponse\"\n    post:\n      tags:\n        - coverages\n      operationId: createCoverageAtWorkspace\n      description:  Create a new coverage, the coverage definition needs to reference a store.\n      requestBody:\n        $ref: \"#/components/requestBodies/CoverageInfo\"\n      responses:\n        201:\n          description: The coverage was successfully created.\n          headers:\n            Location:\n              description: The location of the newly created coverage.\n              schema:\n                type: string\n                \n  /workspaces/{workspace}/coverages/{coverage}:\n    parameters:\n      - name: workspace\n        in: path\n        description: The name of the workspace\n        required: true\n        schema:\n          type: string\n      - name: coverage\n        in: path\n        description: The name of the coverage\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - coverages\n      operationId: getCoverageAtWorkspace\n      description: Get an individual coverage.\n      parameters:\n        - name: quietOnNotFound\n          in: query\n          description: The quietOnNotFound parameter avoids to log an Exception when the coverage is not present. Note that 404 status code will be returned anyway.\n          required: false\n          schema:\n            type: boolean\n            default: true\n      responses:\n        200:\n          $ref: \"#/components/responses/CoverageResponse\"\n\n  /workspaces/{workspace}/coveragestores/{store}/coverages/{coverage}:\n    parameters:\n      - name: workspace\n        in: path\n        description: The name of the workspace\n        required: true\n        schema:\n          type: string\n      - name: store\n        in: path\n        description: The name of the coverage datastore\n        required: true\n        schema:\n          type: string\n      - name: coverage\n        in: path\n        description: The name of the coverage\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - coverages\n      operationId: findCoverageByStore\n      description: Get an individual coverage.\n      parameters:\n        - name: quietOnNotFound\n          in: query\n          description: The quietOnNotFound parameter avoids to log an Exception when the coverage is not present. Note that 404 status code will be returned anyway.\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        200:\n          $ref: \"#/components/responses/CoverageResponse\"\n    put:\n      tags:\n        - coverages\n      operationId: updateCoverage\n      description: Update an individual coverage\n      parameters:\n        - name: calculate\n          in: query\n          description: 'Comma-seperated list of optional fields to calculate. Optional fields include: \"nativebbox\", \"latlonbbox\".'\n          required: false\n          style: form\n          explode: false\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - nativebbox\n                - latlonbbox\n            minItems: 0\n            maxItems: 2\n      requestBody:\n        $ref: \"#/components/requestBodies/CoverageInfo\"\n      responses:\n        200:\n          description: The coverage was successfully updated.\n    delete:\n      tags:\n        - coverages\n      operationId: deleteCoverage\n      description: Delete a coverage (optionally recursively deleting layers).\n      parameters:\n        - name: recurse\n          in: query\n          required: false\n          description: The recurse controls recursive deletion. When set to true all stores containing the resource are also removed.\n          schema:\n            type: boolean\n            default: false\n      responses:\n        200:\n          description: Successfully deleted.\ncomponents:\n  requestBodies:\n    CoverageInfo:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/CoverageInfoWrapper\"\n      description: The body of the coverage to POST\n      required: true\n  responses:\n    CoveragesResponse:\n      description: list of coverages\n      content:\n        application/json:\n          schema:\n            type: object\n            title: CoveragesResponse\n            required:\n              - coverages\n            properties:\n              coverageStores:\n                $ref: \"#/components/schemas/CoverageListWrapper\"\n    CoverageResponse:\n      description: The requested coverage store information6\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/CoverageResponseWrapper\"\n  schemas:\n    CoverageListWrapper:\n      title: wrapper object in order to comply with current API encoding\n      type: object\n      required:\n        - coverage\n      properties:\n        coverage:\n          $ref: \"catalogresponses.yaml#/components/schemas/NamedLinks\"\n    \n    CoverageResponseWrapper:\n      title: wrapper object in order to comply with current API encoding\n      type: object\n      required:\n        - coverage\n      properties:\n        coverage:\n          $ref: \"catalogresponses.yaml#/components/schemas/CoverageResponse\"\n          \n    CoverageInfoWrapper:\n      title: wrapper object in order to comply with current API encoding\n      type: object\n      required:\n        - coverage\n      properties:\n        coverage:\n          $ref: \"catalog.yaml#/components/schemas/CoverageInfo\"\n\n",
			"canonicalURL": "/github.com/geoserver/geoserver@f7ea7a82ea5d7c4474069fbefc05fc3ed748c49f/-/blob/src/community/rest-openapi/openapi/src/main/resources/org/geoserver/rest/openapi/1.0.0/coverages.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/geoserver/geoserver/blob/f7ea7a82ea5d7c4474069fbefc05fc3ed748c49f/src/community/rest-openapi/openapi/src/main/resources/org/geoserver/rest/openapi/1.0.0/coverages.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"CoverageInfoWrapper\": parse schema: property \"coverage\": parse schema: at 1:721: external \"catalog.yaml\": get: file: local file reference is not allowed"
}