{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/APIs-guru/openapi-directory"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "APIs/hubapi.com/files/v3/openapi.yaml",
			"byteSize": 48538,
			"content": "openapi: 3.0.1\nservers:\n  - url: https://api.hubapi.com/\nx-hasEquivalentPaths: true\ninfo:\n  description: Upload and manage files.\n  title: Files\n  version: v3\n  x-logo:\n    url: https://developers.hubspot.com/hubfs/assets/hubspot.com/buzz/HubSpotOpenGraph.png\n  x-origin:\n    - format: openapi\n      url: https://api.hubspot.com/api-catalog-public/v1/apis/files/v3/files\n      version: \"3.0\"\n  x-providerName: hubapi.com\n  x-serviceName: files\ntags:\n  - description: Operations to upload and edit files.\n    name: Files\n  - description: Operations to create and edit folders.\n    name: Folders\npaths:\n  /files/v3/files:\n    post:\n      description: Upload a single file with content specified in request body.\n      operationId: post-/files/v3/files_upload\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                charsetHunch:\n                  description: Character set of the uploaded file.\n                  type: string\n                file:\n                  description: File to be uploaded.\n                  format: binary\n                  type: string\n                fileName:\n                  description: Desired name for the uploaded file.\n                  type: string\n                folderId:\n                  description: Either 'folderId' or 'folderPath' is required. folderId is the ID of the folder the file will be uploaded to.\n                  type: string\n                folderPath:\n                  description: Either 'folderPath' or 'folderId' is required. This field represents the destination folder path for the uploaded file. If a path doesn't exist, the system will try to create one.\n                  type: string\n                options:\n                  description: JSON string representing FileUploadOptions.\n                  type: string\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/File\"\n          description: successful operation\n        default:\n          $ref: \"#/components/responses/Error\"\n      security:\n        - hapikey: []\n        - oauth2_legacy:\n            - files\n      summary: Upload file\n      tags:\n        - Files\n  /files/v3/files/import-from-url/async:\n    post:\n      description: Asynchronously imports the file at the given URL into the file manager.\n      operationId: post-/files/v3/files/import-from-url/async_importFromUrl\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ImportFromUrlInput\"\n        required: true\n      responses:\n        \"202\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ImportFromUrlTaskLocator\"\n          description: accepted\n        default:\n          $ref: \"#/components/responses/Error\"\n      security:\n        - hapikey: []\n        - oauth2_legacy:\n            - files\n      summary: Import a file from a URL into the file manager.\n      tags:\n        - Files\n  \"/files/v3/files/import-from-url/async/tasks/{taskId}/status\":\n    get:\n      description: Check the status of requested import.\n      operationId: get-/files/v3/files/import-from-url/async/tasks/{taskId}/status_checkImport\n      parameters:\n        - description: Import by URL task ID\n          explode: false\n          in: path\n          name: taskId\n          required: true\n          schema:\n            type: string\n          style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FileActionResponse\"\n          description: successful operation\n        default:\n          $ref: \"#/components/responses/Error\"\n      security:\n        - oauth2_legacy:\n            - files.ui_hidden.read\n        - hapikey: []\n        - oauth2_legacy:\n            - files\n      summary: Check import status.\n      tags:\n        - Files\n  /files/v3/files/search:\n    get:\n      description: Search through files in the file manager. Does not display hidden or archived files.\n      operationId: get-/files/v3/files/search_doSearch\n      parameters:\n        - description: Desired file properties in the return object.\n          explode: true\n          in: query\n          name: properties\n          required: false\n          schema:\n            items:\n              type: string\n            type: array\n          style: form\n        - description: The maximum offset of items for a given search is 10000. Narrow your search down if you are reaching this limit.\n          explode: true\n          in: query\n          name: after\n          required: false\n          schema:\n            type: string\n          style: form\n        - explode: true\n          in: query\n          name: before\n          required: false\n          schema:\n            type: string\n          style: form\n        - description: Number of items to return. Maximum limit is 100.\n          explode: true\n          in: query\n          name: limit\n          required: false\n          schema:\n            format: int32\n            type: integer\n          style: form\n        - description: Sort files by a given field.\n          explode: true\n          in: query\n          name: sort\n          required: false\n          schema:\n            items:\n              type: string\n            type: array\n          style: form\n        - description: Search files by given ID.\n          explode: true\n          in: query\n          name: id\n          required: false\n          schema:\n            type: string\n          style: form\n        - description: Search files by time of creation.\n          explode: true\n          in: query\n          name: createdAt\n          required: false\n          schema:\n            format: date-time\n            type: string\n          style: form\n        - explode: true\n          in: query\n          name: createdAtLte\n          required: false\n          schema:\n            format: date-time\n            type: string\n          style: form\n        - explode: true\n          in: query\n          name: createdAtGte\n          required: false\n          schema:\n            format: date-time\n            type: string\n          style: form\n        - description: Search files by time of latest updated.\n          explode: true\n          in: query\n          name: updatedAt\n          required: false\n          schema:\n            format: date-time\n            type: string\n          style: form\n        - explode: true\n          in: query\n          name: updatedAtLte\n          required: false\n          schema:\n            format: date-time\n            type: string\n          style: form\n        - explode: true\n          in: query\n          name: updatedAtGte\n          required: false\n          schema:\n            format: date-time\n            type: string\n          style: form\n        - description: Search for files containing the given name.\n          explode: true\n          in: query\n          name: name\n          required: false\n          schema:\n            type: string\n          style: form\n        - description: Search files by path.\n          explode: true\n          in: query\n          name: path\n          required: false\n          schema:\n            type: string\n          style: form\n        - description: Search files within given folder ID.\n          explode: true\n          in: query\n          name: parentFolderId\n          required: false\n          schema:\n            format: int64\n            type: integer\n          style: form\n        - description: Query by file size.\n          explode: true\n          in: query\n          name: size\n          required: false\n          schema:\n            format: int64\n            type: integer\n          style: form\n        - description: Search files by height of image or video.\n          explode: true\n          in: query\n          name: height\n          required: false\n          schema:\n            format: int32\n            type: integer\n          style: form\n        - description: Search files by width of image or video.\n          explode: true\n          in: query\n          name: width\n          required: false\n          schema:\n            format: int32\n            type: integer\n          style: form\n        - description: Search files with specified encoding.\n          explode: true\n          in: query\n          name: encoding\n          required: false\n          schema:\n            type: string\n          style: form\n        - description: Filter by provided file type.\n          explode: true\n          in: query\n          name: type\n          required: false\n          schema:\n            type: string\n          style: form\n        - description: Search files by given extension.\n          explode: true\n          in: query\n          name: extension\n          required: false\n          schema:\n            type: string\n          style: form\n        - description: Search for given URL\n          explode: true\n          in: query\n          name: url\n          required: false\n          schema:\n            type: string\n          style: form\n        - description: If true shows files that have been marked to be used in new content. It false shows files that should not be used in new content.\n          explode: true\n          in: query\n          name: isUsableInContent\n          required: false\n          schema:\n            type: boolean\n          style: form\n        - description: If 'true' will show private files; if 'false' will show public files\n          explode: true\n          in: query\n          name: allowsAnonymousAccess\n          required: false\n          schema:\n            type: boolean\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CollectionResponseFile\"\n          description: successful operation\n        default:\n          $ref: \"#/components/responses/Error\"\n      security:\n        - oauth2_legacy:\n            - files.ui_hidden.read\n        - hapikey: []\n        - oauth2_legacy:\n            - files\n      summary: Search files\n      tags:\n        - Files\n  \"/files/v3/files/{fileId}\":\n    delete:\n      description: Delete file by ID\n      operationId: delete-/files/v3/files/{fileId}_archive\n      parameters:\n        - description: File ID to delete\n          explode: false\n          in: path\n          name: fileId\n          required: true\n          schema:\n            pattern: \\d+\n            type: string\n          style: simple\n      responses:\n        \"204\":\n          content: {}\n          description: No content\n        default:\n          $ref: \"#/components/responses/Error\"\n      security:\n        - hapikey: []\n        - oauth2_legacy:\n            - files\n      summary: Delete file\n      tags:\n        - Files\n    get:\n      description: Get file by ID.\n      operationId: get-/files/v3/files/{fileId}_getById\n      parameters:\n        - description: Id of the desired file.\n          explode: false\n          in: path\n          name: fileId\n          required: true\n          schema:\n            pattern: \\d+\n            type: string\n          style: simple\n        - explode: true\n          in: query\n          name: properties\n          required: false\n          schema:\n            items:\n              type: string\n            type: array\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/File\"\n          description: successful operation\n        default:\n          $ref: \"#/components/responses/Error\"\n      security:\n        - oauth2_legacy:\n            - files.ui_hidden.read\n        - hapikey: []\n        - oauth2_legacy:\n            - files\n      summary: Get file.\n      tags:\n        - Files\n    patch:\n      description: Update properties of file by ID.\n      operationId: patch-/files/v3/files/{fileId}_updateProperties\n      parameters:\n        - description: ID of file to update\n          explode: false\n          in: path\n          name: fileId\n          required: true\n          schema:\n            pattern: \\d+\n            type: string\n          style: simple\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/FileUpdateInput\"\n        description: Options to update.\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/File\"\n          description: successful operation\n        default:\n          $ref: \"#/components/responses/Error\"\n      security:\n        - hapikey: []\n        - oauth2_legacy:\n            - files\n      summary: update file properties\n      tags:\n        - Files\n    put:\n      description: Replace existing file data with new file data. Can be used to change image content without having to upload a new file and update all references.\n      operationId: put-/files/v3/files/{fileId}_replace\n      parameters:\n        - description: Id of the desired file.\n          explode: false\n          in: path\n          name: fileId\n          required: true\n          schema:\n            pattern: \\d+\n            type: string\n          style: simple\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                charsetHunch:\n                  description: Character set of given file data.\n                  type: string\n                file:\n                  description: File data that will replace existing file in the file manager.\n                  format: binary\n                  type: string\n                options:\n                  description: JSON String representing FileReplaceOptions\n                  type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/File\"\n          description: successful operation\n        default:\n          $ref: \"#/components/responses/Error\"\n      security:\n        - hapikey: []\n        - oauth2_legacy:\n            - files\n      summary: Replace file.\n      tags:\n        - Files\n  \"/files/v3/files/{fileId}/gdpr-delete\":\n    delete:\n      description: GDRP delete file\n      operationId: delete-/files/v3/files/{fileId}/gdpr-delete_archiveGDPR\n      parameters:\n        - description: ID of file to GDPR delete\n          explode: false\n          in: path\n          name: fileId\n          required: true\n          schema:\n            pattern: \\d+\n            type: string\n          style: simple\n      responses:\n        \"204\":\n          content: {}\n          description: No content\n        default:\n          $ref: \"#/components/responses/Error\"\n      security:\n        - hapikey: []\n        - oauth2_legacy:\n            - files\n      summary: GDPR delete\n      tags:\n        - Files\n  \"/files/v3/files/{fileId}/signed-url\":\n    get:\n      description: Generates signed URL that allows temporary access to a private file.\n      operationId: get-/files/v3/files/{fileId}/signed-url_getSignedUrl\n      parameters:\n        - description: ID of file.\n          explode: false\n          in: path\n          name: fileId\n          required: true\n          schema:\n            pattern: \\d+\n            type: string\n          style: simple\n        - description: For image files. This will resize the image to the desired size before sharing. Does not affect the original file, just the file served by this signed URL.\n          explode: true\n          in: query\n          name: size\n          required: false\n          schema:\n            enum:\n              - thumb\n              - icon\n              - medium\n              - preview\n            type: string\n          style: form\n        - description: How long in seconds the link will provide access to the file.\n          explode: true\n          in: query\n          name: expirationSeconds\n          required: false\n          schema:\n            format: int64\n            type: integer\n          style: form\n        - description: If size is provided, this will upscale the image to fit the size dimensions.\n          explode: true\n          in: query\n          name: upscale\n          required: false\n          schema:\n            type: boolean\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SignedUrl\"\n          description: successful operation\n        default:\n          $ref: \"#/components/responses/Error\"\n      security:\n        - oauth2_legacy:\n            - files.ui_hidden.read\n        - hapikey: []\n        - oauth2_legacy:\n            - files\n      summary: Get signed URL to access private file.\n      tags:\n        - Files\n  /files/v3/folders:\n    post:\n      description: Creates a folder.\n      operationId: post-/files/v3/folders_create\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/FolderInput\"\n        description: Folder creation options\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Folder\"\n          description: successful operation\n        default:\n          $ref: \"#/components/responses/Error\"\n      security:\n        - hapikey: []\n        - oauth2_legacy:\n            - files\n      summary: Create folder.\n      tags:\n        - Folders\n  /files/v3/folders/search:\n    get:\n      description: Search for folders. Does not contain hidden or archived folders.\n      operationId: get-/files/v3/folders/search_doSearch\n      parameters:\n        - description: Properties that should be included in the returned folders.\n          explode: true\n          in: query\n          name: properties\n          required: false\n          schema:\n            items:\n              type: string\n            type: array\n          style: form\n        - description: The maximum offset of items for a given search is 10000. Narrow your search down if you are reaching this limit.\n          explode: true\n          in: query\n          name: after\n          required: false\n          schema:\n            type: string\n          style: form\n        - explode: true\n          in: query\n          name: before\n          required: false\n          schema:\n            type: string\n          style: form\n        - description: Limit of results to return. Max limit is 100.\n          explode: true\n          in: query\n          name: limit\n          required: false\n          schema:\n            format: int32\n            type: integer\n          style: form\n        - description: Sort results by given property. For example -name sorts by name field descending, name sorts by name field ascending.\n          explode: true\n          in: query\n          name: sort\n          required: false\n          schema:\n            items:\n              type: string\n            type: array\n          style: form\n        - description: Search folder by given ID.\n          explode: true\n          in: query\n          name: id\n          required: false\n          schema:\n            type: string\n          style: form\n        - description: Search for folders with the given creation timestamp.\n          explode: true\n          in: query\n          name: createdAt\n          required: false\n          schema:\n            format: date-time\n            type: string\n          style: form\n        - explode: true\n          in: query\n          name: createdAtLte\n          required: false\n          schema:\n            format: date-time\n            type: string\n          style: form\n        - explode: true\n          in: query\n          name: createdAtGte\n          required: false\n          schema:\n            format: date-time\n            type: string\n          style: form\n        - description: Search for folder at given update timestamp.\n          explode: true\n          in: query\n          name: updatedAt\n          required: false\n          schema:\n            format: date-time\n            type: string\n          style: form\n        - explode: true\n          in: query\n          name: updatedAtLte\n          required: false\n          schema:\n            format: date-time\n            type: string\n          style: form\n        - explode: true\n          in: query\n          name: updatedAtGte\n          required: false\n          schema:\n            format: date-time\n            type: string\n          style: form\n        - description: Search for folders containing the specified name.\n          explode: true\n          in: query\n          name: name\n          required: false\n          schema:\n            type: string\n          style: form\n        - description: Search for folders by path.\n          explode: true\n          in: query\n          name: path\n          required: false\n          schema:\n            type: string\n          style: form\n        - description: Search for folders with the given parent folder ID.\n          explode: true\n          in: query\n          name: parentFolderId\n          required: false\n          schema:\n            format: int64\n            type: integer\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CollectionResponseFolder\"\n          description: successful operation\n        default:\n          $ref: \"#/components/responses/Error\"\n      security:\n        - oauth2_legacy:\n            - files.ui_hidden.read\n        - hapikey: []\n        - oauth2_legacy:\n            - files\n      summary: Search folders\n      tags:\n        - Folders\n  /files/v3/folders/update/async:\n    post:\n      description: Update properties of folder by given ID. This action happens asynchronously and will update all of the folder's children as well.\n      operationId: post-/files/v3/folders/update/async_updateProperties\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/FolderUpdateInput\"\n        description: Properties to change in the folder\n        required: true\n      responses:\n        \"202\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FolderUpdateTaskLocator\"\n          description: accepted\n        default:\n          $ref: \"#/components/responses/Error\"\n      security:\n        - hapikey: []\n        - oauth2_legacy:\n            - files\n      summary: Update folder properties\n      tags:\n        - Folders\n  \"/files/v3/folders/update/async/tasks/{taskId}/status\":\n    get:\n      description: Check status of folder update. Folder updates happen asynchronously.\n      operationId: get-/files/v3/folders/update/async/tasks/{taskId}/status_checkUpdateStatus\n      parameters:\n        - description: Task ID of folder update\n          explode: false\n          in: path\n          name: taskId\n          required: true\n          schema:\n            type: string\n          style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FolderActionResponse\"\n          description: successful operation\n        default:\n          $ref: \"#/components/responses/Error\"\n      security:\n        - hapikey: []\n        - oauth2_legacy:\n            - files\n      summary: Check folder update status.\n      tags:\n        - Folders\n  \"/files/v3/folders/{folderId}\":\n    delete:\n      description: Delete folder by ID.\n      operationId: delete-/files/v3/folders/{folderId}_archive\n      parameters:\n        - description: ID of folder to delete.\n          explode: false\n          in: path\n          name: folderId\n          required: true\n          schema:\n            pattern: \\d+\n            type: string\n          style: simple\n      responses:\n        \"204\":\n          content: {}\n          description: No content\n        default:\n          $ref: \"#/components/responses/Error\"\n      security:\n        - hapikey: []\n        - oauth2_legacy:\n            - files\n      summary: Delete folder.\n      tags:\n        - Folders\n    get:\n      description: Get folder by ID\n      operationId: get-/files/v3/folders/{folderId}_getById\n      parameters:\n        - description: ID of desired folder\n          explode: false\n          in: path\n          name: folderId\n          required: true\n          schema:\n            pattern: \\d+\n            type: string\n          style: simple\n        - description: Properties to set on returned folder.\n          explode: true\n          in: query\n          name: properties\n          required: false\n          schema:\n            items:\n              type: string\n            type: array\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Folder\"\n          description: successful operation\n        default:\n          $ref: \"#/components/responses/Error\"\n      security:\n        - oauth2_legacy:\n            - files.ui_hidden.read\n        - hapikey: []\n        - oauth2_legacy:\n            - files\n      summary: Get folder\n      tags:\n        - Folders\n  \"/files/v3/folders/{folderPath}\":\n    delete:\n      description: Delete folder by path.\n      operationId: delete-/files/v3/folders/{folderPath}_archiveByPath\n      parameters:\n        - description: Path of folder to delete\n          explode: false\n          in: path\n          name: folderPath\n          required: true\n          schema:\n            pattern: .+\n            type: string\n          style: simple\n      responses:\n        \"204\":\n          content: {}\n          description: No content\n        default:\n          $ref: \"#/components/responses/Error\"\n      security:\n        - hapikey: []\n        - oauth2_legacy:\n            - files\n      summary: Delete folder.\n      tags:\n        - Folders\n    get:\n      description: Get folder by path.\n      operationId: get-/files/v3/folders/{folderPath}_getByPath\n      parameters:\n        - description: Path of desired folder.\n          explode: false\n          in: path\n          name: folderPath\n          required: true\n          schema:\n            pattern: .+\n            type: string\n          style: simple\n        - description: Properties to set on returned folder.\n          explode: true\n          in: query\n          name: properties\n          required: false\n          schema:\n            items:\n              type: string\n            type: array\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Folder\"\n          description: successful operation\n        default:\n          $ref: \"#/components/responses/Error\"\n      security:\n        - oauth2_legacy:\n            - files.ui_hidden.read\n        - hapikey: []\n        - oauth2_legacy:\n            - files\n      summary: Get folder.\n      tags:\n        - Folders\ncomponents:\n  responses:\n    Error:\n      content:\n        \"*/*\":\n          schema:\n            $ref: \"#/components/schemas/Error\"\n      description: An error occurred.\n  schemas:\n    CollectionResponseFile:\n      description: Collections of files\n      properties:\n        paging:\n          $ref: \"#/components/schemas/Paging\"\n        results:\n          items:\n            $ref: \"#/components/schemas/File\"\n          type: array\n      required:\n        - results\n      type: object\n    CollectionResponseFolder:\n      properties:\n        paging:\n          $ref: \"#/components/schemas/Paging\"\n        results:\n          items:\n            $ref: \"#/components/schemas/Folder\"\n          type: array\n      required:\n        - results\n      type: object\n    Error:\n      example:\n        category: VALIDATION_ERROR\n        correlationId: aeb5f871-7f07-4993-9211-075dc63e7cbf\n        links:\n          knowledge-base: https://www.hubspot.com/products/service/knowledge-base\n        message: Invalid input (details will vary based on the error)\n      properties:\n        category:\n          description: The error category\n          type: string\n        context:\n          additionalProperties:\n            items:\n              type: string\n            type: array\n          description: Context about the error condition\n          example:\n            invalidPropertyName:\n              - propertyValue\n            missingScopes:\n              - scope1\n              - scope2\n          type: object\n        correlationId:\n          description: A unique identifier for the request. Include this value with any error reports or support tickets\n          example: aeb5f871-7f07-4993-9211-075dc63e7cbf\n          format: uuid\n          type: string\n        errors:\n          description: further information about the error\n          items:\n            $ref: \"#/components/schemas/ErrorDetail\"\n          type: array\n        links:\n          additionalProperties:\n            type: string\n          description: A map of link names to associated URIs containing documentation about the error or recommended remediation steps\n          type: object\n        message:\n          description: A human readable message describing the error along with remediation steps where appropriate\n          example: An error occurred\n          type: string\n        subCategory:\n          description: A specific category that contains more specific detail about the error\n          type: string\n      required:\n        - category\n        - correlationId\n        - message\n      type: object\n    ErrorCategory:\n      properties:\n        httpStatus:\n          enum:\n            - CONTINUE\n            - SWITCHING_PROTOCOLS\n            - PROCESSING\n            - OK\n            - CREATED\n            - ACCEPTED\n            - NON_AUTHORITATIVE_INFORMATION\n            - NO_CONTENT\n            - RESET_CONTENT\n            - PARTIAL_CONTENT\n            - MULTI_STATUS\n            - ALREADY_REPORTED\n            - IM_USED\n            - MULTIPLE_CHOICES\n            - MOVED_PERMANENTLY\n            - FOUND\n            - SEE_OTHER\n            - NOT_MODIFIED\n            - USE_PROXY\n            - TEMPORARY_REDIRECT\n            - PERMANENT_REDIRECT\n            - BAD_REQUEST\n            - UNAUTHORIZED\n            - PAYMENT_REQUIRED\n            - FORBIDDEN\n            - NOT_FOUND\n            - METHOD_NOT_ALLOWED\n            - NOT_ACCEPTABLE\n            - PROXY_AUTHENTICATION_REQUIRED\n            - REQUEST_TIMEOUT\n            - CONFLICT\n            - GONE\n            - LENGTH_REQUIRED\n            - PRECONDITION_FAILED\n            - REQUEST_ENTITY_TOO_LARGE\n            - REQUEST_URI_TOO_LONG\n            - UNSUPPORTED_MEDIA_TYPE\n            - REQUESTED_RANGE_NOT_SATISFIABLE\n            - EXPECTATION_FAILED\n            - IM_A_TEAPOT\n            - MISDIRECTED_REQUEST\n            - UNPROCESSABLE_ENTITY\n            - LOCKED\n            - FAILED_DEPENDENCY\n            - UPGRADE_REQUIRED\n            - PRECONDITION_REQUIRED\n            - TOO_MANY_REQUESTS\n            - REQUEST_HEADERS_FIELDS_TOO_LARGE\n            - INTERNAL_STALE_SERVICE_DISCOVERY\n            - UNAVAILABLE_FOR_LEGAL_REASONS\n            - INTERNAL_SERVER_ERROR\n            - NOT_IMPLEMENTED\n            - BAD_GATEWAY\n            - SERVICE_UNAVAILABLE\n            - GATEWAY_TIMEOUT\n            - HTTP_VERSION_NOT_SUPPORTED\n            - VARIANT_ALSO_NEGOTIATES\n            - INSUFFICIENT_STORAGE\n            - LOOP_DETECTED\n            - NOT_EXTENDED\n            - NETWORK_AUTHENTICATION_REQUIRED\n          type: string\n        name:\n          type: string\n      required:\n        - httpStatus\n        - name\n      type: object\n    ErrorDetail:\n      properties:\n        code:\n          description: The status code associated with the error detail\n          type: string\n        context:\n          additionalProperties:\n            items:\n              type: string\n            type: array\n          description: Context about the error condition\n          example:\n            missingScopes:\n              - scope1\n              - scope2\n          type: object\n        in:\n          description: The name of the field or parameter in which the error was found.\n          type: string\n        message:\n          description: A human readable message describing the error along with remediation steps where appropriate\n          type: string\n        subCategory:\n          description: A specific category that contains more specific detail about the error\n          type: string\n      required:\n        - message\n      type: object\n    File:\n      description: File\n      properties:\n        access:\n          description: File access. Can be PUBLIC_INDEXABLE, PUBLIC_NOT_INDEXABLE, PRIVATE.\n          enum:\n            - PUBLIC_INDEXABLE\n            - PUBLIC_NOT_INDEXABLE\n            - HIDDEN_INDEXABLE\n            - HIDDEN_NOT_INDEXABLE\n            - HIDDEN_PRIVATE\n            - PRIVATE\n          type: string\n        archived:\n          description: If the file is deleted.\n          type: boolean\n        archivedAt:\n          description: Deletion time of the file object.\n          format: date-time\n          type: string\n        createdAt:\n          description: Creation time of the file object.\n          format: date-time\n          type: string\n        defaultHostingUrl:\n          description: Default hosting URL of the file. This will use one of HubSpot's provided URLs to serve the file.\n          type: string\n        encoding:\n          description: Encoding of the file.\n          type: string\n        extension:\n          description: Extension of the file. For example png.\n          type: string\n        height:\n          description: For image and video files, the height of the content.\n          format: int32\n          type: integer\n        id:\n          description: File ID.\n          type: string\n        isUsableInContent:\n          description: Previously \"archied\". Indicates if the file should be used when creating new content like web pages.\n          type: boolean\n        name:\n          description: Name of the file.\n          type: string\n        parentFolderId:\n          description: Id of the folder the file is in.\n          type: string\n        path:\n          description: Path of the file in the file manager.\n          type: string\n        size:\n          description: Size in bytes of the file.\n          format: int64\n          type: integer\n        type:\n          description: Type of the file. Can be IMG, DOCUMENT, AUDIO, MOVIE, or OTHER.\n          type: string\n        updatedAt:\n          description: Timestamp of the latest update to the file.\n          format: date-time\n          type: string\n        url:\n          description: URL of the given file. This URL can change depending on the domain settings of the account. Will use the select file hosting domain.\n          type: string\n        width:\n          description: For image and video files, the width of the content.\n          format: int32\n          type: integer\n      required:\n        - access\n        - archived\n        - createdAt\n        - id\n        - updatedAt\n      type: object\n    FileActionResponse:\n      properties:\n        completedAt:\n          description: Time of completion of task.\n          format: date-time\n          type: string\n        errors:\n          description: Descriptive error messages.\n          items:\n            $ref: \"#/components/schemas/StandardError\"\n          type: array\n        links:\n          additionalProperties:\n            type: string\n          description: Link to check the status of the requested task.\n          type: object\n        numErrors:\n          description: Number of errors resulting from the task.\n          format: int32\n          type: integer\n        requestedAt:\n          description: Timestamp of when the task was requested.\n          format: date-time\n          type: string\n        result:\n          $ref: \"#/components/schemas/File\"\n        startedAt:\n          description: Timestamp of when the task was started.\n          format: date-time\n          type: string\n        status:\n          description: Current status of the task.\n          enum:\n            - PENDING\n            - PROCESSING\n            - CANCELED\n            - COMPLETE\n          type: string\n        taskId:\n          description: If of the requested task.\n          type: string\n      required:\n        - completedAt\n        - startedAt\n        - status\n        - taskId\n      type: object\n    FileUpdateInput:\n      description: Object for updating files.\n      properties:\n        access:\n          description: |\n            NONE: Do not run any duplicate validation. REJECT: Reject the upload if a duplicate is found. RETURN_EXISTING: If a duplicate file is found, do not upload a new file and return the found duplicate instead.\n          enum:\n            - PUBLIC_INDEXABLE\n            - PUBLIC_NOT_INDEXABLE\n            - HIDDEN_INDEXABLE\n            - HIDDEN_NOT_INDEXABLE\n            - HIDDEN_PRIVATE\n            - PRIVATE\n          type: string\n        isUsableInContent:\n          description: Mark weather the file should be used in new content or not.\n          type: boolean\n        name:\n          description: New name for the file.\n          type: string\n        parentFolderId:\n          description: Folder ID where the file should be moved to.  folderId and folderPath cannot be set at the same time.\n          type: string\n        parentFolderPath:\n          description: Folder path where the file should be moved to. folderId and folderPath cannot be set at the same time.\n          type: string\n      type: object\n    Folder:\n      properties:\n        archived:\n          description: Marks weather the folder is deleted or not.\n          type: boolean\n        archivedAt:\n          description: Timestamp of folder deletion.\n          format: date-time\n          type: string\n        createdAt:\n          description: Timestamp of folder creation.\n          format: date-time\n          type: string\n        id:\n          description: Id of the folder.\n          type: string\n        name:\n          description: Name of the folder.\n          type: string\n        parentFolderId:\n          description: Id of the parent folder.\n          type: string\n        path:\n          description: Path of the folder in the file manager.\n          type: string\n        updatedAt:\n          description: Timestamp of the latest update to the folder.\n          format: date-time\n          type: string\n      required:\n        - archived\n        - createdAt\n        - id\n        - updatedAt\n      type: object\n    FolderActionResponse:\n      properties:\n        completedAt:\n          description: When the requested changes have been completed.\n          format: date-time\n          type: string\n        errors:\n          description: Detailed errors resulting from the task.\n          items:\n            $ref: \"#/components/schemas/StandardError\"\n          type: array\n        links:\n          additionalProperties:\n            type: string\n          description: Link to check the status of the task.\n          type: object\n        numErrors:\n          description: Number of errors resulting from the requested changes.\n          format: int32\n          type: integer\n        requestedAt:\n          description: Timestamp representing when the task was requested.\n          format: date-time\n          type: string\n        result:\n          $ref: \"#/components/schemas/Folder\"\n        startedAt:\n          description: Timestamp representing when the task was started at.\n          format: date-time\n          type: string\n        status:\n          description: Current status of the task.\n          enum:\n            - PENDING\n            - PROCESSING\n            - CANCELED\n            - COMPLETE\n          type: string\n        taskId:\n          description: Id of the task.\n          type: string\n      required:\n        - completedAt\n        - startedAt\n        - status\n        - taskId\n      type: object\n    FolderInput:\n      description: Object for creating a folder.\n      properties:\n        name:\n          description: Desired name for the folder.\n          type: string\n        parentFolderId:\n          description: Folder ID of the parent of the created folder. If not specified, the folder will be created at the root level. parentFolderId and parentFolderPath cannot be set at the same time.\n          type: string\n        parentPath:\n          description: Path of the parent of the created folder. If not specified the folder will be created at the root level. parentFolderPath and parentFolderId cannot be set at the same time.\n          type: string\n      required:\n        - name\n      type: object\n    FolderUpdateInput:\n      description: Object for updating folders.\n      properties:\n        id:\n          description: Id of the folder to change.\n          type: string\n        name:\n          description: New name. If specified the folder's name and fullPath will change. All children of the folder will be updated accordingly.\n          type: string\n        parentFolderId:\n          description: New parent folder ID. If changed, the folder and all it's children will be moved into the specified folder. parentFolderId and parentFolderPath cannot be specified at the same time.\n          format: int64\n          type: integer\n      required:\n        - id\n      type: object\n    FolderUpdateTaskLocator:\n      description: Information on the task that has been started, and where to check it's status.\n      example:\n        id: 57122e26-59f8-4cfc-ba53-96e30c816762\n        links:\n          - status: https://api.hubspot.com/files/v3/folders/update/async/tasks/57122e26-59f8-4cfc-ba53-96e30c816762/status\n      properties:\n        id:\n          description: The ID of the task\n          type: string\n        links:\n          additionalProperties:\n            type: string\n          description: Links for where to check information related to the task. The `status` link gives the URL for where to check the status of the task.\n          type: object\n      required:\n        - id\n      type: object\n    ImportFromUrlInput:\n      properties:\n        access:\n          description: |\n            PUBLIC_INDEXABLE: File is publicly accessible by anyone who has the URL. Search engines can index the file. PUBLIC_NOT_INDEXABLE: File is publicly accessible by anyone who has the URL. Search engines *can't* index the file. PRIVATE: File is NOT publicly accessible. Requires a signed URL to see content. Search engines *can't* index the file.\n          enum:\n            - PUBLIC_INDEXABLE\n            - PUBLIC_NOT_INDEXABLE\n            - HIDDEN_INDEXABLE\n            - HIDDEN_NOT_INDEXABLE\n            - HIDDEN_PRIVATE\n            - PRIVATE\n          type: string\n        duplicateValidationScope:\n          description: |\n            ENTIRE_PORTAL: Look for a duplicate file in the entire account. EXACT_FOLDER: Look for a duplicate file in the provided folder.\n          enum:\n            - ENTIRE_PORTAL\n            - EXACT_FOLDER\n          type: string\n        duplicateValidationStrategy:\n          description: |\n            NONE: Do not run any duplicate validation. REJECT: Reject the upload if a duplicate is found. RETURN_EXISTING: If a duplicate file is found, do not upload a new file and return the found duplicate instead.\n          enum:\n            - NONE\n            - REJECT\n            - RETURN_EXISTING\n          type: string\n        folderId:\n          description: One of folderId or folderPath is required. Destination folder ID for the uploaded file.\n          type: string\n        folderPath:\n          description: One of folderPath or folderId is required. Destination folder path for the uploaded file. If the folder path does not exist, there will be an attempt to create the folder path.\n          type: string\n        name:\n          description: Name to give the resulting file in the file manager.\n          type: string\n        overwrite:\n          description: If true, it will overwrite existing files if a file with the same name exists in the given folder.\n          type: boolean\n        ttl:\n          description: Time to live. If specified the file will be deleted after the given time frame.\n          type: string\n        url:\n          description: URL to download the new file from.\n          type: string\n      required:\n        - access\n        - duplicateValidationScope\n        - duplicateValidationStrategy\n        - overwrite\n        - url\n      type: object\n    ImportFromUrlTaskLocator:\n      description: Information on the task that has been started, and where to check it's status.\n      example:\n        id: 57122e26-59f8-4cfc-ba53-96e30c816762\n        links:\n          - status: https://api.hubspot.com/files/v3/files/import-from-url/async/tasks/57122e26-59f8-4cfc-ba53-96e30c816762/status\n      properties:\n        id:\n          description: The ID of the task\n          type: string\n        links:\n          additionalProperties:\n            type: string\n          description: Links for where to check information related to the task. The `status` link gives the URL for where to check the status of the task.\n          type: object\n      required:\n        - id\n      type: object\n    NextPage:\n      properties:\n        after:\n          type: string\n        link:\n          type: string\n      required:\n        - after\n      type: object\n    Paging:\n      properties:\n        next:\n          $ref: \"#/components/schemas/NextPage\"\n        prev:\n          $ref: \"#/components/schemas/PreviousPage\"\n      type: object\n    PreviousPage:\n      properties:\n        before:\n          type: string\n        link:\n          type: string\n      required:\n        - before\n      type: object\n    SignedUrl:\n      properties:\n        expiresAt:\n          description: Timestamp of when the URL will no longer grant access to the file.\n          format: date-time\n          type: string\n        extension:\n          description: Extension of the requested file.\n          type: string\n        height:\n          description: For image and video files. The height of the file.\n          format: int32\n          type: integer\n        name:\n          description: Name of the requested file.\n          type: string\n        size:\n          description: Size in bytes of the requested file.\n          format: int32\n          type: integer\n        type:\n          description: Type of the file. Can be IMG, DOCUMENT, AUDIO, MOVIE, or OTHER.\n          type: string\n        url:\n          description: Signed URL with access to the specified file. Anyone with this URL will be able to access the file until it expires.\n          type: string\n        width:\n          description: For image and video files. The width of the file.\n          format: int32\n          type: integer\n      required:\n        - expiresAt\n        - extension\n        - name\n        - size\n        - type\n        - url\n      type: object\n    StandardError:\n      properties:\n        category:\n          $ref: \"#/components/schemas/ErrorCategory\"\n        context:\n          additionalProperties:\n            items:\n              type: string\n            type: array\n          type: object\n        errors:\n          items:\n            $ref: \"#/components/schemas/ErrorDetail\"\n          type: array\n        id:\n          type: string\n        links:\n          additionalProperties:\n            type: string\n          type: object\n        message:\n          type: string\n        status:\n          type: string\n        subCategory:\n          properties: {}\n          type: object\n      required:\n        - category\n        - context\n        - errors\n        - links\n        - message\n        - status\n      type: object\n  securitySchemes:\n    hapikey:\n      in: query\n      name: hapikey\n      type: apiKey\n    oauth2_legacy:\n      flows:\n        authorizationCode:\n          authorizationUrl: https://app.hubspot.com/oauth/authorize\n          scopes:\n            files: Read from and write to my Files\n            files.ui_hidden.read: View hidden files\n          tokenUrl: https://api.hubapi.com/oauth/v1/token\n      type: oauth2\n",
			"canonicalURL": "/github.com/APIs-guru/openapi-directory@20502d3674db5fa060375c4cf54d52234b351baf/-/blob/APIs/hubapi.com/files/v3/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/APIs-guru/openapi-directory/blob/20502d3674db5fa060375c4cf54d52234b351baf/APIs/hubapi.com/files/v3/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: at 1:35796: duplicate path: \"/files/v3/folders/{folderPath}\""
}