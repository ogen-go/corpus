{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/elabftw/elabftw"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "apidoc/v2/openapi.yaml",
			"byteSize": 75637,
			"content": "openapi: 3.0.3\ninfo:\n  title: eLabFTW REST API v2 Documentation\n  description: Some description of the api.\n  version: 2.0.0\nservers:\n  - url: https://elab.local:3148/api/v2\n    description: Local dev server\n  - url: https://eln.example.org/api/v2\n    description: Example base URL\ncomponents:\n  securitySchemes:\n    token:\n      type: apiKey\n      name: Authorization\n      in: header\n  schemas:\n    apikey:\n      type: object\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n        created_at:\n          type: string\n        hash:\n          type: string\n        can_write:\n          type: integer\n    comment:\n      type: object\n      properties:\n        id:\n          type: integer\n        created_at:\n          type: string\n        item_id:\n          type: integer\n        comment:\n          type: string\n        userid:\n          type: integer\n        modified_at:\n          type: string\n        fullname:\n          type: string\n        firstname:\n          type: string\n        lastname:\n          type: string\n        orcid:\n          type: string\n    config:\n      type: object\n      properties:\n        admin_validate:\n          type: string\n        admins_create_users:\n          type: string\n        announcement:\n          type: string\n        anon_users:\n          type: string\n        autologout_time:\n          type: string\n        blox_anon:\n          type: string\n        blox_enabled:\n          type: string\n        debug:\n          type: string\n        deletable_xp:\n          type: string\n        email_domain:\n          type: string\n        extauth_email:\n          type: string\n        extauth_firstname:\n          type: string\n        extauth_lastname:\n          type: string\n        extauth_remote_user:\n          type: string\n        extauth_teams:\n          type: string\n        lang:\n          type: string\n        ldap_base_dn:\n          type: string\n        ldap_email:\n          type: string\n        ldap_firstname:\n          type: string\n        ldap_host:\n          type: string\n        ldap_lastname:\n          type: string\n        ldap_password:\n          type: string\n        ldap_port:\n          type: string\n        ldap_team:\n          type: string\n        ldap_toggle:\n          type: string\n        ldap_use_tls:\n          type: string\n        ldap_username:\n          type: string\n        local_login:\n          type: string\n        local_register:\n          type: string\n        login_announcement:\n          type: string\n        login_tries:\n          type: string\n        logout_url:\n          type: string\n        mail_from:\n          type: string\n        max_revisions:\n          type: string\n        min_days_revisions:\n          type: string\n        min_delta_revisions:\n          type: string\n        open_science:\n          type: string\n        open_team:\n          type: string\n        privacy_policy:\n          type: string\n        proxy:\n          type: string\n        s3_bucket_name:\n          type: string\n        s3_endpoint:\n          type: string\n        s3_path_prefix:\n          type: string\n        s3_region:\n          type: string\n        saml_acs_binding:\n          type: string\n        saml_allowrepeatattributename:\n          type: string\n        saml_authnrequestssigned:\n          type: string\n        saml_baseurl:\n          type: string\n        saml_debug:\n          type: string\n        saml_entityid:\n          type: string\n        saml_logoutrequestsigned:\n          type: string\n        saml_logoutresponsesigned:\n          type: string\n        saml_lowercaseurlencoding:\n          type: string\n        saml_nameidencrypted:\n          type: string\n        saml_nameidformat:\n          type: string\n        saml_privatekey:\n          type: string\n        saml_relaxdestinationvalidation:\n          type: string\n        saml_signmetadata:\n          type: string\n        saml_slo_binding:\n          type: string\n        saml_strict:\n          type: string\n        saml_sync_teams:\n          type: string\n        saml_team_create:\n          type: string\n        saml_team_default:\n          type: string\n        saml_toggle:\n          type: string\n        saml_user_default:\n          type: string\n        saml_wantassertionsencrypted:\n          type: string\n        saml_wantassertionssigned:\n          type: string\n        saml_wantmessagessigned:\n          type: string\n        saml_wantnameid:\n          type: string\n        saml_wantnameidencrypted:\n          type: string\n        saml_wantxmlvalidation:\n          type: string\n        saml_x509:\n          type: string\n        saml_x509_new:\n          type: string\n        schema:\n          type: string\n        smtp_address:\n          type: string\n        smtp_encryption:\n          type: string\n        smtp_password:\n          type: string\n        smtp_port:\n          type: string\n        smtp_username:\n          type: string\n        support_url:\n          type: string\n        ts_authority:\n          type: string\n        ts_cert:\n          type: string\n        ts_hash:\n          type: string\n        ts_limit:\n          type: string\n        ts_login:\n          type: string\n        ts_password:\n          type: string\n        ts_url:\n          type: string\n        uploads_storage:\n          type: string\n    entity:\n      type: object\n      properties:\n        body:\n          type: string\n        body_html:\n          type: string\n        canread:\n          type: string\n        canwrite:\n          type: string\n        category:\n          type: string\n        category_id:\n          type: integer\n        color:\n          type: string\n        comments:\n          type: array\n          items:\n            $ref: '#/components/schemas/comment'\n        content_type:\n          type: integer\n        created_at:\n          type: string\n        date:\n          type: string\n        elabid:\n          type: string\n        events_id:\n          type: string\n        events_item_id:\n          type: string\n        firtname:\n          type: string\n        fullname:\n          type: string\n        has_attachement:\n          type: integer\n        has_comment:\n          type: integer\n        id:\n          type: integer\n        is_bound:\n          type: string\n        lastchangeby:\n          type: integer\n        lastname:\n          type: string\n        links:\n          type: array\n          items:\n            $ref: '#/components/schemas/link'\n        locked:\n          type: integer\n        lockedby:\n          type: integer\n        lockedwhen:\n          type: string\n        metadata:\n          type: string\n        modified_at:\n          type: string\n        next_step:\n          type: string\n        orcid:\n          type: string\n        page:\n          type: string\n        rating:\n          type: integer\n        recent_comment:\n          type: string\n        sharelink:\n          type: string\n        state:\n          type: integer\n        steps:\n          type: array\n          items:\n            $ref: '#/components/schemas/step'\n        tags:\n          type: string\n        tags_id:\n          type: string\n        timestamped:\n          type: integer\n        timestampedby:\n          type: integer\n        timestamped_at:\n          type: string\n        title:\n          type: string\n        type:\n          type: string\n        up_item_id:\n          type: integer\n        uploads:\n          type: array\n          items:\n            $ref: '#/components/schemas/upload'\n        userid:\n          type: integer\n    event:\n      type: object\n      properties:\n        title:\n          type: string\n        id:\n          type: integer\n        start:\n          type: string\n        end:\n          type: string\n        userid:\n          type: integer\n        item_title:\n          type: string\n        color:\n          type: string\n        fullname:\n          type: string\n        item_link:\n          type: integer\n        item_link_title:\n          type: string\n        experiment:\n          type: integer\n        experiment_title:\n          type: string\n    experiment:\n      allOf:\n        - $ref: '#/components/schemas/entity'\n    experiment_template:\n      type: object\n      properties:\n        id:\n          type: integer\n        title:\n          type: string\n        body:\n          type: string\n        userid:\n          type: integer\n        canread:\n          type: string\n        canwrite:\n          type: string\n        locked:\n          type: integer\n        lockedby:\n          type: integer\n        lockedwhen:\n          type: string\n        fullname:\n          type: string\n        metadata:\n          type: string\n        teams_id:\n          type: integer\n        is_pinned:\n          type: integer\n        tags:\n          type: string\n        tags_id:\n          type: string\n    item:\n      allOf:\n        - $ref: '#/components/schemas/entity'\n    items_type:\n      type: object\n      properties:\n        category_id:\n          type: integer\n        category:\n          type: string\n        color:\n          type: string\n        bookable:\n          type: integer\n        body:\n          type: string\n        ordering:\n          type: integer\n        canread:\n          type: string\n        canwrite:\n          type: string\n    link:\n      type: object\n      properties:\n        itemid:\n          type: integer\n        title:\n          type: string\n        elabid:\n          type: string\n        category:\n          type: string\n        bookable:\n          type: integer\n        color:\n          type: string\n    notification:\n      type: object\n      properties:\n        id:\n          type: integer\n        category:\n          type: integer\n        is_ack:\n          type: integer\n        created_at:\n          type: string\n        userid:\n          type: integer\n        send_email:\n          type: integer\n        email_sent_at:\n          type: string\n        body:\n          type: string\n    status:\n      type: object\n      properties:\n        category_id:\n          type: integer\n        category:\n          type: string\n        color:\n          type: string\n        is_default:\n          type: integer\n    step:\n      type: object\n      properties:\n        id:\n          type: integer\n        item_id:\n          type: integer\n        body:\n          type: string\n        ordering:\n          type: integer\n        finished:\n          type: integer\n        finished_time:\n          type: string\n        deadline:\n          type: string\n        deadline_notif:\n          type: integer\n    tag:\n      type: object\n      properties:\n        id:\n          type: integer\n        tag:\n          type: string\n    team:\n      type: object\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n        common_template:\n          type: string\n        common_template_md:\n          type: string\n        deletable_xp:\n          type: integer\n        deletable_item:\n          type: integer\n        user_create_tag:\n          type: integer\n        force_exp_tpl:\n          type: integer\n        link_name:\n          type: string\n        link_href:\n          type: string\n        created_at:\n          type: string\n        orgid:\n          type: string\n        public_db:\n          type: integer\n        force_canread:\n          type: string\n        force_canwrite:\n          type: string\n        do_force_canread:\n          type: integer\n        do_force_canwrite:\n          type: integer\n        visible:\n          type: integer\n    teamgroup:\n      type: object\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n        users:\n          type: array\n          items:\n            type: object\n            properties:\n              userid:\n                type: integer\n              fullname:\n                type: string\n    todoitem:\n      type: object\n      properties:\n        id:\n          type: integer\n        body:\n          type: string\n        creation_time:\n          type: string\n        ordering:\n          type: integer\n        userid:\n          type: integer\n    unfinished_step:\n      type: object\n      properties:\n        id:\n          type: integer\n        title:\n          type: string\n        steps:\n          type: array\n          items:\n            type: string\n    unfinished_steps:\n      type: object\n      properties:\n        experiments:\n          type: array\n          items:\n            $ref: '#/components/schemas/unfinished_step'\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/unfinished_step'\n    upload:\n      type: object\n      properties:\n        id:\n          type: integer\n        real_name:\n          type: string\n        long_name:\n          type: string\n        comment:\n          type: string\n        item_id:\n          type: integer\n        userid:\n          type: string\n        type:\n          type: string\n        created_at:\n          type: string\n        hash:\n          type: string\n        hash_algorithm:\n          type: string\n        storage:\n          type: integer\n        filesize:\n          type: integer\n        state:\n          type: integer\n        immutable:\n          type: integer\n        fullname:\n          type: string\n    users:\n      type: object\n      properties:\n        userid:\n          type: integer\n        firstname:\n          type: string\n        lastname:\n          type: string\n        email:\n          type: string\n        validated:\n          type: integer\n        usergroup:\n          type: integer\n        archived:\n          type: integer\n        last_login:\n          type: string\n        fullname:\n          type: string\n        orcid:\n          type: string\n        auth_service:\n          type: integer\n\n\nsecurity:\n  - token:\n      - token\npaths:\n  /apikeys:\n    summary: Manage API keys\n    description: Handle operations on API keys.\n    post:\n      tags: ['Api keys']\n      summary: Create an API key\n      description: \u003e-\n        Create an API key. The cleartext key is sent back in the location\n        header.\n      operationId: post-apikeys\n      requestBody:\n        required: false\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                  description: A name for the API key.\n                  default: RTFM\n                canwrite:\n                  type: integer\n                  description: Set to 1 to allow the key to do write actions.\n                  default: 0\n      responses:\n        '201':\n          description: The key has been created.\n          headers:\n            location:\n              description: A fake URL that contains the API key in cleartext\n              schema:\n                type: string\n    get:\n      tags: ['Api keys']\n      summary: Read API keys\n      description: Get list of API keys for currently logged in user.\n      operationId: get-apikeys\n      responses:\n        '200':\n          description: List API keys for user\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/apikey'\n  /apikeys/{id}:\n    summary: Actions on an api key\n    delete:\n      tags: ['Api keys']\n      summary: Delete an API key.\n      description: Delete an API key\n      operationId: delete-apikey\n      parameters:\n        - name: id\n          in: path\n          description: ID of the API key\n          required: true\n          schema:\n            type: integer\n      responses:\n        '204':\n          description: The key was deleted\n  /config:\n    summary: The general instance configuration settings\n    get:\n      tags: ['Config']\n      summary: Read the config\n      operationId: get-config\n      responses:\n        '200':\n          description: The config settings\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/config'\n    patch:\n      tags: ['Config']\n      summary: Modify the config\n      operationId: patch-config\n      requestBody:\n        description: The config values to change.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/config'\n      responses:\n        '200':\n          description: The config was modified.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/config'\n    delete:\n      tags: ['Config']\n      summary: Reset the config to default values\n      operationId: delete-config\n      responses:\n        '204':\n          description: The config was reset.\n  /experiments:\n    summary: Actions on experiments\n    post:\n      tags: ['Experiments']\n      summary: Create an experiment\n      operationId: post-experiment\n      requestBody:\n        description: Parameters for creating an experiment\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                category_id:\n                  type: integer\n                  description: \u003e-\n                    The template id to use, or 0 to use the common team\n                    template, or -1 to have an empty body.\n                  default: -1\n                tags:\n                  type: array\n                  description: \u003e-\n                    An array of tags to assign to the created entry.\n                  items:\n                    type: string\n                  default: []\n\n      responses:\n        '201':\n          description: The experiment has been created.\n          headers:\n            location:\n              description: An URL to the experiment that was created.\n              schema:\n                type: string\n    get:\n      tags: ['Experiments']\n      summary: Read all experiments that are accessible\n      operationId: read-experiments\n      # Note: this has to be repeated manually for now\n      # See https://github.com/OAI/OpenAPI-Specification/issues/445\n      parameters:\n        - name: q\n          in: query\n          schema:\n            type: string\n          description: |\n            Search for a term in title, body or elabid.\n          examples:\n            first:\n              summary: Search for all experiments with the word \"test\".\n              value: test\n        - name: extended\n          in: query\n          schema:\n            type: string\n          description: |\n            Extended search (advanced query).\n          examples:\n            first:\n              summary: Search for all items with a rating of 2.\n              value: \"rating%3A2\"\n        - name: related\n          in: query\n          schema:\n            type: integer\n          description: |\n            Look only for entries linked to this item id.\n          examples:\n            first:\n              summary: Look for entries linked to item with id 42.\n              value: 42\n        - name: cat\n          in: query\n          schema:\n            type: integer\n          description: |\n            The status id of the experiments.\n        - name: limit\n          in: query\n          schema:\n            type: integer\n            default: 15\n          description: |\n            Limit the number of results.\n          examples:\n            first:\n              summary: Limit number of results to 5.\n              value: 5\n        - name: offset\n          in: query\n          schema:\n            type: integer\n            default: 0\n          description: |\n            Skip a number of results. Use with limit to work the pagination.\n          examples:\n            first:\n              summary: Skip 3 first results.\n              value: 3\n        - name: metakey[]\n          in: query\n          schema:\n            type: array\n            items:\n              type: string\n          description: |\n            Key search in metadata.\n          examples:\n            first:\n              summary: Look for a metadata key of \"Magnification\".\n              value: Magnification\n        - name: metavalue[]\n          in: query\n          schema:\n            type: array\n            items:\n              type: string\n          description: |\n            Value search in metadata.\n          examples:\n            first:\n              summary: Look for a value of \"20X\".\n              value: 20X\n      responses:\n        '200':\n          description: A list of experiments\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/experiment'\n  /experiments/{id}:\n    summary: Actions on an experiment\n    parameters:\n      - name: id\n        in: path\n        description: ID of the experiment\n        required: true\n        schema:\n          type: integer\n    get:\n      tags: ['Experiments']\n      summary: Read an experiment\n      operationId: get-experiment\n      parameters:\n        - name: format\n          in: query\n          schema:\n            type: string\n            enum: ['csv', 'eln', 'json', 'qrpdf', 'pdf', 'pdfa', 'zip', 'zipa']\n            default: json\n          description: |\n            Get the entity in a different format like csv, pdf, eln or zip. \"pdfa\" means archive pdf (PDF/A), same with \"zipa\".\n          examples:\n            first:\n              summary: Generate a pdf\n              value: pdf\n            second:\n              summary: Generate a csv\n              value: csv\n      responses:\n        '200':\n          description: An experiment\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/experiment'\n    patch:\n      tags: ['Experiments']\n      summary: Modify an experiment\n      operationId: patch-experiment\n      requestBody:\n        description: Parameters for patching an item\n        content:\n          application/json:\n            schema:\n              anyOf:\n                - type: object\n                  properties:\n                    action:\n                      type: string\n                      enum: ['lock', 'pin', 'updatemetadatafield', 'update', 'bloxberg', 'timestamp']\n                - $ref: '#/components/schemas/experiment'\n      responses:\n        '200':\n          description: The patched experiment\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/experiment'\n    delete:\n      tags: ['Experiments']\n      summary: Delete an experiment.\n      description: The experiment gets soft-deleted.\n      operationId: delete-experiment\n      responses:\n        '204':\n          description: The experiment was deleted\n\n  # Items\n  /items:\n    summary: Actions on items\n    post:\n      tags: ['Items']\n      summary: Create an item\n      operationId: post-item\n      requestBody:\n        description: Parameters for creating an item\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                category_id:\n                  type: integer\n                  description: \u003e-\n                    The template id to use, or 0 to use the common team\n                    template, or -1 to have an empty body.\n                  default: -1\n                tags:\n                  type: array\n                  items:\n                    type: string\n                  default: []\n\n      responses:\n        '201':\n          description: The item has been created.\n          headers:\n            location:\n              description: An URL to the item that was created.\n              schema:\n                type: string\n    get:\n      tags: ['Items']\n      summary: Read all items that are accessible\n      operationId: read-items\n      # start duplicate from GET /experiments (except related)\n      parameters:\n        - name: q\n          in: query\n          schema:\n            type: string\n          description: |\n            Search for a term in title, body or elabid.\n          examples:\n            first:\n              summary: Search for all items with the word \"test\".\n              value: test\n        - name: extended\n          in: query\n          schema:\n            type: string\n          description: |\n            Extended search (advanced query).\n          examples:\n            first:\n              summary: Search for all items with a rating of 2.\n              value: \"rating%3A2\"\n        # This one is not exactly copy paste\n        - name: cat\n          in: query\n          schema:\n            type: integer\n          description: |\n            The category id of the items.\n        - name: limit\n          in: query\n          schema:\n            type: integer\n            default: 15\n          description: |\n            Limit the number of results.\n          examples:\n            first:\n              summary: Limit number of results to 5.\n              value: 5\n        - name: offset\n          in: query\n          schema:\n            type: integer\n            default: 0\n          description: |\n            Skip a number of results. Use with limit to work the pagination.\n          examples:\n            first:\n              summary: Skip 3 first results.\n              value: 3\n        - name: metakey[]\n          in: query\n          schema:\n            type: array\n            items:\n              type: string\n          description: |\n            Key search in metadata.\n          examples:\n            first:\n              summary: Look for a metadata key of \"Magnification\".\n              value: Magnification\n        - name: metavalue[]\n          in: query\n          schema:\n            type: array\n            items:\n              type: string\n          description: |\n            Value search in metadata.\n          examples:\n            first:\n              summary: Look for a value of \"20X\".\n              value: 20X\n      # end duplicate from GET /experiments\n      responses:\n        '200':\n          description: A list of items\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/item'\n  /items/{id}:\n    summary: Actions on an item\n    parameters:\n      - name: id\n        in: path\n        description: ID of the item\n        required: true\n        schema:\n          type: integer\n    get:\n      tags: ['Items']\n      summary: Read an item\n      operationId: get-item\n      responses:\n        '200':\n          description: An item\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/item'\n    patch:\n      tags: ['Items']\n      summary: Modify an item\n      operationId: patch-item\n      requestBody:\n        description: Parameters for patching an item\n        content:\n          application/json:\n            schema:\n              anyOf:\n                - type: object\n                  properties:\n                    action:\n                      type: string\n                      enum: ['lock', 'pin', 'updatemetadatafield', 'update']\n                - $ref: '#/components/schemas/item'\n      responses:\n        '200':\n          description: The patched item\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/item'\n    delete:\n      tags: ['Items']\n      summary: Delete an item.\n      description: The item gets soft-deleted.\n      operationId: delete-item\n      responses:\n        '204':\n          description: The key was deleted\n\n  # COMMENTS\n  /{entity_type}/{id}/comments:\n    summary: Actions on comments of an entity\n    parameters:\n      - name: entity_type\n        in: path\n        description: Entity type\n        required: true\n        schema:\n          type: string\n          enum: ['experiments', 'items']\n      - name: id\n        in: path\n        description: ID of the entity\n        required: true\n        schema:\n          type: integer\n    post:\n      tags: ['Comments']\n      summary: Create a comment.\n      operationId: post-entity-comments\n      requestBody:\n        description: Parameters for creating a comment\n        content:\n          application/json:\n            schema:\n              required: ['comment']\n              type: object\n              properties:\n                comment:\n                  type: string\n      responses:\n        '201':\n          description: The comment has been created.\n          headers:\n            location:\n              description: An URL to the comment that was created.\n              schema:\n                type: string\n    get:\n      tags: ['Comments']\n      summary: Read all comments of that entity.\n      operationId: read-entity-comments\n      responses:\n        '200':\n          description: A list of comments\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/comment'\n  /{entity_type}/{id}/comments/{subid}:\n    summary: Actions on comment of an entity\n    parameters:\n      - name: entity_type\n        in: path\n        description: Entity type\n        required: true\n        schema:\n          type: string\n          enum: ['experiments', 'items']\n      - name: id\n        in: path\n        description: ID of the entity\n        required: true\n        schema:\n          type: integer\n      - name: subid\n        in: path\n        description: ID of the comment\n        required: true\n        schema:\n          type: integer\n    get:\n      tags: ['Comments']\n      summary: Read a comment of that entity.\n      operationId: read-entity-comment\n      responses:\n        '200':\n          description: A comment.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/comment'\n    patch:\n      tags: ['Comments']\n      summary: Modify an entity comment.\n      operationId: patch-entity-comment\n      requestBody:\n        description: Parameters for patching an entity comment.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/comment'\n      responses:\n        '200':\n          description: The patched comment\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/comment'\n    delete:\n      tags: ['Comments']\n      summary: Delete an entity comment.\n      description: The comment gets deleted.\n      operationId: delete-entity-comment\n      responses:\n        '204':\n          description: The comment was deleted\n\n  # ITEMS LINKS\n  /{entity_type}/{id}/items_links:\n    summary: Links from entity to items.\n    parameters:\n      - name: entity_type\n        in: path\n        description: Entity type\n        required: true\n        schema:\n          type: string\n          enum: ['experiments', 'items']\n      - name: id\n        in: path\n        description: ID of the entity\n        required: true\n        schema:\n          type: integer\n    get:\n      tags: ['Links to items']\n      summary: Read all items links of that entity.\n      operationId: read-entity-items-links\n      responses:\n        '200':\n          description: A list of links\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/link'\n  /{entity_type}/{id}/items_links/{subid}:\n    summary: Actions on items link of an entity\n    parameters:\n      - name: entity_type\n        in: path\n        description: Entity type\n        required: true\n        schema:\n          type: string\n          enum: ['experiments', 'items']\n      - name: id\n        in: path\n        description: ID of the entity\n        required: true\n        schema:\n          type: integer\n      - name: subid\n        in: path\n        description: ID of the item (link)\n        required: true\n        schema:\n          type: integer\n    post:\n      tags: ['Links to items']\n      summary: Create or import a link.\n      operationId: post-entity-items-links\n      requestBody:\n        description: Parameters for creating or importing a link.\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                action:\n                  type: string\n                  enum: ['create', 'duplicate']\n                  description: |\n                    The `duplicate` action will import the links of that link (inception).\n      responses:\n        '201':\n          description: The link has been created.\n          headers:\n            location:\n              description: An URL to the link that was created.\n              schema:\n                type: string\n    delete:\n      tags: ['Links to items']\n      summary: Delete an item link.\n      description: The link gets deleted.\n      operationId: delete-entitiy-items-link\n      responses:\n        '204':\n          description: The link was deleted.\n\n  # EXPERIMENTS LINKS\n  /{entity_type}/{id}/experiments_links:\n    summary: Links from entity to experiments.\n    parameters:\n      - name: entity_type\n        in: path\n        description: Entity type\n        required: true\n        schema:\n          type: string\n          enum: ['experiments', 'items']\n      - name: id\n        in: path\n        description: ID of the entity\n        required: true\n        schema:\n          type: integer\n    get:\n      tags: ['Links to experiments']\n      summary: Read all experiments links of that entity.\n      operationId: read-entity-experiments-links\n      responses:\n        '200':\n          description: A list of links\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/link'\n  /{entity_type}/{id}/experiments_links/{subid}:\n    summary: Actions on experiments link of an entity\n    parameters:\n      - name: entity_type\n        in: path\n        description: Entity type\n        required: true\n        schema:\n          type: string\n          enum: ['experiments', 'items']\n      - name: id\n        in: path\n        description: ID of the entity\n        required: true\n        schema:\n          type: integer\n      - name: subid\n        in: path\n        description: ID of the experiment linked\n        required: true\n        schema:\n          type: integer\n    post:\n      tags: ['Links to experiments']\n      summary: Create or import a link.\n      operationId: post-entity-experiments-links\n      requestBody:\n        description: Parameters for creating or importing a link.\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                action:\n                  type: string\n                  enum: ['create', 'duplicate']\n                  description: |\n                    The `duplicate` action will import the links of that link (inception).\n      responses:\n        '201':\n          description: The link has been created.\n          headers:\n            location:\n              description: An URL to the link that was created.\n              schema:\n                type: string\n    delete:\n      tags: ['Links to experiments']\n      summary: Delete an experiment link.\n      description: The link gets deleted.\n      operationId: delete-entity-experiments-link\n      responses:\n        '204':\n          description: The link was deleted.\n\n  # EXPERIMENTS_TEMPLATES\n  /experiments_templates:\n    summary: Actions on experiments_templates\n    post:\n      tags: ['Experiments templates']\n      summary: Create an experiment template\n      operationId: post-experiment_template\n      requestBody:\n        description: Parameters for creating an experiment template\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                title:\n                  type: string\n                  description: A title for the template.\n                  default: Untitled\n      responses:\n        '201':\n          description: The experiment template has been created.\n          headers:\n            location:\n              description: An URL to the experiment template that was created.\n              schema:\n                type: string\n    get:\n      tags: ['Experiments templates']\n      summary: Read all experiments_templates that are accessible\n      operationId: read-experiments_templates\n      responses:\n        '200':\n          description: A list of experiments_templates\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/experiment_template'\n  /experiments_templates/{id}:\n    summary: Actions on an experiment template\n    parameters:\n      - name: id\n        in: path\n        description: ID of the experiment template\n        required: true\n        schema:\n          type: integer\n    get:\n      tags: ['Experiments templates']\n      summary: Read an experiment template\n      operationId: get-experiment_template\n      responses:\n        '200':\n          description: An experiment template\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/experiment_template'\n    patch:\n      tags: ['Experiments templates']\n      summary: Modify an experiment template\n      operationId: patch-experiment_template\n      responses:\n        '200':\n          description: The patched experiment template\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/experiment_template'\n    delete:\n      tags: ['Experiments templates']\n      summary: Delete an experiment template.\n      description: The experiment template gets soft-deleted.\n      operationId: delete-experiment_template\n      responses:\n        '204':\n          description: The key was deleted\n\n  # ITEMS_TYPES\n  /items_types:\n    summary: Actions on items_types\n    post:\n      tags: ['Items types']\n      summary: Create an item\n      operationId: post-items_types\n      requestBody:\n        description: Parameters for creating an item\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                title:\n                  type: string\n                  description: A name for this items type.\n                  default: Untitled\n      responses:\n        '201':\n          description: The items type has been created.\n          headers:\n            location:\n              description: An URL to the items type that was created.\n              schema:\n                type: string\n    get:\n      tags: ['Items types']\n      summary: Read all items_types that are accessible.\n      operationId: read-items_types\n      responses:\n        '200':\n          description: A list of items_types.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/item'\n  /items_types/{id}:\n    summary: Actions on an items type.\n    parameters:\n      - name: id\n        in: path\n        description: ID of the items type.\n        required: true\n        schema:\n          type: integer\n    get:\n      tags: ['Items types']\n      summary: Read an items type\n      operationId: get-items_type\n      responses:\n        '200':\n          description: An items type.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/items_type'\n    patch:\n      tags: ['Items types']\n      summary: Modify an item type\n      operationId: patch-items_type\n      responses:\n        '200':\n          description: The patched items type.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/items_type'\n    delete:\n      tags: ['Items types']\n      summary: Delete an item type.\n      description: The item gets soft-deleted.\n      operationId: delete-items_type\n      responses:\n        '204':\n          description: The item type was deleted.\n\n  # EVENTS\n  /events:\n    summary: For scheduler booking.\n    get:\n      tags: ['Events']\n      summary: Read all events in the team.\n      operationId: read-events\n      responses:\n        '200':\n          description: A list of booked slots.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/event'\n\n  /events/{id}:\n    parameters:\n      - name: id\n        in: path\n        description: ID of the item to book.\n        required: true\n        schema:\n          type: integer\n    post:\n      tags: ['Events']\n      summary: Create an event for the item specified as id.\n      operationId: post-events\n      requestBody:\n        description: Parameters for creating an event.\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                title:\n                  type: string\n                  description: A name for this booking slot.\n                  default: Untitled\n                start:\n                  type: string\n                  description: A starting date-time in ISO 8601 format.\n                end:\n                  type: string\n                  description: An end date-time in ISO 8601 format.\n      responses:\n        '201':\n          description: The booking slot has been created.\n          headers:\n            location:\n              description: An URL to the booking slot that was created.\n              schema:\n                type: string\n    patch:\n      tags: ['Events']\n      summary: |\n        Modify a booking slot. Warning: only one value (target) can be edited at a time.\n      operationId: patch-event\n      requestBody:\n        description: Parameters for modifying an event.\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - type: object\n                  properties:\n                    target:\n                      type: string\n                      enum: ['start_epoch', 'end_epoch']\n                    epoch:\n                      type: string\n                      description: Date-time in UNIX epoch format.\n                - type: object\n                  properties:\n                    target:\n                      type: string\n                      enum: ['experiment', 'item_link']\n                    id:\n                      type: integer\n                      description: Entity id.\n                - type: object\n                  properties:\n                    target:\n                      type: string\n                      enum: ['start', 'end']\n                    delta:\n                      type: object\n                      description: The difference (delta) of time with the previous value.\n                      properties:\n                        days:\n                          type: integer\n                        milliseconds:\n                          type: integer\n                        months:\n                          type: integer\n                        years:\n                          type: integer\n      responses:\n        '200':\n          description: The patched event.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/event'\n\n  # EVENT\n  /event/{id}:\n    summary: For scheduler booking.\n    parameters:\n      - name: id\n        in: path\n        description: ID of the event to modify.\n        required: true\n        schema:\n          type: integer\n    delete:\n      tags: ['Events']\n      summary: Delete a booking slot.\n      operationId: delete-event\n      responses:\n        '204':\n          description: The event was deleted.\n  # FAVTAGS\n  /favtags:\n    summary: Favorite tags for the logged-in user.\n    get:\n      tags: ['Favorite tags']\n      summary: Read all favorite tags for the user.\n      operationId: read-favtags\n      responses:\n        '200':\n          description: A list of favorite tags.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  users_id:\n                    type: integer\n                  tags_id:\n                    type: integer\n                  tag:\n                    type: string\n    post:\n      tags: ['Favorite tags']\n      summary: Add a tag as favorite.\n      operationId: post-favtags\n      requestBody:\n        description: Parameters for adding a favorite tag.\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                tag:\n                  type: string\n                  description: An existing tag\n      responses:\n        '201':\n          description: The favtag has been created.\n          headers:\n            location:\n              description: |\n                Favorite tags don't have an ID, so the returned URL in Location in invalid.\n              schema:\n                type: string\n  /favtags/{id}:\n    summary: A particular favorite tag.\n    parameters:\n      - name: id\n        in: path\n        description: ID of the tag.\n        required: true\n        schema:\n          type: integer\n    delete:\n      tags: ['Favorite tags']\n      summary: Unfavorite a tag.\n      operationId: delete-favtag\n      responses:\n        '204':\n          description: The favorite tag was removed.\n\n  # TEAM TAGS\n  /team_tags:\n    summary: Manage tags at the team level.\n    get:\n      tags: ['Team tags']\n      summary: Read all tags for the team.\n      operationId: read-team_tags\n      responses:\n        '200':\n          description: A list of tags.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  tag:\n                    type: string\n                  id:\n                    type: integer\n    patch:\n      tags: ['Team tags']\n      summary: |\n        Actions on tags.\n      operationId: patch-tags\n      requestBody:\n        description: Parameters for modifying team tags.\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                action:\n                  type: string\n                  enum: ['deduplicate']\n              description: Find all duplicate tags and deduplicate them.\n      responses:\n        '200':\n          description: The team tag has been modified.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/tag'\n  /team_tags/{id}:\n    summary: Retrieve a tag from its id.\n    parameters:\n      - name: id\n        in: path\n        description: ID of the tag.\n        required: true\n        schema:\n          type: integer\n    get:\n      tags: ['Team tags']\n      summary: Read a tag.\n      operationId: read-team_tag\n      responses:\n        '200':\n          description: A tag.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  tag:\n                    type: string\n                  id:\n                    type: integer\n    patch:\n      tags: ['Team tags']\n      summary: |\n        Actions on a tag.\n      operationId: patch-team_tag\n      requestBody:\n        description: Parameters for modifying a tag.\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                action:\n                  type: string\n                  enum: ['updatetag']\n                tag:\n                  type: string\n                  description: The content of the tag.\n              description: Update the tag. Requires Admin permissions.\n      responses:\n        '200':\n          description: The team tag has been modified.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/tag'\n    delete:\n      tags: ['Team tags']\n      summary: Delete a tag.\n      operationId: delete-team_tag\n      responses:\n        '204':\n          description: The tag was removed.\n\n  # TEAMS\n  /teams:\n    summary: Manage teams.\n    get:\n      tags: ['Teams']\n      summary: Read all teams. Requires Sysadmin permissions.\n      operationId: read-teams\n      responses:\n        '200':\n          description: A list of teams.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/team'\n    post:\n      tags: ['Teams']\n      summary: Create a new team.\n      operationId: post-teams\n      requestBody:\n        description: Parameters for creating a new team.\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                  description: Team name.\n                  default: New team name\n      responses:\n        '201':\n          description: The team has been created.\n          headers:\n            location:\n              description: An URL to the team that was created.\n              schema:\n                type: string\n  /teams/{id}:\n    summary: Manage a team.\n    parameters:\n      - name: id\n        in: path\n        description: ID of the team.\n        required: true\n        schema:\n          type: integer\n    get:\n      tags: ['Teams']\n      summary: Read a team. Requires Admin permissions.\n      operationId: read-team\n      responses:\n        '200':\n          description: A team.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/team'\n    patch:\n      tags: ['Teams']\n      summary: |\n        Actions on a team.\n      operationId: patch-team\n      requestBody:\n        description: Parameters for modifying a team.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/team'\n      responses:\n        '200':\n          description: The updated team.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/team'\n\n  # STATUS\n  /teams/{id}/status:\n    parameters:\n      - name: id\n        in: path\n        description: ID of the team.\n        required: true\n        schema:\n          type: integer\n    get:\n      tags: ['Status']\n      summary: Read status of a team.\n      operationId: read-team-status\n      responses:\n        '200':\n          description: A list of status for the team.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/status'\n    post:\n      tags: ['Status']\n      operationId: post-team-one-status\n      summary: Create a new status.\n      requestBody:\n        description: Parameters for creating a status.\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                  description: Status name\n                color:\n                  type: string\n                  description: |\n                    Hex color without leading \\#.\n                default:\n                  type: integer\n                  description: Is it the default status for the team?\n      responses:\n        '201':\n          description: Create a status.\n          headers:\n            location:\n              description: An URL to the status that was created.\n              schema:\n                type: string\n  /teams/{id}/status/{subid}:\n    parameters:\n      - name: id\n        in: path\n        description: ID of the team.\n        required: true\n        schema:\n          type: integer\n      - name: subid\n        in: path\n        description: ID of the status\n        required: true\n        schema:\n          type: integer\n    get:\n      tags: ['Status']\n      operationId: read-team-one-status\n      summary: Read a status.\n      responses:\n        '200':\n          description: Read a status.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/status'\n    patch:\n      tags: ['Status']\n      operationId: patch-status\n      summary: Modify a status.\n      requestBody:\n        description: Parameters for modifying a status.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/status'\n      responses:\n        '200':\n          description: The updated status.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/status'\n    delete:\n      tags: ['Status']\n      summary: Delete a status.\n      operationId: delete-status\n      responses:\n        '204':\n          description: The status was removed.\n\n  # TEAMGROUPS\n  /teams/{id}/teamgroups:\n    parameters:\n      - name: id\n        in: path\n        description: ID of the team.\n        required: true\n        schema:\n          type: integer\n    get:\n      tags: ['Teamgroups']\n      summary: Read teamgroups of a team.\n      operationId: read-team-teamgroups\n      responses:\n        '200':\n          description: A list of teamgroups for the team.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/teamgroup'\n    post:\n      tags: ['Teamgroups']\n      operationId: post-teamgroups\n      summary: Create a new teamgroup.\n      requestBody:\n        description: Parameters for creating a teamgroup.\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                  description: Teamgroup name\n      responses:\n        '201':\n          description: New teamgroup.\n          headers:\n            location:\n              description: An URL to the teamgroup that was created.\n              schema:\n                type: string\n  /teams/{id}/teamgroups/{subid}:\n    parameters:\n      - name: id\n        in: path\n        description: ID of the team.\n        required: true\n        schema:\n          type: integer\n      - name: subid\n        in: path\n        description: ID of the teamgroup.\n        required: true\n        schema:\n          type: integer\n    get:\n      tags: ['Teamgroups']\n      operationId: read-teamgroup\n      summary: Read a teamgroup.\n      responses:\n        '200':\n          description: A teamgroup.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: integer\n                  name:\n                    type: string\n                  team:\n                    type: integer\n    patch:\n      tags: ['Teamgroups']\n      operationId: patch-teamgroup\n      summary: Modify a teamgroup.\n      requestBody:\n        description: Parameters for modifying a teamgroup.\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - type: object\n                  properties:\n                    how:\n                      type: string\n                      enum: ['unreference', 'add']\n                    userid:\n                      type: integer\n                - type: object\n                  properties:\n                    name:\n                      type: string\n      responses:\n        '200':\n          description: The updated teamgroup.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/teamgroup'\n    delete:\n      tags: ['Teamgroups']\n      summary: Delete a teamgroup.\n      operationId: delete-teamgroup\n      responses:\n        '204':\n          description: The teamgroup was removed.\n\n  # TODOLIST\n  /todolist:\n    summary: Todolist for current user.\n    get:\n      tags: ['Todolist']\n      summary: Read all todoitems.\n      operationId: read-todolist\n      responses:\n        '200':\n          description: A list of things to do.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/todoitem'\n    post:\n      tags: ['Todolist']\n      summary: Create a todo item\n      operationId: post-todolist\n      requestBody:\n        description: Parameters for creating a todoitem.\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                content:\n                  type: string\n                  description: What to do\n      responses:\n        '201':\n          description: The todo entry has been created.\n          headers:\n            location:\n              description: An URL to the todo item that was created.\n              schema:\n                type: string\n  /todolist/{id}:\n    summary: Manage a todo entry.\n    parameters:\n      - name: id\n        in: path\n        description: ID of the todoitem.\n        required: true\n        schema:\n          type: integer\n    get:\n      tags: ['Todolist']\n      summary: Read a todo entry.\n      operationId: read-todoitem\n      responses:\n        '200':\n          description: A todoitem.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/todoitem'\n    patch:\n      tags: ['Todolist']\n      summary: |\n        Actions on a todoitem.\n      operationId: patch-todoitem\n      requestBody:\n        description: Parameters for modifying a todoitem.\n        content:\n          application/json:\n            schema:\n              required: ['body']\n              type: object\n              properties:\n                body:\n                  type: string\n      responses:\n        '200':\n          description: The updated todoitem.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/todoitem'\n    delete:\n      tags: ['Todolist']\n      summary: Delete a todoitem.\n      operationId: delete-todoitem\n      responses:\n        '204':\n          description: The todoitem was removed.\n  /unfinished_steps:\n    summary: Unfinished steps from the user or the team, in experiments or items.\n    parameters:\n      - name: scope\n        in: query\n        description: |\n          Set to \"team\" to extend the list to other members.\n        schema:\n          type: string\n          default: 'user'\n          enum: ['team', 'user']\n    get:\n      tags: ['Unfinished steps']\n      summary: Read all unfinished steps.\n      operationId: read-unfinished-steps\n      responses:\n        '200':\n          description: A list of unfinished steps\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/unfinished_steps'\n  # USERS\n  /users:\n    summary: Display information about users on the instance.\n    get:\n      tags: ['Users']\n      summary: Read users from instance.\n      description: If Sysadmin all users will be shown. If Admin only the users from the team. Normal users will be shown an error.\n      operationId: read-users\n      responses:\n        '200':\n          description: A list of users\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/users'\n    post:\n      tags: ['Users']\n      summary: Create a new user.\n      description: |\n        An Admin can create a user in its own team only. A sysadmin can specify the team.\n      operationId: post-user\n      requestBody:\n        description: Parameters for creating a user.\n        content:\n          application/json:\n            schema:\n              required: ['firstname', 'lastname', 'email']\n              type: object\n              properties:\n                firstname:\n                  type: string\n                  description: User's first name.\n                lastname:\n                  type: string\n                  description: User's last name.\n                email:\n                  type: string\n                  description: User's email address.\n                usergroup:\n                  type: string\n                  enum: ['1', '2', '4']\n                  description: |\n                    1: Sysadmin, 2: Admin, 4: regular user.\n                team:\n                  type: integer\n                  description: The team id.\n                valid_until:\n                  type: string\n                  description: Date in the YYYY-MM-DD format for account expiration date.\n      responses:\n        '201':\n          description: The user has been created.\n          headers:\n            location:\n              description: An URL to the user that was created.\n              schema:\n                type: string\n  /users/{id}:\n    summary: Display information about a particular user.\n    parameters:\n      - name: id\n        in: path\n        description: ID of the user or `me`.\n        required: true\n        schema:\n          oneOf:\n            - type: integer\n            - type: string\n              enum: ['me']\n        examples:\n          first:\n            summary: Access our own user.\n            value: 'me'\n          second:\n            summary: Access user with ID 42.\n            value: 42\n    get:\n      tags: ['Users']\n      summary: Read information of a user.\n      description: |\n        Note: it is possible to use \"me\" instead of the userid to access the user of the API key.\n      operationId: read-user\n      responses:\n        '200':\n          description: Public properties of a user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/users'\n\n  # NOTIFICATIONS\n  /users/{id}/notifications:\n    parameters:\n      - name: id\n        in: path\n        description: ID of the user or `me`.\n        required: true\n        schema:\n          oneOf:\n            - type: integer\n            - type: string\n              enum: ['me']\n        examples:\n          first:\n            summary: Access our own user.\n            value: 'me'\n          second:\n            summary: Access user with ID 42.\n            value: 42\n    get:\n      tags: ['Notifications']\n      summary: Read notifications of a user.\n      operationId: read-notifications\n      responses:\n        '200':\n          description: Notifications of a user.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: integer\n                  category:\n                    type: integer\n                  body:\n                    type: object\n                  is_ack:\n                    type: integer\n                  created_at:\n                    type: string\n                  userid:\n                    type: integer\n    delete:\n      tags: ['Notifications']\n      summary: Delete all notifications of the user.\n      description: All notifications for the user are deleted.\n      operationId: delete-notifications\n      responses:\n        '204':\n          description: The notifications were deleted.\n  /users/{id}/notifications/{subid}:\n    parameters:\n      - name: id\n        in: path\n        description: ID of the user or `me`.\n        required: true\n        schema:\n          oneOf:\n            - type: integer\n            - type: string\n              enum: ['me']\n        examples:\n          first:\n            summary: Access our own user.\n            value: 'me'\n          second:\n            summary: Access user with ID 42.\n            value: 42\n      - name: subid\n        in: path\n        description: ID of the notification.\n        required: true\n        schema:\n          type: integer\n    get:\n      tags: ['Notifications']\n      summary: Read a notification.\n      operationId: read-notification\n      responses:\n        '200':\n          description: A notification.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/notification'\n    patch:\n      tags: ['Notifications']\n      summary: |\n        Actions on a notification. Only changing `is_ack` column is possible.\n      operationId: patch-notification\n      responses:\n        '200':\n          description: The updated notification.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/notification'\n\n  # STEPS\n  /{entity_type}/{id}/steps:\n    summary: Show steps for this entity.\n    parameters:\n      - name: entity_type\n        in: path\n        description: Entity type\n        required: true\n        schema:\n          type: string\n          enum: ['experiments', 'items', 'experiments_templates', 'items_types']\n      - name: id\n        in: path\n        description: ID of the entity\n        required: true\n        schema:\n          type: integer\n    get:\n      tags: ['Steps']\n      summary: Read all steps of that entity.\n      operationId: read-steps\n      responses:\n        '200':\n          description: A list of steps\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/step'\n    post:\n      tags: ['Steps']\n      summary: Create a step.\n      operationId: post-step\n      requestBody:\n        description: Parameters for creating a step.\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                body:\n                  type: string\n                  description: |\n                    The text content of the step.\n      responses:\n        '201':\n          description: The step has been created.\n          headers:\n            location:\n              description: An URL to the step that was created.\n              schema:\n                type: string\n  /{entity_type}/{id}/steps/{subid}:\n    summary: Actions on step of an entity\n    parameters:\n      - name: entity_type\n        in: path\n        description: Entity type\n        required: true\n        schema:\n          type: string\n          enum: ['experiments', 'items', 'experiments_templates', 'items_types']\n      - name: id\n        in: path\n        description: ID of the entity\n        required: true\n        schema:\n          type: integer\n      - name: subid\n        in: path\n        description: ID of the step\n        required: true\n        schema:\n          type: integer\n    patch:\n      tags: ['Steps']\n      summary: |\n        Actions on a step.\n      operationId: patch-step\n      requestBody:\n        description: Parameters for modifying a step\n        content:\n          application/json:\n            schema:\n              type: object\n              required: ['action']\n              properties:\n                action:\n                  type: string\n                  enum: ['finish', 'notif', 'update']\n      responses:\n        '200':\n          description: The updated step.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/step'\n    delete:\n      tags: ['Steps']\n      summary: Delete a step.\n      description: The step gets deleted.\n      operationId: delete-step\n      responses:\n        '204':\n          description: The step was deleted.\n\n  # TAGS\n  /{entity_type}/{id}/tags:\n    summary: Show tags for this entity.\n    parameters:\n      - name: entity_type\n        in: path\n        description: Entity type\n        required: true\n        schema:\n          type: string\n          enum: ['experiments', 'items', 'experiments_templates', 'items_types']\n      - name: id\n        in: path\n        description: ID of the entity\n        required: true\n        schema:\n          type: integer\n    get:\n      tags: ['Tags']\n      summary: Read all tags of that entity.\n      operationId: read-tags\n      responses:\n        '200':\n          description: A list of tags\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/tag'\n    post:\n      tags: ['Tags']\n      summary: Create a tag.\n      operationId: post-tag\n      requestBody:\n        description: Parameters for creating a tag.\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                tag:\n                  type: string\n                  description: |\n                    The text content of the tag.\n      responses:\n        '201':\n          description: The tag has been created.\n          headers:\n            location:\n              description: An URL to the tag that was created.\n              schema:\n                type: string\n  /{entity_type}/{id}/tags/{subid}:\n    summary: Actions on tag of an entity\n    parameters:\n      - name: entity_type\n        in: path\n        description: Entity type\n        required: true\n        schema:\n          type: string\n          enum: ['experiments', 'items', 'experiments_templates', 'items_types']\n      - name: id\n        in: path\n        description: ID of the entity\n        required: true\n        schema:\n          type: integer\n      - name: subid\n        in: path\n        description: ID of the tag\n        required: true\n        schema:\n          type: integer\n    get:\n      tags: ['Tags']\n      summary: Read a tag.\n      operationId: read-tag\n      responses:\n        '200':\n          description: A tag.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/tag'\n    patch:\n      tags: ['Tags']\n      summary: |\n        Actions on a tag.\n      operationId: patch-tag\n      requestBody:\n        description: Parameters for modifying a tag\n        content:\n          application/json:\n            schema:\n              type: object\n              required: ['action']\n              properties:\n                action:\n                  type: string\n                  enum: ['unreference']\n      responses:\n        '200':\n          description: The updated tag.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/tag'\n    delete:\n      tags: ['Tags']\n      summary: Delete a tag.\n      description: The tag gets deleted.\n      operationId: delete-tag\n      responses:\n        '204':\n          description: The tag was deleted.\n\n\n  # UPLOADS\n  /{entity_type}/{id}/uploads:\n    parameters:\n      - name: entity_type\n        in: path\n        description: Entity type\n        required: true\n        schema:\n          type: string\n          enum: ['experiments', 'items']\n      - name: id\n        in: path\n        description: ID of the entity\n        required: true\n        schema:\n          type: integer\n    get:\n      tags: ['Uploads']\n      summary: Read attached files of that entity.\n      operationId: read-uploads\n      responses:\n        '200':\n          description: A list of uploads.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/upload'\n    post:\n      tags: ['Uploads']\n      summary: Create an upload.\n      operationId: post-upload\n      requestBody:\n        description: Parameters for creating an upload.\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                file:\n                  type: string\n                  format: binary\n                  description: The file to upload.\n                comment:\n                  type: string\n                  description: Optional file comment.\n      responses:\n        '201':\n          description: The file has been uploaded.\n          headers:\n            location:\n              description: An URL to the uploaded file that was created.\n              schema:\n                type: string\n  /{entity_type}/{id}/uploads/{subid}:\n    parameters:\n      - name: entity_type\n        in: path\n        description: Entity type\n        required: true\n        schema:\n          type: string\n          enum: ['experiments', 'items']\n      - name: id\n        in: path\n        description: ID of the entity\n        required: true\n        schema:\n          type: integer\n      - name: subid\n        in: path\n        description: ID of the upload\n        required: true\n        schema:\n          type: integer\n    get:\n      tags: ['Uploads']\n      summary: Read an upload.\n      operationId: read-upload\n      parameters:\n        - name: format\n          in: query\n          schema:\n            type: string\n            enum: ['binary', 'json']\n            default: json\n          description: |\n            To download the file itself, use `binary` format parameter. In python library, when downloading a file content, make sure to add ` _preload_content=False` into the call to `read_upload()`.\n          examples:\n            first:\n              summary: Get the attached file\n              value: binary\n      responses:\n        '200':\n          description: |\n            An upload. Note: with binary output, Content-Type header will vary depending of the file type being sent.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/upload'\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n            application/zip:\n              schema:\n                type: string\n                format: binary\n    post:\n      tags: ['Uploads']\n      summary: Replace an existing uploaded file. The existing file will be archived and the new one will be added.\n      operationId: post-upload-replace\n      requestBody:\n        description: Parameters for replacing an upload.\n        content:\n          application/octet-stream:\n            schema:\n              type: string\n              format: binary\n      responses:\n        '201':\n          description: The file has been uploaded.\n          headers:\n            location:\n              description: An URL to the uploaded file that was created.\n              schema:\n                type: string\n    patch:\n      tags: ['Uploads']\n      summary: |\n        Actions on an upload.\n      operationId: patch-upload\n      requestBody:\n        description: Parameters for modifying an upload.\n        content:\n          application/json:\n            schema:\n              type: object\n              required: ['action']\n              properties:\n                action:\n                  type: string\n                  enum: ['update']\n      responses:\n        '200':\n          description: The updated upload.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/upload'\n    delete:\n      tags: ['Uploads']\n      summary: Delete an upload.\n      description: The upload gets deleted.\n      operationId: delete-upload\n      responses:\n        '204':\n          description: The upload was deleted.\n",
			"canonicalURL": "/github.com/elabftw/elabftw@71941efff47106264ab51c7206c329ead47e80f8/-/blob/apidoc/v2/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/elabftw/elabftw/blob/71941efff47106264ab51c7206c329ead47e80f8/apidoc/v2/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/apikeys\": get: operation \"get-apikeys\": security: at apidoc/v2/openapi.yaml:644:9: list of scopes MUST be empty for \"type\" \"apiKey\""
}