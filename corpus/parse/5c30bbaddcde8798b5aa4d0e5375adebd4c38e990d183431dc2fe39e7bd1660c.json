{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/medusajs/medusa"
		},
		"file": {
			"name": "store-spec3-base.yaml",
			"size": 0,
			"path": "docs/api/store-spec3-base.yaml",
			"byteSize": 7857,
			"content": "openapi: 3.0.0\ninfo:\n  version: 1.0.0\n  title: Medusa Storefront API\n  description: |\n    API reference for Medusa's Storefront endpoints. All endpoints are prefixed with `/store`.\n    \n    ## Authentication\n\n    To send requests as an authenticated customer, you must use the Cookie Session ID.\n\n    \u003c!-- ReDoc-Inject: \u003cSecurityDefinitions\u003e --\u003e\n  license:\n    name: MIT\n    url: https://github.com/medusajs/medusa/blob/master/LICENSE\ntags:\n- name: Auth\n  description: Auth endpoints that allow authorization of customers and manages their\n    sessions.\n- name: Cart\n  description: Cart endpoints that allow handling carts in Medusa.\n  x-resourceId: cart\n- name: Collection\n  description: Collection endpoints that allow handling collections in Medusa.\n  x-resourceId: product_collection\n- name: Customer\n  description: Customer endpoints that allow handling customers in Medusa.\n  x-resourceId: customer\n- name: Gift Card\n  description: Gift Card endpoints that allow handling gift cards in Medusa.\n  x-resourceId: gift_card\n- name: Order\n  description: Order endpoints that allow handling orders in Medusa.\n  x-resourceId: order\n- name: Product\n  description: Product endpoints that allow handling products in Medusa.\n  x-resourceId: product\n- name: Product Variant\n  description: Product Variant endpoints that allow handling product variants in Medusa.\n  x-resourceId: product_variant\n- name: Region\n  description: Region endpoints that allow handling regions in Medusa.\n  x-resourceId: region\n- name: Return Reason\n  description: Return Reason endpoints that allow handling return reasons in Medusa.\n  x-resourceId: return_reason\n- name: Return\n  description: Return endpoints that allow handling returns in Medusa.\n  x-resourceId: return\n- name: Shipping Option\n  description: Shipping Option endpoints that allow handling shipping options in Medusa.\n  x-resourceId: shipping_option\n- name: Swap\n  description: Swap endpoints that allow handling swaps in Medusa.\n  x-resourceId: swap\nservers:\n- url: https://api.medusa-commerce.com/store\npaths: {}\ncomponents:\n  responses: \n    default_error:\n      description: Default Error\n      content:\n        application/json:\n          schema: \n            $ref: \"#/components/schemas/error\"\n          example:\n            code: \"unknown_error\"\n            message: \"An unknown error occurred.\"\n            type: \"unknown_error\"\n    invalid_state_error:\n      description: Invalid State Error\n      content:\n        application/json:\n          schema: \n            $ref: \"#/components/schemas/error\"\n          example:\n            code: \"unknown_error\"\n            message: \"The request conflicted with another request. You may retry the request with the provided Idempotency-Key.\"\n            type: \"QueryRunnerAlreadyReleasedError\"\n    invalid_request_error:\n      description: Invalid Request Error\n      content:\n        application/json:\n          schema: \n            $ref: \"#/components/schemas/error\"\n          example:\n            code: \"invalid_request_error\"\n            message: \"Discount with code TEST already exists.\"\n            type: \"duplicate_error\"\n    not_found_error:\n      description: Not Found Error\n      content:\n        application/json:\n          schema: \n            $ref: \"#/components/schemas/error\"\n          example:\n            message: \"Entity with id 1 was not found\"\n            type: \"not_found\"\n    400_error:\n      description: Client Error or Multiple Errors\n      content:\n        application/json:\n          schema:\n            oneOf: \n              - $ref: \"#/components/schemas/error\"\n              - $ref: \"#/components/schemas/multiple_errors\"\n          examples: \n            not_allowed:\n              $ref: \"#/components/examples/not_allowed_error\"\n            invalid_data:\n              $ref: \"#/components/examples/invalid_data_error\"\n            multiple_errors:\n              $ref: \"#/components/examples/multiple_errors\"\n    500_error:\n      description: Server Error\n      content:\n        application/json:\n          schema: \n            $ref: \"#/components/schemas/error\"\n          examples: \n            database:\n              $ref: \"#/components/examples/database_error\"\n            unexpected_state:\n              $ref: \"#/components/examples/unexpected_state_error\"\n            invalid_argument:\n              $ref: \"#/components/examples/invalid_argument_error\"\n            default_error:\n              $ref: \"#/components/examples/default_error\"\n    unauthorized:\n      description: 'User is not authorized. Must log in first'\n      content: \n        text/plain:\n          schema: \n            type: string\n            default: Unauthorized\n            example: Unauthorized\n    incorrect_credentials:\n      description: 'User does not exist or incorrect credentials'\n      content: \n        text/plain:\n          schema: \n            type: string\n            default: Unauthorized\n            example: Unauthorized\n  examples:\n    not_allowed_error:\n      summary: Not Allowed Error\n      value:\n        message: \"Discount must be set to dynamic\"\n        type: \"not_allowed\"\n    invalid_data_error:\n      summary: Invalid Data Error\n      value:\n        message: \"first_name must be a string\"\n        type: \"invalid_data\"\n    multiple_errors:\n      summary: Multiple Errors\n      value:\n        message: \"Provided request body contains errors. Please check the data and retry the request\"\n        errors:\n          - message: \"first_name must be a string\"\n            type: \"invalid_data\"\n          - message: \"Discount must be set to dynamic\"\n            type: \"not_allowed\"\n    database_error:\n      summary: Database Error\n      value:\n        code: \"api_error\"\n        message: \"An error occured while hashing password\"\n        type: \"database_error\"\n    unexpected_state_error:\n      summary: Unexpected State Error\n      value:\n        message: \"cart.total must be defined\"\n        type: \"unexpected_state\"\n    invalid_argument_error:\n      summary: Invalid Argument Error\n      value:\n        message: \"cart.total must be defined\"\n        type: \"unexpected_state\"\n    default_error:\n      summary: Default Error\n      value:\n        code: \"unknown_error\"\n        message: \"An unknown error occurred.\"\n        type: \"unknown_error\"\n  securitySchemes:\n    cookie_auth:\n      type: apiKey\n      x-displayName: Cookie Session ID\n      in: cookie\n      name: connect.sid\n      description: |\n        Use a cookie session to send authenticated requests.\n\n        ### How to Obtain the Cookie Session\n\n        If you're sending requests through a browser, using JS Client, or using tools like Postman, the cookie session should be automatically set when the customer is logged in.\n\n        If you're sending requests using cURL, you must set the Session ID in the cookie manually.\n\n        To do that, send a request to [authenticate the customer](#tag/Auth/operation/PostAuth) and pass the cURL option `-v`:\n\n        ```bash\n        curl -v --location --request POST 'https://medusa-url.com/store/auth' \\\n        --header 'Content-Type: application/json' \\\n        --data-raw '{\n          \"email\": \"user@example.com\",\n          \"password\": \"supersecret\"\n        }'\n        ```\n\n        The headers will be logged in the terminal as well as the response. You should find in the headers a Cookie header similar to this:\n\n        ```bash\n        Set-Cookie: connect.sid=s%3A2Bu8BkaP9JUfHu9rG59G16Ma0QZf6Gj1.WT549XqX37PN8n0OecqnMCq798eLjZC5IT7yiDCBHPM;\n        ```\n\n        Copy the value after `connect.sid` (without the `;` at the end) and pass it as a cookie in subsequent requests as the following:\n\n        ```bash\n        curl --location --request GET 'https://medusa-url.com/store/customers/me/orders' \\\n        --header 'Cookie: connect.sid={sid}'\n        ```\n        \n        Where `{sid}` is the value of `connect.sid` that you copied.",
			"canonicalURL": "/github.com/medusajs/medusa@8eac3bacc51fd3e2aa8b423a0fc97e56a43b6e50/-/blob/docs/api/store-spec3-base.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/medusajs/medusa/blob/8eac3bacc51fd3e2aa8b423a0fc97e56a43b6e50/docs/api/store-spec3-base.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: responses: \"400_error\": content: application/json: schema: parse schema: parse schema: at 1:1437: find schema: resolve: can't find value for \"components/schemas/error\""
}