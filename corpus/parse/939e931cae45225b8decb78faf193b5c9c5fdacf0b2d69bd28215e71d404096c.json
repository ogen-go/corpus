{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ballerina-platform/openapi-connectors"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "openapi/shippit/openapi.yml",
			"byteSize": 136974,
			"content": "openapi: 3.0.0\ninfo:\n  x-ballerina-display:\n    label: Shippit\n    iconPath: \"icon.png\"\n  title: Shippit\n  version: 3.0.20201008\n  description: |\n    This is a generated connector for [Shippit API v3.0.20201008](https://developer.shippit.com) OpenAPI specification.\n    Shippit powers simpler delivery for e-commerce retailers of all shapes and sizes.\n    It fulfil orders and track shipments anywhere you are, anytime you like. \n    Itâ€™s cloud-based multi-carrier shipping software for retailers that takes the guesswork out of shipping decisions.\n  x-ballerina-init-description: \u003e\n    The connector initialization requires setting the API credentials. \n  \n    Create a [Shippit account](https://www.shippit.com) and obtain tokens by following [this guide](https://developer.shippit.com/#section/Authentication).\n  termsOfService: https://www.shippit.com/terms/\n  contact:\n    url: https://support.shippit.com\n    email: support@shippit.com\n  x-logo:\n    url: \u003e-\n      https://dewicach69fxy.cloudfront.net/wp-content/uploads/logos/shippit-logo-invert.png\n    backgroundColor: '#0089D0'\n    altText: Shippit\n    href: https://www.shippit.com/\nservers:\n  - url: https://app.staging.shippit.com/api/3\n    description: Shippit API Staging\n  - url: https://app.shippit.com/api/3\n    description: Shippit API Production\npaths:\n  /orders:\n    description: ''\n    post:\n      requestBody:\n        description: Passes an Order object under the `order` field.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/OrderRequest'\n              example:\n                order:\n                  user_attributes:\n                    email: test@shippit.com\n                    first_name: John\n                    last_name: Smith\n                  parcel_attributes:\n                    - depth: 0.13\n                      length: 0.1\n                      location: C123\n                      price: 12.12\n                      qty: 1\n                      sku: EWPE123123\n                      title: Super awesome red tshirt\n                      weight: 2.1\n                      width: 0.11\n                      product_line_id: 1234\n                      origin_country_code: CN\n                  authority_to_leave: false\n                  courier_type: standard\n                  delivery_address: 1 Union Street\n                  delivery_postcode: 2009\n                  delivery_state: NSW\n                  delivery_suburb: Pyrmont\n                  delivery_instructions: Special instructions for the order go here\n                  receiver_contact_number: 67108864\n                  receiver_name: Adam\n                  retailer_invoice: '#23201005'\n            examples:\n              Order with minimum required fields:\n                value:\n                  order:\n                    courier_type: standard\n                    delivery_address: 1 Union Street\n                    delivery_postcode: '2009'\n                    delivery_state: NSW\n                    delivery_suburb: Pyrmont\n                    authority_to_leave: 'Yes'\n                    parcel_attributes:\n                      - qty: 1\n                        weight: 2.1\n                    user_attributes:\n                      email: test@shippit.com\n                      first_name: John\n                      last_name: Smith\n              Order request with optional fields:\n                value:\n                  order:\n                    user_attributes:\n                      email: test@shippit.com\n                      first_name: John\n                      last_name: Smith\n                    parcel_attributes:\n                      - depth: 0.13\n                        length: 0.1\n                        location: C123\n                        price: '12.12'\n                        qty: 1\n                        sku: EWPE123123\n                        title: Super awesome red tshirt\n                        weight: 2.1\n                        width: 0.11\n                        product_line_id: '1234'\n                        origin_country_code: CN\n                        packed: 1\n                      - depth: 0.13\n                        length: 0.1\n                        location: B22\n                        price: '1.21'\n                        qty: 7\n                        sku: EWPE123123\n                        title: Super awesome blue tshirt\n                        weight: 2.1\n                        width: 0.11\n                        dangerous_goods_code: ID8000\n                        dangerous_goods_text: \u003e-\n                          ID8000 Consumer commodities - Dangerous Goods as per\n                          attached DGD\n                        product_line_id: '1235'\n                        packed: 1\n                    authority_to_leave: 'No'\n                    courier_type: standard\n                    delivery_address: 1 Union Street\n                    delivery_postcode: '2009'\n                    delivery_state: NSW\n                    delivery_suburb: Pyrmont\n                    delivery_instructions: Special instructions for the order go here\n                    receiver_contact_number: '0400000000'\n                    receiver_name: Adam\n                    retailer_invoice: '#23201005'\n                    retailer_reference: '#23201005'\n              Order request using product_attributes:\n                value:\n                  order:\n                    user_attributes:\n                      email: test@shippit.com\n                      first_name: John\n                      last_name: Smith\n                    parcel_attributes:\n                      - weight: 4.4\n                      - weight: 8.8\n                    product_attributes:\n                      - quantity: 10\n                        title: Super awesome red tshirt\n                      - quantity: 20\n                        title: Super awesome blue tshirt\n                    authority_to_leave: 'No'\n                    courier_type: standard\n                    delivery_address: 1 Union Street\n                    delivery_postcode: '2009'\n                    delivery_state: NSW\n                    delivery_suburb: Pyrmont\n              Priority Order request:\n                value:\n                  order:\n                    courier_type: priority\n                    delivery_address: 1 Union Street\n                    delivery_postcode: '2009'\n                    delivery_state: NSW\n                    delivery_suburb: Pyrmont\n                    authority_to_leave: 'Yes'\n                    delivery_date: '2016-07-26T00:00:00.000Z'\n                    delivery_window: 16:00-19:00\n                    parcel_attributes:\n                      - qty: 1\n                        weight: 2.1\n                    user_attributes:\n                      email: test@shippit.com\n                      first_name: John\n                      last_name: Smith\n              Tracking Order without tracking histories:\n                value:\n                  order:\n                    delivery_address: 1 Union Street\n                    delivery_postcode: '2099'\n                    delivery_state: NSW\n                    delivery_suburb: Dee Why\n                    delivery_country_code: au\n                    courier_allocation: CouriersPlease\n                    courier_job_id: SAMPLE-LN-111\n                    authority_to_leave: 'Yes'\n                    tracking_only: true\n                    parcel_attributes:\n                      - qty: 1\n                        weight: 2.1\n                        label_number: SAMPLE-LN-111001\n                    user_attributes:\n                      email: test@shippit.com\n                      first_name: John\n                      last_name: Smith\n              Tracking Order with tracking histories:\n                value:\n                  order:\n                    delivery_address: 1 Union Street\n                    delivery_postcode: '2099'\n                    delivery_state: NSW\n                    delivery_suburb: Dee Why\n                    delivery_country_code: au\n                    courier_allocation: CouriersPlease\n                    courier_job_id: SAMPLE-LN-111\n                    authority_to_leave: 'Yes'\n                    tracking_only: true\n                    parcel_attributes:\n                      - qty: 1\n                        weight: 2.1\n                        label_number: SAMPLE-LN-111001\n                    user_attributes:\n                      email: test@shippit.com\n                      first_name: John\n                      last_name: Smith\n                    tracking_histories:\n                      - status: order_placed\n                        timestamp: '2018-10-10T05:28:12.693Z'\n                      - status: ready_for_pickup\n                        timestamp: '2018-10-11T05:28:12.693Z'\n        required: true\n      tags:\n        - Order\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OrderResponse'\n              examples:\n                Example Order Response:\n                  value:\n                    response:\n                      courier_delivery_instructions: special instructions\n                      courier_job_id: '30734876324'\n                      courier_name: eParcel\n                      delivery_address: 1 Union Street\n                      delivery_instructions: test special instructions\n                      delivery_postcode: '2009'\n                      delivery_state: NSW\n                      delivery_suburb: Pyrmont\n                      id: 26599\n                      parcel_attributes:\n                        - depth: 0.13\n                          length: 0.1\n                          qty: 1\n                          weight: 16.8\n                          width: 0.11\n                      products:\n                        - title: Industrial Paint Stripper\n                          price: 29.13\n                          sku: 0.1\n                          tariff_code: '000999'\n                          dangerous_goods_code: ID8000\n                          dangerous_goods_text: \u003e-\n                            ID8000 Consumer commodities - Dangerous Goods as per\n                            attached DGD\n                          origin_country_code: TH\n                          quantity: 1\n                      price: '0.0'\n                      processing_state: created\n                      receiver_contact_number: '0400000000'\n                      receiver_name: Josh\n                      retailer_invoice: '#23201005'\n                      slug: ppu38wz2tdonj\n                      state: processing\n                      tracking_number: PPu38Wz2TdoNj\n                      user_attributes:\n                        email: test@shippit.com\n                        first_name: jon\n                        last_name: smith\n                        mobile: '0413084048'\n          description: Successful order response\n        '400':\n          $ref: '#/components/responses/BadRequestErrorResponse'\n        '403':\n          $ref: '#/components/responses/InvalidMerchantAccountErrorResponse'\n        '422':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OrderValidationErrorResponse'\n          description: \u003e-\n            Returned when `validate` is set to `true` and the order address is\n            not valid.\n\n\n            Will specify which input fields failed validation and may give a\n            `suggested_address` form if one is found.\n        '500':\n          $ref: '#/components/responses/UnknownErrorResponse'\n      security:\n        - AuthToken: []\n      operationId: createOrder\n      summary: Create an Order\n      description: \"Submits an Order to be created on Shippit.\\r\\n\\r\\nAt minimum, an Order requires a delivery location, user details, and parcel details. Shippit will then generate the order, allocate the courier, and fill in the origin location based on the provided info and merchant configuration on Shippit.\\r\\n\\r\\nNote that the required fields for an Order can vary depending on the type of order, the requested courier, whether it is local or international, etcetera.\\r\\n\\r\\nThere is a maximum of 1000 parcels per quote request.\\r\\n\\r\\n\\r\\n---\\r\\n\\r\\n### Order Lifecycle\\r\\n#### Standard and Express Lifecycle\\r\\n| Web UI action | API call     | State on completion         | Where seen in UI   |\\r\\n|---------------|--------------|-----------------------------|--------------------|\\r\\n| Add order     | POST order   | New Order                   | New Orders page    |\\r\\n| Confirm order | GET label    | Ready to Ship               | Ready to Ship page |\\r\\n| Cancel order  | DELETE order | Cancelled                   | not visible        |\\r\\n| Book order    | POST book    | Booked                      | Track page         |\\r\\n\\r\\n#### Click and Collect Lifecycle\\r\\n| Web UI action | API call     | State on completion         | Where seen in UI   |\\r\\n|---------------|--------------|-----------------------------|--------------------|\\r\\n| N/A           | POST order   | Packing order               | New Orders page    |\\r\\n| Label         | GET label    | Packing order               | New Orders page    |\\r\\n| Cancel order  | DELETE order | Cancelled                   | not visible        |\\r\\n| Book order    | POST book    | Booked                      | Track page         |\\r\\n\\r\\nUnlike standard / express orders, click and collect orders do not proceed to the Ready to Ship page. They remain in the New Orders page until you call either the Book API or click the Label button.\\r\\n\\r\\n#### Priority Order Lifecycle\\r\\n| Web UI action | API call     | State on completion         | Where seen in UI   |\\r\\n|---------------|--------------|-----------------------------|--------------------|\\r\\n| N/A           | POST order   | Packing order               | New Orders page    |\\r\\n| Label         | GET label    | Booked                      | Track page         |\\r\\n| Cancel order  | DELETE order | Cancelled                   | not visible        |\\r\\n\\r\\nUnlike standard / express orders, priority orders do not need the book call. They are automatically booked by Shippit on the delivery date.\\r\\n\\r\\nPriority orders will remain on the New Orders page until dismissed by clicking the Label button or the GET label API call is made.\\r\\n\\r\\n\\r\\n### Order validation\\r\\nIf the `validate` field is passed and set to `true`, then the order is not saved unless Shippit can validate the destination suburb and postcode to be a valid combination. If a valid combination is not found, Shippit will return a suggested address.\\r\\n\\r\\n### Manual or Automatic Courier selection\\r\\nYou can allocate a courier to an order in one of two ways: you can manually specify the courier as part of the order, or you can allow Shippit to automatically allocate a courier for you.\\r\\n\\r\\nTo manually specify a courier, pass the `courier_allocation` field with the identifier of the courier (see below).\\r\\n\\r\\nTo have Shippit allocate the courier for you, pass the `courier_type` field to specify the type of couriers that Shippit can choose from to allocate for you. This is used to stand for a service level such as `standard`, `express`, `priority`, `click_and_collect`.\\r\\n\\r\\n\\r\\n### Specifying Parcels and Products\\r\\nShippit needs to know the specifications of the products you want shipped and what parcels to use in shipping them. There is a maximum of 1000 parcels per quote request.\\r\\n\\r\\nIn the simplest case, this can be specified by a `parcel_attributes` field, which contains a list of Parcel specifications. Each item specifies the number, dimensions, and other information about the products being shipped, and the associated parcel. In this case, each parcel contains one type of product.\\r\\n\\r\\nFor more complex shipping arrangements, you can additionally specify a `product_attributes` field, which contains a list of Product specifications. In this case, the `parcel_attributes` will no longer contain product information such as `qty`. Each item under `product_attributes` would specify the number, dimensions, and other information about the products; while each item under `parcel_attributes` would separately specify the dimensions of the parcels. By mixing parcel and product specifications, you can define arbitrary groupings of products into parcels.\\r\\n\\r\\nThe number of parcels is further determined by the `Allocate each item in an order to a separate carton` setting in the Shippit administration page. If this is enabled, then each item will be assigned a separate parcel according to its dimensions. If this is disabled, then Shippit may combine multiple product or parcel specifications into one.\\r\\n\\r\\n\\r\\n### Standard orders vs tracking orders\\r\\nIn a standard order, Shippit will book the courier given the provided information and provide tracking information and notifications for the merchant and recipient on the status of the order.\\r\\n\\r\\nIf you've already booked and allocated a courier to your consignment outside of Shippit, however, you can still use Shippit to provide tracking and notifications for the order. This is called a **tracking order**. In this case, you're only using Shippit for the tracking and notifications, and not for carrier booking.\\r\\n\\r\\nCreating a tracking order is the same as creating a standard order, only that you have to provide additional attributes so that Shippit can match the the courier's internal info to shippit. Note the following attributes:\\r\\n\\r\\n- `tracking_only` _required_ -- true - this makes this order a tracking order.\\r\\n- `courier_allocation` _required_ -- the name of the courier in charge of the item.\\r\\n- `courier_job_id` -- the ID assigned by some carriers to the shipment / consignment.\\r\\n- `parcel_attributes` -\u003e `label_number` _required_ -- the label assigned by the carrier system to a parcel, used by Shippit to match the parcel number against the carrier's parcel number\\r\\n- `tracking_histories` -- one or two optional status events that will be added to the tracking page for the benefit of the recipient.\\r\\n\\r\\n#### Passing tracking histories\\r\\nIn a tracking order, you can choose to pass tracking histories for the benefit of the recipient. These are shown to the recipient in the tracking page to inform them of the status of when the order has been processed.\\r\\n\\r\\nThese items have just two fields, a `status` field and a `timestamp` in UTC format, to indicate to the recipient events  such as `order_placement` and `ready_for_pickup`. The `status` informs the user of the Order's state at that point in time and can be either `order_placed` or `ready_for_pickup`. The `timestamp` indicates when that change happened. The following tracking history entries are recommended to be placed:\\r\\n\\r\\n- `order_placed` - set to the time when you received the order on your system.\\r\\n- `ready_for_pickup` - set to the time when you book the order on Shippit.\\r\\n\\r\\nIf no `tracking_histories` entries are passed, Shippit will generate an initial tracking history for the order, set to `ready_for_pickup` at the point when Shippit received the API request.\\r\\n\\r\\n### Authority to leave\\r\\n* When using 500g satchels,\\r\\n  * When specifying ```No```, you must have ```Satchel 500g (A5)``` enabled in your settings (Settings \u003e Pick \u0026 Pack \u003e Automatic Package Sorting \u003e Carrier Default Presets). \\r\\n  * When specifying ```Yes```, you must have ```Satchel 500g ATL (A5)``` enabled in your settings (Settings \u003e Pick \u0026 Pack \u003e Automatic Package Sorting \u003e Carrier Default Presets).\\r\\n  * If nothing is specified, we assume ATL = ```No```\\r\\n\\r\\n* Note that the final ATL value also depends on how couriers are allocated and if users manually override the ATL option in the UI. It is important when confirming quotes that the ATL is set as desired.\\r\\n\\r\\n\"\n  /orders/{tracking_number}:\n    delete:\n      tags:\n        - Order\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OrderDeleteResponse'\n              examples:\n                Example successfully cancelled Order:\n                  value:\n                    response:\n                      id: 33\n                      tracking_number: PPuqD0J0uLslM\n                      state: cancelled\n                      processing_state: ' processing_cancelled'\n                      delivery_address: 1 Union Street\n                      delivery_suburb: Pyrmont\n                      delivery_postcode: '2009'\n                      receiver_name: Francois\n                      receiver_contact_number: '0404342342'\n                      courier_name: eParcel International\n                      slug: ppuqd0j0ulslm\n                      price: '0.0'\n                      retailer_invoice: SO42637\n                      courier_job_id: ABC0100023\n                      user_attributes:\n                        email: test@shippit.com\n                        first_name: John\n                        last_name: Smith\n                      parcel_attributes:\n                        - qty: 1\n                          length: 0.325\n                          width: 0.205\n                          depth: 0.03\n                          weight: 0.5\n          description: Returns the Order with state = `cancelled`\n        '403':\n          $ref: '#/components/responses/InvalidMerchantAccountErrorResponse'\n        '404':\n          $ref: '#/components/responses/ResourceNotFound'\n        '422':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OrderDeleteErrorResponse'\n              examples:\n                Example failed cancellation of Order:\n                  value:\n                    error: order_cannot_be_cancelled\n                    error_description: \u003e-\n                      The requested order is currently in a state that cannot be\n                      cancelled\n                    order_state: in_transit\n          description: \u003e-\n            Returns an error indicating that the Order could not be cancelled,\n            and stating the reason why.\n      security:\n        - AuthToken: []\n      operationId: cancelOrder\n      summary: Cancel an Order\n      description: \u003e-\n        Cancels an Order in Shippit using the tracking number.\n\n\n        The API first checks if the Order can be cancelled, ie., if its current\n        state allows it, then returns an immediate response. If the Order is\n        successfully cancelled, the API will answer with the Order with its\n        state updated as `cancelled`. If it cannot be cancelled, it will throw a\n        `422` error.\n    parameters:\n      - name: tracking_number\n        description: The tracking number of the Order.\n        schema:\n          type: string\n        in: path\n        required: true\n  /orders/{tracking_number}/label:\n    get:\n      tags:\n        - Order\n        - Label\n      parameters:\n        - name: tracking_number\n          description: The tracking number of the Order.\n          schema:\n            type: string\n          in: path\n          required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelResponse'\n              examples:\n                Example Successful Label Response:\n                  value:\n                    response:\n                      id: 5044\n                      order:\n                        courier_delivery_instructions: 'Authority to Leave. '\n                        courier_job_id: SHP0100002\n                        delivery_address: 37 Manorvale Pde\n                        delivery_instructions: ''\n                        delivery_postcode: '3030'\n                        delivery_state: VIC\n                        delivery_suburb: Werribee\n                        id: 9972\n                        invoice_number: INV-1384\n                        parcels:\n                          - depth: 0.19\n                            length: 0.38\n                            name: ''\n                            weight: 1\n                            width: 0.29\n                            label_number: SHP010000201000930803\n                            courier_data:\n                              product_code: X123\n                              pickup_zone: SYD\n                              dropoff_zone: MEL\n                        products:\n                          - title: Industrial Paint Stripper\n                            price: 29.13\n                            sku: 0.1\n                            quantity: 1\n                            tariff_code: '000999'\n                            dangerous_goods_code: ID8000\n                            dangerous_goods_text: \u003e-\n                              ID8000 Consumer commodities - Dangerous Goods as\n                              per attached DGD\n                            origin_country_code: TH\n                        price: '15.95'\n                        receiver_contact_number: ''\n                        receiver_language_code: EN\n                        receiver_name: Jane Doe\n                        retailer_invoice: ''\n                        slug: ppkfqy44u8nff\n                        state: completed\n                        tracking_number: PPKFqy44U8Nff\n                        user:\n                          email: jane.doe@shippit.com\n                          first_name: Jane\n                          last_name: 'Doe '\n                          mobile: ''\n                        customs_documents_require_printing: false\n                        documents:\n                          archive_awb:\n                            url: \u003e-\n                              https://shippit-web-production.s3.amazonaws.com/uploads/order/archive_document/15870762/archive_581833317220190318-2852-yi07y0.PDF\n                            page_size: a6\n                            file_type: pdf\n                          customs_invoice:\n                            url: \u003e-\n                              https://shippit-web-production.s3.amazonaws.com/uploads/order/customs_invoice/361690/commercial_invoice_3073489348620190218-6221-mxrhx4.pdf\n                            page_size: a3\n                            file_type: pdf\n                          dangerous_goods_declaration:\n                            url: \u003e-\n                              https://shippit-web-production.s3.amazonaws.com/uploads/order/dangerous_goods_declaration/361690/dangerous_goods_declaration_3073489348620140318-6220-11vib5y.pdf\n                            page_size: a3\n                            file_type: pdf\n                          shipping_label:\n                            url: \u003e-\n                              https://shippit-production.s3.amazonaws.com/uploads/label/attachment/5044/PPKFqy44U8Nff.pdf\n                            page_size: a6\n                            file_type: pdf\n                      qualified_url: \u003e-\n                        https://shippit-production.s3.amazonaws.com/uploads/label/attachment/5044/PPKFqy44U8Nff.pdf\n          description: Returns an Order and related label information.\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GenericErrorResponse'\n              examples:\n                Example Order not found response:\n                  value:\n                    error: order_not_found\n                    error_description: The requested order could not be found.\n          description: \u003e-\n            Returns an error indicating that the Order could not be found in\n            Shippit\n        '422':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GenericErrorResponse'\n              examples:\n                Example Unprocessable Label:\n                  value:\n                    error: order_not_available_to_label\n                    error_description: \u003e-\n                      The requested order has not been processed, please try\n                      again.\n          description: \u003e-\n            Returns an error indicating that the Order cannot yet be processed\n            for labelling.\n\n\n            Typically this is because the Order has yet to be processed or\n            allocatated a courier.\n      security:\n        - AuthToken: []\n      operationId: getOrderLabel\n      summary: Get Label information for an Order\n      description: \u003e-\n        Retrieves labelling information for an Order using the tracking number.\n\n\n        The labelling information for an Order can only be retrieved once the\n        Order has been processed and allocated a courier, which may take some\n        time after the Order has been placed. If the Order is yet to be\n        processed, you will get a `422` Unprocessable response.\n    parameters:\n      - name: tracking_number\n        description: The tracking number of the Order\n        schema:\n          type: string\n        in: path\n        required: true\n  /orders/{tracking_number}/tracking:\n    get:\n      tags:\n        - Order\n        - Track\n      parameters:\n        - name: tracking_number\n          description: The tracking number of the Order\n          schema:\n            type: string\n          in: path\n          required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TrackingResponse'\n              examples:\n                Example Tracking Response:\n                  value:\n                    response:\n                      tracking_number: PP39TBECV7QSSPK\n                      tracking_url: http://www.shippit.com/track/pp39tbecv7qsspk\n                      success: true\n                      track:\n                        - status: Completed\n                          date: '2015-04-03T00:00:00.000Z'\n                          timestamp: 58985\n                          status_owner: Bonds Couriers\n                        - status: With Driver\n                          date: '2015-04-03T00:00:00.000Z'\n                          timestamp: 55385\n                          status_owner: Bonds Couriers\n                        - status: In Transit\n                          date: '2015-04-03T00:00:00.000Z'\n                          timestamp: 55325\n                          status_owner: Bonds Couriers\n                        - status: Ready For Pick Up\n                          date: '2015-04-03T00:00:00.000Z'\n                          timestamp: 49400\n                          status_owner: Harold's Harpoons\n                        - status: Despatch In Progress\n                          date: '2015-04-03T00:00:00.000Z'\n                          timestamp: 36603\n                          status_owner: Harold's Harpoons\n                        - status: Order Placed\n                          date: '2015-04-03T00:00:00.000Z'\n                          timestamp: '07:23:32'\n                          status_owner: Harold's Harpoons\n          description: Returns tracking info related to the Order\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TrackingErrorResponse'\n              examples:\n                Error Tracking Number does not exist:\n                  value:\n                    error:\n                      order_id:\n                        - Sorry, the tracking number you entered does not exist.\n                    error_description: The data given to this server does not meet our criteria.\n                    success: false\n          description: Returns an error if the provided tracking number does not exist\n      operationId: trackOrder\n      summary: Track Order\n      description: \u003e-\n        This sends a tracking request to the API to retrieve the status of an\n        Order.\n\n\n        This uses a pull-based model of Order tracking, which sends tracking\n        info on each request. If you would like to use a push-based model where\n        you automatically receive messages on Order status changes, you can\n        subscribe to the `Tracking Webhook` instead.\n    parameters:\n      - name: tracking_number\n        description: The tracking number of the order\n        schema:\n          type: string\n        in: path\n        required: true\n  /quotes:\n    post:\n      requestBody:\n        description: Quote request\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/QuoteRequest'\n              required:\n                - dropoff_suburb\n                - dropoff_postcode\n                - parcel_attributes\n              properties:\n                dropoff_suburb:\n                  description: The destination suburb for the quote.\n                  required:\n                    - dropoff_suburb\n                  type: string\n                  example: Surry Hills\n                dropoff_state:\n                  description: \u003e-\n                    The destination state for the quote. **Required** when\n                    `dropoff_country_code` is unassigned or set to AU.\n                  type: string\n                  example: NSW\n                dropoff_postcode:\n                  description: The destination postcode for the quote.\n                  type: string\n                  example: 2010\n                dropoff_country_code:\n                  description: \u003e-\n                    The destination country code for the quote in `ISO03166\n                    Alpha-2` format.  If unassigned or set to AU,\n                    `dropoff_state` is required.\n                  default: AU\n                  type: string\n                  example: AU\n                order_date:\n                  description: \u003e-\n                    Optional date for the quote, this is only relevant to\n                    priority orders.\n                  type: string\n                  example: '2018-08-01T00:00:00.000Z'\n                return_all_quotes:\n                  description: \u003e-\n                    If set to `true`, the system returns all quotes instead of\n                    only the cheapeast or the fastest quote as per merchant\n                    settings.\n                  default: false\n                  type: boolean\n                  example: true\n                dutiable_amount:\n                  description: The declared value for customs when shipping international.\n                  type: number\n                  example: 199.95\n                parcel_attributes:\n                  description: \u003e-\n                    An array of items for the quote.   **Note** that only `qty`\n                    and `weight` are required.\n                  type: array\n                  items:\n                    required:\n                      - qty\n                      - weight\n                    type: object\n                    properties:\n                      qty:\n                        description: Number of items in the parcel.\n                        type: integer\n                        example: 1\n                      weight:\n                        description: Parcel weight in kilograms.\n                        type: string\n                        example: 19.4\n                      length:\n                        description: Parcel length in meters.\n                        type: string\n                        example: 0.1\n                      width:\n                        description: Parcel width in meters.\n                        type: string\n                        example: 0.1\n                      depth:\n                        description: Parcel depth in meters.\n                        type: string\n                        example: 0.1\n                      dangerous_goods_text:\n                        description: Dangerous good attributes are optional strings.\n                        type: string\n              example:\n                quote:\n                  dropoff_suburb: Surry Hills\n                  dropoff_state: NSW\n                  dropoff_postcode: 2010\n                  dropoff_country_code: AU\n                  return_all_quotes: true\n                  parcel_attributes:\n                    - qty: 1\n                      weight: 0.5\n                      length: 0.1\n                      width: 0.2\n                      depth: 0.1\n            examples:\n              Example Quote Request:\n                value:\n                  quote:\n                    dropoff_postcode: '2000'\n                    dropoff_state: NSW\n                    dropoff_suburb: Sydney\n                    parcel_attributes:\n                      - qty: 1\n                        weight: 1\n        required: true\n      tags:\n        - Quote\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/QuoteResponse'\n                title: Live Quote Response\n                properties:\n                  count:\n                    description: Number of quotes retrieved.\n                    type: integer\n                  response:\n                    type: object\n                    properties:\n                      success:\n                        description: XXXX\n                        type: boolean\n                        example: true\n                      courier_type:\n                        description: Courier name.\n                        type: string\n                        example: CouriersPlease\n                      service_level:\n                        description: The courier service level offered.\n                        type: string\n                        example: standard\n                  quotes:\n                    type: object\n                    properties:\n                      price:\n                        description: The courier price for the delivery.\n                        type: number\n                        example: 7.79\n                      estimated_transit_time:\n                        description: \u003e-\n                          The estimated time for the delivery.  This is provided\n                          for standard and express deliveries.\n                        type: string\n                        example: 3 business days\n                      delivery_date:\n                        type: string\n                      delivery_window:\n                        type: string\n                      delivery_window_desc:\n                        type: string\n                example:\n                  count: 3\n                  response:\n                    - success: true\n                      courier_type: CouriersPlease\n                      service_level: standard\n                      quotes:\n                        - price: 7.79\n                          estimated_transit_time: 1 business day\n                    - success: true\n                      courier_type: Eparcel\n                      service_level: standard\n                      quotes:\n                        - price: 17.14\n                          estimated_transit_time: 2 business days\n                    - success: true\n                      courier_type: Bonds\n                      service_level: priority\n                      quotes:\n                        - delivery_date: '2014-08-08T00:00:00.000Z'\n                          delivery_window: 13:29-16:29\n                          delivery_window_desc: 1PM-4AM\n                          price: 24.24\n                    - delivery_date: '2014-08-08T00:00:00.000Z'\n                      delivery_window: 16:00-19:00\n                      delivery_window_desc: 4PM-7PM\n                      price: 24.24\n              examples:\n                Successfully Generated Quote:\n                  value:\n                    response:\n                      - courier_type: CouriersPlease\n                        quotes:\n                          - price: 20.4\n                            estimated_transit_time: 3 business days\n                        service_level: standard\n                        success: true\n                      - courier_type: eParcelExpress\n                        quotes:\n                          - price: 30.4\n                            estimated_transit_time: 1 business day\n                        service_level: express\n                        success: true\n                      - courier_type: Priority\n                        quotes:\n                          - delivery_date: '2014-09-18T00:00:00.000Z'\n                            delivery_window: 07:00-10:00\n                            delivery_window_desc: 7AM-10AM\n                            price: 24.24\n                            courier_type: Bonds\n                          - delivery_date: '2014-09-18T00:00:00.000Z'\n                            delivery_window: 10:00-13:00\n                            delivery_window_desc: 10AM-1PM\n                            price: 24.24\n                            courier_type: AlliedExpressP2P\n                        service_level: priority\n                        success: true\n                    count: 3\n          description: Successful quote response\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/QuoteErrorResponse'\n            text/html: {}\n          description: \u003e-\n            Returned when a quote request cannot be generated at all.\n\n\n            Note that if a quote request to a carrier _can_ be generated, but\n            one or more carriers cannot respond to the quote, then the quote\n            request succeeds and this response is not given. The status of each\n            individual quote would then be determined from the response body.\n            This response is only returned when the quote request cannot be\n            processed.\n\n\n            If returned as text/html, will be blank.\n        '403':\n          $ref: '#/components/responses/InvalidMerchantAccountErrorResponse'\n        '500':\n          $ref: '#/components/responses/UnknownErrorResponse'\n      security:\n        - AuthToken: []\n      operationId: getQuote\n      summary: Retrieve Quote\n      description: \u003e-\n        Submits a request for Quotes from different couriers on Shippit.\n\n\n        At minimum, a Quote requires a delivery location and information on the\n        parcels being delivered. However, different couriers and delivery\n        methods can require additional fields to satisfy their requirements.\n        There is a maximum of 1000 parcels per quote request.\n\n\n        ### Listing all quotes vs listing a single quote\n\n        By default, Shippit will return a quote from the fastest / cheapest\n        courier. However, for the purposes of showing different options, such as\n        in a courier selection page, you may want to have Shippit display all\n        quotes. To do this, pass the `return_all_quotes` field as true.\n\n\n        Note that the quotes returned are filtered based on the requirements\n        given by different couriers. Depending on the info submitted in the\n        order and the carrier settings in the Shippit admin page, you may not\n        see quotes from all configured carriers.\n  /merchant:\n    summary: \u003e-\n      The merchant settings API allows you to query and update the current\n      settings for your merchant account.\n    get:\n      tags:\n        - Merchant\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MerchantResponse'\n              examples:\n                Example Merchant Response:\n                  value:\n                    response:\n                      store_name: New Store Name\n                      company_name: Harold Pty Ltd\n                      contact_name: Robert\n                      contact_phone: '0400000000'\n                      shipping_cart_method_name: ''\n                      preparation_time: 60\n                      website_url: www.haroldsharpoons.com.au\n                      address_1: 110 Rex Road\n                      suburb: Sydney\n                      state: NSW\n                      postcode: '2000'\n                      country_code: AU\n          description: Returns an object representing your merchant account settings.\n        '403':\n          $ref: '#/components/responses/InvalidMerchantAccountErrorResponse'\n      security:\n        - AuthToken: []\n      operationId: getMerchant\n      summary: Get Merchant settings\n    patch:\n      requestBody:\n        description: Merchant request\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MerchantRequest'\n            examples:\n              Example Merchant settings change:\n                value:\n                  merchant:\n                    store_name: New Store Name\n        required: true\n      tags:\n        - Merchant\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MerchantResponse'\n              examples:\n                Updated merchant account:\n                  value:\n                    response:\n                      store_name: Harolds Harpoons\n                      company_name: Harold Pty Ltd\n                      contact_name: Robert\n                      contact_phone: '0400000000'\n                      shipping_cart_method_name: ''\n                      preparation_time: 60\n                      website_url: www.haroldsharpoons.com.au\n                      address_1: 110 Rex Road\n                      suburb: Sydney\n                      state: NSW\n                      postcode: '2000'\n                      country_code: AU\n          description: The updated merchant account.\n        '400':\n          $ref: '#/components/responses/BadRequestErrorResponse'\n        '403':\n          $ref: '#/components/responses/InvalidMerchantAccountErrorResponse'\n        '500':\n          $ref: '#/components/responses/UnknownErrorResponse'\n      operationId: updateMerchant\n      summary: Update Merchant settings\n      description: \u003e-\n        Given an object with the desired settings to update, will update the\n        Merchant settings on Shippit\n  /webhook:\n    post:\n      requestBody:\n        description: Updated status info about the Order sent by the webhook.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/WebhookRequest'\n            examples:\n              Example Tracking Webhook Status:\n                value:\n                  tracking_number: PPYvZCTod5bkD\n                  tracking_url: http://www.shippit.com/track/ppyvzctod5bkd\n                  current_state: completed\n                  retailer_order_number: WEYFEW232\n                  courier_name: Couriers Please\n                  courier_job_id: CPAVZUZ0001749\n                  delivery_address: 115 Campbell Drive\n                  delivery_suburb: Wahroonga\n                  delivery_postcode: '2076'\n                  delivery_state: NSW\n                  merchant_url: myshopify.storename.com\n                  status_history:\n                    - status: completed\n                      time: '2016-04-26T19:36:32.000Z'\n                    - status: with_driver\n                      time: '2016-04-26T18:36:32.000Z'\n                    - status: in_transit\n                      time: '2016-04-26T17:36:32.000Z'\n                    - status: ready_for_pickup\n                      time: '2016-04-26T16:36:11.000Z'\n                    - status: despatch_in_progress\n                      time: '2016-04-26T16:27:35.000Z'\n                    - status: order_placed\n                      time: '2016-04-26T16:25:04.000Z'\n                  products:\n                    - quantity: 1\n                      sku: EWPE123123\n                      title: Super awesome red tshirt\n                      product_line_id: '1234'\n                    - quantity: 7\n                      sku: EWPE123123\n                      title: Super awesome blue tshirt\n                      product_line_id: '1235'\n        required: true\n      tags:\n        - Track\n      responses:\n        '200':\n          description: \u003e-\n            The response (success) the webhook expects from your application\n            endpoint.\n      operationId: trackOrderHook\n      summary: Webhook\n      description: \u003e\n        Shippit will send status updates on orders to a URL you have configured\n        in the Shippit admin page.\n\n\n        This can be configured at `Settings` -\u003e `Integrations` -\u003e `Webhook URL`\n        at the Shippit admin.\n\n\n        If configured, Shippit will send POST requests to the URL set here with\n        updates on an Order's status as it progresses.\n\n\n        ---\n\n        ### Best practices for using webhooks\n\n\n        **Event types**\n\n\n        Your webhook implementation should be configured to action only the\n        types of events required by your integration. Actioning for extra events\n        (or all events) is not recommended as we may add new events at anytime\n\n\n        **Handle duplicate events**\n\n\n        Webhook endpoints might occasionally receive the same event more than\n        once. We advise you to guard against duplicated event receipts by making\n        your event processing idempotent. One way of doing this is logging the\n        events youâ€™ve processed, and then not processing already-logged events.\n\n\n        **Order of events**\n\n\n        Shippit does not guarantee delivery of events in the order in which they\n        are generated. \n  /book:\n    description: ''\n    post:\n      requestBody:\n        description: An array of Order tracking numbers to book\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BookRequest'\n            examples:\n              Example Book Request:\n                value:\n                  orders:\n                    - PPKNpNhR0A5Ud\n                    - PP2ZlACi2vtxNY\n                    - PPKNpNhR0A5Ud\n        required: true\n      tags:\n        - Book\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BookResponse'\n              examples:\n                Example Successful Book Response:\n                  value:\n                    response:\n                      - courier: eParcel Express\n                        manifest: ABC0000214\n                        manifest_pdf: https://shippit.com/manifest20160721-96368-1tpowvr.pdf\n                        order_count: 2\n                        success: true\n                      - courier: Fastway\n                        manifest: FW20160721215\n                        manifest_pdf: https://shippit.com/manifest20160721-96368-1tpowvr.pdf\n                        order_count: 2\n                        success: true\n                      - courier: Couriers Please\n                        manifest: JJJ20160721216\n                        manifest_pdf: https://shippit.com/manifest20160721-96368-1tpowvr.pdf\n                        order_count: 4\n                        success: true\n                      - courier: eParcel\n                        manifest: ABC0000217\n                        manifest_pdf: https://shippit.com/manifest20160721-96368-1tpowvr.pdf\n                        order_count: 2\n                        success: true\n                    count: 4\n                Error Book Response - could not be found:\n                  value:\n                    response:\n                      - error: orders_not_available_to_book\n                        error_description: \u003e-\n                          The requested orders could not be found. Please remove\n                          and try again.\n                        orders:\n                          - invalid-tracking\n                        success: false\n                    count: 1\n                Error Manifest failed:\n                  value:\n                    response:\n                      - courier: Fastway\n                        error: Manifest creation failed\n                        manifest: FW20160721224\n                        orders:\n                          - ppd5q24mtuett\n                        success: false\n                      - courier: Couriers Please\n                        error: Manifest creation failed\n                        manifest: JJJ20160721225\n                        orders:\n                          - pp0myuwhnajn4\n                        success: false\n                    count: 2\n          description: \u003e-\n            Returns the status of the bookings at each courier.\n\n\n            This API will validate that all of the requested orders are accurate\n            and ready to be booked, if all of the orders sent in cannot be\n            booked, the response will detail which orders cannot be found. If\n            this response is received, none of the order numbers sent in will\n            have been booked. If a manifest fails to be generated, the response\n            will include an array of orders on each manifest which were not\n            booked.\n        '400':\n          $ref: '#/components/responses/BadRequestErrorResponse'\n        '403':\n          $ref: '#/components/responses/InvalidMerchantAccountErrorResponse'\n        '500':\n          $ref: '#/components/responses/UnknownErrorResponse'\n      security:\n        - AuthToken: []\n      operationId: bookOrder\n      summary: Book Order\n      description: \u003e-\n        Given an array of Orders, this will initiate a booking with their\n        respective couriers.\n\n\n        For Orders to be booked, they must first be labelled.\ncomponents:\n  schemas:\n    QuoteResponse:\n      title: Root Type for QuoteResponse\n      description: \u003e-\n        Represents a response to an QuoteRequest, which shows either the\n        generated Quote object or an error code with a description of the error.\n      type: object\n      allOf:\n        - type: object\n          properties:\n            response:\n              description: The Quote returned by the carrier\n              type: array\n              items:\n                $ref: '#/components/schemas/QuoteResult'\n            count:\n              description: Number of quote results returned.\n              type: number\n        - $ref: '#/components/schemas/DataResponse'\n      example: |-\n        {\n            \"response\": [\n                {\n                    \"courier_type\": \"CouriersPlease\",\n                    \"error\": null,\n                    \"quotes\": [\n                        {\n                            \"price\": 20.4,\n                            \"estimated_transit_time\": \"3 business days\"\n                        }\n                    ],\n                    \"service_level\": \"standard\",\n                    \"success\": true\n                },\n                {\n                    \"courier_type\": \"eParcelExpress\",\n                    \"error\": null,\n                    \"quotes\": [\n                        {\n                            \"price\": 30.4,\n                            \"estimated_transit_time\": \"1 business day\"\n                        }\n                    ],\n                    \"service_level\": \"express\",\n                    \"success\": true\n                },\n                {\n                    \"courier_type\": \"Priority\",\n                    \"error\": null,\n                    \"quotes\": [\n                        {\n                            \"delivery_date\": \"2014-09-18\",\n                            \"delivery_window\": \"07:00-10:00\",\n                            \"delivery_window_desc\": \"7AM-10AM\",\n                            \"price\": 24.24,\n                            \"courier_type\": \"Bonds\"\n                        },\n                        {\n                            \"delivery_date\": \"2014-09-18\",\n                            \"delivery_window\": \"10:00-13:00\",\n                            \"delivery_window_desc\": \"10AM-1PM\",\n                            \"price\": \"24.2\",\n                            \"courier_type\": \"AlliedExpressP2P\"\n                        }\n                    ],\n                    \"service_level\": \"priority\",\n                    \"success\": true\n                }\n            ],\n            \"count\": 3\n        }\n    QuoteRequest:\n      title: Root Type for QuoteRequest\n      description: Represents a request for carrier Quotes from Shippit.\n      required:\n        - quote\n      type: object\n      properties:\n        quote:\n          $ref: '#/components/schemas/QuoteRequestDetails'\n          description: A specification of the queries to include in the quote.\n      example:\n        quote:\n          dropoff_postcode: some text\n          dropoff_state: some text\n          dropoff_suburb: some text\n          parcel_attributes:\n            qty: 76\n            weight: 54\n    MerchantRequest:\n      title: Root Type for MerchantRequest\n      description: Represents a request to update a merchant\n      required:\n        - merchant\n      type: object\n      properties:\n        merchant:\n          $ref: '#/components/schemas/Merchant'\n          description: Fields to update on a merchant account.\n          properties:\n            store_name:\n              type: string\n      example: |-\n        {\n            \"merchant\": {\n                \"store_name\": \"New Store Name\"\n            }\n        }\n    BookRequest:\n      title: Root Type for BookRequest\n      description: \u003e-\n        The book API accepts an array of orders to book, this will initiate a\n        booking with the respective carriers of the orders sent in. \n      required:\n        - orders\n      type: object\n      properties:\n        orders:\n          description: \u003e-\n            an array of Shippit tracking numbers, corresponding to the orders\n            which you would like to book.\n          type: array\n          items:\n            type: string\n      example: |\n        {\n            \"orders\": [\n                \"PPKNpNhR0A5Ud\",\n                \"PP2ZlACi2vtxNY\",\n                \"PPKNpNhR0A5Ud\"\n            ]\n        }\n    Book:\n      description: \u003e-\n        The book API accepts an array of orders to book, this will initiate a\n        booking with the respective carriers of the orders sent in. \n      type: object\n    OrderRequest:\n      title: Root Type for OrderRequest\n      description: Represents a request to submit an order to shippit.\n      required:\n        - order\n      type: object\n      properties:\n        order:\n          $ref: '#/components/schemas/OrderRequestOrder'\n          description: The Order to create in shippit.\n      example:\n        order:\n          courier_type: standard\n          delivery_address: 1 Union Street\n          delivery_postcode: '2009'\n          delivery_state: NSW\n          delivery_suburb: Pyrmont\n          authority_to_leave: 'Yes'\n          parcel_attributes:\n            - qty: 1\n              weight: 2.1\n          user_attributes:\n            email: test@shippit.com\n            first_name: John\n            last_name: Smith\n    Merchant:\n      title: Root Type for Merchant\n      description: Represents a merchant account\n      type: object\n      properties:\n        store_name:\n          type: string\n          description: Store name\n        company_name:\n          type: string\n          description: Company name\n        contact_name:\n          type: string\n          description: Contact name\n        contact_phone:\n          type: string\n          description: Contact phone\n        shipping_cart_method_name:\n          type: string\n          description: Shipping cart method name\n        preparation_time:\n          format: int32\n          type: integer\n          description: Preparation time\n        website_url:\n          type: string\n          description: Website URL\n        address_1:\n          type: string\n          description: Address\n        suburb:\n          type: string\n          description: Suburb\n        state:\n          type: string\n          description: State\n        postcode:\n          type: string\n          description: Postcode\n      example:\n        store_name: New Store Name\n        company_name: Harold Pty Ltd\n        contact_name: Robert\n        contact_phone: '0400000000'\n        shipping_cart_method_name: ''\n        preparation_time: 60\n        website_url: www.haroldsharpoons.com.au\n        address_1: 110 Rex Road\n        suburb: Sydney\n        state: NSW\n        postcode: '2000'\n    UserAttributes:\n      title: Root Type for UserAttributes\n      description: |\n        Represents the customers details attached to the order.\n      required:\n        - first_name\n        - email\n      properties:\n        email:\n          description: the customer's email address\n          type: string\n        first_name:\n          description: \u003e\n            the customer's first name. If ```last_name``` is not provided, then\n            it is used as the customer's full name.\n          type: string\n        last_name:\n          description: customer's last name\n          type: string\n        mobile:\n          description: Mobile number of the user / receiver.\n          type: string\n      example:\n        email: john.smith@shippit.com\n        first_name: John\n        last_name: Smith\n    LabelDocument:\n      title: Root Type for LabelDocument\n      description: \u003e-\n        A Label or document in the Labels API, representing a printable document\n        available on a public URL.\n      type: object\n      properties:\n        url:\n          description: \u003e-\n            URL to a printable PDF document.\n\n            This is a [pre-signed\n            URL](https://docs.aws.amazon.com/AmazonS3/latest/dev/PresignedUrlUploadObject.html),\n            generated by the Shippit platform to provide access to a secured\n            document. The pre-signed URL remains valid for 7 days. If you need\n            to access this document after expiration, please make another\n            request for a new URL to be issued.\n          type: string\n        page_size:\n          description: Page size\n          type: string\n        file_type:\n          description: File type of the label\n          type: string\n        encoded_label:\n          description: \u003e-\n            If you have ZPL for your account, printable ZPL data for the\n            document.\n          type: string\n      example: \"{\\r\\n  \\\"url\\\": \\\"https://shippit-web-production.s3.amazonaws.com/uploads/order/customs_invoice/361690/commercial_invoice_3073489348620190218-6221-mxrhx4.pdf\\\",\\r\\n  \\\"page_size\\\": \\\"a3\\\",\\r\\n  \\\"file_type\\\": \\\"pdf\\\"\\r\\n}\"\n    Label:\n      title: Root Type for Label\n      description: Represents an Order and related labelling information\n      required:\n        - order\n        - qualified_url\n      type: object\n      properties:\n        data:\n          description: Data\n          type: object\n        id:\n          format: int32\n          description: Shippit internal ID of the generated label.\n          type: integer\n        order:\n          $ref: '#/components/schemas/OrderResponseOrder'\n          description: The Order being labelled.\n        qualified_url:\n          description: \u003e-\n            URL to a printable label for the Order.\n\n            This is a [pre-signed\n            URL](https://docs.aws.amazon.com/AmazonS3/latest/dev/PresignedUrlUploadObject.html),\n            generated by the Shippit platform to provide access to a secured\n            label. The pre-signed URL remains valid for 7 days. If you need to\n            access this label after expiration, please make another request for\n            a new URL to be issued.\n          type: string\n      example: \"{\\r\\n    \\\"data\\\": null,\\r\\n    \\\"id\\\": 5044,\\r\\n    \\\"order\\\": {\\r\\n        \\\"courier_delivery_instructions\\\": \\\"Authority to Leave. \\\",\\r\\n        \\\"courier_type\\\": null,\\r\\n        \\\"courier_job_id\\\": \\\"SHP0100002\\\",\\r\\n        \\\"delivery_address\\\": \\\"37 Manorvale Pde\\\",\\r\\n        \\\"delivery_date\\\": null,\\r\\n        \\\"delivery_instructions\\\": \\\"\\\",\\r\\n        \\\"delivery_postcode\\\": \\\"3030\\\",\\r\\n        \\\"delivery_state\\\": \\\"VIC\\\",\\r\\n        \\\"delivery_district_city\\\": null,\\r\\n        \\\"delivery_suburb\\\": \\\"Werribee\\\",\\r\\n        \\\"delivery_window\\\": null,\\r\\n        \\\"id\\\": 9972,\\r\\n        \\\"invoice_number\\\": \\\"INV-1384\\\",\\r\\n        \\\"parcels\\\": [\\r\\n            {\\r\\n                \\\"depth\\\": 0.19,\\r\\n                \\\"length\\\": 0.38,\\r\\n                \\\"name\\\": \\\"\\\",\\r\\n                \\\"weight\\\": 1.0,\\r\\n                \\\"width\\\": 0.29,\\r\\n                \\\"label_number\\\": \\\"SHP010000201000930803\\\",\\r\\n                \\\"courier_data\\\": {\\r\\n                  \\\"product_code\\\": \\\"X123\\\",\\r\\n                  \\\"pickup_zone\\\": \\\"SYD\\\",\\r\\n                  \\\"dropoff_zone\\\": \\\"MEL\\\"\\r\\n                }\\r\\n            }\\r\\n        ],\\r\\n        \\\"products\\\": [\\r\\n            {\\r\\n                \\\"title\\\": \\\"Industrial Paint Stripper\\\",\\r\\n                \\\"price\\\": 29.13,\\r\\n                \\\"sku\\\": 0.1,\\r\\n                \\\"quantity\\\": 1,\\r\\n                \\\"tariff_code\\\": \\\"000999\\\",\\r\\n                \\\"dangerous_goods_code\\\": \\\"ID8000\\\",\\r\\n                \\\"dangerous_goods_text\\\": \\\"ID8000 Consumer commodities - Dangerous Goods as per attached DGD\\\",\\r\\n                \\\"origin_country_code\\\": \\\"TH\\\"\\r\\n            }\\r\\n        ],\\r\\n        \\\"price\\\": \\\"15.95\\\",\\r\\n        \\\"receiver_contact_number\\\": \\\"\\\",\\r\\n        \\\"receiver_language_code\\\": \\\"EN\\\",\\r\\n        \\\"receiver_name\\\": \\\"Jane Doe\\\",\\r\\n        \\\"retailer_invoice\\\": \\\"\\\",\\r\\n        \\\"slug\\\": \\\"ppkfqy44u8nff\\\",\\r\\n        \\\"state\\\": \\\"completed\\\",\\r\\n        \\\"tracking_number\\\": \\\"PPKFqy44U8Nff\\\",\\r\\n        \\\"user\\\": {\\r\\n            \\\"email\\\": \\\"jane.doe@shippit.com\\\",\\r\\n            \\\"first_name\\\": \\\"Jane\\\",\\r\\n            \\\"id\\\": 7808,\\r\\n            \\\"last_name\\\": \\\"Doe \\\",\\r\\n            \\\"mobile\\\": \\\"\\\"\\r\\n        },\\r\\n        \\\"customs_documents_require_printing\\\": false,\\r\\n        \\\"documents\\\": {\\r\\n            \\\"archive_awb\\\": {\\r\\n              \\\"url\\\": \\\"https://shippit-web-production.s3.amazonaws.com/uploads/order/archive_document/15870762/archive_581833317220190318-2852-yi07y0.PDF\\\",\\r\\n              \\\"page_size\\\": \\\"a6\\\",\\r\\n              \\\"file_type\\\": \\\"pdf\\\"\\r\\n            },\\r\\n            \\\"customs_invoice\\\": {\\r\\n              \\\"url\\\": \\\"https://shippit-web-production.s3.amazonaws.com/uploads/order/customs_invoice/361690/commercial_invoice_3073489348620190218-6221-mxrhx4.pdf\\\",\\r\\n              \\\"page_size\\\": \\\"a3\\\",\\r\\n              \\\"file_type\\\": \\\"pdf\\\"\\r\\n            },\\r\\n            \\\"dangerous_goods_declaration\\\": {\\r\\n              \\\"url\\\": \\\"https://shippit-web-production.s3.amazonaws.com/uploads/order/dangerous_goods_declaration/361690/dangerous_goods_declaration_3073489348620140318-6220-11vib5y.pdf\\\",\\r\\n              \\\"page_size\\\": \\\"a3\\\",\\r\\n              \\\"file_type\\\": \\\"pdf\\\"\\r\\n            },\\r\\n            \\\"shipping_label\\\": {\\r\\n              \\\"url\\\": \\\"https://shippit-production.s3.amazonaws.com/uploads/label/attachment/5044/PPKFqy44U8Nff.pdf\\\",\\r\\n              \\\"page_size\\\": \\\"a6\\\",\\r\\n              \\\"file_type\\\": \\\"pdf\\\"\\r\\n            }\\r\\n        }\\r\\n    },\\r\\n    \\\"qualified_url\\\": \\\"https://shippit-production.s3.amazonaws.com/uploads/label/attachment/5044/PPKFqy44U8Nff.pdf\\\"\\r\\n}\"\n    BookResponse:\n      description: \u003e-\n        Represents a response to the Book API, which returns the status of\n        booking the order at each courier.\n      type: object\n      properties:\n        response:\n          description: Array of booking statuses at each courier\n          type: array\n          items:\n            $ref: '#/components/schemas/BookingStatus'\n        error:\n          description: \u003e-\n            Error code returned by Shippit\n\n\n            For the book response, there can be errors at the top-level request\n            or for individual orders booked.\n\n\n            If the error occurs at the top-level request (order format,\n            authorization), then this error code applies. Otherwise, the\n            response will be successful and there will be individual errors\n            applied in the body of each booked item.\n          type: string\n        error_description:\n          description: Human-readable description of the top-level error encountered.\n          type: string\n        count:\n          description: Number of items in the response\n          type: integer\n      example:\n        response:\n          - courier: eParcel Express\n            manifest: ABC0000214\n            manifest_pdf: https://shippit.com/manifest20160721-96368-1tpowvr.pdf\n            order_count: 2\n            success: true\n          - courier: Fastway\n            manifest: FW20160721215\n            manifest_pdf: https://shippit.com/manifest20160721-96368-1tpowvr.pdf\n            order_count: 2\n            success: true\n          - courier: Couriers Please\n            manifest: JJJ20160721216\n            manifest_pdf: https://shippit.com/manifest20160721-96368-1tpowvr.pdf\n            order_count: 4\n            success: true\n          - courier: eParcel\n            manifest: ABC0000217\n            manifest_pdf: https://shippit.com/manifest20160721-96368-1tpowvr.pdf\n            order_count: 2\n            success: true\n        count: 4\n    BookingStatus:\n      title: Root Type for BookingStatus\n      description: Describes the status of booking an order at a courier\n      type: object\n      properties:\n        courier:\n          description: The courier where the booking was made\n          type: string\n        manifest:\n          description: The Manifest ID of the booking\n          type: string\n        manifest_pdf:\n          description: \u003e-\n            A URL to a printable copy of the shipping manifest. This is a\n            [pre-signed\n            URL](https://docs.aws.amazon.com/AmazonS3/latest/dev/PresignedUrlUploadObject.html),\n            generated by the Shippit platform to provide access to a secured\n            document. The pre-signed URL remains valid for 7 days. If you need\n            to access this document after expiration, please make another\n            request for a new URL to be issued.\n          type: string\n        order_count:\n          format: int32\n          description: How many orders were included in this manifest.\n          type: integer\n        success:\n          description: Whether or not the booking succeeded\n          type: boolean\n        orders:\n          description: \u003e-\n            An array of order tracking numbers included in this status. Used to\n            indicate which orders failed to manifest in the case where `success`\n            = `false`.\n          type: array\n          items:\n            type: string\n        error:\n          description: \u003e-\n            Error code that applies to the individual bookings / orders\n            referenced.\n          type: string\n        error_description:\n          description: \u003e-\n            Human-readable error message applied to the individual bookings /\n            orders referenced.\n          type: string\n      example: |-\n        {\n            \"courier\": \"eParcel Express\",\n            \"manifest\": \"ABC0000214\",\n            \"manifest_pdf\": \"https://shippit.com/manifest20160721-96368-1tpowvr.pdf\",\n            \"order_count\": 2,\n            \"success\": true\n        }\n    QuoteRequestDetails:\n      title: Root Type for quote\n      description: A specification of the queries to include in the quote.\n      required:\n        - parcel_attributes\n        - dropoff_postcode\n        - dropoff_suburb\n      type: object\n      properties:\n        dropoff_postcode:\n          description: destination postcode for the quote\n          type: string\n        dropoff_state:\n          description: \u003e-\n            destination state for the quote. **Required** when\n            `dropoff_postcode` is unassigned or set to `AU`\n          type: string\n        dropoff_suburb:\n          description: The dropoff suburb\n          type: string\n        parcel_attributes:\n          description: \u003e-\n            An array of parcel specifications to be included in the quote.\n\n\n            Each item can be used to specify the qty, dimensions, and other\n            information about the products to be shipped, and the parcel used to\n            ship it.\n\n\n            At minimum, only the `qty` and `weight` fields are required. There\n            is a maximum of 1000 parcels per quote request.\n          type: array\n          items:\n            $ref: '#/components/schemas/Parcel'\n        order_date:\n          format: date\n          description: delivery date for the order, required for `priority` orders\n          type: string\n        return_all_quotes:\n          description: \u003e-\n            If set to `true`, the system returns all quotes instead of\n            cheapest/fastest quote. Defaults to false.\n          type: boolean\n        dutiable_amount:\n          description: \u003e-\n            ```conditional``` Declared value for customs when shipping\n            international.\n\n\n            Mandatory for International orders.\n          type: number\n        dropoff_country_code:\n          description: \u003e-\n            The destination country code for the quote in `ISO 3166 Alpha-2`\n            format. If unassigned, defaults to the country code of the\n            merchant's primary location, or otherwise 'AU'\n          type: string\n      example: |-\n        {\n            \"dropoff_postcode\": \"2000\",\n            \"dropoff_state\": \"NSW\",\n            \"dropoff_suburb\": \"Sydney\",\n            \"parcel_attributes\": [\n                {\n                    \"qty\": 1,\n                    \"weight\": 1\n                }\n            ]\n        }\n    QuoteResult:\n      title: Root Type for Quote\n      description: Represents a Quote returned by a courier\n      type: object\n      properties:\n        courier_type:\n          description: The name of the courier or service level giving the quote.\n          type: string\n        error:\n          description: Error response, if any, received from the carrier(s) during quoting.\n          type: string\n        quotes:\n          description: List of quotes returned for the service level or carrier.\n          type: array\n          items:\n            $ref: '#/components/schemas/Quote'\n        service_level:\n          description: The service level associated with this quote or group of quotes.\n          type: string\n        success:\n          description: \u003e-\n            Whether or not this service level was able to obtain a valid quote\n            from the carrier(s).\n          type: boolean\n      example: \"{\\r\\n    \\\"courier_type\\\": \\\"CouriersPlease\\\",\\r\\n    \\\"error\\\": null,\\r\\n    \\\"quotes\\\": [\\r\\n        {\\r\\n            \\\"price\\\": 20.4,\\r\\n            \\\"estimated_transit_time\\\": \\\"3 business days\\\"\\r\\n        }\\r\\n    ],\\r\\n    \\\"service_level\\\": \\\"standard\\\",\\r\\n    \\\"success\\\": true\\r\\n}\"\n    Quote:\n      title: Root Type for Quote\n      description: A quote returned by a carrier.\n      type: object\n      properties:\n        delivery_date:\n          format: date\n          description: Estimated date of delivery for the order\n          type: string\n        delivery_window:\n          description: \u003e-\n            For priority orders, machine-readable estimated range of times when\n            the delivery could take place.\n          type: string\n        delivery_window_desc:\n          description: \u003e-\n            For priority orders, human-readable estimated range of times when\n            the delivery could take place.\n          type: string\n        price:\n          description: Amount quoted by the carrier.\n          type: number\n        courier_type:\n          description: \u003e-\n            `optional` If returned inside a quote response for a service level\n            (e.g. `standard`), the carrier returning the quote. May be omitted\n            if a specific carrier was requested.\n          type: string\n        estimated_transit_time:\n          description: Estimated amount of time for the quote to arrive.\n          type: string\n      example:\n        delivery_date: '2014-09-18T00:00:00.000Z'\n        delivery_window: 07:00-10:00\n        delivery_window_desc: 7AM-10AM\n        price: 24.24\n        courier_type: Bonds\n    OrderResponseOrder:\n      description: Represents an Order that was created in Shippit\n      required:\n        - tracking_number\n        - slug\n        - documents\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/Order'\n      properties:\n        tracking_number:\n          description: \u003e-\n            Unique random ID assigned by Shippit to an order. This can be used\n            as a reference for future API calls or support tickets.\n          type: string\n        slug:\n          description: '`tracking_number` in lowercase.'\n          type: string\n        parcel_attributes:\n          $ref: '#/components/schemas/OrderResponseOrderParcel'\n          description: An array of parcel specifications that were created with the order.\n        products:\n          description: |-\n            An array of product items specified in the order.\n\n            If product information was not provided, this array will be blank.\n          type: array\n          items:\n            $ref: '#/components/schemas/Product'\n        tracking_url:\n          description: The URL of the order's customer tracking page.\n          type: string\n        return:\n          description: Whether or not the order is a return order.\n          type: boolean\n        id:\n          description: Shippit internal numerical ID\n          type: integer\n        processing_state:\n          description: Internal order status set and progressed by Shippit upon creation.\n          type: string\n        invoice_number:\n          description: \u003e-\n            Internal link between an order and a Shippit invoice - will almost\n            always be null on order creation.\n        courier_delivery_instructions:\n          description: \u003e-\n            Delivery instructions as sent to the courier. In most cases, this is\n            the same as the `delivery_instructions` passed into the request.\n            Some couriers, however, have a specific format expected when sending\n            delivery instructions through their API. This will contain the\n            actual delivery instructions that get sent through the courier API\n            when booked.\n          type: string\n        courier_name:\n          description: \u003e-\n            Human-readable name of the courier that has been allocated to the\n            order, or `null` if the order hasn't been allocated yet.\n\n\n            If you're creating orders by passing in `courier_type`, the courier\n            will usually not be yet be assigned at order creation and you will\n            get `null`. Courier allocation will be run as a background process\n            depending on the merchant preferences, available couriers, and\n            quotes returned by the couriers, which may take a few seconds to\n            complete after order creation.\n\n\n            If you're passing in a specific courier keyword in\n            `courier_allocation`, this will reflect the courier that is\n            specified.\n\n\n            Note that the Shippit web user can also update the courier in\n            between API calls. The final courier that has been assigned can be\n            determined from the LABEL call.\n          type: string\n        price:\n          description: \u003e-\n            The price that will be charged for the allocated order.\n\n\n            If you're creating orders by passing in `courier_type`, the courier\n            will usually not be yet be assigned at order creation and you will\n            get `0`. Courier allocation will be run as a background process\n            depending on the merchant preferences, available couriers, and\n            quotes returned by the couriers, which may take a few seconds to\n            complete after order creation.\n\n\n            Note that the Shippit web user can also update the courier in\n            between API calls. The final courier and quoted price can be\n            determined from the LABEL call.\n\n\n            If the quoted price is still `0` during the LABEL call, something\n            likely went wrong with the courier selection and the order may need\n            to be amended.\n        customs_documents_require_printing:\n          description: \u003e-\n            Whether or not customs documents, such as declarations, invoices,\n            etc for the Order that should be printed and included with the\n            shipment. By default this is `true` for International orders.\n          type: boolean\n        courier_type:\n          description: \u003e-\n            The courier allocated to the order. See the ORDER CREATE\n            `courier_allocation` API for available keywords.\n          type: string\n        tracking_histories:\n          description: \u003e-\n            An array of Tracking History statuses that are are shown to the\n            recipient as part of the order's history on the tracking page.\n          type: array\n          items:\n            $ref: '#/components/schemas/OrderResponseTrackingHistory'\n        state:\n          description: The state of the order as progressed by the merchant.\n          type: string\n        user:\n          $ref: '#/components/schemas/UserAttributes'\n          description: Represents the recipient of the order\n        documents:\n          $ref: '#/components/schemas/OrderResponseOrderDocumentsHash'\n          description: Documents attached to the label response\n    OrderRequestOrder:\n      description: Represents parameters that can be used to create an order in Shippit\n      required:\n        - parcel_attributes\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/Order'\n      properties:\n        parcel_attributes:\n          description: \u003e-\n            An array of parcel specifications to be included in the order.\n\n\n            There is a maximum of 1000 parcels per request.\n\n\n            Each item can be used to specify the qty, dimensions, and other\n            information about the products being shipped, and the parcel used to\n            ship it. If the `Allocate ech item in an order to a separate carton`\n            setting is enabled in the Shippit administration page, then each\n            item will be assigned a separate parcel according to the dimensions\n            given. Otherwise, Shippit may combine multiple items into a single\n            parcel.\n\n\n            If the `product_attributes` field is present, then product\n            information will be specified in entries there, separate from the\n            parcel information. In which case each parcel entry represents a\n            single parcel. \n          type: array\n          items:\n            $ref: '#/components/schemas/OrderRequestOrderParcelAttributes'\n        product_attributes:\n          $ref: '#/components/schemas/Product'\n          description: \u003e-\n            an array of product details. If this is present, each item in\n            ```parcel_attributes``` represents a separate parcel, while each\n            line in ```product_attributes``` represents a product line item.\n\n\n            There is a maximum of 1000 parcels per request.\n        authority_to_leave:\n          description: \u003e-\n            whether or not the order can be left unattended at the delivery\n            address, options are ```Yes``` or ```No```\n          type: string\n        cash_on_delivery_amount:\n          description: \u003e-\n            Used by some carriers (e.g. `NinjaVan`) to indicate amount to be\n            received on delivery for cash on delivery orders.\n          type: number\n        courier_type:\n          description: \u003e-\n            The service level for the order, valid options are `standard`,\n            `express`, `priority`, `click_and_collect`. If you use\n            `courier_type` in your request, then Shippit will allocate the\n            courier for the job at that service level. If you want to specify\n            the courier in the request please use `courier_allocation` attribute\n            instead.\n\n\n            One of `courier_allocation` or `courier_type` is required. If\n            omitted or invalid option is provided in the request, we will\n            allocate an enabled courier that matches the default service level.\n            The default service level is `standard` and can be configured by\n            Shippit on request for a merchant. The available service level\n            options are ```standard```, ```express``` and ```priority```. \n          type: string\n        receiver_contact_number:\n          description: \u003e-\n            ```conditional``` -- number of the person receiving the order, may\n            be different than the user who purchased the order. Mandatory for\n            International orders.\n          type: string\n        receiver_name:\n          description: \u003e-\n            name of the person receiving the order if different than the user\n            who purchased the order\n          type: string\n        retailer_invoice:\n          description: \u003e-\n            Merchant invoice number - the customer-facing sales order reference\n            of the order. This would be what the recipient sees on the shipping\n            label, packslip, customs declaration, receipt, etc.\n          type: string\n        retailer_reference:\n          description: \u003e-\n            Merchant reference id - if the merchant uses a separate internal\n            reference id for the order, it can be placed here.\n          type: string\n        courier_allocation:\n          description: \u003e\n            For ```courier_allocation```, the list of valid options are outlined\n            below.\n\n\n            - `AlliedExpressOvernight`\n\n            - `AlliedExpressSameday`\n\n            - `AlliedOvernightRoadExpress`\n\n            - `AramexInternational`\n\n            - `Bonds`\n\n            - `ClickAndCollect`\n\n            - `CouriersPlease`\n\n            - `CouriersPleaseExpress`\n\n            - `Dhl`\n\n            - `DhlEcommerce`\n\n            - `DhlExpress`\n\n            - `DhlExpressInternational`\n\n            - `Eparcel`\n\n            - `EparcelExpress`\n\n            - `EparcelInternational`\n\n            - `EparcelInternationalExpress`\n\n            - `Fastway`\n\n            - `KerryExpress`\n\n            - `KerryStandard`\n\n            - `NewZealandPost`\n\n            - `NewZealandPostExpress`\n\n            - `NinjaVanExpress`\n\n            - `NinjaVanStandard`\n\n            - `PlainLabel`\n\n            - `PlainLabelInternational`\n\n            - `SekoExpress`\n\n            - `SekoStandard`\n\n            - `SingPost`\n\n            - `Skybox`\n\n            - `StarTrack`\n\n            - `StarTrackPremium`\n\n            - `Tnt`\n\n            - `Toll`\n\n            - `YelloOndemand`\n\n\n            One of `courier_allocation` or `courier_type` is required. \n\n\n            If omitted or invalid option is provided in the request, we will\n            allocate an enabled courier that matches the default service level.\n            The default service level is `standard` and can be configured by\n            Shippit on request for a merchant. The available service level\n            options are ```standard```, ```express``` and ```priority```. \n\n\n            `courier_allocaiton` is required when `tracking_only` is set to\n            `true`\n          type: string\n        receiver_language_code:\n          description: \u003e-\n            Two-letter ISO 639-1 language code of the recipient. Used to\n            determine the language of tracking notifications and other\n            communications. Defaults to ```EN```\n          type: string\n        validate:\n          description: \u003e-\n            when true, run validations against the submitted order and only save\n            the order if the supplied parameters are valid. \n\n            Validations run\n             - destination suburb and postcode checked against a list of known postcodes / suburbs. \n             - If a valid combination is not found, a suggested address will be returned.\n          type: boolean\n        product_currency:\n          description: \u003e-\n            Three letter ISO 4217 currency code that applies to the order, which\n            will be sent to the carrier and presented on the customs invoice.\n            Defaults to ```AUD```\n          type: string\n        suppress_communications:\n          description: \u003e-\n            if true, all notifications will be suppressed for this specific\n            order\n          type: boolean\n        tracking_only:\n          description: \u003e-\n            Whether the Order being passed is a **tracking order** or not.\n\n\n            A **tracking order** is an order where the courier was allocated\n            outside of Shippit, but was loaded into Shippit to take advantage of\n            tracking and notifications. If this is present and set to `true`,\n            this order is a tracking order.\n\n\n            If it is set to ```true```, ```courier_allocation``` must be\n            present.\n          type: boolean\n        tracking_histories:\n          description: \u003e-\n            An array of Tracking History statuses that are are shown to the\n            recipient as part of the order's history on the tracking page.\n          type: array\n          items:\n            $ref: '#/components/schemas/OrderRequestOrderTrackingHistory'\n        user_attributes:\n          $ref: '#/components/schemas/UserAttributes'\n          description: Represents the customer details attached to the order.\n        features:\n          description: \u003e-\n            Some carriers provide add-on services (features) which can be\n            indicated in the order. These services are identified by a unique\n            string and will depend on the carrier. To request these services,\n            add a string to these field.\n\n            Services supported at the moment:\n\n            - `white_glove` (`Neway`, `DesignerTransport`)\n          type: array\n          items:\n            type: string\n        customer_shipping_fee_paid:\n          description: \u003e-\n            Shipping fee paid by the customer.\n\n            This is displayed on the commercial invoice for international orders\n            to support accurate duties and tax calculation by customs. This fee\n            is not related to the Shippit quote. When not provided, no shipping\n            fee will be displayed on the commercial invoice.\n          type: string\n        description:\n          description: \u003e-\n            Goods description for the order. May appear in labels for\n            international orders. If not provided, defaults to the `type of\n            goods` setting of the merchant account. Description is mandatory for\n            international orders when `validate` is set to `true`.\n          type: string\n      example:\n        user_attributes:\n          email: test@shippit.com\n          first_name: John\n          last_name: Smith\n        parcel_attributes:\n          - depth: 0.13\n            length: 0.1\n            location: C123\n            price: '12.12'\n            qty: 1\n            sku: EWPE123123\n            title: Super awesome red tshirt\n            weight: 2.1\n            width: 0.11\n            product_line_id: '1234'\n            origin_country_code: CN\n            packed: 1\n          - depth: 0.13\n            length: 0.1\n            location: B22\n            price: '1.21'\n            qty: 7\n            sku: EWPE123123\n            title: Super awesome blue tshirt\n            weight: 2.1\n            width: 0.11\n            dangerous_goods_code: ID8000\n            dangerous_goods_text: ID8000 Consumer commodities - Dangerous Goods as per attached DGD\n            product_line_id: '1235'\n            packed: 1\n        authority_to_leave: 'No'\n        courier_type: standard\n        delivery_address: 1 Union Street\n        delivery_postcode: '2009'\n        delivery_state: NSW\n        delivery_suburb: Pyrmont\n        delivery_instructions: Special instructions for the order go here\n        receiver_contact_number: '0400000000'\n        receiver_name: Adam\n        retailer_invoice: '#23201005'\n        retailer_reference: '#23201005'\n    TrackingHistory:\n      description: \u003e-\n        An event that tracks a change in `status` of a parcel's journey to\n        fulfillment, with a `timestamp` of when the event happened.\n\n\n        This can be either be provided by the merchant as part of a **tracking\n        order** request, or returned by a **track** request.\n      required:\n        - status\n        - timestamp\n      type: object\n      properties:\n        status:\n          description: The status of the order\n          type: string\n        timestamp:\n          description: The date / time when the status change occurred.\n          type: string\n      example:\n        status: order_placed\n        date: '2020-08-07T00:00:00.000Z'\n        timestamp: '09:00:00'\n    TrackingResponseTrackingHistory:\n      description: \u003e-\n        An event that tracks a change in `status` of a parcel's journey to\n        fulfillment, with a `timestamp` of when the event happened.\n\n\n        This can be either be provided by the merchant as part of a **tracking\n        order** request, or returned by a **track** request.\n      required:\n        - date\n        - status_owner\n        - timestamp\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/TrackingHistory'\n      properties:\n        date:\n          format: date\n          description: The `ISO-8601` date as `YYYY-MM-DD` when the event happened.\n          type: string\n        status_owner:\n          description: The party responsible for the status change.\n          type: string\n        timestamp:\n          description: The time in `HH:MM:SS` that the tracking event happened.\n          type: string\n      example:\n        status: despatch_in_progress\n        date: '2020-08-25T00:00:00.000Z'\n        timestamp: 41285\n        status_owner: Example Store Name\n    OrderRequestOrderTrackingHistory:\n      title: Order Request TrackingHistory\n      description: \u003e-\n        An event that tracks a change in `status` of a parcel's journey to\n        fulfillment, with a `timestamp` of when the event happened.\n\n\n        This can be either be provided by the merchant as part of a **tracking\n        order** request, or returned by a **track** request.\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/TrackingHistory'\n      properties:\n        timestamp:\n          format: date-time\n          description: \u003e-\n            expected format: `ISO-8601` datetime, such as `YYYY-MM-DDThh:mm` or\n            `YYYY-MM-DDThh:mm:ss+TZ`.\n\n\n            The date-time when the status change occurred.\n          type: string\n      example:\n        status: With Driver\n        timestamp: '2015-04-03T18:20:30.450Z'\n    Parcel:\n      description: \u003e-\n        Represents a parcel attached to an order.\n\n\n        ## parcels vs products\n\n        How parcels relate to products is controlled by whether or not a\n        **`product_attributes`** key is also defined. If a\n        **`product_attributes`** is not defined, then the number of cartons is\n        determined by the `Settings -\u003e Pick \u0026 Pack -\u003e Allocate each item in an\n        order to a separate carton` option in Shippit, and the **`qty`** field\n        will now specify either the number of parcels or products.\n\n\n        If a **`product_attributes`** key is specified in the request, then the\n        products can be specified separately from the parcels. In which case,\n        the **`qty`** field should not be present: each parcel attributes object\n        represents a separate parcel, and the number of products is specified in\n        the **`product_attributes`** key. There is a maximum of 1000 parcels per\n        request.\n      type: object\n      properties:\n        weight:\n          description: Weight of the parcel in kilos.\n          type: number\n        depth:\n          description: Depth of the parcel in metres\n          type: number\n        length:\n          description: Length of the parcel in metres\n          type: number\n        width:\n          description: Width of the parcel in metres.\n          type: number\n        label_number:\n          description: \u003e-\n            Parcel number in the carrier system.\n\n\n            This is used when the order is a tracking order, to match the parcel\n            number in a carrier against the parcel recorded in shippit.\n          type: string\n        qty:\n          description: \u003e-\n            ```conditional``` -- The number of products specified by the entry.\n\n\n            There is a maximum of 1000 parcels per quote request.\n\n\n            Should not be present if a `product_attributes` key is present in\n            the request.\n\n\n            If `Allocate each item in an order to a separate carton` is enabled\n            in Shippit, a separate parcel is generated for each product listed.\n          type: number\n      example:\n        qty: 1\n        length: 0.1\n        width: 0.2\n        depth: 0.2\n        weight: 1\n        dangerous_goods_code: ID8000\n        dangerous_goods_text: ID8000 Consumer commodities - Dangerous Goods as per attached DGD\n    OrderResponseTrackingHistory:\n      description: \u003e-\n        For `tracking-only` orders, an object representing the tracking events\n        provided in order creation.\n\n\n        The object returned is in the following format:\n\n\n        `{ \"status_name\": \"ISO-8601-TIMESTAMP\" }`.\n      type: object\n      example:\n        despatch_in_progress: '2020-08-06T23:05:00.000Z'\n    OrderRequestOrderParcelAttributes:\n      title: Root Type for ParcelAttributes\n      description: \u003e-\n        Represents a parcel attached to an order.\n\n\n        ## parcels vs products\n\n        How parcels relate to products is controlled by whether or not a\n        **`product_attributes`** key is also defined. If a\n        **`product_attributes`** is not defined, then the number of cartons is\n        determined by the `Settings -\u003e Pick \u0026 Pack -\u003e Allocate each item in an\n        order to a separate carton` option in Shippit, and the **`qty`** field\n        will now specify either the number of parcels or products.\n\n\n        If a **`product_attributes`** key is specified in the request, then the\n        products can be specified separately from the parcels. In which case,\n        the **`qty`** field should not be present: each parcel attributes object\n        represents a separate parcel, and the number of products is specified in\n        the **`product_attributes`** key. There is a maximum of 1000 parcels per\n        request.\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/Parcel'\n      properties:\n        title:\n          description: \u003e-\n            ```conditional``` -- Title or description of the product. Mandatory\n            for international orders with specific couriers.\n          type: string\n        packed:\n          description: \u003e-\n            The number of products packed; used in partial orders, or otherwise\n            when the number of products in the parcel is less than the total in\n            the order. If not present, set to product `quantity`.\n\n\n            If this is present, at least 1 item should have packed greater than\n            `0`.\n\n\n            For international orders, all items should have packed greater than\n            `0`.\n          type: integer\n        sku:\n          description: \u003e-\n            ```conditional``` -- Stock Keeping Unit (SKU) code of the product,\n            for stock keeping purposes. Mandatory on international orders with\n            specific couriers.\n          type: string\n        product_line_id:\n          description: \u003e-\n            Product line associated with product. Like SKU, this is also for\n            stock keeping purposes, and can be used when SKU would not be enough\n            (e.g. an order containing multiple lines with the same SKU)\n          type: string\n        origin_country_code:\n          description: \u003e-\n            Two-letter country code (ISO 3166-1 Alpha-2) for the product's\n            origin country. This is used in customs tracking for International\n            shipments. Defaults to the home country of the Merchant.\n          type: string\n        location:\n          description: Location of the product\n          type: string\n        dangerous_goods_code:\n          description: \u003e-\n            This is the DG code required when making dangerous goods\n            declarations.\n\n\n            Before you can declare orders as having dangerous goods, you must\n            first request for dangerous goods to enabled for your account.\n            Contact Shippit Support or your account manager to have this\n            enabled.\n\n\n            DG surcharges are often charged on the weight of the order, so it is\n            recommended to split your order into multiple orders if your order\n            contains either:\n\n            - both dangerous and non-dangerous goods, or\n\n            - more than one dangerous goods code\n          type: string\n        dangerous_goods_text:\n          description: Additional information related to dangerous goods being shipped\n          type: string\n        price:\n          description: \u003e-\n            Unit price of each product line item. Used in the packing slip and\n            customs declarations.\n          type: number\n      example:\n        qty: 1\n        length: 0.1\n        width: 0.2\n        depth: 0.2\n        weight: 1\n        dangerous_goods_code: ID8000\n        dangerous_goods_text: ID8000 Consumer commodities - Dangerous Goods as per attached DGD\n    Product:\n      title: Product\n      description: Represents a single product line item in an order.\n      type: object\n      properties:\n        title:\n          description: \u003e-\n            ```conditional``` -- Title or description of the product. Mandatory\n            for international orders with specific couriers.\n          type: string\n        packed:\n          description: \u003e-\n            The number of products packed; used in partial orders, or otherwise\n            when the number of products in the parcel is less than the total in\n            the order. If not present, set to product `quantity`.\n\n\n            If this is present, at least 1 item should have packed greater than\n            `0`.\n\n\n            For international orders, all items should have packed greater than\n            `0`.\n          type: integer\n        sku:\n          description: \u003e-\n            ```conditional``` -- Stock Keeping Unit (SKU) code of the product,\n            for stock keeping purposes. Mandatory on international orders with\n            specific couriers.\n          type: string\n        product_line_id:\n          description: \u003e-\n            Product line associated with product. Like SKU, this is also for\n            stock keeping purposes, and can be used when SKU would not be enough\n            (e.g. an order containing multiple lines with the same SKU)\n          type: string\n        origin_country_code:\n          description: \u003e-\n            Two-letter country code (ISO 3166-1 Alpha-2) for the product's\n            origin country. This is used in customs tracking for International\n            shipments. Defaults to the home country of the Merchant.\n          type: string\n        location:\n          description: Location of the product\n          type: string\n        dangerous_goods_code:\n          description: \u003e-\n            This is the DG code required when making dangerous goods\n            declarations.\n\n\n            Before you can declare orders as having dangerous goods, you must\n            first request for dangerous goods to enabled for your account.\n            Contact Shippit Support or your account manager to have this\n            enabled.\n\n\n            DG surcharges are often charged on the weight of the order, so it is\n            recommended to split your order into multiple orders if your order\n            contains either:\n\n            - both dangerous and non-dangerous goods, or\n\n            - more than one dangerous goods code\n          type: string\n        dangerous_goods_text:\n          description: Additional information related to dangerous goods being shipped\n          type: string\n        tariff_code:\n          description: Tariff code for International orders declarations\n          type: string\n        quantity:\n          description: The number of products ordered.\n          type: integer\n        price:\n          description: \u003e-\n            Unit price of each product line item. Used in the packing slip and\n            customs declarations.\n          type: number\n      example:\n        quantity: 1\n        dangerous_goods_code: ID8000\n        dangerous_goods_text: ID8000 Consumer commodities - Dangerous Goods as per attached DGD\n    WebhookRequest:\n      title: Root Type for WebhookRequest\n      description: ''\n      type: object\n      properties:\n        tracking_number:\n          type: string\n        tracking_url:\n          type: string\n        current_state:\n          description: \u003e-\n            Possible enumerations are `await_collection`, `awaiting_collection`,\n            `awaiting_drop_off`, `cancelled`, `completed`, `parcel_completed`,\n            `partially_completed`, `customs_awaiting_paym`, `customs_failed`,\n            `customs_on_hold`, `damaged`, `delivery_attempted`,\n            `delivery_failed`, `in_transit`, `insufficient_address`,\n            `invalidated`, `lost`, `pickup_failed`, `processing`,\n            `ready_for_pickup`, `return_booked`, `return_booking_failed`,\n            `return_requested`, `returned_to_sender`, `untrackable`,\n            `with_customs`, `with_driver`\n          type: string\n        retailer_order_number:\n          type: string\n        courier_name:\n          type: string\n        courier_job_id:\n          type: string\n        delivery_address:\n          type: string\n        delivery_suburb:\n          type: string\n        delivery_postcode:\n          type: string\n        delivery_state:\n          type: string\n        merchant_url:\n          type: string\n        status_history:\n          type: array\n          items:\n            type: object\n            properties:\n              status:\n                type: string\n              time:\n                format: date-time\n                type: string\n        products:\n          type: array\n          items:\n            type: object\n            properties:\n              quantity:\n                format: int32\n                type: integer\n              sku:\n                type: string\n              title:\n                type: string\n              product_line_id:\n                type: string\n      example:\n        tracking_number: PPYvZCTod5bkD\n        tracking_url: http://www.shippit.com/track/ppyvzctod5bkd\n        current_state: completed\n        retailer_order_number: WEYFEW232\n        courier_name: Couriers Please\n        courier_job_id: CPAVZUZ0001749\n        delivery_address: 115 Campbell Drive\n        delivery_suburb: Wahroonga\n        delivery_postcode: '2076'\n        delivery_state: NSW\n        merchant_url: myshopify.storename.com\n        status_history:\n          - status: completed\n            time: '2016-04-26T19:36:32.000Z'\n          - status: with_driver\n            time: '2016-04-26T18:36:32.000Z'\n          - status: in_transit\n            time: '2016-04-26T17:36:32.000Z'\n          - status: ready_for_pickup\n            time: '2016-04-26T16:36:11.000Z'\n          - status: despatch_in_progress\n            time: '2016-04-26T16:27:35.000Z'\n          - status: order_placed\n            time: '2016-04-26T16:25:04.000Z'\n        products:\n          - quantity: 1\n            sku: EWPE123123\n            title: Super awesome red tshirt\n            product_line_id: '1234'\n          - quantity: 7\n            sku: EWPE123123\n            title: Super awesome blue tshirt\n            product_line_id: '1235'\n    Order:\n      title: Root Type for Order\n      description: Represents an Order to be delivered by Shippit.\n      required:\n        - delivery_suburb\n        - delivery_state\n        - delivery_postcode\n        - delivery_address\n      type: object\n      properties:\n        delivery_address:\n          description: delivery address for the order\n          type: string\n        delivery_postcode:\n          description: delivery postcode for the order\n          type: string\n        delivery_state:\n          description: \u003e-\n            delivery state for the order\n\n            Australian States valid options are ```NSW```, ```QLD```, ```ACT```,\n            ```WA```, ```NT```, ```SA```, ```VIC```, ```TAS```\n          type: string\n        delivery_suburb:\n          description: delivery suburb for the order\n          type: string\n        delivery_instructions:\n          description: \u003e-\n            special delivery instructions for the order, limited to 55\n            characters\n          type: string\n        receiver_contact_number:\n          description: \u003e-\n            ```conditional``` -- number of the person receiving the order, may\n            be different than the user who purchased the order. Mandatory for\n            International orders.\n          type: string\n        receiver_name:\n          description: \u003e-\n            name of the person receiving the order if different than the user\n            who purchased the order\n          type: string\n        retailer_invoice:\n          description: \u003e-\n            Merchant invoice number - the customer-facing sales order reference\n            of the order. This would be what the recipient sees on the shipping\n            label, packslip, customs declaration, receipt, etc.\n          type: string\n        receiver_language_code:\n          description: \u003e-\n            Two-letter ISO 639-1 language code of the recipient. Used to\n            determine the language of tracking notifications and other\n            communications. Defaults to ```EN```\n          type: string\n        delivery_date:\n          format: date\n          description: \u003e-\n            The date of the order for priority orders.\n\n\n            The recommended format is in ISO-8601 `YYYY-MM-DD`, although the\n            Shippit is flexible enough to parse `YYYY/MM/DD`.\n\n\n            ```conditional``` -- specifies the date of the order for priority\n            orders\n\n\n            ```delivery_date``` must be in the future.\n          type: string\n        delivery_window:\n          description: \u003e-\n            expected format: ```00:00-00:00```\n\n\n            ```conditional``` -- specifies the time window of the order, to be\n            used when sending a priority order\n\n\n            ```delivery_window``` must be in the future.\n          type: string\n        courier_job_id:\n          description: \u003e-\n            Used in **tracking_order**'s, the ID assigned by some carriers to\n            the shipment / consignment.\n          type: string\n        delivery_country_code:\n          description: \u003e-\n            The destination country code for the order in `ISO 3166 Alpha-2`\n            format. If unassigned, defaults to the country code of the\n            merchant's primary location, or otherwise 'AU'.\n          type: string\n        delivery_district_city:\n          description: \u003e-\n            Used in some countries to add additional district city information\n            in addition to the `delivery_suburb` and `delivery_state`. Most of\n            this time this is determined using the `delivery_suburb` and\n            `delivery_postcode`.\n          type: string\n      example: |-\n        {\n            \"user_attributes\": {\n                \"email\": \"test@shippit.com\",\n                \"first_name\": \"John\",\n                \"last_name\": \"Smith\"\n            },\n            \"parcel_attributes\": [\n                {\n                    \"depth\": 0.13,\n                    \"length\": 0.1,\n                    \"location\": \"C123\",\n                    \"price\": \"12.12\",\n                    \"qty\": 1,\n                    \"sku\": \"EWPE123123\",\n                    \"title\": \"Super awesome red tshirt\",\n                    \"weight\": 2.1,\n                    \"width\": 0.11,\n                    \"product_line_id\": \"1234\",\n                    \"origin_country_code\": \"CN\",\n                    \"packed\": 1\n                },\n                {\n                    \"depth\": 0.13,\n                    \"length\": 0.1,\n                    \"location\": \"B22\",\n                    \"price\": \"1.21\",\n                    \"qty\": 7,\n                    \"sku\": \"EWPE123123\",\n                    \"title\": \"Super awesome blue tshirt\",\n                    \"weight\": 2.1,\n                    \"width\": 0.11,\n                    \"dangerous_goods_code\": \"ID8000\",\n                    \"dangerous_goods_text\": \"ID8000 Consumer commodities - Dangerous Goods as per attached DGD\",\n                    \"product_line_id\": \"1235\",\n                    \"packed\": 1\n                }\n            ],\n            \"authority_to_leave\": \"No\",\n            \"courier_type\": \"standard\",\n            \"delivery_address\": \"1 Union Street\",\n            \"delivery_postcode\": \"2009\",\n            \"delivery_state\": \"NSW\",\n            \"delivery_suburb\": \"Pyrmont\",\n            \"delivery_instructions\": \"Special instructions for the order go here\",\n            \"receiver_contact_number\": \"0400000000\",\n            \"receiver_name\": \"Adam\",\n            \"retailer_invoice\": \"#23201005\",\n            \"retailer_reference\": \"#23201005\"\n        }\n    OrderDeleteResponse:\n      description: A response to an Order DELETE request\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/OrderResponse'\n    TrackingResponseOrder:\n      title: Root Type for TrackingResponseOrder\n      description: Order details returned by a tracking request\n      type: object\n      properties:\n        tracking_number:\n          description: Tracking number of the Order\n          type: string\n        tracking_url:\n          description: \u003e-\n            URL presenting tracking info for the Order. This can be shown to the\n            recipient to give them status updates on the Order.\n          type: string\n        success:\n          description: \u003e-\n            Whether or not this tracking request was successful - should always\n            be `true` as tracking errors will be returned at the top-level\n            response.\n          type: boolean\n        error:\n          description: \u003e-\n            Errors associated with the tracking request - should always be\n            `null` as tracking errors will be returned at the top-level\n            response.\n          type: string\n        track:\n          description: \u003e-\n            A list of historical tracking statuses for the Order. This will at\n            minimum list the order status, along with the date and time when it\n            changed, and who was responsible for the status change.\n          type: array\n          items:\n            $ref: '#/components/schemas/TrackingResponseTrackingHistory'\n      example:\n        tracking_number: PPdNSOmJxxfzz\n        tracking_url: https://app.staging.shippit.com/track/ppdnsomjxxfzz\n        success: true\n        track:\n          - status: despatch_in_progress\n            date: '2020-08-28T00:00:00.000Z'\n            timestamp: 48332\n            status_owner: test-store-name\n          - status: order_placed\n            date: '2020-06-19T00:00:00.000Z'\n            timestamp: 36243\n            status_owner: test-store-name\n    TrackingResponse:\n      description: \u003e-\n        Represents a response to the Tracking API, which provides tracking info\n        for a specific order.\n\n\n        If successful, will return a response object with tracking information.\n        Otherwise, will return an error code at the top-level.\n      type: object\n      allOf:\n        - type: object\n          properties:\n            response:\n              $ref: '#/components/schemas/TrackingResponseOrder'\n              description: \u003e-\n                If the tracking request is successful, order details relevant to\n                tracking.\n        - $ref: '#/components/schemas/DataResponse'\n      example:\n        response:\n          tracking_number: PP39TBECV7QSSPK\n          tracking_url: http://www.shippit.com/track/pp39tbecv7qsspk\n          success: true\n          track:\n            - status: completed\n              date: '2015-04-03T00:00:00.000Z'\n              timestamp: 58985\n              status_owner: Bonds Couriers\n            - status: with_driver\n              date: '2015-04-03T00:00:00.000Z'\n              timestamp: 55385\n              status_owner: Bonds Couriers\n            - status: in_transit\n              date: '2015-04-03T00:00:00.000Z'\n              timestamp: 55325\n              status_owner: Bonds Couriers\n            - status: ready_for_pickup\n              date: '2015-04-03T00:00:00.000Z'\n              timestamp: 49400\n              status_owner: Harold's Harpoons\n            - status: despatch_in_progress\n              date: '2015-04-03T00:00:00.000Z'\n              timestamp: 36603\n              status_owner: Harold's Harpoons\n            - status: order_placed\n              date: '2015-04-03T00:00:00.000Z'\n              timestamp: '07:23:32'\n              status_owner: Harold's Harpoons\n    DataResponse:\n      description: Response message containing data.\n      type: object\n    MerchantResponse:\n      title: Root Type for MerchantResponse\n      description: \u003e-\n        Represents a response to the Merchant request API, which shows either\n        the generated Merchant object, or an error code with a description of\n        the error.\n      type: object\n      allOf:\n        - type: object\n        - $ref: '#/components/schemas/DataResponse'\n      properties:\n        response:\n          $ref: '#/components/schemas/Merchant'\n          description: Object representing the merchant account settings\n      example:\n        response:\n          store_name: New Store Name\n          company_name: Harold Pty Ltd\n          contact_name: Robert\n          contact_phone: '0400000000'\n          shipping_cart_method_name: ''\n          preparation_time: 60\n          website_url: www.haroldsharpoons.com.au\n          address_1: 110 Rex Road\n          suburb: Sydney\n          state: NSW\n          postcode: '2000'\n          country_code: AU\n    OrderResponse:\n      title: OrderResponse\n      description: \u003e-\n        Represents a response to an OrderRequest, which shows either the\n        generated order object or an error code with a description of the error.\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/DataResponse'\n      properties:\n        response:\n          $ref: '#/components/schemas/OrderResponseOrder'\n          description: Object representing the Order in shippit.\n      example:\n        response:\n          courier_delivery_instructions: special instructions\n          courier_job_id: '30734876324'\n          courier_name: eParcel\n          delivery_address: 1 Union Street\n          delivery_instructions: test special instructions\n          delivery_postcode: '2009'\n          delivery_state: NSW\n          delivery_suburb: Pyrmont\n          id: 26599\n          parcel_attributes:\n            - depth: 0.13\n              length: 0.1\n              qty: 1\n              weight: 16.8\n              width: 0.11\n          products:\n            - title: Industrial Paint Stripper\n              price: 29.13\n              sku: 0.1\n              tariff_code: '000999'\n              dangerous_goods_code: ID8000\n              dangerous_goods_text: \u003e-\n                ID8000 Consumer commodities - Dangerous Goods as per attached\n                DGD\n              origin_country_code: TH\n              quantity: 1\n          price: '0.0'\n          processing_state: created\n          receiver_contact_number: '0400000000'\n          receiver_name: Josh\n          retailer_invoice: '#23201005'\n          slug: ppu38wz2tdonj\n          state: processing\n          tracking_number: PPu38Wz2TdoNj\n          user_attributes:\n            email: test@shippit.com\n            first_name: jon\n            last_name: smith\n            mobile: '0413084048'\n    LabelResponse:\n      description: \u003e-\n        Represents a response to the Label API, which provides an Order and\n        related label information\n      type: object\n      allOf:\n        - type: object\n        - $ref: '#/components/schemas/DataResponse'\n      properties:\n        response:\n          $ref: '#/components/schemas/Label'\n          description: Object representing the Label in Shippit\n      example: \"{\\r\\n    \\\"response\\\": {\\r\\n        \\\"data\\\": null,\\r\\n        \\\"id\\\": 5044,\\r\\n        \\\"order\\\": {\\r\\n            \\\"courier_delivery_instructions\\\": \\\"Authority to Leave. \\\",\\r\\n            \\\"courier_type\\\": null,\\r\\n            \\\"courier_job_id\\\": \\\"SHP0100002\\\",\\r\\n            \\\"delivery_address\\\": \\\"37 Manorvale Pde\\\",\\r\\n            \\\"delivery_date\\\": null,\\r\\n            \\\"delivery_instructions\\\": \\\"\\\",\\r\\n            \\\"delivery_postcode\\\": \\\"3030\\\",\\r\\n            \\\"delivery_state\\\": \\\"VIC\\\",\\r\\n            \\\"delivery_district_city\\\": null,\\r\\n            \\\"delivery_suburb\\\": \\\"Werribee\\\",\\r\\n            \\\"delivery_window\\\": null,\\r\\n            \\\"id\\\": 9972,\\r\\n            \\\"invoice_number\\\": \\\"INV-1384\\\",\\r\\n            \\\"parcels\\\": [\\r\\n                {\\r\\n                    \\\"depth\\\": 0.19,\\r\\n                    \\\"length\\\": 0.38,\\r\\n                    \\\"name\\\": \\\"\\\",\\r\\n                    \\\"weight\\\": 1.0,\\r\\n                    \\\"width\\\": 0.29,\\r\\n                    \\\"label_number\\\": \\\"SHP010000201000930803\\\",\\r\\n                    \\\"courier_data\\\": {\\r\\n                      \\\"product_code\\\": \\\"X123\\\",\\r\\n                      \\\"pickup_zone\\\": \\\"SYD\\\",\\r\\n                      \\\"dropoff_zone\\\": \\\"MEL\\\"\\r\\n                    }\\r\\n                }\\r\\n            ],\\r\\n            \\\"products\\\": [\\r\\n                {\\r\\n                    \\\"title\\\": 'Industrial Paint Stripper',\\r\\n                    \\\"price\\\": 29.13,\\r\\n                    \\\"sku\\\": 0.1,\\r\\n                    \\\"quantity\\\": 1,\\r\\n                    \\\"tariff_code\\\": \\\"000999\\\",\\r\\n                    \\\"dangerous_goods_code\\\": \\\"ID8000\\\",\\r\\n                    \\\"dangerous_goods_text\\\": \\\"ID8000 Consumer commodities - Dangerous Goods as per attached DGD\\\",\\r\\n                    \\\"origin_country_code\\\": \\\"TH\\\"\\r\\n                }\\r\\n            ],\\r\\n            \\\"price\\\": \\\"15.95\\\",\\r\\n            \\\"receiver_contact_number\\\": \\\"\\\",\\r\\n            \\\"receiver_language_code\\\": \\\"EN\\\",\\r\\n            \\\"receiver_name\\\": \\\"Jane Doe\\\",\\r\\n            \\\"retailer_invoice\\\": \\\"\\\",\\r\\n            \\\"slug\\\": \\\"ppkfqy44u8nff\\\",\\r\\n            \\\"state\\\": \\\"completed\\\",\\r\\n            \\\"tracking_number\\\": \\\"PPKFqy44U8Nff\\\",\\r\\n            \\\"user\\\": {\\r\\n                \\\"email\\\": \\\"jane.doe@shippit.com\\\",\\r\\n                \\\"first_name\\\": \\\"Jane\\\",\\r\\n                \\\"id\\\": 7808,\\r\\n                \\\"last_name\\\": \\\"Doe \\\",\\r\\n                \\\"mobile\\\": \\\"\\\"\\r\\n            },\\r\\n            \\\"customs_documents_require_printing\\\": false,\\r\\n            \\\"documents\\\": {\\r\\n                \\\"archive_awb\\\": {\\r\\n                  \\\"url\\\": \\\"https://shippit-web-production.s3.amazonaws.com/uploads/order/archive_document/15870762/archive_581833317220190318-2852-yi07y0.PDF\\\",\\r\\n                  \\\"page_size\\\": 'a6',\\r\\n                  \\\"file_type\\\": 'pdf'\\r\\n                },\\r\\n                \\\"customs_invoice\\\": {\\r\\n                  \\\"url\\\": \\\"https://shippit-web-production.s3.amazonaws.com/uploads/order/customs_invoice/361690/commercial_invoice_3073489348620190218-6221-mxrhx4.pdf\\\",\\r\\n                  \\\"page_size\\\": 'a3',\\r\\n                  \\\"file_type\\\": 'pdf'\\r\\n                },\\r\\n                \\\"dangerous_goods_declaration\\\": {\\r\\n                  \\\"url\\\": \\\"https://shippit-web-production.s3.amazonaws.com/uploads/order/dangerous_goods_declaration/361690/dangerous_goods_declaration_3073489348620140318-6220-11vib5y.pdf\\\",\\r\\n                  \\\"page_size\\\": 'a3',\\r\\n                  \\\"file_type\\\": 'pdf'\\r\\n                },\\r\\n                \\\"shipping_label\\\": {\\r\\n                  \\\"url\\\": \\\"https://shippit-production.s3.amazonaws.com/uploads/label/attachment/5044/PPKFqy44U8Nff.pdf\\\",\\r\\n                  \\\"page_size\\\": 'a6',\\r\\n                  \\\"file_type\\\": 'pdf'\\r\\n                }\\r\\n            }\\r\\n        },\\r\\n        \\\"qualified_url\\\": \\\"https://shippit-production.s3.amazonaws.com/uploads/label/attachment/5044/PPKFqy44U8Nff.pdf\\\"\\r\\n    }\\r\\n}\"\n    OrderResponseOrderDocumentsHash:\n      title: OrderResponseOrderDocumentsHash\n      description: \u003e-\n        A keyword hash of documents generated for an order. Usually populated\n        during the LABEL call.\n      type: object\n      properties:\n        archive_awb:\n          $ref: '#/components/schemas/LabelDocument'\n          description: Archive Airway Bill\n        customs_invoice:\n          $ref: '#/components/schemas/LabelDocument'\n          description: Customs invoice. Generated for International orders.\n        dangerous_goods_declaration:\n          $ref: '#/components/schemas/LabelDocument'\n          description: \u003e-\n            Dangerous goods declaration - generated for orders that have\n            dangerous goods properties specified.\n        packing_slip:\n          $ref: '#/components/schemas/LabelDocument'\n          description: Packing slip for the order.\n        shipping_label:\n          $ref: '#/components/schemas/LabelDocument'\n          description: \u003e-\n            Shipping label for the order.\n\n\n            If the merchant account was configured to have the label and packing\n            slip combined into a single document, the `shipping_label` will\n            print the label only without the packing slip.\n\n\n            If the merchant account was configured to enable ZPL output, can\n            contain an `encoded_label` field containing ZPL output.\n      example:\n        archive_awb:\n          page_size: a4\n          file_type: pdf\n        customs_invoice:\n          page_size: a4\n          file_type: pdf\n        dangerous_goods_declaration:\n          page_size: a4\n          file_type: pdf\n        packing_slip:\n          url: \u003e-\n            https://shippit-web-staging.s3-ap-southeast-2.amazonaws.com/uploads/packing_slip/attachment/123456/PP12345678.pdf\n          page_size: a4_pickslip_and_label\n          file_type: pdf\n        shipping_label:\n          url: \u003e-\n            https://shippit-web-staging.s3-ap-southeast-2.amazonaws.com/uploads/label/attachment/123456/PP12345678.pdf\n          page_size: a6\n          file_type: pdf\n          encoded_label: ZPLDATA\n    OrderResponseOrderParcel:\n      title: Order Response Parcel specification\n      description: Represents a parcel attached to an order.\n      type: object\n      allOf:\n        - type: object\n        - $ref: '#/components/schemas/Parcel'\n      properties:\n        qty:\n          description: \u003e-\n            The number of parcels specified by the entry.\n\n\n            Depending on how the merchant account is configured, the number of\n            parcels generated may not match the number of parcel attributes\n            passed in. By default, Shippit will try to combine all parcel\n            attributes into a single parcel with the sum of the weights.\n\n\n            However, if `Allocate each item in an order to a separate carton` is\n            enabled, then Shippit will generate one parcel entry for each parcel\n            entry sent in.\n          type: number\n      example:\n        qty: 1\n        length: 0.1\n        width: 0.2\n        depth: 0.2\n        weight: 1\n        dangerous_goods_code: ID8000\n        dangerous_goods_text: ID8000 Consumer commodities - Dangerous Goods as per attached DGD\n    OrderValidationErrorResponse:\n      title: Root Type for OrderValidationErrorResponse\n      description: \u003e-\n        Response message for order create requests with `validate` flag set to\n        true.\n      type: object\n      allOf:\n        - type: object\n          properties:\n            delivery_postcode:\n              description: List of error messages related to the postcode.\n              type: array\n              items:\n                type: string\n            delivery_suburb:\n              description: List of error messages related to the suburb.\n              type: array\n              items:\n                type: string\n            suggested_address:\n              description: Suggested address, if one is found.\n              type: object\n              properties:\n                suburb:\n                  type: string\n                  description: Suburb\n                postcode:\n                  type: string\n                  description: Postcode\n                state:\n                  type: string\n                  description: State\n                country_code:\n                  type: string\n                  description: Country code\n            delivery_country_code:\n              description: List of error messages related to the country code.\n              type: array\n              items:\n                type: string\n            delivery_state:\n              description: List of error messages related to the state.\n              type: array\n              items:\n                type: string\n            products:\n              description: \u003e-\n                List of error messages related to the provided product\n                information. Typically appears in international orders.\n              type: array\n              items:\n                type: string\n        - $ref: '#/components/schemas/GenericErrorResponse'\n      example:\n        error: invalid\n        error_description: The details provided are invalid\n        delivery_postcode:\n          - is invalid for Australia and should follow the pattern 9999\n        delivery_suburb:\n          - Invalid suburb name for the postcode 20261\n        suggested_address:\n          suburb: bondi beach\n          postcode: '2026'\n          state: NSW\n          country_code: au\n    OrderDeleteErrorResponse:\n      description: ''\n      type: object\n      allOf:\n        - required:\n            - order_state\n          type: object\n          properties:\n            order_state:\n              description: The current state of the order should a DELETE request fail\n              type: string\n        - $ref: '#/components/schemas/GenericErrorResponse'\n    TrackingErrorResponse:\n      title: Root Type for TrackingErrorResponse\n      description: Error response returned in tracking requests\n      type: object\n      allOf:\n        - required:\n            - error\n          type: object\n          properties:\n            error:\n              $ref: '#/components/schemas/TrackingErrorResponseDetails'\n              description: Error code returned by Shippit\n              properties:\n                order_id:\n                  type: array\n                  items:\n                    type: string\n            success:\n              description: Returns `false`\n              type: boolean\n            error_description:\n              description: Human-readable description of error encountered.\n              type: string\n        - $ref: '#/components/schemas/ErrorResponse'\n      example:\n        error:\n          order_id:\n            - Sorry, the tracking number you entered does not exist.\n        error_description: The data given to this server does not meet our criteria.\n        success: false\n    TrackingErrorResponseDetails:\n      title: Root Type for TrackingResponseErrors\n      description: \u003e-\n        A Hash of error codes returned by tracking response.\n\n\n        Each error code is returned as a key, with an array of strings for each\n        instance of the error.\n      type: object\n      properties:\n        order_id:\n          description: Indicates an order that cannot be found.\n          type: array\n          items:\n            type: string\n      example:\n        order_id:\n          - Sorry, the tracking number you entered does not exist.\n    QuoteErrorResponse:\n      title: Root Type for QuoteErrorResponse\n      description: Request-level error response for the Quote API.\n      type: object\n      allOf:\n        - type: object\n          properties:\n            success:\n              description: Returns `false`.\n              type: boolean\n        - $ref: '#/components/schemas/GenericErrorResponse'\n      example:\n        error: bad_request\n        error_description: Dutiable amount must be greater than 0 for international orders\n        success: false\n    GenericErrorResponse:\n      title: ErrorResponse\n      description: Response message containing an error.\n      type: object\n      allOf:\n        - required:\n            - error\n          type: object\n          properties:\n            error:\n              description: Error code returned by Shippit\n              type: string\n            error_description:\n              description: Human-readable description of error encountered.\n              type: string\n        - $ref: '#/components/schemas/ErrorResponse'\n      example:\n        error: system\n        error_description: An unknown error has occurred.\n    ErrorResponse:\n      title: ErrorResponse\n      description: Response message containing an error.\n      required:\n        - error\n      type: object\n      properties:\n        error:\n          description: Error code returned by Shippit\n        error_description:\n          description: Human-readable response\n          type: string\n      example:\n        error: system\n        error_description: An unknown error has occurred.\n  responses:\n    UnknownErrorResponse:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/GenericErrorResponse'\n          examples:\n            Unknown Error:\n              value:\n                error: system\n                error_description: An unknown error has occurred.\n      description: \u003e-\n        Returned when an unknown error occurs.\n\n\n        May be returned if Shippit has trouble with the combination of the input\n        or merchant account configuration.\n    BadRequestErrorResponse:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/GenericErrorResponse'\n          examples:\n            Generic Bad Request:\n              value:\n                error: bad_request\n                error_description: The data given to this server does not meet our criteria.\n        text/html:\n          schema:\n            type: string\n      description: \u003e-\n        Returned when Shippit has a problem with the input parameters.\n\n\n        Not all input errors can result in this error. Depending on the request,\n        the error may be parsed as an unknown error or as part of the response\n        body.\n\n\n        If returned as text/html, will be blank.\n    InvalidMerchantAccountErrorResponse:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/GenericErrorResponse'\n          examples:\n            Invalid Merchant Account:\n              value:\n                error: invalid_merchant_account\n                error_description: An unknown error has occurred.\n      description: Returned when the API key given does not match a valid merchant account.\n    ResourceNotFound:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/GenericErrorResponse'\n          examples:\n            Not Found:\n              value:\n                error: not_found\n                error_description: The requested resource could not be found.\n      description: Returned when the given id could not be found.\n  securitySchemes:\n    bearerAuth:\n      scheme: bearer\n      type: http\ntags:\n  - name: Quote\n    description: \u003e-\n      The Quote API will return a quote given a destination location and parcel\n      attributes.\n  - name: Order\n    description: The Order API will submit an order to Shippit\n  - name: Merchant\n    description: \u003e-\n      The merchant settings API will allow you to query the current settings for\n      your merchant account and to make updates to this via API.\n  - name: Track\n    description: \u003e-\n      The Track API will allow you to request tracking information or subscribe\n      to our webhook.\n  - name: Book\n    description: The book API initiates a booking with the respective carriers.\n  - name: Label\n    description: The label API will return a URL to a label for an order.\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /orders/{tracking_number}: delete: operation \"cancelOrder\": security: unknown security schema \"AuthToken\""
}