{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Adyen/adyen-openapi"
		},
		"file": {
			"name": "BalancePlatformService-v1.yaml",
			"size": 0,
			"path": "yaml/BalancePlatformService-v1.yaml",
			"byteSize": 197211,
			"content": "openapi: 3.1.0\nservers:\n- url: https://balanceplatform-api-test.adyen.com/bcl/v1\ninfo:\n  version: '1'\n  x-publicVersion: true\n  title: Balance Platform Configuration API\n  description: \"The Balance Platform Configuration API enables you to create a platform\\\n    \\ where you can onboard users as account holders and create balance accounts,\\\n    \\ cards, and bank accounts.\\n\\nFor information about use cases, refer to [Adyen\\\n    \\ Issuing](https://docs.adyen.com/issuing).\\n\\n ## Authentication\\nYour Adyen\\\n    \\ contact will provide your API credential and an API key. To connect to the API,\\\n    \\ add an `X-API-Key` header with the API key as the value, for example:\\n\\n ```\\n\\\n    curl\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-H \\\"X-API-Key: YOUR_API_KEY\\\"\\\n    \\ \\\\\\n...\\n```\\n\\nAlternatively, you can use the username and password to connect\\\n    \\ to the API using basic authentication. For example:\\n\\n```\\ncurl\\n-H \\\"Content-Type:\\\n    \\ application/json\\\" \\\\\\n-U \\\"ws@BalancePlatform.YOUR_BALANCE_PLATFORM\\\":\\\"YOUR_WS_PASSWORD\\\"\\\n    \\ \\\\\\n...\\n```\\n## Versioning\\nThe Balance Platform Configuration API supports\\\n    \\ [versioning](https://docs.adyen.com/development-resources/versioning) using\\\n    \\ a version suffix in the endpoint URL. This suffix has the following format:\\\n    \\ \\\"vXX\\\", where XX is the version number.\\n\\nFor example:\\n```\\nhttps://balanceplatform-api-test.adyen.com/bcl/v1\\n\\\n    ```\\n## Going live\\nWhen going live, your Adyen contact will provide your API\\\n    \\ credential for the live environment. You can then use the API key or the username\\\n    \\ and password to send requests to `https://balanceplatform-api-live.adyen.com/bcl/v1`.\\n\\\n    \\nFor more information, refer to our [Going live documentation](https://docs.adyen.com/issuing/integration-checklist#going-live).\"\n  x-timestamp: '2022-03-22T19:59:08Z'\n  termsOfService: https://www.adyen.com/legal/terms-and-conditions\n  contact:\n    name: Adyen Developer Experience team\n    url: https://www.adyen.help/hc/en-us/community/topics\n    email: developer-experience@adyen.com\nx-groups:\n- General\n- Account holders\n- Balance accounts\n- Payment instruments\n- Payment instrument groups\n- Transaction rules\n- Legal entities\n- Transfer instruments\n- Documents\ntags:\n- name: Payment instrument groups\n- name: Account holders\n- name: Payment instruments\n- name: General\n- name: Balance accounts\n- name: Transaction rules\n- name: Legal entities\n- name: Documents\n- name: Transfer instruments\npaths:\n  /accountHolders:\n    post:\n      tags:\n      - Account holders\n      summary: Create an account holder\n      description: 'Creates an account holder that represents your user''s entity\n        within the balance platform.\n\n\n        For more information, refer to [Create accounts](https://docs.adyen.com/issuing/create-accounts).'\n      x-addedInVersion: '1'\n      operationId: post-accountHolders\n      x-groupName: Account holders\n      x-sortIndex: 1\n      security:\n      - BasicAuth: []\n      - ApiKeyAuth: []\n      requestBody:\n        content:\n          application/json:\n            examples:\n              createAccountHolder:\n                $ref: '#/components/examples/post-accountHolders-createAccountHolder'\n            schema:\n              $ref: '#/components/schemas/AccountHolderInfo'\n      responses:\n        '200':\n          content:\n            application/json:\n              examples:\n                success:\n                  $ref: '#/components/examples/post-accountHolders-success-200'\n              schema:\n                $ref: '#/components/schemas/AccountHolder'\n          description: OK - the request has succeeded.\n        '400':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-400'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Bad Request - a problem reading or understanding the request.\n        '401':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-401'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Unauthorized - authentication required.\n        '403':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-403'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Forbidden - insufficient permissions to process the request.\n        '422':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-422'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Unprocessable Entity - a request validation error.\n        '500':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-500'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Internal Server Error - the server could not process the request.\n  /accountHolders/{id}:\n    get:\n      tags:\n      - Account holders\n      summary: Get an account holder\n      description: Returns an account holder.\n      x-addedInVersion: '1'\n      operationId: get-accountHolders-id\n      x-groupName: Account holders\n      x-sortIndex: 3\n      security:\n      - BasicAuth: []\n      - ApiKeyAuth: []\n      parameters:\n      - description: The unique identifier of the account holder.\n        name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              examples:\n                success:\n                  $ref: '#/components/examples/get-accountHolders-id-success-200'\n              schema:\n                $ref: '#/components/schemas/AccountHolder'\n          description: OK - the request has succeeded.\n        '400':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-400'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Bad Request - a problem reading or understanding the request.\n        '401':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-401'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Unauthorized - authentication required.\n        '403':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-403'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Forbidden - insufficient permissions to process the request.\n        '422':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-422'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Unprocessable Entity - a request validation error.\n        '500':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-500'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Internal Server Error - the server could not process the request.\n    patch:\n      tags:\n      - Account holders\n      summary: Update an account holder\n      description: 'Updates an account holder. When updating an account holder resource,\n        note that:\n\n\n        * If a parameter is not provided in the request, the parameter is left unchanged.\n\n\n        * When updating any parameter in the `contactDetails` object, you must send\n        all other existing `contactDetails` parameters.'\n      x-addedInVersion: '1'\n      operationId: patch-accountHolders-id\n      x-groupName: Account holders\n      x-sortIndex: 2\n      security:\n      - BasicAuth: []\n      - ApiKeyAuth: []\n      requestBody:\n        content:\n          application/json:\n            examples:\n              updateAccountHolderStatus:\n                $ref: '#/components/examples/patch-accountHolders-id-updateAccountHolderStatus'\n            schema:\n              $ref: '#/components/schemas/AccountHolder'\n      parameters:\n      - description: The unique identifier of the account holder.\n        name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              examples:\n                success:\n                  $ref: '#/components/examples/patch-accountHolders-id-success-200'\n              schema:\n                $ref: '#/components/schemas/AccountHolder'\n          description: OK - the request has succeeded.\n        '400':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-400'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Bad Request - a problem reading or understanding the request.\n        '401':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-401'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Unauthorized - authentication required.\n        '403':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-403'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Forbidden - insufficient permissions to process the request.\n        '422':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-422'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Unprocessable Entity - a request validation error.\n        '500':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-500'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Internal Server Error - the server could not process the request.\n  /accountHolders/{id}/balanceAccounts:\n    get:\n      tags:\n      - Account holders\n      summary: Get all balance accounts of an account holder\n      description: \"Returns a paginated list of balance accounts associated with an\\\n        \\ account holder. To fetch multiple pages, use the query parameters. \\n\\n\\\n        For example, to limit the page to 5 balance accounts and skip the first 10,\\\n        \\ use `/accountHolders/{id}/balanceAccounts?limit=5&offset=10`.\"\n      x-addedInVersion: '1'\n      operationId: get-accountHolders-id-balanceAccounts\n      x-groupName: Account holders\n      x-sortIndex: 4\n      security:\n      - BasicAuth: []\n      - ApiKeyAuth: []\n      parameters:\n      - description: The unique identifier of the account holder.\n        name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - description: The number of items that you want to skip.\n        name: offset\n        in: query\n        required: false\n        schema:\n          format: int32\n          type: integer\n      - description: The number of items returned per page, maximum 100 items. By\n          default, the response returns 10 items per page.\n        name: limit\n        in: query\n        required: false\n        schema:\n          format: int32\n          type: integer\n      responses:\n        '200':\n          content:\n            application/json:\n              examples:\n                success:\n                  $ref: '#/components/examples/get-accountHolders-id-balanceAccounts-success-200'\n              schema:\n                $ref: '#/components/schemas/PaginatedBalanceAccountsResponse'\n          description: OK - the request has succeeded.\n        '400':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-400'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Bad Request - a problem reading or understanding the request.\n        '401':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-401'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Unauthorized - authentication required.\n        '403':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-403'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Forbidden - insufficient permissions to process the request.\n        '422':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-422'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Unprocessable Entity - a request validation error.\n        '500':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-500'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Internal Server Error - the server could not process the request.\n  /balanceAccounts:\n    post:\n      tags:\n      - Balance accounts\n      summary: Create a balance account\n      description: \"Creates a balance account that holds the funds of the associated\\\n        \\ account holder. \\n\\nFor more information, refer to [Create accounts](https://docs.adyen.com/issuing/create-accounts).\"\n      x-addedInVersion: '1'\n      operationId: post-balanceAccounts\n      x-groupName: Balance accounts\n      x-sortIndex: 1\n      security:\n      - BasicAuth: []\n      - ApiKeyAuth: []\n      requestBody:\n        content:\n          application/json:\n            examples:\n              createBalanceAccount:\n                $ref: '#/components/examples/post-balanceAccounts-createBalanceAccount'\n            schema:\n              $ref: '#/components/schemas/BalanceAccountInfo'\n      responses:\n        '200':\n          content:\n            application/json:\n              examples:\n                success:\n                  $ref: '#/components/examples/post-balanceAccounts-success-200'\n              schema:\n                $ref: '#/components/schemas/BalanceAccount'\n          description: OK - the request has succeeded.\n        '400':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-400'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Bad Request - a problem reading or understanding the request.\n        '401':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-401'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Unauthorized - authentication required.\n        '403':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-403'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Forbidden - insufficient permissions to process the request.\n        '422':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-422'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Unprocessable Entity - a request validation error.\n        '500':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-500'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Internal Server Error - the server could not process the request.\n  /balanceAccounts/{id}:\n    get:\n      tags:\n      - Balance accounts\n      summary: Get a balance account\n      description: Returns a balance account.\n      x-addedInVersion: '1'\n      operationId: get-balanceAccounts-id\n      x-groupName: Balance accounts\n      x-sortIndex: 3\n      security:\n      - BasicAuth: []\n      - ApiKeyAuth: []\n      parameters:\n      - description: The unique identifier of the balance account.\n        name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              examples:\n                success:\n                  $ref: '#/components/examples/get-balanceAccounts-id-success-200'\n              schema:\n                $ref: '#/components/schemas/BalanceAccount'\n          description: OK - the request has succeeded.\n        '400':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-400'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Bad Request - a problem reading or understanding the request.\n        '401':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-401'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Unauthorized - authentication required.\n        '403':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-403'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Forbidden - insufficient permissions to process the request.\n        '422':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-422'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Unprocessable Entity - a request validation error.\n        '500':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-500'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Internal Server Error - the server could not process the request.\n    patch:\n      tags:\n      - Balance accounts\n      summary: Update a balance account\n      description: Updates a balance account.\n      x-addedInVersion: '1'\n      operationId: patch-balanceAccounts-id\n      x-groupName: Balance accounts\n      x-sortIndex: 2\n      security:\n      - BasicAuth: []\n      - ApiKeyAuth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BalanceAccountUpdateRequest'\n      parameters:\n      - description: The unique identifier of the balance account.\n        name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BalanceAccount'\n          description: OK - the request has succeeded.\n        '400':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-400'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Bad Request - a problem reading or understanding the request.\n        '401':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-401'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Unauthorized - authentication required.\n        '403':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-403'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Forbidden - insufficient permissions to process the request.\n        '422':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-422'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Unprocessable Entity - a request validation error.\n        '500':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-500'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Internal Server Error - the server could not process the request.\n  /balanceAccounts/{id}/paymentInstruments:\n    get:\n      tags:\n      - Balance accounts\n      summary: Get all payment instruments for a balance account\n      description: \"Returns a paginated list of the payment instruments associated\\\n        \\ with a balance account. \\n\\nTo fetch multiple pages, use the query parameters.For\\\n        \\ example, to limit the page to 3 payment instruments and to skip the first\\\n        \\ 6, use `/balanceAccounts/{id}/paymentInstruments?limit=3&offset=6`.\"\n      x-addedInVersion: '1'\n      operationId: get-balanceAccounts-id-paymentInstruments\n      x-groupName: Balance accounts\n      x-sortIndex: 4\n      security:\n      - BasicAuth: []\n      - ApiKeyAuth: []\n      parameters:\n      - description: The unique identifier of the balance account.\n        name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - description: The number of items that you want to skip.\n        name: offset\n        in: query\n        required: false\n        schema:\n          format: int32\n          type: integer\n      - description: The number of items returned per page, maximum 100 items. By\n          default, the response returns 10 items per page.\n        name: limit\n        in: query\n        required: false\n        schema:\n          format: int32\n          type: integer\n      responses:\n        '200':\n          content:\n            application/json:\n              examples:\n                success:\n                  $ref: '#/components/examples/get-balanceAccounts-id-paymentInstruments-success-200'\n              schema:\n                $ref: '#/components/schemas/PaginatedPaymentInstrumentsResponse'\n          description: OK - the request has succeeded.\n        '400':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-400'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Bad Request - a problem reading or understanding the request.\n        '401':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-401'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Unauthorized - authentication required.\n        '403':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-403'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Forbidden - insufficient permissions to process the request.\n        '422':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-422'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Unprocessable Entity - a request validation error.\n        '500':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-500'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Internal Server Error - the server could not process the request.\n  /balancePlatforms/{id}:\n    get:\n      tags:\n      - General\n      summary: Get a balance platform\n      description: Returns a balance platform.\n      x-addedInVersion: '1'\n      operationId: get-balancePlatforms-id\n      x-groupName: General\n      x-sortIndex: 0\n      security:\n      - BasicAuth: []\n      - ApiKeyAuth: []\n      parameters:\n      - description: The unique identifier of the balance platform.\n        name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              examples:\n                success:\n                  $ref: '#/components/examples/get-balancePlatforms-id-success-200'\n              schema:\n                $ref: '#/components/schemas/BalancePlatform'\n          description: OK - the request has succeeded.\n        '400':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-400'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Bad Request - a problem reading or understanding the request.\n        '401':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-401'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Unauthorized - authentication required.\n        '403':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-403'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Forbidden - insufficient permissions to process the request.\n        '422':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-422'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Unprocessable Entity - a request validation error.\n        '500':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-500'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Internal Server Error - the server could not process the request.\n  /balancePlatforms/{id}/accountHolders:\n    get:\n      tags:\n      - General\n      summary: Get all account holders under a balance platform\n      description: \"Returns a paginated list of all the account holders that belong\\\n        \\ to the balance platform. To fetch multiple pages, use the query parameters.\\\n        \\ \\n\\nFor example, to limit the page to 5 account holders and to skip the\\\n        \\ first 20, use `/balancePlatforms/{id}/accountHolders?limit=5&offset=20`.\"\n      x-addedInVersion: '1'\n      operationId: get-balancePlatforms-id-accountHolders\n      x-groupName: General\n      x-sortIndex: 0\n      security:\n      - BasicAuth: []\n      - ApiKeyAuth: []\n      parameters:\n      - description: The unique identifier of the balance platform.\n        name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - description: The number of items that you want to skip.\n        name: offset\n        in: query\n        required: false\n        schema:\n          format: int32\n          type: integer\n      - description: The number of items returned per page, maximum 100 items. By\n          default, the response returns 10 items per page.\n        name: limit\n        in: query\n        required: false\n        schema:\n          format: int32\n          type: integer\n      responses:\n        '200':\n          content:\n            application/json:\n              examples:\n                success:\n                  $ref: '#/components/examples/get-balancePlatforms-id-accountHolders-success-200'\n              schema:\n                $ref: '#/components/schemas/PaginatedAccountHoldersResponse'\n          description: OK - the request has succeeded.\n        '400':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-400'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Bad Request - a problem reading or understanding the request.\n        '401':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-401'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Unauthorized - authentication required.\n        '403':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-403'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Forbidden - insufficient permissions to process the request.\n        '422':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-422'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Unprocessable Entity - a request validation error.\n        '500':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-500'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Internal Server Error - the server could not process the request.\n  /documents:\n    post:\n      tags:\n      - Documents\n      summary: Upload a document for verification checks\n      description: \"Uploads a document for verification checks.\\n\\n Adyen uses the\\\n        \\ information from the [legal entity](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/legalEntities)\\\n        \\ to run automated verification checks. If these checks fail, you will be\\\n        \\ notified to provide additional documents. Adyen uses the documents to validate\\\n        \\ the identity of the individual or organization legal entity, or the legal\\\n        \\ entity's bank account details.\\n\\n You should only upload documents when\\\n        \\ Adyen requests additional information for the legal entity. For more information,\\\n        \\ refer to [Onboard and verify account holders](https://docs.adyen.com/issuing/kyc-verification).\"\n      x-addedInVersion: '1'\n      operationId: post-documents\n      x-groupName: Documents\n      x-sortIndex: 4\n      security:\n      - BasicAuth: []\n      - ApiKeyAuth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Document'\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Document'\n          description: OK - the request has succeeded.\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: Bad Request - a problem reading or understanding the request.\n        '401':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: Unauthorized - authentication required.\n        '403':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: Forbidden - insufficient permissions to process the request.\n        '422':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: Unprocessable Entity - a request validation error.\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: Internal Server Error - the server could not process the request.\n  /documents/{id}:\n    delete:\n      tags:\n      - Documents\n      summary: Delete a document\n      description: Deletes a document.\n      x-addedInVersion: '1'\n      operationId: delete-documents-id\n      x-groupName: Documents\n      x-sortIndex: 7\n      security:\n      - BasicAuth: []\n      - ApiKeyAuth: []\n      parameters:\n      - description: The unique identifier of the document to be deleted.\n        name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VoidResponse'\n          description: OK - the request has succeeded.\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: Bad Request - a problem reading or understanding the request.\n        '401':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: Unauthorized - authentication required.\n        '403':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: Forbidden - insufficient permissions to process the request.\n        '422':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: Unprocessable Entity - a request validation error.\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: Internal Server Error - the server could not process the request.\n    get:\n      tags:\n      - Documents\n      summary: Get a document\n      description: Returns a document.\n      x-addedInVersion: '1'\n      operationId: get-documents-id\n      x-groupName: Documents\n      x-sortIndex: 5\n      security:\n      - BasicAuth: []\n      - ApiKeyAuth: []\n      parameters:\n      - description: The unique identifier of the document.\n        name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Document'\n          description: OK - the request has succeeded.\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: Bad Request - a problem reading or understanding the request.\n        '401':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: Unauthorized - authentication required.\n        '403':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: Forbidden - insufficient permissions to process the request.\n        '422':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: Unprocessable Entity - a request validation error.\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: Internal Server Error - the server could not process the request.\n    patch:\n      tags:\n      - Documents\n      summary: Update a document\n      description: Updates a document.\n      x-addedInVersion: '1'\n      operationId: patch-documents-id\n      x-groupName: Documents\n      x-sortIndex: 6\n      security:\n      - BasicAuth: []\n      - ApiKeyAuth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Document'\n      parameters:\n      - description: The unique identifier of the document to be updated.\n        name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Document'\n          description: OK - the request has succeeded.\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: Bad Request - a problem reading or understanding the request.\n        '401':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: Unauthorized - authentication required.\n        '403':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: Forbidden - insufficient permissions to process the request.\n        '422':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: Unprocessable Entity - a request validation error.\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: Internal Server Error - the server could not process the request.\n  /legalEntities:\n    post:\n      tags:\n      - Legal entities\n      summary: Create a legal entity\n      description: \"Creates a legal entity. \\n\\nThis resource contains information\\\n        \\ about an individual or organization that will be onboarded in your balance\\\n        \\ platform. Adyen uses this information to perform verification checks as\\\n        \\ required by payment industry regulations. Adyen informs you of the verification\\\n        \\ results through webhooks or API responses. \\n\\nAfter the legal entity has\\\n        \\ passed the verification checks, you can issue a card to them. For more information,\\\n        \\ refer to [Onboard and verify account holders](https://docs.adyen.com/issuing/kyc-verification).\"\n      x-addedInVersion: '1'\n      operationId: post-legalEntities\n      x-groupName: Legal entities\n      x-sortIndex: 1\n      security:\n      - BasicAuth: []\n      - ApiKeyAuth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LegalEntityInfo'\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LegalEntity'\n          description: OK - the request has succeeded.\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: Bad Request - a problem reading or understanding the request.\n        '401':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: Unauthorized - authentication required.\n        '403':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: Forbidden - insufficient permissions to process the request.\n        '422':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: Unprocessable Entity - a request validation error.\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: Internal Server Error - the server could not process the request.\n  /legalEntities/{id}:\n    get:\n      tags:\n      - Legal entities\n      summary: Get a legal entity\n      description: Returns a legal entity.\n      x-addedInVersion: '1'\n      operationId: get-legalEntities-id\n      x-groupName: Legal entities\n      x-sortIndex: 2\n      security:\n      - BasicAuth: []\n      - ApiKeyAuth: []\n      parameters:\n      - description: The unique identifier of the legal entity.\n        name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LegalEntity'\n          description: OK - the request has succeeded.\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: Bad Request - a problem reading or understanding the request.\n        '401':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: Unauthorized - authentication required.\n        '403':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: Forbidden - insufficient permissions to process the request.\n        '422':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: Unprocessable Entity - a request validation error.\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: Internal Server Error - the server could not process the request.\n    patch:\n      tags:\n      - Legal entities\n      summary: Update a legal entity\n      description: \"Updates a legal entity.\\n\\n >To update the `entityAssociations`\\\n        \\ array, you need to replace the entire array. For example, if the array has\\\n        \\ 3 entries and you want to remove 1 entry, you need to PATCH the resource\\\n        \\ with the remaining 2 entries.\"\n      x-addedInVersion: '1'\n      operationId: patch-legalEntities-id\n      x-groupName: Legal entities\n      x-sortIndex: 3\n      security:\n      - BasicAuth: []\n      - ApiKeyAuth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/GenericEntityInfo'\n      parameters:\n      - description: The unique identifier of the legal entity.\n        name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LegalEntity'\n          description: OK - the request has succeeded.\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: Bad Request - a problem reading or understanding the request.\n        '401':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: Unauthorized - authentication required.\n        '403':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: Forbidden - insufficient permissions to process the request.\n        '422':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: Unprocessable Entity - a request validation error.\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: Internal Server Error - the server could not process the request.\n  /paymentInstrumentGroups:\n    post:\n      tags:\n      - Payment instrument groups\n      summary: Create a payment instrument group\n      description: Creates a payment instrument group to associate and group payment\n        instrument resources together. You can apply a transaction rule to a payment\n        instrument group.\n      x-addedInVersion: '1'\n      operationId: post-paymentInstrumentGroups\n      x-groupName: Payment instrument groups\n      x-sortIndex: 1\n      security:\n      - BasicAuth: []\n      - ApiKeyAuth: []\n      requestBody:\n        content:\n          application/json:\n            examples:\n              createPaymentInstrumentGroups:\n                $ref: '#/components/examples/post-paymentInstrumentGroups-createPaymentInstrumentGroups'\n            schema:\n              $ref: '#/components/schemas/PaymentInstrumentGroupInfo'\n      responses:\n        '200':\n          content:\n            application/json:\n              examples:\n                success:\n                  $ref: '#/components/examples/post-paymentInstrumentGroups-success-200'\n              schema:\n                $ref: '#/components/schemas/PaymentInstrumentGroup'\n          description: OK - the request has succeeded.\n        '400':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-400'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Bad Request - a problem reading or understanding the request.\n        '401':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-401'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Unauthorized - authentication required.\n        '403':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-403'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Forbidden - insufficient permissions to process the request.\n        '422':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-422'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Unprocessable Entity - a request validation error.\n        '500':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-500'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Internal Server Error - the server could not process the request.\n  /paymentInstrumentGroups/{id}:\n    get:\n      tags:\n      - Payment instrument groups\n      summary: Get a payment instrument group\n      description: Returns a payment instrument group.\n      x-addedInVersion: '1'\n      operationId: get-paymentInstrumentGroups-id\n      x-groupName: Payment instrument groups\n      x-sortIndex: 2\n      security:\n      - BasicAuth: []\n      - ApiKeyAuth: []\n      parameters:\n      - description: The unique identifier of the payment instrument group.\n        name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              examples:\n                success:\n                  $ref: '#/components/examples/get-paymentInstrumentGroups-id-success-200'\n              schema:\n                $ref: '#/components/schemas/PaymentInstrumentGroup'\n          description: OK - the request has succeeded.\n        '400':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-400'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Bad Request - a problem reading or understanding the request.\n        '401':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-401'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Unauthorized - authentication required.\n        '403':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-403'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Forbidden - insufficient permissions to process the request.\n        '422':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-422'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Unprocessable Entity - a request validation error.\n        '500':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-500'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Internal Server Error - the server could not process the request.\n  /paymentInstrumentGroups/{id}/transactionRules:\n    get:\n      tags:\n      - Payment instrument groups\n      summary: Get all transaction rules for a payment instrument group\n      description: Returns a list of all the transaction rules associated with a payment\n        instrument group.\n      x-addedInVersion: '1'\n      operationId: get-paymentInstrumentGroups-id-transactionRules\n      x-groupName: Payment instrument groups\n      x-sortIndex: 3\n      security:\n      - BasicAuth: []\n      - ApiKeyAuth: []\n      parameters:\n      - description: The unique identifier of the payment instrument group.\n        name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              examples:\n                success:\n                  $ref: '#/components/examples/get-paymentInstrumentGroups-id-transactionRules-success-200'\n              schema:\n                $ref: '#/components/schemas/TransactionRulesResponse'\n          description: OK - the request has succeeded.\n        '400':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-400'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Bad Request - a problem reading or understanding the request.\n        '401':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-401'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Unauthorized - authentication required.\n        '403':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-403'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Forbidden - insufficient permissions to process the request.\n        '422':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-422'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Unprocessable Entity - a request validation error.\n        '500':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-500'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Internal Server Error - the server could not process the request.\n  /paymentInstruments:\n    post:\n      tags:\n      - Payment instruments\n      summary: Create a payment instrument\n      description: \"Creates a payment instrument to issue either a physical or a virtual\\\n        \\ card to your user.\\n\\n For more information, refer to [Create cards](https://docs.adyen.com/issuing/create-cards).\"\n      x-addedInVersion: '1'\n      operationId: post-paymentInstruments\n      x-groupName: Payment instruments\n      x-sortIndex: 11\n      security:\n      - BasicAuth: []\n      - ApiKeyAuth: []\n      requestBody:\n        content:\n          application/json:\n            examples:\n              createPhysicalCard:\n                $ref: '#/components/examples/post-paymentInstruments-createPhysicalCard'\n              createVirtualCard:\n                $ref: '#/components/examples/post-paymentInstruments-createVirtualCard'\n            schema:\n              $ref: '#/components/schemas/PaymentInstrumentInfo'\n      responses:\n        '200':\n          content:\n            application/json:\n              examples:\n                success:\n                  $ref: '#/components/examples/post-paymentInstruments-success-200'\n              schema:\n                $ref: '#/components/schemas/PaymentInstrument'\n          description: OK - the request has succeeded.\n        '400':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-400'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Bad Request - a problem reading or understanding the request.\n        '401':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-401'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Unauthorized - authentication required.\n        '403':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-403'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Forbidden - insufficient permissions to process the request.\n        '422':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-422'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Unprocessable Entity - a request validation error.\n        '500':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-500'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Internal Server Error - the server could not process the request.\n  /paymentInstruments/{id}:\n    get:\n      tags:\n      - Payment instruments\n      summary: Get a payment instrument\n      description: Returns a payment instrument.\n      x-addedInVersion: '1'\n      operationId: get-paymentInstruments-id\n      x-groupName: Payment instruments\n      x-sortIndex: 13\n      security:\n      - BasicAuth: []\n      - ApiKeyAuth: []\n      parameters:\n      - description: The unique identifier of the payment instrument.\n        name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              examples:\n                success:\n                  $ref: '#/components/examples/get-paymentInstruments-id-success-200'\n              schema:\n                $ref: '#/components/schemas/PaymentInstrument'\n          description: OK - the request has succeeded.\n        '400':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-400'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Bad Request - a problem reading or understanding the request.\n        '401':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-401'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Unauthorized - authentication required.\n        '403':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-403'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Forbidden - insufficient permissions to process the request.\n        '422':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-422'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Unprocessable Entity - a request validation error.\n        '500':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-500'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Internal Server Error - the server could not process the request.\n    patch:\n      tags:\n      - Payment instruments\n      summary: Update a payment instrument\n      description: Updates a payment instrument. Once a payment instrument is already\n        active, you can only update its status. However, for cards created with **inactive**\n        status, you can still update the balance account associated with the card.\n      x-addedInVersion: '1'\n      operationId: patch-paymentInstruments-id\n      x-groupName: Payment instruments\n      x-sortIndex: 12\n      security:\n      - BasicAuth: []\n      - ApiKeyAuth: []\n      requestBody:\n        content:\n          application/json:\n            examples:\n              updatePaymentInstrumentBalanceAccount:\n                $ref: '#/components/examples/patch-paymentInstruments-id-updatePaymentInstrumentBalanceAccount'\n              updatePaymentInstrumentStatus:\n                $ref: '#/components/examples/patch-paymentInstruments-id-updatePaymentInstrumentStatus'\n            schema:\n              $ref: '#/components/schemas/PaymentInstrumentUpdateRequest'\n      parameters:\n      - description: The unique identifier of the payment instrument.\n        name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              examples:\n                success:\n                  $ref: '#/components/examples/patch-paymentInstruments-id-success-200'\n              schema:\n                $ref: '#/components/schemas/PaymentInstrument'\n          description: OK - the request has succeeded.\n        '400':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-400'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Bad Request - a problem reading or understanding the request.\n        '401':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-401'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Unauthorized - authentication required.\n        '403':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-403'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Forbidden - insufficient permissions to process the request.\n        '422':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-422'\n                invalidData:\n                  $ref: '#/components/examples/patch-paymentInstruments-id-invalidData-422'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Unprocessable Entity - a request validation error.\n        '500':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-500'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Internal Server Error - the server could not process the request.\n  /paymentInstruments/{id}/transactionRules:\n    get:\n      tags:\n      - Payment instruments\n      summary: Get all transaction rules for a payment instrument\n      description: Returns a list of transaction rules associated with a payment instrument.\n      x-addedInVersion: '1'\n      operationId: get-paymentInstruments-id-transactionRules\n      x-groupName: Payment instruments\n      x-sortIndex: 14\n      security:\n      - BasicAuth: []\n      - ApiKeyAuth: []\n      parameters:\n      - description: The unique identifier of the payment instrument.\n        name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              examples:\n                success:\n                  $ref: '#/components/examples/get-paymentInstruments-id-transactionRules-success-200'\n              schema:\n                $ref: '#/components/schemas/TransactionRulesResponse'\n          description: OK - the request has succeeded.\n        '400':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-400'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Bad Request - a problem reading or understanding the request.\n        '401':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-401'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Unauthorized - authentication required.\n        '403':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-403'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Forbidden - insufficient permissions to process the request.\n        '422':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-422'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Unprocessable Entity - a request validation error.\n        '500':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-500'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Internal Server Error - the server could not process the request.\n  /transactionRules:\n    post:\n      tags:\n      - Transaction rules\n      summary: Create a transaction rule\n      description: 'Creates a [transaction rule](https://docs.adyen.com/issuing/transaction-rules).\n        When your user makes a transaction with their Adyen-issued card, the transaction\n        is allowed or declined based on the conditions and outcome defined in the\n        transaction rule. You can apply the transaction rule to several cards, such\n        as all the cards in your balance platform, or to a specific card.\n\n\n        For use cases, see [examples](https://docs.adyen.com/issuing/transaction-rules/examples).'\n      x-addedInVersion: '1'\n      operationId: post-transactionRules\n      x-groupName: Transaction rules\n      x-sortIndex: 1\n      security:\n      - BasicAuth: []\n      - ApiKeyAuth: []\n      requestBody:\n        content:\n          application/json:\n            examples:\n              createTransactionRule:\n                $ref: '#/components/examples/post-transactionRules-createTransactionRule'\n            schema:\n              $ref: '#/components/schemas/TransactionRuleInfo'\n      responses:\n        '200':\n          content:\n            application/json:\n              examples:\n                success:\n                  $ref: '#/components/examples/post-transactionRules-success-200'\n              schema:\n                $ref: '#/components/schemas/TransactionRule'\n          description: OK - the request has succeeded.\n        '400':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-400'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Bad Request - a problem reading or understanding the request.\n        '401':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-401'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Unauthorized - authentication required.\n        '403':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-403'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Forbidden - insufficient permissions to process the request.\n        '422':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-422'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Unprocessable Entity - a request validation error.\n        '500':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-500'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Internal Server Error - the server could not process the request.\n  /transactionRules/{transactionRuleId}:\n    delete:\n      tags:\n      - Transaction rules\n      summary: Delete a transaction rule\n      description: Deletes a transaction rule.\n      x-addedInVersion: '1'\n      operationId: delete-transactionRules-transactionRuleId\n      x-groupName: Transaction rules\n      x-sortIndex: 5\n      security:\n      - BasicAuth: []\n      - ApiKeyAuth: []\n      parameters:\n      - description: The unique identifier of the transaction rule.\n        name: transactionRuleId\n        in: path\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              examples:\n                success:\n                  $ref: '#/components/examples/delete-transactionRules-transactionRuleId-success-200'\n              schema:\n                $ref: '#/components/schemas/TransactionRule'\n          description: OK - the request has succeeded.\n        '400':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-400'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Bad Request - a problem reading or understanding the request.\n        '401':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-401'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Unauthorized - authentication required.\n        '403':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-403'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Forbidden - insufficient permissions to process the request.\n        '422':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-422'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Unprocessable Entity - a request validation error.\n        '500':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-500'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Internal Server Error - the server could not process the request.\n    get:\n      tags:\n      - Transaction rules\n      summary: Get a transaction rule\n      description: Returns a transaction rule.\n      x-addedInVersion: '1'\n      operationId: get-transactionRules-transactionRuleId\n      x-groupName: Transaction rules\n      x-sortIndex: 2\n      security:\n      - BasicAuth: []\n      - ApiKeyAuth: []\n      parameters:\n      - description: The unique identifier of the transaction rule.\n        name: transactionRuleId\n        in: path\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              examples:\n                success:\n                  $ref: '#/components/examples/get-transactionRules-transactionRuleId-success-200'\n              schema:\n                $ref: '#/components/schemas/TransactionRuleResponse'\n          description: OK - the request has succeeded.\n        '400':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-400'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Bad Request - a problem reading or understanding the request.\n        '401':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-401'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Unauthorized - authentication required.\n        '403':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-403'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Forbidden - insufficient permissions to process the request.\n        '422':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-422'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Unprocessable Entity - a request validation error.\n        '500':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-500'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Internal Server Error - the server could not process the request.\n    patch:\n      tags:\n      - Transaction rules\n      summary: Update a transaction rule\n      description: \"Updates a transaction rule. \\n\\n* To update only the status of\\\n        \\ a transaction rule, send only the `status` parameter. All other parameters\\\n        \\ not provided in the request are left unchanged.\\n\\n* When updating any other\\\n        \\ parameter, you need to send all existing resource parameters. If you omit\\\n        \\ a parameter in the request, that parameter is removed from the resource.\"\n      x-addedInVersion: '1'\n      operationId: patch-transactionRules-transactionRuleId\n      x-groupName: Transaction rules\n      x-sortIndex: 3\n      security:\n      - BasicAuth: []\n      - ApiKeyAuth: []\n      requestBody:\n        content:\n          application/json:\n            examples:\n              updateTransactionRuleStatus:\n                $ref: '#/components/examples/patch-transactionRules-transactionRuleId-updateTransactionRuleStatus'\n            schema:\n              $ref: '#/components/schemas/TransactionRuleInfo'\n      parameters:\n      - description: The unique identifier of the transaction rule.\n        name: transactionRuleId\n        in: path\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              examples:\n                success:\n                  $ref: '#/components/examples/patch-transactionRules-transactionRuleId-success-200'\n              schema:\n                $ref: '#/components/schemas/TransactionRule'\n          description: OK - the request has succeeded.\n        '400':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-400'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Bad Request - a problem reading or understanding the request.\n        '401':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-401'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Unauthorized - authentication required.\n        '403':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-403'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Forbidden - insufficient permissions to process the request.\n        '422':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-422'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Unprocessable Entity - a request validation error.\n        '500':\n          content:\n            application/json:\n              examples:\n                generic:\n                  $ref: '#/components/examples/generic-500'\n              schema:\n                $ref: '#/components/schemas/RestServiceError'\n          description: Internal Server Error - the server could not process the request.\n  /transferInstruments:\n    post:\n      tags:\n      - Transfer instruments\n      summary: Create a transfer instrument\n      description: \"Creates a transfer instrument. \\n\\nA transfer instrument is a\\\n        \\ bank account or other payment details that a legal entity owns. Adyen performs\\\n        \\ verification checks on the transfer instrument as required by payment industry\\\n        \\ regulations. We inform you of the verification results through webhooks\\\n        \\ or API responses.\\n\\nWhen the transfer instrument passes the verification\\\n        \\ checks, you can start sending funds from the balance platform to the transfer\\\n        \\ instrument (such as payouts).\"\n      x-addedInVersion: '1'\n      operationId: post-transferInstruments\n      x-groupName: Transfer instruments\n      x-sortIndex: 8\n      security:\n      - BasicAuth: []\n      - ApiKeyAuth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TransferInstrumentInfo'\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransferInstrument'\n          description: OK - the request has succeeded.\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: Bad Request - a problem reading or understanding the request.\n        '401':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: Unauthorized - authentication required.\n        '403':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: Forbidden - insufficient permissions to process the request.\n        '422':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: Unprocessable Entity - a request validation error.\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: Internal Server Error - the server could not process the request.\n  /transferInstruments/{id}:\n    delete:\n      tags:\n      - Transfer instruments\n      summary: Delete a transfer instrument\n      description: Deletes a transfer instrument.\n      x-addedInVersion: '1'\n      operationId: delete-transferInstruments-id\n      x-groupName: Transfer instruments\n      x-sortIndex: 11\n      security:\n      - BasicAuth: []\n      - ApiKeyAuth: []\n      parameters:\n      - description: The unique identifier of the transfer instrument to be deleted.\n        name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VoidResponse'\n          description: OK - the request has succeeded.\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: Bad Request - a problem reading or understanding the request.\n        '401':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: Unauthorized - authentication required.\n        '403':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: Forbidden - insufficient permissions to process the request.\n        '422':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: Unprocessable Entity - a request validation error.\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: Internal Server Error - the server could not process the request.\n    get:\n      tags:\n      - Transfer instruments\n      summary: Get a transfer instrument\n      description: Returns a transfer instrument.\n      x-addedInVersion: '1'\n      operationId: get-transferInstruments-id\n      x-groupName: Transfer instruments\n      x-sortIndex: 9\n      security:\n      - BasicAuth: []\n      - ApiKeyAuth: []\n      parameters:\n      - description: The unique identifier of the transfer instrument.\n        name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransferInstrument'\n          description: OK - the request has succeeded.\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: Bad Request - a problem reading or understanding the request.\n        '401':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: Unauthorized - authentication required.\n        '403':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: Forbidden - insufficient permissions to process the request.\n        '422':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: Unprocessable Entity - a request validation error.\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: Internal Server Error - the server could not process the request.\n    patch:\n      tags:\n      - Transfer instruments\n      summary: Update a transfer instrument\n      description: Updates a transfer instrument.\n      x-addedInVersion: '1'\n      operationId: patch-transferInstruments-id\n      x-groupName: Transfer instruments\n      x-sortIndex: 10\n      security:\n      - BasicAuth: []\n      - ApiKeyAuth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TransferInstrumentInfo'\n      parameters:\n      - description: The unique identifier of the transfer instrument.\n        name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransferInstrument'\n          description: OK - the request has succeeded.\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: Bad Request - a problem reading or understanding the request.\n        '401':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: Unauthorized - authentication required.\n        '403':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: Forbidden - insufficient permissions to process the request.\n        '422':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: Unprocessable Entity - a request validation error.\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: Internal Server Error - the server could not process the request.\ncomponents:\n  schemas:\n    AccountHolder:\n      properties:\n        balancePlatform:\n          description: The unique identifier of the [balance platform](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balancePlatforms/{id}__queryParam_id)\n            to which the account holder belongs. Required in the request if your API\n            credentials can be used for multiple balance platforms.\n          type: string\n        capabilities:\n          additionalProperties:\n            $ref: '#/components/schemas/AccountHolderCapability'\n          description: Contains key-value pairs that specify the actions that an account\n            holder can do in your platform. The key is a capability required for your\n            integration. For example, **issueCard** for Issuing. The value is an object\n            containing the settings for the capability.\n          type: object\n        contactDetails:\n          description: Contact details of the account holder.\n          $ref: '#/components/schemas/ContactDetails'\n        description:\n          description: Your description for the account holder, maximum 300 characters.\n          maxLength: 300\n          type: string\n        id:\n          description: The unique identifier of the account holder.\n          readOnly: true\n          type: string\n        legalEntityId:\n          description: 'The unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/legalEntities__resParam_id)\n            associated with the account holder. Adyen performs a verification process\n            against the legal entity of the account holder.\n\n\n            For more information on how to create a legal entity, refer to [Onboard\n            and verify account holders](https://docs.adyen.com/issuing/kyc-verification).'\n          type: string\n        primaryBalanceAccount:\n          description: The ID of the account holder's primary balance account. By\n            default, this is set to the first balance account that you create for\n            the account holder. To assign a different balance account, send a PATCH\n            request.\n          type: string\n        reference:\n          description: Your reference for the account holder, maximum 150 characters.\n          maxLength: 150\n          type: string\n        status:\n          description: \"The status of the account holder.\\n\\nPossible values: \\n\\n\\\n            \\ * **Active**: The account holder is active. This is the default status\\\n            \\ when creating an account holder. \\n\\n * **Suspended**: The account holder\\\n            \\ is temporarily suspended. You can set the account back to active or\\\n            \\ close it permanently. \\n\\n* **Closed**: The account holder is permanently\\\n            \\ deactivated. This action cannot be undone.\"\n          enum:\n          - Active\n          - Closed\n          - Inactive\n          - Suspended\n          type: string\n        timeZone:\n          description: 'The [time zone](https://www.iana.org/time-zones) of the account\n            holder. For example, **Europe/Amsterdam**.\n\n            If not set, the time zone of the balance account will be used. For possible\n            values, see the [list of time zone codes](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).'\n          type: string\n      required:\n      - legalEntityId\n      - id\n    AccountHolderCapability:\n      properties:\n        allowed:\n          description: Indicates whether the capability is allowed. Adyen sets this\n            to **true** if the verification is successful and the account holder is\n            permitted to use the capability.\n          readOnly: true\n          type: boolean\n        allowedLevel:\n          description: 'The capability level that is allowed for the account holder.\n\n\n            Possible values: **notApplicable**, **low**, **medium**, **high**.'\n          enum:\n          - high\n          - low\n          - medium\n          - notApplicable\n          readOnly: true\n          type: string\n        allowedSettings:\n          description: A JSON object containing the settings that are allowed for\n            the account holder.\n          readOnly: true\n          $ref: '#/components/schemas/JSONObject'\n        enabled:\n          description: Indicates whether the capability is enabled. If **false**,\n            the capability is temporarily disabled for the account holder.\n          type: boolean\n        problems:\n          description: Contains verification errors and the actions that you can take\n            to resolve them.\n          items:\n            $ref: '#/components/schemas/CapabilityProblem'\n          readOnly: true\n          type: array\n        requested:\n          description: Indicates whether the capability is requested. To check whether\n            the account holder is permitted to use the capability, refer to the `allowed`\n            field.\n          type: boolean\n        requestedLevel:\n          description: 'The requested level of the capability. Some capabilities,\n            such as those used in [card issuing](https://docs.adyen.com/issuing/add-capabilities#capability-levels),\n            have different levels. Levels increase the capability, but also require\n            additional checks and increased monitoring.\n\n\n            Possible values: **notApplicable**, **low**, **medium**, **high**.'\n          enum:\n          - high\n          - low\n          - medium\n          - notApplicable\n          type: string\n        requestedSettings:\n          description: A JSON object containing the settings that were requested for\n            the account holder.\n          readOnly: true\n          $ref: '#/components/schemas/JSONObject'\n        verificationStatus:\n          description: 'The status of the verification checks for the capability.\n\n\n            Possible values:\n\n\n            * **pending**: Adyen is running the verification.\n\n\n            * **invalid**: The verification failed. Check if the `errors` array contains\n            more information.\n\n\n            * **valid**: The verification has been successfully completed.\n\n\n            * **rejected**: Adyen has verified the information, but found reasons\n            to not allow the capability.\n\n            '\n          enum:\n          - invalid\n          - pending\n          - rejected\n          - valid\n          readOnly: true\n          type: string\n    AccountHolderInfo:\n      properties:\n        balancePlatform:\n          description: The unique identifier of the [balance platform](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balancePlatforms/{id}__queryParam_id)\n            to which the account holder belongs. Required in the request if your API\n            credentials can be used for multiple balance platforms.\n          type: string\n        capabilities:\n          additionalProperties:\n            $ref: '#/components/schemas/AccountHolderCapability'\n          description: Contains key-value pairs that specify the actions that an account\n            holder can do in your platform. The key is a capability required for your\n            integration. For example, **issueCard** for Issuing. The value is an object\n            containing the settings for the capability.\n          type: object\n        contactDetails:\n          description: Contact details of the account holder.\n          $ref: '#/components/schemas/ContactDetails'\n        description:\n          description: Your description for the account holder, maximum 300 characters.\n          maxLength: 300\n          type: string\n        legalEntityId:\n          description: 'The unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/legalEntities__resParam_id)\n            associated with the account holder. Adyen performs a verification process\n            against the legal entity of the account holder.\n\n\n            For more information on how to create a legal entity, refer to [Onboard\n            and verify account holders](https://docs.adyen.com/issuing/kyc-verification).'\n          type: string\n        reference:\n          description: Your reference for the account holder, maximum 150 characters.\n          maxLength: 150\n          type: string\n        timeZone:\n          description: 'The [time zone](https://www.iana.org/time-zones) of the account\n            holder. For example, **Europe/Amsterdam**.\n\n            If not set, the time zone of the balance account will be used. For possible\n            values, see the [list of time zone codes](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).'\n          type: string\n      required:\n      - legalEntityId\n    Address2:\n      properties:\n        city:\n          description: The name of the city.\n          type: string\n        country:\n          description: The two-character ISO-3166-1 alpha-2 country code. For example,\n            **US**.\n          type: string\n        houseNumberOrName:\n          description: The number or name of the house.\n          type: string\n        postalCode:\n          description: A maximum of five digits for an address in the US, or a maximum\n            of ten characters for an address in all other countries.\n          type: string\n        stateOrProvince:\n          description: 'The two-character ISO 3166-2 state or province code. For example,\n            **CA** in the US or **ON** in Canada.\n\n            > Required for the US and Canada.'\n          type: string\n        street:\n          description: \"The name of the street. \\n> The house number should not be\\\n            \\ included in this field; it should be separately provided via `houseNumberOrName`.\"\n          type: string\n      required:\n      - street\n      - houseNumberOrName\n      - city\n      - postalCode\n      - country\n    Amount:\n      properties:\n        currency:\n          description: The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).\n          maxLength: 3\n          minLength: 3\n          type: string\n        value:\n          description: The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes).\n          format: int64\n          type: integer\n      required:\n      - value\n      - currency\n    Attachment:\n      properties:\n        content:\n          description: The document in Base64-encoded string format.\n          format: byte\n          type: string\n        contentType:\n          deprecated: true\n          x-deprecatedInVersion: '1'\n          description: \"The file format.\\n\\n Possible values: **application/pdf**,\\\n            \\ **image/jpg**, **image/jpeg**, **image/png**. \"\n          type: string\n        filename:\n          deprecated: true\n          x-deprecatedInVersion: '1'\n          description: The name of the file including the file extension.\n          type: string\n        pageType:\n          description: 'Specifies which side of the ID card is uploaded.\n\n\n            * When `type` is **driversLicense**, set this to **front** or **back**.\n\n\n            * When omitted, we infer the page number based on the order of attachments.'\n          type: string\n      required:\n      - content\n    Authentication:\n      properties:\n        email:\n          description: The email address where the one-time password (OTP) is sent.\n          type: string\n        password:\n          description: \"The password used for 3D Secure password-based authentication.\\\n            \\ The value must be between 1 to 30 characters and must only contain the\\\n            \\ following supported characters.\\n\\n* Characters between **a-z**, **A-Z**,\\\n            \\ and **0-9**\\n\\n* Special characters: **\\xE4\\xF6\\xFC\\xDF\\xC4\\xD6\\xDC\\\n            +-*/\\xE7%()=?!~#'\\\",;:$&\\xE0\\xF9\\xF2\\xE2\\xF4\\xFB\\xE1\\xFA\\xF3**\"\n          maxLength: 30\n          minLength: 1\n          type: string\n        phone:\n          description: 'The phone number where the one-time password (OTP) is sent.\n\n\n            This object must have:\n\n\n            * A `type` set to **mobile**.\n\n\n            * A `number` with a valid country code.\n\n\n            * A `number` with more than 4 digits, excluding the country code.\n\n\n            >Make sure to verify that the card user owns the phone number.'\n          $ref: '#/components/schemas/Phone'\n    Balance:\n      properties:\n        available:\n          description: The remaining amount available for spending.\n          format: int64\n          type: integer\n        balance:\n          description: The total amount in the balance.\n          format: int64\n          type: integer\n        currency:\n          description: The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes)\n            of the balance.\n          type: string\n        reserved:\n          description: The amount reserved for payments that have been authorised,\n            but have not been captured yet.\n          format: int64\n          type: integer\n      required:\n      - currency\n      - balance\n      - reserved\n      - available\n    BalanceAccount:\n      properties:\n        accountHolderId:\n          description: The unique identifier of the [account holder](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/accountHolders__resParam_id)\n            associated with the balance account.\n          type: string\n        balances:\n          description: List of balances with the amount and currency.\n          items:\n            $ref: '#/components/schemas/Balance'\n          type: array\n        defaultCurrencyCode:\n          description: 'The default three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes)\n            of the balance account.\n\n            The default value is **EUR**.'\n          type: string\n        description:\n          description: A human-readable description of the balance account, maximum\n            300 characters. You can use this parameter to distinguish between multiple\n            balance accounts under an account holder.\n          maxLength: 300\n          type: string\n        id:\n          description: The unique identifier of the balance account.\n          type: string\n        paymentInstruments:\n          description: List of [payment instruments](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/paymentInstruments)\n            associated with the balance account.\n          items:\n            $ref: '#/components/schemas/PaymentInstrumentReference'\n          type: array\n        reference:\n          description: Your reference for the balance account, maximum 150 characters.\n          maxLength: 150\n          type: string\n        status:\n          description: \"The status of the balance account, set to **Active** by default.\\\n            \\ \\n\"\n          enum:\n          - Active\n          - Closed\n          - Inactive\n          - Suspended\n          type: string\n        sweepConfigurations:\n          additionalProperties:\n            $ref: '#/components/schemas/SweepConfiguration'\n          description: 'Contains key-value pairs that specify configurations for balance\n            sweeps per currency code. A sweep pulls in or pushes out funds based on\n            a defined schedule, amount, and a source (for pulling funds) or a destination\n            (for pushing funds).\n\n\n            The key must be a three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes)\n            in uppercase. For example, **EUR**. The value must be an object containing\n            the sweep configuration.'\n          type: object\n        timeZone:\n          description: 'The [time zone](https://www.iana.org/time-zones) of the balance\n            account. For example, **Europe/Amsterdam**.\n\n            If not set, the time zone of the account holder will be used. For possible\n            values, see the [list of time zone codes](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).'\n          type: string\n      required:\n      - accountHolderId\n      - id\n    BalanceAccountInfo:\n      properties:\n        accountHolderId:\n          description: The unique identifier of the [account holder](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/accountHolders__resParam_id)\n            associated with the balance account.\n          type: string\n        defaultCurrencyCode:\n          description: 'The default three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes)\n            of the balance account.\n\n            The default value is **EUR**.'\n          type: string\n        description:\n          description: A human-readable description of the balance account, maximum\n            300 characters. You can use this parameter to distinguish between multiple\n            balance accounts under an account holder.\n          maxLength: 300\n          type: string\n        reference:\n          description: Your reference for the balance account, maximum 150 characters.\n          maxLength: 150\n          type: string\n        sweepConfigurations:\n          additionalProperties:\n            $ref: '#/components/schemas/SweepConfiguration'\n          description: 'Contains key-value pairs that specify configurations for balance\n            sweeps per currency code. A sweep pulls in or pushes out funds based on\n            a defined schedule, amount, and a source (for pulling funds) or a destination\n            (for pushing funds).\n\n\n            The key must be a three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes)\n            in uppercase. For example, **EUR**. The value must be an object containing\n            the sweep configuration.'\n          type: object\n        timeZone:\n          description: 'The [time zone](https://www.iana.org/time-zones) of the balance\n            account. For example, **Europe/Amsterdam**.\n\n            If not set, the time zone of the account holder will be used. For possible\n            values, see the [list of time zone codes](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).'\n          type: string\n      required:\n      - accountHolderId\n    BalanceAccountUpdateRequest:\n      properties:\n        accountHolderId:\n          description: The unique identifier of the [account holder](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/accountHolders__resParam_id)\n            associated with the balance account.\n          type: string\n        defaultCurrencyCode:\n          description: \"The default currency code of this balance account, in three-character\\\n            \\ [ISO currency code](https://docs.adyen.com/development-resources/currency-codes)\\\n            \\ format. \\nThe default value is **EUR**.\"\n          type: string\n        description:\n          description: A human-readable description of the balance account, maximum\n            300 characters. You can use this parameter to distinguish between multiple\n            balance accounts under an account holder.\n          maxLength: 300\n          type: string\n        reference:\n          description: Your reference to the balance account, maximum 150 characters.\n          maxLength: 150\n          type: string\n        status:\n          description: 'The status of the balance account. Payment instruments linked\n            to the balance account can only be used if the balance account status\n            is **Active**.\n\n\n            Possible values: **Active**, **Inactive**, **Closed**, **Suspended**.'\n          enum:\n          - Active\n          - Closed\n          - Inactive\n          - Suspended\n          type: string\n        sweepConfigurations:\n          additionalProperties:\n            $ref: '#/components/schemas/SweepConfiguration'\n          description: \"Contains key-value pairs that specify [balance sweep per currency\\\n            \\ code](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__reqParam_sweepConfigurations).\\n\\\n            \\nYou can update the balance account to add, update, or delete sweeps.\\n\\\n            \\n* To add a sweep, send the currency code as a key and the configuration\\\n            \\ as the object.\\n\\n * To update a sweep, send the whole configuration\\\n            \\ with your updates.\\n\\n* To delete a sweep, set the value to **null**.\\\n            \\ For example, `\\\"EUR\\\": null`.\"\n          type: object\n        timeZone:\n          description: 'The [time zone](https://www.iana.org/time-zones) of the balance\n            account. For example, **Europe/Amsterdam**.\n\n            If not set, the time zone of the account holder will be used. For possible\n            values, see the [list of time zone codes](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).'\n          type: string\n    BalancePlatform:\n      properties:\n        description:\n          description: Your description of the balance platform, maximum 300 characters.\n          maxLength: 300\n          type: string\n        id:\n          description: The unique identifier of the balance platform.\n          type: string\n        status:\n          description: 'The status of the balance platform.\n\n\n            Possible values: **Active**, **Inactive**, **Closed**, **Suspended**.'\n          type: string\n      required:\n      - id\n    BankAccountInfo:\n      properties:\n        accountNumber:\n          description: \"The bank account number (without separators).\\n\\n When this\\\n            \\ is provided, the `bankCode` and `branchCode` are also required.\"\n          type: string\n        accountType:\n          description: \"The type of bank account. Only applies to bank accounts held\\\n            \\ in the US. \\n\\nPossible values: **checking**, **savings**.\"\n          type: string\n        bankBicSwift:\n          description: The bank's BIC or SWIFT code.\n          type: string\n        bankCity:\n          description: The city where the bank is located.\n          type: string\n        bankCode:\n          description: 'The bank code of the banking institution with which the bank\n            account is registered.\n\n\n            Required when you provide an `accountNumber`.'\n          type: string\n        bankName:\n          description: The name of the banking institution where the bank account\n            is held.\n          type: string\n        branchCode:\n          description: \"The branch code of the branch under which the bank account\\\n            \\ is registered.\\n\\nRequired when you provide an `accountNumber`.\\n\\n\\\n            \\ In the following countries, this value corresponds to:\\n\\n\\n* United\\\n            \\ States: routing number\\n* United Kingdom: sort code\\n* Germany: Bankleitzahl\"\n          type: string\n        checkCode:\n          description: The check code of the bank account.\n          type: string\n        countryCode:\n          description: The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\n            country code where the bank account is registered. For example, **NL**.\n          type: string\n        currencyCode:\n          description: The account's three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).\n            For example, **EUR**.\n          type: string\n        iban:\n          description: The international bank account number as defined in the [ISO-13616](https://www.iso.org/standard/81090.html)\n            standard.\n          type: string\n        requestedVerificationCode:\n          type: string\n      required:\n      - countryCode\n      - currencyCode\n    BirthData:\n      properties:\n        dateOfBirth:\n          description: The individual's date of birth, in YYYY-MM-DD format.\n          type: string\n    BulkAddress:\n      properties:\n        city:\n          description: The name of the city.\n          type: string\n        company:\n          description: The name of the company.\n          type: string\n        country:\n          description: The two-character ISO-3166-1 alpha-2 country code. For example,\n            **US**.\n          type: string\n        email:\n          description: The email address.\n          type: string\n        houseNumberOrName:\n          description: The house number or name.\n          type: string\n        mobile:\n          description: The full telephone number.\n          type: string\n        postalCode:\n          description: 'The postal code.\n\n\n            Maximum length:\n\n\n            * 5 digits for addresses in the US.\n\n\n            * 10 characters for all other countries.'\n          type: string\n        stateOrProvince:\n          description: 'The two-letter ISO 3166-2 state or province code.\n\n\n            Maximum length: 2 characters for addresses in the US.'\n          type: string\n        street:\n          description: The streetname of the house.\n          type: string\n      required:\n      - country\n    CapabilityProblem:\n      properties:\n        entity:\n          description: Contains the type of the entity and the corresponding ID.\n          $ref: '#/components/schemas/CapabilityProblemEntity'\n        verificationErrors:\n          description: Contains information about the verification error.\n          items:\n            $ref: '#/components/schemas/VerificationError'\n          type: array\n    CapabilityProblemEntity:\n      properties:\n        id:\n          description: The ID of the entity.\n          type: string\n        owner:\n          description: Contains details about the owner of the entity that has an\n            error.\n          $ref: '#/components/schemas/CapabilityProblemEntity-recursive'\n        type:\n          description: \"Type of entity. \\n\\nPossible values: **LegalEntity**, **BankAccount**,\\\n            \\ **Document**.\"\n          enum:\n          - BankAccount\n          - Document\n          - LegalEntity\n          type: string\n    CapabilityProblemEntity-recursive:\n      properties:\n        id:\n          description: The ID of the entity.\n          type: string\n        type:\n          description: \"Type of entity. \\n\\nPossible values: **LegalEntity**, **BankAccount**,\\\n            \\ **Document**.\"\n          enum:\n          - BankAccount\n          - Document\n          - LegalEntity\n          type: string\n      required: []\n    Card:\n      properties:\n        authentication:\n          description: Contains the card user's password and mobile phone number.\n            This is required when you issue cards that can be used to make online\n            payments within the EEA and the UK, or can be added to digital wallets.\n            Refer to [3D Secure and digital wallets](https://docs.adyen.com/issuing/3d-secure-and-wallets)\n            for more information.\n          $ref: '#/components/schemas/Authentication'\n        bin:\n          description: The bank identification number (BIN) of the card number.\n          type: string\n        brand:\n          description: 'The brand of the payment instrument.\n\n            Possible values: **visa**, **mc**.'\n          type: string\n        brandVariant:\n          description: 'The brand variant of the payment instrument.\n\n            >Contact your Adyen Implementation Manager to get the values that are\n            relevant to your integration. Examples: **visadebit**, **mcprepaid**.'\n          type: string\n        cardholderName:\n          description: \"The name of the card holder.\\n Maximum length: 26 characters.\"\n          maxLength: 26\n          type: string\n        configuration:\n          description: \"Settings required when creating a physical card. \\n\\nReach\\\n            \\ out to your Adyen contact to get the values that you can send in this\\\n            \\ object.\"\n          $ref: '#/components/schemas/CardConfiguration'\n        cvc:\n          description: 'The CVC2 value of the card.\n\n            > The CVC2 is not sent by default. This is only returned in the `POST`\n            response for single-use virtual cards.'\n          type: string\n        deliveryContact:\n          description: The delivery contact (name and address) for physical card delivery.\n          $ref: '#/components/schemas/Contact'\n        expiration:\n          description: The expiration date of the card.\n          $ref: '#/components/schemas/Expiry'\n        formFactor:\n          description: 'The form factor of the card.\n\n            Possible values: **virtual**, **physical**.'\n          enum:\n          - physical\n          - unknown\n          - virtual\n          type: string\n        lastFour:\n          description: Last last four digits of the card number.\n          type: string\n        number:\n          description: 'The primary account number (PAN) of the card.\n\n            > The PAN is masked by default and returned only for single-use virtual\n            cards.'\n          readOnly: true\n          type: string\n      required:\n      - formFactor\n      - cardholderName\n      - brand\n      - brandVariant\n      - number\n    CardConfiguration:\n      properties:\n        activation:\n          description: Overrides the activation label design ID defined in the `configurationProfileId`.\n            The activation label is attached to the card and contains the activation\n            instructions.\n          type: string\n        activationUrl:\n          description: \"Your app's URL, if you want to activate cards through your\\\n            \\ app. For example, **my-app://ref1236a7d**. A QR code is created based\\\n            \\ on this URL, and is included in the carrier. Before you use this field,\\\n            \\ reach out to your Adyen contact to set up the QR code process. \\n\\n\\\n            Maximum length: 255 characters.\"\n          maxLength: 255\n          type: string\n        bulkAddress:\n          description: Overrides the shipment bulk address defined in the `configurationProfileId`.\n          $ref: '#/components/schemas/BulkAddress'\n        cardImageId:\n          description: The ID of the card image. This is the image that will be printed\n            on the full front of the card.\n          type: string\n        carrier:\n          description: Overrides the carrier design ID defined in the `configurationProfileId`.\n            The carrier is the letter or packaging to which the card is attached.\n          type: string\n        carrierImageId:\n          description: The ID of the carrier image. This is the image that will printed\n            on the letter to which the card is attached.\n          type: string\n        configurationProfileId:\n          description: 'The ID of the card configuration profile that contains the\n            settings of the card. For example, the envelope and PIN mailer designs\n            or the logistics company handling the shipment. All the settings in the\n            profile are applied to the card, unless you provide other fields to override\n            them.\n\n\n            For example, send the `shipmentMethod` to override the logistics company\n            defined in the card configuration profile.'\n          type: string\n        currency:\n          description: The three-letter [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217)\n            currency code of the card. For example, **EUR**.\n          type: string\n        envelope:\n          description: 'Overrides the envelope design ID defined in the `configurationProfileId`. '\n          type: string\n        insert:\n          description: Overrides the insert design ID defined in the `configurationProfileId`.\n            An insert is any additional material, such as marketing materials, that\n            are shipped together with the card.\n          type: string\n        language:\n          description: The two-letter [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)\n            language code of the card. For example, **en**.\n          type: string\n        logoImageId:\n          description: The ID of the logo image. This is the image that will be printed\n            on the partial front of the card, such as a logo on the upper right corner.\n          type: string\n        pinMailer:\n          description: Overrides the PIN mailer design ID defined in the `configurationProfileId`.\n            The PIN mailer is the letter on which the PIN is printed.\n          type: string\n        shipmentMethod:\n          description: Overrides the logistics company defined in the `configurationProfileId`.\n          type: string\n      required:\n      - configurationProfileId\n    CardInfo:\n      properties:\n        authentication:\n          description: Contains the card user's password and mobile phone number.\n            This is required when you issue cards that can be used to make online\n            payments within the EEA and the UK, or can be added to digital wallets.\n            Refer to [3D Secure and digital wallets](https://docs.adyen.com/issuing/3d-secure-and-wallets)\n            for more information.\n          $ref: '#/components/schemas/Authentication'\n        brand:\n          description: 'The brand of the payment instrument.\n\n            Possible values: **visa**, **mc**.'\n          type: string\n        brandVariant:\n          description: 'The brand variant of the payment instrument.\n\n            >Contact your Adyen Implementation Manager to get the values that are\n            relevant to your integration. Examples: **visadebit**, **mcprepaid**.'\n          type: string\n        cardholderName:\n          description: \"The name of the card holder.\\n Maximum length: 26 characters.\"\n          maxLength: 26\n          type: string\n        configuration:\n          description: \"Settings required when creating a physical card. \\n\\nReach\\\n            \\ out to your Adyen contact to get the values that you can send in this\\\n            \\ object.\"\n          $ref: '#/components/schemas/CardConfiguration'\n        deliveryContact:\n          description: The delivery contact (name and address) for physical card delivery.\n          $ref: '#/components/schemas/Contact'\n        formFactor:\n          description: 'The form factor of the card.\n\n            Possible values: **virtual**, **physical**.'\n          enum:\n          - physical\n          - unknown\n          - virtual\n          type: string\n      required:\n      - formFactor\n      - cardholderName\n      - brand\n      - brandVariant\n    Contact:\n      properties:\n        address:\n          description: The address of the contact.\n          $ref: '#/components/schemas/Address2'\n        email:\n          description: The e-mail address of the contact.\n          type: string\n        fullPhoneNumber:\n          description: 'The phone number of the contact provided as a single string.  It\n            will be handled as a landline phone.\n\n            **Examples:** \"0031 6 11 22 33 44\", \"+316/1122-3344\", \"(0031) 611223344\"'\n          type: string\n        name:\n          description: The name of the contact.\n          $ref: '#/components/schemas/Name2'\n        personalData:\n          description: Personal data of the contact.\n          $ref: '#/components/schemas/PersonalData'\n        phoneNumber:\n          description: The phone number of the contact.\n          $ref: '#/components/schemas/PhoneNumber2'\n        webAddress:\n          description: The URL of the website of the contact.\n          type: string\n    ContactDetails:\n      properties:\n        address:\n          description: The address of the account holder.\n          $ref: '#/components/schemas/Address2'\n        email:\n          description: The email address of the account holder.\n          type: string\n        phone:\n          description: The phone number of the account holder.\n          $ref: '#/components/schemas/Phone'\n        webAddress:\n          description: The URL of the account holder's website.\n          type: string\n      required:\n      - email\n      - phone\n      - address\n    Document:\n      properties:\n        attachment:\n          deprecated: true\n          x-deprecatedInVersion: '1'\n          x-deprecatedMessage: Use the `attachments` array instead.\n          description: Object that contains the document.\n          $ref: '#/components/schemas/Attachment'\n        attachments:\n          description: Array that contains the document. The array supports multiple\n            attachments for uploading different sides or pages of a document.\n          items:\n            $ref: '#/components/schemas/Attachment'\n          type: array\n        description:\n          description: Your description for the document.\n          type: string\n        expiryDate:\n          deprecated: true\n          x-deprecatedInVersion: '1'\n          description: The expiry date of the document, in YYYY-MM-DD format.\n          type: string\n        fileName:\n          description: The filename of the document.\n          type: string\n        id:\n          description: The unique identifier of the document.\n          type: string\n        issuerCountry:\n          deprecated: true\n          x-deprecatedInVersion: '1'\n          description: The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\n            country code where the document was issued. For example, **US**.\n          type: string\n        issuerState:\n          deprecated: true\n          x-deprecatedInVersion: '1'\n          description: The state or province where the document was issued (AU only).\n          type: string\n        number:\n          description: The number in the document.\n          type: string\n        owner:\n          description: Contains information about the resource that owns the document.\n          $ref: '#/components/schemas/Entity'\n        type:\n          description: \"Type of document, used when providing an ID number or uploading\\\n            \\ a document. The possible values depend on the legal entity `type`.\\n\\\n            \\n* When providing ID numbers for individuals, the values can be **driversLicense**,\\\n            \\ **identityCard**, **nationalIdNumber**, or **passport**.\\n\\nWhen uploading\\\n            \\ documents:\\n* For `type` **organization**, the values can be **proofOfAddress**,\\\n            \\ **registrationDocument**, or **taxDocument**. \\n\\n* For `type` **individual**,\\\n            \\ the values can be **identityCard**, **driversLicense**, **proofOfNationalIdNumber**,\\\n            \\ or **proofOfResidency**.\\n\\n* Use **bankStatement** to upload documents\\\n            \\ for a [transfer instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/transferInstruments__resParam_id).\"\n          enum:\n          - bankStatement\n          - driversLicense\n          - identityCard\n          - nationalIdNumber\n          - passport\n          - proofOfAddress\n          - proofOfNationalIdNumber\n          - proofOfResidency\n          - registrationDocument\n          - taxDocument\n          type: string\n      required:\n      - type\n      - owner\n    Entity:\n      properties:\n        id:\n          description: Unique identifier of the resource that owns the document. Depending\n            on the entity `type`, this value can be the unique identifier of the [legal\n            entity](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/legalEntities__resParam_id)\n            or the [transfer instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/transferInstruments__resParam_id).\n          type: string\n        type:\n          description: 'Type of resource that owns the document.\n\n\n            Possible values: **legalEntity**, **bankAccount**.'\n          type: string\n      required:\n      - id\n      - type\n    EntityReference:\n      properties:\n        id:\n          description: The unique identifier of the resource.\n          type: string\n    Expiry:\n      properties:\n        month:\n          description: The month in which the card will expire.\n          type: string\n        year:\n          description: The year in which the card will expire.\n          type: string\n    GenericEntityInfo:\n      properties:\n        entityAssociations:\n          description: \"List of individual legal entities associated with the organization\\\n            \\ legal entity. \\nFor example, ultimate business owners through ownership\\\n            \\ or control, or signatories. \"\n          items:\n            $ref: '#/components/schemas/LegalEntityAssociation'\n          type: array\n        individual:\n          description: Information about the individual. Required if `type` is **individual**.\n          $ref: '#/components/schemas/Individual'\n        organization:\n          description: Information about the organization. Required if `type` is **organization**.\n          $ref: '#/components/schemas/Organization'\n    IdentificationData:\n      properties:\n        expiryDate:\n          deprecated: true\n          x-deprecatedInVersion: '1'\n          description: The expiry date of the document, in YYYY-MM-DD format.\n          type: string\n        issuerCountry:\n          deprecated: true\n          x-deprecatedInVersion: '1'\n          description: The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\n            country code where the document was issued. For example, **US**.\n          type: string\n        issuerState:\n          description: The state or province where the document was issued (AU only).\n          type: string\n        nationalIdExempt:\n          description: Applies only to individuals in the US. Set to **true** if the\n            individual does not have an SSN. To verify their identity, Adyen will\n            require them to [upload an ID document](https://docs.adyen.com/issuing/kyc-verification#upload-documents).\n          type: boolean\n        number:\n          description: The number in the document.\n          type: string\n        type:\n          description: \"Type of document, used when providing an ID number or uploading\\\n            \\ a document. The possible values depend on the legal entity `type`.\\n\\\n            \\n* When providing ID numbers for individuals, the values can be **driversLicense**,\\\n            \\ **identityCard**, **nationalIdNumber**, or **passport**.\\n\\nWhen uploading\\\n            \\ documents:\\n* For `type` **organization**, the values can be **proofOfAddress**,\\\n            \\ **registrationDocument**, or **taxDocument**. \\n\\n* For `type` **individual**,\\\n            \\ the values can be **identityCard**, **driversLicense**, **proofOfNationalIdNumber**,\\\n            \\ or **proofOfResidency**.\\n\\n* Use **bankStatement** to upload documents\\\n            \\ for a [transfer instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/transferInstruments__resParam_id).\"\n          enum:\n          - bankStatement\n          - driversLicense\n          - identityCard\n          - nationalIdNumber\n          - passport\n          - proofOfAddress\n          - proofOfNationalIdNumber\n          - proofOfResidency\n          - registrationDocument\n          - taxDocument\n          type: string\n      required:\n      - type\n    Individual:\n      properties:\n        birthData:\n          description: The individual's birth information.\n          $ref: '#/components/schemas/BirthData'\n        email:\n          description: The email address of the legal entity.\n          type: string\n        identificationData:\n          description: Information about the individual's identification document.\n          $ref: '#/components/schemas/IdentificationData'\n        name:\n          description: The individual's name.\n          $ref: '#/components/schemas/Name'\n        nationality:\n          description: The individual's nationality.\n          type: string\n        phone:\n          description: The phone number of the legal entity.\n          $ref: '#/components/schemas/PhoneNumber'\n        residentialAddress:\n          description: The residential address of the individual.\n          $ref: '#/components/schemas/Address'\n        webData:\n          deprecated: true\n          x-deprecatedInVersion: '1'\n          description: The website and app URL of the legal entity.\n          $ref: '#/components/schemas/WebData'\n      required:\n      - name\n      - residentialAddress\n    InvalidField:\n      properties:\n        message:\n          description: Description of the validation error.\n          type: string\n        name:\n          description: The field that has an invalid value.\n          type: string\n        value:\n          description: The invalid value.\n          type: string\n      required:\n      - name\n      - value\n      - message\n    JSONObject:\n      properties:\n        paths:\n          items:\n            $ref: '#/components/schemas/JSONPath'\n          type: array\n        rootPath:\n          $ref: '#/components/schemas/JSONPath'\n    JSONPath:\n      properties:\n        content:\n          items:\n            type: string\n          type: array\n    LegalEntity:\n      properties:\n        documents:\n          deprecated: true\n          x-deprecatedInVersion: '1'\n          description: List of documents uploaded for the legal entity.\n          items:\n            $ref: '#/components/schemas/EntityReference'\n          type: array\n        entityAssociations:\n          description: \"List of individual legal entities associated with the organization\\\n            \\ legal entity. \\nFor example, ultimate business owners through ownership\\\n            \\ or control, or signatories. \"\n          items:\n            $ref: '#/components/schemas/LegalEntityAssociation'\n          type: array\n        id:\n          description: The unique identifier of the legal entity.\n          type: string\n        individual:\n          description: Information about the individual. Required if `type` is **individual**.\n          $ref: '#/components/schemas/Individual'\n        organization:\n          description: Information about the organization. Required if `type` is **organization**.\n          $ref: '#/components/schemas/Organization'\n        transferInstruments:\n          description: List of transfer instruments owned by the legal entity.\n          items:\n            $ref: '#/components/schemas/EntityReference'\n          type: array\n        type:\n          description: \"Type of legal entity.\\n\\n Possible values: **individual**,\\\n            \\ **organization**.\"\n          enum:\n          - individual\n          - organization\n          type: string\n    LegalEntityAssociation:\n      properties:\n        jobTitle:\n          description: The individual's job title if the `type` is **uboThroughControl**\n            or **signatory**.\n          type: string\n        legalEntityId:\n          description: The unique identifier of the individual [legal entity](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/legalEntities__resParam_id)\n            associated with the organization.\n          type: string\n        type:\n          description: \"Defines how the individual is associated with the organization.\\\n            \\ \\n\\nPossible values: **uboThroughOwnership**, **uboThroughControl**,\\\n            \\ **signatory**. \"\n          enum:\n          - signatory\n          - uboThroughControl\n          - uboThroughOwnership\n          type: string\n      required:\n      - legalEntityId\n      - type\n    LegalEntityInfo:\n      properties:\n        entityAssociations:\n          description: \"List of individual legal entities associated with the organization\\\n            \\ legal entity. \\nFor example, ultimate business owners through ownership\\\n            \\ or control, or signatories. \"\n          items:\n            $ref: '#/components/schemas/LegalEntityAssociation'\n          type: array\n        individual:\n          description: Information about the individual. Required if `type` is **individual**.\n          $ref: '#/components/schemas/Individual'\n        organization:\n          description: Information about the organization. Required if `type` is **organization**.\n          $ref: '#/components/schemas/Organization'\n        type:\n          description: \"Type of legal entity.\\n\\n Possible values: **individual**,\\\n            \\ **organization**.\"\n          enum:\n          - individual\n          - organization\n          type: string\n      required:\n      - type\n    Name:\n      properties:\n        firstName:\n          description: The individual's first name.\n          type: string\n        infix:\n          description: The infix in the individual's name, if any.\n          type: string\n        lastName:\n          description: The individual's last name.\n          type: string\n      required:\n      - firstName\n      - lastName\n    Name2:\n      properties:\n        firstName:\n          description: The first name.\n          type: string\n        lastName:\n          description: The last name.\n          type: string\n      required:\n      - firstName\n      - lastName\n    Organization:\n      properties:\n        description:\n          description: Your description for the organization.\n          type: string\n        doingBusinessAs:\n          description: The organization's registered name, if different from the legal\n            name.\n          type: string\n        email:\n          description: The email address of the legal entity.\n          type: string\n        legalName:\n          description: The organization's legal name.\n          type: string\n        phone:\n          description: The phone number of the legal entity.\n          $ref: '#/components/schemas/PhoneNumber'\n        principalPlaceOfBusiness:\n          description: The address where the organization operates from. Provide this\n            if the principal place of business is different from the `registeredAddress`.\n          $ref: '#/components/schemas/Address'\n        registeredAddress:\n          description: The address of the organization registered at their registrar\n            (such as the Chamber of Commerce).\n          $ref: '#/components/schemas/Address'\n        registrationNumber:\n          description: The organization's registration number.\n          type: string\n        stockData:\n          description: Information about the organization's publicly traded stock.\n            Provide this object only if `type` is **listedPublicCompany**.\n          $ref: '#/components/schemas/StockData'\n        taxId:\n          description: The organization's tax identifier.\n          type: string\n        taxIdAbsenceReason:\n          description: 'The reason the organization has not provided a tax identifier.\n\n\n            Possible values: **industryExemption**, **belowTaxThreshold**.'\n          enum:\n          - industryExemption\n          - belowTaxThreshold\n          type: string\n        type:\n          description: \"Type of organization. \\n\\nPossible values: **associationIncorporated**,\\\n            \\ **governmentalOrganization**, **listedPublicCompany**,**nonProfit**,\\\n            \\ **partnershipIncorporated**, **privateCompany**.\"\n          enum:\n          - associationIncorporated\n          - governmentalOrganization\n          - listedPublicCompany\n          - nonProfit\n          - partnershipIncorporated\n          - privateCompany\n          type: string\n        webData:\n          deprecated: true\n          x-deprecatedInVersion: '1'\n          description: The website and app URL of the legal entity.\n          $ref: '#/components/schemas/WebData'\n      required:\n      - legalName\n      - type\n      - registeredAddress\n    PaginatedAccountHoldersResponse:\n      properties:\n        accountHolders:\n          description: List of account holders.\n          items:\n            $ref: '#/components/schemas/AccountHolder'\n          type: array\n        hasNext:\n          description: Indicates whether there are more items on the next page.\n          type: boolean\n        hasPrevious:\n          description: Indicates whether there are more items on the previous page.\n          type: boolean\n      required:\n      - accountHolders\n      - hasPrevious\n      - hasNext\n    PaginatedBalanceAccountsResponse:\n      properties:\n        balanceAccounts:\n          description: List of balance accounts.\n          items:\n            $ref: '#/components/schemas/BalanceAccount'\n          type: array\n        hasNext:\n          description: Indicates whether there are more items on the next page.\n          type: boolean\n        hasPrevious:\n          description: Indicates whether there are more items on the previous page.\n          type: boolean\n      required:\n      - balanceAccounts\n      - hasPrevious\n      - hasNext\n    PaginatedPaymentInstrumentsResponse:\n      properties:\n        hasNext:\n          description: Indicates whether there are more items on the next page.\n          type: boolean\n        hasPrevious:\n          description: Indicates whether there are more items on the previous page.\n          type: boolean\n        paymentInstruments:\n          description: List of payment instruments associated with the balance account.\n          items:\n            $ref: '#/components/schemas/PaymentInstrument'\n          type: array\n      required:\n      - paymentInstruments\n      - hasPrevious\n      - hasNext\n    PaymentInstrument:\n      properties:\n        balanceAccountId:\n          description: The unique identifier of the [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/balanceAccounts__resParam_id)\n            associated with the payment instrument.\n          type: string\n        card:\n          description: Contains information about the card payment instrument.\n          $ref: '#/components/schemas/Card'\n        description:\n          description: Your description for the payment instrument, maximum 300 characters.\n          maxLength: 300\n          type: string\n        id:\n          description: The unique identifier of the payment instrument.\n          type: string\n        issuingCountryCode:\n          description: The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\n            country code where the payment instrument is issued. For example, **NL**\n            or **US**.\n          type: string\n        paymentInstrumentGroupId:\n          description: The unique identifier of the [payment instrument group](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/paymentInstrumentGroups__resParam_id)\n            to which the payment instrument belongs.\n          type: string\n        reference:\n          description: Your reference for the payment instrument, maximum 150 characters.\n          maxLength: 150\n          type: string\n        status:\n          x-enum:\n          - description: The payment instrument has been requested. This state is\n              applicable when creating physical cards.\n            value: Requested\n          - description: The payment instrument is active and can be used to make\n              payments.\n            value: Active\n          - description: The payment instrument is inactive and cannot be used to\n              make payments.\n            value: Inactive\n          - description: The payment instrument is temporarily suspended and cannot\n              be used to make payments.\n            value: Suspended\n          - description: The payment instrument is permanently closed. This action\n              cannot be undone.\n            value: Closed\n          description: \"The status of the payment instrument. If a status is not specified\\\n            \\ when creating a payment instrument, it is set to **Active** by default.\\\n            \\ However, there can be exceptions based on the `card.formFactor` and\\\n            \\ the `issuingCountryCode`. For example, when issuing physical cards in\\\n            \\ the US, the default status is **Requested**.\\n\\nPossible values: \\n\\n\\\n            \\ * **Active**:  The payment instrument is active and can be used to make\\\n            \\ payments. \\n\\n * **Requested**: The payment instrument has been requested.\\\n            \\ This state is applicable for physical cards. \\n\\n* **Inactive**: The\\\n            \\ payment instrument is inactive and cannot be used to make payments.\\\n            \\ \\n\\n * **Suspended**: The payment instrument is temporarily suspended\\\n            \\ and cannot be used to make payments. \\n\\n * **Closed**: The payment\\\n            \\ instrument is permanently closed. This action cannot be undone. \\n\\n\\\n            * **Stolen** \\n\\n * **Lost**\\n\\n \"\n          enum:\n          - Active\n          - Closed\n          - Inactive\n          - Lost\n          - Requested\n          - Stolen\n          - Suspended\n          type: string\n        type:\n          description: 'Type of payment instrument.\n\n\n            Possible value: **card**. '\n          enum:\n          - card\n          type: string\n      required:\n      - balanceAccountId\n      - issuingCountryCode\n      - type\n      - id\n    PaymentInstrumentGroup:\n      properties:\n        balancePlatform:\n          description: The unique identifier of the [balance platform](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balancePlatforms/{id}__queryParam_id)\n            to which the payment instrument group belongs.\n          type: string\n        description:\n          description: Your description for the payment instrument group, maximum\n            300 characters.\n          maxLength: 300\n          type: string\n        id:\n          description: The unique identifier of the payment instrument group.\n          type: string\n        properties:\n          additionalProperties:\n            type: string\n          description: Properties of the payment instrument group.\n          type: object\n        reference:\n          description: Your reference for the payment instrument group, maximum 150\n            characters.\n          maxLength: 150\n          type: string\n        txVariant:\n          description: The tx variant of the payment instrument group.\n          type: string\n      required:\n      - balancePlatform\n      - txVariant\n    PaymentInstrumentGroupInfo:\n      properties:\n        balancePlatform:\n          description: The unique identifier of the [balance platform](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balancePlatforms/{id}__queryParam_id)\n            to which the payment instrument group belongs.\n          type: string\n        description:\n          description: Your description for the payment instrument group, maximum\n            300 characters.\n          maxLength: 300\n          type: string\n        properties:\n          additionalProperties:\n            type: string\n          description: Properties of the payment instrument group.\n          type: object\n        reference:\n          description: Your reference for the payment instrument group, maximum 150\n            characters.\n          maxLength: 150\n          type: string\n        txVariant:\n          description: The tx variant of the payment instrument group.\n          type: string\n      required:\n      - balancePlatform\n      - txVariant\n    PaymentInstrumentInfo:\n      properties:\n        balanceAccountId:\n          description: The unique identifier of the [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/balanceAccounts__resParam_id)\n            associated with the payment instrument.\n          type: string\n        card:\n          description: Contains information about the card. Required when you create\n            a payment instrument of `type` **card**.\n          $ref: '#/components/schemas/CardInfo'\n        description:\n          description: Your description for the payment instrument, maximum 300 characters.\n          maxLength: 300\n          type: string\n        issuingCountryCode:\n          description: The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\n            country code where the payment instrument is issued. For example, **NL**\n            or **US**.\n          type: string\n        paymentInstrumentGroupId:\n          description: The unique identifier of the [payment instrument group](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/paymentInstrumentGroups__resParam_id)\n            to which the payment instrument belongs.\n          type: string\n        reference:\n          description: Your reference for the payment instrument, maximum 150 characters.\n          maxLength: 150\n          type: string\n        status:\n          x-enum:\n          - description: The payment instrument has been requested. This state is\n              applicable when creating physical cards.\n            value: Requested\n          - description: The payment instrument is active and can be used to make\n              payments.\n            value: Active\n          - description: The payment instrument is inactive and cannot be used to\n              make payments.\n            value: Inactive\n          - description: The payment instrument is temporarily suspended and cannot\n              be used to make payments.\n            value: Suspended\n          - description: The payment instrument is permanently closed. This action\n              cannot be undone.\n            value: Closed\n          description: \"The status of the payment instrument. If a status is not specified\\\n            \\ when creating a payment instrument, it is set to **Active** by default.\\\n            \\ However, there can be exceptions based on the `card.formFactor` and\\\n            \\ the `issuingCountryCode`. For example, when issuing physical cards in\\\n            \\ the US, the default status is **Requested**.\\n\\nPossible values: \\n\\n\\\n            \\ * **Active**:  The payment instrument is active and can be used to make\\\n            \\ payments. \\n\\n * **Requested**: The payment instrument has been requested.\\\n            \\ This state is applicable for physical cards. \\n\\n* **Inactive**: The\\\n            \\ payment instrument is inactive and cannot be used to make payments.\\\n            \\ \\n\\n * **Suspended**: The payment instrument is temporarily suspended\\\n            \\ and cannot be used to make payments. \\n\\n * **Closed**: The payment\\\n            \\ instrument is permanently closed. This action cannot be undone. \\n\\n\\\n            * **Stolen** \\n\\n * **Lost**\\n\\n \"\n          enum:\n          - Active\n          - Closed\n          - Inactive\n          - Lost\n          - Requested\n          - Stolen\n          - Suspended\n          type: string\n        type:\n          description: 'Type of payment instrument.\n\n\n            Possible value: **card**. '\n          enum:\n          - card\n          type: string\n      required:\n      - balanceAccountId\n      - issuingCountryCode\n      - type\n    PaymentInstrumentReference:\n      properties:\n        id:\n          description: The unique identifier of the payment instrument.\n          type: string\n      required:\n      - id\n    PaymentInstrumentUpdateRequest:\n      properties:\n        balanceAccountId:\n          description: 'The unique identifier of the balance account associated with\n            this payment instrument.\n\n            >You can only change the balance account ID if the payment instrument\n            has **Requested** or **Inactive** status.'\n          type: string\n        card:\n          description: Object that contains information about the card payment instrument.\n          $ref: '#/components/schemas/CardInfo'\n        status:\n          x-enum:\n          - description: The payment instrument has been requested. This state is\n              applicable when creating physical cards.\n            value: Requested\n          - description: The payment instrument is active and can be used to make\n              payments.\n            value: Active\n          - description: The payment instrument is inactive and cannot be used to\n              make payments.\n            value: Inactive\n          - description: The payment instrument is temporarily suspended and cannot\n              be used to make payments.\n            value: Suspended\n          - description: The payment instrument is permanently closed. This action\n              cannot be undone.\n            value: Closed\n          description: \"The status of the payment instrument. If a status is not specified\\\n            \\ when creating a payment instrument, it is set to **Active** by default.\\\n            \\ However, there can be exceptions based on the `card.formFactor` and\\\n            \\ the `issuingCountryCode`. For example, when issuing physical cards in\\\n            \\ the US, the default status is **Requested**.\\n\\nPossible values: \\n\\n\\\n            \\ * **Active**:  The payment instrument is active and can be used to make\\\n            \\ payments. \\n\\n * **Requested**: The payment instrument has been requested.\\\n            \\ This state is applicable for physical cards. \\n\\n* **Inactive**: The\\\n            \\ payment instrument is inactive and cannot be used to make payments.\\\n            \\ \\n\\n * **Suspended**: The payment instrument is temporarily suspended\\\n            \\ and cannot be used to make payments. \\n\\n * **Closed**: The payment\\\n            \\ instrument is permanently closed. This action cannot be undone. \\n\\n\\\n            * **Stolen** \\n\\n * **Lost**\\n\\n \"\n          enum:\n          - Active\n          - Closed\n          - Inactive\n          - Lost\n          - Requested\n          - Stolen\n          - Suspended\n          type: string\n        statusComment:\n          description: Comment for the status of the payment instrument.\n          type: string\n    PersonalData:\n      properties:\n        dateOfBirth:\n          description: 'The date of birth of the person.\n\n            The date should be in ISO-8601 format yyyy-mm-dd (e.g. 2000-01-31).'\n          type: string\n        idNumber:\n          description: An ID number of the person.\n          type: string\n        nationality:\n          description: 'The nationality of the person represented by a two-character\n            country code.\n\n            >The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. ''NL'').'\n          maxLength: 2\n          minLength: 2\n          type: string\n    Phone:\n      properties:\n        number:\n          description: \"The full phone number provided as a single string. \\nFor example,\\\n            \\ **\\\"0031 6 11 22 33 44\\\"**, **\\\"+316/1122-3344\\\"**, \\n\\n or **\\\"(0031)\\\n            \\ 611223344\\\"**.\"\n          type: string\n        type:\n          description: \"Type of phone number.\\nPossible values: \\n**Landline**, **Mobile**.\\n\"\n          enum:\n          - Landline\n          - Mobile\n          type: string\n      required:\n      - number\n      - type\n    PhoneNumber:\n      properties:\n        countryCode:\n          description: The two-letter [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\n            country code. For example, **US** or **NL**.\n          type: string\n        number:\n          description: The phone number.\n          type: string\n        type:\n          description: \"The type of phone number.\\n Possible values: **mobile**, **landline**,\\\n            \\ **sip**, **fax.** \"\n          type: string\n      required:\n      - type\n      - number\n    PhoneNumber2:\n      properties:\n        phoneCountryCode:\n          description: 'The two-character ISO-3166-1 alpha-2 country code of the phone\n            number.\n\n            For example, **US** or **NL**.'\n          type: string\n        phoneNumber:\n          description: 'The phone number.\n\n            The inclusion of the phone number country code is not necessary.'\n          type: string\n        phoneType:\n          description: 'The type of the phone number.\n\n            Possible values: **Landline**, **Mobile**, **SIP**, **Fax**.'\n          enum:\n          - Fax\n          - Landline\n          - Mobile\n          - SIP\n          type: string\n      required:\n      - phoneCountryCode\n      - phoneNumber\n    RecurringDetail:\n      properties:\n        merchantAccount:\n          description: The merchant account used when the payment details were stored.\n          type: string\n        reference:\n          description: The `recurringDetailReference` returned in the response when\n            the payment details were stored.\n          type: string\n        shopperReference:\n          description: The unique identifier used when the payment details were stored.\n          type: string\n    RemediatingAction:\n      properties:\n        code:\n          description: The remediating action code.\n          type: string\n        message:\n          description: A description of how you can resolve the verification error.\n          type: string\n    RestServiceError:\n      properties:\n        detail:\n          description: A human-readable explanation specific to this occurrence of\n            the problem.\n          type: string\n        errorCode:\n          description: A code that identifies the problem type.\n          type: string\n        errorType:\n          description: A URI that identifies the problem type, pointing to human-readable\n            documentation on this problem type.\n          type: string\n        instance:\n          description: A unique URI that identifies the specific occurrence of the\n            problem.\n          type: string\n        invalidFields:\n          description: Detailed explanation of each validation error, when applicable.\n          items:\n            $ref: '#/components/schemas/InvalidField'\n          type: array\n        requestId:\n          description: A unique reference for the request, essentially the same as\n            `pspReference`.\n          type: string\n        response:\n          description: JSON response payload.\n          $ref: '#/components/schemas/JSONObject'\n        status:\n          description: The HTTP status code.\n          format: int32\n          type: integer\n        title:\n          description: A short, human-readable summary of the problem type.\n          type: string\n      required:\n      - errorType\n      - errorCode\n      - title\n      - detail\n      - status\n    ServiceError:\n      properties:\n        errorCode:\n          description: The error code mapped to the error message.\n          type: string\n        errorType:\n          description: The category of the error.\n          type: string\n        message:\n          description: A short explanation of the issue.\n          type: string\n        pspReference:\n          description: The PSP reference of the payment.\n          type: string\n        status:\n          description: The HTTP response status.\n          format: int32\n          type: integer\n    StockData:\n      properties:\n        marketIdentifier:\n          description: The four-digit [Market Identifier Code](https://en.wikipedia.org/wiki/Market_Identifier_Code)\n            of the stock market where the organization's stocks are traded.\n          type: string\n        stockNumber:\n          description: The 12-digit International Securities Identification Number\n            (ISIN) of the company, without dashes (-).\n          type: string\n        tickerSymbol:\n          description: The stock ticker symbol.\n          type: string\n    SweepConfiguration:\n      properties:\n        balanceAccountId:\n          description: The unique identifier of the [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id)\n            that will be the source or destination of the balance sweep. This can\n            only be used for periodic sweep schedules such as `schedule.type` **daily**\n            or **monthly**.\n          type: string\n        merchantAccount:\n          description: The merchant account that will be the source of funds. You\n            can only use this if you are processing payments with Adyen. This can\n            only be used for sweeps of `type` **pull** and `schedule.type` **balance**.\n          type: string\n        schedule:\n          description: The schedule when the `triggerAmount` is evaluated. If the\n            balance meets the threshold, funds are pushed out of or pulled in to the\n            balance account.\n          $ref: '#/components/schemas/SweepSchedule'\n        sweepAmount:\n          description: The amount that must be pushed out or pulled in. You can configure\n            either `sweepAmount` or `targetAmount`, not both.\n          $ref: '#/components/schemas/Amount'\n        targetAmount:\n          description: The amount that must be available in the balance account after\n            the sweep. You can configure either `sweepAmount` or `targetAmount`, not\n            both.\n          $ref: '#/components/schemas/Amount'\n        transferInstrumentId:\n          description: 'The unique identifier of the [transfer instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/transferInstruments__resParam_id)\n            that will be the source or destination of the balance sweep. This can\n            be used for periodic or instant sweep schedules.\n\n\n            If specified in combination with a merchant account, it instructs a direct\n            debit from this instrument for the configured merchant account.'\n          type: string\n        triggerAmount:\n          description: 'The threshold amount that triggers the sweep. If not specified,\n            the amount defaults to zero. The `triggerAmount` is evaluated according\n            to the specified `schedule.type`.\n\n\n            * For `type` **pull**, if the balance is less than or equal to the `triggerAmount`,\n            funds are pulled in to the balance account.\n\n\n            * For `type` **push**, if the balance is more than or equal to the `triggerAmount`,\n            funds are pushed out of the balance account.'\n          $ref: '#/components/schemas/Amount'\n        type:\n          default: push\n          description: \"The direction of sweep.\\n\\nPossible values:\\n\\n * **push**:\\\n            \\ _Push funds out_ to a destination balance account or transfer instrument.\\n\\\n            \\n * **pull**: _Pull funds in_ from a source merchant account, transfer\\\n            \\ instrument, or balance account. \"\n          enum:\n          - pull\n          - push\n          type: string\n      required:\n      - schedule\n      - type\n    SweepSchedule:\n      properties:\n        type:\n          description: 'The schedule type.\n\n\n            Possible values:\n\n\n            * **daily**: Push out funds daily at 07:00 AM CET.\n\n\n            * **weekly**: Push out funds every Monday at 07:00 AM CET.\n\n\n            * **monthly**: Push out funds every 1st of the month at 07:00 AM CET.\n\n\n            * **balance**: Only for sweeps of `type` **pull** and with a `merchantAccount`\n            or `transferInstrument` source. Pull in funds instantly if the balance\n            is less than or equal to the `triggerAmount`.'\n          enum:\n          - balance\n          - daily\n          - monthly\n          - weekly\n          type: string\n    TransactionRule:\n      properties:\n        amount:\n          description: The maximum amount that a payment instrument can be used for\n            in the period specified in the `interval.type`.\n          $ref: '#/components/schemas/Amount'\n        balancePlatformId:\n          description: The unique identifier of the [balance platform](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/get/balancePlatforms/{id}__queryParam_id)\n            to which the rule applies.\n          type: string\n        countries:\n          description: 'List of countries to which the rule applies. For example:\n            **[\"NL\",\"US\"]**.'\n          items:\n            type: string\n          type: array\n        description:\n          description: Your description for the transaction rule, maximum 300 characters.\n          maxLength: 300\n          type: string\n        endDate:\n          description: 'The date when the rule will stop being evaluated, in ISO 8601\n            extended offset date-time format. For example, **2020-12-18T10:15:30+01:00**.\n\n\n            If not provided, the rule will be evaluated until the rule status is set\n            to **inactive**.'\n          type: string\n        entryModes:\n          description: 'List of point-of-sale entry modes to which the rule applies.\n\n\n            Possible values: **manual**, **chip**, **magstripe**, **contactless**,\n            **cof**, **token**, **server**, **barcode**, **ocr**.'\n          items:\n            enum:\n            - barcode\n            - chip\n            - cof\n            - contactless\n            - magstripe\n            - manual\n            - ocr\n            - server\n            - token\n            - unknown\n            type: string\n          type: array\n        id:\n          description: The unique identifier of the transaction rule.\n          type: string\n        interval:\n          description: The [time interval](https://docs.adyen.com/issuing/transaction-rules#time-intervals)\n            when the rule conditions apply.\n          $ref: '#/components/schemas/TransactionRuleInterval'\n        maxTransactions:\n          description: The maximum number of transactions that a payment instrument\n            can be used for in the period specified in the `interval.type`.\n          format: int32\n          type: integer\n        mccs:\n          description: List of Merchant Category Codes (MCCs) to which the rule applies.\n          items:\n            type: string\n          type: array\n        paymentInstrumentGroupId:\n          description: The unique identifier of the [payment instrument group](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/paymentInstrumentGroups__resParam_id)\n            to which the rule applies.\n          type: string\n        paymentInstrumentId:\n          description: The unique identifier of the [payment instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/paymentInstruments__resParam_id)\n            to which the rule applies.\n          type: string\n        processingTypes:\n          description: 'List of processing types to which the rule applies.\n\n\n            Possible values: **atmWithdraw**, **pos**, **ecommerce**, **moto**, **recurring**,\n            **balanceInquiry**.'\n          items:\n            enum:\n            - atmWithdraw\n            - balanceInquiry\n            - ecommerce\n            - moto\n            - pos\n            - purchaseWithCashback\n            - recurring\n            - token\n            - unknown\n            type: string\n          type: array\n        reference:\n          description: Your reference for the transaction rule, maximum 150 characters.\n          maxLength: 150\n          type: string\n        startDate:\n          description: \"The date when the rule will start to be evaluated, in ISO\\\n            \\ 8601 extended offset date-time format. For example, **2020-12-18T10:15:30+01:00**.\\n\\\n            \\nIf not provided when creating a transaction rule, the `startDate` is\\\n            \\ set to the date when the rule status is set to **active**. \\n\\n\"\n          type: string\n        status:\n          description: \"The status of the transaction rule. If you provide a `startDate`\\\n            \\ in the request, the rule is automatically created \\nwith an **active**\\\n            \\ status. \\n\\nPossible values: **active**, **inactive**.\"\n          enum:\n          - active\n          - inactive\n          type: string\n        type:\n          x-enum:\n          - description: The rule provides categories (such as country and MCC) where\n              payments must be allowed.\n            value: allowList\n          - description: The rule provides categories (such as country and MCC) where\n              payments must be blocked.\n            value: blockList\n          - description: The rule sets limits for the maximum amount or maximum number\n              of transactions for a given time interval.\n            value: velocity\n          - description: The rule sets limits for the maximum amount or maximum number\n              of transactions for the lifetime of the payment instrument.\n            value: maxUsage\n          description: \"Type of conditions provided in the rule.\\n\\nPossible values:\\n\\\n            \\  * **allowList**: The rule provides categories (such as country and\\\n            \\ MCC) where payments must be allowed. \\n * **blockList**: The rule provides\\\n            \\ categories (such as country and MCC) where payments must be blocked.\\\n            \\ \\n * **maxUsage**: The rule sets limits for the maximum amount or maximum\\\n            \\ number of transactions for the lifetime of the payment instrument. \\n\\\n            \\ * **velocity**: The rule sets limits for the maximum amount or maximum\\\n            \\ number of transactions for a given time interval.\\n\"\n          enum:\n          - allowList\n          - blockList\n          - maxUsage\n          - velocity\n          type: string\n      required:\n      - type\n      - description\n      - reference\n      - interval\n    TransactionRuleInfo:\n      properties:\n        amount:\n          description: The maximum amount that a payment instrument can be used for\n            in the period specified in the `interval.type`.\n          $ref: '#/components/schemas/Amount'\n        balancePlatformId:\n          description: The unique identifier of the [balance platform](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/get/balancePlatforms/{id}__queryParam_id)\n            to which the rule applies.\n          type: string\n        countries:\n          description: 'List of countries to which the rule applies. For example:\n            **[\"NL\",\"US\"]**.'\n          items:\n            type: string\n          type: array\n        description:\n          description: Your description for the transaction rule, maximum 300 characters.\n          maxLength: 300\n          type: string\n        endDate:\n          description: 'The date when the rule will stop being evaluated, in ISO 8601\n            extended offset date-time format. For example, **2020-12-18T10:15:30+01:00**.\n\n\n            If not provided, the rule will be evaluated until the rule status is set\n            to **inactive**.'\n          type: string\n        entryModes:\n          description: 'List of point-of-sale entry modes to which the rule applies.\n\n\n            Possible values: **manual**, **chip**, **magstripe**, **contactless**,\n            **cof**, **token**, **server**, **barcode**, **ocr**.'\n          items:\n            enum:\n            - barcode\n            - chip\n            - cof\n            - contactless\n            - magstripe\n            - manual\n            - ocr\n            - server\n            - token\n            - unknown\n            type: string\n          type: array\n        interval:\n          description: The [time interval](https://docs.adyen.com/issuing/transaction-rules#time-intervals)\n            when the rule conditions apply.\n          $ref: '#/components/schemas/TransactionRuleInterval'\n        maxTransactions:\n          description: The maximum number of transactions that a payment instrument\n            can be used for in the period specified in the `interval.type`.\n          format: int32\n          type: integer\n        mccs:\n          description: List of Merchant Category Codes (MCCs) to which the rule applies.\n          items:\n            type: string\n          type: array\n        paymentInstrumentGroupId:\n          description: The unique identifier of the [payment instrument group](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/paymentInstrumentGroups__resParam_id)\n            to which the rule applies.\n          type: string\n        paymentInstrumentId:\n          description: The unique identifier of the [payment instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/paymentInstruments__resParam_id)\n            to which the rule applies.\n          type: string\n        processingTypes:\n          description: 'List of processing types to which the rule applies.\n\n\n            Possible values: **atmWithdraw**, **pos**, **ecommerce**, **moto**, **recurring**,\n            **balanceInquiry**.'\n          items:\n            enum:\n            - atmWithdraw\n            - balanceInquiry\n            - ecommerce\n            - moto\n            - pos\n            - purchaseWithCashback\n            - recurring\n            - token\n            - unknown\n            type: string\n          type: array\n        reference:\n          description: Your reference for the transaction rule, maximum 150 characters.\n          maxLength: 150\n          type: string\n        startDate:\n          description: \"The date when the rule will start to be evaluated, in ISO\\\n            \\ 8601 extended offset date-time format. For example, **2020-12-18T10:15:30+01:00**.\\n\\\n            \\nIf not provided when creating a transaction rule, the `startDate` is\\\n            \\ set to the date when the rule status is set to **active**. \\n\\n\"\n          type: string\n        status:\n          description: \"The status of the transaction rule. If you provide a `startDate`\\\n            \\ in the request, the rule is automatically created \\nwith an **active**\\\n            \\ status. \\n\\nPossible values: **active**, **inactive**.\"\n          enum:\n          - active\n          - inactive\n          type: string\n        type:\n          x-enum:\n          - description: The rule provides categories (such as country and MCC) where\n              payments must be allowed.\n            value: allowList\n          - description: The rule provides categories (such as country and MCC) where\n              payments must be blocked.\n            value: blockList\n          - description: The rule sets limits for the maximum amount or maximum number\n              of transactions for a given time interval.\n            value: velocity\n          - description: The rule sets limits for the maximum amount or maximum number\n              of transactions for the lifetime of the payment instrument.\n            value: maxUsage\n          description: \"Type of conditions provided in the rule.\\n\\nPossible values:\\n\\\n            \\  * **allowList**: The rule provides categories (such as country and\\\n            \\ MCC) where payments must be allowed. \\n * **blockList**: The rule provides\\\n            \\ categories (such as country and MCC) where payments must be blocked.\\\n            \\ \\n * **maxUsage**: The rule sets limits for the maximum amount or maximum\\\n            \\ number of transactions for the lifetime of the payment instrument. \\n\\\n            \\ * **velocity**: The rule sets limits for the maximum amount or maximum\\\n            \\ number of transactions for a given time interval.\\n\"\n          enum:\n          - allowList\n          - blockList\n          - maxUsage\n          - velocity\n          type: string\n      required:\n      - type\n      - description\n      - reference\n      - interval\n    TransactionRuleInterval:\n      properties:\n        type:\n          description: \"The [type of interval](https://docs.adyen.com/issuing/transaction-rules#time-intervals)\\\n            \\ during which the rule conditions and limits apply, and how often counters\\\n            \\ are reset.\\n\\nPossible values:\\n  * **perTransaction**: conditions are\\\n            \\ evaluated and the counters are reset for every transaction.\\n * **daily**:\\\n            \\ the counters are reset daily at 00:00:00 UTC.\\n * **weekly**: the counters\\\n            \\ are reset every Monday at 00:00:00 UTC. \\n * **monthly**: the counters\\\n            \\ reset every first day of the month at 00:00:00 UTC. \\n * **lifetime**:\\\n            \\ conditions are applied to the lifetime of the payment instrument.\\n\"\n          enum:\n          - daily\n          - lifetime\n          - monthly\n          - perTransaction\n          - weekly\n          type: string\n      required:\n      - type\n    TransactionRuleResponse:\n      properties:\n        transactionRule:\n          description: The transaction rule.\n          $ref: '#/components/schemas/TransactionRule'\n    TransactionRulesResponse:\n      properties:\n        transactionRules:\n          description: List of transaction rules.\n          items:\n            $ref: '#/components/schemas/TransactionRule'\n          type: array\n    TransferInstrument:\n      properties:\n        bankAccount:\n          description: Contains information about the legal entity's bank account.\n            Required when `type` is **bankAccount**.\n          $ref: '#/components/schemas/BankAccountInfo'\n        id:\n          description: The unique identifier of the transfer instrument.\n          type: string\n        recurringDetail:\n          description: Contains information about the legal entity's previously stored\n            payment details. Required when `type` is **recurringDetail**.\n          $ref: '#/components/schemas/RecurringDetail'\n        type:\n          description: 'The type of transfer instrument.\n\n\n            Possible values: **bankAccount**, **recurringDetail**.'\n          type: string\n      required:\n      - type\n    TransferInstrumentInfo:\n      properties:\n        bankAccount:\n          description: Contains information about the legal entity's bank account.\n            Required when `type` is **bankAccount**.\n          $ref: '#/components/schemas/BankAccountInfo'\n        legalEntityId:\n          description: The unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/legalEntities__resParam_id)\n            that owns the transfer instrument.\n          type: string\n        recurringDetail:\n          description: Contains information about the legal entity's previously stored\n            payment details. Required when `type` is **recurringDetail**.\n          $ref: '#/components/schemas/RecurringDetail'\n        type:\n          description: 'The type of transfer instrument.\n\n\n            Possible values: **bankAccount**, **recurringDetail**.'\n          type: string\n      required:\n      - legalEntityId\n      - type\n    VerificationError:\n      properties:\n        code:\n          description: The verification error code.\n          type: string\n        message:\n          description: A description of the error.\n          type: string\n        remediatingActions:\n          description: Contains the actions that you can take to resolve the verification\n            error.\n          items:\n            $ref: '#/components/schemas/RemediatingAction'\n          type: array\n        subErrors:\n          description: Contains more granular information about the verification error.\n          items:\n            $ref: '#/components/schemas/VerificationError-recursive'\n          type: array\n        type:\n          description: \"The type of error.\\n\\n Possible values: **invalidInput**,\\\n            \\ **dataMissing**.\"\n          enum:\n          - dataMissing\n          - invalidInput\n          - pendingStatus\n          type: string\n    VerificationError-recursive:\n      properties:\n        code:\n          description: The verification error code.\n          type: string\n        message:\n          description: A description of the error.\n          type: string\n        type:\n          description: \"The type of error.\\n\\n Possible values: **invalidInput**,\\\n            \\ **dataMissing**.\"\n          enum:\n          - dataMissing\n          - invalidInput\n          - pendingStatus\n          type: string\n        remediatingActions:\n          description: Contains the actions that you can take to resolve the verification\n            error.\n          items:\n            $ref: '#/components/schemas/RemediatingAction'\n          type: array\n      required: []\n    VoidResponse: {}\n    WebData:\n      properties:\n        appAddress:\n          deprecated: true\n          description: The URL of the application.\n          type: string\n        webAddress:\n          deprecated: true\n          description: The URL of the website.\n          type: string\n  securitySchemes:\n    ApiKeyAuth:\n      in: header\n      name: X-API-Key\n      type: apiKey\n    BasicAuth:\n      scheme: basic\n      type: http\n  examples:\n    delete-transactionRules-transactionRuleId-success-200:\n      summary: Response code - 200 OK\n      description: Example response for successfully deleting a transaction rule\n      value:\n        amount:\n          currency: EUR\n          value: 10000\n        description: Allow up to 100 EUR per month\n        interval:\n          type: monthly\n        paymentInstrumentGroupId: PG3227C223222B5CMD3FJFKGZ\n        reference: myRule16378\n        startDate: '2021-01-25T12:46:35.476629Z'\n        type: velocity\n        id: TR3227C223222B5CMDKQTBQ5M\n    generic-400:\n      summary: Response code - 400 Bad request\n      value:\n        type: https://docs.adyen.com/errors/general/bad-request\n        title: Bad request\n        status: 400\n        detail: Empty input which would have resulted in a null result.\n        errorCode: '00_400'\n    generic-401:\n      summary: Response code - 401 Unauthorized\n      value:\n        type: https://docs.adyen.com/errors/security/unauthorized\n        title: Unauthorized\n        status: 401\n        errorCode: '00_401'\n    generic-403:\n      summary: Response code - 403 Forbidden.\n      value:\n        type: https://docs.adyen.com/errors/security/unauthorized\n        title: Forbidden\n        status: 403\n        detail: Not the right permission to access this service.\n        errorCode: '00_403'\n    generic-404:\n      summary: Response code 404 - Not found\n      value:\n        type: https://docs.adyen.com/errors/general/not-found\n        title: Not found\n        status: 404\n        errorCode: '00_404'\n    generic-422:\n      summary: Response code - 422 Unprocessable Entity.\n      value:\n        type: https://docs.adyen.com/errors/general/invalid-field-value\n        title: Invalid Payment Instrument information provided\n        status: 422\n        detail: The balanceAccountId can only be changed when the status is Inactive\n          or Requested\n        requestId: 1W1UI15PLVGC9V8O\n        errorCode: '30_031'\n    generic-500:\n      summary: Response code - 500 Internal Server Error\n      value:\n        type: https://docs.adyen.com/errors/general/internal\n        title: An internal error happened\n        status: 500\n        detail: Unrecoverable error while trying to create payment instrument\n        requestId: 1WAF555PLWNTLYOQ\n        errorCode: '00_500'\n    generic-503:\n      summary: Response code - 503 Internal Server Error\n      value:\n        type: https://docs.adyen.com/errors/general/processing-error\n        title: Error processing request\n        status: 500\n        detail: Error while determining the payment instrument workflow\n        requestId: 1W1UHY5O2CONU4R7\n        errorCode: '99_500'\n    get-accountHolders-id-balanceAccounts-success-200:\n      summary: Response code - 200 OK\n      description: Example response when retrieving a list of balance accounts under\n        an account holder\n      value:\n        balanceAccounts:\n        - accountHolderId: AH32272223222B59K6ZKBBFNQ\n          defaultCurrencyCode: EUR\n          id: BA32272223222B59K6ZXHBFN6\n          status: Active\n        - accountHolderId: AH32272223222B59K6ZKBBFNQ\n          defaultCurrencyCode: EUR\n          id: BA32272223222B59K72CKBFNJ\n          status: Active\n        - accountHolderId: AH32272223222B59K6ZKBBFNQ\n          defaultCurrencyCode: EUR\n          id: BA32272223222B5BRR27B2M7G\n          status: Active\n        hasNext: true\n        hasPrevious: false\n    get-accountHolders-id-success-200:\n      summary: Response code - 200 OK\n      description: Example response when retrieving an account holder\n      value:\n        balancePlatform: YOUR_BALANCE_PLATFORM\n        contactDetails:\n          address:\n            city: Amsterdam\n            country: NL\n            houseNumberOrName: '274'\n            postalCode: 1020CD\n            street: Brannan Street\n          email: s.hopper@example.com\n          phone:\n            number: '+315551231234'\n            type: Mobile\n        description: S.Hopper - Staff 123\n        id: AH32272223222B5CM4MWJ892H\n        status: Active\n    get-balanceAccounts-id-paymentInstruments-success-200:\n      summary: Response code - 200 OK\n      description: Example response when retrieving a list of payment instruments\n        under a balance account\n      value:\n        hasNext: 'true'\n        hasPrevious: 'false'\n        paymentInstruments:\n        - balanceAccountId: BA32272223222B59CZ3T52DKZ\n          issuingCountryCode: GB\n          status: Active\n          type: card\n          card:\n            brandVariant: mc\n            cardholderName: name\n            formFactor: virtual\n            bin: '555544'\n            expiration:\n              month: '12'\n              year: '2022'\n            lastFour: '2357'\n            number: '************2357'\n          id: PI32272223222B59M5TM658DT\n        - balanceAccountId: BA32272223222B59CZ3T52DKZ\n          issuingCountryCode: GB\n          status: Active\n          type: card\n          card:\n            brandVariant: mc\n            cardholderName: name\n            formFactor: virtual\n            bin: '555544'\n            expiration:\n              month: '01'\n              year: '2023'\n            lastFour: '8331'\n            number: '************8331'\n          id: PI32272223222B59PXDGQDLSF\n    get-balanceAccounts-id-success-200:\n      summary: Response code - 200 OK\n      description: Example response when retrieving a balance account\n      value:\n        accountHolderId: AH32272223222B59K6RTQBFNZ\n        defaultCurrencyCode: EUR\n        balances:\n        - available: 0\n          balance: 0\n          currency: EUR\n          reserved: 0\n        id: BA3227C223222B5BLP6JQC3FD\n        paymentInstruments:\n        - id: PI32272223222B5BRM4FZ7J9J\n        status: Active\n    get-balancePlatforms-id-accountHolders-success-200:\n      summary: Response code - 200 OK\n      description: Example response when retrieving a list of account holders under\n        a balance platform\n      value:\n        accountHolders:\n        - contactDetails:\n            address:\n              city: Amsterdam\n              country: NL\n              houseNumberOrName: '6'\n              postalCode: '12336750'\n              street: Simon Carmiggeltstraat\n          description: J. Doe\n          id: AH32272223222B59DDWSCCMP7\n          status: Active\n        - contactDetails:\n            address:\n              city: Amsterdam\n              country: NL\n              houseNumberOrName: '11'\n              postalCode: '12336750'\n              street: Simon Carmiggeltstraat\n          description: S. Hopper\n          id: AH32272223222B59DJ7QBCMPN\n          status: Active\n        hasNext: 'true'\n        hasPrevious: 'false'\n    get-balancePlatforms-id-success-200:\n      summary: Response code - 200 OK\n      description: Example response when retrieving a balance platform\n      value:\n        id: YOUR_BALANCE_PLATFORM\n        status: Active\n    get-paymentInstrumentGroups-id-success-200:\n      summary: Response code - 200 OK\n      description: Example response when retrieving a payment instrument group\n      value:\n        balancePlatform: YOUR_BALANCE_PLATFORM\n        txVariant: mc\n        id: PG3227C223222B5CMD3FJFKGZ\n    get-paymentInstrumentGroups-id-transactionRules-success-200:\n      summary: Response code - 200 OK\n      description: Example response when retrieving a list of transaction rules applied\n        to a payment instrument group\n      value:\n        transactionRules:\n        - description: Allow 5 transactions per month\n          interval:\n            type: monthly\n          maxTransactions: 5\n          paymentInstrumentGroupId: PG3227C223222B5CMD3FJFKGZ\n          reference: myRule12345\n          startDate: '2021-01-25T12:46:35.476629Z'\n          status: active\n          type: velocity\n          id: TR32272223222B5CMDGMC9F4F\n        - amount:\n            currency: EUR\n            value: 10000\n          description: Allow up to 100 EUR per month\n          interval:\n            type: monthly\n          paymentInstrumentGroupId: PG3227C223222B5CMD3FJFKGZ\n          reference: myRule16378\n          startDate: '2021-01-25T12:46:35.476629Z'\n          status: active\n          type: velocity\n          id: TR32272223222B5CMDGT89F4F\n    get-paymentInstruments-id-success-200:\n      summary: Response code - 200 OK\n      description: Example response when retrieving a payment instrument\n      value:\n        balanceAccountId: BA32272223222B59CZ3T52DKZ\n        description: S. Hopper - Main card\n        issuingCountryCode: GB\n        status: Active\n        type: card\n        card:\n          brand: mc\n          brandVariant: mcdebit\n          cardholderName: Simon Hopper\n          formFactor: virtual\n          bin: '555544'\n          expiration:\n            month: '01'\n            year: '2024'\n          lastFour: '3548'\n          number: '************3548'\n        id: PI32272223222B5CMD3MQ3HXX\n    get-paymentInstruments-id-transactionRules-success-200:\n      summary: Response code - 200 OK\n      description: Example response when retrieving a list of transaction rules applied\n        to a payment instrument\n      value:\n        transactionRules:\n        - description: Allow 5 transactions per month\n          interval:\n            type: monthly\n          maxTransactions: 5\n          paymentInstrumentGroupId: PG3227C223222B5CMD3FJFKGZ\n          reference: myRule12345\n          startDate: '2021-01-25T12:46:35.476629Z'\n          status: active\n          type: velocity\n          id: TR32272223222B5CMDGMC9F4F\n        - amount:\n            currency: EUR\n            value: 10000\n          description: Allow up to 100 EUR per month\n          interval:\n            type: monthly\n          paymentInstrumentGroupId: PG3227C223222B5CMD3FJFKGZ\n          reference: myRule16378\n          startDate: '2021-01-25T12:46:35.476629Z'\n          status: active\n          type: velocity\n          id: TR32272223222B5CMDGT89F4F\n    get-transactionRules-transactionRuleId-success-200:\n      summary: Response code - 200 OK\n      description: Example response when retrieving a transaction rule\n      value:\n        transactionRule:\n          description: Allow 5 transactions per month\n          interval:\n            type: monthly\n          maxTransactions: 5\n          paymentInstrumentId: PI3227C223222B59KGTXP884R\n          reference: myRule12345\n          startDate: '2021-01-25T12:46:35.476629Z'\n          status: active\n          type: velocity\n          id: TR32272223222B5CMD3V73HXG\n    patch-accountHolders-id-success-200:\n      summary: Response code - 200 OK\n      description: Example response for successfully updating the status of an account\n        holder\n      value:\n        balancePlatform: YOUR_BALANCE_PLATFORM\n        contactDetails:\n          address:\n            city: Amsterdam\n            country: NL\n            houseNumberOrName: '274'\n            postalCode: 1020CD\n            street: Brannan Street\n          email: s.hopper@example.com\n          phone:\n            number: '+315551231234'\n            type: Mobile\n        description: S.Hopper - Staff 123\n        id: AH32272223222B5CM4MWJ892H\n        status: Suspended\n    patch-accountHolders-id-updateAccountHolderStatus:\n      summary: Update the status of an account holder.\n      description: Example request for updating the status of an account holder\n      value:\n        status: Suspended\n    patch-paymentInstruments-id-invalidData-422:\n      summary: Response code - 422 Unprocessable Entity\n      description: Example response for a failed request to update the balance account\n        ID\n      value:\n        type: https://docs.adyen.com/errors/general/invalid-field-value\n        title: Invalid Payment Instrument information provided\n        status: 422\n        detail: The balanceAccountId can only be changed when the status is Inactive\n          or Requested\n        requestId: 1W1UI15PLVGC9V8O\n        errorCode: '30_031'\n    patch-paymentInstruments-id-success-200:\n      summary: Response code - 200 OK\n      description: Example respones for successfully updating the status of a payment\n        instrument\n      value:\n        balanceAccountId: BA32272223222B59CZ3T52DKZ\n        description: S. Hopper - Main card\n        issuingCountryCode: GB\n        status: Suspended\n        type: card\n        card:\n          brand: mc\n          brandVariant: mcdebit\n          cardholderName: Simon Hopper\n          formFactor: virtual\n          bin: '555544'\n          expiration:\n            month: '01'\n            year: '2024'\n          lastFour: '5785'\n          number: '************5785'\n        id: PI3227C223222B5CMD278FKGS\n    patch-paymentInstruments-id-updatePaymentInstrumentBalanceAccount:\n      summary: Update the balance account linked to a payment instrument.\n      description: Example request for updating the balance account of a payment instrument\n      value:\n        balanceAccountId: BA32272223222B5CM82WL892M\n    patch-paymentInstruments-id-updatePaymentInstrumentStatus:\n      summary: Update the status of a payment instrument.\n      value:\n        status: Suspended\n    patch-transactionRules-transactionRuleId-success-200:\n      summary: Response code - 200 OK\n      description: Example response for successfully updating the status of a transaction\n        rule\n      value:\n        description: Allow 5 transactions per month\n        interval:\n          type: monthly\n        maxTransactions: 5\n        paymentInstrumentId: PI3227C223222B59KGTXP884R\n        reference: myRule12345\n        startDate: '2021-01-21T12:46:35.476629Z'\n        status: inactive\n        type: velocity\n        id: TR3227C223222B5B85CDV4DRS\n    patch-transactionRules-transactionRuleId-updateTransactionRuleStatus:\n      summary: Update the status of transaction rule.\n      description: Example request for updating the status of a transaction rule\n      value:\n        status: inactive\n    post-accountHolders-createAccountHolder:\n      summary: Create an account holder.\n      description: Example request for creating an account holder\n      value:\n        balancePlatform: YOUR_BALANCE_PLATFORM\n        description: S.Hopper - Staff 123\n        contactDetails:\n          email: s.hopper@example.com\n          phone:\n            number: '+315551231234'\n            type: Mobile\n          address:\n            city: Amsterdam\n            country: NL\n            street: Brannan Street\n            houseNumberOrName: '274'\n            postalCode: 1020CD\n    post-accountHolders-success-200:\n      summary: Response code - 200 OK\n      description: Example response for successfully creating an account holder\n      value:\n        balancePlatform: YOUR_BALANCE_PLATFORM\n        contactDetails:\n          address:\n            city: Amsterdam\n            country: NL\n            houseNumberOrName: '274'\n            postalCode: 1020CD\n            street: Brannan Street\n          email: s.hopper@example.com\n          phone:\n            number: '+315551231234'\n            type: Mobile\n        description: S.Hopper - Staff 123\n        id: AH3227C223222B5CMD2SXFKGT\n        status: Active\n    post-balanceAccounts-createBalanceAccount:\n      summary: Create a balance account.\n      description: Example request for creating a balance account\n      value:\n        accountHolderId: AH32272223222B59K6ZKBBFNQ\n        description: S.Hopper - Main balance account\n    post-balanceAccounts-success-200:\n      summary: Response code - 200 OK\n      description: Example response for successfully creating a balance account\n      value:\n        accountHolderId: AH32272223222B59K6ZKBBFNQ\n        defaultCurrencyCode: EUR\n        description: S.Hopper - Main balance account\n        balances:\n        - available: 0\n          balance: 0\n          currency: EUR\n          reserved: 0\n        id: BA3227C223222B5CMD38HFKGH\n        status: Active\n    post-paymentInstrumentGroups-createPaymentInstrumentGroups:\n      summary: Create a payment instrument group.\n      description: Example request for creating a payment instrument group\n      value:\n        balancePlatform: YOUR_BALANCE_PLATFORM\n        txVariant: mc\n    post-paymentInstrumentGroups-success-200:\n      summary: Response code - 200 OK\n      description: Example response for successfully creating a payment instrument\n        group\n      value:\n        balancePlatform: YOUR_BALANCE_PLATFORM\n        txVariant: mc\n        id: PG3227C223222B5CMD3FJFKGZ\n    post-paymentInstruments-createPhysicalCard:\n      summary: Create a physical card\n      description: Example request for creating a physical card\n      value:\n        type: card\n        issuingCountryCode: NL\n        balanceAccountId: BALANCE_ACCOUNT_ID\n        status: Inactive\n        card:\n          formFactor: physical\n          brand: mc\n          brandVariant: mcdebit\n          cardholderName: Sam Hopper\n          deliveryContact:\n            address:\n              city: Amsterdam\n              country: NL\n              stateOrProvince: NH\n              street: Simon Carmiggeltstraat\n              houseNumberOrName: 6-50\n              postalCode: 1011DJ\n            name:\n              firstName: Sam\n              lastName: Hopper\n          configuration:\n            configurationProfileId: YOUR_CONFIGURATION_PROFILE_ID\n          expiry:\n            month: 8\n            year: 2024\n        description: S.Hopper - Main card\n    post-paymentInstruments-createVirtualCard:\n      summary: Create a virtual card.\n      description: Example request for creating a virtual card\n      value:\n        type: card\n        description: S. Hopper - Main card\n        balanceAccountId: BA32272223222B59CZ3T52DKZ\n        issuingCountryCode: GB\n        card:\n          cardholderName: Simon Hopper\n          brand: mc\n          brandVariant: mcdebit\n          formFactor: virtual\n    post-paymentInstruments-success-200:\n      summary: Response code - 200 OK\n      description: Example response for successfully creating a virtual card\n      value:\n        balanceAccountId: BA32272223222B59CZ3T52DKZ\n        description: S. Hopper - Main card\n        issuingCountryCode: GB\n        status: Active\n        type: card\n        card:\n          brand: mc\n          brandVariant: mcdebit\n          cardholderName: Simon Hopper\n          formFactor: virtual\n          bin: '555544'\n          cvc: '873'\n          expiration:\n            month: '01'\n            year: '2024'\n          lastFour: '3548'\n        id: PI32272223222B5CMD3MQ3HXX\n    post-transactionRules-createTransactionRule:\n      summary: Create a transaction rule.\n      value:\n        description: Allow 5 transactions per month\n        interval:\n          type: monthly\n        maxTransactions: 5\n        paymentInstrumentId: PI3227C223222B59KGTXP884R\n        reference: myRule12345\n        startDate: '2021-01-21T12:46:35.476629Z'\n        status: inactive\n        type: velocity\n    post-transactionRules-success-200:\n      summary: Response code - 200 OK\n      description: Example response for successfully creating a transaction rule\n      value:\n        description: Allow 5 transactions per month\n        interval:\n          type: monthly\n        maxTransactions: 5\n        paymentInstrumentId: PI3227C223222B59KGTXP884R\n        reference: myRule12345\n        startDate: '2021-01-21T12:46:35.476629Z'\n        status: active\n        type: velocity\n        id: TR32272223222B5CMD3V73HXG\n",
			"canonicalURL": "/github.com/Adyen/adyen-openapi@8c8589551e242642b5af0a66545bda61c28baf29/-/blob/yaml/BalancePlatformService-v1.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/Adyen/adyen-openapi/blob/8c8589551e242642b5af0a66545bda61c28baf29/yaml/BalancePlatformService-v1.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: at 1:15: schemas: \"LegalEntity\": parse schema: property \"individual\": at 1:53533: parse schema: resolve \"#/components/schemas/Individual\": parse schema: property \"residentialAddress\": at 1:52102: parse schema: resolve \"#/components/schemas/Address\": find schema: resolve \"#/components/schemas/Address\": can't find value for \"components/schemas/Address\""
}