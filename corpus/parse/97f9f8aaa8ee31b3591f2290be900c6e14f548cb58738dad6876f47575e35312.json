{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/kiprotect/kodex"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "api/openapi.yaml",
			"byteSize": 25682,
			"content": "openapi: \"3.0.0\"\ninfo:\n  version: 0.0.1\n  title: KIProtect API\n  description: An API to secure sensitive and personal data.\n  termsOfService: https://kiprotect.com/product/terms\n  contact:\n    name: KIProtect Team\n    email: api@kiprotect.com\n    url: https://kiprotect.com\n  license:\n    name: Proprietary\nservers:\n  - url: https://api.kiprotect.com/v1\n  - url: http://localhost:8000/v1\npaths:\n  /hello:\n    get:\n      tags: [Base API]\n      description: \u003e\n        This is an end point returning all models an application will want after\n        logging in.\n      parameters: []\n      responses:\n        200:\n          description: user response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: object\n                    properties:\n                      user:\n                        $ref: '#/components/schemas/User'\n        default:\n          description: The user has not provided a valid authorization.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    enum:\n                      - Malformed/missing authorization header\n  /user:\n    get:\n      tags: [Base API]\n      description: |\n        Returns the current user.\n      operationId: getUser\n      parameters: []\n      responses:\n        200:\n          description: user response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/User'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /orgs/{organizationId}/projects:\n    parameters:\n      - $ref: \"#/components/parameters/OrganizationIDOrDefault\"\n    post:\n      tags: [Base API]\n      description: Create an project\n      responses:\n        200:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Project'\n        400:\n          description: invalid source\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    enum:\n                      - Transformation key missing\n  /projects:\n    get:\n      tags: [Base API]\n      description: Returns the list of projects the user can see\n      responses:\n        '200':\n          description: projects response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Project'\n  /projects/{projectId}:\n    parameters:\n      - $ref: \"#/components/parameters/ProjectID\"\n    get:\n      tags: [Base API]\n      description: Returns the details of a project\n      responses:\n        200:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Project'\n    delete:\n      tags: [Base API]\n      description: Deletes a project\n      responses:\n        200:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    enum:\n                      - success\n    patch:\n      tags: [Base API]\n      description: Updates a project\n      responses:\n        200:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Project'\n  /projects/{projectId}/streams:\n    parameters:\n      - $ref: \"#/components/parameters/ProjectID\"\n    post:\n      tags: [Base API]\n      description: Create a new stream in the given project.\n      responses:\n        201:\n          description: success\n    get:\n      tags: [Base API]\n      description: Returns the list of streams for the given project.\n      responses:\n        '200':\n          description: streams response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Stream'\n  /streams/{streamId}:\n    parameters:\n      - $ref: \"#/components/parameters/StreamID\"\n    get:\n      tags: [Base API]\n      description: Returns the details of a stream\n      responses:\n        200:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Stream'\n    delete:\n      tags: [Base API]\n      description: Deletes a stream\n      responses:\n        200:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    enum:\n                      - success\n    patch:\n      tags: [Base API]\n      description: Updates a stream\n      responses:\n        200:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Stream'\n  /streams/{streamId}/configs:\n    parameters:\n      - $ref: \"#/components/parameters/StreamID\"\n    get:\n      tags: [Base API]\n      description: List the configs for a stream.\n      responses:\n        200:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Config'\n    post:\n      tags: [Base API]\n      description: Creates a new config for a stream and organization\n      responses:\n        200:\n          description: success\n  /streams/{streamId}/sources:\n    parameters:\n      - $ref: \"#/components/parameters/StreamID\"\n    post:\n      tags: [Base API]\n      description: Create a new source.\n      responses:\n        201:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Source'\n    get:\n      tags: [Base API]\n      responses:\n        200:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Source'\n  /streams/{streamId}/sources/{sourceId}:\n    parameters:\n      - $ref: \"#/components/parameters/StreamID\"\n      - $ref: \"#/components/parameters/SourceID\"\n    post:\n      tags: [Base API]\n      responses:\n        200:\n          description: success\n    delete:\n      tags: [Base API]\n      description: Delete an source from a stream.\n      responses:\n        200:\n          description: success\n  /projects/{projectId}/sources:\n    parameters:\n      - $ref: \"#/components/parameters/ProjectID\"\n    post:\n      tags: [Base API]\n      description: Create a new source in the given project.\n      responses:\n        201:\n          description: success\n    get:\n      tags: [Base API]\n      description: Returns the list of sources that the user can see.\n      responses:\n        200:\n          description: sources response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Source'\n  /sources/{sourceId}:\n    parameters:\n      - $ref: \"#/components/parameters/SourceID\"\n    get:\n      tags: [Base API]\n      description: Returns the details of an source\n      responses:\n        200:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Source'\n    delete:\n      tags: [Base API]\n      description: Deletes an source\n      responses:\n        200:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    enum:\n                      - success\n    patch:\n      tags: [Base API]\n      description: Updates an source\n      responses:\n        200:\n          description: success\n  /projects/{projectId}/destinations:\n    parameters:\n      - $ref: \"#/components/parameters/ProjectID\"\n    post:\n      tags: [Base API]\n      description: Create a new destination.\n      responses:\n        201:\n          description: success\n    get:\n      tags: [Base API]\n      description: Returns the list of destinations that the user can see.\n      responses:\n        200:\n          description: destinations response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Destination'\n  /destinations/{destinationId}:\n    parameters:\n      - $ref: \"#/components/parameters/DestinationID\"\n    get:\n      tags: [Base API]\n      description: Returns the details of an destination\n      responses:\n        200:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Destination'\n    delete:\n      tags: [Base API]\n      description: Deletes an destination\n      responses:\n        200:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    enum:\n                      - success\n    patch:\n      tags: [Base API]\n      description: Updates an destination\n      responses:\n        200:\n          description: success\n  /configs/{id}:\n    parameters:\n      - $ref: \"#/components/parameters/ID\"\n    get:\n      tags: [Base API]\n      description: Returns the details of a config\n      responses:\n        200:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Config'\n    delete:\n      tags: [Base API]\n      description: Deletes a config\n      responses:\n        200:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    enum:\n                      - success\n    patch:\n      tags: [Base API]\n      description: Updates a config\n      responses:\n        200:\n          description: success\n  /configs/{id}/actions:\n    parameters:\n      - $ref: \"#/components/parameters/ID\"\n    get:\n      tags: [Base API]\n      description: Returns the list of actions of a config\n      responses:\n        200:\n          description: success\n  /configs/{id}/actions/{actionId}:\n    parameters:\n      - $ref: \"#/components/parameters/ID\"\n      - $ref: \"#/components/parameters/ActionID\"\n    post:\n      tags: [Base API]\n      description: Add an action to a config\n      responses:\n        200:\n          description: success\n    delete:\n      tags: [Base API]\n      description: Delete an action from a config\n      responses:\n        200:\n          description: success\n  /configs/{id}/destinations:\n    parameters:\n      - $ref: \"#/components/parameters/ID\"\n    get:\n      tags: [Base API]\n      responses:\n        200:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Destination'\n  /configs/{id}/destinations/{destinationId}:\n    parameters:\n      - $ref: \"#/components/parameters/ID\"\n      - $ref: \"#/components/parameters/DestinationID\"\n    post:\n      tags: [Base API]\n      responses:\n        200:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Destination'\n    delete:\n      tags: [Base API]\n      description: Delete an destination from a config.\n      responses:\n        200:\n          description: success\n  /projects/{projectId}/actions:\n    parameters:\n      - $ref: \"#/components/parameters/ProjectID\"\n    post:\n      tags: [Base API]\n      description: Create an action\n      responses:\n        200:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Action'\n        400:\n          description: invalid source\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    enum:\n                      - Transformation key missing\n    get:\n      tags: [Base API]\n      description: Returns the list of destinations that the user can see.\n      responses:\n        200:\n          description: actions response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Action'\n        default:\n          description: error\n  /actions/{actionId}:\n    parameters:\n      - $ref: \"#/components/parameters/ActionID\"\n    get:\n      tags: [Base API]\n      description: Returns the details of an action\n      responses:\n        200:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Action'\n    delete:\n      tags: [Base API]\n      description: Deletes an action\n      responses:\n        200:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    enum:\n                      - success\n    patch:\n      tags: [Base API]\n      description: Updates an action\n      responses:\n        200:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Action'\n  /transform:\n    post:\n      tags: [Base API]\n      responses:\n        200:\n          description: transformation destination response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: object\n                    properties:\n                      items:\n                        type: array\n                        items:\n                          type: object\n                          properties:\n                            _kip:\n                              type: string\n                              example: 64656661756c74\n                      params:\n                        description: A list of params for transformations which match to the _kip property of items\n                        type: object\n                        example:\n                          64656661756c74:\n                            pseudonymize-action:\n                              key: hSCZDT/bGdP3HBvOtK3JwfOj8vs667nXDxsTAN2YsDQ=\n        400:\n          description: invalid list\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    enum:\n                      - invalid data encountered in the transform form\n                  code:\n                    type: string\n                    enum:\n                      - FORM-ERROR\n                  errors:\n                    type: object\n                    example:\n                      items:\n                        - not a list\n  /transform/{id}:\n    parameters:\n     - $ref: \"#/components/parameters/ID\"\n    post:\n      tags: [Base API]\n      responses:\n        200:\n          description: success\n  /protect/pcap:\n    post:\n      tags: [Base API]\n      description: Protect a PCAP file\n      responses:\n        200:\n          description: success\n  /unprotect/pcap:\n    post:\n      tags: [Base API]\n      description: Unprotect a PCAP file\n      responses:\n        200:\n          description: Unprotect a PCAP file\n  /submit/{streamId}:\n    parameters:\n     - $ref: \"#/components/parameters/StreamID\"\n    post:\n      tags: [Base API]\n      responses:\n        200:\n          description: success\n  /definitions:\n    get:\n      tags: [Base API]\n      responses:\n        200:\n          description: success\ncomponents:\n  parameters:\n    ProjectID:\n      name: projectId\n      in: path\n      description: ID of project\n      example: 2b25c63afc8a55746c91d0e7e178fda7\n      required: true\n      schema:\n        type: string\n    ActionID:\n      name: actionId\n      in: path\n      description: ID of action\n      example: 2b25c63afc8a55746c91d0e7e178fda7\n      required: true\n      schema:\n        type: string\n    DependentID:\n      name: dependent_id\n      in: path\n      description: ID of dependent object to fetch\n      required: true\n      schema:\n        type: string\n    ID:\n      name: id\n      in: path\n      description: ID of object\n      example: 64285d4b655dde786882f9b6f40ef1d9\n      required: true\n      schema:\n        type: string\n    SourceID:\n      name: sourceId\n      in: path\n      description: ID of an source object\n      example: b59d65cc6ccf3544bbc2a37aa43674b1\n      required: true\n      schema:\n        type: string\n    DestinationID:\n      name: destinationId\n      in: path\n      description: ID of an destination object\n      example: eca109cd2d3630e2cc05fe78d3ef9c3a\n      required: true\n      schema:\n        type: string\n    OrganizationID:\n      name: organizationId\n      in: path\n      description: ID of an organization\n      example: c5c407b743b5416c8d98a6037fb442ed\n      required: true\n      schema:\n        type: string\n    OrganizationIDOrDefault:\n      name: organizationId\n      in: path\n      description: ID of an organization or \"default\" for a user's default organization\n      example: default\n      required: true\n      schema:\n        type: string\n    StreamID:\n      name: streamId\n      in: path\n      description: ID of a stream object\n      example: dcc00efe285905cadf798a8a610a754a\n      required: true\n      schema:\n        type: string\n  schemas:\n    Project:\n      type: object\n      properties:\n        created_at:\n          type: string\n          example: \"2019-10-08T09:41:56.742325Z\"\n        description:\n          type: string\n          example: this is just an example action\n        id:\n          $ref: \"#/components/parameters/ActionID\"\n        name:\n          type: string\n          example: example action\n        update_at:\n          type: string\n          example: \"2019-10-08T09:41:56.742325Z\"\n    AccessToken:\n      allOf:\n        - $ref: \"#/components/schemas/BaseAccessToken\"\n    Action:\n      type: object\n      properties:\n        created_at:\n          type: string\n          example: \"2019-10-08T09:41:56.742325Z\"\n        description:\n          type: string\n          example: this is just an example action\n        id:\n          $ref: \"#/components/parameters/ActionID\"\n        name:\n          type: string\n          example: example action\n        update_at:\n          type: string\n          example: \"2019-10-08T09:41:56.742325Z\"\n    Base:\n      type: object\n    BaseAccessToken:\n      type: object\n      properties:\n        scopes:\n          type: array\n          items:\n            type: string\n            example: \"admin\"\n    BaseOrganization:\n      type: object\n      properties:\n        default:\n          type: boolean\n          example: false\n        description:\n          type: string\n          example: this is just an example organization\n        name:\n          type: string\n          example: example org\n        source:\n          type: string\n          example: worf\n        source_id:\n          type: string\n    BaseOrganizationRole:\n      type: object\n      properties:\n        roles:\n          type: array\n          items:\n            type: string\n            example: admin\n        organization:\n          $ref: \"#/components/schemas/Organization\"\n    Config:\n      type: object\n      properties:\n        created_at:\n          type: string\n          example: \"2019-10-08T09:41:56.742325Z\"\n        description:\n          type: string\n          example: this is just an example config\n        id:\n          $ref: \"#/components/parameters/ID\"\n        name:\n          type: string\n          example: example config\n        source:\n          type: string\n          example: analytics\n        status:\n          type: string\n          example: active\n        stream:\n          $ref: \"#/components/schemas/Stream\"\n        update_at:\n          type: string\n          example: \"2019-10-08T09:41:56.742325Z\"\n    Error:\n      type: object\n    OrganizationRole:\n      allOf:\n        - $ref: \"#/components/schemas/BaseOrganizationRole\"\n    Organization:\n      allOf:\n        - $ref: \"#/components/schemas/BaseOrganization\"\n        - $ref: \"#/components/schemas/Base\"\n    Source:\n      type: object\n      properties:\n        created_at:\n          type: string\n          example: \"2019-10-08T09:41:56.742325Z\"\n        description:\n          type: string\n          example: this is just an example source\n        id:\n          $ref: \"#/components/parameters/SourceID\"\n        name:\n          type: string\n          example: example source\n        update_at:\n          type: string\n          example: \"2019-10-08T09:41:56.742325Z\"\n    Destination:\n      type: object\n      properties:\n        created_at:\n          type: string\n          example: \"2019-10-08T09:41:56.742325Z\"\n        config:\n          type: object\n        description:\n          type: string\n          example: this is just an example destination\n        id:\n          $ref: \"#/components/parameters/DestinationID\"\n        name:\n          type: string\n          example: example destination\n        type:\n          type: string\n          example: analytics\n        update_at:\n          type: string\n          example: \"2019-10-08T09:41:56.742325Z\"\n    Stream:\n      type: object\n      properties:\n        created_at:\n          type: string\n          example: \"2019-10-08T09:41:56.742325Z\"\n        description:\n          type: string\n          example: this is just an example stream\n        id:\n          $ref: \"#/components/parameters/StreamID\"\n        name:\n          type: string\n          example: example stream\n        status:\n          type: string\n          enum:\n            - active\n            - disabled\n            - testing\n        update_at:\n          type: string\n          example: \"2019-10-08T09:41:56.742325Z\"\n    User:\n      type: object\n      properties:\n        source_id:\n          type: string\n        source:\n          type: string\n          example: worf\n        email:\n          type: string\n          format: email\n          example: max.mustermann@muster.com\n        display_name:\n          type: string\n          example: Max Mustermann\n        access_token:\n          $ref: \"#/components/schemas/AccessToken\"\n        roles:\n          type: array\n          items:\n            $ref: \"#/components/schemas/OrganizationRole\"\ntags:\n  - name: Base API\n    description: KIProtect Base API\n"
		}
	},
	"Error": "parse: parse spec: paths: /configs/{id}/destinations/{destinationId}: post: operation \"\": responses: 200: content: \"application/json\": schema: parse schema: data: parse schema: reference \"#/components/schemas/Destination\": parse schema: id: parse schema: reference \"#/components/parameters/DestinationID\": resolve reference \"#/components/parameters/DestinationID\": invalid schema reference \"#/components/parameters/DestinationID\""
}