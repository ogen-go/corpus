{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ICRAR/daliuge"
		},
		"file": {
			"name": "composite_manager.yaml",
			"size": 0,
			"path": "OpenAPI/composite_manager.yaml",
			"byteSize": 7341,
			"content": "openapi: 3.0.0\ninfo:\n  title: DALiuGE Composite Manager\n  version: '1.0'\n  description: Composite Manager specific entry points\n  contact: {}\ntags: []\nservers: []\npaths:\n  /api:\n    get:\n      summary: Your GET endpoint\n      tags: []\n      responses:\n        '200':\n          description: The status of the Composite Manager\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/composite_manager_status'\n      operationId: getCMStatus\n      description: Return the status of the Composite Manager\n  /api/nodes:\n    get:\n      summary: Your GET endpoint\n      tags: []\n      responses:\n        '200':\n          description: The list of nodes covered by this Composite Manager\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n      operationId: getCMNodes\n      description: Returns the list of nodes covered by this Composite Manager\n  '/api/nodes/{node}':\n    parameters:\n      - schema:\n          type: string\n        name: node\n        in: path\n        required: true\n    delete:\n      tags: []\n      summary: ''\n      operationId: removeCMNode\n      responses:\n        '200':\n          description: OK\n      description: \"Remove `node` from this Composite Manager's nodes list\"\n    post:\n      tags: []\n      summary: ''\n      operationId: addCMNode\n      responses:\n        '200':\n          description: OK\n      description: \"Add `node` to this Composite Manager's nodes list\"\n  '/api/nodes/{node}/sessions':\n    parameters:\n      - schema:\n          type: string\n        name: node\n        in: path\n        required: true\n    get:\n      summary: ''\n      tags: []\n      responses:\n        '200':\n          description: 'The list of sessions on `node`, managed by this Manager'\n          content:\n            application/json:\n              schema:\n                title: session_information\n                oneOf:\n                  - title: composite_session_information\n                    type: array\n                    description: High-level information for a given session at the Data Island and Master Manager levels\n                    items:\n                      type: object\n                      properties:\n                        sessionId:\n                          type: string\n                        status:\n                          type: object\n                        size:\n                          type: object\n                  - title: node_session_information\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        sessionId:\n                          type: string\n                        status:\n                          type: integer\n                        size:\n                          type: integer\n                    description: High-level information for a given session at the node level\n                description: Generic session information type\n      operationId: getNodeSessions\n      description: 'Get the list of sessions on `node`, managed by this Manager'\n  '/api/nodes/{node}/sessions/{sessionId}':\n    parameters:\n      - schema:\n          type: string\n        name: node\n        in: path\n        required: true\n      - schema:\n          type: string\n        name: sessionId\n        in: path\n        required: true\n    get:\n      summary: Your GET endpoint\n      tags: []\n      responses:\n        '200':\n          description: The main information of session `sessionId` in node `node`\n          content:\n            application/json:\n              schema:\n                $ref: './manager_common.yaml#/components/schemas/session'\n      operationId: getNodeSessionInformation\n      description: Returns the main information of session `sessionId` in node `node`\n  '/api/nodes/{node}/sessions/{sessionId}/status':\n    parameters:\n      - schema:\n          type: string\n        name: node\n        in: path\n        required: true\n      - schema:\n          type: string\n        name: sessionId\n        in: path\n        required: true\n    get:\n      summary: Your GET endpoint\n      tags: []\n      responses:\n        '200':\n          description: The status of `sessionId` in `node `\n          content:\n            application/json:\n              schema:\n                type: integer\n      operationId: getNodeSessionStatus\n      description: Returns the status of `sessionId` in `node`\n  '/api/nodes/{node}/sessions/{sessionId}/graph':\n    parameters:\n      - schema:\n          type: string\n        name: node\n        in: path\n        required: true\n      - schema:\n          type: string\n        name: sessionId\n        in: path\n        required: true\n    get:\n      summary: Your GET endpoint\n      tags: []\n      responses:\n        '200':\n          description: The physical graph of session `sessionId` in `node`\n          content:\n            application/json:\n              schema:\n                $ref: './manager_common.yaml#/components/schemas/physical_graph'\n      operationId: getNodeGraph\n      description: Returns the physical graph of session `sessionId` in `node`\n  '/api/nodes/{node}/sessions/{sessionId}/graph/status':\n    parameters:\n      - schema:\n          type: string\n        name: node\n        in: path\n        required: true\n      - schema:\n          type: string\n        name: sessionId\n        in: path\n        required: true\n    get:\n      summary: Your GET endpoint\n      tags: []\n      responses:\n        '200':\n          description: The status graph of session `sessionId` in `node`\n          content:\n            application/json:\n              schema:\n                $ref: './manager_common.yaml#/components/schemas/physical_graph_status'\n      operationId: getNodeGraphStatus\n      description: Returns the status graph of session `sessionId` in `node`\n\n  /api/stop:\n    $ref: './manager_common.yaml#/paths/~1api~1stop'\n  /api/sessions:\n    $ref: './manager_common.yaml#/paths/~1api~1sessions'\n  '/api/sessions/{sessionId}':\n    $ref: './manager_common.yaml#/paths/~1api~1sessions~1{sessionId}'\n  '/api/sessions/{sessionId}/status':\n    $ref: './manager_common.yaml#/paths/~1api~1sessions~1{sessionId}~1status'\n  '/api/sessions/{sessionId}/deploy':\n    $ref: './manager_common.yaml#/paths/~1api~1sessions~1{sessionId}~1deploy'\n  '/api/sessions/{sessionId}/cancel':\n    $ref: './manager_common.yaml#/paths/~1api~1sessions~1{sessionId}~1cancel'\n  '/api/sessions/{sessionId}/graph':\n    $ref: './manager_common.yaml#/paths/~1api~1sessions~1{sessionId}~1graph'\n  '/api/sessions/{sessionId}/graph/size':\n    $ref: './manager_common.yaml#/paths/~1api~1sessions~1{sessionId}~1graph~1size'\n  '/api/sessions/{sessionId}/graph/status':\n    $ref: './manager_common.yaml#/paths/~1api~1sessions~1{sessionId}~1graph~1status'\n  '/api/sessions/{sessionId}/graph/append':\n    $ref: './manager_common.yaml#/paths/~1api~1sessions~1{sessionId}~1graph~1append'\ncomponents:\n  schemas:\n    composite_manager_status:\n      title: composite_manager_status\n      type: object\n      properties:\n        hosts:\n          type: array\n          items:\n            type: string\n        sessionIds:\n          type: array\n          items:\n            type: string\n      description: Component Manager status structure\n\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /api/nodes/{node}/sessions/{sessionId}: get: operation \"getNodeSessionInformation\": responses: 200: content: application/json: schema: parse schema: resolve \"./manager_common.yaml#/components/schemas/session\": find schema: external base \"./manager_common.yaml\" is not supported"
}