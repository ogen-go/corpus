{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/bartongroup/slivka"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "slivka/data/openapi-docs/openapi.yaml",
			"byteSize": 13535,
			"content": "---\nopenapi: 3.0.3\ninfo:\n  title: Slivka Web API\n  version: '1.1'\npaths:\n  /api/version:\n    get:\n      summary: Show slivka version.\n      responses:\n        '200':\n          description: \n            Version of the slivka instance running on the server\n            and its corresponding REST API.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  slivkaVersion:\n                    description: Slivka version.\n                    type: string\n                  APIVersion:\n                    description: REST API version\n                    type: string\n\n  /api/services:\n    get:\n      summary: Show list of all services.\n      responses:\n        '200':\n          description: List of all available web services.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  services:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/ServiceResource'\n\n  /api/services/{service}:\n    parameters:\n      - name: service\n        in: path\n        required: true\n        description: Service id\n        schema:\n          type: string\n\n    get:\n      summary: Show service information.\n      responses:\n        '200':\n          description:\n            Detailed description of the service. To start a new\n            job, send a POST request providing values for the listed\n            parameters.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceResource'\n        '404':\n          description: Requested service not found.\n\n  /api/services/{service}/jobs:\n    parameters:\n      - name: service\n        in: path\n        required: true\n        description: Service id\n        schema:\n          type: string\n\n    post:\n      summary: Submit new job request.\n      requestBody:\n        description:\n          The request content can be either an URLencoded or a multipart\n          form data containing the service parameter ids and\n          their corresponding values. If a file needs to be submitted,\n          then multipart must be used.\n        content:\n          application/x-www-form-urlencoded:\n            description: URLencoded service parameters.\n            example: param1Id=value1\u0026param2Id=value2\n          multipart/form-data:\n            description: Service parameters as multipart form data.\n          # application/json:\n          #   description: JSON object with job parameters.\n          #   schema:\n          #     type: object\n          #     additionalProperties: true\n          #   example:\n          #     param1Id: value1\n          #     param2Id: value2\n\n        required: true\n      responses:\n        '202':\n          description: New job request has been created.\n          headers:\n            Location:\n              description: Location of the new resource.\n              schema:\n                type: string\n                format: uri\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobResource'\n        '422':\n          description: \n            Your job request contains invalid values.\n            Check job parameters and provided values.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  errors:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        parameter:\n                          type: string\n                          description:\n                            Parameter id for which an error occurred.\n                        errorCode:\n                          type: string\n                          description: Short code identifying error type.\n                        message:\n                          type: string\n                          description: Description of the error.\n        '404':\n          description: Service not found.\n\n  /api/jobs/{jid}:\n    parameters:\n      - name: jid\n        in: path\n        required: true\n        description: Job id\n        schema:\n          type: string\n        example: YKZFx3m3LxyfHFib\n\n    get:\n      summary: Retrieve job information.\n      description:\n        This endpoint can be used to poll for job status changes.\n      responses:\n        '200':\n          description: Job information.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobResource'\n        '404':\n          description: Job not found.\n\n    delete:\n      summary: Cancel running job\n      responses:\n        '202':\n          description: Job deleted successfully.\n        '404':\n          description: Job not found.\n\n  /api/jobs/{jid}/files:\n    parameters:\n      - name: jid\n        in: path\n        required: true\n        description: Job id\n        schema:\n          type: string\n        example: YKegj3m3LxQWnw7U\n\n    get:\n      summary: Show job files.\n      description:\n        The files can be fetched even if the job is not finished. \n        In such case only currently existing files are shown and the \n        list might be incomplete.\n      responses:\n        '200':\n          description: List of files created by the job.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  files:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/FileResource'\n\n  /api/job/{jid}/files/{path}:\n    parameters:\n      - name: jid\n        in: path\n        required: true\n        description: Job id\n        schema:\n          type: string\n        example: YKegj3m3LxQWnw7U\n      - name: path\n        in: path\n        required: true\n        description: Path to the file\n        schema:\n          type: string\n        example: stdout\n\n    get:\n      summary: Show file information.\n      description:\n        Displays the metadata of the file and the url where the\n        content can be downloaded from.\n      responses:\n        '200':\n          description: File information.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileResource'\n\n  /api/files:\n    post:\n      summary: Upload file.\n      description:\n        Uploaded files are given identifiers that can be used during\n        job submission without the need to re-upload them.\n        Upload the file first if you intent to reuse the same file\n        in multiple jobs.\n      responses:\n        '201':\n          description: New file resource created on the server.\n          headers:\n            Location:\n              description: Location of the new resource.\n              schema:\n                type: string\n                format: uri\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileResource'\n\n  /api/files/{path}:\n    get:\n      summary: Show uploaded file resource.\n      responses:\n        '200':\n          description: File information.\n          content: \n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileResource'\n        \ncomponents:\n  schemas:\n    ServiceResource:\n      type: object\n      properties:\n        '@url':\n          type: string\n          format: uri\n          description: Location of the service resource.\n        id:\n          type: string\n          description: Unique identifier which the service is referred to by.\n        name:\n          type: string\n          description: Human-readable service name.\n        description:\n          type: string\n          description: Long description of the service.\n        author:\n          type: string\n          description: Author of the service or the software.\n        version:\n          type: string\n          description: Version of the service or the underlying software.\n        license:\n          type: string\n          description: License which the software is released under.\n        classifiers:\n          type: array\n          description:\n            List of tags that can be used to group services into categories.\n          items:\n            type: string\n        parameters:\n          type: array\n          description:\n            Parameters that can be provided for a new job submission.\n            Each object in the array defines parameter type, id, name\n            and additional constraints.\n          items:\n            type: object\n            properties:\n              id:\n                type: string\n                description:\n                  The parameter ids should be used as parameters of\n                  the POST request.\n              name:\n                type: string\n                description: Human-readable parameter name.\n              description:\n                type: string\n              type:\n                type: string\n                description: Type of the parameter. Built-in types include\n                  \"integer\", \"decimal\", \"text\", \"flag\", \"choice\", \"file\"\n                  and \"undefined\".\n              required:\n                type: boolean\n              array:\n                type: boolean\n                description: \n                  Whether a single or multiple values are expected.\n              default: {}\n            additionalProperties:\n              description:\n                Additional properties that depend on the field type.\n        presets:\n          type: array\n          description: List of pre-defined parameter combinations.\n          items:\n            type: object\n            properties:\n              id:\n                type: string\n                description: Preset identifier.\n              name:\n                type: string\n                description: Human-readable name.\n              description:\n                type: string\n                description: Detailed description.\n              values:\n                type: object\n                additionalProperties: true\n                description: Mapping of parameter ids to values.\n        status:\n          type: object\n          description: Current operation status of the service.\n          properties:\n            status:\n              type: string\n              description:\n                Status of the service. Can be either OK, WARNING\n                indicating that some issues occurred or DOWN when\n                the service is non-operational.\n              enum:\n                - OK\n                - WARNING\n                - DOWN\n            errorMessage:\n              type: string\n              description: More detailed information about system error.\n            timestamp:\n              type: string\n              format: date-time\n              description: Date and time of this state report.\n\n    JobResource:\n      type: object\n      properties:\n        '@url':\n          type: string\n          format: uri\n          description: Location of the job resource.\n        id:\n          type: string\n          description: Unique identifier of the job.\n        service:\n          type: string\n          description: Service that this job was submitted to.\n        parameters:\n          type: object\n          additionalProperties:\n            type: string\n          description:\n            The mapping of parameters that was used to run the service.\n            The values might differ from the submitted ones as default\n            values will appear here.\n        submissionTime:\n          type: string\n          format: date-time\n          description: Job request creation time.\n        completionTime:\n          type: string\n          format: date-time\n          description: The time the job was completed.\n        status:\n          type: string\n          description:\n            Current status of the job. Each request starts at\n            the PENDING status and transitions to REJECTED or\n            ACCEPTED status once input values are processed.\n            Then it gets QUEUED in the queuing system and changes\n            to RUNNING after being started. Finally it changes to\n            COMPLETED when finished successfully or INTERRUPTED\n            if queuing system stopped the job, DELETED if it was\n            cancelled by the user, FAILED if the program didn't\n            return 0 or ERROR if system error occurred.\n          enum:\n            - PENDING\n            - REJECTED\n            - ACCEPTED\n            - QUEUED\n            - RUNNING\n            - COMPLETED\n            - INTERRUPTED\n            - CANCELLING\n            - DELETED\n            - FAILED\n            - ERROR\n            - UNKNOWN\n\n    FileResource:\n      type: object\n      properties:\n        '@url':\n          type: string\n          format: uri\n          description: Location of the file resource.\n        \"@content\":\n          type: string\n          format: uri\n          description: Location of the file content.\n        id:\n          type: string\n          description: Unique file identifier. The format is 16-bytes string\n            for uploaded files or job-id/file-path for job results.\n        jobId:\n          type: string\n        path:\n          type: string\n        label:\n          type: string\n        mediaType:\n          type: string",
			"canonicalURL": "/github.com/bartongroup/slivka@5491afec63c8cd41d6f1389a5dd0ba9877b888a1/-/blob/slivka/data/openapi-docs/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/bartongroup/slivka/blob/5491afec63c8cd41d6f1389a5dd0ba9877b888a1/slivka/data/openapi-docs/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/api/files/{path}\": get: at 1:5068: parse path \"/api/files/{path}\": path parameter not specified: \"path\""
}