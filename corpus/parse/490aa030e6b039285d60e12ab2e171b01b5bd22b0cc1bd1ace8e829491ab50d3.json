{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/featurehub-io/featurehub"
		},
		"file": {
			"name": "mr-api.yaml",
			"size": 0,
			"path": "backend/mr-api/mr-api.yaml",
			"byteSize": 88570,
			"content": "openapi: 3.0.1\ninfo:\n  title: ManagementResourceApi\n  description: This describes the API clients use for accessing features. This reflects the API from 1.5.7 onwards.\n  version: \"1.1.8\"\n#  CRUD for portfolios, environments, features, service account, people, and groups (edited)\n#  roles are fixed\n#  then people\u003c-\u003egroup association\n#  and group\u003c-\u003erole association\npaths:\n  /mr-api/organization/{id}/group:\n    get:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - GroupService\n      description: \"Gets the superuser group for this organisation. There is no other way to ascertain which org you are dealing with\"\n      operationId: getSuperuserGroup\n      parameters:\n        - name: id\n          required: true\n          in: path\n          description: \"the id of the organisation\"\n          schema:\n            type: string\n            format: uuid\n      responses:\n        200:\n          description: \"The superuser group presuming the organization exists\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Group\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        404:\n          description: \"not found\"\n  /mr-api/portfolio:\n    parameters:\n      - name: includeGroups\n        description: \"Include groups for this this portfolio in results\"\n        in: query\n        schema:\n          type: boolean\n      - name: includeApplications\n        description: \"Include applications for this portfolio in results\"\n        in: query\n        schema:\n          type: boolean\n    get:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - PortfolioService\n      description: \"Gets a list of portfolios.\"\n      operationId: findPortfolios\n      parameters:\n        - name: order\n          in: query\n          description: \"how to order the results\"\n          schema:\n            $ref: \"#/components/schemas/SortOrder\"\n        - name: filter\n          in: query\n          description: \"What to filter the results by\"\n          schema:\n            type: string\n        - name: parentPortfolioId\n          in: query\n          description: \"The parent portfolio to search under. If none is provided, use the top level one\"\n          schema:\n            type: string\n      responses:\n        200:\n          description: \"Gets all portfolios, alphabetically sorted\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Portfolio\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n    post:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - PortfolioService\n      description: \"Create a new portfolio\"\n      operationId: createPortfolio\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Portfolio\"\n      responses:\n        200:\n          description: \"Resulting portfolio\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Portfolio\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        403:\n          description: \"forbidden to create portfolio\"\n        404:\n          description: \"unable to create portfolio\"\n        409:\n          description: \"duplicate portfolio\"\n\n  /mr-api/portfolio/{id}:\n    parameters:\n      - name: id\n        description: \"The id of the portfolio to find\"\n        in: path\n        schema:\n          type: string\n          format: uuid\n        required: true\n      - name: includeGroups\n        description: \"Include groups for this this portfolio in results\"\n        in: query\n        schema:\n          type: boolean\n      - name: includeApplications\n        description: \"Include applications for this portfolio in results\"\n        in: query\n        schema:\n          type: boolean\n      - name: includeEnvironments\n        description: \"Include the environments inside the applications\"\n        in: query\n        schema:\n          type: boolean\n    get:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - PortfolioService\n      description: \"Get portfolio\"\n      operationId: getPortfolio\n      responses:\n        200:\n          description: \"Resulting portfolio\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Portfolio\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        404:\n          description: \"not found\"\n    put:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - PortfolioService\n      description: \"Update a portfolio\"\n      operationId: updatePortfolio\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Portfolio\"\n      responses:\n        200:\n          description: \"Resulting portfolio\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Portfolio\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        403:\n          description: \"no permission to update portfolio\"\n        404:\n          description: \"cannot find portfolio to update\"\n        409:\n          description: \"duplicate portfolio name\"\n        422:\n          description: \"updating old portfolio\"\n    delete:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - PortfolioService\n      description: \"Delete a portfolio\"\n      operationId: deletePortfolio\n      responses:\n        200:\n          description: \"How many portfolios were deleted.\"\n          content:\n            application/json:\n              schema:\n                type: boolean\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        403:\n          description: \"forbidden\"\n\n  /mr-api/portfolio/{id}/application:\n    parameters:\n      - name: id\n        description: \"The id of the portfolio to find\"\n        in: path\n        schema:\n          type: string\n          format: uuid\n        required: true\n      - name: includeEnvironments\n        in: query\n        description: \"Include the environments in the result\"\n        schema:\n          type: boolean\n      - name: includeFeatures\n        in: query\n        description: \"Include the features in the result\"\n        schema:\n          type: boolean\n    get:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - ApplicationService\n      description: \"Gets a list of applications.\"\n      operationId: findApplications\n      parameters:\n        - name: order\n          in: query\n          description: \"how to order the results\"\n          schema:\n            $ref: \"#/components/schemas/SortOrder\"\n        - name: filter\n          in: query\n          description: \"What to filter the results by\"\n          schema:\n            type: string\n      responses:\n        200:\n          description: \"Gets all portfolios, alphabetically sorted\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Application\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        404:\n          description: \"none found\"\n\n    post:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - ApplicationService\n      description: \"Create a new application\"\n      operationId: createApplication\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Application\"\n      responses:\n        200:\n          description: \"Resulting application\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Application\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        403:\n          description: \"forbidden\"\n        409:\n          description: \"duplicates\"\n  /mr-api/portfolio/{id}/group:\n    parameters:\n      - name: id\n        description: \"The id of the portfolio to find\"\n        in: path\n        schema:\n          type: string\n          format: uuid\n        required: true\n      - name: includePeople\n        description: \"include people in each group\"\n        in: query\n        schema:\n          type: boolean\n    get:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - GroupService\n      description: \"Gets a list of groups.\"\n      operationId: findGroups\n      parameters:\n        - name: order\n          in: query\n          description: \"how to order the results\"\n          schema:\n            $ref: \"#/components/schemas/SortOrder\"\n        - name: filter\n          in: query\n          description: \"What to filter the results by\"\n          schema:\n            type: string\n      responses:\n        200:\n          description: \"Gets groups, alphabetically sorted\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Group\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        403:\n          description: \"forbidden\"\n        404:\n          description: \"not found\"\n    post:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - GroupService\n      description: \"Create a new group\"\n      operationId: createGroup\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Group\"\n      responses:\n        200:\n          description: \"Resulting group\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Group\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        403:\n          description: \"no permission\"\n        409:\n          description: \"duplicate\"\n  /mr-api/person:\n    parameters:\n      - name: includeGroups\n        description: \"Include groups in result\"\n        in: query\n        schema:\n          type: boolean\n    get:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - PersonService\n      description: \"Gets a list of matching people.\"\n      operationId: findPeople\n      parameters:\n        - name: order\n          in: query\n          description: \"how to order the results\"\n          schema:\n            $ref: \"#/components/schemas/SortOrder\"\n        - name: filter\n          in: query\n          description: \"What to filter the results by\"\n          schema:\n            type: string\n        - name: startAt\n          in: query\n          description: \"Where in the results to start\"\n          schema:\n            type: integer\n        - name: pageSize\n          in: query\n          description: \"How many results to return\"\n          schema:\n            type: integer\n        - name: includeLastLoggedIn\n          in: query\n          description: \"Include last logged in timestamp\"\n          schema:\n            type: boolean\n        - name: personTypes\n          in: query\n          description: \"Filter by person types\"\n          schema:\n            type: array\n            items:\n              $ref: \"#/components/schemas/PersonType\"\n      responses:\n        200:\n          description: \"Gets all persons, alphabetically sorted\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SearchPersonResult\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        403:\n          description: \"only admins can call this API\"\n    post:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - PersonService\n      description: \"Create a new person\"\n      operationId: createPerson\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CreatePersonDetails\"\n      responses:\n        200:\n          description: \"Registration url\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RegistrationUrl\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        403:\n          description: \"forbidden to only admins\"\n        409:\n          description: \"person already exists\"\n  /mr-api/person/{id}/token-reset:\n    post:\n      parameters:\n        - name: id\n          description: \"The id of the person to find\"\n          in: path\n          schema:\n            type: string\n            format: uuid\n          required: true\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - PersonService\n      description: \"Reset security token of supported person type (usually service accounts only)\"\n      operationId: resetSecurityToken\n      responses:\n        200:\n          description: \"New security token\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AdminServiceResetTokenResponse\"\n        404:\n          description: \"Service account not found\"\n        403:\n          description: \"No permission to change\"\n        401:\n          description: \"Not authenticated\"\n  /mr-api/person/{id}:\n    parameters:\n      - name: id\n        description: \"The id of the person to find\"\n        in: path\n        schema:\n          type: string\n        required: true\n      - name: includeGroups\n        description: \"Include groups in result\"\n        in: query\n        schema:\n          type: boolean\n      - name: includeAcls\n        description: \"include acls for each group\"\n        in: query\n        schema:\n          type: boolean\n    get:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - PersonService\n      description: \"Get person\"\n      operationId: getPerson\n      parameters:\n        - name: includeGroups\n          description: \"Include the groups for the user\"\n          in: query\n          schema:\n            type: boolean\n      responses:\n        200:\n          description: \"Resulting person\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Person\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        404:\n          description: \"not found\"\n    put:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - PersonService\n      description: \"Update a person\"\n      operationId: updatePerson\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Person\"\n      responses:\n        200:\n          description: \"Resulting person\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Person\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        403:\n          description: \"forbidden to update that person\"\n        404:\n          description: \"person not found\"\n        422:\n          description: \"attempting to update old person record\"\n    delete:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - PersonService\n      description: \"Delete a person\"\n      operationId: deletePerson\n      responses:\n        200:\n          description: \"How many people were deleted.\"\n          content:\n            application/json:\n              schema:\n                type: boolean\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        403:\n          description: \"forbidden\"\n  /mr-api/authentication:\n    post:\n      tags:\n        - AuthService\n      description: \"Create a new user\"\n      operationId: registerPerson\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PersonRegistrationDetails\"\n      responses:\n        200:\n          description: \"Tokenized person\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TokenizedPerson\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        404:\n          description: \"person already registered who is using this token or cannot find person to register\"\n\n  /mr-api/external-provider/{provider}:\n    parameters:\n      - name: provider\n        in: path\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - AuthService\n      description: \"Gets a login URL for this specified provider if it is supported by the server\"\n      operationId: getLoginUrlForProvider\n      responses:\n        200:\n          description: \"The information required to redirect\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ProviderRedirect\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        404:\n          description: \"not found\"\n  /mr-api/login:\n    post:\n      tags:\n        - AuthService\n      description: \"Login to Feature Hub\"\n      operationId: login\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UserCredentials\"\n      responses:\n        200:\n          description: \"Successfully logged in\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TokenizedPerson\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        403:\n          description: \"login is disabled for this instance\"\n        404:\n          description: \"user is not found\"\n  /mr-api/logout:\n    get:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - AuthService\n      description: \"Get person by token\"\n      operationId: logout\n      responses:\n        204:\n          description: \"Token deactivated\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n\n  /mr-api/authentication/{id}/replaceTempPassword:\n    parameters:\n      - name: id\n        description: \"The id of the person to replace temporary password for\"\n        in: path\n        schema:\n          type: string\n          format: uuid\n        required: true\n    put:\n      tags:\n        - AuthService\n      description: \"Replace temporary password\"\n      x-java-annotations: \"@io.featurehub.mr.api.AllowedDuringPasswordReset\"\n      security:\n        - bearerAuth: [ ]\n      operationId: replaceTempPassword\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PasswordReset\"\n      responses:\n        200:\n          description: \"Successfully reset temporary password\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TokenizedPerson\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        403:\n          description: \"forbidden\"\n\n  /mr-api/authentication/{email}/expiredTokenReset:\n    post:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - AuthService\n      parameters:\n        - name: email\n          in: path\n          description: \"The email address of the person whose expired token to reset\"\n          schema:\n            type: string\n          required: true\n      description: \"Allows an administrator to reset a user's expired token so they can login\"\n      operationId: resetExpiredToken\n      responses:\n        200:\n          description: \"The token of the expired person\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RegistrationUrl\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        403:\n          description: \"forbidden\"\n\n  /mr-api/authentication/{id}/changePassword:\n    parameters:\n      - name: id\n        description: \"The id of the person to change password for\"\n        in: path\n        schema:\n          type: string\n          format: uuid\n        required: true\n    put:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - AuthService\n      description: \"Change password\"\n      operationId: changePassword\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PasswordUpdate\"\n      responses:\n        200:\n          description: \"Successfully updated password\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Person\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        403:\n          description: \"forbidden\"\n\n  /mr-api/authentication/{token}:\n    get:\n      tags:\n        - AuthService\n      description: \"Get person by token\"\n      operationId: personByToken\n      parameters:\n        - name: token\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        200:\n          description: \"Get user by token\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Person\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        404:\n          description: \"not found\"\n\n  /mr-api/authentication/{id}/resetPassword:\n    parameters:\n      - name: id\n        description: \"The id of the person to reset password for\"\n        in: path\n        schema:\n          type: string\n          format: uuid\n        required: true\n    put:\n      tags:\n        - AuthService\n      security:\n        - bearerAuth: [ ]\n      description: \"Reset password\"\n      operationId: resetPassword\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PasswordReset\"\n      responses:\n        200:\n          description: \"Successfully reset password\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Person\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        403:\n          description: \"forbidden\"\n        404:\n          description: \"not found\"\n\n  /mr-api/application/{appId}:\n    parameters:\n      - name: appId\n        description: \"The id of the application to find\"\n        in: path\n        schema:\n          type: string\n          format: uuid\n        required: true\n      - name: includeEnvironments\n        in: query\n        description: \"Include the environments in the result\"\n        schema:\n          type: boolean\n    get:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - ApplicationService\n      description: \"Get application\"\n      operationId: getApplication\n      responses:\n        200:\n          description: \"Resulting application\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Application\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        404:\n          description: \"no application\"\n    put:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - ApplicationService\n      description: \"Update an application\"\n      operationId: updateApplication\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Application\"\n      responses:\n        200:\n          description: \"Resulting portfolio\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Application\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        403:\n          description: \"forbidden\"\n        404:\n          description: \"app not found\"\n        409:\n          description: \"Duplicate application\"\n        422:\n          description: \"Trying to save old record\"\n    delete:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - ApplicationService\n      description: \"Delete an application\"\n      operationId: deleteApplication\n      responses:\n        200:\n          description: \"Did we delete the application\"\n          content:\n            application/json:\n              schema:\n                type: boolean\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        403:\n          description: \"forbidden\"\n        404:\n          description: \"not found\"\n\n\n  /mr-api/application/{appId}/rollout-strategy:\n    parameters:\n      - name: appId\n        description: \"The id of the application to find\"\n        in: path\n        schema:\n          type: string\n          format: uuid\n        required: true\n      - name: includeWhoChanged\n        description: \"include who changed\"\n        in: query\n        schema:\n          type: boolean\n        required: false\n    get:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - RolloutStrategyService\n      operationId: listApplicationRolloutStrategies\n      parameters:\n        - name: includeArchived\n          in: query\n          description: \"Include archived strategies\"\n          schema:\n            type: boolean\n          required: false\n      responses:\n        200:\n          description: \"Get all strategies for this application, regardless if they are in use\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/RolloutStrategyInfo\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        403:\n          description: \"forbidden\"\n        404:\n          description: \"not found\"\n    post:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - RolloutStrategyService\n      operationId: createRolloutStrategy\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/RolloutStrategy\"\n      responses:\n        \"201\":\n          description: \"The created rollout strategy for this application\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RolloutStrategyInfo\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        403:\n          description: \"forbidden to create\"\n        409:\n          description: \"duplicate name\"\n\n  /mr-api/application/{appId}/rollout-strategy-validation:\n    post:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - RolloutStrategyService\n      description: \"Provide server validation responses for this group of rollout strategies\"\n      parameters:\n        - name: appId\n          description: \"The id of the application to find\"\n          in: path\n          schema:\n            type: string\n            format: uuid\n          required: true\n      operationId: validate\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/RolloutStrategyValidationRequest\"\n      responses:\n        200:\n          description: \"validation results\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RolloutStrategyValidationResponse\"\n        400:\n          description: \"invalid body\"\n        401:\n          description: \"no permission\"\n\n  /mr-api/application/{appId}/rollout-strategy/{strategyIdOrName}:\n    parameters:\n      - name: appId\n        description: \"The id of the application to find\"\n        in: path\n        schema:\n          type: string\n          format: uuid\n        required: true\n      - name: strategyIdOrName\n        description: \"The id of the strategy or the unique name of it\"\n        in: path\n        schema:\n          type: string\n        required: true\n      - name: includeWhoChanged\n        description: \"include who changed\"\n        in: query\n        schema:\n          type: boolean\n        required: false\n    get:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - RolloutStrategyService\n      operationId: getRolloutStrategy\n      responses:\n        200:\n          description: \"The rollout strategy for this application\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RolloutStrategyInfo\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        403:\n          description: \"forbidden\"\n        404:\n          description: \"If there is no rollout strategy by that id or name\"\n    put:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - RolloutStrategyService\n      operationId: updateRolloutStrategy\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/RolloutStrategy\"\n      responses:\n        200:\n          description: \"The created rollout strategy for this application\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RolloutStrategyInfo\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        403:\n          description: \"forbidden\"\n        404:\n          description: \"not found\"\n        409:\n          description: \"duplicate strategy name\"\n    delete:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - RolloutStrategyService\n      operationId: deleteRolloutStrategy\n      responses:\n        200:\n          description: \"The deleted rollout strategy for this application including its archive date\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RolloutStrategyInfo\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        403:\n          description: \"forbidden\"\n        404:\n          description: \"strategy not found, could not delete\"\n  /mr-api/application/{id}/features:\n    parameters:\n      - name: id\n        description: \"The id of the application to find\"\n        in: path\n        schema:\n          type: string\n          format: uuid\n        required: true\n      - name: includeMetaData\n        description: \"Include the metadata in the returned feature objects. Can be large.\"\n        in: query\n        schema:\n          type: boolean\n        required: false\n    get:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - FeatureService\n      description: \"get all features available in this application\"\n      operationId: getAllFeaturesForApplication\n      responses:\n        200:\n          description: \"Gets all features, alphabetically sorted\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Feature\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        403:\n          description: \"forbidden\"\n    post:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - FeatureService\n      description: \"add a new feature to this application, returns all features.\"\n      operationId: createFeaturesForApplication\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Feature\"\n      responses:\n        200:\n          description: \"All features, alphabetically sorted\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Feature\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        409:\n          description: \"Duplicate feature\"\n  /mr-api/application/{id}/features/{key}:\n    parameters:\n      - name: id\n        description: \"The id of the application to find\"\n        in: path\n        schema:\n          type: string\n          format: uuid\n        required: true\n      - name: key\n        description: \"The named unique key of the associated feature\"\n        in: path\n        schema:\n          type: string\n        required: true\n      - name: includeMetaData\n        description: \"Include the metadata in the returned feature objects. Can be large.\"\n        in: query\n        schema:\n          type: boolean\n        required: false\n    get:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - FeatureService\n      description: \"get an individual feature\"\n      operationId: getFeatureByKey\n      responses:\n        200:\n          description: \"All features, alphabetically sorted\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Feature\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        404:\n          description: \"not found\"\n    put:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - FeatureService\n      description: \"updates all named features in this application, returns all features.\"\n      operationId: updateFeatureForApplication\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Feature\"\n      responses:\n        200:\n          description: \"All features, alphabetically sorted\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Feature\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        404:\n          description: \"not found\"\n        409:\n          description: \"duplicate feature\"\n        422:\n          description: \"other feature updated already\"\n    delete:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - FeatureService\n      description: \"updates all named features in this application, returns all features.\"\n      operationId: deleteFeatureForApplication\n      responses:\n        200:\n          description: \"All features, alphabetically sorted\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Feature\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        404:\n          description: \"none found\"\n  /mr-api/application/{id}/feature-environments/{key}:\n    parameters:\n      - name: id\n        description: \"The id of the application to find\"\n        in: path\n        schema:\n          type: string\n          format: uuid\n        required: true\n      - name: key\n        description: \"The key of the associated feature\"\n        in: path\n        schema:\n          type: string\n        required: true\n    get:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - FeatureService\n      description: \"Get a list of all environments and features and their values that this user has access to\"\n      operationId: getAllFeatureValuesByApplicationForKey\n      responses:\n        200:\n          description: \"Gets all feature values for all environments for an application\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/FeatureEnvironment\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        404:\n          description: \"not found\"\n\n    put:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - FeatureService\n      description: \"Update a list of all environments and features and their values that this user has access to\"\n      operationId: updateAllFeatureValuesByApplicationForKey\n      parameters:\n        - name: removeValuesNotPassed\n          description: \"The id of the application to find\"\n          in: query\n          schema:\n            type: boolean\n          required: false\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: \"#/components/schemas/FeatureValue\"\n      responses:\n        200:\n          description: \"Gets all feature values for all environments for an application\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/FeatureEnvironment\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        409:\n          description: \"Conflict in trying to save, someone else updated a record first\"\n        422:\n          description: \"There were validation failures in the rollout strategies\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RolloutStrategyValidationResponse\"\n  /mr-api/application/{id}/all-feature-environment:\n    parameters:\n      - name: id\n        description: \"The id of the application to find\"\n        in: path\n        schema:\n          type: string\n          format: uuid\n        required: true\n    get:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - FeatureService\n      description: \"Get a list of all environments and features and their values that this user has access to\"\n      operationId: findAllFeatureAndFeatureValuesForEnvironmentsByApplication\n      responses:\n        200:\n          description: \"Gets all portfolios, alphabetically sorted\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApplicationFeatureValues\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        404:\n          description: \"not found\"\n\n  /mr-api/application/{id}/environment-ordering:\n    parameters:\n      - name: id\n        description: \"The id of the application to find\"\n        in: path\n        schema:\n          type: string\n          format: uuid\n        required: true\n    post:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - EnvironmentService\n      description: \"this api is designed to update the ordering of environments. it will error on circular references or environments that don't exist.\"\n      operationId: environmentOrdering\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: \"#/components/schemas/Environment\"\n      responses:\n        200:\n          description: \"returns all environments with no particular sort order.\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Environment\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        403:\n          description: \"forbidden\"\n        404:\n          description: \"not found\"\n  /mr-api/application/{id}/environment:\n    parameters:\n      - name: id\n        description: \"The id of the application to find\"\n        in: path\n        schema:\n          type: string\n          format: uuid\n        required: true\n    get:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - EnvironmentService\n      description: \"Gets a list of environments.\"\n      operationId: findEnvironments\n      parameters:\n        - name: order\n          in: query\n          description: \"how to order the results\"\n          schema:\n            $ref: \"#/components/schemas/SortOrder\"\n        - name: filter\n          in: query\n          description: \"What to filter the results by\"\n          schema:\n            type: string\n        - name: includeAcls\n          description: \"Include the acls attached to this environment\"\n          in: query\n          schema:\n            type: boolean\n        - name: includeFeatures\n          description: \"Include the features attached to this environment\"\n          in: query\n          schema:\n            type: boolean\n      responses:\n        200:\n          description: \"Gets all portfolios, alphabetically sorted\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Environment\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n\n    post:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - EnvironmentService\n      description: \"Create a new environment\"\n      operationId: createEnvironment\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Environment\"\n      responses:\n        200:\n          description: \"Resulting environment\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Environment\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        403:\n          description: \"forbidden\"\n        404:\n          description: \"application not found\"\n        409:\n          description: \"duplicate environment\"\n\n  /mr-api/environment/{eid}:\n    parameters:\n      - name: eid\n        description: \"The id of the environment to find\"\n        in: path\n        schema:\n          type: string\n          format: uuid\n        required: true\n      - name: includeAcls\n        description: \"Include the acls attached to this environment\"\n        in: query\n        schema:\n          type: boolean\n      - name: includeFeatures\n        description: \"Include the features attached to this environment\"\n        in: query\n        schema:\n          type: boolean\n    get:\n      parameters:\n        - name: includeSdkUrl\n          description: \"include the sdk url\"\n          in: query\n          schema:\n            type: boolean\n        - name: includeServiceAccounts\n          description: \"Include the service accounts attached to this environment\"\n          in: query\n          schema:\n            type: boolean\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - EnvironmentService\n      description: \"Get environment\"\n      operationId: getEnvironment\n      responses:\n        200:\n          description: \"Resulting environment\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Environment\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        403:\n          description: \"forbidden\"\n    put:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - EnvironmentService\n      description: \"Update an environment\"\n      operationId: updateEnvironment\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Environment\"\n      responses:\n        200:\n          description: \"Resulting portfolio\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Environment\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        404:\n          description: \"No environment found to update TODO: fix, should be 404 or 403\"\n        409:\n          description: \"Duplicate environment\"\n        422:\n          description: \"Updating old environment\"\n    delete:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - EnvironmentService\n      description: \"Delete an environment\"\n      operationId: deleteEnvironment\n      responses:\n        200:\n          description: \"Did we delete the environment.\"\n          content:\n            application/json:\n              schema:\n                type: boolean\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n\n  /mr-api/features/{eid}:\n    parameters:\n      - name: eid\n        description: \"The id of the environment to find features or 'latest'\"\n        in: path\n        schema:\n          type: string\n          format: uuid\n        required: true\n    get:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - EnvironmentFeatureService\n      parameters:\n        - name: filter\n          description: \"Filter the feature names by this filter.\"\n          in: query\n          schema:\n            type: string\n          required: false\n      description: \"Get all features for this environment\"\n      operationId: getFeaturesForEnvironment\n      responses:\n        200:\n          description: \"Resulting features\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/EnvironmentFeaturesResult\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        403:\n          description: \"forbidden\"\n    put:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - EnvironmentFeatureService\n      description: \"Update all features for this environment\"\n      operationId: updateAllFeaturesForEnvironment\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: \"#/components/schemas/FeatureValue\"\n      responses:\n        200:\n          description: \"Resulting features\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/FeatureValue\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        403:\n          description: \"Forbidden, no permission to change role\"\n        404:\n          description: \"not found\"\n        409:\n          description: \"Conflict in trying to save, someone else updated a record first\"\n        422:\n          description: \"There were validation failures in the rollout strategies\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RolloutStrategyValidationResponse\"\n  /mr-api/features/{eid}/feature/{key}:\n    parameters:\n      - name: eid\n        description: \"The id of the environment to find features\"\n        in: path\n        schema:\n          type: string\n          format: uuid\n        required: true\n      - name: key\n        description: \"The key of the relevant feature\"\n        in: path\n        schema:\n          type: string\n        required: true\n    get:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - EnvironmentFeatureService\n      description: \"Update a specific feature in this environment.\"\n      operationId: getFeatureForEnvironment\n      responses:\n        200:\n          description: \"Resulting feature\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FeatureValue\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        403:\n          description: \"forbidden\"\n        404:\n          description: \"not found\"\n    put:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - EnvironmentFeatureService\n      description: \"Update a specific feature in this environment.\"\n      operationId: updateFeatureForEnvironment\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/FeatureValue\"\n      responses:\n        200:\n          description: \"Resulting features\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FeatureValue\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        403:\n          description: \"forbidden\"\n        409:\n          description: \"Conflict in trying to save, someone else updated a record first\"\n        422:\n          description: \"There were validation failures in the rollout strategies\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RolloutStrategyValidationResponse\"\n    post:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - EnvironmentFeatureService\n      description: \"Create a specific feature in this environment.\"\n      operationId: createFeatureForEnvironment\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/FeatureValue\"\n      responses:\n        200:\n          description: \"Resulting features\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FeatureValue\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        403:\n          description: \"No permission to change role\"\n        404:\n          description: \"No feature for that environment found\"\n        409:\n          description: \"Conflict in trying to save, someone else updated a record first\"\n        422:\n          description: \"There were validation failures in the rollout strategies\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RolloutStrategyValidationResponse\"\n    delete:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - EnvironmentFeatureService\n      description: \"Delete a specific feature in this environment.\"\n      operationId: deleteFeatureForEnvironment\n      responses:\n        204:\n          description: \"No data returned.\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        403:\n          description: \"forbidden\"\n        404:\n          description: \"not found\"\n  /mr-api/group/{gid}:\n    parameters:\n      - name: gid\n        description: \"The id of the group to find\"\n        in: path\n        schema:\n          type: string\n          format: uuid\n        required: true\n      - name: includeMembers\n        description: \"include people in each group\"\n        in: query\n        schema:\n          type: boolean\n      - name: includeGroupRoles\n        description: \"include environment and application roles in each group\"\n        in: query\n        schema:\n          type: boolean\n    get:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - GroupService\n      parameters:\n        - name: byApplicationId\n          in: query\n          schema:\n            type: string\n            format: uuid\n      description: \"Get group\"\n      operationId: getGroup\n      responses:\n        200:\n          description: \"Resulting group\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Group\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        403:\n          description: \"forbidden\"\n        404:\n          description: \"not found\"\n    put:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - GroupService\n      description: \"Update a group\"\n      operationId: updateGroup\n      parameters:\n        - name: updateMembers\n          description: \"update members, deleting those that are not passed\"\n          in: query\n          schema:\n            type: boolean\n        - name: updateEnvironmentGroupRoles\n          description: \"update environment group roles, deleting any not passed\"\n          in: query\n          schema:\n            type: boolean\n        - name: updateApplicationGroupRoles\n          description: \"update application group roles, deleting any not passed\"\n          in: query\n          schema:\n            type: boolean\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Group\"\n      responses:\n        200:\n          description: \"Resulting group\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Group\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        403:\n          description: \"forbidden\"\n        404:\n          description: \"not found\"\n        409:\n          description: \"duplicate user or duplicate group\"\n        422:\n          description: \"version conflict\"\n    delete:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - GroupService\n      description: \"Delete a group\"\n      operationId: deleteGroup\n      responses:\n        200:\n          description: \"Did we delete the group?\"\n          content:\n            application/json:\n              schema:\n                type: boolean\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        403:\n          description: \"forbidden\"\n        404:\n          description: \"not found\"\n  /mr-api/group/{gid}/person/{pId}:\n    parameters:\n      - name: gid\n        description: \"The id of the group to find\"\n        in: path\n        schema:\n          type: string\n          format: uuid\n        required: true\n      - name: pId\n        description: \"The id of the person to add/delete\"\n        in: path\n        schema:\n          type: string\n          format: uuid\n        required: true\n      - name: includeMembers\n        description: \"include people in each group\"\n        in: query\n        schema:\n          type: boolean\n    post:\n      tags:\n        - GroupService\n      security:\n        - bearerAuth: [ ]\n      description: \"Add a person to a group\"\n      operationId: addPersonToGroup\n      responses:\n        200:\n          description: \"Resulting group\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Group\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        403:\n          description: \"forbidden\"\n        404:\n          description: \"group or person not found\"\n    delete:\n      tags:\n        - GroupService\n      security:\n        - bearerAuth: [ ]\n      description: \"Remove a person from a group\"\n      operationId: deletePersonFromGroup\n      responses:\n        200:\n          description: \"Resulting group\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Group\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        403:\n          description: \"forbidden\"\n        404:\n          description: \"not found\"\n  /mr-api/portfolio/{id}/service-account:\n    parameters:\n      - name: id\n        description: \"the portfolio this service account belongs to\"\n        in: path\n        required: true\n        schema:\n          type: string\n          format: uuid\n      - name: includePermissions\n        description: \"include permissions in return\"\n        in: query\n        schema:\n          type: boolean\n    get:\n      tags:\n        - ServiceAccountService\n      security:\n        - bearerAuth: [ ]\n      description: \"Get list of all service accounts this user can see\"\n      parameters:\n        - name: filter\n          description: \"include environments for each account\"\n          in: query\n          schema:\n            type: string\n        - name: applicationId\n          description: \"Application ID to filter on\"\n          in: query\n          schema:\n            type: string\n            format: uuid\n        - name: includeSdkUrls\n          description: \"Include the SDKs for environments the user has access to\"\n          in: query\n          schema:\n            type: boolean\n      operationId: searchServiceAccountsInPortfolio\n      responses:\n        200:\n          description: \"List of service accounts found\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ServiceAccount\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n    post:\n      tags:\n        - ServiceAccountService\n      security:\n        - bearerAuth: [ ]\n      description: \"Add a new service account\"\n      operationId: createServiceAccountInPortfolio\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ServiceAccount\"\n      responses:\n        200:\n          description: \"Newly created service account\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceAccount\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        403:\n          description: \"forbidden\"\n        409:\n          description: \"duplicate\"\n  /mr-api/service-account/{id}:\n    parameters:\n      - name: id\n        description: \"the id for the service account to get\"\n        in: path\n        required: true\n        schema:\n          type: string\n          format: uuid\n      - name: includePermissions\n        description: \"include permissions in return\"\n        in: query\n        schema:\n          type: boolean\n    get:\n      tags:\n        - ServiceAccountService\n      security:\n        - bearerAuth: [ ]\n      description: \"Get service account by id or 'self' if authenticated as this service account\"\n      operationId: getServiceAccount\n      parameters:\n        - name: byApplicationId\n          in: query\n          schema:\n            type: string\n            format: uuid\n      responses:\n        200:\n          description: \"Details of service account\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceAccount\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        403:\n          description: \"forbidden\"\n        404:\n          description: \"not found\"\n    put:\n      tags:\n        - ServiceAccountService\n      security:\n        - bearerAuth: [ ]\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ServiceAccount\"\n      description: \"Update this service account, overwiting any attached environment permissions this user has access to\"\n      operationId: updateServiceAccount\n      responses:\n        200:\n          description: \"Details of service account\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceAccount\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        403:\n          description: \"forbidden\"\n        404:\n          description: \"trying to update SA that doesn't exist\"\n        422:\n          description: \"trying to update old version\"\n\n    delete:\n      tags:\n        - ServiceAccountService\n      security:\n        - bearerAuth: [ ]\n      description: \"Delete this service account, cascade removes all permissions\"\n      operationId: deleteServiceAccount\n      responses:\n        200:\n          description: \"Details of service account\"\n          content:\n            application/json:\n              schema:\n                type: boolean\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        403:\n          description: \"forbidden\"\n        404:\n          description: \"not found\"\n  /mr-api/service-account/{id}/reset-api-key:\n    post:\n      tags:\n        - ServiceAccountService\n      security:\n        - bearerAuth: [ ]\n      description: \"Causes a new API Key to be generated. Ensure you confirm this with the user.\"\n      operationId: resetApiKey\n      parameters:\n        - name: id\n          description: \"the id for the service account to get\"\n          required: true\n          in: path\n          schema:\n            type: string\n            format: uuid\n        - name: apiKeyType\n          description: \"Type of the API key\"\n          in: query\n          required: false\n          schema:\n            $ref: \"#/components/schemas/ResetApiKeyType\"\n      responses:\n        200:\n          description: \"Details of service account\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceAccount\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        403:\n          description: \"forbidden\"\n        404:\n          description: \"not found\"\n  /mr-api/initialize:\n    get:\n      tags:\n        - SetupService\n      description: \"Ping Feature Hub\"\n      operationId: isInstalled\n      responses:\n        200:\n          description: \"Hello from Feature Hub\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SetupResponse\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        404:\n          description: \"Feature Hub not found\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SetupMissingResponse\"\n    post:\n      tags:\n        - SetupService\n      description: \"Setup site admin\"\n      operationId: setupSiteAdmin\n      responses:\n        200:\n          description: \"Successfully setup site admin\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TokenizedPerson\"\n        400:\n          description: \"Bad Request\"\n        401:\n          description: \"no permission\"\n        409:\n          description: \"duplicate\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SetupSiteAdmin'\n        description: 'setupSiteAdmin'\n        required: true\ncomponents:\n  securitySchemes:\n    bearerAuth: # arbitrary name for the security scheme\n      type: http\n      scheme: bearer\n      bearerFormat: JWT    # optional, arbitrary value for documentation purposes\n  schemas:\n    EnvironmentFeaturesResult:\n      properties:\n        featureValues:\n          type: array\n          items:\n            $ref: \"#/components/schemas/FeatureValue\"\n        environments:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Environment\"\n        applications:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Application\"\n        features:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Feature\"\n    SearchPersonResult:\n      required:\n        - max\n        - people\n      properties:\n        max:\n          type: integer\n        people:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Person\"\n        outstandingRegistrations:\n          type: array\n          items:\n            $ref: \"#/components/schemas/OutstandingRegistration\"\n    OutstandingRegistration:\n      type: object\n      required:\n        - id\n        - token\n        - expired\n      properties:\n        id:\n          type: string\n          format: uuid\n        token:\n          type: string\n        expired:\n          type: boolean\n    SetupSiteAdmin:\n      required:\n        - organizationName\n        - portfolio\n      properties:\n        portfolio:\n          type: string\n        organizationName:\n          type: string\n        emailAddress:\n          description: \"User's email or blank if using oauth/saml\"\n          format: email\n          type: string\n        password:\n          description: \"User's password or blank if using oauth/saml\"\n          type: string\n        name:\n          description: \"user's name. Will be take from external provider if using oauth/saml\"\n          type: string\n        authProvider:\n          description: \"If the site is using external providers, this is the key of the provider chosen. If there is only one, it can be blank.\"\n          type: string\n      type: object\n    SetupResponse:\n      type: object\n      properties:\n        organization:\n          $ref: \"#/components/schemas/Organization\"\n        providers:\n          type: array\n          items:\n            type: string\n        providerInfo:\n          type: object\n          additionalProperties:\n            $ref: \"#/components/schemas/IdentityProviderInfo\"\n        redirectUrl:\n          description: \"Set if there is only one external provider and no local. Allows immediate redirect to provider. It assumes it will be used immediate (e.g. state in oauth2 url)\"\n          type: string\n    IdentityProviderInfo:\n      type: object\n      required:\n        - buttonBackgroundColor\n        - buttonIcon\n        - buttonText\n      properties:\n        buttonIcon:\n          type: string\n        buttonBackgroundColor:\n          type: string\n        buttonText:\n          type: string\n    SetupMissingResponse:\n      type: object\n      properties:\n        providers:\n          type: array\n          items:\n            type: string\n        providerInfo:\n          type: object\n          additionalProperties:\n            $ref: \"#/components/schemas/IdentityProviderInfo\"\n    ProviderRedirect:\n      type: object\n      properties:\n        redirectUrl:\n          type: string\n    TokenizedPerson:\n      properties:\n        accessToken:\n          type: string\n        refreshToken:\n          type: string\n        redirectUrl:\n          type: string\n        person:\n          $ref: \"#/components/schemas/Person\"\n    RegistrationUrl:\n      required:\n        - token\n        - personId\n      properties:\n        registrationUrl:\n          type: string\n        personId:\n          type: string\n          format: uuid\n        token:\n          type: string\n    PersonRegistrationDetails:\n      required:\n        - name\n        - email\n        - password\n        - confirmPassword\n        - registrationToken\n      properties:\n        name:\n          type: string\n          maxLength: 100\n          minLength: 1\n        email:\n          type: string\n          maxLength: 100\n          minLength: 1\n          format: email\n        password:\n          type: string\n          maxLength: 40\n          minLength: 1\n          format: password\n        confirmPassword:\n          type: string\n          maxLength: 40\n          minLength: 1\n          format: password\n        registrationToken:\n          type: string\n    AdminServiceResetTokenResponse:\n      required:\n        - token\n      properties:\n        token:\n          type: string\n    CreatePersonDetails:\n      properties:\n        email:\n          type: string\n          minLength: 1\n          maxLength: 100\n          format: email\n        personType:\n          $ref: \"#/components/schemas/PersonType\"\n        name:\n          type: string\n          minLength: 1\n          maxLength: 100\n        groupIds:\n          type: array\n          items:\n            type: string\n            format: uuid\n    UserCredentials:\n      required:\n        - email\n        - password\n      properties:\n        email:\n          type: string\n          maxLength: 100\n          format: email\n        password:\n          type: string\n          format: password\n          maxLength: 100\n    PasswordReset:\n      required:\n        - password\n      properties:\n        password:\n          type: string\n        reactivate:\n          type: boolean\n    PasswordUpdate:\n      required:\n        - oldPassword\n        - newPassword\n      properties:\n        oldPassword:\n          maxLength: 100\n          format: password\n          type: string\n        newPassword:\n          maxLength: 100\n          format: password\n          type: string\n    RolloutStrategyInfo:\n      required:\n        - rolloutStrategy\n      properties:\n        rolloutStrategy:\n          $ref: \"#/components/schemas/RolloutStrategy\"\n        whenArchived:\n          type: string\n          format: date-time\n        changedBy:\n          $ref: \"#/components/schemas/Person\"\n    RolloutStrategyValidationRequest:\n      type: object\n      description: \"A collection of strategies to validate together to see if it violates any rules\"\n      properties:\n        customStrategies:\n          type: array\n          items:\n            $ref: \"#/components/schemas/RolloutStrategy\"\n        sharedStrategies:\n          type: array\n          items:\n            $ref: \"#/components/schemas/RolloutStrategyInstance\"\n    CustomRolloutStrategyViolation:\n      type: object\n      properties:\n        strategy:\n          $ref: \"#/components/schemas/RolloutStrategy\"\n        violations:\n          type: array\n          items:\n            $ref: \"#/components/schemas/RolloutStrategyViolation\"\n    SharedRolloutStrategyViolation:\n      type: object\n      properties:\n        strategy:\n          $ref: \"#/components/schemas/RolloutStrategyInstance\"\n        violation:\n          type: array\n          items:\n            $ref: \"#/components/schemas/RolloutStrategyViolation\"\n    RolloutStrategyValidationResponse:\n      type: object\n      properties:\n        customStategyViolations:\n          type: array\n          items:\n            $ref: \"#/components/schemas/CustomRolloutStrategyViolation\"\n        sharedStrategyViolations:\n          type: array\n          items:\n            $ref: \"#/components/schemas/SharedRolloutStrategyViolation\"\n        violations:\n          type: array\n          items:\n            $ref: \"#/components/schemas/RolloutStrategyCollectionViolationType\"\n    RolloutStrategyViolation:\n      type: object\n      required:\n        - violation\n      properties:\n        id:\n          description: \"The id of the attribute (if any)\"\n          type: string\n        violation:\n          $ref: \"#/components/schemas/RolloutStrategyViolationType\"\n    RolloutStrategyViolationType:\n      type: string\n      enum:\n        - no_name\n        - name_too_long\n        - empty_match_criteria\n        - negative_percentage\n        - percentage_over_100_percent\n        - array_attribute_no_values\n        - attr_invalid_well_known_enum\n        - attr_missing_value\n        - attr_missing_conditional\n        - attr_missing_field_name\n        - attr_missing_field_type\n        - attr_val_not_semantic_version\n        - attr_val_not_number\n        - attr_val_not_date\n        - attr_val_not_date_time\n        - attr_val_not_cidr\n        - attr_unknown_failure\n    RolloutStrategyCollectionViolationType:\n      type: string\n      enum:\n        - percentage_adds_over_100_percent\n    ResetApiKeyType:\n      type: string\n      enum:\n        - client_eval_only\n        - server_eval_only\n    FeatureEnvironment:\n      properties:\n        environment:\n          $ref: \"#/components/schemas/Environment\"\n        roles:\n          description: \"the roles of this person in this environment\"\n          type: array\n          items:\n            $ref: \"#/components/schemas/RoleType\"\n        featureValue:\n          $ref: \"#/components/schemas/FeatureValue\"\n        serviceAccounts:\n          type: array\n          items:\n            $ref: \"#/components/schemas/ServiceAccount\"\n    ApplicationFeatureValues:\n      properties:\n        applicationId:\n          type: string\n          format: uuid\n        features:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Feature\"\n        environments:\n          type: array\n          items:\n            $ref: \"#/components/schemas/EnvironmentFeatureValues\"\n    EnvironmentFeatureValues:\n      properties:\n        environmentId:\n          type: string\n          format: uuid\n        environmentName:\n          type: string\n        priorEnvironmentId:\n          type: string\n          format: uuid\n        features:\n          description: \"the values of the features depending on access\"\n          type: array\n          items:\n            $ref: \"#/components/schemas/FeatureValue\"\n        roles:\n          description: \"the roles of this person in this environment\"\n          type: array\n          items:\n            $ref: \"#/components/schemas/RoleType\"\n    Feature:\n      description: \"exists simply to hold the name of the feature as it exists across all environments\"\n      required:\n        - name\n      properties:\n        id:\n          type: string\n          format: uuid\n        key:\n          type: string\n          description: \"Unique within this application\"\n        alias:\n          type: string\n          description: \"use this in code, as then people cannot guess your new features from their names\"\n        link:\n          type: string\n        name:\n          type: string\n          description: \"description if any\"\n        valueType:\n          $ref: \"#/components/schemas/FeatureValueType\"\n        version:\n          description: \"used for optimistic locking when renaming a feature\"\n          type: integer\n          format: int64\n        whenArchived:\n          type: string\n          format: date-time\n        secret:\n          type: boolean\n          description: \"should the config remain invisible to users without secret permission\"\n        description:\n          type: string\n          maxLength: 300\n        metaData:\n          type: string\n          description: Metadata that may need to be stored. Intended for ADK use. No data limit (stored as CLOB)\n    FeatureValue:\n      required:\n        - key\n        - locked\n      properties:\n        id:\n          type: string\n          format: uuid\n        key:\n          type: string\n        locked:\n          type: boolean\n        valueString:\n          description: \"default value if no strategy matches. interpreted by type in parent\"\n          type: string\n        valueNumber:\n          type: number\n        valueBoolean:\n          type: boolean\n        valueJson:\n          type: string\n        retired:\n          type: boolean\n          description: \"if false or null, this feature will visible on edge. if true, it will not be passed to the client\"\n        rolloutStrategyInstances:\n          type: array\n          items:\n            $ref: \"#/components/schemas/RolloutStrategyInstance\"\n        rolloutStrategies:\n          description: \"These are custom rollout strategies that only apply to this feature value.\"\n          type: array\n          items:\n            $ref: \"#/components/schemas/RolloutStrategy\"\n        sharedRolloutStrategies:\n          description: \"This is list is either provided empty (when publishing) or anemic so the MR will client will understand which shared strategies are attached without having to back-call. If provided\n                        then it will mirror rolloutStrategyInstances and only enabled ones will be passed back. The value from the rolloutStrategyInstance will be embedded. This field will\n                        _always_ be ignored when being sent back to the server, only rolloutStrategyInstances is used.\"\n          type: array\n          items:\n            $ref: \"#/components/schemas/RolloutStrategy\"\n        environmentId:\n          type: string\n          format: uuid\n        version:\n          description: \"used for optimistic locking\"\n          type: integer\n          format: int64\n        whoUpdated:\n          $ref: \"#/components/schemas/Person\"\n        whenUpdated:\n          type: string\n          format: date-time\n        whatUpdated:\n          type: string\n    RolloutStrategyInstance:\n      properties:\n        name:\n          description: \"This is copied from the shared rollout strategy on return, it is read only from the client perspective\"\n          type: string\n        strategyId:\n          type: string\n          format: uuid\n        value:\n          description: \"the value for this rollout strategy for this feature value\"\n        disabled:\n          type: boolean\n    Audit:\n      properties:\n        createdBy:\n          allOf:\n            - $ref: \"#/components/schemas/Person\"\n        updatedBy:\n          allOf:\n            - $ref: \"#/components/schemas/Person\"\n        whenCreated:\n          type: string\n          format: date-time\n        whenUpdated:\n          type: string\n          format: date-time\n    SortOrder:\n      type: string\n      enum:\n        - ASC\n        - DESC\n    Portfolio:\n      allOf:\n        - $ref: \"#/components/schemas/Audit\"\n        - type: object\n          required:\n            - name\n          properties:\n            id:\n              type: string\n              format: uuid\n            name:\n              type: string\n              minLength: 1\n              maxLength: 200\n            description:\n              type: string\n              maxLength: 400\n            version:\n              type: integer\n              format: int64\n            organizationId:\n              type: string\n              format: uuid\n            groups:\n              type: array\n              items:\n                $ref: \"#/components/schemas/Group\"\n            applications:\n              type: array\n              items:\n                $ref: \"#/components/schemas/Application\"\n            whenArchived:\n              type: string\n              format: date-time\n    Application:\n      allOf:\n        - $ref: \"#/components/schemas/Audit\"\n        - type: object\n          required:\n            - name\n          properties:\n            id:\n              type: string\n              format: uuid\n            name:\n              type: string\n              maxLength: 100\n            description:\n              type: string\n              maxLength: 400\n            portfolioId:\n              type: string\n              format: uuid\n            version:\n              type: integer\n              format: int64\n            groups:\n              type: array\n              items:\n                $ref: \"#/components/schemas/Group\"\n            features:\n              type: array\n              items:\n                $ref: \"#/components/schemas/Feature\"\n            environments:\n              type: array\n              items:\n                $ref: \"#/components/schemas/Environment\"\n            whenArchived:\n              type: string\n              format: date-time\n    Person:\n      type: object\n      properties:\n        id:\n          $ref: \"#/components/schemas/PersonId\"\n        name:\n          type: string\n          minLength: 1\n          maxLength: 150\n        email:\n          type: string\n          format: email\n          maxLength: 100\n        personType:\n          $ref: \"#/components/schemas/PersonType\"\n        other:\n          type: string\n        source:\n          type: string\n        version:\n          type: integer\n          format: int64\n        passwordRequiresReset:\n          type: boolean\n        groups:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Group\"\n        whenArchived:\n          type: string\n          format: date-time\n        whenLastAuthenticated:\n          description: \"This is the timestamp in UTC when they last logged into the system\"\n          type: string\n          format: date-time\n        whenLastSeen:\n          description: \"This is the timestamp in UTC when they last made a request to the system on their most recent login. If it is null it means they have no current token or have never logged in.\"\n          type: string\n          format: date-time\n        additional:\n          type: array\n          items:\n            $ref: \"#/components/schemas/PersonInfo\"\n    PersonInfo:\n      type: object\n      required:\n        - key\n        - value\n      properties:\n        key:\n          type: string\n        value:\n          type: string\n    PersonType:\n      type: string\n      default: person\n      enum:\n        - person\n        - serviceAccount\n    PersonId:\n      required:\n        - id\n      properties:\n        id:\n          type: string\n          format: uuid\n    Environment:\n      allOf:\n        - $ref: \"#/components/schemas/Audit\"\n        - type: object\n          required:\n            - name\n          properties:\n            id:\n              type: string\n              format: uuid\n            applicationId:\n              type: string\n              format: uuid\n            name:\n              type: string\n              minLength: 1\n              maxLength: 150\n            priorEnvironmentId:\n              type: string\n              format: uuid\n            version:\n              type: integer\n              format: int64\n            description:\n              type: string\n              maxLength: 400\n            production:\n              description: \"is this a production environment?\"\n              type: boolean\n            groupRoles:\n              type: array\n              items:\n                $ref: \"#/components/schemas/EnvironmentGroupRole\"\n            features:\n              type: array\n              items:\n                $ref: \"#/components/schemas/Feature\"\n            serviceAccountPermission:\n              type: array\n              items:\n                $ref: \"#/components/schemas/ServiceAccountPermission\"\n            whenArchived:\n              type: string\n              format: date-time\n\n    ServiceAccount:\n      required:\n        - name\n      properties:\n        id:\n          type: string\n          format: uuid\n        name:\n          type: string\n          minLength: 1\n          maxLength: 70\n        portfolioId:\n          type: string\n          format: uuid\n        description:\n          type: string\n          maxLength: 400\n        version:\n          type: integer\n          format: int64\n        apiKeyClientSide:\n          type: string\n          description: \"this is a read only field, it denotes an api key where the eval is done client side\"\n          maxLength: 400\n        apiKeyServerSide:\n          type: string\n          description: \"this is a read only field, it denotes an api key where the eval is done server side\"\n          maxLength: 400\n        permissions:\n          type: array\n          items:\n            $ref: \"#/components/schemas/ServiceAccountPermission\"\n        whenArchived:\n          type: string\n          format: date-time\n    ServiceAccountPermission:\n      required:\n        - permissions\n        - environmentId\n      properties:\n        id:\n          type: string\n          format: uuid\n        permissions:\n          type: array\n          items:\n            $ref: \"#/components/schemas/RoleType\"\n        serviceAccount:\n          description: \"The service account associated with this permission. Only filled in when coming from Environment\"\n          $ref: \"#/components/schemas/ServiceAccount\"\n        environmentId:\n          type: string\n          format: uuid\n        sdkUrlClientEval:\n          description: \"Optional if they have chosen includeSdkUrl\"\n          type: string\n        sdkUrlServerEval:\n          description: \"Optional if they have chosen includeSdkUrl\"\n          type: string\n    Group:\n      allOf:\n        - $ref: \"#/components/schemas/Audit\"\n        - type: object\n          required:\n            - name\n          properties:\n            id:\n              type: string\n              format: uuid\n            admin:\n              description: \"is this an admin group?\"\n              type: boolean\n            portfolioId:\n              type: string\n              format: uuid\n            organizationId:\n              description: \"this will be the organisation this group belongs to at the top level, or if a portfolio group, the organisation of the portfolio\"\n              type: string\n              format: uuid\n            version:\n              type: integer\n              format: int64\n            name:\n              type: string\n              minLength: 1\n              maxLength: 255\n            members:\n              type: array\n              items:\n                $ref: \"#/components/schemas/Person\"\n            applicationRoles:\n              type: array\n              items:\n                $ref: \"#/components/schemas/ApplicationGroupRole\"\n            environmentRoles:\n              type: array\n              items:\n                $ref: \"#/components/schemas/EnvironmentGroupRole\"\n            whenArchived:\n              type: string\n              format: date-time\n    ApplicationGroupRole:\n      required:\n        - applicationId\n        - groupId\n        - roles\n      properties:\n        applicationId:\n          type: string\n          format: uuid\n        groupId:\n          type: string\n          format: uuid\n        roles:\n          type: array\n          items:\n            $ref: \"#/components/schemas/ApplicationRoleType\"\n    ApplicationRoleType:\n      type: string\n      enum:\n        - FEATURE_EDIT\n    EnvironmentGroupRole:\n      required:\n        - environmentId\n        - groupId\n        - roles\n      properties:\n        environmentId:\n          type: string\n          format: uuid\n        groupId:\n          type: string\n          format: uuid\n        roles:\n          type: array\n          items:\n            $ref: \"#/components/schemas/RoleType\"\n    Organization:\n      allOf:\n        - $ref: \"#/components/schemas/Audit\"\n        - type: object\n          required:\n            - name\n          properties:\n            id:\n              type: string\n              format: uuid\n            version:\n              type: integer\n              format: int64\n            name:\n              type: string\n              minLength: 1\n              maxLength: 255\n            admin:\n              type: boolean\n            authorizationUrl:\n              description: \"If provided, the browser should redirect to this URL to authenticate\"\n              type: string\n            orgGroup:\n              $ref: \"#/components/schemas/Group\"\n            portfolios:\n              type: array\n              items:\n                $ref: \"#/components/schemas/Portfolio\"\n            whenArchived:\n              type: string\n              format: date-time\n    RolloutStrategyAttribute:\n      allOf:\n        - $ref: \"#/components/schemas/BaseRolloutStrategyAttribute\"\n        - type: object\n#          required:\n#            - conditional\n#            - fieldName\n#            - type\n          properties:\n            id:\n              type: string\n              description: \"A temporary id used only when validating. Saving strips these out as they are not otherwise necessary\"\n    RolloutStrategy:\n      allOf:\n        - $ref: \"#/components/schemas/BaseRolloutStrategy\"\n        - type: object\n          required:\n            - name\n          properties:\n            name:\n              description: \"names are unique in a case insensitive fashion\"\n              type: string\n              # validator is checking this\n            #          maxLength: 100\n            colouring:\n              description: \"the colour used to display the strategy in the UI. indexed table of background/foreground combos.\"\n              type: integer\n            avatar:\n              type: string\n              description: \"url to avatar (if any). Not sent to SDK. Preferably a unicorn.\"\n              maxLength: 200\n            attributes:\n              type: array\n              items:\n                $ref: \"#/components/schemas/RolloutStrategyAttribute\"\n\n\n"
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"FeatureValue\": parse schema: property \"rolloutStrategies\": parse schema: item: parse schema: resolve \"#/components/schemas/RolloutStrategy\": parse schema: allOf: [0]: parse schema: resolve \"#/components/schemas/BaseRolloutStrategy\": find schema: resolve \"#/components/schemas/BaseRolloutStrategy\": can't find value for \"components/schemas/BaseRolloutStrategy\""
}