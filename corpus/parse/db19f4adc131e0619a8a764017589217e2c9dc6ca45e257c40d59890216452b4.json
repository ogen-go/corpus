{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Element84/cmr-stac-api-proxy"
		},
		"file": {
			"name": "WFS3core+STAC.yaml",
			"size": 0,
			"path": "search/docs/WFS3core+STAC.yaml",
			"byteSize": 47081,
			"content": "openapi: 3.0.1\ninfo:\n  title: The SpatioTemporal Asset Catalog API\n  version: 0.8.0\n  license:\n    name: Apache License 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0'\n  description: \u003e-\n    This is an OpenAPI definition of the core SpatioTemporal Asset Catalog API\n    specification. Any service that implements this endpoint to allow search of\n    spatiotemporal assets can be considered a STAC API. The endpoint is also\n    available as an OpenAPI fragment that can be integrated with other OpenAPI\n    definitions, and is designed to slot seamlessly into a WFS 3 API definition.\n  contact:\n    name: STAC Specification\n    url: 'http://stacspec.org'\ntags:\n  - name: Capabilities\n    description: essential characteristics of this API\n  - name: Data\n    description: access to data (features)\n  - name: STAC\n    description: Extension to WFS3 Core to support STAC metadata model and search API\npaths:\n  /:\n    get:\n      tags:\n        - Capabilities\n      summary: landing page\n      description: |-\n        The landing page provides links to the API definition, the conformance\n        statements and to the feature collections in this dataset.\n      operationId: getLandingPage\n      responses:\n        '200':\n          $ref: '#/components/responses/LandingPage'\n        '500':\n          $ref: '#/components/responses/ServerError'\n  /conformance:\n    get:\n      tags:\n        - Capabilities\n      summary: information about specifications that this API conforms to\n      description: |-\n        A list of all conformance classes specified in a standard that the \n        server conforms to.\n      operationId: getConformanceDeclaration\n      responses:\n        '200':\n          $ref: '#/components/responses/ConformanceDeclaration'\n        '500':\n          $ref: '#/components/responses/ServerError'\n  /collections:\n    get:\n      tags:\n        - Capabilities\n      summary: the feature collections in the dataset\n      operationId: getCollections\n      responses:\n        '200':\n          $ref: '#/components/responses/Collections'\n        '500':\n          $ref: '#/components/responses/ServerError'\n  '/collections/{collectionId}':\n    get:\n      tags:\n        - Capabilities\n      summary: describe the feature collection with id `collectionId`\n      operationId: describeCollection\n      parameters:\n        - $ref: '#/components/parameters/collectionId'\n      responses:\n        '200':\n          $ref: '#/components/responses/Collection'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/ServerError'\n  '/collections/{collectionId}/items':\n    get:\n      tags:\n        - Data\n      summary: fetch features\n      description: |-\n        Fetch features of the feature collection with id `collectionId`.\n\n        Every feature in a dataset belongs to a collection. A dataset may\n        consist of multiple feature collections. A feature collection is often a\n        collection of features of a similar type, based on a common schema.\n\n        Use content negotiation to request HTML or GeoJSON.\n      operationId: getFeatures\n      parameters:\n        - $ref: '#/components/parameters/collectionId'\n        - $ref: '#/components/parameters/limit'\n        - $ref: '#/components/parameters/bbox'\n        - $ref: '#/components/parameters/datetime'\n      responses:\n        '200':\n          $ref: '#/components/responses/Features'\n        '400':\n          $ref: '#/components/responses/InvalidParameter'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/ServerError'\n  '/collections/{collectionId}/items/{featureId}':\n    get:\n      tags:\n        - Data\n      summary: fetch a single feature\n      description: |-\n        Fetch the feature with id `featureId` in the feature collection\n        with id `collectionId`.\n\n        Use content negotiation to request HTML or GeoJSON.\n      operationId: getFeature\n      parameters:\n        - $ref: '#/components/parameters/collectionId'\n        - $ref: '#/components/parameters/featureId'\n      responses:\n        '200':\n          $ref: '#/components/responses/Feature'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/ServerError'\n  /stac:\n    get:\n      summary: Return the root catalog or collection.\n      description: \u003e-\n        Returns the root STAC Catalog or STAC Collection that is the entry point\n        for users to browse with STAC Browser or for search engines to crawl.\n        This can either return a single STAC Collection or more commonly a STAC\n        catalog that usually lists sub-catalogs of STAC Collections, i.e. a\n        simple catalog that lists all collections available through the API.\n      tags:\n        - STAC\n      responses:\n        '200':\n          description: A catalog JSON definition. Used as an entry point for a crawler.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/catalogDefinition'\n  /stac/search:\n    get:\n      summary: Search STAC items with simple filtering.\n      description: \u003e-\n        Retrieve Items matching filters. Intended as a shorthand API for simple\n        queries.\n\n\n        This method is optional, but you MUST implement `POST /stac/search` if\n        you want to implement this method.\n      operationId: getSearchSTAC\n      tags:\n        - STAC\n      parameters:\n        - $ref: '#/components/parameters/bbox'\n        - $ref: '#/components/parameters/datetime'\n        - $ref: '#/components/parameters/limit'\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/ids'\n        - $ref: '#/components/parameters/collections'\n      responses:\n        '200':\n          description: A feature collection.\n          content:\n            application/geo+json:\n              schema:\n                $ref: '#/components/schemas/itemCollection'\n            text/html:\n              schema:\n                type: string\n        default:\n          description: An error occurred.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/exception'\n            text/html:\n              schema:\n                type: string\n    post:\n      summary: Search STAC items with full-featured filtering.\n      description: \u003e-\n        retrieve items matching filters. Intended as the standard, full-featured\n        query API.\n\n\n        This method is mandatory to implement if `GET /stac/search` is\n        implemented. If this endpoint is implemented on a server, it is required\n        to add a link with `rel` set to `search` to the `links` array in `GET\n        /stac` that refers to this endpoint.\n      operationId: postSearchSTAC\n      tags:\n        - STAC\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/searchBody'\n      responses:\n        '200':\n          description: A feature collection.\n          content:\n            application/geo+json:\n              schema:\n                $ref: '#/components/schemas/itemCollection'\n            text/html:\n              schema:\n                type: string\n        default:\n          description: An error occurred.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/exception'\n            text/html:\n              schema:\n                type: string\ncomponents:\n  parameters:\n    bbox:\n      name: bbox\n      in: query\n      description: \u003e-\n        Only features that have a geometry that intersects the bounding box are\n        selected.\n\n        The bounding box is provided as four or six numbers, depending on\n        whether the\n\n        coordinate reference system includes a vertical axis (elevation or\n        depth):\n\n\n        * Lower left corner, coordinate axis 1\n\n        * Lower left corner, coordinate axis 2\n\n        * Lower left corner, coordinate axis 3 (optional)\n\n        * Upper right corner, coordinate axis 1\n\n        * Upper right corner, coordinate axis 2\n\n        * Upper right corner, coordinate axis 3 (optional)\n\n\n        The coordinate reference system of the values is WGS 84\n        longitude/latitude\n\n        (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless a different\n        coordinate\n\n        reference system is specified in the parameter `bbox-crs`.\n\n\n        For WGS 84 longitude/latitude the values are in most cases the sequence\n        of\n\n        minimum longitude, minimum latitude, maximum longitude and maximum\n        latitude.\n\n        However, in cases where the box spans the antimeridian the first value\n\n        (west-most box edge) is larger than the third value (east-most box\n        edge).\n\n\n        If a feature has multiple spatial geometry properties, it is the\n        decision of the\n\n        server whether only a single spatial geometry property is used to\n        determine\n\n        the extent or all relevant geometries.\n      required: false\n      schema:\n        type: array\n        minItems: 4\n        maxItems: 6\n        items:\n          type: number\n      style: form\n      explode: false\n    collectionId:\n      name: collectionId\n      in: path\n      description: local identifier of a collection\n      required: true\n      schema:\n        type: string\n    datetime:\n      name: datetime\n      in: query\n      description: \u003e-\n        Either a date-time or an interval, open or closed. Date and time\n        expressions\n\n        adhere to RFC 3339. Open intervals are expressed using double-dots.\n\n\n        Examples:\n\n\n        * A date-time: \"2018-02-12T23:20:50Z\"\n\n        * A closed interval: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\"\n\n        * Open intervals: \"2018-02-12T00:00:00Z/..\" or \"../2018-03-18T12:31:12Z\"\n\n\n        Only features that have a temporal property that intersects the value of\n\n        `datetime` are selected.\n\n\n        If a feature has multiple temporal properties, it is the decision of the\n\n        server whether only a single temporal property is used to determine\n\n        the extent or all relevant temporal properties.\n      required: false\n      schema:\n        type: string\n      style: form\n      explode: false\n    featureId:\n      name: featureId\n      in: path\n      description: local identifier of a feature\n      required: true\n      schema:\n        type: string\n    limit:\n      name: limit\n      in: query\n      description: \u003e-\n        The optional limit parameter limits the number of items that are\n        presented in the response document.\n\n\n        Only items are counted that are on the first level of the collection in\n        the response document.\n\n        Nested objects contained within the explicitly requested items shall not\n        be counted.\n\n\n        Minimum = 1. Maximum = 10000. Default = 10.\n      required: false\n      schema:\n        type: integer\n        minimum: 1\n        maximum: 10000\n        default: 10\n      style: form\n      explode: false\n    page:\n      name: page\n      in: query\n      description: |\n        The optional page parameter returns the specified page of results\n        (with each page having size=limit).\n\n        * Minimum = 1\n        * Default = 1\n      required: false\n      schema:\n        type: integer\n        minimum: 1\n        default: 1\n      style: form\n      explode: false\n    ids:\n      name: ids\n      in: query\n      description: \u003e\n        The optional ids parameter returns a FeatureCollection of all matching\n        ids.\n\n        If provided all other parameters that further restrict the number of\n        search results (except `page` and `limit`) will be ignored.\n      required: false\n      schema:\n        type: array\n        minItems: 1\n        items:\n          type: string\n      explode: false\n    collections:\n      name: collections\n      in: query\n      description: \u003e\n        The collections search parameter is a list of of collection IDs for\n        Items to match.\n\n        Only items that are included in one of these collections will be\n        returned, otherwise\n\n        all collections will be searched.\n      required: false\n      schema:\n        type: array\n        minItems: 1\n        items:\n          type: string\n      explode: false\n  schemas:\n    collection:\n      type: object\n      required:\n        - id\n        - links\n      properties:\n        id:\n          description: 'identifier of the collection used, for example, in URIs'\n          type: string\n          example: address\n        title:\n          description: human readable title of the collection\n          type: string\n          example: address\n        description:\n          description: a description of the features in the collection\n          type: string\n          example: An address.\n        links:\n          type: array\n          items:\n            $ref: '#/components/schemas/link'\n          example:\n            - href: 'http://data.example.com/buildings'\n              rel: item\n            - href: 'http://example.com/concepts/buildings.html'\n              rel: describedBy\n              type: text/html\n        extent:\n          $ref: '#/components/schemas/extent'\n        itemType:\n          description: \u003e-\n            indicator about the type of the items in the collection (the default\n            value is 'feature').\n          type: string\n          default: feature\n        crs:\n          description: the list of coordinate reference systems supported by the service\n          type: array\n          items:\n            type: string\n          default:\n            - 'http://www.opengis.net/def/crs/OGC/1.3/CRS84'\n          example:\n            - 'http://www.opengis.net/def/crs/OGC/1.3/CRS84'\n            - 'http://www.opengis.net/def/crs/EPSG/0/4326'\n    collections:\n      type: object\n      required:\n        - links\n        - collections\n      properties:\n        links:\n          type: array\n          items:\n            $ref: '#/components/schemas/link'\n        collections:\n          type: array\n          items:\n            $ref: '#/components/schemas/collection'\n    confClasses:\n      type: object\n      required:\n        - conformsTo\n      properties:\n        conformsTo:\n          type: array\n          items:\n            type: string\n    exception:\n      type: object\n      description: \u003e-\n        Information about the exception: an error code plus an optional\n        description.\n      properties:\n        code:\n          type: string\n        description:\n          type: string\n      required:\n        - code\n    extent:\n      type: object\n      description: \u003e-\n        The extent of the features in the collection. In the Core only spatial\n        and temporal\n\n        extents are specified. Extensions may add additional members to\n        represent other\n\n        extents, for example, thermal or pressure ranges.\n      properties:\n        spatial:\n          type: object\n          properties:\n            bbox:\n              description: \u003e-\n                One or more bounding boxes that describe the spatial extent of\n                the dataset.\n\n                In the Core only a single bounding box is supported. Extensions\n                may support\n\n                additional areas. If multiple areas are provided, the union of\n                the bounding\n\n                boxes describes the spatial extent.\n              type: array\n              minItems: 1\n              items:\n                description: \u003e-\n                  West, south, east, north edges of the bounding box. The\n                  coordinates\n\n                  are in the coordinate reference system specified in `crs`. By\n                  default\n\n                  this is WGS 84 longitude/latitude.\n                type: array\n                minItems: 4\n                maxItems: 6\n                items:\n                  type: number\n                example:\n                  - -180\n                  - -90\n                  - 180\n                  - 90\n            crs:\n              description: \u003e-\n                Coordinate reference system of the coordinates in the spatial\n                extent\n\n                (property `bbox`). The default reference system is WGS 84\n                longitude/latitude.\n\n                In the Core this is the only supported coordinate reference\n                system.\n\n                Extensions may support additional coordinate reference systems\n                and add\n\n                additional enum values.\n              type: string\n              enum:\n                - 'http://www.opengis.net/def/crs/OGC/1.3/CRS84'\n              default: 'http://www.opengis.net/def/crs/OGC/1.3/CRS84'\n        temporal:\n          description: The temporal extent of the features in the collection.\n          type: object\n          properties:\n            interval:\n              description: \u003e-\n                One or more time intervals that describe the temporal extent of\n                the dataset.\n\n                The value `null` is supported and indicates an open time\n                intervall.\n\n                In the Core only a single time interval is supported. Extensions\n                may support\n\n                multiple intervals. If multiple intervals are provided, the\n                union of the\n\n                intervals describes the temporal extent.\n              type: array\n              minItems: 1\n              items:\n                description: \u003e-\n                  Begin and end times of the time interval. The timestamps\n\n                  are in the coordinate reference system specified in `trs`. By\n                  default\n\n                  this is the Gregorian calendar.\n                type: array\n                minItems: 2\n                maxItems: 2\n                items:\n                  type: string\n                  format: date-time\n                  nullable: true\n                example:\n                  - '2011-11-11T12:22:11Z'\n                  - null\n            trs:\n              description: \u003e-\n                Coordinate reference system of the coordinates in the temporal\n                extent\n\n                (property `interval`). The default reference system is the\n                Gregorian calendar.\n\n                In the Core this is the only supported temporal reference\n                system.\n\n                Extensions may support additional temporal reference systems and\n                add\n\n                additional enum values.\n              type: string\n              enum:\n                - 'http://www.opengis.net/def/uom/ISO-8601/0/Gregorian'\n              default: 'http://www.opengis.net/def/uom/ISO-8601/0/Gregorian'\n    featureCollectionGeoJSON:\n      type: object\n      required:\n        - type\n        - features\n      properties:\n        type:\n          type: string\n          enum:\n            - FeatureCollection\n        features:\n          type: array\n          items:\n            $ref: '#/components/schemas/featureGeoJSON'\n        links:\n          type: array\n          items:\n            $ref: '#/components/schemas/link'\n        timeStamp:\n          type: string\n          format: date-time\n        numberMatched:\n          type: integer\n          minimum: 0\n        numberReturned:\n          type: integer\n          minimum: 0\n    featureGeoJSON:\n      type: object\n      required:\n        - type\n        - geometry\n        - properties\n      properties:\n        type:\n          type: string\n          enum:\n            - Feature\n        geometry:\n          $ref: '#/components/schemas/geometryGeoJSON'\n        properties:\n          type: object\n          nullable: true\n        id:\n          oneOf:\n            - type: string\n            - type: integer\n        links:\n          type: array\n          items:\n            $ref: '#/components/schemas/link'\n    geometryGeoJSON:\n      oneOf:\n        - $ref: '#/components/schemas/pointGeoJSON'\n        - $ref: '#/components/schemas/multipointGeoJSON'\n        - $ref: '#/components/schemas/linestringGeoJSON'\n        - $ref: '#/components/schemas/multilinestringGeoJSON'\n        - $ref: '#/components/schemas/polygonGeoJSON'\n        - $ref: '#/components/schemas/multipolygonGeoJSON'\n        - $ref: '#/components/schemas/geometrycollectionGeoJSON'\n    geometrycollectionGeoJSON:\n      type: object\n      required:\n        - type\n        - geometries\n      properties:\n        type:\n          type: string\n          enum:\n            - GeometryCollection\n        geometries:\n          type: array\n          items:\n            $ref: '#/components/schemas/geometryGeoJSON'\n    landingPage:\n      type: object\n      required:\n        - links\n      properties:\n        title:\n          type: string\n          example: Buildings in Bonn\n        description:\n          type: string\n          example: \u003e-\n            Access to data about buildings in the city of Bonn via a Web API\n            that conforms to the OGC API Features specification.\n        links:\n          type: array\n          items:\n            $ref: '#/components/schemas/link'\n    linestringGeoJSON:\n      type: object\n      required:\n        - type\n        - coordinates\n      properties:\n        type:\n          type: string\n          enum:\n            - LineString\n        coordinates:\n          type: array\n          minItems: 2\n          items:\n            type: array\n            minItems: 2\n            items:\n              type: number\n    link:\n      type: object\n      properties:\n        href:\n          type: string\n          example: 'http://www.geoserver.example/stac/naip/child/catalog.json'\n          format: url\n        rel:\n          type: string\n          example: child\n        type:\n          type: string\n          example: application/json\n        hreflang:\n          type: string\n          example: en\n        title:\n          type: string\n          example: NAIP Child Catalog\n        length:\n          type: integer\n      title: Link\n      description: A generic link.\n      required:\n        - href\n        - rel\n    multilinestringGeoJSON:\n      type: object\n      required:\n        - type\n        - coordinates\n      properties:\n        type:\n          type: string\n          enum:\n            - MultiLineString\n        coordinates:\n          type: array\n          items:\n            type: array\n            minItems: 2\n            items:\n              type: array\n              minItems: 2\n              items:\n                type: number\n    multipointGeoJSON:\n      type: object\n      required:\n        - type\n        - coordinates\n      properties:\n        type:\n          type: string\n          enum:\n            - MultiPoint\n        coordinates:\n          type: array\n          items:\n            type: array\n            minItems: 2\n            items:\n              type: number\n    multipolygonGeoJSON:\n      type: object\n      required:\n        - type\n        - coordinates\n      properties:\n        type:\n          type: string\n          enum:\n            - MultiPolygon\n        coordinates:\n          type: array\n          items:\n            type: array\n            items:\n              type: array\n              minItems: 4\n              items:\n                type: array\n                minItems: 2\n                items:\n                  type: number\n    pointGeoJSON:\n      type: object\n      required:\n        - type\n        - coordinates\n      properties:\n        type:\n          type: string\n          enum:\n            - Point\n        coordinates:\n          type: array\n          minItems: 2\n          items:\n            type: number\n    polygonGeoJSON:\n      type: object\n      required:\n        - type\n        - coordinates\n      properties:\n        type:\n          type: string\n          enum:\n            - Polygon\n        coordinates:\n          type: array\n          items:\n            type: array\n            minItems: 4\n            items:\n              type: array\n              minItems: 2\n              items:\n                type: number\n    searchBody:\n      description: The search criteria\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/bboxFilter'\n        - $ref: '#/components/schemas/datetimeFilter'\n        - $ref: '#/components/schemas/intersectsFilter'\n        - type: object\n          properties:\n            limit:\n              type: integer\n              example: 10\n    bbox:\n      description: |\n        Only features that have a geometry that intersects the bounding box are\n        selected. The bounding box is provided as four or six numbers,\n        depending on whether the coordinate reference system includes a\n        vertical axis (elevation or depth):\n\n        * Lower left corner, coordinate axis 1\n        * Lower left corner, coordinate axis 2  \n        * Lower left corner, coordinate axis 3 (optional) \n        * Upper right corner, coordinate axis 1 \n        * Upper right corner, coordinate axis 2 \n        * Upper right corner, coordinate axis 3 (optional)\n\n        The coordinate reference system of the values is WGS84\n        longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless\n        a different coordinate reference system is specified in the parameter\n        `bbox-crs`.\n\n        For WGS84 longitude/latitude the values are in most cases the sequence\n        of minimum longitude, minimum latitude, maximum longitude and maximum\n        latitude. However, in cases where the box spans the antimeridian the\n        first value (west-most box edge) is larger than the third value\n        (east-most box edge).\n\n\n        If a feature has multiple spatial geometry properties, it is the\n        decision of the server whether only a single spatial geometry property\n        is used to determine the extent or all relevant geometries.\n      type: array\n      minItems: 4\n      maxItems: 6\n      items:\n        type: number\n      example:\n        - -110\n        - 39.5\n        - -105\n        - 40.5\n    bboxFilter:\n      type: object\n      description: Only return items that intersect the provided bounding box.\n      properties:\n        bbox:\n          $ref: '#/components/schemas/bbox'\n    datetimeFilter:\n      description: An object representing a date+time based filter.\n      type: object\n      properties:\n        datetime:\n          $ref: '#/components/schemas/datetime'\n    intersectsFilter:\n      type: object\n      description: Only returns items that intersect with the provided polygon.\n      properties:\n        intersects:\n          $ref: 'https://geojson.org/schema/Geometry.json'\n    datetime:\n      type: string\n      description: \u003e-\n        Either a date-time or an interval, open or closed. Date and time\n        expressions\n\n        adhere to RFC 3339. Open intervals are expressed using double-dots.\n\n\n        Examples:\n\n\n        * A date-time: \"2018-02-12T23:20:50Z\"\n\n        * A closed interval: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\"\n\n        * Open intervals: \"2018-02-12T00:00:00Z/..\" or \"../2018-03-18T12:31:12Z\"\n\n\n        Only features that have a temporal property that intersects the value of\n\n        `datetime` are selected.\n\n\n        If a feature has multiple temporal properties, it is the decision of the\n\n        server whether only a single temporal property is used to determine\n\n        the extent or all relevant temporal properties.\n      example: '2018-02-12T00:00:00Z/2018-03-18T12:31:12Z'\n    stac_version:\n      title: STAC version\n      type: string\n      example: 0.8.0\n    stac_extensions:\n      title: STAC extensions\n      type: array\n      uniqueItems: true\n      items:\n        anyOf:\n          - title: Reference to a JSON Schema\n            type: string\n            format: uri\n          - title: Reference to a core extension\n            type: string\n    catalogDefinition:\n      type: object\n      required:\n        - stac_version\n        - id\n        - description\n        - links\n      properties:\n        stac_version:\n          $ref: '#/components/schemas/stac_version'\n        stac_extensions:\n          $ref: '#/components/schemas/stac_extensions'\n        id:\n          type: string\n          example: naip\n        title:\n          type: string\n          example: NAIP Imagery\n        description:\n          type: string\n          example: Catalog of NAIP Imagery.\n        links:\n          type: array\n          items:\n            anyOf:\n              - $ref: '#/components/schemas/link'\n              - title: Link to search endpoint\n                description: \u003e-\n                  Link the search endpoint, which is **required** to be\n                  specified if the API implements `/stac/search`.\n                type: object\n                required:\n                  - href\n                  - rel\n                properties:\n                  href:\n                    type: string\n                    format: url\n                    example: 'http://www.cool-sat.com/stac/search'\n                  rel:\n                    type: string\n                    enum:\n                      - search\n                  type:\n                    type: string\n                  title:\n                    type: string\n    itemCollection:\n      description: \u003e-\n        A GeoJSON FeatureCollection augmented with foreign members that contain\n        values relevant to a STAC entity\n      type: object\n      required:\n        - features\n        - type\n      properties:\n        type:\n          type: string\n          enum:\n            - FeatureCollection\n        features:\n          type: array\n          items:\n            $ref: '#/components/schemas/item'\n        links:\n          $ref: '#/components/schemas/itemCollectionLinks'\n    item:\n      description: \u003e-\n        A GeoJSON Feature augmented with foreign members that contain values\n        relevant to a STAC entity\n      type: object\n      required:\n        - stac_version\n        - id\n        - type\n        - geometry\n        - bbox\n        - links\n        - properties\n        - assets\n      properties:\n        stac_version:\n          $ref: '#/components/schemas/stac_version'\n        stac_extensions:\n          $ref: '#/components/schemas/stac_extensions'\n        id:\n          $ref: '#/components/schemas/itemId'\n        bbox:\n          $ref: '#/components/schemas/bbox'\n        geometry:\n          $ref: 'https://geojson.org/schema/Geometry.json'\n        type:\n          $ref: '#/components/schemas/itemType'\n        properties:\n          $ref: '#/components/schemas/itemProperties'\n        links:\n          type: array\n          items:\n            $ref: '#/components/schemas/link'\n        assets:\n          $ref: '#/components/schemas/itemAssets'\n      example:\n        stac_version: 0.8.0\n        type: Feature\n        id: CS3-20160503_132130_04\n        bbox:\n          - -122.59750209\n          - 37.48803556\n          - -122.2880486\n          - 37.613537207\n        geometry:\n          type: Polygon\n          coordinates:\n            - - - -122.308150179\n                - 37.488035566\n              - - -122.597502109\n                - 37.538869539\n              - - -122.576687533\n                - 37.613537207\n              - - -122.2880486\n                - 37.562818007\n              - - -122.308150179\n                - 37.488035566\n        properties:\n          datetime: '2016-05-03T13:21:30.040Z'\n        links:\n          - rel: self\n            href: \u003e-\n              http://cool-sat.com/catalog/collections/cs/items/CS3-20160503_132130_04.json\n        assets:\n          analytic:\n            title: 4-Band Analytic\n            href: \u003e-\n              http://cool-sat.com/catalog/collections/cs/items/CS3-20160503_132130_04/analytic.tif\n          thumbnail:\n            title: Thumbnail\n            href: \u003e-\n              http://cool-sat.com/catalog/collections/cs/items/CS3-20160503_132130_04/thumb.png\n            type: image/png\n    itemId:\n      type: string\n      example: path/to/example.tif\n      description: 'Provider identifier, a unique ID, potentially a link to a file.'\n    itemType:\n      type: string\n      description: The GeoJSON type\n      enum:\n        - Feature\n    itemAssets:\n      type: object\n      additionalProperties:\n        type: object\n        required:\n          - href\n        properties:\n          href:\n            type: string\n            format: url\n            description: Link to the asset object\n            example: \u003e-\n              http://cool-sat.com/catalog/collections/cs/items/CS3-20160503_132130_04/thumb.png\n          title:\n            type: string\n            description: Displayed title\n            example: Thumbnail\n          type:\n            type: string\n            description: Media type of the asset\n            example: image/png\n    itemProperties:\n      type: object\n      required:\n        - datetime\n      description: provides the core metatdata fields plus extensions\n      properties:\n        datetime:\n          $ref: '#/components/schemas/datetime'\n      additionalProperties:\n        description: \u003e-\n          Any additional properties added in via Item specification or\n          extensions.\n    itemCollectionLinks:\n      type: array\n      description: \u003e-\n        An array of links. Can be used for pagination, e.g. by providing a link\n        with the `next` relation type.\n      items:\n        $ref: '#/components/schemas/link'\n      example:\n        - rel: next\n          href: \u003e-\n            http://api.cool-sat.com/stac/search?next=ANsXtp9mrqN0yrKWhf-y2PUpHRLQb1GT-mtxNcXou8TwkXhi1Jbk\n  responses:\n    LandingPage:\n      description: |-\n        The landing page provides links to the API definition \n        (link relations `service-desc` and `service-doc`), \n        the Conformance declaration (path `/conformance`, \n        link relation `conformance`), and the Feature \n        Collections (path `/collections`, link relation \n        `data`).\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/landingPage'\n          example:\n            title: Buildings in Bonn\n            description: \u003e-\n              Access to data about buildings in the city of Bonn via a Web API\n              that conforms to the OGC API Features specification.\n            links:\n              - href: 'http://data.example.org/'\n                rel: self\n                type: application/json\n                title: this document\n              - href: 'http://data.example.org/api'\n                rel: service-desc\n                type: application/vnd.oai.openapi+json;version=3.0\n                title: the API definition\n              - href: 'http://data.example.org/api.html'\n                rel: service-doc\n                type: text/html\n                title: the API documentation\n              - href: 'http://data.example.org/conformance'\n                rel: conformance\n                type: application/json\n                title: OGC API conformance classes implemented by this server\n              - href: 'http://data.example.org/collections'\n                rel: data\n                type: application/json\n                title: Information about the feature collections\n        text/html:\n          schema:\n            type: string\n    ConformanceDeclaration:\n      description: |-\n        The URIs of all conformance classes supported by the server.\n\n        To support \"generic\" clients that want to access multiple \n        OGC API Features implementations - and not \"just\" a specific \n        API / server, the server declares the conformance \n        classes it implements and conforms to.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/confClasses'\n          example:\n            conformsTo:\n              - 'http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/core'\n              - 'http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/oas30'\n              - 'http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/html'\n              - 'http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/geojson'\n        text/html:\n          schema:\n            type: string\n    Collections:\n      description: \u003e-\n        The feature collections shared by this API.\n\n\n        The dataset is organized as one or more feature collections. This\n        resource \n\n        provides information about and access to the collections. \n\n\n        The response contains the list of collections. For each collection, a\n        link \n\n        to the items in the collection (path\n        `/collections/{collectionId}/items`, \n\n        link relation `items`) as well as key information about the collection. \n\n        This information includes:\n\n\n        * A local identifier for the collection that is unique for the dataset;\n\n        * A list of coordinate reference systems (CRS) in which geometries may\n        be returned by the server. The first CRS is the default coordinate\n        reference system (the default is always WGS 84 with axis order\n        longitude/latitude);\n\n        * An optional title and description for the collection;\n\n        * An optional extent that can be used to provide an indication of the\n        spatial and temporal extent of the collection - typically derived from\n        the data;\n\n        * An optional indicator about the type of the items in the collection\n        (the default value, if the indicator is not provided, is 'feature').\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/collections'\n          example:\n            links:\n              - href: 'http://data.example.org/collections.json'\n                rel: self\n                type: application/json\n                title: this document\n              - href: 'http://data.example.org/collections.html'\n                rel: alternate\n                type: text/html\n                title: this document as HTML\n              - href: 'http://schemas.example.org/1.0/buildings.xsd'\n                rel: describedBy\n                type: application/xml\n                title: GML application schema for Acme Corporation building data\n              - href: 'http://download.example.org/buildings.gpkg'\n                rel: enclosure\n                type: application/geopackage+sqlite3\n                title: Bulk download (GeoPackage)\n                length: 472546\n            collections:\n              - id: buildings\n                title: Buildings\n                description: Buildings in the city of Bonn.\n                extent:\n                  spatial:\n                    bbox:\n                      - - 7.01\n                        - 50.63\n                        - 7.22\n                        - 50.78\n                  temporal:\n                    interval:\n                      - - '2010-02-15T12:34:56Z'\n                        - null\n                links:\n                  - href: 'http://data.example.org/collections/buildings/items'\n                    rel: items\n                    type: application/geo+json\n                    title: Buildings\n                  - href: 'http://data.example.org/collections/buildings/items.html'\n                    rel: items\n                    type: text/html\n                    title: Buildings\n                  - href: 'https://creativecommons.org/publicdomain/zero/1.0/'\n                    rel: license\n                    type: text/html\n                    title: CC0-1.0\n                  - href: 'https://creativecommons.org/publicdomain/zero/1.0/rdf'\n                    rel: license\n                    type: application/rdf+xml\n                    title: CC0-1.0\n        text/html:\n          schema:\n            type: string\n    Collection:\n      description: \u003e-\n        Information about the feature collection with id `collectionId`.\n\n\n        The response contains a linkto the items in the collection \n\n        (path `/collections/{collectionId}/items`,link relation `items`) \n\n        as well as key information about the collection. This information \n\n        includes:\n\n\n        * A local identifier for the collection that is unique for the dataset;\n\n        * A list of coordinate reference systems (CRS) in which geometries may\n        be returned by the server. The first CRS is the default coordinate\n        reference system (the default is always WGS 84 with axis order\n        longitude/latitude);\n\n        * An optional title and description for the collection;\n\n        * An optional extent that can be used to provide an indication of the\n        spatial and temporal extent of the collection - typically derived from\n        the data;\n\n        * An optional indicator about the type of the items in the collection\n        (the default value, if the indicator is not provided, is 'feature').\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/collection'\n          example:\n            id: buildings\n            title: Buildings\n            description: Buildings in the city of Bonn.\n            extent:\n              spatial:\n                bbox:\n                  - - 7.01\n                    - 50.63\n                    - 7.22\n                    - 50.78\n              temporal:\n                interval:\n                  - - '2010-02-15T12:34:56Z'\n                    - null\n            links:\n              - href: 'http://data.example.org/collections/buildings/items'\n                rel: items\n                type: application/geo+json\n                title: Buildings\n              - href: 'http://data.example.org/collections/buildings/items.html'\n                rel: items\n                type: text/html\n                title: Buildings\n              - href: 'https://creativecommons.org/publicdomain/zero/1.0/'\n                rel: license\n                type: text/html\n                title: CC0-1.0\n              - href: 'https://creativecommons.org/publicdomain/zero/1.0/rdf'\n                rel: license\n                type: application/rdf+xml\n                title: CC0-1.0\n        text/html:\n          schema:\n            type: string\n    Features:\n      description: \u003e-\n        The response is a document consisting of features in the collection. \n\n        The features included in the response are determined by the server \n\n        based on the query parameters of the request. To support access to \n\n        larger collections without overloading the client, the API supports \n\n        paged access with links to the next page, if more features are selected \n\n        that the page size.\n\n\n        The `bbox` and `datetime` parameter can be used to select only a \n\n        subset of the features in the collection (the features that are in the \n\n        bounding box or time interval). The `bbox` parameter matches all\n        features \n\n        in the collection that are not associated with a location, too. The \n\n        `datetime` parameter matches all features in the collection that are \n\n        not associated with a time stamp or interval, too.\n\n\n        The `limit` parameter may be used to control the subset of the \n\n        selected features that should be returned in the response, the page\n        size.\n\n        Each page may include information about the number of selected and \n\n        returned features (`numberMatched` and `numberReturned`) as well as \n\n        links to support paging (link relation `next`).\n      content:\n        application/geo+json:\n          schema:\n            $ref: '#/components/schemas/featureCollectionGeoJSON'\n          example:\n            type: FeatureCollection\n            links:\n              - href: 'http://data.example.com/collections/buildings/items.json'\n                rel: self\n                type: application/geo+json\n                title: this document\n              - href: 'http://data.example.com/collections/buildings/items.html'\n                rel: alternate\n                type: text/html\n                title: this document as HTML\n              - href: \u003e-\n                  http://data.example.com/collections/buildings/items.json\u0026offset=10\u0026limit=2\n                rel: next\n                type: application/geo+json\n                title: next page\n            timeStamp: '2018-04-03T14:52:23Z'\n            numberMatched: 123\n            numberReturned: 2\n            features:\n              - type: Feature\n                id: '123'\n                geometry:\n                  type: Polygon\n                  coordinates:\n                    - ...\n                properties:\n                  function: residential\n                  floors: '2'\n                  lastUpdate: '2015-08-01T12:34:56Z'\n              - type: Feature\n                id: '132'\n                geometry:\n                  type: Polygon\n                  coordinates:\n                    - ...\n                properties:\n                  function: public use\n                  floors: '10'\n                  lastUpdate: '2013-12-03T10:15:37Z'\n        text/html:\n          schema:\n            type: string\n    Feature:\n      description: |-\n        fetch the feature with id `featureId` in the feature collection\n        with id `collectionId`\n      content:\n        application/geo+json:\n          schema:\n            $ref: '#/components/schemas/featureGeoJSON'\n          example:\n            type: Feature\n            links:\n              - href: 'http://data.example.com/id/building/123'\n                rel: canonical\n                title: canonical URI of the building\n              - href: 'http://data.example.com/collections/buildings/items/123.json'\n                rel: self\n                type: application/geo+json\n                title: this document\n              - href: 'http://data.example.com/collections/buildings/items/123.html'\n                rel: alternate\n                type: text/html\n                title: this document as HTML\n              - href: 'http://data.example.com/collections/buildings'\n                rel: collection\n                type: application/geo+json\n                title: the collection document\n            id: '123'\n            geometry:\n              type: Polygon\n              coordinates:\n                - ...\n            properties:\n              function: residential\n              floors: '2'\n              lastUpdate: '2015-08-01T12:34:56Z'\n        text/html:\n          schema:\n            type: string\n    InvalidParameter:\n      description: A query parameter has an invalid value.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/exception'\n        text/html:\n          schema:\n            type: string\n    NotFound:\n      description: The requested URI was not found.\n    ServerError:\n      description: A server error occurred.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/exception'\n        text/html:\n          schema:\n            type: string\nservers:\n  - url: 'http://dev.cool-sat.com'\n    description: Development server\n  - url: 'http://www.cool-sat.com'\n    description: Production server\n"
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"intersectsFilter\": parse schema: property \"intersects\": parse schema: resolve \"https://geojson.org/schema/Geometry.json\": find schema: external base \"https://geojson.org/schema/Geometry.json\" is not supported"
}