{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/APIs-guru/openapi-directory"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "APIs/amazonaws.com/greengrassv2/2020-11-30/openapi.yaml",
			"byteSize": 152609,
			"content": "openapi: 3.0.0\ninfo:\n  version: '2020-11-30'\n  x-release: v4\n  title: AWS IoT Greengrass V2\n  description: '\u003cp\u003eIoT Greengrass brings local compute, messaging, data management, sync, and ML inference capabilities to edge devices. This enables devices to collect and analyze data closer to the source of information, react autonomously to local events, and communicate securely with each other on local networks. Local devices can also communicate securely with Amazon Web Services IoT Core and export IoT data to the Amazon Web Services Cloud. IoT Greengrass developers can use Lambda functions and components to create and deploy applications to fleets of edge devices for local operation.\u003c/p\u003e \u003cp\u003eIoT Greengrass Version 2 provides a new major version of the IoT Greengrass Core software, new APIs, and a new console. Use this API reference to learn how to use the IoT Greengrass V2 API operations to manage components, manage deployments, and core devices.\u003c/p\u003e \u003cp\u003eFor more information, see \u003ca href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html\"\u003eWhat is IoT Greengrass?\u003c/a\u003e in the \u003ci\u003eIoT Greengrass V2 Developer Guide\u003c/i\u003e.\u003c/p\u003e'\n  x-logo:\n    url: 'https://twitter.com/awscloud/profile_image?size=original'\n    backgroundColor: '#FFFFFF'\n  termsOfService: 'https://aws.amazon.com/service-terms/'\n  contact:\n    name: Mike Ralphson\n    email: mike.ralphson@gmail.com\n    url: 'https://github.com/mermade/aws2openapi'\n    x-twitter: PermittedSoc\n  license:\n    name: Apache 2.0 License\n    url: 'http://www.apache.org/licenses/'\n  x-providerName: amazonaws.com\n  x-serviceName: greengrassv2\n  x-origin:\n    - contentType: application/json\n      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/greengrassv2-2020-11-30.normal.json'\n      converter:\n        url: 'https://github.com/mermade/aws2openapi'\n        version: 1.0.0\n      x-apisguru-driver: external\n  x-apiClientRegistration:\n    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'\n  x-apisguru-categories:\n    - cloud\n  x-preferred: true\nexternalDocs:\n  description: Amazon Web Services documentation\n  url: 'https://docs.aws.amazon.com/greengrass/'\nservers:\n  - url: 'http://greengrass.{region}.amazonaws.com'\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - us-east-1\n          - us-east-2\n          - us-west-1\n          - us-west-2\n          - us-gov-west-1\n          - us-gov-east-1\n          - ca-central-1\n          - eu-north-1\n          - eu-west-1\n          - eu-west-2\n          - eu-west-3\n          - eu-central-1\n          - eu-south-1\n          - af-south-1\n          - ap-northeast-1\n          - ap-northeast-2\n          - ap-northeast-3\n          - ap-southeast-1\n          - ap-southeast-2\n          - ap-east-1\n          - ap-south-1\n          - sa-east-1\n          - me-south-1\n        default: us-east-1\n    description: The AWS GreengrassV2 multi-region endpoint\n  - url: 'https://greengrass.{region}.amazonaws.com'\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - us-east-1\n          - us-east-2\n          - us-west-1\n          - us-west-2\n          - us-gov-west-1\n          - us-gov-east-1\n          - ca-central-1\n          - eu-north-1\n          - eu-west-1\n          - eu-west-2\n          - eu-west-3\n          - eu-central-1\n          - eu-south-1\n          - af-south-1\n          - ap-northeast-1\n          - ap-northeast-2\n          - ap-northeast-3\n          - ap-southeast-1\n          - ap-southeast-2\n          - ap-east-1\n          - ap-south-1\n          - sa-east-1\n          - me-south-1\n        default: us-east-1\n    description: The AWS GreengrassV2 multi-region endpoint\n  - url: 'http://greengrass.{region}.amazonaws.com.cn'\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - cn-north-1\n          - cn-northwest-1\n        default: cn-north-1\n    description: The AWS GreengrassV2 endpoint for China (Beijing) and China (Ningxia)\n  - url: 'https://greengrass.{region}.amazonaws.com.cn'\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - cn-north-1\n          - cn-northwest-1\n        default: cn-north-1\n    description: The AWS GreengrassV2 endpoint for China (Beijing) and China (Ningxia)\nx-hasEquivalentPaths: true\npaths:\n  '/greengrass/v2/coreDevices/{coreDeviceThingName}/associateClientDevices':\n    post:\n      operationId: BatchAssociateClientDeviceWithCoreDevice\n      description: '\u003cp\u003eAssociate a list of client devices with a core device. Use this API operation to specify which client devices can discover a core device through cloud discovery. With cloud discovery, client devices connect to IoT Greengrass to retrieve associated core devices'' connectivity information and certificates. For more information, see \u003ca href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/configure-cloud-discovery.html\"\u003eConfigure cloud discovery\u003c/a\u003e in the \u003ci\u003eIoT Greengrass V2 Developer Guide\u003c/i\u003e.\u003c/p\u003e \u003cnote\u003e \u003cp\u003eClient devices are local IoT devices that connect to and communicate with an IoT Greengrass core device over MQTT. You can connect client devices to a core device to sync MQTT messages and data to Amazon Web Services IoT Core and interact with client devices in Greengrass components. For more information, see \u003ca href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/interact-with-local-iot-devices.html\"\u003eInteract with local IoT devices\u003c/a\u003e in the \u003ci\u003eIoT Greengrass V2 Developer Guide\u003c/i\u003e.\u003c/p\u003e \u003c/note\u003e'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BatchAssociateClientDeviceWithCoreDeviceResponse'\n        '480':\n          description: ValidationException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationException'\n        '481':\n          description: ResourceNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceNotFoundException'\n        '482':\n          description: AccessDeniedException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccessDeniedException'\n        '483':\n          description: InternalServerException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerException'\n        '484':\n          description: ThrottlingException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ThrottlingException'\n      parameters:\n        - name: coreDeviceThingName\n          in: path\n          required: true\n          description: The name of the core device. This is also the name of the IoT thing.\n          schema:\n            type: string\n            minLength: 1\n            maxLength: 128\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                entries:\n                  description: The list of client devices to associate.\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/AssociateClientDeviceWithCoreDeviceEntry'\n                  minItems: 1\n                  maxItems: 100\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n  '/greengrass/v2/coreDevices/{coreDeviceThingName}/disassociateClientDevices':\n    post:\n      operationId: BatchDisassociateClientDeviceFromCoreDevice\n      description: 'Disassociate a list of client devices from a core device. After you disassociate a client device from a core device, the client device won''t be able to use cloud discovery to retrieve the core device''s connectivity information and certificates.'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BatchDisassociateClientDeviceFromCoreDeviceResponse'\n        '480':\n          description: ValidationException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationException'\n        '481':\n          description: ResourceNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceNotFoundException'\n        '482':\n          description: AccessDeniedException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccessDeniedException'\n        '483':\n          description: InternalServerException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerException'\n        '484':\n          description: ThrottlingException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ThrottlingException'\n      parameters:\n        - name: coreDeviceThingName\n          in: path\n          required: true\n          description: The name of the core device. This is also the name of the IoT thing.\n          schema:\n            type: string\n            minLength: 1\n            maxLength: 128\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                entries:\n                  description: The list of client devices to disassociate.\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/DisassociateClientDeviceFromCoreDeviceEntry'\n                  minItems: 1\n                  maxItems: 100\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n  '/greengrass/v2/deployments/{deploymentId}/cancel':\n    post:\n      operationId: CancelDeployment\n      description: 'Cancels a deployment. This operation cancels the deployment for devices that haven''t yet received it. If a device already received the deployment, this operation doesn''t change anything for that device.'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CancelDeploymentResponse'\n        '480':\n          description: ResourceNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceNotFoundException'\n        '481':\n          description: ValidationException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationException'\n        '482':\n          description: AccessDeniedException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccessDeniedException'\n        '483':\n          description: InternalServerException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerException'\n        '484':\n          description: ConflictException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConflictException'\n        '485':\n          description: ThrottlingException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ThrottlingException'\n      parameters:\n        - name: deploymentId\n          in: path\n          required: true\n          description: The ID of the deployment.\n          schema:\n            type: string\n            minLength: 1\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n  /greengrass/v2/createComponentVersion:\n    post:\n      operationId: CreateComponentVersion\n      description: '\u003cp\u003eCreates a component. Components are software that run on Greengrass core devices. After you develop and test a component on your core device, you can use this operation to upload your component to IoT Greengrass. Then, you can deploy the component to other core devices.\u003c/p\u003e \u003cp\u003eYou can use this operation to do the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003cb\u003eCreate components from recipes\u003c/b\u003e \u003c/p\u003e \u003cp\u003eCreate a component from a recipe, which is a file that defines the component''s metadata, parameters, dependencies, lifecycle, artifacts, and platform capability. For more information, see \u003ca href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/component-recipe-reference.html\"\u003eIoT Greengrass component recipe reference\u003c/a\u003e in the \u003ci\u003eIoT Greengrass V2 Developer Guide\u003c/i\u003e.\u003c/p\u003e \u003cp\u003eTo create a component from a recipe, specify \u003ccode\u003einlineRecipe\u003c/code\u003e when you call this operation.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003cb\u003eCreate components from Lambda functions\u003c/b\u003e \u003c/p\u003e \u003cp\u003eCreate a component from an Lambda function that runs on IoT Greengrass. This creates a recipe and artifacts from the Lambda function''s deployment package. You can use this operation to migrate Lambda functions from IoT Greengrass V1 to IoT Greengrass V2.\u003c/p\u003e \u003cp\u003eThis function only accepts Lambda functions that use the following runtimes:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003ePython 2.7 – \u003ccode\u003epython2.7\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003ePython 3.7 – \u003ccode\u003epython3.7\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003ePython 3.8 – \u003ccode\u003epython3.8\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eJava 8 – \u003ccode\u003ejava8\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eNode.js 10 – \u003ccode\u003enodejs10.x\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eNode.js 12 – \u003ccode\u003enodejs12.x\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eTo create a component from a Lambda function, specify \u003ccode\u003elambdaFunction\u003c/code\u003e when you call this operation.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e'\n      responses:\n        '201':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CreateComponentVersionResponse'\n        '480':\n          description: ValidationException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationException'\n        '481':\n          description: ServiceQuotaExceededException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceQuotaExceededException'\n        '482':\n          description: AccessDeniedException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccessDeniedException'\n        '483':\n          description: ConflictException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConflictException'\n        '484':\n          description: ThrottlingException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ThrottlingException'\n        '485':\n          description: InternalServerException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerException'\n        '486':\n          description: RequestAlreadyInProgressException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RequestAlreadyInProgressException'\n      parameters: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                inlineRecipe:\n                  description: '\u003cp\u003eThe recipe to use to create the component. The recipe defines the component''s metadata, parameters, dependencies, lifecycle, artifacts, and platform compatibility.\u003c/p\u003e \u003cp\u003eYou must specify either \u003ccode\u003einlineRecipe\u003c/code\u003e or \u003ccode\u003elambdaFunction\u003c/code\u003e.\u003c/p\u003e'\n                  type: string\n                lambdaFunction:\n                  description: Contains information about an Lambda function to import to create a component.\n                  type: object\n                  properties:\n                    lambdaArn:\n                      allOf:\n                        - $ref: '#/components/schemas/LambdaFunctionARNWithVersionNumber'\n                        - description: 'The \u003ca href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"\u003eARN\u003c/a\u003e of the Lambda function. The ARN must include the version of the function to import. You can''t use version aliases like \u003ccode\u003e$LATEST\u003c/code\u003e.'\n                    componentName:\n                      allOf:\n                        - $ref: '#/components/schemas/ComponentNameString'\n                        - description: \u003cp\u003eThe name of the component.\u003c/p\u003e \u003cp\u003eDefaults to the name of the Lambda function.\u003c/p\u003e\n                    componentVersion:\n                      allOf:\n                        - $ref: '#/components/schemas/ComponentVersionString'\n                        - description: '\u003cp\u003eThe version of the component.\u003c/p\u003e \u003cp\u003eDefaults to the version of the Lambda function as a semantic version. For example, if your function version is \u003ccode\u003e3\u003c/code\u003e, the component version becomes \u003ccode\u003e3.0.0\u003c/code\u003e.\u003c/p\u003e'\n                    componentPlatforms:\n                      allOf:\n                        - $ref: '#/components/schemas/ComponentPlatformList'\n                        - description: The platforms that the component version supports.\n                    componentDependencies:\n                      allOf:\n                        - $ref: '#/components/schemas/ComponentDependencyMap'\n                        - description: The component versions on which this Lambda function component depends.\n                    componentLambdaParameters:\n                      allOf:\n                        - $ref: '#/components/schemas/LambdaExecutionParameters'\n                        - description: The system and runtime parameters for the Lambda function as it runs on the Greengrass core device.\n                tags:\n                  description: 'A list of key-value pairs that contain metadata for the resource. For more information, see \u003ca href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html\"\u003eTag your resources\u003c/a\u003e in the \u003ci\u003eIoT Greengrass V2 Developer Guide\u003c/i\u003e.'\n                  type: object\n                  minProperties: 1\n                  maxProperties: 50\n                  additionalProperties:\n                    $ref: '#/components/schemas/TagValue'\n                clientToken:\n                  description: 'A unique, case-sensitive identifier that you can provide to ensure that the request is idempotent. Idempotency means that the request is successfully processed only once, even if you send the request multiple times. When a request succeeds, and you specify the same client token for subsequent successful requests, the IoT Greengrass V2 service returns the successful response that it caches from the previous request. IoT Greengrass V2 caches successful responses for idempotent requests for up to 8 hours.'\n                  type: string\n                  pattern: '^[a-zA-Z0-9-]+$'\n                  minLength: 1\n                  maxLength: 64\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n  /greengrass/v2/deployments:\n    post:\n      operationId: CreateDeployment\n      description: '\u003cp\u003eCreates a continuous deployment for a target, which is a Greengrass core device or group of core devices. When you add a new core device to a group of core devices that has a deployment, IoT Greengrass deploys that group''s deployment to the new device.\u003c/p\u003e \u003cp\u003eYou can define one deployment for each target. When you create a new deployment for a target that has an existing deployment, you replace the previous deployment. IoT Greengrass applies the new deployment to the target devices.\u003c/p\u003e \u003cp\u003eEvery deployment has a revision number that indicates how many deployment revisions you define for a target. Use this operation to create a new revision of an existing deployment. This operation returns the revision number of the new deployment when you create it.\u003c/p\u003e \u003cp\u003eFor more information, see the \u003ca href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/create-deployments.html\"\u003eCreate deployments\u003c/a\u003e in the \u003ci\u003eIoT Greengrass V2 Developer Guide\u003c/i\u003e.\u003c/p\u003e'\n      responses:\n        '201':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CreateDeploymentResponse'\n        '480':\n          description: ResourceNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceNotFoundException'\n        '481':\n          description: ValidationException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationException'\n        '482':\n          description: AccessDeniedException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccessDeniedException'\n        '483':\n          description: ThrottlingException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ThrottlingException'\n        '484':\n          description: InternalServerException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerException'\n        '485':\n          description: RequestAlreadyInProgressException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RequestAlreadyInProgressException'\n      parameters: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - targetArn\n              properties:\n                targetArn:\n                  description: 'The \u003ca href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"\u003eARN\u003c/a\u003e of the target IoT thing or thing group.'\n                  type: string\n                  pattern: 'arn:aws(-cn|-us-gov)?:iot:[^:]+:[0-9]+:(thing|thinggroup)/.+'\n                deploymentName:\n                  description: The name of the deployment.\n                  type: string\n                  minLength: 1\n                components:\n                  description: 'The components to deploy. This is a dictionary, where each key is the name of a component, and each key''s value is the version and configuration to deploy for that component.'\n                  type: object\n                  additionalProperties:\n                    $ref: '#/components/schemas/ComponentDeploymentSpecification'\n                iotJobConfiguration:\n                  description: Contains information about an IoT job configuration.\n                  type: object\n                  properties:\n                    jobExecutionsRolloutConfig:\n                      allOf:\n                        - $ref: '#/components/schemas/IoTJobExecutionsRolloutConfig'\n                        - description: The rollout configuration for the job. This configuration defines the rate at which the job rolls out to the fleet of target devices.\n                    abortConfig:\n                      allOf:\n                        - $ref: '#/components/schemas/IoTJobAbortConfig'\n                        - description: The stop configuration for the job. This configuration defines when and how to stop a job rollout.\n                    timeoutConfig:\n                      allOf:\n                        - $ref: '#/components/schemas/IoTJobTimeoutConfig'\n                        - description: The timeout configuration for the job. This configuration defines the amount of time each device has to complete the job.\n                deploymentPolicies:\n                  description: Contains information about policies that define how a deployment updates components and handles failure.\n                  type: object\n                  properties:\n                    failureHandlingPolicy:\n                      allOf:\n                        - $ref: '#/components/schemas/DeploymentFailureHandlingPolicy'\n                        - description: '\u003cp\u003eThe failure handling policy for the configuration deployment. This policy defines what to do if the deployment fails.\u003c/p\u003e \u003cp\u003eDefault: \u003ccode\u003eROLLBACK\u003c/code\u003e \u003c/p\u003e'\n                    componentUpdatePolicy:\n                      allOf:\n                        - $ref: '#/components/schemas/DeploymentComponentUpdatePolicy'\n                        - description: The component update policy for the configuration deployment. This policy defines when it's safe to deploy the configuration to devices.\n                    configurationValidationPolicy:\n                      allOf:\n                        - $ref: '#/components/schemas/DeploymentConfigurationValidationPolicy'\n                        - description: The configuration validation policy for the configuration deployment. This policy defines how long each component has to validate its configure updates.\n                tags:\n                  description: 'A list of key-value pairs that contain metadata for the resource. For more information, see \u003ca href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html\"\u003eTag your resources\u003c/a\u003e in the \u003ci\u003eIoT Greengrass V2 Developer Guide\u003c/i\u003e.'\n                  type: object\n                  minProperties: 1\n                  maxProperties: 50\n                  additionalProperties:\n                    $ref: '#/components/schemas/TagValue'\n                clientToken:\n                  description: 'A unique, case-sensitive identifier that you can provide to ensure that the request is idempotent. Idempotency means that the request is successfully processed only once, even if you send the request multiple times. When a request succeeds, and you specify the same client token for subsequent successful requests, the IoT Greengrass V2 service returns the successful response that it caches from the previous request. IoT Greengrass V2 caches successful responses for idempotent requests for up to 8 hours.'\n                  type: string\n                  pattern: '^[a-zA-Z0-9-]+$'\n                  minLength: 1\n                  maxLength: 64\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n    get:\n      operationId: ListDeployments\n      description: Retrieves a paginated list of deployments.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ListDeploymentsResponse'\n        '480':\n          description: ValidationException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationException'\n        '481':\n          description: AccessDeniedException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccessDeniedException'\n        '482':\n          description: InternalServerException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerException'\n        '483':\n          description: ThrottlingException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ThrottlingException'\n      parameters:\n        - name: targetArn\n          in: query\n          required: false\n          description: 'The \u003ca href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"\u003eARN\u003c/a\u003e of the target IoT thing or thing group.'\n          schema:\n            type: string\n            pattern: 'arn:aws(-cn|-us-gov)?:iot:[^:]+:[0-9]+:(thing|thinggroup)/.+'\n        - name: historyFilter\n          in: query\n          required: false\n          description: '\u003cp\u003eThe filter for the list of deployments. Choose one of the following options:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eALL\u003c/code\u003e – The list includes all deployments.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eLATEST_ONLY\u003c/code\u003e – The list includes only the latest revision of each deployment.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eDefault: \u003ccode\u003eLATEST_ONLY\u003c/code\u003e \u003c/p\u003e'\n          schema:\n            type: string\n            enum:\n              - ALL\n              - LATEST_ONLY\n        - name: maxResults\n          in: query\n          required: false\n          description: The maximum number of results to be returned per paginated request.\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 100\n        - name: nextToken\n          in: query\n          required: false\n          description: The token to be used for the next set of paginated results.\n          schema:\n            type: string\n  '/greengrass/v2/components/{arn}':\n    delete:\n      operationId: DeleteComponent\n      description: '\u003cp\u003eDeletes a version of a component from IoT Greengrass.\u003c/p\u003e \u003cnote\u003e \u003cp\u003eThis operation deletes the component''s recipe and artifacts. As a result, deployments that refer to this component version will fail. If you have deployments that use this component version, you can remove the component from the deployment or update the deployment to use a valid version.\u003c/p\u003e \u003c/note\u003e'\n      responses:\n        '204':\n          description: Success\n        '480':\n          description: ValidationException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationException'\n        '481':\n          description: AccessDeniedException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccessDeniedException'\n        '482':\n          description: ConflictException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConflictException'\n        '483':\n          description: ResourceNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceNotFoundException'\n        '484':\n          description: ThrottlingException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ThrottlingException'\n        '485':\n          description: InternalServerException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerException'\n      parameters:\n        - name: arn\n          in: path\n          required: true\n          description: 'The \u003ca href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"\u003eARN\u003c/a\u003e of the component version.'\n          schema:\n            type: string\n            pattern: 'arn:aws(-cn|-us-gov)?:greengrass:[^:]+:(aws|[0-9]+):components:[^:]+:versions:[^:]+'\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n    get:\n      operationId: GetComponent\n      description: Gets the recipe for a version of a component. Core devices can call this operation to identify the artifacts and requirements to install a component.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetComponentResponse'\n        '480':\n          description: ValidationException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationException'\n        '481':\n          description: AccessDeniedException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccessDeniedException'\n        '482':\n          description: ResourceNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceNotFoundException'\n        '483':\n          description: ThrottlingException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ThrottlingException'\n        '484':\n          description: InternalServerException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerException'\n      parameters:\n        - name: recipeOutputFormat\n          in: query\n          required: false\n          description: The format of the recipe.\n          schema:\n            type: string\n            enum:\n              - JSON\n              - YAML\n        - name: arn\n          in: path\n          required: true\n          description: 'The \u003ca href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"\u003eARN\u003c/a\u003e of the component version.'\n          schema:\n            type: string\n            pattern: 'arn:aws(-cn|-us-gov)?:greengrass:[^:]+:(aws|[0-9]+):components:[^:]+:versions:[^:]+'\n  '/greengrass/v2/coreDevices/{coreDeviceThingName}':\n    delete:\n      operationId: DeleteCoreDevice\n      description: 'Deletes a Greengrass core device, which is an IoT thing. This operation removes the core device from the list of core devices. This operation doesn''t delete the IoT thing. For more information about how to delete the IoT thing, see \u003ca href=\"https://docs.aws.amazon.com/iot/latest/apireference/API_DeleteThing.html\"\u003eDeleteThing\u003c/a\u003e in the \u003ci\u003eIoT API Reference\u003c/i\u003e.'\n      responses:\n        '204':\n          description: Success\n        '480':\n          description: ValidationException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationException'\n        '481':\n          description: ResourceNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceNotFoundException'\n        '482':\n          description: AccessDeniedException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccessDeniedException'\n        '483':\n          description: InternalServerException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerException'\n        '484':\n          description: ThrottlingException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ThrottlingException'\n        '485':\n          description: ConflictException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConflictException'\n      parameters:\n        - name: coreDeviceThingName\n          in: path\n          required: true\n          description: The name of the core device. This is also the name of the IoT thing.\n          schema:\n            type: string\n            minLength: 1\n            maxLength: 128\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n    get:\n      operationId: GetCoreDevice\n      description: Retrieves metadata for a Greengrass core device.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetCoreDeviceResponse'\n        '480':\n          description: ValidationException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationException'\n        '481':\n          description: ResourceNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceNotFoundException'\n        '482':\n          description: AccessDeniedException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccessDeniedException'\n        '483':\n          description: InternalServerException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerException'\n        '484':\n          description: ThrottlingException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ThrottlingException'\n      parameters:\n        - name: coreDeviceThingName\n          in: path\n          required: true\n          description: The name of the core device. This is also the name of the IoT thing.\n          schema:\n            type: string\n            minLength: 1\n            maxLength: 128\n  '/greengrass/v2/components/{arn}/metadata':\n    get:\n      operationId: DescribeComponent\n      description: Retrieves metadata for a version of a component.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DescribeComponentResponse'\n        '480':\n          description: ValidationException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationException'\n        '481':\n          description: AccessDeniedException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccessDeniedException'\n        '482':\n          description: ResourceNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceNotFoundException'\n        '483':\n          description: ThrottlingException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ThrottlingException'\n        '484':\n          description: InternalServerException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerException'\n      parameters:\n        - name: arn\n          in: path\n          required: true\n          description: 'The \u003ca href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"\u003eARN\u003c/a\u003e of the component version.'\n          schema:\n            type: string\n            pattern: 'arn:aws(-cn|-us-gov)?:greengrass:[^:]+:(aws|[0-9]+):components:[^:]+:versions:[^:]+'\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n  '/greengrass/v2/components/{arn}/artifacts/{artifactName}':\n    get:\n      operationId: GetComponentVersionArtifact\n      description: Gets the pre-signed URL to download a public component artifact. Core devices call this operation to identify the URL that they can use to download an artifact to install.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetComponentVersionArtifactResponse'\n        '480':\n          description: ValidationException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationException'\n        '481':\n          description: AccessDeniedException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccessDeniedException'\n        '482':\n          description: ResourceNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceNotFoundException'\n        '483':\n          description: ThrottlingException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ThrottlingException'\n        '484':\n          description: InternalServerException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerException'\n      parameters:\n        - name: arn\n          in: path\n          required: true\n          description: 'The \u003ca href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"\u003eARN\u003c/a\u003e of the component version. Specify the ARN of a public component version.'\n          schema:\n            type: string\n            pattern: 'arn:aws(-cn|-us-gov)?:greengrass:[^:]+:(aws|[0-9]+):components:[^:]+:versions:[^:]+'\n        - name: artifactName\n          in: path\n          required: true\n          description: '\u003cp\u003eThe name of the artifact.\u003c/p\u003e \u003cp\u003eYou can use the \u003ca href=\"https://docs.aws.amazon.com/greengrass/v2/APIReference/API_GetComponent.html\"\u003eGetComponent\u003c/a\u003e operation to download the component recipe, which includes the URI of the artifact. The artifact name is the section of the URI after the scheme. For example, in the artifact URI \u003ccode\u003egreengrass:SomeArtifact.zip\u003c/code\u003e, the artifact name is \u003ccode\u003eSomeArtifact.zip\u003c/code\u003e.\u003c/p\u003e'\n          schema:\n            type: string\n            minLength: 1\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n  '/greengrass/v2/deployments/{deploymentId}':\n    get:\n      operationId: GetDeployment\n      description: Gets a deployment. Deployments define the components that run on Greengrass core devices.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetDeploymentResponse'\n        '480':\n          description: ValidationException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationException'\n        '481':\n          description: ResourceNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceNotFoundException'\n        '482':\n          description: AccessDeniedException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccessDeniedException'\n        '483':\n          description: InternalServerException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerException'\n        '484':\n          description: ThrottlingException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ThrottlingException'\n      parameters:\n        - name: deploymentId\n          in: path\n          required: true\n          description: The ID of the deployment.\n          schema:\n            type: string\n            minLength: 1\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n  '/greengrass/v2/coreDevices/{coreDeviceThingName}/associatedClientDevices':\n    get:\n      operationId: ListClientDevicesAssociatedWithCoreDevice\n      description: Retrieves a paginated list of client devices that are associated with a core device.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ListClientDevicesAssociatedWithCoreDeviceResponse'\n        '480':\n          description: ValidationException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationException'\n        '481':\n          description: ResourceNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceNotFoundException'\n        '482':\n          description: AccessDeniedException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccessDeniedException'\n        '483':\n          description: InternalServerException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerException'\n        '484':\n          description: ThrottlingException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ThrottlingException'\n      parameters:\n        - name: coreDeviceThingName\n          in: path\n          required: true\n          description: The name of the core device. This is also the name of the IoT thing.\n          schema:\n            type: string\n            minLength: 1\n            maxLength: 128\n        - name: maxResults\n          in: query\n          required: false\n          description: The maximum number of results to be returned per paginated request.\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 100\n        - name: nextToken\n          in: query\n          required: false\n          description: The token to be used for the next set of paginated results.\n          schema:\n            type: string\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n  '/greengrass/v2/components/{arn}/versions':\n    get:\n      operationId: ListComponentVersions\n      description: Retrieves a paginated list of all versions for a component. Greater versions are listed first.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ListComponentVersionsResponse'\n        '480':\n          description: ValidationException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationException'\n        '481':\n          description: AccessDeniedException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccessDeniedException'\n        '482':\n          description: ResourceNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceNotFoundException'\n        '483':\n          description: ThrottlingException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ThrottlingException'\n        '484':\n          description: InternalServerException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerException'\n      parameters:\n        - name: arn\n          in: path\n          required: true\n          description: 'The \u003ca href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"\u003eARN\u003c/a\u003e of the component version.'\n          schema:\n            type: string\n            pattern: 'arn:aws(-cn|-us-gov)?:greengrass:[^:]+:(aws|[0-9]+):components:[^:]+'\n        - name: maxResults\n          in: query\n          required: false\n          description: The maximum number of results to be returned per paginated request.\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 100\n        - name: nextToken\n          in: query\n          required: false\n          description: The token to be used for the next set of paginated results.\n          schema:\n            type: string\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n  /greengrass/v2/components:\n    get:\n      operationId: ListComponents\n      description: Retrieves a paginated list of component summaries. This list includes components that you have permission to view.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ListComponentsResponse'\n        '480':\n          description: ValidationException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationException'\n        '481':\n          description: AccessDeniedException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccessDeniedException'\n        '482':\n          description: ThrottlingException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ThrottlingException'\n        '483':\n          description: InternalServerException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerException'\n      parameters:\n        - name: scope\n          in: query\n          required: false\n          description: '\u003cp\u003eThe scope of the components to list.\u003c/p\u003e \u003cp\u003eDefault: \u003ccode\u003ePRIVATE\u003c/code\u003e \u003c/p\u003e'\n          schema:\n            type: string\n            enum:\n              - PRIVATE\n              - PUBLIC\n        - name: maxResults\n          in: query\n          required: false\n          description: The maximum number of results to be returned per paginated request.\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 100\n        - name: nextToken\n          in: query\n          required: false\n          description: The token to be used for the next set of paginated results.\n          schema:\n            type: string\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n  /greengrass/v2/coreDevices:\n    get:\n      operationId: ListCoreDevices\n      description: Retrieves a paginated list of Greengrass core devices.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ListCoreDevicesResponse'\n        '480':\n          description: ValidationException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationException'\n        '481':\n          description: AccessDeniedException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccessDeniedException'\n        '482':\n          description: InternalServerException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerException'\n        '483':\n          description: ThrottlingException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ThrottlingException'\n      parameters:\n        - name: thingGroupArn\n          in: query\n          required: false\n          description: 'The \u003ca href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"\u003eARN\u003c/a\u003e of the IoT thing group by which to filter. If you specify this parameter, the list includes only core devices that are members of this thing group.'\n          schema:\n            type: string\n            pattern: 'arn:aws(-cn|-us-gov)?:iot:[^:]+:[0-9]+:thinggroup/.+'\n        - name: status\n          in: query\n          required: false\n          description: '\u003cp\u003eThe core device status by which to filter. If you specify this parameter, the list includes only core devices that have this status. Choose one of the following options:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eHEALTHY\u003c/code\u003e – The IoT Greengrass Core software and all components run on the core device without issue.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eUNHEALTHY\u003c/code\u003e – The IoT Greengrass Core software or a component is in a failed state on the core device.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e'\n          schema:\n            type: string\n            enum:\n              - HEALTHY\n              - UNHEALTHY\n        - name: maxResults\n          in: query\n          required: false\n          description: The maximum number of results to be returned per paginated request.\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 100\n        - name: nextToken\n          in: query\n          required: false\n          description: The token to be used for the next set of paginated results.\n          schema:\n            type: string\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n  '/greengrass/v2/coreDevices/{coreDeviceThingName}/effectiveDeployments':\n    get:\n      operationId: ListEffectiveDeployments\n      description: Retrieves a paginated list of deployment jobs that IoT Greengrass sends to Greengrass core devices.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ListEffectiveDeploymentsResponse'\n        '480':\n          description: ValidationException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationException'\n        '481':\n          description: ResourceNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceNotFoundException'\n        '482':\n          description: AccessDeniedException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccessDeniedException'\n        '483':\n          description: InternalServerException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerException'\n        '484':\n          description: ThrottlingException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ThrottlingException'\n      parameters:\n        - name: coreDeviceThingName\n          in: path\n          required: true\n          description: The name of the core device. This is also the name of the IoT thing.\n          schema:\n            type: string\n            minLength: 1\n            maxLength: 128\n        - name: maxResults\n          in: query\n          required: false\n          description: The maximum number of results to be returned per paginated request.\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 100\n        - name: nextToken\n          in: query\n          required: false\n          description: The token to be used for the next set of paginated results.\n          schema:\n            type: string\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n  '/greengrass/v2/coreDevices/{coreDeviceThingName}/installedComponents':\n    get:\n      operationId: ListInstalledComponents\n      description: Retrieves a paginated list of the components that a Greengrass core device runs.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ListInstalledComponentsResponse'\n        '480':\n          description: ValidationException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationException'\n        '481':\n          description: ResourceNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceNotFoundException'\n        '482':\n          description: AccessDeniedException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccessDeniedException'\n        '483':\n          description: InternalServerException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerException'\n        '484':\n          description: ThrottlingException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ThrottlingException'\n      parameters:\n        - name: coreDeviceThingName\n          in: path\n          required: true\n          description: The name of the core device. This is also the name of the IoT thing.\n          schema:\n            type: string\n            minLength: 1\n            maxLength: 128\n        - name: maxResults\n          in: query\n          required: false\n          description: The maximum number of results to be returned per paginated request.\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 100\n        - name: nextToken\n          in: query\n          required: false\n          description: The token to be used for the next set of paginated results.\n          schema:\n            type: string\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n  '/tags/{resourceArn}':\n    get:\n      operationId: ListTagsForResource\n      description: Retrieves the list of tags for an IoT Greengrass resource.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ListTagsForResourceResponse'\n        '480':\n          description: InternalServerException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerException'\n        '481':\n          description: ValidationException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationException'\n        '482':\n          description: ResourceNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceNotFoundException'\n      parameters:\n        - name: resourceArn\n          in: path\n          required: true\n          description: 'The \u003ca href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"\u003eARN\u003c/a\u003e of the resource.'\n          schema:\n            type: string\n            pattern: 'arn:aws(-cn|-us-gov)?:greengrass:[^:]+:(aws|[0-9]+):(components|deployments|coreDevices):.+'\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n    post:\n      operationId: TagResource\n      description: 'Adds tags to an IoT Greengrass resource. If a tag already exists for the resource, this operation updates the tag''s value.'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TagResourceResponse'\n        '480':\n          description: InternalServerException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerException'\n        '481':\n          description: ValidationException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationException'\n        '482':\n          description: ResourceNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceNotFoundException'\n      parameters:\n        - name: resourceArn\n          in: path\n          required: true\n          description: 'The \u003ca href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"\u003eARN\u003c/a\u003e of the resource to tag.'\n          schema:\n            type: string\n            pattern: 'arn:aws(-cn|-us-gov)?:greengrass:[^:]+:(aws|[0-9]+):(components|deployments|coreDevices):.+'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - tags\n              properties:\n                tags:\n                  description: 'A list of key-value pairs that contain metadata for the resource. For more information, see \u003ca href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html\"\u003eTag your resources\u003c/a\u003e in the \u003ci\u003eIoT Greengrass V2 Developer Guide\u003c/i\u003e.'\n                  type: object\n                  minProperties: 1\n                  maxProperties: 50\n                  additionalProperties:\n                    $ref: '#/components/schemas/TagValue'\n  /greengrass/v2/resolveComponentCandidates:\n    post:\n      operationId: ResolveComponentCandidates\n      description: '\u003cp\u003eRetrieves a list of components that meet the component, version, and platform requirements of a deployment. Greengrass core devices call this operation when they receive a deployment to identify the components to install.\u003c/p\u003e \u003cp\u003eThis operation identifies components that meet all dependency requirements for a deployment. If the requirements conflict, then this operation returns an error and the deployment fails. For example, this occurs if component \u003ccode\u003eA\u003c/code\u003e requires version \u003ccode\u003e\u0026gt;2.0.0\u003c/code\u003e and component \u003ccode\u003eB\u003c/code\u003e requires version \u003ccode\u003e\u0026lt;2.0.0\u003c/code\u003e of a component dependency.\u003c/p\u003e \u003cp\u003eWhen you specify the component candidates to resolve, IoT Greengrass compares each component''s digest from the core device with the component''s digest in the Amazon Web Services Cloud. If the digests don''t match, then IoT Greengrass specifies to use the version from the Amazon Web Services Cloud.\u003c/p\u003e \u003cimportant\u003e \u003cp\u003eTo use this operation, you must use the data plane API endpoint and authenticate with an IoT device certificate. For more information, see \u003ca href=\"https://docs.aws.amazon.com/general/latest/gr/greengrass.html\"\u003eIoT Greengrass endpoints and quotas\u003c/a\u003e.\u003c/p\u003e \u003c/important\u003e'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResolveComponentCandidatesResponse'\n        '480':\n          description: ValidationException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationException'\n        '481':\n          description: AccessDeniedException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccessDeniedException'\n        '482':\n          description: ResourceNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceNotFoundException'\n        '483':\n          description: ThrottlingException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ThrottlingException'\n        '484':\n          description: InternalServerException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerException'\n        '485':\n          description: ConflictException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConflictException'\n      parameters: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - platform\n                - componentCandidates\n              properties:\n                platform:\n                  description: Contains information about a platform that a component supports.\n                  type: object\n                  properties:\n                    name:\n                      allOf:\n                        - $ref: '#/components/schemas/NonEmptyString'\n                        - description: '\u003cp\u003eThe friendly name of the platform. This name helps you identify the platform.\u003c/p\u003e \u003cp\u003eIf you omit this parameter, IoT Greengrass creates a friendly name from the \u003ccode\u003eos\u003c/code\u003e and \u003ccode\u003earchitecture\u003c/code\u003e of the platform.\u003c/p\u003e'\n                    attributes:\n                      allOf:\n                        - $ref: '#/components/schemas/PlatformAttributesMap'\n                        - description: 'A dictionary of attributes for the platform. The IoT Greengrass Core software defines the \u003ccode\u003eos\u003c/code\u003e and \u003ccode\u003eplatform\u003c/code\u003e by default. You can specify additional platform attributes for a core device when you deploy the Greengrass nucleus component. For more information, see the \u003ca href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-nucleus-component.html\"\u003eGreengrass nucleus component\u003c/a\u003e in the \u003ci\u003eIoT Greengrass V2 Developer Guide\u003c/i\u003e.'\n                componentCandidates:\n                  description: The list of components to resolve.\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/ComponentCandidate'\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n  '/tags/{resourceArn}#tagKeys':\n    delete:\n      operationId: UntagResource\n      description: Removes a tag from an IoT Greengrass resource.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UntagResourceResponse'\n        '480':\n          description: InternalServerException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerException'\n        '481':\n          description: ValidationException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationException'\n        '482':\n          description: ResourceNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceNotFoundException'\n      parameters:\n        - name: resourceArn\n          in: path\n          required: true\n          description: 'The \u003ca href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"\u003eARN\u003c/a\u003e of the resource to untag.'\n          schema:\n            type: string\n            pattern: 'arn:aws(-cn|-us-gov)?:greengrass:[^:]+:(aws|[0-9]+):(components|deployments|coreDevices):.+'\n        - name: tagKeys\n          in: query\n          required: true\n          description: A list of keys for tags to remove from the resource.\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/TagKey'\n            minItems: 1\n            maxItems: 50\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\ncomponents:\n  parameters:\n    X-Amz-Content-Sha256:\n      name: X-Amz-Content-Sha256\n      in: header\n      schema:\n        type: string\n      required: false\n    X-Amz-Date:\n      name: X-Amz-Date\n      in: header\n      schema:\n        type: string\n      required: false\n    X-Amz-Algorithm:\n      name: X-Amz-Algorithm\n      in: header\n      schema:\n        type: string\n      required: false\n    X-Amz-Credential:\n      name: X-Amz-Credential\n      in: header\n      schema:\n        type: string\n      required: false\n    X-Amz-Security-Token:\n      name: X-Amz-Security-Token\n      in: header\n      schema:\n        type: string\n      required: false\n    X-Amz-Signature:\n      name: X-Amz-Signature\n      in: header\n      schema:\n        type: string\n      required: false\n    X-Amz-SignedHeaders:\n      name: X-Amz-SignedHeaders\n      in: header\n      schema:\n        type: string\n      required: false\n  securitySchemes:\n    hmac:\n      type: apiKey\n      name: Authorization\n      in: header\n      description: Amazon Signature authorization v4\n      x-amazon-apigateway-authtype: awsSigv4\n  schemas:\n    BatchAssociateClientDeviceWithCoreDeviceResponse:\n      type: object\n      properties:\n        errorEntries:\n          allOf:\n            - $ref: '#/components/schemas/AssociateClientDeviceWithCoreDeviceErrorList'\n            - description: The list of any errors for the entries in the request. Each error entry contains the name of the IoT thing that failed to associate.\n    AssociateClientDeviceWithCoreDeviceEntry:\n      type: object\n      required:\n        - thingName\n      properties:\n        thingName:\n          allOf:\n            - $ref: '#/components/schemas/IoTThingName'\n            - description: The name of the IoT thing that represents the client device to associate.\n      description: 'Contains a request to associate a client device with a core device. The \u003ca href=\"https://docs.aws.amazon.com/greengrass/v2/APIReference/API_BatchAssociateClientDeviceWithCoreDevice.html\"\u003eBatchAssociateClientDeviceWithCoreDevice\u003c/a\u003e operation consumes a list of these requests.'\n    ValidationException: {}\n    ResourceNotFoundException: {}\n    AccessDeniedException: {}\n    InternalServerException: {}\n    ThrottlingException: {}\n    BatchDisassociateClientDeviceFromCoreDeviceResponse:\n      type: object\n      properties:\n        errorEntries:\n          allOf:\n            - $ref: '#/components/schemas/DisassociateClientDeviceFromCoreDeviceErrorList'\n            - description: The list of errors (if any) for the entries in the request. Each error entry contains the name of the IoT thing that failed to disassociate.\n    DisassociateClientDeviceFromCoreDeviceEntry:\n      type: object\n      required:\n        - thingName\n      properties:\n        thingName:\n          allOf:\n            - $ref: '#/components/schemas/IoTThingName'\n            - description: The name of the IoT thing that represents the client device to disassociate.\n      description: 'Contains a request to disassociate a client device from a core device. The \u003ca href=\"https://docs.aws.amazon.com/greengrass/v2/APIReference/API_BatchDisassociateClientDeviceWithCoreDevice.html\"\u003eBatchDisassociateClientDeviceWithCoreDevice\u003c/a\u003e operation consumes a list of these requests.'\n    CancelDeploymentResponse:\n      type: object\n      properties:\n        message:\n          allOf:\n            - $ref: '#/components/schemas/NonEmptyString'\n            - description: A message that communicates if the cancel was successful.\n    ConflictException: {}\n    CreateComponentVersionResponse:\n      type: object\n      required:\n        - componentName\n        - componentVersion\n        - creationTimestamp\n        - status\n      properties:\n        arn:\n          allOf:\n            - $ref: '#/components/schemas/ComponentVersionARN'\n            - description: 'The \u003ca href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"\u003eARN\u003c/a\u003e of the component version.'\n        componentName:\n          allOf:\n            - $ref: '#/components/schemas/ComponentNameString'\n            - description: The name of the component.\n        componentVersion:\n          allOf:\n            - $ref: '#/components/schemas/ComponentVersionString'\n            - description: The version of the component.\n        creationTimestamp:\n          allOf:\n            - $ref: '#/components/schemas/Timestamp'\n            - description: 'The time at which the component was created, expressed in ISO 8601 format.'\n        status:\n          allOf:\n            - $ref: '#/components/schemas/CloudComponentStatus'\n            - description: The status of the component version in IoT Greengrass V2. This status is different from the status of the component on a core device.\n    LambdaFunctionARNWithVersionNumber:\n      type: string\n      pattern: 'arn:aws(-cn|-us-gov)?:lambda:[^:]+:[0-9]+:function:[a-zA-Z0-9-_]+:[0-9]+'\n    ComponentNameString:\n      type: string\n      pattern: '[a-zA-Z0-9-_.]+'\n      minLength: 1\n      maxLength: 128\n    ComponentVersionString:\n      type: string\n      pattern: '[0-9a-zA-Z-.+]+'\n      minLength: 1\n      maxLength: 64\n    ComponentPlatformList:\n      type: array\n      items:\n        $ref: '#/components/schemas/ComponentPlatform'\n    ComponentDependencyMap:\n      type: object\n      additionalProperties:\n        $ref: '#/components/schemas/ComponentDependencyRequirement'\n    LambdaExecutionParameters:\n      type: object\n      properties:\n        eventSources:\n          allOf:\n            - $ref: '#/components/schemas/LambdaEventSourceList'\n            - description: The list of event sources to which to subscribe to receive work messages. The Lambda function runs when it receives a message from an event source. You can subscribe this function to local publish/subscribe messages and Amazon Web Services IoT Core MQTT messages.\n        maxQueueSize:\n          allOf:\n            - $ref: '#/components/schemas/OptionalInteger'\n            - description: The maximum size of the message queue for the Lambda function component. The IoT Greengrass core stores messages in a FIFO (first-in-first-out) queue until it can run the Lambda function to consume each message.\n        maxInstancesCount:\n          allOf:\n            - $ref: '#/components/schemas/OptionalInteger'\n            - description: The maximum number of instances that a non-pinned Lambda function can run at the same time.\n        maxIdleTimeInSeconds:\n          allOf:\n            - $ref: '#/components/schemas/OptionalInteger'\n            - description: The maximum amount of time in seconds that a non-pinned Lambda function can idle before the IoT Greengrass Core software stops its process.\n        timeoutInSeconds:\n          allOf:\n            - $ref: '#/components/schemas/OptionalInteger'\n            - description: The maximum amount of time in seconds that the Lambda function can process a work item.\n        statusTimeoutInSeconds:\n          allOf:\n            - $ref: '#/components/schemas/OptionalInteger'\n            - description: The interval in seconds at which a pinned (also known as long-lived) Lambda function component sends status updates to the Lambda manager component.\n        pinned:\n          allOf:\n            - $ref: '#/components/schemas/OptionalBoolean'\n            - description: '\u003cp\u003eWhether or not the Lambda function is pinned, or long-lived.\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eA pinned Lambda function starts when IoT Greengrass starts and keeps running in its own container.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eA non-pinned Lambda function starts only when it receives a work item and exists after it idles for \u003ccode\u003emaxIdleTimeInSeconds\u003c/code\u003e. If the function has multiple work items, the IoT Greengrass Core software creates multiple instances of the function.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eDefault: \u003ccode\u003etrue\u003c/code\u003e \u003c/p\u003e'\n        inputPayloadEncodingType:\n          allOf:\n            - $ref: '#/components/schemas/LambdaInputPayloadEncodingType'\n            - description: '\u003cp\u003eThe encoding type that the Lambda function supports.\u003c/p\u003e \u003cp\u003eDefault: \u003ccode\u003ejson\u003c/code\u003e \u003c/p\u003e'\n        execArgs:\n          allOf:\n            - $ref: '#/components/schemas/LambdaExecArgsList'\n            - description: The list of arguments to pass to the Lambda function when it runs.\n        environmentVariables:\n          allOf:\n            - $ref: '#/components/schemas/LambdaEnvironmentVariables'\n            - description: The map of environment variables that are available to the Lambda function when it runs.\n        linuxProcessParams:\n          allOf:\n            - $ref: '#/components/schemas/LambdaLinuxProcessParams'\n            - description: The parameters for the Linux process that contains the Lambda function.\n      description: Contains parameters for a Lambda function that runs on IoT Greengrass.\n    TagValue:\n      type: string\n      maxLength: 256\n    ServiceQuotaExceededException: {}\n    RequestAlreadyInProgressException: {}\n    CreateDeploymentResponse:\n      type: object\n      properties:\n        deploymentId:\n          allOf:\n            - $ref: '#/components/schemas/NonEmptyString'\n            - description: The ID of the deployment.\n        iotJobId:\n          allOf:\n            - $ref: '#/components/schemas/NonEmptyString'\n            - description: The ID of the IoT job that applies the deployment to target devices.\n        iotJobArn:\n          allOf:\n            - $ref: '#/components/schemas/IoTJobARN'\n            - description: 'The \u003ca href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"\u003eARN\u003c/a\u003e of the IoT job that applies the deployment to target devices.'\n    ComponentDeploymentSpecification:\n      type: object\n      properties:\n        componentVersion:\n          allOf:\n            - $ref: '#/components/schemas/ComponentVersionString'\n            - description: The version of the component.\n        configurationUpdate:\n          allOf:\n            - $ref: '#/components/schemas/ComponentConfigurationUpdate'\n            - description: 'The configuration updates to deploy for the component. You can define \u003ci\u003ereset\u003c/i\u003e updates and \u003ci\u003emerge\u003c/i\u003e updates. A reset updates the keys that you specify to the default configuration for the component. A merge updates the core device''s component configuration with the keys and values that you specify. The IoT Greengrass Core software applies reset updates before it applies merge updates. For more information, see \u003ca href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/update-component-configurations.html\"\u003eUpdate component configurations\u003c/a\u003e in the \u003ci\u003eIoT Greengrass V2 Developer Guide\u003c/i\u003e.'\n        runWith:\n          allOf:\n            - $ref: '#/components/schemas/ComponentRunWith'\n            - description: 'The system user and group that the IoT Greengrass Core software uses to run component processes on the core device. If you omit this parameter, the IoT Greengrass Core software uses the system user and group that you configure for the core device. For more information, see \u003ca href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/configure-greengrass-core-v2.html#configure-component-user\"\u003eConfigure the user and group that run components\u003c/a\u003e in the \u003ci\u003eIoT Greengrass V2 Developer Guide\u003c/i\u003e.'\n      description: Contains information about a component to deploy.\n    IoTJobExecutionsRolloutConfig:\n      type: object\n      properties:\n        exponentialRate:\n          allOf:\n            - $ref: '#/components/schemas/IoTJobExponentialRolloutRate'\n            - description: The exponential rate to increase the job rollout rate.\n        maximumPerMinute:\n          allOf:\n            - $ref: '#/components/schemas/IoTJobMaxExecutionsPerMin'\n            - description: 'The maximum number of devices that receive a pending job notification, per minute.'\n      description: Contains information about the rollout configuration for a job. This configuration defines the rate at which the job deploys a configuration to a fleet of target devices.\n    IoTJobAbortConfig:\n      type: object\n      required:\n        - criteriaList\n      properties:\n        criteriaList:\n          allOf:\n            - $ref: '#/components/schemas/IoTJobAbortCriteriaList'\n            - description: The list of criteria that define when and how to cancel the configuration deployment.\n      description: Contains a list of criteria that define when and how to cancel a configuration deployment.\n    IoTJobTimeoutConfig:\n      type: object\n      properties:\n        inProgressTimeoutInMinutes:\n          allOf:\n            - $ref: '#/components/schemas/IoTJobInProgressTimeoutInMinutes'\n            - description: '\u003cp\u003eThe amount of time, in minutes, that devices have to complete the job. The timer starts when the job status is set to \u003ccode\u003eIN_PROGRESS\u003c/code\u003e. If the job status doesn''t change to a terminal state before the time expires, then the job status is set to \u003ccode\u003eTIMED_OUT\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eThe timeout interval must be between 1 minute and 7 days (10080 minutes).\u003c/p\u003e'\n      description: Contains information about the timeout configuration for a job.\n    DeploymentFailureHandlingPolicy:\n      type: string\n      enum:\n        - ROLLBACK\n        - DO_NOTHING\n    DeploymentComponentUpdatePolicy:\n      type: object\n      properties:\n        timeoutInSeconds:\n          allOf:\n            - $ref: '#/components/schemas/OptionalInteger'\n            - description: '\u003cp\u003eThe amount of time in seconds that each component on a device has to report that it''s safe to update. If the component waits for longer than this timeout, then the deployment proceeds on the device.\u003c/p\u003e \u003cp\u003eDefault: \u003ccode\u003e60\u003c/code\u003e \u003c/p\u003e'\n        action:\n          allOf:\n            - $ref: '#/components/schemas/DeploymentComponentUpdatePolicyAction'\n            - description: '\u003cp\u003eWhether or not to notify components and wait for components to become safe to update. Choose from the following options:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eNOTIFY_COMPONENTS\u003c/code\u003e – The deployment notifies each component before it stops and updates that component. Components can use the \u003ca href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/interprocess-communication.html#ipc-operation-subscribetocomponentupdates\"\u003eSubscribeToComponentUpdates\u003c/a\u003e IPC operation to receive these notifications. Then, components can respond with the \u003ca href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/interprocess-communication.html#ipc-operation-defercomponentupdate\"\u003eDeferComponentUpdate\u003c/a\u003e IPC operation. For more information, see \u003ca href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/create-deployments.html\"\u003eCreate deployments\u003c/a\u003e in the \u003ci\u003eIoT Greengrass V2 Developer Guide\u003c/i\u003e.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eSKIP_NOTIFY_COMPONENTS\u003c/code\u003e – The deployment doesn''t notify components or wait for them to be safe to update.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eDefault: \u003ccode\u003eNOTIFY_COMPONENTS\u003c/code\u003e \u003c/p\u003e'\n      description: '\u003cp\u003eContains information about a deployment''s policy that defines when components are safe to update.\u003c/p\u003e \u003cp\u003eEach component on a device can report whether or not it''s ready to update. After a component and its dependencies are ready, they can apply the update in the deployment. You can configure whether or not the deployment notifies components of an update and waits for a response. You specify the amount of time each component has to respond to the update notification.\u003c/p\u003e'\n    DeploymentConfigurationValidationPolicy:\n      type: object\n      properties:\n        timeoutInSeconds:\n          allOf:\n            - $ref: '#/components/schemas/OptionalInteger'\n            - description: '\u003cp\u003eThe amount of time in seconds that a component can validate its configuration updates. If the validation time exceeds this timeout, then the deployment proceeds for the device.\u003c/p\u003e \u003cp\u003eDefault: \u003ccode\u003e30\u003c/code\u003e \u003c/p\u003e'\n      description: 'Contains information about how long a component on a core device can validate its configuration updates before it times out. Components can use the \u003ca href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/interprocess-communication.html#ipc-operation-subscribetovalidateconfigurationupdates\"\u003eSubscribeToValidateConfigurationUpdates\u003c/a\u003e IPC operation to receive notifications when a deployment specifies a configuration update. Then, components can respond with the \u003ca href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/interprocess-communication.html#ipc-operation-sendconfigurationvalidityreport\"\u003eSendConfigurationValidityReport\u003c/a\u003e IPC operation. For more information, see \u003ca href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/create-deployments.html\"\u003eCreate deployments\u003c/a\u003e in the \u003ci\u003eIoT Greengrass V2 Developer Guide\u003c/i\u003e.'\n    DescribeComponentResponse:\n      type: object\n      properties:\n        arn:\n          allOf:\n            - $ref: '#/components/schemas/ComponentVersionARN'\n            - description: 'The \u003ca href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"\u003eARN\u003c/a\u003e of the component version.'\n        componentName:\n          allOf:\n            - $ref: '#/components/schemas/ComponentNameString'\n            - description: The name of the component.\n        componentVersion:\n          allOf:\n            - $ref: '#/components/schemas/ComponentVersionString'\n            - description: The version of the component.\n        creationTimestamp:\n          allOf:\n            - $ref: '#/components/schemas/Timestamp'\n            - description: 'The time at which the component was created, expressed in ISO 8601 format.'\n        publisher:\n          allOf:\n            - $ref: '#/components/schemas/PublisherString'\n            - description: The publisher of the component version.\n        description:\n          allOf:\n            - $ref: '#/components/schemas/DescriptionString'\n            - description: The description of the component version.\n        status:\n          allOf:\n            - $ref: '#/components/schemas/CloudComponentStatus'\n            - description: The status of the component version in IoT Greengrass V2. This status is different from the status of the component on a core device.\n        platforms:\n          allOf:\n            - $ref: '#/components/schemas/ComponentPlatformList'\n            - description: The platforms that the component version supports.\n        tags:\n          allOf:\n            - $ref: '#/components/schemas/TagMap'\n            - description: 'A list of key-value pairs that contain metadata for the resource. For more information, see \u003ca href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html\"\u003eTag your resources\u003c/a\u003e in the \u003ci\u003eIoT Greengrass V2 Developer Guide\u003c/i\u003e.'\n    GetComponentResponse:\n      type: object\n      required:\n        - recipeOutputFormat\n        - recipe\n      properties:\n        recipeOutputFormat:\n          allOf:\n            - $ref: '#/components/schemas/RecipeOutputFormat'\n            - description: The format of the recipe.\n        recipe:\n          allOf:\n            - $ref: '#/components/schemas/RecipeBlob'\n            - description: The recipe of the component version.\n        tags:\n          allOf:\n            - $ref: '#/components/schemas/TagMap'\n            - description: 'A list of key-value pairs that contain metadata for the resource. For more information, see \u003ca href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html\"\u003eTag your resources\u003c/a\u003e in the \u003ci\u003eIoT Greengrass V2 Developer Guide\u003c/i\u003e.'\n    GetComponentVersionArtifactResponse:\n      type: object\n      required:\n        - preSignedUrl\n      properties:\n        preSignedUrl:\n          allOf:\n            - $ref: '#/components/schemas/NonEmptyString'\n            - description: The URL of the artifact.\n    GetCoreDeviceResponse:\n      type: object\n      properties:\n        coreDeviceThingName:\n          allOf:\n            - $ref: '#/components/schemas/CoreDeviceThingName'\n            - description: The name of the core device. This is also the name of the IoT thing.\n        coreVersion:\n          allOf:\n            - $ref: '#/components/schemas/GGCVersion'\n            - description: 'The version of the IoT Greengrass Core software that the core device runs. This version is equivalent to the version of the Greengrass nucleus component that runs on the core device. For more information, see the \u003ca href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-nucleus-component.html\"\u003eGreengrass nucleus component\u003c/a\u003e in the \u003ci\u003eIoT Greengrass V2 Developer Guide\u003c/i\u003e.'\n        platform:\n          allOf:\n            - $ref: '#/components/schemas/CoreDevicePlatformString'\n            - description: The operating system platform that the core device runs.\n        architecture:\n          allOf:\n            - $ref: '#/components/schemas/CoreDeviceArchitectureString'\n            - description: The computer architecture of the core device.\n        status:\n          allOf:\n            - $ref: '#/components/schemas/CoreDeviceStatus'\n            - description: '\u003cp\u003eThe status of the core device. The core device status can be:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eHEALTHY\u003c/code\u003e – The IoT Greengrass Core software and all components run on the core device without issue.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eUNHEALTHY\u003c/code\u003e – The IoT Greengrass Core software or a component is in a failed state on the core device.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e'\n        lastStatusUpdateTimestamp:\n          allOf:\n            - $ref: '#/components/schemas/Timestamp'\n            - description: 'The time at which the core device''s status last updated, expressed in ISO 8601 format.'\n        tags:\n          allOf:\n            - $ref: '#/components/schemas/TagMap'\n            - description: 'A list of key-value pairs that contain metadata for the resource. For more information, see \u003ca href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html\"\u003eTag your resources\u003c/a\u003e in the \u003ci\u003eIoT Greengrass V2 Developer Guide\u003c/i\u003e.'\n    GetDeploymentResponse:\n      type: object\n      properties:\n        targetArn:\n          allOf:\n            - $ref: '#/components/schemas/TargetARN'\n            - description: 'The \u003ca href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"\u003eARN\u003c/a\u003e of the target IoT thing or thing group.'\n        revisionId:\n          allOf:\n            - $ref: '#/components/schemas/NonEmptyString'\n            - description: The revision number of the deployment.\n        deploymentId:\n          allOf:\n            - $ref: '#/components/schemas/NonEmptyString'\n            - description: The ID of the deployment.\n        deploymentName:\n          allOf:\n            - $ref: '#/components/schemas/NullableString'\n            - description: The name of the deployment.\n        deploymentStatus:\n          allOf:\n            - $ref: '#/components/schemas/DeploymentStatus'\n            - description: The status of the deployment.\n        iotJobId:\n          allOf:\n            - $ref: '#/components/schemas/NullableString'\n            - description: The ID of the IoT job that applies the deployment to target devices.\n        iotJobArn:\n          allOf:\n            - $ref: '#/components/schemas/IoTJobARN'\n            - description: 'The \u003ca href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"\u003eARN\u003c/a\u003e of the IoT job that applies the deployment to target devices.'\n        components:\n          allOf:\n            - $ref: '#/components/schemas/ComponentDeploymentSpecifications'\n            - description: 'The components to deploy. This is a dictionary, where each key is the name of a component, and each key''s value is the version and configuration to deploy for that component.'\n        deploymentPolicies:\n          allOf:\n            - $ref: '#/components/schemas/DeploymentPolicies'\n            - description: The deployment policies for the deployment. These policies define how the deployment updates components and handles failure.\n        iotJobConfiguration:\n          allOf:\n            - $ref: '#/components/schemas/DeploymentIoTJobConfiguration'\n            - description: 'The job configuration for the deployment configuration. The job configuration specifies the rollout, timeout, and stop configurations for the deployment configuration.'\n        creationTimestamp:\n          allOf:\n            - $ref: '#/components/schemas/Timestamp'\n            - description: 'The time at which the deployment was created, expressed in ISO 8601 format.'\n        isLatestForTarget:\n          allOf:\n            - $ref: '#/components/schemas/IsLatestForTarget'\n            - description: Whether or not the deployment is the latest revision for its target.\n        tags:\n          allOf:\n            - $ref: '#/components/schemas/TagMap'\n            - description: 'A list of key-value pairs that contain metadata for the resource. For more information, see \u003ca href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html\"\u003eTag your resources\u003c/a\u003e in the \u003ci\u003eIoT Greengrass V2 Developer Guide\u003c/i\u003e.'\n    ListClientDevicesAssociatedWithCoreDeviceResponse:\n      type: object\n      properties:\n        associatedClientDevices:\n          allOf:\n            - $ref: '#/components/schemas/AssociatedClientDeviceList'\n            - description: A list that describes the client devices that are associated with the core device.\n        nextToken:\n          allOf:\n            - $ref: '#/components/schemas/NextTokenString'\n            - description: 'The token for the next set of results, or null if there are no additional results.'\n    ListComponentVersionsResponse:\n      type: object\n      properties:\n        componentVersions:\n          allOf:\n            - $ref: '#/components/schemas/ComponentVersionList'\n            - description: A list of versions that exist for the component.\n        nextToken:\n          allOf:\n            - $ref: '#/components/schemas/NextTokenString'\n            - description: 'The token for the next set of results, or null if there are no additional results.'\n    ListComponentsResponse:\n      type: object\n      properties:\n        components:\n          allOf:\n            - $ref: '#/components/schemas/ComponentList'\n            - description: A list that summarizes each component.\n        nextToken:\n          allOf:\n            - $ref: '#/components/schemas/NextTokenString'\n            - description: 'The token for the next set of results, or null if there are no additional results.'\n    ListCoreDevicesResponse:\n      type: object\n      properties:\n        coreDevices:\n          allOf:\n            - $ref: '#/components/schemas/CoreDevicesList'\n            - description: A list that summarizes each core device.\n        nextToken:\n          allOf:\n            - $ref: '#/components/schemas/NextTokenString'\n            - description: 'The token for the next set of results, or null if there are no additional results.'\n    ListDeploymentsResponse:\n      type: object\n      properties:\n        deployments:\n          allOf:\n            - $ref: '#/components/schemas/DeploymentList'\n            - description: A list that summarizes each deployment.\n        nextToken:\n          allOf:\n            - $ref: '#/components/schemas/NextTokenString'\n            - description: 'The token for the next set of results, or null if there are no additional results.'\n    ListEffectiveDeploymentsResponse:\n      type: object\n      properties:\n        effectiveDeployments:\n          allOf:\n            - $ref: '#/components/schemas/EffectiveDeploymentsList'\n            - description: A list that summarizes each deployment on the core device.\n        nextToken:\n          allOf:\n            - $ref: '#/components/schemas/NextTokenString'\n            - description: 'The token for the next set of results, or null if there are no additional results.'\n    ListInstalledComponentsResponse:\n      type: object\n      properties:\n        installedComponents:\n          allOf:\n            - $ref: '#/components/schemas/InstalledComponentList'\n            - description: A list that summarizes each component on the core device.\n        nextToken:\n          allOf:\n            - $ref: '#/components/schemas/NextTokenString'\n            - description: 'The token for the next set of results, or null if there are no additional results.'\n    ListTagsForResourceResponse:\n      type: object\n      properties:\n        tags:\n          allOf:\n            - $ref: '#/components/schemas/TagMap'\n            - description: 'A list of key-value pairs that contain metadata for the resource. For more information, see \u003ca href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html\"\u003eTag your resources\u003c/a\u003e in the \u003ci\u003eIoT Greengrass V2 Developer Guide\u003c/i\u003e.'\n    ResolveComponentCandidatesResponse:\n      type: object\n      properties:\n        resolvedComponentVersions:\n          allOf:\n            - $ref: '#/components/schemas/ResolvedComponentVersionsList'\n            - description: A list of components that meet the requirements that you specify in the request. This list includes each component's recipe that you can use to install the component.\n    NonEmptyString:\n      type: string\n      minLength: 1\n    PlatformAttributesMap:\n      type: object\n      additionalProperties:\n        $ref: '#/components/schemas/NonEmptyString'\n    ComponentCandidate:\n      type: object\n      properties:\n        componentName:\n          allOf:\n            - $ref: '#/components/schemas/ComponentNameString'\n            - description: The name of the component.\n        componentVersion:\n          allOf:\n            - $ref: '#/components/schemas/ComponentVersionString'\n            - description: The version of the component.\n        versionRequirements:\n          allOf:\n            - $ref: '#/components/schemas/ComponentVersionRequirementMap'\n            - description: '\u003cp\u003eThe version requirements for the component''s dependencies. Greengrass core devices get the version requirements from component recipes.\u003c/p\u003e \u003cp\u003eIoT Greengrass V2 uses semantic version constraints. For more information, see \u003ca href=\"https://semver.org/\"\u003eSemantic Versioning\u003c/a\u003e.\u003c/p\u003e'\n      description: Contains information about a component that is a candidate to deploy to a Greengrass core device.\n    TagResourceResponse:\n      type: object\n      properties: {}\n    UntagResourceResponse:\n      type: object\n      properties: {}\n    TagKey:\n      type: string\n      pattern: '^(?!aws:)[a-zA-Z+-=._:/]+$'\n      minLength: 1\n      maxLength: 128\n    IoTThingName:\n      type: string\n      minLength: 1\n      maxLength: 128\n    AssociateClientDeviceWithCoreDeviceEntryList:\n      type: array\n      items:\n        $ref: '#/components/schemas/AssociateClientDeviceWithCoreDeviceEntry'\n      minItems: 1\n      maxItems: 100\n    AssociateClientDeviceWithCoreDeviceErrorEntry:\n      type: object\n      properties:\n        thingName:\n          allOf:\n            - $ref: '#/components/schemas/IoTThingName'\n            - description: The name of the IoT thing whose associate request failed.\n        code:\n          allOf:\n            - $ref: '#/components/schemas/NonEmptyString'\n            - description: The error code for the request.\n        message:\n          allOf:\n            - $ref: '#/components/schemas/NonEmptyString'\n            - description: A message that provides additional information about the error.\n      description: 'Contains an error that occurs from a request to associate a client device with a core device. The \u003ca href=\"https://docs.aws.amazon.com/greengrass/v2/APIReference/API_BatchAssociateClientDeviceWithCoreDevice.html\"\u003eBatchAssociateClientDeviceWithCoreDevice\u003c/a\u003e operation returns a list of these errors.'\n    AssociateClientDeviceWithCoreDeviceErrorList:\n      type: array\n      items:\n        $ref: '#/components/schemas/AssociateClientDeviceWithCoreDeviceErrorEntry'\n      minItems: 1\n      maxItems: 100\n    Timestamp:\n      type: string\n      format: date-time\n    AssociatedClientDevice:\n      type: object\n      properties:\n        thingName:\n          allOf:\n            - $ref: '#/components/schemas/IoTThingName'\n            - description: The name of the IoT thing that represents the associated client device.\n        associationTimestamp:\n          allOf:\n            - $ref: '#/components/schemas/Timestamp'\n            - description: 'The time that the client device was associated, expressed in ISO 8601 format.'\n      description: Contains information about a client device that is associated to a core device for cloud discovery.\n    AssociatedClientDeviceList:\n      type: array\n      items:\n        $ref: '#/components/schemas/AssociatedClientDevice'\n      minItems: 1\n      maxItems: 100\n    BatchAssociateClientDeviceWithCoreDeviceRequest:\n      type: object\n      title: BatchAssociateClientDeviceWithCoreDeviceRequest\n      properties:\n        entries:\n          allOf:\n            - $ref: '#/components/schemas/AssociateClientDeviceWithCoreDeviceEntryList'\n            - description: The list of client devices to associate.\n    DisassociateClientDeviceFromCoreDeviceEntryList:\n      type: array\n      items:\n        $ref: '#/components/schemas/DisassociateClientDeviceFromCoreDeviceEntry'\n      minItems: 1\n      maxItems: 100\n    BatchDisassociateClientDeviceFromCoreDeviceRequest:\n      type: object\n      title: BatchDisassociateClientDeviceFromCoreDeviceRequest\n      properties:\n        entries:\n          allOf:\n            - $ref: '#/components/schemas/DisassociateClientDeviceFromCoreDeviceEntryList'\n            - description: The list of client devices to disassociate.\n    DisassociateClientDeviceFromCoreDeviceErrorList:\n      type: array\n      items:\n        $ref: '#/components/schemas/DisassociateClientDeviceFromCoreDeviceErrorEntry'\n      minItems: 1\n      maxItems: 100\n    CPU:\n      type: number\n      format: double\n      minimum: 0\n    CancelDeploymentRequest:\n      type: object\n      title: CancelDeploymentRequest\n      properties: {}\n    ClientTokenString:\n      type: string\n      pattern: '^[a-zA-Z0-9-]+$'\n      minLength: 1\n      maxLength: 64\n    CloudComponentState:\n      type: string\n      enum:\n        - REQUESTED\n        - INITIATED\n        - DEPLOYABLE\n        - FAILED\n        - DEPRECATED\n    StringMap:\n      type: object\n      additionalProperties:\n        $ref: '#/components/schemas/NonEmptyString'\n    CloudComponentStatus:\n      type: object\n      properties:\n        componentState:\n          allOf:\n            - $ref: '#/components/schemas/CloudComponentState'\n            - description: The state of the component.\n        message:\n          allOf:\n            - $ref: '#/components/schemas/NonEmptyString'\n            - description: 'A message that communicates details, such as errors, about the status of the component.'\n        errors:\n          allOf:\n            - $ref: '#/components/schemas/StringMap'\n            - description: 'A dictionary of errors that communicate why the component is in an error state. For example, if IoT Greengrass can''t access an artifact for the component, then \u003ccode\u003eerrors\u003c/code\u003e contains the artifact''s URI as a key, and the error message as the value for that key.'\n      description: Contains the status of a component in the IoT Greengrass service.\n    ComponentARN:\n      type: string\n      pattern: 'arn:aws(-cn|-us-gov)?:greengrass:[^:]+:(aws|[0-9]+):components:[^:]+'\n    ComponentLatestVersion:\n      type: object\n      properties:\n        arn:\n          allOf:\n            - $ref: '#/components/schemas/ComponentVersionARN'\n            - description: 'The \u003ca href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"\u003eARN\u003c/a\u003e of the component version.'\n        componentVersion:\n          allOf:\n            - $ref: '#/components/schemas/ComponentVersionString'\n            - description: The version of the component.\n        creationTimestamp:\n          allOf:\n            - $ref: '#/components/schemas/Timestamp'\n            - description: 'The time at which the component was created, expressed in ISO 8601 format.'\n        description:\n          allOf:\n            - $ref: '#/components/schemas/NonEmptyString'\n            - description: The description of the component version.\n        publisher:\n          allOf:\n            - $ref: '#/components/schemas/NonEmptyString'\n            - description: The publisher of the component version.\n        platforms:\n          allOf:\n            - $ref: '#/components/schemas/ComponentPlatformList'\n            - description: The platforms that the component version supports.\n      description: Contains information about the latest version of a component.\n    Component:\n      type: object\n      properties:\n        arn:\n          allOf:\n            - $ref: '#/components/schemas/ComponentARN'\n            - description: 'The \u003ca href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"\u003eARN\u003c/a\u003e of the component version.'\n        componentName:\n          allOf:\n            - $ref: '#/components/schemas/ComponentNameString'\n            - description: The name of the component.\n        latestVersion:\n          allOf:\n            - $ref: '#/components/schemas/ComponentLatestVersion'\n            - description: The latest version of the component and its details.\n      description: Contains information about a component.\n    ComponentVersionRequirementMap:\n      type: object\n      additionalProperties:\n        $ref: '#/components/schemas/NonEmptyString'\n    ComponentCandidateList:\n      type: array\n      items:\n        $ref: '#/components/schemas/ComponentCandidate'\n    ComponentConfigurationPath:\n      type: string\n      minLength: 0\n      maxLength: 256\n    ComponentConfigurationPathList:\n      type: array\n      items:\n        $ref: '#/components/schemas/ComponentConfigurationPath'\n    ComponentConfigurationString:\n      type: string\n      minLength: 1\n      maxLength: 65536\n    ComponentConfigurationUpdate:\n      type: object\n      properties:\n        merge:\n          allOf:\n            - $ref: '#/components/schemas/ComponentConfigurationString'\n            - description: 'A serialized JSON string that contains the configuration object to merge to target devices. The core device merges this configuration with the component''s existing configuration. If this is the first time a component deploys on a device, the core device merges this configuration with the component''s default configuration. This means that the core device keeps it''s existing configuration for keys and values that you don''t specify in this object. For more information, see \u003ca href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/update-component-configurations.html#merge-configuration-update\"\u003eMerge configuration updates\u003c/a\u003e in the \u003ci\u003eIoT Greengrass V2 Developer Guide\u003c/i\u003e.'\n        reset:\n          allOf:\n            - $ref: '#/components/schemas/ComponentConfigurationPathList'\n            - description: 'The list of configuration nodes to reset to default values on target devices. Use JSON pointers to specify each node to reset. JSON pointers start with a forward slash (\u003ccode\u003e/\u003c/code\u003e) and use forward slashes to separate the key for each level in the object. For more information, see the \u003ca href=\"https://tools.ietf.org/html/rfc6901\"\u003eJSON pointer specification\u003c/a\u003e and \u003ca href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/update-component-configurations.html#reset-configuration-update\"\u003eReset configuration updates\u003c/a\u003e in the \u003ci\u003eIoT Greengrass V2 Developer Guide\u003c/i\u003e.'\n      description: 'Contains information about a deployment''s update to a component''s configuration on Greengrass core devices. For more information, see \u003ca href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/update-component-configurations.html\"\u003eUpdate component configurations\u003c/a\u003e in the \u003ci\u003eIoT Greengrass V2 Developer Guide\u003c/i\u003e.'\n    ComponentDependencyRequirement:\n      type: object\n      properties:\n        versionRequirement:\n          allOf:\n            - $ref: '#/components/schemas/NonEmptyString'\n            - description: '\u003cp\u003eThe component version requirement for the component dependency.\u003c/p\u003e \u003cp\u003eIoT Greengrass V2 uses semantic version constraints. For more information, see \u003ca href=\"https://semver.org/\"\u003eSemantic Versioning\u003c/a\u003e.\u003c/p\u003e'\n        dependencyType:\n          allOf:\n            - $ref: '#/components/schemas/ComponentDependencyType'\n            - description: '\u003cp\u003eThe type of this dependency. Choose from the following options:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eSOFT\u003c/code\u003e – The component doesn''t restart if the dependency changes state.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eHARD\u003c/code\u003e – The component restarts if the dependency changes state.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eDefault: \u003ccode\u003eHARD\u003c/code\u003e \u003c/p\u003e'\n      description: Contains information about a component dependency for a Lambda function component.\n    ComponentDependencyType:\n      type: string\n      enum:\n        - HARD\n        - SOFT\n    ComponentRunWith:\n      type: object\n      properties:\n        posixUser:\n          allOf:\n            - $ref: '#/components/schemas/NonEmptyString'\n            - description: '\u003cp\u003eThe POSIX system user and (optional) group to use to run this component. Specify the user and group separated by a colon (\u003ccode\u003e:\u003c/code\u003e) in the following format: \u003ccode\u003euser:group\u003c/code\u003e. The group is optional. If you don''t specify a group, the IoT Greengrass Core software uses the primary user for the group.\u003c/p\u003e \u003cp\u003eIf you omit this parameter, the IoT Greengrass Core software uses the default system user and group that you configure on the Greengrass nucleus component. For more information, see \u003ca href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/configure-greengrass-core-v2.html#configure-component-user\"\u003eConfigure the user and group that run components\u003c/a\u003e.\u003c/p\u003e'\n        systemResourceLimits:\n          allOf:\n            - $ref: '#/components/schemas/SystemResourceLimits'\n            - description: '\u003cp\u003eThe system resource limits to apply to this component''s process on the core device.\u003c/p\u003e \u003cp\u003eIf you omit this parameter, the IoT Greengrass Core software uses the default system resource limits that you configure on the Greengrass nucleus component. For more information, see \u003ca href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/configure-greengrass-core-v2.html#configure-component-system-resource-limits\"\u003eConfigure system resource limits for components\u003c/a\u003e.\u003c/p\u003e'\n      description: 'Contains information system user and group that the IoT Greengrass Core software uses to run component processes on the core device. For more information, see \u003ca href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/configure-greengrass-core-v2.html#configure-component-user\"\u003eConfigure the user and group that run components\u003c/a\u003e in the \u003ci\u003eIoT Greengrass V2 Developer Guide\u003c/i\u003e.'\n    ComponentDeploymentSpecifications:\n      type: object\n      additionalProperties:\n        $ref: '#/components/schemas/ComponentDeploymentSpecification'\n    ComponentVersionARN:\n      type: string\n      pattern: 'arn:aws(-cn|-us-gov)?:greengrass:[^:]+:(aws|[0-9]+):components:[^:]+:versions:[^:]+'\n    ComponentList:\n      type: array\n      items:\n        $ref: '#/components/schemas/Component'\n    ComponentPlatform:\n      type: object\n      properties:\n        name:\n          allOf:\n            - $ref: '#/components/schemas/NonEmptyString'\n            - description: '\u003cp\u003eThe friendly name of the platform. This name helps you identify the platform.\u003c/p\u003e \u003cp\u003eIf you omit this parameter, IoT Greengrass creates a friendly name from the \u003ccode\u003eos\u003c/code\u003e and \u003ccode\u003earchitecture\u003c/code\u003e of the platform.\u003c/p\u003e'\n        attributes:\n          allOf:\n            - $ref: '#/components/schemas/PlatformAttributesMap'\n            - description: 'A dictionary of attributes for the platform. The IoT Greengrass Core software defines the \u003ccode\u003eos\u003c/code\u003e and \u003ccode\u003eplatform\u003c/code\u003e by default. You can specify additional platform attributes for a core device when you deploy the Greengrass nucleus component. For more information, see the \u003ca href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-nucleus-component.html\"\u003eGreengrass nucleus component\u003c/a\u003e in the \u003ci\u003eIoT Greengrass V2 Developer Guide\u003c/i\u003e.'\n      description: Contains information about a platform that a component supports.\n    SystemResourceLimits:\n      type: object\n      properties:\n        memory:\n          allOf:\n            - $ref: '#/components/schemas/Memory'\n            - description: 'The maximum amount of RAM, expressed in kilobytes, that a component''s processes can use on the core device.'\n        cpus:\n          allOf:\n            - $ref: '#/components/schemas/CPU'\n            - description: 'The maximum amount of CPU time that a component''s processes can use on the core device. A core device''s total CPU time is equivalent to the device''s number of CPU cores. For example, on a core device with 4 CPU cores, you can set this value to \u003ccode\u003e2\u003c/code\u003e to limit the component''s processes to 50 percent usage of each CPU core. On a device with 1 CPU core, you can set this value to \u003ccode\u003e0.25\u003c/code\u003e to limit the component''s processes to 25 percent usage of the CPU. If you set this value to a number greater than the number of CPU cores, the IoT Greengrass Core software doesn''t limit the component''s CPU usage.'\n      description: 'Contains information about system resource limits that the IoT Greengrass Core software applies to a component''s processes. For more information, see \u003ca href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/configure-greengrass-core-v2.html#configure-component-system-resource-limits\"\u003eConfigure system resource limits for components\u003c/a\u003e.'\n    ComponentVersionListItem:\n      type: object\n      properties:\n        componentName:\n          allOf:\n            - $ref: '#/components/schemas/ComponentNameString'\n            - description: The name of the component.\n        componentVersion:\n          allOf:\n            - $ref: '#/components/schemas/ComponentVersionString'\n            - description: The version of the component.\n        arn:\n          allOf:\n            - $ref: '#/components/schemas/NonEmptyString'\n            - description: 'The \u003ca href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"\u003eARN\u003c/a\u003e of the component version.'\n      description: Contains information about a component version in a list.\n    ComponentVersionList:\n      type: array\n      items:\n        $ref: '#/components/schemas/ComponentVersionListItem'\n    ComponentVisibilityScope:\n      type: string\n      enum:\n        - PRIVATE\n        - PUBLIC\n    CoreDeviceThingName:\n      type: string\n      minLength: 1\n      maxLength: 128\n    CoreDeviceStatus:\n      type: string\n      enum:\n        - HEALTHY\n        - UNHEALTHY\n    CoreDevice:\n      type: object\n      properties:\n        coreDeviceThingName:\n          allOf:\n            - $ref: '#/components/schemas/CoreDeviceThingName'\n            - description: The name of the core device. This is also the name of the IoT thing.\n        status:\n          allOf:\n            - $ref: '#/components/schemas/CoreDeviceStatus'\n            - description: '\u003cp\u003eThe status of the core device. Core devices can have the following statuses:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eHEALTHY\u003c/code\u003e – The IoT Greengrass Core software and all components run on the core device without issue.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eUNHEALTHY\u003c/code\u003e – The IoT Greengrass Core software or a component is in a failed state on the core device.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e'\n        lastStatusUpdateTimestamp:\n          allOf:\n            - $ref: '#/components/schemas/Timestamp'\n            - description: 'The time at which the core device''s status last updated, expressed in ISO 8601 format.'\n      description: 'Contains information about a Greengrass core device, which is an IoT thing that runs the IoT Greengrass Core software.'\n    CoreDeviceArchitectureString:\n      type: string\n      minLength: 1\n      maxLength: 255\n    CoreDevicePlatformString:\n      type: string\n      minLength: 1\n      maxLength: 255\n    CoreDevicesList:\n      type: array\n      items:\n        $ref: '#/components/schemas/CoreDevice'\n    RecipeBlob:\n      type: string\n    LambdaFunctionRecipeSource:\n      type: object\n      required:\n        - lambdaArn\n      properties:\n        lambdaArn:\n          allOf:\n            - $ref: '#/components/schemas/LambdaFunctionARNWithVersionNumber'\n            - description: 'The \u003ca href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"\u003eARN\u003c/a\u003e of the Lambda function. The ARN must include the version of the function to import. You can''t use version aliases like \u003ccode\u003e$LATEST\u003c/code\u003e.'\n        componentName:\n          allOf:\n            - $ref: '#/components/schemas/ComponentNameString'\n            - description: \u003cp\u003eThe name of the component.\u003c/p\u003e \u003cp\u003eDefaults to the name of the Lambda function.\u003c/p\u003e\n        componentVersion:\n          allOf:\n            - $ref: '#/components/schemas/ComponentVersionString'\n            - description: '\u003cp\u003eThe version of the component.\u003c/p\u003e \u003cp\u003eDefaults to the version of the Lambda function as a semantic version. For example, if your function version is \u003ccode\u003e3\u003c/code\u003e, the component version becomes \u003ccode\u003e3.0.0\u003c/code\u003e.\u003c/p\u003e'\n        componentPlatforms:\n          allOf:\n            - $ref: '#/components/schemas/ComponentPlatformList'\n            - description: The platforms that the component version supports.\n        componentDependencies:\n          allOf:\n            - $ref: '#/components/schemas/ComponentDependencyMap'\n            - description: The component versions on which this Lambda function component depends.\n        componentLambdaParameters:\n          allOf:\n            - $ref: '#/components/schemas/LambdaExecutionParameters'\n            - description: The system and runtime parameters for the Lambda function as it runs on the Greengrass core device.\n      description: Contains information about an Lambda function to import to create a component.\n    TagMap:\n      type: object\n      minProperties: 1\n      maxProperties: 50\n      additionalProperties:\n        $ref: '#/components/schemas/TagValue'\n    CreateComponentVersionRequest:\n      type: object\n      title: CreateComponentVersionRequest\n      properties:\n        inlineRecipe:\n          allOf:\n            - $ref: '#/components/schemas/RecipeBlob'\n            - description: '\u003cp\u003eThe recipe to use to create the component. The recipe defines the component''s metadata, parameters, dependencies, lifecycle, artifacts, and platform compatibility.\u003c/p\u003e \u003cp\u003eYou must specify either \u003ccode\u003einlineRecipe\u003c/code\u003e or \u003ccode\u003elambdaFunction\u003c/code\u003e.\u003c/p\u003e'\n        lambdaFunction:\n          allOf:\n            - $ref: '#/components/schemas/LambdaFunctionRecipeSource'\n            - description: \u003cp\u003eThe parameters to create a component from a Lambda function.\u003c/p\u003e \u003cp\u003eYou must specify either \u003ccode\u003einlineRecipe\u003c/code\u003e or \u003ccode\u003elambdaFunction\u003c/code\u003e.\u003c/p\u003e\n        tags:\n          allOf:\n            - $ref: '#/components/schemas/TagMap'\n            - description: 'A list of key-value pairs that contain metadata for the resource. For more information, see \u003ca href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html\"\u003eTag your resources\u003c/a\u003e in the \u003ci\u003eIoT Greengrass V2 Developer Guide\u003c/i\u003e.'\n        clientToken:\n          allOf:\n            - $ref: '#/components/schemas/ClientTokenString'\n            - description: 'A unique, case-sensitive identifier that you can provide to ensure that the request is idempotent. Idempotency means that the request is successfully processed only once, even if you send the request multiple times. When a request succeeds, and you specify the same client token for subsequent successful requests, the IoT Greengrass V2 service returns the successful response that it caches from the previous request. IoT Greengrass V2 caches successful responses for idempotent requests for up to 8 hours.'\n    TargetARN:\n      type: string\n      pattern: 'arn:aws(-cn|-us-gov)?:iot:[^:]+:[0-9]+:(thing|thinggroup)/.+'\n    DeploymentIoTJobConfiguration:\n      type: object\n      properties:\n        jobExecutionsRolloutConfig:\n          allOf:\n            - $ref: '#/components/schemas/IoTJobExecutionsRolloutConfig'\n            - description: The rollout configuration for the job. This configuration defines the rate at which the job rolls out to the fleet of target devices.\n        abortConfig:\n          allOf:\n            - $ref: '#/components/schemas/IoTJobAbortConfig'\n            - description: The stop configuration for the job. This configuration defines when and how to stop a job rollout.\n        timeoutConfig:\n          allOf:\n            - $ref: '#/components/schemas/IoTJobTimeoutConfig'\n            - description: The timeout configuration for the job. This configuration defines the amount of time each device has to complete the job.\n      description: Contains information about an IoT job configuration.\n    DeploymentPolicies:\n      type: object\n      properties:\n        failureHandlingPolicy:\n          allOf:\n            - $ref: '#/components/schemas/DeploymentFailureHandlingPolicy'\n            - description: '\u003cp\u003eThe failure handling policy for the configuration deployment. This policy defines what to do if the deployment fails.\u003c/p\u003e \u003cp\u003eDefault: \u003ccode\u003eROLLBACK\u003c/code\u003e \u003c/p\u003e'\n        componentUpdatePolicy:\n          allOf:\n            - $ref: '#/components/schemas/DeploymentComponentUpdatePolicy'\n            - description: The component update policy for the configuration deployment. This policy defines when it's safe to deploy the configuration to devices.\n        configurationValidationPolicy:\n          allOf:\n            - $ref: '#/components/schemas/DeploymentConfigurationValidationPolicy'\n            - description: The configuration validation policy for the configuration deployment. This policy defines how long each component has to validate its configure updates.\n      description: Contains information about policies that define how a deployment updates components and handles failure.\n    CreateDeploymentRequest:\n      type: object\n      required:\n        - targetArn\n      title: CreateDeploymentRequest\n      properties:\n        targetArn:\n          allOf:\n            - $ref: '#/components/schemas/TargetARN'\n            - description: 'The \u003ca href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"\u003eARN\u003c/a\u003e of the target IoT thing or thing group.'\n        deploymentName:\n          allOf:\n            - $ref: '#/components/schemas/NonEmptyString'\n            - description: The name of the deployment.\n        components:\n          allOf:\n            - $ref: '#/components/schemas/ComponentDeploymentSpecifications'\n            - description: 'The components to deploy. This is a dictionary, where each key is the name of a component, and each key''s value is the version and configuration to deploy for that component.'\n        iotJobConfiguration:\n          allOf:\n            - $ref: '#/components/schemas/DeploymentIoTJobConfiguration'\n            - description: 'The job configuration for the deployment configuration. The job configuration specifies the rollout, timeout, and stop configurations for the deployment configuration.'\n        deploymentPolicies:\n          allOf:\n            - $ref: '#/components/schemas/DeploymentPolicies'\n            - description: The deployment policies for the deployment. These policies define how the deployment updates components and handles failure.\n        tags:\n          allOf:\n            - $ref: '#/components/schemas/TagMap'\n            - description: 'A list of key-value pairs that contain metadata for the resource. For more information, see \u003ca href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html\"\u003eTag your resources\u003c/a\u003e in the \u003ci\u003eIoT Greengrass V2 Developer Guide\u003c/i\u003e.'\n        clientToken:\n          allOf:\n            - $ref: '#/components/schemas/ClientTokenString'\n            - description: 'A unique, case-sensitive identifier that you can provide to ensure that the request is idempotent. Idempotency means that the request is successfully processed only once, even if you send the request multiple times. When a request succeeds, and you specify the same client token for subsequent successful requests, the IoT Greengrass V2 service returns the successful response that it caches from the previous request. IoT Greengrass V2 caches successful responses for idempotent requests for up to 8 hours.'\n    IoTJobARN:\n      type: string\n      pattern: 'arn:aws(-cn|-us-gov)?:iot:[^:]+:[0-9]+:job/.+'\n    DefaultMaxResults:\n      type: integer\n      minimum: 1\n      maximum: 100\n    DeleteComponentRequest:\n      type: object\n      title: DeleteComponentRequest\n      properties: {}\n    DeleteCoreDeviceRequest:\n      type: object\n      title: DeleteCoreDeviceRequest\n      properties: {}\n    DeploymentStatus:\n      type: string\n      enum:\n        - ACTIVE\n        - COMPLETED\n        - CANCELED\n        - FAILED\n        - INACTIVE\n    IsLatestForTarget:\n      type: boolean\n    Deployment:\n      type: object\n      properties:\n        targetArn:\n          allOf:\n            - $ref: '#/components/schemas/TargetARN'\n            - description: 'The \u003ca href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"\u003eARN\u003c/a\u003e of the target IoT thing or thing group.'\n        revisionId:\n          allOf:\n            - $ref: '#/components/schemas/NonEmptyString'\n            - description: The revision number of the deployment.\n        deploymentId:\n          allOf:\n            - $ref: '#/components/schemas/NonEmptyString'\n            - description: The ID of the deployment.\n        deploymentName:\n          allOf:\n            - $ref: '#/components/schemas/NonEmptyString'\n            - description: The name of the deployment.\n        creationTimestamp:\n          allOf:\n            - $ref: '#/components/schemas/Timestamp'\n            - description: 'The time at which the deployment was created, expressed in ISO 8601 format.'\n        deploymentStatus:\n          allOf:\n            - $ref: '#/components/schemas/DeploymentStatus'\n            - description: The status of the deployment.\n        isLatestForTarget:\n          allOf:\n            - $ref: '#/components/schemas/IsLatestForTarget'\n            - description: Whether or not the deployment is the latest revision for its target.\n      description: Contains information about a deployment.\n    OptionalInteger:\n      type: integer\n    DeploymentComponentUpdatePolicyAction:\n      type: string\n      enum:\n        - NOTIFY_COMPONENTS\n        - SKIP_NOTIFY_COMPONENTS\n    DeploymentHistoryFilter:\n      type: string\n      enum:\n        - ALL\n        - LATEST_ONLY\n    DeploymentID:\n      type: string\n    DeploymentList:\n      type: array\n      items:\n        $ref: '#/components/schemas/Deployment'\n    DeploymentName:\n      type: string\n    DescribeComponentRequest:\n      type: object\n      title: DescribeComponentRequest\n      properties: {}\n    PublisherString:\n      type: string\n    DescriptionString:\n      type: string\n    Description:\n      type: string\n      minLength: 1\n      maxLength: 500\n    DisassociateClientDeviceFromCoreDeviceErrorEntry:\n      type: object\n      properties:\n        thingName:\n          allOf:\n            - $ref: '#/components/schemas/IoTThingName'\n            - description: The name of the IoT thing whose disassociate request failed.\n        code:\n          allOf:\n            - $ref: '#/components/schemas/NonEmptyString'\n            - description: The error code for the request.\n        message:\n          allOf:\n            - $ref: '#/components/schemas/NonEmptyString'\n            - description: A message that provides additional information about the error.\n      description: 'Contains an error that occurs from a request to disassociate a client device from a core device. The \u003ca href=\"https://docs.aws.amazon.com/greengrass/v2/APIReference/API_BatchDisassociateClientDeviceWithCoreDevice.html\"\u003eBatchDisassociateClientDeviceWithCoreDevice\u003c/a\u003e operation returns a list of these errors.'\n    IoTJobId:\n      type: string\n      minLength: 1\n      maxLength: 255\n    EffectiveDeploymentExecutionStatus:\n      type: string\n      enum:\n        - IN_PROGRESS\n        - QUEUED\n        - FAILED\n        - COMPLETED\n        - TIMED_OUT\n        - CANCELED\n        - REJECTED\n    Reason:\n      type: string\n    EffectiveDeployment:\n      type: object\n      required:\n        - deploymentId\n        - deploymentName\n        - targetArn\n        - coreDeviceExecutionStatus\n        - creationTimestamp\n        - modifiedTimestamp\n      properties:\n        deploymentId:\n          allOf:\n            - $ref: '#/components/schemas/DeploymentID'\n            - description: The ID of the deployment.\n        deploymentName:\n          allOf:\n            - $ref: '#/components/schemas/DeploymentName'\n            - description: The name of the deployment.\n        iotJobId:\n          allOf:\n            - $ref: '#/components/schemas/IoTJobId'\n            - description: The ID of the IoT job that applies the deployment to target devices.\n        iotJobArn:\n          allOf:\n            - $ref: '#/components/schemas/IoTJobARN'\n            - description: 'The \u003ca href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"\u003eARN\u003c/a\u003e of the IoT job that applies the deployment to target devices.'\n        description:\n          allOf:\n            - $ref: '#/components/schemas/Description'\n            - description: The description of the deployment job.\n        targetArn:\n          allOf:\n            - $ref: '#/components/schemas/TargetARN'\n            - description: 'The \u003ca href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"\u003eARN\u003c/a\u003e of the target IoT thing or thing group.'\n        coreDeviceExecutionStatus:\n          allOf:\n            - $ref: '#/components/schemas/EffectiveDeploymentExecutionStatus'\n            - description: The status of the deployment job on the Greengrass core device.\n        reason:\n          allOf:\n            - $ref: '#/components/schemas/Reason'\n            - description: 'The reason code for the update, if the job was updated.'\n        creationTimestamp:\n          allOf:\n            - $ref: '#/components/schemas/Timestamp'\n            - description: 'The time at which the deployment was created, expressed in ISO 8601 format.'\n        modifiedTimestamp:\n          allOf:\n            - $ref: '#/components/schemas/Timestamp'\n            - description: 'The time at which the deployment job was last modified, expressed in ISO 8601 format.'\n      description: Contains information about a deployment job that IoT Greengrass sends to a Greengrass core device.\n    EffectiveDeploymentsList:\n      type: array\n      items:\n        $ref: '#/components/schemas/EffectiveDeployment'\n    FileSystemPath:\n      type: string\n    GGCVersion:\n      type: string\n      minLength: 1\n      maxLength: 255\n    GenericV2ARN:\n      type: string\n      pattern: 'arn:aws(-cn|-us-gov)?:greengrass:[^:]+:(aws|[0-9]+):(components|deployments|coreDevices):.+'\n    RecipeOutputFormat:\n      type: string\n      enum:\n        - JSON\n        - YAML\n    GetComponentRequest:\n      type: object\n      title: GetComponentRequest\n      properties: {}\n    GetComponentVersionArtifactRequest:\n      type: object\n      title: GetComponentVersionArtifactRequest\n      properties: {}\n    GetCoreDeviceRequest:\n      type: object\n      title: GetCoreDeviceRequest\n      properties: {}\n    GetDeploymentRequest:\n      type: object\n      title: GetDeploymentRequest\n      properties: {}\n    NullableString:\n      type: string\n    InstalledComponentLifecycleState:\n      type: string\n      enum:\n        - NEW\n        - INSTALLED\n        - STARTING\n        - RUNNING\n        - STOPPING\n        - ERRORED\n        - BROKEN\n        - FINISHED\n    LifecycleStateDetails:\n      type: string\n      minLength: 1\n      maxLength: 1000\n    IsRoot:\n      type: boolean\n    InstalledComponent:\n      type: object\n      properties:\n        componentName:\n          allOf:\n            - $ref: '#/components/schemas/ComponentNameString'\n            - description: The name of the component.\n        componentVersion:\n          allOf:\n            - $ref: '#/components/schemas/ComponentVersionString'\n            - description: The version of the component.\n        lifecycleState:\n          allOf:\n            - $ref: '#/components/schemas/InstalledComponentLifecycleState'\n            - description: The lifecycle state of the component.\n        lifecycleStateDetails:\n          allOf:\n            - $ref: '#/components/schemas/LifecycleStateDetails'\n            - description: The details about the lifecycle state of the component.\n        isRoot:\n          allOf:\n            - $ref: '#/components/schemas/IsRoot'\n            - description: Whether or not the component is a root component.\n      description: Contains information about a component on a Greengrass core device.\n    InstalledComponentList:\n      type: array\n      items:\n        $ref: '#/components/schemas/InstalledComponent'\n    IoTJobAbortAction:\n      type: string\n      enum:\n        - CANCEL\n    IoTJobAbortCriteriaList:\n      type: array\n      items:\n        $ref: '#/components/schemas/IoTJobAbortCriteria'\n      minItems: 1\n    IoTJobExecutionFailureType:\n      type: string\n      enum:\n        - FAILED\n        - REJECTED\n        - TIMED_OUT\n        - ALL\n    IoTJobAbortThresholdPercentage:\n      type: number\n      format: double\n      maximum: 100\n    IoTJobMinimumNumberOfExecutedThings:\n      type: integer\n      minimum: 1\n    IoTJobAbortCriteria:\n      type: object\n      required:\n        - failureType\n        - action\n        - thresholdPercentage\n        - minNumberOfExecutedThings\n      properties:\n        failureType:\n          allOf:\n            - $ref: '#/components/schemas/IoTJobExecutionFailureType'\n            - description: The type of job deployment failure that can cancel a job.\n        action:\n          allOf:\n            - $ref: '#/components/schemas/IoTJobAbortAction'\n            - description: The action to perform when the criteria are met.\n        thresholdPercentage:\n          allOf:\n            - $ref: '#/components/schemas/IoTJobAbortThresholdPercentage'\n            - description: '\u003cp\u003eThe minimum percentage of \u003ccode\u003efailureType\u003c/code\u003e failures that occur before the job can cancel.\u003c/p\u003e \u003cp\u003eThis parameter supports up to two digits after the decimal (for example, you can specify \u003ccode\u003e10.9\u003c/code\u003e or \u003ccode\u003e10.99\u003c/code\u003e, but not \u003ccode\u003e10.999\u003c/code\u003e).\u003c/p\u003e'\n        minNumberOfExecutedThings:\n          allOf:\n            - $ref: '#/components/schemas/IoTJobMinimumNumberOfExecutedThings'\n            - description: The minimum number of things that receive the configuration before the job can cancel.\n      description: '\u003cp\u003eContains criteria that define when and how to cancel a job.\u003c/p\u003e \u003cp\u003eThe deployment stops if the following conditions are true:\u003c/p\u003e \u003col\u003e \u003cli\u003e \u003cp\u003eThe number of things that receive the deployment exceeds the \u003ccode\u003eminNumberOfExecutedThings\u003c/code\u003e.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eThe percentage of failures with type \u003ccode\u003efailureType\u003c/code\u003e exceeds the \u003ccode\u003ethresholdPercentage\u003c/code\u003e.\u003c/p\u003e \u003c/li\u003e \u003c/ol\u003e'\n    IoTJobExponentialRolloutRate:\n      type: object\n      required:\n        - baseRatePerMinute\n        - incrementFactor\n        - rateIncreaseCriteria\n      properties:\n        baseRatePerMinute:\n          allOf:\n            - $ref: '#/components/schemas/IoTJobRolloutBaseRatePerMinute'\n            - description: 'The minimum number of devices that receive a pending job notification, per minute, when the job starts. This parameter defines the initial rollout rate of the job.'\n        incrementFactor:\n          allOf:\n            - $ref: '#/components/schemas/IoTJobRolloutIncrementFactor'\n            - description: '\u003cp\u003eThe exponential factor to increase the rollout rate for the job.\u003c/p\u003e \u003cp\u003eThis parameter supports up to one digit after the decimal (for example, you can specify \u003ccode\u003e1.5\u003c/code\u003e, but not \u003ccode\u003e1.55\u003c/code\u003e).\u003c/p\u003e'\n        rateIncreaseCriteria:\n          allOf:\n            - $ref: '#/components/schemas/IoTJobRateIncreaseCriteria'\n            - description: The criteria to increase the rollout rate for the job.\n      description: Contains information about an exponential rollout rate for a configuration deployment job.\n    IoTJobMaxExecutionsPerMin:\n      type: integer\n      minimum: 1\n      maximum: 1000\n    IoTJobRolloutBaseRatePerMinute:\n      type: integer\n      minimum: 1\n      maximum: 1000\n    IoTJobRolloutIncrementFactor:\n      type: number\n      format: double\n      minimum: 1\n      maximum: 5\n    IoTJobRateIncreaseCriteria:\n      type: object\n      properties:\n        numberOfNotifiedThings:\n          allOf:\n            - $ref: '#/components/schemas/IoTJobNumberOfThings'\n            - description: The number of devices to receive the job notification before the rollout rate increases.\n        numberOfSucceededThings:\n          allOf:\n            - $ref: '#/components/schemas/IoTJobNumberOfThings'\n            - description: The number of devices to successfully run the configuration job before the rollout rate increases.\n      description: Contains information about criteria to meet before a job increases its rollout rate. Specify either \u003ccode\u003enumberOfNotifiedThings\u003c/code\u003e or \u003ccode\u003enumberOfSucceededThings\u003c/code\u003e.\n    IoTJobInProgressTimeoutInMinutes:\n      type: integer\n    IoTJobNumberOfThings:\n      type: integer\n      minimum: 1\n    OptionalBoolean:\n      type: boolean\n    LambdaVolumeList:\n      type: array\n      items:\n        $ref: '#/components/schemas/LambdaVolumeMount'\n    LambdaDeviceList:\n      type: array\n      items:\n        $ref: '#/components/schemas/LambdaDeviceMount'\n    LambdaContainerParams:\n      type: object\n      properties:\n        memorySizeInKB:\n          allOf:\n            - $ref: '#/components/schemas/OptionalInteger'\n            - description: '\u003cp\u003eThe memory size of the container, expressed in kilobytes.\u003c/p\u003e \u003cp\u003eDefault: \u003ccode\u003e16384\u003c/code\u003e (16 MB)\u003c/p\u003e'\n        mountROSysfs:\n          allOf:\n            - $ref: '#/components/schemas/OptionalBoolean'\n            - description: '\u003cp\u003eWhether or not the container can read information from the device''s \u003ccode\u003e/sys\u003c/code\u003e folder.\u003c/p\u003e \u003cp\u003eDefault: \u003ccode\u003efalse\u003c/code\u003e \u003c/p\u003e'\n        volumes:\n          allOf:\n            - $ref: '#/components/schemas/LambdaVolumeList'\n            - description: The list of volumes that the container can access.\n        devices:\n          allOf:\n            - $ref: '#/components/schemas/LambdaDeviceList'\n            - description: The list of system devices that the container can access.\n      description: Contains information about a container in which Lambda functions run on Greengrass core devices.\n    LambdaDeviceMount:\n      type: object\n      required:\n        - path\n      properties:\n        path:\n          allOf:\n            - $ref: '#/components/schemas/FileSystemPath'\n            - description: The mount path for the device in the file system.\n        permission:\n          allOf:\n            - $ref: '#/components/schemas/LambdaFilesystemPermission'\n            - description: '\u003cp\u003eThe permission to access the device: read/only (\u003ccode\u003ero\u003c/code\u003e) or read/write (\u003ccode\u003erw\u003c/code\u003e).\u003c/p\u003e \u003cp\u003eDefault: \u003ccode\u003ero\u003c/code\u003e \u003c/p\u003e'\n        addGroupOwner:\n          allOf:\n            - $ref: '#/components/schemas/OptionalBoolean'\n            - description: '\u003cp\u003eWhether or not to add the component''s system user as an owner of the device.\u003c/p\u003e \u003cp\u003eDefault: \u003ccode\u003efalse\u003c/code\u003e \u003c/p\u003e'\n      description: Contains information about a device that Linux processes in a container can access.\n    LambdaFilesystemPermission:\n      type: string\n      enum:\n        - ro\n        - rw\n    String:\n      type: string\n    LambdaEnvironmentVariables:\n      type: object\n      additionalProperties:\n        $ref: '#/components/schemas/String'\n    TopicString:\n      type: string\n    LambdaEventSourceType:\n      type: string\n      enum:\n        - PUB_SUB\n        - IOT_CORE\n    LambdaEventSource:\n      type: object\n      required:\n        - topic\n        - type\n      properties:\n        topic:\n          allOf:\n            - $ref: '#/components/schemas/TopicString'\n            - description: The topic to which to subscribe to receive event messages.\n        type:\n          allOf:\n            - $ref: '#/components/schemas/LambdaEventSourceType'\n            - description: '\u003cp\u003eThe type of event source. Choose from the following options:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003ePUB_SUB\u003c/code\u003e – Subscribe to local publish/subscribe messages. This event source type doesn''t support MQTT wildcards (\u003ccode\u003e+\u003c/code\u003e and \u003ccode\u003e#\u003c/code\u003e) in the event source topic.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eIOT_CORE\u003c/code\u003e – Subscribe to Amazon Web Services IoT Core MQTT messages. This event source type supports MQTT wildcards (\u003ccode\u003e+\u003c/code\u003e and \u003ccode\u003e#\u003c/code\u003e) in the event source topic.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e'\n      description: Contains information about an event source for an Lambda function. The event source defines the topics on which this Lambda function subscribes to receive messages that run the function.\n    LambdaEventSourceList:\n      type: array\n      items:\n        $ref: '#/components/schemas/LambdaEventSource'\n    LambdaExecArg:\n      type: string\n    LambdaExecArgsList:\n      type: array\n      items:\n        $ref: '#/components/schemas/LambdaExecArg'\n    LambdaInputPayloadEncodingType:\n      type: string\n      enum:\n        - json\n        - binary\n    LambdaLinuxProcessParams:\n      type: object\n      properties:\n        isolationMode:\n          allOf:\n            - $ref: '#/components/schemas/LambdaIsolationMode'\n            - description: '\u003cp\u003eThe isolation mode for the process that contains the Lambda function. The process can run in an isolated runtime environment inside the IoT Greengrass container, or as a regular process outside any container.\u003c/p\u003e \u003cp\u003eDefault: \u003ccode\u003eGreengrassContainer\u003c/code\u003e \u003c/p\u003e'\n        containerParams:\n          allOf:\n            - $ref: '#/components/schemas/LambdaContainerParams'\n            - description: The parameters for the container in which the Lambda function runs.\n      description: Contains parameters for a Linux process that contains an Lambda function.\n    LambdaIsolationMode:\n      type: string\n      enum:\n        - GreengrassContainer\n        - NoContainer\n    LambdaVolumeMount:\n      type: object\n      required:\n        - sourcePath\n        - destinationPath\n      properties:\n        sourcePath:\n          allOf:\n            - $ref: '#/components/schemas/FileSystemPath'\n            - description: The path to the physical volume in the file system.\n        destinationPath:\n          allOf:\n            - $ref: '#/components/schemas/FileSystemPath'\n            - description: The path to the logical volume in the file system.\n        permission:\n          allOf:\n            - $ref: '#/components/schemas/LambdaFilesystemPermission'\n            - description: '\u003cp\u003eThe permission to access the volume: read/only (\u003ccode\u003ero\u003c/code\u003e) or read/write (\u003ccode\u003erw\u003c/code\u003e).\u003c/p\u003e \u003cp\u003eDefault: \u003ccode\u003ero\u003c/code\u003e \u003c/p\u003e'\n        addGroupOwner:\n          allOf:\n            - $ref: '#/components/schemas/OptionalBoolean'\n            - description: '\u003cp\u003eWhether or not to add the IoT Greengrass user group as an owner of the volume.\u003c/p\u003e \u003cp\u003eDefault: \u003ccode\u003efalse\u003c/code\u003e \u003c/p\u003e'\n      description: 'Contains information about a volume that Linux processes in a container can access. When you define a volume, the IoT Greengrass Core software mounts the source files to the destination inside the container.'\n    NextTokenString:\n      type: string\n    ListClientDevicesAssociatedWithCoreDeviceRequest:\n      type: object\n      title: ListClientDevicesAssociatedWithCoreDeviceRequest\n      properties: {}\n    ListComponentVersionsRequest:\n      type: object\n      title: ListComponentVersionsRequest\n      properties: {}\n    ListComponentsRequest:\n      type: object\n      title: ListComponentsRequest\n      properties: {}\n    ThingGroupARN:\n      type: string\n      pattern: 'arn:aws(-cn|-us-gov)?:iot:[^:]+:[0-9]+:thinggroup/.+'\n    ListCoreDevicesRequest:\n      type: object\n      title: ListCoreDevicesRequest\n      properties: {}\n    ListDeploymentsRequest:\n      type: object\n      title: ListDeploymentsRequest\n      properties: {}\n    ListEffectiveDeploymentsRequest:\n      type: object\n      title: ListEffectiveDeploymentsRequest\n      properties: {}\n    ListInstalledComponentsRequest:\n      type: object\n      title: ListInstalledComponentsRequest\n      properties: {}\n    ListTagsForResourceRequest:\n      type: object\n      title: ListTagsForResourceRequest\n      properties: {}\n    Memory:\n      type: integer\n      minimum: 0\n      maximum: 9223372036854772000\n    ResolveComponentCandidatesRequest:\n      type: object\n      required:\n        - platform\n        - componentCandidates\n      title: ResolveComponentCandidatesRequest\n      properties:\n        platform:\n          allOf:\n            - $ref: '#/components/schemas/ComponentPlatform'\n            - description: The platform to use to resolve compatible components.\n        componentCandidates:\n          allOf:\n            - $ref: '#/components/schemas/ComponentCandidateList'\n            - description: The list of components to resolve.\n    ResolvedComponentVersionsList:\n      type: array\n      items:\n        $ref: '#/components/schemas/ResolvedComponentVersion'\n    ResolvedComponentVersion:\n      type: object\n      properties:\n        arn:\n          allOf:\n            - $ref: '#/components/schemas/ComponentVersionARN'\n            - description: 'The \u003ca href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"\u003eARN\u003c/a\u003e of the component version.'\n        componentName:\n          allOf:\n            - $ref: '#/components/schemas/ComponentNameString'\n            - description: The name of the component.\n        componentVersion:\n          allOf:\n            - $ref: '#/components/schemas/ComponentVersionString'\n            - description: The version of the component.\n        recipe:\n          allOf:\n            - $ref: '#/components/schemas/RecipeBlob'\n            - description: The recipe of the component version.\n      description: Contains information about a component version that is compatible to run on a Greengrass core device.\n    TagKeyList:\n      type: array\n      items:\n        $ref: '#/components/schemas/TagKey'\n      minItems: 1\n      maxItems: 50\n    TagResourceRequest:\n      type: object\n      required:\n        - tags\n      title: TagResourceRequest\n      properties:\n        tags:\n          allOf:\n            - $ref: '#/components/schemas/TagMap'\n            - description: 'A list of key-value pairs that contain metadata for the resource. For more information, see \u003ca href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html\"\u003eTag your resources\u003c/a\u003e in the \u003ci\u003eIoT Greengrass V2 Developer Guide\u003c/i\u003e.'\n    UntagResourceRequest:\n      type: object\n      title: UntagResourceRequest\n      properties: {}\nsecurity:\n  - hmac: []\n",
			"canonicalURL": "/github.com/APIs-guru/openapi-directory@3237843a76543b0ee2c1e5f65e28ec6b526e8700/-/blob/APIs/amazonaws.com/greengrassv2/2020-11-30/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/APIs-guru/openapi-directory/blob/3237843a76543b0ee2c1e5f65e28ec6b526e8700/APIs/amazonaws.com/greengrassv2/2020-11-30/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/tags/{resourceArn}\": at 1:129699: duplicate path: \"/tags/{resourceArn}\""
}