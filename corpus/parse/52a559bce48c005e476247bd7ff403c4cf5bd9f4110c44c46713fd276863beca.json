{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/mainflux/mainflux"
		},
		"file": {
			"name": "users.yml",
			"size": 0,
			"path": "api/openapi/users.yml",
			"byteSize": 13748,
			"content": "openapi: 3.0.1\ninfo:\n  title: Mainflux users service\n  description: HTTP API for managing platform users.\n  version: \"1.0.0\"\n\npaths:\n  /users:\n    post:\n      summary: Registers user account\n      description: |\n        Registers new user account given email and password. New account will\n        be uniquely identified by its email address.\n      tags:\n        - users\n      requestBody:\n        $ref: \"#/components/requestBodies/UserCreateReq\"\n      responses:\n        '201':\n          $ref: \"#/components/responses/UserCreateRes\"\n        '400':\n          description: Failed due to malformed JSON.\n        '401':\n          description: Missing or invalid access token provided.\n        '409':\n          description: Failed due to using an existing email address.\n        '415':\n          description: Missing or invalid content type.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n    get:\n      summary: Retrieves users\n      description: |\n        Retrieves a list of users. Due to performance concerns, data\n        is retrieved in subsets. The API things must ensure that the entire\n        dataset is consumed either by making subsequent requests, or by\n        increasing the subset size of the initial request.\n      tags:\n        - users\n      parameters:\n        - $ref: \"#/components/parameters/Limit\"\n        - $ref: \"#/components/parameters/Offset\"\n        - $ref: \"#/components/parameters/Metadata\"\n      responses:\n        '200':\n          $ref: \"#/components/responses/UsersPageRes\"\n        '400':\n          description: Failed due to malformed query parameters.\n        '401':\n          description: |\n            Missing or invalid access token provided.\n            This endpoint is available only for administrators.\n        '404':\n          description: A non-existent entity request.\n        '422':\n          description: Database can't process request.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n    put:\n      summary: Updates info on currently logged in user.\n      description: |\n        Updates info on currently logged in user. Info is updated using\n        authorization token and the new received info.\n      tags:\n        - users\n      requestBody:\n        $ref: \"#/components/requestBodies/UserUpdateReq\"\n      responses:\n        '200':\n          description: User updated.\n        '400':\n          description: Failed due to malformed JSON.\n        '404':\n          description: Failed due to non existing user.\n        '401':\n          description: Missing or invalid access token provided.\n        '500':\n         $ref: \"#/components/responses/ServiceError\"\n  /users/profile:\n     get:\n      summary: Gets info on currently logged in user.\n      description: |\n        Gets info on currently logged in user. Info is obtained using\n        authorization token\n      tags:\n        - users\n      responses:\n        '200':\n          $ref: \"#/components/responses/UserRes\"\n        '400':\n          description: Failed due to malformed query parameters.\n        '401':\n          description: Missing or invalid access token provided.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n  /groups/{groupId}:\n    get:\n      summary: Retrieves users\n      description: |\n        Retrieves a list of users that belong to a group. Due to performance concerns, data\n        is retrieved in subsets. The API things must ensure that the entire\n        dataset is consumed either by making subsequent requests, or by\n        increasing the subset size of the initial request.\n      tags:\n        - users\n      parameters:\n        - $ref: \"#/components/parameters/GroupId\"\n        - $ref: \"#/components/parameters/Limit\"\n        - $ref: \"#/components/parameters/Offset\"\n        - $ref: \"#/components/parameters/Metadata\"\n      responses:\n        '200':\n          $ref: \"#/components/responses/UsersPageRes\"\n        '400':\n          description: Failed due to malformed query parameters.\n        '401':\n          description: Missing or invalid access token provided.\n        '404':\n          description: A non-existent entity request.\n        '422':\n          description: Database can't process request.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n  /tokens:\n    post:\n      summary: User authentication\n      description: Generates an access token when provided with proper credentials.\n      tags:\n        - users\n      requestBody:\n        $ref: \"#/components/requestBodies/UserCreateReq\"\n      responses:\n        '201':\n          description: User authenticated.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Token'\n        '400':\n          description: Failed due to malformed JSON.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Failed due to using invalid credentials.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '415':\n          description: Missing or invalid content type.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          $ref: '#/components/responses/ServiceError'\n  /password/reset-request:\n    post:\n      summary: User password reset request\n      description: |\n        Generates a reset token and sends and\n        email with link for resetting password.\n      tags:\n        - users\n      parameters:\n        - $ref: \"#/components/parameters/Referer\"\n      requestBody:\n        $ref: '#/components/requestBodies/RequestPasswordReset'\n      responses:\n        '201':\n          description: Users link for reseting password.\n        '400':\n          description: Failed due to malformed JSON.\n        '415':\n          description: Missing or invalid content type.\n        '500':\n          $ref: '#/components/responses/ServiceError'\n  /password/reset:\n    put:\n      summary: User password reset endpoint\n      description: |\n        When user gets reset token, after he submited\n        email to `/password/reset-request`, posting a\n          new password along to this endpoint will change password.\n      tags:\n        - users\n      requestBody:\n        $ref: '#/components/requestBodies/PasswordReset'\n      responses:\n        '201':\n          description: User link .\n        '400':\n          description: Failed due to malformed JSON.\n        '415':\n          description: Missing or invalid content type.\n        '500':\n          $ref: '#/components/responses/ServiceError'\n  /password:\n    patch:\n      summary: User password change endpoint\n      description: |\n        When authenticated user wants to change password.\n      tags:\n        - users\n      requestBody:\n        $ref: '#/components/requestBodies/PasswordChange'\n      responses:\n        '201':\n          description: User link .\n        '400':\n          description: Failed due to malformed JSON.\n        '415':\n          description: Missing or invalid content type.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n  /health:\n    get:\n      summary: Retrieves service health check info.\n      tags:\n        - health\n      responses:\n        '200':\n          $ref: \"#/components/responses/HealthRes\"\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n\ncomponents:\n  schemas:\n    Token:\n      type: object\n      properties:\n        token:\n          type: string\n          format: jwt\n          description: Generated access token.\n      required:\n        - token\n    UserReqObj:\n      type: object\n      properties:\n        email:\n          type: string\n          format: email\n          example: \"test@example.com\"\n          description: User's email address will be used as its unique identifier\n        password:\n          type: string\n          format: password\n          minimum: 8\n          description: Free-form account password used for acquiring auth token(s).\n      required:\n        - email\n        - password\n    User:\n      type: object\n      properties:\n        id:\n          type: string\n          format: uuid\n          example: 18167738-f7a8-4e96-a123-58c3cd14de3a\n          description: User unique identifier.\n        email:\n          type: string\n          format: email\n          example: \"test@example.com\"\n          description: User's email address will be used as its unique identifier.\n        metadata:\n          type: object\n          description: Arbitrary, object-encoded user's data.\n    UsersPage:\n      type: object\n      properties:\n        things:\n          type: array\n          minItems: 0\n          uniqueItems: true\n          items:\n            $ref: \"#/components/schemas/User\"\n        total:\n          type: integer\n          description: Total number of items.\n        offset:\n          type: integer\n          description: Number of items to skip during retrieval.\n        limit:\n          type: integer\n          description: Maximum number of items to return in one page.\n      required:\n        - things\n    UserMetadata:\n      type: object\n      properties:\n        metadata:\n          type: object\n          description: Arbitrary, object-encoded user's data.\n    Error:\n      type: object\n      properties:\n        error:\n          type: string\n          description: Error message\n\n  parameters:\n    Referer:\n      name: Referer\n      description: Host being sent by browser.\n      in: header\n      schema:\n        type: string\n      required: true\n    Metadata:\n      name: metadata\n      description: Metadata filter. Filtering is performed matching the parameter with metadata on top level. Parameter is json.\n      in: query\n      schema:\n        type: string\n        minimum: 0\n      required: false\n    UserID:\n      name: userId\n      description: Unique user identifier.\n      in: path\n      schema:\n        type: string\n        format: uuid\n      required: true\n    GroupId:\n      name: groupId\n      description: Unique group identifier.\n      in: path\n      schema:\n        type: string\n        format: ulid\n      required: true\n    Limit:\n      name: limit\n      description: Size of the subset to retrieve.\n      in: query\n      schema:\n        type: integer\n        default: 10\n        maximum: 100\n        minimum: 1\n      required: false\n    Offset:\n      name: offset\n      description: Number of items to skip during retrieval.\n      in: query\n      schema:\n        type: integer\n        default: 0\n        minimum: 0\n      required: false\n\n  requestBodies:\n    UserCreateReq:\n      description: JSON-formatted document describing the new user to be registered\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/UserReqObj'\n    UserUpdateReq:\n      description: JSON-formated document describing the metadata of user to be update\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/UserMetadata\"\n    RequestPasswordReset:\n      description: Initiate password request procedure.\n      required: true\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              email:\n                type: string\n                format: email\n                description: User email.\n    PasswordReset:\n      description: Password reset request data, new password and token that is appended on password reset link received in email.\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              password:\n                type: string\n                format: password\n                description: New password.\n                minimum: 8\n              confirm_password:\n                type: string\n                format: password\n                description: New confirmation password.\n                minimum: 8\n              token:\n                type: string\n                format: jwt\n                description: Reset token generated and sent in email.\n    PasswordChange:\n      description: Password change data. User can change its password.\n      required: true\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              password:\n                type: string\n                format: password\n                description: New password.\n              old_password:\n                type: string\n                format: password\n                description: Old password.\n\n  responses:\n    UserCreateRes:\n      description: Registered new user.\n      headers:\n        Location:\n          content:\n            text/plain:\n              schema:\n                type: string\n                format: url\n                description: Registered user relative URL.\n                example: /users/{userId}\n    UserRes:\n      description: Data retrieved.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/User\"\n    UsersPageRes:\n      description: Data retrieved.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/UsersPage\"\n    ServiceError:\n      description: Unexpected server-side error occurred.\n    HealthRes:\n      description: Service Health Check.\n      content:\n        application/json:\n          schema:\n            $ref: \"./schemas/HealthInfo.yml\"\n\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n      description: |\n        * Users access: \"Authorization: Bearer \u003cuser_token\u003e\"\n\nsecurity:\n  - bearerAuth: []\n",
			"canonicalURL": "/github.com/mainflux/mainflux@931b48f3a7d6fffac3f53568bff19e9a59d31586/-/blob/api/openapi/users.yml",
			"externalURLs": [
				{
					"url": "https://github.com/mainflux/mainflux/blob/931b48f3a7d6fffac3f53568bff19e9a59d31586/api/openapi/users.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: responses: \"HealthRes\": content: application/json: schema: parse schema: resolve \"./schemas/HealthInfo.yml\": external \"./schemas/HealthInfo.yml\": file: local file reference is not allowed"
}