{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ChicagoWorldcon/planorama"
		},
		"file": {
			"name": "planorama_api.yml",
			"size": 0,
			"path": "docs/planorama_api.yml",
			"byteSize": 21165,
			"content": "openapi: 3.0.0\ninfo:\n  title: Planorama API\n  version: 1.0.0\nservers:\n  - url: http://localhost:3000\ncomponents:\n  securitySchemes:\n    noauthAuth:\n      type: http\n      scheme: noauth\n    bearerAuth:\n      type: http\n      scheme: bearer\ntags:\n  - name: Autheticate\n  - name: People\n  - name: Surveys\n  - name: Mailings\n  - name: Program Items\n  - name: Venues\n  - name: Agreements\n  - name: Sessions\npaths:\n  /auth/sign_in:\n    post:\n      tags:\n        - Autheticate\n      summary: Login\n      description: \u003e-\n        Log the person into the system. It will return the JWT token in the\n        header which is needed for subsequent requests.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                person:\n                  email: test@test.com\n                  password: '111111'\n      security:\n        - noauthAuth: []\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /person/me:\n    get:\n      tags:\n        - People\n      summary: Me Session\n      security:\n        - noauthAuth: []\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /person:\n    get:\n      tags:\n        - People\n      summary: Get People By Filter all cols\n      security:\n        - noauthAuth: []\n      parameters:\n        - name: filter\n          in: query\n          schema:\n            type: string\n          example: '{\"rules\":[[\"all\", \"like\", \"ta\"]]}'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n    post:\n      tags:\n        - People\n      summary: Create a Person\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                name: '{{$randomFullName}}'\n                name_sort_by: '{{$randomFullName}}'\n                name_sort_by_confirmed: true\n                email_addresses_attributes:\n                  - isdefault: true\n                    email: '{{$randomEmail}}'\n                    is_valid: true\n      security:\n        - noauthAuth: []\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /person/{person-id}:\n    get:\n      tags:\n        - People\n      summary: Get Person\n      security:\n        - noauthAuth: []\n      parameters:\n        - name: person-id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /person/84672fd3-0d90-4f81-8511-ec1d82f2b9cb:\n    get:\n      tags:\n        - People\n      summary: Get Person Copy\n      security:\n        - noauthAuth: []\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /person/{person-id}/assigned_surveys:\n    get:\n      tags:\n        - People\n      summary: Assigned Surveys\n      parameters:\n        - name: person-id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /person/{person-id}/submissions:\n    get:\n      tags:\n        - People\n      summary: Survey Submissions\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: person-id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /person/{person-id}/survey/{survey-id}/submissions:\n    get:\n      tags:\n        - People\n      summary: Survey Submissions For Survey\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: person-id\n          in: path\n          schema:\n            type: string\n          required: true\n        - name: survey-id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /validator/email:\n    post:\n      tags:\n        - People\n      summary: Email Validator\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                emails:\n                  - Orpha.Steuber27@gmail.com\n                  - arnold@aardvark.com\n                  - fuckity\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /survey:\n    get:\n      tags:\n        - Surveys\n      summary: Get Surveys Via Filter Copy\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: filter\n          in: query\n          schema:\n            type: string\n          example: \u003e-\n            {\"queries\":[[\"surveys.id\", \"=\",\n            \"ef14a1df-fca5-45f7-9452-bd5aa0655d00\"]]}\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n    post:\n      tags:\n        - Surveys\n      summary: Create a Survey\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                data:\n                  type: survey\n                  attributes:\n                    name: '{{$randomFullName}}'\n                    pages_attributes:\n                      - title: '{{$randomFullName}}'\n                        questions_attributes:\n                          - question: New Question\n                            question_type: textfield\n                            answers_attributes:\n                              - answer: Option\n      security:\n        - noauthAuth: []\n      parameters:\n        - name: sortBy\n          in: query\n          schema:\n            type: string\n          example: surveys.name\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /page:\n    post:\n      tags:\n        - Surveys\n      summary: Create Page\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                data:\n                  type: page\n                  attributes:\n                    title: '{{$randomFullName}}'\n                  relationships:\n                    survey:\n                      data:\n                        type: survey\n                        id: '{{survey-id}}'\n      security:\n        - noauthAuth: []\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /question:\n    post:\n      tags:\n        - Surveys\n      summary: Create Question Copy\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                data:\n                  type: question\n                  attributes:\n                    question: New Question\n                    question_type: textfield\n                    mandatory: false\n                    sort_order_position: 0\n                  relationships:\n                    page:\n                      id: 12bb592f-f95d-4a19-ba67-2ddc8e325115\n                      type: page\n      security:\n        - noauthAuth: []\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /survey/{survey-id}/assign_people:\n    post:\n      tags:\n        - Surveys\n      summary: Assign People to Survey\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                people:\n                  - id: '{{person-id}}'\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: survey-id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /survey/{survey-id}/unassign_people:\n    post:\n      tags:\n        - Surveys\n      summary: UnAssign People to Survey\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                people:\n                  - id: '{{person-id}}'\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: survey-id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /survey/{survey-id}/pages:\n    get:\n      tags:\n        - Surveys\n      summary: Get Pages for Survey\n      security:\n        - noauthAuth: []\n      parameters:\n        - name: survey-id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /survey/{survey-id}:\n    get:\n      tags:\n        - Surveys\n      summary: Get A Survey\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: survey-id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /page/{page-id}/questions:\n    get:\n      tags:\n        - Surveys\n      summary: Get Questions for Page\n      security:\n        - noauthAuth: []\n      parameters:\n        - name: page-id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /survey/{survey-id}/submissions:\n    get:\n      tags:\n        - Surveys\n      summary: Get Submissions for Survey\n      security:\n        - noauthAuth: []\n      parameters:\n        - name: survey-id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /mailing:\n    get:\n      tags:\n        - Mailings\n      summary: Get Mailing sparse\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: fields[mailing]\n          in: query\n          schema:\n            type: string\n          example: id,title\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n    post:\n      tags:\n        - Mailings\n      summary: Create Mailing\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                mail_template_id: '{{mail-template-id}}'\n                testrun: false\n                include_email: false\n                cc_all: false\n                title: '{{$randomLoremWords}}'\n                subject: '{{$randomLoremWords}}'\n                content: Dear \u003c%= person.published_name %\u003e {{$randomLoremParagraph}}\n                emails:\n                  - test@test.com\n                  - testing8@peoplerecord.com\n      security:\n        - noauthAuth: []\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /mailing/{mailing-id}/assign_people:\n    post:\n      tags:\n        - Mailings\n      summary: Assign People to Mailing Copy\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                people:\n                  - id: '{{person-id}}'\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: mailing-id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /mailing/{mailing-id}/unassign_people:\n    post:\n      tags:\n        - Mailings\n      summary: UnAssign People to Mailing\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                people:\n                  - id: '{{person-id}}'\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: mailing-id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /mailing/{mailing-id}:\n    get:\n      tags:\n        - Mailings\n      summary: Get Single Mailing\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: mailing-id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /mailing/schedule/{mailing-id}:\n    get:\n      tags:\n        - Mailings\n      summary: Schedule Single Mailing\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: mailing-id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /mailing/schedule/{mailing-id}/test@test.com/true:\n    get:\n      tags:\n        - Mailings\n      summary: Schedule Single Mailing Test\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: mailing-id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /mailing/preview/{mailing-id}/test@test.com:\n    get:\n      tags:\n        - Mailings\n      summary: Preview Single Mailing\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: mailing-id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /mailing/clone/{mailing-id}:\n    get:\n      tags:\n        - Mailings\n      summary: Clone Mailing\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: mailing-id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /venue:\n    get:\n      tags:\n        - Venues\n      summary: Venues\n      security:\n        - bearerAuth: []\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /room:\n    get:\n      tags:\n        - Venues\n      summary: Rooms\n      security:\n        - bearerAuth: []\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /agreement/signed:\n    get:\n      tags:\n        - Agreements\n      summary: Get My Agreements Signed\n      description: \u003e-\n        #postman-to-openapi  \n\n        | object | name | description | required | type | example |  \n\n        |---|---|---|---|---|---|  \n\n        | path | person-id | The id pf the person being retreived | true | UUID\n        |8bcac661-a82e-4461-9910-ef017566e9a8 |\n      security:\n        - noauthAuth: []\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /agreement/unsigned:\n    get:\n      tags:\n        - Agreements\n      summary: Get My Agreements UnSigned (only latest versions)\n      description: \u003e-\n        #postman-to-openapi  \n\n        | object | name | description | required | type | example |  \n\n        |---|---|---|---|---|---|  \n\n        | path | person-id | The id pf the person being retreived | true | UUID\n        |8bcac661-a82e-4461-9910-ef017566e9a8 |\n      security:\n        - noauthAuth: []\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /agreement/latest:\n    get:\n      tags:\n        - Agreements\n      summary: Get Latest Agreements\n      description: \u003e-\n        #postman-to-openapi  \n\n        | object | name | description | required | type | example |  \n\n        |---|---|---|---|---|---|  \n\n        | path | person-id | The id pf the person being retreived | true | UUID\n        |8bcac661-a82e-4461-9910-ef017566e9a8 |\n      security:\n        - noauthAuth: []\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /agreement/sign/{agreement-id}:\n    put:\n      tags:\n        - Agreements\n      summary: Sign an Agreement\n      description: \u003e-\n        #postman-to-openapi  \n\n        | object | name | description | required | type | example |  \n\n        |---|---|---|---|---|---|  \n\n        | path | person-id | The id pf the person being retreived | true | UUID\n        |8bcac661-a82e-4461-9910-ef017566e9a8 |\n      requestBody:\n        content: {}\n      security:\n        - noauthAuth: []\n      parameters:\n        - name: agreement-id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /agreement:\n    get:\n      tags:\n        - Agreements\n      summary: Get All Agreements\n      description: \u003e-\n        #postman-to-openapi  \n\n        | object | name | description | required | type | example |  \n\n        |---|---|---|---|---|---|  \n\n        | path | person-id | The id pf the person being retreived | true | UUID\n        |8bcac661-a82e-4461-9910-ef017566e9a8 |\n      security:\n        - noauthAuth: []\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n    post:\n      tags:\n        - Agreements\n      summary: Create an Agreement\n      description: \u003e-\n        #postman-to-openapi  \n\n        | object | name | description | required | type | example |  \n\n        |---|---|---|---|---|---|  \n\n        | path | person-id | The id pf the person being retreived | true | UUID\n        |8bcac661-a82e-4461-9910-ef017566e9a8 |\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example: |\n                {\n                    \"id\": \"{{$guid}}\",\n                    \"title\": \"{{$randomLoremWords}}\",\n                    \"terms\": \"{{$randomLoremParagraph}}\",\n                    \"agreement_type\": \"stuff\",\n                    \"target\": \"member\"\n                    // created_by_id\n                }\n      security:\n        - noauthAuth: []\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /session:\n    get:\n      tags:\n        - Sessions\n      summary: Get Sessions\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /session_assignment:\n    get:\n      tags:\n        - Sessions\n      summary: Get Session Assignments\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n    post:\n      tags:\n        - Sessions\n      summary: Create Session Assignment\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                session_id: '{{session-id}}'\n                person_id: '{{person-id}}'\n                interested: true\n                interest_ranking: 1\n                interest_notes: I would like to do this\n                interest_role: can_moderate\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /session_assignment/2a016b1c-7bec-4eb1-8045-cef6a0377f35:\n    delete:\n      tags:\n        - Sessions\n      summary: Delete Session Assignment\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /rbac:\n    get:\n      tags:\n        - default\n      summary: RBAC\n      security:\n        - bearerAuth: []\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n",
			"canonicalURL": "/github.com/ChicagoWorldcon/planorama@8de68694b094651cac04b7174b1570c7c6ec06ad/-/blob/docs/planorama_api.yml",
			"externalURLs": [
				{
					"url": "https://github.com/ChicagoWorldcon/planorama/blob/8de68694b094651cac04b7174b1570c7c6ec06ad/docs/planorama_api.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/agreement\": get: security: parse security scheme \"noauthAuth\": http: at 1:105: invalid \"scheme\": \"noauth\""
}