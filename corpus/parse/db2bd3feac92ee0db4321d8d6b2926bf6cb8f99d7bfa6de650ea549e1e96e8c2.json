{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/FTSRG/gamma"
		},
		"file": {
			"name": "gamma-wrapper.yaml",
			"size": 0,
			"path": "plugins/headless/hu.bme.mit.gamma.headless.server/resources/gamma-wrapper.yaml",
			"byteSize": 9674,
			"content": "openapi: 3.0.3\ninfo:\n  version: 1.1.0\n  title: Gamma Wrapper API\n  description: 'An API that allows users to use the Gamma framework via http requests'\npaths:\n  /gamma/workspace:\n    post:\n      operationId: addWorkspace\n      description: Create and return the name of workspace\n      responses:\n        200:\n          description: Successfully created a workspace\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WorkspaceIdentifier'\n        500:\n          description: The workspace generation failed\n  /gamma/workspace/{workspace}:\n    delete:\n      summary: Deletes a given workspace if it exists and is empty.\n      operationId: deleteWorkspace\n      parameters:\n        - $ref: '#/components/parameters/WorkspaceIdentifierParam'\n      responses:\n        200:\n          description: Success\n        400:\n          description: Workspace doesn't exist, or isn't empty.\n  /gamma/workspace/{workspace}/project:\n    post:\n      operationId: addProject\n      description: Send a file that contains the eclipse project on which the gamma operations will run\n      parameters:\n        - $ref: '#/components/parameters/WorkspaceIdentifierParam'\n      requestBody:\n        content:\n          application/octet-stream:\n            schema:\n              $ref: '#/components/schemas/ProjectFile'\n      responses:\n        200:\n          description: Successfully uploaded the file\n        404:\n          description: Did not provide a valid workspace\n        400:\n          description: Project already exists under this workspace, delete it and resend this request\n  /gamma/workspace/{workspace}/project/{project}:\n    post:\n      operationId: getResult\n      description: Get artifacts generated by gamma operation, the artifact properties should\n      parameters:\n        - $ref: '#/components/parameters/WorkspaceIdentifierParam'\n        - $ref: '#/components/parameters/ProjectIdentifierParam'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ProjectFilesList'\n      responses:\n        200:\n          description: Success\n          content:\n            multipart/form-data:\n              schema:\n                $ref: '#/components/schemas/ProjectFile'\n        503:\n          description: The project is currently under operation\n        404:\n          description: Did not provide a valid workspace or project name\n    get:\n      summary: Get the list of files inside the project\n      description: Get the list of files inside the project\n      operationId: list\n      parameters:\n        - $ref: '#/components/parameters/WorkspaceIdentifierParam'\n        - $ref: '#/components/parameters/ProjectIdentifierParam'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProjectFilesList'\n        '404':\n          description: Did not provide a valid workspace or project name\n    delete:\n      operationId: deleteProject\n      description: Delete project under specified workspace\n      parameters:\n        - $ref: '#/components/parameters/WorkspaceIdentifierParam'\n        - $ref: '#/components/parameters/ProjectIdentifierParam'\n      responses:\n        200:\n          description: Success\n        503:\n          description: The project is currently under operation\n        404:\n          description: Did not provide a valid workspace or project name\n  /gamma/workspace/{workspace}/project/{project}/run:\n    post:\n      operationId: runOperation\n      description: Start a gamma operation based on the ggen file\n      parameters:\n        - $ref: '#/components/parameters/WorkspaceIdentifierParam'\n        - $ref: '#/components/parameters/ProjectIdentifierParam'\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/GgenPath'\n      responses:\n        200:\n          description: The operation has started\n        404:\n          description: Did not provide a valid workspace or project name\n        503:\n          description: This project is already under operation\n  /gamma/workspace/{workspace}/project/{project}/stop:\n    post:\n      operationId: stopOperation\n      description: Stop a gamma operation based on the given workspace-projectName pair\n      parameters:\n        - $ref: '#/components/parameters/WorkspaceIdentifierParam'\n        - $ref: '#/components/parameters/ProjectIdentifierParam'\n      responses:\n        200:\n          description: The operation has stopped\n        404:\n          description: Did not provide a valid workspace or project name\n        503:\n          description: This project is not under operation\n  /gamma/workspace/{workspace}/project/{project}/status:\n    get:\n      summary: Get the status of the project.\n      operationId: getStatus\n      parameters:\n        - $ref: '#/components/parameters/WorkspaceIdentifierParam'\n        - $ref: '#/components/parameters/ProjectIdentifierParam'\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProjectStatus'\n        404:\n          description: Did not provide a valid workspace or project name\n  /gamma/workspace/{workspace}/logs:\n    get:\n      summary: Retrieves the logs from a workspace.\n      operationId: getLogs\n      parameters:\n        - $ref: '#/components/parameters/WorkspaceIdentifierParam'\n      responses:\n        '200':\n          description: Log file successfully sent.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProjectFile'\n        '404':\n          description: Log file does not exist.\n  /gamma/log/level:\n    put:\n      summary: Sets the log level of both the server and the Headless Gamma.\n      operationId: setLogLevel\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/LogLevelRequest'\n      responses:\n        '200':\n          description: Log level successfully set.\n        '400':\n          description: Wrong logging level provided\n  /gamma/log/file:\n    put:\n      summary: Enables logging to a file, specified in the config.properties file.\n      operationId: logToFile\n      responses:\n        '200':\n          description: Log level successfully set.\n        '400':\n          description: Wrong logging level provided\n    get:\n      summary: Retrieves the headless console log file.\n      operationId: getHeadlessLogs\n      responses:\n        '200':\n          description: Log file successfully sent.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProjectFile'\n        '404':\n          description: Log file does not exist.\n        '403':\n          description: Logging is still enabled, plesase disable it.\n \ncomponents:\n  parameters:\n    WorkspaceIdentifierParam:\n      in: path\n      name: workspace\n      required: true\n      schema:\n        type: string\n        format: uuid\n        example: 3fa85f64-5717-4562-b3fc-2c963f66afa6\n      description: \"Defines the workspace inside the Gamma container.\"\n    ProjectIdentifierParam:\n      in: path\n      name: project\n      required: true\n      schema:\n        type: string\n        example: gamma.test.project\n      description: \"Defines the project inside a specific workspace.\"\n  responses:\n    UnexpectedError:\n      description: 'Unexpected error occurred.'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n  schemas:\n    WorkspaceIdentifier:\n      properties:\n        id:\n          type: 'string'\n          format: uuid\n          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6\n          description: 'The model ID of the Interaction that specifies the reachability property.'\n      required:\n        - id\n    ProjectFile:\n      type: object\n      properties:\n        file:\n          type: string\n          format: binary\n          description: 'The eclipse project exported as a .zip file.'\n      required:\n        - file\n    GgenPath:\n      type: object\n      properties:\n        ggenPath:\n          type: 'string'\n          description: 'The ggen path inside the project.'\n      required:\n        - ggenPath\n    ProjectFilesList:\n      type: object\n      properties:\n        files:\n          type: array\n          description: 'The files under the specified project'\n          items:\n            type: 'string'\n    ProjectStatus:\n      type: object\n      properties:\n        status:\n          type: string\n          enum:\n            - Running\n            - Done\n            - Failed\n    LogLevelRequest:\n      type: object\n      properties:\n        level:\n          $ref: '#/components/schemas/LogLevel'\n      required:\n        - level\n    LogLevel:\n      type: string\n      enum:\n        - Info\n        - Warning\n        - Severe\n        - Off\n    Error:\n      properties:\n        message:\n          type: string\n          example: 'Exception occurred during request processing'\n        details:\n          type: object\n          properties:\n            trace:\n              $ref: \"#/components/schemas/StackTrace\"\n      required:\n        - message\n    StackTrace:\n      type: array\n      items:\n        type: string\n      example:\n        - \"java.lang.IllegalStateException: Some variable should not be null\"\n        - \"at some.package.SomeClass.someMethod(SomeClass:52)\"\n        - \"at some.package.CallerClass.callerMethod(SpecificCallerClass:117)\"\n",
			"canonicalURL": "/github.com/FTSRG/gamma@1f024fe8532b4a97e0a44869ec06acf86ff75381/-/blob/plugins/headless/hu.bme.mit.gamma.headless.server/resources/gamma-wrapper.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ftsrg/gamma/blob/1f024fe8532b4a97e0a44869ec06acf86ff75381/plugins/headless/hu.bme.mit.gamma.headless.server/resources/gamma-wrapper.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"LogLevelRequest\": parse schema: property \"level\": parse schema: at 1:1021: parse enum values: parse value \"false\": expected type \"string\", got \"bool\""
}