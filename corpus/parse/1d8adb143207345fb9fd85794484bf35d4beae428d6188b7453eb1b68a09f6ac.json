{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/APIs-guru/openapi-directory"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "APIs/cpy.re/peertube/3.3.0/openapi.yaml",
			"byteSize": 213177,
			"content": "openapi: 3.0.0\nservers:\n  - description: Live Test Server (live data - latest nightly version)\n    url: https://peertube2.cpy.re/api/v1\n  - description: Live Test Server (live data - latest RC version)\n    url: https://peertube3.cpy.re/api/v1\n  - description: Live Test Server (live data - stable version)\n    url: https://peertube.cpy.re/api/v1\ninfo:\n  contact:\n    name: PeerTube Community\n    url: https://joinpeertube.org\n  description: |\n    The PeerTube API is built on HTTP(S) and is RESTful. You can use your favorite\n    HTTP/REST library for your programming language to use PeerTube. The spec API is fully compatible with\n    [openapi-generator](https://github.com/OpenAPITools/openapi-generator/wiki/API-client-generator-HOWTO)\n    which generates a client SDK in the language of your choice - we generate some client SDKs automatically:\n\n    - [Python](https://framagit.org/framasoft/peertube/clients/python)\n    - [Go](https://framagit.org/framasoft/peertube/clients/go)\n    - [Kotlin](https://framagit.org/framasoft/peertube/clients/kotlin)\n\n    See the [REST API quick start](https://docs.joinpeertube.org/api-rest-getting-started) for a few\n    examples of using the PeerTube API.\n\n    # Authentication\n\n    When you sign up for an account on a PeerTube instance, you are given the possibility\n    to generate sessions on it, and authenticate there using an access token. Only __one\n    access token can currently be used at a time__.\n\n    ## Roles\n\n    Accounts are given permissions based on their role. There are three roles on\n    PeerTube: Administrator, Moderator, and User. See the [roles guide](https://docs.joinpeertube.org/admin-managing-users?id=roles) for a detail of their permissions.\n\n    # Errors\n\n    The API uses standard HTTP status codes to indicate the success or failure\n    of the API call, completed by a [RFC7807-compliant](https://tools.ietf.org/html/rfc7807) response body.\n\n    ```\n    HTTP 1.1 404 Not Found\n    Content-Type: application/problem+json; charset=utf-8\n\n    {\n      \"detail\": \"Video not found\",\n      \"docs\": \"https://docs.joinpeertube.org/api-rest-reference.html#operation/getVideo\",\n      \"status\": 404,\n      \"title\": \"Not Found\",\n      \"type\": \"about:blank\"\n    }\n    ```\n\n    We provide error `type` values for [a growing number of cases](https://github.com/Chocobozzz/PeerTube/blob/develop/shared/models/server/server-error-code.enum.ts),\n    but it is still optional. Types are used to disambiguate errors that bear the same status code\n    and are non-obvious:\n\n    ```\n    HTTP 1.1 403 Forbidden\n    Content-Type: application/problem+json; charset=utf-8\n\n    {\n      \"detail\": \"Cannot get this video regarding follow constraints\",\n      \"docs\": \"https://docs.joinpeertube.org/api-rest-reference.html#operation/getVideo\",\n      \"status\": 403,\n      \"title\": \"Forbidden\",\n      \"type\": \"https://docs.joinpeertube.org/api-rest-reference.html#section/Errors/does_not_respect_follow_constraints\"\n    }\n    ```\n\n    Here a 403 error could otherwise mean that the video is private or blocklisted.\n\n    ### Validation errors\n\n    Each parameter is evaluated on its own against a set of rules before the route validator\n    proceeds with potential testing involving parameter combinations. Errors coming from validation\n    errors appear earlier and benefit from a more detailed error description:\n\n    ```\n    HTTP 1.1 400 Bad Request\n    Content-Type: application/problem+json; charset=utf-8\n\n    {\n      \"detail\": \"Incorrect request parameters: id\",\n      \"docs\": \"https://docs.joinpeertube.org/api-rest-reference.html#operation/getVideo\",\n      \"instance\": \"/api/v1/videos/9c9de5e8-0a1e-484a-b099-e80766180\",\n      \"invalid-params\": {\n        \"id\": {\n          \"location\": \"params\",\n          \"msg\": \"Invalid value\",\n          \"param\": \"id\",\n          \"value\": \"9c9de5e8-0a1e-484a-b099-e80766180\"\n        }\n      },\n      \"status\": 400,\n      \"title\": \"Bad Request\",\n      \"type\": \"about:blank\"\n    }\n    ```\n\n    Where `id` is the name of the field concerned by the error, within the route definition.\n    `invalid-params.\u003cfield\u003e.location` can be either 'params', 'body', 'header', 'query' or 'cookies', and\n    `invalid-params.\u003cfield\u003e.value` reports the value that didn't pass validation whose `invalid-params.\u003cfield\u003e.msg`\n    is about.\n\n    ### Deprecated error fields\n\n    Some fields could be included with previous versions. They are still included but their use is deprecated:\n    - `error`: superseded by `detail`\n    - `code`: superseded by `type` (which is now an URI)\n\n    # Rate limits\n\n    We are rate-limiting all endpoints of PeerTube's API. Custom values can be set by administrators:\n\n    | Endpoint (prefix: `/api/v1`) | Calls         | Time frame   |\n    |------------------------------|---------------|--------------|\n    | `/*`                         | 50            | 10 seconds   |\n    | `POST /users/token`          | 15            | 5 minutes    |\n    | `POST /users/register`       | 2\u003csup\u003e*\u003c/sup\u003e | 5 minutes    |\n    | `POST /users/ask-send-verify-email` | 3      | 5 minutes    |\n\n    Depending on the endpoint, \u003csup\u003e*\u003c/sup\u003efailed requests are not taken into account. A service\n    limit is announced by a `429 Too Many Requests` status code.\n\n    You can get details about the current state of your rate limit by reading the\n    following headers:\n\n    | Header                  | Description                                                |\n    |-------------------------|------------------------------------------------------------|\n    | `X-RateLimit-Limit`     | Number of max requests allowed in the current time period  |\n    | `X-RateLimit-Remaining` | Number of remaining requests in the current time period    |\n    | `X-RateLimit-Reset`     | Timestamp of end of current time period as UNIX timestamp  |\n    | `Retry-After`           | Seconds to delay after the first `429` is received         |\n\n    # CORS\n\n    This API features [Cross-Origin Resource Sharing (CORS)](https://fetch.spec.whatwg.org/),\n    allowing cross-domain communication from the browser for some routes:\n\n    | Endpoint                    |\n    |------------------------- ---|\n    | `/api/*`                    |\n    | `/download/*`               |\n    | `/lazy-static/*`            |\n    | `/live/segments-sha256/*`   |\n    | `/.well-known/webfinger`    |\n\n    In addition, all routes serving ActivityPub are CORS-enabled for all origins.\n  license:\n    name: AGPLv3.0\n    url: https://github.com/Chocobozzz/PeerTube/blob/master/LICENSE\n  title: PeerTube\n  version: 3.3.0\n  x-apisguru-categories:\n    - social\n  x-logo:\n    altText: PeerTube Project Homepage\n    url: https://joinpeertube.org/img/brand.png\n  x-origin:\n    - converter:\n        url: https://github.com/mermade/oas-kit\n        version: 7.0.4\n      format: openapi\n      url: https://raw.githubusercontent.com/Chocobozzz/PeerTube/develop/support/doc/api/openapi.yaml\n      version: \"3.0\"\n  x-providerName: cpy.re\n  x-serviceName: peertube\nexternalDocs:\n  url: https://docs.joinpeertube.org/api-rest-reference.html\ntags:\n  - description: |\n      As a visitor, you can use this API to open an account (if registrations are open on\n      that PeerTube instance). As an admin, you should use the dedicated [User creation\n      API](#operation/addUser) instead.\n    name: Register\n  - description: |\n      Sessions deal with access tokens over time. Only __one session token can currently be used at a time__.\n    name: Session\n    x-displayName: Login/Logout\n  - description: |\n      Accounts encompass remote accounts discovered across the federation, and correspond to the main Actor, along with video channels a user can create, which are also Actors.\n      When a comment is posted, it is done with your Account's Actor.\n    name: Accounts\n  - description: |\n      Using some features of PeerTube require authentication, for which User provide different levels of permission as well as associated user information. Each user has a corresponding local Account for federation.\n    name: Users\n  - description: |\n      Operations related to your own User, when logged-in.\n    name: My User\n  - description: |\n      Operations related to your subscriptions to video channels, their new videos, and how to keep up to date with their latest publications!\n    name: My Subscriptions\n  - description: |\n      Operations related to your watch history.\n    name: My History\n  - description: |\n      Notifications following new videos, follows or reports. They allow you to keep track of the interactions and overall important information that concerns you. You MAY set per-notification type delivery preference, to receive the info either by mail, by in-browser notification or both.\n    name: My Notifications\n  - description: |\n      Each server exposes public information regarding supported videos and options.\n    name: Config\n  - description: |\n      Jobs are long-running tasks enqueued and processed by the instance itself. No additional worker registration is currently available.\n    name: Job\n  - description: |\n      Managing servers which the instance interacts with is crucial to the concept of federation in PeerTube and external video indexation. The PeerTube server then deals with inter-server ActivityPub operations and propagates information across its social graph by posting activities to actors' inbox endpoints.\n    externalDocs:\n      url: https://docs.joinpeertube.org/admin-following-instances?id=instances-follows\n    name: Instance Follows\n  - description: |\n      Redundancy is part of the inter-server solidarity that PeerTube fosters. Manage the list of instances you wish to help by seeding their videos according to the policy of video selection of your choice. Note that you have a similar functionality to mirror individual videos, see [video mirroring](#tag/Video-Mirroring).\n    externalDocs:\n      url: https://docs.joinpeertube.org/admin-following-instances?id=instances-redundancy\n    name: Instance Redundancy\n  - description: |\n      Managing plugins installed from a local path or from NPM, or search for new ones.\n    externalDocs:\n      url: https://docs.joinpeertube.org/api-plugins\n    name: Plugins\n  - description: |\n      Abuses deal with reports of local or remote videos/comments/accounts alike.\n    name: Abuses\n  - description: |\n      Operations dealing with listing, uploading, fetching or modifying videos.\n    name: Video\n  - description: |\n      Operations dealing with adding video or audio. PeerTube supports two upload modes, and three import modes.\n\n      ### Upload\n\n      - [_legacy_](#operation/uploadLegacy), where the video file is sent in a single request\n      - [_resumable_](#operation/uploadResumableInit), where the video file is sent in chunks\n\n      You can upload videos more reliably by using the resumable variant. Its protocol lets\n      you resume an upload operation after a network interruption or other transmission failure,\n      saving time and bandwidth in the event of network failures.\n\n      Favor using resumable uploads in any of the following cases:\n      - You are transferring large files\n      - The likelihood of a network interruption is high\n      - Uploads are originating from a device with a low-bandwidth or unstable Internet connection,\n        such as a mobile device\n\n      ### Import\n\n      - _URL_-based: where the URL points to any service supported by [youtube-dl](https://ytdl-org.github.io/youtube-dl/)\n      - _magnet_-based: where the URI resolves to a BitTorrent ressource containing a single supported video file\n      - _torrent_-based: where the metainfo file resolves to a BitTorrent ressource containing a single supported video file\n\n      The import function is practical when the desired video/audio is available online. It makes PeerTube\n      download it for you, saving you as much bandwidth and avoiding any instability or limitation your network might have.\n    name: Video Upload\n  - description: Operations dealing with listing, adding and removing closed captions of a video.\n    name: Video Captions\n  - description: Operations dealing with the creation, modification and listing of videos within a channel.\n    name: Video Channels\n  - description: |\n      Operations dealing with comments to a video. Comments are organized in threads: adding a comment in response to the video starts a thread, adding a reply to a comment adds it to its root comment thread.\n    name: Video Comments\n  - description: Operations dealing with blocking videos (removing them from view and preventing interactions).\n    name: Video Blocks\n  - description: Like/dislike a video.\n    name: Video Rates\n  - description: Operations dealing with playlists of videos. Playlists are bound to users and/or channels.\n    name: Video Playlists\n  - description: Server syndication feeds\n    name: Feeds\n  - description: |\n      The search helps to find _videos_ or _channels_ from within the instance and beyond.\n      Videos from other instances federated by the instance (that is, instances\n      followed by the instance) can be found via keywords and other criteria of\n      the advanced search.\n\n      Administrators can also enable the use of a remote search system, indexing\n      videos and channels not could be not federated by the instance.\n    name: Search\n  - description: Get and update the custom homepage\n    name: Homepage\n  - description: |\n      PeerTube instances can mirror videos from one another, and help distribute some videos.\n\n      For importing videos as your own, refer to [video imports](#operation/importVideo).\n    name: Video Mirroring\npaths:\n  /abuses:\n    get:\n      operationId: getAbuses\n      parameters:\n        - description: only list the report with this id\n          in: query\n          name: id\n          schema:\n            type: integer\n        - description: predefined reason the listed reports should contain\n          in: query\n          name: predefinedReason\n          schema:\n            $ref: \"#/components/schemas/PredefinedAbuseReasons\"\n        - description: plain search that will match with video titles, reporter names and more\n          in: query\n          name: search\n          schema:\n            type: string\n        - in: query\n          name: state\n          schema:\n            $ref: \"#/components/schemas/AbuseStateSet\"\n        - description: only list reports of a specific reporter\n          in: query\n          name: searchReporter\n          schema:\n            type: string\n        - description: only list reports of a specific reportee\n          in: query\n          name: searchReportee\n          schema:\n            type: string\n        - description: only list reports of a specific video\n          in: query\n          name: searchVideo\n          schema:\n            type: string\n        - description: only list reports of a specific video channel\n          in: query\n          name: searchVideoChannel\n          schema:\n            type: string\n        - description: only list deleted or blocklisted videos\n          in: query\n          name: videoIs\n          schema:\n            enum:\n              - deleted\n              - blacklisted\n            type: string\n        - description: only list account, comment or video reports\n          in: query\n          name: filter\n          schema:\n            enum:\n              - video\n              - comment\n              - account\n            type: string\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/count\"\n        - $ref: \"#/components/parameters/abusesSort\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  data:\n                    items:\n                      $ref: \"#/components/schemas/Abuse\"\n                    type: array\n                  total:\n                    example: 1\n                    type: integer\n                type: object\n          description: successful operation\n      security:\n        - OAuth2:\n            - admin\n            - moderator\n      summary: List abuses\n      tags:\n        - Abuses\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                account:\n                  properties:\n                    id:\n                      description: Account id to report\n                      type: integer\n                  type: object\n                comment:\n                  properties:\n                    id:\n                      allOf:\n                        - $ref: \"#/components/schemas/VideoComment/properties/id\"\n                      description: Comment id to report\n                  type: object\n                predefinedReasons:\n                  $ref: \"#/components/schemas/PredefinedAbuseReasons\"\n                reason:\n                  description: Reason why the user reports this video\n                  maxLength: 3000\n                  minLength: 2\n                  type: string\n                video:\n                  properties:\n                    endAt:\n                      description: Timestamp in the video that marks the ending of the report\n                      format: seconds\n                      minimum: 0\n                      type: integer\n                    id:\n                      allOf:\n                        - $ref: \"#/components/schemas/Video/properties/id\"\n                      description: Video id to report\n                    startAt:\n                      description: Timestamp in the video that marks the beginning of the report\n                      format: seconds\n                      minimum: 0\n                      type: integer\n                  type: object\n              required:\n                - reason\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  abuse:\n                    properties:\n                      id:\n                        $ref: \"#/components/schemas/id\"\n                    type: object\n                type: object\n          description: successful operation\n        \"400\":\n          description: incorrect request parameters\n      security:\n        - OAuth2: []\n      summary: Report an abuse\n      tags:\n        - Abuses\n  \"/abuses/{abuseId}\":\n    delete:\n      parameters:\n        - $ref: \"#/components/parameters/abuseId\"\n      responses:\n        \"204\":\n          description: successful operation\n        \"404\":\n          description: block not found\n      security:\n        - OAuth2:\n            - admin\n            - moderator\n      summary: Delete an abuse\n      tags:\n        - Abuses\n    put:\n      parameters:\n        - $ref: \"#/components/parameters/abuseId\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                moderationComment:\n                  description: Update the report comment visible only to the moderation team\n                  maxLength: 3000\n                  minLength: 2\n                  type: string\n                state:\n                  $ref: \"#/components/schemas/AbuseStateSet\"\n              type: object\n      responses:\n        \"204\":\n          description: successful operation\n        \"404\":\n          description: abuse not found\n      security:\n        - OAuth2:\n            - admin\n            - moderator\n      summary: Update an abuse\n      tags:\n        - Abuses\n  \"/abuses/{abuseId}/messages\":\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/abuseId\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  data:\n                    items:\n                      $ref: \"#/components/schemas/AbuseMessage\"\n                    type: array\n                  total:\n                    example: 1\n                    type: integer\n                type: object\n          description: successful operation\n      security:\n        - OAuth2: []\n      summary: List messages of an abuse\n      tags:\n        - Abuses\n    post:\n      parameters:\n        - $ref: \"#/components/parameters/abuseId\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                message:\n                  description: Message to send\n                  maxLength: 3000\n                  minLength: 2\n                  type: string\n              required:\n                - message\n              type: object\n        required: true\n      responses:\n        \"200\":\n          description: successful operation\n        \"400\":\n          description: incorrect request parameters\n      security:\n        - OAuth2: []\n      summary: Add message to an abuse\n      tags:\n        - Abuses\n  \"/abuses/{abuseId}/messages/{abuseMessageId}\":\n    delete:\n      parameters:\n        - $ref: \"#/components/parameters/abuseId\"\n        - $ref: \"#/components/parameters/abuseMessageId\"\n      responses:\n        \"204\":\n          description: successful operation\n      security:\n        - OAuth2: []\n      summary: Delete an abuse message\n      tags:\n        - Abuses\n  /accounts:\n    get:\n      operationId: getAccounts\n      parameters:\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/count\"\n        - $ref: \"#/components/parameters/sort\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Account\"\n                type: array\n          description: successful operation\n      summary: List accounts\n      tags:\n        - Accounts\n  \"/accounts/{name}\":\n    get:\n      operationId: getAccount\n      parameters:\n        - $ref: \"#/components/parameters/name\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Account\"\n          description: successful operation\n        \"404\":\n          description: account not found\n      summary: Get an account\n      tags:\n        - Accounts\n  \"/accounts/{name}/ratings\":\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/name\"\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/count\"\n        - $ref: \"#/components/parameters/sort\"\n        - description: Optionally filter which ratings to retrieve\n          in: query\n          name: rating\n          required: false\n          schema:\n            enum:\n              - like\n              - dislike\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/VideoRating\"\n                type: array\n          description: successful operation\n      security:\n        - OAuth2: []\n      summary: List ratings of an account\n      tags:\n        - Accounts\n  \"/accounts/{name}/video-channels\":\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/name\"\n        - description: include view statistics for the last 30 days (only if authentified as the account user)\n          in: query\n          name: withStats\n          schema:\n            type: boolean\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/count\"\n        - $ref: \"#/components/parameters/sort\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VideoChannelList\"\n          description: successful operation\n      summary: List video channels of an account\n      tags:\n        - Video Channels\n        - Accounts\n  \"/accounts/{name}/videos\":\n    get:\n      operationId: getAccountVideos\n      parameters:\n        - $ref: \"#/components/parameters/name\"\n        - $ref: \"#/components/parameters/categoryOneOf\"\n        - $ref: \"#/components/parameters/isLive\"\n        - $ref: \"#/components/parameters/tagsOneOf\"\n        - $ref: \"#/components/parameters/tagsAllOf\"\n        - $ref: \"#/components/parameters/licenceOneOf\"\n        - $ref: \"#/components/parameters/languageOneOf\"\n        - $ref: \"#/components/parameters/nsfw\"\n        - $ref: \"#/components/parameters/filter\"\n        - $ref: \"#/components/parameters/skipCount\"\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/count\"\n        - $ref: \"#/components/parameters/videosSort\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VideoListResponse\"\n          description: successful operation\n      summary: List videos of an account\n      tags:\n        - Accounts\n        - Video\n      x-codeSamples:\n        - lang: JavaScript\n          source: |\n            fetch('https://peertube2.cpy.re/api/v1/accounts/{name}/videos')\n            .then(function(response) {\n              return response.json()\n            }).then(function(data) {\n              console.log(data)\n            })\n        - lang: Shell\n          source: |\n            ## DEPENDENCIES: jq\n            curl -s https://peertube2.cpy.re/api/v1/accounts/{name}/videos | jq\n        - lang: Ruby\n          source: |\n            require 'net/http'\n            require 'json'\n\n            uri = URI.parse(\"https://peertube2.cpy.re/api/v1/accounts/{name}/videos\")\n\n            http = Net::HTTP.new(uri.host, uri.port)\n            http.use_ssl = true\n\n            response = http.get(uri.request_uri)\n\n            puts JSON.parse(response.read_body)\n        - lang: Python\n          source: |\n            import requests\n\n            r = requests.get(\"https://peertube2.cpy.re/api/v1//accounts/{name}/videos\")\n            json = r.json()\n\n            print(json)\n  /config:\n    get:\n      operationId: getConfig\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                nightly:\n                  externalValue: https://peertube2.cpy.re/api/v1/config\n              schema:\n                $ref: \"#/components/schemas/ServerConfig\"\n          description: successful operation\n      summary: Get instance public configuration\n      tags:\n        - Config\n  /config/about:\n    get:\n      operationId: getAbout\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                nightly:\n                  externalValue: https://peertube2.cpy.re/api/v1/config/about\n              schema:\n                $ref: \"#/components/schemas/ServerConfigAbout\"\n          description: successful operation\n      summary: Get instance \"About\" information\n      tags:\n        - Config\n  /config/custom:\n    delete:\n      operationId: delCustomConfig\n      responses:\n        \"200\":\n          description: successful operation\n      security:\n        - OAuth2:\n            - admin\n      summary: Delete instance runtime configuration\n      tags:\n        - Config\n    get:\n      operationId: getCustomConfig\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServerConfigCustom\"\n          description: successful operation\n      security:\n        - OAuth2:\n            - admin\n      summary: Get instance runtime configuration\n      tags:\n        - Config\n    put:\n      operationId: putCustomConfig\n      responses:\n        \"200\":\n          description: successful operation\n        \"400\":\n          description: |\n            Arises when:\n              - the emailer is disabled and the instance is open to registrations\n              - webtorrent and hls are disabled with transcoding enabled - you need at least one enabled\n          x-summary: field inconsistencies\n      security:\n        - OAuth2:\n            - admin\n      summary: Set instance runtime configuration\n      tags:\n        - Config\n  /custom-pages/homepage/instance:\n    get:\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CustomHomepage\"\n          description: successful operation\n        \"404\":\n          description: No homepage set\n      summary: Get instance custom homepage\n      tags:\n        - Homepage\n    put:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                content:\n                  description: content of the homepage, that will be injected in the client\n                  type: string\n              type: object\n      responses:\n        \"204\":\n          description: successful operation\n      security:\n        - OAuth2:\n            - admin\n      summary: Set instance custom homepage\n      tags:\n        - Homepage\n  \"/feeds/subscriptions.{format}\":\n    get:\n      operationId: getSyndicatedSubscriptionVideos\n      parameters:\n        - description: format expected (we focus on making `rss` the most featureful ; it serves [Media RSS](https://www.rssboard.org/media-rss))\n          in: path\n          name: format\n          required: true\n          schema:\n            enum:\n              - xml\n              - rss\n              - rss2\n              - atom\n              - atom1\n              - json\n              - json1\n            type: string\n        - description: limit listing to a specific account\n          in: query\n          name: accountId\n          required: true\n          schema:\n            type: string\n        - description: private token allowing access\n          in: query\n          name: token\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/sort\"\n        - $ref: \"#/components/parameters/nsfw\"\n        - $ref: \"#/components/parameters/filter\"\n      responses:\n        \"204\":\n          content:\n            application/atom+xml:\n              schema:\n                $ref: \"#/components/schemas/VideosForXML\"\n            application/json:\n              schema:\n                type: object\n            application/rss+xml:\n              schema:\n                $ref: \"#/components/schemas/VideosForXML\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/VideosForXML\"\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/VideosForXML\"\n          description: successful operation\n          headers:\n            Cache-Control:\n              schema:\n                default: max-age=900\n                type: string\n        \"406\":\n          description: accept header unsupported\n      summary: List videos of subscriptions tied to a token\n      tags:\n        - Feeds\n        - Account\n  \"/feeds/video-comments.{format}\":\n    get:\n      operationId: getSyndicatedComments\n      parameters:\n        - description: format expected (we focus on making `rss` the most featureful ; it serves [Media RSS](https://www.rssboard.org/media-rss))\n          in: path\n          name: format\n          required: true\n          schema:\n            enum:\n              - xml\n              - rss\n              - rss2\n              - atom\n              - atom1\n              - json\n              - json1\n            type: string\n        - description: limit listing to a specific video\n          in: query\n          name: videoId\n          schema:\n            type: string\n        - description: limit listing to a specific account\n          in: query\n          name: accountId\n          schema:\n            type: string\n        - description: limit listing to a specific account\n          in: query\n          name: accountName\n          schema:\n            type: string\n        - description: limit listing to a specific video channel\n          in: query\n          name: videoChannelId\n          schema:\n            type: string\n        - description: limit listing to a specific video channel\n          in: query\n          name: videoChannelName\n          schema:\n            type: string\n      responses:\n        \"204\":\n          content:\n            application/atom+xml:\n              examples:\n                nightly:\n                  externalValue: https://peertube2.cpy.re/feeds/video-comments.atom?filter=local\n              schema:\n                $ref: \"#/components/schemas/VideoCommentsForXML\"\n            application/json:\n              examples:\n                nightly:\n                  externalValue: https://peertube2.cpy.re/feeds/video-comments.json?filter=local\n              schema:\n                type: object\n            application/rss+xml:\n              examples:\n                nightly:\n                  externalValue: https://peertube2.cpy.re/feeds/video-comments.rss?filter=local\n              schema:\n                $ref: \"#/components/schemas/VideoCommentsForXML\"\n            application/xml:\n              examples:\n                nightly:\n                  externalValue: https://peertube2.cpy.re/feeds/video-comments.xml?filter=local\n              schema:\n                $ref: \"#/components/schemas/VideoCommentsForXML\"\n            text/xml:\n              examples:\n                nightly:\n                  externalValue: https://peertube2.cpy.re/feeds/video-comments.xml?filter=local\n              schema:\n                $ref: \"#/components/schemas/VideoCommentsForXML\"\n          description: successful operation\n          headers:\n            Cache-Control:\n              schema:\n                default: max-age=900\n                type: string\n        \"400\":\n          description: |\n            Arises when:\n              - videoId filter is mixed with a channel filter\n          x-summary: field inconsistencies\n        \"404\":\n          description: video, video channel or account not found\n        \"406\":\n          description: accept header unsupported\n      summary: List comments on videos\n      tags:\n        - Feeds\n  \"/feeds/videos.{format}\":\n    get:\n      operationId: getSyndicatedVideos\n      parameters:\n        - description: format expected (we focus on making `rss` the most featureful ; it serves [Media RSS](https://www.rssboard.org/media-rss))\n          in: path\n          name: format\n          required: true\n          schema:\n            enum:\n              - xml\n              - rss\n              - rss2\n              - atom\n              - atom1\n              - json\n              - json1\n            type: string\n        - description: limit listing to a specific account\n          in: query\n          name: accountId\n          schema:\n            type: string\n        - description: limit listing to a specific account\n          in: query\n          name: accountName\n          schema:\n            type: string\n        - description: limit listing to a specific video channel\n          in: query\n          name: videoChannelId\n          schema:\n            type: string\n        - description: limit listing to a specific video channel\n          in: query\n          name: videoChannelName\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/sort\"\n        - $ref: \"#/components/parameters/nsfw\"\n        - $ref: \"#/components/parameters/filter\"\n      responses:\n        \"204\":\n          content:\n            application/atom+xml:\n              examples:\n                nightly:\n                  externalValue: https://peertube2.cpy.re/feeds/videos.atom?filter=local\n              schema:\n                $ref: \"#/components/schemas/VideosForXML\"\n            application/json:\n              examples:\n                nightly:\n                  externalValue: https://peertube2.cpy.re/feeds/videos.json?filter=local\n              schema:\n                type: object\n            application/rss+xml:\n              examples:\n                nightly:\n                  externalValue: https://peertube2.cpy.re/feeds/videos.rss?filter=local\n              schema:\n                $ref: \"#/components/schemas/VideosForXML\"\n            application/xml:\n              examples:\n                nightly:\n                  externalValue: https://peertube2.cpy.re/feeds/videos.xml?filter=local\n              schema:\n                $ref: \"#/components/schemas/VideosForXML\"\n            text/xml:\n              examples:\n                nightly:\n                  externalValue: https://peertube2.cpy.re/feeds/videos.xml?filter=local\n              schema:\n                $ref: \"#/components/schemas/VideosForXML\"\n          description: successful operation\n          headers:\n            Cache-Control:\n              schema:\n                default: max-age=900\n                type: string\n        \"404\":\n          description: video channel or account not found\n        \"406\":\n          description: accept header unsupported\n      summary: List videos\n      tags:\n        - Feeds\n  \"/jobs/{state}\":\n    get:\n      operationId: getJobs\n      parameters:\n        - description: The state of the job ('' for for no filter)\n          in: path\n          name: state\n          required: true\n          schema:\n            enum:\n              - \"\"\n              - active\n              - completed\n              - failed\n              - waiting\n              - delayed\n            type: string\n        - $ref: \"#/components/parameters/jobType\"\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/count\"\n        - $ref: \"#/components/parameters/sort\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  data:\n                    items:\n                      $ref: \"#/components/schemas/Job\"\n                    maxItems: 100\n                    type: array\n                  total:\n                    example: 1\n                    type: integer\n                type: object\n          description: successful operation\n      security:\n        - OAuth2:\n            - admin\n      summary: List instance jobs\n      tags:\n        - Job\n  /oauth-clients/local:\n    get:\n      description: You need to retrieve a client id and secret before [logging in](#operation/getOAuthToken).\n      operationId: getOAuthClient\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/OAuthClient\"\n          description: successful operation\n          links:\n            UseOAuthClientToLogin:\n              operationId: getOAuthToken\n              parameters:\n                client_id: $response.body#/client_id\n                client_secret: $response.body#/client_secret\n      summary: Login prerequisite\n      tags:\n        - Session\n      x-codeSamples:\n        - lang: Shell\n          source: |\n            API=\"https://peertube2.cpy.re/api/v1\"\n\n            ## AUTH\n            curl -s \"$API/oauth-clients/local\"\n  /plugins:\n    get:\n      operationId: getPlugins\n      parameters:\n        - in: query\n          name: pluginType\n          schema:\n            type: integer\n        - in: query\n          name: uninstalled\n          schema:\n            type: boolean\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/count\"\n        - $ref: \"#/components/parameters/sort\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PluginResponse\"\n          description: successful operation\n      security:\n        - OAuth2:\n            - admin\n      summary: List plugins\n      tags:\n        - Plugins\n  /plugins/available:\n    get:\n      operationId: getAvailablePlugins\n      parameters:\n        - in: query\n          name: search\n          schema:\n            type: string\n        - in: query\n          name: pluginType\n          schema:\n            type: integer\n        - in: query\n          name: currentPeerTubeEngine\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/count\"\n        - $ref: \"#/components/parameters/sort\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PluginResponse\"\n          description: successful operation\n        \"503\":\n          description: plugin index unavailable\n      security:\n        - OAuth2:\n            - admin\n      summary: List available plugins\n      tags:\n        - Plugins\n  /plugins/install:\n    post:\n      operationId: addPlugin\n      requestBody:\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - additionalProperties: false\n                  properties:\n                    npmName:\n                      example: peertube-plugin-auth-ldap\n                      type: string\n                  required:\n                    - npmName\n                  type: object\n                - additionalProperties: false\n                  properties:\n                    path:\n                      type: string\n                  required:\n                    - path\n                  type: object\n      responses:\n        \"204\":\n          description: successful operation\n        \"400\":\n          description: should have either `npmName` or `path` set\n      security:\n        - OAuth2:\n            - admin\n      summary: Install a plugin\n      tags:\n        - Plugins\n  /plugins/uninstall:\n    post:\n      operationId: uninstallPlugin\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                npmName:\n                  description: name of the plugin/theme in its package.json\n                  example: peertube-plugin-auth-ldap\n                  type: string\n              required:\n                - npmName\n              type: object\n      responses:\n        \"204\":\n          description: successful operation\n        \"404\":\n          description: existing plugin not found\n      security:\n        - OAuth2:\n            - admin\n      summary: Uninstall a plugin\n      tags:\n        - Plugins\n  /plugins/update:\n    post:\n      operationId: updatePlugin\n      requestBody:\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - additionalProperties: false\n                  properties:\n                    npmName:\n                      example: peertube-plugin-auth-ldap\n                      type: string\n                  required:\n                    - npmName\n                  type: object\n                - additionalProperties: false\n                  properties:\n                    path:\n                      type: string\n                  required:\n                    - path\n                  type: object\n      responses:\n        \"204\":\n          description: successful operation\n        \"400\":\n          description: should have either `npmName` or `path` set\n        \"404\":\n          description: existing plugin not found\n      security:\n        - OAuth2:\n            - admin\n      summary: Update a plugin\n      tags:\n        - Plugins\n  \"/plugins/{npmName}\":\n    get:\n      operationId: getPlugin\n      parameters:\n        - $ref: \"#/components/parameters/npmName\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Plugin\"\n          description: successful operation\n        \"404\":\n          description: plugin not found\n      security:\n        - OAuth2:\n            - admin\n      summary: Get a plugin\n      tags:\n        - Plugins\n  \"/plugins/{npmName}/public-settings\":\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/npmName\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                additionalProperties: true\n                type: object\n          description: successful operation\n        \"404\":\n          description: plugin not found\n      summary: Get a plugin's public settings\n      tags:\n        - Plugins\n  \"/plugins/{npmName}/registered-settings\":\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/npmName\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                additionalProperties: true\n                type: object\n          description: successful operation\n        \"404\":\n          description: plugin not found\n      security:\n        - OAuth2:\n            - admin\n      summary: Get a plugin's registered settings\n      tags:\n        - Plugins\n  \"/plugins/{npmName}/settings\":\n    put:\n      parameters:\n        - $ref: \"#/components/parameters/npmName\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                settings:\n                  additionalProperties: true\n                  type: object\n              type: object\n      responses:\n        \"204\":\n          description: successful operation\n        \"404\":\n          description: plugin not found\n      security:\n        - OAuth2:\n            - admin\n      summary: Set a plugin's settings\n      tags:\n        - Plugins\n  /search/video-channels:\n    get:\n      callbacks:\n        searchTarget === search-index:\n          $ref: \"#/components/callbacks/searchIndex\"\n      operationId: searchChannels\n      parameters:\n        - description: |\n            String to search. If the user can make a remote URI search, and the string is an URI then the PeerTube instance will fetch the remote object and add it to its database. Then, you can use the REST API to fetch the complete channel information and interact with it.\n          in: query\n          name: search\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/count\"\n        - $ref: \"#/components/parameters/searchTarget\"\n        - $ref: \"#/components/parameters/sort\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VideoChannelList\"\n          description: successful operation\n        \"500\":\n          description: search index unavailable\n      summary: Search channels\n      tags:\n        - Search\n  /search/video-playlists:\n    get:\n      callbacks:\n        searchTarget === search-index:\n          $ref: \"#/components/callbacks/searchIndex\"\n      operationId: searchPlaylists\n      parameters:\n        - description: |\n            String to search. If the user can make a remote URI search, and the string is an URI then the PeerTube instance will fetch the remote object and add it to its database. Then, you can use the REST API to fetch the complete playlist information and interact with it.\n          in: query\n          name: search\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/count\"\n        - $ref: \"#/components/parameters/searchTarget\"\n        - $ref: \"#/components/parameters/sort\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  data:\n                    items:\n                      $ref: \"#/components/schemas/VideoPlaylist\"\n                    type: array\n                  total:\n                    example: 1\n                    type: integer\n                type: object\n          description: successful operation\n        \"500\":\n          description: search index unavailable\n      summary: Search playlists\n      tags:\n        - Search\n  /search/videos:\n    get:\n      callbacks:\n        searchTarget === search-index:\n          $ref: \"#/components/callbacks/searchIndex\"\n      operationId: searchVideos\n      parameters:\n        - allowEmptyValue: false\n          description: |\n            String to search. If the user can make a remote URI search, and the string is an URI then the PeerTube instance will fetch the remote object and add it to its database. Then, you can use the REST API to fetch the complete video information and interact with it.\n          in: query\n          name: search\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/categoryOneOf\"\n        - $ref: \"#/components/parameters/isLive\"\n        - $ref: \"#/components/parameters/tagsOneOf\"\n        - $ref: \"#/components/parameters/tagsAllOf\"\n        - $ref: \"#/components/parameters/licenceOneOf\"\n        - $ref: \"#/components/parameters/languageOneOf\"\n        - $ref: \"#/components/parameters/nsfw\"\n        - $ref: \"#/components/parameters/filter\"\n        - $ref: \"#/components/parameters/skipCount\"\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/count\"\n        - $ref: \"#/components/parameters/searchTarget\"\n        - $ref: \"#/components/parameters/videosSearchSort\"\n        - description: Get videos that are published after this date\n          in: query\n          name: startDate\n          schema:\n            format: date-time\n            type: string\n        - description: Get videos that are published before this date\n          in: query\n          name: endDate\n          schema:\n            format: date-time\n            type: string\n        - description: Get videos that are originally published after this date\n          in: query\n          name: originallyPublishedStartDate\n          schema:\n            format: date-time\n            type: string\n        - description: Get videos that are originally published before this date\n          in: query\n          name: originallyPublishedEndDate\n          schema:\n            format: date-time\n            type: string\n        - description: Get videos that have this minimum duration\n          in: query\n          name: durationMin\n          schema:\n            type: integer\n        - description: Get videos that have this maximum duration\n          in: query\n          name: durationMax\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VideoListResponse\"\n          description: successful operation\n        \"500\":\n          description: search index unavailable\n      summary: Search videos\n      tags:\n        - Search\n  /server/blocklist/accounts:\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/count\"\n        - $ref: \"#/components/parameters/sort\"\n      responses:\n        \"200\":\n          description: successful operation\n      security:\n        - OAuth2:\n            - admin\n      summary: List account blocks\n      tags:\n        - Account Blocks\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                accountName:\n                  description: account to block, in the form `username@domain`\n                  example: chocobozzz@example.org\n                  type: string\n              required:\n                - accountName\n              type: object\n      responses:\n        \"200\":\n          description: successful operation\n        \"409\":\n          description: self-blocking forbidden\n      security:\n        - OAuth2:\n            - admin\n      summary: Block an account\n      tags:\n        - Account Blocks\n  \"/server/blocklist/accounts/{accountName}\":\n    delete:\n      parameters:\n        - description: account to unblock, in the form `username@domain`\n          in: path\n          name: accountName\n          required: true\n          schema:\n            type: string\n      responses:\n        \"201\":\n          description: successful operation\n        \"404\":\n          description: account or account block does not exist\n      security:\n        - OAuth2:\n            - admin\n      summary: Unblock an account by its handle\n      tags:\n        - Account Blocks\n  /server/blocklist/servers:\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/count\"\n        - $ref: \"#/components/parameters/sort\"\n      responses:\n        \"200\":\n          description: successful operation\n      security:\n        - OAuth2:\n            - admin\n      summary: List server blocks\n      tags:\n        - Server Blocks\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                host:\n                  description: server domain to block\n                  format: hostname\n                  type: string\n              required:\n                - host\n              type: object\n      responses:\n        \"204\":\n          description: successful operation\n        \"409\":\n          description: self-blocking forbidden\n      security:\n        - OAuth2:\n            - admin\n      summary: Block a server\n      tags:\n        - Server Blocks\n  \"/server/blocklist/servers/{host}\":\n    delete:\n      parameters:\n        - description: server domain to unblock\n          in: path\n          name: host\n          required: true\n          schema:\n            format: hostname\n            type: string\n      responses:\n        \"204\":\n          description: successful operation\n        \"404\":\n          description: account block does not exist\n      security:\n        - OAuth2:\n            - admin\n      summary: Unblock a server by its domain\n      tags:\n        - Server Blocks\n  /server/followers:\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/followState\"\n        - $ref: \"#/components/parameters/actorType\"\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/count\"\n        - $ref: \"#/components/parameters/sort\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  data:\n                    items:\n                      $ref: \"#/components/schemas/Follow\"\n                    type: array\n                  total:\n                    example: 1\n                    type: integer\n                type: object\n          description: successful operation\n      summary: List instances following the server\n      tags:\n        - Instance Follows\n  \"/server/followers/{nameWithHost}\":\n    delete:\n      parameters:\n        - description: The remote actor handle to remove from your followers\n          in: path\n          name: nameWithHost\n          required: true\n          schema:\n            format: email\n            type: string\n      responses:\n        \"204\":\n          description: successful operation\n        \"404\":\n          description: follower not found\n      security:\n        - OAuth2:\n            - admin\n      summary: Remove or reject a follower to your server\n      tags:\n        - Instance Follows\n  \"/server/followers/{nameWithHost}/accept\":\n    post:\n      parameters:\n        - description: The remote actor handle to remove from your followers\n          in: path\n          name: nameWithHost\n          required: true\n          schema:\n            format: email\n            type: string\n      responses:\n        \"204\":\n          description: successful operation\n        \"404\":\n          description: follower not found\n      security:\n        - OAuth2:\n            - admin\n      summary: Accept a pending follower to your server\n      tags:\n        - Instance Follows\n  \"/server/followers/{nameWithHost}/reject\":\n    post:\n      parameters:\n        - description: The remote actor handle to remove from your followers\n          in: path\n          name: nameWithHost\n          required: true\n          schema:\n            format: email\n            type: string\n      responses:\n        \"204\":\n          description: successful operation\n        \"404\":\n          description: follower not found\n      security:\n        - OAuth2:\n            - admin\n      summary: Reject a pending follower to your server\n      tags:\n        - Instance Follows\n  /server/following:\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/followState\"\n        - $ref: \"#/components/parameters/actorType\"\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/count\"\n        - $ref: \"#/components/parameters/sort\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  data:\n                    items:\n                      $ref: \"#/components/schemas/Follow\"\n                    type: array\n                  total:\n                    example: 1\n                    type: integer\n                type: object\n          description: successful operation\n      summary: List instances followed by the server\n      tags:\n        - Instance Follows\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                handles:\n                  items:\n                    type: string\n                  type: array\n                  uniqueItems: true\n                hosts:\n                  items:\n                    format: hostname\n                    type: string\n                  type: array\n                  uniqueItems: true\n              type: object\n      responses:\n        \"204\":\n          description: successful operation\n        \"500\":\n          description: cannot follow a non-HTTPS server\n      security:\n        - OAuth2:\n            - admin\n      summary: Follow a list of actors (PeerTube instance, channel or account)\n      tags:\n        - Instance Follows\n  \"/server/following/{hostOrHandle}\":\n    delete:\n      parameters:\n        - description: The hostOrHandle to unfollow\n          in: path\n          name: hostOrHandle\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: successful operation\n        \"404\":\n          description: host or handle not found\n      security:\n        - OAuth2:\n            - admin\n      summary: Unfollow an actor (PeerTube instance, channel or account)\n      tags:\n        - Instance Follows\n  /server/redundancy/videos:\n    get:\n      operationId: getMirroredVideos\n      parameters:\n        - description: direction of the mirror\n          in: query\n          name: target\n          required: true\n          schema:\n            enum:\n              - my-videos\n              - remote-videos\n            type: string\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/count\"\n        - $ref: \"#/components/parameters/videoRedundanciesSort\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/VideoRedundancy\"\n                type: array\n          description: successful operation\n      security:\n        - OAuth2:\n            - admin\n      summary: List videos being mirrored\n      tags:\n        - Video Mirroring\n    post:\n      operationId: putMirroredVideo\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                videoId:\n                  $ref: \"#/components/schemas/Video/properties/id\"\n              required:\n                - videoId\n              type: object\n      responses:\n        \"204\":\n          description: successful operation\n        \"400\":\n          description: cannot mirror a local video\n        \"404\":\n          description: video does not exist\n        \"409\":\n          description: video is already mirrored\n      security:\n        - OAuth2:\n            - admin\n      summary: Mirror a video\n      tags:\n        - Video Mirroring\n  \"/server/redundancy/videos/{redundancyId}\":\n    delete:\n      operationId: delMirroredVideo\n      parameters:\n        - description: id of an existing redundancy on a video\n          in: path\n          name: redundancyId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: successful operation\n        \"404\":\n          description: video redundancy not found\n      security:\n        - OAuth2:\n            - admin\n      summary: Delete a mirror done on a video\n      tags:\n        - Video Mirroring\n  \"/server/redundancy/{host}\":\n    put:\n      parameters:\n        - description: server domain to mirror\n          in: path\n          name: host\n          required: true\n          schema:\n            format: hostname\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                redundancyAllowed:\n                  description: allow mirroring of the host's local videos\n                  type: boolean\n              required:\n                - redundancyAllowed\n              type: object\n      responses:\n        \"204\":\n          description: successful operation\n        \"404\":\n          description: server is not already known\n      security:\n        - OAuth2:\n            - admin\n      summary: Update a server redundancy policy\n      tags:\n        - Instance Redundancy\n  /users:\n    get:\n      operationId: getUsers\n      parameters:\n        - $ref: \"#/components/parameters/usersSearch\"\n        - $ref: \"#/components/parameters/usersBlocked\"\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/count\"\n        - $ref: \"#/components/parameters/usersSort\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/User\"\n                type: array\n          description: successful operation\n      security:\n        - OAuth2:\n            - admin\n      summary: List users\n      tags:\n        - Users\n    post:\n      operationId: addUser\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/AddUser\"\n        description: |\n          If the smtp server is configured, you can leave the password empty and an email will be sent\n          asking the user to set it first.\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AddUserResponse\"\n          description: user created\n          links:\n            DelUser:\n              operationId: delUser\n              parameters:\n                id: $response.body#/user/id\n            GetUser:\n              operationId: getUser\n              parameters:\n                id: $response.body#/user/id\n            PutUser:\n              operationId: putUser\n              parameters:\n                id: $response.body#/user/id\n        \"403\":\n          description: insufficient authority to create an admin or moderator\n      security:\n        - OAuth2:\n            - admin\n      summary: Create a user\n      tags:\n        - Users\n  /users/ask-send-verify-email:\n    post:\n      operationId: resendEmailToVerifyUser\n      responses:\n        \"204\":\n          description: successful operation\n      summary: Resend user verification link\n      tags:\n        - Users\n        - Register\n  /users/me:\n    get:\n      operationId: getUserInfo\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/User\"\n                type: array\n          description: successful operation\n      security:\n        - OAuth2:\n            - user\n      summary: Get my user information\n      tags:\n        - My User\n    put:\n      operationId: putUserInfo\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UpdateMe\"\n        required: true\n      responses:\n        \"204\":\n          description: successful operation\n      security:\n        - OAuth2:\n            - user\n      summary: Update my user information\n      tags:\n        - My User\n  /users/me/abuses:\n    get:\n      operationId: getMyAbuses\n      parameters:\n        - description: only list the report with this id\n          in: query\n          name: id\n          schema:\n            type: integer\n        - in: query\n          name: state\n          schema:\n            $ref: \"#/components/schemas/AbuseStateSet\"\n        - $ref: \"#/components/parameters/abusesSort\"\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/count\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  data:\n                    items:\n                      $ref: \"#/components/schemas/Abuse\"\n                    type: array\n                  total:\n                    example: 1\n                    type: integer\n                type: object\n          description: successful operation\n      security:\n        - OAuth2: []\n      summary: List my abuses\n      tags:\n        - Abuses\n        - My User\n  /users/me/avatar:\n    delete:\n      responses:\n        \"204\":\n          description: successful operation\n      security:\n        - OAuth2: []\n      summary: Delete my avatar\n      tags:\n        - My User\n  /users/me/avatar/pick:\n    post:\n      requestBody:\n        content:\n          multipart/form-data:\n            encoding:\n              avatarfile:\n                contentType: image/png, image/jpeg\n            schema:\n              properties:\n                avatarfile:\n                  description: The file to upload\n                  format: binary\n                  type: string\n              type: object\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  avatar:\n                    $ref: \"#/components/schemas/ActorImage\"\n                type: object\n          description: successful operation\n        \"413\":\n          description: image file too large\n          headers:\n            X-File-Maximum-Size:\n              description: Maximum file size for the avatar\n              schema:\n                format: Nginx size\n                type: string\n      security:\n        - OAuth2: []\n      summary: Update my user avatar\n      tags:\n        - My User\n  /users/me/history/videos:\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/count\"\n        - $ref: \"#/components/parameters/search\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VideoListResponse\"\n          description: successful operation\n      security:\n        - OAuth2: []\n      summary: List watched videos history\n      tags:\n        - My History\n  /users/me/history/videos/remove:\n    post:\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                beforeDate:\n                  description: history before this date will be deleted\n                  format: date-time\n                  type: string\n              type: object\n      responses:\n        \"204\":\n          description: successful operation\n      security:\n        - OAuth2: []\n      summary: Clear video history\n      tags:\n        - My History\n  /users/me/notification-settings:\n    put:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                abuseAsModerator:\n                  $ref: \"#/components/schemas/NotificationSettingValue\"\n                autoInstanceFollowing:\n                  $ref: \"#/components/schemas/NotificationSettingValue\"\n                blacklistOnMyVideo:\n                  $ref: \"#/components/schemas/NotificationSettingValue\"\n                commentMention:\n                  $ref: \"#/components/schemas/NotificationSettingValue\"\n                myVideoImportFinished:\n                  $ref: \"#/components/schemas/NotificationSettingValue\"\n                myVideoPublished:\n                  $ref: \"#/components/schemas/NotificationSettingValue\"\n                newCommentOnMyVideo:\n                  $ref: \"#/components/schemas/NotificationSettingValue\"\n                newFollow:\n                  $ref: \"#/components/schemas/NotificationSettingValue\"\n                newInstanceFollower:\n                  $ref: \"#/components/schemas/NotificationSettingValue\"\n                newUserRegistration:\n                  $ref: \"#/components/schemas/NotificationSettingValue\"\n                newVideoFromSubscription:\n                  $ref: \"#/components/schemas/NotificationSettingValue\"\n                videoAutoBlacklistAsModerator:\n                  $ref: \"#/components/schemas/NotificationSettingValue\"\n              type: object\n      responses:\n        \"204\":\n          description: successful operation\n      security:\n        - OAuth2: []\n      summary: Update my notification settings\n      tags:\n        - My Notifications\n  /users/me/notifications:\n    get:\n      parameters:\n        - description: only list unread notifications\n          in: query\n          name: unread\n          schema:\n            type: boolean\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/count\"\n        - $ref: \"#/components/parameters/sort\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NotificationListResponse\"\n          description: successful operation\n      security:\n        - OAuth2: []\n      summary: List my notifications\n      tags:\n        - My Notifications\n  /users/me/notifications/read:\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                ids:\n                  description: ids of the notifications to mark as read\n                  items:\n                    type: integer\n                  type: array\n              required:\n                - ids\n              type: object\n      responses:\n        \"204\":\n          description: successful operation\n      security:\n        - OAuth2: []\n      summary: Mark notifications as read by their id\n      tags:\n        - My Notifications\n  /users/me/notifications/read-all:\n    post:\n      responses:\n        \"204\":\n          description: successful operation\n      security:\n        - OAuth2: []\n      summary: Mark all my notification as read\n      tags:\n        - My Notifications\n  /users/me/subscriptions:\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/count\"\n        - $ref: \"#/components/parameters/sort\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VideoChannelList\"\n          description: successful operation\n      security:\n        - OAuth2:\n            - user\n      summary: Get my user subscriptions\n      tags:\n        - My Subscriptions\n    post:\n      requestBody:\n        content:\n          application/json:\n            examples:\n              default:\n                value:\n                  uri: 008a0e54-375d-49d0-8379-143202e24152@video.lqdn.fr\n            schema:\n              properties:\n                uri:\n                  description: uri of the video channels to subscribe to\n                  format: uri\n                  type: string\n              required:\n                - uri\n              type: object\n      responses:\n        \"200\":\n          description: successful operation\n      security:\n        - OAuth2:\n            - user\n      summary: Add subscription to my user\n      tags:\n        - My Subscriptions\n  /users/me/subscriptions/exist:\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/subscriptionsUris\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: successful operation\n      security:\n        - OAuth2:\n            - user\n      summary: Get if subscriptions exist for my user\n      tags:\n        - My Subscriptions\n  /users/me/subscriptions/videos:\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/categoryOneOf\"\n        - $ref: \"#/components/parameters/isLive\"\n        - $ref: \"#/components/parameters/tagsOneOf\"\n        - $ref: \"#/components/parameters/tagsAllOf\"\n        - $ref: \"#/components/parameters/licenceOneOf\"\n        - $ref: \"#/components/parameters/languageOneOf\"\n        - $ref: \"#/components/parameters/nsfw\"\n        - $ref: \"#/components/parameters/filter\"\n        - $ref: \"#/components/parameters/skipCount\"\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/count\"\n        - $ref: \"#/components/parameters/videosSort\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VideoListResponse\"\n          description: successful operation\n      security:\n        - OAuth2:\n            - user\n      summary: List videos of subscriptions of my user\n      tags:\n        - My Subscriptions\n        - Videos\n  \"/users/me/subscriptions/{subscriptionHandle}\":\n    delete:\n      parameters:\n        - $ref: \"#/components/parameters/subscriptionHandle\"\n      responses:\n        \"200\":\n          description: successful operation\n      security:\n        - OAuth2:\n            - user\n      summary: Delete subscription of my user\n      tags:\n        - My Subscriptions\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/subscriptionHandle\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VideoChannel\"\n          description: successful operation\n      security:\n        - OAuth2:\n            - user\n      summary: Get subscription of my user\n      tags:\n        - My Subscriptions\n  /users/me/video-playlists/videos-exist:\n    get:\n      parameters:\n        - description: The video ids to check\n          in: query\n          name: videoIds\n          required: true\n          schema:\n            items:\n              $ref: \"#/components/schemas/Video/properties/id\"\n            type: array\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  videoId:\n                    items:\n                      properties:\n                        playlistElementId:\n                          type: integer\n                        playlistId:\n                          type: integer\n                        startTimestamp:\n                          format: seconds\n                          type: integer\n                        stopTimestamp:\n                          format: seconds\n                          type: integer\n                      type: object\n                    type: array\n                type: object\n          description: successful operation\n      security:\n        - OAuth2: []\n      summary: Check video exists in my playlists\n      tags:\n        - Video Playlists\n  /users/me/video-quota-used:\n    get:\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  videoQuotaUsed:\n                    description: The user video quota used so far in bytes\n                    example: 16810141515\n                    type: number\n                  videoQuotaUsedDaily:\n                    description: The user video quota used today in bytes\n                    example: 1681014151\n                    type: number\n                type: object\n          description: successful operation\n      security:\n        - OAuth2:\n            - user\n      summary: Get my user used quota\n      tags:\n        - My User\n  /users/me/videos:\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/count\"\n        - $ref: \"#/components/parameters/sort\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VideoListResponse\"\n          description: successful operation\n      security:\n        - OAuth2:\n            - user\n      summary: Get videos of my user\n      tags:\n        - My User\n        - Videos\n  /users/me/videos/imports:\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/count\"\n        - $ref: \"#/components/parameters/sort\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VideoImportsList\"\n          description: successful operation\n      security:\n        - OAuth2:\n            - user\n      summary: Get video imports of my user\n      tags:\n        - Videos\n        - My User\n  \"/users/me/videos/{videoId}/rating\":\n    get:\n      parameters:\n        - description: The video id\n          in: path\n          name: videoId\n          required: true\n          schema:\n            $ref: \"#/components/schemas/Video/properties/id\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GetMeVideoRating\"\n          description: successful operation\n      security:\n        - OAuth2: []\n      summary: Get rate of my user for a video\n      tags:\n        - My User\n        - Video Rates\n  /users/register:\n    post:\n      operationId: registerUser\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/RegisterUser\"\n        required: true\n      responses:\n        \"204\":\n          description: successful operation\n      summary: Register a user\n      tags:\n        - Users\n        - Register\n  /users/revoke-token:\n    post:\n      description: Revokes your access token and its associated refresh token, destroying your current session.\n      operationId: revokeOAuthToken\n      responses:\n        \"200\":\n          description: successful operation\n      security:\n        - OAuth2: []\n      summary: Logout\n      tags:\n        - Session\n  /users/token:\n    post:\n      description: With your [client id and secret](#operation/getOAuthClient), you can retrieve an access and refresh tokens.\n      operationId: getOAuthToken\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              discriminator:\n                mapping:\n                  password: \"#/components/schemas/OAuthToken-password\"\n                  refresh_token: \"#/components/schemas/OAuthToken-refresh_token\"\n                propertyName: grant_type\n              oneOf:\n                - $ref: \"#/components/schemas/OAuthToken-password\"\n                - $ref: \"#/components/schemas/OAuthToken-refresh_token\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  access_token:\n                    description: valid for 1 day\n                    example: 90286a0bdf0f7315d9d3fe8dabf9e1d2be9c97d0\n                    type: string\n                  expires_in:\n                    example: 14399\n                    minimum: 0\n                    type: integer\n                  refresh_token:\n                    description: valid for 2 weeks\n                    example: 2e0d675df9fc96d2e4ec8a3ebbbf45eca9137bb7\n                    type: string\n                  refresh_token_expires_in:\n                    example: 1209600\n                    minimum: 0\n                    type: integer\n                  token_type:\n                    example: Bearer\n                    type: string\n                type: object\n          description: successful operation\n        \"400\":\n          description: |\n            Disambiguate via `type`:\n            - `invalid_client` for an unmatched `client_id`\n            - `invalid_grant` for unmatched credentials\n          x-summary: client or credentials are invalid\n        \"401\":\n          description: |\n            Disambiguate via `type`:\n            - default value for a regular authentication failure\n            - `invalid_token` for an expired token\n          x-summary: token expired\n      summary: Login\n      tags:\n        - Session\n      x-codeSamples:\n        - lang: Shell\n          source: |\n            ## DEPENDENCIES: jq\n            API=\"https://peertube2.cpy.re/api/v1\"\n            USERNAME=\"\u003cyour_username\u003e\"\n            PASSWORD=\"\u003cyour_password\u003e\"\n\n            ## AUTH\n            client_id=$(curl -s \"$API/oauth-clients/local\" | jq -r \".client_id\")\n            client_secret=$(curl -s \"$API/oauth-clients/local\" | jq -r \".client_secret\")\n            curl -s \"$API/users/token\" \\\n              --data client_id=\"$client_id\" \\\n              --data client_secret=\"$client_secret\" \\\n              --data grant_type=password \\\n              --data username=\"$USERNAME\" \\\n              --data password=\"$PASSWORD\" \\\n              | jq -r \".access_token\"\n  \"/users/{id}\":\n    delete:\n      operationId: delUser\n      responses:\n        \"204\":\n          description: successful operation\n      security:\n        - OAuth2:\n            - admin\n      summary: Delete a user\n      tags:\n        - Users\n    get:\n      operationId: getUser\n      parameters:\n        - description: include statistics about the user (only available as a moderator/admin)\n          in: query\n          name: withStats\n          schema:\n            type: boolean\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/User\"\n                  - $ref: \"#/components/schemas/UserWithStats\"\n          description: |\n            As an admin/moderator, you can request a response augmented with statistics about the user's\n            moderation relations and videos usage, by using the `withStats` parameter.\n          x-summary: successful operation\n      security:\n        - OAuth2: []\n      summary: Get a user\n      tags:\n        - Users\n    parameters:\n      - $ref: \"#/components/parameters/id\"\n    put:\n      operationId: putUser\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UpdateUser\"\n        required: true\n      responses:\n        \"204\":\n          description: successful operation\n      security:\n        - OAuth2: []\n      summary: Update a user\n      tags:\n        - Users\n  \"/users/{id}/verify-email\":\n    post:\n      description: |\n        Following a user registration, the new user will receive an email asking to click a link\n        containing a secret.\n      operationId: verifyUser\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                isPendingEmail:\n                  type: boolean\n                verificationString:\n                  format: url\n                  type: string\n              required:\n                - verificationString\n              type: object\n      responses:\n        \"204\":\n          description: successful operation\n        \"403\":\n          description: invalid verification string\n        \"404\":\n          description: user not found\n      summary: Verify a user\n      tags:\n        - Users\n        - Register\n  /video-channels:\n    get:\n      operationId: getVideoChannels\n      parameters:\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/count\"\n        - $ref: \"#/components/parameters/sort\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VideoChannelList\"\n          description: successful operation\n      summary: List video channels\n      tags:\n        - Video Channels\n    post:\n      operationId: addVideoChannel\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/VideoChannelCreate\"\n      responses:\n        \"204\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  videoChannel:\n                    properties:\n                      id:\n                        $ref: \"#/components/schemas/VideoChannel/properties/id\"\n                    type: object\n                type: object\n          description: successful operation\n      security:\n        - OAuth2: []\n      summary: Create a video channel\n      tags:\n        - Video Channels\n  \"/video-channels/{channelHandle}\":\n    delete:\n      operationId: delVideoChannel\n      parameters:\n        - $ref: \"#/components/parameters/channelHandle\"\n      responses:\n        \"204\":\n          description: successful operation\n      security:\n        - OAuth2: []\n      summary: Delete a video channel\n      tags:\n        - Video Channels\n    get:\n      operationId: getVideoChannel\n      parameters:\n        - $ref: \"#/components/parameters/channelHandle\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VideoChannel\"\n          description: successful operation\n      summary: Get a video channel\n      tags:\n        - Video Channels\n    put:\n      operationId: putVideoChannel\n      parameters:\n        - $ref: \"#/components/parameters/channelHandle\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/VideoChannelUpdate\"\n      responses:\n        \"204\":\n          description: successful operation\n      security:\n        - OAuth2: []\n      summary: Update a video channel\n      tags:\n        - Video Channels\n  \"/video-channels/{channelHandle}/avatar\":\n    delete:\n      parameters:\n        - $ref: \"#/components/parameters/channelHandle\"\n      responses:\n        \"204\":\n          description: successful operation\n      security:\n        - OAuth2: []\n      summary: Delete channel avatar\n      tags:\n        - Video Channels\n  \"/video-channels/{channelHandle}/avatar/pick\":\n    post:\n      parameters:\n        - $ref: \"#/components/parameters/channelHandle\"\n      requestBody:\n        content:\n          multipart/form-data:\n            encoding:\n              avatarfile:\n                contentType: image/png, image/jpeg\n            schema:\n              properties:\n                avatarfile:\n                  description: The file to upload.\n                  format: binary\n                  type: string\n              type: object\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  avatar:\n                    $ref: \"#/components/schemas/ActorImage\"\n                type: object\n          description: successful operation\n        \"413\":\n          description: image file too large\n          headers:\n            X-File-Maximum-Size:\n              description: Maximum file size for the avatar\n              schema:\n                format: Nginx size\n                type: string\n      security:\n        - OAuth2: []\n      summary: Update channel avatar\n      tags:\n        - Video Channels\n  \"/video-channels/{channelHandle}/banner\":\n    delete:\n      parameters:\n        - $ref: \"#/components/parameters/channelHandle\"\n      responses:\n        \"204\":\n          description: successful operation\n      security:\n        - OAuth2: []\n      summary: Delete channel banner\n      tags:\n        - Video Channels\n  \"/video-channels/{channelHandle}/banner/pick\":\n    post:\n      parameters:\n        - $ref: \"#/components/parameters/channelHandle\"\n      requestBody:\n        content:\n          multipart/form-data:\n            encoding:\n              bannerfile:\n                contentType: image/png, image/jpeg\n            schema:\n              properties:\n                bannerfile:\n                  description: The file to upload.\n                  format: binary\n                  type: string\n              type: object\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  banner:\n                    $ref: \"#/components/schemas/ActorImage\"\n                type: object\n          description: successful operation\n        \"413\":\n          description: image file too large\n          headers:\n            X-File-Maximum-Size:\n              description: Maximum file size for the banner\n              schema:\n                format: Nginx size\n                type: string\n      security:\n        - OAuth2: []\n      summary: Update channel banner\n      tags:\n        - Video Channels\n  \"/video-channels/{channelHandle}/videos\":\n    get:\n      operationId: getVideoChannelVideos\n      parameters:\n        - $ref: \"#/components/parameters/channelHandle\"\n        - $ref: \"#/components/parameters/categoryOneOf\"\n        - $ref: \"#/components/parameters/isLive\"\n        - $ref: \"#/components/parameters/tagsOneOf\"\n        - $ref: \"#/components/parameters/tagsAllOf\"\n        - $ref: \"#/components/parameters/licenceOneOf\"\n        - $ref: \"#/components/parameters/languageOneOf\"\n        - $ref: \"#/components/parameters/nsfw\"\n        - $ref: \"#/components/parameters/filter\"\n        - $ref: \"#/components/parameters/skipCount\"\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/count\"\n        - $ref: \"#/components/parameters/videosSort\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VideoListResponse\"\n          description: successful operation\n      summary: List videos of a video channel\n      tags:\n        - Video\n        - Video Channels\n  /video-playlists:\n    get:\n      operationId: getPlaylists\n      parameters:\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/count\"\n        - $ref: \"#/components/parameters/sort\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  data:\n                    items:\n                      $ref: \"#/components/schemas/VideoPlaylist\"\n                    type: array\n                  total:\n                    example: 1\n                    type: integer\n                type: object\n          description: successful operation\n      summary: List video playlists\n      tags:\n        - Video Playlists\n    post:\n      description: If the video playlist is set as public, `videoChannelId` is mandatory.\n      operationId: addPlaylist\n      requestBody:\n        content:\n          multipart/form-data:\n            encoding:\n              thumbnailfile:\n                contentType: image/jpeg\n            schema:\n              properties:\n                description:\n                  description: Video playlist description\n                  maxLength: 1000\n                  minLength: 3\n                  type: string\n                displayName:\n                  description: Video playlist display name\n                  maxLength: 120\n                  minLength: 1\n                  type: string\n                privacy:\n                  $ref: \"#/components/schemas/VideoPlaylistPrivacySet\"\n                thumbnailfile:\n                  description: Video playlist thumbnail file\n                  format: binary\n                  type: string\n                videoChannelId:\n                  allOf:\n                    - $ref: \"#/components/schemas/id\"\n                  description: Video channel in which the playlist will be published\n              required:\n                - displayName\n              type: object\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  videoPlaylist:\n                    properties:\n                      id:\n                        $ref: \"#/components/schemas/VideoPlaylist/properties/id\"\n                      shortUUID:\n                        $ref: \"#/components/schemas/VideoPlaylist/properties/shortUUID\"\n                      uuid:\n                        $ref: \"#/components/schemas/VideoPlaylist/properties/uuid\"\n                    type: object\n                type: object\n          description: successful operation\n      security:\n        - OAuth2: []\n      summary: Create a video playlist\n      tags:\n        - Video Playlists\n  /video-playlists/privacies:\n    get:\n      operationId: getPlaylistPrivacyPolicies\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                nightly:\n                  externalValue: https://peertube2.cpy.re/api/v1/video-playlists/privacies\n              schema:\n                items:\n                  type: string\n                type: array\n          description: successful operation\n      summary: List available playlist privacy policies\n      tags:\n        - Video Playlists\n  \"/video-playlists/{playlistId}\":\n    delete:\n      parameters:\n        - $ref: \"#/components/parameters/playlistId\"\n      responses:\n        \"204\":\n          description: successful operation\n      security:\n        - OAuth2: []\n      summary: Delete a video playlist\n      tags:\n        - Video Playlists\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/playlistId\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VideoPlaylist\"\n          description: successful operation\n      summary: Get a video playlist\n      tags:\n        - Video Playlists\n    put:\n      description: If the video playlist is set as public, the playlist must have a assigned channel.\n      parameters:\n        - $ref: \"#/components/parameters/playlistId\"\n      requestBody:\n        content:\n          multipart/form-data:\n            encoding:\n              thumbnailfile:\n                contentType: image/jpeg\n            schema:\n              properties:\n                description:\n                  description: Video playlist description\n                  type: string\n                displayName:\n                  description: Video playlist display name\n                  maxLength: 120\n                  minLength: 1\n                  type: string\n                privacy:\n                  $ref: \"#/components/schemas/VideoPlaylistPrivacySet\"\n                thumbnailfile:\n                  description: Video playlist thumbnail file\n                  format: binary\n                  type: string\n                videoChannelId:\n                  allOf:\n                    - $ref: \"#/components/schemas/id\"\n                  description: Video channel in which the playlist will be published\n              type: object\n      responses:\n        \"204\":\n          description: successful operation\n      security:\n        - OAuth2: []\n      summary: Update a video playlist\n      tags:\n        - Video Playlists\n  \"/video-playlists/{playlistId}/videos\":\n    get:\n      operationId: getVideoPlaylistVideos\n      parameters:\n        - $ref: \"#/components/parameters/playlistId\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VideoListResponse\"\n          description: successful operation\n      summary: List videos of a playlist\n      tags:\n        - Videos\n        - Video Playlists\n    post:\n      operationId: addVideoPlaylistVideo\n      parameters:\n        - $ref: \"#/components/parameters/playlistId\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                startTimestamp:\n                  description: Start the video at this specific timestamp\n                  format: seconds\n                  type: integer\n                stopTimestamp:\n                  description: Stop the video at this specific timestamp\n                  format: seconds\n                  type: integer\n                videoId:\n                  description: Video to add in the playlist\n                  oneOf:\n                    - $ref: \"#/components/schemas/Video/properties/uuid\"\n                    - $ref: \"#/components/schemas/Video/properties/id\"\n              required:\n                - videoId\n              type: object\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  videoPlaylistElement:\n                    properties:\n                      id:\n                        example: 2\n                        type: integer\n                    type: object\n                type: object\n          description: successful operation\n      security:\n        - OAuth2: []\n      summary: Add a video in a playlist\n      tags:\n        - Videos\n        - Video Playlists\n  \"/video-playlists/{playlistId}/videos/reorder\":\n    post:\n      operationId: reorderVideoPlaylist\n      parameters:\n        - $ref: \"#/components/parameters/playlistId\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                insertAfterPosition:\n                  description: New position for the block to reorder, to add the block before the first element\n                  minimum: 0\n                  type: integer\n                reorderLength:\n                  description: How many element from `startPosition` to reorder\n                  minimum: 1\n                  type: integer\n                startPosition:\n                  description: Start position of the element to reorder\n                  minimum: 1\n                  type: integer\n              required:\n                - startPosition\n                - insertAfterPosition\n              type: object\n      responses:\n        \"204\":\n          description: successful operation\n      security:\n        - OAuth2: []\n      summary: Reorder a playlist\n      tags:\n        - Video Playlists\n  \"/video-playlists/{playlistId}/videos/{playlistElementId}\":\n    delete:\n      operationId: delVideoPlaylistVideo\n      parameters:\n        - $ref: \"#/components/parameters/playlistId\"\n        - $ref: \"#/components/parameters/playlistElementId\"\n      responses:\n        \"204\":\n          description: successful operation\n      security:\n        - OAuth2: []\n      summary: Delete an element from a playlist\n      tags:\n        - Video Playlists\n    put:\n      operationId: putVideoPlaylistVideo\n      parameters:\n        - $ref: \"#/components/parameters/playlistId\"\n        - $ref: \"#/components/parameters/playlistElementId\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                startTimestamp:\n                  description: Start the video at this specific timestamp\n                  format: seconds\n                  type: integer\n                stopTimestamp:\n                  description: Stop the video at this specific timestamp\n                  format: seconds\n                  type: integer\n              type: object\n      responses:\n        \"204\":\n          description: successful operation\n      security:\n        - OAuth2: []\n      summary: Update a playlist element\n      tags:\n        - Video Playlists\n  /videos:\n    get:\n      operationId: getVideos\n      parameters:\n        - $ref: \"#/components/parameters/categoryOneOf\"\n        - $ref: \"#/components/parameters/isLive\"\n        - $ref: \"#/components/parameters/tagsOneOf\"\n        - $ref: \"#/components/parameters/tagsAllOf\"\n        - $ref: \"#/components/parameters/licenceOneOf\"\n        - $ref: \"#/components/parameters/languageOneOf\"\n        - $ref: \"#/components/parameters/nsfw\"\n        - $ref: \"#/components/parameters/filter\"\n        - $ref: \"#/components/parameters/skipCount\"\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/count\"\n        - $ref: \"#/components/parameters/videosSort\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VideoListResponse\"\n          description: successful operation\n      summary: List videos\n      tags:\n        - Video\n  /videos/blacklist:\n    get:\n      operationId: getVideoBlocks\n      parameters:\n        - description: |\n            list only blocks that match this type:\n            - `1`: manual block\n            - `2`: automatic block that needs review\n          in: query\n          name: type\n          schema:\n            enum:\n              - 1\n              - 2\n            type: integer\n        - description: plain search that will match with video titles, and more\n          in: query\n          name: search\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/count\"\n        - $ref: \"#/components/parameters/blacklistsSort\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  data:\n                    items:\n                      $ref: \"#/components/schemas/VideoBlacklist\"\n                    type: array\n                  total:\n                    example: 1\n                    type: integer\n                type: object\n          description: successful operation\n      security:\n        - OAuth2:\n            - admin\n            - moderator\n      summary: List video blocks\n      tags:\n        - Video Blocks\n  /videos/categories:\n    get:\n      operationId: getCategories\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                nightly:\n                  externalValue: https://peertube2.cpy.re/api/v1/videos/categories\n              schema:\n                items:\n                  type: string\n                type: array\n          description: successful operation\n      summary: List available video categories\n      tags:\n        - Video\n  /videos/imports:\n    post:\n      description: Import a torrent or magnetURI or HTTP resource (if enabled by the instance administrator)\n      operationId: importVideo\n      requestBody:\n        content:\n          multipart/form-data:\n            encoding:\n              previewfile:\n                contentType: image/jpeg\n              thumbnailfile:\n                contentType: image/jpeg\n              torrentfile:\n                contentType: application/x-bittorrent\n            schema:\n              $ref: \"#/components/schemas/VideoCreateImport\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VideoUploadResponse\"\n          description: successful operation\n        \"400\":\n          description: \"`magnetUri` or `targetUrl` or a torrent file missing\"\n        \"403\":\n          description: video didn't pass pre-import filter\n        \"409\":\n          description: HTTP or Torrent/magnetURI import not enabled\n      security:\n        - OAuth2: []\n      summary: Import a video\n      tags:\n        - Video\n        - Video Upload\n  /videos/languages:\n    get:\n      operationId: getLanguages\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                nightly:\n                  externalValue: https://peertube2.cpy.re/api/v1/videos/languages\n              schema:\n                items:\n                  type: string\n                type: array\n          description: successful operation\n      summary: List available video languages\n      tags:\n        - Video\n  /videos/licences:\n    get:\n      operationId: getLicences\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                nightly:\n                  externalValue: https://peertube2.cpy.re/api/v1/videos/licences\n              schema:\n                items:\n                  type: string\n                type: array\n          description: successful operation\n      summary: List available video licences\n      tags:\n        - Video\n  /videos/live:\n    post:\n      operationId: addLive\n      requestBody:\n        content:\n          multipart/form-data:\n            encoding:\n              previewfile:\n                contentType: image/jpeg\n              thumbnailfile:\n                contentType: image/jpeg\n            schema:\n              properties:\n                category:\n                  $ref: \"#/components/schemas/VideoCategorySet\"\n                channelId:\n                  description: Channel id that will contain this live video\n                  type: integer\n                commentsEnabled:\n                  description: Enable or disable comments for this live video/replay\n                  type: boolean\n                description:\n                  description: Live video/replay description\n                  type: string\n                downloadEnabled:\n                  description: Enable or disable downloading for the replay of this live video\n                  type: boolean\n                language:\n                  $ref: \"#/components/schemas/VideoLanguageSet\"\n                licence:\n                  $ref: \"#/components/schemas/VideoLicenceSet\"\n                name:\n                  description: Live video/replay name\n                  maxLength: 120\n                  minLength: 3\n                  type: string\n                nsfw:\n                  description: Whether or not this live video/replay contains sensitive content\n                  type: boolean\n                permanentLive:\n                  description: User can stream multiple times in a permanent live\n                  type: boolean\n                previewfile:\n                  description: Live video/replay preview file\n                  format: binary\n                  type: string\n                privacy:\n                  $ref: \"#/components/schemas/VideoPrivacySet\"\n                saveReplay:\n                  type: boolean\n                support:\n                  description: A text tell the audience how to support the creator\n                  example: Please support our work on https://soutenir.framasoft.org/en/ \u003c3\n                  type: string\n                tags:\n                  description: Live video/replay tags (maximum 5 tags each between 2 and 30 characters)\n                  items:\n                    maxLength: 30\n                    minLength: 2\n                    type: string\n                  maxItems: 5\n                  minItems: 1\n                  type: array\n                thumbnailfile:\n                  description: Live video/replay thumbnail file\n                  format: binary\n                  type: string\n              required:\n                - channelId\n                - name\n              type: object\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VideoUploadResponse\"\n          description: successful operation\n        \"400\":\n          description: |\n            Disambiguate via `type`:\n            - default type for a validation error\n            - `live_conflicting_permanent_and_save_replay` for conflicting parameters set\n          x-summary: validation error, or conflicting `saveReplay` and `permanentLive` parameter set\n        \"403\":\n          description: |\n            Disambiguate via `type`:\n            - `live_not_enabled` for a disabled live feature\n            - `live_not_allowing_replay` for a disabled replay feature\n            - `max_instance_lives_limit_reached` for the absolute concurrent live limit\n            - `max_user_lives_limit_reached` for the user concurrent live limit\n          x-summary: live is not enabled, allow replay is not enabled, or max instance/user live videos limit is exceeded\n      security:\n        - OAuth2: []\n      summary: Create a live\n      tags:\n        - Live Videos\n        - Video\n  \"/videos/live/{id}\":\n    get:\n      operationId: getLiveId\n      parameters:\n        - $ref: \"#/components/parameters/idOrUUID\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LiveVideoResponse\"\n          description: successful operation\n      security:\n        - OAuth2: []\n      summary: Get information about a live\n      tags:\n        - Live Videos\n        - Video\n    put:\n      operationId: updateLiveId\n      parameters:\n        - $ref: \"#/components/parameters/idOrUUID\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/LiveVideoUpdate\"\n      responses:\n        \"204\":\n          description: successful operation\n        \"400\":\n          description: bad parameters or trying to update a live that has already started\n        \"403\":\n          description: trying to save replay of the live but saving replay is not enabled on the instance\n      security:\n        - OAuth2: []\n      summary: Update information about a live\n      tags:\n        - Live Videos\n        - Video\n  /videos/ownership:\n    get:\n      responses:\n        \"200\":\n          description: successful operation\n      security:\n        - OAuth2: []\n      summary: List video ownership changes\n      tags:\n        - Video Ownership Change\n  \"/videos/ownership/{id}/accept\":\n    post:\n      parameters:\n        - $ref: \"#/components/parameters/idOrUUID\"\n      responses:\n        \"204\":\n          description: successful operation\n        \"403\":\n          description: cannot terminate an ownership change of another user\n        \"404\":\n          description: video owneship change not found\n      security:\n        - OAuth2: []\n      summary: Accept ownership change request\n      tags:\n        - Video Ownership Change\n  \"/videos/ownership/{id}/refuse\":\n    post:\n      parameters:\n        - $ref: \"#/components/parameters/idOrUUID\"\n      responses:\n        \"204\":\n          description: successful operation\n        \"403\":\n          description: cannot terminate an ownership change of another user\n        \"404\":\n          description: video owneship change not found\n      security:\n        - OAuth2: []\n      summary: Refuse ownership change request\n      tags:\n        - Video Ownership Change\n  /videos/privacies:\n    get:\n      operationId: getPrivacyPolicies\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                nightly:\n                  externalValue: https://peertube2.cpy.re/api/v1/videos/privacies\n              schema:\n                items:\n                  type: string\n                type: array\n          description: successful operation\n      summary: List available video privacy policies\n      tags:\n        - Video\n  /videos/upload:\n    post:\n      description: Uses a single request to upload a video.\n      operationId: uploadLegacy\n      requestBody:\n        content:\n          multipart/form-data:\n            encoding:\n              previewfile:\n                contentType: image/jpeg\n              thumbnailfile:\n                contentType: image/jpeg\n              videofile:\n                contentType: video/mp4, video/webm, video/ogg, video/avi, video/quicktime, video/x-msvideo, video/x-flv, video/x-matroska, application/octet-stream\n            schema:\n              $ref: \"#/components/schemas/VideoUploadRequestLegacy\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VideoUploadResponse\"\n          description: successful operation\n        \"403\":\n          description: video didn't pass upload filter\n        \"408\":\n          description: upload has timed out\n        \"413\":\n          description: |\n            If the response has no body, it means the reverse-proxy didn't let it through. Otherwise disambiguate via `type`:\n            - `quota_reached` for quota limits wether daily or global\n          headers:\n            X-File-Maximum-Size:\n              description: Maximum file size for the video\n              schema:\n                format: Nginx size\n                type: string\n          x-summary: video file too large, due to quota or max body size limit set by the reverse-proxy\n        \"415\":\n          description: video type unsupported\n        \"422\":\n          description: video unreadable\n      security:\n        - OAuth2: []\n      summary: Upload a video\n      tags:\n        - Video\n        - Video Upload\n      x-codeSamples:\n        - lang: Shell\n          source: |\n            ## DEPENDENCIES: jq\n            USERNAME=\"\u003cyour_username\u003e\"\n            PASSWORD=\"\u003cyour_password\u003e\"\n            FILE_PATH=\"\u003cyour_file_path\u003e\"\n            CHANNEL_ID=\"\u003cyour_channel_id\u003e\"\n            NAME=\"\u003cvideo_name\u003e\"\n            API=\"https://peertube2.cpy.re/api/v1\"\n\n            ## AUTH\n            client_id=$(curl -s \"$API/oauth-clients/local\" | jq -r \".client_id\")\n            client_secret=$(curl -s \"$API/oauth-clients/local\" | jq -r \".client_secret\")\n            token=$(curl -s \"$API/users/token\" \\\n              --data client_id=\"$client_id\" \\\n              --data client_secret=\"$client_secret\" \\\n              --data grant_type=password \\\n              --data username=\"$USERNAME\" \\\n              --data password=\"$PASSWORD\" \\\n              | jq -r \".access_token\")\n\n            ## VIDEO UPLOAD\n            curl -s \"$API/videos/upload\" \\\n              -H \"Authorization: Bearer $token\" \\\n              --max-time 600 \\\n              --form videofile=@\"$FILE_PATH\" \\\n              --form channelId=$CHANNEL_ID \\\n              --form name=\"$NAME\"\n  /videos/upload-resumable:\n    delete:\n      description: Uses [a resumable protocol](https://github.com/kukhariev/node-uploadx/blob/master/proto.md) to cancel the upload of a video\n      operationId: uploadResumableCancel\n      parameters:\n        - description: |\n            Created session id to proceed with. If you didn't send chunks in the last 12 hours, it is\n            not valid anymore and the upload session has already been deleted with its data ;-)\n          in: query\n          name: upload_id\n          required: true\n          schema:\n            type: string\n        - in: header\n          name: Content-Length\n          required: true\n          schema:\n            example: 0\n            type: number\n      responses:\n        \"204\":\n          description: upload cancelled\n          headers:\n            Content-Length:\n              schema:\n                example: 0\n                type: number\n        \"404\":\n          description: upload not found\n      security:\n        - OAuth2: []\n      summary: Cancel the resumable upload of a video, deleting any data uploaded so far\n      tags:\n        - Video\n        - Video Upload\n    post:\n      description: Uses [a resumable protocol](https://github.com/kukhariev/node-uploadx/blob/master/proto.md) to initialize the upload of a video\n      operationId: uploadResumableInit\n      parameters:\n        - description: Number of bytes that will be uploaded in subsequent requests. Set this value to the size of the file you are uploading.\n          in: header\n          name: X-Upload-Content-Length\n          required: true\n          schema:\n            example: 2469036\n            type: number\n        - description: MIME type of the file that you are uploading. Depending on your instance settings, acceptable values might vary.\n          in: header\n          name: X-Upload-Content-Type\n          required: true\n          schema:\n            example: video/mp4\n            format: mimetype\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/VideoUploadRequestResumable\"\n      responses:\n        \"200\":\n          description: file already exists, send a [`resume`](https://github.com/kukhariev/node-uploadx/blob/master/proto.md) request instead\n        \"201\":\n          description: created\n          headers:\n            Content-Length:\n              schema:\n                example: 0\n                type: number\n            Location:\n              schema:\n                example: /api/v1/videos/upload-resumable?upload_id=471e97554f21dec3b8bb5d4602939c51\n                format: url\n                type: string\n        \"413\":\n          description: |\n            Disambiguate via `type`:\n            - `max_file_size_reached` for the absolute file size limit\n            - `quota_reached` for quota limits whether daily or global\n          x-summary: video file too large, due to quota, absolute max file size or concurrent partial upload limit\n        \"415\":\n          description: video type unsupported\n      security:\n        - OAuth2: []\n      summary: Initialize the resumable upload of a video\n      tags:\n        - Video\n        - Video Upload\n    put:\n      description: Uses [a resumable protocol](https://github.com/kukhariev/node-uploadx/blob/master/proto.md) to continue, pause or resume the upload of a video\n      operationId: uploadResumable\n      parameters:\n        - description: |\n            Created session id to proceed with. If you didn't send chunks in the last 12 hours, it is\n            not valid anymore and you need to initialize a new upload.\n          in: query\n          name: upload_id\n          required: true\n          schema:\n            type: string\n        - description: |\n            Specifies the bytes in the file that the request is uploading.\n\n            For example, a value of `bytes 0-262143/1000000` shows that the request is sending the first\n            262144 bytes (256 x 1024) in a 2,469,036 byte file.\n          in: header\n          name: Content-Range\n          required: true\n          schema:\n            example: bytes 0-262143/2469036\n            type: string\n        - description: |\n            Size of the chunk that the request is sending.\n\n            The chunk size __must be a multiple of 256 KB__, and unlike [Google Resumable](https://developers.google.com/youtube/v3/guides/using_resumable_upload_protocol)\n            doesn't mandate for chunks to have the same size throughout the upload sequence.\n\n            Remember that larger chunks are more efficient. PeerTube's web client uses chunks varying from\n            1048576 bytes (~1MB) and increases or reduces size depending on connection health.\n          in: header\n          name: Content-Length\n          required: true\n          schema:\n            example: 262144\n            type: number\n      requestBody:\n        content:\n          application/octet-stream:\n            schema:\n              format: binary\n              type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VideoUploadResponse\"\n          description: last chunk received\n          headers:\n            Content-Length:\n              schema:\n                type: number\n        \"308\":\n          description: resume incomplete\n          headers:\n            Content-Length:\n              schema:\n                example: 0\n                type: number\n            Range:\n              schema:\n                example: bytes=0-262143\n                type: string\n        \"403\":\n          description: video didn't pass upload filter\n        \"404\":\n          description: upload not found\n        \"409\":\n          description: chunk doesn't match range\n        \"422\":\n          description: video unreadable\n        \"429\":\n          description: too many concurrent requests\n      security:\n        - OAuth2: []\n      summary: Send chunk for the resumable upload of a video\n      tags:\n        - Video\n        - Video Upload\n  \"/videos/{id}\":\n    delete:\n      operationId: delVideo\n      parameters:\n        - $ref: \"#/components/parameters/idOrUUID\"\n      responses:\n        \"204\":\n          description: successful operation\n      security:\n        - OAuth2: []\n      summary: Delete a video\n      tags:\n        - Video\n    get:\n      operationId: getVideo\n      parameters:\n        - $ref: \"#/components/parameters/idOrUUID\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VideoDetails\"\n          description: successful operation\n      summary: Get a video\n      tags:\n        - Video\n    put:\n      operationId: putVideo\n      parameters:\n        - $ref: \"#/components/parameters/idOrUUID\"\n      requestBody:\n        content:\n          multipart/form-data:\n            encoding:\n              previewfile:\n                contentType: image/jpeg\n              thumbnailfile:\n                contentType: image/jpeg\n            schema:\n              properties:\n                category:\n                  $ref: \"#/components/schemas/VideoCategorySet\"\n                commentsEnabled:\n                  description: Enable or disable comments for this video\n                  type: boolean\n                description:\n                  description: Video description\n                  type: string\n                downloadEnabled:\n                  description: Enable or disable downloading for this video\n                  type: boolean\n                language:\n                  $ref: \"#/components/schemas/VideoLanguageSet\"\n                licence:\n                  $ref: \"#/components/schemas/VideoLicenceSet\"\n                name:\n                  description: Video name\n                  maxLength: 120\n                  minLength: 3\n                  type: string\n                nsfw:\n                  description: Whether or not this video contains sensitive content\n                  type: boolean\n                originallyPublishedAt:\n                  description: Date when the content was originally published\n                  format: date-time\n                  type: string\n                previewfile:\n                  description: Video preview file\n                  format: binary\n                  type: string\n                privacy:\n                  $ref: \"#/components/schemas/VideoPrivacySet\"\n                scheduleUpdate:\n                  $ref: \"#/components/schemas/VideoScheduledUpdate\"\n                support:\n                  description: A text tell the audience how to support the video creator\n                  example: Please support our work on https://soutenir.framasoft.org/en/ \u003c3\n                  type: string\n                tags:\n                  description: Video tags (maximum 5 tags each between 2 and 30 characters)\n                  items:\n                    maxLength: 30\n                    minLength: 2\n                    type: string\n                  maxItems: 5\n                  minItems: 1\n                  type: array\n                thumbnailfile:\n                  description: Video thumbnail file\n                  format: binary\n                  type: string\n                waitTranscoding:\n                  description: Whether or not we wait transcoding before publish the video\n                  type: string\n              type: object\n      responses:\n        \"204\":\n          description: successful operation\n      security:\n        - OAuth2: []\n      summary: Update a video\n      tags:\n        - Video\n  \"/videos/{id}/blacklist\":\n    delete:\n      operationId: delVideoBlock\n      parameters:\n        - $ref: \"#/components/parameters/idOrUUID\"\n      responses:\n        \"204\":\n          description: successful operation\n        \"404\":\n          description: block not found\n      security:\n        - OAuth2:\n            - admin\n            - moderator\n      summary: Unblock a video by its id\n      tags:\n        - Video Blocks\n    post:\n      operationId: addVideoBlock\n      parameters:\n        - $ref: \"#/components/parameters/idOrUUID\"\n      responses:\n        \"204\":\n          description: successful operation\n      security:\n        - OAuth2:\n            - admin\n            - moderator\n      summary: Block a video\n      tags:\n        - Video Blocks\n  \"/videos/{id}/captions\":\n    get:\n      operationId: getVideoCaptions\n      parameters:\n        - $ref: \"#/components/parameters/idOrUUID\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  data:\n                    items:\n                      $ref: \"#/components/schemas/VideoCaption\"\n                    type: array\n                  total:\n                    example: 1\n                    type: integer\n                type: object\n          description: successful operation\n      summary: List captions of a video\n      tags:\n        - Video Captions\n  \"/videos/{id}/captions/{captionLanguage}\":\n    delete:\n      operationId: delVideoCaption\n      parameters:\n        - $ref: \"#/components/parameters/idOrUUID\"\n        - $ref: \"#/components/parameters/captionLanguage\"\n      responses:\n        \"204\":\n          description: successful operation\n        \"404\":\n          description: video or language or caption for that language not found\n      security:\n        - OAuth2:\n            - user\n      summary: Delete a video caption\n      tags:\n        - Video Captions\n    put:\n      operationId: addVideoCaption\n      parameters:\n        - $ref: \"#/components/parameters/idOrUUID\"\n        - $ref: \"#/components/parameters/captionLanguage\"\n      requestBody:\n        content:\n          multipart/form-data:\n            encoding:\n              captionfile:\n                contentType: text/vtt, application/x-subrip, text/plain\n            schema:\n              properties:\n                captionfile:\n                  description: The file to upload.\n                  format: binary\n                  type: string\n              type: object\n      responses:\n        \"204\":\n          description: successful operation\n        \"404\":\n          description: video or language not found\n      security:\n        - OAuth2:\n            - user\n      summary: Add or replace a video caption\n      tags:\n        - Video Captions\n  \"/videos/{id}/comment-threads\":\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/idOrUUID\"\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/count\"\n        - $ref: \"#/components/parameters/commentsSort\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CommentThreadResponse\"\n          description: successful operation\n      summary: List threads of a video\n      tags:\n        - Video Comments\n    post:\n      parameters:\n        - $ref: \"#/components/parameters/idOrUUID\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                text:\n                  allOf:\n                    - $ref: \"#/components/schemas/VideoComment/properties/text\"\n                  format: markdown\n                  maxLength: 10000\n              required:\n                - text\n              type: object\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CommentThreadPostResponse\"\n          description: successful operation\n        \"404\":\n          description: video does not exist\n      security:\n        - OAuth2: []\n      summary: Create a thread\n      tags:\n        - Video Comments\n  \"/videos/{id}/comment-threads/{threadId}\":\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/idOrUUID\"\n        - $ref: \"#/components/parameters/threadId\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VideoCommentThreadTree\"\n          description: successful operation\n      summary: Get a thread\n      tags:\n        - Video Comments\n  \"/videos/{id}/comments/{commentId}\":\n    delete:\n      parameters:\n        - $ref: \"#/components/parameters/idOrUUID\"\n        - $ref: \"#/components/parameters/commentId\"\n      responses:\n        \"204\":\n          description: successful operation\n        \"403\":\n          description: cannot remove comment of another user\n        \"404\":\n          description: comment or video does not exist\n        \"409\":\n          description: comment is already deleted\n      security:\n        - OAuth2: []\n      summary: Delete a comment or a reply\n      tags:\n        - Video Comments\n    post:\n      parameters:\n        - $ref: \"#/components/parameters/idOrUUID\"\n        - $ref: \"#/components/parameters/commentId\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                text:\n                  allOf:\n                    - $ref: \"#/components/schemas/VideoComment/properties/text\"\n                  format: markdown\n                  maxLength: 10000\n              required:\n                - text\n              type: object\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CommentThreadPostResponse\"\n          description: successful operation\n        \"404\":\n          description: thread or video does not exist\n      security:\n        - OAuth2: []\n      summary: Reply to a thread of a video\n      tags:\n        - Video Comments\n  \"/videos/{id}/description\":\n    get:\n      operationId: getVideoDesc\n      parameters:\n        - $ref: \"#/components/parameters/idOrUUID\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                example: |\n                  **[Want to help to translate this video?](https://weblate.framasoft.org/projects/what-is-peertube-video/)**\\r\\n\\r\\n**Take back the control of your videos! [#JoinPeertube](https://joinpeertube.org)**\n                maxLength: 10000\n                minLength: 3\n                nullable: true\n                type: string\n          description: successful operation\n      summary: Get complete video description\n      tags:\n        - Video\n  \"/videos/{id}/give-ownership\":\n    post:\n      parameters:\n        - $ref: \"#/components/parameters/idOrUUID\"\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                username:\n                  type: string\n              required:\n                - username\n              type: object\n        required: true\n      responses:\n        \"204\":\n          description: successful operation\n        \"400\":\n          description: changing video ownership to a remote account is not supported yet\n        \"404\":\n          description: video not found\n      security:\n        - OAuth2: []\n      summary: Request ownership change\n      tags:\n        - Video Ownership Change\n  \"/videos/{id}/rate\":\n    put:\n      parameters:\n        - $ref: \"#/components/parameters/idOrUUID\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                rating:\n                  enum:\n                    - like\n                    - dislike\n                  type: string\n              required:\n                - rating\n              type: object\n      responses:\n        \"204\":\n          description: successful operation\n        \"404\":\n          description: video does not exist\n      security:\n        - OAuth2: []\n      summary: Like/dislike a video\n      tags:\n        - Video Rates\n  \"/videos/{id}/views\":\n    post:\n      operationId: addView\n      parameters:\n        - $ref: \"#/components/parameters/idOrUUID\"\n      responses:\n        \"204\":\n          description: successful operation\n      summary: Add a view to a video\n      tags:\n        - Video\n  \"/videos/{id}/watching\":\n    put:\n      operationId: setProgress\n      parameters:\n        - $ref: \"#/components/parameters/idOrUUID\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UserWatchingVideo\"\n        required: true\n      responses:\n        \"204\":\n          description: successful operation\n      security:\n        - OAuth2: []\n      summary: Set watching progress of a video\n      tags:\n        - Video\ncomponents:\n  callbacks:\n    searchIndex:\n      https://search.example.org/api/v1/search/videos:\n        post:\n          responses:\n            \"200\":\n              content:\n                application/json:\n                  schema:\n                    $ref: \"#/components/schemas/VideoListResponse\"\n              description: successful operation\n          summary: third-party search index MAY be used instead of the local index, if enabled by the instance admin. see `searchTarget`\n  parameters:\n    abuseId:\n      description: Abuse id\n      in: path\n      name: abuseId\n      required: true\n      schema:\n        $ref: \"#/components/schemas/Abuse/properties/id\"\n    abuseMessageId:\n      description: Abuse message id\n      in: path\n      name: abuseMessageId\n      required: true\n      schema:\n        $ref: \"#/components/schemas/AbuseMessage/properties/id\"\n    abusesSort:\n      description: Sort abuses by criteria\n      in: query\n      name: sort\n      required: false\n      schema:\n        enum:\n          - -id\n          - -createdAt\n          - -state\n        type: string\n    actorType:\n      in: query\n      name: actorType\n      schema:\n        enum:\n          - Person\n          - Application\n          - Group\n          - Service\n          - Organization\n        type: string\n    blacklistsSort:\n      description: Sort blocklists by criteria\n      in: query\n      name: sort\n      required: false\n      schema:\n        enum:\n          - -id\n          - name\n          - -duration\n          - -views\n          - -likes\n          - -dislikes\n          - -uuid\n          - -createdAt\n        type: string\n    captionLanguage:\n      description: The caption language\n      in: path\n      name: captionLanguage\n      required: true\n      schema:\n        $ref: \"#/components/schemas/VideoLanguageSet\"\n    categoryOneOf:\n      description: category id of the video (see [/videos/categories](#operation/getCategories))\n      explode: false\n      in: query\n      name: categoryOneOf\n      required: false\n      schema:\n        oneOf:\n          - $ref: \"#/components/schemas/VideoCategorySet\"\n          - items:\n              $ref: \"#/components/schemas/VideoCategorySet\"\n            type: array\n      style: form\n    channelHandle:\n      description: The video channel handle\n      in: path\n      name: channelHandle\n      required: true\n      schema:\n        example: my_username | my_username@example.com\n        type: string\n    commentId:\n      description: The comment id\n      in: path\n      name: commentId\n      required: true\n      schema:\n        $ref: \"#/components/schemas/VideoComment/properties/id\"\n    commentsSort:\n      description: Sort comments by criteria\n      in: query\n      name: sort\n      required: false\n      schema:\n        enum:\n          - -createdAt\n          - -totalReplies\n        type: string\n    count:\n      description: Number of items to return\n      in: query\n      name: count\n      required: false\n      schema:\n        default: 15\n        maximum: 100\n        minimum: 1\n        type: integer\n    filter:\n      description: |\n        Special filters which might require special rights:\n         * `local` - only videos local to the instance\n         * `all-local` - only videos local to the instance, but showing private and unlisted videos (requires Admin privileges)\n         * `all` - all videos, showing private and unlisted videos (requires Admin privileges)\n      in: query\n      name: filter\n      required: false\n      schema:\n        enum:\n          - local\n          - all-local\n        type: string\n    followState:\n      in: query\n      name: state\n      schema:\n        enum:\n          - pending\n          - accepted\n        type: string\n    id:\n      description: The user id\n      in: path\n      name: id\n      required: true\n      schema:\n        $ref: \"#/components/schemas/id\"\n    idOrUUID:\n      description: The object id, uuid or short uuid\n      in: path\n      name: id\n      required: true\n      schema:\n        oneOf:\n          - $ref: \"#/components/schemas/id\"\n          - $ref: \"#/components/schemas/UUIDv4\"\n          - $ref: \"#/components/schemas/shortUUID\"\n    isLive:\n      description: whether or not the video is a live\n      in: query\n      name: isLive\n      required: false\n      schema:\n        type: boolean\n    jobType:\n      description: job type\n      in: query\n      name: jobType\n      required: false\n      schema:\n        enum:\n          - activitypub-follow\n          - activitypub-http-broadcast\n          - activitypub-http-fetcher\n          - activitypub-http-unicast\n          - email\n          - video-transcoding\n          - video-file-import\n          - video-import\n          - videos-views\n          - activitypub-refresher\n          - video-redundancy\n          - video-live-ending\n        type: string\n    languageOneOf:\n      description: language id of the video (see [/videos/languages](#operation/getLanguages)). Use `_unknown` to filter on videos that don't have a video language\n      explode: false\n      in: query\n      name: languageOneOf\n      required: false\n      schema:\n        oneOf:\n          - $ref: \"#/components/schemas/VideoLanguageSet\"\n          - items:\n              $ref: \"#/components/schemas/VideoLanguageSet\"\n            type: array\n      style: form\n    licenceOneOf:\n      description: licence id of the video (see [/videos/licences](#operation/getLicences))\n      explode: false\n      in: query\n      name: licenceOneOf\n      required: false\n      schema:\n        oneOf:\n          - $ref: \"#/components/schemas/VideoLicenceSet\"\n          - items:\n              $ref: \"#/components/schemas/VideoLicenceSet\"\n            type: array\n      style: form\n    name:\n      description: The username or handle of the account\n      in: path\n      name: name\n      required: true\n      schema:\n        example: chocobozzz | chocobozzz@example.org\n        type: string\n    npmName:\n      description: name of the plugin/theme on npmjs.com or in its package.json\n      in: path\n      name: npmName\n      required: true\n      schema:\n        example: peertube-plugin-auth-ldap\n        type: string\n    nsfw:\n      description: whether to include nsfw videos, if any\n      in: query\n      name: nsfw\n      required: false\n      schema:\n        enum:\n          - \"true\"\n          - \"false\"\n        type: string\n    playlistElementId:\n      description: Playlist element id\n      in: path\n      name: playlistElementId\n      required: true\n      schema:\n        $ref: \"#/components/schemas/id\"\n    playlistId:\n      description: Playlist id\n      in: path\n      name: playlistId\n      required: true\n      schema:\n        $ref: \"#/components/schemas/VideoPlaylist/properties/id\"\n    search:\n      description: Plain text search, applied to various parts of the model depending on endpoint\n      in: query\n      name: search\n      required: false\n      schema:\n        type: string\n    searchTarget:\n      description: |\n        If the administrator enabled search index support, you can override the default search target.\n\n        **Warning**: If you choose to make an index search, PeerTube will get results from a third party service. It means the instance may not yet know the objects you fetched. If you want to load video/channel information:\n          * If the current user has the ability to make a remote URI search (this information is available in the config endpoint),\n          then reuse the search API to make a search using the object URI so PeerTube instance fetches the remote object and fill its database.\n          After that, you can use the classic REST API endpoints to fetch the complete object or interact with it\n          * If the current user doesn't have the ability to make a remote URI search, then redirect the user on the origin instance or fetch\n          the data from the origin instance API\n      in: query\n      name: searchTarget\n      required: false\n      schema:\n        enum:\n          - local\n          - search-index\n        type: string\n    skipCount:\n      description: if you don't need the `total` in the response\n      in: query\n      name: skipCount\n      required: false\n      schema:\n        default: \"false\"\n        enum:\n          - \"true\"\n          - \"false\"\n        type: string\n    sort:\n      description: Sort column\n      in: query\n      name: sort\n      required: false\n      schema:\n        example: -createdAt\n        type: string\n    start:\n      description: Offset used to paginate results\n      in: query\n      name: start\n      required: false\n      schema:\n        minimum: 0\n        type: integer\n    subscriptionHandle:\n      description: The subscription handle\n      in: path\n      name: subscriptionHandle\n      required: true\n      schema:\n        example: my_username | my_username@example.com\n        type: string\n    subscriptionsUris:\n      description: list of uris to check if each is part of the user subscriptions\n      in: query\n      name: uris\n      required: true\n      schema:\n        items:\n          format: uri\n          type: string\n        type: array\n    tagsAllOf:\n      description: tag(s) of the video, where all should be present in the video\n      explode: false\n      in: query\n      name: tagsAllOf\n      required: false\n      schema:\n        oneOf:\n          - type: string\n          - items:\n              type: string\n            type: array\n      style: form\n    tagsOneOf:\n      description: tag(s) of the video\n      explode: false\n      in: query\n      name: tagsOneOf\n      required: false\n      schema:\n        oneOf:\n          - type: string\n          - items:\n              type: string\n            maxItems: 5\n            type: array\n      style: form\n    threadId:\n      description: The thread id (root comment id)\n      in: path\n      name: threadId\n      required: true\n      schema:\n        type: integer\n    usersBlocked:\n      description: Filter results down to (un)banned users\n      in: query\n      name: blocked\n      required: false\n      schema:\n        type: boolean\n    usersSearch:\n      description: Plain text search that will match with user usernames or emails\n      in: query\n      name: search\n      required: false\n      schema:\n        type: string\n    usersSort:\n      description: Sort users by criteria\n      in: query\n      name: sort\n      required: false\n      schema:\n        enum:\n          - -id\n          - -username\n          - -createdAt\n        type: string\n    videoRedundanciesSort:\n      description: Sort abuses by criteria\n      in: query\n      name: sort\n      required: false\n      schema:\n        enum:\n          - name\n        type: string\n    videosSearchSort:\n      description: Sort videos by criteria\n      in: query\n      name: sort\n      required: false\n      schema:\n        enum:\n          - name\n          - -duration\n          - -createdAt\n          - -publishedAt\n          - -views\n          - -likes\n          - -match\n        type: string\n    videosSort:\n      description: Sort videos by criteria\n      in: query\n      name: sort\n      required: false\n      schema:\n        enum:\n          - name\n          - -duration\n          - -createdAt\n          - -publishedAt\n          - -views\n          - -likes\n          - -trending\n          - -hot\n        type: string\n  schemas:\n    Abuse:\n      properties:\n        createdAt:\n          format: date-time\n          type: string\n        id:\n          $ref: \"#/components/schemas/id\"\n        moderationComment:\n          example: Decided to ban the server since it spams us regularly\n          maxLength: 3000\n          minLength: 2\n          type: string\n        predefinedReasons:\n          $ref: \"#/components/schemas/AbusePredefinedReasons\"\n        reason:\n          example: The video is a spam\n          maxLength: 3000\n          minLength: 2\n          type: string\n        reporterAccount:\n          $ref: \"#/components/schemas/Account\"\n        state:\n          $ref: \"#/components/schemas/AbuseStateConstant\"\n        video:\n          $ref: \"#/components/schemas/VideoInfo\"\n    AbuseMessage:\n      properties:\n        account:\n          $ref: \"#/components/schemas/AccountSummary\"\n        byModerator:\n          type: boolean\n        createdAt:\n          format: date-time\n          type: string\n        id:\n          $ref: \"#/components/schemas/id\"\n        message:\n          maxLength: 3000\n          minLength: 2\n          type: string\n    AbusePredefinedReasons:\n      example:\n        - spamOrMisleading\n      items:\n        enum:\n          - violentOrAbusive\n          - hatefulOrAbusive\n          - spamOrMisleading\n          - privacy\n          - rights\n          - serverRules\n          - thumbnails\n          - captions\n        type: string\n      type: array\n    AbuseStateConstant:\n      properties:\n        id:\n          $ref: \"#/components/schemas/AbuseStateSet\"\n        label:\n          type: string\n    AbuseStateSet:\n      description: The abuse state (Pending = `1`, Rejected = `2`, Accepted = `3`)\n      enum:\n        - 1\n        - 2\n        - 3\n      type: integer\n    Account:\n      allOf:\n        - $ref: \"#/components/schemas/Actor\"\n        - properties:\n            description:\n              description: text or bio displayed on the account's profile\n              type: string\n            displayName:\n              description: editable name of the account, displayed in its representations\n              maxLength: 120\n              minLength: 3\n              type: string\n            userId:\n              allOf:\n                - $ref: \"#/components/schemas/User/properties/id\"\n              description: object id for the user tied to this account\n    AccountSummary:\n      properties:\n        avatar:\n          allOf:\n            - $ref: \"#/components/schemas/ActorImage\"\n          nullable: true\n        displayName:\n          type: string\n        host:\n          format: hostname\n          type: string\n        id:\n          type: integer\n        name:\n          type: string\n        url:\n          format: url\n          type: string\n    Actor:\n      properties:\n        avatar:\n          $ref: \"#/components/schemas/ActorImage\"\n        createdAt:\n          format: date-time\n          type: string\n        followersCount:\n          description: number of followers of this actor, as seen by this instance\n          minimum: 0\n          type: integer\n        followingCount:\n          description: number of actors subscribed to by this actor, as seen by this instance\n          minimum: 0\n          type: integer\n        host:\n          description: server on which the actor is resident\n          format: hostname\n          type: string\n        hostRedundancyAllowed:\n          description: whether this actor's host allows redundancy of its videos\n          type: boolean\n        id:\n          $ref: \"#/components/schemas/id\"\n        name:\n          allOf:\n            - $ref: \"#/components/schemas/username\"\n          description: immutable name of the actor, used to find or mention it\n        updatedAt:\n          format: date-time\n          type: string\n        url:\n          format: url\n          type: string\n    ActorImage:\n      properties:\n        createdAt:\n          format: date-time\n          type: string\n        path:\n          type: string\n        updatedAt:\n          format: date-time\n          type: string\n    ActorInfo:\n      properties:\n        avatar:\n          nullable: true\n          properties:\n            path:\n              type: string\n          type: object\n        displayName:\n          type: string\n        host:\n          format: hostname\n          type: string\n        id:\n          $ref: \"#/components/schemas/id\"\n        name:\n          type: string\n    AddUser:\n      properties:\n        adminFlags:\n          $ref: \"#/components/schemas/UserAdminFlags\"\n        channelName:\n          $ref: \"#/components/schemas/usernameChannel\"\n        email:\n          description: The user email\n          format: email\n          type: string\n        password:\n          $ref: \"#/components/schemas/password\"\n        role:\n          $ref: \"#/components/schemas/UserRole\"\n        username:\n          $ref: \"#/components/schemas/username\"\n        videoQuota:\n          description: The user video quota in bytes\n          example: -1\n          type: integer\n        videoQuotaDaily:\n          description: The user daily video quota in bytes\n          example: -1\n          type: integer\n      required:\n        - username\n        - password\n        - email\n        - videoQuota\n        - videoQuotaDaily\n        - role\n    AddUserResponse:\n      properties:\n        user:\n          properties:\n            account:\n              properties:\n                id:\n                  $ref: \"#/components/schemas/id\"\n              type: object\n            id:\n              $ref: \"#/components/schemas/id\"\n          type: object\n    CommentThreadPostResponse:\n      properties:\n        comment:\n          $ref: \"#/components/schemas/VideoComment\"\n    CommentThreadResponse:\n      properties:\n        data:\n          items:\n            $ref: \"#/components/schemas/VideoComment\"\n          maxItems: 100\n          type: array\n        total:\n          example: 1\n          type: integer\n    CustomHomepage:\n      properties:\n        content:\n          type: string\n    FileRedundancyInformation:\n      properties:\n        createdAt:\n          format: date-time\n          type: string\n        expiresOn:\n          format: date-time\n          type: string\n        fileUrl:\n          format: url\n          type: string\n        id:\n          $ref: \"#/components/schemas/id\"\n        size:\n          type: integer\n        strategy:\n          enum:\n            - manual\n            - most-views\n            - trending\n            - recently-added\n          type: string\n        updatedAt:\n          format: date-time\n          type: string\n    Follow:\n      properties:\n        createdAt:\n          format: date-time\n          type: string\n        follower:\n          $ref: \"#/components/schemas/Actor\"\n        following:\n          $ref: \"#/components/schemas/Actor\"\n        id:\n          $ref: \"#/components/schemas/id\"\n        score:\n          description: score reflecting the reachability of the actor, with steps of `10` and a base score of `1000`.\n          type: number\n        state:\n          enum:\n            - pending\n            - accepted\n          type: string\n        updatedAt:\n          format: date-time\n          type: string\n    GetMeVideoRating:\n      properties:\n        id:\n          $ref: \"#/components/schemas/id\"\n        rating:\n          description: Rating of the video\n          enum:\n            - like\n            - dislike\n            - none\n          type: string\n      required:\n        - id\n        - rating\n    Job:\n      properties:\n        createdAt:\n          format: date-time\n          type: string\n        data:\n          additionalProperties: true\n          type: object\n        error:\n          additionalProperties: true\n          type: object\n        finishedOn:\n          format: date-time\n          type: string\n        id:\n          $ref: \"#/components/schemas/id\"\n        processedOn:\n          format: date-time\n          type: string\n        state:\n          enum:\n            - active\n            - completed\n            - failed\n            - waiting\n            - delayed\n          type: string\n        type:\n          enum:\n            - activitypub-http-unicast\n            - activitypub-http-broadcast\n            - activitypub-http-fetcher\n            - activitypub-follow\n            - video-file-import\n            - video-transcoding\n            - email\n            - video-import\n            - videos-views\n            - activitypub-refresher\n            - video-redundancy\n          type: string\n    LiveVideoResponse:\n      properties:\n        permanentLive:\n          description: User can stream multiple times in a permanent live\n          type: boolean\n        rtmpUrl:\n          type: string\n        saveReplay:\n          type: boolean\n        streamKey:\n          description: RTMP stream key to use to stream into this live video\n          type: string\n    LiveVideoUpdate:\n      properties:\n        permanentLive:\n          description: User can stream multiple times in a permanent live\n          type: boolean\n        saveReplay:\n          type: boolean\n    MRSSGroupContent:\n      properties:\n        duration:\n          type: integer\n          xml:\n            attribute: true\n        fileSize:\n          type: integer\n          xml:\n            attribute: true\n        framerate:\n          type: integer\n          xml:\n            attribute: true\n        height:\n          type: integer\n          xml:\n            attribute: true\n        lang:\n          type: string\n          xml:\n            attribute: true\n        type:\n          type: string\n          xml:\n            attribute: true\n        url:\n          format: url\n          type: string\n          xml:\n            attribute: true\n      type: object\n      xml:\n        name: media:content\n    MRSSPeerLink:\n      properties:\n        href:\n          type: string\n          xml:\n            attribute: true\n        type:\n          enum:\n            - application/x-bittorrent\n          type: string\n          xml:\n            attribute: true\n      type: object\n      xml:\n        name: media:peerLink\n    NSFWPolicy:\n      enum:\n        - display\n        - blur\n        - do_not_list\n      type: string\n    Notification:\n      properties:\n        account:\n          allOf:\n            - $ref: \"#/components/schemas/ActorInfo\"\n          nullable: true\n        actorFollow:\n          nullable: true\n          properties:\n            follower:\n              $ref: \"#/components/schemas/ActorInfo\"\n            following:\n              properties:\n                displayName:\n                  type: string\n                host:\n                  format: hostname\n                  type: string\n                name:\n                  type: string\n                type:\n                  enum:\n                    - account\n                    - channel\n                    - instance\n                  type: string\n              type: object\n            id:\n              $ref: \"#/components/schemas/id\"\n            state:\n              enum:\n                - pending\n                - accepted\n              type: string\n          type: object\n        comment:\n          nullable: true\n          properties:\n            account:\n              $ref: \"#/components/schemas/ActorInfo\"\n            id:\n              $ref: \"#/components/schemas/id\"\n            threadId:\n              type: integer\n            video:\n              $ref: \"#/components/schemas/VideoInfo\"\n          type: object\n        createdAt:\n          format: date-time\n          type: string\n        id:\n          $ref: \"#/components/schemas/id\"\n        read:\n          type: boolean\n        type:\n          description: |\n            Notification type, following the `UserNotificationType` enum:\n            - `1` NEW_VIDEO_FROM_SUBSCRIPTION\n            - `2` NEW_COMMENT_ON_MY_VIDEO\n            - `3` NEW_ABUSE_FOR_MODERATORS\n            - `4` BLACKLIST_ON_MY_VIDEO\n            - `5` UNBLACKLIST_ON_MY_VIDEO\n            - `6` MY_VIDEO_PUBLISHED\n            - `7` MY_VIDEO_IMPORT_SUCCESS\n            - `8` MY_VIDEO_IMPORT_ERROR\n            - `9` NEW_USER_REGISTRATION\n            - `10` NEW_FOLLOW\n            - `11` COMMENT_MENTION\n            - `12` VIDEO_AUTO_BLACKLIST_FOR_MODERATORS\n            - `13` NEW_INSTANCE_FOLLOWER\n            - `14` AUTO_INSTANCE_FOLLOWING\n          type: integer\n        updatedAt:\n          format: date-time\n          type: string\n        video:\n          allOf:\n            - $ref: \"#/components/schemas/VideoInfo\"\n            - properties:\n                channel:\n                  $ref: \"#/components/schemas/ActorInfo\"\n              type: object\n          nullable: true\n        videoAbuse:\n          nullable: true\n          properties:\n            id:\n              $ref: \"#/components/schemas/id\"\n            video:\n              allOf:\n                - $ref: \"#/components/schemas/VideoInfo\"\n          type: object\n        videoBlacklist:\n          nullable: true\n          properties:\n            id:\n              $ref: \"#/components/schemas/id\"\n            video:\n              allOf:\n                - $ref: \"#/components/schemas/VideoInfo\"\n          type: object\n        videoImport:\n          nullable: true\n          properties:\n            id:\n              $ref: \"#/components/schemas/id\"\n            magnetUri:\n              $ref: \"#/components/schemas/VideoImport/properties/magnetUri\"\n            targetUri:\n              format: uri\n              nullable: true\n              type: string\n            torrentName:\n              nullable: true\n              type: string\n            video:\n              $ref: \"#/components/schemas/VideoInfo\"\n              nullable: true\n          type: object\n    NotificationListResponse:\n      properties:\n        data:\n          items:\n            $ref: \"#/components/schemas/Notification\"\n          maxItems: 100\n          type: array\n        total:\n          example: 1\n          type: integer\n    NotificationSettingValue:\n      description: |\n        Notification type\n        - `0` NONE\n        - `1` WEB\n        - `2` EMAIL\n      enum:\n        - 0\n        - 1\n        - 3\n      type: integer\n    OAuthClient:\n      properties:\n        client_id:\n          example: v1ikx5hnfop4mdpnci8nsqh93c45rldf\n          maxLength: 32\n          minLength: 32\n          pattern: /^[a-z0-9]$/\n          type: string\n        client_secret:\n          example: AjWiOapPltI6EnsWQwlFarRtLh4u8tDt\n          maxLength: 32\n          minLength: 32\n          pattern: /^[a-zA-Z0-9]$/\n          type: string\n    OAuthToken-password:\n      allOf:\n        - $ref: \"#/components/schemas/OAuthClient\"\n        - properties:\n            grant_type:\n              default: password\n              enum:\n                - password\n                - refresh_token\n              type: string\n            password:\n              $ref: \"#/components/schemas/password\"\n            username:\n              $ref: \"#/components/schemas/User/properties/username\"\n          type: object\n      required:\n        - client_id\n        - client_secret\n        - grant_type\n        - username\n        - password\n    OAuthToken-refresh_token:\n      allOf:\n        - $ref: \"#/components/schemas/OAuthClient\"\n        - properties:\n            grant_type:\n              default: password\n              enum:\n                - password\n                - refresh_token\n              type: string\n            refresh_token:\n              example: 2e0d675df9fc96d2e4ec8a3ebbbf45eca9137bb7\n              type: string\n          type: object\n      required:\n        - client_id\n        - client_secret\n        - grant_type\n        - refresh_token\n    PlaylistElement:\n      properties:\n        position:\n          type: integer\n        startTimestamp:\n          format: seconds\n          type: integer\n        stopTimestamp:\n          format: seconds\n          type: integer\n        video:\n          allOf:\n            - $ref: \"#/components/schemas/Video\"\n          nullable: true\n    Plugin:\n      properties:\n        createdAt:\n          format: date-time\n          type: string\n        description:\n          type: string\n        enabled:\n          type: boolean\n        homepage:\n          example: https://framagit.org/framasoft/peertube/official-plugins/tree/master/peertube-plugin-auth-ldap\n          format: url\n          type: string\n        latestVersion:\n          example: 0.0.3\n          type: string\n        name:\n          example: peertube-plugin-auth-ldap\n          type: string\n        peertubeEngine:\n          example: 2.2.0\n          type: string\n        settings:\n          additionalProperties: true\n          type: object\n        type:\n          description: |\n            - `1`: PLUGIN\n            - `2`: THEME\n          enum:\n            - 1\n            - 2\n          type: integer\n        uninstalled:\n          type: boolean\n        updatedAt:\n          format: date-time\n          type: string\n        version:\n          example: 0.0.1\n          type: string\n    PluginResponse:\n      properties:\n        data:\n          items:\n            $ref: \"#/components/schemas/Plugin\"\n          maxItems: 100\n          type: array\n        total:\n          example: 1\n          type: integer\n    PredefinedAbuseReasons:\n      description: Reason categories that help triage reports\n      items:\n        enum:\n          - violentOrAbusive\n          - hatefulOrAbusive\n          - spamOrMisleading\n          - privacy\n          - rights\n          - serverRules\n          - thumbnails\n          - captions\n        type: string\n      maxItems: 8\n      type: array\n    RegisterUser:\n      properties:\n        channel:\n          description: channel base information used to create the first channel of the user\n          properties:\n            displayName:\n              $ref: \"#/components/schemas/VideoChannel/properties/displayName\"\n            name:\n              $ref: \"#/components/schemas/usernameChannel\"\n          type: object\n        displayName:\n          description: editable name of the user, displayed in its representations\n          maxLength: 120\n          minLength: 1\n          type: string\n        email:\n          description: email of the user, used for login or service communications\n          format: email\n          type: string\n        password:\n          $ref: \"#/components/schemas/password\"\n        username:\n          allOf:\n            - $ref: \"#/components/schemas/username\"\n          description: immutable name of the user, used to find or mention its actor\n      required:\n        - username\n        - password\n        - email\n    ServerConfig:\n      properties:\n        autoBlacklist:\n          properties:\n            videos:\n              properties:\n                ofUsers:\n                  properties:\n                    enabled:\n                      type: boolean\n                  type: object\n              type: object\n          type: object\n        avatar:\n          properties:\n            extensions:\n              items:\n                type: string\n              type: array\n            file:\n              properties:\n                size:\n                  properties:\n                    max:\n                      type: integer\n                  type: object\n              type: object\n          type: object\n        contactForm:\n          properties:\n            enabled:\n              type: boolean\n          type: object\n        email:\n          properties:\n            enabled:\n              type: boolean\n          type: object\n        followings:\n          properties:\n            instance:\n              properties:\n                autoFollowIndex:\n                  properties:\n                    indexUrl:\n                      format: url\n                      type: string\n                  type: object\n              type: object\n          type: object\n        homepage:\n          properties:\n            enabled:\n              type: boolean\n          type: object\n        import:\n          properties:\n            videos:\n              properties:\n                http:\n                  properties:\n                    enabled:\n                      type: boolean\n                  type: object\n                torrent:\n                  properties:\n                    enabled:\n                      type: boolean\n                  type: object\n              type: object\n          type: object\n        instance:\n          properties:\n            customizations:\n              properties:\n                css:\n                  type: string\n                javascript:\n                  type: string\n              type: object\n            defaultClientRoute:\n              type: string\n            defaultNSFWPolicy:\n              type: string\n            isNSFW:\n              type: boolean\n            name:\n              type: string\n            shortDescription:\n              type: string\n          type: object\n        plugin:\n          properties:\n            registered:\n              items:\n                type: string\n              type: array\n          type: object\n        search:\n          properties:\n            remoteUri:\n              properties:\n                anonymous:\n                  type: boolean\n                users:\n                  type: boolean\n              type: object\n          type: object\n        serverCommit:\n          type: string\n        serverVersion:\n          type: string\n        signup:\n          properties:\n            allowed:\n              type: boolean\n            allowedForCurrentIP:\n              type: boolean\n            requiresEmailVerification:\n              type: boolean\n          type: object\n        theme:\n          properties:\n            registered:\n              items:\n                type: string\n              type: array\n          type: object\n        tracker:\n          properties:\n            enabled:\n              type: boolean\n          type: object\n        transcoding:\n          properties:\n            enabledResolutions:\n              items:\n                $ref: \"#/components/schemas/VideoResolutionSet\"\n              type: array\n            hls:\n              properties:\n                enabled:\n                  type: boolean\n              type: object\n            webtorrent:\n              properties:\n                enabled:\n                  type: boolean\n              type: object\n          type: object\n        trending:\n          properties:\n            videos:\n              properties:\n                intervalDays:\n                  type: integer\n              type: object\n          type: object\n        user:\n          properties:\n            videoQuota:\n              example: 16810141515\n              type: integer\n            videoQuotaDaily:\n              example: 1681014151\n              type: integer\n          type: object\n        video:\n          properties:\n            file:\n              properties:\n                extensions:\n                  items:\n                    type: string\n                  type: array\n              type: object\n            image:\n              properties:\n                extensions:\n                  items:\n                    type: string\n                  type: array\n                size:\n                  properties:\n                    max:\n                      type: integer\n                  type: object\n              type: object\n          type: object\n        videoCaption:\n          properties:\n            file:\n              properties:\n                extensions:\n                  items:\n                    type: string\n                  type: array\n                size:\n                  properties:\n                    max:\n                      type: integer\n                  type: object\n              type: object\n          type: object\n    ServerConfigAbout:\n      properties:\n        instance:\n          properties:\n            description:\n              type: string\n            name:\n              type: string\n            shortDescription:\n              type: string\n            terms:\n              type: string\n          type: object\n    ServerConfigCustom:\n      properties:\n        admin:\n          properties:\n            email:\n              format: email\n              type: string\n          type: object\n        autoBlacklist:\n          properties:\n            videos:\n              properties:\n                ofUsers:\n                  properties:\n                    enabled:\n                      type: boolean\n                  type: object\n              type: object\n          type: object\n        cache:\n          properties:\n            captions:\n              properties:\n                size:\n                  type: integer\n              type: object\n            previews:\n              properties:\n                size:\n                  type: integer\n              type: object\n          type: object\n        contactForm:\n          properties:\n            enabled:\n              type: boolean\n          type: object\n        followers:\n          properties:\n            instance:\n              properties:\n                enabled:\n                  type: boolean\n                manualApproval:\n                  type: boolean\n              type: object\n          type: object\n        import:\n          properties:\n            videos:\n              properties:\n                http:\n                  properties:\n                    enabled:\n                      type: boolean\n                  type: object\n                torrent:\n                  properties:\n                    enabled:\n                      type: boolean\n                  type: object\n              type: object\n          type: object\n        instance:\n          properties:\n            customizations:\n              properties:\n                css:\n                  type: string\n                javascript:\n                  type: string\n              type: object\n            defaultClientRoute:\n              type: string\n            defaultNSFWPolicy:\n              type: string\n            description:\n              type: string\n            isNSFW:\n              type: boolean\n            name:\n              type: string\n            shortDescription:\n              type: string\n            terms:\n              type: string\n          type: object\n        services:\n          properties:\n            twitter:\n              properties:\n                username:\n                  type: string\n                whitelisted:\n                  type: boolean\n              type: object\n          type: object\n        signup:\n          properties:\n            enabled:\n              type: boolean\n            limit:\n              type: integer\n            requiresEmailVerification:\n              type: boolean\n          type: object\n        theme:\n          properties:\n            default:\n              type: string\n          type: object\n        transcoding:\n          description: Settings pertaining to transcoding jobs\n          properties:\n            allowAdditionalExtensions:\n              description: Allow your users to upload .mkv, .mov, .avi, .wmv, .flv, .f4v, .3g2, .3gp, .mts, m2ts, .mxf, .nut videos\n              type: boolean\n            allowAudioFiles:\n              description: If a user uploads an audio file, PeerTube will create a video by merging the preview file and the audio file\n              type: boolean\n            concurrency:\n              description: Amount of transcoding jobs to execute in parallel\n              type: number\n            enabled:\n              type: boolean\n            hls:\n              description: HLS-specific settings\n              properties:\n                enabled:\n                  type: boolean\n              type: object\n            profile:\n              description: |\n                New profiles can be added by plugins ; available in core PeerTube: 'default'.\n              enum:\n                - default\n              type: string\n            resolutions:\n              description: Resolutions to transcode _new videos_ to\n              properties:\n                0p:\n                  type: boolean\n                1080p:\n                  type: boolean\n                1440p:\n                  type: boolean\n                2160p:\n                  type: boolean\n                240p:\n                  type: boolean\n                360p:\n                  type: boolean\n                480p:\n                  type: boolean\n                720p:\n                  type: boolean\n              type: object\n            threads:\n              description: Amount of threads used by ffmpeg for 1 transcoding job\n              type: integer\n            webtorrent:\n              description: WebTorrent-specific settings\n              properties:\n                enabled:\n                  type: boolean\n              type: object\n          type: object\n        user:\n          description: Settings that apply to new users, if registration is enabled\n          properties:\n            videoQuota:\n              example: 16810141515\n              type: integer\n            videoQuotaDaily:\n              example: 1681014151\n              type: integer\n          type: object\n    UUIDv4:\n      example: 9c9de5e8-0a1e-484a-b099-e80766180a6d\n      format: uuid\n      maxLength: 36\n      minLength: 36\n      pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$\n      type: string\n    UpdateMe:\n      properties:\n        autoPlayNextVideo:\n          description: new preference regarding playing following videos automatically\n          type: boolean\n        autoPlayNextVideoPlaylist:\n          description: new preference regarding playing following playlist videos automatically\n          type: boolean\n        autoPlayVideo:\n          description: new preference regarding playing videos automatically\n          type: boolean\n        currentPassword:\n          $ref: \"#/components/schemas/password\"\n        displayNSFW:\n          description: new NSFW display policy\n          enum:\n            - \"true\"\n            - \"false\"\n            - both\n          type: string\n        displayName:\n          description: new name of the user in its representations\n          maxLength: 120\n          minLength: 3\n          type: string\n        email:\n          allOf:\n            - $ref: \"#/components/schemas/User/properties/email\"\n          description: new email used for login and service communications\n        noInstanceConfigWarningModal:\n          type: boolean\n        noWelcomeModal:\n          type: boolean\n        password:\n          $ref: \"#/components/schemas/password\"\n        theme:\n          type: string\n        videoLanguages:\n          description: list of languages to filter videos down to\n          items:\n            type: string\n          type: array\n        videosHistoryEnabled:\n          description: whether to keep track of watched history or not\n          type: boolean\n        webTorrentEnabled:\n          description: whether to enable P2P in the player or not\n          type: boolean\n    UpdateUser:\n      properties:\n        adminFlags:\n          $ref: \"#/components/schemas/UserAdminFlags\"\n        email:\n          allOf:\n            - $ref: \"#/components/schemas/User/properties/email\"\n          description: The updated email of the user\n        emailVerified:\n          description: Set the email as verified\n          type: boolean\n        pluginAuth:\n          description: The auth plugin to use to authenticate the user\n          example: peertube-plugin-auth-saml2\n          nullable: true\n          type: string\n        role:\n          $ref: \"#/components/schemas/UserRole\"\n        videoQuota:\n          description: The updated video quota of the user in bytes\n          type: integer\n        videoQuotaDaily:\n          description: The updated daily video quota of the user in bytes\n          type: integer\n    User:\n      properties:\n        account:\n          $ref: \"#/components/schemas/Account\"\n        autoPlayNextVideo:\n          description: Automatically start playing the upcoming video after the currently playing video\n          type: boolean\n        autoPlayNextVideoPlaylist:\n          description: Automatically start playing the video on the playlist after the currently playing video\n          type: boolean\n        autoPlayVideo:\n          description: Automatically start playing the video on the watch page\n          type: boolean\n        blocked:\n          type: boolean\n        blockedReason:\n          type: string\n        createdAt:\n          type: string\n        email:\n          description: The user email\n          format: email\n          type: string\n        emailVerified:\n          description: Has the user confirmed their email address?\n          type: boolean\n        id:\n          allOf:\n            - $ref: \"#/components/schemas/id\"\n          readOnly: true\n        lastLoginDate:\n          format: date-time\n          type: string\n        noInstanceConfigWarningModal:\n          type: boolean\n        noWelcomeModal:\n          type: boolean\n        nsfwPolicy:\n          $ref: \"#/components/schemas/NSFWPolicy\"\n        pluginAuth:\n          description: Auth plugin to use to authenticate the user\n          type: string\n        role:\n          $ref: \"#/components/schemas/UserRole\"\n        roleLabel:\n          enum:\n            - User\n            - Moderator\n            - Administrator\n          type: string\n        theme:\n          description: Theme enabled by this user\n          type: string\n        username:\n          $ref: \"#/components/schemas/username\"\n        videoChannels:\n          items:\n            $ref: \"#/components/schemas/VideoChannel\"\n          type: array\n        videoQuota:\n          description: The user video quota in bytes\n          example: -1\n          type: integer\n        videoQuotaDaily:\n          description: The user daily video quota in bytes\n          example: -1\n          type: integer\n        webtorrentEnabled:\n          description: Enable P2P in the player\n          type: boolean\n    UserAdminFlags:\n      description: Admin flags for the user (None = `0`, Bypass video blocklist = `1`)\n      enum:\n        - 0\n        - 1\n      example: 1\n      type: integer\n    UserRole:\n      description: The user role (Admin = `0`, Moderator = `1`, User = `2`)\n      enum:\n        - 0\n        - 1\n        - 2\n      example: 2\n      type: integer\n    UserWatchingVideo:\n      properties:\n        currentTime:\n          description: timestamp within the video, in seconds\n          example: 5\n          format: seconds\n          type: integer\n    UserWithStats:\n      allOf:\n        - $ref: \"#/components/schemas/User\"\n        - properties:\n            abusesAcceptedCount:\n              description: Count of reports/abuses created by the user and accepted/acted upon by the moderation team\n              type: integer\n            abusesCount:\n              description: Count of reports/abuses of which the user is a target\n              type: integer\n            abusesCreatedCount:\n              description: Count of reports/abuses created by the user\n              type: integer\n            videoCommentsCount:\n              description: Count of comments published\n              type: integer\n            videosCount:\n              description: Count of videos published\n              type: integer\n    Video:\n      properties:\n        account:\n          $ref: \"#/components/schemas/AccountSummary\"\n        blacklisted:\n          nullable: true\n          type: boolean\n        blacklistedReason:\n          nullable: true\n          type: string\n        category:\n          allOf:\n            - $ref: \"#/components/schemas/VideoConstantNumber-Category\"\n          description: category in which the video is classified\n        channel:\n          $ref: \"#/components/schemas/VideoChannelSummary\"\n        createdAt:\n          description: time at which the video object was first drafted\n          example: 2017-10-01T10:52:46.396Z\n          format: date-time\n          type: string\n        description:\n          description: |\n            truncated description of the video, written in Markdown.\n            Resolve `descriptionPath` to get the full description of maximum `10000` characters.\n          example: |\n            **[Want to help to translate this video?](https://weblate.framasoft.org/projects/what-is-peertube-video/)**\\r\\n\\r\\n\n            **Take back the control of your videos! [#JoinPeertube](https://joinpeertube.org)**\\r\\n*A decentralized video hosting network, based on fr...\n          maxLength: 250\n          minLength: 3\n          type: string\n        dislikes:\n          example: 7\n          type: integer\n        duration:\n          description: duration of the video in seconds\n          example: 1419\n          format: seconds\n          type: integer\n        embedPath:\n          example: /videos/embed/a65bc12f-9383-462e-81ae-8207e8b434ee\n          type: string\n        id:\n          allOf:\n            - $ref: \"#/components/schemas/id\"\n          description: object id for the video\n        isLive:\n          type: boolean\n        isLocal:\n          type: boolean\n        language:\n          allOf:\n            - $ref: \"#/components/schemas/VideoConstantString-Language\"\n          description: main language used in the video\n        licence:\n          allOf:\n            - $ref: \"#/components/schemas/VideoConstantNumber-Licence\"\n          description: licence under which the video is distributed\n        likes:\n          example: 42\n          type: integer\n        name:\n          description: title of the video\n          example: What is PeerTube?\n          maxLength: 120\n          minLength: 3\n          type: string\n        nsfw:\n          type: boolean\n        originallyPublishedAt:\n          description: used to represent a date of first publication, prior to the practical publication date of `publishedAt`\n          example: 2010-10-01T10:52:46.396Z\n          format: date-time\n          type: string\n        previewPath:\n          example: /lazy-static/previews/a65bc12f-9383-462e-81ae-8207e8b434ee.jpg\n          type: string\n        privacy:\n          allOf:\n            - $ref: \"#/components/schemas/VideoPrivacyConstant\"\n          description: privacy policy used to distribute the video\n        publishedAt:\n          description: time at which the video was marked as ready for playback (with restrictions depending on `privacy`). Usually set after a `state` evolution.\n          example: 2018-10-01T10:52:46.396Z\n          format: date-time\n          type: string\n        scheduledUpdate:\n          allOf:\n            - $ref: \"#/components/schemas/VideoScheduledUpdate\"\n          nullable: true\n        shortUUID:\n          allOf:\n            - $ref: \"#/components/schemas/shortUUID\"\n        state:\n          allOf:\n            - $ref: \"#/components/schemas/VideoStateConstant\"\n          description: represents the internal state of the video processing within the PeerTube instance\n        thumbnailPath:\n          example: /static/thumbnails/a65bc12f-9383-462e-81ae-8207e8b434ee.jpg\n          type: string\n        updatedAt:\n          description: last time the video's metadata was modified\n          example: 2021-05-04T08:01:01.502Z\n          format: date-time\n          type: string\n        userHistory:\n          nullable: true\n          properties:\n            currentTime:\n              type: integer\n          type: object\n        uuid:\n          allOf:\n            - $ref: \"#/components/schemas/UUIDv4\"\n          description: universal identifier for the video, that can be used across instances\n        views:\n          example: 1337\n          type: integer\n        waitTranscoding:\n          nullable: true\n          type: boolean\n    VideoBlacklist:\n      properties:\n        createdAt:\n          format: date-time\n          type: string\n        description:\n          maxLength: 10000\n          minLength: 3\n          type: string\n        dislikes:\n          type: integer\n        duration:\n          type: integer\n        id:\n          $ref: \"#/components/schemas/id\"\n        likes:\n          type: integer\n        name:\n          maxLength: 120\n          minLength: 3\n          type: string\n        nsfw:\n          type: boolean\n        updatedAt:\n          format: date-time\n          type: string\n        uuid:\n          $ref: \"#/components/schemas/UUIDv4\"\n        videoId:\n          $ref: \"#/components/schemas/Video/properties/id\"\n        views:\n          type: integer\n    VideoCaption:\n      properties:\n        captionPath:\n          type: string\n        language:\n          $ref: \"#/components/schemas/VideoConstantString-Language\"\n    VideoCategorySet:\n      description: category id of the video (see [/videos/categories](#operation/getCategories))\n      example: 15\n      type: integer\n    VideoChannel:\n      properties:\n        description:\n          example: Videos made with \u003c3 by Framasoft\n          maxLength: 1000\n          minLength: 3\n          type: string\n        displayName:\n          description: editable name of the channel, displayed in its representations\n          example: Videos of Framasoft\n          maxLength: 120\n          minLength: 1\n          type: string\n        id:\n          allOf:\n            - $ref: \"#/components/schemas/id\"\n          readOnly: true\n        isLocal:\n          readOnly: true\n          type: boolean\n        ownerAccount:\n          nullable: true\n          properties:\n            id:\n              type: integer\n            uuid:\n              $ref: \"#/components/schemas/UUIDv4\"\n          readOnly: true\n          type: object\n        support:\n          description: text shown by default on all videos of this channel, to tell the audience how to support it\n          example: Please support our work on https://soutenir.framasoft.org/en/ \u003c3\n          maxLength: 1000\n          minLength: 3\n          type: string\n        updatedAt:\n          format: date-time\n          readOnly: true\n          type: string\n    VideoChannelCreate:\n      allOf:\n        - $ref: \"#/components/schemas/VideoChannel\"\n        - properties:\n            name:\n              allOf:\n                - $ref: \"#/components/schemas/usernameChannel\"\n              description: username of the channel to create\n      required:\n        - name\n        - displayName\n    VideoChannelList:\n      properties:\n        data:\n          items:\n            allOf:\n              - $ref: \"#/components/schemas/VideoChannel\"\n              - $ref: \"#/components/schemas/Actor\"\n          type: array\n        total:\n          example: 1\n          type: integer\n    VideoChannelSummary:\n      properties:\n        avatar:\n          allOf:\n            - $ref: \"#/components/schemas/ActorImage\"\n          nullable: true\n        displayName:\n          type: string\n        host:\n          format: hostname\n          type: string\n        id:\n          $ref: \"#/components/schemas/id\"\n        name:\n          type: string\n        url:\n          format: url\n          type: string\n    VideoChannelUpdate:\n      allOf:\n        - $ref: \"#/components/schemas/VideoChannel\"\n        - properties:\n            bulkVideosSupportUpdate:\n              description: Update the support field for all videos of this channel\n              type: boolean\n    VideoComment:\n      properties:\n        account:\n          $ref: \"#/components/schemas/Account\"\n        createdAt:\n          format: date-time\n          type: string\n        deletedAt:\n          default: null\n          format: date-time\n          nullable: true\n          type: string\n        id:\n          $ref: \"#/components/schemas/id\"\n        inReplyToCommentId:\n          allOf:\n            - $ref: \"#/components/schemas/id\"\n          nullable: true\n        isDeleted:\n          default: false\n          type: boolean\n        text:\n          description: Text of the comment\n          example: This video is wonderful!\n          format: html\n          minLength: 1\n          type: string\n        threadId:\n          $ref: \"#/components/schemas/id\"\n        totalReplies:\n          minimum: 0\n          type: integer\n        totalRepliesFromVideoAuthor:\n          minimum: 0\n          type: integer\n        updatedAt:\n          format: date-time\n          type: string\n        url:\n          format: url\n          type: string\n        videoId:\n          $ref: \"#/components/schemas/Video/properties/id\"\n    VideoCommentThreadTree:\n      properties:\n        children:\n          items:\n            $ref: \"#/components/schemas/VideoCommentThreadTree\"\n          type: array\n        comment:\n          $ref: \"#/components/schemas/VideoComment\"\n    VideoCommentsForXML:\n      items:\n        properties:\n          content:encoded:\n            type: string\n          dc:creator:\n            type: string\n          guid:\n            type: string\n          link:\n            format: url\n            type: string\n          pubDate:\n            format: date-time\n            type: string\n        type: object\n        xml:\n          name: item\n      type: array\n      xml:\n        name: channel\n        wrapped: true\n    VideoConstantNumber-Category:\n      properties:\n        id:\n          $ref: \"#/components/schemas/VideoCategorySet\"\n        label:\n          example: Science \u0026 Technology\n          type: string\n    VideoConstantNumber-Licence:\n      properties:\n        id:\n          $ref: \"#/components/schemas/VideoLicenceSet\"\n        label:\n          example: Attribution - Share Alike\n          type: string\n    VideoConstantString-Language:\n      properties:\n        id:\n          $ref: \"#/components/schemas/VideoLanguageSet\"\n        label:\n          example: English\n          type: string\n    VideoCreateImport:\n      allOf:\n        - additionalProperties: false\n          oneOf:\n            - properties:\n                targetUrl:\n                  $ref: \"#/components/schemas/VideoImport/properties/targetUrl\"\n              required:\n                - targetUrl\n            - properties:\n                magnetUri:\n                  $ref: \"#/components/schemas/VideoImport/properties/magnetUri\"\n              required:\n                - magnetUri\n            - properties:\n                torrentfile:\n                  $ref: \"#/components/schemas/VideoImport/properties/torrentfile\"\n              required:\n                - torrentfile\n          type: object\n        - $ref: \"#/components/schemas/VideoUploadRequestCommon\"\n      required:\n        - channelId\n        - name\n    VideoDetails:\n      allOf:\n        - $ref: \"#/components/schemas/Video\"\n        - properties:\n            account:\n              $ref: \"#/components/schemas/Account\"\n            channel:\n              $ref: \"#/components/schemas/VideoChannel\"\n            commentsEnabled:\n              type: boolean\n            descriptionPath:\n              description: path at which to get the full description of maximum `10000` characters\n              example: /api/v1/videos/9c9de5e8-0a1e-484a-b099-e80766180a6d/description\n              type: string\n            downloadEnabled:\n              type: boolean\n            files:\n              description: |\n                WebTorrent/raw video files. If WebTorrent is disabled on the server:\n\n                - field will be empty\n                - video files will be found in `streamingPlaylists[].files` field\n              items:\n                $ref: \"#/components/schemas/VideoFile\"\n              type: array\n            streamingPlaylists:\n              description: |\n                HLS playlists/manifest files. If HLS is disabled on the server:\n\n                - field will be empty\n                - video files will be found in `files` field\n              items:\n                $ref: \"#/components/schemas/VideoStreamingPlaylists\"\n              type: array\n            support:\n              description: A text tell the audience how to support the video creator\n              example: Please support our work on https://soutenir.framasoft.org/en/ \u003c3\n              maxLength: 1000\n              minLength: 3\n              type: string\n            tags:\n              example:\n                - flowers\n                - gardening\n              items:\n                maxLength: 30\n                minLength: 2\n                type: string\n              maxItems: 5\n              minItems: 1\n              type: array\n            trackerUrls:\n              example:\n                - https://peertube2.cpy.re/tracker/announce\n                - wss://peertube2.cpy.re/tracker/socket\n              items:\n                format: url\n                type: string\n              type: array\n          type: object\n    VideoFile:\n      properties:\n        fileDownloadUrl:\n          description: URL endpoint that transfers the video file as an attachment (so that the browser opens a download dialog)\n          format: url\n          type: string\n        fileUrl:\n          description: Direct URL of the video\n          format: url\n          type: string\n        fps:\n          description: Frames per second of the video file\n          type: number\n        magnetUri:\n          description: magnet URI allowing to resolve the video via BitTorrent without a metainfo file\n          example: magnet:?xs=https%3A%2F%2Fframatube.org%2Fstatic%2Ftorrents%2F9c9de5e8-0a1e-484a-b099-e80766180a6d-240.torrent\u0026xt=urn:btih:38b4747ff788b30bf61f59d1965cd38f9e48e01f\u0026dn=What+is+PeerTube%3F\u0026tr=wss%3A%2F%2Fframatube.org%2Ftracker%2Fsocket\u0026tr=https%3A%2F%2Fframatube.org%2Ftracker%2Fannounce\u0026ws=https%3A%2F%2Fframatube.org%2Fstatic%2Fwebseed%2F9c9de5e8-0a1e-484a-b099-e80766180a6d-240.mp4\n          format: uri\n          pattern: /magnet:\\?xt=urn:[a-z0-9]+:[a-z0-9]{32}/i\n          type: string\n        metadataUrl:\n          description: URL dereferencing the output of ffprobe on the file\n          format: url\n          type: string\n        resolution:\n          $ref: \"#/components/schemas/VideoResolutionConstant\"\n        size:\n          description: Video file size in bytes\n          type: integer\n        torrentDownloadUrl:\n          description: URL endpoint that transfers the torrent file as an attachment (so that the browser opens a download dialog)\n          format: url\n          type: string\n        torrentUrl:\n          description: Direct URL of the torrent file\n          format: url\n          type: string\n      readOnly: true\n    VideoImport:\n      properties:\n        createdAt:\n          format: date-time\n          readOnly: true\n          type: string\n        error:\n          readOnly: true\n          type: string\n        id:\n          allOf:\n            - $ref: \"#/components/schemas/id\"\n          readOnly: true\n        magnetUri:\n          description: magnet URI allowing to resolve the import's source video\n          example: magnet:?xs=https%3A%2F%2Fframatube.org%2Fstatic%2Ftorrents%2F9c9de5e8-0a1e-484a-b099-e80766180a6d-240.torrent\u0026xt=urn:btih:38b4747ff788b30bf61f59d1965cd38f9e48e01f\u0026dn=What+is+PeerTube%3F\u0026tr=wss%3A%2F%2Fframatube.org%2Ftracker%2Fsocket\u0026tr=https%3A%2F%2Fframatube.org%2Ftracker%2Fannounce\u0026ws=https%3A%2F%2Fframatube.org%2Fstatic%2Fwebseed%2F9c9de5e8-0a1e-484a-b099-e80766180a6d-240.mp4\n          format: uri\n          pattern: /magnet:\\?xt=urn:[a-z0-9]+:[a-z0-9]{32}/i\n          type: string\n        state:\n          allOf:\n            - $ref: \"#/components/schemas/VideoImportStateConstant\"\n          readOnly: true\n        targetUrl:\n          description: remote URL where to find the import's source video\n          example: https://framatube.org/videos/watch/9c9de5e8-0a1e-484a-b099-e80766180a6d\n          format: url\n          type: string\n        torrentName:\n          readOnly: true\n          type: string\n        torrentfile:\n          description: Torrent file containing only the video file\n          format: binary\n          type: string\n          writeOnly: true\n        updatedAt:\n          format: date-time\n          readOnly: true\n          type: string\n        video:\n          allOf:\n            - $ref: \"#/components/schemas/Video\"\n          nullable: true\n          readOnly: true\n    VideoImportStateConstant:\n      properties:\n        id:\n          description: The video import state (Pending = `1`, Success = `2`, Failed = `3`)\n          enum:\n            - 1\n            - 2\n            - 3\n          type: integer\n        label:\n          example: Pending\n          type: string\n    VideoImportsList:\n      properties:\n        data:\n          items:\n            $ref: \"#/components/schemas/VideoImport\"\n          maxItems: 100\n          type: array\n        total:\n          example: 1\n          type: integer\n    VideoInfo:\n      properties:\n        id:\n          $ref: \"#/components/schemas/Video/properties/id\"\n        name:\n          $ref: \"#/components/schemas/Video/properties/name\"\n        uuid:\n          $ref: \"#/components/schemas/Video/properties/uuid\"\n    VideoLanguageSet:\n      description: language id of the video (see [/videos/languages](#operation/getLanguages))\n      example: en\n      type: string\n    VideoLicenceSet:\n      description: licence id of the video (see [/videos/licences](#operation/getLicences))\n      example: 2\n      type: integer\n    VideoListResponse:\n      properties:\n        data:\n          items:\n            $ref: \"#/components/schemas/Video\"\n          maxItems: 100\n          type: array\n        total:\n          example: 1\n          type: integer\n    VideoPlaylist:\n      properties:\n        createdAt:\n          format: date-time\n          type: string\n        description:\n          maxLength: 1000\n          minLength: 3\n          type: string\n        displayName:\n          maxLength: 120\n          minLength: 1\n          type: string\n        id:\n          $ref: \"#/components/schemas/id\"\n        isLocal:\n          type: boolean\n        ownerAccount:\n          $ref: \"#/components/schemas/AccountSummary\"\n        privacy:\n          $ref: \"#/components/schemas/VideoPlaylistPrivacyConstant\"\n        shortUUID:\n          allOf:\n            - $ref: \"#/components/schemas/shortUUID\"\n        thumbnailPath:\n          type: string\n        type:\n          $ref: \"#/components/schemas/VideoPlaylistTypeConstant\"\n        updatedAt:\n          format: date-time\n          type: string\n        uuid:\n          $ref: \"#/components/schemas/UUIDv4\"\n        videoChannel:\n          $ref: \"#/components/schemas/VideoChannelSummary\"\n        videoLength:\n          minimum: 0\n          type: integer\n    VideoPlaylistPrivacyConstant:\n      properties:\n        id:\n          $ref: \"#/components/schemas/VideoPlaylistPrivacySet\"\n        label:\n          type: string\n    VideoPlaylistPrivacySet:\n      description: Video playlist privacy policy (see [/video-playlists/privacies])\n      enum:\n        - 1\n        - 2\n        - 3\n      type: integer\n    VideoPlaylistTypeConstant:\n      properties:\n        id:\n          $ref: \"#/components/schemas/VideoPlaylistTypeSet\"\n        label:\n          type: string\n    VideoPlaylistTypeSet:\n      description: The video playlist type (Regular = `1`, Watch Later = `2`)\n      enum:\n        - 1\n        - 2\n      type: integer\n    VideoPrivacyConstant:\n      properties:\n        id:\n          $ref: \"#/components/schemas/VideoPrivacySet\"\n        label:\n          type: string\n    VideoPrivacySet:\n      description: privacy id of the video (see [/videos/privacies](#operation/getPrivacyPolicies))\n      enum:\n        - 1\n        - 2\n        - 3\n        - 4\n      type: integer\n    VideoRating:\n      properties:\n        rating:\n          description: Rating of the video\n          enum:\n            - like\n            - dislike\n            - none\n          type: string\n        video:\n          $ref: \"#/components/schemas/Video\"\n      required:\n        - video\n        - rating\n    VideoRedundancy:\n      properties:\n        id:\n          $ref: \"#/components/schemas/id\"\n        name:\n          type: string\n        redundancies:\n          properties:\n            files:\n              items:\n                $ref: \"#/components/schemas/FileRedundancyInformation\"\n              type: array\n            streamingPlaylists:\n              items:\n                $ref: \"#/components/schemas/FileRedundancyInformation\"\n              type: array\n          type: object\n        url:\n          format: url\n          type: string\n        uuid:\n          $ref: \"#/components/schemas/UUIDv4\"\n    VideoResolutionConstant:\n      description: resolutions and their labels for the video\n      properties:\n        id:\n          $ref: \"#/components/schemas/VideoResolutionSet\"\n        label:\n          example: 240p\n          type: string\n    VideoResolutionSet:\n      description: |\n        Video resolution (`0`, `240`, `360`, `720`, `1080`, `1440` or `2160`)\n\n        `0` is used as a special value for stillimage videos dedicated to audio, a.k.a. audio-only videos.\n      example: 240\n      type: integer\n    VideoScheduledUpdate:\n      properties:\n        privacy:\n          $ref: \"#/components/schemas/VideoPrivacySet\"\n        updateAt:\n          description: When to update the video\n          format: date\n          type: string\n      required:\n        - updateAt\n    VideoStateConstant:\n      properties:\n        id:\n          description: The video state (Published = `1`, to transcode = `2`, to import = `3`)\n          enum:\n            - 1\n            - 2\n            - 3\n          type: integer\n        label:\n          type: string\n    VideoStreamingPlaylists:\n      allOf:\n        - properties:\n            id:\n              $ref: \"#/components/schemas/id\"\n            type:\n              description: |\n                Playlist type:\n                - `1`: HLS\n              enum:\n                - 1\n              type: integer\n          type: object\n        - $ref: \"#/components/schemas/VideoStreamingPlaylists-HLS\"\n    VideoStreamingPlaylists-HLS:\n      properties:\n        files:\n          description: |\n            Video files associated to this playlist.\n\n            The difference with the root `files` property is that these files are fragmented, so they can be used in this streaming playlist (HLS, etc.)\n          items:\n            $ref: \"#/components/schemas/VideoFile\"\n          type: array\n        playlistUrl:\n          format: url\n          type: string\n        redundancies:\n          items:\n            properties:\n              baseUrl:\n                format: url\n                type: string\n            type: object\n          type: array\n        segmentsSha256Url:\n          format: url\n          type: string\n    VideoUploadRequestCommon:\n      properties:\n        category:\n          $ref: \"#/components/schemas/VideoCategorySet\"\n        channelId:\n          description: Channel id that will contain this video\n          example: 3\n          minimum: 1\n          type: integer\n        commentsEnabled:\n          description: Enable or disable comments for this video\n          type: boolean\n        description:\n          description: Video description\n          example: |\n            **[Want to help to translate this video?](https://weblate.framasoft.org/projects/what-is-peertube-video/)**\\r\\n\\r\\n**Take back the control of your videos! [#JoinPeertube](https://joinpeertube.org)**\n          type: string\n        downloadEnabled:\n          description: Enable or disable downloading for this video\n          type: boolean\n        language:\n          $ref: \"#/components/schemas/VideoLanguageSet\"\n        licence:\n          $ref: \"#/components/schemas/VideoLicenceSet\"\n        name:\n          description: Video name\n          example: What is PeerTube?\n          maxLength: 120\n          minLength: 3\n          type: string\n        nsfw:\n          description: Whether or not this video contains sensitive content\n          type: boolean\n        originallyPublishedAt:\n          description: Date when the content was originally published\n          format: date-time\n          type: string\n        previewfile:\n          description: Video preview file\n          format: binary\n          type: string\n        privacy:\n          $ref: \"#/components/schemas/VideoPrivacySet\"\n        scheduleUpdate:\n          $ref: \"#/components/schemas/VideoScheduledUpdate\"\n        support:\n          description: A text tell the audience how to support the video creator\n          example: Please support our work on https://soutenir.framasoft.org/en/ \u003c3\n          type: string\n        tags:\n          description: Video tags (maximum 5 tags each between 2 and 30 characters)\n          example:\n            - framasoft\n            - peertube\n          items:\n            maxLength: 30\n            minLength: 2\n            type: string\n          maxItems: 5\n          minItems: 1\n          type: array\n          uniqueItems: true\n        thumbnailfile:\n          description: Video thumbnail file\n          format: binary\n          type: string\n        waitTranscoding:\n          description: Whether or not we wait transcoding before publish the video\n          type: boolean\n      required:\n        - channelId\n        - name\n    VideoUploadRequestLegacy:\n      allOf:\n        - $ref: \"#/components/schemas/VideoUploadRequestCommon\"\n        - properties:\n            videofile:\n              description: Video file\n              format: binary\n              type: string\n          required:\n            - videofile\n          type: object\n    VideoUploadRequestResumable:\n      allOf:\n        - $ref: \"#/components/schemas/VideoUploadRequestCommon\"\n        - properties:\n            filename:\n              description: Video filename including extension\n              example: what_is_peertube.mp4\n              format: filename\n              type: string\n            previewfile:\n              description: Video preview file\n              format: binary\n              type: string\n            thumbnailfile:\n              description: Video thumbnail file\n              format: binary\n              type: string\n          required:\n            - filename\n          type: object\n    VideoUploadResponse:\n      properties:\n        video:\n          properties:\n            id:\n              $ref: \"#/components/schemas/Video/properties/id\"\n            shortUUID:\n              $ref: \"#/components/schemas/Video/properties/shortUUID\"\n            uuid:\n              $ref: \"#/components/schemas/Video/properties/uuid\"\n          type: object\n    VideosForXML:\n      items:\n        properties:\n          content:encoded:\n            description: video description\n            type: string\n          dc:creator:\n            description: publisher user name\n            type: string\n          description:\n            description: video description\n            type: string\n          enclosure:\n            description: main streamable file for the video\n            properties:\n              length:\n                type: integer\n                xml:\n                  attribute: true\n              type:\n                enum:\n                  - application/x-bittorrent\n                type: string\n                xml:\n                  attribute: true\n              url:\n                format: url\n                type: string\n                xml:\n                  attribute: true\n            type: object\n          guid:\n            description: video canonical URL\n            type: string\n          link:\n            description: video watch page URL\n            format: url\n            type: string\n          media:category:\n            description: video category (MRSS)\n            type: integer\n          media:community:\n            description: see [media:community](https://www.rssboard.org/media-rss#media-community) (MRSS)\n            properties:\n              media:statistics:\n                properties:\n                  views:\n                    type: integer\n                    xml:\n                      attribute: true\n                type: object\n            type: object\n          media:description:\n            type: string\n          media:embed:\n            properties:\n              url:\n                description: video embed path, relative to the canonical URL domain (MRSS)\n                format: url\n                type: string\n                xml:\n                  attribute: true\n            type: object\n          media:group:\n            description: list of streamable files for the video. see [media:peerLink](https://www.rssboard.org/media-rss#media-peerlink) and [media:content](https://www.rssboard.org/media-rss#media-content) or  (MRSS)\n            items:\n              anyOf:\n                - $ref: \"#/components/schemas/MRSSPeerLink\"\n                - $ref: \"#/components/schemas/MRSSGroupContent\"\n            type: array\n          media:player:\n            properties:\n              url:\n                description: video watch path, relative to the canonical URL domain (MRSS)\n                format: url\n                type: string\n                xml:\n                  attribute: true\n            type: object\n          media:rating:\n            description: see [media:rating](https://www.rssboard.org/media-rss#media-rating) (MRSS)\n            enum:\n              - nonadult\n              - adult\n            type: string\n          media:thumbnail:\n            properties:\n              height:\n                type: integer\n                xml:\n                  attribute: true\n              url:\n                format: url\n                type: string\n                xml:\n                  attribute: true\n              width:\n                type: integer\n                xml:\n                  attribute: true\n            type: object\n          media:title:\n            description: see [media:title](https://www.rssboard.org/media-rss#media-title) (MRSS). We only use `plain` titles.\n            type: string\n          pubDate:\n            description: video publication date\n            format: date-time\n            type: string\n        type: object\n        xml:\n          name: item\n      type: array\n      xml:\n        name: channel\n        wrapped: true\n    id:\n      example: 42\n      minimum: 1\n      type: integer\n    password:\n      format: password\n      maxLength: 255\n      minLength: 6\n      type: string\n    shortUUID:\n      description: translation of a uuid v4 with a bigger alphabet to have a shorter uuid\n      example: 2y84q2MQUMWPbiEcxNXMgC\n      type: string\n    username:\n      description: immutable name of the user, used to find or mention its actor\n      example: chocobozzz\n      maxLength: 50\n      minLength: 1\n      pattern: /^[a-z0-9._]+$/\n      type: string\n    usernameChannel:\n      description: immutable name of the channel, used to interact with its actor\n      example: framasoft_videos\n      maxLength: 50\n      minLength: 1\n      pattern: /^[a-zA-Z0-9\\\\-_.:]+$/\n      type: string\n  securitySchemes:\n    OAuth2:\n      description: |\n        Authenticating via OAuth requires the following steps:\n        - Have an activated account\n        - [Generate] an access token for that account at `/api/v1/users/token`.\n        - Make requests with the *Authorization: Bearer \u003ctoken\\\u003e* header\n        - Profit, depending on the role assigned to the account\n\n        Note that the __access token is valid for 1 day__ and is given\n        along with a __refresh token valid for 2 weeks__.\n\n        [Generate]: https://docs.joinpeertube.org/api-rest-getting-started\n      flows:\n        password:\n          scopes:\n            admin: Admin scope\n            moderator: Moderator scope\n            user: User scope\n          tokenUrl: /api/v1/users/token\n      type: oauth2\nx-tagGroups:\n  - name: Auth\n    tags:\n      - Register\n      - Session\n  - name: Accounts\n    tags:\n      - Accounts\n      - Users\n      - My User\n      - My Subscriptions\n      - My Notifications\n      - My History\n  - name: Videos\n    tags:\n      - Video\n      - Video Upload\n      - Video Captions\n      - Video Channels\n      - Video Comments\n      - Video Rates\n      - Video Playlists\n      - Video Ownership Change\n      - Video Mirroring\n      - Live Videos\n      - Feeds\n  - name: Search\n    tags:\n      - Search\n  - name: Custom pages\n    tags:\n      - Homepage\n  - name: Moderation\n    tags:\n      - Abuses\n      - Video Blocks\n      - Account Blocks\n      - Server Blocks\n  - name: Instance Configuration\n    tags:\n      - Config\n      - Instance Follows\n      - Instance Redundancy\n      - Plugins\n  - name: Jobs\n    tags:\n      - Job\n"
		}
	},
	"Error": "parse: parse spec: paths: /users/register: post: operation \"registerUser\": requestBody: content: \"application/json\": parse schema: parse schema: reference \"#/components/schemas/RegisterUser\": parse schema: channel: parse schema: displayName: parse schema: reference \"#/components/schemas/VideoChannel/properties/displayName\": resolve reference \"#/components/schemas/VideoChannel/properties/displayName\": schema not found"
}