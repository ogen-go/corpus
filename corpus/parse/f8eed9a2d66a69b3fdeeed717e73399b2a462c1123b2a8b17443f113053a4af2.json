{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/adwhit/hsr"
		},
		"file": {
			"name": "test-spec.yaml",
			"size": 0,
			"path": "test/test-spec.yaml",
			"byteSize": 6060,
			"content": "openapi: \"3.0.0\"\ninfo:\n  version: 1.0.0\n  title: Test\nservers:\n  - url: http://localhost:8000\n\npaths:\n  # Simplest possible route (?)\n  /status:\n    get:\n      operationId: get_status\n      responses:\n        '200':\n          description: \"Ok\"\n\n    post:\n      summary: Set The Status\n      description: I guess we are setting some kind of status\n      operationId: set_status\n      requestBody:\n        description: set status body\n        required: false\n        content:\n          application/json:\n            schema:\n              nullable: true\n              type: string\n      responses:\n        '200':\n          description: \"Things are OK\"\n          content:\n            application/json:\n              schema:\n                nullable: true\n                type: string\n\n  /twoPathParams/{my_name}/{myAge}:\n    get:\n      summary: echo name and age\n      operationId: two_path_params\n      parameters:\n        - name: my_name\n          in: path\n          required: true\n          description: User name\n          schema:\n            type: string\n        - name: myAge\n          in: path\n          required: true\n          description: User age\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Hello 200 response\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Hello\"\n\n  /twoQueryParams:\n    get:\n      summary: echo name and age\n      operationId: two_query_params\n      parameters:\n        - name: myName\n          in: query\n          required: true\n          description: User name\n          schema:\n            type: string\n        - name: my_age\n          in: query\n          required: false\n          description: User age\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Hello\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Hello\"\n\n  /justDefault:\n    get:\n      operationId: just_default\n      responses:\n        default:\n          description: \"Default\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Hello\"\n\n  /okErrorDefault:\n    get:\n      parameters:\n        - name: return_code\n          in: query\n          required: true\n          description: expected status code\n          schema:\n            type: integer\n      operationId: ok_error_default\n      responses:\n        '200':\n          description: \"Ok\"\n        '400':\n          description: \"Not Ok\"\n        default:\n          description: \"Default\"\n\n  /nestedResponseType:\n    get:\n      operationId: nestedResponse\n      responses:\n        '200':\n          title: OkNestedResponse\n          description: \"Ok\"\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - first\n                properties:\n                  first:\n                    title: FirstResponse\n                    type: object\n                    required:\n                      - second\n                    properties:\n                      second:\n                        type: object\n\n  /anythingGoes:\n    post:\n      operationId: anything_goes\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/OneOfTest'\n      responses:\n        '200':\n          description: \"Ok\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OneOfTest'\n\ncomponents:\n  schemas:\n    # just a boring, normal, not interesting struct\n    Hello:\n      description: Hello description\n      required:\n        - myName\n        - my_age\n      properties:\n        myName:\n          nullable: false\n          type: string\n        my_age:\n          nullable: true\n          type: integer\n\n    # test various combinations of nullable and required\n    NullableStruct:\n      # struct itself is nullable\n      description: This is how we represent a struct that is nullable\n      nullable: true\n      required:\n        - this\n        - flooglezingle\n      properties:\n        # not nullable, required\n        this:\n          type: string\n        # not nullable, not required\n        that:\n          nullable: false\n          type: integer\n        other:\n        # nullable, not required\n          nullable: true\n          type: array\n          items:\n            type: string\n        # nullable, required\n        flooglezingle:\n          nullable: true\n          type: boolean\n\n    Anything:\n      type: any\n\n    AllOfTest:\n      description: Test the AllOf struct generation\n      allOf:\n        - $ref: '#/components/schemas/Hello'\n        - type: object\n          required:\n            - height\n          properties:\n            height:\n              type: number\n            favourite_colour:\n              type: string\n            feet_info:\n              title: FeetInfo\n              required:\n                - number_of_toes\n                - webbed\n              properties:\n                number_of_toes:\n                  type: integer\n                eats_toenails:\n                  type: boolean\n                webbed:\n                  type: boolean\n                the_rest:\n                  $ref: '#/components/schemas/Anything'\n\n    OneOfTest:\n      description: Test the OneOf enum generation\n      oneOf:\n        - $ref: '#/components/schemas/Hello'\n        - $ref: '#/components/schemas/NullableStruct'\n        - $ref: '#/components/schemas/AllOfTest'\n        - type: array\n          items:\n            required:\n              - x\n            properties:\n              x:\n                type: number\n              y:\n                type: string\n\n\n    StringEnum:\n      type:\n        string\n      enum:\n        - \"foo\"\n        - \"bar\"\n        - \"baz-quxx\"\n\n    # HasAdditionalProps:\n    #   additionalProperties:\n    #     true\n\n    # HasADefault:\n    #   type: integer\n    #   default: 10\n",
			"canonicalURL": "/github.com/adwhit/hsr@5ef78b38050b201acbbae38cbcc66b800d088d17/-/blob/test/test-spec.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/adwhit/hsr/blob/5ef78b38050b201acbbae38cbcc66b800d088d17/test/test-spec.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"AllOfTest\": parse schema: allOf: [1]: parse schema: property \"feet_info\": parse schema: property \"the_rest\": at 1:248: parse schema: resolve \"#/components/schemas/Anything\": parse schema: unexpected schema type: \"any\""
}