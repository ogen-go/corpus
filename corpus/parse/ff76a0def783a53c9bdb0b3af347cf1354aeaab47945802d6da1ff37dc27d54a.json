{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Tufin/oasdiff"
		},
		"file": {
			"name": "home-iot-api-2.yaml",
			"size": 0,
			"path": "data/home-iot-api-2.yaml",
			"byteSize": 13835,
			"content": "openapi: 3.0.0\nservers:\n  # Added by API Auto Mocking Plugin\n  - description: SwaggerHub API Auto Mocking\n    url: https://virtserver.swaggerhub.com/home4984/API/1.0.0\ninfo:\n  version: \"1.0.0\"\n  title: home-iot-api\n  description: The API for the EatBacon IOT project\npaths:\n  /devices:\n    get:\n      tags:\n        - Device\n      description: returns all registered devices\n      operationId: getDevices\n      parameters:\n        - in: query\n          name: skip\n          description: number of records to skip\n          schema:\n            type: integer\n            format: int32\n        - in: query\n          name: limit\n          description: max number of records to return\n          schema:\n            type: integer\n            format: int32\n      responses:\n        '200':\n          description: All the devices\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n                  format: uri\n                  example: 'http://10.0.0.225:8080'\n    post:\n      tags:\n        - Device\n      operationId: register\n      responses:\n        '200':\n          description: successfully registered device\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DeviceRegistrationInfo'\n  '/lighting/dimmers/{deviceId}/{value}':\n    post:\n      tags:\n        - Z-Wave\n      operationId: setDimmer\n      parameters:\n        - name: deviceId\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: value\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int32\n            minimum: 0\n            maximum: 100\n      responses:\n        '200':\n          description: response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n      x-swagger-router-controller: ZWave\n  '/lighting/dimmers/{deviceId}/{value}/timer/{timeunit}':\n    post:\n      tags:\n        - Z-Wave\n      description: sets a dimmer to a specific value on a timer\n      operationId: setDimmerTimer\n      parameters:\n        - name: deviceId\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: value\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int32\n        - name: timeunit\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int32\n        - name: units\n          in: query\n          required: false\n          schema:\n            type: string\n            enum:\n              - seconds\n              - minutes\n              - milliseconds\n            default: milliseconds\n      responses:\n        '200':\n          description: response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n      x-swagger-router-controller: ZWave\n  '/lighting/switches/{deviceId}':\n    get:\n      tags:\n        - Z-Wave\n      operationId: getSwitchState\n      parameters:\n        - name: deviceId\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DeviceState'\n      x-swagger-router-controller: ZWave\n  '/lighting/switches/{deviceId}/{value}':\n    post:\n      tags:\n        - Z-Wave\n      operationId: setSwitch\n      parameters:\n        - name: deviceId\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: value\n          in: path\n          required: true\n          schema:\n            type: string\n            enum:\n              - true\n              - false\n      responses:\n        '200':\n          description: response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n      x-swagger-router-controller: ZWave\n  '/lighting/switches/{deviceId}/{value}/timer/{minutes}':\n    post:\n      tags:\n        - Z-Wave\n      description: sets a switch to a specific value on a timer\n      operationId: setSwitchTimer\n      parameters:\n        - name: deviceId\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: value\n          in: path\n          required: true\n          schema:\n            type: string\n            enum:\n              - true\n              - false\n        - name: minutes\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int32\n      responses:\n        '200':\n          description: response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n      x-swagger-router-controller: ZWave\n  /lightingSummary:\n    get:\n      tags:\n        - Z-Wave\n      operationId: getLightingSummary\n      responses:\n        '200':\n          description: ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LightingSummary'\n      x-swagger-router-controller: ZWave\n  /temperature:\n    get:\n      tags:\n        - Environment\n      operationId: temperatureSummary\n      responses:\n        '200':\n          description: ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TemperatureSummary'\n      x-swagger-router-controller: Environment\n  '/temperature/forecast/{days}':\n    get:\n      tags:\n        - Environment\n      operationId: getForecast\n      parameters:\n        - name: days\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int32\n      responses:\n        '200':\n          description: the forecast\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForecastResponse'\n      x-swagger-router-controller: Environment\n  '/temperature/{zoneId}':\n    get:\n      tags:\n        - Environment\n      operationId: getZoneTemperature\n      parameters:\n        - name: zoneId\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Zone temperature\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TemperatueZoneStatus'\n      x-swagger-router-controller: Environment\n  '/temperature/{zoneId}/heater':\n    get:\n      tags:\n        - Environment\n      description: gets the state of the heater\n      operationId: getHeaterState\n      parameters:\n        - name: zoneId\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: heater state\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HeaterState'\n      x-swagger-router-controller: Environment\n  '/temperature/{zoneId}/heater/{state}':\n    post:\n      tags:\n        - Environment\n      description: turns the heater on or off\n      operationId: setHeaterState\n      parameters:\n        - name: zoneId\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: state\n          in: path\n          required: true\n          schema:\n            type: string\n            enum:\n              - false\n              - true\n      responses:\n        '200':\n          description: Status of the operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n      x-swagger-router-controller: Environment\n  /zones:\n    get:\n      tags:\n        - Zones\n      operationId: getZones\n      responses:\n        '200':\n          description: ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n      x-swagger-router-controller: Zones\n  '/zones/{zoneId}/quiet':\n    get:\n      tags:\n        - Zones\n      operationId: quietZone\n      parameters:\n        - name: zoneId\n          in: path\n          required: true\n          schema:\n            type: string\n            enum:\n              - basement\n              - x:\n                  reuven\n              - second-floor\n      responses:\n        '200':\n          description: ok\n      x-swagger-router-controller: Zones\ncomponents:\n  schemas:\n    LightingSummary:\n      type: object\n      properties:\n        zones:\n          type: array\n          items:\n            $ref: '#/components/schemas/LightingZone'\n        zoneStatus:\n          type: array\n          items:\n            $ref: '#/components/schemas/LightingZoneStatus'\n      description: ok\n    LightingZone:\n      type: object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        deviceId:\n          type: integer\n          format: int32\n        deviceType:\n          type: string\n          enum:\n            - dimmer\n            - switch\n        zone:\n          type: string\n    LightingZoneStatus:\n      type: object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        lastUpdate:\n          type: string\n          format: date-time\n        level:\n          type: integer\n          format: int32\n      description: the status of the lighting zone.\n    TemperatureSummary:\n      type: object\n      properties:\n        zones:\n          type: array\n          items:\n            $ref: '#/components/schemas/TemperatureZone'\n        zoneStatus:\n          type: array\n          items:\n            $ref: '#/components/schemas/TemperatueZoneStatus'\n      description: ok\n    TemperatureZone:\n      type: object\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n          format: int32\n          description: the unique identifier for the zone\n        name:\n          type: string\n        inputPosition:\n          type: integer\n          format: int32\n        outputPosition:\n          type: integer\n          format: int32\n        zone:\n          type: string\n      description: a single temperature zone\n    TemperatueZoneStatus:\n      type: object\n      required:\n        - id\n        - timestamp\n        - value\n      properties:\n        id:\n          type: string\n          description: the unique identifier for the zone\n        name:\n          type: string\n          description: the name of the zone\n        value:\n          type: number\n          format: double\n          description: the temperature in the zone\n        units:\n          type: string\n          description: the temperature units\n          enum:\n            - celsius\n            - fahrenheit\n          default: fahrenheit\n        timestamp:\n          type: string\n          format: date-time\n          description: the timestamp when the temperature was measured\n      description: status of a single zone\n    ApiResponse:\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        message:\n          type: number\n          example: everything is ok\n    HeaterState:\n      type: object\n      properties:\n        id:\n          type: string\n        state:\n          type: string\n    DeviceState:\n      type: object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        lastUpdate:\n          type: string\n          format: date-time\n        level:\n          type: integer\n          format: int32\n    ForecastResponse:\n      type: object\n      properties:\n        city:\n          $ref: '#/components/schemas/City'\n        values:\n          type: array\n          items:\n            $ref: '#/components/schemas/Forecast'\n    Forecast:\n      type: object\n      properties:\n        date:\n          type: string\n          format: date-time\n        pressure:\n          type: number\n          format: double\n        humidity:\n          type: integer\n          format: int32\n        windSpeed:\n          type: number\n          format: double\n        clouds:\n          type: integer\n          format: int32\n        temperature:\n          $ref: '#/components/schemas/ForecastTemperature'\n        weather:\n          $ref: '#/components/schemas/WeatherForecast'\n    City:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n        lat:\n          type: number\n          format: double\n        lon:\n          type: number\n          format: double\n        country:\n          type: string\n    ForecastTemperature:\n      type: object\n      properties:\n        low:\n          type: number\n          format: double\n        high:\n          type: number\n          format: double\n        morning:\n          type: number\n          format: double\n        day:\n          type: number\n          format: double\n        evening:\n          type: number\n          format: double\n        night:\n          type: number\n          format: double\n    WeatherForecast:\n      type: object\n      properties:\n        summary:\n          type: string\n        description:\n          type: string\n        icon:\n          type: string\n    DeviceRegistrationInfo:\n      type: object\n      properties:\n        uri:\n          type: string\n          format: uri\n          example: 'http://10.0.0.221:8080'\n        id:\n          type: string\n          format: uuid\n          example: 0729a580-2240-11e6-9eb5-0002a5d5c51b"
		}
	},
	"Error": "parse: parse spec: paths: /zones/{zoneId}/quiet: get: operation \"quietZone\": parameters: parse parameter \"zoneId\": schema: parse enum values: parse value \"{\\\"x\\\":\\\"reuven\\\"}\": expected type \"string\", got \"object\""
}