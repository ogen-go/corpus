{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/splunk/splunk-cloud-sdk-python"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "splunk_sdk/catalog/v2beta1/openapi.yaml",
			"byteSize": 120965,
			"content": "components:\n  parameters:\n    ActionID:\n      description: ID of an Action.\n      in: path\n      name: actionid\n      required: true\n      schema:\n        format: mongo-object-id\n        type: string\n    AnnotationID:\n      description: ID of a annotation.\n      in: path\n      name: annotationid\n      required: true\n      schema:\n        format: mongo-object-id\n        type: string\n    AuthorizationHeader:\n      description: Access token provided by the user (obtained from a known identity\n        provider).\n      in: header\n      name: Authorization\n      required: true\n      schema:\n        pattern: ^Bearer .+\n        type: string\n    DashboardID:\n      description: ID of a dashboard.\n      in: path\n      name: dashboardid\n      required: true\n      schema:\n        format: mongo-object-id\n        type: string\n    DashboardResource:\n      description: ID or the resource name of a dashvboard. The resource name format\n        is module.dashboardname.\n      in: path\n      name: dashboardresource\n      required: true\n      schema:\n        type: string\n    DashboardResourceName:\n      description: The resource name of a dashvboard. The resource name format is\n        module.dashboardname.\n      in: path\n      name: dashboardresourcename\n      required: true\n      schema:\n        type: string\n    DatasetID:\n      description: ID of a Dataset.\n      in: path\n      name: datasetid\n      required: true\n      schema:\n        format: mongo-object-id\n        type: string\n    DatasetResource:\n      description: ID of a Dataset or the resource name of a dataset. For the default\n        module, the resource name format is datasetName. Otherwise, the resource name\n        format is module.datasetName.\n      in: path\n      name: datasetresource\n      required: true\n      schema:\n        type: string\n    DatasetResourceName:\n      description: The resource name of a dataset. For the default module, the resource\n        name format is datasetName. Otherwise, the resource name format is module.datasetName.\n      in: path\n      name: datasetresourcename\n      required: true\n      schema:\n        type: string\n    FieldID:\n      description: ID of a Field.\n      in: path\n      name: fieldid\n      required: true\n      schema:\n        format: mongo-object-id\n        type: string\n    JobResource:\n      description: Sid of a Job Dataset or ID of a Dataset or the resource name of\n        a dataset. For the default module, the resource name format is datasetName.\n        Otherwise, the resource name format is module.datasetName.\n      in: path\n      name: jobresource\n      required: true\n      schema:\n        type: string\n    RelationshipID:\n      description: ID of a relationship.\n      in: path\n      name: relationshipid\n      required: true\n      schema:\n        format: mongo-object-id\n        type: string\n    RuleID:\n      description: ID of a Field.\n      in: path\n      name: ruleid\n      required: true\n      schema:\n        format: mongo-object-id\n        type: string\n    RuleResource:\n      description: The ID or resource name of a rule. For the default module, the\n        resource name format is ruleName. Otherwise, the resource name format is module.ruleName.\n      in: path\n      name: ruleresource\n      required: true\n      schema:\n        type: string\n    RuleResourceName:\n      description: The resource name of a rule. For the default module, the resource\n        name format is ruleName. Otherwise, the resource name format is module.ruleName.\n      in: path\n      name: ruleresourcename\n      required: true\n      schema:\n        type: string\n    Sid:\n      description: Sid of a Job Dataset.\n      in: path\n      name: sid\n      required: true\n      schema:\n        type: string\n    Tenant:\n      description: The tenant name.\n      in: path\n      name: tenant\n      required: true\n      schema:\n        type: string\n  schemas:\n    Action:\n      description: A complete action as rendered in POST, PATCH, and GET responses.\n      discriminator:\n        mapping:\n          ALIAS: '#/components/schemas/AliasAction'\n          AUTOKV: '#/components/schemas/AutoKVAction'\n          EVAL: '#/components/schemas/EvalAction'\n          LOOKUP: '#/components/schemas/LookupAction'\n          REGEX: '#/components/schemas/RegexAction'\n        propertyName: kind\n      oneOf:\n      - $ref: '#/components/schemas/AliasAction'\n      - $ref: '#/components/schemas/AutoKVAction'\n      - $ref: '#/components/schemas/EvalAction'\n      - $ref: '#/components/schemas/LookupAction'\n      - $ref: '#/components/schemas/RegexAction'\n    ActionCommon:\n      description: Properties common across all action kinds as rendered in POST,\n        PATCH, and GET responses and alos for creating a new action using a POST request.\n      properties:\n        id:\n          description: A unique action ID.\n          example: 5bc3c0cdfee0d854a4188132\n          format: mongo-object-id\n          maxLength: 24\n          minLength: 24\n          type: string\n        ruleid:\n          description: The rule that this action is part of.\n          example: 5bc1a7a0fee0d854a418812e\n          format: mongo-object-id\n          maxLength: 24\n          minLength: 24\n          type: string\n        version:\n          description: The catalog version.\n          minimum: 1\n          type: integer\n      type: object\n    ActionPATCH:\n      description: Property values to be set in an existing action using a PATCH request.\n      oneOf:\n      - $ref: '#/components/schemas/AliasActionPATCH'\n      - $ref: '#/components/schemas/AutoKVActionPATCH'\n      - $ref: '#/components/schemas/EvalActionPATCH'\n      - $ref: '#/components/schemas/LookupActionPATCH'\n      - $ref: '#/components/schemas/RegexActionPATCH'\n      type: object\n    ActionPATCHCommon:\n      description: Property values common across action kinds for setting existing\n        actions using a PATCH request.\n      properties:\n        owner:\n          description: The name of the user who owns this action. This value is obtained\n            from the bearer token if not present.\n          example: janedoe\n          type: string\n        version:\n          description: The catalog version.\n          minimum: 1\n          type: integer\n      type: object\n    ActionPOST:\n      description: Initial property values for creating a new action using a POST\n        request.\n      discriminator:\n        mapping:\n          ALIAS: '#/components/schemas/AliasActionPOST'\n          AUTOKV: '#/components/schemas/AutoKVActionPOST'\n          EVAL: '#/components/schemas/EvalActionPOST'\n          LOOKUP: '#/components/schemas/LookupActionPOST'\n          REGEX: '#/components/schemas/RegexActionPOST'\n        propertyName: kind\n      oneOf:\n      - $ref: '#/components/schemas/AliasActionPOST'\n      - $ref: '#/components/schemas/AutoKVActionPOST'\n      - $ref: '#/components/schemas/EvalActionPOST'\n      - $ref: '#/components/schemas/LookupActionPOST'\n      - $ref: '#/components/schemas/RegexActionPOST'\n      type: object\n    AliasAction:\n      allOf:\n      - $ref: '#/components/schemas/MetadataProperties'\n      - $ref: '#/components/schemas/ActionCommon'\n      - $ref: '#/components/schemas/AliasActionProperties'\n      - $ref: '#/components/schemas/AppClientIDProperties'\n      description: A complete alias action as rendered in POST, PATCH, and GET responses.\n      required:\n      - kind\n      - field\n      - alias\n      - id\n      - ruleid\n      type: object\n    AliasActionKind:\n      description: The alias action kind.\n      enum:\n      - ALIAS\n      type: string\n    AliasActionPATCH:\n      allOf:\n      - $ref: '#/components/schemas/ActionPATCHCommon'\n      - $ref: '#/components/schemas/AliasActionProperties'\n      description: Property values for setting existing alias actions using a PATCH\n        request.\n    AliasActionPOST:\n      allOf:\n      - $ref: '#/components/schemas/ActionCommon'\n      - $ref: '#/components/schemas/AliasActionProperties'\n      description: Initial property values for creating a new alias action using a\n        POST request.\n      required:\n      - kind\n      - field\n      - alias\n      type: object\n    AliasActionProperties:\n      description: Properties of alias actions which may be read, set, and changed\n        through the API. Implementation detail of ActionPOST, ActionPOST, and Action,\n        do not use directly.\n      properties:\n        alias:\n          description: The alias name.\n          example: newFieldName\n          type: string\n        field:\n          description: The name of the field to be aliased.\n          example: existingFieldName\n          type: string\n        kind:\n          $ref: '#/components/schemas/AliasActionKind'\n      type: object\n    Annotation:\n      additionalProperties:\n        type: string\n      allOf:\n      - $ref: '#/components/schemas/AnnotationsProperties'\n      - $ref: '#/components/schemas/MetadataProperties'\n      - $ref: '#/components/schemas/AppClientIDProperties'\n      - properties:\n          id:\n            description: A unique annotation ID.\n            example: 5bc1a6fefee0d854a4188125\n            format: mongo-object-id\n            maxLength: 24\n            minLength: 24\n            type: string\n        type: object\n      description: A complete annotation as rendered in POST, PATCH, and GET responses.\n        Key:Value pairs in addition to the defined properties will become annotation\n        tags\n      required:\n      - id\n      - annotationtypeid\n      - owner\n      - created\n      - modified\n      - createdby\n      - modifiedby\n      - version\n      - properties\n      type: object\n    AnnotationPOST:\n      additionalProperties:\n        type: string\n      allOf:\n      - $ref: '#/components/schemas/AnnotationsProperties'\n      - $ref: '#/components/schemas/AnnotationTypeResourceName'\n      - properties:\n          id:\n            description: A unique annotation ID. If not specified, an auto generated\n              ID is created.\n            example: 5bc1a6fefee0d854a4188125\n            format: mongo-object-id\n            maxLength: 24\n            minLength: 24\n            type: string\n        type: object\n      description: The properties required to create a new annotation using a POST\n        request. Key:Value pairs in addition to the defined properties will become\n        annotation tags\n      required:\n      - annotationtypeid\n      type: object\n    AnnotationTypeResourceName:\n      description: The resource name of an AnnotationType. For the default module,\n        the resource name format is annotationTypeName. Otherwise, the resource name\n        format is module.annotationTypeName.\n      properties:\n        annotationtyperesourcename:\n          description: Resource name of the annotation type\n          example: catalog.favorite\n          type: string\n      type: string\n    AnnotationsProperties:\n      description: Properties of annotations which are read through the API.\n      properties:\n        annotationtypeid:\n          description: The annotation type ID.\n          example: 5bc1a6fefee0d854a4188125\n          format: mongo-object-id\n          maxLength: 24\n          minLength: 24\n          type: string\n        dashboardid:\n          description: The dashboard ID.\n          example: 5bc1a6fefee0d854a4188125\n          format: mongo-object-id\n          maxLength: 24\n          minLength: 24\n          type: string\n        datasetid:\n          description: The dataset ID. Null if not annotating a dataset.\n          example: 5bc1a6fefee0d854a4188125\n          format: mongo-object-id\n          maxLength: 24\n          minLength: 24\n          type: string\n        fieldid:\n          description: The field ID. Null if not annotating a field.\n          example: 5bc1a6fefee0d854a4188125\n          format: mongo-object-id\n          maxLength: 24\n          minLength: 24\n          type: string\n        relationshipid:\n          description: The relationship ID. Null if not annotating a relationship.\n          example: 5bc1a6fefee0d854a4188125\n          format: mongo-object-id\n          maxLength: 24\n          minLength: 24\n          type: string\n      type: object\n    AppClientIDProperties:\n      description: Appclientidcreatedby, appclientidmodifiedby app clientid properties\n        for inclusion in othert objects.\n      properties:\n        appclientidcreatedby:\n          description: AppClinetId of the creator app of the dataset.\n          type: string\n        appclientidmodifiedby:\n          description: AppClinetId of the modifier app of the dataset.\n          type: string\n      type: object\n    AutoKVAction:\n      allOf:\n      - $ref: '#/components/schemas/MetadataProperties'\n      - $ref: '#/components/schemas/ActionCommon'\n      - $ref: '#/components/schemas/AutoKVActionProperties'\n      - $ref: '#/components/schemas/AppClientIDProperties'\n      description: A complete autokv action as rendered in POST, PATCH, and GET responses.\n      required:\n      - kind\n      - mode\n      - id\n      - ruleid\n      type: object\n    AutoKVActionKind:\n      description: The autokv action kind.\n      enum:\n      - AUTOKV\n      type: string\n    AutoKVActionPATCH:\n      allOf:\n      - $ref: '#/components/schemas/ActionPATCHCommon'\n      - $ref: '#/components/schemas/AutoKVActionProperties'\n      description: Property values for setting existing autokv actions using a PATCH\n        request.\n    AutoKVActionPOST:\n      allOf:\n      - $ref: '#/components/schemas/ActionCommon'\n      - $ref: '#/components/schemas/AutoKVActionProperties'\n      description: Initial property values for creating a new autokv action using\n        a POST request.\n      required:\n      - kind\n      - mode\n      type: object\n    AutoKVActionProperties:\n      description: Properties of auto kv actions which may be read, set, and changed\n        through the API. Implementation detail of ActionPOST, ActionPOST, and Action,\n        do not use directly.\n      properties:\n        kind:\n          $ref: '#/components/schemas/AutoKVActionKind'\n        mode:\n          description: The autokv action mode.\n          type: string\n      type: object\n    CatalogDataset:\n      allOf:\n      - $ref: '#/components/schemas/CatalogDatasetProperties'\n      - $ref: '#/components/schemas/MetadataProperties'\n      - $ref: '#/components/schemas/DatasetCommon'\n      description: A complete catalog dataset as rendered in POST, PATCH, and GET\n        responses.\n      required:\n      - kind\n      type: object\n    CatalogDatasetKind:\n      description: The dataset kind.\n      enum:\n      - catalog\n      type: string\n    CatalogDatasetProperties:\n      description: Properties of catalog datasets which can be read, set, and changed\n        through the API.\n      properties:\n        kind:\n          $ref: '#/components/schemas/CatalogDatasetKind'\n        url:\n          description: Internal use only.\n          type: string\n    Dashboard:\n      allOf:\n      - properties:\n          id:\n            description: A unique dashboard ID. Random ID used if not provided.\n            example: 5bbf6d876d059d0b9ea8da31\n            format: mongo-object-id\n            maxLength: 24\n            minLength: 24\n            type: string\n        type: object\n      - $ref: '#/components/schemas/MetadataProperties'\n      - $ref: '#/components/schemas/DashboardMutable'\n      - $ref: '#/components/schemas/AppClientIDProperties'\n      description: A complete dashboard as rendered in POST, PATCH, and GET responses.\n      required:\n      - definition\n      - id\n      - module\n      - name\n      type: object\n    DashboardMutable:\n      description: A list of the mutable dashboard fields.\n      properties:\n        definition:\n          description: The JSON dashboard definition.\n          example: '{ \"dataSources\": {}, \"inputs\": {}, \"layout\": {}, \"title\": \"Title\n            for dashboard\", \"description\": \"Description for dashboard\", \"visualizations\":\n            {} }'\n          type: string\n        isactive:\n          description: Whether the dashboard is active or not.\n          example: true\n          type: boolean\n        module:\n          description: The module that contains the dashboard.\n          example: nameofmodule\n          maxLength: 100\n          type: string\n        name:\n          description: The dashboard name. Dashboard names must be unique within each\n            tenant.\n          example: nameofdashboard\n          maxLength: 100\n          type: string\n        version:\n          description: The version of the dashboard.\n          example: 1\n          minimum: 1\n          type: integer\n      type: object\n    DashboardPATCH:\n      allOf:\n      - $ref: '#/components/schemas/DashboardMutable'\n      description: Values for updating a dashboard using a PATCH request.\n      type: object\n    DashboardPOST:\n      allOf:\n      - properties:\n          id:\n            description: A unique dashboard ID. Random ID used if not provided.\n            example: 5bbf6d876d059d0b9ea8da31\n            format: mongo-object-id\n            maxLength: 24\n            minLength: 24\n            type: string\n        type: object\n      - $ref: '#/components/schemas/DashboardMutable'\n      description: Initial values for creating a new dashboard using a POST request.\n      required:\n      - definition\n      - module\n      - name\n      type: object\n    Dataset:\n      description: A complete dataset as rendered in POST, PATCH responses.\n      discriminator:\n        mapping:\n          federated: '#/components/schemas/FederatedDataset'\n          import: '#/components/schemas/ImportDataset'\n          index: '#/components/schemas/IndexDataset'\n          kvcollection: '#/components/schemas/KVCollectionDataset'\n          lookup: '#/components/schemas/LookupDataset'\n          metric: '#/components/schemas/MetricDataset'\n          view: '#/components/schemas/ViewDataset'\n        propertyName: kind\n      oneOf:\n      - $ref: '#/components/schemas/LookupDataset'\n      - $ref: '#/components/schemas/IndexDataset'\n      - $ref: '#/components/schemas/ViewDataset'\n      - $ref: '#/components/schemas/FederatedDataset'\n      - $ref: '#/components/schemas/ImportDataset'\n      - $ref: '#/components/schemas/MetricDataset'\n      - $ref: '#/components/schemas/KVCollectionDataset'\n    DatasetCommon:\n      description: Properties that are common across all Dataset kinds rendered in\n        POST, PATCH, and GET responses.\n      properties:\n        appclientidcreatedby:\n          description: AppClinetId of the creator app of the dataset.\n          type: string\n        appclientidmodifiedby:\n          description: AppClinetId of the modifier app of the dataset.\n          type: string\n        description:\n          description: Detailed description of the dataset.\n          type: string\n        id:\n          description: A unique dataset ID.\n          example: 5bbf6d876d059d0b9ea8da3e\n          format: mongo-object-id\n          maxLength: 24\n          minLength: 24\n          type: string\n        internalname:\n          description: The dataset name qualified by the module name, primarily used\n            to distinguish between index/metric versus other datasets. Index/metric\n            datasets have a distinct underscore separator (_____) between name and\n            module. Internal use only.\n          example: nameOfModule_____nameOfDataset\n          readOnly: true\n          type: string\n        module:\n          description: The name of the module that contains the dataset.\n          example: nameOfModule\n          maxLength: 100\n          type: string\n        name:\n          description: The dataset name. Dataset names must be unique within each\n            module.\n          example: nameOfDataset\n          maxLength: 100\n          type: string\n        resourcename:\n          description: The dataset name qualified by the module name.\n          example: nameOfModule.nameOfDataset\n          maxLength: 201\n          type: string\n        summary:\n          description: Summary of the dataset's purpose.\n          type: string\n        title:\n          description: The title of the dataset.  Does not have to be unique.\n          example: titleOfDataset\n          type: string\n        version:\n          description: The catalog version.\n          minimum: 1\n          type: integer\n      required:\n      - id\n      - module\n      - name\n      - resourcename\n      type: object\n    DatasetGet:\n      description: A complete dataset as rendered in GET responses.\n      discriminator:\n        mapping:\n          catalog: '#/components/schemas/CatalogDataset'\n          federated: '#/components/schemas/FederatedDataset'\n          import: '#/components/schemas/ImportDataset'\n          index: '#/components/schemas/IndexDataset'\n          job: '#/components/schemas/JobDatasetGET'\n          kvcollection: '#/components/schemas/KVCollectionDataset'\n          lookup: '#/components/schemas/LookupDataset'\n          metric: '#/components/schemas/MetricDataset'\n          splv1sink: '#/components/schemas/Splv1sinkDataset'\n          view: '#/components/schemas/ViewDataset'\n        propertyName: kind\n      oneOf:\n      - $ref: '#/components/schemas/LookupDataset'\n      - $ref: '#/components/schemas/IndexDataset'\n      - $ref: '#/components/schemas/ViewDataset'\n      - $ref: '#/components/schemas/FederatedDataset'\n      - $ref: '#/components/schemas/ImportDataset'\n      - $ref: '#/components/schemas/JobDatasetGET'\n      - $ref: '#/components/schemas/MetricDataset'\n      - $ref: '#/components/schemas/KVCollectionDataset'\n      - $ref: '#/components/schemas/CatalogDataset'\n      - $ref: '#/components/schemas/Splv1sinkDataset'\n    DatasetImportedBy:\n      properties:\n        module:\n          description: The module that is importing the dataset.\n          example: nameOfModule\n          maxLength: 100\n          type: string\n        name:\n          description: The dataset name.\n          example: nameOfDataset\n          maxLength: 100\n          type: string\n        owner:\n          description: The dataset owner.\n          example: janedoe\n          maxLength: 24\n          type: string\n      required:\n      - module\n      - owner\n      type: object\n    DatasetPATCH:\n      description: Property values to be set in an existing dataset using a PATCH\n        request.\n      oneOf:\n      - $ref: '#/components/schemas/LookupDatasetPATCH'\n      - $ref: '#/components/schemas/IndexDatasetPATCH'\n      - $ref: '#/components/schemas/ViewDatasetPATCH'\n      - $ref: '#/components/schemas/FederatedDatasetPATCH'\n      - $ref: '#/components/schemas/ImportDatasetPATCH'\n      - $ref: '#/components/schemas/MetricDatasetPATCH'\n      - $ref: '#/components/schemas/KVCollectionDatasetPATCH'\n    DatasetPATCHCommon:\n      description: Properties that are common across all Dataset kinds to be set in\n        an existing dataset using a PATCH request.\n      properties:\n        module:\n          description: The name of module to reassign dataset into.\n          example: nameOfModule\n          maxLength: 100\n          type: string\n        name:\n          description: The dataset name. Dataset names must be unique within each\n            module.\n          example: nameOfDataset\n          maxLength: 100\n          type: string\n        owner:\n          description: The name of the dataset owner. This value is obtained from\n            the bearer token.\n          example: johndoe\n          maxLength: 24\n          type: string\n      type: object\n    DatasetPOST:\n      description: Initial property values for creating a new action using a POST\n        request.\n      discriminator:\n        mapping:\n          federated: '#/components/schemas/FederatedDatasetPOST'\n          import: '#/components/schemas/ImportDatasetPOST'\n          index: '#/components/schemas/IndexDatasetPOST'\n          kvcollection: '#/components/schemas/KVCollectionDatasetPOST'\n          lookup: '#/components/schemas/LookupDatasetPOST'\n          metric: '#/components/schemas/MetricDatasetPOST'\n          view: '#/components/schemas/ViewDatasetPOST'\n        propertyName: kind\n      oneOf:\n      - $ref: '#/components/schemas/LookupDatasetPOST'\n      - $ref: '#/components/schemas/IndexDatasetPOST'\n      - $ref: '#/components/schemas/ViewDatasetPOST'\n      - $ref: '#/components/schemas/FederatedDatasetPOST'\n      - $ref: '#/components/schemas/ImportDatasetPOST'\n      - $ref: '#/components/schemas/MetricDatasetPOST'\n      - $ref: '#/components/schemas/KVCollectionDatasetPOST'\n    DatasetPOSTCommon:\n      description: Properties that are common across all Dataset kinds for creating\n        a new dataset using a POST request.\n      properties:\n        fields:\n          description: The fields to be associated with this dataset.\n          items:\n            $ref: '#/components/schemas/FieldPOST'\n          type: array\n        id:\n          description: A unique dataset ID. Random ID used if not provided.\n          example: 5bc3c0cdfee0d854a4188132\n          format: mongo-object-id\n          maxLength: 24\n          minLength: 24\n          type: string\n        module:\n          description: The name of the module to create the new dataset in.\n          example: nameOfModule\n          maxLength: 100\n          type: string\n        name:\n          description: The dataset name. Dataset names must be unique within each\n            module.\n          example: nameOfDataset\n          maxLength: 100\n          type: string\n      required:\n      - name\n      type: object\n    DateMetadataProperties:\n      description: Created and Modified date-time properties for inclusion in other\n        objects.\n      properties:\n        created:\n          description: The date and time object was created.\n          example: \"2018-10-14 10:18:53.000417\"\n          pattern: '[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) (2[0-3]|[01][0-9]):[0-5][0-9]:[0-5][0-9].[0-9]{6}'\n          readOnly: true\n          type: string\n        modified:\n          description: The date and time object was modified.\n          example: \"2018-10-11 07:56:35.000770\"\n          pattern: '[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) (2[0-3]|[01][0-9]):[0-5][0-9]:[0-5][0-9].[0-9]{6}'\n          readOnly: true\n          type: string\n      required:\n      - created\n      - modified\n      type: object\n    EvalAction:\n      allOf:\n      - $ref: '#/components/schemas/MetadataProperties'\n      - $ref: '#/components/schemas/ActionCommon'\n      - $ref: '#/components/schemas/EvalActionProperties'\n      - $ref: '#/components/schemas/AppClientIDProperties'\n      description: A complete eval action as rendered in POST, PATCH, and GET responses.\n      required:\n      - kind\n      - field\n      - expression\n      - id\n      - ruleid\n      type: object\n    EvalActionKind:\n      description: The eval action kind.\n      enum:\n      - EVAL\n      type: string\n    EvalActionPATCH:\n      allOf:\n      - $ref: '#/components/schemas/ActionPATCHCommon'\n      - $ref: '#/components/schemas/EvalActionProperties'\n      description: Property values for setting existing eval actions using a PATCH\n        request.\n    EvalActionPOST:\n      allOf:\n      - $ref: '#/components/schemas/ActionCommon'\n      - $ref: '#/components/schemas/EvalActionProperties'\n      description: Initial property values for creating a new eval action using a\n        POST request.\n      required:\n      - kind\n      - field\n      - expression\n      type: object\n    EvalActionProperties:\n      description: Properties of eval actions which may be read, set, and changed\n        through the API. Implementation detail of ActionPOST, ActionPOST, and Action,\n        do not use directly.\n      properties:\n        expression:\n          description: The EVAL expression that calculates the field.\n          type: string\n        field:\n          description: The name of the field that is added or modified by the EVAL\n            expression.\n          example: nameOfNewField\n          type: string\n        kind:\n          $ref: '#/components/schemas/EvalActionKind'\n      type: object\n    FederatedDataset:\n      allOf:\n      - $ref: '#/components/schemas/FederatedDatasetProperties'\n      - $ref: '#/components/schemas/MetadataProperties'\n      - $ref: '#/components/schemas/DatasetCommon'\n      description: A complete federated dataset as rendered in POST, PATCH, and GET\n        responses.\n      required:\n      - kind\n      - federatedConnection\n      - federatedDataset\n      - federatedDatasetKind\n      type: object\n    FederatedDatasetKind:\n      description: The dataset kind.\n      enum:\n      - federated\n      type: string\n    FederatedDatasetPATCH:\n      allOf:\n      - $ref: '#/components/schemas/FederatedDatasetProperties'\n      - $ref: '#/components/schemas/DatasetPATCHCommon'\n      description: Property values to be set in an existing federated dataset using\n        a PATCH request.\n    FederatedDatasetPOST:\n      allOf:\n      - $ref: '#/components/schemas/FederatedDatasetProperties'\n      - $ref: '#/components/schemas/DatasetPOSTCommon'\n      description: Initial property values for creating a new federated dataset using\n        a POST request.\n      required:\n      - kind\n      - federatedConnection\n      - federatedDataset\n      - federatedDatasetKind\n      type: object\n    FederatedDatasetProperties:\n      description: Properties of job datasets which may be read, set, and changed\n        through the API. Implementation detail of DatasetPOST, DatasetPATCH, and Dataset,\n        do not use directly.\n      properties:\n        federatedConnection:\n          description: Connection information to connect to remote federated connection.\n          type: string\n        federatedDataset:\n          description: Dataset information in the remote instance.\n          type: string\n        federatedDatasetKind:\n          description: Dataset kind information in the remote instance.\n          type: string\n        kind:\n          $ref: '#/components/schemas/FederatedDatasetKind'\n      type: object\n    Field:\n      allOf:\n      - properties:\n          datasetid:\n            description: The dataset that the field is part of.\n            example: 5bc1a6fefee0d854a4188125\n            format: mongo-object-id\n            maxLength: 24\n            minLength: 24\n            type: string\n          id:\n            description: The unique ID of this field.\n            example: 5bc1a7a0fee0d854a418812e\n            format: mongo-object-id\n            maxLength: 24\n            minLength: 24\n            type: string\n        type: object\n      - $ref: '#/components/schemas/FieldProperties'\n      - $ref: '#/components/schemas/DateMetadataProperties'\n      - $ref: '#/components/schemas/AppClientIDProperties'\n      description: A complete field as rendered in POST, PATCH, and GET responses.\n      required:\n      - id\n      - datasetid\n      - name\n      - datatype\n      - fieldtype\n      - prevalence\n      - created\n      - modified\n      type: object\n    FieldDataType:\n      description: The type of data in the field. Must be one of the valid values.\n      enum:\n      - DATE\n      - NUMBER\n      - OBJECT_ID\n      - STRING\n      - UNKNOWN\n      type: string\n    FieldPATCH:\n      allOf:\n      - $ref: '#/components/schemas/FieldProperties'\n      description: Property values to be set in an existing field using a PATCH request.\n      type: object\n    FieldPOST:\n      allOf:\n      - $ref: '#/components/schemas/FieldProperties'\n      description: Initial property values for creating a new field using a POST request.\n      required:\n      - name\n      type: object\n    FieldPrevalence:\n      description: How frequent the field appears in the dataset. Must be one of the\n        valid values.\n      enum:\n      - ALL\n      - SOME\n      - UNKNOWN\n      type: string\n    FieldProperties:\n      description: Properties of fields which can be read, set, and changed through\n        the API. Implementation detail of FieldPOST, FieldPATCH, and Field, do not\n        use directly.\n      properties:\n        datatype:\n          $ref: '#/components/schemas/FieldDataType'\n        description:\n          description: The field description.\n          example: Count of all the users in the request\n          type: string\n        fieldtype:\n          $ref: '#/components/schemas/FieldType'\n        indexed:\n          description: Whether or not the field has been indexed.\n          type: boolean\n        name:\n          description: The field name.\n          example: nameOfField\n          maxLength: 100\n          type: string\n        prevalence:\n          $ref: '#/components/schemas/FieldPrevalence'\n        summary:\n          description: The field summary.\n          example: Count of the users\n          type: string\n        title:\n          description: The field title.\n          example: User Count\n          type: string\n    FieldType:\n      description: The type of field. Must be one of the valid values.\n      enum:\n      - DIMENSION\n      - MEASURE\n      - UNKNOWN\n      type: string\n    ImportDataset:\n      allOf:\n      - $ref: '#/components/schemas/ImportDatasetByNameProperties'\n      - $ref: '#/components/schemas/MetadataProperties'\n      - $ref: '#/components/schemas/DatasetCommon'\n      description: A complete import dataset as rendered in POST, PATCH, and GET responses.\n      required:\n      - kind\n      - sourceName\n      - sourceModule\n      type: object\n    ImportDatasetByIdPOST:\n      allOf:\n      - $ref: '#/components/schemas/ImportDatasetByIdProperties'\n      - $ref: '#/components/schemas/DatasetPOSTCommon'\n      description: Initial property values for creating a new import dataset by sourceId\n        using a POST request.\n      required:\n      - kind\n      - sourceId\n      type: object\n    ImportDatasetByIdProperties:\n      description: Initial property values for creating a new import dataset by sourceId\n        using a POST request.\n      properties:\n        kind:\n          $ref: '#/components/schemas/ImportDatasetKind'\n        sourceId:\n          description: The dataset ID being imported.\n          example: 5bbf6d876d059d0b9ea8da3e\n          format: mongo-object-id\n          maxLength: 24\n          minLength: 24\n          type: string\n      type: object\n    ImportDatasetByNamePOST:\n      allOf:\n      - $ref: '#/components/schemas/ImportDatasetByNameProperties'\n      - $ref: '#/components/schemas/DatasetPOSTCommon'\n      description: Initial property values for creating a new import dataset by sourceName\n        and sourceModule using a POST request.\n      required:\n      - kind\n      - sourceModule\n      - sourceName\n      type: object\n    ImportDatasetByNameProperties:\n      description: Properties of import datasets which may be read, set, and changed\n        through the API. Implementation detail of DatasetPOST, DatasetPATCH, and Dataset,\n        do not use directly.\n      properties:\n        kind:\n          $ref: '#/components/schemas/ImportDatasetKind'\n        sourceModule:\n          description: The dataset module being imported.\n          example: nameOfModule\n          type: string\n        sourceName:\n          description: The dataset name being imported.\n          example: nameOfIndex\n          type: string\n      type: object\n    ImportDatasetKind:\n      description: The dataset kind.\n      enum:\n      - import\n      type: string\n    ImportDatasetPATCH:\n      allOf:\n      - $ref: '#/components/schemas/DatasetPATCHCommon'\n      description: Property values to be set in an existing import dataset using a\n        PATCH request.\n    ImportDatasetPOST:\n      description: Initial property values for creating a new import dataset using\n        a POST request.\n      oneOf:\n      - $ref: '#/components/schemas/ImportDatasetByIdPOST'\n      - $ref: '#/components/schemas/ImportDatasetByNamePOST'\n    ImportDatasetProperties:\n      description: Properties of import datasets which may be read, set, and changed\n        through the API. Implementation detail of DatasetPOST, DatasetPATCH, and Dataset,\n        do not use directly.\n      oneOf:\n      - properties:\n          sourceModule:\n            description: The dataset module being imported.\n            example: nameOfModule\n            type: string\n          sourceName:\n            description: The dataset name being imported.\n            example: nameOfIndex\n            type: string\n        required:\n        - sourceName\n        - sourceModule\n        type: object\n      - properties:\n          sourceId:\n            description: The dataset ID being imported.\n            example: 5bbf6d876d059d0b9ea8da3e\n            format: mongo-object-id\n            maxLength: 24\n            minLength: 24\n            type: string\n        required:\n        - sourceId\n        type: object\n      properties:\n        kind:\n          enum:\n          - import\n          type: string\n      type: object\n    IndexDataset:\n      allOf:\n      - $ref: '#/components/schemas/IndexDatasetProperties'\n      - $ref: '#/components/schemas/IndexDatasetReadOnlyProperties'\n      - $ref: '#/components/schemas/MetadataProperties'\n      - $ref: '#/components/schemas/DatasetCommon'\n      description: A complete index dataset as rendered in POST, PATCH, and GET responses.\n      required:\n      - kind\n      - disabled\n      type: object\n    IndexDatasetKind:\n      description: The dataset kind.\n      enum:\n      - index\n      type: string\n    IndexDatasetPATCH:\n      allOf:\n      - $ref: '#/components/schemas/IndexDatasetProperties'\n      - $ref: '#/components/schemas/DatasetPATCHCommon'\n      description: Property values to be set in an existing index dataset using a\n        PATCH request.\n    IndexDatasetPOST:\n      allOf:\n      - $ref: '#/components/schemas/IndexDatasetProperties'\n      - $ref: '#/components/schemas/DatasetPOSTCommon'\n      description: Initial property values for creating a new index dataset using\n        a POST request.\n      required:\n      - kind\n      - disabled\n      type: object\n    IndexDatasetProperties:\n      description: Properties of job datasets which may be read, set, and changed\n        through the API. Implementation detail of DatasetPOST, DatasetPATCH, and Dataset,\n        do not use directly.\n      properties:\n        disabled:\n          description: Specifies whether or not the Splunk index is disabled.\n          type: boolean\n        frozenTimePeriodInSecs:\n          description: The frozenTimePeriodInSecs to use for the index\n          type: integer\n        kind:\n          $ref: '#/components/schemas/IndexDatasetKind'\n      type: object\n    IndexDatasetReadOnlyProperties:\n      description: Properties of index datasets which can only be read through the\n        API.\n      properties:\n        earliestEventTime:\n          description: The timestamp, in seconds, of the earliest event. The timestamp\n            is in UNIX time.\n          type: string\n        earliestIngestTime:\n          description: The earliest index time for any of the events in this index.\n          type: string\n        kind:\n          $ref: '#/components/schemas/IndexDatasetKind'\n        latestEventTime:\n          description: The timestamp, in seconds, of the latest event. The timestamp\n            is in UNIX time.\n          type: string\n        latestIngestTime:\n          description: The latest index time for any of the events in this index.\n          type: string\n        latestMetadataUpdateTime:\n          description: The latest time that the index metadata was refreshed.\n          type: string\n        totalEventCount:\n          description: The number of events in the index.\n          format: int64\n          type: integer\n        totalSize:\n          description: The raw size, in bytes, of the uncompressed data in the indexers.\n          format: int64\n          type: integer\n      type: object\n    JobDataset:\n      allOf:\n      - $ref: '#/components/schemas/JobDatasetProperties'\n      - $ref: '#/components/schemas/MetadataProperties'\n      - $ref: '#/components/schemas/DatasetCommon'\n      - $ref: '#/components/schemas/JobDatasetInternalProperties'\n      description: A complete job dataset as rendered in POST, PATCH, and GET responses.\n      required:\n      - kind\n      - sid\n      - query\n      - sql\n      - resolvedEarliest\n      - resolvedLatest\n      - dispatchTime\n      - completionTime\n      - deleteTime\n      - parameters\n      type: object\n    JobDatasetEventSummaryAvailableStatus:\n      description: Availability of event summary.\n      enum:\n      - true\n      - false\n      - UNKNOWN\n      type: string\n    JobDatasetFieldSummaryAvailableStatus:\n      description: Availability of field summary.\n      enum:\n      - true\n      - false\n      - UNKNOWN\n      type: string\n    JobDatasetGET:\n      allOf:\n      - $ref: '#/components/schemas/JobDatasetProperties'\n      - $ref: '#/components/schemas/DatasetPOSTCommon'\n      description: Job dataset as rendered in POST response for dataset API endpoint.\n      required:\n      - kind\n      - sid\n      - query\n      - sql\n      - resolvedEarliest\n      - resolvedLatest\n      - dispatchTime\n      - completionTime\n      - deleteTime\n      - parameters\n      type: object\n    JobDatasetInternalProperties:\n      description: Properties of job datasets which internal use only.\n      properties:\n        leaseInfo:\n          description: Stores the lease information for search jobs.\n          type: string\n        unresolvedTimeSpl:\n          description: Search without the time range resolved, internal search service\n            use only.\n          type: string\n    JobDatasetKind:\n      description: The dataset kind.\n      enum:\n      - job\n      type: string\n    JobDatasetPATCH:\n      allOf:\n      - $ref: '#/components/schemas/JobDatasetProperties'\n      - $ref: '#/components/schemas/JobDatasetInternalProperties'\n      - $ref: '#/components/schemas/DatasetPATCHCommon'\n      description: Property values to be set in an existing job dataset using a PATCH\n        request.\n    JobDatasetPOST:\n      allOf:\n      - $ref: '#/components/schemas/JobDatasetProperties'\n      - $ref: '#/components/schemas/DatasetPOSTCommon'\n      - $ref: '#/components/schemas/JobDatasetInternalProperties'\n      description: Initial property values for creating a new job dataset using a\n        POST request.\n      required:\n      - kind\n      - sid\n      - query\n      - sql\n      - resolvedEarliest\n      - resolvedLatest\n      - dispatchTime\n      - completionTime\n      - deleteTime\n      - parameters\n      type: object\n    JobDatasetProperties:\n      description: Properties of job datasets which may be read, set, and changed\n        through the API. Implementation detail of DatasetPOST, DatasetPATCH, and Dataset,\n        do not use directly.\n      properties:\n        collectEventSummary:\n          description: Was the event summary requested for this searhc job?\n          type: boolean\n        collectFieldSummary:\n          description: Was the field summary requested for this searhc job?\n          type: boolean\n        collectTimeBuckets:\n          description: Were the time bucketes requested for this searhc job?\n          type: boolean\n        completionTime:\n          description: Time that the job was completed\n          type: string\n        deleteTime:\n          description: The time the dataset will be available in S3.\n          type: string\n        dispatchTime:\n          description: Time that the job was dispatched\n          type: string\n        enablePreview:\n          description: Specifies whether a search is allowed to collect preview results\n            during the runtime, internal search service use only.\n          type: boolean\n        executionTime:\n          description: The runtime of the search in seconds.\n          type: number\n        extractAllFields:\n          description: Should the search produce all fields (including those not explicity\n            mentioned in the SPL)?\n          type: boolean\n        extractFields:\n          description: The fields to extract. Valid values are all, none, or indexed.\n          type: string\n        hasSideEffects:\n          description: Did the SPL query cause any side effects on a dataset?\n          type: boolean\n        kind:\n          $ref: '#/components/schemas/JobDatasetKind'\n        maxTime:\n          description: The maximum number of seconds to run this search before finishing.\n          type: integer\n        messages:\n          description: Array of json objects to store critical search job messages.\n          items:\n            type: object\n          type: array\n        parameters:\n          description: Parameters for the search job, mainly earliest, latest, timezone,\n            and relativeTimeAnchor.\n          type: object\n        parent:\n          description: The parent's ID of the search job.\n          type: string\n        percentComplete:\n          description: An estimate of how complete the search job is.\n          type: integer\n        query:\n          description: The SPL query string for the search job.\n          type: string\n        resolvedEarliest:\n          description: Resolved earliest time for the job\n          type: string\n        resolvedLatest:\n          description: Resolved latest time for the job\n          type: string\n        resultsAvailable:\n          description: The instantaneous number of results produced by the search\n            job.\n          type: integer\n        searchHead:\n          description: The search head that started this search job.\n          type: string\n        sid:\n          description: The ID assigned to the search job.\n          type: string\n        spl:\n          description: The SPLv2 version of the search job query string.\n          type: string\n        status:\n          description: The current status of the search job.\n          type: string\n        timelineMetadata:\n          description: Availability of timeline metadata artifacts.\n          properties:\n            auto:\n              description: Availability of automatic timeline metadata artifacts.\n              properties:\n                eventSummaryAvailable:\n                  $ref: '#/components/schemas/JobDatasetEventSummaryAvailableStatus'\n                fieldSummaryAvailable:\n                  $ref: '#/components/schemas/JobDatasetFieldSummaryAvailableStatus'\n                timeBucketsAvailable:\n                  $ref: '#/components/schemas/JobDatasetTimeBucketsAvailableStatus'\n              type: object\n          type: object\n    JobDatasetTimeBucketsAvailableStatus:\n      description: Availability of time buckets (histogram of events).\n      enum:\n      - true\n      - false\n      - UNKNOWN\n      type: string\n    KVCollectionDataset:\n      allOf:\n      - $ref: '#/components/schemas/KVCollectionDatasetProperties'\n      - $ref: '#/components/schemas/MetadataProperties'\n      - $ref: '#/components/schemas/DatasetCommon'\n      description: A complete kvcollection dataset as rendered in POST, PATCH, and\n        GET responses.\n      required:\n      - kind\n      type: object\n    KVCollectionDatasetKind:\n      description: The dataset kind.\n      enum:\n      - kvcollection\n      type: string\n    KVCollectionDatasetPATCH:\n      allOf:\n      - $ref: '#/components/schemas/KVCollectionDatasetProperties'\n      - $ref: '#/components/schemas/DatasetPATCHCommon'\n      description: Property values to be set in an existing kvcollection dataset using\n        a PATCH request.\n    KVCollectionDatasetPOST:\n      allOf:\n      - $ref: '#/components/schemas/KVCollectionDatasetProperties'\n      - $ref: '#/components/schemas/DatasetPOSTCommon'\n      description: Initial property values for creating a new kvcollection dataset\n        using a POST request.\n      required:\n      - kind\n      type: object\n    KVCollectionDatasetProperties:\n      description: Properties of kvcollection datasets which may be read, set, and\n        changed through the API. Implementation detail of DatasetPOST, DatasetPATCH,\n        and Dataset, do not use directly.\n      properties:\n        kind:\n          $ref: '#/components/schemas/KVCollectionDatasetKind'\n      type: object\n    LookupAction:\n      allOf:\n      - $ref: '#/components/schemas/MetadataProperties'\n      - $ref: '#/components/schemas/ActionCommon'\n      - $ref: '#/components/schemas/LookupActionProperties'\n      - $ref: '#/components/schemas/AppClientIDProperties'\n      description: A complete lookup action as rendered in POST, PATCH, and GET responses.\n      required:\n      - kind\n      - expression\n      - id\n      - ruleid\n      type: object\n    LookupActionKind:\n      description: The lookup action kind.\n      enum:\n      - LOOKUP\n      type: string\n    LookupActionPATCH:\n      allOf:\n      - $ref: '#/components/schemas/ActionPATCHCommon'\n      - $ref: '#/components/schemas/LookupActionProperties'\n      description: Property values for setting existing lookup actions using a PATCH\n        request.\n    LookupActionPOST:\n      allOf:\n      - $ref: '#/components/schemas/ActionCommon'\n      - $ref: '#/components/schemas/LookupActionProperties'\n      description: Initial property values for creating a new lookup action using\n        a POST request.\n      required:\n      - kind\n      - expression\n      type: object\n    LookupActionProperties:\n      description: Properties of lookup actions which may be read, set, and changed\n        through the API. Implementation detail of ActionPOST, ActionPOST, and Action,\n        do not use directly.\n      properties:\n        expression:\n          description: The lookup body.\n          type: string\n        kind:\n          $ref: '#/components/schemas/LookupActionKind'\n      type: object\n    LookupDataset:\n      allOf:\n      - $ref: '#/components/schemas/LookupDatasetProperties'\n      - $ref: '#/components/schemas/MetadataProperties'\n      - $ref: '#/components/schemas/DatasetCommon'\n      description: A complete lookup dataset as rendered in POST, PATCH, and GET responses.\n      required:\n      - kind\n      - externalKind\n      - externalName\n      type: object\n    LookupDatasetExternalKind:\n      description: The type of the external lookup.\n      enum:\n      - kvcollection\n      type: string\n    LookupDatasetKind:\n      description: The dataset kind.\n      enum:\n      - lookup\n      type: string\n    LookupDatasetPATCH:\n      allOf:\n      - $ref: '#/components/schemas/LookupDatasetProperties'\n      - $ref: '#/components/schemas/DatasetPATCHCommon'\n      description: Property values to be set in an existing lookup dataset using a\n        PATCH request.\n    LookupDatasetPOST:\n      allOf:\n      - $ref: '#/components/schemas/LookupDatasetProperties'\n      - $ref: '#/components/schemas/DatasetPOSTCommon'\n      description: Initial property values for creating a new lookup dataset using\n        a POST request.\n      required:\n      - kind\n      - externalKind\n      - externalName\n      type: object\n    LookupDatasetProperties:\n      description: Properties of lookup datasets which may be read, set, and changed\n        through the API. Implementation detail of DatasetPOST, DatasetPATCH, and Dataset,\n        do not use directly.\n      properties:\n        caseSensitiveMatch:\n          default: true\n          description: Match case-sensitively against the lookup.\n          type: boolean\n        externalKind:\n          $ref: '#/components/schemas/LookupDatasetExternalKind'\n        externalName:\n          description: The name of the external lookup.\n          example: nameOfKvCollection\n          type: string\n        filter:\n          description: A query that filters results out of the lookup before those\n            results are returned.\n          type: string\n        kind:\n          $ref: '#/components/schemas/LookupDatasetKind'\n    MetadataProperties:\n      allOf:\n      - $ref: '#/components/schemas/DateMetadataProperties'\n      - $ref: '#/components/schemas/UserMetadataProperties'\n      description: Created, createdby, modified, modifiedby, and owner properties\n        for inclusion in other objects.\n    MetricDataset:\n      allOf:\n      - $ref: '#/components/schemas/MetricDatasetProperties'\n      - $ref: '#/components/schemas/MetricDatasetReadOnlyProperties'\n      - $ref: '#/components/schemas/MetadataProperties'\n      - $ref: '#/components/schemas/DatasetCommon'\n      description: A complete metric dataset as rendered in POST, PATCH, and GET responses.\n      required:\n      - kind\n      - disabled\n      type: object\n    MetricDatasetKind:\n      description: The dataset kind.\n      enum:\n      - metric\n      type: string\n    MetricDatasetPATCH:\n      allOf:\n      - $ref: '#/components/schemas/MetricDatasetProperties'\n      - $ref: '#/components/schemas/DatasetPATCHCommon'\n      description: Property values to be set in an existing metric dataset using a\n        PATCH request.\n    MetricDatasetPOST:\n      allOf:\n      - $ref: '#/components/schemas/MetricDatasetProperties'\n      - $ref: '#/components/schemas/DatasetPOSTCommon'\n      description: Initial property values for creating a new metric dataset using\n        a POST request.\n      required:\n      - kind\n      - disabled\n      type: object\n    MetricDatasetProperties:\n      description: Properties of metric datasets which may be read, set, and changed\n        through the API. Implementation detail of DatasetPOST, DatasetPATCH, and Dataset,\n        do not use directly.\n      properties:\n        disabled:\n          description: Specifies whether or not the Splunk index is disabled.\n          type: boolean\n        frozenTimePeriodInSecs:\n          description: The frozenTimePeriodInSecs to use for the index\n          type: integer\n        kind:\n          $ref: '#/components/schemas/MetricDatasetKind'\n      type: object\n    MetricDatasetReadOnlyProperties:\n      description: Properties of metric datasets which can only be read through the\n        API.\n      properties:\n        earliestEventTime:\n          description: The timestamp, in seconds, of the earliest measure. The timestamp\n            is in UNIX time.\n          type: string\n        earliestIngestTime:\n          description: The earliest index time for any of the measures in this index.\n          type: string\n        kind:\n          $ref: '#/components/schemas/MetricDatasetKind'\n        latestEventTime:\n          description: The timestamp, in seconds, of the latest measure. The timestamp\n            is in UNIX time.\n          type: string\n        latestIngestTime:\n          description: The earliest index time for any of the measures in this index.\n          type: string\n        latestMetadataUpdateTime:\n          description: The latest time that the metric index metadata was refreshed.\n          type: string\n        totalEventCount:\n          description: THe number of measures in the metric index.\n          type: integer\n        totalSize:\n          description: For metrics indexes, the totalSize is set to 0.\n          type: integer\n      type: object\n    Module:\n      description: The name of a module.\n      properties:\n        name:\n          maxLength: 100\n          type: string\n      type: object\n    RegexAction:\n      allOf:\n      - $ref: '#/components/schemas/MetadataProperties'\n      - $ref: '#/components/schemas/ActionCommon'\n      - $ref: '#/components/schemas/RegexActionProperties'\n      - $ref: '#/components/schemas/AppClientIDProperties'\n      description: A complete regex action as rendered in POST, PATCH, and GET responses.\n      required:\n      - kind\n      - field\n      - pattern\n      - id\n      - ruleid\n      type: object\n    RegexActionKind:\n      description: The regex action kind.\n      enum:\n      - REGEX\n      type: string\n    RegexActionPATCH:\n      allOf:\n      - $ref: '#/components/schemas/ActionPATCHCommon'\n      - $ref: '#/components/schemas/RegexActionProperties'\n      description: Property values for setting existing regex actions using a PATCH\n        request.\n    RegexActionPOST:\n      allOf:\n      - $ref: '#/components/schemas/ActionCommon'\n      - $ref: '#/components/schemas/RegexActionProperties'\n      description: Initial property values for creating a new regex action using a\n        POST request.\n      required:\n      - kind\n      - field\n      - pattern\n      type: object\n    RegexActionProperties:\n      description: Properties of regex actions which may be read, set, and changed\n        through the API. Implementation detail of ActionPOST, ActionPOST, and Action,\n        do not use directly.\n      properties:\n        field:\n          description: Name of the field that is matched against the regular expression.\n          example: nameOfExistingField\n          type: string\n        kind:\n          $ref: '#/components/schemas/RegexActionKind'\n        limit:\n          description: The maximum number of times per event to attempt to match fields\n            with the regular expression.\n          type: integer\n        pattern:\n          description: A regular expression that includes named capture groups for\n            the purpose of field extraction.\n          type: string\n      type: object\n    Relationship:\n      allOf:\n      - $ref: '#/components/schemas/RelationshipProperties'\n      - $ref: '#/components/schemas/MetadataProperties'\n      - $ref: '#/components/schemas/AppClientIDProperties'\n      - properties:\n          fields:\n            description: The relationship fields associated with the relationship.\n            items:\n              $ref: '#/components/schemas/RelationshipField'\n            type: array\n          id:\n            description: A unique relationship ID.\n            example: 5bc1a6fefee0d854a4188125\n            format: mongo-object-id\n            maxLength: 24\n            minLength: 24\n            type: string\n        type: object\n      description: A complete relationship as rendered in POST, PATCH, and GET responses.\n      required:\n      - id\n      - name\n      - sourceid\n      - targetid\n      - kind\n      - module\n      - owner\n      - created\n      - modified\n      - createdby\n      - modifiedby\n      - version\n      - fields\n      type: object\n    RelationshipField:\n      allOf:\n      - $ref: '#/components/schemas/DateMetadataProperties'\n      - $ref: '#/components/schemas/RelationshipFieldProperties'\n      description: A complete relationship field as rendered in POST, PATCH, and GET\n        responses.\n      required:\n      - sourceid\n      - targetid\n      - kind\n      type: object\n    RelationshipFieldKind:\n      description: The type of match between the fields. Must be one of the valid\n        values. The LATEST_BEFORE match type specifies that the datetime field in\n        one dataset binds to the latest time before the datetime field in another\n        dataset.\n      enum:\n      - EXACT\n      - LATEST_BEFORE\n      type: string\n    RelationshipFieldPOST:\n      allOf:\n      - $ref: '#/components/schemas/RelationshipFieldProperties'\n      description: The properties required to create a new relationship field using\n        a relationship POST request.\n      required:\n      - sourceid\n      - targetid\n      - kind\n      type: object\n    RelationshipFieldProperties:\n      description: Properties of relationship fields which are read through the API.\n        Implementation detail of RelationshipFieldPOST. Do not use directly.\n      properties:\n        kind:\n          $ref: '#/components/schemas/RelationshipFieldKind'\n        relationshipid:\n          description: A unique relationship ID.\n          example: 5bc1a6fefee0d854a4188125\n          format: mongo-object-id\n          maxLength: 24\n          minLength: 24\n          type: string\n        sourceid:\n          description: A unique source dataset ID.\n          example: 5bc1a6fefee0d854a4188126\n          format: mongo-object-id\n          maxLength: 24\n          minLength: 24\n          type: string\n        targetid:\n          description: A unique target dataset ID.\n          example: 5bc1a6fefee0d854a4188127\n          format: mongo-object-id\n          maxLength: 24\n          minLength: 24\n          type: string\n      type: object\n    RelationshipKind:\n      description: The relationship type. Must be one of the valid values.\n      enum:\n      - ONE\n      - MANY\n      - DEPENDENCY\n      type: string\n    RelationshipPATCH:\n      properties:\n        name:\n          description: The name of the relationship.\n          example: nameOfRelationship\n          type: string\n        owner:\n          description: The user who is the owner of the relationship.\n          example: johndoe\n          type: string\n      type: object\n    RelationshipPOST:\n      allOf:\n      - $ref: '#/components/schemas/RelationshipProperties'\n      - properties:\n          fields:\n            description: The fields associated with this relationship.\n            items:\n              $ref: '#/components/schemas/RelationshipFieldPOST'\n            type: array\n          id:\n            description: A unique relationship ID. If not specified, an auto generated\n              ID is created.\n            example: 5bc1a6fefee0d854a4188125\n            format: mongo-object-id\n            maxLength: 24\n            minLength: 24\n            type: string\n        type: object\n      description: The properties required to create a new relationship using a POST\n        request.\n      required:\n      - name\n      - kind\n      type: object\n    RelationshipProperties:\n      description: Properties of relationships which are read through the API. Implementation\n        detail of RelationshipPOST, RelationshipPATCH and Relationship. Do not use\n        directly.\n      properties:\n        kind:\n          $ref: '#/components/schemas/RelationshipKind'\n        module:\n          default: The module of the source dataset.\n          description: The module that contains the relationship.\n          example: nameOfModule\n          maxLength: 100\n          type: string\n        name:\n          description: The relationship name.\n          example: nameOfRelationship\n          maxLength: 100\n          type: string\n        sourceid:\n          description: A unique source dataset ID. Either the sourceid or sourceresourcename\n            property must be specified.\n          example: 5bc1a6fefee0d854a4188126\n          format: mongo-object-id\n          maxLength: 24\n          minLength: 24\n          type: string\n        sourceresourcename:\n          description: The source dataset name qualified by module name. Either the\n            sourceid or sourceresourcename property must be specified.\n          example: nameOfModule.nameOfDataset\n          type: string\n        targetid:\n          description: A unique target dataset ID. Either the targetid or targetresourcename\n            property must be specified.\n          example: 5bc1a6fefee0d854a4188127\n          format: mongo-object-id\n          maxLength: 24\n          minLength: 24\n          type: string\n        targetresourcename:\n          description: The target dataset name qualified by module name. Either the\n            targetid or targetresourcename property must be specified.\n          example: nameOfModule.nameOfDataset\n          type: string\n        version:\n          description: The Catalog version.\n          minimum: 1\n          type: integer\n      type: object\n    Rule:\n      allOf:\n      - $ref: '#/components/schemas/RuleProperties'\n      - $ref: '#/components/schemas/MetadataProperties'\n      - $ref: '#/components/schemas/AppClientIDProperties'\n      - properties:\n          actions:\n            description: The actions associated with the rule.\n            items:\n              $ref: '#/components/schemas/Action'\n            type: array\n          id:\n            description: A unique Rule ID.\n            example: 5bc1a6fefee0d854a4188125\n            format: mongo-object-id\n            maxLength: 24\n            minLength: 24\n            type: string\n          resourcename:\n            description: The rule name qualified by the module name.\n            example: nameOfModule.nameOfRule\n            maxLength: 201\n            type: string\n        type: object\n      description: A complete rule as rendered in POST, PATCH, and GET responses.\n      required:\n      - id\n      - name\n      - module\n      - resourcename\n      - match\n      - actions\n      - versions\n      - owner\n      - created\n      - createdby\n      - modified\n      - modifiedby\n      type: object\n    RulePATCH:\n      allOf:\n      - $ref: '#/components/schemas/RuleProperties'\n      properties:\n        owner:\n          description: The name of the user who owns the rule.\n          example: johndoe\n          type: string\n      type: object\n    RulePOST:\n      allOf:\n      - $ref: '#/components/schemas/RuleProperties'\n      - properties:\n          actions:\n            description: The actions to be associated with this rule.\n            items:\n              $ref: '#/components/schemas/ActionPOST'\n            type: array\n          id:\n            description: A unique rule ID. The newly created rule object will use\n              this ID value if provided.\n            example: 5bc1a6fefee0d854a4188125\n            format: mongo-object-id\n            maxLength: 24\n            minLength: 24\n            type: string\n        type: object\n      description: Initial property values for creating a new rule using a POST request.\n      required:\n      - name\n      - match\n      type: object\n    RuleProperties:\n      description: Properties of rules which may be read, set, and changed through\n        the API. Implementation detail of RulePOST, RulePATCH, and Rule, do not use\n        directly.\n      properties:\n        match:\n          description: The rule match type.\n          maxLength: 100\n          type: string\n        module:\n          default: \"\"\n          description: The module containing the rule.\n          example: nameOfModule\n          maxLength: 100\n          type: string\n        name:\n          description: The rule name.\n          example: nameOfRole\n          maxLength: 100\n          type: string\n        version:\n          description: The catalog version.\n          minimum: 1\n          type: integer\n      type: object\n    Splv1sinkDataset:\n      allOf:\n      - $ref: '#/components/schemas/Splv1sinkDatasetProperties'\n      - $ref: '#/components/schemas/MetadataProperties'\n      - $ref: '#/components/schemas/DatasetCommon'\n      description: A complete catalog dataset as rendered in GET responses.\n      required:\n      - kind\n      - splv1\n      type: object\n    Splv1sinkDatasetKind:\n      description: The dataset kind.\n      enum:\n      - splv1sink\n      type: string\n    Splv1sinkDatasetProperties:\n      description: Properties of splv1sink datasets which can be read through the\n        API.\n      properties:\n        kind:\n          $ref: '#/components/schemas/Splv1sinkDatasetKind'\n        splv1:\n          description: Internal use by common-ast, contains the converted SPL for\n            a SPL2 search query.\n          type: string\n    Task:\n      allOf:\n      - $ref: '#/components/schemas/MetadataProperties'\n      - properties:\n          algorithm:\n            description: The task algorithm name.\n            example: PCA\n            type: string\n          children:\n            description: The children tasks of the task.\n            items:\n              description: A unique task ID.\n              example: 5bbf6d876d059d0b9ea8da46\n              format: mongo-object-id\n              maxLength: 24\n              minLength: 24\n              type: string\n            type: array\n          evaluation:\n            description: The evaluation criteria of the task.\n            items:\n              type: string\n            type: array\n          features:\n            description: The features of the task.\n            items:\n              type: string\n            type: array\n          id:\n            description: A unique task ID.\n            example: 5bbf6d876d059d0b9ea8da41\n            format: mongo-object-id\n            maxLength: 24\n            minLength: 24\n            type: string\n          name:\n            description: The task name.\n            example: nameOfTask\n            maxLength: 100\n            type: string\n          outputtransformer:\n            description: The output transformer of the task.\n            example: pca_model\n            type: string\n          parameters:\n            description: The task parameters.\n            example: '{\"k\":3}'\n            type: string\n          parents:\n            description: The parent tasks of the task.\n            items:\n              description: A unique task ID.\n              example: 5bbf6d876d059d0b9ea8da45\n              format: mongo-object-id\n              maxLength: 24\n              minLength: 24\n              type: string\n            type: array\n          targetfeature:\n            description: The target feature of the task.\n            example: feature\n            type: string\n          tasktype:\n            description: The task type.\n            example: fit\n            type: string\n          timeoutsecs:\n            description: The timeout secs of the task.\n            example: 600\n            minimum: 1\n            type: integer\n          workflowid:\n            description: A unique workflow ID that is associatd with the task.\n            example: 5bbf6d876d059d0b9ea8da42\n            format: mongo-object-id\n            maxLength: 24\n            minLength: 24\n            type: string\n          workflowversion:\n            description: The version of the workflow that is associated with the task.\n            example: 1\n            minimum: 1\n            type: integer\n        type: object\n      description: A complete task as rendered in POST, PATCH, and GET responses.\n      required:\n      - id\n      - workflowid\n      - workflowversion\n      - name\n      - algorithm\n      - tasktype\n      - parameters\n      - features\n      - targetfeature\n      - outputtransformer\n      - evaluation\n      - timeoutsecs\n      - parents\n      - children\n      type: object\n    TaskPOST:\n      allOf:\n      - $ref: '#/components/schemas/MetadataProperties'\n      - properties:\n          algorithm:\n            description: The task algorithm name.\n            example: PCA\n            type: string\n          children:\n            description: The children tasks of the task.\n            items:\n              description: A unique task ID.\n              example: 5bbf6d876d059d0b9ea8da46\n              format: mongo-object-id\n              maxLength: 24\n              minLength: 24\n              type: string\n            type: array\n          evaluation:\n            description: The evaluation criteria of the task.\n            items:\n              type: string\n            type: array\n          features:\n            description: The features of the task.\n            items:\n              type: string\n            type: array\n          id:\n            description: A unique task ID.\n            example: 5bbf6d876d059d0b9ea8da41\n            format: mongo-object-id\n            maxLength: 24\n            minLength: 24\n            type: string\n          name:\n            description: The task name.\n            example: nameOfTask\n            maxLength: 100\n            type: string\n          outputtransformer:\n            description: The output transformer of the task.\n            example: pca_model\n            type: string\n          parameters:\n            description: The task parameters.\n            example: '{\"k\":3}'\n            type: string\n          parents:\n            description: The parent tasks of the task.\n            items:\n              description: A unique task ID.\n              example: 5bbf6d876d059d0b9ea8da45\n              format: mongo-object-id\n              maxLength: 24\n              minLength: 24\n              type: string\n            type: array\n          targetfeature:\n            description: The target feature of the task.\n            example: feature\n            type: string\n          tasktype:\n            description: The task type.\n            example: fit\n            type: string\n          timeoutsecs:\n            description: The timeout secs of the task.\n            example: 600\n            minimum: 1\n            type: integer\n          workflowid:\n            description: A unique workflow ID that is associated with the task.\n            example: 5bbf6d876d059d0b9ea8da42\n            format: mongo-object-id\n            maxLength: 24\n            minLength: 24\n            type: string\n          workflowversion:\n            description: The version of the workflow that is associated with the task.\n            example: 1\n            minimum: 1\n            type: integer\n        type: object\n      description: A complete task as rendered in POST, PATCH, and GET responses.\n      required:\n      - algorithm\n      - tasktype\n      - parameters\n      - features\n      - timeoutsecs\n      type: object\n    UserMetadataProperties:\n      description: Owner, createdby, and modifiedby user name properties for inclusion\n        in other objects.\n      properties:\n        createdby:\n          description: The name of the user who created the object. This value is\n            obtained from the bearer token and may not be changed.\n          example: janedoe\n          readOnly: true\n          type: string\n        modifiedby:\n          description: The name of the user who most recently modified the object.\n          example: suedoe\n          readOnly: true\n          type: string\n        owner:\n          description: The name of the object's owner.\n          example: johndoe\n          readOnly: true\n          type: string\n      required:\n      - owner\n      - createdby\n      - modifiedby\n      type: object\n    ViewDataset:\n      allOf:\n      - $ref: '#/components/schemas/ViewDatasetProperties'\n      - $ref: '#/components/schemas/MetadataProperties'\n      - $ref: '#/components/schemas/DatasetCommon'\n      description: A complete view dataset as rendered in POST, PATCH, and GET responses.\n      required:\n      - kind\n      - search\n      type: object\n    ViewDatasetKind:\n      description: The dataset kind.\n      enum:\n      - view\n      type: string\n    ViewDatasetPATCH:\n      allOf:\n      - $ref: '#/components/schemas/ViewDatasetProperties'\n      - $ref: '#/components/schemas/DatasetPATCHCommon'\n      description: Property values to be set in an existing view dataset using a PATCH\n        request.\n    ViewDatasetPOST:\n      allOf:\n      - $ref: '#/components/schemas/ViewDatasetProperties'\n      - $ref: '#/components/schemas/DatasetPOSTCommon'\n      description: Initial property values for creating a new view dataset using a\n        POST request.\n      required:\n      - kind\n      - search\n      type: object\n    ViewDatasetProperties:\n      description: Properties of job datasets which may be read, set, and changed\n        through the API. Implementation detail of DatasetPOST, DatasetPATCH, and Dataset,\n        do not use directly.\n      properties:\n        kind:\n          $ref: '#/components/schemas/ViewDatasetKind'\n        search:\n          description: A valid SPL-defined search.\n          type: string\n      type: object\ninfo:\n  description: With the Metadata Catalog in Splunk Cloud Services you can create and\n    manage knowledge objects such as datasets, fields, rules, actions, and dashboards.\n  title: Search Catalog service\n  version: v2beta1.4\nopenapi: 3.0.0\npaths:\n  /{tenant}/catalog/v2beta1/annotations:\n    get:\n      description: Returns the set of annotations across all objects.\n      operationId: listAnnotations\n      parameters:\n      - description: A filter to apply to the results list. The filter must be a SPL\n          predicate expression.\n        in: query\n        name: filter\n        required: false\n        schema:\n          format: spl-predicate-expression\n          type: string\n      - description: The maximum number of results to return.\n        in: query\n        name: count\n        required: false\n        schema:\n          minimum: 1\n          type: integer\n      - description: The number of results to skip before the first one returned.\n        in: query\n        name: offset\n        required: false\n        schema:\n          minimum: 0\n          type: integer\n      - description: A list of fields to order the results by.  You can specify either\n          ascending or descending order using \"\u003cfield\u003e asc\" or \"\u003cfield\u003e desc.  Ascending\n          order is the default.\n        in: query\n        name: orderby\n        required: false\n        schema:\n          items:\n            type: string\n          type: array\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Annotation'\n                type: array\n          description: An array of annotations was returned.\n        \"400\":\n          description: The filter you have applied is invalid.\n        \"401\":\n          description: The operation isn't authorized.\n      x-authz-scope:\n      - catalog.annotations.read\n    parameters:\n    - $ref: '#/components/parameters/AuthorizationHeader'\n    - $ref: '#/components/parameters/Tenant'\n  /{tenant}/catalog/v2beta1/dashboards:\n    get:\n      description: Returns a list of dashboards.\n      operationId: listDashboards\n      parameters:\n      - description: A filter to apply to the results list. The filter must be a SPL\n          predicate expression.\n        in: query\n        name: filter\n        required: false\n        schema:\n          format: spl-predicate-expression\n          type: string\n      - description: The maximum number of results to return.\n        in: query\n        name: count\n        required: false\n        schema:\n          minimum: 1\n          type: integer\n      - description: The number of results to skip before the first one returned.\n        in: query\n        name: offset\n        required: false\n        schema:\n          minimum: 0\n          type: integer\n      - description: A list of fields to order the results by.  You can specify either\n          ascending or descending order using \"\u003cfield\u003e asc\" or \"\u003cfield\u003e desc.  Ascending\n          order is the default.\n        in: query\n        name: orderby\n        required: false\n        schema:\n          items:\n            type: string\n          type: array\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Dashboard'\n                type: array\n          description: A list of dashboards has been returned.\n        \"401\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: The requested dashboards were not found, or the requesting\n            user lacks catalog.dashboards.read permission for them.\n      x-authz-scope:\n      - catalog.dashboards.read\n    parameters:\n    - $ref: '#/components/parameters/AuthorizationHeader'\n    - $ref: '#/components/parameters/Tenant'\n    post:\n      description: Creates a new dashboard.\n      operationId: createDashboard\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DashboardPOST'\n        description: The JSON representation of the Dashboard to be persisted.\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Dashboard'\n          description: The dashboard was created.\n        \"400\":\n          description: The dashboard is invalid.\n        \"401\":\n          description: The operation isn't authorized.\n        \"409\":\n          description: The dashboard is already present.\n      x-authz-scope:\n      - catalog.dashboards.create\n  /{tenant}/catalog/v2beta1/dashboards/{dashboardresource}:\n    delete:\n      description: Deletes the dashboard with the specified ID or resource name.\n      operationId: deleteDashboard\n      responses:\n        \"204\":\n          description: The dashboard was deleted.\n        \"401\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: The dashboard was not found.\n      x-authz-scope:\n      - catalog.dashboards.delete\n      - catalog.dashboards.read\n    get:\n      description: Returns information about the dashboard with the specified ID or\n        resource name.\n      operationId: getDashboard\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Dashboard'\n          description: Information about a dashboard with the specified ID or resource\n            name was returned.\n        \"401\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: A dashboard with the specified ID or resource name was not\n            found, or the requesting user lacks catalog.dashboards.read permission\n            for it.\n      x-authz-scope:\n      - catalog.dashboards.read\n    parameters:\n    - $ref: '#/components/parameters/AuthorizationHeader'\n    - $ref: '#/components/parameters/Tenant'\n    - $ref: '#/components/parameters/DashboardResource'\n    patch:\n      description: Modifies the dashboard with the specified ID or resource name.\n      operationId: updateDashboard\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DashboardPATCH'\n        description: An updated representation of the dashboard to be persisted.\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Dashboard'\n          description: The dashboard was updated.\n        \"401\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: The dashboard was not found.\n      x-authz-scope:\n      - catalog.dashboards.update\n      - catalog.dashboards.read\n  /{tenant}/catalog/v2beta1/dashboards/{dashboardresource}/annotations:\n    get:\n      description: Returns the set of annotations that are associated with the specified\n        dashboard.\n      operationId: listAnnotationsForDashboard\n      parameters:\n      - description: A filter query to apply to the annotations.\n        in: query\n        name: filter\n        required: false\n        schema:\n          format: spl-predicate-expression\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Annotation'\n                type: array\n          description: An array of annotations matching the dashboard was returned.\n        \"400\":\n          description: The filter you have applied is invalid.\n        \"401\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: The requested annotations were not found, or the requesting\n            user lacks catalog.annotations.read permission for them.\n      x-authz-scope:\n      - catalog.annotations.read\n    parameters:\n    - $ref: '#/components/parameters/AuthorizationHeader'\n    - $ref: '#/components/parameters/Tenant'\n    - $ref: '#/components/parameters/DashboardResource'\n    post:\n      description: Creates a new annotation for the specified dashboard.\n      operationId: createAnnotationForDashboard\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AnnotationPOST'\n        description: The JSON representation of the annotation to be persisted.\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Annotation'\n          description: An annotation has been created for the specified dashboard.\n        \"401\":\n          description: The operation isn't authorized.\n        \"409\":\n          description: The annotation is already present.\n      x-authz-scope:\n      - catalog.annotationtypes.read\n  /{tenant}/catalog/v2beta1/dashboards/{dashboardresource}/annotations/{annotationid}:\n    delete:\n      description: Deletes the annotation with the speciifed ID that is associted\n        with the specified dashboard.\n      operationId: deleteAnnotationOfDashboard\n      responses:\n        \"204\":\n          description: The annotation with the specified ID was deleted.\n        \"401\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: A annotation with the specified ID was not found.\n      x-authz-scope:\n      - catalog.annotations.delete\n      - catalog.annotations.read\n    parameters:\n    - $ref: '#/components/parameters/AuthorizationHeader'\n    - $ref: '#/components/parameters/Tenant'\n    - $ref: '#/components/parameters/DashboardResource'\n    - $ref: '#/components/parameters/AnnotationID'\n  /{tenant}/catalog/v2beta1/datasets:\n    get:\n      description: Returns a list of all datasets. Use a filter to return a specific\n        list of datasets.\n      operationId: listDatasets\n      parameters:\n      - description: A filter to apply to the dataset list. The filter must be a SPL\n          predicate expression.\n        in: query\n        name: filter\n        required: false\n        schema:\n          format: spl-predicate-expression\n          type: string\n      - description: The maximum number of results to return.\n        in: query\n        name: count\n        required: false\n        schema:\n          minimum: 1\n          type: integer\n      - description: The number of results to skip before the first result is returned.\n        in: query\n        name: offset\n        required: false\n        schema:\n          minimum: 0\n          type: integer\n      - description: A list of fields to order the results by.  You can specify either\n          ascending or descending order using \"\u003cfield\u003e asc\" or \"\u003cfield\u003e desc\".  Ascending\n          order is the default.\n        in: query\n        name: orderby\n        required: false\n        schema:\n          items:\n            type: string\n          type: array\n      - description: The number of seconds beyond which we will refresh index metadata.\n        in: query\n        name: maxstale\n        required: false\n        schema:\n          minimum: 1\n          type: integer\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/DatasetGet'\n                type: array\n          description: A list of datasets that match your filter has been returned.\n        \"401\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: The requested datasets were not found, or you lack catalog.datasets.read\n            permission for the datasets.\n      x-authz-scope:\n      - catalog.datasets.read\n    parameters:\n    - $ref: '#/components/parameters/AuthorizationHeader'\n    - $ref: '#/components/parameters/Tenant'\n    post:\n      description: Creates a new dataset.\n      operationId: createDataset\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DatasetPOST'\n        description: JSON representation of the DatasetInfo to be persisted\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Dataset'\n          description: The dataset was created.\n        \"400\":\n          description: The dataset is invalid.\n        \"401\":\n          description: The operation isn't authorized.\n        \"409\":\n          description: The dataset is already present.\n        \"429\":\n          description: Too many concurrent requests to create datasets.\n      x-authz-scope:\n      - catalog.datasets.create\n  /{tenant}/catalog/v2beta1/datasets/{datasetresource}:\n    delete:\n      description: Deletes the dataset with the specified ID or resource name. Deleting\n        a dataset also deletes its dependent objects, such as fields.\n      operationId: deleteDataset\n      responses:\n        \"204\":\n          description: The dataset with the specified ID or resource name was deleted.\n        \"401\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: A dataset with the specified ID or resource name was not found.\n        \"405\":\n          description: The dataset with the specified ID or resource name cannot be\n            deleted because there are external objects dependent on the dataset.\n      x-authz-scope:\n      - catalog.datasets.delete\n      - catalog.datasets.read\n    get:\n      description: Returns information about the dataset with the specified ID or\n        resource name. For the default module, the resource name format is datasetName.\n        Otherwise, the resource name format is module.datasetName.\n      operationId: getDataset\n      parameters:\n      - description: The number of seconds beyond which we will refresh index metadata.\n        in: query\n        name: maxstale\n        required: false\n        schema:\n          minimum: 1\n          type: integer\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DatasetGet'\n          description: Information about the dataset with the specified ID or resource\n            name was returned.\n        \"401\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: A dataset with the specified ID or resource name was not found,\n            or the requesting user lacks catalog.datasets.read permission for it.\n      x-authz-scope:\n      - catalog.datasets.read\n    parameters:\n    - $ref: '#/components/parameters/AuthorizationHeader'\n    - $ref: '#/components/parameters/Tenant'\n    - $ref: '#/components/parameters/DatasetResource'\n    patch:\n      description: Modifies the dataset with the specified Dataset ID or Resource\n        Name. For the default module, the resource name format is datasetName, otherwise,\n        the resource name format is module.datasetName.\n      operationId: updateDataset\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DatasetPATCH'\n        description: An updated representation of the dataset to be persisted.\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Dataset'\n          description: The dataset with the specified ID or resource name was updated.\n        \"404\":\n          description: The dataset with the specified ID or resource name  was not\n            found, or the requesting user lacks catalog.datasets.read permission for\n            it.\n      x-authz-scope:\n      - catalog.datasets.update\n      - catalog.datasets.read\n  /{tenant}/catalog/v2beta1/datasets/{datasetresource}/annotations:\n    get:\n      description: Returns the set of annotations that are associated with the specified\n        dataset.\n      operationId: listAnnotationsForDataset\n      parameters:\n      - description: A filter to apply to the results list. The filter must be a SPL\n          predicate expression.\n        in: query\n        name: filter\n        required: false\n        schema:\n          format: spl-predicate-expression\n          type: string\n      - description: The maximum number of results to return.\n        in: query\n        name: count\n        required: false\n        schema:\n          minimum: 1\n          type: integer\n      - description: The number of results to skip before the first one returned.\n        in: query\n        name: offset\n        required: false\n        schema:\n          minimum: 0\n          type: integer\n      - description: A list of fields to order the results by.  You can specify either\n          ascending or descending order using \"\u003cfield\u003e asc\" or \"\u003cfield\u003e desc.  Ascending\n          order is the default.\n        in: query\n        name: orderby\n        required: false\n        schema:\n          items:\n            type: string\n          type: array\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Annotation'\n                type: array\n          description: An array of annotations matching the dataset was returned.\n        \"400\":\n          description: The filter you have applied is invalid.\n        \"401\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: The requested annotations were not found, or the requesting\n            user lacks catalog.annotations.read permission for them.\n      x-authz-scope:\n      - catalog.annotations.read\n    parameters:\n    - $ref: '#/components/parameters/AuthorizationHeader'\n    - $ref: '#/components/parameters/Tenant'\n    - $ref: '#/components/parameters/DatasetResource'\n    post:\n      description: Creates a new annotation for the specified dataset.\n      operationId: createAnnotationForDataset\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AnnotationPOST'\n        description: The JSON representation of the annotation to be persisted.\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Annotation'\n          description: An annotation has been created for the specified dataset.\n        \"401\":\n          description: The operation isn't authorized.\n        \"409\":\n          description: The annotation is already present.\n      x-authz-scope:\n      - catalog.annotationtypes.read\n  /{tenant}/catalog/v2beta1/datasets/{datasetresource}/annotations/{annotationid}:\n    delete:\n      description: Deletes the annotation with the specified ID that is associated\n        with the specified dataset.\n      operationId: deleteAnnotationOfDataset\n      responses:\n        \"204\":\n          description: The annotation with the specified ID was deleted.\n        \"401\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: A annotation with the specified ID was not found.\n      x-authz-scope:\n      - catalog.annotations.delete\n      - catalog.annotations.read\n    parameters:\n    - $ref: '#/components/parameters/AuthorizationHeader'\n    - $ref: '#/components/parameters/Tenant'\n    - $ref: '#/components/parameters/DatasetResource'\n    - $ref: '#/components/parameters/AnnotationID'\n  /{tenant}/catalog/v2beta1/datasets/{datasetresource}/fields:\n    get:\n      description: Returns the set of fields for the dataset with the specified ID\n        or resource name.\n      operationId: listFieldsForDataset\n      parameters:\n      - description: A filter to apply to the dataset list. The filter must be a SPL\n          predicate expression.\n        in: query\n        name: filter\n        required: false\n        schema:\n          format: spl-predicate-expression\n          type: string\n      - description: The maximum number of results to return.\n        in: query\n        name: count\n        required: false\n        schema:\n          minimum: 1\n          type: integer\n      - description: The number of results to skip before the first one returned.\n        in: query\n        name: offset\n        required: false\n        schema:\n          minimum: 0\n          type: integer\n      - description: A list of fields to order the results by. You can specify either\n          ascending or descending order using \"\u003cfield\u003e asc\" or \"\u003cfield\u003e desc.  Ascending\n          order is the default.\n        in: query\n        name: orderby\n        required: false\n        schema:\n          items:\n            type: string\n          type: array\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Field'\n                type: array\n          description: An array of matching fields was returned.\n        \"400\":\n          description: The filter is invalid.\n        \"401\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: The requested fields were not found, or the requesting user\n            lacks catalog.datasets.read permission for them.\n      x-authz-scope:\n      - catalog.datasets.read\n    parameters:\n    - $ref: '#/components/parameters/AuthorizationHeader'\n    - $ref: '#/components/parameters/Tenant'\n    - $ref: '#/components/parameters/DatasetResource'\n    post:\n      description: Adds a new field to the dataset with the specified ID or resource\n        name.\n      operationId: createFieldForDataset\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FieldPOST'\n        description: The JSON representation of the field to be persisted.\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Field'\n          description: The field was created.\n        \"400\":\n          description: The field is invalid.\n        \"401\":\n          description: The operation isn't authorized.\n        \"409\":\n          description: The field is already present.\n      x-authz-scope:\n      - catalog.datasets.update\n      - catalog.datasets.read\n  /{tenant}/catalog/v2beta1/datasets/{datasetresource}/fields/{fieldid}:\n    delete:\n      description: Deletes the field with the specified ID that is part of the specified\n        dataset.\n      operationId: deleteFieldByIdForDataset\n      responses:\n        \"204\":\n          description: The field with the specified ID was deleted.\n        \"401\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: The field with the specified ID was not found, or the requesting\n            user lacks catalog.datasets.read permission for them.\n      x-authz-scope:\n      - catalog.datasets.update\n      - catalog.datasets.read\n    get:\n      description: Returns the field with the specified ID that is part of the specified\n        dataset.\n      operationId: getFieldByIdForDataset\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Field'\n          description: A field with the specified ID was retrieved.\n        \"401\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: A field with the specified ID was not found, or the requesting\n            user lacks catalog.datasets.read permission for it.\n      x-authz-scope:\n      - catalog.datasets.read\n    parameters:\n    - $ref: '#/components/parameters/AuthorizationHeader'\n    - $ref: '#/components/parameters/Tenant'\n    - $ref: '#/components/parameters/DatasetResource'\n    - $ref: '#/components/parameters/FieldID'\n    patch:\n      description: Modifies the field with the specified ID that is part of the specified\n        dataset.\n      operationId: updateFieldByIdForDataset\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FieldPATCH'\n        description: The properties to update in the specified field, or the requesting\n          user lacks catalog.datasets.read permission for them.\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Field'\n          description: The field with the specified ID was updated.\n        \"404\":\n          description: The field with the specified ID was not found, or the requesting\n            user lacks catalog.datasets.read permission for them.\n      x-authz-scope:\n      - catalog.datasets.update\n      - catalog.datasets.read\n  /{tenant}/catalog/v2beta1/datasets/{datasetresource}/imported-by:\n    parameters:\n    - $ref: '#/components/parameters/AuthorizationHeader'\n    - $ref: '#/components/parameters/Tenant'\n    - $ref: '#/components/parameters/DatasetResource'\n    post:\n      description: Creates a new dataset import using the ID or resource name of the\n        imported dataset.\n      operationId: createDatasetImport\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DatasetImportedBy'\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DatasetImportedBy'\n          description: The dataset import was created.\n        \"400\":\n          description: The dataset import is invalid.\n        \"401\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: The dataset with the specified ID was not found.\n        \"409\":\n          description: The dataset cannot be imported because it is already present.\n      x-authz-scope:\n      - catalog.datasets.create\n  /{tenant}/catalog/v2beta1/datasets/{datasetresource}/importedby:\n    parameters:\n    - $ref: '#/components/parameters/AuthorizationHeader'\n    - $ref: '#/components/parameters/Tenant'\n    - $ref: '#/components/parameters/DatasetResource'\n    post:\n      description: Creates a new dataset import using the ID or resource name of the\n        imported dataset.\n      operationId: importDataset\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DatasetImportedBy'\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DatasetImportedBy'\n          description: The dataset import was created.\n        \"400\":\n          description: The dataset import is invalid.\n        \"401\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: The dataset with the specified ID or resource name was not\n            found.\n        \"409\":\n          description: The dataset cannot be imported because it is already present.\n      x-authz-scope:\n      - catalog.datasets.create\n  /{tenant}/catalog/v2beta1/fields:\n    get:\n      description: Returns a list of all of the fields in the Metadata Catalog.\n      operationId: listFields\n      parameters:\n      - description: A filter to apply to the dataset list. The filter must be a SPL\n          predicate expression.\n        in: query\n        name: filter\n        required: false\n        schema:\n          format: spl-predicate-expression\n          type: string\n      - description: The maximum number of results to return.\n        in: query\n        name: count\n        required: false\n        schema:\n          minimum: 1\n          type: integer\n      - description: The number of results to skip before the first one returned.\n        in: query\n        name: offset\n        required: false\n        schema:\n          minimum: 0\n          type: integer\n      - description: A list of fields to order the results by.  You can specify either\n          ascending or descending order using \"\u003cfield\u003e asc\" or \"\u003cfield\u003e desc.  Ascending\n          order is the default.\n        in: query\n        name: orderby\n        required: false\n        schema:\n          items:\n            type: string\n          type: array\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Field'\n                type: array\n          description: A list of fields matching the query was returned.\n        \"401\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: The requested fields were not found, or the requesting user\n            lacks catalog.datasets.read permission for them.\n      x-authz-scope:\n      - catalog.datasets.read\n    parameters:\n    - $ref: '#/components/parameters/AuthorizationHeader'\n    - $ref: '#/components/parameters/Tenant'\n  /{tenant}/catalog/v2beta1/fields/{fieldid}:\n    get:\n      description: Returns the field with the specified ID.\n      operationId: getFieldById\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Field'\n          description: A field matching the specified ID was returned successfully.\n        \"401\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: The field with the specified ID was not found, or the requesting\n            user lacks catalog.datasets.read permission for them.\n      x-authz-scope:\n      - catalog.datasets.read\n    parameters:\n    - $ref: '#/components/parameters/AuthorizationHeader'\n    - $ref: '#/components/parameters/Tenant'\n    - $ref: '#/components/parameters/FieldID'\n  /{tenant}/catalog/v2beta1/modules:\n    get:\n      description: Returns a list of all modules. Use a filter to return a specific\n        list of modules.\n      operationId: listModules\n      parameters:\n      - description: A filter to apply to the modules.\n        in: query\n        name: filter\n        required: false\n        schema:\n          format: spl-predicate-expression\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Module'\n                type: array\n          description: A list of modules matching your filter has been returned.\n        \"401\":\n          description: Unauthorized operation.\n        \"404\":\n          description: The requested modules were not found, or the requesting user\n            lacks catalog.datasets.read/catalog.rules.read permission for them.\n      x-authz-scope:\n      - catalog.datasets.read\n      - catalog.rules.read\n    parameters:\n    - $ref: '#/components/parameters/AuthorizationHeader'\n    - $ref: '#/components/parameters/Tenant'\n  /{tenant}/catalog/v2beta1/relationships:\n    get:\n      description: Returns a list of all relationships. Use a filter to return a specific\n        list of relationships.\n      operationId: listRelationships\n      parameters:\n      - description: A filter to apply to the results list. The filter must be a SPL\n          predicate expression.\n        in: query\n        name: filter\n        required: false\n        schema:\n          format: spl-predicate-expression\n          type: string\n      - description: The maximum number of results to return.\n        in: query\n        name: count\n        required: false\n        schema:\n          minimum: 1\n          type: integer\n      - description: The number of results to skip before the first one returned.\n        in: query\n        name: offset\n        required: false\n        schema:\n          minimum: 0\n          type: integer\n      - description: A list of fields to order the results by.  You can specify either\n          ascending or descending order using \"\u003cfield\u003e asc\" or \"\u003cfield\u003e desc.  Ascending\n          order is the default.\n        in: query\n        name: orderby\n        required: false\n        schema:\n          items:\n            type: string\n          type: array\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Relationship'\n                type: array\n          description: A list of relationships that match the filter was returned.\n        \"401\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: The requested relationships were not found.\n    parameters:\n    - $ref: '#/components/parameters/AuthorizationHeader'\n    - $ref: '#/components/parameters/Tenant'\n    post:\n      description: Creates a new relationship.\n      operationId: createRelationship\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RelationshipPOST'\n        description: The JSON representation of the relationship to persist.\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Relationship'\n          description: The relationship was created.\n        \"400\":\n          description: The relationship is invalid.\n        \"401\":\n          description: The operation isn't authorized.\n        \"409\":\n          description: The relationship is already present.\n  /{tenant}/catalog/v2beta1/relationships/{relationshipid}:\n    delete:\n      description: Deletes the relationship with the specified relationship ID. Deleting\n        a relationship also deletes any objects that are dependents of that relationship,\n        such as relationship fields.\n      operationId: deleteRelationshipById\n      responses:\n        \"204\":\n          description: A relationship with the specified ID was deleted.\n        \"401\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: A relationship with the specified ID was not found.\n    get:\n      description: Returns the relationship with the specified relationship ID.\n      operationId: getRelationshipById\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Relationship'\n          description: A relationship with the selected relationship ID was retrieved.\n        \"401\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: A relationship with the specified relationship ID was not found.\n    parameters:\n    - $ref: '#/components/parameters/AuthorizationHeader'\n    - $ref: '#/components/parameters/Tenant'\n    - $ref: '#/components/parameters/RelationshipID'\n    patch:\n      description: Modifies the relationship with the specified relationship ID.\n      operationId: updateRelationshipById\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RelationshipPATCH'\n        description: The properties to update in the specified relationship.\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Relationship'\n          description: The relationship was updated.\n        \"404\":\n          description: A relationship matching the specified ID was not found.\n  /{tenant}/catalog/v2beta1/rules:\n    get:\n      description: Returns a list of rules that match a filter, if specified, otherwise\n        returns all rules.\n      operationId: listRules\n      parameters:\n      - description: A filter to apply to the results list. The filter must be a SPL\n          predicate expression.\n        in: query\n        name: filter\n        required: false\n        schema:\n          format: spl-predicate-expression\n          type: string\n      - description: The maximum number of results to return.\n        in: query\n        name: count\n        required: false\n        schema:\n          minimum: 1\n          type: integer\n      - description: The number of results to skip before the first one returned.\n        in: query\n        name: offset\n        required: false\n        schema:\n          minimum: 0\n          type: integer\n      - description: A list of fields to order the results by.  You can specify either\n          ascending or descending order using \"\u003cfield\u003e asc\" or \"\u003cfield\u003e desc.  Ascending\n          order is the default.\n        in: query\n        name: orderby\n        required: false\n        schema:\n          items:\n            type: string\n          type: array\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Rule'\n                type: array\n          description: A list of rules matching the query filter was returned.\n        \"401\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: The requested rules were not found, or the requesting user\n            lacks catalog.rules.read permission for them.\n      x-authz-scope:\n      - catalog.rules.read\n    parameters:\n    - $ref: '#/components/parameters/AuthorizationHeader'\n    - $ref: '#/components/parameters/Tenant'\n    post:\n      description: Creates a new rule.\n      operationId: createRule\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RulePOST'\n        description: The JSON representation of the rule to be persisted.\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Rule'\n          description: The rule was created.\n        \"400\":\n          description: The rule isn't valid.\n        \"401\":\n          description: The operation isn't authorized.\n        \"409\":\n          description: The rule is already present.\n      x-authz-scope:\n      - catalog.rules.create\n  /{tenant}/catalog/v2beta1/rules/{ruleresource}:\n    delete:\n      description: Deletes the rule with the specfied ID or resource name. Deleting\n        a rule also deleletes any objects that are dependents of that rule, such as\n        rule actions.\n      operationId: deleteRule\n      responses:\n        \"204\":\n          description: A rule with the specified ID or resource name was deleted.\n        \"401\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: A rule with the specified ID or resource name was not found.\n        \"405\":\n          description: The rule cannot be deleted because it has dependencies.\n      x-authz-scope:\n      - catalog.rules.delete\n      - catalog.rules.read\n    get:\n      description: Returns information about rule with the specified rule ID or resource\n        name.\n      operationId: getRule\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Rule'\n          description: A rule with the specified rule ID or resource name was retrieved.\n        \"401\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: A rule with the specified rule ID or resource name was not\n            found, or the requesting user lacks catalog.rules.read permission for\n            it.\n      x-authz-scope:\n      - catalog.rules.read\n    parameters:\n    - $ref: '#/components/parameters/AuthorizationHeader'\n    - $ref: '#/components/parameters/Tenant'\n    - $ref: '#/components/parameters/RuleResource'\n    patch:\n      description: Modifies the rule with the specified rule ID or resource name.\n      operationId: updateRule\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RulePATCH'\n        description: The properties to update in the specified rule.\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Rule'\n          description: The rule was updated.\n        \"404\":\n          description: A rule matching the specified ID or resource name was not found.\n      x-authz-scope:\n      - catalog.rules.update\n      - catalog.rules.read\n  /{tenant}/catalog/v2beta1/rules/{ruleresource}/actions:\n    get:\n      description: Returns the set of actions that are part of the specified rule.\n      operationId: listActionsForRule\n      parameters:\n      - description: A filter to apply to the results list. The filter must be a SPL\n          predicate expression.\n        in: query\n        name: filter\n        required: false\n        schema:\n          format: spl-predicate-expression\n          type: string\n      - description: The maximum number of results to return.\n        in: query\n        name: count\n        required: false\n        schema:\n          minimum: 1\n          type: integer\n      - description: The number of results to skip before the first one returned.\n        in: query\n        name: offset\n        required: false\n        schema:\n          minimum: 0\n          type: integer\n      - description: A list of fields to order the results by.  You can specify either\n          ascending or descending order using \"\u003cfield\u003e asc\" or \"\u003cfield\u003e desc.  Ascending\n          order is the default.\n        in: query\n        name: orderby\n        required: false\n        schema:\n          items:\n            type: string\n          type: array\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Action'\n                type: array\n          description: An array of actions matching the rule was returned.\n        \"400\":\n          description: The filter you have applied is invalid.\n        \"401\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: The requested actions were not found, or the requesting user\n            lacks catalog.rules.read permission for them.\n      x-authz-scope:\n      - catalog.rules.read\n    parameters:\n    - $ref: '#/components/parameters/AuthorizationHeader'\n    - $ref: '#/components/parameters/Tenant'\n    - $ref: '#/components/parameters/RuleResource'\n    post:\n      description: Creates a new action for the specified rule by rule id or resource\n        name.\n      operationId: createActionForRule\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ActionPOST'\n        description: The JSON representation of the action to be persisted.\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Action'\n          description: An action has been created for the specified rule by rule id\n            or resource name.\n        \"400\":\n          description: The action is invalid.\n        \"401\":\n          description: The operation isn't authorized.\n        \"409\":\n          description: The action is already present.\n      x-authz-scope:\n      - catalog.rules.update\n      - catalog.rules.read\n  /{tenant}/catalog/v2beta1/rules/{ruleresource}/actions/{actionid}:\n    delete:\n      description: Deletes the action with the specified ID that is associated with\n        the specified rule.\n      operationId: deleteActionByIdForRule\n      responses:\n        \"204\":\n          description: The action was deleted.\n        \"401\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: The action was not found.\n      x-authz-scope:\n      - catalog.rules.update\n      - catalog.rules.read\n    get:\n      description: Returns information about the action with the specified ID that\n        is associated with the specified rule.\n      operationId: getActionByIdForRule\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Action'\n          description: An action matching the specified rule ID was returned.\n        \"401\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: A action with the specified ID was not found, or the requesting\n            user lacks catalog.rules.read permission for it.\n      x-authz-scope:\n      - catalog.rules.read\n    parameters:\n    - $ref: '#/components/parameters/AuthorizationHeader'\n    - $ref: '#/components/parameters/Tenant'\n    - $ref: '#/components/parameters/RuleResource'\n    - $ref: '#/components/parameters/ActionID'\n    patch:\n      description: Modifies the action with the specified ID that is associated with\n        the specified rule.\n      operationId: updateActionByIdForRule\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ActionPATCH'\n        description: The properties to update in the specified action.\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Action'\n          description: The action was updated.\n        \"404\":\n          description: The action was not found.\n      x-authz-scope:\n      - catalog.rules.update\n      - catalog.rules.read\n\n# Retrieved from scp-openapi commit 820564ba8a17697d087ff171b14cbad60a716ee3 path: catalog/v2beta1/openapi.yaml"
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"JobDatasetTimeBucketsAvailableStatus\": parse enum values: parse value \"true\": expected type \"string\", got \"bool\""
}