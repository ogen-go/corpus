{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/FraunhoferISST/diva"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "core/services/resource-management/apiDoc/openapi.yml",
			"byteSize": 15757,
			"content": "openapi: 3.0.0\ninfo:\n  description: \"Resource Management Service is responsible for all CRUD operations on resources\"\n  version: 1.0.0\n  title: Resource Management API\ntags:\n  - name: resources\n    description: Operations about resources\npaths:\n  /resources:\n    post:\n      tags:\n        - resources\n      summary: Create resource\n      description: Create mew resources with the provided data. The attributes of the resource may vary depending on the\n        `resourceType`. The request body must containt at least all the attributes defined in the schema below. This opperations\n        supports bulk mode so that multiple resource can be created with one request\n      operationId: createResource\n      parameters:\n        - $ref: \"#/components/parameters/useridParam\"\n      requestBody:\n        $ref: \"#/components/requestBodies/ResourceCreate\"\n      responses:\n        201:\n          $ref: \"#/components/responses/ResourceCreateSuccess\"\n        207:\n          $ref: \"#/components/responses/Multi\"\n        406:\n          $ref: \"#/components/responses/InvalidDataError\"\n        409:\n          $ref: \"#/components/responses/ResourceAlreadyExistsError\"\n        500:\n          $ref: \"#/components/responses/UnexpectedError\"\n    get:\n      tags:\n        - resources\n      summary: Get list of resources\n      description: To get the list of resources you can specify projection with `fields` paramter and set the\n        page size with `pageSize`. Default page size is **30**. The next page can be fatched by using `cursor`\n        parameter. The cursor to the next page will be included in the response body.\n      operationId: getResources\n      parameters:\n        - $ref: \"#/components/parameters/useridParam\"\n        - name: fields\n          in: query\n          description: Coma separated projection fields\n          example: \"title,resourceType,description\"\n          required: false\n          explode: true\n          allowReserved: true\n          schema:\n            type: string\n        - name: cursor\n          in: query\n          description: Pagination cursor\n          required: false\n          explode: true\n          example: \"aHVpXzYwMTkzZmJlZTM0NmZhODVkNTE4YzJlYg==\"\n          schema:\n            type: string\n        - name: pageSize\n          in: query\n          description: Page size\n          required: false\n          explode: true\n          example: 10\n          schema:\n            type: integer\n            format: int32\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  collectionSize:\n                    type: integer\n                  collection:\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/Resource\"\n                  cursor:\n                    type: string\n                  total:\n                    type: number\n        \"500\":\n          $ref: \"#/components/responses/UnexpectedError\"\n\n  \"/resources/{id}\":\n    get:\n      tags:\n        - resources\n      summary: Get resource by id\n      description: Projection can be specified with `fields` paramter\n      operationId: getResourceById\n      parameters:\n        - $ref: \"#/components/parameters/useridParam\"\n        - name: id\n          in: path\n          description: The id of the resource to fetch\n          required: true\n          schema:\n            type: string\n        - name: fields\n          in: query\n          description: Coma separated projection fields\n          required: false\n          explode: true\n          allowReserved: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/ResourceResponse\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n        \"500\":\n          $ref: \"#/components/responses/UnexpectedError\"\n    put:\n      tags:\n        - resources\n      summary: Update resource\n      description: Use this method, if you want to replace complete resource. New resource is created if no resource with\n        the provided `id` exists. Note that on this operation **all** fields are replaced.\n      operationId: updateResource\n      parameters:\n        - $ref: \"#/components/parameters/useridParam\"\n        - name: id\n          in: path\n          description: id of the resource\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: \"#/components/requestBodies/ResourceUpdate\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/Success\"\n        \"201\":\n          description: Resource created\n        \"406\":\n          $ref: \"#/components/responses/InvalidDataError\"\n        \"409\":\n          $ref: \"#/components/responses/ResourceAlreadyExistsError\"\n        \"500\":\n          $ref: \"#/components/responses/UnexpectedError\"\n    patch:\n      tags:\n        - resources\n      summary: Patch resource\n      description: Use this method to do a partial update of the resource. In the request provided fields\n        will be merged with the existing resource object. Merge is always performed at the root level. Empty patches are\n        not accepted\n      operationId: patchResource\n      parameters:\n        - $ref: \"#/components/parameters/useridParam\"\n        - name: id\n          in: path\n          description: id of the resource\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: \"#/components/requestBodies/ResourcesPatch\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SuccessEmpty\"\n        \"406\":\n          $ref: \"#/components/responses/InvalidDataError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n        \"409\":\n          $ref: \"#/components/responses/ResourceAlreadyExistsError\"\n        \"500\":\n          $ref: \"#/components/responses/UnexpectedError\"\n    post:\n      tags:\n        - resources\n      summary: Post resource (alias for patch)\n      description: Use this method to do a partial update of the resource. In the request provided fields\n        will be merged with the existing resource object. Merge is always performed at the root level. Empty patches are\n        not accepted\n      operationId: patchResource\n      parameters:\n        - $ref: \"#/components/parameters/useridParam\"\n        - name: id\n          in: path\n          description: id of the resource\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: \"#/components/requestBodies/ResourcesPatch\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SuccessEmpty\"\n        \"406\":\n          $ref: \"#/components/responses/InvalidDataError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n        \"409\":\n          $ref: \"#/components/responses/ResourceAlreadyExistsError\"\n        \"500\":\n          $ref: \"#/components/responses/UnexpectedError\"\n    delete:\n      tags:\n        - resources\n      summary: Delete resource\n      description: Delete existing resource by id\n      operationId: deleteResource\n      parameters:\n        - $ref: \"#/components/parameters/useridParam\"\n        - name: id\n          in: path\n          description: id of the resource\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SuccessEmpty\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n        \"500\":\n          $ref: \"#/components/responses/UnexpectedError\"\n\nservers:\n  - url: http://localhost:3000\ncomponents:\n  requestBodies:\n    ResourceCreate:\n      required: true\n      content:\n        application/json:\n          schema:\n            oneOf:\n              - $ref: \"#/components/schemas/ResourceCreate\"\n              - $ref: \"#/components/schemas/ResourceCreateBulk\"\n    ResourceUpdate:\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ResourceCreate\"\n\n    ResourcesPatch:\n      required: true\n      content:\n        application/json:\n          schema:\n            title: Patch body\n            description: The body can be any attribute defined in the resource schema. The supplied attributes\n              overwrite the existing\n            type: object\n            minProperties: 1\n  schemas:\n    ResourceCreate:\n      description: Minimal required attributes for resource creation\n      type: object\n      required:\n        - resourceType\n        - title\n      properties:\n        title:\n          type: string\n          title: Title\n          description: The title of the entity\n          minLength: 1\n          pattern: \"^(.*)$\"\n        resourceType:\n          type: string\n          title: Resource Type\n          description: The general type of the resource\n          minLength: 1\n          enum:\n            - generic\n            - file\n            - urbanPulseSensor\n\n    ResourceCreateBulk:\n      type: array\n      title: Resource create bulk request\n      description: Array of resources to create multiple resource in one bulk request\n      items:\n        $ref: \"#/components/schemas/ResourceCreate\"\n\n    Entity:\n      title: General Entity Data\n      type: object\n      required:\n        - title\n        - id\n      additionalProperties: true\n      properties:\n        id:\n          type: string\n          title: Unique ID\n          description: An unique ID of the entity\n          example: \"entity:uuid:4600ea84-485a-49b3-8f15-85fc5ce2e0f9\"\n          format: uri\n          pattern: \"^resource:uuid:\"\n        created:\n          type: string\n          title: Creation date\n          description: Creation date of the entity\n          example: '2018-11-08T13:55:45Z'\n          format: date-time\n        licenses:\n          type: array\n          title: Licenses\n          description: Licenses which are applied to the entity\n          items:\n            type: string\n            title: Items\n            description: A license\n            format: uri\n        accessCount:\n          title: Access count\n          description: How many times this entity was viewed\n          type: number\n        modified:\n          type: string\n          title: Modification date\n          description: Timestamp of the last change of the data\n          example: '2018-11-08T13:55:45Z'\n          format: date-time\n        title:\n          type: string\n          title: Title\n          description: The title of the entity\n          pattern: \"^(.*)$\"\n        description:\n          type: string\n          title: Description\n          description: The description of the entity\n        keywords:\n          type: array\n          title: Keywords\n          description: Keywords which tag the entity\n          items:\n            type: string\n            title: Items\n            description: A keyword\n        owner:\n          type: string\n          title: Owner ID\n          description: Owner of this entity\n          pattern: \"^(.*)$\"\n        versionInfo:\n          type: string\n          title: Version Info\n          description: A string describing the version of the entity\n          pattern: \"^(.*)$\"\n        versionNotes:\n          type: string\n          title: Version notes\n          description: A string describing the version of the entity\n          pattern: \"^(.*)$\"\n\n    Resource:\n      allOf:\n        - $ref: \"#/components/schemas/Entity\"\n        - type: object\n          title: General Resource Data\n          description: General Resource schema\n          additionalProperties: true\n          required:\n            - resourceType\n          properties:\n            resourceType:\n              type: string\n              title: Resource Type\n              description: The general type of the resource\n              enum:\n                - file\n                - generic\n                - urban-pulse-sensor\n    Error:\n      type: object\n      title: Operation error\n      description: Error that can occure on request processing\n      required:\n        - type\n        - message\n        - code\n      properties:\n        type:\n          title: Error type\n          description: Futher error type information\n          type: string\n        message:\n          title: Error message\n          description: Details about error\n          type: string\n        code:\n          title: Error code\n          description: HTTP error code\n          type: number\n          format: int32\n          example: 409\n        errors:\n          title: Errors\n          description: More error details that are reference in most case specification or schema validation errors\n          type: array\n          items:\n            type: object\n  responses:\n    Success:\n      description: Succesful\n      content:\n        text/html:\n          schema:\n            type: string\n    SuccessEmpty:\n      description: Succesful operation\n    Multi:\n      description: Multi-status response in case of a bulk request\n      content:\n        application/json:\n          schema:\n            title: Multi-status response\n            description: Indicates the status for operation for each resource in a bulk request\n            type: array\n            items:\n              type: object\n              required:\n                - statusCode\n                - uniqueFingerprint\n              properties:\n                statusCode:\n                  title: Status Code\n                  description: Status Code for single resource operation. Can be one of the codes that is returned for\n                    opeartion on a single resource\n                  type: integer\n                  example: 201\n                uniqueFingerprint:\n                  type: string\n                  title: Unique indentifier\n                  description: Global Unique indentifier as described in resource schema\n                data:\n                  title: Operation data\n                  description: Data as a result of a single resource operation\n                  oneOf:\n                    - type: string\n                    - type: object\n                error:\n                  $ref: \"#/components/schemas/Error\"\n\n    ResourceCreateSuccess:\n      description: Succesful resource creation retruns created resource id\n      content:\n        text/html:\n          schema:\n            type: string\n            title: Created resource id\n            description: An unique id of the processed entity\n            example: \"resource:uuid:4600ea84-485a-49b3-8f15-85fc5ce2e0f9\"\n            format: uri\n            pattern: \"^resource:uuid:\"\n    ResourceResponse:\n      description: Resource data response\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Resource\"\n\n    UnexpectedError:\n      description: Internal error\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n    NotFoundError:\n      description: Entity not found\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n    InvalidDataError:\n      description: Invalid data supplied\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n    ResourceAlreadyExistsError:\n      description: Resource with the given `uniqueFingerprint` already exists\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n  parameters:\n    useridParam:\n      in: header\n      description: The id of the origin that produces action/message. Can be a user or service\n      name: x-actorid\n      schema:\n        type: string\n        minLength: 1\n      required: true\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /resources/{id}: patch: duplicate operationId: \"patchResource\""
}