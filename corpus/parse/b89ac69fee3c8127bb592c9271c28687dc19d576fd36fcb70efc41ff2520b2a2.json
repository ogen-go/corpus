{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/biocore/microsetta-private-api"
		},
		"file": {
			"name": "microsetta_private_api.yaml",
			"size": 0,
			"path": "microsetta_private_api/api/microsetta_private_api.yaml",
			"byteSize": 114901,
			"content": "openapi: 3.0.0\ninfo:\n  description: Private Microsetta RESTful API\n  version: \"0.3.0-oas3\"\n  title: Private Microsetta RESTful API (OAS 3.0)\nservers:\n  - url: '/api'\npaths:\n  '/accounts':\n    get:\n      operationId: microsetta_private_api.api.find_accounts_for_login\n      tags:\n        - Account\n      summary: Retrieve an array of accounts accessible to the provided login\n      description: Retrieve an array of accounts accessible to the provided login\n      parameters:\n        - $ref: '#/components/parameters/language_tag'\n      responses:\n        '200':\n          description: Array of accessible accounts\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/account'\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n    post:\n      operationId: microsetta_private_api.api.register_account\n      tags:\n        - Account\n      summary: Register new user account\n      description: Register new user account\n      parameters:\n        - $ref: '#/components/parameters/language_tag'\n      requestBody:\n        content:\n          application/json:\n            # Send (non-readOnly) values of account schema PLUS kit name OR activation code\n            schema:\n              allOf:\n                - $ref: '#/components/schemas/account'\n                - type: \"object\"\n                  properties:\n                    kit_name:\n                      $ref: '#/components/schemas/kit_name'\n                    code:\n                      $ref: '#/components/schemas/activation_code'\n      responses:\n        '201':\n          description: Successfully registered new user account\n          headers:\n            Location:\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/account'\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n        '422':\n          $ref: '#/components/responses/422UnprocessableEntity'\n\n  '/accounts/legacies':\n    post:\n      operationId: microsetta_private_api.api.claim_legacy_acct\n      tags:\n        - Account\n      summary: Claim any legacy accounts for this user's email and return an array of them\n      description: Claim any legacy accounts for this user's email and return an array of them\n      parameters:\n        - $ref: '#/components/parameters/language_tag'\n      responses:\n        '200':\n          description: Successfully claimed legacy account(s)\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/account'\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n        '422':\n          $ref: '#/components/responses/422UnprocessableEntity'\n\n  '/accounts/{account_id}':\n    get:\n      operationId: microsetta_private_api.api.read_account\n      tags:\n        - Account\n      summary: Get user account information\n      description: Get user account information\n      parameters:\n        - $ref: '#/components/parameters/account_id'\n        - $ref: '#/components/parameters/language_tag'\n      responses:\n        '200':\n          description: Successfully returned account information\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/account'\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n    put:\n      operationId: microsetta_private_api.api.update_account\n      tags:\n        - Account\n      summary: Update user account information\n      description: Update user account information\n      parameters:\n        - $ref: '#/components/parameters/account_id'\n        - $ref: '#/components/parameters/language_tag'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/account'\n      responses:\n        '200':\n          description: Successfully updated user account information\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/account'\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n        '422':\n          $ref: '#/components/responses/422UnprocessableEntity'\n    \n    delete:\n      operationId: microsetta_private_api.admin.admin_impl.delete_account\n      tags:\n        - Account\n        - Admin\n      summary: Delete and scrub the user and sources\n      description: Delete and scrub the user and sources\n      parameters:\n        - $ref: '#/components/parameters/account_id'\n      responses:\n        '204':\n          description: Successfully deleted and scrubbed the account\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n        '422':\n          $ref: '#/components/responses/422UnprocessableEntity'\n\n  '/accounts/{account_id}/check_duplicate_source':\n    post:\n      operationId: microsetta_private_api.api.check_duplicate_source_name_email\n      tags:\n        - Account\n      summary: Get information about duplicate source\n      description: Get information about  duplicate source\n      parameters:\n        - $ref: '#/components/parameters/account_id'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                participant_name: # Field is named participant_name, but contents are used to fill source's name\n                  $ref: '#/components/schemas/source_name'\n                participant_email:\n                  $ref: '#/components/schemas/participant_email'\n              required:\n                    - participant_name\n                    - participant_email\n      responses:\n        '200':\n          description: Successfully returned source information\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  source_match:\n                    type: boolean\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n\n  '/accounts/{account_id}/email_match':\n    get:\n      operationId: microsetta_private_api.api.check_email_match\n      tags:\n        - Account\n      summary: Check if email on microsetta account matches email on authentication account\n      description: Check if email on microsetta account matches email on authentication account\n      parameters:\n        - $ref: '#/components/parameters/account_id'\n        - $ref: '#/components/parameters/language_tag'\n      responses:\n        '200':\n          description: Successfully returned email match status\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  email_match:\n                    type: boolean\n                    example: true\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n\n  '/accounts/{account_id}/consent':\n    get:\n      operationId: microsetta_private_api.api.render_consent_doc\n      tags:\n        - Consent\n      summary: Retrieve personalized consent form for display to user\n      description: Retrieve personalized consent form for display to user\n      parameters:\n        - $ref: '#/components/parameters/account_id'\n        - $ref: '#/components/parameters/language_tag'\n      responses:\n        '200':\n          description: Consent form\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  add_human_title:\n                    type: string\n                    example: Add a New Human Source\n                  sel_age_range:\n                    type: string\n                    example: Select age range of participant\n                  age_0_6:\n                    type: string\n                  age_7_12:\n                    type: string\n                  age_12_17:\n                    type: string\n                  age_18:\n                    type: string\n                  consent_your_child:\n                    type: string\n                  participation_agreement:\n                    type: string\n                  exhibit_a:\n                    type: string\n                  bill_of_rights:\n                    type: string\n                  text_i_have_read_parent:\n                    type: string\n                  participant_name:\n                    type: string\n                  participant_email:\n                    type: string\n                  participant_parent_1:\n                    type: string\n                  participant_parent_2:\n                    type: string\n                  participant_deceased_parents:\n                    type: string\n                  assent_7_12:\n                    type: string\n                  text_i_have_read_simplified:\n                    type: string\n                  person_attaining_assent:\n                    type: string\n                  text_assent_witness:\n                    type: string\n                  obtainer_name:\n                    type: string\n                  assent_13_17:\n                    type: string\n                  text_i_have_read_1:\n                    type: string\n                  consent_18:\n                    type: string\n\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n    post:\n      operationId: microsetta_private_api.api.create_human_source_from_consent\n      tags:\n        - Source (from Consent)\n      summary: Create a new human source based on a consent form\n      description: Create a new human source based on a consent form\n      parameters:\n        - $ref: '#/components/parameters/account_id'\n        - $ref: '#/components/parameters/language_tag'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:  # each is a form field name\n                age_range:\n                  $ref: '#/components/schemas/age_range'\n                participant_name:  # Field is named participant_name, but contents are used to fill source's name\n                  $ref: '#/components/schemas/source_name'\n                participant_email:\n                  $ref: '#/components/schemas/participant_email'\n                parent_1_name:\n                  $ref: '#/components/schemas/parent_1_name'\n                parent_2_name:\n                  $ref: '#/components/schemas/parent_2_name'\n                deceased_parent:\n                  type: string\n                  enum: ['true', 'false']\n                  example: 'true'\n                obtainer_name:\n                  $ref: '#/components/schemas/obtainer_name'\n              required:\n                - age_range\n                - participant_name\n                - participant_email\n      responses:\n        '201':\n          description: Successfully created new human source based on consent form\n          headers:\n            Location:\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/human_source'\n              examples:\n                human_adult_source:\n                  $ref: '#/components/examples/human_adult_source_w_id'\n                human_child_source:\n                  $ref: '#/components/examples/human_child_source_w_id'\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n        '422':\n          $ref: '#/components/responses/422UnprocessableEntity'\n\n  '/accounts/{account_id}/sources':\n    get:\n      operationId: microsetta_private_api.api.read_sources\n      tags:\n        - Sources\n      summary: Get sources associated with account, filtered by source type if a source type is provided\n      description: Get sources associated with account, filtered by source type if a source type is provided\n      parameters:\n        - $ref: '#/components/parameters/account_id'\n        - $ref: '#/components/parameters/source_type'\n        - $ref: '#/components/parameters/language_tag'\n      responses:\n        '200':\n          description: Successfully returned sources\n          content:\n            application/json:\n              schema:\n                type: array\n                items:  # NB: return whole source objects, unless returning \u003e5KB compressed data\n                  oneOf:\n                  - $ref: '#/components/schemas/human_source'\n                  - $ref: '#/components/schemas/nonhuman_source'\n              example: # explicit examples hardcoded here because connexion can't seem to infer examples for lists\n                - source_id: \"7cb1b4a9-5d42-42b2-9364-7bceb6630ac3\"\n                  source_name: \"Ophelia Doe\"\n                  source_type: human\n                  consent:\n                    participant_email: \"nunnery@example.com\"\n                    age_range: \"18-plus\"\n                - source_id: \"df077cd7-f2c7-42e4-b8ed-9c7e9dd47ce5\"\n                  source_name: \"P. Doe\"\n                  source_type: human\n                  consent:\n                    participant_email: \"pomegranate@example.com\"\n                    age_range: \"0-6\"\n                    child_info:\n                      parent_1_name: \"Demeter Doe\"\n                      parent_2_name: \"Zeus Doe\"\n                      deceased_parent: false\n                      obtainer_name: \"Hades Doe\"\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n    post:\n      operationId: microsetta_private_api.api.create_source\n      tags:\n        - Source\n      summary: Create new source of a specific type\n      description: Create new source of a specific type\n      parameters:\n        - $ref: '#/components/parameters/account_id'\n        - $ref: '#/components/parameters/language_tag'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: '#/components/schemas/human_source'\n                - $ref: '#/components/schemas/nonhuman_source'\n            examples:\n              human_adult_source:\n                $ref: '#/components/examples/human_adult_source'\n              human_child_source:\n                $ref: '#/components/examples/human_child_source'\n              nonhuman_source:\n                $ref: '#/components/examples/nonhuman_source'\n      responses:\n        '201':\n          description: Successfully created new source\n          headers:\n            Location:\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/human_source'\n                  - $ref: '#/components/schemas/nonhuman_source'\n              examples:\n                human_adult_source:\n                  $ref: '#/components/examples/human_adult_source_w_id'\n                human_child_source:\n                  $ref: '#/components/examples/human_child_source_w_id'\n                nonhuman_source:\n                  $ref: '#/components/examples/nonhuman_source_w_id'\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n        '422':\n          $ref: '#/components/responses/422UnprocessableEntity'\n\n  '/accounts/{account_id}/sources/{source_id}':\n    get:\n      operationId: microsetta_private_api.api.read_source\n      tags:\n        - Source\n      summary: Get information about source\n      description: Get information about source\n      parameters:\n        - $ref: '#/components/parameters/account_id'\n        - $ref: '#/components/parameters/source_id'\n        - $ref: '#/components/parameters/language_tag'\n      responses:\n        '200':\n          description: Successfully returned source information\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/human_source'\n                  - $ref: '#/components/schemas/nonhuman_source'\n              examples:\n                human_adult_source:\n                  $ref: '#/components/examples/human_adult_source_w_id'\n                human_child_source:\n                  $ref: '#/components/examples/human_child_source_w_id'\n                nonhuman_source:\n                  $ref: '#/components/examples/nonhuman_source_w_id'\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n    put:\n      operationId: microsetta_private_api.api.update_source\n      tags:\n        - Source\n      summary: Update information for source\n      description: Update information for source\n      parameters:\n        - $ref: '#/components/parameters/account_id'\n        - $ref: '#/components/parameters/source_id'\n        - $ref: '#/components/parameters/language_tag'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: '#/components/schemas/human_source'\n                - $ref: '#/components/schemas/nonhuman_source'\n            examples:\n              human_adult_source:\n                $ref: '#/components/examples/human_adult_source'\n              human_child_source:\n                $ref: '#/components/examples/human_child_source'\n              nonhuman_source:\n                $ref: '#/components/examples/nonhuman_source'\n      responses:\n        '200':\n          description: Successfully updated source information\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/human_source'\n                  - $ref: '#/components/schemas/nonhuman_source'\n              examples:\n                human_adult_source:\n                  $ref: '#/components/examples/human_adult_source_w_id'\n                human_child_source:\n                  $ref: '#/components/examples/human_child_source_w_id'\n                nonhuman_source:\n                  $ref: '#/components/examples/nonhuman_source_w_id'\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n        '422':\n          $ref: '#/components/responses/422UnprocessableEntity'\n    delete:\n      operationId: microsetta_private_api.api.delete_source\n      tags:\n        - Source\n      summary: Delete source\n      description: Delete source\n      parameters:\n        - $ref: '#/components/parameters/account_id'\n        - $ref: '#/components/parameters/source_id'\n        - $ref: '#/components/parameters/language_tag'\n      responses:\n        '204':\n          description: Successfully deleted source\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n        '422':\n          $ref: '#/components/responses/422UnprocessableEntity'\n          # NB: This would be returned if source cannot be deleted bc has a sample assigned to it\n\n  '/accounts/{account_id}/sources/{source_id}/survey_templates':\n    get:\n      operationId: microsetta_private_api.api.read_survey_templates\n      tags:\n        - Survey Templates\n      summary: Get survey templates available to this source\n      description: Get survey templates available to this source\n      parameters:\n        - $ref: '#/components/parameters/account_id'\n        - $ref: '#/components/parameters/source_id'\n        - $ref: '#/components/parameters/language_tag'\n      responses:\n        '200':\n          description: Successfully returned list of survey templates\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/thin_survey_template_info'\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n    # NB: No delete, put, or post for survey templates--can maybe expand to that for admin user in future\n\n  '/accounts/{account_id}/sources/{source_id}/survey_templates/{survey_template_id}':\n    get:\n      operationId: microsetta_private_api.api.read_survey_template\n      tags:\n        - Survey Template\n      summary: Get a particular survey template available to this source\n      description: Get a particular survey template available to this source\n      parameters:\n        - $ref: '#/components/parameters/account_id'\n        - $ref: '#/components/parameters/source_id'\n        - $ref: '#/components/parameters/survey_template_id'\n        - $ref: '#/components/parameters/language_tag'\n        - $ref: '#/components/parameters/survey_redirect_url'\n        - $ref: '#/components/parameters/vioscreen_ext_sample_id'\n      responses:\n        '200':\n          description: Successfully returned a specific survey template\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/thin_survey_template_info'\n                  - type: \"object\"\n                    properties:\n                      survey_template_text:\n                        $ref: '#/components/schemas/survey_template_text'\n                    required:\n                      - survey_template_text\n\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n    # NB: No delete, put, or post for a particular survey template--can maybe expand to that for admin user in future\n\n  '/accounts/{account_id}/sources/{source_id}/surveys':\n    # NB: \"survey\" refers to an instance of an answered survey. In contrast, the set of *questions* comprising a survey\n    # is called a \"survey template\" (see elsewhere in this api)\n    get:\n      operationId: microsetta_private_api.api.read_answered_surveys\n      tags:\n        - Surveys (By Source)\n      summary: Get answered survey instances associated with source\n      description: Get answered survey instances associated with source\n      parameters:\n        - $ref: '#/components/parameters/account_id'\n        - $ref: '#/components/parameters/source_id'\n        - $ref: '#/components/parameters/language_tag'\n      responses:\n        '200':\n          description: Successfully returned list of answered surveys\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  allOf:\n                    - $ref: '#/components/schemas/thin_survey_template_info'\n                    - type: \"object\"\n                      properties:\n                        survey_id:\n                          $ref: '#/components/schemas/survey_id'\n                        survey_status:\n                          $ref: '#/components/schemas/survey_status'\n                      required:\n                        - survey_id\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n    post:\n      operationId: microsetta_private_api.api.submit_answered_survey\n      tags:\n        - Survey (By Source)\n      summary: Submit new answered survey\n      description: Submit new answered survey\n      parameters:\n        - $ref: '#/components/parameters/account_id'\n        - $ref: '#/components/parameters/source_id'\n        - $ref: '#/components/parameters/language_tag'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                survey_template_id:\n                  $ref: '#/components/schemas/survey_template_id'\n                survey_text:\n                  $ref: '#/components/schemas/survey_text'\n      responses:\n        '201':\n          description: Successfully submitted new answered survey\n          headers:\n            Location:\n              schema:\n                type: string\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n        '422':\n          $ref: '#/components/responses/422UnprocessableEntity'\n\n  '/accounts/{account_id}/sources/{source_id}/surveys/{survey_id}':\n    get:\n      operationId: microsetta_private_api.api.read_answered_survey\n      tags:\n        - Survey (By Source)\n      summary: Get information about an answered survey\n      description: Get information about an answered survey\n      parameters:\n        - $ref: '#/components/parameters/account_id'\n        - $ref: '#/components/parameters/source_id'\n        - $ref: '#/components/parameters/survey_id'\n        - $ref: '#/components/parameters/language_tag'\n      responses:\n        '200':\n          description: Successfully returned information about answered survey\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/thin_survey_template_info'\n                  - type: \"object\"\n                    properties:\n                      survey_id:\n                        $ref: '#/components/schemas/survey_id'\n                      survey_status:\n                        $ref: '#/components/schemas/survey_status'\n                      survey_text:\n                        $ref: '#/components/schemas/survey_text'\n                    required:\n                      - survey_id\n                      - survey_text\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n    # NB: NO \"put\"--you shouldn't update an answered survey, but instead should take a new one\n    # NB: Currently no delete ... can dissociate a survey from a sample but not delete the survey itself\n\n  '/accounts/{account_id}/sources/{source_id}/surveys/{survey_id}/reports/topfoodreport':\n    # Attempts to generate the vioscreen top food report pdf from this vioscreen survey\n    get:\n      # TODO: Unsure if this should be get or post- it's post on vioscreen, but\n      # we can't easily embed the pdf if the link is a post.  May need to post\n      # and cache results so we can make it a get for embedding.\n      operationId: microsetta_private_api.api.top_food_report\n      tags:\n        - Survey\n      summary: Generate vioscreen top food report\n      description:  Generate vioscreen top food report\n      parameters:\n        - $ref: '#/components/parameters/account_id'\n        - $ref: '#/components/parameters/source_id'\n        - $ref: '#/components/parameters/survey_id'\n        - $ref: '#/components/parameters/language_tag'\n      responses:\n        '200':\n          description: Top Food Report pdf\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n\n  '/accounts/{account_id}/sources/{source_id}/samples':\n    get:\n      operationId: microsetta_private_api.api.read_sample_associations\n      tags:\n        - Samples\n      summary: Get samples associated with this source\n      description: Get samples associated with this source\n      parameters:\n        - $ref: '#/components/parameters/account_id'\n        - $ref: '#/components/parameters/source_id'\n        - $ref: '#/components/parameters/language_tag'\n      responses:\n        '200':\n          description: Successfully returned list of samples\n          content:\n            application/json:\n              schema:\n                type: array\n                items:  # Returning full samples instead of just ids as their info won't be large\n                  $ref: '#/components/schemas/sample'\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n    post:\n      operationId: microsetta_private_api.api.associate_sample\n      tags:\n        - Sample\n      summary: Associate an unassociated sample with this source\n      description: Associate an unassociated sample with this source\n      parameters:\n        - $ref: '#/components/parameters/account_id'\n        - $ref: '#/components/parameters/source_id'\n        - $ref: '#/components/parameters/language_tag'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                sample_id:\n                  # NB: Getting the sample id to input here is outside the scope of this endpoint--see kits\n                  # NB: Can't use $ref: '#/components/schemas/sample_id' here because that is a readOnly property\n                  # and thus is NOT SENT with posts (the readOnly functionality didn't really anticipate\n                  # this use case of creating a new *association* rather than creating a new *object*).\n                  type: string\n                  example: \"384fd128-3a42-4a6b-a37c-3fc3cbf027bc\"\n              required:\n                - sample_id\n      responses:\n        '201':\n          description: Successfully associated sample with source\n          headers:\n            Location:\n              schema:\n                type: string\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n        '422':\n          $ref: '#/components/responses/422UnprocessableEntity'\n\n  '/accounts/{account_id}/sources/{source_id}/samples/{sample_id}':\n    # NB: info about the sample--type, datetime, notes--does NOT exist *separate* from source association, so\n    # it can only be read/updated/deleted in the context of a source association\n    get:\n      operationId: microsetta_private_api.api.read_sample_association\n      tags:\n        - Sample\n      summary: Get information about a sample associated with this source\n      description:  Get information about a sample associated with this source\n      parameters:\n        - $ref: '#/components/parameters/account_id'\n        - $ref: '#/components/parameters/source_id'\n        - $ref: '#/components/parameters/sample_id'\n        - $ref: '#/components/parameters/language_tag'\n      responses:\n        '200':\n          description: Successfully returned sample information\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/sample'\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n    put:\n      operationId: microsetta_private_api.api.update_sample_association\n      tags:\n        - Sample\n      summary: Update information about a sample associated with this source\n      description:  Update information about a sample associated with this source\n      parameters:\n        - $ref: '#/components/parameters/account_id'\n        - $ref: '#/components/parameters/source_id'\n        - $ref: '#/components/parameters/sample_id'\n        - $ref: '#/components/parameters/language_tag'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/sample'\n      responses:\n        '200':\n          description: Successfully updated sample information\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/sample'\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n        '422':\n          # NB: This error would cover the case where you can't update a sample's info bc we already received it\n          $ref: '#/components/responses/422UnprocessableEntity'\n    delete:\n      tags:\n        - Sample\n      operationId: microsetta_private_api.api.dissociate_sample\n      summary: Dissociate a sample from a source and any of its associated surveys\n      description: Dissociate a sample from a source and any of its associated surveys\n      parameters:\n        - $ref: '#/components/parameters/account_id'\n        - $ref: '#/components/parameters/source_id'\n        - $ref: '#/components/parameters/sample_id'\n        - $ref: '#/components/parameters/language_tag'\n      responses:\n        '204':\n          description: Sample was dissociated from source and source's surveys\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n        '422':\n          # NB: This error would cover the case where you can't dissociate it bc it was already processed\n          $ref: '#/components/responses/422UnprocessableEntity'\n\n  '/accounts/{account_id}/sources/{source_id}/samples/{sample_id}/vioscreen/session':\n    get:\n      operationId: microsetta_private_api.api.read_sample_vioscreen_session\n      tags:\n        - Vioscreen\n      summary: Get information about a Vioscreen session associated with a sample\n      description: Get information about a Vioscreen session associated with a sample\n      parameters:\n        - $ref: '#/components/parameters/account_id'\n        - $ref: '#/components/parameters/source_id'\n        - $ref: '#/components/parameters/sample_id'\n      responses:\n        '200':\n          description: Successfully returned session information\n          content:\n            application/json:\n              schema:\n                type:\n                  object\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n\n  '/accounts/{account_id}/sources/{source_id}/samples/{sample_id}/vioscreen/percentenergy':\n    get:\n      operationId: microsetta_private_api.api.read_sample_vioscreen_percent_energy\n      tags:\n        - Vioscreen\n      summary: Get information about a Vioscreen percent energy associated with a sample\n      description: Get information about a Vioscreen percent energy associated with a sample\n      parameters:\n        - $ref: '#/components/parameters/account_id'\n        - $ref: '#/components/parameters/source_id'\n        - $ref: '#/components/parameters/sample_id'\n      responses:\n        '200':\n          description: Successfully returned percent energy information\n          content:\n            application/json:\n              schema:\n                type:\n                  object\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n\n  '/accounts/{account_id}/sources/{source_id}/samples/{sample_id}/vioscreen/dietaryscore':\n    get:\n      operationId: microsetta_private_api.api.read_sample_vioscreen_dietary_score\n      tags:\n        - Vioscreen\n      summary: Get information about a Vioscreen dietary score associated with a sample\n      description: Get information about a Vioscreen dietary score associated with a sample\n      parameters:\n        - $ref: '#/components/parameters/account_id'\n        - $ref: '#/components/parameters/source_id'\n        - $ref: '#/components/parameters/sample_id'\n      responses:\n        '200':\n          description: Successfully returned dietary score information\n          content:\n            application/json:\n              schema:\n                type:\n                  array\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n\n  '/accounts/{account_id}/sources/{source_id}/samples/{sample_id}/vioscreen/supplements':\n    get:\n      operationId: microsetta_private_api.api.read_sample_vioscreen_supplements\n      tags:\n        - Vioscreen\n      summary: Get information about a Vioscreen supplements associated with a sample\n      description: Get information about a Vioscreen supplements associated with a sample\n      parameters:\n        - $ref: '#/components/parameters/account_id'\n        - $ref: '#/components/parameters/source_id'\n        - $ref: '#/components/parameters/sample_id'\n      responses:\n        '200':\n          description: Successfully returned supplements information\n          content:\n            application/json:\n              schema:\n                type:\n                  object\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n\n  '/accounts/{account_id}/sources/{source_id}/samples/{sample_id}/vioscreen/foodcomponents':\n    get:\n      operationId: microsetta_private_api.api.read_sample_vioscreen_food_components\n      tags:\n        - Vioscreen\n      summary: Get information about a Vioscreen food components associated with a sample\n      description: Get information about a Vioscreen food components associated with a sample\n      parameters:\n        - $ref: '#/components/parameters/account_id'\n        - $ref: '#/components/parameters/source_id'\n        - $ref: '#/components/parameters/sample_id'\n      responses:\n        '200':\n          description: Successfully returned food components information\n          content:\n            application/json:\n              schema:\n                type:\n                  object\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n\n  '/accounts/{account_id}/sources/{source_id}/samples/{sample_id}/vioscreen/eatingpatterns':\n    get:\n      operationId: microsetta_private_api.api.read_sample_vioscreen_eating_patterns\n      tags:\n        - Vioscreen\n      summary: Get information about a Vioscreen eating patterns associated with a sample\n      description: Get information about a Vioscreen eating patterns associated with a sample\n      parameters:\n        - $ref: '#/components/parameters/account_id'\n        - $ref: '#/components/parameters/source_id'\n        - $ref: '#/components/parameters/sample_id'\n      responses:\n        '200':\n          description: Successfully returned eating patterns information\n          content:\n            application/json:\n              schema:\n                type:\n                  object\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n\n  '/accounts/{account_id}/sources/{source_id}/samples/{sample_id}/vioscreen/mpeds':\n    get:\n      operationId: microsetta_private_api.api.read_sample_vioscreen_mpeds\n      tags:\n        - Vioscreen\n      summary: Get information about a Vioscreen mpeds associated with a sample\n      description: Get information about a Vioscreen mpeds associated with a sample\n      parameters:\n        - $ref: '#/components/parameters/account_id'\n        - $ref: '#/components/parameters/source_id'\n        - $ref: '#/components/parameters/sample_id'\n      responses:\n        '200':\n          description: Successfully returned mpeds information\n          content:\n            application/json:\n              schema:\n                type:\n                  object\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n\n  '/accounts/{account_id}/sources/{source_id}/samples/{sample_id}/vioscreen/foodconsumption':\n    get:\n      operationId: microsetta_private_api.api.read_sample_vioscreen_food_consumption\n      tags:\n        - Vioscreen\n      summary: Get information about a Vioscreen food consumption associated with a sample\n      description: Get information about a Vioscreen food consumption associated with a sample\n      parameters:\n        - $ref: '#/components/parameters/account_id'\n        - $ref: '#/components/parameters/source_id'\n        - $ref: '#/components/parameters/sample_id'\n      responses:\n        '200':\n          description: Successfully returned food consumption information\n          content:\n            application/json:\n              schema:\n                type:\n                  object\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n\n  '/admin/vioscreen/username_to_barcode':\n    get:\n      operationId: microsetta_private_api.admin.admin_impl.get_vioscreen_sample_to_user\n      tags:\n        - Vioscreen\n      summary: Obtain a mapping from Vioscreen username to associated barcode\n      description: Obtain a mapping from Vioscreen username to associated barcode\n      responses:\n        '200':\n          description: Successfully returned username mapping\n          content:\n            application/json:\n              schema:\n                type:\n                  object\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n\n  '/vioscreen/dietaryscore/type/{score_type}/code/{score_code}':\n    get:\n      operationId: microsetta_private_api.api.get_vioscreen_dietary_scores_by_component\n      tags:\n        - Vioscreen\n      summary: Get information about Vioscreen dietary scores for a specific component\n      description: Get information about Vioscreen dietary scores for a specific component\n      parameters:\n        - $ref: '#/components/parameters/score_type'\n        - $ref: '#/components/parameters/score_code'\n      responses:\n        '200':\n          description: Successfully returned dietary score information\n          content:\n            application/json:\n              schema:\n                type:\n                  object\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n\n  '/vioscreen/dietaryscore/':\n    get:\n      operationId: microsetta_private_api.api.get_vioscreen_dietary_scores_descriptions\n      tags:\n        - Vioscreen\n      summary: Get information about Vioscreen dietary scores descriptions\n      description: Get information about Vioscreen dietary scores descriptions\n      responses:\n        '200':\n          description: Successfully returned dietary scores information\n          content:\n            application/json:\n              schema:\n                type:\n                  object\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n\n  '/vioscreen/foodcomponents/code/{fc_code}':\n    get:\n      operationId: microsetta_private_api.api.get_vioscreen_food_components_by_code\n      tags:\n        - Vioscreen\n      summary: Get information about Vioscreen food components for a specific code\n      description: Get information about Vioscreen food components for a specific code\n      parameters:\n        - $ref: '#/components/parameters/fc_code'\n      responses:\n        '200':\n          description: Successfully returned food components information\n          content:\n            application/json:\n              schema:\n                type:\n                  object\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n\n  '/vioscreen/foodcomponents':\n    get:\n      operationId: microsetta_private_api.api.get_vioscreen_food_components_descriptions\n      tags:\n        - Vioscreen\n      summary: Get information about Vioscreen food components descriptions\n      description: Get information about Vioscreen food components descriptions\n      responses:\n        '200':\n          description: Successfully returned food components information\n          content:\n            application/json:\n              schema:\n                type:\n                  object\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n\n  # NB: \"surveys\" is used as a path component in two different ways (here nested under sample and above nested\n  # directly under source.  The dev team assessed this and decided this dual usage was not unacceptably confusing.\n  '/accounts/{account_id}/sources/{source_id}/samples/{sample_id}/surveys':\n    get:\n      operationId: microsetta_private_api.api.read_answered_survey_associations\n      tags:\n        - Surveys (By Sample)\n      summary: Get list of answered surveys associated with this sample\n      description: Get list of answered surveys associated with this sample\n      parameters:\n        - $ref: '#/components/parameters/account_id'\n        - $ref: '#/components/parameters/source_id'\n        - $ref: '#/components/parameters/sample_id'\n        - $ref: '#/components/parameters/language_tag'\n      responses:\n        '200':\n          description: Successfully returned list of answered surveys associated with this sample\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  allOf:\n                    - $ref: '#/components/schemas/thin_survey_template_info'\n                    - type: \"object\"\n                      properties:\n                        survey_id:\n                          $ref: '#/components/schemas/survey_id'\n                        survey_status:\n                          $ref: '#/components/schemas/survey_status'\n                      required:\n                        - survey_id\n              example: # explicit examples hardcoded here because connexion can't seem to infer examples for lists\n                - survey_id: 1a7697cc-e202-4397-b12c-ab7e6d23bebd\n                  survey_template_id: bb5ca7de-98ae-457c-99c5-419931824d1c\n                  survey_template_title: \"Food Frequency Questionnaire\"\n                  survey_template_version: \"1.2\"\n                  survey_template_type: remote\n                - survey_id: a302f47c-8090-4ecd-b92f-14331b2807d3\n                  survey_template_id: 2afb9f63-c733-4fc6-b2c4-e5ccac8331ff\n                  survey_template_title: \"Dream Survey\"\n                  survey_template_version: \"0.1\"\n                  survey_template_type: local\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n    post:\n      operationId: microsetta_private_api.api.associate_answered_survey\n      tags:\n        - Survey (By Sample)\n      summary: Associate an answered survey with this sample\n      description: Associate an answered survey with this sample\n      parameters:\n        - $ref: '#/components/parameters/account_id'\n        - $ref: '#/components/parameters/source_id'\n        - $ref: '#/components/parameters/sample_id'\n        - $ref: '#/components/parameters/language_tag'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                survey_id:\n                  $ref: '#/components/schemas/survey_id'\n      responses:\n        '201':\n          description: Successfully associated answered survey with sample\n          headers:\n            Location:\n              schema:\n                type: string\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n        '422':\n          $ref: '#/components/responses/422UnprocessableEntity'\n\n  '/accounts/{account_id}/sources/{source_id}/samples/{sample_id}/surveys/{survey_id}':\n    # NB: I can't really see a way that this can be updated, or even viewed--the association simply exists or doesn't\n    delete:\n      tags:\n        - Survey (By Sample)\n      operationId: microsetta_private_api.api.dissociate_answered_survey\n      summary: Dissociate an answered survey from a sample\n      description: Dissociate an answered survey from a sample\n      parameters:\n        - $ref: '#/components/parameters/account_id'\n        - $ref: '#/components/parameters/source_id'\n        - $ref: '#/components/parameters/sample_id'\n        - $ref: '#/components/parameters/survey_id'\n        - $ref: '#/components/parameters/language_tag'\n      responses:\n        '204':\n          description: Answered survey was dissociated from sample\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n\n  '/slots/myfoodrepo/':\n    get:\n      operationId: microsetta_private_api.api.read_myfoodrepo_available_slots\n      tags:\n        - Surveys\n      summary: Get the number of open myfoodrepo annotator slots\n      description: Get the number of open myfoodrepo annotator slots\n      parameters:\n        - $ref: '#/components/parameters/language_tag'\n      responses:\n        '200':\n          description: Successfully returned the number of slots\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  number_of_available_slots:\n                    type: integer\n                  total_number_of_slots:\n                    type: integer\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n\n  '/kits/':\n    get:\n      operationId: microsetta_private_api.api.read_kit\n      tags:\n        - Kit Samples\n      summary: Get list of samples in kit that are not assigned to a source\n      description: Get list of samples in kit that are not assigned to a source\n      parameters:\n        - $ref: '#/components/parameters/kit_name'\n        - $ref: '#/components/parameters/language_tag'\n      responses:\n        '200':\n          description: Successfully returned list of unassigned samples\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/sample'\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n        '422':\n          $ref: '#/components/responses/422UnprocessableEntity'\n\n  '/can_activate':\n    get:\n      operationId: microsetta_private_api.api.check_activation\n      tags:\n        - Activation\n      summary: Check if email, code pair can be activated\n      description: Check if email, code pair can be activated\n      parameters:\n        - $ref: '#/components/parameters/email'\n        - $ref: '#/components/parameters/activation_code'\n      responses:\n        '200':\n          description: can_activate T/F and error string if unable to activate\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  can_activate:\n                    type: boolean\n                  error:\n                    type: string\n                    nullable: true\n\n  '/campaign_information':\n    get:\n      operationId: microsetta_private_api.api.get_campaign_information\n      tags:\n        - Campaigns\n      summary: Get campaign information based on provided campaign_id\n      description: Get campaign information based on provided campaign_id\n      security: []\n      parameters:\n        - in: query\n          name: campaign_id\n          description: unique identifier of campaign to get information for\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: campaign information\n          content:\n            application/json:\n              schema:\n                type: object\n    post:\n      operationId: microsetta_private_api.admin.admin_impl.post_campaign_information\n      tags:\n        - Campaigns\n        - Admin\n      summary: Create campaign\n      description: Create campaign\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                'title':\n                  type: string\n                'instructions':\n                  type: string\n                'permitted_countries':\n                  type: string\n                'language_key':\n                  type: string\n                'accepting_participants':\n                  type: string\n                'associated_projects':\n                  type: string\n                'language_key_alt':\n                  type: string\n                'title_alt':\n                  type: string\n                'instructions_alt':\n                  type: string\n                'extension':\n                  type: string\n                'send_thdmi_confirmation':\n                  type: string\n              required:\n                - title\n                - associated_projects\n      responses:\n        '200':\n          description: campaign information\n          content:\n            application/json:\n              schema:\n                type: object\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n    put:\n      operationId: microsetta_private_api.admin.admin_impl.put_campaign_information\n      tags:\n        - Campaigns\n        - Admin\n      summary: Update campaign\n      description: Update campaign\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                'campaign_id':\n                  type: string\n                'title':\n                  type: string\n                'instructions':\n                  type: string\n                'permitted_countries':\n                  type: string\n                'language_key':\n                  type: string\n                'accepting_participants':\n                  type: string\n                'language_key_alt':\n                  type: string\n                'title_alt':\n                  type: string\n                'instructions_alt':\n                  type: string\n                'extension':\n                  type: string\n                'send_thdmi_confirmation':\n                  type: string\n              required:\n                - campaign_id\n                - title\n      responses:\n        '200':\n          description: campaign information\n          content:\n            application/json:\n              schema:\n                type: object\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n\n  '/interested_user':\n    post:\n      operationId: microsetta_private_api.api.create_interested_user\n      tags:\n        - Campaigns\n      summary: Submit interested user's information\n      description: Submit interested user's information\n      security: [ ]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                'campaign_id':\n                  type: string\n                'acquisition_source':\n                  type: string\n                'first_name':\n                  type: string\n                'last_name':\n                  type: string\n                'email':\n                  type: string\n                'phone':\n                  type: string\n                'country':\n                  type: string\n                'address_1':\n                  type: string\n                'address_2':\n                  type: string\n                'address_3':\n                  type: string\n                'city':\n                  type: string\n                'state':\n                  type: string\n                'postal':\n                  type: string\n                'confirm_consent':\n                  type: string\n                'ip_address':\n                  type: string\n                'over_18':\n                  type: string\n                'residential_address':\n                  type: string\n              required:\n                - campaign_id\n                - first_name\n                - last_name\n                - email\n      responses:\n        '200':\n          description: Interested user ID\n          content:\n            application/json:\n              schema:\n                type: object\n        '400':\n          description: Creation or validation issue with the interested user\n\n  '/opt_out':\n    get:\n      operationId: microsetta_private_api.api.get_opt_out\n      tags:\n        - Campaigns\n      summary: Verify that an interested user exists for a given ID and can be opted out\n      description: Verify that an interested user exists for a given ID and can be opted out\n      security: [ ]\n      parameters:\n        - in: query\n          name: interested_user_id\n          description: unique identifier of interested user\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: interested user's id \u0026 campaign-oriented language information\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  'interested_user_id':\n                    type: string\n                  'force_primary_language':\n                    type: boolean\n                  'language_key':\n                    type: string\n        '404':\n          $ref: '#/components/responses/404NotFound'\n    put:\n      operationId: microsetta_private_api.api.put_opt_out\n      tags:\n        - Campaigns\n      summary: Opt an interested user out of a campaign\n      description: Opt an interested user out of a campaign\n      security: [ ]\n      parameters:\n        - in: query\n          name: interested_user_id\n          description: unique identifier of interested user\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: interested user's id \u0026 campaign-oriented language information\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  'interested_user_id':\n                    type: string\n                  'force_primary_language':\n                    type: boolean\n                  'language_key':\n                    type: string\n        '404':\n          $ref: '#/components/responses/404NotFound'\n\n  '/update_address':\n    get:\n      operationId: microsetta_private_api.api.get_interested_user_address_update\n      tags:\n        - Campaigns\n      summary: Retrieve an interested user's address to fix validation error\n      description: Retrieve an interested user's address to fix validation error\n      security: [ ]\n      parameters:\n        - in: query\n          name: interested_user_id\n          description: unique identifier of interested user\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: email\n          description: interested user's email address\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: interested user's address information\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  'interested_user_id':\n                    type: string\n                  'email':\n                    type: string\n                  'address_1':\n                    type: string\n                  'address_2':\n                    type: string\n                  'city':\n                    type: string\n                  'state':\n                    type: string\n                  'postal_code':\n                    type: string\n                  'country':\n                    type: string\n        '400':\n          description: Address already valid\n        '404':\n          $ref: '#/components/responses/404NotFound'\n    put:\n      operationId: microsetta_private_api.api.put_interested_user_address_update\n      tags:\n        - Campaigns\n      summary: Update an interested user's address\n      description: Update an interested user's address\n      security: [ ]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                'interested_user_id':\n                  type: string\n                'email':\n                  type: string\n                'address_1':\n                  type: string\n                'address_2':\n                  type: string\n                'address_3':\n                  type: string\n                'city':\n                  type: string\n                'state':\n                  type: string\n                'postal':\n                  type: string\n                'residential_address':\n                  type: boolean\n              required:\n                - interested_user_id\n                - email\n                - address_1\n                - city\n                - state\n                - postal\n      responses:\n        '200':\n          description: Interested user ID\n          content:\n            application/json:\n              schema:\n                type: object\n        '400':\n          description: Update or validation issue with the interested user's address\n        '404':\n          $ref: '#/components/responses/404NotFound'\n\n  '/preparations/{sample_barcode}':\n    get:\n      operationId: microsetta_private_api.api.get_preparations\n      tags:\n        - Stats\n      parameters:\n        - $ref: '#/components/parameters/sample_barcode'\n      responses:\n        '200':\n          description: Return list of preparations associated with barcode\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/preparation'\n\n\n  # ADMINISTRATOR PATHS\n  '/admin/search/samples/{sample_barcode}':\n    get:\n      operationId: microsetta_private_api.admin.admin_impl.search_barcode\n      tags:\n        - Admin\n      summary: Retrieve diagnostic information about a sample by barcode\n      description: Retrieve diagnostic information about a sample by barcode\n      parameters:\n        - $ref: '#/components/parameters/sample_barcode'\n      responses:\n        '200':\n          description: Object containing linked account (if any), source (if any), sample (if any) and information about the barcode\n          content:\n            application/json:\n              schema:\n                type: object\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n\n  '/admin/search/kit/{kit_id}':\n    get:\n      operationId: microsetta_private_api.admin.admin_impl.search_kit_id\n      tags:\n        - Admin\n      summary: Retrieve diagnostic information about a kit by kit_id\n      description: Retrieve diagnostic information about a kit by kit_id\n      parameters:\n        - in: path\n          name: kit_id\n          description: User-facing id of kit\n          schema:\n            $ref: '#/components/schemas/kit_name'\n          required: true\n      responses:\n        '200':\n          description: Object containing linked account (if any), source (if any), sample (if any) and information about the barcode\n          content:\n            application/json:\n              schema:\n                type: object\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n\n  '/admin/search/account/{email}':\n    get:\n      operationId: microsetta_private_api.admin.admin_impl.search_email\n      tags:\n        - Admin\n      summary: Retrieve diagnostic information about an account by email\n      description: Retrieve diagnostic information about an account by email\n      parameters:\n        - in: path\n          name: email\n          description: user email address\n          schema:\n            type: string\n            example: \"test@test.com\"\n          required: true\n      responses:\n        '200':\n          description: Object containing accounts with similar emails (if any)\n          content:\n            application/json:\n              schema:\n                type: object\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n\n  '/admin/search/interested_users/{email}':\n    get:\n      operationId: microsetta_private_api.admin.admin_impl.search_interested_users_by_email\n      tags:\n        - Admin\n      summary: Find interested users by email\n      description: Find interested users by email\n      parameters:\n        - in: path\n          name: email\n          description: email address\n          schema:\n            type: string\n            example: \"test@test.com\"\n          required: true\n      responses:\n        '200':\n          description: Object containing interested users with similar emails (if any)\n          content:\n            application/json:\n              schema:\n                type: object\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n\n  '/admin/interested_user/{iuid}':\n    get:\n      operationId: microsetta_private_api.admin.admin_impl.get_interested_user_by_id\n      tags:\n        - Admin\n      summary: Get interested user by ID\n      description: Get interested user by Id\n      parameters:\n        - in: path\n          name: iuid\n          description: Interested user ID\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Interested user's information\n          content:\n            application/json:\n              schema:\n                type: object\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n    put:\n      operationId: microsetta_private_api.admin.admin_impl.put_interested_user_by_id\n      tags:\n        - Admin\n      summary: Update interested user\n      description: Update interested user\n      parameters:\n        - in: path\n          name: iuid\n          description: Interested user ID\n          schema:\n            type: string\n          required: true\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                'address_1':\n                  type: string\n                'address_2':\n                  type: string\n                'city':\n                  type: string\n                'state':\n                  type: string\n                'postal':\n                  type: string\n              required:\n                - address_1\n                - city\n                - state\n                - postal\n      responses:\n        '200':\n          description: Interested user's updated information\n          content:\n            application/json:\n              schema:\n                type: object\n        '400':\n          description: Failed to update address\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n\n  '/admin/search/activation':\n    get:\n      operationId: microsetta_private_api.admin.admin_impl.search_activation\n      tags:\n        - Admin\n      summary: Retrieve diagnostic information about activation codes by email or code\n      description: Retrieve diagnostic information about activation codes by email or code\n      parameters:\n        - in: query\n          name: email_query\n          schema:\n            type: string\n        - in: query\n          name: code_query\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Object containing activation info with similar emails or codes (if any)\n          content:\n            application/json:\n              schema:\n                type: array\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n\n  '/admin/verify_address':\n    get:\n      operationId: microsetta_private_api.admin.admin_impl.address_verification\n      tags:\n        - Admin\n      security: []\n      summary: Verify - and automatically correct if possible - the deliverability of a postal address using Melissa Global Address API\n      description: Verify - and automatically correct if possible - the deliverability of a postal address using Melissa Global Address API\n      parameters:\n        - in: query\n          name: address_1\n          description: First line of address to verify (e.g. street address)\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: address_2\n          description: Second line of address to verify (e.g. apartment, suite, floor)\n          required: false\n          schema:\n            type: string\n        - in: query\n          name: address_3\n          description: Third line of address to verify\n          required: false\n          schema:\n            type: string\n        - in: query\n          name: city\n          description: City of address to verify\n          required: false\n          schema:\n            type: string\n        - in: query\n          name: state\n          description: State/province of address to verify\n          required: false\n          schema:\n            type: string\n        - in: query\n          name: postal\n          description: Postal code of address to verify\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: country\n          description: Country of address to verify\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Object containing address and verification status\n          content:\n            application/json:\n              schema:\n                type: object\n        '404':\n          $ref: '#/components/responses/404NotFound'\n\n  '/admin/campaigns/list':\n    get:\n      operationId: microsetta_private_api.admin.admin_impl.list_campaigns\n      tags:\n        - Admin\n      summary: Return a list of all campaigns\n      description: Return a list of all campaigns\n      responses:\n        '200':\n          description: Array of campaigns\n          content:\n            application/json:\n              schema:\n                type: array\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n\n  '/admin/scan/{sample_barcode}':\n    post:\n      # Note: We might want to be able to differentiate system administrator operations\n      # from technician operations in the future by user accounts and the routes they post to\n      operationId: microsetta_private_api.admin.admin_impl.scan_barcode\n      tags:\n        - Admin\n      summary: Set sample processing information for a barcode\n      description: Set sample processing information for a barcode\n      parameters:\n        - $ref: '#/components/parameters/sample_barcode'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                sample_status:\n                  type: string\n                  # NB: there is no \"not-received\" option\n                  # because how can one be scanning a barcode\n                  # one didn't receive?\n                  enum: [\"sample-is-valid\",\n                         \"no-associated-source\",\n                         \"no-registered-account\",\n                         \"no-collection-info\",\n                         \"sample-has-inconsistencies\",\n                         \"received-unknown-validity\"]\n                  example: \"sample-has-inconsistencies\"\n                technician_notes:\n                  type: string\n                  example: \"Sample Processing Complete!\"\n      responses:\n        '201':\n          description: Successfully recorded new barcode scan\n          headers:\n            Location:\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: object\n\n  '/admin/metadata/samples/{sample_barcode}/surveys/{survey_template_id}':\n    get:\n      operationId: microsetta_private_api.admin.admin_impl.sample_pulldown_single_survey\n      tags:\n        - Admin\n      summary: Retrieve survey responses for a particular sample and survey\n      description: Retrieve survey responses for a particular sample and survey\n      parameters:\n        - $ref: '#/components/parameters/sample_barcode'\n        - $ref: '#/components/parameters/survey_template_id'\n      responses:\n        '200':\n          description: QIIME-compatible sample metadata\n          content:\n            application/json:\n              schema:\n                type: object\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n\n  '/admin/metadata/samples/{sample_barcode}/surveys/':\n    get:\n      operationId: microsetta_private_api.admin.admin_impl.sample_pulldown_multiple_survey\n      tags:\n        - Admin\n      summary: Retrieve all survey responses for a particular sample\n      description: Retrieve all survey responses for a particular sample\n      parameters:\n        - $ref: '#/components/parameters/sample_barcode'\n      responses:\n        '200':\n          description: Summarized sample metadata\n          content:\n            application/json:\n              schema:\n                type: object\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n\n  '/admin/metadata/qiita-compatible':\n    post:\n      operationId: microsetta_private_api.admin.admin_impl.qiita_compatible_metadata\n      tags:\n        - Admin\n      summary: Retrieve Qiita compatible metadata in JSON for a set of samples\n      description: Retrieve Qiita compatible metadata in JSON for a set of samples\n      parameters:\n        - $ref: '#/components/parameters/include_private'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                'sample_barcodes':\n                  type: array\n                  items:\n                    # not using the defined schema for sample_barcode as it is\n                    # readOnly\n                    type: string\n      responses:\n        '200':\n          description: Summarized sample metadata\n          content:\n            application/json:\n              schema:\n                type: object\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n\n  '/admin/projects':\n    get:\n      operationId: microsetta_private_api.admin.admin_impl.get_projects\n      tags:\n        - Admin\n      summary: Retrieve a list of existing projects\n      description: Retrieve a list of existing projects\n      parameters:\n        - $ref: '#/components/parameters/include_stats'\n        - $ref: '#/components/parameters/is_active'\n      responses:\n        '200':\n          description: Array of projects\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/project'\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n    post:\n      operationId: microsetta_private_api.admin.admin_impl.create_project\n      tags:\n        - Admin\n      summary: Create a project to which kits can be associated\n      description: Create a project to which kits can be associated\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/project'\n      responses:\n        '201':\n          description: Project successfully created\n          headers:\n            Location:\n              schema:\n                type: string\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '422':\n          $ref: '#/components/responses/422UnprocessableEntity'\n\n  '/admin/projects/{project_id}':\n    put:\n      operationId: microsetta_private_api.admin.admin_impl.update_project\n      tags:\n        - Admin\n      summary: Update information about a project\n      description:  Update information about a project\n      parameters:\n        - $ref: '#/components/parameters/project_id'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/project'\n      responses:\n        '204':\n          # Returns 204 rather than 200 (with a project object) bc don't want\n          # to recalculate stats (which won't have been changed by update)\n          description: Successfully updated sample information\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n\n  '/admin/create/kits':\n    post:\n      operationId: microsetta_private_api.admin.admin_impl.create_kits\n      tags:\n        - Admin\n      summary: Create kit identifiers and associated sample barcodes\n      description: Create kit identifiers and associated sample barcodes\n      requestBody:\n        content:\n          application/json:\n            schema:\n                type: \"object\"\n                properties:\n                  number_of_kits:\n                    type: integer\n                  number_of_samples:\n                    type: integer\n                  kit_id_prefix:\n                    type: string\n                  project_ids:\n                    type: array\n                    items:\n                      type: string\n                required:\n                  - number_of_kits\n                  - number_of_samples\n                  - project_ids\n      responses:\n        '201':\n          description: Kit identifiers and associated samples were successfully created\n          content:\n            application/json:\n              schema:\n                type: object\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '422':\n          $ref: '#/components/responses/422UnprocessableEntity'\n\n  '/admin/events/accounts/{account_id}':\n    get:\n      operationId: microsetta_private_api.admin.admin_impl.get_account_events\n      tags:\n        - Admin\n      parameters:\n        - $ref: '#/components/parameters/account_id'\n      responses:\n        '200':\n          description: Event log associated with the account\n          content:\n            application/json:\n              schema:\n                type: array\n  '/admin/email':\n    post:\n      operationId: microsetta_private_api.admin.admin_impl.send_email\n      tags:\n        - Admin\n      summary: Send a templated email to an end user\n      description: Send a templated email to an end user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                # issue type defines what resolution_url the user should go to\n                issue_type:\n                  type: string\n                  enum: [\"sample\", \"activation\"]\n                template:\n                  type: string\n                  enum: [\"incorrect_sample_type\",\n                         \"missing_sample_info\",\n                         \"sample_is_valid\",\n                         \"no_associated_source\",\n                         \"send_activation_code\"]\n                  example: \"incorrect_sample_type\"\n                template_args:\n                  type: object\n      responses:\n        '204':\n          description: Email sent\n\n  '/admin/daklapack_articles':\n    get:\n      operationId: microsetta_private_api.admin.admin_impl.get_daklapack_articles\n      tags:\n        - Admin\n      responses:\n        '200':\n          description: Return list of dictionaries of full info on all daklapack articles\n          content:\n            application/json:\n              schema:\n                type: array\n\n  '/admin/daklapack_shipping':\n    get:\n      operationId: microsetta_private_api.admin.admin_impl.get_daklapack_shipping_options\n      tags:\n        - Admin\n      responses:\n        '200':\n          description: Return lists of acceptable Daklapack shipping types keyed by shipping provider\n          content:\n            application/json:\n              schema:\n                type: object\n\n  '/admin/daklapack_orders':\n    post:\n      operationId: microsetta_private_api.admin.admin_impl.create_daklapack_orders\n      tags:\n        - Admin\n      summary: Submit new order(s) to Daklapack and record to db\n      description: Submit new order(s) to Daklapack and record to db\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                project_ids:\n                  type: array\n                  items:\n                    type: integer\n                article_code:\n                  type: string\n                quantity:\n                  type: integer\n                addresses:\n                  type: array\n                  items:\n                    type: object\n                shipping_provider:\n                  type: string\n                shipping_type:\n                  type: string\n                description:\n                  type: string\n                  nullable: true\n                fedex_ref_1:\n                  type: string\n                  nullable: true\n                fedex_ref_2:\n                  type: string\n                  nullable: true\n                fedex_ref_3:\n                  type: string\n                  nullable: true\n                planned_send_date:\n                  type: string\n                  format: date-time\n                  example: \"2007-04-05\"\n                  nullable: true\n      responses:\n        '200':\n          description: Order submission(s) attempted\n\n  '/admin/account_email_summary':\n    post:\n      operationId: microsetta_private_api.admin.admin_impl.query_email_stats\n      tags:\n        - Admin\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                # issue type defines what resolution_url the user should go to\n                emails:\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/email'\n                project:\n                  type: string\n                  nullable: true\n      responses:\n        '200':\n          description: Return list of dictionaries of sample status for requested accounts\n          content:\n            application/json:\n              schema:\n                type: array\n\n  '/admin/account_project_barcode_summary':\n    post:\n      operationId: microsetta_private_api.admin.admin_impl.query_project_barcode_stats\n      parameters:\n        - $ref: '#/components/parameters/strip_sampleid'\n      tags:\n        - Admin\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                'project':\n                  type: integer\n                'email':\n                  type: string\n\n      responses:\n        '200':\n          description: Successfully triggered the summary job\n        '404':\n          description: Requested project not found\n        '400':\n          description: Too many barcodes requested\n\n  '/admin/account_barcode_summary':\n    post:\n      operationId: microsetta_private_api.admin.admin_impl.query_barcode_stats\n      parameters:\n        - $ref: '#/components/parameters/strip_sampleid'\n      tags:\n        - Admin\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                'sample_barcodes':\n                  type: array\n                  items:\n                    # not using the defined schema for sample_barcode as it is\n                    # readOnly\n                    type: string\n      responses:\n        '200':\n          description: Return an object containing a list of dictionaries of sample status for requested accounts\n          content:\n            application/json:\n              schema:\n                type: object\n        '404':\n          description: Requested barcodes not found\n\n  '/admin/activation':\n    post:\n      operationId: microsetta_private_api.admin.admin_impl.generate_activation_codes\n      tags:\n        - Admin\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                emails:\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/email'\n      responses:\n        '200':\n          description: Returns array of activation information\n          content:\n            application/json:\n              schema:\n                type: array\n\n  '/admin/barcode_query_fields':\n    get:\n      operationId: microsetta_private_api.admin.admin_impl.list_barcode_query_fields\n      tags:\n        - Admin\n      responses:\n        '200':\n          description: Returns array of fields, types and values\n          content:\n            application/json:\n              schema:\n                type: array\n\n  '/admin/barcode_query':\n    post:\n      operationId: microsetta_private_api.admin.admin_impl.barcode_query\n      tags:\n        - Admin\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n      responses:\n        '200':\n          description: Returns array of barcodes\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  # not using the defined schema for sample_barcode as it is\n                  # readOnly\n                  type: string\n\n  '/admin/qiita_barcode_query':\n    post:\n      operationId: microsetta_private_api.admin.admin_impl.qiita_barcode_query\n      tags:\n        - Admin\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n      responses:\n        '200':\n          description: Returns qiita info about barcodes\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n\ncomponents:\n  parameters:\n    # path parameters\n    account_id: # Can be referenced as '#/components/parameters/account_id'\n      name: account_id\n      in: path\n      description: Unique id specifying a user account\n      schema:\n        $ref: '#/components/schemas/account_id'\n      required: true\n    strip_sampleid:\n      name: strip_sampleid\n      in: query\n      description: Whether to strip barcode information\n      schema:\n        type: boolean\n      required: true\n    kit_id:\n      name: kit_id\n      in: path\n      description: Unique internal id specifying a kit\n      schema:\n        type: string\n        example: \"c442f31d-fa17-4fd1-85e2-1f251d13ec26\"\n      required: true\n    sample_id:\n      name: sample_id\n      in: path\n      description: Unique id specifying a sample associated with a source\n      schema:\n        $ref: '#/components/schemas/sample_id'\n      required: true\n    survey_id:\n      name: survey_id\n      in: path\n      description: Unique internal id specifying a particular answered survey\n      schema:\n        $ref: '#/components/schemas/survey_id'\n      required: true\n    survey_template_id:\n      name: survey_template_id\n      in: path\n      description: Unique internal id specifying a particular survey template\n      schema:\n        $ref: '#/components/schemas/survey_template_id'\n      required: true\n    source_id:\n      name: source_id\n      in: path\n      description: Unique id specifying a source\n      schema:\n        $ref: '#/components/schemas/source_id'\n      required: true\n    sample_barcode:\n      name: sample_barcode\n      in: path\n      description: barcode of sample\n      schema:\n        $ref: '#/components/schemas/sample_barcode'\n      required: true\n    project_id:\n      name: project_id\n      in: path\n      description: Project ID\n      schema:\n        $ref: '#/components/schemas/project_id'\n    score_type:\n      name: score_type\n      in: path\n      description: Dietary Score Type\n      schema:\n        $ref: '#/components/schemas/score_type'\n    score_code:\n      name: score_code\n      in: path\n      description: Dietary Score Code\n      schema:\n        $ref: '#/components/schemas/score_code'\n    fc_code:\n      name: fc_code\n      in: path\n      description: Food Components Code\n      schema:\n        $ref: '#/components/schemas/fc_code'\n\n    # query parameters\n    activation_code:\n      name: code\n      in: query\n      description: Activation code\n      schema:\n        $ref: '#/components/schemas/activation_code'\n      required: true\n    email:\n      name: email\n      in: query\n      description: User's email\n      schema:\n        $ref: '#/components/schemas/email'\n      required: true\n    kit_name:\n      name: kit_name\n      in: query\n      description: User-facing id of kit\n      schema:\n        $ref: '#/components/schemas/kit_name'\n      required: true\n    language_tag:\n      name: language_tag\n      in: query\n      description: 5-character code made up of ISO 639-1 two-character lower-ase language code (e.g., \"es\") separated\n        by a hyphen from a two-character upper-case country code (e.g., \"MX\") for a complete code like \"es-MX\"\n      schema:\n        $ref: '#/components/schemas/language_tag'\n      required: true\n    consent_post_url:\n      name: consent_post_url\n      in: query\n      description: Client url to which the customized consent form should be posted.\n      schema:\n        type: string\n        example: \"https://www.microsetta.org/accounts/72d2cc55-8522-4528-a85b-78be2ec0933f/create_human_source\"\n    survey_redirect_url:\n      name: survey_redirect_url\n      in: query\n      description: Url that some external surveys will redirect browser to after survey completion\n      schema:\n        type: string\n        example: \"https://www.microsetta.org/accounts/72d2cc55-8522-4528-a85b-78be2ec0933f/sources/bfed3a1b-0855-4dce-9398-7c54f5b4ac8f\"\n    vioscreen_ext_sample_id:\n      name: vioscreen_ext_sample_id\n      in: query\n      description: Identifies sample for vioscreen templates, indicates the user is being redirected to the response url and so vioscreen id should be logged\n      schema:\n        $ref: '#/components/schemas/sample_id'\n      required: False\n\n    source_type:\n      name: source_type\n      in: query\n      description: Type of sample\n      schema:\n        $ref: '#/components/schemas/source_type'\n    is_active:\n      name: is_active\n      in: query\n      description: active status of projects by which to limit returned project list; may be true or false. Optional.\n      schema:\n        $ref: '#/components/schemas/is_active'\n    include_stats:\n      name: include_stats\n      in: query\n      description: true if computed statistics about projects should be included in projects list (takes longer)\n      schema:\n        type: boolean\n    include_private:\n      name: include_private\n      in: query\n      description: include private information in a metadata pulldown; may be true or false. Optional.\n      schema:\n        $ref: '#/components/schemas/include_private'\n\n  responses:\n    401Unauthorized:   # Can be referenced as '#/components/responses/401Unauthorized'\n      description: Invalid or missing token.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    403Forbidden:   # Can be referenced as '#/components/responses/403Forbidden'\n      description: Authorization refused.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    404NotFound:       # Can be referenced as '#/components/responses/404NotFound'\n      description: The specified resource was not found.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    422UnprocessableEntity:\n      description: The instructions provided cannot be processed.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n\n  schemas:\n    # account section\n    account_id:\n      type: string\n      readOnly: true\n      example: \"aaaaaaaa-bbbb-cccc-dddd-eeeeffffffff\"\n    account_id_nullable:\n      type: string\n      readOnly: true\n      example: \"aaaaaaaa-bbbb-cccc-dddd-eeeeffffffff\"\n      nullable: true\n    account_type: # e.g., regular user or admin--room to grow\n      type: string\n      readOnly: true\n      enum: [\"standard\", \"admin\", \"deleted\"]\n      example: \"standard\"\n    language:\n      type: string\n      enum: [\"en_US\", \"es_MX\", \"es_ES\", \"ja_JP\"]\n      example: \"en_US\"\n    creation_time:\n      type: string\n      readOnly: true\n      format: date-time\n      example: \"2007-04-05T12:30-02:00\"\n    email:\n      type: string\n      format: email\n      example: \"janedoe@example.com\"\n    first_name:        # Can be referenced as '#/components/schemas/first_name'\n      type: string\n      example: \"Jane\"\n    last_name:\n      type: string\n      example: \"Doe\"\n    language_tag:\n      type: string\n      example: \"en_US\"\n    update_time:\n      type: string\n      readOnly: true\n      format: date-time\n      example: \"2019-12-13T00:54:28.712Z\"\n    account:\n      type: object\n      properties:\n        account_id:\n          $ref: '#/components/schemas/account_id'\n        first_name:\n          $ref: '#/components/schemas/first_name'\n        last_name:\n          $ref: '#/components/schemas/last_name'\n        email:\n          $ref: '#/components/schemas/email'\n        address:\n          $ref: '#/components/schemas/address'\n        account_type:\n          $ref: '#/components/schemas/account_type'\n        language:\n          $ref: '#/components/schemas/language'\n        creation_time:\n          $ref: '#/components/schemas/creation_time'\n        update_time:\n          $ref: '#/components/schemas/update_time'\n      required:\n        - first_name\n        - last_name\n        - email\n        - address\n        - language\n\n    address:   # taken from https://opensource.zalando.com/restful-api-guidelines/#address-fields\n      description:\n        an address of a location/destination\n      type: object\n      properties:\n        street:\n          description: |\n            the full street address including house number and street name\n          type: string\n          example: 123 Main St. E., apt. 2\n        city:\n          description: |\n            name of the city / locality\n          type: string\n          example: Springfield\n        state:\n          description: |\n            state, province, or district; |\n            set to empty string if not applicable |\n            for country's address format (e.g. New Zealand)\n          type: string\n          example: \"ON\"\n        post_code:\n          description: |\n            zip code or postal code\n          type: string\n          example: \"K0H 9Z0\"\n        country_code:\n          description: |\n            the country code according to\n            [iso-3166-1-alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\n          type: string\n          example: \"CA\" # NB: this is the country of *canada*, not the state of california\n      required:\n        - street\n        - city\n        - state\n        - post_code\n        - country_code\n\n    # activation codes section\n    activation_code:\n      type: string\n      example: TMI-XXXXX-XXXXX-XXXXX\n    # kit section\n    kit_name:\n      type: string\n      example: \"jb_qhxqe\"\n\n    # sample section\n    sample_barcode:\n      type: string\n      readOnly: true # sent in GET, not in POST/PUT/PATCH\n      example: \"000038448\"\n    sample_datetime:\n      type: string\n      format: date-time\n      example: \"2017-07-21T17:32:28Z\"\n      nullable: true\n    sample_id:\n      type: string\n      readOnly: true # sent in GET, not in POST/PUT/PATCH\n      example: \"dae21127-27bb-4f52-9fd3-a2aa5eb5b86f\"\n    sample_notes:\n      type: string\n      nullable: true\n      example: \"Oops, I dropped it\"\n    sample_site:\n      enum: [\"Blood (skin prick)\", \"Saliva\", \"Ear wax\", \"Forehead\", \"Fur\", \"Hair\", \"Left hand\", \"Left leg\", \"Mouth\", \"Nares\", \"Nasal mucus\",\n             \"Right hand\", \"Right leg\", \"Stool\", \"Tears\", \"Torso\", \"Vaginal mucus\", null]\n      example: \"Stool\"\n    sample_edit_locked:\n      type: boolean\n      readOnly: true # sent in GET, not in POST/PUT/PATCH\n      example: true\n    sample_remove_locked:\n      type: boolean\n      readOnly: true # sent in GET, not in POST/PUT/PATCH\n      example: true\n    sample_projects:\n      type: array\n      readOnly: true # sent in GET, not in POST/PUT/PATCH\n      nullable: true\n      items:\n        $ref: '#/components/schemas/sample_project'\n      example:\n        - \"American Gut Project\"\n        - \"British Gut Project\"\n    sample_project:\n      type: string\n      example: \"British Gut Project\"\n    accession_urls:\n      type: array\n      readOnly: true\n      nullable: true\n      items:\n        type: string\n        example: \"https://wherever.com\"\n\n    sample:\n      type: object\n      properties:\n        sample_id:\n          $ref: '#/components/schemas/sample_id'\n        sample_barcode:\n          $ref: '#/components/schemas/sample_barcode'\n        sample_site:\n          $ref: '#/components/schemas/sample_site'\n        sample_edit_locked:\n          $ref: '#/components/schemas/sample_edit_locked'\n        sample_remove_locked:\n          $ref: '#/components/schemas/sample_remove_locked'\n        sample_datetime:\n          $ref: '#/components/schemas/sample_datetime'\n        sample_notes:\n          $ref: '#/components/schemas/sample_notes'\n        sample_projects:\n          $ref: '#/components/schemas/sample_projects'\n        source_id:\n          $ref: '#/components/schemas/source_id_nullable'\n        account_id:\n          $ref: '#/components/schemas/account_id_nullable'\n        accession_urls:\n          $ref: '#/components/schemas/accession_urls'\n\n    preparation:\n      type: object\n      properties:\n        barcode:\n          type: string\n        preparation_id:\n          type: integer\n        preparation_type:\n          type: string\n        num_sequences:\n          type: integer\n\n    # source section\n    source_id:\n      type: string\n      readOnly: true # sent in GET, not in POST/PUT/PATCH\n      example: \"b0b0b0b0-b0b0-b0b0-b0b0-b0b0b0b0b0b0\"\n    source_id_nullable:\n      type: string\n      readOnly: true # sent in GET, not in POST/PUT/PATCH\n      example: \"b0b0b0b0-b0b0-b0b0-b0b0-b0b0b0b0b0b0\"\n      nullable: true\n    source_name:\n      type: string\n    source_type:\n      type: string\n      enum: [human, animal, environmental]\n      example: human\n    participant_email:\n      type: string\n      format: email\n      example: \"mdoe@example.com\"\n    age_range:\n      type: string\n      enum: [\"0-6\", \"7-12\", \"13-17\", \"18-plus\", \"legacy\"]\n    parent_1_name:\n      type: string\n      example: \"Madre Doe\"\n    parent_2_name:\n      type: string\n      nullable: true\n      example: \"Padre Doe\"\n    deceased_parent:\n      type: boolean\n      example: false\n    obtainer_name:\n      type: string\n      example: \"Professor X\"\n    nonhuman_source:\n      type: object\n      properties:\n        source_id:\n          $ref: '#/components/schemas/source_id'\n        source_type:\n          type: string\n          enum: [animal, environmental]\n        source_name:\n          type: string\n        source_description:\n          type: string\n          nullable: true\n      example:\n        source_id: \"bda6867f-fb9d-4f21-ba24-5fba64976ee2\"\n        source_name: \"office windowsill\"\n        source_type: environmental\n        source_description: \"my office windowsill\"\n      additionalProperties: false\n    human_source:\n      type: object\n      properties:\n        source_id:\n          $ref: '#/components/schemas/source_id'\n        source_type:\n          type: string\n          enum: [human]\n        source_name:\n          type: string\n        consent:\n          type: object\n          properties:\n            participant_email:\n              $ref: '#/components/schemas/participant_email'\n            age_range:\n              $ref: '#/components/schemas/age_range'\n            child_info:\n              type: object\n              properties:\n                parent_1_name:\n                  $ref: '#/components/schemas/parent_1_name'\n                parent_2_name:\n                  $ref: '#/components/schemas/parent_2_name'\n                deceased_parent:\n                  $ref: '#/components/schemas/deceased_parent'\n                obtainer_name:\n                  type: string\n              additionalProperties: false\n      additionalProperties: false\n\n    # survey template section\n    survey_template_id:\n      type: integer\n      example: 3\n    survey_template_title:\n      type: string\n      example: \"Personal Information\"\n    survey_template_type:\n      type: string # someday could be an enum if we know choices\n      example: \"local\"\n    survey_template_version:\n      type: string\n      example: \"0.1\"\n    survey_template_text:\n      # The contents of this object ARE structured, but their structure is not specified in THIS api.\n      # Could be *either* vue-compatible json to be used to generate an HTML form OR\n      # a customized link to direct to an external survey\n      type: object\n      example: {\n                  \"groups\": [\n                    {\n                      \"legend\": \"Personal Information\",\n                      \"fields\": [\n                        {\n                          \"type\": \"select\",\n                          \"label\": \"Gender:\",\n                          \"model\": \"107\",\n                          \"id\": \"107\",\n                          \"inputName\": \"107\",\n                          \"featured\": false,\n                          \"visible\": true,\n                          \"disabled\": false,\n                          \"required\": true,\n                          \"multi\": false,\n                          \"default\": null,\n                          \"hint\": null,\n                          \"help\": null,\n                          \"validator\": null,\n                          \"validateDebounceTime\": null,\n                          \"styleClasses\": null,\n                          \"buttons\": null,\n                          \"attributes\": null,\n                          \"values\": [\n                            \"Unspecified\",\n                            \"Male\",\n                            \"Female\",\n                            \"Other\"\n                          ],\n                          \"selectOptions\": {}\n                        },\n                        {\n                          \"type\": \"input\",\n                          \"label\": \"Height:\",\n                          \"model\": \"108\",\n                          \"id\": \"108\",\n                          \"inputName\": \"108\",\n                          \"featured\": false,\n                          \"visible\": true,\n                          \"disabled\": false,\n                          \"required\": true,\n                          \"multi\": false,\n                          \"default\": null,\n                          \"hint\": null,\n                          \"help\": null,\n                          \"validator\": \"string\",\n                          \"validateDebounceTime\": null,\n                          \"styleClasses\": null,\n                          \"buttons\": null,\n                          \"attributes\": null,\n                          \"inputType\": \"text\"\n                        }\n                      ]\n                    }\n                  ],\n                  \"fields\": null\n                }\n    thin_survey_template_info:\n      type: object\n      properties:\n        survey_template_id:\n          $ref: '#/components/schemas/survey_template_id'\n        survey_template_title:\n          $ref: '#/components/schemas/survey_template_title'\n        survey_template_version:\n          $ref: '#/components/schemas/survey_template_version'\n        survey_template_type:\n          $ref: '#/components/schemas/survey_template_type'\n      required:\n        - survey_template_id\n        - survey_template_title\n        - survey_template_version\n        - survey_template_type\n\n    # survey section\n    survey_id:\n      type: string\n      example: \"69f697cb-8e52-4a4f-8db2-efffcfa186a5\"\n    survey_status:\n      type: integer\n      example: 3\n      nullable: true\n    survey_text:\n      # The contents of this object ARE structured, but their structure is not specified in THIS api.\n      type: object\n      example: {\n                    \"1\": \"Omnivore\",\n                    \"2\": \"No\",\n                    \"3\": \"Never\",\n                    \"4\": \"Never\",\n                    \"5\": \"Daily\",\n                    \"6\": \"No\",\n                    \"107\": \"Female\",\n                    \"108\": \"60\",\n                    \"109\": \"inches\",\n                    \"110\": \"Canada\",\n                    \"111\": \"January\",\n                    \"112\": \"1969\",\n                    \"113\": \"120\",\n                    \"114\": \"pounds\",\n                    \"115\": \"44074\",\n                    \"148\": \"United States\",\n                    \"162\": [\n                      \"Exclude refined sugars\"\n                    ]\n                }\n\n    # project section\n    project_id:\n      type: integer\n      example: 1\n      readOnly: true\n    project_name:\n      type: string\n      nullable: false\n    is_active:\n      type: boolean\n    project:\n      type: \"object\"\n      properties:\n        project_id:\n          $ref: '#/components/schemas/project_id'\n        project_name:\n          $ref: '#/components/schemas/project_name'\n        is_microsetta:\n          type: boolean\n        bank_samples:\n          type: boolean\n        plating_start_date:\n          type: string\n          format: date\n          example: \"2017-07-21\"\n          nullable: true\n        subproject_name:\n          type: string\n          nullable: true\n        alias:\n          type: string\n          nullable: true\n        sponsor:\n          type: string\n          nullable: true\n        coordination:\n          type: string\n          nullable: true\n        contact_name:\n          type: string\n          nullable: true\n        additional_contact_name:\n          type: string\n          nullable: true\n        contact_email:\n          type: string\n          format: email\n          nullable: true\n        deadlines:\n          type: string\n          nullable: true\n        num_subjects:\n          # no data type specified--this can be integer or string :-|\n          nullable: true\n        num_timepoints:\n          # no data type specified--this can be integer or string :-|\n          nullable: true\n        start_date:\n          type: string\n          nullable: true\n        disposition_comments:\n          type: string\n          nullable: true\n        collection:\n          type: string\n          nullable: true\n        is_fecal:\n          type: string\n          nullable: true\n        is_saliva:\n          type: string\n          nullable: true\n        is_skin:\n          type: string\n          nullable: true\n        is_blood:\n          type: string\n          nullable: true\n        is_other:\n          type: string\n          nullable: true\n        do_16s:\n          type: string\n          nullable: true\n        do_shallow_shotgun:\n          type: string\n          nullable: true\n        do_shotgun:\n          type: string\n          nullable: true\n        do_rt_qpcr:\n          type: string\n          nullable: true\n        do_serology:\n          type: string\n          nullable: true\n        do_metatranscriptomics:\n          type: string\n          nullable: true\n        do_mass_spec:\n          type: string\n          nullable: true\n        mass_spec_comments:\n          type: string\n          nullable: true\n        mass_spec_contact_name:\n          type: string\n          nullable: true\n        mass_spec_contact_email:\n          type: string\n          format: email\n          nullable: true\n        do_other:\n          type: string\n          nullable: true\n        branding_associated_instructions:\n          type: string\n          nullable: true\n        branding_status:\n          type: string\n          nullable: true\n        is_active:\n          $ref: '#/components/schemas/is_active'\n      required:\n        - project_name\n        - is_microsetta\n        - bank_samples\n\n    # vioscreen section\n    score_type:\n      type: string\n      example: \"Hei2010\"\n    score_code:\n      type: string\n      example: \"TotalVegetables\"\n    fc_code:\n      type: string\n      example: \"acesupot\"\n\n    # error section\n    Error: # Taken straight from https://swagger.io/docs/specification/describing-responses/\n      type: object\n      properties:\n        code:\n          type: integer\n        message:\n          type: string\n      required:\n        - code\n        - message\n\n    # metadata section\n    include_private:\n      type: boolean\n      default: false\n\n  examples:\n    human_adult_source:\n      value:\n        source_name: \"Nell Doe\"\n        source_type: human\n        consent:\n          participant_email: \"nell@example.com\"\n          age_range: \"18-plus\"\n    human_child_source:\n      value:\n        source_name: \"K. Doe\"\n        source_type: human\n        consent:\n          participant_email: \"kd@kidsmail.com\"\n          age_range: \"7-12\"\n          child_info:\n            parent_1_name: \"Maman Doe\"\n            parent_2_name: \"Pere Doe\"\n            deceased_parent: false\n            obtainer_name: \"Maman M. Doe\"\n    nonhuman_source:\n      value:\n        source_name: \"Fluffy\"\n        source_type: animal\n        source_description: \"A fluffy cat\"\n    human_adult_source_w_id:\n      value:\n        source_id: \"5fa970c6-d36b-4d54-9bed-c45c3c85adac\"\n        source_name: \"Nell Doe\"\n        source_type: human\n        consent:\n          participant_email: \"nell@example.com\"\n          age_range: \"18-plus\"\n    human_child_source_w_id:\n      value:\n        source_id: \"b06825c2-e808-4606-8819-861b0fa8a5ce\"\n        source_name: \"K. Doe\"\n        source_type: human\n        consent:\n          participant_email: \"kd@kidsmail.com\"\n          age_range: \"7-12\"\n          child_info:\n            parent_1_name: \"Maman Doe\"\n            parent_2_name: \"Pere Doe\"\n            deceased_parent: false\n            obtainer_name: \"Maman M. Doe\"\n    nonhuman_source_w_id:\n      value:\n        source_id: \"42f799a8-e814-4b91-a291-2dbd50fda75d\"\n        source_name: \"Fluffy\"\n        source_type: animal\n        source_description: \"A fluffy cat\"\n\n# Defines the authRocket scheme: this is an OIDC jwt that comes in a bearer token header.\n  securitySchemes:\n    jwt:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n      x-bearerInfoFunc: microsetta_private_api.api.verify_jwt\n\n# END COMPONENTS\n# This enables the authRocket securityScheme defined in components for all routes\nsecurity:\n  - jwt: []\n",
			"canonicalURL": "/github.com/biocore/microsetta-private-api@795ff7a9228e8b930f2b9a68d5120e722e2cb732/-/blob/microsetta_private_api/api/microsetta_private_api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/biocore/microsetta-private-api/blob/795ff7a9228e8b930f2b9a68d5120e722e2cb732/microsetta_private_api/api/microsetta_private_api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: parameters: \"project_id\": at microsetta_private_api/api/microsetta_private_api.yaml:2655:7: path parameters must be required"
}