{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/geoserver/geoserver"
		},
		"file": {
			"name": "coveragestores.yaml",
			"size": 0,
			"path": "src/community/rest-openapi/openapi/src/main/resources/org/geoserver/rest/openapi/1.0.0/coveragestores.yaml",
			"byteSize": 12127,
			"content": "openapi: 3.0.0\ninfo:\n  version: 1.0.0\n  title: GeoServer CoverageStores\n  description: A coverage store describes how access a raster data source.\n\ntags:\n  - name: coveragestores\n    description: CoverageStores API\n\npaths:\n  /workspaces/{workspace}/coveragestores:\n    parameters:\n      - name: workspace\n        in: path\n        required: true\n        description: The name of the worskpace containing the coverage stores.\n        schema:\n          type: string\n    get:\n      tags:\n        - coveragestores\n      operationId: getCoverageStores\n      summary: Get a list of all coverage stores in {workspace}\n      description: Displays a list of all styles on the server.\n      responses:\n        200:\n          $ref: \"#/components/responses/CoverageStoresResponse\"\n        401:\n          description: Unauthorized\n    post:\n      tags:\n        - coveragestores\n      operationId: createCoverageStore\n      summary: Add a new coverage store\n      description: Adds a new coverage store entry to the server.\n      requestBody:\n        $ref: '#/components/requestBodies/CoverageStoreInfo'\n      responses:\n        201:\n          description: Created\n          headers:\n            Location:\n              description: URL where the newly created store can be found\n              schema:\n                type: string\n          content:\n            \"*/*\":\n              schema:\n                type: string\n        401:\n          description: Unauthorized\n\n  /workspaces/{workspace}/coveragestores/{store}:\n    parameters:\n      - name: workspace\n        in: path\n        required: true\n        description: The name of the worskpace containing the coverage stores.\n        schema:\n          type: string\n      - name: store\n        in: path\n        required: true\n        description: The name of the store to be retrieved\n        schema:\n          type: string\n    get:\n      tags:\n        - coveragestores\n      operationId: getCoverageStore\n      summary: Get a coverage store named {store} in the {workspace} workspace\n      description: Displays a representation of the coverage store.\n      parameters:\n        - name: quietOnNotFound\n          in: query\n          required: false\n          description: When set to true, avoids to log an Exception when the coverage store is not present. Note that 404 status code will be returned anyway.\n          schema:\n            type: boolean\n      responses:\n        200:\n          $ref: \"#/components/responses/CoverageStoreResponse\"\n        401:\n          description: Unauthorized\n    put:\n      tags:\n        - coveragestores\n      operationId: modifyCoverageStore\n      summary: Modify a single coverage store.\n      description: Modifies a single coverage store.\n      requestBody:\n        $ref: '#/components/requestBodies/CoverageStoreInfo'\n      responses:\n        200:\n          description: The coverage store was successfully updated.\n        401:\n          description: Unauthorized\n    delete:\n      tags:\n        - coveragestores\n      operationId: deleteCoverageStore\n      summary: Delete coverage store\n      description: Deletes a coverage store\n      parameters:\n        - name: purge\n          in: query\n          required: false\n          description: The purge parameter specifies if and how the underlying raster data source is deleted. \n            Allowable values for this parameter are \"none\", \"metadata\", \"all\". \n            When set to \"none\" data and auxiliary files are preserved. \n            When set to \"metadata\" delete only auxiliary files and metadata. Itâ€™s recommended when data files (such as granules) should not be deleted from disk. \n            Finally, when set to \"all\" both data and auxiliary files are removed.\n          schema:\n            $ref: \"#/components/schemas/PurgeOption\"\n        - name: recurse\n          in: query\n          required: false\n          description: The recurse controls recursive deletion. When set to true all resources contained in the store are also removed. The default value is \"false\".\n          schema:\n            type: boolean\n      responses:\n        200:\n          description: OK\n        401:\n          description: Unauthorized\n\n\n#  \"/workspaces/{workspace}/coveragestores/{store}/{method}.{format}\":\n#    parameters:\n#      - name: workspace\n#        in: path\n#        required: true\n#        description: The name of the worskpace containing the coverage stores.\n#        schema:\n#          type: string\n#      - name: store\n#        in: path\n#        required: true\n#        description: The name of the store to be retrieved\n#        schema:\n#          type: string\n#      - name: method\n#        in: path\n#        required: true\n#        description: The upload method. Can be \"url\", \"file\", \"external\". \"file\" uploads\n#          a file from a local source. The body of the request is the file\n#          itself. \"url\" uploads a file from an remote source. The body of the\n#          request is a URL pointing to the file to upload. This URL must be\n#          visible from the server. \"external\" uses an existing file on the\n#          server. The body of the request is the absolute path to the existing\n#          file.\n#        schema:\n#          type: string\n#      - name: format\n#        in: path\n#        required: true\n#        description: The type of target coverage store (e.g., \"imagemosaic\")\n#        schema:\n#          type: string\n#    post:\n#      operationId: postCoverageStoreUpload\n#      description: Used to harvest new granules in a writable structured grid coverage\n#        reader (e.g., image mosaic). Attempting to harvest a file into any other\n#        reader will result in a HTTP 405, method not allowed. Multiple granules\n#        can be uploaded by wrapping them in a ZIP file.\n#      parameters:\n#        - name: filename\n#          in: query\n#          required: false\n#          description: The filename parameter specifies the target file name for a file\n#            that needs to harvested as part of a mosaic. This is important to\n#            avoid clashes and to make sure the right dimension values are\n#            available in the name for multidimensional mosaics to work. Only\n#            used if method=\"file\".\n#          schema:\n#            type: string\n#      responses:\n#        \"200\":\n#          description: The coverage store was successfully updated.\n#        \"401\":\n#          description: Unauthorized\n#    put:\n#      operationId: putCoverageStoreUpload\n#      summary: Creates or overwrites the files for a coverage store\n#      description: Creates or modified a single coverage store by uploading its raster data\n#        files. Multi-file stores like mosaic can be created by uploading a zip\n#        file and setting the content type to \"application/zip\"\n#      parameters:\n#        - name: configure\n#          in: query\n#          required: false\n#          description: The configure parameter controls if a coverage/layer are configured\n#            upon file upload, in addition to creating the store. It can have a\n#            value of \"none\" to avoid configuring coverages.\n#          schema:\n#            type: string\n#        - name: USE_JAI_IMAGEREAD\n#          in: query\n#          required: false\n#          description: Whether to use deferred loading while configuring the coverage/layer.\n#          schema:\n#            type: string\n#        - name: coverageName\n#          in: query\n#          required: false\n#          description: Name of the newly created coverage/layer.\n#          schema:\n#            type: string\n#        - name: filename\n#          in: query\n#          required: false\n#          description: The filename parameter specifies the target file name for a file\n#            that needs to harvested as part of a mosaic. This is important to\n#            avoid clashes and to make sure the right dimension values are\n#            available in the name for multidimensional mosaics to work. Only\n#            used if method=\"file\".\n#          schema:\n#            type: string\n#      responses:\n#        \"200\":\n#          description: The coverage store was successfully updated.\n#        \"401\":\n#          description: Unauthorized\ncomponents:\n  requestBodies:\n    CoverageStoreInfo:\n      required: true\n      description: The coverage store body information to upload.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/CoverageStoreInfoWrapper\"\n  responses:\n    CoverageStoresResponse:\n      description: list of coverage stores\n      content:\n        application/json:\n          schema:\n            type: object\n            title: CoverageStoresResponse\n            required:\n              - coverageStores\n            properties:\n              coverageStores:\n                $ref: \"#/components/schemas/CoverageStoreListWrapper\"\n    CoverageStoreResponse:\n      description: The requested coverage store information6\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/CoverageStoreResponseWrapper\"\n          examples:\n            response:\n              value: \u003e\n                {\n                  \"coverageStore\": {\n                    \"name\": \"arcGridSample\",\n                    \"description\": \"Sample ASCII GRID coverage of Global rainfall.\",\n                    \"type\": \"ArcGrid\",\n                    \"enabled\": true,\n                    \"workspace\": {\n                      \"name\": \"nurc\",\n                      \"href\": \"http://localhost:8080/geoserver/restng/workspaces/nurc.json\"\n                    },\n                    \"_default\": false,\n                    \"url\": \"file:coverages/arc_sample/precip30min.asc\",\n                    \"coverages\": \"http://localhost:8080/geoserver/restng/workspaces/nurc/coveragestores/arcGridSample/coverages.json\"\n                  }\n                }\n  schemas:\n    PurgeOption:\n      type: string\n      enum:\n        - none\n        - metadata\n        - all\n    CoverageStoreListWrapper:\n      title: wrapper object in order to comply with current API encoding\n      type: object\n      required:\n        - coverageStore\n      properties:\n        coverageStore:\n          $ref: \"catalogresponses.yaml#/components/schemas/NamedLinks\"\n          \n    CoverageStoreResponseWrapper:\n      title: wrapper object in order to comply with current API encoding\n      type: object\n      required:\n        - coverageStore\n      properties:\n        coverageStore:\n          $ref: \"#/components/schemas/CoverageStoreResponse\"\n\n    CoverageStoreResponse:\n      type: object\n      required:\n        - name\n        - type\n      properties:\n        name:\n          type: string\n          description: Name of the coverage store\n        description:\n          type: string\n          description: Description of the coverage store\n        type:\n          type: string\n          description: Type of coverage store\n        enabled:\n          type: boolean\n          description: Whether the store is enabled, or not\n        workspace:\n          $ref: \"catalogresponses.yaml#/components/schemas/NamedLink\"\n        url:\n          type: string\n          description: Location of the raster data source (often, but not necessarily, a file). Can be relative to the data directory.\n        coverages:\n          type: string\n          description: URL to the list of coverages contained in this store\n          example: http://localhost:8080/geoserver/rest/workspaces/sf/coveragestores/sfdem/coverages.json\n          \n    CoverageStoreInfoWrapper:\n      title: wrapper object for CoverageStoreInfo, in order to comply with current API encoding\n      type: object\n      required:\n        - coverageStore\n      properties:\n        coverageStore:\n          $ref: \"catalog.yaml#/components/schemas/CoverageStoreInfo\"\n\n    CoverageStoreListItem:\n      type: object\n      properties:\n        name:\n          type: string\n          description: Name of coverage store\n        href:\n          type: string\n          description: URL to coverage store definition\n    CoverageStoreList:\n      type: array\n      items:\n        $ref: \"#/components/schemas/CoverageStoreListItem\""
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"CoverageStoreResponse\": parse schema: property \"workspace\": parse schema: resolve \"catalogresponses.yaml#/components/schemas/NamedLink\": external \"catalogresponses.yaml\": file: local file reference is not allowed"
}