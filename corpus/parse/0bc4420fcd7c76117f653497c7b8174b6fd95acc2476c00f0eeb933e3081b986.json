{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/alchemy-fr/Phraseanet"
		},
		"file": {
			"name": "api.yaml",
			"size": 0,
			"path": "doc/API_documentation/v3/api.yaml",
			"byteSize": 31073,
			"content": "openapi: 3.0.3\ninfo:\n  description: \u003e\n    This is the documentation of Phraseanet API (v3)\n  #        [https://alpha.preprod.alchemyasp.com/api/v3](https://alpha.preprod.alchemyasp.com/api/v3).\n  version: \"1.0.0-oas3\"\n  title: Phraseanet API\n  # todo : fix url\n  termsOfService: 'http://phraseanet.com/terms/'\n  contact:\n    email: support@alchemy.fr\n  license:\n    name: GNU GPL V3\n    url: 'https://www.gnu.org/licenses/gpl-3.0.en.html'\n#servers:\n#    - url: https://alpha.preprod.alchemyasp.com/api/v3\n#      description: Phraseanet alpha (dev)\n#    - url: https://beta.preprod.alchemyasp.com/api/v3\n#      description: Phraseanet beta\n#security:\n#    - api_key: []\n#    - oAuth2Password: []\ncomponents:\n  parameters:\n    sbas_id:\n      name: sbas_id\n      in: path\n      description: ID of the databox\n      required: true\n      schema:\n        $ref: common.yaml#/ID\n  \n    base_id:\n      name: base_id\n      in: path\n      description: ID of the base\n      required: true\n      schema:\n        $ref: common.yaml#/ID\n  \n    record_id:\n      name: record_id\n      in: path\n      description: ID of the record\n      required: true\n      schema:\n        $ref: common.yaml#/ID\n  \n    query:\n      name: query\n      in: query\n      description: 'Fulltext query (\u003cempty\u003e = search all)'\n      required: false\n      schema:\n        type: string\n        example: 'dogs OR cats'\n        default: ''\n  \n    search_type:\n      name: search_type\n      in: query\n      required: false\n      schema:\n        type: integer\n        enum: [0,1]\n        default: 0\n      description: \u003e\n        search for records or stories\n          * `0` - search for records\n          * `1` - search for stories\n  \n    page:\n      name: page\n      in: query\n      description: page number, from 1. Use along with \"per_page\"\n      required: false\n      schema:\n        type: integer\n        minimum: 1\n        default: 1\n  \n    per_page:\n      name: per_page\n      in: query\n      description: number of items per page. Use along with \"page\"\n      required: false\n      schema:\n        type: integer\n        minimum: 1\n        maximum: 100\n        default: 10\n  \n    offset:\n      name: offset\n      in: query\n      description: offset in items unit count, from 0. Use along with \"limit\"\n      required: false\n      schema:\n        type: integer\n        minimum: 0\n        # default: 0\n  \n    limit:\n      name: limit\n      in: query\n      description: number of items. Use along with \"offset\"\n      required: false\n      schema:\n        type: integer\n        minimum: 1\n        maximum: 100\n        # default:\n\n    bases:\n      name: bases\n      in: query\n      description: \u003e\n        'bases_id s to search on as seen in `Collection id (\"base_id\" API side)` in _admin \u003e Databases \u003e ... collection_\n\n        If not set: search all collections'\n      required: false\n      schema:\n        type: array\n        uniqueItems: false\n        items:\n          type: integer\n\n#  securitySchemes:\n#      api_key:\n#          type: apiKey\n#          name: oauth_token\n#          in: query\n#      oAuth2Password:\n#          type: oauth2\n#          description: This API uses OAuth 2 with the password grant flow. [More info](https://api.example.com/docs/auth)\n#          flows:\n#              password:   # \u003c-- OAuth flow(authorizationCode, implicit, password or clientCredentials)\n#                  tokenUrl: azea\n\npaths:\n#  '/me':\n#    get:\n#      description: 'todo'\n#      responses:\n#        200:\n#          description: successful operation\n#        default:\n#          description: Any error\n\n  # ---------------- search ----------------\n  '/search':\n    post:\n      tags:\n        - search\n      description: |\n        Fulltext search for records or stories.\n\n        ## About pagination\n\n        * offset / limit\n\n            offset starts at 0, the unit is \"record\"\n        * page / per_page\n\n            the first page is 1, per_page is the number of \"records\" per page.\n\n        so (page=4 ; per_page=5) \u003c===\u003e (offset=15 ; limit=5)\n\n        use (offset/limit) __OR__ (page/per_page)\n\n        ## About \"story_children_limit\"\n\n        This parameter asks __for each story in the resultset__ to get the __N first__ children (records) of the story.\n\n        example with __N=5__ :\n\n        * If a story contains __3__ children, the story will expose :\n            * children_offset = 0 (always 0 since only first children are returned\n            * children_limit = 5 (copy of the story_children_limit parameter)\n            * children_count = 3 (number or children returned)\n            * children_total = 3 (total number of children in the story)\n\n        * If a story contains __7__ children, the story will expose :\n            * children_offset = 0 (always 0 since only first children are returned\n            * children_limit = 5 (copy of the story_children_limit parameter)\n            * children_count = 5 (number or children returned)\n            * children_total = 7 (total number of children in the story)\n\n        ## About \"include(s)\"\n\n        To get smaller / faster response, facets and stories children are ommited by default.\n\n        Add __include__ parameters to get those if needed.\n\n        each __include__ parameter maps a matching sub-object in the response data.\n\n        Since records and stories results are dispatched into 2 separated arrays `response.results.records[]` or\n        `response.results.stories[]` (depending on the `search_type=0|1` parameter), one must use the correct __include(s)__\n        that match the result structure.\n\n        ### facets\n        ```\n        {\n          \"response\": {\n            \"facets\": [\n              {\n                \"name\": \"_base\",\n                \"field\": \"database\",\n                \"values\": [\n                  {\n                    \"value\": \"Base Beta Version 3.0\",\n                    \"raw_value\": \"Base Beta Version 3.0\",\n                    \"count\": 2902,\n                    \"query\": \"database:\\\"Base Beta Version 3.0\\\"\"\n                  },\n                  {\n                    \"value\": \"Base test demo support\",\n                    \"raw_value\": \"Base test demo support\",\n                    \"count\": 1120,\n                    \"query\": \"database:\\\"Base test demo support\\\"\"\n                  },\n                  ...\n                ]\n              },\n              {\n                \"name\": \"Categorie\",\n                \"field\": \"field.Categorie\",\n                \"values\": [\n                  {\n                    \"value\": \"USA Août 2018\",\n                    \"raw_value\": \"USA Août 2018\",\n                    \"count\": 268,\n                    \"query\": \"field.Categorie=\\\"USA Août 2018\\\"\"\n                  },\n                  {\n                    \"value\": \"Voyage Bahamas\",\n                    \"raw_value\": \"Voyage Bahamas\",\n                    \"count\": 83,\n                    \"query\": \"field.Categorie=\\\"Voyage Bahamas\\\"\"\n                  },\n                  ...\n                ]\n              },\n              {\n                \"name\": \"MotsCles\",\n                \"field\": \"field.MotsCles\",\n                \"values\": [\n                  {\n                    \"value\": \"USA\",\n                    \"raw_value\": \"USA\",\n                    \"count\": 914,\n                    \"query\": \"field.MotsCles=\\\"USA\\\"\"\n                  },\n                  ...\n                ]\n              },\n              ...\n            ]\n          }\n        }\n        ```\n\n        ### suggestions\n        flatened facets\n        ```\n        \"response\": {\n          \"suggestions\": [\n            {\n              \"suggestion\": \"Demo Online\",\n              \"query\": \"collection:\\\"Demo Online\\\"\",\n              \"hits\": 2\n            },\n            {\n              \"suggestion\": \"Voyage Bahamas\",\n              \"query\": \"field.Categorie=\\\"Voyage Bahamas\\\"\",\n              \"hits\": 83\n            },\n            ...\n          ]\n        }\n        ```\n\n        ### results.records.subdefs ; results.stories.subdefs\n        ```\n        \"response\": {\n          \"results\": {\n            \"records\": [\n              {\n                \"subdefs\": [\n                  {\n                    \"name\": \"document\",\n                    \"permalink\": {\n                      \"created_on\": \"2021-09-23T16:04:25+02:00\",\n                      \"id\": 12539,\n                      \"is_activated\": false,\n                      \"label\": \"TX9329_23\",\n                      \"updated_on\": \"2021-09-23T16:05:34+02:00\",\n                      \"page_url\": \"https://demo.alchemyasp.com/permalink/v1/43/82227/document/?token=xxx\",\n                      \"download_url\": \"https://demo.alchemyasp.com/permalink/v1/43/82227/document/TX9329_23.tif?token=xxx\u0026download=1\",\n                      \"url\": \"https://demo.alchemyasp.com/permalink/v1/43/82227/document/TX9329_23.tif?token=xxx\"\n                    },\n                    \"height\": 3181,\n                    \"width\": 3181,\n                    \"filesize\": 30439108,\n                    \"devices\": [\n                      \"all\"\n                    ],\n                    \"player_type\": \"UNKNOWN\",\n                    \"mime_type\": \"image/tiff\",\n                    \"substituted\": false,\n                    \"created_on\": \"2021-09-23T16:04:25+02:00\",\n                    \"updated_on\": \"2021-09-23T16:04:25+02:00\",\n                    \"url\": \"https://demo.alchemyasp.com/medias/xxxx.yyyy.zzzz\",\n                    \"url_ttl\": 7200\n                  },\n                  {\n                    \"name\": \"preview\",\n                    \"permalink\": {\n                      \"created_on\": \"2021-09-23T16:04:46+02:00\",\n                      \"id\": 12541,\n                      \"is_activated\": false,\n                      \"label\": \"TX9329_23\",\n                      \"updated_on\": \"2021-09-23T16:05:34+02:00\",\n                      \"page_url\": \"https://demo.alchemyasp.com/permalink/v1/43/82227/preview/?token=xxx\",\n                      \"download_url\": \"https://demo.alchemyasp.com/permalink/v1/43/82227/preview/TX9329_23.jpg?token=xxx\u0026download=1\",\n                      \"url\": \"https://demo.alchemyasp.com/permalink/v1/43/82227/preview/TX9329_23.jpg?token=xxx\"\n                    },\n                    \"height\": 800,\n                    \"width\": 800,\n                    \"filesize\": 112906,\n                    \"devices\": [\n                      \"screen\"\n                    ],\n                    \"player_type\": \"IMAGE\",\n                    \"mime_type\": \"image/jpeg\",\n                    \"substituted\": false,\n                    \"created_on\": \"2021-09-23T16:04:46+02:00\",\n                    \"updated_on\": \"2021-09-23T16:04:46+02:00\",\n                    \"url\": \"https://demo.alchemyasp.com/medias/xxxx.yyyy.zzzz\",\n                    \"url_ttl\": 7200\n                  },\n                  ...\n                ]\n              }\n            ]\n          }\n        }\n        ```\n\n        ### results.records.caption ; results.stories.caption\n        simple metadata\n        ```\n        \"response\": {\n          \"results\": {\n            \"records\": [\n              {\n                \"caption\": [\n                  {\n                    \"meta_structure_id\": 12,\n                    \"name\": \"Titre\",\n                    \"value\": \"New demo pictures - Oceans\"\n                  },\n                  {\n                    \"meta_structure_id\": 4,\n                    \"name\": \"MotsCles\",\n                    \"value\": \"Bahamas ; mer ; Nassau ; plage ; nuage ; turquoise ; ocean ; sea ; Atlantic\"\n                  },\n                  ...\n                ]\n              }\n            ]\n          }\n        }\n        ```\n\n        ### results.records.metadata ; results.stories.metadata\n        complete metadata with labels\n        ```\n        {\n          \"response\": {\n            \"results\": {\n              \"records\": [\n                {\n                  \"metadata\": [\n                    {\n                      \"meta_structure_id\": 12,\n                      \"name\": \"Titre\",\n                      \"labels\": {\n                        \"fr\": \"Titre principal\",\n                        \"en\": \"Headline title\",\n                        \"de\": \"Titre\",\n                        \"nl\": \"Titre\"\n                      },\n                      \"meta_id\": 346744,\n                      \"value\": \"New demo pictures - Oceans\"\n                    },\n                    {\n                      \"meta_structure_id\": 4,\n                      \"name\": \"MotsCles\",\n                      \"labels\": {\n                        \"fr\": \"Mots Clés\",\n                        \"en\": \"Keywords\",\n                        \"de\": \"MotsCles\",\n                        \"nl\": \"MotsCles\"\n                      },\n                      \"meta_id\": 346745,\n                      \"value\": \"Bahamas\"\n                    },\n                    ...\n                  ]\n                }\n              ]\n            }\n          }\n        }\n        ```\n\n        ### results.records.status ; results.stories.status\n        ```\n        \"response\": {\n          \"results\": {\n            \"records\": [\n              {\n                \"status\": [\n                  {\n                    \"bit\": 8,\n                    \"state\": false\n                  },\n                  {\n                    \"bit\": 9,\n                    \"state\": true\n                  },\n                  ...\n                ]\n              }\n            ]\n          }\n        }\n        ```\n\n        ### results.records.thumbnail ; results.stories.thumbnail\n        always included\n\n        ### results.records.technical_informations\n        always included\n\n        _nb:_ since stories are not related to a document, there is no technical_informations for stories.\n\n        ### results.records.children\n        In story search mode, will publish a children[] array for each result. See _story_children_limit_ parameter.\n\n        children is an array of records, with same structure as a result record.\n        ```\n        \"response\": {\n          \"results\": {\n            \"stories\": [\n              {\n                \"children\": [\n                  {\n                    // record structure\n                  },\n                  ...\n                ],\n                ...\n              },\n              ...\n            ]\n          }\n        }\n        ```\n        ### results.records.children.thumbnail\n        ### results.records.children.technical_informations\n        ### results.records.children.subdefs\n        ### results.records.children.caption\n        ### results.records.children.metadata\n        ### results.records.children.status\n        see result.records.* includes.\n\n      parameters:\n        - $ref: '#/components/parameters/query'\n        - $ref: '#/components/parameters/search_type'\n        - $ref: '#/components/parameters/bases'\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/per_page'\n        - $ref: '#/components/parameters/offset'\n        - $ref: '#/components/parameters/limit'\n        - name: story_children_limit\n          in: query\n          description: For each story in result, include N children\n          required: false\n          schema:\n            type: integer\n            minimum: 0\n            maximum: 10\n            default: '0'\n        - name: include\n          in: query\n          description: Suplemental elements to be included in response\n          required: false\n          schema:\n            type: array\n            uniqueItems: false\n            items:\n              type: string\n              enum:\n                - facets\n                - suggestions\n                - result.stories.children\n                - results.records.subdefs\n                - results.stories.subdefs\n                - results.records.caption\n                - results.stories.caption\n                - results.records.metadata\n                - results.stories.metadata\n                - results.records.status\n                - results.stories.status\n                - results.records.children\n                - results.records.children.subdefs\n                - results.records.children.caption\n                - results.records.children.metadata\n                - results.records.children.status\n      responses:\n        200:\n          description: ok\n          content:\n            application/json:\n              schema:\n                $ref: 'search.yaml#/ApiResponse_search'\n        default:\n          $ref: 'common.yaml#/error_response'\n\n  # ---------------- searchraw ----------------\n  '/searchraw':\n    post:\n      tags:\n        - searchraw\n      description: |\n        Fulltext search for records or stories; Returns __raw es documents__\n\n        Stories children are not returned, use route _stories/.../.../children_\n\n        see pagination description in route _search_\n      parameters:\n        - $ref: '#/components/parameters/query'\n        - $ref: '#/components/parameters/search_type'\n        - $ref: '#/components/parameters/bases'\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/per_page'\n        - $ref: '#/components/parameters/offset'\n        - $ref: '#/components/parameters/limit'\n      responses:\n        200:\n          description: ok\n          content:\n            application/json:\n              schema:\n                $ref: 'searchraw.yaml#/ApiResponse_searchraw'\n        default:\n          $ref: 'common.yaml#/error_response'\n\n  # ------------ record -----------\n  '/records/{sbas_id}/{record_id}':\n    get:\n      tags:\n        - record\n      summary: Find record by sbas_id and record_id\n      description: |\n        Returns a single record, which can be a real record or a story (check `is_story`)\n\n        ## About extended mode\n        passing header `Accept: application/vnd.phraseanet.record-extended+json`\n        will add/populate objects :\n        - subdefs\n        - status\n        - metadata\n        - dces\n\n      operationId: getRecordById\n      parameters:\n        - $ref: '#/components/parameters/sbas_id'\n        - $ref: '#/components/parameters/record_id'\n      responses:\n        200:\n          description: ok\n          content:\n            application/json:\n              schema:\n                $ref: record.yaml#/ApiResponse_record\n            'application/vnd.phraseanet.record-extended+json':\n              schema:\n                $ref: record.yaml#/ApiResponse_record_extended\n        404:\n          description: Record not found\n        default:\n          $ref: 'common.yaml#/error_response'\n\n    patch:\n      tags:\n        - record\n      summary: Set or change metadata and/or status-bits of a record\n      description: |\n        Set or change metadata and/or status-bits of a record.\n\n        Data is sent as json in the BODY of the request.\n\n        * metadatas is an array of simple “actions” that are applied in the same order as defined into json.\n        * field can be specified by meta_struct_id or by name\n        * field value (when relevant) can be specified by meta_id or by actual value\n        * method to match a value can be (strict | ignore-case | regexp); default is “ignore-case”\n        * to act on multi-values we must set an “action” (set | add | delete | replace); default is “set”\n        * default action “set” and special value (null, arrays) allow to write simplified actions\n        * the “replace” action is useful to set/add values only if a value already exists\n\n        # Body examples :\n\n        ## mono-valued fields\n\n        set a mono-value field by its meta_struct_id\n\n        ```json\n        {\n            \"metadatas\": [\n                {\n                    \"meta_struct_id\": 1,\n                    \"action\": \"set\",\n                    \"value\": \"A pretty string\"\n                }\n            ]\n        }\n        ```\n\n\n        same thing (because default action is “set”), by field name\n\n        ```\n        {\n            \"metadatas\": [\n                {\n                    \"field_name\": \"Author\",\n                    \"value\": \"John Doe\"\n                }\n            ]\n        }\n        ```\n\n        delete a mono-valued field\n\n        ```\n        {\n            \"metadatas\": [\n                {\n                    \"field_name\": \"Copyright\",\n                    \"action\": \"delete\"\n                }\n            ]\n        }\n        ```\n\n        same thing\n\n        ```\n        {\n            \"metadatas\": [\n                {\n                    \"field_name\": \"Copyright\",\n                    \"value\": null\n                }\n            ]\n        }\n        ```\n\n        ## multi-valued\n\n        replace a keyword __if we know its meta-id__\n\n        ```\n        {\n            \"metadatas\": [\n                {\n                    \"field_name\": \"Keywords\",\n                    \"meta_id\": 678,\n                    \"value\": \"Dog\"\n                }\n            ]\n        }\n        ```\n\n        delete a specific keyword by its meta-id (we could also set action : “delete”, omit value, …)\n\n        ```\n        {\n            \"metadatas\": [\n                {\n                    \"field_name\": \"Keywords\",\n                    \"meta_id\": 345,\n                    \"value\": null\n                }\n            ]\n        }\n        ```\n\n        delete a specific keyword by its value. Since we must pass the value (not null), we must set the action “delete”\n\n        _nb_ : the default matching method is “ignore-case” so we can write the actual value all small letters\n\n        ```\n        {\n            \"metadatas\": [\n                {\n                    \"field_name\": \"Keywords\",\n                    \"action\": \"delete\",\n                    \"value\": \"doggy\"\n                }\n            ]\n        }\n        ```\n\n        delete __all Keywords__\n\n        ```\n        {\n            \"metadatas\": [\n                {\n                    \"field_name\": \"Keywords\",\n                    \"value\": null\n                }\n            ]\n        }\n        ```\n\n        add a keyword\n\n        ```\n        {\n            \"metadatas\": [\n                {\n                    \"field_name\": \"Keywords\",\n                    \"action\": \"add\",\n                    \"value\": \"Cat\"\n                }\n            ]\n        }\n        ```\n\n        replace all keywords by new ones\n\n        ```\n        {\n            \"metadatas\": [\n                {\n                    \"field_name\": \"Keywords\",\n                    \"value\": null\n                },\n                {\n                    \"field_name\": \"Keywords\",\n                    \"action\": \"add\",\n                    \"value\": \"Cat\"\n                },\n                {\n                    \"field_name\": \"Keywords\",\n                    \"action\": \"add\",\n                    \"value\": \"Dog\"\n                }\n            ]\n        }\n        ```\n\n        same thing using an array\n\n        ```\n        {\n            \"metadatas\": [\n                {\n                    \"field_name\": \"Keywords\",\n                    \"value\": [\n                            \"Dog\",\n                            \"Cat\",\n                    ]\n                }\n            ]\n        }\n        ```\n\n        simplification of multiple same actions with arrays as value\n\n        ```\n        {\n            \"metadatas\": [\n                {\n                    \"field_name\": \"Keywords\",\n                    \"action\": \"delete\",\n                    \"value\": [\n                            \"cop\",\n                            \"bobby\",\n                            \"pig\",\n                            \"nicks\"\n                    ]\n                },\n                {\n                    \"field_name\": \"Keywords\",\n                    \"action\": \"add\",\n                    \"value\": [\n                            \"Policeman\",\n                            \"Arrest\"\n                    ]\n                }\n            ]\n        }\n        ```\n\n        replacing a keyword by value can be 2 actions if we know that the bad value exists…\n\n        ```\n        {\n            \"metadatas\": [\n                {\n                    \"field_name\": \"Keywords\",\n                    \"action\": \"delete\",\n                    \"value\": \"cop\"\n                },\n                {\n                    \"field_name\": \"Keywords\",\n                    \"action\": \"add\",\n                    \"value\": \"Policeman\"\n                }\n            ]\n        }\n        ```\n\n        replace-if-exists\n\n        …but we can also use the “replace” action if we are not sure\n\n        ```\n        {\n            \"metadatas\": [\n                {\n                    \"field_name\": \"Keywords\",\n                    \"action\": \"replace\",\n                    \"value\": \"cop\",\n                    \"replace_with\": \"Policeman\"\n                }\n            ]\n        }\n        ```\n\n        fix  spelling errors with regexp\n\n        ```\n        {\n            \"metadatas\": [\n                {\n                    \"field_name\": \"Persons\",\n                    \"action\": \"replace\",\n                    \"match_method\": \"regexp\",\n                    \"value\": \"/joh?nn?[i|y]\\w+hall?[i|y]day/\\w+in\\w([0-9]{4})/i\",\n                    \"replace_with\": \"Johnny Halliday in $1\"\n                }\n            ]\n        }\n        ```\n\n        add translations for existing keywords (using “replace”)\n\n        _nb_ : multi-values are kept unique so double replacement is not a pb.\n\n        ```\n        {\n            \"metadatas\": [\n                {\n                    \"field_name\": \"Keywords\",\n                    \"action\": \"replace\",\n                    \"value\": \"dog\",\n                    \"replace_with\": [\n                            \"Dog\",\n                            \"Chien\"\n                    ]\n                },\n                {\n                    \"field_name\": \"Keywords\",\n                    \"action\": \"replace\",\n                    \"value\": \"chien\",\n                    \"replace_with\": [\n                            \"Dog\",\n                            \"Chien\"\n                    ]\n                }\n            ]\n        }\n        ```\n\n        same thing using regexp\n\n        ```\n        {\n            \"metadatas\": [\n                {\n                    \"field_name\": \"Keywords\",\n                    \"action\": \"replace\",\n                    \"value\": \"/cop|bobby|pig|flic/i\",\n                    \"match_method\": \"regexp\",\n                    \"replace_with\": [\n                            \"Policeman\",\n                            \"Policier\"\n                    ]\n                }\n            ]\n        }\n        ```\n\n        ## Status-bits\n\n        sb can be changed with the same api.\n\n        To not get confused with \"names\", sb are referenced by bit number only 4…31\n\n        ```\n        {\n            \"metadatas\": [\n                    ...\n            ],\n            \"status\": [\n                {\n                    \"bit\": 4,\n                    \"state\": true\n                },\n                {\n                    \"bit\": 5,\n                    \"state\": false\n                },\n                {\n                    \"bit\": 6,\n                    \"state\": false\n                },\n                {\n                    \"bit\": 7,\n                    \"state\": false\n                }\n            ]\n        }\n        ```\n\n      operationId: patchRecord\n      parameters:\n        - $ref: '#/components/parameters/sbas_id'\n        - $ref: '#/components/parameters/record_id'\n\n      requestBody:\n        content:\n          application/json:\n            schema:\n              allOf:\n                - $ref: schemas.yaml#/RecordPatch\n      responses:\n        200:\n          description: ok\n          content:\n            application/json:\n              schema:\n                $ref: record.yaml#/ApiResponse_record\n        default:\n          $ref: 'common.yaml#/error_response'\n\n  '/records/{base_id}':\n    post:\n      tags:\n        - record\n      summary: Creates a record\n      description: |\n        Creates a single record, including document and/or data.\n\n        ### To create a record __with__ a file (document)\n\n        _Since multipart is required to pass a file, json data must be passed as a part named \"body\"_\n\n        ### To create a record __without__ file\n\n        _Since no file is passed, data can be passed as plain body_\n\n        ### metadata / status-bits setting\n\n        see \"PATCH\" method for examples, apply only relevant \"set\" operation on just created record with empty data.\n\n      operationId: createRecord\n      parameters:\n        - $ref: '#/components/parameters/base_id'\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              description: to create a record __with__ a file (document)\n              type: object\n              properties:\n                body:\n                  $ref: schemas.yaml#/RecordPatch\n                file:\n                  description : 'uploaded file'\n                  type: string\n                  format: binary\n          application/json:\n            schema:\n              description: To create a record __without__ file\n              allOf:\n                - $ref: schemas.yaml#/RecordPatch\n      responses:\n        200:\n          description: ok\n          content:\n            application/json:\n              schema:\n                $ref: record.yaml#/ApiResponse_record_reference\n        default:\n          $ref: 'common.yaml#/error_response'\n      # security:\n      #   - api_key: []\n\n  '/stories/{sbas_id}/{record_id}':\n    get:\n      tags:\n        - story\n      summary: Find a story (record) by sbas_id and record_id\n      description: |\n        Returns a single story\n\n        This is the __same__ parameters / result as _/records/..._, (including \"extended mode\"),\n        except that here the record __must__ be a story else 404 is returned\n\n      operationId: getStoryById\n      parameters:\n        - $ref: '#/components/parameters/sbas_id'\n        - $ref: '#/components/parameters/record_id'\n      responses:\n        200:\n          description: ok\n          content:\n            application/json:\n              schema:\n                $ref: record.yaml#/ApiResponse_story\n            'application/vnd.phraseanet.record-extended+json':\n              schema:\n                $ref: record.yaml#/ApiResponse_story_extended\n        404:\n          description: Story not found (\n        default:\n          $ref: 'common.yaml#/error_response'\n\n\n  '/stories/{sbas_id}/{record_id}/children':\n    get:\n      tags:\n        - story\n      summary: Returns uri of each record (child) contained in the story ; Optional pagination\n      description: Returns children of a story.\n      operationId: getStoryChildren\n      parameters:\n        - $ref: '#/components/parameters/sbas_id'\n        - $ref: '#/components/parameters/record_id'\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/per_page'\n        - $ref: '#/components/parameters/offset'\n        - $ref: '#/components/parameters/limit'\n      responses:\n        200:\n          description: ok\n          content:\n            application/json:\n              schema:\n                $ref: record.yaml#/ApiResponse_RecordsUriArray\n        404:\n          description: Story (record) not found\n        default:\n          $ref: 'common.yaml#/error_response'\n"
		}
	},
	"Error": "parse: parse spec: parse components: parameters: \"sbas_id\": schema: parse schema: resolve \"common.yaml#/ID\": find schema: external base \"common.yaml\" is not supported"
}