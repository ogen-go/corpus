{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/fetzi/laracon-api-design"
		},
		"file": {
			"name": "todo.yml",
			"size": 0,
			"path": "todo.yml",
			"byteSize": 5303,
			"content": "openapi: 3.0.0\ninfo:\n  title: todo\n  version: '1.0'\n  contact:\n    url: 'http://domain.test'\n    email: me@domain.test\n  description: A Sample API for a Todo App\nservers:\n  - url: 'http://localhost:8000/api/todos'\npaths:\n  /:\n    get:\n      summary: Get All Todos\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  links:\n                    type: object\n                    properties:\n                      self:\n                        type: string\n                        format: uri\n                      next:\n                        type: string\n                        format: uri\n                      last:\n                        type: string\n                        format: uri\n                    required:\n                      - self\n                      - next\n                      - last\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/todo'\n              examples: {}\n      operationId: getTodos\n      description: Retrieve a list of all the available todos\n      security: []\n    post:\n      summary: Create new Todo\n      tags: []\n      responses:\n        '201':\n          description: Created\n          headers:\n            Location:\n              schema:\n                type: string\n                format: uri\n              description: URI of the new object\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/todo'\n      operationId: createTodo\n      description: Creates a new Todo item to complete\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                title:\n                  type: string\n                  minLength: 1\n                description:\n                  type: string\n              required:\n                - title\n        description: Content of the new Todo\n    parameters: []\n  '/{todo_uuid}':\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n          example: b646c96b-9449-4a99-8be5-119f7f9d302c\n        name: todo_uuid\n        in: path\n        required: true\n        description: UUID of the Todo\n    get:\n      summary: getTodo\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  links:\n                    type: object\n                    properties:\n                      self:\n                        type: string\n                        format: uri\n                    required:\n                      - self\n                  data:\n                    $ref: '#/components/schemas/todo'\n      operationId: getTodo\n      description: Returns the specified Todo Item\n    put:\n      summary: updateTodo\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  links:\n                    type: object\n                    properties:\n                      self:\n                        type: string\n                        format: uri\n                    required:\n                      - self\n                  data:\n                    $ref: '#/components/schemas/todo'\n      operationId: put-todo_uuid\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/todo'\n    delete:\n      summary: ''\n      operationId: deleteTodo\n      responses:\n        '204':\n          description: No Content\n      description: Removes a todo from the list\ncomponents:\n  schemas:\n    todo:\n      title: todo\n      type: object\n      x-examples: {}\n      properties:\n        id:\n          type: string\n          format: uuid\n          example: ad2277a3-0e80-4a81-a5a4-8bc4b703a1ac\n        attributes:\n          type: object\n          properties:\n            title:\n              type: string\n              example: Clean Garage\n              minLength: 1\n            description:\n              type: string\n              example: Make sure to break down the boxes\n            created_at:\n              type: string\n              format: date-time\n              example: '2020-04-12 09:23:51'\n            last_updated:\n              type: string\n              example: '2020-04-13 09:23:51'\n            status:\n              type: boolean\n              enum:\n                - '1'\n                - '0'\n              example: '0'\n          required:\n            - title\n        links:\n          type: object\n          properties:\n            self:\n              type: string\n              format: uri\n          required:\n            - self\n        type:\n          type: string\n          pattern: todo\n      description: ''\n  securitySchemes:\n    api-token:\n      name: API Key\n      type: apiKey\n      in: query\nsecurity:\n  - Bearer Token: []\n",
			"canonicalURL": "/github.com/fetzi/laracon-api-design@f060729c1fb371647ef00432e8282d02e0b96a1e/-/blob/todo.yml",
			"externalURLs": [
				{
					"url": "https://github.com/fetzi/laracon-api-design/blob/f060729c1fb371647ef00432e8282d02e0b96a1e/todo.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"todo\": parse schema: property \"attributes\": parse schema: property \"status\": at 1:338: parse enum values: parse value \"\\\"1\\\"\": expected type \"boolean\", got \"string\""
}