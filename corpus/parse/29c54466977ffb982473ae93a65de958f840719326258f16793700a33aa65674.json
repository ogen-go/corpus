{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/3scale/zync"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "examples/rest-api/openapi.yml",
			"byteSize": 4207,
			"content": "---\nopenapi: 3.0.2\ninfo:\n  title: Zync REST API\n  version: 1.0.0\npaths:\n  /clients/{clientId}:\n    get:\n      summary: Get a Client\n      operationId: readClient\n      parameters:\n      - name: clientId\n        in: path\n        description: client_id\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: Client resource was found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Client'\n      security:\n      - OIDC: []\n        Basic: []\n        Digest: []\n    put:\n      summary: Create or update the Client\n      operationId: saveClient\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Client'\n            examples:\n              Client:\n                value:\n                  client_id: foo-bar\n                  client_secret: some-secret\n        required: true\n      responses:\n        200:\n          description: When the Client was updated.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Client'\n        201:\n          description: When the Client was created on the IDP.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Client'\n    delete:\n      summary: Delete the Client\n      operationId: deleteClient\n      responses:\n        200:\n          description: When the client was deleted.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Client'\n        204:\n          description: When the Client was already gone from the IDP.\n          content:\n            application/json: {}\n    parameters:\n    - name: clientId\n      in: path\n      required: true\n  /.well-known/openid-configuration:\n    get:\n      responses:\n        200:\n          description: Enable OAuth2.0 authentication by responding with a token endpoint\n            of an IDP.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OIDC'\n              examples:\n                Enable OAuth2.0 authentication:\n                  value:\n                    token_endpoint: https://idp.example.com/auth/realms/myrealm\n      security:\n      - {}\ncomponents:\n  schemas:\n    Client:\n      title: Root Type for Client\n      description: A Client representation.\n      required: []\n      type: object\n      properties:\n        client_id:\n          type: string\n        client_secret:\n          type: string\n        client_name:\n          type: string\n        redirect_uris:\n          description: A list of allowed redirect uris.\n          type: array\n          items:\n            type: string\n        grant_types:\n          description: A list of allowed grant types.\n          type: array\n          items:\n            type: string\n      example: |-\n        {\n            \"client_id\": \"foo-bar\",\n            \"client_secret\": \"some-secret\"\n        }\n    OIDC:\n      title: Root Type for OIDC\n      description: OpenID Connect Configuration to define where to get access token.\n      type: object\n      properties:\n        token_endpoint:\n          type: string\n      example: |-\n        {\n            \"token_endpoint\": \"https://idp.example.com/auth/realms/myrealm\"\n        }\n  securitySchemes:\n    OIDC:\n      type: openIdConnect\n      description: |-\n        Use OpenID Connect for authentication.\n        Zync will try to access `/.well-known/openid-configuration` and use \"token_endpoint\" property from the JSON response.\n        Then it will exchange its' credentials for an access token and will use that access token to access this API.\n    Basic:\n      type: http\n      description: Zync will try to send provided credentials as HTTP Basic authentication\n        in case it gets a 401 response with proper WWW-Authenticate header.\n      scheme: basic\n    Digest:\n      type: http\n      description: Zync will try to send provided credentials as HTTP Basic authentication\n        in case it gets a 401 response with proper WWW-Authenticate header.\n      scheme: digest\n",
			"canonicalURL": "/github.com/3scale/zync@235a889a4bf49bb7eab834688b471014d2a59f84/-/blob/examples/rest-api/openapi.yml",
			"externalURLs": [
				{
					"url": "https://github.com/3scale/zync/blob/235a889a4bf49bb7eab834688b471014d2a59f84/examples/rest-api/openapi.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/clients/{clientId}\": parameters: parse parameter \"clientId\": at 1:2752: parameter MUST contain either a schema property, or a content property"
}