{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/geoserver/geoserver"
		},
		"file": {
			"name": "layers.yaml",
			"size": 0,
			"path": "src/community/rest-openapi/openapi/src/main/resources/org/geoserver/rest/openapi/1.0.0/layers.yaml",
			"byteSize": 10247,
			"content": "openapi: 3.0.0\ninfo:\n  version: 1.0.0\n  title: GeoServer Layers\n  description: A layer is a published resource (feature type or coverage).\nsecurity:\n- basicAuth: [\n    ]\ntags:\n- name: layers\n  description: Layers API\npaths:\n  /layers:\n    get:\n      operationId: getLayers\n      tags:\n      - layers\n      summary: Get a list of layers\n      description: Displays a list of all layers on the server.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Layers'\n              examples:\n                response:\n                  value: |\n                    {\n                      \"layers\": {\n                        \"layer\": [\n                          {\n                            \"name\": \"tiger:giant_polygon\",\n                            \"href\": \"http:\\/\\/localhost:8080\\/geoserver\\/rest\\/layers\\/tiger%3Agiant_polygon.json\"\n                          },\n                          {\n                            \"name\": \"sf:bugsites\",\n                            \"href\": \"http:\\/\\/localhost:8080\\/geoserver\\/rest\\/layers\\/sf%3Abugsites.json\"\n                          },\n                        ]\n                      }\n                    }\n  /layers/{qualifiedLayerName}:\n    parameters:\n    - name: qualifiedLayerName\n      in: path\n      required: true\n      description: The name of the layer to retrieve, preferrably including namespace prefix (e.g. \"cite:roads\") to avoid ambiguities\n      schema:\n        type: string\n    get:\n      operationId: getLayer\n      tags:\n      - layers\n      summary: Retrieve a layer\n      description: Retrieves a single layer definition.\n      responses:\n        '200':\n          $ref: \"#/components/responses/LayerResponse\"\n    put:\n      operationId: updateLayer\n      tags:\n      - layers\n      summary: Modify a layer.\n      description: Modifies an existing layer on the server.\n      requestBody:\n        $ref: '#/components/requestBodies/Layer'\n      responses:\n        '200':\n          description: The layer was successfully updated.\n    delete:\n      operationId: deleteLayer\n      tags:\n      - layers\n      summary: Delete layer\n      description: Deletes a layer from the server.\n      parameters:\n      - name: recurse\n        in: query\n        description: Recursively removes the layer from all layer groups which reference it. If this results in an empty layer group, also delete the layer group. Allowed values for this parameter are true or false. The default value is false. A request with 'recurse=false' will fail if any layer groups reference the layer.\n        required: false\n        schema:\n          type: boolean\n          default: false\n      responses:\n        '200':\n          description: OK\n  /workspaces/{workspaceName}/layers:\n    parameters:\n    - name: workspaceName\n      in: path\n      required: true\n      description: The name of the workspace to list layers in\n      schema:\n        type: string\n    get:\n      operationId: getLayersByWorkspace\n      tags:\n      - layers\n      summary: Get a list of layers in a workspace.\n      description: Displays a list of all layers in the provided workspace.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Layers'\n              examples:\n                response:\n                  value: |\n                    {\n                      \"layers\": {\n                        \"layer\": [\n                          {\n                            \"name\": \"bugsites\",\n                            \"href\": \"http:\\/\\/localhost:8080\\/geoserver\\/rest\\/workspaces\\/sf\\/layers\\/bugsites.json\"\n                          },\n                        ]\n                      }\n                    }\n  /workspaces/{workspaceName}/layers/{layerName}.:\n    parameters:\n    - name: workspaceName\n      in: path\n      required: true\n      description: The name of the workspace the layer is in.\n      schema:\n        type: string\n    - name: layerName\n      in: path\n      required: true\n      description: The name of the layer to retrieve, *without* workspace prefix, since it's given by the workspaceName parameter already. Request will fail otherwise.\n      schema:\n        type: string\n    get:\n      operationId: getLayerByWorkspace\n      tags:\n      - layers\n      summary: Retrieve a layer\n      description: Retrieves a single layer definition.\n      parameters:\n        - in: query\n          name: quietOnNotFound\n          required: false\n          schema:\n             type: boolean\n             default: true\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LayerResponse'\n    put:\n      operationId: updateLayerByWorkspace\n      tags:\n      - layers\n      summary: Modify a layer.\n      description: Modifies an existing layer on the server.\n      requestBody:\n        $ref: '#/components/requestBodies/Layer'\n      responses:\n        '200':\n          description: The layer was successfully updated.\n    delete:\n      operationId: deleteLayerByWorkspace\n      tags:\n      - layers\n      summary: Delete layer\n      description: Deletes a layer from the server.\n      parameters:\n      - name: recurse\n        in: query\n        description: Recursively removes the layer from all layer groups which reference it. If this results in an empty layer group, also delete the layer group. Allowed values for this parameter are true or false. The default value is false. A request with 'recurse=false' will fail if any layer groups reference the layer.\n        required: false\n        schema:\n          type: boolean\n          default: false\n      responses:\n        '200':\n          description: OK\ncomponents:\n  securitySchemes:\n    basicAuth:\n      type: http\n      scheme: basic\n  responses:\n    LayerResponse:\n      description: OK\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/LayerResponse'\n  requestBodies:\n    Layer:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/LayerInfoWrapper'\n      description: The updated layer definition.\n      required: true\n  schemas:\n    LayerInfoWrapper:\n      type: object\n      properties:\n        layer:\n          $ref: \"catalog.yaml#/components/schemas/LayerInfo\"\n    Layers:\n      title: layers\n      type: object\n      properties:\n        layers:\n          $ref: '#/components/schemas/LayerReference'\n    LayerReference:\n      title: layers\n      type: object\n      properties:\n        layer:\n          $ref: \"catalogresponses.yaml#/components/schemas/NamedLinks\"\n    LayerResponse:\n      type: object\n      properties:\n        layer:\n          $ref: \"#/components/schemas/Layer\"\n    Layer:\n      title: layer\n      type: object\n      properties:\n        name:\n          type: string\n          description: Name of the layer\n        path:\n          type: string\n          description: Location of the layer in the WMS capabilities layer tree\n        type:\n          type: string\n          enum:\n          - VECTOR\n          - RASTER\n          - REMOTE\n          - WMS\n          - GROUP\n          description: Type of published layer. Can be VECTOR, RASTER, REMOTE, WMS or GROUP. Must be consistent with resource definition.\n        defaultStyle:\n          $ref: 'catalogresponses.yaml#/components/schemas/NamedLink'\n        styles:\n          type: object\n          description: Avaialble styles for layer publication\n          properties:\n            '@class':\n              type: string\n              enum:\n              - linked-hash-set\n              description: required value linked-hash-set.\n            style:\n              type: array\n              items:\n                $ref: 'catalogresponses.yaml#/components/schemas/NamedLink'\n        resource:\n          $ref: 'catalogresponses.yaml#/components/schemas/NamedLink'\n        opaque:\n          type: boolean\n          description: Controls layer transparency (whether the layer is opaque or transparent).\n        metadata:\n          $ref: \"catalog.yaml#/components/schemas/MetadataMap\"\n        attribution:\n          $ref: \"catalog.yaml#/components/schemas/AttributionInfo\"\n        authorityURLs:\n          type: array\n          items:\n            $ref: \"catalog.yaml#/components/schemas/AuthorityURLInfo\"\n        identifiers:\n          type: array\n          items:\n            $ref: \"catalog.yaml#/components/schemas/LayerIdentifierInfo\"\n      example:      {\n                        \"layer\": {\n                            \"name\": \"poi\",\n                            \"path\": \"/\",\n                            \"type\": \"VECTOR\",\n                            \"defaultStyle\": {\n                                \"name\": \"poi\",\n                                \"href\": \"http://localhost:8080/geoserver/rest/styles/poi.json\"\n                            },\n                            \"styles\": {\n                                \"@class\": \"linked-hash-set\",\n                                \"style\": [\n                                    {\n                                        \"name\": \"burg\",\n                                        \"href\": \"http://localhost:8080/geoserver/rest/styles/burg.json\"\n                                    },\n                                    {\n                                        \"name\": \"point\",\n                                        \"href\": \"http://localhost:8080/geoserver/rest/styles/point.json\"\n                                    }\n                                ]\n                            },\n                            \"resource\": {\n                                \"@class\": \"featureType\",\n                                \"name\": \"poi\",\n                                \"href\": \"http://localhost:8080/geoserver/rest/workspaces/tiger/datastores/nyc/featuretypes/poi.json\"\n                            },\n                            \"attribution\": {\n                                \"logoWidth\": 0,\n                                \"logoHeight\": 0\n                            }\n                        }\n                    }\n"
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"LayerInfoWrapper\": parse schema: property \"layer\": parse schema: resolve \"catalog.yaml#/components/schemas/LayerInfo\": external \"catalog.yaml\": file: local file reference is not allowed"
}