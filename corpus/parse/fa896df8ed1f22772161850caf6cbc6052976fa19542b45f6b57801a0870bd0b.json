{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/tatumio/tatum-blockchain-connector"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "nft-connector/module/openapi.yaml",
			"byteSize": 170615,
			"content": "openapi: 3.0.0\nservers:\n  - url: 'https://api-eu1.tatum.io'\ninfo:\n  version: 1.0.1\n  title: Tatum NFT Abstraction API\ntags:\n  - description: |\n      \u003cp\u003eNFT stands for \"non-fungible token.\" Non-fungible means that each token is unique and irreplaceable. This principle gives NFTs their value and gives rise to a wide range of interesting potential use cases.\u003cbr/\u003e\n      NFTs can be used for nearly any digital asset or good to ensure authenticity and scarcity. The possibilities are endless, but here are a few example use cases:\n      \u003cul\u003e\n      \u003cli\u003e\u003cb\u003eIn-game assets\u003c/b\u003e - NFTs can be used to create unique collectibles in the form of characters, weapons, skins, or other equipment. Players can resell or trade assets directly as they choose, and their authenticity is easily verifiable. No more eBay, no more scammers.\u003c/li\u003e\n      \u003cli\u003e\u003cb\u003eMusic and other digital media\u003c/b\u003e - NFTs can be used to create rare and unique collectible digital releases. Similarly, NFTs can be used to sell videos, art, or any other type of digital media. Collectors can own digital originals of their favorite songs, movies, or virtually anything else you can imagine.\u003c/li\u003e\n      \u003cli\u003e\u003cb\u003eDigital sports merch\u003c/b\u003e - Trading cards, memorabilia, classic moments in sports history, and one-of-a-kind experiences can also be sold as NFTs, opening up a world of possibilities for sports leagues and teams worldwide. The NBA Top Shot website sells collectible “moments” from the league’s history, and at the time of writing, the website is completely sold out and closed for new sign-ups.\u003c/li\u003e\n      \u003cbr/\u003e\n      These endpoints wraps up standard NFT implementation and operations, which can be done with them. Endpoints are blockchain agnostic, the only differentatior is the \u003cb\u003echain\u003c/b\u003e parameter in the URL path.\u003cbr/\u003e\u003cbr/\u003e\n      Tatum now supports NFT these blockchains:\u003cbr/\u003e\n      \u003cul\u003e\n      \u003cli\u003e\u003cb\u003eEthereum\u003c/b\u003e\u003c/li\u003e\n      \u003cli\u003e\u003cb\u003ePolygon (Matic)\u003c/b\u003e\u003c/li\u003e\n      \u003cli\u003e\u003cb\u003eKcs (KCS)\u003c/b\u003e\u003c/li\u003e\n      \u003cli\u003e\u003cb\u003eCelo\u003c/b\u003e\u003c/li\u003e\n      \u003cli\u003e\u003cb\u003eHarmony.ONE\u003c/b\u003e\u003c/li\u003e\n      \u003cli\u003e\u003cb\u003eTron\u003c/b\u003e\u003c/li\u003e\n      \u003cli\u003e\u003cb\u003eFlow\u003c/b\u003e\u003c/li\u003e\n      \u003cli\u003e\u003cb\u003eBinance Smart Chain\u003c/b\u003e\u003c/li\u003e\n      \u003cli\u003e\u003cb\u003eAlgorand\u003c/b\u003e\u003c/li\u003e\n      \u003c/ul\u003e\n      \u003c/p\u003e\n    name: Blockchain / NFT\npaths:\n  /v3/nft/deploy:\n    post:\n      description: |\n        \u003ch4\u003e100 credits per API call on FLOW, 2 credits on another chains. Tatum covers the fee connected to the transaction costs in subscription credits for FLOW. This operation can be done on mainnet only for paid plans.\u003c/h4\u003e\u003cbr/\u003e\n        \u003cp\u003eDeploy NFT Smart Contract. This method creates new ERC721 Smart Contract (Non-Fungible Tokens) on the blockchain. Smart contract is standardized and audited.\n        It is possible to mint, burn and transfer tokens. It is also possible to mint multiple tokens at once.\u003cbr/\u003e\n        Tatum now supports NFT these blockchains:\u003cbr/\u003e\n        \u003cul\u003e\n        \u003cli\u003e\u003cb\u003eEthereum\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003ePolygon (Matic)\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eKcs (KCS)\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eCelo\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eHarmony.ONE\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eFlow\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eTron\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eBinance Smart Chain\u003c/b\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n        It is possible to see the code of the deployed contract \u003ca href=\"https://github.com/tatumio/smart-contracts/tree/master/contracts/tatum\" target=\"_blank\"\u003efor EVM chains here\u003c/a\u003e\n         or here \u003ca href=\"https://github.com/tatumio/flow-contracts\" target=\"_blank\"\u003efor Flow\u003c/a\u003e.\u003cbr/\u003e\u003cbr/\u003e\n        This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key.\n        No one should ever send it's own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey\n        or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production,\n        \u003ca href=\"https://github.com/tatumio/tatum-kms\" target=\"_blank\"\u003eTatum KMS\u003c/a\u003e should be used for the highest security standards, and signatureId should be present in the request.\n        Alternatively, using the Tatum client library for supported languages.\n        \u003c/p\u003e\n      operationId: NftDeployErc721\n      parameters:\n        - description: \"Type of Ethereum testnet. Defaults to ropsten. Valid only for ETH invocations.\"\n          in: header\n          name: x-testnet-type\n          required: false\n          schema:\n            default: ethereum-ropsten\n            type: string\n            enum:\n              - ethereum-ropsten\n              - ethereum-rinkeby\n      requestBody:\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: \"#/components/schemas/DeployNftCelo\"\n                - $ref: \"#/components/schemas/DeployNftCeloKMS\"\n                - $ref: \"#/components/schemas/DeployNftTron\"\n                - $ref: \"#/components/schemas/DeployNftTronKMS\"\n                - $ref: \"#/components/schemas/DeployNft\"\n                - $ref: \"#/components/schemas/DeployNftKMS\"\n                - $ref: \"#/components/schemas/DeployNftFlowPK\"\n                - $ref: \"#/components/schemas/DeployNftFlowMnemonic\"\n                - $ref: \"#/components/schemas/DeployNftFlowKMS\"\n        required: true\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/TransactionHashKMS\"\n                  - $ref: \"#/components/schemas/SignatureId\"\n          description: OK\n        400: \u0026API400\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error400\"\n          description: Bad Request. Validation failed for the given object in the HTTP Body or Request parameters.\n        401: \u0026API401\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/Error401NotActive\"\n                  - $ref: \"#/components/schemas/Error401Invalid\"\n          description: Unauthorized. Not valid or inactive subscription key present in the HTTP Header.\n        403: \u0026API403\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/Error403\"\n        500: \u0026API500\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error500\"\n          description: Internal server error. There was an error on the server during the processing of the request.\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Deploy NFT Smart Contract.\n      tags:\n        - Blockchain / NFT\n  /v3/nft/mint:\n    post:\n      description: |\n        \u003ch4\u003e100 credits per API call on FLOW, 2 credits on another chains. Tatum covers the fee connected to the transaction costs in subscription credits for FLOW. This operation can be done on mainnet only for paid plans.\u003c/h4\u003e\u003cbr/\u003e\n        \u003cp\u003eCreate one NFT Token and transfer it to destination account. Create and transfer any NFT token from smart contract defined in contractAddress.\n        It is possible to add URL to the created token with a more detailed information about it.\u003cbr/\u003e\u003cbr/\u003e\n        Tatum now supports NFT these blockchains:\u003cbr/\u003e\n        \u003cul\u003e\n        \u003cli\u003e\u003cb\u003eEthereum\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003ePolygon (Matic)\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eKcs (KCS)\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eCelo\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eSolana\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eHarmony.ONE\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eTron\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eFlow\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eBinance Smart Chain\u003c/b\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n        \u003cbr/\u003e\n        For Solana, NFTs are not deployed, only minted right away. Newly created NFT creates new address on the blockchain and owner of the NFT owns with it's private key the account of the NFT.\n        \u003cbr/\u003e\n        This operation works in two modes.\n\n        First mode works just like other NFT endpoints. Every time the funds are transferred, the transaction must be signed with the corresponding private key.\n        No one should ever send it's own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey\n        or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production,\n        \u003ca href=\"https://github.com/tatumio/tatum-kms\" target=\"_blank\"\u003eTatum KMS\u003c/a\u003e should be used for the highest security standards, and signatureId should be present in the request.\n        Alternatively, using the Tatum client library for supported languages.\n\n        Second mode works without private key or signature id.\n        Mint NFT requests use built-in smart contract, private key and token id which are provided by Tatum.\n        You dont need to provide fromPrivateKey (or signatureId), contractAddress and tokenId fields to perform the mint NFT request.\n\n        Performed request without fromPrivateKey or signatureId fields will be populated with following attributes:\n\n        \u003cul\u003e\n          \u003cli\u003e\u003cb\u003efromPrivateKey\u003c/b\u003e - a built-in private key connected to the address from which will be NFT transaction fees paid.\u003c/li\u003e\n          \u003cli\u003e\u003cb\u003etokenId\u003c/b\u003e - a counter which starts from 0 and is increased for each NFT mint request by 1. The tokenId is provided per each chain and mainnet/testnet version of network.\u003c/li\u003e\n          \u003cli\u003e\u003cb\u003econtractAddress\u003c/b\u003e - represents Tatum built in smart contract address of the minted NFT.\u003c/li\u003e\n        \u003c/ul\u003e\n\n        The blockchain fee of the performed transaction is paid from the address connected with built-in private key and is debitted in form of credits. The credits are debitted only if NFT mint requests are performed with paid API key plan.\n        We transform fee to the credits in accordance to the rates provided by the Tatum.\n\n        It means if you perform mint NFT request with following body:\n\n        \u003cpre\u003e{\n          \"chain\": \"CELO\",\n          \"to\": \"0xBC2eBA680EE50d685cc4Fe65f102AA70AfB27D3F\",\n          \"url\": \"ipfs://QmXJJ6UF5WkF4WTJvsdhiA1etGwBLfpva7Vr9AudGMe3pj\"\n        }\u003c/pre\u003e\n\n        The fields contractAddress, fromPrivateKey and tokenId will be internally filled in following way:\n\n        \u003cpre\u003e{\n          \"chain\": \"CELO\",\n          \"to\": \"0xBC2eBA680EE50d685cc4Fe65f102AA70AfB27D3F\",\n          \"url\": \"ipfs://QmXJJ6UF5WkF4WTJvsdhiA1etGwBLfpva7Vr9AudGMe3pj\",\n          \"fromPrivateKey\": \"{tatumBuiltInPrivateKey}\",\n          \"tokenId\": \"{tatumBuiltInTokenId + 1}\",\n          \"contractAddress\": \"0x45871ED5F15203C0ce791eFE5f4B5044833aE10e\"\n        }\u003c/pre\u003e\n\n        Keep in mind that your credit amount will be debitted accordingly to the rate of the selected blockchain and cost of transaction fees.\n\n\n        We have prepared following smart contracts for minting without private key:\n        \u003ctable\u003e\n          \u003ctr\u003e\n            \u003cth\u003eChain\u003c/th\u003e\n            \u003cth\u003eTestnet/Mainnet\u003c/th\u003e\n            \u003cth\u003eAddress\u003c/th\u003e\n            \u003cth\u003eSmart contract address\u003c/th\u003e\n          \u003c/tr\u003e\n          \u003ctr\u003e\n            \u003ctd\u003eMATIC\u003c/td\u003e\n            \u003ctd\u003eTestnet\u003c/td\u003e\n            \u003ctd\u003e0x542b9ac4945a3836fd12ad98acbc76a0c8b743f5\u003c/td\u003e\n            \u003ctd\u003e0xCd2AdA00c48A27FAa5Cc67F9A1ed55B89dDf7F77\u003c/td\u003e\n          \u003c/tr\u003e\n          \u003ctr\u003e\n            \u003ctd\u003eBSC\u003c/td\u003e\n            \u003ctd\u003eTestnet\u003c/td\u003e\n            \u003ctd\u003e0xc16ae5e8c985b906935a0cadf4e24f0400531883\u003c/td\u003e\n            \u003ctd\u003e0xF73075aa67561791352fbEe8278115487Fd90ab6\u003c/td\u003e\n          \u003c/tr\u003e\n          \u003ctr\u003e\n            \u003ctd\u003eONE\u003c/td\u003e\n            \u003ctd\u003eTestnet\u003c/td\u003e\n            \u003ctd\u003e0x8906f62d40293ddca77fdf6714c3f63265deddf0\u003c/td\u003e\n            \u003ctd\u003e0x427ddbe3ad5e1e77e010c02e61e9bdef82dcaeea\u003c/td\u003e\n          \u003c/tr\u003e\n          \u003ctr\u003e\n            \u003ctd\u003eETH\u003c/td\u003e\n            \u003ctd\u003eTestnet\u003c/td\u003e\n            \u003ctd\u003e0x51abC4c9e7BFfaA99bBE4dDC33d75067EBD0384F\u003c/td\u003e\n            \u003ctd\u003e0xAe7D8842D0295B1f24a8842cBd5eB83Ae2fd0946\u003c/td\u003e\n          \u003c/tr\u003e\n          \u003ctr\u003e\n            \u003ctd\u003eCELO\u003c/td\u003e\n            \u003ctd\u003eTestnet\u003c/td\u003e\n            \u003ctd\u003e0xBC2eBA680EE50d685cc4Fe65f102AA70AfB27D3F\u003c/td\u003e\n            \u003ctd\u003e0x45871ED5F15203C0ce791eFE5f4B5044833aE10e\u003c/td\u003e\n          \u003c/tr\u003e\n          \u003ctr\u003e\n            \u003ctd\u003eMATIC\u003c/td\u003e\n            \u003ctd\u003eMainnet\u003c/td\u003e\n            \u003ctd\u003e0xcf9e127455d28e7362380aec1b92ddee8200b295\u003c/td\u003e\n            \u003ctd\u003e0x6709bdda623af7eb152cb2fe2562ab7e031e564f\u003c/td\u003e\n          \u003c/tr\u003e\n          \u003ctr\u003e\n            \u003ctd\u003eKCS\u003c/td\u003e\n            \u003ctd\u003eMainnet\u003c/td\u003e\n            \u003ctd\u003e0xcf9e127455d28e7362380aec1b92ddee8200b295\u003c/td\u003e\n            \u003ctd\u003e0x6709bdda623af7eb152cb2fe2562ab7e031e564f\u003c/td\u003e\n          \u003c/tr\u003e\n          \u003ctr\u003e\n            \u003ctd\u003eBSC\u003c/td\u003e\n            \u003ctd\u003eMainnet\u003c/td\u003e\n            \u003ctd\u003e0xcf9e127455d28e7362380aec1b92ddee8200b295\u003c/td\u003e\n            \u003ctd\u003e0x6709bdda623af7eb152cb2fe2562ab7e031e564f\u003c/td\u003e\n          \u003c/tr\u003e\n          \u003ctr\u003e\n            \u003ctd\u003eETH\u003c/td\u003e\n            \u003ctd\u003eMainnet\u003c/td\u003e\n            \u003ctd\u003e0xcf9e127455d28e7362380aec1b92ddee8200b295\u003c/td\u003e\n            \u003ctd\u003e0x789c00ed7ddd72a806dbac40df926df32fde3c2f\u003c/td\u003e\n          \u003c/tr\u003e\n          \u003ctr\u003e\n            \u003ctd\u003eONE\u003c/td\u003e\n            \u003ctd\u003eMainnet\u003c/td\u003e\n            \u003ctd\u003e0xcf9e127455d28e7362380aec1b92ddee8200b295\u003c/td\u003e\n            \u003ctd\u003e0x6709bdda623af7eb152cb2fe2562ab7e031e564f\u003c/td\u003e\n          \u003c/tr\u003e\n          \u003ctr\u003e\n            \u003ctd\u003eCELO\u003c/td\u003e\n            \u003ctd\u003eMainnet\u003c/td\u003e\n            \u003ctd\u003e0xcf9e127455d28e7362380aec1b92ddee8200b295\u003c/td\u003e\n            \u003ctd\u003e0x6709bdda623af7eb152cb2fe2562ab7e031e564f\u003c/td\u003e\n          \u003c/tr\u003e\n\n        \u003c/table\u003e\n        To add ETH mainnet smart contract contact sales@tatum.io.\n        If there will be a low amount of coins on any testnet address you are free to send coins to the address. In future we will provide also addresses and smart contracts for the mainnet version.        \u003c/p\u003e\n      operationId: NftMintErc721\n      parameters:\n        - description: \"Type of Ethereum testnet. Defaults to ropsten. Valid only for ETH invocations.\"\n          in: header\n          name: x-testnet-type\n          required: false\n          schema:\n            default: ethereum-ropsten\n            type: string\n            enum:\n              - ethereum-ropsten\n              - ethereum-rinkeby\n      requestBody:\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: \"#/components/schemas/MintNftCelo\"\n                - $ref: \"#/components/schemas/MintNftKMSCelo\"\n                - $ref: \"#/components/schemas/MintNftTron\"\n                - $ref: \"#/components/schemas/MintNftKMSTron\"\n                - $ref: \"#/components/schemas/MintNft\"\n                - $ref: \"#/components/schemas/MintNftKMS\"\n                - $ref: \"#/components/schemas/MintNftSolana\"\n                - $ref: \"#/components/schemas/MintNftSolanaKMS\"\n                - $ref: \"#/components/schemas/MintNftFlowPK\"\n                - $ref: \"#/components/schemas/MintNftFlowMnemonic\"\n                - $ref: \"#/components/schemas/MintNftFlowKMS\"\n        required: true\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/TransactionHashKMS\"\n                  - $ref: \"#/components/schemas/FlowMintedResult\"\n                  - $ref: \"#/components/schemas/SolanaMintedResult\"\n                  - $ref: \"#/components/schemas/SignatureId\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/Error403Celo\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Mint NFT\n      tags:\n        - Blockchain / NFT\n  /v3/nft/transaction:\n    post:\n      description: |\n        \u003ch4\u003e100 credits per API call on FLOW, 2 credits on another chains. Tatum covers the fee connected to the transaction costs in subscription credits for FLOW. This operation can be done on mainnet only for paid plans.\u003c/h4\u003e\u003cbr/\u003e\n        \u003cp\u003eTransfer NFT Tokens from account to account. Transfer any NFT token from smart contract defined in contractAddress.\n        Only 1 specific token with specified tokenId can be transfered. This method invokes ERC721 method safeTransfer() to transfer the token in case of ETH, Celo and BSC.\u003cbr/\u003e\u003cbr/\u003e\n        Tatum now supports NFT these blockchains:\u003cbr/\u003e\n        \u003cul\u003e\n        \u003cli\u003e\u003cb\u003eEthereum\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003ePolygon (Matic)\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eKcs (KCS)\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eFlow\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eCelo\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eHarmony.ONE\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eTron\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eBinance Smart Chain\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eAlgorand\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eSolana\u003c/b\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n        This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key.\n        No one should ever send it's own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey\n        or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production,\n        \u003ca href=\"https://github.com/tatumio/tatum-kms\" target=\"_blank\"\u003eTatum KMS\u003c/a\u003e should be used for the highest security standards, and signatureId should be present in the request.\n        Alternatively, using the Tatum client library for supported languages.\n        Algorand is unique a way that the receiving account should be ready before sending the NFT asset.\n        To perform this, the receiving account should transfer the NFT asset with 0 amount to itself.\n        During the process, it's using the same API as the main transaction: the only difference is that the \"fromPrivateKey\" should be the privateKey of the receiving account.\n        \u003c/p\u003e\n      operationId: NftTransferErc721\n      parameters:\n        - description: \"Type of Ethereum testnet. Defaults to ropsten. Valid only for ETH invocations.\"\n          in: header\n          name: x-testnet-type\n          required: false\n          schema:\n            default: ethereum-ropsten\n            type: string\n            enum:\n              - ethereum-ropsten\n              - ethereum-rinkeby\n      requestBody:\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: \"#/components/schemas/TransferNft\"\n                - $ref: \"#/components/schemas/TransferNftCelo\"\n                - $ref: \"#/components/schemas/TransferNftTron\"\n                - $ref: \"#/components/schemas/TransferNftSolana\"\n                - $ref: \"#/components/schemas/TransferNftFlowPK\"\n                - $ref: \"#/components/schemas/TransferNftFlowMnemonic\"\n                - $ref: \"#/components/schemas/TransferNftKMS\"\n                - $ref: \"#/components/schemas/TransferNftKMSCelo\"\n                - $ref: \"#/components/schemas/TransferNftKMSTron\"\n                - $ref: \"#/components/schemas/TransferNftSolanaKMS\"\n                - $ref: \"#/components/schemas/TransferNftFlowKMS\"\n        required: true\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/TransactionHashKMS\"\n                  - $ref: \"#/components/schemas/SignatureId\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/Error403Celo\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Transfer NFT Token\n      tags:\n        - Blockchain / NFT\n  /v3/nft/mint/batch:\n    post:\n      description: |\n        \u003ch4\u003e100 credits per API call on FLOW, 2 credits on another chains. Tatum covers the fee connected to the transaction costs in subscription credits for FLOW. This operation can be done on mainnet only for paid plans.\u003c/h4\u003e\u003cbr/\u003e\n        \u003cp\u003eCreate multiple NFT Tokens and transfer them to destination account. Create and transfer any NFT tokens from smart contract defined in contractAddress.\u003cbr/\u003e\u003cbr/\u003e\n        Tatum now supports NFT these blockchains:\u003cbr/\u003e\n        \u003cul\u003e\n        \u003cli\u003e\u003cb\u003eEthereum\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003ePolygon (Matic)\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eKcs (KCS)\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eCelo\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eHarmony.ONE\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eTron\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eFlow\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eBinance Smart Chain\u003c/b\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n        This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key.\n        No one should ever send it's own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey\n        or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production,\n        \u003ca href=\"https://github.com/tatumio/tatum-kms\" target=\"_blank\"\u003eTatum KMS\u003c/a\u003e should be used for the highest security standards, and signatureId should be present in the request.\n        Alternatively, using the Tatum client library for supported languages.\n        \u003c/p\u003e\n      operationId: NftMintMultipleErc721\n      parameters:\n        - description: \"Type of Ethereum testnet. Defaults to ropsten. Valid only for ETH invocations.\"\n          in: header\n          name: x-testnet-type\n          required: false\n          schema:\n            default: ethereum-ropsten\n            type: string\n            enum:\n              - ethereum-ropsten\n              - ethereum-rinkeby\n      requestBody:\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: \"#/components/schemas/MintMultipleNftCelo\"\n                - $ref: \"#/components/schemas/MintMultipleNftKMSCelo\"\n                - $ref: \"#/components/schemas/MintMultipleNftTron\"\n                - $ref: \"#/components/schemas/MintMultipleNftKMSTron\"\n                - $ref: \"#/components/schemas/MintMultipleNft\"\n                - $ref: \"#/components/schemas/MintMultipleNftKMS\"\n                - $ref: \"#/components/schemas/MintMultipleNftFlowPK\"\n                - $ref: \"#/components/schemas/MintMultipleNftFlowMnemonic\"\n                - $ref: \"#/components/schemas/MintMultipleNftFlowKMS\"\n        required: true\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/TransactionHashKMS\"\n                  - $ref: \"#/components/schemas/FlowMintedMultipleResult\"\n                  - $ref: \"#/components/schemas/SignatureId\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/Error403Celo\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Mint NFT Multiple Tokens\n      tags:\n        - Blockchain / NFT\n  /v3/nft/burn:\n    post:\n      description: |\n        \u003ch4\u003e100 credits per API call on FLOW, 2 credits on another chains. Tatum covers the fee connected to the transaction costs in subscription credits for FLOW. This operation can be done on mainnet only for paid plans.\u003c/h4\u003e\u003cbr/\u003e\n        \u003cp\u003eBurn one NFT Token. This method destroys any NFT token from smart contract defined in contractAddress.\u003cbr/\u003e\u003cbr/\u003e\n        Tatum now supports NFT these blockchains:\u003cbr/\u003e\n        \u003cul\u003e\n        \u003cli\u003e\u003cb\u003eEthereum\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003ePolygon (Matic)\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eKcs (KCS)\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eCelo\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eHarmony.ONE\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eTron\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eFlow\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eBinance Smart Chain\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eAlgorand\u003c/b\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n        This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key.\n        No one should ever send it's own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey\n        or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production,\n        \u003ca href=\"https://github.com/tatumio/tatum-kms\" target=\"_blank\"\u003eTatum KMS\u003c/a\u003e should be used for the highest security standards, and signatureId should be present in the request.\n        Alternatively, using the Tatum client library for supported languages.\n        \u003c/p\u003e\n      operationId: NftBurnErc721\n      parameters:\n        - description: \"Type of Ethereum testnet. Defaults to ropsten. Valid only for ETH invocations.\"\n          in: header\n          name: x-testnet-type\n          required: false\n          schema:\n            default: ethereum-ropsten\n            type: string\n            enum:\n              - ethereum-ropsten\n              - ethereum-rinkeby\n      requestBody:\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: \"#/components/schemas/BurnNftCelo\"\n                - $ref: \"#/components/schemas/BurnNftKMSCelo\"\n                - $ref: \"#/components/schemas/BurnNftTron\"\n                - $ref: \"#/components/schemas/BurnNftKMSTron\"\n                - $ref: \"#/components/schemas/BurnNft\"\n                - $ref: \"#/components/schemas/BurnNftKMS\"\n                - $ref: \"#/components/schemas/BurnNftFlowPK\"\n                - $ref: \"#/components/schemas/BurnNftFlowMnemonic\"\n                - $ref: \"#/components/schemas/BurnNftFlowKMS\"\n        required: true\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/TransactionHashKMS\"\n                  - $ref: \"#/components/schemas/SignatureId\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/Error403Celo\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Burn NFT\n      tags:\n        - Blockchain / NFT\n  /v3/nft/mint/add:\n    post:\n      description: |\n        \u003ch4\u003e2 credits.\u003c/h4\u003e\u003cbr/\u003e\n        \u003cp\u003eAdd new minter of NFT Tokens. This method adds minter permission to new minter address.\u003cbr/\u003e\u003cbr/\u003e\n        Tatum now supports NFT these blockchains:\u003cbr/\u003e\n        \u003cul\u003e\n        \u003cli\u003e\u003cb\u003eEthereum\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003ePolygon (Matic)\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eKcs (KCS)\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eCelo\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eHarmony.ONE\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eBinance Smart Chain\u003c/b\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n        This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key.\n        No one should ever send it's own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey\n        or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production,\n        \u003ca href=\"https://github.com/tatumio/tatum-kms\" target=\"_blank\"\u003eTatum KMS\u003c/a\u003e should be used for the highest security standards, and signatureId should be present in the request.\n        Alternatively, using the Tatum client library for supported languages.\n        \u003c/p\u003e\n      operationId: NftAddMinter\n      parameters:\n        - description: \"Type of Ethereum testnet. Defaults to ropsten. Valid only for ETH invocations.\"\n          in: header\n          name: x-testnet-type\n          required: false\n          schema:\n            default: ethereum-ropsten\n            type: string\n            enum:\n              - ethereum-ropsten\n              - ethereum-rinkeby\n      requestBody:\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: \"#/components/schemas/AddNftMinter\"\n                - $ref: \"#/components/schemas/AddNftMinterKMS\"\n        required: true\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/TransactionHashKMS\"\n                  - $ref: \"#/components/schemas/SignatureId\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/Error403Celo\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Add NFT Minter\n      tags:\n        - Blockchain / NFT\n  /v3/nft/royalty:\n    put:\n      description: |\n        \u003ch4\u003e2 credits per API call.\u003c/h4\u003e\u003cbr/\u003e\n        \u003cp\u003eUpdate royalty cashback value for one NFT Token. This method updates the first royalty value of specific author for 1 token.\n        If royalty value is set to 0, it will disable the royalty system for the token. Only from author's address of the royalty can change it's royalty value, not the owner of the token.\u003cbr/\u003e\u003cbr/\u003e\n        Tatum now supports NFT these blockchains:\u003cbr/\u003e\n        \u003cul\u003e\n        \u003cli\u003e\u003cb\u003eEthereum\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003ePolygon (Matic)\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eKcs (KCS)\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eCelo\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eHarmony.ONE\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eTron\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eBinance Smart Chain\u003c/b\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n        This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key.\n        No one should ever send it's own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey\n        or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production,\n        \u003ca href=\"https://github.com/tatumio/tatum-kms\" target=\"_blank\"\u003eTatum KMS\u003c/a\u003e should be used for the highest security standards, and signatureId should be present in the request.\n        Alternatively, using the Tatum client library for supported languages.\n        \u003c/p\u003e\n      operationId: NftUpdateCashbackErc721\n      parameters:\n        - description: \"Type of Ethereum testnet. Defaults to ropsten. Valid only for ETH invocations.\"\n          in: header\n          name: x-testnet-type\n          required: false\n          schema:\n            default: ethereum-ropsten\n            type: string\n            enum:\n              - ethereum-ropsten\n              - ethereum-rinkeby\n      requestBody:\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: \"#/components/schemas/UpdateCashbackValueForAuthorNftCelo\"\n                - $ref: \"#/components/schemas/UpdateCashbackValueForAuthorNftKMSCelo\"\n                - $ref: \"#/components/schemas/UpdateCashbackValueForAuthorNftTron\"\n                - $ref: \"#/components/schemas/UpdateCashbackValueForAuthorNftKMSTron\"\n                - $ref: \"#/components/schemas/UpdateCashbackValueForAuthorNft\"\n                - $ref: \"#/components/schemas/UpdateCashbackValueForAuthorNftKMS\"\n        required: true\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/TransactionHashKMS\"\n                  - $ref: \"#/components/schemas/SignatureId\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/Error403Celo\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Update Royalty NFT\n      tags:\n        - Blockchain / NFT\n  /v3/nft/transaction/{chain}/{address}/{tokenAddress}:\n    get:\n      description: \"\u003ch4\u003e1 credit per API call.\u003c/h4\u003e\u003cbr/\u003e\u003cp\u003eGet NFT transactions by address. This includes incoming and outgoing transactions for the address.\u003c/p\u003e\"\n      operationId: NftGetTransactionByAddress\n      parameters:\n        - description: \"Blockchain to work with\"\n          in: path\n          name: chain\n          required: true\n          schema:\n            type: string\n            enum:\n              - CELO\n              - ETH\n              - MATIC\n            example: CELO\n        - description: \"Account address\"\n          in: path\n          name: address\n          required: true\n          schema:\n            type: string\n            example: \"0x8ce4e40889a13971681391aad29e88efaf91f784\"\n        - description: \"Token address\"\n          in: path\n          name: tokenAddress\n          required: true\n          schema:\n            type: string\n            example: \"0x1ce4e40889a13971681391aad29e88efaf91f784\"\n        - description: Max number of items per page is 50.\n          in: query\n          name: pageSize\n          schema:\n            type: number\n            example: 10\n            maximum: 50\n            minimum: 1\n          required: true\n        - description: Offset to obtain next page of the data.\n          in: query\n          name: offset\n          schema:\n            type: number\n            example: 0\n        - description: Transactions from this block onwords will be included.\n          in: query\n          name: from\n          schema:\n            type: number\n            minimum: 0\n            example: 1087623\n        - description: Transactions up to this block will be included.\n          in: query\n          name: to\n          schema:\n            type: number\n            minimum: 0\n            example: 1087823\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  oneOf:\n                    - $ref: \"#/components/schemas/NftTx\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Get NFT transactions by address\n      tags:\n        - Blockchain / NFT\n  /v3/nft/transaction/tokenId/{chain}/{tokenAddress}/{tokenId}:\n    get:\n      description: \"\u003ch4\u003e1 credit per API call.\u003c/h4\u003e\u003cbr/\u003e\u003cp\u003eGet NFT transactions by token. This includes incoming and outgoing transactions for the token.\u003c/p\u003e\"\n      operationId: NftGetTransactionByToken\n      parameters:\n        - description: \"Blockchain to work with\"\n          in: path\n          name: chain\n          required: true\n          schema:\n            type: string\n            enum:\n              - CELO\n              - ETH\n              - MATIC\n            example: CELO\n        - description: \"NFT Token ID\"\n          in: path\n          name: tokenId\n          required: true\n          schema:\n            type: integer\n            minimum: 0\n            example: 1\n        - description: \"Token address\"\n          in: path\n          name: tokenAddress\n          required: true\n          schema:\n            type: string\n            example: \"0x1ce4e40889a13971681391aad29e88efaf91f784\"\n        - description: Max number of items per page is 50.\n          in: query\n          name: pageSize\n          schema:\n            type: number\n            example: 10\n            maximum: 50\n            minimum: 1\n          required: true\n        - description: Offset to obtain next page of the data.\n          in: query\n          name: offset\n          schema:\n            type: number\n            example: 0\n        - description: Transactions from this block onwords will be included.\n          in: query\n          name: from\n          schema:\n            type: number\n            minimum: 0\n            example: 1087623\n        - description: Transactions up to this block will be included.\n          in: query\n          name: to\n          schema:\n            type: number\n            minimum: 0\n            example: 1087823\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  oneOf:\n                    - $ref: \"#/components/schemas/NftTx\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Get NFT transactions by token\n      tags:\n        - Blockchain / NFT\n  /v3/nft/address/{chain}/{hash}:\n    get:\n      description: |\n        \u003ch4\u003e1 credit per API call.\u003c/h4\u003e\u003cbr/\u003e\n        \u003cp\u003eGet NFT contract address from deploy transaction. This method is deprecated, use \u003ca href=\"#operation/SCGetContractAddress\"\u003eGet contract address\u003c/a\u003e instead.\u003c/p\u003e\n      deprecated: true\n      operationId: NftGetContractAddress\n      parameters:\n        - description: Blockchain to work with\n          in: path\n          name: chain\n          required: true\n          schema:\n            type: string\n            enum:\n              - ETH\n              - ONE\n              - CELO\n              - TRON\n              - FLOW\n              - MATIC\n              - KCS\n              - BSC\n        - description: \"Transaction hash\"\n          in: path\n          name: hash\n          required: true\n          schema:\n            type: string\n            example: \"0xe6e7340394958674cdf8606936d292f565e4ecc476aaa8b258ec8a141f7c75d7\"\n        - description: \"Type of Ethereum testnet. Defaults to ropsten. Valid only for ETH invocations.\"\n          in: header\n          name: x-testnet-type\n          required: false\n          schema:\n            default: ethereum-ropsten\n            type: string\n            enum:\n              - ethereum-ropsten\n              - ethereum-rinkeby\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  contractAddress:\n                    type: string\n                    description: Address of the NFT token.\n                    example: \"0xc21C81ef03f98898Fb155E00C364e8a7b9D158b8\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/Error403TxNotFound\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Get contract address from transaction\n      tags:\n        - Blockchain / NFT\n  /v3/nft/transaction/{chain}/{hash}:\n    get:\n      description: \"\u003ch4\u003e1 credit per API call.\u003c/h4\u003e\u003cbr/\u003e\u003cp\u003eGet NFT transaction by transaction hash.\u003c/p\u003e\"\n      operationId: NftGetTransactErc721\n      parameters:\n        - description: Blockchain to work with\n          in: path\n          name: chain\n          required: true\n          schema:\n            type: string\n            enum:\n              - ETH\n              - MATIC\n              - KCS\n              - ONE\n              - CELO\n              - TRON\n              - FLOW\n              - BSC\n        - description: \"Transaction hash\"\n          in: path\n          name: hash\n          required: true\n          schema:\n            type: string\n            example: \"0xe6e7340394958674cdf8606936d292f565e4ecc476aaa8b258ec8a141f7c75d7\"\n        - description: \"Type of Ethereum testnet. Defaults to ropsten. Valid only for ETH invocations.\"\n          in: header\n          name: x-testnet-type\n          required: false\n          schema:\n            default: ethereum-ropsten\n            type: string\n            enum:\n              - ethereum-ropsten\n              - ethereum-rinkeby\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/CeloTx\"\n                  - $ref: \"#/components/schemas/EthTx\"\n                  - $ref: \"#/components/schemas/FlowTx\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/Error403TxNotFound\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Get Transaction\n      tags:\n        - Blockchain / NFT\n  /v3/nft/address/balance/{chain}/{address}:\n    get:\n      description: |\n        \u003ch4\u003e1 credit per API call + 5 credits for each owned token.\u003c/h4\u003e\u003cbr/\u003e\u003cp\u003eGet NFTs on address. Returns all NFTs this address holds.\u003c/p\u003e\n      operationId: NftGetTokensByAddressErc721\n      parameters:\n        - description: Blockchain to work with\n          in: path\n          name: chain\n          required: true\n          schema:\n            type: string\n            example: ETH\n            enum:\n              - ALGO\n              - CELO\n              - MATIC\n              - ETH\n        - description: \"Account address\"\n          in: path\n          name: address\n          required: true\n          schema:\n            type: string\n            example: \"NTAESFCB3WOD7SAOL42KSPVARLB3JFA3MNX3AESWHYVT2RMYDVZI6YLG4Y\"\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  required:\n                    - contractAddress\n                    - balances\n                  properties:\n                    contractAddress:\n                      type: string\n                      example: \"43821281\"\n                      description: Contract address of the NFT. In Algorand case, it will be asset-id..\n                    balances:\n                      type: array\n                      items:\n                        type: string\n                        description: Amount of tokens available. It is always 1 or 0 for NFTs on Algorand, tokenId for EVM based chains like CELO or MATIC.\n                        example: \"1\"\n                    metadata:\n                      type: array\n                      items:\n                        type: object\n                        required:\n                          - tokenID\n                        properties:\n                          tokenId:\n                            description: TokenID of the NFT token owned by this address.\n                            example: \"1\"\n                            type: string\n                          url:\n                            description: Metadata URL of the TokenID. This data don't have to be present, safest way (if not present) is to obtain them from the NFT Contract.tokenURI() method call.\n                            example: \"ipfs://QmXFpaS3S7CkLZvihLFA9JbawKdqhjg8dJeDkPntmkD2Pc\"\n                            type: string\n                          metadata:\n                            type: object\n                            description: Metadata scheme obtained from the url. This data don't have to be present, safest way (if not present) is to obtain them from the NFT Contract.tokenURI() method call.\n                            example: {\"name\": \"Example NFT name\",\n                                      \"description\": \"Example NFT description\",\n                                      \"image\": \"ipfs://QmP4R7ACZ7JRQ6sLdmnPHqjWEXxzdnPvhAV2f6RnQ8uxJ6\"}\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error403\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Get NFT tokens for address\n      tags:\n        - Blockchain / NFT\n  /v3/nft/balance/{chain}/{contractAddress}/{address}:\n    get:\n      description: |\n        \u003ch4\u003e1 credit per API call.\u003c/h4\u003e\u003cbr/\u003e\u003cp\u003eGet NFTs on Account. Returns tokenIDs of tokens Account holds. This method is valid only for tokens deplyed using Tatum API - it reads data from the smart contract.\u003c/p\u003e\n      operationId: NftGetBalanceErc721\n      parameters:\n        - description: Blockchain to work with\n          in: path\n          name: chain\n          required: true\n          schema:\n            type: string\n            enum:\n              - ETH\n              - MATIC\n              - KCS\n              - ONE\n              - CELO\n              - TRON\n              - FLOW\n              - BSC\n        - description: \"Account address\"\n          in: path\n          name: address\n          required: true\n          schema:\n            type: string\n            example: \"0x3223AEB8404C7525FcAA6C512f91e287AE9FfE7B\"\n        - description: \"NFT contract address\"\n          in: path\n          name: contractAddress\n          required: true\n          schema:\n            type: string\n            example: \"0x94Ce79B9F001E25BBEbE7C01998A78F7B27D1326\"\n        - description: \"Type of Ethereum testnet. Defaults to ropsten. Valid only for ETH invocations.\"\n          in: header\n          name: x-testnet-type\n          required: false\n          schema:\n            default: ethereum-ropsten\n            type: string\n            enum:\n              - ethereum-ropsten\n              - ethereum-rinkeby\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n                  description: Token ID.\n                  example: \"10\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error403Celo\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Get NFT Account balance\n      tags:\n        - Blockchain / NFT\n  /v3/nft/provenance/{chain}/{contractAddress}/{tokenId}:\n    get:\n      description: \"\u003ch4\u003e1 credit per API call.\u003c/h4\u003e\u003cbr/\u003e\u003cp\u003eGet NFT token provenance data, valid only for provenance contract.\u003c/p\u003e\"\n      operationId: NftGetProvenanceDataErc721\n      parameters:\n        - description: Blockchain to work with\n          in: path\n          name: chain\n          required: true\n          schema:\n            type: string\n            enum:\n              - ETH\n              - MATIC\n              - KCS\n              - ONE\n              - CELO\n              - BSC\n        - description: \"Token ID\"\n          in: path\n          name: tokenId\n          required: true\n          schema:\n            type: string\n            example: \"1\"\n            maxLength: 32\n        - description: \"NFT contract address\"\n          in: path\n          name: contractAddress\n          required: true\n          schema:\n            type: string\n            example: \"0x94Ce79B9F001E25BBEbE7C01998A78F7B27D1326\"\n        - description: \"Type of Ethereum testnet. Defaults to ropsten. Valid only for ETH invocations.\"\n          in: header\n          name: x-testnet-type\n          required: false\n          schema:\n            default: ethereum-ropsten\n            type: string\n            enum:\n              - ethereum-ropsten\n              - ethereum-rinkeby\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    provenanceData:\n                      type: string\n                      example: \"0x94Ce79B9F001E25BBEbE7C01998A78F7B27D1326\"\n                    tokenPrice:\n                      type: string\n                      example: \"123\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error403\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Get NFT Token Provenance Data\n      tags:\n        - Blockchain / NFT\n  /v3/nft/metadata/{chain}/{contractAddress}/{token}:\n    get:\n      description: \"\u003ch4\u003e1 credit per API call.\u003c/h4\u003e\u003cbr/\u003e\u003cp\u003eGet NFT token metadata.\u003c/p\u003e\"\n      operationId: NftGetMetadataErc721\n      parameters:\n        - description: Blockchain to work with\n          in: path\n          name: chain\n          required: true\n          schema:\n            type: string\n            enum:\n              - ETH\n              - MATIC\n              - KCS\n              - SOL\n              - ONE\n              - CELO\n              - TRON\n              - FLOW\n              - BSC\n        - description: \"NFT contract address\"\n          in: path\n          name: contractAddress\n          required: true\n          schema:\n            type: string\n            example: \"0x94Ce79B9F001E25BBEbE7C01998A78F7B27D1326\"\n        - description: \"Token ID, required for all except SOL\"\n          in: path\n          name: token\n          required: true\n          schema:\n            type: string\n            example: \"1\"\n            maxLength: 32\n        - description: Account holding this token. FLOW only.\n          in: query\n          required: false\n          name: account\n          schema:\n            type: string\n            example: \"0xc1b45bc27b9c61c3\"\n        - description: \"Type of Ethereum testnet. Defaults to ropsten. Valid only for ETH invocations.\"\n          in: header\n          name: x-testnet-type\n          required: false\n          schema:\n            default: ethereum-ropsten\n            type: string\n            enum:\n              - ethereum-ropsten\n              - ethereum-rinkeby\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: string\n                    description: Metadata associated with token.\n                    example: \"https://my_token_data.com\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error403Celo\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Get NFT Token Metadata\n      tags:\n        - Blockchain / NFT\n  /v3/nft/royalty/{chain}/{contractAddress}/{token}:\n    get:\n      description: \"\u003ch4\u003e1 credit per API call.\u003c/h4\u003e\u003cbr/\u003e\u003cp\u003eGet NFT token royalty.\u003c/p\u003e\"\n      operationId: NftGetRoyaltyErc721\n      parameters:\n        - description: Blockchain to work with\n          in: path\n          name: chain\n          required: true\n          schema:\n            type: string\n            enum:\n              - ETH\n              - MATIC\n              - KCS\n              - SOL\n              - ONE\n              - CELO\n              - TRON\n              - BSC\n        - description: \"NFT contract address\"\n          in: path\n          name: contractAddress\n          required: true\n          schema:\n            type: string\n            example: \"0x94Ce79B9F001E25BBEbE7C01998A78F7B27D1326\"\n        - description: \"Token ID, required for all except SOL\"\n          in: path\n          name: token\n          required: true\n          schema:\n            type: string\n            example: \"1\"\n            maxLength: 32\n        - description: \"Type of Ethereum testnet. Defaults to ropsten. Valid only for ETH invocations.\"\n          in: header\n          name: x-testnet-type\n          required: false\n          schema:\n            default: ethereum-ropsten\n            type: string\n            enum:\n              - ethereum-ropsten\n              - ethereum-rinkeby\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  addresses:\n                    type: array\n                    description: Addresses of the authors where cashback will be paid.\n                    items:\n                      type: string\n                      example: \"0x94Ce79B9F001E25BBEbE7C01998A78F7B27D1326\"\n                  values:\n                    type: array\n                    description: |\n                      Values of the royalties, which will be paid to the authors with every token transfer.\n                      Amount is in native asset of the blockchain or in percents for SOL NFTs.\n                    items:\n                      type: string\n                      example: \"0.2\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error403Celo\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Get NFT Token Royalty information\n      tags:\n        - Blockchain / NFT\ncomponents:\n  securitySchemes:\n    X-Api-Key:\n      description: |\n        To maintain the highest security level, Tatum requires X-API-Key HTTP header.\n        This X-API-Key represents identification of the plan and can be used by 1 developer or per environment.\n        Each X-API-Key is bound to the test or production blockchains.\n      in: header\n      name: x-api-key\n      type: apiKey\n  schemas:\n    TransferNftCelo:\n      type: object\n      properties:\n        value:\n          type: string\n          description: If token to be transferred is Royalty NFT token, this is a value to be paid as a cashback to the authors of the token.\n          example: \"1\"\n        chain:\n          type: string\n          example: CELO\n          description: Chain to work with.\n          enum:\n            - CELO\n        to:\n          maxLength: 42\n          minLength: 42\n          description: Blockchain address to send NFT token to\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        tokenId:\n          description: ID of token.\n          example: \"100000\"\n          type: string\n          maxLength: 256\n        provenance:\n          description: True if the contract is provenance type\n          example: true\n          type: boolean\n        provenanceData:\n          description: data you want to store with transaction, optional and valid only if provenance contract\n          example: test\n          type: string\n        tokenPrice:\n          description: current price of the token, valid only for provenance\n          example: \"1\"\n          type: string\n          maxLength: 256\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of NFT token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        fromPrivateKey:\n          type: string\n          maxLength: 66\n          example: \"0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2\"\n          minLength: 66\n          description: Private key of sender address. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          example: 1\n          description: Nonce to be set to Celo transaction. If not present, last known nonce will be used.\n        feeCurrency:\n          type: string\n          description: Currency to pay for transaction gas\n          enum:\n            - CELO\n            - CUSD\n            - CEUR\n      required:\n        - chain\n        - to\n        - contractAddress\n        - tokenId\n        - fromPrivateKey\n    TransferNftTron:\n      type: object\n      properties:\n        value:\n          type: string\n          description: If token to be transferred is Royalty NFT token, this is a value to be paid as a cashback to the authors of the token.\n          example: \"1\"\n        chain:\n          type: string\n          example: TRON\n          description: Chain to work with.\n          enum:\n            - TRON\n        to:\n          maxLength: 34\n          minLength: 34\n          description: Blockchain address to send NFT token to\n          example: \"TCrmdJmvDUPy8qSTgoVStF51yWm6VUh5yQ\"\n          type: string\n        tokenId:\n          description: ID of token.\n          example: \"100000\"\n          type: string\n          maxLength: 256\n        contractAddress:\n          maxLength: 34\n          minLength: 34\n          description: Address of NFT token\n          example: \"TCrmdJmvDUPy8qSTgoVStF51yWm6VUh5yQ\"\n          type: string\n        fromPrivateKey:\n          type: string\n          maxLength: 64\n          example: \"842E09EB40D8175979EFB0071B28163E11AED0F14BDD84090A4CEFB936EF5701\"\n          minLength: 64\n          description: Private key of sender address. Private key, or signature Id must be present.\n        feeLimit:\n          type: number\n          description: Max limit for fee to be paid, in TRX.\n          example: 600\n      required:\n        - chain\n        - to\n        - contractAddress\n        - tokenId\n        - fromPrivateKey\n        - feeLimit\n    FlowMintedMultipleResult:\n      type: object\n      properties:\n        txId:\n          type: string\n          description: Transaction ID\n          example: \"d67787399d205139f4d6f42c2aa4fffdf6f247411fae3706e874fbba0ce04b1b\"\n        tokenId:\n          type: array\n          items:\n            type: number\n            description: ID of the minted token\n            example: 12345\n    FlowMintedResult:\n      type: object\n      properties:\n        txId:\n          type: string\n          description: Transaction ID\n          example: \"d67787399d205139f4d6f42c2aa4fffdf6f247411fae3706e874fbba0ce04b1b\"\n        tokenId:\n          type: number\n          description: ID of the minted token\n          example: 12345\n    SolanaMintedResult:\n      type: object\n      properties:\n        txId:\n          type: string\n          description: Transaction ID\n          example: \"4kiRkAWjjr5t3rBKmYQ5d2e3xjgnRRttB5GtUz2F4sz5wwC7NnV74qCZ1KN1b37qsnjkKknsJPGXdcPhzHpkiMAs\"\n        nftAddress:\n          type: string\n          description: Address of the minted NFT contract\n          example: \"4afZBmAneN2j6gDHH8zdrNWkCqfMC3XPH2cpFKtYMSVe\"\n        nftAccountAddress:\n          type: string\n          description: Address of the account owned by a mint recipient, which holds the minted NFT\n          example: \"A8BSHPJcB5ZGCT6yo6pz2RYqnypTSpzTAFSBhtTQmsEE\"\n    MintMultipleNftCelo:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: CELO\n          description: Chain to work with.\n          enum:\n            - CELO\n        to:\n          type: array\n          description: Blockchain address to send NFT token to.\n          example: [ \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\" ]\n          items:\n            maxLength: 42\n            minLength: 42\n            type: string\n        tokenId:\n          type: array\n          description: ID of token to be created.\n          example: [ \"100000\" ]\n          items:\n            type: string\n            maxLength: 32\n        url:\n          description: Metadata of the token. See https://eips.ethereum.org/EIPS/eip-721#specification for more details.\n          type: array\n          example:\n            - \"https://my_token_data.com\"\n          items:\n            type: string\n            maxLength: 256\n        authorAddresses:\n          type: array\n          description: List of addresses for every token, where royalty cashback for every transfer of this NFT will be send. Royalties are paid in native blockchain currency CELO.\n          items:\n            type: array\n            items:\n              type: string\n              minLength: 42\n              maxLength: 42\n              description: Blockchain address to send royalties to\n              example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n        cashbackValues:\n          type: array\n          description: List of values for every token, which will be paid as a royalty for author of the NFT token with every token transfer. This is exact value in native blockhain currency.\n          items:\n            type: array\n            items:\n              type: string\n              description: Value of the royalty to be paid.\n              example: \"0.5\"\n        contractAddress:\n          maxLength: 36\n          minLength: 36\n          description: Address of NFT token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        fromPrivateKey:\n          type: string\n          maxLength: 66\n          example: \"0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2\"\n          minLength: 66\n          description: Private key of sender address. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Celo transaction. If not present, last known nonce will be used.\n        feeCurrency:\n          type: string\n          description: Currency to pay for transaction gas\n          enum:\n            - CELO\n            - CUSD\n            - CEUR\n      required:\n        - chain\n        - to\n        - contractAddress\n        - url\n        - fromPrivateKey\n        - feeCurrency\n        - tokenId\n    MintMultipleNftTron:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: TRON\n          description: Chain to work with.\n          enum:\n            - TRON\n        to:\n          type: array\n          description: Blockchain address to send NFT token to.\n          example: [ \"TCrmdJmvDUPy8qSTgoVStF51yWm6VUh5yQ\" ]\n          items:\n            maxLength: 34\n            minLength: 34\n            type: string\n        tokenId:\n          type: array\n          description: ID of token to be created.\n          example: [ \"100000\" ]\n          items:\n            type: string\n            maxLength: 32\n        url:\n          description: Metadata of the token. See https://eips.ethereum.org/EIPS/eip-721#specification for more details.\n          type: array\n          example:\n            - \"https://my_token_data.com\"\n          items:\n            type: string\n            maxLength: 256\n        contractAddress:\n          maxLength: 34\n          minLength: 34\n          description: Address of NFT token\n          example: \"TCrmdJmvDUPy8qSTgoVStF51yWm6VUh5yQ\"\n          type: string\n        fromPrivateKey:\n          type: string\n          maxLength: 64\n          example: \"842E09EB40D8175979EFB0071B28163E11AED0F14BDD84090A4CEFB936EF5701\"\n          minLength: 64\n          description: Private key of sender address. Private key, or signature Id must be present.\n        feeLimit:\n          type: number\n          description: Max limit for fee to be paid, in TRX.\n          example: 600\n      required:\n        - chain\n        - to\n        - contractAddress\n        - url\n        - fromPrivateKey\n        - feeLimit\n        - tokenId\n    DeployNftCelo:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: CELO\n          description: Chain to work with.\n          enum:\n            - CELO\n        name:\n          description: Name of the NFT token\n          example: My ERC721\n          maxLength: 100\n          minLength: 1\n          type: string\n        provenance:\n          description: True if the contract is provenance type - each transfer of the NFT can track the provenance history of the transaction. Based on this features, percentage royalties could be enabled.\n          example: true\n          type: boolean\n        publicMint:\n          description: True if anyone will be able to mint NFTs, false by default for deployer as a default minter.\n          example: true\n          type: boolean\n        symbol:\n          description: Symbol of the NFT token\n          example: ERC_SYMBOL\n          maxLength: 30\n          minLength: 1\n          type: string\n        fromPrivateKey:\n          description: Private key of Ethereum account address, from which gas for deployment of ERC721 will be paid. Private key, or signature Id must be present.\n          type: string\n          maxLength: 66\n          example: \"0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2\"\n          minLength: 66\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Ethereum transaction. If not present, last known nonce will be used.\n        feeCurrency:\n          type: string\n          description: Currency to pay for transaction gas\n          enum:\n            - CELO\n            - CUSD\n            - CEUR\n      required:\n        - chain\n        - name\n        - symbol\n        - feeCurrency\n        - fromPrivateKey\n    DeployNftTron:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: TRON\n          description: Chain to work with.\n          enum:\n            - TRON\n        name:\n          description: Name of the NFT token\n          example: My ERC721\n          maxLength: 100\n          minLength: 1\n          type: string\n        symbol:\n          description: Symbol of the NFT token\n          example: ERC_SYMBOL\n          maxLength: 30\n          minLength: 1\n          type: string\n        fromPrivateKey:\n          description: Private key of Ethereum account address, from which gas for deployment of ERC721 will be paid. Private key, or signature Id must be present.\n          type: string\n          maxLength: 64\n          example: \"842E09EB40D8175979EFB0071B28163E11AED0F14BDD84090A4CEFB936EF5701\"\n          minLength: 64\n        feeLimit:\n          type: number\n          description: Max limit for fee to be paid, in TRX. For deploy, around 580 TRX is consumed.\n          example: 600\n      required:\n        - chain\n        - name\n        - symbol\n        - feeLimit\n        - fromPrivateKey\n    DeployNftCeloKMS:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: CELO\n          description: Chain to work with.\n          enum:\n            - CELO\n        name:\n          description: Name of the NFT token\n          example: My ERC721\n          maxLength: 100\n          minLength: 1\n          type: string\n        publicMint:\n          description: True if the contract is publicMint type\n          example: true\n          type: boolean\n        symbol:\n          description: Symbol of the NFT token\n          example: ERC_SYMBOL\n          maxLength: 30\n          minLength: 1\n          type: string\n        index:\n          type: number\n          minimum: 0\n          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n        provenance:\n          description: True if the contract is provenance type\n          example: true\n          type: boolean\n        feeCurrency:\n          type: string\n          description: Currency to pay for transaction gas\n          enum:\n            - CELO\n            - CUSD\n            - CEUR\n      required:\n        - chain\n        - name\n        - symbol\n        - feeCurrency\n        - signatureId\n    DeployNftTronKMS:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: TRON\n          description: Chain to work with.\n          enum:\n            - TRON\n        account:\n          maxLength: 34\n          minLength: 34\n          description: Blockchain address to perform transaction from\n          example: \"TCrmdJmvDUPy8qSTgoVStF51yWm6VUh5yQ\"\n          type: string\n        name:\n          description: Name of the NFT token\n          example: My ERC721\n          maxLength: 100\n          minLength: 1\n          type: string\n        symbol:\n          description: Symbol of the NFT token\n          example: ERC_SYMBOL\n          maxLength: 30\n          minLength: 1\n          type: string\n        index:\n          type: number\n          minimum: 0\n          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        feeLimit:\n          type: number\n          description: Max limit for fee to be paid, in TRX. For deploy, around 580 TRX is consumed.\n          example: 600\n      required:\n        - chain\n        - name\n        - account\n        - symbol\n        - feeLimit\n        - signatureId\n    MintMultipleNftKMSCelo:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: CELO\n          description: Chain to work with.\n          enum:\n            - CELO\n        to:\n          type: array\n          description: Blockchain address to send NFT token to.\n          example: [ \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\" ]\n          items:\n            maxLength: 42\n            minLength: 42\n            type: string\n        tokenId:\n          type: array\n          description: ID of token to be created.\n          example: [ \"100000\" ]\n          items:\n            type: string\n            maxLength: 32\n        url:\n          description: Metadata of the token. See https://eips.ethereum.org/EIPS/eip-721#specification for more details.\n          type: array\n          example:\n            - \"https://my_token_data.com\"\n          items:\n            type: string\n            maxLength: 256\n        authorAddresses:\n          type: array\n          description: List of addresses for every token, where royalty cashback for every transfer of this NFT will be send. Royalties are paid in native blockchain currency CELO.\n          items:\n            type: array\n            items:\n              type: string\n              minLength: 42\n              maxLength: 42\n              description: Blockchain address to send royalties to\n              example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n        cashbackValues:\n          type: array\n          description: List of values for every token, which will be paid as a royalty for author of the NFT token with every token transfer. This is exact value in native blockhain currency.\n          items:\n            type: array\n            items:\n              type: string\n              description: Value of the royalty to be paid.\n              example: \"0.5\"\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of NFT token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        index:\n          type: number\n          minimum: 0\n          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Celo transaction. If not present, last known nonce will be used.\n        feeCurrency:\n          type: string\n          description: Currency to pay for transaction gas\n          enum:\n            - CELO\n            - CUSD\n            - CEUR\n      required:\n        - chain\n        - to\n        - contractAddress\n        - feeCurrency\n        - tokenId\n        - url\n        - signatureId\n    MintMultipleNftKMSTron:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: TRON\n          description: Chain to work with.\n          enum:\n            - TRON\n        to:\n          type: array\n          description: Blockchain address to send NFT token to.\n          example: [ \"TCrmdJmvDUPy8qSTgoVStF51yWm6VUh5yQ\" ]\n          items:\n            maxLength: 34\n            minLength: 34\n            type: string\n        account:\n          maxLength: 34\n          minLength: 34\n          description: Blockchain address to perform transaction from\n          example: \"TCrmdJmvDUPy8qSTgoVStF51yWm6VUh5yQ\"\n          type: string\n        tokenId:\n          type: array\n          description: ID of token to be created.\n          example: [ \"100000\" ]\n          items:\n            type: string\n            maxLength: 32\n        url:\n          description: Metadata of the token. See https://eips.ethereum.org/EIPS/eip-721#specification for more details.\n          type: array\n          example:\n            - \"https://my_token_data.com\"\n          items:\n            type: string\n            maxLength: 256\n        contractAddress:\n          maxLength: 34\n          minLength: 34\n          description: Address of NFT token\n          example: \"TCrmdJmvDUPy8qSTgoVStF51yWm6VUh5yQ\"\n          type: string\n        index:\n          type: number\n          minimum: 0\n          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        feeLimit:\n          type: number\n          description: Max limit for fee to be paid, in TRX.\n          example: 600\n      required:\n        - chain\n        - to\n        - account\n        - contractAddress\n        - feeLimit\n        - tokenId\n        - url\n        - signatureId\n    BurnNftCelo:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: CELO\n          description: Chain to work with.\n          enum:\n            - CELO\n        tokenId:\n          description: ID of token to be destroyed.\n          example: \"100000\"\n          type: string\n          maxLength: 32\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of NFT token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        fromPrivateKey:\n          type: string\n          maxLength: 66\n          example: \"0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2\"\n          minLength: 66\n          description: Private key of sender address. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Celo transaction. If not present, last known nonce will be used.\n        feeCurrency:\n          type: string\n          description: Currency to pay for transaction gas\n          enum:\n            - CELO\n            - CUSD\n            - CEUR\n      required:\n        - chain\n        - contractAddress\n        - feeCurrency\n        - fromPrivateKey\n        - tokenId\n    BurnNftTron:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: TRON\n          description: Chain to work with.\n          enum:\n            - TRON\n        tokenId:\n          description: ID of token to be destroyed.\n          example: \"100000\"\n          type: string\n          maxLength: 32\n        contractAddress:\n          maxLength: 34\n          minLength: 34\n          description: Address of NFT token\n          example: \"TCrmdJmvDUPy8qSTgoVStF51yWm6VUh5yQ\"\n          type: string\n        fromPrivateKey:\n          type: string\n          maxLength: 64\n          example: \"842E09EB40D8175979EFB0071B28163E11AED0F14BDD84090A4CEFB936EF5701\"\n          minLength: 64\n          description: Private key of sender address. Private key, or signature Id must be present.\n        feeLimit:\n          type: number\n          description: Max limit for fee to be paid, in TRX.\n          example: 600\n      required:\n        - chain\n        - contractAddress\n        - feeLimit\n        - fromPrivateKey\n        - tokenId\n    BurnNftKMSCelo:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: CELO\n          description: Chain to work with.\n          enum:\n            - CELO\n        tokenId:\n          description: ID of token to be destroyed.\n          example: \"100000\"\n          type: string\n          maxLength: 32\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of NFT token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        index:\n          type: number\n          minimum: 0\n          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Celo transaction. If not present, last known nonce will be used.\n        feeCurrency:\n          type: string\n          description: Currency to pay for transaction gas\n          enum:\n            - CELO\n            - CUSD\n            - CEUR\n      required:\n        - chain\n        - feeCurrency\n        - contractAddress\n        - tokenId\n        - signatureId\n    BurnNftKMSTron:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: TRON\n          description: Chain to work with.\n          enum:\n            - TRON\n        account:\n          maxLength: 34\n          minLength: 34\n          description: Blockchain address to perform transaction from\n          example: \"TCrmdJmvDUPy8qSTgoVStF51yWm6VUh5yQ\"\n          type: string\n        tokenId:\n          description: ID of token to be destroyed.\n          example: \"100000\"\n          type: string\n          maxLength: 32\n        contractAddress:\n          maxLength: 34\n          minLength: 34\n          description: Address of NFT token\n          example: \"TCrmdJmvDUPy8qSTgoVStF51yWm6VUh5yQ\"\n          type: string\n        index:\n          type: number\n          minimum: 0\n          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        feeLimit:\n          type: number\n          description: Max limit for fee to be paid, in TRX.\n          example: 600\n      required:\n        - chain\n        - feeLimit\n        - contractAddress\n        - tokenId\n        - signatureId\n        - account\n    BurnNftFlowPK:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: FLOW\n          description: Chain to work with.\n          enum:\n            - FLOW\n        tokenId:\n          description: ID of token to be destroyed.\n          example: \"100000\"\n          type: string\n          maxLength: 32\n        contractAddress:\n          maxLength: 36\n          minLength: 36\n          description: Address of NFT token\n          example: \"17a50dad-bcb1-4f3d-ae2c-ea2bfb04419f\"\n          type: string\n        account:\n          type: string\n          maxLength: 18\n          example: \"0xc1b45bc27b9c61c3\"\n          minLength: 18\n          description: Blockchain address of the sender account.\n        privateKey:\n          type: string\n          maxLength: 64\n          example: \"05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2\"\n          minLength: 64\n          description: Private key of sender address. Private key, mnemonic and index or signature Id must be present.\n      required:\n        - chain\n        - contractAddress\n        - account\n        - privateKey\n        - tokenId\n    BurnNftFlowMnemonic:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: FLOW\n          description: Chain to work with.\n          enum:\n            - FLOW\n        tokenId:\n          description: ID of token to be destroyed.\n          example: \"100000\"\n          type: string\n          maxLength: 32\n        contractAddress:\n          maxLength: 36\n          minLength: 36\n          description: Address of NFT token\n          example: \"17a50dad-bcb1-4f3d-ae2c-ea2bfb04419f\"\n          type: string\n        account:\n          type: string\n          maxLength: 18\n          example: \"0xc1b45bc27b9c61c3\"\n          minLength: 18\n          description: Blockchain address of the sender account.\n        mnemonic:\n          type: string\n          maxLength: 500\n          example: \"urge pulp usage sister evidence arrest palm math please chief egg abuse\"\n          minLength: 1\n          description: Mnemonic to generate private key of sender address.\n        index:\n          description: Derivation index of sender address.\n          example: 0\n          type: integer\n          maximum: 2147483647\n      required:\n        - chain\n        - contractAddress\n        - account\n        - mnemonic\n        - index\n        - tokenId\n    BurnNftFlowKMS:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: FLOW\n          description: Chain to work with.\n          enum:\n            - FLOW\n        tokenId:\n          description: ID of token to be destroyed.\n          example: \"100000\"\n          type: string\n          maxLength: 32\n        contractAddress:\n          maxLength: 36\n          minLength: 36\n          description: Address of NFT token\n          example: \"17a50dad-bcb1-4f3d-ae2c-ea2bfb04419f\"\n          type: string\n        account:\n          type: string\n          maxLength: 18\n          example: \"0xc1b45bc27b9c61c3\"\n          minLength: 18\n          description: Blockchain address of the sender account.\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        index:\n          description: Derivation index of sender address.\n          example: 0\n          type: integer\n          maximum: 2147483647\n      required:\n        - chain\n        - contractAddress\n        - account\n        - signatureId\n        - tokenId\n    MintMultipleNftFlowPK:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: FLOW\n          description: Chain to work with.\n          enum:\n            - FLOW\n        to:\n          type: array\n          description: Blockchain address to send NFT token to.\n          example: [ \"0xc1b45bc27b9c61c3\" ]\n          items:\n            maxLength: 18\n            minLength: 18\n            type: string\n        url:\n          type: array\n          description: Metadata of the token. See https://eips.ethereum.org/EIPS/eip-721#specification for more details.\n          example: [ \"https://my_token_data.com\" ]\n          items:\n            type: string\n            maxLength: 256\n        contractAddress:\n          maxLength: 36\n          minLength: 36\n          description: Address of NFT token\n          example: \"17a50dad-bcb1-4f3d-ae2c-ea2bfb04419f\"\n          type: string\n        account:\n          type: string\n          maxLength: 18\n          example: \"0xc1b45bc27b9c61c3\"\n          minLength: 18\n          description: Blockchain address of the sender account.\n        privateKey:\n          type: string\n          maxLength: 64\n          example: \"05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2\"\n          minLength: 64\n          description: Private key of sender address. Private key, mnemonic and index or signature Id must be present.\n      required:\n        - chain\n        - contractAddress\n        - account\n        - privateKey\n        - to\n        - url\n    MintMultipleNftFlowMnemonic:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: FLOW\n          description: Chain to work with.\n          enum:\n            - FLOW\n        to:\n          type: array\n          description: Blockchain address to send NFT token to.\n          example: [ \"0xc1b45bc27b9c61c3\" ]\n          items:\n            maxLength: 18\n            minLength: 18\n            type: string\n        url:\n          type: array\n          description: Metadata of the token. See https://eips.ethereum.org/EIPS/eip-721#specification for more details.\n          example: [ \"https://my_token_data.com\" ]\n          items:\n            type: string\n            maxLength: 256\n        contractAddress:\n          maxLength: 36\n          minLength: 36\n          description: Address of NFT token\n          example: \"17a50dad-bcb1-4f3d-ae2c-ea2bfb04419f\"\n          type: string\n        account:\n          type: string\n          maxLength: 18\n          example: \"0xc1b45bc27b9c61c3\"\n          minLength: 18\n          description: Blockchain address of the sender account.\n        mnemonic:\n          type: string\n          maxLength: 500\n          example: \"urge pulp usage sister evidence arrest palm math please chief egg abuse\"\n          minLength: 1\n          description: Mnemonic to generate private key of sender address.\n        index:\n          description: Derivation index of sender address.\n          example: 0\n          type: integer\n          maximum: 2147483647\n      required:\n        - chain\n        - contractAddress\n        - account\n        - mnemonic\n        - index\n        - to\n        - url\n    MintMultipleNftFlowKMS:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: FLOW\n          description: Chain to work with.\n          enum:\n            - FLOW\n        to:\n          type: array\n          description: Blockchain address to send NFT token to.\n          example: [ \"0xc1b45bc27b9c61c3\" ]\n          items:\n            maxLength: 18\n            minLength: 18\n            type: string\n        url:\n          type: array\n          description: Metadata of the token. See https://eips.ethereum.org/EIPS/eip-721#specification for more details.\n          example: [ \"https://my_token_data.com\" ]\n          items:\n            type: string\n            maxLength: 256\n        contractAddress:\n          maxLength: 36\n          minLength: 36\n          description: Address of NFT token\n          example: \"17a50dad-bcb1-4f3d-ae2c-ea2bfb04419f\"\n          type: string\n        account:\n          type: string\n          maxLength: 18\n          example: \"0xc1b45bc27b9c61c3\"\n          minLength: 18\n          description: Blockchain address of the sender account.\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        index:\n          description: Derivation index of sender address.\n          example: 0\n          type: integer\n          maximum: 2147483647\n      required:\n        - chain\n        - contractAddress\n        - account\n        - signatureId\n        - to\n        - url\n    MintNftFlowPK:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: FLOW\n          description: Chain to work with.\n          enum:\n            - FLOW\n        to:\n          type: string\n          description: Blockchain address to send NFT token to.\n          example: \"0xc1b45bc27b9c61c3\"\n          maxLength: 18\n          minLength: 18\n        url:\n          type: string\n          description: Metadata of the token. See https://eips.ethereum.org/EIPS/eip-721#specification for more details.\n          example: \"https://my_token_data.com\"\n          maxLength: 256\n        contractAddress:\n          maxLength: 36\n          minLength: 36\n          description: Address of NFT token\n          example: \"17a50dad-bcb1-4f3d-ae2c-ea2bfb04419f\"\n          type: string\n        account:\n          type: string\n          maxLength: 18\n          example: \"0xc1b45bc27b9c61c3\"\n          minLength: 18\n          description: Blockchain address of the sender account.\n        privateKey:\n          type: string\n          maxLength: 64\n          example: \"05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2\"\n          minLength: 64\n          description: Private key of sender address. Private key, mnemonic and index or signature Id must be present.\n      required:\n        - chain\n        - contractAddress\n        - account\n        - privateKey\n        - to\n        - url\n    MintNftFlowMnemonic:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: FLOW\n          description: Chain to work with.\n          enum:\n            - FLOW\n        to:\n          type: string\n          description: Blockchain address to send NFT token to.\n          example: \"0xc1b45bc27b9c61c3\"\n          maxLength: 18\n          minLength: 18\n        url:\n          type: string\n          description: Metadata of the token. See https://eips.ethereum.org/EIPS/eip-721#specification for more details.\n          example: \"https://my_token_data.com\"\n          maxLength: 256\n        contractAddress:\n          maxLength: 36\n          minLength: 36\n          description: Address of NFT token\n          example: \"17a50dad-bcb1-4f3d-ae2c-ea2bfb04419f\"\n          type: string\n        account:\n          type: string\n          maxLength: 18\n          example: \"0xc1b45bc27b9c61c3\"\n          minLength: 18\n          description: Blockchain address of the sender account.\n        mnemonic:\n          type: string\n          maxLength: 500\n          example: \"urge pulp usage sister evidence arrest palm math please chief egg abuse\"\n          minLength: 1\n          description: Mnemonic to generate private key of sender address.\n        index:\n          description: Derivation index of sender address.\n          example: 0\n          type: integer\n          maximum: 2147483647\n      required:\n        - chain\n        - contractAddress\n        - account\n        - mnemonic\n        - index\n        - to\n        - url\n    MintNftFlowKMS:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: FLOW\n          description: Chain to work with.\n          enum:\n            - FLOW\n        to:\n          type: string\n          description: Blockchain address to send NFT token to.\n          example: \"0xc1b45bc27b9c61c3\"\n          maxLength: 18\n          minLength: 18\n        url:\n          type: string\n          description: Metadata of the token. See https://eips.ethereum.org/EIPS/eip-721#specification for more details.\n          example: \"https://my_token_data.com\"\n          maxLength: 256\n        contractAddress:\n          maxLength: 36\n          minLength: 36\n          description: Address of NFT token\n          example: \"17a50dad-bcb1-4f3d-ae2c-ea2bfb04419f\"\n          type: string\n        account:\n          type: string\n          maxLength: 18\n          example: \"0xc1b45bc27b9c61c3\"\n          minLength: 18\n          description: Blockchain address of the sender account.\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        index:\n          description: Derivation index of sender address.\n          example: 0\n          type: integer\n          maximum: 2147483647\n      required:\n        - chain\n        - contractAddress\n        - account\n        - signatureId\n        - to\n        - url\n    DeployNftFlowPK:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: FLOW\n          description: Chain to work with.\n          enum:\n            - FLOW\n        account:\n          type: string\n          maxLength: 18\n          example: \"0xc1b45bc27b9c61c3\"\n          minLength: 18\n          description: Blockchain address of the sender account.\n        privateKey:\n          type: string\n          maxLength: 64\n          example: \"05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2\"\n          minLength: 64\n          description: Private key of sender address. Private key, mnemonic and index or signature Id must be present.\n      required:\n        - chain\n        - account\n        - privateKey\n    DeployNftFlowMnemonic:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: FLOW\n          description: Chain to work with.\n          enum:\n            - FLOW\n        account:\n          type: string\n          maxLength: 18\n          example: \"0xc1b45bc27b9c61c3\"\n          minLength: 18\n          description: Blockchain address of the sender account.\n        mnemonic:\n          type: string\n          maxLength: 500\n          example: \"urge pulp usage sister evidence arrest palm math please chief egg abuse\"\n          minLength: 1\n          description: Mnemonic to generate private key of sender address.\n        index:\n          description: Derivation index of sender address.\n          example: 0\n          type: integer\n          maximum: 2147483647\n      required:\n        - chain\n        - account\n        - mnemonic\n        - index\n    DeployNftFlowKMS:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: FLOW\n          description: Chain to work with.\n          enum:\n            - FLOW\n        account:\n          type: string\n          maxLength: 18\n          example: \"0xc1b45bc27b9c61c3\"\n          minLength: 18\n          description: Blockchain address of the sender account.\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        index:\n          description: Derivation index of sender address.\n          example: 0\n          type: integer\n          maximum: 2147483647\n      required:\n        - chain\n        - account\n        - signatureId\n    TransferNftFlowPK:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: FLOW\n          description: Chain to work with.\n          enum:\n            - FLOW\n        to:\n          type: string\n          description: Blockchain address to send NFT token to.\n          example: \"0xc1b45bc27b9c61c3\"\n          maxLength: 18\n          minLength: 18\n        tokenId:\n          description: ID of token to be sent.\n          example: \"100000\"\n          type: string\n          maxLength: 32\n        contractAddress:\n          maxLength: 36\n          minLength: 36\n          description: Address of NFT token\n          example: \"17a50dad-bcb1-4f3d-ae2c-ea2bfb04419f\"\n          type: string\n        account:\n          type: string\n          maxLength: 18\n          example: \"0xc1b45bc27b9c61c3\"\n          minLength: 18\n          description: Blockchain address of the sender account.\n        privateKey:\n          type: string\n          maxLength: 64\n          example: \"05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2\"\n          minLength: 64\n          description: Private key of sender address. Private key, mnemonic and index or signature Id must be present.\n      required:\n        - chain\n        - contractAddress\n        - account\n        - privateKey\n        - to\n        - tokenId\n    TransferNftFlowMnemonic:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: FLOW\n          description: Chain to work with.\n          enum:\n            - FLOW\n        to:\n          type: string\n          description: Blockchain address to send NFT token to.\n          example: \"0xc1b45bc27b9c61c3\"\n          maxLength: 18\n          minLength: 18\n        tokenId:\n          description: ID of token to be sent.\n          example: \"100000\"\n          type: string\n          maxLength: 32\n        contractAddress:\n          maxLength: 36\n          minLength: 36\n          description: Address of NFT token\n          example: \"17a50dad-bcb1-4f3d-ae2c-ea2bfb04419f\"\n          type: string\n        account:\n          type: string\n          maxLength: 18\n          example: \"0xc1b45bc27b9c61c3\"\n          minLength: 18\n          description: Blockchain address of the sender account.\n        mnemonic:\n          type: string\n          maxLength: 500\n          example: \"urge pulp usage sister evidence arrest palm math please chief egg abuse\"\n          minLength: 1\n          description: Mnemonic to generate private key of sender address.\n        index:\n          description: Derivation index of sender address.\n          example: 0\n          type: integer\n          maximum: 2147483647\n      required:\n        - chain\n        - contractAddress\n        - account\n        - mnemonic\n        - index\n        - to\n        - tokenId\n    TransferNftFlowKMS:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: FLOW\n          description: Chain to work with.\n          enum:\n            - FLOW\n        to:\n          type: string\n          description: Blockchain address to send NFT token to.\n          example: \"0xc1b45bc27b9c61c3\"\n          maxLength: 18\n          minLength: 18\n        tokenId:\n          description: ID of token to be sent.\n          example: \"100000\"\n          type: string\n          maxLength: 32\n        contractAddress:\n          maxLength: 36\n          minLength: 36\n          description: Address of NFT token\n          example: \"17a50dad-bcb1-4f3d-ae2c-ea2bfb04419f\"\n          type: string\n        account:\n          type: string\n          maxLength: 18\n          example: \"0xc1b45bc27b9c61c3\"\n          minLength: 18\n          description: Blockchain address of the sender account.\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        index:\n          description: Derivation index of sender address.\n          example: 0\n          type: integer\n          maximum: 2147483647\n      required:\n        - chain\n        - contractAddress\n        - account\n        - signatureId\n        - to\n        - tokenId\n    NftTx:\n      type: object\n      properties:\n        blockNumber:\n          type: number\n          example: 6541235\n          description: Block number\n        txId:\n          type: string\n          example: \"0x955c1037608c7aecb6d1a3f150ce7d0a80536bcabb0deb69d62f55292cc4c372\"\n          description: Transaction ID\n        contractAddress:\n          type: string\n          example: \"0x4f54fAD27F7F46C102Cd49b8E75C5593397cd9c3\"\n          description: Contract address\n        tokenId:\n          type: string\n          example: \"1\"\n          description: ID of the token\n        from:\n          type: string\n          example: \"0x780c3de0aba1b51f04cfe8a5d9d277d4ad032b8d\"\n          description: Sender\n        to:\n          type: string\n          example: \"0x8cb76aed9c5e336ef961265c6079c14e9cd3d2ea\"\n          description: recipient\n      required:\n        - blockNumber\n        - txId\n        - contractAddress\n        - tokenId\n        - from\n        - to\n    UpdateCashbackValueForAuthorNftCelo:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: CELO\n          description: Chain to work with.\n          enum:\n            - CELO\n        tokenId:\n          description: ID of token to be updated.\n          example: \"100000\"\n          type: string\n          maxLength: 32\n        cashbackValue:\n          type: string\n          description: New royalty cashback to be set for the author of token with tokenId. If set to 0, royalty is disabled for this token.\n          example: \"0.1\"\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of NFT token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        fromPrivateKey:\n          type: string\n          maxLength: 66\n          example: \"0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2\"\n          minLength: 66\n          description: Private key of sender address. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Celo transaction. If not present, last known nonce will be used.\n        feeCurrency:\n          type: string\n          description: Currency to pay for transaction gas\n          enum:\n            - CELO\n            - CUSD\n            - CEUR\n      required:\n        - chain\n        - contractAddress\n        - feeCurrency\n        - fromPrivateKey\n        - tokenId\n        - cashbackValue\n    UpdateCashbackValueForAuthorNftTron:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: TRON\n          description: Chain to work with.\n          enum:\n            - TRON\n        tokenId:\n          description: ID of token to be updated.\n          example: \"100000\"\n          type: string\n          maxLength: 32\n        cashbackValue:\n          type: string\n          description: New royalty cashback to be set for the author of token with tokenId. If set to 0, royalty is disabled for this token.\n          example: \"0.1\"\n        contractAddress:\n          maxLength: 34\n          minLength: 34\n          description: Address of NFT token\n          example: \"TCrmdJmvDUPy8qSTgoVStF51yWm6VUh5yQ\"\n          type: string\n        fromPrivateKey:\n          type: string\n          maxLength: 64\n          example: \"842E09EB40D8175979EFB0071B28163E11AED0F14BDD84090A4CEFB936EF5701\"\n          minLength: 64\n          description: Private key of sender address. Private key, or signature Id must be present.\n        feeLimit:\n          type: number\n          description: Max limit for fee to be paid, in TRX.\n          example: 600\n      required:\n        - chain\n        - contractAddress\n        - feeLimit\n        - fromPrivateKey\n        - tokenId\n        - cashbackValue\n    UpdateCashbackValueForAuthorNftKMSCelo:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: CELO\n          description: Chain to work with.\n          enum:\n            - CELO\n        tokenId:\n          description: ID of token to be updated.\n          example: \"100000\"\n          type: string\n          maxLength: 32\n        cashbackValue:\n          type: string\n          description: New royalty cashback to be set for the author of token with tokenId. If set to 0, royalty is disabled for this token.\n          example: \"0.1\"\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of NFT token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        index:\n          type: number\n          minimum: 0\n          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Celo transaction. If not present, last known nonce will be used.\n        feeCurrency:\n          type: string\n          description: Currency to pay for transaction gas\n          enum:\n            - CELO\n            - CUSD\n            - CEUR\n      required:\n        - chain\n        - feeCurrency\n        - contractAddress\n        - tokenId\n        - signatureId\n        - cashbackValue\n    UpdateCashbackValueForAuthorNftKMSTron:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: TRON\n          description: Chain to work with.\n          enum:\n            - TRON\n        account:\n          maxLength: 34\n          minLength: 34\n          description: Blockchain address to perform transaction from\n          example: \"TCrmdJmvDUPy8qSTgoVStF51yWm6VUh5yQ\"\n          type: string\n        tokenId:\n          description: ID of token to be updated.\n          example: \"100000\"\n          type: string\n          maxLength: 32\n        cashbackValue:\n          type: string\n          description: New royalty cashback to be set for the author of token with tokenId. If set to 0, royalty is disabled for this token.\n          example: \"0.1\"\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of NFT token\n          example: \"TCrmdJmvDUPy8qSTgoVStF51yWm6VUh5yQ\"\n          type: string\n        index:\n          type: number\n          minimum: 0\n          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        feeLimit:\n          type: number\n          description: Max limit for fee to be paid, in TRX.\n          example: 600\n      required:\n        - chain\n        - feeLimit\n        - contractAddress\n        - account\n        - tokenId\n        - signatureId\n        - cashbackValue\n    TransferNftKMSCelo:\n      type: object\n      properties:\n        value:\n          type: string\n          description: If token to be transferred is Royalty NFT token, this is a value to be paid as a cashback to the authors of the token.\n          example: \"1\"\n        chain:\n          type: string\n          example: CELO\n          description: Chain to work with.\n          enum:\n            - CELO\n        to:\n          maxLength: 42\n          minLength: 42\n          description: Blockchain address to send NFT token to\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        tokenId:\n          description: ID of token.\n          example: \"100000\"\n          type: string\n          maxLength: 256\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of NFT token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        provenance:\n          description: True if the contract is provenance type\n          example: true\n          type: boolean\n        provenanceData:\n          description: data you want to store with transaction, optional and valid only if provenance contract\n          example: test\n          type: string\n        tokenPrice:\n          description: current price of the token, valid only for provenance\n          example: \"1\"\n          type: string\n          maxLength: 256\n        index:\n          type: number\n          minimum: 0\n          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          example: 1\n          description: Nonce to be set to Celo transaction. If not present, last known nonce will be used.\n        feeCurrency:\n          type: string\n          description: Currency to pay for transaction gas\n          enum:\n            - CELO\n            - CUSD\n            - CEUR\n      required:\n        - chain\n        - to\n        - contractAddress\n        - feeCurrency\n        - signatureId\n        - tokenId\n    TransferNftKMSTron:\n      type: object\n      properties:\n        value:\n          type: string\n          description: If token to be transferred is Royalty NFT token, this is a value to be paid as a cashback to the authors of the token.\n          example: \"1\"\n        chain:\n          type: string\n          example: TRON\n          description: Chain to work with.\n          enum:\n            - TRON\n        account:\n          maxLength: 34\n          minLength: 34\n          description: Blockchain address to perform transaction from\n          example: \"TCrmdJmvDUPy8qSTgoVStF51yWm6VUh5yQ\"\n          type: string\n        to:\n          maxLength: 34\n          minLength: 34\n          description: Blockchain address to send NFT token to\n          example: \"TCrmdJmvDUPy8qSTgoVStF51yWm6VUh5yQ\"\n          type: string\n        tokenId:\n          description: ID of token.\n          example: \"100000\"\n          type: string\n          maxLength: 256\n        contractAddress:\n          maxLength: 34\n          minLength: 34\n          description: Address of NFT token\n          example: \"TCrmdJmvDUPy8qSTgoVStF51yWm6VUh5yQ\"\n          type: string\n        index:\n          type: number\n          minimum: 0\n          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        feeLimit:\n          type: number\n          description: Max limit for fee to be paid, in TRX.\n          example: 600\n      required:\n        - chain\n        - to\n        - contractAddress\n        - feeLimit\n        - signatureId\n        - tokenId\n        - account\n    MintNftCelo:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: CELO\n          description: Chain to work with.\n          enum:\n            - CELO\n        tokenId:\n          description: ID of token to be created.\n          example: \"100000\"\n          type: string\n          maxLength: 32\n        to:\n          maxLength: 42\n          minLength: 42\n          description: Blockchain address to send NFT token to\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        erc20:\n          maxLength: 42\n          minLength: 42\n          description: Address of custom ERC20 token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of NFT token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        url:\n          description: Metadata of the token. See https://eips.ethereum.org/EIPS/eip-721#specification for more details.\n          example: \"https://my_token_data.com\"\n          type: string\n          maxLength: 256\n        authorAddresses:\n          type: array\n          description: List of addresses, where royalty cashback for every transfer of this NFT will be send. Royalties are paid in native blockchain currency CELO.\n          items:\n            type: string\n            minLength: 42\n            maxLength: 42\n            description: Blockchain address to send royalties to\n            example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n        provenance:\n          description: True if the contract is provenance type\n          example: true\n          type: boolean\n        cashbackValues:\n          type: array\n          description: List of values, which will be paid as a royalty for author of the NFT token with every token transfer. This is exact value in native blockhain currency and percentage value in case of provenance\n          items:\n            type: string\n            description: Value of the royalty to be paid.\n            example: \"0.5\"\n        fixedValues:\n          type: array\n          description: List of fixed values, if fixed value is greater than cashback value, it will be transferred to the authors instead.This is exact value in native blockhain currency.\n          items:\n            type: string\n            description: Value of the royalty to be paid.\n            example: \"0.5\"\n        fromPrivateKey:\n          type: string\n          maxLength: 66\n          example: \"0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2\"\n          minLength: 66\n          description: Private key of sender address. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Celo transaction. If not present, last known nonce will be used.\n        feeCurrency:\n          type: string\n          description: Currency to pay for transaction gas\n          enum:\n            - CELO\n            - CUSD\n            - CEUR\n      required:\n        - chain\n        - to\n        - url\n        - feeCurrency\n    MintNftTron:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: TRON\n          description: Chain to work with.\n          enum:\n            - TRON\n        tokenId:\n          description: ID of token to be created.\n          example: \"100000\"\n          type: string\n          maxLength: 32\n        to:\n          maxLength: 34\n          minLength: 34\n          description: Blockchain address to send NFT token to\n          example: \"TCrmdJmvDUPy8qSTgoVStF51yWm6VUh5yQ\"\n          type: string\n        contractAddress:\n          maxLength: 34\n          minLength: 34\n          description: Address of NFT token\n          example: \"TCrmdJmvDUPy8qSTgoVStF51yWm6VUh5yQ\"\n          type: string\n        url:\n          description: Metadata of the token. See https://eips.ethereum.org/EIPS/eip-721#specification for more details.\n          example: \"https://my_token_data.com\"\n          type: string\n          maxLength: 256\n        authorAddresses:\n          type: array\n          description: List of addresses, where royalty cashback for every transfer of this NFT will be send. Royalties are paid in native blockchain currency TRON.\n          items:\n            type: string\n            minLength: 34\n            maxLength: 34\n            description: Blockchain address to send royalties to\n            example: \"TCrmdJmvDUPy8qSTgoVStF51yWm6VUh5yQ\"\n        cashbackValues:\n          type: array\n          description: List of values, which will be paid as a royalty for author of the NFT token with every token transfer. This is exact value in native blockhain currency.\n          items:\n            type: string\n            description: Value of the royalty to be paid.\n            example: \"0.5\"\n        fromPrivateKey:\n          type: string\n          maxLength: 64\n          example: \"842E09EB40D8175979EFB0071B28163E11AED0F14BDD84090A4CEFB936EF5701\"\n          minLength: 64\n          description: Private key of sender address. Private key, or signature Id must be present.\n        feeLimit:\n          type: number\n          description: Max limit for fee to be paid, in TRX.\n          example: 600\n      required:\n        - chain\n        - to\n        - url\n        - feeLimit\n        - contractAddress\n        - fromPrivateKey\n        - tokenId\n    MintNftKMSCelo:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: CELO\n          description: Chain to work with.\n          enum:\n            - CELO\n        tokenId:\n          description: ID of token to be created.\n          example: \"100000\"\n          type: string\n          maxLength: 32\n        to:\n          maxLength: 42\n          minLength: 42\n          description: Blockchain address to send NFT token to\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of NFT token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        erc20:\n          maxLength: 42\n          minLength: 42\n          description: Address of custom ERC20 token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n        url:\n          description: Metadata of the token. See https://eips.ethereum.org/EIPS/eip-721#specification for more details.\n          example: \"https://my_token_data.com\"\n          type: string\n          maxLength: 256\n        authorAddresses:\n          type: array\n          description: List of addresses, where royalty cashback for every transfer of this NFT will be send. Royalties are paid in native blockchain currency CELO.\n          items:\n            type: string\n            minLength: 42\n            maxLength: 42\n            description: Blockchain address to send royalties to\n            example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n        provenance:\n          description: True if the contract is provenance type\n          example: true\n          type: boolean\n        cashbackValues:\n          type: array\n          description: List of values, which will be paid as a royalty for author of the NFT token with every token transfer. This is exact value in native blockhain currency and percentage value in case of provenance\n          items:\n            type: string\n            description: Value of the royalty to be paid.\n            example: \"0.5\"\n        fixedValues:\n          type: array\n          description: List of fixed values, if fixed value is greater than cashback value, it will be transferred to the authors instead.This is exact value in native blockhain currency.\n          items:\n            type: string\n            description: Value of the royalty to be paid.\n            example: \"0.5\"\n        index:\n          type: number\n          minimum: 0\n          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Celo transaction. If not present, last known nonce will be used.\n        feeCurrency:\n          type: string\n          description: Currency to pay for transaction gas\n          enum:\n            - CELO\n            - CUSD\n            - CEUR\n      required:\n        - chain\n        - to\n        - url\n        - feeCurrency\n        - contractAddress\n        - signatureId\n        - tokenId\n    MintNftKMSTron:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: TRON\n          description: Chain to work with.\n          enum:\n            - TRON\n        account:\n          maxLength: 34\n          minLength: 34\n          description: Blockchain address to perform transaction from\n          example: \"TCrmdJmvDUPy8qSTgoVStF51yWm6VUh5yQ\"\n          type: string\n        tokenId:\n          description: ID of token to be created.\n          example: \"100000\"\n          type: string\n          maxLength: 32\n        to:\n          maxLength: 34\n          minLength: 34\n          description: Blockchain address to send NFT token to\n          example: \"TCrmdJmvDUPy8qSTgoVStF51yWm6VUh5yQ\"\n          type: string\n        contractAddress:\n          maxLength: 34\n          minLength: 34\n          description: Address of NFT token\n          example: \"TCrmdJmvDUPy8qSTgoVStF51yWm6VUh5yQ\"\n          type: string\n        url:\n          description: Metadata of the token. See https://eips.ethereum.org/EIPS/eip-721#specification for more details.\n          example: \"https://my_token_data.com\"\n          type: string\n          maxLength: 256\n        authorAddresses:\n          type: array\n          description: List of addresses, where royalty cashback for every transfer of this NFT will be send. Royalties are paid in native blockchain currency TRON.\n          items:\n            type: string\n            minLength: 34\n            maxLength: 34\n            description: Blockchain address to send royalties to\n            example: \"TCrmdJmvDUPy8qSTgoVStF51yWm6VUh5yQ\"\n        cashbackValues:\n          type: array\n          description: List of values, which will be paid as a royalty for author of the NFT token with every token transfer. This is exact value in native blockhain currency.\n          items:\n            type: string\n            description: Value of the royalty to be paid.\n            example: \"0.5\"\n        index:\n          type: number\n          minimum: 0\n          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        feeLimit:\n          type: number\n          description: Max limit for fee to be paid, in TRX.\n          example: 600\n      required:\n        - chain\n        - account\n        - to\n        - url\n        - feeLimit\n        - contractAddress\n        - signatureId\n        - tokenId\n    TransferNft:\n      type: object\n      properties:\n        value:\n          type: string\n          description: If token to be transferred is Royalty NFT token, this is a value to be paid as a cashback to the authors of the token.\n          example: \"1\"\n        chain:\n          type: string\n          example: ETH\n          description: Chain to work with.\n          enum:\n            - ETH\n            - MATIC\n            - KCS\n            - ONE\n            - BSC\n            - ALGO\n        to:\n          maxLength: 58\n          minLength: 42\n          description: Blockchain address to send NFT token to\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        tokenId:\n          description: ID of token.\n          example: \"100000\"\n          type: string\n          maxLength: 256\n        contractAddress:\n          maxLength: 42\n          minLength: 1\n          description: Address of NFT token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        provenance:\n          description: True if the contract is provenance type\n          example: true\n          type: boolean\n        provenanceData:\n          description: data you want to store with transaction, optional and valid only if provenance contract\n          example: test\n          type: string\n        tokenPrice:\n          description: current price of the token, valid only for provenance\n          example: \"1\"\n          type: string\n          maxLength: 256\n        fromPrivateKey:\n          type: string\n          maxLength: 103\n          example: \"0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2\"\n          minLength: 66\n          description: Private key of sender address. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          example: 1\n          description: Nonce to be set to Ethereum transaction. If not present, last known nonce will be used. Setting nonce is not necessary in Algorand\n        fee:\n          description: Custom defined fee. If not present, it will be calculated automatically. Setting fee is not necessary in Algorand.\n          type: object\n          required:\n            - gasLimit\n            - gasPrice\n          properties:\n            gasLimit:\n              type: string\n              description: Gas limit for transaction in gas price.\n              pattern: ^[+]?\\d+$\n              example: \"40000\"\n            gasPrice:\n              type: string\n              description: Gas price in Gwei.\n              pattern: ^[+]?\\d+$\n              example: \"20\"\n      required:\n        - to\n        - chain\n        - contractAddress\n        - tokenId\n        - fromPrivateKey\n    TransferNftSolana:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: SOL\n          description: Chain to work with.\n          enum:\n            - SOL\n        from:\n          maxLength: 44\n          minLength: 44\n          description: Blockchain address to send NFT token from. From this address, transaction fee will be paid.\n          example: \"FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ\"\n          type: string\n        to:\n          maxLength: 44\n          minLength: 44\n          description: Blockchain address to send NFT token to\n          example: \"FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ\"\n          type: string\n        contractAddress:\n          maxLength: 44\n          minLength: 44\n          description: Address of NFT token\n          example: \"3tzudv5KaoqmieWiBUqzWokKEtTvx1wQMapVKeH7CHaq\"\n          type: string\n        fromPrivateKey:\n          type: string\n          maxLength: 128\n          example: \"3abc79a31093e4cfa4a724e94a44906cbbc3a32e2f75f985a28616676a5dbaf1de8d82a7e1d0561bb0e1b729c7a9b9b1708cf2803ad0ca928a332587ace391ad\"\n          minLength: 128\n          description: Private key of sender address. Private key, or signature Id must be present.\n      required:\n        - to\n        - from\n        - chain\n        - contractAddress\n        - fromPrivateKey\n    TransferNftSolanaKMS:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: SOL\n          description: Chain to work with.\n          enum:\n            - SOL\n        from:\n          maxLength: 44\n          minLength: 44\n          description: Blockchain address to send NFT token from. From this address, transaction fee will be paid.\n          example: \"FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ\"\n          type: string\n        to:\n          maxLength: 44\n          minLength: 44\n          description: Blockchain address to send NFT token to\n          example: \"FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ\"\n          type: string\n        contractAddress:\n          maxLength: 44\n          minLength: 44\n          description: Address of NFT token\n          example: \"3tzudv5KaoqmieWiBUqzWokKEtTvx1wQMapVKeH7CHaq\"\n          type: string\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n      required:\n        - to\n        - from\n        - chain\n        - contractAddress\n        - signatureId\n    DeployNft:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: ETH\n          description: Chain to work with.\n          enum:\n            - ETH\n            - MATIC\n            - KCS\n            - ONE\n            - BSC\n            - ALGO\n        name:\n          description: Name of the NFT token\n          example: My ERC721\n          maxLength: 100\n          minLength: 1\n          type: string\n        symbol:\n          description: Symbol of the NFT token\n          example: ERC_SYMBOL\n          maxLength: 30\n          minLength: 1\n          type: string\n        fromPrivateKey:\n          description: Private key of Ethereum account address, from which gas for deployment of ERC721 will be paid. Private key, or signature Id must be present.\n          type: string\n          maxLength: 103\n          example: \"0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2\"\n          minLength: 66\n        provenance:\n          description: True if the contract is provenance type\n          example: true\n          type: boolean\n        publicMint:\n          description: True if the contract is publicMint type\n          example: true\n          type: boolean\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Ethereum transaction. If not present, last known nonce will be used.\n        fee:\n          description: Custom defined fee. If not present, it will be calculated automatically.\n          type: object\n          required:\n            - gasLimit\n            - gasPrice\n          properties:\n            gasLimit:\n              type: string\n              description: Gas limit for transaction in gas price.\n              pattern: ^[+]?\\d+$\n              example: \"40000\"\n            gasPrice:\n              type: string\n              description: Gas price in Gwei.\n              pattern: ^[+]?\\d+$\n              example: \"20\"\n      required:\n        - name\n        - chain\n        - symbol\n        - fromPrivateKey\n    DeployNftKMS:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: ETH\n          description: Chain to work with.\n          enum:\n            - ETH\n            - MATIC\n            - KCS\n            - ONE\n            - BSC\n        name:\n          description: Name of the NFT token\n          example: My ERC721\n          maxLength: 100\n          minLength: 1\n          type: string\n        provenance:\n          description: True if the contract is provenance type\n          example: true\n          type: boolean\n        publicMint:\n          description: True if the contract is publicMint type\n          example: true\n          type: boolean\n        symbol:\n          description: Symbol of the NFT token\n          example: ERC_SYMBOL\n          maxLength: 30\n          minLength: 1\n          type: string\n        index:\n          type: number\n          minimum: 0\n          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Ethereum transaction. If not present, last known nonce will be used.\n        fee:\n          description: Custom defined fee. If not present, it will be calculated automatically.\n          type: object\n          required:\n            - gasLimit\n            - gasPrice\n          properties:\n            gasLimit:\n              type: string\n              description: Gas limit for transaction in gas price.\n              pattern: ^[+]?\\d+$\n              example: \"40000\"\n            gasPrice:\n              type: string\n              description: Gas price in Gwei.\n              pattern: ^[+]?\\d+$\n              example: \"20\"\n      required:\n        - name\n        - chain\n        - symbol\n        - signatureId\n    TransferNftKMS:\n      type: object\n      properties:\n        value:\n          type: string\n          description: If token to be transferred is Royalty NFT token, this is a value to be paid as a cashback to the authors of the token.\n          example: \"1\"\n        chain:\n          type: string\n          example: ETH\n          description: Chain to work with.\n          enum:\n            - ETH\n            - MATIC\n            - KCS\n            - ONE\n            - BSC\n        to:\n          maxLength: 42\n          minLength: 42\n          description: Blockchain address to send NFT token to\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        tokenId:\n          description: ID of token.\n          example: \"100000\"\n          type: string\n          maxLength: 256\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of NFT token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        index:\n          type: number\n          minimum: 0\n          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.\n        provenance:\n          description: True if the contract is provenance type\n          example: true\n          type: boolean\n        provenanceData:\n          description: data you want to store with transaction, optional and valid only if provenance contract\n          example: test\n          type: string\n        tokenPrice:\n          description: current price of the token, valid only for provenance\n          example: \"1\"\n          type: string\n          maxLength: 256\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          example: 1\n          description: Nonce to be set to Ethereum transaction. If not present, last known nonce will be used.\n        fee:\n          description: Custom defined fee. If not present, it will be calculated automatically.\n          type: object\n          required:\n            - gasLimit\n            - gasPrice\n          properties:\n            gasLimit:\n              type: string\n              description: Gas limit for transaction in gas price.\n              pattern: ^[+]?\\d+$\n              example: \"40000\"\n            gasPrice:\n              type: string\n              description: Gas price in Gwei.\n              pattern: ^[+]?\\d+$\n              example: \"20\"\n      required:\n        - to\n        - chain\n        - contractAddress\n        - signatureId\n        - tokenId\n    MintNft:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: ETH\n          description: Chain to work with.\n          enum:\n            - ETH\n            - MATIC\n            - KCS\n            - ONE\n            - BSC\n        tokenId:\n          description: ID of token to be created.\n          example: \"100000\"\n          type: string\n          maxLength: 32\n        to:\n          maxLength: 42\n          minLength: 42\n          description: Blockchain address to send NFT token to\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of NFT token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        erc20:\n          maxLength: 42\n          minLength: 42\n          description: Address of custom ERC20 token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        url:\n          description: Metadata of the token. See https://eips.ethereum.org/EIPS/eip-721#specification for more details.\n          example: \"https://my_token_data.com\"\n          type: string\n          maxLength: 256\n        provenance:\n          description: True if the contract is provenance type\n          example: true\n          type: boolean\n        authorAddresses:\n          type: array\n          description: List of addresses, where royalty cashback for every transfer of this NFT will be send. Royalties are paid in native blockchain currency, like BSC or ETH.\n          items:\n            type: string\n            minLength: 42\n            maxLength: 42\n            description: Blockchain address to send royalties to\n            example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n        cashbackValues:\n          type: array\n          description: List of values, which will be paid as a royalty for author of the NFT token with every token transfer. This is exact value in native blockhain currency and percentage value in case of provenance\n          items:\n            type: string\n            description: Value of the royalty to be paid.\n            example: \"0.5\"\n        fixedValues:\n          type: array\n          description: List of fixed values, if fixed value is greater than cashback value, it will be transferred to the authors instead.This is exact value in native blockhain currency.\n          items:\n            type: string\n            description: Value of the royalty to be paid.\n            example: \"0.5\"\n        fromPrivateKey:\n          type: string\n          maxLength: 66\n          example: \"0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2\"\n          minLength: 66\n          description: Private key of sender address. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Ethereum transaction. If not present, last known nonce will be used.\n        fee:\n          description: Custom defined fee. If not present, it will be calculated automatically.\n          type: object\n          required:\n            - gasLimit\n            - gasPrice\n          properties:\n            gasLimit:\n              type: string\n              description: Gas limit for transaction in gas price.\n              pattern: ^[+]?\\d+$\n              example: \"40000\"\n            gasPrice:\n              type: string\n              description: Gas price in Gwei.\n              pattern: ^[+]?\\d+$\n              example: \"20\"\n      required:\n        - to\n        - chain\n        - url\n        - fromPrivateKey\n        - tokenId\n    MintNftKMS:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: ETH\n          description: Chain to work with.\n          enum:\n            - ETH\n            - MATIC\n            - KCS\n            - ONE\n            - BSC\n        tokenId:\n          description: ID of token to be created.\n          example: \"100000\"\n          type: string\n          maxLength: 32\n        to:\n          maxLength: 42\n          minLength: 42\n          description: Blockchain address to send NFT token to\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of NFT token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        erc20:\n          maxLength: 42\n          minLength: 42\n          description: Address of custom ERC20 token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n        url:\n          description: Metadata of the token. See https://eips.ethereum.org/EIPS/eip-721#specification for more details.\n          example: \"https://my_token_data.com\"\n          type: string\n          maxLength: 256\n        provenance:\n          description: True if the contract is provenance type\n          example: true\n          type: boolean\n        authorAddresses:\n          type: array\n          description: List of addresses, where royalty cashback for every transfer of this NFT will be send. Royalties are paid in native blockchain currency, like BSC or ETH.\n          items:\n            type: string\n            minLength: 42\n            maxLength: 42\n            description: Blockchain address to send royalties to\n            example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n        cashbackValues:\n          type: array\n          description: List of values, which will be paid as a royalty for author of the NFT token with every token transfer. This is exact value in native blockhain currency and percentage value in case of provenance\n          items:\n            type: string\n            description: Value of the royalty to be paid.\n            example: \"0.5\"\n        fixedValues:\n          type: array\n          description: List of fixed values, if fixed value is greater than cashback value, it will be transferred to the authors instead.This is exact value in native blockhain currency.\n          items:\n            type: string\n            description: Value of the royalty to be paid.\n            example: \"0.5\"\n        index:\n          type: number\n          minimum: 0\n          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Ethereum transaction. If not present, last known nonce will be used.\n        fee:\n          description: Custom defined fee. If not present, it will be calculated automatically.\n          type: object\n          required:\n            - gasLimit\n            - gasPrice\n          properties:\n            gasLimit:\n              type: string\n              description: Gas limit for transaction in gas price.\n              pattern: ^[+]?\\d+$\n              example: \"40000\"\n            gasPrice:\n              type: string\n              description: Gas price in Gwei.\n              pattern: ^[+]?\\d+$\n              example: \"20\"\n      required:\n        - to\n        - chain\n        - url\n        - contractAddress\n        - signatureId\n        - tokenId\n    MintNftSolana:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: SOL\n          description: Chain to work with.\n          enum:\n            - SOL\n        to:\n          maxLength: 44\n          minLength: 44\n          description: Blockchain address to send NFT token to\n          example: \"FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ\"\n          type: string\n        from:\n          maxLength: 44\n          minLength: 44\n          description: Blockchain address to mint NFT token from. From this account, transaction fee will be paid.\n          example: \"FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ\"\n          type: string\n        fromPrivateKey:\n          type: string\n          maxLength: 128\n          example: \"3abc79a31093e4cfa4a724e94a44906cbbc3a32e2f75f985a28616676a5dbaf1de8d82a7e1d0561bb0e1b729c7a9b9b1708cf2803ad0ca928a332587ace391ad\"\n          minLength: 128\n          description: Private key of sender address.\n        metadata:\n          type: object\n          required:\n            - name\n            - symbol\n            - uri\n            - sellerFeeBasisPoints\n          properties:\n            name:\n              type: string\n              description: Name of the NFT token.\n              example: My NFT.\n              maxLength: 255\n            symbol:\n              type: string\n              description: Symbol of the NFT token.\n              example: NFT_SYMBOL\n              maxLength: 255\n            sellerFeeBasisPoints:\n              type: number\n              description: Basis points of the seller fee.\n              example: 0\n            uri:\n              description: Metadata of the token. See https://eips.ethereum.org/EIPS/eip-721#specification for more details.\n              example: \"https://my_token_data.com\"\n              type: string\n              maxLength: 500\n            creators:\n              type: array\n              description: Royalty receivers for NFT transfers.\n              items:\n                required:\n                  - address\n                  - verified\n                  - share\n                properties:\n                  address:\n                    type: string\n                    description: Address of the creator.\n                    maxLength: 44\n                    minLength: 44\n                    example: \"FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ\"\n                  verified:\n                    type: number\n                    description: If the creator was verified.\n                    example: 1\n                  share:\n                    type: number\n                    description: How much percent should be sent to this creator.\n                    example: 10\n      required:\n        - to\n        - chain\n        - fromPrivateKey\n        - from\n        - metadata\n    MintNftSolanaKMS:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: SOL\n          description: Chain to work with.\n          enum:\n            - SOL\n        to:\n          maxLength: 44\n          minLength: 44\n          description: Blockchain address to send NFT token to\n          example: \"FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ\"\n          type: string\n        from:\n          maxLength: 44\n          minLength: 44\n          description: Blockchain address to mint NFT token from. From this account, transaction fee will be paid.\n          example: \"FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ\"\n          type: string\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        metadata:\n          type: object\n          required:\n            - name\n            - symbol\n            - uri\n            - sellerFeeBasisPoints\n          properties:\n            name:\n              type: string\n              description: Name of the NFT token.\n              example: My NFT.\n              maxLength: 255\n            symbol:\n              type: string\n              description: Symbol of the NFT token.\n              example: NFT_SYMBOL\n              maxLength: 255\n            sellerFeeBasisPoints:\n              type: number\n              description: Basis points of the seller fee.\n              example: 0\n            uri:\n              description: Metadata of the token. See https://eips.ethereum.org/EIPS/eip-721#specification for more details.\n              example: \"https://my_token_data.com\"\n              type: string\n              maxLength: 500\n            creators:\n              type: array\n              description: Royalty receivers for NFT transfers.\n              items:\n                required:\n                  - address\n                  - verified\n                  - share\n                properties:\n                  address:\n                    type: string\n                    description: Address of the creator.\n                    maxLength: 44\n                    minLength: 44\n                    example: \"FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ\"\n                  verified:\n                    type: boolean\n                    description: If the creator was verified.\n                    example: 1\n                  share:\n                    type: number\n                    description: How much percent should be sent to this creator.\n                    example: 10\n      required:\n        - to\n        - chain\n        - signatureId\n        - metadata\n        - from\n    MintMultipleNft:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: ETH\n          description: Chain to work with.\n          enum:\n            - ETH\n            - MATIC\n            - KCS\n            - ONE\n            - BSC\n        to:\n          type: array\n          description: Blockchain address to send NFT token to.\n          example: [ \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\" ]\n          items:\n            maxLength: 42\n            minLength: 42\n            type: string\n        tokenId:\n          type: array\n          description: ID of token to be created.\n          example: [ \"100000\" ]\n          items:\n            type: string\n            maxLength: 32\n        url:\n          type: array\n          description: Metadata of the token. See https://eips.ethereum.org/EIPS/eip-721#specification for more details.\n          example: [ \"https://my_token_data.com\" ]\n          items:\n            type: string\n            maxLength: 256\n        authorAddresses:\n          type: array\n          description: List of addresses for every token, where royalty cashback for every transfer of this NFT will be send. Royalties are paid in native blockchain currency, ETH or BSC.\n          items:\n            type: array\n            items:\n              type: string\n              minLength: 42\n              maxLength: 42\n              description: Blockchain address to send royalties to\n              example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n        cashbackValues:\n          type: array\n          description: List of values for every token, which will be paid as a royalty for author of the NFT token with every token transfer. This is exact value in native blockhain currency.\n          items:\n            type: array\n            items:\n              type: string\n              description: Value of the royalty to be paid.\n              example: \"0.5\"\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of NFT token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        fromPrivateKey:\n          type: string\n          maxLength: 66\n          example: \"0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2\"\n          minLength: 66\n          description: Private key of sender address. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Ethereum transaction. If not present, last known nonce will be used.\n        fee:\n          description: Custom defined fee. If not present, it will be calculated automatically.\n          type: object\n          required:\n            - gasLimit\n            - gasPrice\n          properties:\n            gasLimit:\n              type: string\n              description: Gas limit for transaction in gas price.\n              pattern: ^[+]?\\d+$\n              example: \"40000\"\n            gasPrice:\n              type: string\n              description: Gas price in Gwei.\n              pattern: ^[+]?\\d+$\n              example: \"20\"\n      required:\n        - to\n        - chain\n        - url\n        - contractAddress\n        - fromPrivateKey\n        - tokenId\n    MintMultipleNftKMS:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: ETH\n          description: Chain to work with.\n          enum:\n            - ETH\n            - MATIC\n            - KCS\n            - ONE\n            - BSC\n        to:\n          type: array\n          description: Blockchain address to send NFT token to.\n          example: [ \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\" ]\n          items:\n            maxLength: 42\n            minLength: 42\n            type: string\n        tokenId:\n          type: array\n          description: ID of token to be created.\n          example: [ \"100000\" ]\n          items:\n            type: string\n            maxLength: 32\n        url:\n          type: array\n          description: Metadata of the token. See https://eips.ethereum.org/EIPS/eip-721#specification for more details.\n          example: [ \"https://my_token_data.com\" ]\n          items:\n            type: string\n            maxLength: 256\n        authorAddresses:\n          type: array\n          description: List of addresses for every token, where royalty cashback for every transfer of this NFT will be send. Royalties are paid in native blockchain currency, ETH or BSC.\n          items:\n            type: array\n            items:\n              type: string\n              minLength: 42\n              maxLength: 42\n              description: Blockchain address to send royalties to\n              example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n        cashbackValues:\n          type: array\n          description: List of values for every token, which will be paid as a royalty for author of the NFT token with every token transfer. This is exact value in native blockhain currency.\n          items:\n            type: array\n            items:\n              type: string\n              description: Value of the royalty to be paid.\n              example: \"0.5\"\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of NFT token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        index:\n          type: number\n          minimum: 0\n          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Ethereum transaction. If not present, last known nonce will be used.\n        fee:\n          description: Custom defined fee. If not present, it will be calculated automatically.\n          type: object\n          required:\n            - gasLimit\n            - gasPrice\n          properties:\n            gasLimit:\n              type: string\n              description: Gas limit for transaction in gas price.\n              pattern: ^[+]?\\d+$\n              example: \"40000\"\n            gasPrice:\n              type: string\n              description: Gas price in Gwei.\n              pattern: ^[+]?\\d+$\n              example: \"20\"\n      required:\n        - to\n        - chain\n        - contractAddress\n        - tokenId\n        - url\n        - signatureId\n    BurnNft:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: ETH\n          description: Chain to work with.\n          enum:\n            - ETH\n            - MATIC\n            - KCS\n            - ONE\n            - BSC\n            - ALGO\n        tokenId:\n          description: ID of token to be destroyed.\n          example: \"100000\"\n          type: string\n          maxLength: 32\n        contractAddress:\n          maxLength: 42\n          minLength: 1\n          description: Address of NFT token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        fromPrivateKey:\n          type: string\n          maxLength: 103\n          example: \"0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2\"\n          minLength: 66\n          description: Private key of sender address. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Ethereum transaction. If not present, last known nonce will be used.\n        fee:\n          description: Custom defined fee. If not present, it will be calculated automatically.\n          type: object\n          required:\n            - gasLimit\n            - gasPrice\n          properties:\n            gasLimit:\n              type: string\n              description: Gas limit for transaction in gas price.\n              pattern: ^[+]?\\d+$\n              example: \"40000\"\n            gasPrice:\n              type: string\n              description: Gas price in Gwei.\n              pattern: ^[+]?\\d+$\n              example: \"20\"\n      required:\n        - to\n        - chain\n        - url\n        - contractAddress\n        - fromPrivateKey\n        - tokenId\n    AddNftMinter:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: ETH\n          description: Chain to work with.\n          enum:\n            - ETH\n            - MATIC\n            - KCS\n            - CELO\n            - ONE\n            - BSC\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of NFT token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        minter:\n          maxLength: 42\n          minLength: 42\n          description: Address of NFT minter\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        fromPrivateKey:\n          type: string\n          maxLength: 66\n          example: \"0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2\"\n          minLength: 66\n          description: Private key of sender address. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Ethereum transaction. If not present, last known nonce will be used.\n        fee:\n          description: Custom defined fee. If not present, it will be calculated automatically.\n          type: object\n          required:\n            - gasLimit\n            - gasPrice\n          properties:\n            gasLimit:\n              type: string\n              description: Gas limit for transaction in gas price.\n              pattern: ^[+]?\\d+$\n              example: \"40000\"\n            gasPrice:\n              type: string\n              description: Gas price in Gwei.\n              pattern: ^[+]?\\d+$\n              example: \"20\"\n        feeCurrency:\n          type: string\n          description: Currency to pay for transaction gas, only valid for CELO chain.\n          enum:\n            - CELO\n            - CUSD\n            - CEUR\n      required:\n        - minter\n        - chain\n        - url\n        - contractAddress\n        - fromPrivateKey\n    UpdateCashbackValueForAuthorNftKMS:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: ETH\n          description: Chain to work with.\n          enum:\n            - ETH\n            - MATIC\n            - KCS\n            - ONE\n            - BSC\n        tokenId:\n          description: ID of token to be updated.\n          example: \"100000\"\n          type: string\n          maxLength: 32\n        cashbackValue:\n          type: string\n          description: New royalty cashback to be set for the author of token with tokenId. If set to 0, royalty is disabled for this token.\n          example: \"0.1\"\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of NFT token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        index:\n          type: number\n          minimum: 0\n          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Ethereum transaction. If not present, last known nonce will be used.\n        fee:\n          description: Custom defined fee. If not present, it will be calculated automatically.\n          type: object\n          required:\n            - gasLimit\n            - gasPrice\n          properties:\n            gasLimit:\n              type: string\n              description: Gas limit for transaction in gas price.\n              pattern: ^[+]?\\d+$\n              example: \"40000\"\n            gasPrice:\n              type: string\n              description: Gas price in Gwei.\n              pattern: ^[+]?\\d+$\n              example: \"20\"\n      required:\n        - to\n        - chain\n        - url\n        - contractAddress\n        - tokenId\n        - cashbackValue\n        - signatureId\n    UpdateCashbackValueForAuthorNft:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: ETH\n          description: Chain to work with.\n          enum:\n            - ETH\n            - MATIC\n            - KCS\n            - ONE\n            - BSC\n        tokenId:\n          description: ID of token to be updated.\n          example: \"100000\"\n          type: string\n          maxLength: 32\n        cashbackValue:\n          type: string\n          description: New royalty cashback to be set for the author of token with tokenId. If set to 0, royalty is disabled for this token.\n          example: \"0.1\"\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of NFT token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        fromPrivateKey:\n          type: string\n          maxLength: 66\n          example: \"0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2\"\n          minLength: 66\n          description: Private key of sender address. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Ethereum transaction. If not present, last known nonce will be used.\n        fee:\n          description: Custom defined fee. If not present, it will be calculated automatically.\n          type: object\n          required:\n            - gasLimit\n            - gasPrice\n          properties:\n            gasLimit:\n              type: string\n              description: Gas limit for transaction in gas price.\n              pattern: ^[+]?\\d+$\n              example: \"40000\"\n            gasPrice:\n              type: string\n              description: Gas price in Gwei.\n              pattern: ^[+]?\\d+$\n              example: \"20\"\n      required:\n        - to\n        - chain\n        - url\n        - cashbackValue\n        - contractAddress\n        - fromPrivateKey\n        - tokenId\n    BurnNftKMS:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: ETH\n          description: Chain to work with.\n          enum:\n            - ETH\n            - MATIC\n            - KCS\n            - ONE\n            - BSC\n        tokenId:\n          description: ID of token to be destroyed.\n          example: \"100000\"\n          type: string\n          maxLength: 32\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of NFT token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        index:\n          type: number\n          minimum: 0\n          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Ethereum transaction. If not present, last known nonce will be used.\n        fee:\n          description: Custom defined fee. If not present, it will be calculated automatically.\n          type: object\n          required:\n            - gasLimit\n            - gasPrice\n          properties:\n            gasLimit:\n              type: string\n              description: Gas limit for transaction in gas price.\n              pattern: ^[+]?\\d+$\n              example: \"40000\"\n            gasPrice:\n              type: string\n              description: Gas price in Gwei.\n              pattern: ^[+]?\\d+$\n              example: \"20\"\n      required:\n        - to\n        - chain\n        - url\n        - contractAddress\n        - tokenId\n        - signatureId\n    AddNftMinterKMS:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: ETH\n          description: Chain to work with.\n          enum:\n            - ETH\n            - MATIC\n            - KCS\n            - CELO\n            - ONE\n            - BSC\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of NFT token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        minter:\n          maxLength: 42\n          minLength: 42\n          description: Address of NFT minter\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        index:\n          type: number\n          minimum: 0\n          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Ethereum transaction. If not present, last known nonce will be used.\n        fee:\n          description: Custom defined fee. If not present, it will be calculated automatically.\n          type: object\n          required:\n            - gasLimit\n            - gasPrice\n          properties:\n            gasLimit:\n              type: string\n              description: Gas limit for transaction in gas price.\n              pattern: ^[+]?\\d+$\n              example: \"40000\"\n            gasPrice:\n              type: string\n              description: Gas price in Gwei.\n              pattern: ^[+]?\\d+$\n              example: \"20\"\n        feeCurrency:\n          type: string\n          description: Currency to pay for transaction gas, only valid for CELO chain.\n          enum:\n            - CELO\n            - CUSD\n            - CEUR\n      required:\n        - chain\n        - url\n        - contractAddress\n        - minter\n        - signatureId\n\n"
		}
	},
	"Error": "parse: parse spec: paths: /v3/nft/balance/{chain}/{contractAddress}/{address}: get: operation \"NftGetBalanceErc721\": responses: 400: content: \"application/json\": schema: parse schema: reference \"#/components/schemas/Error400\": resolve reference \"#/components/schemas/Error400\": schema not found"
}