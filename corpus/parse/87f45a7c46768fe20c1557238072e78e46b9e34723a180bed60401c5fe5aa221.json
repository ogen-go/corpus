{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/greater-than/PipeLayer"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "examples/pipelayer_microservice/src/openapi.yaml",
			"byteSize": 4074,
			"content": "openapi: 3.0.3\n\ninfo:\n  title: PipeLayer MicroService Example\n  description: Retrieves data from the ResReq API and returns JSON data.\n  version: v1.0.0\n\nservers:\n  - url: /v1\n\npaths:\n  /user/{id}:\n    get:\n      operationId: service.api.user.get\n      tags:\n        - Get User\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      responses:\n        200:\n          description: Get User Response\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserModel\"\n        400:\n          description: Error getting User\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/400-Error\"\n        500:\n          description: Application Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/500-Error\"\n  /user:\n    get:\n      operationId: service.api.user.get_users\n      tags:\n        - Get Users\n      parameters:\n        - $ref: \"#/components/parameters/page\"\n        - $ref: \"#/components/parameters/perPage\"\n      responses:\n        200:\n          description: Get Users Response\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UsersModel\"\n\n        400:\n          description: Error getting Users\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/400-Error\"\n        500:\n          description: Application Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/500-Error\"\n\ncomponents:\n  parameters:\n    id:\n        name: id\n        description: An id\n        in: path\n        required: true\n        schema:\n          type: integer\n          minimum: 1\n          default: 1\n    page:\n        name: page\n        description: The page number for lists\n        in: query\n        required: false\n        schema:\n          type: integer\n          minimum: 1\n          default: 1\n          example: 1\n    perPage:\n        name: per_page\n        description: The number of records to return per page\n        in: query\n        required: false\n        schema:\n          type: integer\n          minimum: 1\n          default: 5\n          example: 5\n\n  schemas:\n  # REQUEST SCHEMAS\n    UsersRequest:\n      additionalProperties: false\n      properties:\n        id:\n          $ref: \"#/components/schemas/id\"\n        email:\n          $ref: \"#/components/schemas/email\"\n        firstName:\n          $ref: \"#/components/schemas/firstName\"\n        lastName:\n          $ref: \"#/components/schemas/lastName\"\n        avatar:\n          $ref: \"#/components/schemas/avatar\"\n\n    # ERROR SCHEMAS\n    500-Error:\n      properties:\n        detail:\n          example: Houston we have a problem\n          type: string\n        status:\n          example: 500\n          type: string\n        title:\n          example: Server Error\n          type: string\n      type: object\n\n    400-Error:\n      properties:\n        detail:\n          example: Bad Request\n          type: string\n        status:\n          example: 400\n          type: string\n        title:\n          example: Bad Request\n          type: string\n      type: object\n\n    # MODELS\n    UsersModel:\n      type: object\n      properties:\n        data:\n          type: array\n          items:\n            $ref: \"#components/schemas/UserModel\"\n        manifest:\n          type: object\n\n    UserModel:\n      type: object\n      properties:\n        id:\n          $ref: \"#/components/schemas/id\"\n        email:\n          $ref: \"#/components/schemas/email\"\n        firstName:\n          $ref: \"#/components/schemas/firstName\"\n        lastName:\n          $ref: \"#/components/schemas/lastName\"\n        avatar:\n          $ref: \"#/components/schemas/avatar\"\n\n    # FIELDS\n    id:\n      type: integer\n\n    email:\n      type: string\n\n    firstName:\n      type: string\n\n    lastName:\n      type: string\n\n    avatar:\n      type: string\n\n    manifest:\n      type: object\n",
			"canonicalURL": "/github.com/greater-than/PipeLayer@569f43b65992f8a32079835585b864d5fe0bb251/-/blob/examples/pipelayer_microservice/src/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/greater-than/PipeLayer/blob/569f43b65992f8a32079835585b864d5fe0bb251/examples/pipelayer_microservice/src/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"UsersModel\": parse schema: property \"data\": parse schema: item: parse schema: resolve \"#components/schemas/UserModel\": find schema: resolve \"#components/schemas/UserModel\": invalid pointer \"components/schemas/UserModel\": pointer must start with '/'"
}