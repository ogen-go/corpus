{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/mapcentia/geocloud2"
		},
		"file": {
			"name": "api.json",
			"size": 0,
			"path": "public/swagger/v3/api.json",
			"byteSize": 29211,
			"content": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n        \"title\": \"GC2 API\",\n        \"contact\": {\n            \"email\": \"mh@mapcentia.com\"\n        },\n        \"version\": \"3.0.0\"\n    },\n    \"paths\": {\n        \"/api/v3/admin/mapfiles\": {\n            \"get\": {\n                \"tags\": [\n                    \"Admin\"\n                ],\n                \"summary\": \"Write out all MapFiles for the given user/database\",\n                \"operationId\": \"app\\\\api\\\\v3\\\\Admin::get_mapfiles\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Returns a list of all created MapFiles\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"data\": {\n                                            \"type\": \"array\",\n                                            \"items\": {\n                                                \"type\": \"array\",\n                                                \"items\": {\n                                                    \"type\": \"string\"\n                                                }\n                                            }\n                                        },\n                                        \"success\": {\n                                            \"type\": \"boolean\",\n                                            \"example\": true\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"security\": [\n                    {\n                        \"bearerAuth\": []\n                    }\n                ]\n            }\n        },\n        \"/api/v3/admin/mapcachefile\": {\n            \"get\": {\n                \"tags\": [\n                    \"Admin\"\n                ],\n                \"summary\": \"Write out the MapCache for the given user/database\",\n                \"operationId\": \"app\\\\api\\\\v3\\\\Admin::get_mapcachefile\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Return the name of the created MapCacheFile\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"data\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"/var/www/geocloud2/app/wms/mapcache/mydb.xml\"\n                                        },\n                                        \"success\": {\n                                            \"type\": \"boolean\",\n                                            \"example\": true\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"security\": [\n                    {\n                        \"bearerAuth\": []\n                    }\n                ]\n            }\n        },\n        \"/api/v3/admin/qgisfiles\": {\n            \"get\": {\n                \"tags\": [\n                    \"Admin\"\n                ],\n                \"summary\": \"Write out the QGIS files for the given database\",\n                \"operationId\": \"app\\\\api\\\\v3\\\\Admin::get_qgisfiles\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Returns a list of all created QGIS files\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"data\": {\n                                            \"type\": \"array\",\n                                            \"items\": {\n                                                \"type\": \"array\",\n                                                \"items\": {\n                                                    \"type\": \"string\"\n                                                }\n                                            }\n                                        },\n                                        \"success\": {\n                                            \"type\": \"boolean\",\n                                            \"example\": true\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"security\": [\n                    {\n                        \"bearerAuth\": []\n                    }\n                ]\n            }\n        },\n        \"/api/v3/admin/migrations\": {\n            \"get\": {\n                \"tags\": [\n                    \"Admin\"\n                ],\n                \"summary\": \"Run database migrations for the given user/database\",\n                \"operationId\": \"app\\\\api\\\\v3\\\\Admin::get_migrations\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Run database migration in user database and also in mapcentia and gc2scheduler\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"data\": {\n                                            \"type\": \"object\"\n                                        },\n                                        \"success\": {\n                                            \"type\": \"boolean\",\n                                            \"example\": true\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"security\": [\n                    {\n                        \"bearerAuth\": []\n                    }\n                ]\n            }\n        },\n        \"/api/v3/admin/schema\": {\n            \"get\": {\n                \"tags\": [\n                    \"Admin\"\n                ],\n                \"summary\": \"Install GC2 schema in a PostGIS enabled database\",\n                \"operationId\": \"app\\\\api\\\\v3\\\\Admin::get_schema\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Create the settings schema. Returns error if schema already exists\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"Schema is installed\"\n                                        },\n                                        \"success\": {\n                                            \"type\": \"boolean\",\n                                            \"example\": false\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"security\": [\n                    {\n                        \"bearerAuth\": []\n                    }\n                ]\n            }\n        },\n        \"/api/v3/admin/diskcleanup\": {\n            \"get\": {\n                \"tags\": [\n                    \"Admin\"\n                ],\n                \"summary\": \"Clean up temporary files\",\n                \"operationId\": \"app\\\\api\\\\v3\\\\Admin::get_diskcleanup\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Returns a list with unlinked files\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"data\": {\n                                            \"type\": \"array\",\n                                            \"items\": {\n                                                \"type\": \"array\",\n                                                \"items\": {\n                                                    \"type\": \"string\"\n                                                }\n                                            }\n                                        },\n                                        \"success\": {\n                                            \"type\": \"boolean\",\n                                            \"example\": true\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"security\": [\n                    {\n                        \"bearerAuth\": []\n                    }\n                ]\n            }\n        },\n        \"/api/v3/admin/cachestats\": {\n            \"get\": {\n                \"tags\": [\n                    \"Admin\"\n                ],\n                \"summary\": \"Get the cache stats\",\n                \"operationId\": \"app\\\\api\\\\v3\\\\Admin::get_cachestats\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Returns the cache stats. Output depends on caching back-end\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"security\": [\n                    {\n                        \"bearerAuth\": []\n                    }\n                ]\n            }\n        },\n        \"/api/v3/admin/cachecleanup\": {\n            \"get\": {\n                \"tags\": [\n                    \"Admin\"\n                ],\n                \"summary\": \"Clean up the cache\",\n                \"operationId\": \"app\\\\api\\\\v3\\\\Admin::get_cachecleanup\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Clean up the cache for ALL users\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"success\": {\n                                            \"type\": \"boolean\",\n                                            \"example\": true\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"security\": [\n                    {\n                        \"bearerAuth\": []\n                    }\n                ]\n            }\n        },\n        \"/api/v3/geofence/{jobId}\": {\n            \"get\": {\n                \"tags\": [\n                    \"Scheduler\"\n                ],\n                \"summary\": \"Start scheduled job by id.\",\n                \"operationId\": \"app\\\\api\\\\v3\\\\Geofence::get_index\",\n                \"parameters\": [\n                    {\n                        \"name\": \"jobId\",\n                        \"in\": \"path\",\n                        \"description\": \"Job identifier\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Operation status\"\n                    }\n                },\n                \"security\": [\n                    {\n                        \"bearerAuth\": []\n                    }\n                ]\n            }\n        },\n        \"/api/v3/grid\": {\n            \"post\": {\n                \"tags\": [\n                    \"Grid\"\n                ],\n                \"summary\": \"Create a fishnet grid from an input polygon\",\n                \"operationId\": \"app\\\\api\\\\v3\\\\Grid::post_index\",\n                \"requestBody\": {\n                    \"description\": \"Fishnet parameters\",\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"properties\": {\n                                    \"table\": {\n                                        \"type\": \"string\",\n                                        \"example\": \"new_grid\"\n                                    },\n                                    \"extent\": {\n                                        \"type\": \"string\",\n                                        \"example\": \"my_extent_polygon\"\n                                    },\n                                    \"size\": {\n                                        \"type\": \"integer\",\n                                        \"example\": 10000\n                                    }\n                                },\n                                \"type\": \"object\"\n                            }\n                        }\n                    }\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Return true if fishnet grid was created\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"success\": {\n                                            \"type\": \"boolean\",\n                                            \"example\": true\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"security\": [\n                    {\n                        \"bearerAuth\": []\n                    }\n                ]\n            }\n        },\n        \"/api/v3/oauth/token\": {\n            \"post\": {\n                \"tags\": [\n                    \"OAuth\"\n                ],\n                \"summary\": \"Get token\",\n                \"operationId\": \"app\\\\api\\\\v3\\\\Oauth::post_token\",\n                \"requestBody\": {\n                    \"description\": \"OAuth password grant parameters\",\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"properties\": {\n                                    \"grant_type\": {\n                                        \"type\": \"string\",\n                                        \"example\": \"password\"\n                                    },\n                                    \"username\": {\n                                        \"type\": \"string\",\n                                        \"example\": \"user@example.com\"\n                                    },\n                                    \"password\": {\n                                        \"type\": \"string\",\n                                        \"example\": \"1234Luggage\"\n                                    },\n                                    \"database\": {\n                                        \"type\": \"string\",\n                                        \"example\": \"roads\"\n                                    },\n                                    \"client_id\": {\n                                        \"type\": \"string\",\n                                        \"example\": \"xxxxxxxxxx\"\n                                    },\n                                    \"client_secret\": {\n                                        \"type\": \"string\",\n                                        \"example\": \"xxxxxxxxxx\"\n                                    }\n                                },\n                                \"type\": \"object\"\n                            }\n                        }\n                    }\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Operation status\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"access_token\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"MTQ0NjJkZmQ5OTM2NDE1ZTZjNGZmZjI3\"\n                                        },\n                                        \"token_type\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"bearer\"\n                                        },\n                                        \"expires_in\": {\n                                            \"type\": \"integer\",\n                                            \"example\": 3600\n                                        },\n                                        \"refresh_token\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"IwOGYzYTlmM2YxOTQ5MGE3YmNmMDFkNTVk\"\n                                        },\n                                        \"scope\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"sql\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/api/v3/scheduler/{jobId}\": {\n            \"get\": {\n                \"tags\": [\n                    \"Scheduler\"\n                ],\n                \"summary\": \"Start scheduled job by id.\",\n                \"operationId\": \"app\\\\api\\\\v3\\\\Scheduler::get_index\",\n                \"parameters\": [\n                    {\n                        \"name\": \"jobId\",\n                        \"in\": \"path\",\n                        \"description\": \"Job identifier\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Operation status\"\n                    }\n                },\n                \"security\": [\n                    {\n                        \"bearerAuth\": []\n                    }\n                ]\n            }\n        },\n        \"/api/v3/sql\": {\n            \"post\": {\n                \"tags\": [\n                    \"Sql\"\n                ],\n                \"summary\": \"Do SQL quyeries\",\n                \"operationId\": \"app\\\\api\\\\v3\\\\Sql::post_index\",\n                \"requestBody\": {\n                    \"description\": \"Parameters\",\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"properties\": {\n                                    \"q\": {\n                                        \"type\": \"string\",\n                                        \"example\": \"SELECT 1 as id,ST_setsrid(ST_MakePoint(10,56),4326) as geom\"\n                                    },\n                                    \"srs\": {\n                                        \"description\": \"\",\n                                        \"type\": \"integer\",\n                                        \"example\": \"25832\"\n                                    },\n                                    \"format\": {\n                                        \"type\": \"string\",\n                                        \"example\": \"csv\"\n                                    },\n                                    \"geoformat\": {\n                                        \"type\": \"string\",\n                                        \"example\": \"wkt\"\n                                    },\n                                    \"allstr\": {\n                                        \"type\": \"boolean\",\n                                        \"example\": false\n                                    },\n                                    \"lifetime\": {\n                                        \"type\": \"integer\",\n                                        \"example\": 0\n                                    },\n                                    \"base64\": {\n                                        \"type\": \"boolean\",\n                                        \"example\": false\n                                    }\n                                },\n                                \"type\": \"object\"\n                            }\n                        }\n                    }\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"If select then the result will be data on choosen format. If transaction the number of effected rows is returned.\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"security\": [\n                    {\n                        \"bearerAuth\": []\n                    }\n                ]\n            }\n        },\n        \"/api/v3/tileseeder\": {\n            \"get\": {\n                \"tags\": [\n                    \"Tileseeder\"\n                ],\n                \"summary\": \"Get all running mapcache_seed processes started by user\",\n                \"operationId\": \"app\\\\api\\\\v3\\\\Tileseeder::get_index\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Operation status\"\n                    }\n                },\n                \"security\": [\n                    {\n                        \"bearerAuth\": []\n                    }\n                ]\n            },\n            \"post\": {\n                \"tags\": [\n                    \"Tileseeder\"\n                ],\n                \"summary\": \"Starts a mapcache_seed process\",\n                \"operationId\": \"app\\\\api\\\\v3\\\\Tileseeder::post_index\",\n                \"requestBody\": {\n                    \"description\": \"mapcache_seed parameters\",\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"properties\": {\n                                    \"name\": {\n                                        \"type\": \"string\",\n                                        \"example\": \"My seeder job\"\n                                    },\n                                    \"layer\": {\n                                        \"type\": \"string\",\n                                        \"example\": \"my_schema.my_table\"\n                                    },\n                                    \"start\": {\n                                        \"type\": \"integer\",\n                                        \"example\": 10\n                                    },\n                                    \"end\": {\n                                        \"type\": \"integer\",\n                                        \"example\": 10\n                                    },\n                                    \"extent\": {\n                                        \"type\": \"string\",\n                                        \"example\": \"my_schema.my_table_with_extent\"\n                                    }\n                                },\n                                \"type\": \"object\"\n                            }\n                        }\n                    }\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Return the UUID and process id\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"uuid\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"C4A3797E-EC6B-4DAC-9474-ADA9083620F3\"\n                                        },\n                                        \"pid\": {\n                                            \"type\": \"integer\",\n                                            \"example\": 20326\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"security\": [\n                    {\n                        \"bearerAuth\": []\n                    }\n                ]\n            }\n        },\n        \"/api/v3/tileseeder/{uuid}\": {\n            \"delete\": {\n                \"tags\": [\n                    \"Tileseeder\"\n                ],\n                \"summary\": \"Kills a mapcache_seed process by uuid. Use * to kill all processes started by user.\",\n                \"operationId\": \"app\\\\api\\\\v3\\\\Tileseeder::delete_index\",\n                \"parameters\": [\n                    {\n                        \"name\": \"uuid\",\n                        \"in\": \"path\",\n                        \"description\": \"Uuid of Process\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Operation status\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"data\": {\n                                            \"type\": \"array\",\n                                            \"items\": {\n                                                \"type\": \"object\",\n                                                \"items\": {\n                                                    \"type\": \"string\"\n                                                }\n                                            }\n                                        },\n                                        \"pid\": {\n                                            \"type\": \"integer\",\n                                            \"example\": 20326\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"security\": [\n                    {\n                        \"bearerAuth\": []\n                    }\n                ]\n            }\n        },\n        \"/api/v3/tileseeder/log/{uuid}\": {\n            \"get\": {\n                \"tags\": [\n                    \"Tileseeder\"\n                ],\n                \"summary\": \"Get staus of a running job\",\n                \"operationId\": \"app\\\\api\\\\v3\\\\Tileseeder::get_log\",\n                \"parameters\": [\n                    {\n                        \"name\": \"uuid\",\n                        \"in\": \"path\",\n                        \"description\": \"Job identifier\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Operation status\"\n                    }\n                },\n                \"security\": [\n                    {\n                        \"bearerAuth\": []\n                    }\n                ]\n            }\n        }\n    },\n    \"components\": {\n        \"securitySchemes\": {\n            \"bearerAuth\": {\n                \"type\": \"http\",\n                \"name\": \"bearerAuth\",\n                \"in\": \"header\",\n                \"bearerFormat\": \"JWT\",\n                \"scheme\": \"bearer\"\n            }\n        }\n    }\n}"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /api/v3/tileseeder/{uuid}: delete: operation \"app\\\\api\\\\v3\\\\Tileseeder::delete_index\": responses: 200: content: application/json: schema: parse schema: property \"data\": parse schema: item: parse schema: object cannot contain 'items' field"
}