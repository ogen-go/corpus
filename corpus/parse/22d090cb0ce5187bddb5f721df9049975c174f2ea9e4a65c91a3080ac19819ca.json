{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/JCSDA-internal/FSOI"
		},
		"file": {
			"name": "cloudformation_webapp.yaml",
			"size": 0,
			"path": "python/src/fsoi/resources/cloudformation_webapp.yaml",
			"byteSize": 18604,
			"content": "---\n# Description:\n# This template creates a basic stack for a web application with API and static content.  The API can be selected\n# to be either a Websocket or REST API.\n#\n# CloudFront using Price Class 100 (North America, Europe, and Israel; https://aws.amazon.com/cloudfront/pricing/)\n#\n# Stack Creation Checklist:\n# 1. Look for TODO items this template to customize your application\n# 2. Create a new stack from the web console (https://console.aws.amazon.com/cloudformation)\n# 3. During stack creation, add DNS entries for certificate verification (https://console.aws.amazon.com/acm)\n\nDescription: Generic Web Application  # TODO: Update the stack description\nAWSTemplateFormatVersion: '2010-09-09'\nTransform: AWS::Serverless-2016-10-31\n\nParameters:\n  AppName:\n    Description: Application name (alphanumeric and underscores only)\n    Type: String\n    AllowedPattern: '[A-Za-z0-9_]+'\n  DeploymentType:\n    Description: May be PRODUCTION or DEVELOPMENT\n    Type: String\n    Default: development\n    AllowedValues:\n      - production\n      - development\n  DomainName:\n    Description: Domain name for the web application (e.g. mydomain.com)\n    Type: String\n  WebHostName:\n    Description: Hostname for the web page (e.g. www.mydomain.com)\n    Type: String\n  ApiHostName:\n    Description: Hostname for the REST or Websocket API (e.g. api.mydomain.com)\n    Type: String\n  ApiType:\n    Description: May be WEBSOCKET or REST\n    Type: String\n    Default: rest\n    AllowedValues:\n      - websocket\n      - rest\n  StageName:\n    Description: API Gateway Stage (may be version number)\n    Type: String\n    Default: v1\n  WebAccessLogBucket:\n    Description: Bucket name that will hold the web access logs (e.g. logs.mydomain.com)\n    Type: String\n  HostedZoneId:\n    Description: Hosted Zone ID of the Route 53 Domain Name Service for desired domain (https://console.aws.amazon.com/route53)\n    Type: String\n\n\nConditions:\n  IsDev: !Equals [!Ref DeploymentType, 'development']\n  IsProd: !Equals [!Ref DeploymentType, 'production']\n  UseRest: !Equals [!Ref ApiType, 'rest']\n  UseWebsocket: !Equals [!Ref ApiType, 'websocket']\n\n\nResources:\n\n  # SSL Certificate\n  Certificate:\n    Type: AWS::CertificateManager::Certificate\n    Properties:\n      DomainName: !Sub '${DomainName}'\n      SubjectAlternativeNames:\n        - !Sub '${WebHostName}'\n        - !Sub '${ApiHostName}'\n        - !Sub '*.${DomainName}'  # TODO: This may not be desired, but cannot be changed after creation\n      ValidationMethod: DNS\n\n  # Lambda Function (Front Controller)\n  LambdaRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n            Action:\n              - sts:AssumeRole\n      RoleName: !Sub '${AppName}_${DeploymentType}_lambda_role'\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n      # TODO: Update with policies necessary for your lambda function to run\n      # Policies:\n  LambdaFunctionFrontController:\n    Type: AWS::Serverless::Function\n    Properties:\n      FunctionName: !Sub '${AppName}_${DeploymentType}_handler'\n      Handler: index.handler\n      MemorySize: 128\n      Timeout: 3\n      Role: !GetAtt LambdaRole.Arn\n      Runtime: python3.8\n      Environment:\n        Variables:\n          API_TYPE: !Ref ApiType\n          API_HOSTNAME: !Ref ApiHostName\n          STAGE: !Ref StageName\n      InlineCode: |\n        import os\n        import json\n        def handler(event, context):\n            \"\"\"\n            Sample function\n            \"\"\"\n            # create a response\n            print(event)  # goes to CloudWatch Logs\n            response = {'ok': True, 'event': event}\n\n            # determine API type\n            isWebsocket = os.environ['API_TYPE'] == 'websocket'\n\n            # send response\n            if isWebsocket:\n              api_hostname = os.environ['API_HOSTNAME']\n              stage = os.environ['STAGE']\n              connection_id = event['requestContext']['connectionId']\n              client_url = 'https://%s/%s/@connections/%s' % (api_hostname, stage, connection_id)\n              print(client_url)\n              ApiGatewaySender.send_message_to_ws_client(client_url, response)\n            else:\n              return {\n                'isBase64Encoded': False,\n                'headers': {'Content-Type': 'text/json'},\n                'body': json.dumps(response)\n              }\n  LambdaInvokePermissionFromWebsocketApi:\n    Type: AWS::Lambda::Permission\n    Condition: UseWebsocket\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !Ref LambdaFunctionFrontController\n      Principal: apigateway.amazonaws.com\n      SourceArn:\n        !Join\n          - ''\n          - - 'arn:aws:execute-api:'\n            - !Sub '${AWS::Region}:'\n            - !Sub '${AWS::AccountId}:'\n            - !Ref WebsocketApi\n            - /*\n  LambdaInvokePermissionFromRestApi:\n    Type: AWS::Lambda::Permission\n    Condition: UseRest\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !Ref LambdaFunctionFrontController\n      Principal: apigateway.amazonaws.com\n      SourceArn:\n        !Join\n          - ''\n          - - 'arn:aws:execute-api:'\n            - !Sub '${AWS::Region}:'\n            - !Sub '${AWS::AccountId}:'\n            - !Ref RestApi\n            - /*\n\n  # Websocket API\n  WebsocketApi:\n    Type: AWS::ApiGatewayV2::Api\n    Condition: UseWebsocket\n    Properties:\n      Name: !Sub '${AppName} ${DeploymentType} Websocket API Gateway'\n      ProtocolType: WEBSOCKET\n      RouteSelectionExpression: \"\\\\$default\"\n  WebsocketConnectRoute:\n    Type: AWS::ApiGatewayV2::Route\n    Condition: UseWebsocket\n    DependsOn: WebsocketApi\n    Properties:\n      ApiId: !Ref WebsocketApi\n      RouteKey: $connect\n      AuthorizationType: NONE\n      OperationName: Default\n  WebsocketDefaultRoute:\n    Type: AWS::ApiGatewayV2::Route\n    Condition: UseWebsocket\n    DependsOn: WebsocketApi\n    Properties:\n      ApiId: !Ref WebsocketApi\n      RouteKey: $default\n      AuthorizationType: NONE\n      OperationName: Default\n      Target: !Join\n        - /\n        - - integrations\n          - !Ref WebsocketDefaultIntegration\n  WebsocketDefaultIntegration:\n    Type: AWS::ApiGatewayV2::Integration\n    Condition: UseWebsocket\n    DependsOn:\n      - WebsocketApi\n      - LambdaFunctionFrontController\n    Properties:\n      ApiId: !Ref WebsocketApi\n      Description: Forward to Lambda function\n      IntegrationType: AWS_PROXY\n      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AppName}_${DeploymentType}_handler/invocations'\n  WebsocketDeployment:\n    Type: AWS::ApiGatewayV2::Deployment\n    Condition: UseWebsocket\n    DependsOn:\n      - WebsocketApi\n      - WebsocketConnectRoute\n      - WebsocketDefaultRoute\n    Properties:\n      ApiId: !Ref WebsocketApi\n  WebsocketApiDomainName:\n    Type: AWS::ApiGatewayV2::DomainName\n    Condition: UseWebsocket\n    DependsOn: WebsocketDeployment\n    Properties:\n      DomainName: !Ref ApiHostName\n      DomainNameConfigurations:\n        - CertificateArn: !Ref Certificate\n          SecurityPolicy: TLS_1_2\n  WebsocketApiBasePathMapping:\n    Type: AWS::ApiGatewayV2::ApiMapping\n    Condition: UseWebsocket\n    DependsOn:\n      - WebsocketApi\n      - WebsocketApiDomainName\n    Properties:\n      ApiId: !Ref WebsocketApi\n      ApiMappingKey: !Sub '${StageName}'\n      DomainName: !Ref WebsocketApiDomainName\n      Stage: !Sub '${StageName}'\n  WebsocketApiDnsEntry:\n    Type: AWS::Route53::RecordSet\n    Condition: UseWebsocket\n    DependsOn: WebsocketApi\n    Properties:\n      Name: !Ref ApiHostName\n      HostedZoneId: !Ref HostedZoneId\n      Type: CNAME\n      TTL: 300\n      ResourceRecords:\n        - !GetAtt WebsocketApiDomainName.RegionalDomainName\n  WebsocketStage:\n    Type: AWS::ApiGatewayV2::Stage\n    Condition: UseWebsocket\n    DependsOn: WebsocketApi\n    Properties:\n      StageName: !Sub '${StageName}'\n      DeploymentId: !Ref WebsocketDeployment\n      ApiId: !Ref WebsocketApi\n  WebsocketAllowPostExecuteApi:\n    Type: AWS::IAM::Policy\n    Condition: UseWebsocket\n    Properties:\n      PolicyName: !Sub '${AppName}_${DeploymentType}_allow_api_client_response'\n      Roles:\n        - !Ref LambdaRole\n      PolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n          - Effect: Allow\n            Action: execute-api:*\n            Resource: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*/*/*'\n\n  # REST API\n  RestApi:\n    Type: AWS::ApiGateway::RestApi\n    Condition: UseRest\n    Properties:\n      Name: !Sub '${AppName}_${DeploymentType}'\n      EndpointConfiguration:\n        Types:\n          - EDGE\n      Body:\n        openapi: \"3.0.1\"\n        info:\n          title: !Ref AppName\n        servers:\n          - url: !Sub 'https://${ApiHostName}/{basePath}'\n            variables:\n              basePath:\n                default: !Ref StageName\n        paths:\n          /req:\n            get:\n              x-amazon-apigateway-integration:\n                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AppName}_${DeploymentType}_handler/invocations'\n                responses:\n                  default:\n                    statusCode: \"200\"\n                passthroughBehavior: \"when_no_match\"\n                httpMethod: \"POST\"\n                contentHandling: \"CONVERT_TO_TEXT\"\n                type: \"aws_proxy\"\n            post:\n              x-amazon-apigateway-integration:\n                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AppName}_${DeploymentType}_handler/invocations'\n                responses:\n                  default:\n                    statusCode: \"200\"\n                passthroughBehavior: \"when_no_match\"\n                httpMethod: \"POST\"\n                contentHandling: \"CONVERT_TO_TEXT\"\n                type: \"aws_proxy\"\n            options:\n              responses:\n                '200':\n                  description: \"200 response\"\n                  headers:\n                    Access-Control-Allow-Origin:\n                      schema:\n                        type: \"string\"\n                    Access-Control-Allow-Methods:\n                      schema:\n                        type: \"string\"\n                    Access-Control-Allow-Headers:\n                      schema:\n                        type: \"string\"\n                  content: {}\n              x-amazon-apigateway-integration:\n                responses:\n                  default:\n                    statusCode: \"200\"\n                    responseParameters:\n                      method.response.header.Access-Control-Allow-Methods: \"'GET,POST,OPTIONS'\"\n                      method.response.header.Access-Control-Allow-Headers: \"'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'\"\n                      method.response.header.Access-Control-Allow-Origin: \"'*'\"\n                passthroughBehavior: \"when_no_match\"\n                requestTemplates:\n                  application/json: \"{\\\"statusCode\\\": 200}\"\n                type: \"mock\"\n        components: {}\n  RestApiDeployment:\n    Type: AWS::ApiGateway::Deployment\n    Condition: UseRest\n    DependsOn: RestApi\n    Properties:\n      RestApiId: !Ref RestApi\n      StageName: !Sub '${StageName}'\n  RestApiDomainName:\n    Type: AWS::ApiGateway::DomainName\n    Condition: UseRest\n    DependsOn: RestApiDeployment\n    Properties:\n      CertificateArn: !Ref Certificate\n      DomainName: !Ref ApiHostName\n      SecurityPolicy: TLS_1_2\n      EndpointConfiguration:\n        Types:\n          - EDGE\n  RestApiBasePathMapping:\n    Type: AWS::ApiGateway::BasePathMapping\n    Condition: UseRest\n    DependsOn:\n      - RestApi\n      - RestApiDomainName\n    Properties:\n      BasePath: !Sub '${StageName}'\n      DomainName: !Ref RestApiDomainName\n      RestApiId: !Ref RestApi\n      Stage: !Sub '${StageName}'\n  RestApiDnsEntry:\n    Type: AWS::Route53::RecordSet\n    Condition: UseRest\n    DependsOn: RestApi\n    Properties:\n      Name: !Ref ApiHostName\n      HostedZoneId: !Ref HostedZoneId\n      Type: CNAME\n      TTL: 300\n      ResourceRecords:\n        - !GetAtt RestApiDomainName.DistributionDomainName\n\n  # CloudFront and Origins\n  CloudFrontDistribution:\n    Type: AWS::CloudFront::Distribution\n    DependsOn:\n      - CloudFormationOriginBucket\n      - CloudFormationAccessLogsBucket\n    Properties:\n      DistributionConfig:\n        Comment: !Sub '${AppName} ${DeploymentType}'\n        Aliases:\n          - !Sub '${WebHostName}'\n        DefaultRootObject: index.html\n        Enabled: true\n        IPV6Enabled: true\n#        Logging:\n#          Bucket: !Sub '${WebAccessLogBucket}'\n#          IncludeCookies: true\n#          Prefix: ''\n        DefaultCacheBehavior:\n          AllowedMethods:\n            - GET\n            - HEAD\n          CachedMethods:\n            - GET\n            - HEAD\n          Compress: true\n          DefaultTTL: 10800  # 3 hours\n          ForwardedValues:\n            Cookies:\n              Forward: all\n            QueryString: true\n          TargetOriginId: !Ref CloudFrontOriginAccessIdentity\n          ViewerProtocolPolicy: redirect-to-https\n        CacheBehaviors:\n          - AllowedMethods:\n              - GET\n              - HEAD\n              - OPTIONS\n            CachedMethods:\n              - GET\n              - HEAD\n              - OPTIONS\n            Compress: true\n            DefaultTTL: 10800  # 3 hours\n            ForwardedValues:\n              Cookies:\n                Forward: all\n              QueryString: true\n            LambdaFunctionAssociations:\n              - EventType: origin-response\n                IncludeBody: false\n                LambdaFunctionARN: !Ref CloudFormationAddSecurityHeaders.Version\n            PathPattern: '*'\n            TargetOriginId: !Ref CloudFrontOriginAccessIdentity\n            ViewerProtocolPolicy: redirect-to-https\n        Origins:\n          - Id: !Ref CloudFrontOriginAccessIdentity\n            DomainName: !Sub '${WebHostName}.s3.amazonaws.com'\n            S3OriginConfig:\n              OriginAccessIdentity:\n                Fn::Join:\n                  - '/'\n                  - - origin-access-identity\n                    - cloudfront\n                    - !Ref CloudFrontOriginAccessIdentity\n        PriceClass: PriceClass_100\n        ViewerCertificate:\n          AcmCertificateArn: !Ref Certificate\n          MinimumProtocolVersion: TLSv1.2_2018\n          SslSupportMethod: sni-only\n  CloudFrontOriginAppBucketPolicy:\n    Type: AWS::S3::BucketPolicy\n    DependsOn: CloudFormationOriginBucket\n    Properties:\n      Bucket: !Sub '${WebHostName}'\n      PolicyDocument:\n        Version: 2008-10-17\n        Id: PolicyForCloudFrontPrivateContent\n        Statement:\n          - Sid: Allow CloudFront Origin Access Identity to access bucket content\n            Effect: Allow\n            Principal:\n              AWS:\n                Fn::Join:\n                  - ' '\n                  - - arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity\n                    - !Ref CloudFrontOriginAccessIdentity\n            Action: 's3:GetObject'\n            Resource: !Sub 'arn:aws:s3:::${WebHostName}/*'\n  CloudFrontOriginAccessIdentity:\n    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity\n    Properties:\n      CloudFrontOriginAccessIdentityConfig:\n        Comment: !Sub 'S3-${WebHostName}'\n  CloudFrontDnsEntry:\n    Type: AWS::Route53::RecordSet\n    DependsOn:\n      - CloudFrontDistribution\n    Properties:\n      Name: !Sub '${WebHostName}'\n      HostedZoneId: !Sub '${HostedZoneId}'\n      Type: CNAME\n      TTL: 300\n      ResourceRecords:\n        - !GetAtt CloudFrontDistribution.DomainName\n  CloudFormationAddSecurityHeaders:\n    Type: AWS::Serverless::Function\n    Properties:\n      FunctionName: !Sub '${AppName}_${DeploymentType}_security_headers'\n      Handler: index.handler\n      MemorySize: 128\n      Timeout: 3\n      Role: !GetAtt CloudFormationAddSecurityHeadersRole.Arn\n      Runtime: nodejs12.x\n      AutoPublishAlias: AliasAddSecurityHeaders\n      InlineCode: |\n        'use strict';\n        exports.handler = (event, context, callback) =\u003e {\n\n            /* get contents of response */\n            const response = event.Records[0].cf.response;\n            const headers = response.headers;\n\n            /* set new headers */\n            headers['x-frame-options'] = [{key: 'X-Frame-Options', value: 'SAMEORIGIN'}];\n            headers['strict-transport-security'] = [{key: 'Strict-Transport-Security', value: 'max-age=63072000; includeSubdomains; preload'}];\n            headers['x-content-type-options'] = [{key: 'X-Content-Type-Options', value: 'nosniff'}];\n            headers['referrer-policy'] = [{key: 'Referrer-Policy', value: 'same-origin'}];\n            headers['x-xss-protection'] = [{key: 'X-XSS-Protection', value: '1; mode=block'}];\n            headers['content-security-policy'] = [{key: 'Content-Security-Policy', value: \"default-src 'none'; script-src 'self'; style-src 'self' 'unsafe-inline'; font-src 'self'; img-src 'self'; connect-src https://${ApiHostName}; block-all-mixed-content;\"}];\n\n            /* return modified response */\n            callback(null, response);\n        };\n      # TODO: Update the Content-Security-Policy header above to include your API (i.e. replace ${ApiHostName})\n  CloudFormationAddSecurityHeadersRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: !Sub '${AppName}-${DeploymentType}-lambda-role-security-headers'\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n                - edgelambda.amazonaws.com\n            Action:\n              - 'sts:AssumeRole'\n      ManagedPolicyArns:\n        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'\n  CloudFormationAccessLogsBucket:\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: !Ref WebAccessLogBucket\n  CloudFormationOriginBucket:\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: !Ref WebHostName\n\n\nOutputs:\n  # Export SSL certificate arn\n  Certificate:\n    Description: SSL certificate ARN\n    Value: !Ref Certificate\n    Export:\n      Name: !Sub '${AWS::StackName}-certificate-arn'\n",
			"canonicalURL": "/github.com/JCSDA-internal/FSOI@b81c07ab693781269fa43b1d66bc69daf7258abd/-/blob/python/src/fsoi/resources/cloudformation_webapp.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/JCSDA-internal/FSOI/blob/b81c07ab693781269fa43b1d66bc69daf7258abd/python/src/fsoi/resources/cloudformation_webapp.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse version: at python/src/fsoi/resources/cloudformation_webapp.yaml:13:1: invalid version: invalid major version: strconv.Atoi: parsing \"\": invalid syntax"
}