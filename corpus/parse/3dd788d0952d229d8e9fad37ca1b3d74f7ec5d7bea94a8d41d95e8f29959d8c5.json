{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/oscer-io/oscer"
		},
		"file": {
			"name": "laravel-cms.yaml",
			"size": 0,
			"path": "resources/open-api/reference/laravel-cms.yaml",
			"byteSize": 10883,
			"content": "openapi: 3.0.0\ninfo:\n  title: Oscer\n  version: '1.0'\n  description: useful description needed\nservers:\n  - url: 'http://web.cms.test/api/cms'\npaths:\n  /auth/token:\n    post:\n      summary: Issuing an API token\n      operationId: post-auth-token\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: ../responses/issue-token.json\n        '422':\n          description: Unprocessable Entity\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                email:\n                  type: string\n                password:\n                  type: string\n              required:\n                - email\n                - password\n            examples:\n              Example:\n                value:\n                  email: admin@admin.com\n                  password: password\n      parameters: []\n      tags:\n        - Auth\n      description: useful description needed\n  /pages:\n    get:\n      summary: Your GET endpoint\n      tags:\n        - Publishing\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: ../responses/page-collection.json\n              examples: {}\n      operationId: get-pages\n      security:\n        - Token: []\n      description: useful description needed\n    post:\n      summary: ''\n      operationId: post-pages\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: ../responses/page.json\n      security:\n        - Token: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                slug:\n                  type: string\n                body:\n                  type: string\n              required:\n                - name\n      tags:\n        - Publishing\n      description: useful description needed\n  '/pages/{page_id}':\n    parameters:\n      - schema:\n          type: string\n        name: page_id\n        in: path\n        required: true\n    get:\n      summary: Your GET endpoint\n      tags:\n        - Publishing\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: ../responses/page.json\n      operationId: get-pages-page_id\n      security:\n        - Token: []\n      description: useful description needed\n    patch:\n      summary: ''\n      operationId: patch-pages-page_id\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: ../responses/page.json\n      security:\n        - Token: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                slug:\n                  type: string\n                body:\n                  type: string\n      tags:\n        - Publishing\n      description: useful description needed\n    delete:\n      summary: ''\n      operationId: delete-pages-page_id\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n      tags:\n        - Publishing\n      security:\n        - Token: []\n      description: useful description needed\n  /users:\n    get:\n      summary: Your GET endpoint\n      tags:\n        - Users\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: ../responses/user-collection.json\n      operationId: get-users\n      description: filll with useful description\n      security:\n        - Token: []\n    post:\n      summary: ''\n      operationId: post-users\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: ../responses/user.json\n      security:\n        - Token: []\n      description: needs description\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                email:\n                  type: string\n                bio:\n                  type: string\n              required:\n                - name\n                - email\n      tags:\n        - Users\n  '/users/{user_id}':\n    parameters:\n      - schema:\n          type: string\n        name: user_id\n        in: path\n        required: true\n    get:\n      summary: Your GET endpoint\n      tags:\n        - Users\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: ../responses/user.json\n      operationId: get-users-user_id\n      description: fetch a single user resource\n      security:\n        - Token: []\n    patch:\n      summary: ''\n      operationId: patch-users-user_id\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: ../responses/user.json\n      description: updates a single user resource\n      security:\n        - Token: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                email:\n                  type: string\n                bio:\n                  type: string\n      tags:\n        - Users\n    delete:\n      summary: ''\n      operationId: delete-users-user_id\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n      description: deletes a single user resource\n      tags:\n        - Users\n      security:\n        - Token: []\n  /options:\n    get:\n      summary: Create or update a single option\n      tags:\n        - Options\n      responses:\n        '200':\n          description: OK\n      operationId: get-options\n      description: get all available options wrapped by their tabs\n      security:\n        - Token: []\n    post:\n      summary: ''\n      operationId: post-options\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: ../responses/option.json\n      description: create or update a single option\n      security:\n        - Token: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                key:\n                  type: string\n                value:\n                  type: string\n              required:\n                - key\n                - value\n      tags:\n        - Options\n  /profile:\n    patch:\n      summary: Update profile\n      operationId: patch-profile\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: ../responses/user.json\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                email:\n                  type: string\n                bio:\n                  type: string\n                password:\n                  type: string\n                password_confirmation:\n                  type: string\n      tags:\n        - Profile\n      description: update your own profile. No values required.\n      security:\n        - Token: []\n  /profile/avatar:\n    post:\n      summary: Update profile avatar\n      operationId: post-profile-avatar\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  avatar:\n                    type: string\n      description: Update your avatar with a new image\n      security:\n        - Token: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                avatar:\n                  type: string\n                  format: binary\n              required:\n                - avatar\n      tags:\n        - Profile\n  /menus:\n    get:\n      summary: get all menus with item\n      tags:\n        - Menus\n      responses:\n        '200':\n          description: OK\n      operationId: get-menus\n      description: get all menus with ordered items\n      security:\n        - Token: []\n  '/menus/{menu_name}':\n    parameters:\n      - schema:\n          type: string\n        name: menu_name\n        in: path\n        required: true\n    post:\n      summary: ''\n      operationId: post-menus-menu_name\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                type: object\n                properties: {}\n      security:\n        - Token: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                url:\n                  type: string\n              required:\n                - name\n                - url\n      description: ''\n    patch:\n      summary: ''\n      operationId: put-menus-menu_name\n      responses:\n        '200':\n          description: OK\n      description: update a menu item\n      security:\n        - Token: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                url:\n                  type: string\n              required:\n                - name\n                - url\n    delete:\n      summary: ''\n      operationId: delete-menus-menu_name\n      responses:\n        '200':\n          description: OK\n      description: delete a single menu item\ncomponents:\n  schemas: {}\n  securitySchemes:\n    Token:\n      name: Authorization\n      type: apiKey\n      in: header\ntags:\n  - name: Auth\n  - name: Publishing\n  - name: Users\n  - name: Profile\n  - name: Options\n  - name: Menus\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /users: get: operation \"get-users\": responses: 200: content: \"application/json\": schema: parse schema: resolve \"../responses/user-collection.json\": find schema: external base \"../responses/user-collection.json\" is not supported"
}