{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/nilscodes/hazelnet"
		},
		"file": {
			"name": "hazelnet-community-openapi.yml",
			"size": 0,
			"path": "hazelnet-community/src/main/resources/hazelnet-community-openapi.yml",
			"byteSize": 98112,
			"content": "openapi: 3.0.0\ninfo:\n  version: '0.0.1'\n  title: 'HazelNet Community'\nservers:\n  - url: 'localhost:8085'\n\npaths:\n  /settings:\n    get:\n      summary: List all global settings\n      operationId: getGlobalSettings\n      tags:\n        - global\n      responses:\n        '200':\n          description: 'All Global Settings'\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: string\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /settings/{settingName}:\n    put:\n      summary: Create or update a setting\n      operationId: updateGlobalSetting\n      tags:\n        - global\n      parameters:\n        - $ref: '#/components/parameters/SettingNamePathParameter'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/GlobalSetting'\n      responses:\n        '200':\n          description: 'Updated setting'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GlobalSetting'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n    delete:\n      summary: 'Delete Global Setting by Name'\n      operationId: deleteGlobalSetting\n      tags:\n        - global\n      parameters:\n        - $ref: '#/components/parameters/SettingNamePathParameter'\n      responses:\n        '204':\n          description: 'Successful deletion'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /accounts:\n    post:\n      summary: 'Create an Account'\n      operationId: createAccount\n      tags:\n        - account\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Account'\n      responses:\n        '201':\n          description: 'Account data'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Account'\n  /accounts/{accountId}:\n    get:\n      summary: Get account info\n      operationId: getAccount\n      tags:\n        - account\n      parameters:\n        - $ref: '#/components/parameters/AccountIdPathParameter'\n      responses:\n        '200':\n          description: 'Account data'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Account'\n  /accounts/{accountId}/settings/{settingName}:\n    put:\n      summary: Create or update an account setting with the provided value\n      operationId: updateSetting\n      tags:\n        - account\n      parameters:\n        - $ref: '#/components/parameters/AccountIdPathParameter'\n        - $ref: '#/components/parameters/SettingNamePathParameter'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/EmbeddableSetting'\n      responses:\n        '200':\n          description: 'Account Setting'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmbeddableSetting'\n    delete:\n      summary: 'Delete account setting by Name'\n      operationId: deleteSetting\n      tags:\n        - account\n      parameters:\n        - $ref: '#/components/parameters/AccountIdPathParameter'\n        - $ref: '#/components/parameters/SettingNamePathParameter'\n      responses:\n        '204':\n          description: 'Successful deletion'\n  /accounts/{accountId}/handles:\n    get:\n      summary: Get all ADA Handles available to external accounts linked to this account\n      operationId: getHandlesForAccount\n      tags:\n        - account\n      parameters:\n        - $ref: '#/components/parameters/AccountIdPathParameter'\n      responses:\n        '200':\n          description: 'List of assets'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Handle'\n  /externalaccounts:\n    post:\n      summary: 'Create External Account'\n      operationId: createExternalAccount\n      tags:\n        - account\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ExternalAccount'\n      responses:\n        '201':\n          description: 'External account data'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExternalAccount'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /externalaccounts/{externalAccountId}:\n    get:\n      summary: 'Get Account'\n      operationId: getExternalAccount\n      tags:\n        - account\n      parameters:\n        - $ref: '#/components/parameters/ExternalAccountPathParameter'\n      responses:\n        '200':\n          description: 'External Account Info'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExternalAccount'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /externalaccounts/{externalAccountId}/verifications:\n    get:\n      summary: 'Get Verifications for this specific account'\n      operationId: getExternalAccountVerifications\n      tags:\n        - account\n        - verification\n      parameters:\n        - $ref: '#/components/parameters/ExternalAccountPathParameter'\n      responses:\n        '200':\n          description: 'List of all completed and outstanding verifications for this user'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Verification'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /externalaccounts/{externalAccountId}/pings:\n    get:\n      summary: 'Get pings for this specific account (sent and received)'\n      operationId: getExternalAccountPings\n      tags:\n        - account\n        - ping\n      parameters:\n        - $ref: '#/components/parameters/ExternalAccountPathParameter'\n      responses:\n        '200':\n          description: 'List of all pings (sent and received) for this user'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ExternalAccountPing'\n  /externalaccounts/{externalAccountId}/pings/{pingId}:\n    patch:\n      summary: 'Update a specific ping the user is a sender or recipient of'\n      operationId: updateExternalAccountPing\n      tags:\n        - account\n        - ping\n      parameters:\n        - $ref: '#/components/parameters/ExternalAccountPathParameter'\n        - $ref: '#/components/parameters/PingIdPathParameter'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ExternalAccountPingPartial'\n      responses:\n        '200':\n          description: 'The updated ping object'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExternalAccountPing'\n  /externalaccounts/{externalAccountId}/whitelists:\n    get:\n      summary: 'Get whitelists this specific account is signed up for'\n      operationId: getExternalAccountWhitelists\n      tags:\n        - account\n        - ping\n      parameters:\n        - $ref: '#/components/parameters/ExternalAccountPathParameter'\n      responses:\n        '200':\n          description: 'List of all whitelists this user is signed up for'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/SummarizedWhitelistSignup'\n  /externalaccounts/{externalAccountId}/premium:\n    get:\n      summary: 'Get Premium data for this specific account'\n      operationId: getPremiumInfo\n      tags:\n        - account\n        - premium\n      parameters:\n        - $ref: '#/components/parameters/ExternalAccountPathParameter'\n      responses:\n        '200':\n          description: 'List of premium status, total delegation etc.'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ExternalAccountPremiumInfo'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /externalaccounts/{externalAccountId}/import:\n    post:\n      summary: 'Import any outstanding verifications from other systems for this user'\n      operationId: importExternalVerifications\n      tags:\n        - account\n        - verification\n      parameters:\n        - $ref: '#/components/parameters/ExternalAccountPathParameter'\n      responses:\n        '200':\n          description: 'List of imported verifications, if any, empty list otherwise.'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/VerificationImport'\n  /externalaccounts/{externalAccountId}/account:\n    put:\n      summary: 'Get or create a main account for this external account'\n      operationId: setAccountForExternalAccount\n      tags:\n        - account\n      parameters:\n        - $ref: '#/components/parameters/ExternalAccountPathParameter'\n      responses:\n        '200':\n          description: 'The existing account associated with this external account, or the newly created account'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Account'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /externalaccounts/discord/{discordUserId}:\n    get:\n      summary: Get external account matching a Discord user ID\n      operationId: getExternalAccountForDiscordUser\n      tags:\n        - account\n      parameters:\n        - $ref: '#/components/parameters/DiscordUserIdPathParameter'\n      responses:\n        '200':\n          description: 'External Account Info that was created or matching existing external account'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExternalAccount'\n        '404':\n          description: No external account found for this Discord user ID\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n\n    put:\n      summary: 'Create/Retrieve External account for Discord user'\n      operationId: setExternalAccountForDiscordUser\n      tags:\n        - account\n      parameters:\n        - $ref: '#/components/parameters/DiscordUserIdPathParameter'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ExternalAccount'\n      responses:\n        '200':\n          description: 'External Account Info that was created or matching existing external account'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExternalAccount'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /verifications:\n    post:\n      summary: 'Request Verification for an External Account'\n      operationId: requestVerification\n      tags:\n        - verification\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/VerificationRequest'\n      responses:\n        '201':\n          description: 'Verification details'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Verification'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /snapshots/stake:\n    post:\n      summary: 'Schedule a token snapshot'\n      operationId: scheduleSnapshot\n      tags:\n        - snapshot\n        - token\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MultiAssetSnapshot'\n      responses:\n        '201':\n          description: 'Snapshot details'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MultiAssetSnapshot'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /verifications/{verificationId}:\n    get:\n      summary: 'Get Verification Info'\n      operationId: getVerification\n      tags:\n        - account\n      parameters:\n        - $ref: '#/components/parameters/VerificationPathParameter'\n      responses:\n        '200':\n          description: 'Verification Details'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Verification'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n    delete:\n      summary: 'Delete Verification Info by ID'\n      operationId: deleteVerification\n      tags:\n        - account\n      parameters:\n        - $ref: '#/components/parameters/VerificationPathParameter'\n      responses:\n        '204':\n          description: 'Successful deletion'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /pings:\n    post:\n      summary: Ping another user\n      operationId: addPing\n      tags:\n        - ping\n        - account\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ExternalAccountPing'\n      responses:\n        '201':\n          description: 'The ping created'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExternalAccountPing'\n          headers:\n            Location:\n              $ref: '#/components/schemas/CreatedResponseHeader'\n  /claimlists:\n    post:\n      summary: Add Claim List\n      operationId: addClaimList\n      tags:\n        - claims\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ClaimList'\n      responses:\n        '201':\n          description: 'Claim List'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClaimList'\n          headers:\n            Location:\n              $ref: '#/components/schemas/CreatedResponseHeader'\n  /claimlists/{claimListId}:\n    get:\n      summary: Get Claim List\n      operationId: getClaimList\n      tags:\n        - claims\n      parameters:\n        - $ref: '#/components/parameters/ClaimListIdPathParameter'\n      responses:\n        '200':\n          description: 'Claim List'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClaimList'\n  /claimlists/{claimListId}/orders/physical:\n    get:\n      summary: Get physical orders for this claim list\n      operationId: listPhysicalOrders\n      tags:\n        - claims\n      parameters:\n        - $ref: '#/components/parameters/ClaimListIdPathParameter'\n      responses:\n        '200':\n          description: 'Physical order'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/PhysicalOrder'\n    post:\n      summary: Add a physical order for this claim list\n      operationId: addPhysicalOrder\n      tags:\n        - claims\n      parameters:\n        - $ref: '#/components/parameters/ClaimListIdPathParameter'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PhysicalOrder'\n      responses:\n        '201':\n          description: 'Physical order'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PhysicalOrder'\n          headers:\n            Location:\n              $ref: '#/components/schemas/CreatedResponseHeader'\n  /claimlists/{claimListId}/orders/physical/{orderId}:\n    get:\n      summary: Get physical order by order ID\n      operationId: getPhysicalOrder\n      tags:\n        - claims\n      parameters:\n        - $ref: '#/components/parameters/ClaimListIdPathParameter'\n        - $ref: '#/components/parameters/OrderIdPathParameter'\n      responses:\n        '200':\n          description: 'Physical order'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PhysicalOrder'\n  /products:\n    post:\n      summary: Add Product\n      operationId: addProduct\n      tags:\n        - claims\n        - products\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PhysicalProduct'\n      responses:\n        '201':\n          description: 'Physical product'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PhysicalProduct'\n          headers:\n            Location:\n              $ref: '#/components/schemas/CreatedResponseHeader'\n  /products/{productId}:\n    get:\n      summary: Get Product Info\n      operationId: getProduct\n      tags:\n        - claims\n        - products\n      parameters:\n        - $ref: '#/components/parameters/ProductIdPathParameter'\n      responses:\n        '200':\n          description: 'Physical Product'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PhysicalProduct'\n  /discord/servers:\n    get:\n      summary: Get all Discord servers\n      operationId: listDiscordServers\n      tags:\n        - discord\n      responses:\n        '201':\n          description: 'List of Discord servers'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DiscordServer'\n    post:\n      summary: Add Discord Server\n      operationId: addDiscordServer\n      tags:\n        - discord\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DiscordServer'\n      responses:\n        '201':\n          description: 'Discord Server'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DiscordServer'\n          headers:\n            Location:\n              $ref: '#/components/schemas/CreatedResponseHeader'\n  /discord/servers/{guildId}:\n    get:\n      summary: Get Discord Server Details\n      operationId: getDiscordServer\n      tags:\n        - discord\n      parameters:\n        - $ref: '#/components/parameters/GuildIdPathParameter'\n      responses:\n        '200':\n          description: 'Discord Server'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DiscordServer'\n    patch:\n      summary: Update Discord Server\n      operationId: updateDiscordServer\n      tags:\n        - discord\n      parameters:\n        - $ref: '#/components/parameters/GuildIdPathParameter'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DiscordServerPartial'\n      responses:\n        '200':\n          description: 'Updated Discord Server'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DiscordServer'\n  /discord/servers/{guildId}/roleassignments/delegatorroles:\n    get:\n      summary: Get the current set of delegator role assignments for this server\n      operationId: getCurrentDelegatorRoleAssignments\n      tags:\n        - discord\n      parameters:\n        - $ref: '#/components/parameters/GuildIdPathParameter'\n      responses:\n        '200':\n          description: 'Role assignment list for delegation roles'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DiscordRoleAssignment'\n  /discord/servers/{guildId}/roleassignments/tokenroles:\n    get:\n      summary: Get the current set of token role assignments for this server\n      operationId: getCurrentTokenRoleAssignments\n      tags:\n        - discord\n      parameters:\n        - $ref: '#/components/parameters/GuildIdPathParameter'\n      responses:\n        '200':\n          description: 'Role assignment list for token roles'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DiscordRoleAssignment'\n  /discord/servers/{guildId}/members:\n    get:\n      summary: Get the list of external accounts that are members of this discord server\n      operationId: getExternalAccounts\n      tags:\n        - discord\n        - account\n      parameters:\n        - $ref: '#/components/parameters/GuildIdPathParameter'\n      responses:\n        '200':\n          description: 'Discord Member List'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DiscordMember'\n    post:\n      summary: Connect an external account to this discord server\n      operationId: connectExternalAccount\n      tags:\n        - discord\n        - account\n      parameters:\n        - $ref: '#/components/parameters/GuildIdPathParameter'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DiscordMember'\n      responses:\n        '201':\n          description: 'Added discord member'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DiscordMember'\n  /discord/servers/{guildId}/members/{externalAccountId}:\n    get:\n      summary: Get your association details for this Discord\n      operationId: getExternalAccountOnDiscord\n      tags:\n        - discord\n        - account\n      parameters:\n        - $ref: '#/components/parameters/GuildIdPathParameter'\n        - $ref: '#/components/parameters/ExternalAccountPathParameter'\n      responses:\n        '200':\n          description: Discord member details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DiscordMember'\n    patch:\n      summary: Update your association details for this Discord\n      operationId: updateExternalAccountOnDiscord\n      tags:\n        - discord\n        - account\n      parameters:\n        - $ref: '#/components/parameters/GuildIdPathParameter'\n        - $ref: '#/components/parameters/ExternalAccountPathParameter'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DiscordMemberPartial'\n      responses:\n        '200':\n          description: Updated discord member details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DiscordMember'\n    delete:\n      summary: Unlink an external account from this discord server\n      operationId: disconnectExternalAccount\n      tags:\n        - discord\n        - account\n      parameters:\n        - $ref: '#/components/parameters/GuildIdPathParameter'\n        - $ref: '#/components/parameters/ExternalAccountPathParameter'\n        - name: skipRoleUpdates\n          in: query\n          description: Set to true if no role updates should be triggered as part of this unlinking\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        '204':\n          description: 'Successful deletion'\n  /discord/servers/{guildId}/members/{externalAccountId}/claimlists:\n    get:\n      summary: Get the claim lists this user is eligible for on this Discord server, and include product information they can claim\n      operationId: getEligibleClaimListsOfUser\n      tags:\n        - discord\n        - claims\n      parameters:\n        - $ref: '#/components/parameters/GuildIdPathParameter'\n        - $ref: '#/components/parameters/ExternalAccountPathParameter'\n      responses:\n        '200':\n          description: 'All claim lists this user is eligible for, including the products associated with their claims'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClaimListsWithProducts'\n  /discord/servers/{guildId}/members/{externalAccountId}/claimlists/{claimListId}/orders:\n    get:\n      summary: Get any order this user might have had for the given claim list\n      operationId: getOrderOfUserForClaimList\n      tags:\n        - discord\n        - claims\n      parameters:\n        - $ref: '#/components/parameters/GuildIdPathParameter'\n        - $ref: '#/components/parameters/ExternalAccountPathParameter'\n        - $ref: '#/components/parameters/ClaimListIdPathParameter'\n      responses:\n        '200':\n          description: 'This users order for this claim list'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PhysicalOrder'\n        '404':\n          description: 'No order found for this claim list and user'\n    post:\n      summary: Submit a new order for this claim list\n      description: This will overwrite any existing orders for this claim list/user combination\n      operationId: setOrderOfUserForClaimList\n      tags:\n        - discord\n      parameters:\n        - $ref: '#/components/parameters/GuildIdPathParameter'\n        - $ref: '#/components/parameters/ExternalAccountPathParameter'\n        - $ref: '#/components/parameters/ClaimListIdPathParameter'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PhysicalOrder'\n      responses:\n        '200':\n          description: 'The created order for this claim list'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PhysicalOrder'\n  /discord/servers/{guildId}/premium:\n    get:\n      summary: Get the information about the premium status of this server\n      operationId: getPremiumInfo\n      tags:\n        - discord\n        - premium\n      parameters:\n        - $ref: '#/components/parameters/GuildIdPathParameter'\n      responses:\n        '200':\n          description: 'Premium Info'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DiscordServerPremiumInfo'\n  /discord/servers/{guildId}/payment:\n    get:\n      summary: Get the current outstanding payment request, if any\n      operationId: getCurrentPayment\n      tags:\n        - discord\n        - premium\n      parameters:\n        - $ref: '#/components/parameters/GuildIdPathParameter'\n      responses:\n        '200':\n          description: 'Incoming payment info'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/IncomingDiscordPayment'\n    post:\n      summary: Submit a new incoming payment request\n      operationId: requestIncomingPayment\n      tags:\n        - discord\n        - premium\n      parameters:\n        - $ref: '#/components/parameters/GuildIdPathParameter'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/IncomingDiscordPaymentRequest'\n      responses:\n        '200':\n          description: 'The created incoming payment'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IncomingDiscordPayment'\n    delete:\n      summary: Cancel an outstanding payment request\n      operationId: cancelIncomingPayment\n      tags:\n        - discord\n        - premium\n      parameters:\n        - $ref: '#/components/parameters/GuildIdPathParameter'\n      responses:\n        '204':\n          description: 'Successful deletion'\n  /discord/servers/{guildId}/claimlists/{claimListIdOrName}/orders:\n    get:\n      summary: Get all orders for this claim list\n      operationId: getAllOrdersForClaimList\n      tags:\n        - discord\n        - claims\n      parameters:\n        - $ref: '#/components/parameters/GuildIdPathParameter'\n        - $ref: '#/components/parameters/ClaimListIdOrNamePathParameter'\n      responses:\n        '200':\n          description: 'List of orders'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/PhysicalOrder'\n  /discord/servers/{guildId}/claimlists/{claimListIdOrName}/products:\n    get:\n      summary: Get all available products for this claim list\n      operationId: getAllProductsForClaimList\n      tags:\n        - discord\n        - claims\n      parameters:\n        - $ref: '#/components/parameters/GuildIdPathParameter'\n        - $ref: '#/components/parameters/ClaimListIdOrNamePathParameter'\n      responses:\n        '200':\n          description: 'List of products'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/PhysicalProduct'\n  /discord/servers/{guildId}/tokenpolicies:\n    post:\n      summary: Add an official token policy to this discord server\n      operationId: addTokenPolicy\n      tags:\n        - discord\n        - token\n      parameters:\n        - $ref: '#/components/parameters/GuildIdPathParameter'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TokenPolicy'\n      responses:\n        '201':\n          description: 'Token Policy'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TokenPolicy'\n          headers:\n            Location:\n              $ref: '#/components/schemas/CreatedResponseHeader'\n  /discord/servers/{guildId}/tokenpolicies/{policyId}:\n    delete:\n      summary: Remove an official token policy from this discord server\n      operationId: deleteTokenPolicy\n      tags:\n        - discord\n        - token\n      parameters:\n        - $ref: '#/components/parameters/GuildIdPathParameter'\n        - $ref: '#/components/parameters/PolicyIdPathParameter'\n      responses:\n        '204':\n          description: Successful deletion\n  /discord/servers/{guildId}/stakepools:\n    post:\n      summary: Add an official stakepool to this discord server\n      operationId: addStakepool\n      tags:\n        - discord\n        - stakepool\n      parameters:\n        - $ref: '#/components/parameters/GuildIdPathParameter'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Stakepool'\n      responses:\n        '201':\n          description: 'Details of added stakepool'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Stakepool'\n          headers:\n            Location:\n              $ref: '#/components/schemas/CreatedResponseHeader'\n  /discord/servers/{guildId}/stakepools/{poolHash}:\n    delete:\n      summary: Remove an official stakepool from this discord server\n      operationId: deleteStakepool\n      tags:\n        - discord\n        - stakepool\n      parameters:\n        - $ref: '#/components/parameters/GuildIdPathParameter'\n        - $ref: '#/components/parameters/PoolHashPathParameter'\n      responses:\n        '204':\n          description: Successful deletion\n  /discord/servers/{guildId}/delegatorroles:\n    post:\n      summary: Add an auto-assigned role based on stakepool delegation to this discord server\n      operationId: addDelegatorRole\n      tags:\n        - discord\n        - stakepool\n      parameters:\n        - $ref: '#/components/parameters/GuildIdPathParameter'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DiscordDelegatorRole'\n      responses:\n        '201':\n          description: 'Newly created Delegator Role'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DiscordDelegatorRole'\n          headers:\n            Location:\n              $ref: '#/components/schemas/CreatedResponseHeader'\n  /discord/servers/{guildId}/delegatorroles/{delegatorRoleId}:\n    delete:\n      summary: Remove a delegator role assignment from this discord server\n      operationId: deleteDelegatorRole\n      tags:\n        - discord\n        - stakepool\n      parameters:\n        - $ref: '#/components/parameters/GuildIdPathParameter'\n        - $ref: '#/components/parameters/DelegatorRoleIdPathParameter'\n      responses:\n        '204':\n          description: Successful deletion\n  /discord/servers/{guildId}/tokenroles:\n    post:\n      summary: Add an auto-assigned role based on token ownership to this discord server\n      operationId: addTokenOwnershipRole\n      tags:\n        - discord\n        - token\n      parameters:\n        - $ref: '#/components/parameters/GuildIdPathParameter'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DiscordTokenRole'\n      responses:\n        '201':\n          description: 'Newly created token role'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DiscordTokenRole'\n          headers:\n            Location:\n              $ref: '#/components/schemas/CreatedResponseHeader'\n  /discord/servers/{guildId}/tokenroles/{tokenRoleId}:\n    patch:\n      summary: Update a token role\n      operationId: updateTokenOwnershipRole\n      tags:\n        - discord\n        - token\n      parameters:\n        - $ref: '#/components/parameters/GuildIdPathParameter'\n        - $ref: '#/components/parameters/TokenRoleIdPathParameter'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DiscordTokenRolePartial'\n      responses:\n        '200':\n          description: 'Updated token role'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DiscordTokenRole'\n    delete:\n      summary: Remove a token role assignment from this discord server\n      operationId: deleteTokenOwnershipRole\n      tags:\n        - discord\n        - token\n      parameters:\n        - $ref: '#/components/parameters/GuildIdPathParameter'\n        - $ref: '#/components/parameters/TokenRoleIdPathParameter'\n      responses:\n        '204':\n          description: Successful deletion\n  /discord/servers/{guildId}/tokenroles/{tokenRoleId}/metadatafilters:\n    post:\n      summary: Add a metadata filter to the designated token role\n      operationId: addMetadataFilterToTokenRole\n      tags:\n        - discord\n        - token\n      parameters:\n        - $ref: '#/components/parameters/GuildIdPathParameter'\n        - $ref: '#/components/parameters/TokenRoleIdPathParameter'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MetadataFilter'\n      responses:\n        '201':\n          description: 'The newly added metadata filter for this token role'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MetadataFilter'\n          headers:\n            Location:\n              $ref: '#/components/schemas/CreatedResponseHeader'\n  /discord/servers/{guildId}/tokenroles/{tokenRoleId}/metadatafilters/{filterId}:\n    delete:\n      summary: Remove a metadata filter from the designated token role\n      operationId: deleteMetadataFilterFromTokenRole\n      tags:\n        - discord\n        - token\n      parameters:\n        - $ref: '#/components/parameters/GuildIdPathParameter'\n        - $ref: '#/components/parameters/TokenRoleIdPathParameter'\n        - $ref: '#/components/parameters/TokenRoleFilterIdPathParameter'\n      responses:\n        '204':\n          description: Successful deletion\n  /discord/servers/{guildId}/polls:\n    get:\n      summary: 'Get polls for this Discord server'\n      operationId: listPolls\n      tags:\n        - discord\n        - poll\n      parameters:\n        - $ref: '#/components/parameters/GuildIdPathParameter'\n      responses:\n        '200':\n          description: 'All polls for this server'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DiscordPoll'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n    post:\n      summary: Create a poll on this server\n      operationId: addPoll\n      tags:\n        - discord\n        - poll\n      parameters:\n        - $ref: '#/components/parameters/GuildIdPathParameter'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DiscordPoll'\n      responses:\n        '201':\n          description: 'Poll'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DiscordPoll'\n          headers:\n            Location:\n              $ref: '#/components/schemas/CreatedResponseHeader'\n  /discord/servers/{guildId}/polls/{pollId}:\n    get:\n      summary: 'Get specific poll for this Discord server'\n      operationId: getPoll\n      tags:\n        - discord\n        - poll\n      parameters:\n        - $ref: '#/components/parameters/GuildIdPathParameter'\n        - $ref: '#/components/parameters/PollIdPathParameter'\n      responses:\n        '200':\n          description: 'The poll with the specified ID'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DiscordPoll'\n    patch:\n      summary: Update the settings and dates for this poll\n      operationId: updatePoll\n      tags:\n        - discord\n        - poll\n      parameters:\n        - $ref: '#/components/parameters/GuildIdPathParameter'\n        - $ref: '#/components/parameters/PollIdPathParameter'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DiscordPollPartial'\n      responses:\n        '200':\n          description: 'Poll with updated details'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DiscordPoll'\n\n    delete:\n      summary: Remove a poll from this Discord server, including all verified votes, options etc.\n      operationId: deletePoll\n      tags:\n        - discord\n        - poll\n      parameters:\n        - $ref: '#/components/parameters/GuildIdPathParameter'\n        - $ref: '#/components/parameters/PollIdPathParameter'\n      responses:\n        '204':\n          description: Successful deletion\n  /discord/servers/{guildId}/polls/{pollId}/votes:\n    get:\n      summary: 'Get votes for this poll'\n      operationId: getVotesInPoll\n      tags:\n        - discord\n        - poll\n      parameters:\n        - $ref: '#/components/parameters/GuildIdPathParameter'\n        - $ref: '#/components/parameters/PollIdPathParameter'\n      responses:\n        '200':\n          description: 'All votes for this poll'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/VoteData'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /discord/servers/{guildId}/polls/{pollId}/votes/{externalAccountId}:\n    get:\n      summary: Get voting power and votes for this poll for a specific account\n      operationId: getVoteOfUser\n      tags:\n        - discord\n        - poll\n      parameters:\n        - $ref: '#/components/parameters/GuildIdPathParameter'\n        - $ref: '#/components/parameters/PollIdPathParameter'\n        - $ref: '#/components/parameters/ExternalAccountPathParameter'\n      responses:\n        '200':\n          description: 'Vote'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VoteData'\n    post:\n      summary: Vote for a specific option\n      operationId: setVoteForUser\n      tags:\n        - discord\n        - poll\n      parameters:\n        - $ref: '#/components/parameters/GuildIdPathParameter'\n        - $ref: '#/components/parameters/PollIdPathParameter'\n        - $ref: '#/components/parameters/ExternalAccountPathParameter'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/DiscordPollOptionId'\n      responses:\n        '200':\n          description: 'Vote data for the user and the poll'\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  user:\n                    $ref: '#/components/schemas/VoteData'\n                  poll:\n                    $ref: '#/components/schemas/VoteData'\n  /discord/servers/{guildId}/marketplaces/channels:\n    get:\n      summary: 'Get marketplace channels for this Discord server'\n      operationId: listMarketplaceChannels\n      tags:\n        - discord\n        - marketplace\n      parameters:\n        - $ref: '#/components/parameters/GuildIdPathParameter'\n      responses:\n        '200':\n          description: 'All marketplace channels for this server'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DiscordMarketplaceChannel'\n    post:\n      summary: Create a marketplace channel on this server\n      operationId: addMarketplaceChannel\n      tags:\n        - discord\n        - marketplace\n      parameters:\n        - $ref: '#/components/parameters/GuildIdPathParameter'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DiscordMarketplaceChannel'\n      responses:\n        '201':\n          description: 'A new marketplace channel object'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DiscordMarketplaceChannel'\n          headers:\n            Location:\n              $ref: '#/components/schemas/CreatedResponseHeader'\n  /discord/servers/{guildId}/marketplaces/channels/{marketplaceChannelId}:\n    get:\n      summary: 'Get specific marketplace channel for this Discord server'\n      operationId: getMarketplaceChannel\n      tags:\n        - discord\n        - marketplace\n      parameters:\n        - $ref: '#/components/parameters/GuildIdPathParameter'\n        - $ref: '#/components/parameters/MarketplaceChannelIdPathParameter'\n      responses:\n        '200':\n          description: 'The poll with the specified ID'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DiscordMarketplaceChannel'\n    delete:\n      summary: Remove a marketplace channel from this Discord server\n      operationId: deleteMarketplaceChannel\n      tags:\n        - discord\n        - marketplace\n      parameters:\n        - $ref: '#/components/parameters/GuildIdPathParameter'\n        - $ref: '#/components/parameters/MarketplaceChannelIdPathParameter'\n      responses:\n        '204':\n          description: Successful deletion\n  /discord/servers/{guildId}/marketplaces/channels/{marketplaceChannelId}/metadatafilters:\n    post:\n      summary: Add a metadata filter to the designated marketplace channel\n      operationId: addMetadataFilterToMarketplaceChannel\n      tags:\n        - discord\n        - token\n      parameters:\n        - $ref: '#/components/parameters/GuildIdPathParameter'\n        - $ref: '#/components/parameters/MarketplaceChannelIdPathParameter'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MetadataFilter'\n      responses:\n        '201':\n          description: 'The newly added metadata filter for this marketplace channel'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MetadataFilter'\n          headers:\n            Location:\n              $ref: '#/components/schemas/CreatedResponseHeader'\n  /discord/servers/{guildId}/marketplaces/channels/{marketplaceChannelId}/metadatafilters/{filterId}:\n    delete:\n      summary: Remove a metadata filter from the designated marketplace channel\n      operationId: deleteMetadataFilterFromMarketplaceChannel\n      tags:\n        - discord\n        - token\n      parameters:\n        - $ref: '#/components/parameters/GuildIdPathParameter'\n        - $ref: '#/components/parameters/MarketplaceChannelIdPathParameter'\n        - $ref: '#/components/parameters/TrackerFilterIdPathParameter'\n      responses:\n        '204':\n          description: Successful deletion\n  /discord/servers/{guildId}/whitelists:\n    post:\n      summary: Add a whitelist for owners of a specific role to this server\n      operationId: addWhitelist\n      tags:\n        - discord\n        - whitelist\n      parameters:\n        - $ref: '#/components/parameters/GuildIdPathParameter'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Whitelist'\n      responses:\n        '201':\n          description: 'Whitelist'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Whitelist'\n          headers:\n            Location:\n              $ref: '#/components/schemas/CreatedResponseHeader'\n  /discord/servers/{guildId}/whitelists/shared:\n    get:\n      summary: Get external whitelists shared with this Discord server\n      operationId: getSharedWhitelists\n      tags:\n        - discord\n        - whitelist\n      parameters:\n        - $ref: '#/components/parameters/GuildIdPathParameter'\n        - name: withSignups\n          in: query\n          description: If signups should be included\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        '200':\n          description: All whitelists shared with this server\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/SharedWhitelist'\n  /discord/servers/{guildId}/whitelists/{whitelistId}:\n    patch:\n      summary: Update a whitelist on this discord server\n      operationId: updateWhitelist\n      tags:\n        - discord\n        - whitelist\n      parameters:\n        - $ref: '#/components/parameters/GuildIdPathParameter'\n        - $ref: '#/components/parameters/WhitelistIdPathParameter'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/WhitelistPartial'\n      responses:\n        '200':\n          description: Successful update, new whitelist content\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Whitelist'\n    delete:\n      summary: Remove a whitelist from this discord server\n      operationId: deleteWhitelist\n      tags:\n        - discord\n        - whitelist\n      parameters:\n        - $ref: '#/components/parameters/GuildIdPathParameter'\n        - $ref: '#/components/parameters/WhitelistIdPathParameter'\n      responses:\n        '204':\n          description: Successful deletion\n  /discord/servers/{guildId}/whitelists/{whitelistId}/signups:\n    get:\n      summary: 'Get signups for a whitelist'\n      operationId: getWhitelistSignups\n      tags:\n        - discord\n        - whitelist\n      parameters:\n        - $ref: '#/components/parameters/GuildIdPathParameter'\n        - $ref: '#/components/parameters/WhitelistIdOrNamePathParameter'\n      responses:\n        '200':\n          description: 'All signups for this whitelist'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/WhitelistSignup'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n    post:\n      summary: Sign up for a whitelist\n      operationId: addWhitelistSignup\n      tags:\n        - discord\n        - whitelist\n      parameters:\n        - $ref: '#/components/parameters/GuildIdPathParameter'\n        - $ref: '#/components/parameters/WhitelistIdPathParameter'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/WhitelistSignup'\n      responses:\n        '201':\n          description: 'Whitelist signup information'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WhitelistSignup'\n          headers:\n            Location:\n              $ref: '#/components/schemas/CreatedResponseHeader'\n        '400':\n          description: 'Failed signup due to conditions not being met'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /discord/servers/{guildId}/whitelists/{whitelistId}/signups/{externalAccountId}:\n    get:\n      summary: Get the whitelist signup for a specific external account for this Discord server\n      operationId: getWhitelistSignup\n      tags:\n        - discord\n        - whitelist\n      parameters:\n        - $ref: '#/components/parameters/GuildIdPathParameter'\n        - $ref: '#/components/parameters/WhitelistIdPathParameter'\n        - $ref: '#/components/parameters/ExternalAccountPathParameter'\n      responses:\n        '200':\n          description: 'Whitelist signup information'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WhitelistSignup'\n        '404':\n          description: 'No whitelist signup for this external account present'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n    delete:\n      summary: Remove a whitelist signup from this discord server\n      operationId: deleteWhitelistSignup\n      tags:\n        - discord\n        - whitelist\n      parameters:\n        - $ref: '#/components/parameters/GuildIdPathParameter'\n        - $ref: '#/components/parameters/WhitelistIdPathParameter'\n        - $ref: '#/components/parameters/ExternalAccountPathParameter'\n      responses:\n        '204':\n          description: Successful deletion\n  /discord/servers/{guildId}/settings/{settingName}:\n    put:\n      summary: Create or update a guild setting with the provided value\n      operationId: updateSetting\n      tags:\n        - discord\n      parameters:\n        - $ref: '#/components/parameters/GuildIdPathParameter'\n        - $ref: '#/components/parameters/SettingNamePathParameter'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/EmbeddableSetting'\n      responses:\n        '200':\n          description: 'Token Policy'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmbeddableSetting'\n    delete:\n      summary: 'Delete guild setting by Name'\n      operationId: deleteSetting\n      tags:\n        - discord\n      parameters:\n        - $ref: '#/components/parameters/GuildIdPathParameter'\n        - $ref: '#/components/parameters/SettingNamePathParameter'\n      responses:\n        '204':\n          description: 'Successful deletion'\n  /discord/servers/{guildId}/accesstoken:\n    post:\n      summary: Generate (or regenerate) the API access token for this Discord server for the external HAZELnet API\n      operationId: regenerateAccessToken\n      tags:\n        - discord\n        - security\n      parameters:\n        - $ref: '#/components/parameters/GuildIdPathParameter'\n      responses:\n        '201':\n          description: 'Access token to use with authorization header in external API'\n          content:\n            application/json:\n              schema:\n                type: string\n          headers:\n            Location:\n              $ref: '#/components/schemas/CreatedResponseHeader'\n    delete:\n      summary: Delete the currently active access token for this Discord server\n      operationId: deleteAccessToken\n      tags:\n        - discord\n        - security\n      parameters:\n        - $ref: '#/components/parameters/GuildIdPathParameter'\n      responses:\n        '204':\n          description: Successful deletion\n  /discord/polls/announcements:\n    get:\n      summary: Get all polls that have announcements that are due to be posted\n      operationId: listAnnouncablePolls\n      tags:\n        - discord\n        - polls\n      responses:\n        '200':\n          description: 'List of servers and corresponding polls to announce'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DiscordPollUpdate'\n  /discord/polls/resultupdates:\n    get:\n      summary: Get all polls that have result updates to edit existing messages\n      operationId: listPollsToBeAnnounced\n      tags:\n        - discord\n        - polls\n      responses:\n        '200':\n          description: 'List of servers and corresponding polls to update the results for'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DiscordPollUpdate'\n  /oura:\n    post:\n      summary: Publish an event from Oura to the community service (to react to mint events)\n      operationId: receiveEvent\n      tags:\n        - oura\n        - global\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/OuraEvent'\n      responses:\n        '200':\n          description: 'Empty response body and 200 response (as prescribed by Oura)'\n\ncomponents:\n  parameters:\n    AccountIdPathParameter:\n      name: accountId\n      in: path\n      description: The account ID\n      required: true\n      style: simple\n      example: 12\n      schema:\n        type: integer\n        format: int64\n    GuildIdPathParameter:\n      name: guildId\n      in: path\n      description: The Discord Server's Guild ID\n      required: true\n      style: simple\n      schema:\n        $ref: '#/components/schemas/DiscordGuild'\n    DiscordUserIdPathParameter:\n      name: discordUserId\n      in: path\n      description: The Discord Users's ID\n      required: true\n      style: simple\n      schema:\n        $ref: '#/components/schemas/DiscordUser'\n    PingIdPathParameter:\n      name: pingId\n      in: path\n      description: The ping ID\n      required: true\n      style: simple\n      example: 2\n      schema:\n        type: integer\n        format: int64\n    PolicyIdPathParameter:\n      name: policyId\n      in: path\n      description: The Policy ID\n      required: true\n      style: simple\n      schema:\n        $ref: '#/components/schemas/TokenPolicyId'\n    PoolHashPathParameter:\n      name: poolHash\n      in: path\n      description: The Stakepool hash\n      required: true\n      style: simple\n      schema:\n        $ref: '#/components/schemas/StakepoolHash'\n    DelegatorRoleIdPathParameter:\n      name: delegatorRoleId\n      in: path\n      description: The ID of this delegator role assignment\n      required: true\n      style: simple\n      example: 235\n      schema:\n        type: integer\n        format: int64\n    TokenRoleIdPathParameter:\n      name: tokenRoleId\n      in: path\n      description: The ID of this token role assignment\n      required: true\n      style: simple\n      example: 155\n      schema:\n        type: integer\n        format: int64\n    TokenRoleFilterIdPathParameter:\n      name: filterId\n      in: path\n      description: The ID of this token role assignments filter\n      required: true\n      style: simple\n      example: 2\n      schema:\n        type: integer\n        format: int64\n    TrackerFilterIdPathParameter:\n      name: filterId\n      in: path\n      description: The ID of this marketplace channel filter\n      required: true\n      style: simple\n      example: 2\n      schema:\n        type: integer\n        format: int64\n    PollIdPathParameter:\n      name: pollId\n      in: path\n      description: The ID of this poll\n      required: true\n      style: simple\n      example: 6121\n      schema:\n        type: integer\n        format: int64\n    ProductIdPathParameter:\n      name: productId\n      in: path\n      description: The ID of this product\n      required: true\n      style: simple\n      example: 62362\n      schema:\n        type: integer\n        format: int64\n    ClaimListIdPathParameter:\n      name: claimListId\n      in: path\n      description: The ID of this claim list\n      required: true\n      style: simple\n      example: 4144\n      schema:\n        type: integer\n        format: int64\n    ClaimListIdOrNamePathParameter:\n      name: claimListIdOrName\n      in: path\n      description: The ID or name of this claim list\n      required: true\n      style: simple\n      examples:\n        string:\n          summary: Claim list name as string\n          value: my-list-name\n        number:\n          summary: Claim list ID\n          value: 231\n      schema:\n        type: string\n    OrderIdPathParameter:\n      name: orderId\n      in: path\n      description: The ID of this order\n      required: true\n      style: simple\n      example: 44\n      schema:\n        type: integer\n        format: int64\n    MarketplaceChannelIdPathParameter:\n      name: marketplaceChannelId\n      in: path\n      description: The ID of the marketplace channel info\n      required: true\n      style: simple\n      example: 85\n      schema:\n        type: integer\n        format: int64\n    WhitelistIdPathParameter:\n      name: whitelistId\n      in: path\n      description: The ID of this whitelist\n      required: true\n      style: simple\n      example: 231\n      schema:\n        type: integer\n        format: int64\n    WhitelistIdOrNamePathParameter:\n      name: whitelistId\n      in: path\n      description: The ID or name of this whitelist\n      required: true\n      style: simple\n      examples:\n        string:\n          summary: Whitelist name as string\n          value: my-list-name\n        number:\n          summary: Whitelist ID\n          value: 231\n      schema:\n        type: string\n    SettingNamePathParameter:\n      name: settingName\n      in: path\n      required: true\n      style: simple\n      example: WHITELISTED_GUILDS\n      schema:\n        type: string\n    VerificationPathParameter:\n      name: verificationId\n      in: path\n      description: The ID of the verification\n      required: true\n      style: simple\n      schema:\n        type: integer\n        format: int64\n    ExternalAccountPathParameter:\n      name: externalAccountId\n      in: path\n      description: The ID of the external account\n      required: true\n      style: simple\n      schema:\n        type: integer\n        format: int64\n  schemas:\n    GlobalSetting:\n      type: object\n      required:\n        - name\n        - value\n      properties:\n        name:\n          type: string\n          pattern: '^[_A-Za-z0-9]+$'\n        value:\n          type: string\n      example:\n        name: WHITELISTED_GUILDS\n        value: '717264144759390238'\n    Account:\n      type: object\n      required:\n        - id\n      properties:\n        id:\n          $ref: '#/components/schemas/AccountId'\n        settings:\n          type: object\n          additionalProperties:\n            type: string\n    ExternalAccount:\n      type: object\n      required:\n        - type\n        - referenceId\n      properties:\n        id:\n          $ref: '#/components/schemas/ExternalAccountId'\n        registrationTime:\n          readOnly: true\n          type: string\n          format: date-time\n          example: 2021-11-10T13:20:57Z\n        type:\n          $ref: '#/components/schemas/ExternalAccountType'\n        referenceId:\n          type: string\n          minLength: 1\n          maxLength: 200\n        referenceName:\n          type: string\n          maxLength: 200\n        account:\n          type: integer\n          format: int64\n        premium:\n          type: boolean\n          default: false\n    ExternalAccountPremiumInfo:\n      type: object\n      properties:\n        discordServers:\n          type: array\n          items:\n            type: string\n          readOnly: true\n        stakeAmount:\n          type: integer\n          format: int64\n          readOnly: true\n        tokenBalance:\n          type: integer\n          format: int64\n          readOnly: true\n    VerificationImport:\n      type: object\n      required:\n        - id\n        - type\n        - referenceId\n        - address\n        - source\n      properties:\n        id:\n          readOnly: true\n          type: integer\n          example: 162\n          format: int64\n        type:\n          $ref: '#/components/schemas/ExternalAccountType'\n        referenceId:\n          type: string\n          minLength: 1\n          maxLength: 200\n        address:\n          $ref: '#/components/schemas/WalletAddress'\n        source:\n          type: string\n          minLength: 1\n          maxLength: 50\n    VerificationRequest:\n      type: object\n      required:\n        - blockchain\n        - address\n        - externalAccountId\n      properties:\n        blockchain:\n          $ref: '#/components/schemas/BlockchainType'\n        address:\n          $ref: '#/components/schemas/WalletAddress'\n        externalAccountId:\n          type: integer\n          format: int64\n    Verification:\n      type: object\n      required:\n        - blockchain\n        - address\n        - externalAccountId\n        - amount\n        - validAfter\n        - validBefore\n        - confirmed\n        - obsolete\n      properties:\n        id:\n          readOnly: true\n          type: integer\n          example: 1249010\n          format: int64\n        blockchain:\n          $ref: '#/components/schemas/BlockchainType'\n        address:\n          $ref: '#/components/schemas/WalletAddress'\n        externalAccountId:\n          type: integer\n          format: int64\n        amount:\n          readOnly: true\n          type: integer\n          format: int64\n        validAfter:\n          readOnly: true\n          type: string\n          format: date-time\n          example: 2021-11-10T13:20:57Z\n        validBefore:\n          readOnly: true\n          type: string\n          format: date-time\n          example: 2021-11-10T13:20:57Z\n        confirmed:\n          readOnly: true\n          type: boolean\n        confirmedAt:\n          readOnly: true\n          type: string\n          format: date-time\n          example: 2021-11-10T13:20:57Z\n        obsolete:\n          readOnly: true\n          type: boolean\n    IncomingDiscordPaymentRequest:\n      type: object\n      required:\n        - refillAmount\n      properties:\n        refillAmount:\n          type: integer\n          format: int64\n          example: 10000000\n    IncomingDiscordPayment:\n      type: object\n      required:\n        - discordServerId\n        - receivingAddress\n        - amount\n        - validAfter\n        - validBefore\n      properties:\n        id:\n          readOnly: true\n          type: integer\n          example: 1249010\n          format: int64\n        receivingAddress:\n          readOnly: true\n          $ref: '#/components/schemas/WalletAddress'\n        amount:\n          readOnly: true\n          type: integer\n          format: int64\n        validAfter:\n          readOnly: true\n          type: string\n          format: date-time\n          example: 2021-11-10T13:20:57Z\n        validBefore:\n          readOnly: true\n          type: string\n          format: date-time\n          example: 2021-11-10T13:20:57Z\n    ExternalAccountPing:\n      type: object\n      required:\n        - sender\n        - recipientAddress\n      properties:\n        id:\n          readOnly: true\n          type: integer\n          format: int64\n        sender:\n          $ref: '#/components/schemas/ExternalAccountId'\n        senderLocal:\n          type: string\n          description: The senders ID in the format corresponding to the senders original channel (for example Discord)\n        sentFromServer:\n          $ref: '#/components/schemas/DiscordServerId'\n        recipient:\n          $ref: '#/components/schemas/AccountId'\n        recipientLocal:\n          type: string\n          description: The recipient ID in the format corresponding to the senders current channel (for example Discord), if a recipient in the same realm is available.\n        recipientAddress:\n          oneOf:\n            - $ref: '#/components/schemas/WalletAddress'\n            - $ref: '#/components/schemas/StakeAddressView'\n            - $ref: '#/components/schemas/AssetFingerprint'\n            - $ref: '#/components/schemas/HandleWithPrefix'\n        senderMessage:\n          type: string\n          maxLength: 320\n        createTime:\n          readOnly: true\n          type: string\n          format: date-time\n          example: 2021-11-10T13:20:57Z\n        sentTime:\n          type: string\n          format: date-time\n          example: 2021-11-10T13:20:57Z\n        reported:\n          type: boolean\n    ExternalAccountPingPartial:\n      type: object\n      properties:\n        sentTime:\n          type: string\n          format: date-time\n          example: 2021-11-10T13:20:57Z\n        reported:\n          type: boolean\n    ClaimList:\n      type: object\n      required:\n        - name\n        - displayName\n        - claims\n      properties:\n        id:\n          readOnly: true\n          type: integer\n          format: int64\n        name:\n          type: string\n          pattern: '^[A-Za-z][-A-Za-z0-9]{0,29}$'\n        displayName:\n          type: string\n          minLength: 1\n          maxLength: 256\n        description:\n          type: string\n          maxLength: 2000\n        createTime:\n          readOnly: true\n          type: string\n          format: date-time\n          example: 2021-11-10T12:21:43Z\n        claims:\n          type: array\n          items:\n            $ref: '#/components/schemas/ClaimListSnapshotEntry'\n    ClaimListSnapshotEntry:\n      type: object\n      required:\n        - stakeAddress\n        - claimableProduct\n        - claimableCount\n      properties:\n        stakeAddress:\n          $ref: '#/components/schemas/StakeAddressView'\n        claimableProduct:\n          type: integer\n          format: int64\n        claimableCount:\n          type: integer\n          format: int64\n        orderId:\n          description: Order ID this snapshot entry was claimed with\n          readOnly: true\n          type: integer\n          format: int64\n    PhysicalOrder:\n      type: object\n      required:\n        - externalAccountId\n        - country\n        - zipCode\n        - city\n        - street\n        - items\n      properties:\n        id:\n          readOnly: true\n          type: integer\n          format: int64\n        externalAccountId:\n          type: integer\n          format: int64\n        country:\n          type: string\n          example: Germany\n          minLength: 1\n          maxLength: 100\n        zipCode:\n          type: string\n          example: 84323-2031\n          minLength: 1\n          maxLength: 30\n        city:\n          type: string\n          example: Junkersdorf\n          minLength: 1\n          maxLength: 200\n        street:\n          type: string\n          example: Burenstrasse 25\n          minLength: 1\n          maxLength: 500\n        items:\n          type: array\n          minItems: 1\n          items:\n            $ref: '#/components/schemas/PhysicalOrderItem'\n        processed:\n          type: boolean\n          readOnly: true\n    PhysicalOrderItem:\n      type: object\n      required:\n        - productId\n        - count\n      properties:\n        productId:\n          type: integer\n          format: int64\n        count:\n          type: integer\n          format: int64\n    PhysicalProduct:\n      type: object\n      required:\n        - name\n      properties:\n        id:\n          readOnly: true\n          type: integer\n          format: int64\n        name:\n          type: string\n          example: T-Shirt\n        variations:\n          type: object\n          example:\n            colors:\n              - Green\n              - Black\n              - Red\n            sizes:\n              - S\n              - M\n              - L\n              - XL\n              - XXL\n    ClaimListsWithProducts:\n      type: object\n      properties:\n        claimLists:\n          type: array\n          items:\n            $ref: '#/components/schemas/ClaimList'\n        claimableProducts:\n          type: array\n          items:\n            $ref: '#/components/schemas/PhysicalProduct'\n    DiscordServer:\n      type: object\n      required:\n        - guildId\n        - guildName\n        - guildOwner\n        - guildMemberCount\n      properties:\n        id:\n          $ref: '#/components/schemas/DiscordServerId'\n        guildId:\n          $ref: '#/components/schemas/DiscordGuild'\n        guildName:\n          type: string\n          example: Guild Name\n        guildOwner:\n          $ref: '#/components/schemas/DiscordUser'\n        joinTime:\n          readOnly: true\n          type: string\n          format: date-time\n          example: 2021-11-10T13:20:57Z\n        guildMemberCount:\n          type: integer\n          format: int32\n          example: 150\n        guildMemberUpdateTime:\n          readOnly: true\n          type: string\n          format: date-time\n          example: 2021-11-10T13:20:57Z\n        ownerAccount:\n          type: integer\n          format: int64\n        premiumUntil:\n          description: The latest time until this server will retain premium status\n          readOnly: true\n          type: string\n          format: date-time\n          example: 2021-11-10T13:20:57Z\n        premium:\n          description: Does the discord server currently have an active premium subscription?\n          readOnly: true\n          type: boolean\n        active:\n          type: boolean\n          description: If the bot is on or off. When the bot is removed from the guild or manually turned off by an admin this is false\n        tokenPolicies:\n          type: array\n          items:\n            $ref: '#/components/schemas/TokenPolicy'\n        stakepools:\n          type: array\n          items:\n            $ref: '#/components/schemas/Stakepool'\n        delegatorRoles:\n          type: array\n          items:\n            $ref: '#/components/schemas/DiscordDelegatorRole'\n        tokenRoles:\n          type: array\n          items:\n            $ref: '#/components/schemas/DiscordTokenRole'\n        settings:\n          type: object\n          additionalProperties:\n            type: string\n    DiscordServerPartial:\n      type: object\n      properties:\n        guildName:\n          type: string\n          example: Guild Name\n        guildOwner:\n          $ref: '#/components/schemas/DiscordUser'\n        guildMemberCount:\n          type: integer\n          format: int32\n          example: 150\n        active:\n          type: boolean\n          description: Toggle the bot on or off - usually when the bot is removed from the guild or manually turned off by an admin\n    DiscordServerPremiumInfo:\n      type: object\n      readOnly: true\n      properties:\n        totalDelegation:\n          description: The total delegation amount from pledged members of this Discord server (in Lovelace)\n          type: integer\n          format: int64\n        maxDelegation:\n          description: The delegation amount needed to get the bot for free (in Lovelace)\n          type: integer\n          format: int64\n        monthlyCost:\n          description: The monthly subscription cost for this server, based on server member count without delegation discount (in Lovelace)\n          type: integer\n          format: int64\n        actualMonthlyCost:\n          description: The monthly subscription cost for this server, based on server member count with delegation discount (in Lovelace)\n          type: integer\n          format: int64\n        guildMemberCount:\n          description: The current member count (updated daily)\n          type: integer\n          format: int32\n        remainingBalance:\n          description: The current available balance for this Discord server (in Lovelace)\n          type: integer\n          format: int64\n        lastBillingGuildMemberCount:\n          description: The member count during the last billing\n          type: integer\n          format: int32\n        lastBillingTime:\n          description: The last time this account was billed\n          type: string\n          format: date-time\n          example: 2021-11-10T12:21:43Z\n        lastBillingAmount:\n          description: The amount that was deducted from your balance in the last billing cycle (in Lovelace)\n          type: integer\n          format: int64\n        premiumUntil:\n          description: The expiration date of the premium account for this Discord server\n          type: string\n          format: date-time\n          example: 2021-11-10T12:21:43Z\n        currentPremium:\n          description: Is the server currently a premium server?\n          type: boolean\n    TokenPolicy:\n      type: object\n      required:\n        - policyId\n        - projectName\n      properties:\n        policyId:\n          $ref: '#/components/schemas/TokenPolicyId'\n        projectName:\n          type: string\n          example: My First CNFT\n    Stakepool:\n      type: object\n      required:\n        - poolHash\n      properties:\n        poolHash:\n          $ref: '#/components/schemas/StakepoolHash'\n        info:\n          $ref: '#/components/schemas/StakepoolInfo'\n    StakepoolInfo:\n      type: object\n      required:\n        - hash\n        - view\n        - ticker\n        - name\n      properties:\n        hash:\n          $ref: '#/components/schemas/StakepoolHash'\n        view:\n          type: string\n        ticker:\n          readOnly: true\n          type: string\n        name:\n          readOnly: true\n          type: string\n        website:\n          readOnly: true\n          type: string\n        description:\n          readOnly: true\n          type: string\n    DiscordDelegatorRole:\n      type: object\n      required:\n        - minimumStake\n        - roleId\n      properties:\n        id:\n          readOnly: true\n          type: integer\n          format: int64\n        poolHash:\n          $ref: '#/components/schemas/StakepoolHash'\n        minimumStake:\n          type: integer\n          description: Minimum stake in Lovelace\n          format: int64\n          example: 1000000000\n        roleId:\n          $ref: '#/components/schemas/DiscordRole'\n    DiscordTokenRole:\n      type: object\n      required:\n        - acceptedAssets\n        - minimumTokenQuantity\n        - roleId\n      properties:\n        id:\n          readOnly: true\n          type: integer\n          format: int64\n        acceptedAssets:\n          type: array\n          minItems: 1\n          maxItems: 200\n          items:\n            $ref: '#/components/schemas/TokenRoleAssetInfo'\n        minimumTokenQuantity:\n          type: integer\n          format: int64\n          example: 1\n        maximumTokenQuantity:\n          type: integer\n          format: int64\n          example: 10\n        aggregationType:\n          $ref: '#/components/schemas/TokenOwnershipAggregationType'\n        filters:\n          readOnly: true\n          type: array\n          items:\n            $ref: '#/components/schemas/MetadataFilter'\n        roleId:\n          $ref: '#/components/schemas/DiscordRole'\n    DiscordTokenRolePartial:\n      type: object\n      properties:\n        acceptedAssets:\n          type: array\n          minItems: 1\n          maxItems: 200\n          items:\n            $ref: '#/components/schemas/TokenRoleAssetInfo'\n        minimumTokenQuantity:\n          type: integer\n          format: int64\n          example: 1\n        maximumTokenQuantity:\n          type: integer\n          format: int64\n          example: 10\n        aggregationType:\n          $ref: '#/components/schemas/TokenOwnershipAggregationType'\n        roleId:\n          $ref: '#/components/schemas/DiscordRole'\n    TokenOwnershipAggregationType:\n      type: string\n      default: ANY_POLICY_FILTERED_AND\n      enum:\n        - ANY_POLICY_FILTERED_AND\n        - ANY_POLICY_FILTERED_OR\n        - ANY_POLICY_FILTERED_ONE_EACH\n        - EVERY_POLICY_FILTERED_OR\n    TokenRoleAssetInfo:\n      type: object\n      required:\n        - policyId\n      properties:\n        policyId:\n          $ref: '#/components/schemas/TokenPolicyId'\n        assetFingerprint:\n          $ref: '#/components/schemas/AssetFingerprint'\n    MetadataFilter:\n      type: object\n      required:\n        - attributeName\n        - operator\n        - attributeValue\n      properties:\n        id:\n          readOnly: true\n          type: integer\n          format: int64\n        attributeName:\n          type: string\n          minLength: 1\n          maxLength: 64\n        operator:\n          type: string\n          enum:\n            - EQUALS\n            - NOTEQUALS\n            - CONTAINS\n            - NOTCONTAINS\n            - STARTSWITH\n            - ENDSWITH\n            - REGEX\n        attributeValue:\n          type: string\n          minLength: 1\n          maxLength: 128\n    DiscordPoll:\n      type: object\n      required:\n        - creator\n        - name\n        - displayName\n        - description\n        - openAfter\n        - openUntil\n        - options\n      properties:\n        id:\n          readOnly: true\n          type: integer\n          format: int64\n        creator:\n          type: integer\n          format: int64\n        channelId:\n          $ref: '#/components/schemas/DiscordChannel'\n        messageId:\n          $ref: '#/components/schemas/DiscordMessage'\n        displayName:\n          type: string\n          minLength: 1\n          maxLength: 256\n        name:\n          type: string\n          pattern: '^[A-Za-z][-A-Za-z0-9]{0,29}$'\n        description:\n          type: string\n          minLength: 1\n          maxLength: 4096\n        createTime:\n          readOnly: true\n          type: string\n          format: date-time\n          example: 2021-11-10T12:21:43Z\n        openAfter:\n          type: string\n          format: date-time\n          example: 2021-11-10T12:21:43Z\n        openUntil:\n          type: string\n          format: date-time\n          example: 2021-11-10T12:21:43Z\n        resultsVisible:\n          type: boolean\n          default: true\n        weighted:\n          type: boolean\n          default: false\n        multipleVotes:\n          type: boolean\n          default: false\n        archived:\n          type: boolean\n          default: false\n        snapshotId:\n          type: integer\n          format: int64\n        requiredRoles:\n          type: array\n          items:\n            $ref: '#/components/schemas/DiscordPollRequiredRole'\n        options:\n          type: array\n          items:\n            $ref: '#/components/schemas/DiscordPollOption'\n        voteaireUUID:\n          type: string\n          example: a7fbd4ca-950d-4d02-82fd-f9c6cc9e2165\n          pattern: '[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$'\n    DiscordPollPartial:\n      type: object\n      properties:\n        channelId:\n          $ref: '#/components/schemas/DiscordChannel'\n        messageId:\n          $ref: '#/components/schemas/DiscordMessage'\n        displayName:\n          type: string\n          minLength: 1\n          maxLength: 256\n        description:\n          type: string\n          minLength: 1\n          maxLength: 4096\n        openAfter:\n          type: string\n          format: date-time\n          example: 2021-11-10T12:21:43Z\n        openUntil:\n          type: string\n          format: date-time\n          example: 2021-11-10T12:21:43Z\n        resultsVisible:\n          type: boolean\n        archived:\n          type: boolean\n        requiredRoles:\n          type: array\n          items:\n            $ref: '#/components/schemas/DiscordPollRequiredRole'\n    DiscordPollRequiredRole:\n      type: object\n      required:\n        - roleId\n      properties:\n        roleId:\n          $ref: '#/components/schemas/DiscordRole'\n    DiscordPollOptionId:\n      type: integer\n      readOnly: true\n      example: 4929\n      format: int64\n    DiscordPollOption:\n      type: object\n      required:\n        - text\n      properties:\n        id:\n          $ref: '#/components/schemas/DiscordPollOptionId'\n        text:\n          type: string\n          example: 'Vote for the better one'\n        reactionId:\n          $ref: '#/components/schemas/DiscordEmoji'\n        reactionName:\n          type: string\n          example: '🔥'\n    VoteData:\n      type: object\n      required:\n        - votes\n      properties:\n        votes:\n          type: object\n          description: A map of poll options the user chose (or 0 if not yet voted) and the respective amounts of votes given/available\n          additionalProperties:\n            type: integer\n            format: int64\n    DiscordPollVote:\n      type: object\n      required:\n        - externalAccountId\n        - optionId\n      properties:\n        externalAccountId:\n          type: integer\n          format: int64\n        optionId:\n          $ref: '#/components/schemas/DiscordPollOptionId'\n        time:\n          readOnly: true\n          type: string\n          format: date-time\n          example: 2021-11-10T13:10:57Z\n        weight:\n          type: integer\n          format: int64\n    DiscordPollUpdate:\n      type: object\n      required:\n        - guildId\n        - pollId\n        - channelId\n      properties:\n        guildId:\n          $ref: '#/components/schemas/DiscordGuild'\n        pollId:\n          readOnly: true\n          type: integer\n          format: int64\n        channelId:\n          $ref: '#/components/schemas/DiscordChannel'\n        messageId:\n          $ref: '#/components/schemas/DiscordMessage'\n    DiscordMarketplaceChannel:\n      type: object\n      required:\n        - creator\n        - type\n        - channelId\n        - policyId\n        - marketplaces\n      properties:\n        id:\n          readOnly: true\n          type: integer\n          format: int64\n        creator:\n          type: integer\n          format: int64\n        type:\n          type: string\n          enum:\n            - SALES\n            - MINT\n        policyId:\n          $ref: '#/components/schemas/TokenPolicyId'\n        marketplaces:\n          type: array\n          items:\n            $ref: '#/components/schemas/Marketplace'\n          minItems: 1\n        createTime:\n          readOnly: true\n          type: string\n          format: date-time\n          example: 2021-11-10T12:21:43Z\n        channelId:\n          $ref: '#/components/schemas/DiscordChannel'\n        minimumValue:\n          description: The (optional) minimum value in Lovelace that is required for the listing, sale or offer to be displayed\n          type: integer\n          format: int64\n        maximumValue:\n          description: The (optional) maximum value in Lovelace that is allowed for the listing, sale or offer to be displayed\n          type: integer\n          format: int64\n        filters:\n          readOnly: true\n          type: array\n          items:\n            $ref: '#/components/schemas/MetadataFilter'\n        aggregationType:\n          $ref: '#/components/schemas/TokenOwnershipAggregationType'\n        highlightAttributeName:\n          type: string\n          minLength: 1\n          maxLength: 64\n        highlightAttributeDisplayName:\n          type: string\n          minLength: 1\n          maxLength: 64\n    Whitelist:\n      type: object\n      required:\n        - displayName\n        - name\n        - creator\n        - requiredRoleId\n      properties:\n        id:\n          readOnly: true\n          type: integer\n          format: int64\n        creator:\n          type: integer\n          format: int64\n        createTime:\n          readOnly: true\n          type: string\n          format: date-time\n          example: 2021-11-10T13:20:57Z\n        displayName:\n          type: string\n          minLength: 1\n          maxLength: 256\n        name:\n          type: string\n          pattern: '^[A-Za-z][-A-Za-z0-9]{0,29}$'\n        signupAfter:\n          type: string\n          format: date-time\n          example: 2020-11-10T13:20:57Z\n        signupUntil:\n          type: string\n          format: date-time\n          example: 2021-11-10T13:20:57Z\n        launchDate:\n          type: string\n          format: date-time\n          example: 2021-11-10T13:20:57Z\n        closed:\n          type: boolean\n          default: false\n        requiredRoleId:\n          $ref: '#/components/schemas/DiscordRole'\n        sharedWithServer:\n          type: integer\n          format: int64\n          description: The server ID (not guild ID) of another HAZELnet Discord server that you want to share the members of this whitelist with\n        logoUrl:\n          type: string\n          minLength: 1\n          maxLength: 1000\n    WhitelistPartial:\n      type: object\n      properties:\n        displayName:\n          type: string\n          minLength: 1\n          maxLength: 256\n        signupAfter:\n          description: The date after which people can sign up for the whitelist (pass a date 20+ years in the past to remove the signupAfter date)\n          type: string\n          format: date-time\n          example: 2020-11-10T13:20:57Z\n        signupUntil:\n          description: The date until which people can sign up for the whitelist (pass a date 20+ years in the past to remove the signupUntil date)\n          type: string\n          format: date-time\n          example: 2021-11-10T13:20:57Z\n        closed:\n          type: boolean\n        sharedWithServer:\n          type: integer\n          format: int32\n          description: The server ID (not guild ID) of another HAZELnet Discord server that you want to share the members of this whitelist with.\n        launchDate:\n          description: The date at which people can redeem their whitelist spot (pass a date 20+ years in the past to remove the launchDate date)\n          type: string\n          format: date-time\n          example: 2021-11-10T13:20:57Z\n        logoUrl:\n          type: string\n          minLength: 1\n          maxLength: 1000\n    WhitelistSignup:\n      type: object\n      required:\n        - externalAccountId\n      properties:\n        address:\n          $ref: '#/components/schemas/WalletAddress'\n        externalAccountId:\n          type: integer\n          format: int64\n        signupTime:\n          readOnly: true\n          type: string\n          format: date-time\n          example: 2021-11-10T13:20:57Z\n    SharedWhitelist:\n      type: object\n      required:\n        - guildId\n        - guildName\n        - whitelistName\n        - whitelistDisplayName\n        - signups\n      properties:\n        guildId:\n          $ref: '#/components/schemas/DiscordGuild'\n        guildName:\n          type: string\n          example: Guild Name\n        whitelistDisplayName:\n          type: string\n          minLength: 1\n          maxLength: 256\n        whitelistName:\n          type: string\n          pattern: '^[A-Za-z][-A-Za-z0-9]{0,29}$'\n        signups:\n          type: array\n          items:\n            $ref: '#/components/schemas/WhitelistSignup'\n    SummarizedWhitelistSignup:\n      type: object\n      required:\n        - externalAccountId\n        - guildId\n        - guildName\n        - whitelistDisplayName\n        - signupTime\n      properties:\n        externalAccountId:\n          readOnly: true\n          type: integer\n          format: int64\n        guildId:\n          readOnly: true\n          $ref: '#/components/schemas/DiscordGuild'\n        guildName:\n          readOnly: true\n          type: string\n          example: Guild Name\n        whitelistDisplayName:\n          readOnly: true\n          type: string\n          minLength: 1\n          maxLength: 256\n        whitelistLogoUrl:\n          readOnly: true\n          type: string\n          minLength: 1\n          maxLength: 1000\n        signupTime:\n          readOnly: true\n          type: string\n          format: date-time\n          example: 2021-11-10T13:20:57Z\n        launchDate:\n          readOnly: true\n          type: string\n          format: date-time\n          example: 2021-11-10T13:20:57Z\n    MultiAssetSnapshot:\n      type: object\n      required:\n        - snapshotTime\n        - policyId\n      properties:\n        id:\n          readOnly: true\n          type: integer\n          format: int64\n        createTime:\n          readOnly: true\n          type: string\n          format: date-time\n          example: 2021-11-10T13:20:57Z\n        snapshotTime:\n          type: string\n          format: date-time\n          example: 2022-11-10T13:20:57Z\n        policyId:\n          $ref: '#/components/schemas/TokenPolicyId'\n        assetFingerprint:\n          $ref: '#/components/schemas/AssetFingerprint'\n        taken:\n          readOnly: true\n          type: boolean\n    EmbeddableSetting:\n      type: object\n      required:\n        - name\n        - value\n      properties:\n        name:\n          type: string\n          pattern: '^[_A-Za-z0-9]+$'\n        value:\n          type: string\n      example:\n        name: PROTECTION_ADDR_REMOVAL\n        value: 'true'\n    DiscordMember:\n      type: object\n      required:\n        - externalAccountId\n      properties:\n        externalAccountId:\n          type: integer\n          format: int64\n        joinTime:\n          type: string\n          format: date-time\n          example: 2021-11-10T13:20:57Z\n          readOnly: true\n        premiumSupport:\n          type: boolean\n          default: false\n    DiscordMemberPartial:\n      type: object\n      properties:\n        premiumSupport:\n          type: boolean\n    DiscordRoleAssignment:\n      type: object\n      required:\n        - guildId\n        - userId\n        - roleId\n      properties:\n        guildId:\n          $ref: '#/components/schemas/DiscordGuild'\n        userId:\n          $ref: '#/components/schemas/DiscordUser'\n        roleId:\n          $ref: '#/components/schemas/DiscordRole'\n    Handle:\n      type: object\n      properties:\n        handle:\n          $ref: '#/components/schemas/HandleName'\n        address:\n          $ref: '#/components/schemas/WalletAddress'\n        resolved:\n          type: boolean\n    DiscordServerId:\n      readOnly: true\n      type: integer\n      format: int64\n    DiscordGuild:\n      description: Snowflake ID matching a Discord guild\n      type: integer\n      format: int64\n      example: 717264144759390238\n    DiscordEmoji:\n      description: Snowflake ID matching a Discord emoji\n      type: integer\n      format: int64\n      example: 817564144253349412\n    DiscordUser:\n      description: Snowflake ID matching a Discord user\n      type: integer\n      format: int64\n      example: 717264144735590\n    DiscordRole:\n      description: Snowflake ID matching a Discord role\n      type: integer\n      format: int64\n      example: 185829035890290\n    DiscordChannel:\n      description: Snowflake ID matching a Discord channel\n      type: integer\n      format: int64\n      example: 668289032310316\n    DiscordMessage:\n      description: Snowflake ID matching a Discord message\n      type: integer\n      format: int64\n      example: 468589032310412\n    StakeAddressView:\n      type: string\n      description: The staking address of a wallet, in viewable format\n      example: stake1uyhvepgdsd7s07q5cdx9vdemnar4axpe0e9edw2chyd8dpgqnsffq\n      pattern: '^stake1[a-zA-Z0-9]{53}$'\n    StakepoolHash:\n      type: string\n      description: The Stakepool hash\n      example: be80794a946cf5e578846fc81e3c62ac13f4ab3335e0f5dc046edad4\n      pattern: '^[A-Za-z0-9]{56}$'\n    TokenPolicyId:\n      type: string\n      description: The Policy ID\n      example: ceb5dedd6cda3f0b4a98919b5d3827e15e324771642b57e0e6aabd57\n      pattern: '^[A-Za-z0-9]{56}$'\n    AssetFingerprint:\n      type: string\n      description: The fingerprint of an asset\n      example: asset1ls9tt8s03x2gcqjyppx346ct64jts7fnwsmequ\n      pattern: '^asset1[A-Za-z-0-9]{38}$'\n    HandleName:\n      type: string\n      example: hazelnet\n      pattern: '^[-._a-zA-Z0-9]{1,15}$'\n    HandleWithPrefix:\n      type: string\n      example: $hazelnet\n      pattern: '^\\$[-._a-zA-Z0-9]{1,15}$'\n    WalletAddress:\n      type: string\n      description: The wallet address (non-enterprise)\n      example: addr1qxpc4jfv5qvcr3plf046u365urrmlcthqrpp34p3445lfu3wejzsmqmaqlupfs6v2cmnh868t6vrjljtj6u43wg6w6zs6v20aa\n      pattern: '^addr1[A-Za-z-0-9]{98}$'\n    TransactionHash:\n      type: string\n      description: A cardano transaction hash\n      example: 20de8b6406e66e3d3f18d4fd788d30146cacbd6a08ba6529b4406156d31d278e\n      pattern: '^[A-Za-z-0-9]{54}$'\n    Marketplace:\n      type: string\n      enum:\n        - JPGSTORE\n    AccountId:\n      readOnly: true\n      type: integer\n      format: int64\n    ExternalAccountId:\n      readOnly: true\n      type: integer\n      format: int64\n    ExternalAccountType:\n      type: string\n      enum:\n        - DISCORD\n    BlockchainType:\n      type: string\n      enum:\n        - CARDANO\n        - ETHEREUM\n    OuraEvent:\n      type: object\n      required:\n        - variant\n        - context\n      properties:\n        variant:\n          type: string\n          enum:\n            - Mint\n            - Metadata\n        context:\n          $ref: '#/components/schemas/OuraEventContext'\n        mint:\n          $ref: '#/components/schemas/OuraMintEvent'\n        metadata:\n          $ref: '#/components/schemas/OuraMetadataEvent'\n    OuraEventContext:\n      type: object\n      required:\n        - timestamp\n        - tx_hash\n      properties:\n        timestamp:\n          type: integer\n          example: 1660685739000\n          description: Timestamp in milliseconds since 1/1/1970 0:00\n          format: int64\n        tx_hash:\n          $ref: '#/components/schemas/TransactionHash'\n    OuraMintEvent:\n      type: object\n      required:\n        - policy\n        - asset\n        - quantity\n      properties:\n        policy:\n          $ref: '#/components/schemas/TokenPolicyId'\n        asset:\n          type: string\n          description: The hex-encoded name of the minted asset\n          example: 706f7461746f\n        quantity:\n          type: integer\n          example: 1\n          format: int64\n          description: The number of minted assets\n    OuraMetadataEvent:\n      type: object\n      required:\n        - label\n        - map_json\n      properties:\n        label:\n          type: string\n          description: The root key of the metadata event (721 for NFT metadata for example)\n        map_json:\n          type: object\n          description: 'The raw map for the metadata of this the associated mint transaction'\n    CreatedResponseHeader:\n      type: string\n      format: uri\n      description: URL of the newly created resource\n    ErrorResponse:\n      type: object\n      required:\n        - messages\n        - httpStatus\n        - httpStatusCode\n      properties:\n        messages:\n          type: array\n          items:\n            $ref: '#/components/schemas/ErrorMessage'\n        httpStatus:\n          type: string\n        httpStatusCode:\n          type: integer\n          format: int32\n    ErrorMessage:\n      type: object\n      required:\n        - message\n      properties:\n        message:\n          type: string\n        sourceField:\n          type: string\n",
			"canonicalURL": "/github.com/nilscodes/hazelnet@e0ee5594c43a90de945614b21adb0a0bc9c1d0a9/-/blob/hazelnet-community/src/main/resources/hazelnet-community-openapi.yml",
			"externalURLs": [
				{
					"url": "https://github.com/nilscodes/hazelnet/blob/e0ee5594c43a90de945614b21adb0a0bc9c1d0a9/hazelnet-community/src/main/resources/hazelnet-community-openapi.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/claimlists\": post: operation \"addClaimList\": responses: 201: headers: header \"Location\": at 1:5979: parameter MUST contain either a schema property, or a content property"
}