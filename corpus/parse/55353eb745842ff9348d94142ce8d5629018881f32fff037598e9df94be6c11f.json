{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/claroty/jwthenticator"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi.yaml",
			"byteSize": 10462,
			"content": "openapi: \"3.0.0\"\ninfo:\n  title: JWThenticator\n  version: 1.0.0\npaths:\n\n  /:\n    get:\n      description: Index path, see that the server is up and responding.\n      operationId: check_health\n      responses:\n        \"200\":\n          description: Working\n\n\n  /health:\n    get:\n      description: Get request to see the server is responding. This is can be used by K8S health checks.\n      operationId: check_health\n      responses:\n        \"200\":\n          description: Working\n\n\n  /register_key:\n    post:\n      description: Register a new key to be used during authentication (`/authenticate`)\n      operationId: register_key\n      requestBody:\n        description: The key to register\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/RegisterKeyRequest\"\n      responses:\n        \"201\":\n          description: Key registered successfully\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BoolResponse\"\n              examples:\n                success_response:\n                  value:\n                    {\n                      \"success\": true,\n                      \"message\": null\n                    }\n        \"400\":\n          description: Invalid request\n\n\n  /is_key_registered:\n    post:\n      description: Check if a key is registered\n      operationId: is_key_registered\n      requestBody:\n        description: The key to check if registered\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/KeyRequest\"\n      responses:\n        \"200\":\n          description: Check completed successfully\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BoolResponse\"\n              examples:\n                key_is_registered:\n                  value:\n                    {\n                      \"success\": true,\n                      \"message\": null\n                    }\n                key_isnt_registered:\n                  value:\n                    {\n                      \"success\": false,\n                      \"message\": null\n                    }\n        \"400\":\n          description: Invalid request\n\n\n  /authenticate:\n    post:\n      description: Authenticate using a key.\n      operationId: authenticate\n      requestBody:\n        description: Authentication credentials\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/AuthRequest\"\n      responses:\n        \"200\":\n          description: Authentication successfull\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TokenResponse\"\n              examples:\n                succesfull_auth_response:\n                  value:\n                    {\n                      \"jwt\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJ0b2tlbl9pZCI6IjkxOWY4OWI4OTBkYjRlNjg5MzA3YzgyYTQ1MjE5Yjg4IiwiaWRlbnRpZmllciI6ImhlbGxvIiwiaWF0IjoxNjAwNjc0ODk2LCJleHAiOjE2MDA2NzY2OTZ9.TRXxbCweJRQlaV_jm2TFlNftfrA0Q5qrPtnMZx_r3y2ZUxIbZQw07n01QM43MTew0Zq9ExftNZbCd0vol8XT7wMakZvZDPokd7Gt9vd5fANWr1LHM-nDx4RVUqA4TfSwPVROrxZjwannsNZ74TCAZMXbmv3p2ZguVRXMnBL1i5F2I8hAweMz26IFuQkfvhTLy5OA-WFVwAvo24X4cAfk2z-QvAcgcrtKNF66UhNCdUdyB7it2SoqNr0qo8GuZuZNB-ej8wM4n189vW_nrV1P2xf0hWyL4adpXZtOUB0gAngGETh4W2YM8sByAp7f2EeNSCwptflHPupvR9fce3ZuOw\",\n                      \"refresh_token\": \"858c825cf8b7acae130e1a88c836609da744be15e9d4f5435887d8282dec2a2f7ad3feb88bb0414f54c9f0ec572cd071e88f5ed9b9e64be33944a7933df50dd3\"\n                    }\n        \"400\":\n          description: Invalid request\n        \"403\":\n          description: Key is invalid or expired\n\n\n  /refresh:\n    post:\n      description: Create a new JWT using a refresh token\n      operationId: refresh\n      requestBody:\n        description: Refresh token details\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/RefreshRequest\"\n      responses:\n        \"200\":\n          description: New JWT created successfully\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TokenResponse\"\n              examples:\n                successfull_refresh_response:\n                  value:\n                    {\n                      \"jwt\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJ0b2tlbl9pZCI6IjkxOWY4OWI4OTBkYjRlNjg5MzA3YzgyYTQ1MjE5Yjg4IiwiaWRlbnRpZmllciI6ImhlbGxvIiwiaWF0IjoxNjAwNjc0ODk2LCJleHAiOjE2MDA2NzY2OTZ9.TRXxbCweJRQlaV_jm2TFlNftfrA0Q5qrPtnMZx_r3y2ZUxIbZQw07n01QM43MTew0Zq9ExftNZbCd0vol8XT7wMakZvZDPokd7Gt9vd5fANWr1LHM-nDx4RVUqA4TfSwPVROrxZjwannsNZ74TCAZMXbmv3p2ZguVRXMnBL1i5F2I8hAweMz26IFuQkfvhTLy5OA-WFVwAvo24X4cAfk2z-QvAcgcrtKNF66UhNCdUdyB7it2SoqNr0qo8GuZuZNB-ej8wM4n189vW_nrV1P2xf0hWyL4adpXZtOUB0gAngGETh4W2YM8sByAp7f2EeNSCwptflHPupvR9fce3ZuOw\",\n                      \"refresh_token\": null\n                    }\n        \"400\":\n          description: Invalid request\n        \"403\":\n          description: Invalid or expired refresh token\n\n\n  /validate:\n    post:\n      description: Validate refresh token\n      operationId: validate\n      requestBody:\n        description: The JWT to validate\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/JWTValidateRequest\"\n      responses:\n        \"200\":\n          description: JWT is valid\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BoolResponse\"\n              example:\n                jwt_is_valid:\n                  value:\n                    {\n                      \"success\": true,\n                      \"message\": null\n                    }\n        \"400\":\n          description: Invalid request\n        \"401\":\n          description: JWT is invalid (bad signature, couldn't decode, or expired)\n\n\n  /validate_request:\n    get:\n      description: Endpoint receives an empty request with authentication header, extracts JWT and validates it. This endpoint can be used with as an Nginx auth_request handler.\n      operationId: validate_request\n      responses:\n        \"200\":\n          description: JWT is valid\n        \"401\":\n          description: JWT is invalid (bad signature, couldn't decode, or expired)\n        \"403\":\n          description: Missing authentcation header or invalid request\n\n\n  /jwks:\n    get:\n      description: Get the industry standard JWKS (JSON Web Key Set) data.\n      operationId: jwks\n      responses:\n        \"200\":\n          description: The JWKS data\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/JWKSResponse\"\n              examples:\n                example_jwks:\n                  value:\n                    {\n                      \"e\": \"AQAB\",\n                      \"alg\": \"RS256\",\n                      \"use\": \"sig\",\n                      \"n\": \"re5LAvt2PxauKMPvog6Pqv1P32UN1sTbPCPuHMowDSPycAwSpPjgvyp3Ttax7dhZZDSm_FnBJWzyvNJcSc5rN9H-TFgozzEnMaoDH6gE6xeUgIZ4NMvk5X_4DwLFVG3U8ziFa_LBv7lB4cN4iHkOjCRKCiN2Gy-Eji7E2JcEWTceOa7jy5gz8vcGEphiB8grn3bAYj6Iqvtle_OzCGaryonSuk2-PVewhMjLSFVK5jwcHMp6sgYme7k2c5lKClrgn7QDpWxN0GUWX4vx_CMnRt_76KCzfGCAOUk4LsCsBgfPJ2UwUifJ5wVA-MPSTWifyyqhL9iioqrnvtvZ-7GTyQ\",\n                      \"x5c\": [\n                          \"-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAre5LAvt2PxauKMPvog6P\\nqv1P32UN1sTbPCPuHMowDSPycAwSpPjgvyp3Ttax7dhZZDSm/FnBJWzyvNJcSc5r\\nN9H+TFgozzEnMaoDH6gE6xeUgIZ4NMvk5X/4DwLFVG3U8ziFa/LBv7lB4cN4iHkO\\njCRKCiN2Gy+Eji7E2JcEWTceOa7jy5gz8vcGEphiB8grn3bAYj6Iqvtle/OzCGar\\nyonSuk2+PVewhMjLSFVK5jwcHMp6sgYme7k2c5lKClrgn7QDpWxN0GUWX4vx/CMn\\nRt/76KCzfGCAOUk4LsCsBgfPJ2UwUifJ5wVA+MPSTWifyyqhL9iioqrnvtvZ+7GT\\nyQIDAQAB\\n-----END PUBLIC KEY-----\"\n                      ],\n                      \"kty\": \"RSA\"\n                  }\n\n\ncomponents:\n  schemas:\n    KeyRequest:\n      type: object\n      required:\n        - key\n      properties:\n        key:\n          type: string\n          description: Key to check\n\n\n    RegisterKeyRequest:\n      type: object\n      required:\n        - key\n        - identifier\n      properties:\n        key:\n          type: string\n          description: Key to register\n        identifier:\n          type: string\n          format: uuid\n          description: A unique client identifier\n\n\n    AuthRequest:\n      type: object\n      required:\n        - key\n        - identifier\n      properties:\n        key:\n          type: string\n          description: Key used for authentication\n        identifier:\n          type: string\n          format: uuid\n          description: A unique client identifier\n\n    RefreshRequest:\n      type: object\n      required:\n        - refresh_token\n        - identifier\n      properties:\n        refresh_token:\n          type: string\n          description: Refresh token used to verify owner\n        identifier:\n          type: string\n          format: uuid\n          description: A unique client identifier\n\n    JWTValidateRequest:\n      type: object\n      required:\n        - jwt\n      properties:\n        jwt:\n          type: string\n          description: JWT to validate\n\n    TokenResponse:\n      type: object\n      required:\n        - jwt\n      properties:\n        jwt:\n          type: string\n          description: A valid JWT that can be used for access\n        refresh_token:\n          type: string\n          description: A token that can be used for refreshing JWT once it expires (without authenticating again)\n\n    BoolResponse:\n      type: object\n      required:\n        - result\n      properties:\n        result:\n          type: boolean\n        message:\n          type: string\n\n    JWKSResponse:\n      type: object\n      properties:\n        x5c:\n          type: array\n          items:\n            type: string\n          description: The x509 certificate chain\n        n:\n          type: string\n          format: bytes\n          description: Pem moduluos\n        e:\n          type: string\n          format: bytes\n          description: PEM exponent\n        alg:\n          type: string\n          description: The algorithm for the key\n        kty:\n          type: string\n          description: Key type\n        use:\n          type: string\n          description: How the key is meant to be used\n",
			"canonicalURL": "/github.com/claroty/jwthenticator@e7ac02ca5a39a6f3c3f67b5bc11f925567e81d7a/-/blob/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/claroty/jwthenticator/blob/e7ac02ca5a39a6f3c3f67b5bc11f925567e81d7a/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /: get: duplicate operationId: \"check_health\""
}