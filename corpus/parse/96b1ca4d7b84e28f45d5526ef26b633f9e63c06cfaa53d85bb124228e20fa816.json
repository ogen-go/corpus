{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/cloudtrust/keycloak-bridge"
		},
		"file": {
			"name": "swagger-api_kyc.yaml",
			"size": 0,
			"path": "api/kyc/swagger-api_kyc.yaml",
			"byteSize": 13406,
			"content": "openapi: 3.0.1\ninfo:\n  title: Swagger Cloudtrust Register\n  description: 'Know your customer API for Cloudtrust.'\n  version: 1.0.0\nservers:\n- url: http://localhost:8855\ntags:\n- name: KYC\n  description: Know your customer API\npaths:\n  /kyc/actions:\n    get:\n      tags:\n      - KYC\n      summary: Gets the list of all possible actions\n      security:\n        - openId: []\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Actions'\n        403:\n          description: No permission to call this operation\n  /kyc/social/users:\n    get:\n      tags:\n      - KYC\n      summary: Gets a user (search by username)\n      security:\n        - openId: []\n      parameters:\n      - name: username\n        in: query\n        description: name of the user to be retrieved\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: Returns the found user with fields id, username, firstName, lastName, emailVerified, phoneNumber, phoneNumberVerified and accreditations only\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        403:\n          description: No permission to call this operation\n  /kyc/social/users/{userId}:\n    get:\n      tags:\n      - KYC\n      summary: Gets a user\n      security:\n        - openId: []\n      parameters:\n      - name: userId\n        in: path\n        description: user id\n        required: true\n        schema:\n          type: string\n      - name: consent\n        in: query\n        description: consent code received by SMS on the end-user mobile phone\n        required: false\n        schema:\n          type: string\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        403:\n          description: No permission to call this operation\n        430:\n          description: Missing or invalid consent code \n    put:\n      tags:\n      - KYC\n      summary: \u003e\n        Updates a user after physical identification.\n        User id parameter is mandatory in the path of the URL. The username value in the request body will be overriden by the username from Keycloak.\n      security:\n        - openId: []\n      parameters:\n      - name: userId\n        in: path\n        description: user id\n        required: true\n        schema:\n          type: string\n      - name: consent\n        in: query\n        description: consent code received by SMS on the end-user mobile phone\n        required: false\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                type: string\n        400:\n          description: Invalid information provided\n        403:\n          description: No permission to call this operation\n        430:\n          description: Missing or invalid consent code \n  /kyc/social/users/{userId}/send-consent-code:\n    post:\n      tags:\n      - KYC\n      summary: \u003e\n        Send a consent code by sms to a user. The end-user will have to tell this code to the RO/PEO to allow him to access his/her personal information.\n      parameters:\n      - name: userId\n        in: path\n        description: User id\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: Code correctly sent by SMS\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    type: string\n        400:\n          description: \"Invalid input\"\n        403:\n          description: \"No permission to call this operation\"\n        409:\n          description: Consent feature is not enabled for the realm of the JWT token\n  /kyc/social/users/{userId}/send-sms-code:\n    post:\n      tags:\n      - KYC\n      summary: \u003e\n        Send an sms code to a user and returns the value to the requester. This can be used by RO/PEO to ensure the person claiming for something really owns the mobile as a proof of its identity.\n      parameters:\n      - name: userId\n        in: path\n        description: User id\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: Code correctly sent by SMS\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    type: string\n        400:\n          description: \"Invalid input\"\n        403:\n          description: \"No permission to call this operation\"\n  /kyc/realms/{realm}/users:\n    get:\n      tags:\n      - KYC\n      summary: Gets a user (search by username)\n      security:\n        - openId: []\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: username\n        in: query\n        description: name of the user to be retrieved\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: Returns the found user with fields id, username, firstName, lastName, emailVerified, phoneNumber, phoneNumberVerified and accreditations only\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        403:\n          description: No permission to call this operation\n  /kyc/realms/{realm}/users/{userId}:\n    get:\n      tags:\n      - KYC\n      summary: Gets a user\n      security:\n        - openId: []\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: userId\n        in: path\n        description: user id\n        required: true\n        schema:\n          type: string\n      - name: consent\n        in: query\n        description: consent code received by SMS on the end-user mobile phone\n        required: false\n        schema:\n          type: string\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        403:\n          description: No permission to call this operation\n        430:\n          description: Missing or invalid consent code \n    put:\n      tags:\n      - KYC\n      summary: \u003e\n        Updates a user after physical identification.\n        User id parameter is mandatory in the path of the URL. The username value in the request body will be overriden by the username from Keycloak.\n        Same method as /kyc/social/users/{userId} but for a specific realm\n      security:\n        - openId: []\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: userId\n        in: path\n        description: user id\n        required: true\n        schema:\n          type: string\n      - name: consent\n        in: query\n        description: consent code received by SMS on the end-user mobile phone\n        required: false\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                type: string\n        400:\n          description: Invalid information provided\n        403:\n          description: No permission to call this operation\n        430:\n          description: Missing or invalid consent code \n  /kyc/realms/{realm}/users/{userId}/send-consent-code:\n    post:\n      tags:\n      - KYC\n      summary: \u003e\n        Send a consent code by sms to a user. The end-user will have to tell this code to the RO/PEO to allow him to access his/her personal information.\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: userId\n        in: path\n        description: User id\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: Code correctly sent by SMS\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    type: string\n        400:\n          description: \"Invalid input\"\n        403:\n          description: \"No permission to call this operation\"\n        409:\n          description: Consent feature is not enabled for the realm of the JWT token\n  /kyc/realms/{realm}/users/{userId}/send-sms-code:\n    post:\n      tags:\n      - KYC\n      summary: \u003e\n        Send an sms code to a user and returns the value to the requester. This can be used by RO/PEO to ensure the person claiming for something really owns the mobile as a proof of its identity.\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: userId\n        in: path\n        description: User id\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: Code correctly sent by SMS\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    type: string\n        400:\n          description: \"Invalid input\"\n        403:\n          description: \"No permission to call this operation\"\ncomponents:\n  schemas:\n    Actions:\n      type: object\n      properties:\n        name:\n          type: string\n        scope:\n          type: string\n    User:\n      type: object\n      required: [gender, firstName, lastName, emailAddress, phoneNumber]\n      properties:\n        id:\n          type: string\n          description: Ignored by PUT user\n        username:\n          type: string\n          description: Ignored by PUT user\n        gender:\n          type: string\n          enum: [M,F,U]\n          description: Male, Female or Undefined\n        firstName:\n          type: string\n        lastName:\n          type: string\n        email:\n          type: string\n          description: Ignored by PUT user\n        emailVerified:\n          type: boolean\n          description: Ignored by PUT user\n        phoneNumber:\n          type: string\n          description: Ignored by PUT user\n        phoneNumberVerified:\n          type: boolean\n          description: Ignored by PUT user\n        birthDate:\n          type: string\n          description: format is DD.MM.YYYY\n        birthLocation:\n          type: string\n        nationality:\n          type: string\n          description: ISO 3166 Alpha-2 country code\n        idDocumentType:\n          type: string\n          enum: [ID_CARD, PASSPORT, RESIDENCE_PERMIT]\n        idDocumentNumber:\n          type: string\n        idDocumentExpiration:\n          type: string\n        idDocumentCountry:\n          type: string\n          description: ISO 3166 Alpha-2 country code\n        groups:\n          type: array\n          items:\n            type: string\n          description: Only used by GetUserByUsername (corporate)\n        locale:\n          type: string\n        businessId:\n          type: string\n          description: Business identifier (can be GLN)\n        comment:\n          type: string\n          description: Used only by validateUser\n        accreditations:\n          type: array\n          description: Used only by getUser\n          items:\n            type: object\n            properties:\n              type:\n                type: string\n                description: accreditation type\n              expiryDate:\n                type: string\n                description: expiry date. format is DD.MM.YYYY\n              expired:\n                type: bool\n                description: true if the expiry date has passed\n              revoked:\n                type: bool\n                description: true if the accreditation has been revoked\n        attachments:\n          type: array\n          description: Used only by validateUser and currently limited to one attachment.\n          items:\n            $ref: '#/components/schemas/Attachment'\n    Attachment:\n      type: object\n      required: [content]\n      properties:\n        filename:\n          type: string\n        contentType:\n          type: string\n          description: when missing, content type is evaluated using file extension\n        content:\n          type: string\n          format: byte\n          description: file size should be smaller than 5 Mo\n  securitySchemes:\n    openId:\n      type: openIdConnect\n      openIdConnectUrl: http://toto.com/.well-known/openid-configuration"
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"User\": parse schema: property \"accreditations\": parse schema: item: parse schema: property \"expired\": parse schema: unexpected schema type: \"bool\""
}