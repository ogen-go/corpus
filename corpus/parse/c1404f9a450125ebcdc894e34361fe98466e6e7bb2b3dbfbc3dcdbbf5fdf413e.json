{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/mmuller88/alf-cdk"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "templates/openapi.yaml",
			"byteSize": 28187,
			"content": "openapi: \"3.0.1\"\ninfo:\n  title: \"The Alfresco Provisioner \"\n  description: |\n    First of all. Thank you for joining the closed alpha. Your feedback will be much welcomed. The Alfresco Provisioner is a managed service to provide Alfresco backends with an awesome experience. For more details please look https://martinmueller.dev/alf-provisioner-eng.\n\n    As the Alfresco Provisioner is a managed service to provide Alfresco backends it would be very great if you could get a roughly overview about what the Alfresco products are for. In my blog post mentioned above I give you a rough overview about the Alfresco products in the Closed Alpha section.\n\n    As this is an alpha version, you will find for sure bugs. Please report them back to me under: damadden88@googlemail.com\n\n    Notice:\n    As this is an early version of the Alfresco Provisioner a lot features are not implemented yet.\n\n    I decided not to bother much with the complexity of authorization and permission yet. I will add those as a layer. So for now it is possible to alter resources belonging to an other user than you. Please don't do that if not agreed and only use your username for instance creation. Anyway the endpoints themself are indeed secured with oauth2 and an implicit grant which is put in the Authorization header. SO USING THE AUTHORIZE POPUP IN THE UI ISN'T NECESSARY.\n\n    If you see returning a 401 with the message \"The incoming token has expired\" just refresh the page and a new token will be generated.\n\n    For cost saving reasons per default the EC2 instance will stop themself after 45 minutes after creation or update. You can start the instance again with using the PUT endpoint.\n    As well you are only allowed to create a maximum of 2 instances per user. Please terminate not used instances with the PUT endpoint and \"expectedStatus\" = \"terminated\".\n\n    How to start?:\n    Simply explore the provided endpoints in the next section. The endpoints in the tag group named instances are showing your / all existent Alfresco Instanzes. The group tag named instances-conf helps to request alfresco instances or alter them. For a starter you could use the POST Endpoint to request the creation of an Alfresco instanz. Than check your request with the GET endpoints in the instance-conf tag group. If your instance request was granted you will find your instanz in the instances tag group. Please regard that the alfresco url will be available after about 3 minutes as it takes a bit for ACS to boot successfully. After that /share /alfresco and ACA / will be reachable on the url similar looking to iab12.i.alfpro.net .\n\n    Implemented features:\n      * Start, Stopping and Terminating of Alfresco instances\n      * Accessing ACA, Share and Alfresco Urls (more details look for the url property definition below)\n      * Cost Saving feature for stopping the instances after 45 minutes\n      * Asynchronacl communication with the Alfresco Provisioner server\n      * using the authenticated username as userId for convenience\n\n    Planned features in near future:\n      * Status endpoint for instance creation progress\n      * Adding an Auto Scaling in front of the ec2 image for autoself healing and a health check if ACS is finished booting and ready\n      * SSL encryption. Currently there is no HTTPS configured with the Proxy in front of each Alfresco instanz provisioned by the Provisioner. So be cautious to not store sensible data!\n      * Email notification. I plan to send an email when your Alfresco Instanz is ready. But for now you need to check the progress on the GET /instances-conf endpoint and the info property.\n\n    Planned features in more distance future:\n      * Stopping instances after inactivity and not the static 45 minutes.\n      * Potentially Load Balancer in front to drive multiple instances for bigger use cases\n\n    Again thank you so much for testing the Alfresco Provisioner. Any feedback is much welcomed! Please let me know on damadden88@googlemail.com .\n  version: \"1.0.3\"\nservers:\n- url: \"https://api@@API_STAGE@@.alfpro.net\"\npaths:\n  /instances:\n    get:\n      tags:\n        - instances\n      operationId: getInstances\n      description: |\n        Gets details about all running Alfresco instances. Notice as there is no permission context implemented yet you can view all / specific instances with leaving out the userId parameter oder take a userId from another user.\n      parameters:\n        - $ref: '#/components/parameters/userIdQueryParam'\n      security:\n        - AlfCDKAuthorizer:\n          - aws.cognito.signin.user.admin\n          # - \"aws.cognito.signin.user.admin\"\n      x-amazon-apigateway-request-validator: \"Validator\"\n      x-amazon-apigateway-integration:\n        uri: \"arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:getInstancesApi/invocations\"\n        passthroughBehavior: \"when_no_match\"\n        httpMethod: \"POST\"\n        type: \"aws_proxy\"\n        credentials: \"arn:aws:iam::981237193288:role/apiRole-@@STAGE@@\"\n      responses:\n        200:\n          description: |\n            The urls will be available after about 3 minutes.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InstanceList'\n        401:\n          description: Authorization information is missing or invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AuthError'\n        # default:\n        #   description: unexpected Error\n        #   content:\n        #     application/json:\n        #       schema:\n        #         $ref: '#/components/schemas/Error'\n    options:\n      tags:\n        - instances\n      operationId: optionsInstances\n      x-amazon-apigateway-integration:\n        uri: \"arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:optionsApi/invocations\"\n        passthroughBehavior: \"when_no_match\"\n        httpMethod: \"POST\"\n        type: \"aws_proxy\"\n        credentials: \"arn:aws:iam::981237193288:role/apiRole-@@STAGE@@\"\n      responses:\n        200:\n          description: \"200 response\"\n          headers:\n            Access-Control-Allow-Origin:\n              schema:\n                type: \"string\"\n            Access-Control-Allow-Methods:\n              schema:\n                type: \"string\"\n            Access-Control-Allow-Credentials:\n              schema:\n                type: \"string\"\n            Access-Control-Allow-Headers:\n              schema:\n                type: \"string\"\n  /instances/{instanceId}:\n    get:\n      tags:\n        - instances\n      operationId: getInstance\n      description: |\n        Gets details about a specific instanceId.\n      parameters:\n        - $ref: '#/components/parameters/instanceIdPathParam'\n      responses:\n        200:\n          description: |\n            The urls will be available after about 3 minutes.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Instance'\n        400:\n          description: Bad request. instanceId is invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n        401:\n          description: Authorization information is missing or invalid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AuthError'\n        404:\n          description: Conf with instanceId doesn't exist or instanceId doesn't belong to userId\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FoundError'\n      security:\n        - AlfCDKAuthorizer:\n          - aws.cognito.signin.user.admin\n          # - \"aws.cognito.signin.user.admin\"\n      x-amazon-apigateway-integration:\n        uri: \"arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:getInstancesApi/invocations\"\n        passthroughBehavior: \"when_no_match\"\n        httpMethod: \"POST\"\n        type: \"aws_proxy\"\n        credentials: \"arn:aws:iam::981237193288:role/apiRole-@@STAGE@@\"\n    options:\n      tags:\n        - instances\n      parameters:\n        - $ref: '#/components/parameters/instanceIdPathParam'\n      x-amazon-apigateway-integration:\n        uri: \"arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:optionsApi/invocations\"\n        passthroughBehavior: \"when_no_match\"\n        httpMethod: \"POST\"\n        type: \"aws_proxy\"\n        credentials: \"arn:aws:iam::981237193288:role/apiRole-@@STAGE@@\"\n      operationId: optionsInstance\n      responses:\n        200:\n          description: \"200 response\"\n          headers:\n            Access-Control-Allow-Origin:\n              schema:\n                type: \"string\"\n            Access-Control-Allow-Methods:\n              schema:\n                type: \"string\"\n            Access-Control-Allow-Credentials:\n              schema:\n                type: \"string\"\n            Access-Control-Allow-Headers:\n              schema:\n                type: \"string\"\n  /instances-conf:\n    get:\n      tags:\n        - instances-conf\n      operationId: getInstanceConfs\n      description: |\n        Gets details about all requested Alfresco instances. If you see here your requested Alfresco instance it is likely that it was created already. However it is not guarented as might your limit per user is reached or other the overall maximum limit of instances was reached.\n      parameters:\n        - $ref: '#/components/parameters/userIdQueryParam'\n      x-amazon-apigateway-request-validator: \"Validator\"\n      security:\n        - AlfCDKAuthorizer:\n          - aws.cognito.signin.user.admin\n          # - \"aws.cognito.signin.user.admin\"\n      x-amazon-apigateway-integration:\n        uri: \"arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:getAllConfApi/invocations\"\n        passthroughBehavior: \"when_no_match\"\n        httpMethod: \"POST\"\n        type: \"aws_proxy\"\n        credentials: \"arn:aws:iam::981237193288:role/apiRole-@@STAGE@@\"\n      responses:\n        200:\n          description: |\n            Successfully retrieved details about the instance configuration.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InstanceConfList'\n        401:\n          description: Authorization information is missing or invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AuthError'\n        # default:\n        #   description: unexpected Error\n        #   content:\n        #     application/json:\n        #       schema:\n        #         $ref: '#/components/schemas/Error'\n    post:\n      tags:\n        - instances-conf\n      operationId: addInstanceConf\n      description: |\n        Creates an Alfresco instance request. Per userId you can only create max 2 instances! Please check how much you already have created as you don't get a warning here!\n\n        After your created successfully an instance request check out the GET /instances​/{instanceId} endpoint with your instanceId.\n\n        Please regard that the alfresco instance needs about 3 minutes for beeing reachable.\n      requestBody:\n        description: Body for Alf Instance Create. Please insert your username for userId.\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/NewInstanceConf\"\n        required: true\n      security:\n        - AlfCDKAuthorizer:\n          - aws.cognito.signin.user.admin\n          # - \"aws.cognito.signin.user.admin\"\n      x-amazon-apigateway-request-validator: \"Validator\"\n      x-amazon-apigateway-integration:\n        uri: \"arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:createConfApi/invocations\"\n        passthroughBehavior: \"when_no_match\"\n        httpMethod: \"POST\"\n        type: \"aws_proxy\"\n        credentials: \"arn:aws:iam::981237193288:role/apiRole-@@STAGE@@\"\n      responses:\n        201:\n          description: Alf instance creation initiated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InstanceConf\"\n        400:\n          description: Bad request. **gitRepo** or **ec2InstanceType** doesn't exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n        401:\n          description: Authorization information is missing or invalid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AuthError'\n        # default:\n        #   description: unexpected Error\n        #   content:\n        #     application/json:\n        #       schema:\n        #         $ref: '#/components/schemas/Error'\n    options:\n      tags:\n        - instances-conf\n      operationId: optionInstanceConf\n      x-amazon-apigateway-integration:\n        uri: \"arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:optionsApi/invocations\"\n        passthroughBehavior: \"when_no_match\"\n        httpMethod: \"POST\"\n        type: \"aws_proxy\"\n        credentials: \"arn:aws:iam::981237193288:role/apiRole-@@STAGE@@\"\n      responses:\n        200:\n          description: \"200 response\"\n          headers:\n            Access-Control-Allow-Origin:\n              schema:\n                type: \"string\"\n            Access-Control-Allow-Methods:\n              schema:\n                type: \"string\"\n            Access-Control-Allow-Credentials:\n              schema:\n                type: \"string\"\n            Access-Control-Allow-Headers:\n              schema:\n                type: \"string\"\n  /instances-conf/{instanceId}:\n    get:\n      tags:\n        - instances-conf\n      operationId: getInstanceConf\n      description: |\n        Gets details about a specific alfresco request configuration.\n      parameters:\n        - $ref: '#/components/parameters/instanceIdPathParam'\n        - in: query\n          name: userId\n          description: User id Query Parameter. Please use you user name from the system.\n          required: true\n          schema:\n            $ref: '#/components/schemas/userId'\n      security:\n      - AlfCDKAuthorizer:\n        - \"aws.cognito.signin.user.admin\"\n      x-amazon-apigateway-request-validator: \"Validator\"\n      x-amazon-apigateway-integration:\n        uri: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:getOneConfApi/invocations'\n        passthroughBehavior: \"when_no_match\"\n        httpMethod: \"POST\"\n        type: \"aws_proxy\"\n        credentials: \"arn:aws:iam::981237193288:role/apiRole-@@STAGE@@\"\n      responses:\n        200:\n          description: |\n            Successfully retrieved details about the instance configurations.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InstanceConf'\n        400:\n          description: Bad request. instanceId or userId is invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n        401:\n          description: Authorization information is missing or invalid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AuthError'\n        404:\n          description: Conf with instanceId doesn't exist or instanceId doesn't belong to userId\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FoundError'\n    put:\n      tags:\n        - instances-conf\n      operationId: updateInstanceConf\n      description: |\n        Requests attribute instance changes. Please regard if you put back your instance from stopped to running it can take some minutes for ACS finishing booting.\n      parameters:\n        - $ref: '#/components/parameters/instanceIdPathParam'\n      requestBody:\n        description: Body for Alf Instance Update. Currently only the update of the status is supported!\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PutInstanceConf\"\n        required: true\n      security:\n      - AlfCDKAuthorizer:\n        - \"aws.cognito.signin.user.admin\"\n      x-amazon-apigateway-request-validator: \"Validator\"\n      x-amazon-apigateway-integration:\n        uri: \"arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:updateApi/invocations\"\n        passthroughBehavior: \"when_no_match\"\n        httpMethod: \"POST\"\n        type: \"aws_proxy\"\n        credentials: \"arn:aws:iam::981237193288:role/apiRole-@@STAGE@@\"\n      responses:\n        201:\n          description: Alf instance Conf updated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InstanceConf\"\n        400:\n          description: Bad request. Not supported state for **expectedStatus** .\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n        401:\n          description: Authorization information is missing or invalid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AuthError'\n        403:\n          description: You are not allowed to access the instance-conf or you tried to change state from terminated to something else which isn't possible.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UpdateError'\n        404:\n          description: Conf with instanceId doesn't exist or instanceId doesn't belong to userId\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FoundError'\n        # default:\n        #   description: unexpected Error\n        #   content:\n        #     application/json:\n        #       schema:\n        #         $ref: '#/components/schemas/Error'\n    options:\n      tags:\n        - instances-conf\n      operationId: optionsInstancesConf\n      parameters:\n        - $ref: '#/components/parameters/instanceIdPathParam'\n      x-amazon-apigateway-integration:\n        uri: \"arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:optionsApi/invocations\"\n        passthroughBehavior: \"when_no_match\"\n        httpMethod: \"POST\"\n        type: \"aws_proxy\"\n        credentials: \"arn:aws:iam::981237193288:role/apiRole-@@STAGE@@\"\n      responses:\n        200:\n          description: \"200 response\"\n          headers:\n            Access-Control-Allow-Origin:\n              schema:\n                type: \"string\"\n            Access-Control-Allow-Methods:\n              schema:\n                type: \"string\"\n            Access-Control-Allow-Credentials:\n              schema:\n                type: \"string\"\n            Access-Control-Allow-Headers:\n              schema:\n                type: \"string\"\ncomponents:\n  parameters:\n    userIdQueryParam:\n      in: query\n      name: userId\n      description: User id Query Parameter. Please use you user name from the system.\n      required: false\n      schema:\n        $ref: '#/components/schemas/userId'\n    instanceIdPathParam:\n      in: path\n      name: instanceId\n      #description: alf instance id path parameter. Consist of 5 characters!\n      required: true\n      schema:\n        $ref: '#/components/schemas/instanceId'\n  schemas:\n    Error:\n      required:\n        - message\n      properties:\n        message:\n          type: string\n    FoundError:\n      required:\n        - message\n      properties:\n        message:\n          type: string\n          example: Not Found\n    AuthError:\n      required:\n        - message\n      properties:\n        message:\n          type: string\n          example: Unauthorized\n    ValidationError:\n      required:\n        - message\n        - validationErrors\n      properties:\n        message:\n          type: string\n          example: Invalid request body\n        validationErrors:\n          type: string\n          example: '[instance value (\"terminatedd\") not found in enum (possible values: [\"running\",\"terminated\",\"stopped\"])]'\n    UpdateError:\n      allOf:\n        - $ref: '#/components/schemas/Error'\n        - required:\n          - instanceConf\n          properties:\n            schema:\n              $ref: \"#/components/schemas/InstanceConf\"\n    InstanceList:\n      additionalProperties: false\n      type: array\n      items:\n        $ref: '#/components/schemas/Instance'\n    Instance:\n      additionalProperties: false\n      type: object\n      required:\n        - instanceId\n        - status\n        - adminCredentials\n      properties:\n        instanceId:\n          $ref: '#/components/schemas/instanceId'\n        status:\n          type: string\n          $ref: '#/components/schemas/status'\n        adminCredentials:\n          additionalProperties: false\n          type: object\n          required:\n            - userName\n            - password\n          properties:\n            userName:\n              type: string\n              example: admin\n            password:\n              type: string\n              example: admin\n        # info:\n        #   type: string\n        #   description: Specific information about the ACS Deployment\n        url:\n          type: string\n          example: w23d.alfpro.net\n          description: |\n            The Url to access ACA. Currently only http is supported. Urls are ACA = ../ Share = ../share Alfresco = ../alfresco . It takes up to 3 minutes until this url becomes available. In future I plan to implement a healthcheck (probably leveraging AWS AutoScaling) to make the readiness of ACS more feaseble.\n\n            The propagation of the DNS Record normally takes a bit longer. Alternatively you can use the awsUrl to access your instance.\n        awsUrl:\n          type: string\n          example: ec2-35-176-42-57.eu-west-2.compute.amazonaws.com\n          description: |\n            Alternative url for the Alfresco instance.\n        # shortLived:\n        #   $ref: '#/components/schemas/shortLived'\n    InstanceConfList:\n      type: array\n      items:\n        $ref: '#/components/schemas/InstanceConf'\n    InstanceConf:\n      additionalProperties: false\n      allOf:\n        - $ref: '#/components/schemas/NewInstanceConf'\n        - required:\n          - instanceId\n          - expectedStatus\n          properties:\n            instanceId:\n              $ref: '#/components/schemas/instanceId'\n            expectedStatus:\n              $ref: '#/components/schemas/expectedStatus'\n            # lastStatus:\n            #   $ref: '#/components/schemas/lastStatus'\n    NewInstanceConf:\n      additionalProperties: false\n      type: object\n      required:\n        - userId\n      properties:\n        alfType:\n          $ref: '#/components/schemas/alfType'\n        tags:\n          $ref: '#/components/schemas/tags'\n        userId:\n          $ref: '#/components/schemas/userId'\n        # shortLived:\n        #   $ref: '#/components/schemas/shortLived'\n    PutInstanceConf:\n      additionalProperties: false\n      type: object\n      required:\n        - userId\n      properties:\n        expectedStatus:\n          $ref: '#/components/schemas/expectedStatus'\n        userId:\n          $ref: '#/components/schemas/userId'\n    userId:\n      additionalProperties: false\n      # default: alfresco\n      type: string\n      description: Simple user name. Please use your user name from the system.\n      example: martin\n      pattern: \"[a-zA-Z0-9]{2,64}\"\n      minLength: 2\n      maxLength: 64\n    instanceId:\n      additionalProperties: false\n      type: string\n      description: User Instance Identifier created with node uuid. Consists of 5 characters!\n      pattern: \"[a-z0-9]{5,5}\"\n      example: 'iew2m'\n      minLength: 5\n      maxLength: 5\n    tags:\n      type: object\n      description: 'Tags. You can add more tags if you want. For example \"notice\" : \"Thats an instance for Bob\"'\n      properties:\n        name:\n          type: string\n          description: A Name which will be attached as Name Tag to the EC2 Instance\n          example: No Name\n          default: No Name\n    # lastStatus:\n    #   additionalProperties: false\n    #   type: object\n    #   description: Information about when the status was successfully changed last time\n    #   required:\n    #     - lastUpdate\n    #     - status\n    #   properties:\n    #     lastUpdate:\n    #       type: string\n    #       format: date\n    #     status:\n    #       $ref: '#/components/schemas/status'\n    # expectedStatus:\n    status:\n      # additionalProperties: false\n      type: string\n      description: Shows the current state. Even if your instance is in the running state it might take some minutes until the provided url is reachable.\n      enum:\n        - running\n        - terminated\n        - stopped\n        - pending\n        - stopping\n      default: running\n    expectedStatus:\n      # additionalProperties: false\n      type: string\n      description: The state you are allow to put your instance in. Warning putting instances into terminated will delete the instance-conf and instance!\n      enum:\n        - running\n        - terminated\n        - stopped\n      default: running\n    alfType:\n      additionalProperties: false\n      type: object\n      required:\n        - ec2InstanceType\n        - gitRepo\n      properties:\n        ec2InstanceType:\n          type: string\n          description: |\n            Supported Ec2 Instance Type. Supported are:\n            t2.large - 2 CPU, 8 GB RAM\n            t2.xlarge - 4 CPU, 16 GB RAM\n          enum:\n            - t2.large\n            - t2.xlarge\n          default: t2.large\n        gitRepo:\n          type: string\n          description: |\n            Name of supported Alfresco Docker Compose Deployment deployed with the Alfresco installer.\n            alf-ec-1 : ACS 6.2 Community, ACA\n          enum:\n            - alf-ec2-1\n          default: alf-ec2-1\n    # shortLived:\n    #   additionalProperties: false\n    #   type: boolean\n    #   description: If true it will terminate after 55 min. Otherwise it will live for 3 days.\n    #   default: true\n  securitySchemes:\n    AlfCDKAuthorizer:\n      type: \"apiKey\"\n      name: \"Authorization\"\n      in: \"header\"\n      x-amazon-apigateway-authtype: \"cognito_user_pools\"\n      x-amazon-apigateway-authorizer:\n        providerARNs:\n        - \"arn:aws:cognito-idp:us-east-1:981237193288:userpool/us-east-1_8c1pujn9g\"\n        type: \"cognito_user_pools\"\n# x-amazon-apigateway-gateway-responses:\n#   BAD_REQUEST_BODY:\n#     responseParameters:\n#       gatewayresponse.header.Access-Control-Exposed-Headers: \"'ETag','x-amz-meta-custom-header','Authorization','Content-Type','Accept'\"\n#       gatewayresponse.header.Access-Control-Allow-Methods: \"'*'\"\n#       gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n#       gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n#     responseTemplates:\n#       application/json: \"{\\\"message\\\":$context.error.messageString,\\\"validationErrors\\\"\\\n#         :\\\"$context.error.validationErrorString\\\"}\"\n#   DEFAULT_4XX:\n#     responseParameters:\n#       gatewayresponse.header.Access-Control-Exposed-Headers: \"'ETag','x-amz-meta-custom-header','Authorization','Content-Type','Accept'\"\n#       gatewayresponse.header.Access-Control-Allow-Methods: \"'*'\"\n#       gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n#       gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\nx-amazon-apigateway-request-validators:\n  Validator:\n    validateRequestParameters: true\n    validateRequestBody: true\n",
			"canonicalURL": "/github.com/mmuller88/alf-cdk@3fca82460e36435c12626fe57e6231cf5957363b/-/blob/templates/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/mmuller88/alf-cdk/blob/3fca82460e36435c12626fe57e6231cf5957363b/templates/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/instances-conf/{instanceId}\": at 1:14688: get: operation \"getInstanceConf\": at 1:14695: at 1:15759: security: list of scopes MUST be empty for \"type\" \"apiKey\""
}