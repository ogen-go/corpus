{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/rapi-doc/RapiDoc"
		},
		"file": {
			"name": "code-highlight.yaml",
			"size": 0,
			"path": "docs/specs/code-highlight.yaml",
			"byteSize": 5061,
			"content": "openapi: 3.0.0\ninfo:\n  title: Syntax Highlighting\n  version: 1.0.0\n  description: |\n\n    You may provide little snippets of code using markdown syntax and they will be color coded based on the language you specified as shown below\n    ```\n        ```java\n          some code...\n          ...\n          ...\n        ```\n    ```\n\n    Following are the supported language codes that you may use for syntax highlighting\n\n    - `bash` `shell`\n    - `markup` `html` `xml` `svg`\n    - `json`\n    - `yaml` `yml`\n    - `go`\n    - `javascript` `js`\n    - `java`\n    - `python` `py`\n    - `csharp` `cs`\n    - `http`\n    - `css`\n\n    **No Highlight**\n    ```\n    $ curl -X POST -is -u username:password \n      -H \"Content-Type: application/json\" https://example.com\n      -d '{\n        \"target\": {\n          \"ref_type\": \"branch\", \n          \"type\": \"pipeline_ref_target\", \n          \"ref_name\": \"master\"\n        }\n      }'\n    ```\n\n    **SHELL** `shell` `bash` \n    ```bash\n    $ curl -X POST -is -u username:password \n      -H \"Content-Type: application/json\" https://example.com\n      -d '{\n        \"target\": {\n          \"ref_type\": \"branch\", \n          \"type\": \"pipeline_ref_target\", \n          \"ref_name\": \"master\"\n        }\n      }'\n    \n    ```\n\n    **MARKUP** `markup` `html` `xml` `svg` \n    ```markup\n    \u003c!doctype html\u003e\n\n    \u003chtml\u003e\n      \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e \u003c!-- Important: rapi-doc uses utf8 characters --\u003e\n        \u003cscript type=\"module\" src=\"https://unpkg.com/rapidoc/dist/rapidoc-min.js\"\u003e\u003c/script\u003e\n      \u003c/head\u003e\n      \u003cbody\u003e\n        \u003crapi-doc spec-url=\"https://petstore.swagger.io/v2/swagger.json\"\u003e \u003c/rapi-doc\u003e\n      \u003c/body\u003e \n    \u003c/html\u003e\n    ```\n\n    **JSON** `json`\n    ```json\n    {\n      \"firstName\": \"Mickey\",\n      \"lastName\": \"Mouse\",\n      \"age\": 9,\n      \"married\": false,\n    }\n    ```\n\n    **YAML** `yaml` `yml` \n    ```yaml\n    openapi: 3.0.0\n    info:\n      title: Syntax Highlighting\n      version: 1.0.0\n      description: \u003e\n        Example of \n        Syntax highlighting\n    ```\n\n    **GO** `go`\n    ```go\n    func readFileAsLines(path string) ([]string, error) {\n      d, err := ioutil.ReadFile(path)\n      if err != nil {\n        return nil, err\n      }\n      s := string(d)\n      res := strings.Split(s, \"\\n\")\n      return res, nil\n    }\n    ```\n\n    **JAVA SCRIPT** `javascript` `js`\n    ```js\n      function add(x, y) {\n        const answer = x + y;\n        return answer;\n      }\n\n      for (let i = 0; i \u003c 10; i++){\n        console.log(3, i); // prints in console\n      }\n    ```\n\n    **JAVA** `java`\n    ```java\n    BufferedWriter out = null;\n    try {\n      out = new BufferedWriter(new FileWriter(”filename”, true));\n      out.write(”aString”);\n    } catch (IOException e) {\n      // error processing code\n    } finally {\n      if (out != null) {\n        out.close();\n      }\n    }\n    ```\n\n    **PYTHON** `python` `py`\n    ```python\n    @app.route('/parse_data', methods=['GET', 'POST'])\n    # define the function\n    def parse_data():\n      if request.method == 'POST':\n        search = request.get_json()\n        return jsonify(search)\n      return render_template('index.html')\n    ```\n\n    **C SHARP** `chsarp` `cs`\n    ```csharp\n    using System.IO.Compression;\n\n    namespace MyApplication {\n      [Obsolete(\"...\")]\n      class Program : IInterface {\n        public static List\u003cint\u003e JustDoIt(int count) {\n          Console.WriteLine($\"Hello {Name}!\");\n          return new List\u003cint\u003e(new int[] { 1, 2, 3 })\n        }\n      }\n    }\n    ```\n\n    **HTTP** `http`\n    ```http\n    POST /pet HTTP/1.1\n    Host: example.org\n    Content-Type: application/json; charset=utf-8\n    Content-Length: 137\n\n    {\n      \"status\": \"ok\",\n      \"extended\": true,\n      \"results\": [\n        {\"value\": 0, \"type\": \"int64\"},\n        {\"value\": 1.0e+3, \"type\": \"decimal\"}\n      ]\n    }\n    ```\n\npaths:\n  /code:\n    get:\n      summary: Syntax Highlighting in Markdown\n      description: |\n        Syntax Highlighting in **OPERATION DESCRIPTION**\n        ```http\n        POST /pet HTTP/1.1\n        Host: example.org\n        Content-Type: application/json; charset=utf-8\n        Content-Length: 137\n\n        {\n          \"status\": \"ok\",\n          \"extended\": true,\n          \"results\": [\n            {\"value\": 0, \"type\": \"int64\"},\n            {\"value\": 1.0e+3, \"type\": \"decimal\"}\n          ]\n        }\n        ```\n\n    post:\n      summary: Request body\n      requestBody:\n        description: |\n          Syntax Highlighting in **REQUEST BODY**\n          ```js\n          function add(x, y) {\n            const answer = x + y;\n            return answer;\n          }\n\n          for (let i = 0; i \u003c 10; i++){\n            console.log(3, i); // prints in console\n          }\n          ```\n\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Price\"\n    \n      responses:\n        '200':\n          description: Successful\n\ncomponents:\n  schemas:\n    Price:\n      type: object\n      properties:\n        amount:\n          type: integer\n        currency:\n          type: string\n          ",
			"canonicalURL": "/github.com/rapi-doc/RapiDoc@d3a9bf67a2007d5ff12473ec1e8d2fd2c39f5639/-/blob/docs/specs/code-highlight.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/rapi-doc/RapiDoc/blob/d3a9bf67a2007d5ff12473ec1e8d2fd2c39f5639/docs/specs/code-highlight.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/code\": get: at 1:3781: responses: no responses"
}