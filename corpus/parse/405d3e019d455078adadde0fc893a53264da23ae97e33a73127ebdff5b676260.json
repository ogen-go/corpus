{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/cloudtrust/keycloak-bridge"
		},
		"file": {
			"name": "swagger-api_management.yaml",
			"size": 0,
			"path": "api/management/swagger-api_management.yaml",
			"byteSize": 58188,
			"content": "openapi: 3.0.1\ninfo:\n  title: Swagger Cloudtrust Management\n  description: 'Management API for Cloudtrust'\n  version: 1.0.0\nservers:\n- url: http://localhost:8888/management\ntags:\n- name: Realms\n  description: Realms management\n- name: Clients\n  description: Clients management\n- name: Users\n  description: Users management\n- name: Roles\n  description: Roles management\npaths:\n  /actions:\n    get:\n      tags:\n      - Actions\n      summary: Get the list of all possible actions\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Actions'\n  /realms/{realm}:\n    get:\n      tags:\n      - Realms\n      summary: Get the top-level representation of the realm It will not include nested information like User and Client representations.\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Realm'\n  /realms/{realm}/clients:\n    get:\n      tags:\n      - Clients\n      summary: Get clients belonging to the realm.\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: Returns a list of clients belonging to the realm.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Client'\n  /realms/{realm}/required-actions:\n    get:\n      tags:\n      - Required Actions\n      summary: Get required actions available for the realm.\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: Returns a list of required actions enabled in the realm.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RequiredAction'\n  /realms/{realm}/clients/{clientID}:\n    get:\n      tags:\n      - Clients\n      summary: Get representation of the client\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: clientID\n        in: path\n        description: id of client (not client-id)\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Client'\n  /realms/{realm}/trustIdGroups:\n    get:\n      tags:\n      - Users\n      summary: Get available trustID groups\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n                example:\n                  [\"product_administrator\",\"registration_officer\"]\n  /realms/{realm}/users:\n    post:\n      tags:\n      - Users\n      summary: \u003e\n        Create a new user.\n        Username must be unique.\n        Role and Groups can be assigned thanks to their ID.\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: generateUsername\n        in: query\n        description: tells if a username should be generated\n        required: false\n        schema:\n          type: boolean\n      - name: generateNameID\n        in: query\n        description: tells if a NameID should be generated\n        required: false\n        schema:\n          type: boolean\n      - name: termsOfUse\n        in: query\n        description: tells if terms of use are required (default false)\n        required: false\n        schema:\n          type: boolean\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        201:\n          description: successful operation\n          headers:\n            Location:\n              schema:\n                type: string\n              description: URL of the new resource.\n    get:\n      tags:\n      - Users\n      summary: \u003e\n        Get users.\n        Returns a list of users, filtered according to query parameters.\n        BirthLocation, and ID documents fields are not returned by this call.\n      parameters:\n      - name: realm\n        in: path\n        description: Name of the realm\n        required: true\n        schema:\n          type: string\n      - name: groupIds\n        in: query\n        description: list of groupId the users may belong to (list comma seperated)\n        required: true\n        schema:\n          type: string\n      - name: email\n        in: query\n        schema:\n          type: string\n        allowEmptyValue: true\n      - name: firstName\n        in: query\n        schema:\n          type: string\n        allowEmptyValue: true\n      - name: lastName\n        in: query\n        schema:\n          type: string\n        allowEmptyValue: true\n      - name: username\n        in: query\n        schema:\n          type: string\n        allowEmptyValue: true\n      - name: search\n        in: query\n        schema:\n          type: string\n        allowEmptyValue: true\n      - name: first\n        in: query\n        schema:\n          type: number\n        allowEmptyValue: true\n      - name: max\n        in: query\n        schema:\n          type: number\n        allowEmptyValue: true\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  count:\n                    type: number\n                  users:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/User'\n  /realms/{realm}/users/{userID}:\n    get:\n      tags:\n      - Users\n      summary: Get representation of the user\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: userID\n        in: path\n        description: User id\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n    put:\n      tags:\n      - Users\n      summary: \u003e\n        Update an existing user.\n        By default, missing or null fields make existing values be unmodified except if specified on the description of the User object.\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: userID\n        in: path\n        description: User id\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        200:\n          description: successful operation\n    delete:\n      tags:\n      - Users\n      summary: Delete the user\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: userID\n        in: path\n        description: User id\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: successful operation\n  /realms/{realm}/users/{userID}/lock:\n    put:\n      tags:\n      - Users\n      summary: Lock an existing user.\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: userID\n        in: path\n        description: User id\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: successful operation\n  /realms/{realm}/users/{userID}/unlock:\n    put:\n      tags:\n      - Users\n      summary: Unlock an existing user.\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: userID\n        in: path\n        description: User id\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: successful operation\n  /realms/{realm}/users/{userID}/status:\n    get:\n      tags:\n      - Users\n      summary: Get the account status for the user (User enabled and has a second factor)\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: userID\n        in: path\n        description: User id\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DeprecatedUserStatus'\n  /realms/{realm}/users/status:\n    get:\n      tags:\n      - Users\n      summary: Returns current status of user\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: email\n        in: query\n        schema:\n          type: string\n        required: true\n        allowEmptyValue: false\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserStatus'\n        404:\n          description: user not found\n  /realms/{realm}/users/{userID}/roles:\n    get:\n      tags:\n      - Users\n      summary: Get roles of user\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: userID\n        in: path\n        description: User id\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Role'\n  /realms/{realm}/users/{userID}/roles/{roleID}:\n    post:\n      tags:\n      - Users\n      summary: Add role to user\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: userID\n        in: path\n        description: User id\n        required: true\n        schema:\n          type: string\n      - name: roleID\n        in: path\n        description: Role id\n        required: true\n        schema:\n          type: string\n      responses:\n        204:\n          description: successful operation\n        400:\n          description: role not found\n    delete:\n      tags:\n      - Users\n      summary: Remove role for user\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: userID\n        in: path\n        description: User id\n        required: true\n        schema:\n          type: string\n      - name: roleID\n        in: path\n        description: Role id\n        required: true\n        schema:\n          type: string\n      responses:\n        204:\n          description: successful operation\n        404:\n          description: role not found or not owned by user\n  /realms/{realm}/users/{userID}/groups:\n    get:\n      tags:\n      - Users\n      summary: Get groups of user\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: userID\n        in: path\n        description: User id\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Group'\n  /realms/{realm}/users/{userID}/groups/{groupID}:\n    post:\n      tags:\n      - Users\n      summary: Add group to user\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: userID\n        in: path\n        description: User id\n        required: true\n        schema:\n          type: string\n      - name: groupID\n        in: path\n        description: Group id\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: successful operation\n    delete:\n      tags:\n      - Users\n      summary: Remove group for user\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: userID\n        in: path\n        description: User id\n        required: true\n        schema:\n          type: string\n      - name: groupID\n        in: path\n        description: Group id\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: successful operation\n  /realms/{realm}/users/{userID}/trustIdGroups:\n    get:\n      tags:\n      - Users\n      summary: Get the trustID groups for the user\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: userID\n        in: path\n        description: User id\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n                example:\n                  [\"product_administrator\",\"registration_officer\"]\n    put:\n      tags:\n      - Users\n      summary: Set the trustID groups for the user\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: userID\n        in: path\n        description: User id\n        required: true\n        schema:\n          type: string\n      requestBody:\n        description: trustID groups\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                type: string\n              example:\n                [\"product_administrator\",\"registration_officer\"]\n      responses:\n        200:\n          description: successful operation\n  /realms/{realm}/users/{userID}/checks:\n    get:\n      tags:\n      - Users\n      summary: Get checks of the user\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: userID\n        in: path\n        description: User id\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UserCheck'\n  /realms/{realm}/users/{userID}/role-mappings/clients/{clientID}:\n    get:\n      tags:\n      - Users\n      summary: Get client-level roles for the user and the client\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: userID\n        in: path\n        description: User id\n        required: true\n        schema:\n          type: string\n      - name: clientID\n        in: path\n        description: Client id\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Role'\n    post:\n      tags:\n      - Users\n      summary: Add client-level roles to the user.\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: userID\n        in: path\n        description: User id\n        required: true\n        schema:\n          type: string\n      - name: clientID\n        in: path\n        description: Client id\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/Role'\n      responses:\n        200:\n          description: successful operation\n  /realms/{realm}/users/{userID}/reset-password:\n    put:\n      tags:\n      - Users\n      summary: \u003e\n        Set up a new password for the user. The value of the password is optional. \n        If no password is provided (i.e. the body is an empty JSON), a password is generated and returned in the response.\n        The generated password is a string that either follows the password policy imposed by the realm or has length 8 and contains letters (upper case, lower case) and numbers.\n        The password does not contain the following ambiguous characters - l, i,1, 0, o, O, 5, s, S.\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: userID\n        in: path\n        description: User id\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Password'\n      responses:\n        200:\n          description: successful operation\n          content:\n            text/plain:\n              schema:\n                type: string\n  /realms/{realm}/users/{userID}/execute-actions-email:\n    put:\n      tags:\n      - Users\n      summary: \u003e\n        Send a update account email to the user An email contains a link the user can click to perform a set of required actions.\n        The redirectUri and clientId parameters are optional.\n        If no redirect is given, then there will be no link back to click after actions have completed.\n        Redirect uri must be a valid uri for the particular clientId.\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: userID\n        in: path\n        description: User id\n        required: true\n        schema:\n          type: string\n      - name: client_id\n        in: query\n        schema:\n          type: string\n        allowEmptyValue: true\n      - name: lifespan\n        in: query\n        description: Number of seconds after which the generated token expires\n        schema:\n          type: string\n        allowEmptyValue: true\n      - name: redirect_uri\n        in: query\n        schema:\n          type: string\n        allowEmptyValue: true\n      - name: custom1\n        in: query\n        schema:\n          type: string\n      - name: custom2\n        in: query\n        schema:\n          type: string\n      - name: custom3\n        in: query\n        schema:\n          type: string\n      - name: custom4\n        in: query\n        schema:\n          type: string\n      - name: custom5\n        in: query\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                type: string\n      responses:\n        200:\n          description: successful operation\n  /realms/{realm}/users/{userID}/revoke-accreditations:\n    put:\n      tags:\n      - Users\n      summary: \u003e\n        Revoke accreditations.\n        NOTE: method is placed in /accreditations/realms/{realm}/users/{userID}/revoke-accreditations (not in /management)\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: userID\n        in: path\n        description: User id\n        required: true\n        schema:\n          type: string\n      responses:\n        204:\n          description: accreditations have been revoked\n        404:\n          description: nothing to revoke\n  /realms/{realm}/users/{userID}/send-sms-code:\n    post:\n      tags:\n      - Users\n      summary: \u003e\n        Send an sms code to a user and returns the value to the requester. This can be used by support to ensure the person claiming for something really owns the mobile as a proof of its identity.\n      parameters:\n      - name: realm\n        in: path\n        description: Realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: userID\n        in: path\n        description: User id\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: \"Code correctly sent by SMS\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    type: string\n        400:\n          description: \"Invalid input\"\n        403:\n          description: \"No permission to call this operation\"\n  /realms/{realm}/users/{userID}/send-onboarding-email:\n    post:\n      tags:\n      - Users\n      summary: \u003e\n        Send an onboarding email to the user. He will receives an email to start the onboarding process. At the end of the process, he will be authenticated.\n      parameters:\n      - name: realm\n        in: path\n        description: Realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: userID\n        in: path\n        description: User id\n        required: true\n        schema:\n          type: string\n      - name: lifespan\n        in: query\n        description: validity duration of the link sent in the mail in seconds. If value exceeds the configured max life span, you can get a HTTP status 400.\n        required: false\n        schema:\n          type: integer\n      - name: reminder\n        in: query\n        required: false\n        schema:\n          type: boolean\n      - name: customerRealm\n        in: query\n        description: Customer realm name\n        required: false\n        schema:\n          type: string\n      - name: custom1\n        in: query\n        schema:\n          type: string\n      - name: custom2\n        in: query\n        schema:\n          type: string\n      - name: custom3\n        in: query\n        schema:\n          type: string\n      - name: custom4\n        in: query\n        schema:\n          type: string\n      - name: custom5\n        in: query\n        schema:\n          type: string\n      responses:\n        200:\n          description: Onboarding email sent\n        400:\n          description: Invalid input\n        401:\n          description: Not authenticated\n        403:\n          description: No permission to call this operation\n        409:\n          description: Endpoint not configured\n  /realms/{realm}/users/{userID}/send-reminder-email:\n    post:\n      tags:\n      - Users\n      summary: Send a reminder email for a particular userID.\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: userID\n        in: path\n        description: User id\n        required: true\n        schema:\n          type: string\n      - name: client_id\n        in: query\n        schema:\n          type: string\n        allowEmptyValue: true\n      - name: redirect_uri\n        in: query\n        schema:\n          type: string\n        allowEmptyValue: true\n      - name: lifespan\n        in: query\n        schema:\n          type: string          \n        allowEmptyValue: true\n      responses:\n        200:\n          description: Mail successfully sent\n        400:\n          description: Invalid input\n        401:\n          description: Not authenticated\n        403:\n          description: No permission to call this operation  \n  /realms/{realm}/users/{userID}/reset-sms-counter:\n    put:\n      tags:\n      - Users\n      summary: Reset the smsSent and smsAttempts attributes of the user to value 0.\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: userID\n        in: path\n        description: User id\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: successful operation          \n  /realms/{realm}/users/{userID}/credentials:\n    get:\n      tags:\n      - Credentials\n      summary: Get all credentials for the user\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: userID\n        in: path\n        description: User id\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Credential'\n  /realms/{realm}/users/{userID}/credentials/{credentialID}:\n    delete:\n      tags:\n      - Credentials\n      summary: Delete the credentials for the user\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: userID\n        in: path\n        description: User id\n        required: true\n        schema:\n          type: string\n      - name: credentialID\n        in: path\n        description: Credential id\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: successful operation\n  /realms/{realm}/users/{userID}/credentials/{credentialID}/reset-failures:\n    put:\n      tags:\n      - Credentials\n      summary: \u003e\n        Reset a locked credential for the user (ex: paper card with too many wrong errors)\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: userID\n        in: path\n        description: User id\n        required: true\n        schema:\n          type: string\n      - name: credentialID\n        in: path\n        description: Credential id\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: successful operation\n        404:\n          description: realm, user or credential not found\n  /realms/{realm}/users/{userID}/attack-detection-status:\n    get:\n      tags:\n      - login-failures\n      summary: Get the credential brute force status for the user\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: userID\n        in: path\n        description: User id\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AttackDetectionStatus'\n  /realms/{realm}/users/{userID}/clear-login-failures:\n    delete:\n      tags:\n      - login-failures\n      summary: Delete the login failures for the user\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: userID\n        in: path\n        description: User id\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: successful operation\n  /realms/{realm}/users/{userID}/recovery-code:\n    post:\n      tags:\n      - Credentials\n      summary: Set a recovery code for the user\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: userID\n        in: path\n        description: User id\n        required: true\n        schema:\n          type: string\n      responses:\n        201:\n          description: successful operation\n          content:\n            text/plain:\n              schema:\n                type: string\n        409:\n          description: recovery code already set\n  /realms/{realm}/users/{userID}/activation-code:\n    post:\n      tags:\n      - Credentials\n      summary: Create or replace an activation code for the user\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: userID\n        in: path\n        description: User id\n        required: true\n        schema:\n          type: string\n      responses:\n        201:\n          description: successful operation\n          content:\n            text/plain:\n              schema:\n                type: string\n  /realms/{realm}/roles:\n    get:\n      tags:\n      - Roles\n      summary: Get all roles for the realm\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Role'\n    post:\n      tags:\n      - Roles\n      summary: Create a new role into the realm\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Role'\n      responses:\n        201:\n          description: successful operation\n          headers:\n            Location:\n              schema:\n                type: string\n              description: URL of the new resource.\n  /realms/{realm}/roles/{roleID}:\n    get:\n      tags:\n      - Roles\n      summary: Get a specific role\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: roleID\n        in: path\n        description: id of role\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Role'\n    put:\n      tags:\n      - Roles\n      summary: Update a role\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: roleID\n        in: path\n        description: role id\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Role'\n      responses:\n        204:\n          description: successful operation\n    delete:\n      tags:\n      - Roles\n      summary: Delete the role\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: roleID\n        in: path\n        description: role id\n        required: true\n        schema:\n          type: string\n      responses:\n        204:\n          description: successful operation\n  /realms/{realm}/roles-by-id/{roleID}:\n    get:\n      tags:\n      - Roles\n      summary: DEPRECATED. Use GET /realms/{realm}/roles/{roleID}\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: roleID\n        in: path\n        description: id of role\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Role'\n  /realms/{realm}/clients/{clientID}/roles:\n    get:\n      tags:\n      - Roles\n      summary: Get all clients roles\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: clientID\n        in: path\n        description: id of client (not client-id)\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Role'\n    post:\n      tags:\n      - Roles\n      summary: Create a new role for the realm or client\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: clientID\n        in: path\n        description: id of client (not client-id)\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Role'\n      responses:\n        201:\n          description: successful operation\n          headers:\n            Location:\n              schema:\n                type: string\n              description: URL of the new resource.\n  /realms/{realm}/groups:\n    get:\n      tags:\n      - Groups\n      summary: Get the groups available for the realm\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Group'\n    post:\n      tags:\n      - Groups\n      summary: Create a new group into the realm\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Group'\n      responses:\n        201:\n          description: successful operation\n          headers:\n            Location:\n              schema:\n                type: string\n              description: URL of the new resource.\n  /realms/{realm}/groups/{groupID}:\n    delete:\n      tags:\n      - Groups\n      summary: Delete the group\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: groupID\n        in: path\n        description: group id\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: successful operation\n  /realms/{realm}/groups/{groupID}/authorizations:\n    get:\n      tags:\n      - Groups\n      summary: Get the authorizations of the group\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: groupID\n        in: path\n        description: group id\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                  $ref: '#/components/schemas/Authorizations'\n    put:\n      tags:\n      - Groups\n      summary: Update the authorizations of the group\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: groupID\n        in: path\n        description: group id\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Authorizations'    \n      responses:\n        200:\n          description: successful operation\n  /realms/{realm}/groups/{groupID}/actions/{action}/authorizations:\n    get:\n      tags:\n      - Groups\n      summary: Get an authorization of the group on a specific action. The authorization might be for a specific group (targetGroup) and/or specific realm (targetRealm).\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: groupID\n        in: path\n        description: group id\n        required: true\n        schema:\n          type: string\n      - name: action\n        in: path\n        description: action\n        required: true\n        schema:\n          type: string\n      - name: targetRealm\n        in: query\n        description: realm name (not id!)\n        required: false\n        schema:\n          type: string\n      - name: targetGroupID\n        in: query\n        description: target group id\n        required: false\n        schema:\n          type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                  $ref: '#/components/schemas/AuthorizationResponse'\n        400:\n          description: invalid information provided\n        404:\n          description: not found\n    delete:\n      tags:\n      - Groups\n      summary: Remove the authorization of the group on a specific action. The authorization might be for specific group (targetGroup) and/or specific realm (targetRealm).\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: groupID\n        in: path\n        description: group id\n        required: true\n        schema:\n          type: string\n      - name: action\n        in: path\n        description: action\n        required: true\n        schema:\n          type: string\n      - name: targetRealm\n        in: query\n        description: realm name (not id!)\n        required: false\n        schema:\n          type: string\n      - name: targetGroupID\n        in: query\n        description: target group id\n        required: false\n        schema:\n          type: string\n      \n      responses:\n        200:\n          description: successful operation\n        400:\n          description: invalid information provided\n    put:\n      tags:\n      - Groups\n      summary: Add an authorization to the group with a partial matrix\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: groupID\n        in: path\n        description: group id\n        required: true\n        schema:\n          type: string\n      - name: action\n        in: path\n        description: action\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PartialAuthorizations'    \n      responses:\n        200:\n          description: successful operation\n        400:\n          description: invalid information provided\n    \n  /realms/{realm}/configuration:\n    get:\n      tags:\n      - Configuration\n      summary: Get the current configuration\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Configuration'\n    put:\n      tags:\n      - Configuration\n      summary: Update the configuration for the given realm\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Configuration'\n      responses:\n        200:\n          description: successful operation\n        400:\n          description: invalid information provided  (invalid client identifier or redirect URI not allowed for this client)\n  /realms/{realm}/admin-configuration:\n    get:\n      tags:\n      - Configuration\n      summary: Get the admin configuration of the specified realm\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdminConfiguration'\n    put:\n      tags:\n      - Configuration\n      summary: Update the admin configuration for the given realm\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AdminConfiguration'\n      responses:\n        200:\n          description: successful operation\n        400:\n          description: invalid information provided\n  /realms/{realm}/backoffice-configuration:\n    get:\n      tags:\n      - Configuration\n      summary: Get the current backoffice configuration. Result is an aggregation of configurations from all the user's groups.\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BackOfficeConfiguration'\n  /realms/{realm}/backoffice-configuration/groups:\n    get:\n      tags:\n      - Configuration\n      summary: Get the backoffice configuration for the given realmID/groupName\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: groupName\n        in: query\n        description: group name\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BackOfficeConfiguration'\n    put:\n      tags:\n      - Configuration\n      summary: Update the backoffice configuration for the given realmID/groupName\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: groupName\n        in: query\n        description: group name\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BackOfficeConfiguration'\n      responses:\n        200:\n          description: successful operation\n        400:\n          description: invalid information provided\n  /realms/{realm}/users/{userID}/federated-identity/{provider}:\n    post:\n      tags:\n      - Brokering\n      summary: Add a login provider to a user.\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: userID\n        in: path\n        description: User id\n        required: true\n        schema:\n          type: string\n      - name: provider\n        in: path\n        description: Login provider id\n        required: true\n        schema:\n          type: string        \n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FederatedIdentity'\n      responses:\n        200:\n          description: successful operation  \n  /social/users:\n    post:\n      tags:\n      - Users\n      summary: \u003e\n        Create a new user in the social realm\n        Username must be unique.\n        Role and Groups can be assigned thanks to their ID.\n      parameters:\n      - name: generateNameID\n        in: query\n        description: tells if a NameID should be generated\n        required: false\n        schema:\n          type: boolean\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        201:\n          description: successful operation\n          headers:\n            Location:\n              schema:\n                type: string\n              description: URL of the new resource.\n  /social/users/{userID}/send-onboarding-email:\n    post:\n      tags:\n      - Users\n      summary: \u003e\n        Send an onboarding email to the user. He will receives an email to start the onboarding process. At the end of the process, he will be authenticated.\n      parameters:\n      - name: userID\n        in: path\n        description: User id\n        required: true\n        schema:\n          type: string\n      - name: lifespan\n        in: query\n        description: validity duration of the link sent in the mail in seconds. If value exceeds the configured max life span, you can get a HTTP status 400.\n        required: false\n        schema:\n          type: integer\n      - name: reminder\n        in: query\n        required: false\n        schema:\n          type: boolean\n      - name: customerRealm\n        in: query\n        description: Customer realm name\n        required: false\n        schema:\n          type: string\n      - name: custom1\n        in: query\n        schema:\n          type: string\n      - name: custom2\n        in: query\n        schema:\n          type: string\n      - name: custom3\n        in: query\n        schema:\n          type: string\n      - name: custom4\n        in: query\n        schema:\n          type: string\n      - name: custom5\n        in: query\n        schema:\n          type: string\n      responses:\n        200:\n          description: Onboarding email sent\n        400:\n          description: Invalid input\n        401:\n          description: Not authenticated\n        403:\n          description: No permission to call this operation\n        409:\n          description: Endpoint not configured\ncomponents:\n  schemas:\n    Actions:\n      type: object\n      properties:\n        name:\n          type: string\n        scope:\n          type: string\n    Realm:\n      type: object\n      properties:\n        id:\n          type: string\n        keycloakVersion:\n          type: string\n        realm:\n          type: string\n        displayName:\n          type: string\n        enabled:\n          type: boolean\n          default: true\n    User:\n      type: object\n      properties:\n        id:\n          type: string\n        username:\n          type: string\n        gender:\n          type: string\n          enum: [M,F,U]\n          description: Male, Female or Undefined\n        firstName:\n          type: string\n        lastName:\n          type: string\n        email:\n          type: string\n          description: When updating, explicitly set email to null to remove this value. To keep it untouched, don't provide the field.\n        emailVerified:\n          type: boolean\n          default: false\n        phoneNumber:\n          type: string\n          description: When updating, explicitly set phone number to null to remove this value. To keep it untouched, don't provide the field.\n        phoneNumberVerified:\n          type: boolean\n          default: false\n        birthDate:\n          type: string\n          description: format is DD.MM.YYYY\n        birthLocation:\n          type: string\n        nationality:\n          type: string\n          description: ISO 3166 Alpha-2 country code\n        idDocumentType:\n          type: string\n          enum: [ID_CARD, PASSPORT, RESIDENCE_PERMIT]\n        idDocumentNumber:\n          type: string\n        idDocumentExpiration:\n          type: string\n        idDocumentCountry:\n          type: string\n          description: ISO 3166 Alpha-2 country code\n        groups:\n          type: array\n          items:\n            type: string\n        trustIdGroups:\n          type: array\n          items:\n            type: string\n        roles:\n          type: array\n          items:\n            type: string\n        locale:\n          type: string\n          default: \"en\"\n        businessId:\n          type: string\n          description: Business identifier (can be GLN)\n        smsSent:\n          type: integer\n        smsAttempts:\n          type: integer\n        enabled:\n          type: boolean\n          default: true\n        label:\n          type: string\n        pendingChecks:\n          type: array\n          description: Used only by getUser\n          items:\n            type: string\n        accreditations:\n          type: array\n          description: Used only by getUser\n          items:\n            type: object\n            properties:\n              type:\n                type: string\n                description: accreditation type\n              expiryDate:\n                type: string\n                description: expiry date. format is DD.MM.YYYY\n              expired:\n                type: boolean\n                description: true if the expiry date has passed\n              revoked:\n                type: boolean\n                description: true if the accreditation has been revoked for any reason (example. personal information updated after accreditation)\n        nameId:\n          type: string\n          description: Used only by getUser\n        onboardingCompleted:\n          type: boolean\n          description: Used only by getUser. Tells if onboarding is completed\n        createdTimestamp:\n          type: integer\n          format: int64\n    UserCheck:\n      type: object\n      properties:\n        operator:\n          type: string\n        checkDate:\n          type: string\n          description: check date. format is DD.MM.YYYY\n        status:\n          type: string\n        type:\n          type: string\n        nature:\n          type: string\n        proofType:\n          type: string\n        comment:\n          type: string\n    UserStatus:\n      type: object\n      properties:\n        email:\n          type: string\n        enabled:\n          type: boolean\n        emailVerified:\n          type: boolean\n        phoneNumberVerified:\n          type: boolean\n        onboardingCompleted:\n          type: boolean\n        numberOfCredentials:\n          type: integer\n    DeprecatedUserStatus:\n      type: object\n      properties:\n        enabled:\n          type: boolean\n          description: user is enabled when he is enabled in Keycloak AND has at least 2 credentials (1 password + second factor)\n    Client:\n      type: object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        baseUrl:\n          type: string\n        clientId:\n          type: string\n        protocol:\n          type: string\n        enabled:\n          type: boolean\n          default: true\n    RequiredAction:\n      type: object\n      properties:\n        alias:\n          type: string\n        name:\n          type: string\n        defaultAction:\n          type: boolean\n          default: false\n    Role:\n      type: object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        description:\n          type: string\n        clientRole:\n          type: string\n        composite:\n          type: string\n        containerId:\n          type: string\n    Group:\n      type: object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n    PartialAuthorizations:\n      type: object\n      properties:\n        matrix:\n          type: object\n          properties:\n            authorization:\n              type: object\n              properties:\n                realmName:\n                  type: object\n                  properties:\n                    groupName:\n                      type: object\n                      properties:\n                        qualifier:\n                          type: object\n    Authorizations:\n      type: object\n      properties:\n        matrix:\n          type: object\n    AuthorizationResponse:\n      type: object\n      properties:\n        Authorized: \n          type: boolean\n    Password:\n      type: object\n      properties:\n        value:\n          type: string\n    Credential:\n      type: object\n      properties:\n        id:\n          type: string\n        type:\n          type: string\n        algorithm:\n          type: string\n        createdDate:\n          type: integer\n        config:\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              type: string\n    AttackDetectionStatus:\n      type: object\n      properties:\n        numFailures:\n          type: integer\n        disabled:\n          type: boolean\n        lastIPFailure:\n          type: string\n        lastFailure:\n          type: integer\n    Configuration:\n      type: object\n      properties:\n        default_client_id:\n          type: string\n        default_redirect_uri:\n          type: string\n        api_self_authenticator_deletion_enabled:\n          type: boolean\n        api_self_password_change_enabled:\n          type: boolean\n        api_self_account_editing_enabled:\n          type: boolean\n        api_self_account_deletion_enabled:\n          type: boolean\n        show_authenticators_tab:\n          type: boolean\n        show_password_tab:\n          type: boolean\n        show_profile_tab:\n          type: boolean\n        show_account_deletion_button:\n          type: boolean\n        self_service_default_tab:\n          type: string\n        redirect_cancelled_registration_url:\n          type: string\n        redirect_successful_registration_url:\n          type: string\n        onboarding_redirect_uri:\n          type: string\n        onboarding_client_id:\n          type: string\n        self_register_group_names:\n          type: array\n          items:\n            type: string\n        barcode_type:\n          type: string\n          enum: [CODE128]\n    AdminConfiguration:\n      type: object\n      properties:\n        mode:\n          type: string\n        available_checks:\n          type: object\n          additionalProperties:\n            type: boolean\n        accreditations:\n          type: array\n          items:\n            type: object\n            properties:\n              type:\n                type: string\n              validity:\n                type: string\n              condition:\n                type: string\n        self_register_enabled:\n          type: boolean\n        consent_required_social:\n          type: boolean\n        consent_required_corporate:\n          type: boolean\n        theme:\n          type: string\n        need_verified_contact:\n          type: boolean\n          description: if true, email and phone number have to be verified to allow validation of the account in KYC\n        show_gln_editing:\n          type: boolean\n    BackOfficeConfiguration:\n      type: object\n      additionalProperties:\n        type: object\n        items:\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              type: string\n    FederatedIdentity:\n      type: object\n      properties:\n        userID:\n          type: string\n        username:\n          type: string      \n  securitySchemes:\n    openId:\n      type: openIdConnect\n      openIdConnectUrl: http://toto.com/.well-known/openid-configuration\nsecurity:\n  - openId:\n    - todo"
		}
	},
	"Error": "parse: parse spec: paths: /realms/{realm}/backoffice-configuration/groups: get: operation \"\": responses: 200: content: \"application/json\": schema: parse schema: reference \"#/components/schemas/BackOfficeConfiguration\": parse schema: additionalProperties: parse schema: object cannot contain 'items' field"
}