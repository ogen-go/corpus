{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/sandia-minimega/phenix"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "src/go/web/public/docs/openapi.yml",
			"byteSize": 40926,
			"content": "openapi: 3.0.0\ninfo:\n  description: phenix API\n  version: 0.0.0\n  title: phenix\n  termsOfService: http://swagger.io/terms/\n  contact:\n    url: https://github.com/sandia-minimega/phenix\n  license:\n    name: GNU General Public License v3.0\ntags:\n  - name: Configs\n    description: Config details and controls\n  - name: Schemas\n    description: Config spec schemas\n  - name: Experiments\n    description: Experiments details and controls\n  - name: Virtual Machines\n    description: Experiment VM details and controls\n  - name: Hosts\n    description: Cluster host details\n  - name: Applications\n    description: Available phenix user applications\n  - name: Topologies\n    description: Available phenix topologies\n  - name: Disks\n    description: Available phenix disk images\n  - name: Users\n    description: User details and controls\npaths:\n  \"/configs\":\n    get:\n      tags:\n        - Configs\n      summary: Get all phenix configs\n      description: \"\"\n      operationId: getConfigs\n      parameters:\n        - name: kind\n          in: query\n          description: limit configs to specified kind (defaults to all)\n          required: false\n          schema:\n            type: string\n            enum:\n              - all\n              - topology\n              - scenario\n              - experiment\n              - image\n              - user\n              - role\n            default: all\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Configs\"\n    post:\n      tags:\n        - Configs\n      summary: Create new phenix config\n      description: \"\"\n      operationId: postConfigs\n      requestBody:\n        description: phenix config creation parameters\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Config\"\n          application/x-yaml:\n            schema:\n              $ref: \"#/components/schemas/Config\"\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                fileupload:\n                  type: string\n                  format: binary\n      responses:\n        \"201\":\n          description: successful config creation\n          headers:\n            Location:\n              schema:\n                description: location of newly created config\n                type: string\n                format: uri\n  \"/configs/{kind}/{name}\":\n    get:\n      tags:\n        - Configs\n      summary: Get existing phenix config\n      description: \"\"\n      operationId: getConfigsKindName\n      parameters:\n        - name: kind\n          in: path\n          description: kind of phenix config to get\n          required: true\n          schema:\n            type: string\n        - name: name\n          in: path\n          description: name of phenix config to get\n          required: true\n          schema:\n            type: string\n        - name: Accept\n          in: header\n          description: content format for response\n          required: false\n          schema:\n            type: string\n            enum:\n              - application/json\n              - application/x-yaml\n            default: application/json\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Config\"\n            application/x-yaml:\n              schema:\n                $ref: \"#/components/schemas/Config\"\n    put:\n      tags:\n        - Configs\n      summary: Update existing phenix config\n      description: \u003e\n        Can also be used to rename a config by changing the name in the metadata\n        portion of the config header and using the old name in the request path.\n      operationId: putConfigsKindName\n      parameters:\n        - name: kind\n          in: path\n          description: kind of phenix config to get\n          required: true\n          schema:\n            type: string\n        - name: name\n          in: path\n          description: name of phenix config to get\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: phenix config update parameters\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Config\"\n          application/x-yaml:\n            schema:\n              $ref: \"#/components/schemas/Config\"\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                fileupload:\n                  type: string\n                  format: binary\n      responses:\n        \"204\":\n          description: successful config update\n          headers:\n            Location:\n              schema:\n                description: location of updated config\n                type: string\n                format: uri\n    delete:\n      tags:\n        - Configs\n      summary: Delete existing phenix config\n      description: \"\"\n      operationId: deleteConfigsKindName\n      parameters:\n        - name: kind\n          in: path\n          description: kind of phenix config to delete\n          required: true\n          schema:\n            type: string\n        - name: name\n          in: path\n          description: name of phenix config to delete\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: successful operation\n  \"/schemas/{version}\":\n    get:\n      tags:\n        - Schemas\n      summary: Get full schema (all config specs) for specific version\n      description: \"\"\n      operationId: getSchemasVersion\n      parameters:\n        - name: version\n          in: path\n          description: version of phenix config schema to get\n          required: true\n          schema:\n            type: string\n            enum:\n              - \"v1\"\n              - \"v2\"\n        - name: Accept\n          in: header\n          description: content format for response\n          required: false\n          schema:\n            type: string\n            enum:\n              - application/json\n              - application/x-yaml\n            default: application/json\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties: true\n            application/x-yaml:\n              schema:\n                type: object\n                additionalProperties: true\n  \"/schemas/{kind}/{version}\":\n    get:\n      tags:\n        - Schemas\n      summary: Get schema for specific config spec kind/version\n      description: \"\"\n      operationId: getSchemasKindVersion\n      parameters:\n        - name: kind\n          in: path\n          description: kind of phenix config schema to get\n          required: true\n          schema:\n            type: string\n            enum:\n              - topology\n              - scenario\n              - experiment\n              - image\n              - user\n              - role\n        - name: version\n          in: path\n          description: version of phenix config schema to get\n          required: true\n          schema:\n            type: string\n            enum:\n              - \"v1\"\n              - \"v2\"\n        - name: Accept\n          in: header\n          description: content format for response\n          required: false\n          schema:\n            type: string\n            enum:\n              - application/json\n              - application/x-yaml\n            default: application/json\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties: true\n            application/x-yaml:\n              schema:\n                type: object\n                additionalProperties: true\n  \"/experiments\":\n    get:\n      tags:\n        - Experiments\n      summary: Get all phenix experiments\n      description: \"\"\n      operationId: getExperiments\n      parameters:\n        - name: screenshot\n          in: query\n          description: whether or not to include VM screenshots (value is size to grab)\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Experiments\"\n    post:\n      tags:\n        - Experiments\n      summary: Create new phenix experiment\n      description: \"\"\n      operationId: postExperiments\n      requestBody:\n        description: phenix experiment creation parameters\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                topology:\n                  type: string\n                apps:\n                  type: array\n                  items:\n                    type: string\n                vlan_min:\n                  type: integer\n                vlan_max:\n                  type: integer\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Experiment\"\n  \"/experiments/{name}\":\n    get:\n      tags:\n        - Experiments\n      summary: Get existing phenix experiment\n      description: \"\"\n      operationId: getExperimentsName\n      parameters:\n        - name: name\n          in: path\n          description: name of phenix experiment to get\n          required: true\n          schema:\n            type: string\n        - name: screenshot\n          in: query\n          description: whether or not to include VM screenshots (value is size to grab)\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Experiment\"\n    delete:\n      tags:\n        - Experiments\n      summary: Delete existing phenix experiment\n      description: \"\"\n      operationId: deleteExperimentsName\n      parameters:\n        - name: name\n          in: path\n          description: name of phenix experiment to delete\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: successful operation\n  \"/experiments/{name}/start\":\n    post:\n      tags:\n        - Experiments\n      summary: Start existing phenix experiment\n      description: \"\"\n      operationId: postExperimentsNameStart\n      parameters:\n        - name: name\n          in: path\n          description: name of phenix experiment to start\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Experiment\"\n  \"/experiments/{name}/stop\":\n    post:\n      tags:\n        - Experiments\n      summary: Stop existing phenix experiment\n      description: \"\"\n      operationId: postExperimentsNameStop\n      parameters:\n        - name: name\n          in: path\n          description: name of phenix experiment to stop\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Experiment\"\n  \"/experiments/{name}/schedule\":\n    get:\n      tags:\n        - Experiments\n      summary: Get current schedule for existing experiment\n      description: \"\"\n      operationId: getExperimentsNameSchedule\n      parameters:\n        - name: name\n          in: path\n          description: name of phenix experiment to get schedule for\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Schedule\"\n    post:\n      tags:\n        - Experiments\n      summary: Update current schedule for existing experiment\n      description: \"\"\n      operationId: postExperimentsNameSchedule\n      parameters:\n        - name: name\n          in: path\n          description: name of phenix experiment to update schedule for\n          required: true\n          schema:\n            type: name\n      requestBody:\n        description: scheduling algorithm to use\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                algorithm:\n                  type: string\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Schedule\"\n  \"/experiments/{name}/captures\":\n    get:\n      tags:\n        - Experiments\n      summary: Get captures for existing experiment\n      description: \"\"\n      operationId: getExperimentsNameCaptures\n      parameters:\n        - name: name\n          in: path\n          description: name of phenix experiment to get captures for\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Captures\"\n  \"/experiments/{name}/files\":\n    get:\n      tags:\n        - Experiments\n      summary: Get list of files for experiment\n      description: \"\"\n      operationId: getExperimentsNameFiles\n      parameters:\n        - name: name\n          in: path\n          description: name of phenix experiment to get files for\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Files\"\n  \"/experiments/{name}/files/{filename}\":\n    get:\n      tags:\n        - Experiments\n      summary: Download experiment file\n      description: \"\"\n      operationId: getExperimentsNameFilesFilename\n      parameters:\n        - name: name\n          in: path\n          description: name of phenix experiment to get file from\n          required: true\n          schema:\n            type: string\n        - name: filename\n          in: path\n          description: name of file download\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n  \"/experiments/{exp_name}/vms\":\n    get:\n      tags:\n        - Virtual Machines\n      summary: get all VMs in existing experiment\n      description: \"\"\n      operationId: getExperimentsNameVms\n      parameters:\n        - name: exp_name\n          in: path\n          description: name of phenix experiment to get VMs for\n          required: true\n          schema:\n            type: string\n        - name: screenshot\n          in: query\n          description: whether or not to include VM screenshots (value is size to grab)\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VMs\"\n  \"/experiments/{exp_name}/vms/{vm_name}\":\n    get:\n      tags:\n        - Virtual Machines\n      summary: get given VM in existing experiment\n      description: \"\"\n      operationId: getExperimentsNameVmName\n      parameters:\n        - name: exp_name\n          in: path\n          description: name of phenix experiment to get VM from\n          required: true\n          schema:\n            type: string\n        - name: vm_name\n          in: path\n          description: name of phenix experiment VM to get\n          required: true\n          schema:\n            type: string\n        - name: screenshot\n          in: query\n          description: whether or not to include VM screenshots (value is size to grab)\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VM\"\n    patch:\n      tags:\n        - Virtual Machines\n      summary: Update existing VM settings in existing experiment\n      description: \"\"\n      operationId: patchExperimentsNameVmsName\n      parameters:\n        - name: exp_name\n          in: path\n          description: name of phenix experiment to modify\n          required: true\n          schema:\n            type: string\n        - name: vm_name\n          in: path\n          description: name of phenix virtual machine to modify\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: phenix virtual machine patch parameters\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                host:\n                  type: string\n                cpus:\n                  type: integer\n                ram:\n                  type: integer\n                disk:\n                  type: string\n                dnb:\n                  type: boolean\n                interface:\n                  type: object\n                  properties:\n                    index:\n                      type: integer\n                    vlan:\n                      type: integer\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VM\"\n    delete:\n      tags:\n        - Virtual Machines\n      summary: Delete phenix experiment VM\n      description: \"\"\n      operationId: deleteExperimentsNameVmsName\n      parameters:\n        - name: name\n          in: path\n          description: name of phenix experiment\n          required: true\n          schema:\n            type: string\n        - name: vm_name\n          in: path\n          description: name of phenix virtual machine to delete\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: successful operation\n  \"/experiments/{exp_name}/vms/{vm_name}/start\":\n    post:\n      tags:\n        - Virtual Machines\n      summary: start VM in experiment\n      description: \"\"\n      operationId: postExperimentsNameVMsNameStart\n      parameters:\n        - name: exp_name\n          in: path\n          description: name of phenix experiment\n          required: true\n          schema:\n            type: string\n        - name: vm_name\n          in: path\n          description: name of phenix VM to start\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VM\"\n  \"/experiments/{exp_name}/vms/{vm_name}/stop\":\n    post:\n      tags:\n        - Virtual Machines\n      summary: stop VM in experiment\n      description: \"\"\n      operationId: postExperimentsNameVMsNameStop\n      parameters:\n        - name: exp_name\n          in: path\n          description: name of phenix experiment\n          required: true\n          schema:\n            type: string\n        - name: vm_name\n          in: path\n          description: name of phenix VM to stop\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VM\"\n  \"/experiments/{exp_name}/vms/{vm_name}/redeploy\":\n    post:\n      tags:\n        - Virtual Machines\n      summary: redeploy VM in experiment\n      description: \"\"\n      operationId: postExperimentsNameVMsNameRedeploy\n      parameters:\n        - name: exp_name\n          in: path\n          description: name of phenix experiment\n          required: true\n          schema:\n            type: string\n        - name: vm_name\n          in: path\n          description: name of phenix VM to redeploy\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VM\"\n  \"/experiments/{exp_name}/vms/{vm_name}/screenshot.png\":\n    get:\n      tags:\n        - Virtual Machines\n      summary: Get screenshot of running VM in experiment\n      description: \"\"\n      operationId: getExperimentsNameVmsNameScreenshot\n      parameters:\n        - name: exp_name\n          in: path\n          description: name of phenix experiment\n          required: true\n          schema:\n            type: string\n        - name: vm_name\n          in: path\n          description: name of phenix virtual machine to get screenshot from\n          required: true\n          schema:\n            type: string\n        - name: size\n          in: query\n          description: size of screenshot to grab\n          required: false\n          schema:\n            type: string\n        - name: base64\n          in: query\n          description: whether or not to base64 encode the screenshot image\n          required: false\n          schema:\n            type: boolean\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            image/png:\n              schema:\n                type: string\n                format: base64\n  \"/experiments/{exp_name}/vms/{vm_name}/vnc/ws\":\n    get:\n      tags:\n        - Virtual Machines\n      summary: Tunnel to VNC of running VM using a WebSocket\n      description: \"\"\n      operationId: getExperimentsNameVmsNameVncWs\n      parameters:\n        - name: exp_name\n          in: path\n          description: name of phenix experiment\n          required: true\n          schema:\n            type: string\n        - name: vm_name\n          in: path\n          description: name of phenix virtual machine to connect to\n          required: true\n          schema:\n            type: string\n      responses:\n        \"101\":\n          description: switching protocols\n  \"/experiments/{exp_name}/vms/{vm_name}/captures\":\n    get:\n      tags:\n        - Virtual Machines\n      summary: get phenix experiment VM packet captures\n      description: \"\"\n      operationId: getExperimentsNameVmsNameCaptures\n      parameters:\n        - name: exp_name\n          in: path\n          description: name of phenix experiment\n          required: true\n          schema:\n            type: string\n        - name: vm_name\n          in: path\n          description: name of phenix VM to get captures for\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Captures\"\n    post:\n      tags:\n        - Virtual Machines\n      summary: start phenix experiment VM packet capture\n      description: \"\"\n      operationId: postExperimentsNameVmsNameCapture\n      parameters:\n        - name: exp_name\n          in: path\n          description: name of phenix experiment\n          required: true\n          schema:\n            type: string\n        - name: vm_name\n          in: path\n          description: name of phenix VM to start capture on\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: phenix VM packet capture parameters\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                interface:\n                  type: integer\n                filename:\n                  type: string\n      responses:\n        \"204\":\n          description: successful operation\n    delete:\n      tags:\n        - Virtual Machines\n      summary: stop phenix experiment VM packet captures\n      description: \"\"\n      operationId: deleteExperimentsNameVmsNameCaptures\n      parameters:\n        - name: exp_name\n          in: path\n          description: name of phenix experiment\n          required: true\n          schema:\n            type: string\n        - name: vm_name\n          in: path\n          description: name of phenix VM to stop captures on\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: successful operation\n  \"/experiments/{exp_name}/vms/{vm_name}/snapshots\":\n    get:\n      tags:\n        - Virtual Machines\n      summary: get phenix experiment VM snapshots\n      description: \"\"\n      operationId: getExperimentsNameVmsNameSnapshots\n      parameters:\n        - name: exp_name\n          in: path\n          description: name of phenix experiment\n          required: true\n          schema:\n            type: string\n        - name: vm_name\n          in: path\n          description: name of phenix VM to get snapshots for\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Snapshots\"\n    post:\n      tags:\n        - Virtual Machines\n      summary: create phenix experiment VM snapshot\n      description: \"\"\n      operationId: postExperimentsNameVmsNameSnapshots\n      parameters:\n        - name: exp_name\n          in: path\n          description: name of phenix experiment\n          required: true\n          schema:\n            type: string\n        - name: vm_name\n          in: path\n          description: name of phenix VM to snapshot\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: phenix VM snapshot parameters\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                filename:\n                  type: string\n      responses:\n        \"204\":\n          description: successful operation\n  \"/experiments/{exp_name}/vms/{vm_name}/snapshots/{snapshot}\":\n    post:\n      tags:\n        - Virtual Machines\n      summary: restore phenix experiment VM to snapshot\n      description: \"\"\n      operationId: postExperimentsNameVmsNameSnapshotsSnapshot\n      parameters:\n        - name: exp_name\n          in: path\n          description: name of phenix experiment\n          required: true\n          schema:\n            type: string\n        - name: vm_name\n          in: path\n          description: name of phenix VM to restore\n          required: true\n          schema:\n            type: string\n        - name: snapshot\n          in: path\n          description: name of snapshot to restore VM to\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: successful operation\n  \"/vms\":\n    get:\n      tags:\n        - Virtual Machines\n      summary: Get all running VMs\n      description: \"\"\n      operationId: getVMs\n      parameters:\n        - name: screenshot\n          in: query\n          description: whether or not to include VM screenshots (value is size to grab)\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VMs\"\n  \"/applications\":\n    get:\n      tags:\n        - Applications\n      summary: Get all available user applications\n      description: \"\"\n      operationId: getApplications\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Applications\"\n  \"/topologies\":\n    get:\n      tags:\n        - Topologies\n      summary: Get all available topologies\n      description: \"\"\n      operationId: getTopologies\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Topologies\"\n  \"/disks\":\n    get:\n      tags:\n        - Disks\n      summary: Get all available disk images\n      description: \"\"\n      operationId: getDisks\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Disks\"\n  \"/hosts\":\n    get:\n      tags:\n        - Hosts\n      summary: Get all cluster hosts\n      description: \"\"\n      operationId: getHosts\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Hosts\"\n  \"/users\":\n    get:\n      tags:\n        - Users\n      summary: Get all users\n      description: \"\"\n      operationId: getUsers\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Users\"\n    post:\n      tags:\n        - Users\n      summary: Create a new user\n      description: \"\"\n      operationId: postUsers\n      requestBody:\n        description: user details\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                username:\n                  type: string\n                password:\n                  type: string\n                first_name:\n                  type: string\n                last_name:\n                  type: string\n                role_name:\n                  type: string\n                resource_names:\n                  type: array\n                  items:\n                    type: string\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n  \"/users/{username}\":\n    get:\n      tags:\n        - Users\n      summary: Get a specific user\n      description: \"\"\n      operationId: getUserUsername\n      parameters:\n        - name: username\n          in: path\n          description: username of user to get\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n    patch:\n      tags:\n        - Users\n      summary: Update existing user\n      description: \"\"\n      operationId: patchUsersUsername\n      parameters:\n        - name: username\n          in: path\n          description: username of user to modify\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: user paramaters\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                first_name:\n                  type: string\n                last_name:\n                  type: string\n                role_name:\n                  type: string\n                resource_names:\n                  type: array\n                  items:\n                    type: string\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n    delete:\n      tags:\n        - Users\n      summary: Delete existing user\n      description: \"\"\n      operationId: deleteUsersUsername\n      parameters:\n        - name: username\n          in: path\n          description: username of user to delete\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: successful operation\n  \"/signup\":\n    post:\n      tags:\n        - Users\n      summary: Signup as a new user\n      description: \"\"\n      operationId: postSignup\n      requestBody:\n        description: user details\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                username:\n                  type: string\n                password:\n                  type: string\n                first_name:\n                  type: string\n                last_name:\n                  type: string\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Credentials\"\n  \"/login\":\n    get:\n      tags:\n        - Users\n      summary: Login a user\n      description: \"\"\n      operationId: getLogin\n      parameters:\n        - in: query\n          name: user\n          schema:\n            type: string\n          description: login username\n        - in: query\n          name: pass\n          schema:\n            type: string\n          description: login password\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Credentials\"\n    post:\n      tags:\n        - Users\n      summary: Login a user\n      description: \"\"\n      operationId: postLogin\n      requestBody:\n        description: login credentials\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                user:\n                  type: string\n                pass:\n                  type: string\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Credentials\"\n  \"/logout\":\n    get:\n      tags:\n        - Users\n      summary: Logout a user\n      description: \"\"\n      operationId: getLogout\n      responses:\n        \"204\":\n          description: successful operation\nexternalDocs:\n  description: Find out more about Swagger\n  url: http://swagger.io\nservers:\n  - url: http://localhost:3000/api/v1\ncomponents:\n  schemas:\n    Configs:\n      type: object\n      properties:\n        configs:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Config\"\n    Config:\n      type: object\n      properties:\n        apiVersion:\n          type: string\n        kind:\n          type: string\n        metadata:\n          type: object\n          properties:\n            name:\n              type: string\n            annotations:\n              type: object\n              additionalProperties:\n                type: string\n          required:\n            - name\n        spec:\n          type: object\n          additionalProperties: true\n      required:\n        - apiVersion\n        - kind\n        - metadata\n        - spec\n    Experiments:\n      type: object\n      properties:\n        experiments:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Experiment\"\n    Experiment:\n      type: object\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n        topology:\n          type: string\n        apps:\n          type: array\n          items:\n            type: string\n        start_time:\n          type: string\n          format: date-time\n        running:\n          type: boolean\n        vm_count:\n          type: integer\n        vlan_min:\n          type: integer\n        vlan_max:\n          type: integer\n        vlan_count:\n          type: integer\n        vlans:\n          type: array\n          items:\n            type: object\n            properties:\n              vlan:\n                type: integer\n              alias:\n                type: string\n        vms:\n          $ref: \"#/components/schemas/VMs\"\n    VMs:\n      type: object\n      properties:\n        vms:\n          type: array\n          items:\n            $ref: \"#/components/schemas/VM\"\n    VM:\n      type: object\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n        experiment:\n          type: string\n        host:\n          type: string\n        ipv4:\n          type: array\n          items:\n            type: string\n        cpus:\n          type: integer\n        ram:\n          type: integer\n        disk:\n          type: string\n        dnb:\n          type: boolean\n        networks:\n          type: array\n          items:\n            type: string\n        taps:\n          type: array\n          items:\n            type: string\n        captures:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Capture\"\n        running:\n          type: bool\n        uptime:\n          type: number\n          format: float\n        screenshot:\n          type: string\n          format: base64\n    Schedule:\n      type: object\n      properties:\n        schedule:\n          type: array\n          items:\n            type: object\n            properties:\n              vm:\n                type: string\n              host:\n                type: string\n              auto_assigned:\n                type: boolean\n    Captures:\n      type: object\n      properties:\n        captures:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Capture\"\n    Capture:\n      type: object\n      properties:\n        vm:\n          type: string\n        interface:\n          type: integer\n        filepath:\n          type: string\n    Snapshots:\n      type: object\n      properties:\n        snapshots:\n          type: array\n          items:\n            type: string\n    Files:\n      type: object\n      properties:\n        files:\n          type: array\n          items:\n            type: string\n    Hosts:\n      type: object\n      properties:\n        hosts:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Host\"\n    Host:\n      type: object\n      properties:\n        name:\n          type: string\n        cpus:\n          type: integer\n        load:\n          type: string\n        memused:\n          type: integer\n        memtotal:\n          type: integer\n        bandwidth:\n          type: string\n        vms:\n          type: integer\n        uptime:\n          type: number\n          format: float\n        schedulable:\n          type: boolean\n    Applications:\n      type: object\n      properties:\n        applications:\n          type: array\n          items:\n            type: string\n    Topologies:\n      type: object\n      properties:\n        topologies:\n          type: array\n          items:\n            type: string\n    Disks:\n      type: object\n      properties:\n        disks:\n          type: array\n          items:\n            type: string\n    Users:\n      type: object\n      properties:\n        users:\n          type: array\n          items:\n            $ref: \"#/components/schemas/User\"\n    User:\n      type: object\n      properties:\n        username:\n          type: string\n        first_name:\n          type: string\n        last_name:\n          type: string\n        role:\n          type: object\n          properties:\n            name:\n              type: string\n            resources:\n              type: array\n              items:\n                type: string\n            resource_names:\n              type: array\n              items:\n                type: string\n            verbs:\n              type: array\n              items:\n                type: string\n    Credentials:\n      type: object\n      properties:\n        username:\n          type: string\n        first_name:\n          type: string\n        last_name:\n          type: string\n        role:\n          type: string\n        token:\n          type: string\n",
			"canonicalURL": "/github.com/sandia-minimega/phenix@191d050707d92fb9e43fcae6eb211bc12450ba14/-/blob/src/go/web/public/docs/openapi.yml",
			"externalURLs": [
				{
					"url": "https://github.com/sandia-minimega/phenix/blob/191d050707d92fb9e43fcae6eb211bc12450ba14/src/go/web/public/docs/openapi.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"VM\": resolve \"#/components/schemas/VM\": property \"running\": at src/go/web/public/docs/openapi.yml:1419:17: type: unexpected schema type: \"bool\""
}