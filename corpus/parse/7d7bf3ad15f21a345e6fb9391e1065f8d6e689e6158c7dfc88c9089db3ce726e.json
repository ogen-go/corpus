{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/restful-ma/thresholds"
		},
		"file": {
			"name": "amazonaws.com-sdb-2009-04-15-swagger.yaml",
			"size": 0,
			"path": "benchmark-repository/openapi/amazonaws.com-sdb-2009-04-15-swagger.yaml",
			"byteSize": 80285,
			"content": "openapi: 3.0.0\ninfo:\n  version: 2009-04-15\n  x-release: v2\n  title: Amazon SimpleDB\n  description: Amazon SimpleDB is a web service providing the core database functions of\n    data indexing and querying in the cloud. By offloading the time and effort\n    associated with building and operating a web-scale database, SimpleDB\n    provides developers the freedom to focus on application development. \u003cp\u003e A\n    traditional, clustered relational database requires a sizable upfront\n    capital outlay, is complex to design, and often requires extensive and\n    repetitive database administration. Amazon SimpleDB is dramatically simpler,\n    requiring no schema, automatically indexing your data and providing a simple\n    API for storage and access. This approach eliminates the administrative\n    burden of data modeling, index maintenance, and performance tuning.\n    Developers gain access to this functionality within Amazon's proven\n    computing environment, are able to scale instantly, and pay only for what\n    they use. \u003c/p\u003e \u003cp\u003e Visit \u003ca\n    href=\"http://aws.amazon.com/simpledb/\"\u003ehttp://aws.amazon.com/simpledb/\u003c/a\u003e\n    for more information. \u003c/p\u003e\n  x-logo:\n    url: https://twitter.com/awscloud/profile_image?size=original\n    backgroundColor: \"#FFFFFF\"\n  termsOfService: https://aws.amazon.com/service-terms/\n  contact:\n    name: Mike Ralphson\n    email: mike.ralphson@gmail.com\n    url: https://github.com/mermade/aws2openapi\n    x-twitter: PermittedSoc\n  license:\n    name: Apache 2.0 License\n    url: http://www.apache.org/licenses/\n  x-providerName: amazonaws.com\n  x-serviceName: sdb\n  x-origin:\n    - contentType: application/json\n      url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/sdb-2009-04-15.normal.json\n      converter:\n        url: https://github.com/mermade/aws2openapi\n        version: 1.0.0\n      x-apisguru-direct: true\n  x-apiClientRegistration:\n    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct\n  x-apisguru-categories:\n    - cloud\n  x-preferred: true\nexternalDocs:\n  description: Amazon Web Services documentation\n  url: https://docs.aws.amazon.com/sdb/\nx-hasEquivalentPaths: true\nsecurity:\n  - hmac: []\npaths:\n  /#Action=BatchDeleteAttributes:\n    get:\n      x-aws-operation-name: BatchDeleteAttributes\n      operationId: GET BatchDeleteAttributes\n      description: \"\u003cp\u003e Performs multiple DeleteAttributes operations in a single call,\n        which reduces round trips and latencies. This enables Amazon SimpleDB to\n        optimize requests, which generally yields better throughput. \u003c/p\u003e \u003cnote\u003e\n        \u003cp\u003e If you specify BatchDeleteAttributes without attributes or values,\n        all the attributes for the item are deleted. \u003c/p\u003e \u003cp\u003e\n        BatchDeleteAttributes is an idempotent operation; running it multiple\n        times on the same item or attribute doesn't result in an error. \u003c/p\u003e \u003cp\u003e\n        The BatchDeleteAttributes operation succeeds or fails in its entirety.\n        There are no partial deletes. You can execute multiple\n        BatchDeleteAttributes operations and other operations in parallel.\n        However, large numbers of concurrent BatchDeleteAttributes calls can\n        result in Service Unavailable (503) responses. \u003c/p\u003e \u003cp\u003e This operation\n        is vulnerable to exceeding the maximum URL size when making a REST\n        request using the HTTP GET method. \u003c/p\u003e \u003cp\u003e This operation does not\n        support conditions using Expected.X.Name, Expected.X.Value, or\n        Expected.X.Exists. \u003c/p\u003e \u003c/note\u003e \u003cp\u003e The following limitations are\n        enforced for this operation: \u003cul\u003e \u003cli\u003e1 MB request size\u003c/li\u003e \u003cli\u003e25 item\n        limit per BatchDeleteAttributes operation\u003c/li\u003e \u003c/ul\u003e \u003c/p\u003e\"\n      responses:\n        \"200\":\n          description: Success\n      parameters:\n        - name: DomainName\n          in: query\n          required: true\n          description: The name of the domain in which the attributes are being deleted.\n          schema:\n            type: string\n        - name: Items\n          in: query\n          required: true\n          description: A list of items on which to perform the operation.\n          schema:\n            type: array\n            items:\n              type: string\n        - name: Action\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - BatchDeleteAttributes\n        - name: Version\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - 2009-04-15\n    parameters:\n      - $ref: \"#/components/parameters/AWSAccessKeyId\"\n      - $ref: \"#/components/parameters/Action\"\n      - $ref: \"#/components/parameters/SignatureMethod\"\n      - $ref: \"#/components/parameters/SignatureVersion\"\n      - $ref: \"#/components/parameters/Timestamp\"\n      - $ref: \"#/components/parameters/Version\"\n      - $ref: \"#/components/parameters/Signature\"\n    post:\n      x-aws-operation-name: BatchDeleteAttributes\n      operationId: POST BatchDeleteAttributes\n      description: \"\u003cp\u003e Performs multiple DeleteAttributes operations in a single call,\n        which reduces round trips and latencies. This enables Amazon SimpleDB to\n        optimize requests, which generally yields better throughput. \u003c/p\u003e \u003cnote\u003e\n        \u003cp\u003e If you specify BatchDeleteAttributes without attributes or values,\n        all the attributes for the item are deleted. \u003c/p\u003e \u003cp\u003e\n        BatchDeleteAttributes is an idempotent operation; running it multiple\n        times on the same item or attribute doesn't result in an error. \u003c/p\u003e \u003cp\u003e\n        The BatchDeleteAttributes operation succeeds or fails in its entirety.\n        There are no partial deletes. You can execute multiple\n        BatchDeleteAttributes operations and other operations in parallel.\n        However, large numbers of concurrent BatchDeleteAttributes calls can\n        result in Service Unavailable (503) responses. \u003c/p\u003e \u003cp\u003e This operation\n        is vulnerable to exceeding the maximum URL size when making a REST\n        request using the HTTP GET method. \u003c/p\u003e \u003cp\u003e This operation does not\n        support conditions using Expected.X.Name, Expected.X.Value, or\n        Expected.X.Exists. \u003c/p\u003e \u003c/note\u003e \u003cp\u003e The following limitations are\n        enforced for this operation: \u003cul\u003e \u003cli\u003e1 MB request size\u003c/li\u003e \u003cli\u003e25 item\n        limit per BatchDeleteAttributes operation\u003c/li\u003e \u003c/ul\u003e \u003c/p\u003e\"\n      responses:\n        \"200\":\n          description: Success\n      parameters:\n        - name: Action\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - BatchDeleteAttributes\n        - name: Version\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - 2009-04-15\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                DomainName:\n                  description: The name of the domain in which the attributes are being\n                    deleted.\n                  type: string\n                Items:\n                  description: A list of items on which to perform the operation.\n                  type: array\n                  items:\n                    type: string\n              required:\n                - DomainName\n                - Items\n  /#Action=BatchPutAttributes:\n    get:\n      x-aws-operation-name: BatchPutAttributes\n      operationId: GET BatchPutAttributes\n      description: \"\u003cp\u003e The \u003ccode\u003eBatchPutAttributes\u003c/code\u003e operation creates or replaces\n        attributes within one or more items. By using this operation, the client\n        can perform multiple \u003ca\u003ePutAttribute\u003c/a\u003e operation with a single call.\n        This helps yield savings in round trips and latencies, enabling Amazon\n        SimpleDB to optimize requests and generally produce better throughput.\n        \u003c/p\u003e \u003cp\u003e The client may specify the item name with the\n        \u003ccode\u003eItem.X.ItemName\u003c/code\u003e parameter. The client may specify new\n        attributes using a combination of the\n        \u003ccode\u003eItem.X.Attribute.Y.Name\u003c/code\u003e and\n        \u003ccode\u003eItem.X.Attribute.Y.Value\u003c/code\u003e parameters. The client may specify\n        the first attribute for the first item using the parameters\n        \u003ccode\u003eItem.0.Attribute.0.Name\u003c/code\u003e and\n        \u003ccode\u003eItem.0.Attribute.0.Value\u003c/code\u003e, and for the second attribute for\n        the first item by the parameters \u003ccode\u003eItem.0.Attribute.1.Name\u003c/code\u003e\n        and \u003ccode\u003eItem.0.Attribute.1.Value\u003c/code\u003e, and so on. \u003c/p\u003e \u003cp\u003e\n        Attributes are uniquely identified within an item by their name/value\n        combination. For example, a single item can have the attributes \u003ccode\u003e{\n        \\\"first_name\\\", \\\"first_value\\\" }\u003c/code\u003e and \u003ccode\u003e{ \\\"first_name\\\",\n        \\\"second_value\\\" }\u003c/code\u003e. However, it cannot have two attribute\n        instances where both the \u003ccode\u003eItem.X.Attribute.Y.Name\u003c/code\u003e and\n        \u003ccode\u003eItem.X.Attribute.Y.Value\u003c/code\u003e are the same. \u003c/p\u003e \u003cp\u003e Optionally,\n        the requester can supply the \u003ccode\u003eReplace\u003c/code\u003e parameter for each\n        individual value. Setting this value to \u003ccode\u003etrue\u003c/code\u003e will cause the\n        new attribute values to replace the existing attribute values. For\n        example, if an item \u003ccode\u003eI\u003c/code\u003e has the attributes \u003ccode\u003e{ 'a', '1'\n        }, { 'b', '2'}\u003c/code\u003e and \u003ccode\u003e{ 'b', '3' }\u003c/code\u003e and the requester\n        does a BatchPutAttributes of \u003ccode\u003e{'I', 'b', '4' }\u003c/code\u003e with the\n        Replace parameter set to true, the final attributes of the item will be\n        \u003ccode\u003e{ 'a', '1' }\u003c/code\u003e and \u003ccode\u003e{ 'b', '4' }\u003c/code\u003e, replacing the\n        previous values of the 'b' attribute with the new value. \u003c/p\u003e \u003cnote\u003e You\n        cannot specify an empty string as an item or as an attribute name. The\n        \u003ccode\u003eBatchPutAttributes\u003c/code\u003e operation succeeds or fails in its\n        entirety. There are no partial puts. \u003c/note\u003e \u003cimportant\u003e This operation\n        is vulnerable to exceeding the maximum URL size when making a REST\n        request using the HTTP GET method. This operation does not support\n        conditions using \u003ccode\u003eExpected.X.Name\u003c/code\u003e,\n        \u003ccode\u003eExpected.X.Value\u003c/code\u003e, or \u003ccode\u003eExpected.X.Exists\u003c/code\u003e.\n        \u003c/important\u003e \u003cp\u003e You can execute multiple\n        \u003ccode\u003eBatchPutAttributes\u003c/code\u003e operations and other operations in\n        parallel. However, large numbers of concurrent\n        \u003ccode\u003eBatchPutAttributes\u003c/code\u003e calls can result in Service Unavailable\n        (503) responses. \u003c/p\u003e \u003cp\u003e The following limitations are enforced for\n        this operation: \u003cul\u003e \u003cli\u003e256 attribute name-value pairs per item\u003c/li\u003e\n        \u003cli\u003e1 MB request size\u003c/li\u003e \u003cli\u003e1 billion attributes per domain\u003c/li\u003e\n        \u003cli\u003e10 GB of total user data storage per domain\u003c/li\u003e \u003cli\u003e25 item limit\n        per \u003ccode\u003eBatchPutAttributes\u003c/code\u003e operation\u003c/li\u003e \u003c/ul\u003e \u003c/p\u003e\"\n      responses:\n        \"200\":\n          description: Success\n        \"400\":\n          description: NoSuchDomain\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/NoSuchDomain\"\n        \"409\":\n          description: NumberSubmittedAttributesExceeded\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/NumberSubmittedAttributesExceeded\"\n      parameters:\n        - name: DomainName\n          in: query\n          required: true\n          description: The name of the domain in which the attributes are being stored.\n          schema:\n            type: string\n        - name: Items\n          in: query\n          required: true\n          description: A list of items on which to perform the operation.\n          schema:\n            type: array\n            items:\n              type: string\n        - name: Action\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - BatchPutAttributes\n        - name: Version\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - 2009-04-15\n    parameters:\n      - $ref: \"#/components/parameters/AWSAccessKeyId\"\n      - $ref: \"#/components/parameters/Action\"\n      - $ref: \"#/components/parameters/SignatureMethod\"\n      - $ref: \"#/components/parameters/SignatureVersion\"\n      - $ref: \"#/components/parameters/Timestamp\"\n      - $ref: \"#/components/parameters/Version\"\n      - $ref: \"#/components/parameters/Signature\"\n    post:\n      x-aws-operation-name: BatchPutAttributes\n      operationId: POST BatchPutAttributes\n      description: \"\u003cp\u003e The \u003ccode\u003eBatchPutAttributes\u003c/code\u003e operation creates or replaces\n        attributes within one or more items. By using this operation, the client\n        can perform multiple \u003ca\u003ePutAttribute\u003c/a\u003e operation with a single call.\n        This helps yield savings in round trips and latencies, enabling Amazon\n        SimpleDB to optimize requests and generally produce better throughput.\n        \u003c/p\u003e \u003cp\u003e The client may specify the item name with the\n        \u003ccode\u003eItem.X.ItemName\u003c/code\u003e parameter. The client may specify new\n        attributes using a combination of the\n        \u003ccode\u003eItem.X.Attribute.Y.Name\u003c/code\u003e and\n        \u003ccode\u003eItem.X.Attribute.Y.Value\u003c/code\u003e parameters. The client may specify\n        the first attribute for the first item using the parameters\n        \u003ccode\u003eItem.0.Attribute.0.Name\u003c/code\u003e and\n        \u003ccode\u003eItem.0.Attribute.0.Value\u003c/code\u003e, and for the second attribute for\n        the first item by the parameters \u003ccode\u003eItem.0.Attribute.1.Name\u003c/code\u003e\n        and \u003ccode\u003eItem.0.Attribute.1.Value\u003c/code\u003e, and so on. \u003c/p\u003e \u003cp\u003e\n        Attributes are uniquely identified within an item by their name/value\n        combination. For example, a single item can have the attributes \u003ccode\u003e{\n        \\\"first_name\\\", \\\"first_value\\\" }\u003c/code\u003e and \u003ccode\u003e{ \\\"first_name\\\",\n        \\\"second_value\\\" }\u003c/code\u003e. However, it cannot have two attribute\n        instances where both the \u003ccode\u003eItem.X.Attribute.Y.Name\u003c/code\u003e and\n        \u003ccode\u003eItem.X.Attribute.Y.Value\u003c/code\u003e are the same. \u003c/p\u003e \u003cp\u003e Optionally,\n        the requester can supply the \u003ccode\u003eReplace\u003c/code\u003e parameter for each\n        individual value. Setting this value to \u003ccode\u003etrue\u003c/code\u003e will cause the\n        new attribute values to replace the existing attribute values. For\n        example, if an item \u003ccode\u003eI\u003c/code\u003e has the attributes \u003ccode\u003e{ 'a', '1'\n        }, { 'b', '2'}\u003c/code\u003e and \u003ccode\u003e{ 'b', '3' }\u003c/code\u003e and the requester\n        does a BatchPutAttributes of \u003ccode\u003e{'I', 'b', '4' }\u003c/code\u003e with the\n        Replace parameter set to true, the final attributes of the item will be\n        \u003ccode\u003e{ 'a', '1' }\u003c/code\u003e and \u003ccode\u003e{ 'b', '4' }\u003c/code\u003e, replacing the\n        previous values of the 'b' attribute with the new value. \u003c/p\u003e \u003cnote\u003e You\n        cannot specify an empty string as an item or as an attribute name. The\n        \u003ccode\u003eBatchPutAttributes\u003c/code\u003e operation succeeds or fails in its\n        entirety. There are no partial puts. \u003c/note\u003e \u003cimportant\u003e This operation\n        is vulnerable to exceeding the maximum URL size when making a REST\n        request using the HTTP GET method. This operation does not support\n        conditions using \u003ccode\u003eExpected.X.Name\u003c/code\u003e,\n        \u003ccode\u003eExpected.X.Value\u003c/code\u003e, or \u003ccode\u003eExpected.X.Exists\u003c/code\u003e.\n        \u003c/important\u003e \u003cp\u003e You can execute multiple\n        \u003ccode\u003eBatchPutAttributes\u003c/code\u003e operations and other operations in\n        parallel. However, large numbers of concurrent\n        \u003ccode\u003eBatchPutAttributes\u003c/code\u003e calls can result in Service Unavailable\n        (503) responses. \u003c/p\u003e \u003cp\u003e The following limitations are enforced for\n        this operation: \u003cul\u003e \u003cli\u003e256 attribute name-value pairs per item\u003c/li\u003e\n        \u003cli\u003e1 MB request size\u003c/li\u003e \u003cli\u003e1 billion attributes per domain\u003c/li\u003e\n        \u003cli\u003e10 GB of total user data storage per domain\u003c/li\u003e \u003cli\u003e25 item limit\n        per \u003ccode\u003eBatchPutAttributes\u003c/code\u003e operation\u003c/li\u003e \u003c/ul\u003e \u003c/p\u003e\"\n      responses:\n        \"200\":\n          description: Success\n        \"400\":\n          description: NoSuchDomain\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/NoSuchDomain\"\n        \"409\":\n          description: NumberSubmittedAttributesExceeded\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/NumberSubmittedAttributesExceeded\"\n      parameters:\n        - name: Action\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - BatchPutAttributes\n        - name: Version\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - 2009-04-15\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                DomainName:\n                  description: The name of the domain in which the attributes are being\n                    stored.\n                  type: string\n                Items:\n                  description: A list of items on which to perform the operation.\n                  type: array\n                  items:\n                    type: string\n              required:\n                - DomainName\n                - Items\n  /#Action=CreateDomain:\n    get:\n      x-aws-operation-name: CreateDomain\n      operationId: GET CreateDomain\n      description: \u003cp\u003e The \u003ccode\u003eCreateDomain\u003c/code\u003e operation creates a new domain. The\n        domain name should be unique among the domains associated with the\n        Access Key ID provided in the request. The \u003ccode\u003eCreateDomain\u003c/code\u003e\n        operation may take 10 or more seconds to complete. \u003c/p\u003e \u003cnote\u003e\n        CreateDomain is an idempotent operation; running it multiple times using\n        the same domain name will not result in an error response. \u003c/note\u003e \u003cp\u003e\n        The client can create up to 100 domains per account. \u003c/p\u003e \u003cp\u003e If the\n        client requires additional domains, go to \u003ca\n        href=\"http://aws.amazon.com/contact-us/simpledb-limit-request/\"\u003e\n        http://aws.amazon.com/contact-us/simpledb-limit-request/\u003c/a\u003e. \u003c/p\u003e\n      responses:\n        \"200\":\n          description: Success\n        \"400\":\n          description: MissingParameter\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/MissingParameter\"\n        \"409\":\n          description: NumberDomainsExceeded\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/NumberDomainsExceeded\"\n      parameters:\n        - name: DomainName\n          in: query\n          required: true\n          description: \"The name of the domain to create. The name can range between 3 and\n            255 characters and can contain the following characters: a-z, A-Z,\n            0-9, '_', '-', and '.'.\"\n          schema:\n            type: string\n        - name: Action\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - CreateDomain\n        - name: Version\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - 2009-04-15\n    parameters:\n      - $ref: \"#/components/parameters/AWSAccessKeyId\"\n      - $ref: \"#/components/parameters/Action\"\n      - $ref: \"#/components/parameters/SignatureMethod\"\n      - $ref: \"#/components/parameters/SignatureVersion\"\n      - $ref: \"#/components/parameters/Timestamp\"\n      - $ref: \"#/components/parameters/Version\"\n      - $ref: \"#/components/parameters/Signature\"\n    post:\n      x-aws-operation-name: CreateDomain\n      operationId: POST CreateDomain\n      description: \u003cp\u003e The \u003ccode\u003eCreateDomain\u003c/code\u003e operation creates a new domain. The\n        domain name should be unique among the domains associated with the\n        Access Key ID provided in the request. The \u003ccode\u003eCreateDomain\u003c/code\u003e\n        operation may take 10 or more seconds to complete. \u003c/p\u003e \u003cnote\u003e\n        CreateDomain is an idempotent operation; running it multiple times using\n        the same domain name will not result in an error response. \u003c/note\u003e \u003cp\u003e\n        The client can create up to 100 domains per account. \u003c/p\u003e \u003cp\u003e If the\n        client requires additional domains, go to \u003ca\n        href=\"http://aws.amazon.com/contact-us/simpledb-limit-request/\"\u003e\n        http://aws.amazon.com/contact-us/simpledb-limit-request/\u003c/a\u003e. \u003c/p\u003e\n      responses:\n        \"200\":\n          description: Success\n        \"400\":\n          description: MissingParameter\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/MissingParameter\"\n        \"409\":\n          description: NumberDomainsExceeded\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/NumberDomainsExceeded\"\n      parameters:\n        - name: Action\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - CreateDomain\n        - name: Version\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - 2009-04-15\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                DomainName:\n                  description: \"The name of the domain to create. The name can range\n                    between 3 and 255 characters and can contain the following\n                    characters: a-z, A-Z, 0-9, '_', '-', and '.'.\"\n                  type: string\n              required:\n                - DomainName\n  /#Action=DeleteAttributes:\n    get:\n      x-aws-operation-name: DeleteAttributes\n      operationId: GET DeleteAttributes\n      description: \u003cp\u003e Deletes one or more attributes associated with an item. If all\n        attributes of the item are deleted, the item is deleted. \u003c/p\u003e \u003cnote\u003e If\n        \u003ccode\u003eDeleteAttributes\u003c/code\u003e is called without being passed any\n        attributes or values specified, all the attributes for the item are\n        deleted. \u003c/note\u003e \u003cp\u003e \u003ccode\u003eDeleteAttributes\u003c/code\u003e is an idempotent\n        operation; running it multiple times on the same item or attribute does\n        not result in an error response. \u003c/p\u003e \u003cp\u003e Because Amazon SimpleDB makes\n        multiple copies of item data and uses an eventual consistency update\n        model, performing a \u003ca\u003eGetAttributes\u003c/a\u003e or \u003ca\u003eSelect\u003c/a\u003e operation\n        (read) immediately after a \u003ccode\u003eDeleteAttributes\u003c/code\u003e or\n        \u003ca\u003ePutAttributes\u003c/a\u003e operation (write) might not return updated item\n        data. \u003c/p\u003e\n      responses:\n        \"200\":\n          description: Success\n        \"400\":\n          description: NoSuchDomain\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/NoSuchDomain\"\n        \"404\":\n          description: AttributeDoesNotExist\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/AttributeDoesNotExist\"\n      parameters:\n        - name: DomainName\n          in: query\n          required: true\n          description: The name of the domain in which to perform the operation.\n          schema:\n            type: string\n        - name: ItemName\n          in: query\n          required: true\n          description: The name of the item. Similar to rows on a spreadsheet, items\n            represent individual objects that contain one or more\n            value-attribute pairs.\n          schema:\n            type: string\n        - name: Attributes\n          in: query\n          required: false\n          description: A list of Attributes. Similar to columns on a spreadsheet,\n            attributes represent categories of data that can be assigned to\n            items.\n          schema:\n            type: array\n            items:\n              type: string\n        - name: Expected.Name\n          in: query\n          description: \u003e-2\n             Specifies the conditions under which data should be updated. If an update condition is specified for a request, the data will only be updated if the condition is satisfied. For example, if an attribute with a specific name and value exists, or if a specific attribute doesn't exist. \n            The name of the attribute involved in the condition.\n          schema:\n            type: string\n        - name: Expected.Value\n          in: query\n          description: \u003e-2\n             Specifies the conditions under which data should be updated. If an update condition is specified for a request, the data will only be updated if the condition is satisfied. For example, if an attribute with a specific name and value exists, or if a specific attribute doesn't exist. \n            The value of an attribute. This value can only be specified when the \u003ccode\u003eExists\u003c/code\u003e parameter is equal to \u003ccode\u003etrue\u003c/code\u003e.\n          schema:\n            type: string\n        - name: Expected.Exists\n          in: query\n          description: \u003e-2\n             Specifies the conditions under which data should be updated. If an update condition is specified for a request, the data will only be updated if the condition is satisfied. For example, if an attribute with a specific name and value exists, or if a specific attribute doesn't exist. \n            A value specifying whether or not the specified attribute must exist with the specified value in order for the update condition to be satisfied. Specify \u003ccode\u003etrue\u003c/code\u003e if the attribute must exist for the update condition to be satisfied. Specify \u003ccode\u003efalse\u003c/code\u003e if the attribute should not exist in order for the update condition to be satisfied.\n          schema:\n            type: string\n        - name: Action\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - DeleteAttributes\n        - name: Version\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - 2009-04-15\n    parameters:\n      - $ref: \"#/components/parameters/AWSAccessKeyId\"\n      - $ref: \"#/components/parameters/Action\"\n      - $ref: \"#/components/parameters/SignatureMethod\"\n      - $ref: \"#/components/parameters/SignatureVersion\"\n      - $ref: \"#/components/parameters/Timestamp\"\n      - $ref: \"#/components/parameters/Version\"\n      - $ref: \"#/components/parameters/Signature\"\n    post:\n      x-aws-operation-name: DeleteAttributes\n      operationId: POST DeleteAttributes\n      description: \u003cp\u003e Deletes one or more attributes associated with an item. If all\n        attributes of the item are deleted, the item is deleted. \u003c/p\u003e \u003cnote\u003e If\n        \u003ccode\u003eDeleteAttributes\u003c/code\u003e is called without being passed any\n        attributes or values specified, all the attributes for the item are\n        deleted. \u003c/note\u003e \u003cp\u003e \u003ccode\u003eDeleteAttributes\u003c/code\u003e is an idempotent\n        operation; running it multiple times on the same item or attribute does\n        not result in an error response. \u003c/p\u003e \u003cp\u003e Because Amazon SimpleDB makes\n        multiple copies of item data and uses an eventual consistency update\n        model, performing a \u003ca\u003eGetAttributes\u003c/a\u003e or \u003ca\u003eSelect\u003c/a\u003e operation\n        (read) immediately after a \u003ccode\u003eDeleteAttributes\u003c/code\u003e or\n        \u003ca\u003ePutAttributes\u003c/a\u003e operation (write) might not return updated item\n        data. \u003c/p\u003e\n      responses:\n        \"200\":\n          description: Success\n        \"400\":\n          description: NoSuchDomain\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/NoSuchDomain\"\n        \"404\":\n          description: AttributeDoesNotExist\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/AttributeDoesNotExist\"\n      parameters:\n        - name: Action\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - DeleteAttributes\n        - name: Version\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - 2009-04-15\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                DomainName:\n                  description: The name of the domain in which to perform the operation.\n                  type: string\n                ItemName:\n                  description: The name of the item. Similar to rows on a spreadsheet,\n                    items represent individual objects that contain one or more\n                    value-attribute pairs.\n                  type: string\n                Attributes:\n                  description: A list of Attributes. Similar to columns on a spreadsheet,\n                    attributes represent categories of data that can be assigned\n                    to items.\n                  type: array\n                  items:\n                    type: string\n                Expected.Name:\n                  description: \u003e-2\n                     Specifies the conditions under which data should be updated. If an update condition is specified for a request, the data will only be updated if the condition is satisfied. For example, if an attribute with a specific name and value exists, or if a specific attribute doesn't exist. \n                    The name of the attribute involved in the condition.\n                  type: string\n                Expected.Value:\n                  description: \u003e-2\n                     Specifies the conditions under which data should be updated. If an update condition is specified for a request, the data will only be updated if the condition is satisfied. For example, if an attribute with a specific name and value exists, or if a specific attribute doesn't exist. \n                    The value of an attribute. This value can only be specified when the \u003ccode\u003eExists\u003c/code\u003e parameter is equal to \u003ccode\u003etrue\u003c/code\u003e.\n                  type: string\n                Expected.Exists:\n                  description: \u003e-2\n                     Specifies the conditions under which data should be updated. If an update condition is specified for a request, the data will only be updated if the condition is satisfied. For example, if an attribute with a specific name and value exists, or if a specific attribute doesn't exist. \n                    A value specifying whether or not the specified attribute must exist with the specified value in order for the update condition to be satisfied. Specify \u003ccode\u003etrue\u003c/code\u003e if the attribute must exist for the update condition to be satisfied. Specify \u003ccode\u003efalse\u003c/code\u003e if the attribute should not exist in order for the update condition to be satisfied.\n                  type: string\n              required:\n                - DomainName\n                - ItemName\n  /#Action=DeleteDomain:\n    get:\n      x-aws-operation-name: DeleteDomain\n      operationId: GET DeleteDomain\n      description: \u003cp\u003e The \u003ccode\u003eDeleteDomain\u003c/code\u003e operation deletes a domain. Any items\n        (and their attributes) in the domain are deleted as well. The\n        \u003ccode\u003eDeleteDomain\u003c/code\u003e operation might take 10 or more seconds to\n        complete. \u003c/p\u003e \u003cnote\u003e Running \u003ccode\u003eDeleteDomain\u003c/code\u003e on a domain that\n        does not exist or running the function multiple times using the same\n        domain name will not result in an error response. \u003c/note\u003e\n      responses:\n        \"200\":\n          description: Success\n        \"400\":\n          description: MissingParameter\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/MissingParameter\"\n      parameters:\n        - name: DomainName\n          in: query\n          required: true\n          description: The name of the domain to delete.\n          schema:\n            type: string\n        - name: Action\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - DeleteDomain\n        - name: Version\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - 2009-04-15\n    parameters:\n      - $ref: \"#/components/parameters/AWSAccessKeyId\"\n      - $ref: \"#/components/parameters/Action\"\n      - $ref: \"#/components/parameters/SignatureMethod\"\n      - $ref: \"#/components/parameters/SignatureVersion\"\n      - $ref: \"#/components/parameters/Timestamp\"\n      - $ref: \"#/components/parameters/Version\"\n      - $ref: \"#/components/parameters/Signature\"\n    post:\n      x-aws-operation-name: DeleteDomain\n      operationId: POST DeleteDomain\n      description: \u003cp\u003e The \u003ccode\u003eDeleteDomain\u003c/code\u003e operation deletes a domain. Any items\n        (and their attributes) in the domain are deleted as well. The\n        \u003ccode\u003eDeleteDomain\u003c/code\u003e operation might take 10 or more seconds to\n        complete. \u003c/p\u003e \u003cnote\u003e Running \u003ccode\u003eDeleteDomain\u003c/code\u003e on a domain that\n        does not exist or running the function multiple times using the same\n        domain name will not result in an error response. \u003c/note\u003e\n      responses:\n        \"200\":\n          description: Success\n        \"400\":\n          description: MissingParameter\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/MissingParameter\"\n      parameters:\n        - name: Action\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - DeleteDomain\n        - name: Version\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - 2009-04-15\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                DomainName:\n                  description: The name of the domain to delete.\n                  type: string\n              required:\n                - DomainName\n  /#Action=DomainMetadata:\n    get:\n      x-aws-operation-name: DomainMetadata\n      operationId: GET DomainMetadata\n      description: \" Returns information about the domain, including when the domain was\n        created, the number of items and attributes in the domain, and the size\n        of the attribute names and values. \"\n      responses:\n        \"200\":\n          description: Success\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/DomainMetadataResult\"\n        \"400\":\n          description: NoSuchDomain\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/NoSuchDomain\"\n      parameters:\n        - name: DomainName\n          in: query\n          required: true\n          description: The name of the domain for which to display the metadata of.\n          schema:\n            type: string\n        - name: Action\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - DomainMetadata\n        - name: Version\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - 2009-04-15\n    parameters:\n      - $ref: \"#/components/parameters/AWSAccessKeyId\"\n      - $ref: \"#/components/parameters/Action\"\n      - $ref: \"#/components/parameters/SignatureMethod\"\n      - $ref: \"#/components/parameters/SignatureVersion\"\n      - $ref: \"#/components/parameters/Timestamp\"\n      - $ref: \"#/components/parameters/Version\"\n      - $ref: \"#/components/parameters/Signature\"\n    post:\n      x-aws-operation-name: DomainMetadata\n      operationId: POST DomainMetadata\n      description: \" Returns information about the domain, including when the domain was\n        created, the number of items and attributes in the domain, and the size\n        of the attribute names and values. \"\n      responses:\n        \"200\":\n          description: Success\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/DomainMetadataResult\"\n        \"400\":\n          description: NoSuchDomain\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/NoSuchDomain\"\n      parameters:\n        - name: Action\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - DomainMetadata\n        - name: Version\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - 2009-04-15\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                DomainName:\n                  description: The name of the domain for which to display the metadata of.\n                  type: string\n              required:\n                - DomainName\n  /#Action=GetAttributes:\n    get:\n      x-aws-operation-name: GetAttributes\n      operationId: GET GetAttributes\n      description: \u003cp\u003e Returns all of the attributes associated with the specified item.\n        Optionally, the attributes returned can be limited to one or more\n        attributes by specifying an attribute name parameter. \u003c/p\u003e \u003cp\u003e If the\n        item does not exist on the replica that was accessed for this operation,\n        an empty set is returned. The system does not return an error as it\n        cannot guarantee the item does not exist on other replicas. \u003c/p\u003e \u003cnote\u003e\n        If GetAttributes is called without being passed any attribute names, all\n        the attributes for the item are returned. \u003c/note\u003e\n      responses:\n        \"200\":\n          description: Success\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/GetAttributesResult\"\n        \"400\":\n          description: NoSuchDomain\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/NoSuchDomain\"\n      parameters:\n        - name: DomainName\n          in: query\n          required: true\n          description: The name of the domain in which to perform the operation.\n          schema:\n            type: string\n        - name: ItemName\n          in: query\n          required: true\n          description: The name of the item.\n          schema:\n            type: string\n        - name: AttributeNames\n          in: query\n          required: false\n          description: The names of the attributes.\n          schema:\n            type: array\n            items:\n              type: string\n        - name: ConsistentRead\n          in: query\n          required: false\n          description: Determines whether or not strong consistency should be enforced when\n            data is read from SimpleDB. If \u003ccode\u003etrue\u003c/code\u003e, any data\n            previously written to SimpleDB will be returned. Otherwise, results\n            will be consistent eventually, and the client may not see data that\n            was written immediately before your read.\n          schema:\n            type: boolean\n        - name: Action\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - GetAttributes\n        - name: Version\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - 2009-04-15\n    parameters:\n      - $ref: \"#/components/parameters/AWSAccessKeyId\"\n      - $ref: \"#/components/parameters/Action\"\n      - $ref: \"#/components/parameters/SignatureMethod\"\n      - $ref: \"#/components/parameters/SignatureVersion\"\n      - $ref: \"#/components/parameters/Timestamp\"\n      - $ref: \"#/components/parameters/Version\"\n      - $ref: \"#/components/parameters/Signature\"\n    post:\n      x-aws-operation-name: GetAttributes\n      operationId: POST GetAttributes\n      description: \u003cp\u003e Returns all of the attributes associated with the specified item.\n        Optionally, the attributes returned can be limited to one or more\n        attributes by specifying an attribute name parameter. \u003c/p\u003e \u003cp\u003e If the\n        item does not exist on the replica that was accessed for this operation,\n        an empty set is returned. The system does not return an error as it\n        cannot guarantee the item does not exist on other replicas. \u003c/p\u003e \u003cnote\u003e\n        If GetAttributes is called without being passed any attribute names, all\n        the attributes for the item are returned. \u003c/note\u003e\n      responses:\n        \"200\":\n          description: Success\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/GetAttributesResult\"\n        \"400\":\n          description: NoSuchDomain\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/NoSuchDomain\"\n      parameters:\n        - name: Action\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - GetAttributes\n        - name: Version\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - 2009-04-15\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                DomainName:\n                  description: The name of the domain in which to perform the operation.\n                  type: string\n                ItemName:\n                  description: The name of the item.\n                  type: string\n                AttributeNames:\n                  description: The names of the attributes.\n                  type: array\n                  items:\n                    type: string\n                ConsistentRead:\n                  description: Determines whether or not strong consistency should be\n                    enforced when data is read from SimpleDB. If\n                    \u003ccode\u003etrue\u003c/code\u003e, any data previously written to SimpleDB\n                    will be returned. Otherwise, results will be consistent\n                    eventually, and the client may not see data that was written\n                    immediately before your read.\n                  type: boolean\n              required:\n                - DomainName\n                - ItemName\n  /#Action=ListDomains:\n    get:\n      x-aws-operation-name: ListDomains\n      operationId: GET ListDomains\n      description: ' The \u003ccode\u003eListDomains\u003c/code\u003e operation lists all domains associated\n        with the Access Key ID. It returns domain names up to the limit set by\n        \u003ca href=\"#MaxNumberOfDomains\"\u003eMaxNumberOfDomains\u003c/a\u003e. A \u003ca\n        href=\"#NextToken\"\u003eNextToken\u003c/a\u003e is returned if there are more than\n        \u003ccode\u003eMaxNumberOfDomains\u003c/code\u003e domains. Calling\n        \u003ccode\u003eListDomains\u003c/code\u003e successive times with the\n        \u003ccode\u003eNextToken\u003c/code\u003e provided by the operation returns up to\n        \u003ccode\u003eMaxNumberOfDomains\u003c/code\u003e more domain names with each successive\n        operation call. '\n      responses:\n        \"200\":\n          description: Success\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/ListDomainsResult\"\n        \"400\":\n          description: InvalidNextToken\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/InvalidNextToken\"\n      parameters:\n        - name: MaxNumberOfDomains\n          in: query\n          required: false\n          description: The maximum number of domain names you want returned. The range is 1\n            to 100. The default setting is 100.\n          schema:\n            type: integer\n        - name: NextToken\n          in: query\n          required: false\n          description: A string informing Amazon SimpleDB where to start the next list of\n            domain names.\n          schema:\n            type: string\n        - name: Action\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - ListDomains\n        - name: Version\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - 2009-04-15\n    parameters:\n      - $ref: \"#/components/parameters/AWSAccessKeyId\"\n      - $ref: \"#/components/parameters/Action\"\n      - $ref: \"#/components/parameters/SignatureMethod\"\n      - $ref: \"#/components/parameters/SignatureVersion\"\n      - $ref: \"#/components/parameters/Timestamp\"\n      - $ref: \"#/components/parameters/Version\"\n      - $ref: \"#/components/parameters/Signature\"\n    post:\n      x-aws-operation-name: ListDomains\n      operationId: POST ListDomains\n      description: ' The \u003ccode\u003eListDomains\u003c/code\u003e operation lists all domains associated\n        with the Access Key ID. It returns domain names up to the limit set by\n        \u003ca href=\"#MaxNumberOfDomains\"\u003eMaxNumberOfDomains\u003c/a\u003e. A \u003ca\n        href=\"#NextToken\"\u003eNextToken\u003c/a\u003e is returned if there are more than\n        \u003ccode\u003eMaxNumberOfDomains\u003c/code\u003e domains. Calling\n        \u003ccode\u003eListDomains\u003c/code\u003e successive times with the\n        \u003ccode\u003eNextToken\u003c/code\u003e provided by the operation returns up to\n        \u003ccode\u003eMaxNumberOfDomains\u003c/code\u003e more domain names with each successive\n        operation call. '\n      responses:\n        \"200\":\n          description: Success\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/ListDomainsResult\"\n        \"400\":\n          description: InvalidNextToken\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/InvalidNextToken\"\n      parameters:\n        - name: Action\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - ListDomains\n        - name: Version\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - 2009-04-15\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                MaxNumberOfDomains:\n                  description: The maximum number of domain names you want returned. The\n                    range is 1 to 100. The default setting is 100.\n                  type: integer\n                NextToken:\n                  description: A string informing Amazon SimpleDB where to start the next\n                    list of domain names.\n                  type: string\n  /#Action=PutAttributes:\n    get:\n      x-aws-operation-name: PutAttributes\n      operationId: GET PutAttributes\n      description: \"\u003cp\u003e The PutAttributes operation creates or replaces attributes in an\n        item. The client may specify new attributes using a combination of the\n        \u003ccode\u003eAttribute.X.Name\u003c/code\u003e and \u003ccode\u003eAttribute.X.Value\u003c/code\u003e\n        parameters. The client specifies the first attribute by the parameters\n        \u003ccode\u003eAttribute.0.Name\u003c/code\u003e and \u003ccode\u003eAttribute.0.Value\u003c/code\u003e, the\n        second attribute by the parameters \u003ccode\u003eAttribute.1.Name\u003c/code\u003e and\n        \u003ccode\u003eAttribute.1.Value\u003c/code\u003e, and so on. \u003c/p\u003e \u003cp\u003e Attributes are\n        uniquely identified in an item by their name/value combination. For\n        example, a single item can have the attributes \u003ccode\u003e{ \\\"first_name\\\",\n        \\\"first_value\\\" }\u003c/code\u003e and \u003ccode\u003e{ \\\"first_name\\\", second_value\\\"\n        }\u003c/code\u003e. However, it cannot have two attribute instances where both the\n        \u003ccode\u003eAttribute.X.Name\u003c/code\u003e and \u003ccode\u003eAttribute.X.Value\u003c/code\u003e are the\n        same. \u003c/p\u003e \u003cp\u003e Optionally, the requestor can supply the\n        \u003ccode\u003eReplace\u003c/code\u003e parameter for each individual attribute. Setting\n        this value to \u003ccode\u003etrue\u003c/code\u003e causes the new attribute value to\n        replace the existing attribute value(s). For example, if an item has the\n        attributes \u003ccode\u003e{ 'a', '1' }\u003c/code\u003e, \u003ccode\u003e{ 'b', '2'}\u003c/code\u003e and\n        \u003ccode\u003e{ 'b', '3' }\u003c/code\u003e and the requestor calls\n        \u003ccode\u003ePutAttributes\u003c/code\u003e using the attributes \u003ccode\u003e{ 'b', '4'\n        }\u003c/code\u003e with the \u003ccode\u003eReplace\u003c/code\u003e parameter set to true, the final\n        attributes of the item are changed to \u003ccode\u003e{ 'a', '1' }\u003c/code\u003e and\n        \u003ccode\u003e{ 'b', '4' }\u003c/code\u003e, which replaces the previous values of the 'b'\n        attribute with the new value. \u003c/p\u003e \u003cnote\u003e Using\n        \u003ccode\u003ePutAttributes\u003c/code\u003e to replace attribute values that do not exist\n        will not result in an error response. \u003c/note\u003e \u003cp\u003e You cannot specify an\n        empty string as an attribute name. \u003c/p\u003e \u003cp\u003e Because Amazon SimpleDB\n        makes multiple copies of client data and uses an eventual consistency\n        update model, an immediate \u003ca\u003eGetAttributes\u003c/a\u003e or \u003ca\u003eSelect\u003c/a\u003e\n        operation (read) immediately after a \u003ca\u003ePutAttributes\u003c/a\u003e or\n        \u003ca\u003eDeleteAttributes\u003c/a\u003e operation (write) might not return the updated\n        data. \u003c/p\u003e \u003cp\u003e The following limitations are enforced for this\n        operation: \u003cul\u003e \u003cli\u003e256 total attribute name-value pairs per item\u003c/li\u003e\n        \u003cli\u003eOne billion attributes per domain\u003c/li\u003e \u003cli\u003e10 GB of total user data\n        storage per domain\u003c/li\u003e \u003c/ul\u003e \u003c/p\u003e\"\n      responses:\n        \"200\":\n          description: Success\n        \"400\":\n          description: NoSuchDomain\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/NoSuchDomain\"\n        \"404\":\n          description: AttributeDoesNotExist\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/AttributeDoesNotExist\"\n        \"409\":\n          description: NumberItemAttributesExceeded\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/NumberItemAttributesExceeded\"\n      parameters:\n        - name: DomainName\n          in: query\n          required: true\n          description: The name of the domain in which to perform the operation.\n          schema:\n            type: string\n        - name: ItemName\n          in: query\n          required: true\n          description: The name of the item.\n          schema:\n            type: string\n        - name: Attributes\n          in: query\n          required: true\n          description: The list of attributes.\n          schema:\n            type: array\n            items:\n              type: string\n        - name: Expected.Name\n          in: query\n          description: \u003e-2\n             Specifies the conditions under which data should be updated. If an update condition is specified for a request, the data will only be updated if the condition is satisfied. For example, if an attribute with a specific name and value exists, or if a specific attribute doesn't exist. \n            The name of the attribute involved in the condition.\n          schema:\n            type: string\n        - name: Expected.Value\n          in: query\n          description: \u003e-2\n             Specifies the conditions under which data should be updated. If an update condition is specified for a request, the data will only be updated if the condition is satisfied. For example, if an attribute with a specific name and value exists, or if a specific attribute doesn't exist. \n            The value of an attribute. This value can only be specified when the \u003ccode\u003eExists\u003c/code\u003e parameter is equal to \u003ccode\u003etrue\u003c/code\u003e.\n          schema:\n            type: string\n        - name: Expected.Exists\n          in: query\n          description: \u003e-2\n             Specifies the conditions under which data should be updated. If an update condition is specified for a request, the data will only be updated if the condition is satisfied. For example, if an attribute with a specific name and value exists, or if a specific attribute doesn't exist. \n            A value specifying whether or not the specified attribute must exist with the specified value in order for the update condition to be satisfied. Specify \u003ccode\u003etrue\u003c/code\u003e if the attribute must exist for the update condition to be satisfied. Specify \u003ccode\u003efalse\u003c/code\u003e if the attribute should not exist in order for the update condition to be satisfied.\n          schema:\n            type: string\n        - name: Action\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - PutAttributes\n        - name: Version\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - 2009-04-15\n    parameters:\n      - $ref: \"#/components/parameters/AWSAccessKeyId\"\n      - $ref: \"#/components/parameters/Action\"\n      - $ref: \"#/components/parameters/SignatureMethod\"\n      - $ref: \"#/components/parameters/SignatureVersion\"\n      - $ref: \"#/components/parameters/Timestamp\"\n      - $ref: \"#/components/parameters/Version\"\n      - $ref: \"#/components/parameters/Signature\"\n    post:\n      x-aws-operation-name: PutAttributes\n      operationId: POST PutAttributes\n      description: \"\u003cp\u003e The PutAttributes operation creates or replaces attributes in an\n        item. The client may specify new attributes using a combination of the\n        \u003ccode\u003eAttribute.X.Name\u003c/code\u003e and \u003ccode\u003eAttribute.X.Value\u003c/code\u003e\n        parameters. The client specifies the first attribute by the parameters\n        \u003ccode\u003eAttribute.0.Name\u003c/code\u003e and \u003ccode\u003eAttribute.0.Value\u003c/code\u003e, the\n        second attribute by the parameters \u003ccode\u003eAttribute.1.Name\u003c/code\u003e and\n        \u003ccode\u003eAttribute.1.Value\u003c/code\u003e, and so on. \u003c/p\u003e \u003cp\u003e Attributes are\n        uniquely identified in an item by their name/value combination. For\n        example, a single item can have the attributes \u003ccode\u003e{ \\\"first_name\\\",\n        \\\"first_value\\\" }\u003c/code\u003e and \u003ccode\u003e{ \\\"first_name\\\", second_value\\\"\n        }\u003c/code\u003e. However, it cannot have two attribute instances where both the\n        \u003ccode\u003eAttribute.X.Name\u003c/code\u003e and \u003ccode\u003eAttribute.X.Value\u003c/code\u003e are the\n        same. \u003c/p\u003e \u003cp\u003e Optionally, the requestor can supply the\n        \u003ccode\u003eReplace\u003c/code\u003e parameter for each individual attribute. Setting\n        this value to \u003ccode\u003etrue\u003c/code\u003e causes the new attribute value to\n        replace the existing attribute value(s). For example, if an item has the\n        attributes \u003ccode\u003e{ 'a', '1' }\u003c/code\u003e, \u003ccode\u003e{ 'b', '2'}\u003c/code\u003e and\n        \u003ccode\u003e{ 'b', '3' }\u003c/code\u003e and the requestor calls\n        \u003ccode\u003ePutAttributes\u003c/code\u003e using the attributes \u003ccode\u003e{ 'b', '4'\n        }\u003c/code\u003e with the \u003ccode\u003eReplace\u003c/code\u003e parameter set to true, the final\n        attributes of the item are changed to \u003ccode\u003e{ 'a', '1' }\u003c/code\u003e and\n        \u003ccode\u003e{ 'b', '4' }\u003c/code\u003e, which replaces the previous values of the 'b'\n        attribute with the new value. \u003c/p\u003e \u003cnote\u003e Using\n        \u003ccode\u003ePutAttributes\u003c/code\u003e to replace attribute values that do not exist\n        will not result in an error response. \u003c/note\u003e \u003cp\u003e You cannot specify an\n        empty string as an attribute name. \u003c/p\u003e \u003cp\u003e Because Amazon SimpleDB\n        makes multiple copies of client data and uses an eventual consistency\n        update model, an immediate \u003ca\u003eGetAttributes\u003c/a\u003e or \u003ca\u003eSelect\u003c/a\u003e\n        operation (read) immediately after a \u003ca\u003ePutAttributes\u003c/a\u003e or\n        \u003ca\u003eDeleteAttributes\u003c/a\u003e operation (write) might not return the updated\n        data. \u003c/p\u003e \u003cp\u003e The following limitations are enforced for this\n        operation: \u003cul\u003e \u003cli\u003e256 total attribute name-value pairs per item\u003c/li\u003e\n        \u003cli\u003eOne billion attributes per domain\u003c/li\u003e \u003cli\u003e10 GB of total user data\n        storage per domain\u003c/li\u003e \u003c/ul\u003e \u003c/p\u003e\"\n      responses:\n        \"200\":\n          description: Success\n        \"400\":\n          description: NoSuchDomain\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/NoSuchDomain\"\n        \"404\":\n          description: AttributeDoesNotExist\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/AttributeDoesNotExist\"\n        \"409\":\n          description: NumberItemAttributesExceeded\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/NumberItemAttributesExceeded\"\n      parameters:\n        - name: Action\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - PutAttributes\n        - name: Version\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - 2009-04-15\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                DomainName:\n                  description: The name of the domain in which to perform the operation.\n                  type: string\n                ItemName:\n                  description: The name of the item.\n                  type: string\n                Attributes:\n                  description: The list of attributes.\n                  type: array\n                  items:\n                    type: string\n                Expected.Name:\n                  description: \u003e-2\n                     Specifies the conditions under which data should be updated. If an update condition is specified for a request, the data will only be updated if the condition is satisfied. For example, if an attribute with a specific name and value exists, or if a specific attribute doesn't exist. \n                    The name of the attribute involved in the condition.\n                  type: string\n                Expected.Value:\n                  description: \u003e-2\n                     Specifies the conditions under which data should be updated. If an update condition is specified for a request, the data will only be updated if the condition is satisfied. For example, if an attribute with a specific name and value exists, or if a specific attribute doesn't exist. \n                    The value of an attribute. This value can only be specified when the \u003ccode\u003eExists\u003c/code\u003e parameter is equal to \u003ccode\u003etrue\u003c/code\u003e.\n                  type: string\n                Expected.Exists:\n                  description: \u003e-2\n                     Specifies the conditions under which data should be updated. If an update condition is specified for a request, the data will only be updated if the condition is satisfied. For example, if an attribute with a specific name and value exists, or if a specific attribute doesn't exist. \n                    A value specifying whether or not the specified attribute must exist with the specified value in order for the update condition to be satisfied. Specify \u003ccode\u003etrue\u003c/code\u003e if the attribute must exist for the update condition to be satisfied. Specify \u003ccode\u003efalse\u003c/code\u003e if the attribute should not exist in order for the update condition to be satisfied.\n                  type: string\n              required:\n                - DomainName\n                - ItemName\n                - Attributes\n  /#Action=Select:\n    get:\n      x-aws-operation-name: Select\n      operationId: GET Select\n      description: \u003cp\u003e The \u003ccode\u003eSelect\u003c/code\u003e operation returns a set of attributes for\n        \u003ccode\u003eItemNames\u003c/code\u003e that match the select expression.\n        \u003ccode\u003eSelect\u003c/code\u003e is similar to the standard SQL SELECT statement.\n        \u003c/p\u003e \u003cp\u003e The total size of the response cannot exceed 1 MB in total\n        size. Amazon SimpleDB automatically adjusts the number of items returned\n        per page to enforce this limit. For example, if the client asks to\n        retrieve 2500 items, but each individual item is 10 kB in size, the\n        system returns 100 items and an appropriate \u003ccode\u003eNextToken\u003c/code\u003e so\n        the client can access the next page of results. \u003c/p\u003e \u003cp\u003e For information\n        on how to construct select expressions, see Using Select to Create\n        Amazon SimpleDB Queries in the Developer Guide. \u003c/p\u003e\n      responses:\n        \"200\":\n          description: Success\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/SelectResult\"\n        \"400\":\n          description: TooManyRequestedAttributes\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/TooManyRequestedAttributes\"\n        \"408\":\n          description: RequestTimeout\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/RequestTimeout\"\n      parameters:\n        - name: SelectExpression\n          in: query\n          required: true\n          description: The expression used to query the domain.\n          schema:\n            type: string\n        - name: NextToken\n          in: query\n          required: false\n          description: A string informing Amazon SimpleDB where to start the next list of\n            \u003ccode\u003eItemNames\u003c/code\u003e.\n          schema:\n            type: string\n        - name: ConsistentRead\n          in: query\n          required: false\n          description: Determines whether or not strong consistency should be enforced when\n            data is read from SimpleDB. If \u003ccode\u003etrue\u003c/code\u003e, any data\n            previously written to SimpleDB will be returned. Otherwise, results\n            will be consistent eventually, and the client may not see data that\n            was written immediately before your read.\n          schema:\n            type: boolean\n        - name: Action\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - Select\n        - name: Version\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - 2009-04-15\n    parameters:\n      - $ref: \"#/components/parameters/AWSAccessKeyId\"\n      - $ref: \"#/components/parameters/Action\"\n      - $ref: \"#/components/parameters/SignatureMethod\"\n      - $ref: \"#/components/parameters/SignatureVersion\"\n      - $ref: \"#/components/parameters/Timestamp\"\n      - $ref: \"#/components/parameters/Version\"\n      - $ref: \"#/components/parameters/Signature\"\n    post:\n      x-aws-operation-name: Select\n      operationId: POST Select\n      description: \u003cp\u003e The \u003ccode\u003eSelect\u003c/code\u003e operation returns a set of attributes for\n        \u003ccode\u003eItemNames\u003c/code\u003e that match the select expression.\n        \u003ccode\u003eSelect\u003c/code\u003e is similar to the standard SQL SELECT statement.\n        \u003c/p\u003e \u003cp\u003e The total size of the response cannot exceed 1 MB in total\n        size. Amazon SimpleDB automatically adjusts the number of items returned\n        per page to enforce this limit. For example, if the client asks to\n        retrieve 2500 items, but each individual item is 10 kB in size, the\n        system returns 100 items and an appropriate \u003ccode\u003eNextToken\u003c/code\u003e so\n        the client can access the next page of results. \u003c/p\u003e \u003cp\u003e For information\n        on how to construct select expressions, see Using Select to Create\n        Amazon SimpleDB Queries in the Developer Guide. \u003c/p\u003e\n      responses:\n        \"200\":\n          description: Success\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/SelectResult\"\n        \"400\":\n          description: TooManyRequestedAttributes\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/TooManyRequestedAttributes\"\n        \"408\":\n          description: RequestTimeout\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/RequestTimeout\"\n      parameters:\n        - name: Action\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - Select\n        - name: Version\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - 2009-04-15\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                SelectExpression:\n                  description: The expression used to query the domain.\n                  type: string\n                NextToken:\n                  description: A string informing Amazon SimpleDB where to start the next\n                    list of \u003ccode\u003eItemNames\u003c/code\u003e.\n                  type: string\n                ConsistentRead:\n                  description: Determines whether or not strong consistency should be\n                    enforced when data is read from SimpleDB. If\n                    \u003ccode\u003etrue\u003c/code\u003e, any data previously written to SimpleDB\n                    will be returned. Otherwise, results will be consistent\n                    eventually, and the client may not see data that was written\n                    immediately before your read.\n                  type: boolean\n              required:\n                - SelectExpression\nservers:\n  - url: http://sdb.amazonaws.com\n    variables: {}\n    description: The general Amazon SimpleDB endpoint for US East (N. Virginia)\n  - url: https://sdb.amazonaws.com\n    variables: {}\n    description: The general Amazon SimpleDB endpoint for US East (N. Virginia)\n  - url: http://sdb.{region}.amazonaws.com\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - us-east-2\n          - us-west-1\n          - us-west-2\n          - us-gov-west-1\n          - us-gov-east-1\n          - ca-central-1\n          - eu-north-1\n          - eu-west-1\n          - eu-west-2\n          - eu-west-3\n          - eu-central-1\n          - ap-northeast-1\n          - ap-northeast-2\n          - ap-northeast-3\n          - ap-southeast-1\n          - ap-southeast-2\n          - ap-south-1\n          - sa-east-1\n        default: us-east-2\n    description: The Amazon SimpleDB multi-region endpoint\n  - url: https://sdb.{region}.amazonaws.com\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - us-east-2\n          - us-west-1\n          - us-west-2\n          - us-gov-west-1\n          - us-gov-east-1\n          - ca-central-1\n          - eu-north-1\n          - eu-west-1\n          - eu-west-2\n          - eu-west-3\n          - eu-central-1\n          - ap-northeast-1\n          - ap-northeast-2\n          - ap-northeast-3\n          - ap-southeast-1\n          - ap-southeast-2\n          - ap-south-1\n          - sa-east-1\n        default: us-east-2\n    description: The Amazon SimpleDB multi-region endpoint\n  - url: http://sdb.{region}.amazonaws.com.cn\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - cn-north-1\n          - cn-northwest-1\n        default: cn-north-1\n    description: The Amazon SimpleDB endpoint for China (Beijing) and China (Ningxia)\n  - url: https://sdb.{region}.amazonaws.com.cn\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - cn-north-1\n          - cn-northwest-1\n        default: cn-north-1\n    description: The Amazon SimpleDB endpoint for China (Beijing) and China (Ningxia)\ncomponents:\n  parameters:\n    AWSAccessKeyId:\n      name: AWSAccessKeyId\n      in: query\n      required: true\n      schema:\n        type: string\n    Action:\n      name: Action\n      in: query\n      required: true\n      schema:\n        type: string\n    SignatureMethod:\n      name: SignatureMethod\n      in: query\n      required: true\n      schema:\n        type: string\n    SignatureVersion:\n      name: SignatureVersion\n      in: query\n      required: true\n      schema:\n        type: string\n    Timestamp:\n      name: Timestamp\n      in: query\n      required: true\n      schema:\n        type: string\n    Version:\n      name: Version\n      in: query\n      required: true\n      schema:\n        type: string\n    Signature:\n      name: Signature\n      in: query\n      required: true\n      schema:\n        type: string\n  securitySchemes:\n    hmac:\n      type: apiKey\n      name: Authorization\n      in: header\n      description: Amazon Signature authorization v2\n      x-amazon-apigateway-authtype: awsSigv2\n  schemas:\n    DeletableItem:\n      type: object\n      required:\n        - Name\n      properties:\n        Name:\n          $ref: \"#/components/schemas/String\"\n        Attributes:\n          $ref: \"#/components/schemas/DeletableAttributeList\"\n    ReplaceableItem:\n      type: object\n      required:\n        - Name\n        - Attributes\n      properties:\n        Name:\n          $ref: \"#/components/schemas/String\"\n        Attributes:\n          $ref: \"#/components/schemas/ReplaceableAttributeList\"\n      description: \"\"\n    DuplicateItemName:\n      type: object\n      properties:\n        BoxUsage:\n          $ref: \"#/components/schemas/Float\"\n      description: \"The item name was specified more than once. \"\n    InvalidParameterValue:\n      type: object\n      properties:\n        BoxUsage:\n          $ref: \"#/components/schemas/Float\"\n      description: The value for a parameter is invalid.\n    MissingParameter:\n      type: object\n      properties:\n        BoxUsage:\n          $ref: \"#/components/schemas/Float\"\n      description: The request must contain the specified missing parameter.\n    NoSuchDomain:\n      type: object\n      properties:\n        BoxUsage:\n          $ref: \"#/components/schemas/Float\"\n      description: The specified domain does not exist.\n    NumberItemAttributesExceeded:\n      type: object\n      properties:\n        BoxUsage:\n          $ref: \"#/components/schemas/Float\"\n      description: Too many attributes in this item.\n    NumberDomainAttributesExceeded:\n      type: object\n      properties:\n        BoxUsage:\n          $ref: \"#/components/schemas/Float\"\n      description: Too many attributes in this domain.\n    NumberDomainBytesExceeded:\n      type: object\n      properties:\n        BoxUsage:\n          $ref: \"#/components/schemas/Float\"\n      description: Too many bytes in this domain.\n    NumberSubmittedItemsExceeded:\n      type: object\n      properties:\n        BoxUsage:\n          $ref: \"#/components/schemas/Float\"\n      description: Too many items exist in a single call.\n    NumberSubmittedAttributesExceeded:\n      type: object\n      properties:\n        BoxUsage:\n          $ref: \"#/components/schemas/Float\"\n      description: Too many attributes exist in a single call.\n    NumberDomainsExceeded:\n      type: object\n      properties:\n        BoxUsage:\n          $ref: \"#/components/schemas/Float\"\n      description: Too many domains exist per this account.\n    DeletableAttribute:\n      type: object\n      required:\n        - Name\n      properties:\n        Name:\n          $ref: \"#/components/schemas/String\"\n        Value:\n          $ref: \"#/components/schemas/String\"\n      description: \"\"\n    String:\n      type: string\n    Boolean:\n      type: boolean\n    AttributeDoesNotExist:\n      type: object\n      properties:\n        BoxUsage:\n          $ref: \"#/components/schemas/Float\"\n      description: The specified attribute does not exist.\n    DomainMetadataResult:\n      type: object\n      properties:\n        ItemCount:\n          $ref: \"#/components/schemas/Integer\"\n        ItemNamesSizeBytes:\n          $ref: \"#/components/schemas/Long\"\n        AttributeNameCount:\n          $ref: \"#/components/schemas/Integer\"\n        AttributeNamesSizeBytes:\n          $ref: \"#/components/schemas/Long\"\n        AttributeValueCount:\n          $ref: \"#/components/schemas/Integer\"\n        AttributeValuesSizeBytes:\n          $ref: \"#/components/schemas/Long\"\n        Timestamp:\n          $ref: \"#/components/schemas/Integer\"\n    GetAttributesResult:\n      type: object\n      properties:\n        Attributes:\n          $ref: \"#/components/schemas/AttributeList\"\n    ListDomainsResult:\n      type: object\n      properties:\n        DomainNames:\n          $ref: \"#/components/schemas/DomainNameList\"\n        NextToken:\n          $ref: \"#/components/schemas/String\"\n    InvalidNextToken:\n      type: object\n      properties:\n        BoxUsage:\n          $ref: \"#/components/schemas/Float\"\n      description: \"The specified NextToken is not valid. \"\n    ReplaceableAttribute:\n      type: object\n      required:\n        - Name\n        - Value\n      properties:\n        Name:\n          $ref: \"#/components/schemas/String\"\n        Value:\n          $ref: \"#/components/schemas/String\"\n        Replace:\n          $ref: \"#/components/schemas/Boolean\"\n      description: \"\"\n    SelectResult:\n      type: object\n      properties:\n        Items:\n          $ref: \"#/components/schemas/ItemList\"\n        NextToken:\n          $ref: \"#/components/schemas/String\"\n    InvalidNumberPredicates:\n      type: object\n      properties:\n        BoxUsage:\n          $ref: \"#/components/schemas/Float\"\n      description: Too many predicates exist in the query expression.\n    InvalidNumberValueTests:\n      type: object\n      properties:\n        BoxUsage:\n          $ref: \"#/components/schemas/Float\"\n      description: Too many predicates exist in the query expression.\n    InvalidQueryExpression:\n      type: object\n      properties:\n        BoxUsage:\n          $ref: \"#/components/schemas/Float\"\n      description: The specified query expression syntax is not valid.\n    RequestTimeout:\n      type: object\n      properties:\n        BoxUsage:\n          $ref: \"#/components/schemas/Float\"\n      description: A timeout occurred when attempting to query the specified domain with\n        specified query expression.\n    TooManyRequestedAttributes:\n      type: object\n      properties:\n        BoxUsage:\n          $ref: \"#/components/schemas/Float\"\n      description: Too many attributes requested.\n    Attribute:\n      type: object\n      required:\n        - Name\n        - Value\n      properties:\n        Name:\n          $ref: \"#/components/schemas/String\"\n        AlternateNameEncoding:\n          $ref: \"#/components/schemas/String\"\n        Value:\n          $ref: \"#/components/schemas/String\"\n        AlternateValueEncoding:\n          $ref: \"#/components/schemas/String\"\n      description: \"\"\n    Float:\n      type: number\n      format: float\n    AttributeList:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Attribute\"\n      xml:\n        wrapped: false\n    AttributeNameList:\n      type: array\n      items:\n        $ref: \"#/components/schemas/String\"\n      xml:\n        wrapped: false\n    DeletableItemList:\n      type: array\n      items:\n        $ref: \"#/components/schemas/DeletableItem\"\n      xml:\n        wrapped: false\n    BatchDeleteAttributesRequest:\n      type: object\n      required:\n        - DomainName\n        - Items\n      properties:\n        DomainName:\n          $ref: \"#/components/schemas/String\"\n        Items:\n          $ref: \"#/components/schemas/DeletableItemList\"\n    ReplaceableItemList:\n      type: array\n      items:\n        $ref: \"#/components/schemas/ReplaceableItem\"\n      xml:\n        wrapped: false\n    BatchPutAttributesRequest:\n      type: object\n      required:\n        - DomainName\n        - Items\n      properties:\n        DomainName:\n          $ref: \"#/components/schemas/String\"\n        Items:\n          $ref: \"#/components/schemas/ReplaceableItemList\"\n    CreateDomainRequest:\n      type: object\n      required:\n        - DomainName\n      properties:\n        DomainName:\n          $ref: \"#/components/schemas/String\"\n    DeletableAttributeList:\n      type: array\n      items:\n        $ref: \"#/components/schemas/DeletableAttribute\"\n      xml:\n        wrapped: false\n    UpdateCondition:\n      type: object\n      properties:\n        Name:\n          $ref: \"#/components/schemas/String\"\n        Value:\n          $ref: \"#/components/schemas/String\"\n        Exists:\n          $ref: \"#/components/schemas/Boolean\"\n      description: \" Specifies the conditions under which data should be updated. If an\n        update condition is specified for a request, the data will only be\n        updated if the condition is satisfied. For example, if an attribute with\n        a specific name and value exists, or if a specific attribute doesn't\n        exist. \"\n    DeleteAttributesRequest:\n      type: object\n      required:\n        - DomainName\n        - ItemName\n      properties:\n        DomainName:\n          $ref: \"#/components/schemas/String\"\n        ItemName:\n          $ref: \"#/components/schemas/String\"\n        Attributes:\n          $ref: \"#/components/schemas/DeletableAttributeList\"\n        Expected:\n          $ref: \"#/components/schemas/UpdateCondition\"\n    DeleteDomainRequest:\n      type: object\n      required:\n        - DomainName\n      properties:\n        DomainName:\n          $ref: \"#/components/schemas/String\"\n    DomainMetadataRequest:\n      type: object\n      required:\n        - DomainName\n      properties:\n        DomainName:\n          $ref: \"#/components/schemas/String\"\n    Integer:\n      type: integer\n    Long:\n      type: integer\n    DomainNameList:\n      type: array\n      items:\n        $ref: \"#/components/schemas/String\"\n      xml:\n        wrapped: false\n    GetAttributesRequest:\n      type: object\n      required:\n        - DomainName\n        - ItemName\n      properties:\n        DomainName:\n          $ref: \"#/components/schemas/String\"\n        ItemName:\n          $ref: \"#/components/schemas/String\"\n        AttributeNames:\n          $ref: \"#/components/schemas/AttributeNameList\"\n        ConsistentRead:\n          $ref: \"#/components/schemas/Boolean\"\n    Item:\n      type: object\n      required:\n        - Name\n        - Attributes\n      properties:\n        Name:\n          $ref: \"#/components/schemas/String\"\n        AlternateNameEncoding:\n          $ref: \"#/components/schemas/String\"\n        Attributes:\n          $ref: \"#/components/schemas/AttributeList\"\n      description: \"\"\n    ItemList:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Item\"\n      xml:\n        wrapped: false\n    ListDomainsRequest:\n      type: object\n      properties:\n        MaxNumberOfDomains:\n          $ref: \"#/components/schemas/Integer\"\n        NextToken:\n          $ref: \"#/components/schemas/String\"\n    ReplaceableAttributeList:\n      type: array\n      items:\n        $ref: \"#/components/schemas/ReplaceableAttribute\"\n      xml:\n        wrapped: false\n    PutAttributesRequest:\n      type: object\n      required:\n        - DomainName\n        - ItemName\n        - Attributes\n      properties:\n        DomainName:\n          $ref: \"#/components/schemas/String\"\n        ItemName:\n          $ref: \"#/components/schemas/String\"\n        Attributes:\n          $ref: \"#/components/schemas/ReplaceableAttributeList\"\n        Expected:\n          $ref: \"#/components/schemas/UpdateCondition\"\n    SelectRequest:\n      type: object\n      required:\n        - SelectExpression\n      properties:\n        SelectExpression:\n          $ref: \"#/components/schemas/String\"\n        NextToken:\n          $ref: \"#/components/schemas/String\"\n        ConsistentRead:\n          $ref: \"#/components/schemas/Boolean\"\n",
			"canonicalURL": "/github.com/restful-ma/thresholds@5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/-/blob/benchmark-repository/openapi/amazonaws.com-sdb-2009-04-15-swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/restful-ma/thresholds/blob/5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/benchmark-repository/openapi/amazonaws.com-sdb-2009-04-15-swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: at 1:48259: duplicate path: \"/#Action=ListDomains\""
}