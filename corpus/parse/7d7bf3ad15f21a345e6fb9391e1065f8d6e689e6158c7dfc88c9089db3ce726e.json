{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/restful-ma/thresholds"
		},
		"file": {
			"name": "amazonaws.com-sdb-2009-04-15-swagger.yaml",
			"size": 0,
			"path": "benchmark-repository/openapi/amazonaws.com-sdb-2009-04-15-swagger.yaml",
			"byteSize": 80285,
			"content": "openapi: 3.0.0\ninfo:\n  version: 2009-04-15\n  x-release: v2\n  title: Amazon SimpleDB\n  description: Amazon SimpleDB is a web service providing the core database functions of\n    data indexing and querying in the cloud. By offloading the time and effort\n    associated with building and operating a web-scale database, SimpleDB\n    provides developers the freedom to focus on application development. <p> A\n    traditional, clustered relational database requires a sizable upfront\n    capital outlay, is complex to design, and often requires extensive and\n    repetitive database administration. Amazon SimpleDB is dramatically simpler,\n    requiring no schema, automatically indexing your data and providing a simple\n    API for storage and access. This approach eliminates the administrative\n    burden of data modeling, index maintenance, and performance tuning.\n    Developers gain access to this functionality within Amazon's proven\n    computing environment, are able to scale instantly, and pay only for what\n    they use. </p> <p> Visit <a\n    href=\"http://aws.amazon.com/simpledb/\">http://aws.amazon.com/simpledb/</a>\n    for more information. </p>\n  x-logo:\n    url: https://twitter.com/awscloud/profile_image?size=original\n    backgroundColor: \"#FFFFFF\"\n  termsOfService: https://aws.amazon.com/service-terms/\n  contact:\n    name: Mike Ralphson\n    email: mike.ralphson@gmail.com\n    url: https://github.com/mermade/aws2openapi\n    x-twitter: PermittedSoc\n  license:\n    name: Apache 2.0 License\n    url: http://www.apache.org/licenses/\n  x-providerName: amazonaws.com\n  x-serviceName: sdb\n  x-origin:\n    - contentType: application/json\n      url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/sdb-2009-04-15.normal.json\n      converter:\n        url: https://github.com/mermade/aws2openapi\n        version: 1.0.0\n      x-apisguru-direct: true\n  x-apiClientRegistration:\n    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct\n  x-apisguru-categories:\n    - cloud\n  x-preferred: true\nexternalDocs:\n  description: Amazon Web Services documentation\n  url: https://docs.aws.amazon.com/sdb/\nx-hasEquivalentPaths: true\nsecurity:\n  - hmac: []\npaths:\n  /#Action=BatchDeleteAttributes:\n    get:\n      x-aws-operation-name: BatchDeleteAttributes\n      operationId: GET BatchDeleteAttributes\n      description: \"<p> Performs multiple DeleteAttributes operations in a single call,\n        which reduces round trips and latencies. This enables Amazon SimpleDB to\n        optimize requests, which generally yields better throughput. </p> <note>\n        <p> If you specify BatchDeleteAttributes without attributes or values,\n        all the attributes for the item are deleted. </p> <p>\n        BatchDeleteAttributes is an idempotent operation; running it multiple\n        times on the same item or attribute doesn't result in an error. </p> <p>\n        The BatchDeleteAttributes operation succeeds or fails in its entirety.\n        There are no partial deletes. You can execute multiple\n        BatchDeleteAttributes operations and other operations in parallel.\n        However, large numbers of concurrent BatchDeleteAttributes calls can\n        result in Service Unavailable (503) responses. </p> <p> This operation\n        is vulnerable to exceeding the maximum URL size when making a REST\n        request using the HTTP GET method. </p> <p> This operation does not\n        support conditions using Expected.X.Name, Expected.X.Value, or\n        Expected.X.Exists. </p> </note> <p> The following limitations are\n        enforced for this operation: <ul> <li>1 MB request size</li> <li>25 item\n        limit per BatchDeleteAttributes operation</li> </ul> </p>\"\n      responses:\n        \"200\":\n          description: Success\n      parameters:\n        - name: DomainName\n          in: query\n          required: true\n          description: The name of the domain in which the attributes are being deleted.\n          schema:\n            type: string\n        - name: Items\n          in: query\n          required: true\n          description: A list of items on which to perform the operation.\n          schema:\n            type: array\n            items:\n              type: string\n        - name: Action\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - BatchDeleteAttributes\n        - name: Version\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - 2009-04-15\n    parameters:\n      - $ref: \"#/components/parameters/AWSAccessKeyId\"\n      - $ref: \"#/components/parameters/Action\"\n      - $ref: \"#/components/parameters/SignatureMethod\"\n      - $ref: \"#/components/parameters/SignatureVersion\"\n      - $ref: \"#/components/parameters/Timestamp\"\n      - $ref: \"#/components/parameters/Version\"\n      - $ref: \"#/components/parameters/Signature\"\n    post:\n      x-aws-operation-name: BatchDeleteAttributes\n      operationId: POST BatchDeleteAttributes\n      description: \"<p> Performs multiple DeleteAttributes operations in a single call,\n        which reduces round trips and latencies. This enables Amazon SimpleDB to\n        optimize requests, which generally yields better throughput. </p> <note>\n        <p> If you specify BatchDeleteAttributes without attributes or values,\n        all the attributes for the item are deleted. </p> <p>\n        BatchDeleteAttributes is an idempotent operation; running it multiple\n        times on the same item or attribute doesn't result in an error. </p> <p>\n        The BatchDeleteAttributes operation succeeds or fails in its entirety.\n        There are no partial deletes. You can execute multiple\n        BatchDeleteAttributes operations and other operations in parallel.\n        However, large numbers of concurrent BatchDeleteAttributes calls can\n        result in Service Unavailable (503) responses. </p> <p> This operation\n        is vulnerable to exceeding the maximum URL size when making a REST\n        request using the HTTP GET method. </p> <p> This operation does not\n        support conditions using Expected.X.Name, Expected.X.Value, or\n        Expected.X.Exists. </p> </note> <p> The following limitations are\n        enforced for this operation: <ul> <li>1 MB request size</li> <li>25 item\n        limit per BatchDeleteAttributes operation</li> </ul> </p>\"\n      responses:\n        \"200\":\n          description: Success\n      parameters:\n        - name: Action\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - BatchDeleteAttributes\n        - name: Version\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - 2009-04-15\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                DomainName:\n                  description: The name of the domain in which the attributes are being\n                    deleted.\n                  type: string\n                Items:\n                  description: A list of items on which to perform the operation.\n                  type: array\n                  items:\n                    type: string\n              required:\n                - DomainName\n                - Items\n  /#Action=BatchPutAttributes:\n    get:\n      x-aws-operation-name: BatchPutAttributes\n      operationId: GET BatchPutAttributes\n      description: \"<p> The <code>BatchPutAttributes</code> operation creates or replaces\n        attributes within one or more items. By using this operation, the client\n        can perform multiple <a>PutAttribute</a> operation with a single call.\n        This helps yield savings in round trips and latencies, enabling Amazon\n        SimpleDB to optimize requests and generally produce better throughput.\n        </p> <p> The client may specify the item name with the\n        <code>Item.X.ItemName</code> parameter. The client may specify new\n        attributes using a combination of the\n        <code>Item.X.Attribute.Y.Name</code> and\n        <code>Item.X.Attribute.Y.Value</code> parameters. The client may specify\n        the first attribute for the first item using the parameters\n        <code>Item.0.Attribute.0.Name</code> and\n        <code>Item.0.Attribute.0.Value</code>, and for the second attribute for\n        the first item by the parameters <code>Item.0.Attribute.1.Name</code>\n        and <code>Item.0.Attribute.1.Value</code>, and so on. </p> <p>\n        Attributes are uniquely identified within an item by their name/value\n        combination. For example, a single item can have the attributes <code>{\n        \\\"first_name\\\", \\\"first_value\\\" }</code> and <code>{ \\\"first_name\\\",\n        \\\"second_value\\\" }</code>. However, it cannot have two attribute\n        instances where both the <code>Item.X.Attribute.Y.Name</code> and\n        <code>Item.X.Attribute.Y.Value</code> are the same. </p> <p> Optionally,\n        the requester can supply the <code>Replace</code> parameter for each\n        individual value. Setting this value to <code>true</code> will cause the\n        new attribute values to replace the existing attribute values. For\n        example, if an item <code>I</code> has the attributes <code>{ 'a', '1'\n        }, { 'b', '2'}</code> and <code>{ 'b', '3' }</code> and the requester\n        does a BatchPutAttributes of <code>{'I', 'b', '4' }</code> with the\n        Replace parameter set to true, the final attributes of the item will be\n        <code>{ 'a', '1' }</code> and <code>{ 'b', '4' }</code>, replacing the\n        previous values of the 'b' attribute with the new value. </p> <note> You\n        cannot specify an empty string as an item or as an attribute name. The\n        <code>BatchPutAttributes</code> operation succeeds or fails in its\n        entirety. There are no partial puts. </note> <important> This operation\n        is vulnerable to exceeding the maximum URL size when making a REST\n        request using the HTTP GET method. This operation does not support\n        conditions using <code>Expected.X.Name</code>,\n        <code>Expected.X.Value</code>, or <code>Expected.X.Exists</code>.\n        </important> <p> You can execute multiple\n        <code>BatchPutAttributes</code> operations and other operations in\n        parallel. However, large numbers of concurrent\n        <code>BatchPutAttributes</code> calls can result in Service Unavailable\n        (503) responses. </p> <p> The following limitations are enforced for\n        this operation: <ul> <li>256 attribute name-value pairs per item</li>\n        <li>1 MB request size</li> <li>1 billion attributes per domain</li>\n        <li>10 GB of total user data storage per domain</li> <li>25 item limit\n        per <code>BatchPutAttributes</code> operation</li> </ul> </p>\"\n      responses:\n        \"200\":\n          description: Success\n        \"400\":\n          description: NoSuchDomain\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/NoSuchDomain\"\n        \"409\":\n          description: NumberSubmittedAttributesExceeded\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/NumberSubmittedAttributesExceeded\"\n      parameters:\n        - name: DomainName\n          in: query\n          required: true\n          description: The name of the domain in which the attributes are being stored.\n          schema:\n            type: string\n        - name: Items\n          in: query\n          required: true\n          description: A list of items on which to perform the operation.\n          schema:\n            type: array\n            items:\n              type: string\n        - name: Action\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - BatchPutAttributes\n        - name: Version\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - 2009-04-15\n    parameters:\n      - $ref: \"#/components/parameters/AWSAccessKeyId\"\n      - $ref: \"#/components/parameters/Action\"\n      - $ref: \"#/components/parameters/SignatureMethod\"\n      - $ref: \"#/components/parameters/SignatureVersion\"\n      - $ref: \"#/components/parameters/Timestamp\"\n      - $ref: \"#/components/parameters/Version\"\n      - $ref: \"#/components/parameters/Signature\"\n    post:\n      x-aws-operation-name: BatchPutAttributes\n      operationId: POST BatchPutAttributes\n      description: \"<p> The <code>BatchPutAttributes</code> operation creates or replaces\n        attributes within one or more items. By using this operation, the client\n        can perform multiple <a>PutAttribute</a> operation with a single call.\n        This helps yield savings in round trips and latencies, enabling Amazon\n        SimpleDB to optimize requests and generally produce better throughput.\n        </p> <p> The client may specify the item name with the\n        <code>Item.X.ItemName</code> parameter. The client may specify new\n        attributes using a combination of the\n        <code>Item.X.Attribute.Y.Name</code> and\n        <code>Item.X.Attribute.Y.Value</code> parameters. The client may specify\n        the first attribute for the first item using the parameters\n        <code>Item.0.Attribute.0.Name</code> and\n        <code>Item.0.Attribute.0.Value</code>, and for the second attribute for\n        the first item by the parameters <code>Item.0.Attribute.1.Name</code>\n        and <code>Item.0.Attribute.1.Value</code>, and so on. </p> <p>\n        Attributes are uniquely identified within an item by their name/value\n        combination. For example, a single item can have the attributes <code>{\n        \\\"first_name\\\", \\\"first_value\\\" }</code> and <code>{ \\\"first_name\\\",\n        \\\"second_value\\\" }</code>. However, it cannot have two attribute\n        instances where both the <code>Item.X.Attribute.Y.Name</code> and\n        <code>Item.X.Attribute.Y.Value</code> are the same. </p> <p> Optionally,\n        the requester can supply the <code>Replace</code> parameter for each\n        individual value. Setting this value to <code>true</code> will cause the\n        new attribute values to replace the existing attribute values. For\n        example, if an item <code>I</code> has the attributes <code>{ 'a', '1'\n        }, { 'b', '2'}</code> and <code>{ 'b', '3' }</code> and the requester\n        does a BatchPutAttributes of <code>{'I', 'b', '4' }</code> with the\n        Replace parameter set to true, the final attributes of the item will be\n        <code>{ 'a', '1' }</code> and <code>{ 'b', '4' }</code>, replacing the\n        previous values of the 'b' attribute with the new value. </p> <note> You\n        cannot specify an empty string as an item or as an attribute name. The\n        <code>BatchPutAttributes</code> operation succeeds or fails in its\n        entirety. There are no partial puts. </note> <important> This operation\n        is vulnerable to exceeding the maximum URL size when making a REST\n        request using the HTTP GET method. This operation does not support\n        conditions using <code>Expected.X.Name</code>,\n        <code>Expected.X.Value</code>, or <code>Expected.X.Exists</code>.\n        </important> <p> You can execute multiple\n        <code>BatchPutAttributes</code> operations and other operations in\n        parallel. However, large numbers of concurrent\n        <code>BatchPutAttributes</code> calls can result in Service Unavailable\n        (503) responses. </p> <p> The following limitations are enforced for\n        this operation: <ul> <li>256 attribute name-value pairs per item</li>\n        <li>1 MB request size</li> <li>1 billion attributes per domain</li>\n        <li>10 GB of total user data storage per domain</li> <li>25 item limit\n        per <code>BatchPutAttributes</code> operation</li> </ul> </p>\"\n      responses:\n        \"200\":\n          description: Success\n        \"400\":\n          description: NoSuchDomain\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/NoSuchDomain\"\n        \"409\":\n          description: NumberSubmittedAttributesExceeded\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/NumberSubmittedAttributesExceeded\"\n      parameters:\n        - name: Action\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - BatchPutAttributes\n        - name: Version\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - 2009-04-15\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                DomainName:\n                  description: The name of the domain in which the attributes are being\n                    stored.\n                  type: string\n                Items:\n                  description: A list of items on which to perform the operation.\n                  type: array\n                  items:\n                    type: string\n              required:\n                - DomainName\n                - Items\n  /#Action=CreateDomain:\n    get:\n      x-aws-operation-name: CreateDomain\n      operationId: GET CreateDomain\n      description: <p> The <code>CreateDomain</code> operation creates a new domain. The\n        domain name should be unique among the domains associated with the\n        Access Key ID provided in the request. The <code>CreateDomain</code>\n        operation may take 10 or more seconds to complete. </p> <note>\n        CreateDomain is an idempotent operation; running it multiple times using\n        the same domain name will not result in an error response. </note> <p>\n        The client can create up to 100 domains per account. </p> <p> If the\n        client requires additional domains, go to <a\n        href=\"http://aws.amazon.com/contact-us/simpledb-limit-request/\">\n        http://aws.amazon.com/contact-us/simpledb-limit-request/</a>. </p>\n      responses:\n        \"200\":\n          description: Success\n        \"400\":\n          description: MissingParameter\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/MissingParameter\"\n        \"409\":\n          description: NumberDomainsExceeded\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/NumberDomainsExceeded\"\n      parameters:\n        - name: DomainName\n          in: query\n          required: true\n          description: \"The name of the domain to create. The name can range between 3 and\n            255 characters and can contain the following characters: a-z, A-Z,\n            0-9, '_', '-', and '.'.\"\n          schema:\n            type: string\n        - name: Action\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - CreateDomain\n        - name: Version\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - 2009-04-15\n    parameters:\n      - $ref: \"#/components/parameters/AWSAccessKeyId\"\n      - $ref: \"#/components/parameters/Action\"\n      - $ref: \"#/components/parameters/SignatureMethod\"\n      - $ref: \"#/components/parameters/SignatureVersion\"\n      - $ref: \"#/components/parameters/Timestamp\"\n      - $ref: \"#/components/parameters/Version\"\n      - $ref: \"#/components/parameters/Signature\"\n    post:\n      x-aws-operation-name: CreateDomain\n      operationId: POST CreateDomain\n      description: <p> The <code>CreateDomain</code> operation creates a new domain. The\n        domain name should be unique among the domains associated with the\n        Access Key ID provided in the request. The <code>CreateDomain</code>\n        operation may take 10 or more seconds to complete. </p> <note>\n        CreateDomain is an idempotent operation; running it multiple times using\n        the same domain name will not result in an error response. </note> <p>\n        The client can create up to 100 domains per account. </p> <p> If the\n        client requires additional domains, go to <a\n        href=\"http://aws.amazon.com/contact-us/simpledb-limit-request/\">\n        http://aws.amazon.com/contact-us/simpledb-limit-request/</a>. </p>\n      responses:\n        \"200\":\n          description: Success\n        \"400\":\n          description: MissingParameter\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/MissingParameter\"\n        \"409\":\n          description: NumberDomainsExceeded\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/NumberDomainsExceeded\"\n      parameters:\n        - name: Action\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - CreateDomain\n        - name: Version\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - 2009-04-15\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                DomainName:\n                  description: \"The name of the domain to create. The name can range\n                    between 3 and 255 characters and can contain the following\n                    characters: a-z, A-Z, 0-9, '_', '-', and '.'.\"\n                  type: string\n              required:\n                - DomainName\n  /#Action=DeleteAttributes:\n    get:\n      x-aws-operation-name: DeleteAttributes\n      operationId: GET DeleteAttributes\n      description: <p> Deletes one or more attributes associated with an item. If all\n        attributes of the item are deleted, the item is deleted. </p> <note> If\n        <code>DeleteAttributes</code> is called without being passed any\n        attributes or values specified, all the attributes for the item are\n        deleted. </note> <p> <code>DeleteAttributes</code> is an idempotent\n        operation; running it multiple times on the same item or attribute does\n        not result in an error response. </p> <p> Because Amazon SimpleDB makes\n        multiple copies of item data and uses an eventual consistency update\n        model, performing a <a>GetAttributes</a> or <a>Select</a> operation\n        (read) immediately after a <code>DeleteAttributes</code> or\n        <a>PutAttributes</a> operation (write) might not return updated item\n        data. </p>\n      responses:\n        \"200\":\n          description: Success\n        \"400\":\n          description: NoSuchDomain\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/NoSuchDomain\"\n        \"404\":\n          description: AttributeDoesNotExist\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/AttributeDoesNotExist\"\n      parameters:\n        - name: DomainName\n          in: query\n          required: true\n          description: The name of the domain in which to perform the operation.\n          schema:\n            type: string\n        - name: ItemName\n          in: query\n          required: true\n          description: The name of the item. Similar to rows on a spreadsheet, items\n            represent individual objects that contain one or more\n            value-attribute pairs.\n          schema:\n            type: string\n        - name: Attributes\n          in: query\n          required: false\n          description: A list of Attributes. Similar to columns on a spreadsheet,\n            attributes represent categories of data that can be assigned to\n            items.\n          schema:\n            type: array\n            items:\n              type: string\n        - name: Expected.Name\n          in: query\n          description: >-2\n             Specifies the conditions under which data should be updated. If an update condition is specified for a request, the data will only be updated if the condition is satisfied. For example, if an attribute with a specific name and value exists, or if a specific attribute doesn't exist. \n            The name of the attribute involved in the condition.\n          schema:\n            type: string\n        - name: Expected.Value\n          in: query\n          description: >-2\n             Specifies the conditions under which data should be updated. If an update condition is specified for a request, the data will only be updated if the condition is satisfied. For example, if an attribute with a specific name and value exists, or if a specific attribute doesn't exist. \n            The value of an attribute. This value can only be specified when the <code>Exists</code> parameter is equal to <code>true</code>.\n          schema:\n            type: string\n        - name: Expected.Exists\n          in: query\n          description: >-2\n             Specifies the conditions under which data should be updated. If an update condition is specified for a request, the data will only be updated if the condition is satisfied. For example, if an attribute with a specific name and value exists, or if a specific attribute doesn't exist. \n            A value specifying whether or not the specified attribute must exist with the specified value in order for the update condition to be satisfied. Specify <code>true</code> if the attribute must exist for the update condition to be satisfied. Specify <code>false</code> if the attribute should not exist in order for the update condition to be satisfied.\n          schema:\n            type: string\n        - name: Action\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - DeleteAttributes\n        - name: Version\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - 2009-04-15\n    parameters:\n      - $ref: \"#/components/parameters/AWSAccessKeyId\"\n      - $ref: \"#/components/parameters/Action\"\n      - $ref: \"#/components/parameters/SignatureMethod\"\n      - $ref: \"#/components/parameters/SignatureVersion\"\n      - $ref: \"#/components/parameters/Timestamp\"\n      - $ref: \"#/components/parameters/Version\"\n      - $ref: \"#/components/parameters/Signature\"\n    post:\n      x-aws-operation-name: DeleteAttributes\n      operationId: POST DeleteAttributes\n      description: <p> Deletes one or more attributes associated with an item. If all\n        attributes of the item are deleted, the item is deleted. </p> <note> If\n        <code>DeleteAttributes</code> is called without being passed any\n        attributes or values specified, all the attributes for the item are\n        deleted. </note> <p> <code>DeleteAttributes</code> is an idempotent\n        operation; running it multiple times on the same item or attribute does\n        not result in an error response. </p> <p> Because Amazon SimpleDB makes\n        multiple copies of item data and uses an eventual consistency update\n        model, performing a <a>GetAttributes</a> or <a>Select</a> operation\n        (read) immediately after a <code>DeleteAttributes</code> or\n        <a>PutAttributes</a> operation (write) might not return updated item\n        data. </p>\n      responses:\n        \"200\":\n          description: Success\n        \"400\":\n          description: NoSuchDomain\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/NoSuchDomain\"\n        \"404\":\n          description: AttributeDoesNotExist\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/AttributeDoesNotExist\"\n      parameters:\n        - name: Action\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - DeleteAttributes\n        - name: Version\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - 2009-04-15\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                DomainName:\n                  description: The name of the domain in which to perform the operation.\n                  type: string\n                ItemName:\n                  description: The name of the item. Similar to rows on a spreadsheet,\n                    items represent individual objects that contain one or more\n                    value-attribute pairs.\n                  type: string\n                Attributes:\n                  description: A list of Attributes. Similar to columns on a spreadsheet,\n                    attributes represent categories of data that can be assigned\n                    to items.\n                  type: array\n                  items:\n                    type: string\n                Expected.Name:\n                  description: >-2\n                     Specifies the conditions under which data should be updated. If an update condition is specified for a request, the data will only be updated if the condition is satisfied. For example, if an attribute with a specific name and value exists, or if a specific attribute doesn't exist. \n                    The name of the attribute involved in the condition.\n                  type: string\n                Expected.Value:\n                  description: >-2\n                     Specifies the conditions under which data should be updated. If an update condition is specified for a request, the data will only be updated if the condition is satisfied. For example, if an attribute with a specific name and value exists, or if a specific attribute doesn't exist. \n                    The value of an attribute. This value can only be specified when the <code>Exists</code> parameter is equal to <code>true</code>.\n                  type: string\n                Expected.Exists:\n                  description: >-2\n                     Specifies the conditions under which data should be updated. If an update condition is specified for a request, the data will only be updated if the condition is satisfied. For example, if an attribute with a specific name and value exists, or if a specific attribute doesn't exist. \n                    A value specifying whether or not the specified attribute must exist with the specified value in order for the update condition to be satisfied. Specify <code>true</code> if the attribute must exist for the update condition to be satisfied. Specify <code>false</code> if the attribute should not exist in order for the update condition to be satisfied.\n                  type: string\n              required:\n                - DomainName\n                - ItemName\n  /#Action=DeleteDomain:\n    get:\n      x-aws-operation-name: DeleteDomain\n      operationId: GET DeleteDomain\n      description: <p> The <code>DeleteDomain</code> operation deletes a domain. Any items\n        (and their attributes) in the domain are deleted as well. The\n        <code>DeleteDomain</code> operation might take 10 or more seconds to\n        complete. </p> <note> Running <code>DeleteDomain</code> on a domain that\n        does not exist or running the function multiple times using the same\n        domain name will not result in an error response. </note>\n      responses:\n        \"200\":\n          description: Success\n        \"400\":\n          description: MissingParameter\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/MissingParameter\"\n      parameters:\n        - name: DomainName\n          in: query\n          required: true\n          description: The name of the domain to delete.\n          schema:\n            type: string\n        - name: Action\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - DeleteDomain\n        - name: Version\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - 2009-04-15\n    parameters:\n      - $ref: \"#/components/parameters/AWSAccessKeyId\"\n      - $ref: \"#/components/parameters/Action\"\n      - $ref: \"#/components/parameters/SignatureMethod\"\n      - $ref: \"#/components/parameters/SignatureVersion\"\n      - $ref: \"#/components/parameters/Timestamp\"\n      - $ref: \"#/components/parameters/Version\"\n      - $ref: \"#/components/parameters/Signature\"\n    post:\n      x-aws-operation-name: DeleteDomain\n      operationId: POST DeleteDomain\n      description: <p> The <code>DeleteDomain</code> operation deletes a domain. Any items\n        (and their attributes) in the domain are deleted as well. The\n        <code>DeleteDomain</code> operation might take 10 or more seconds to\n        complete. </p> <note> Running <code>DeleteDomain</code> on a domain that\n        does not exist or running the function multiple times using the same\n        domain name will not result in an error response. </note>\n      responses:\n        \"200\":\n          description: Success\n        \"400\":\n          description: MissingParameter\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/MissingParameter\"\n      parameters:\n        - name: Action\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - DeleteDomain\n        - name: Version\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - 2009-04-15\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                DomainName:\n                  description: The name of the domain to delete.\n                  type: string\n              required:\n                - DomainName\n  /#Action=DomainMetadata:\n    get:\n      x-aws-operation-name: DomainMetadata\n      operationId: GET DomainMetadata\n      description: \" Returns information about the domain, including when the domain was\n        created, the number of items and attributes in the domain, and the size\n        of the attribute names and values. \"\n      responses:\n        \"200\":\n          description: Success\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/DomainMetadataResult\"\n        \"400\":\n          description: NoSuchDomain\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/NoSuchDomain\"\n      parameters:\n        - name: DomainName\n          in: query\n          required: true\n          description: The name of the domain for which to display the metadata of.\n          schema:\n            type: string\n        - name: Action\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - DomainMetadata\n        - name: Version\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - 2009-04-15\n    parameters:\n      - $ref: \"#/components/parameters/AWSAccessKeyId\"\n      - $ref: \"#/components/parameters/Action\"\n      - $ref: \"#/components/parameters/SignatureMethod\"\n      - $ref: \"#/components/parameters/SignatureVersion\"\n      - $ref: \"#/components/parameters/Timestamp\"\n      - $ref: \"#/components/parameters/Version\"\n      - $ref: \"#/components/parameters/Signature\"\n    post:\n      x-aws-operation-name: DomainMetadata\n      operationId: POST DomainMetadata\n      description: \" Returns information about the domain, including when the domain was\n        created, the number of items and attributes in the domain, and the size\n        of the attribute names and values. \"\n      responses:\n        \"200\":\n          description: Success\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/DomainMetadataResult\"\n        \"400\":\n          description: NoSuchDomain\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/NoSuchDomain\"\n      parameters:\n        - name: Action\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - DomainMetadata\n        - name: Version\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - 2009-04-15\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                DomainName:\n                  description: The name of the domain for which to display the metadata of.\n                  type: string\n              required:\n                - DomainName\n  /#Action=GetAttributes:\n    get:\n      x-aws-operation-name: GetAttributes\n      operationId: GET GetAttributes\n      description: <p> Returns all of the attributes associated with the specified item.\n        Optionally, the attributes returned can be limited to one or more\n        attributes by specifying an attribute name parameter. </p> <p> If the\n        item does not exist on the replica that was accessed for this operation,\n        an empty set is returned. The system does not return an error as it\n        cannot guarantee the item does not exist on other replicas. </p> <note>\n        If GetAttributes is called without being passed any attribute names, all\n        the attributes for the item are returned. </note>\n      responses:\n        \"200\":\n          description: Success\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/GetAttributesResult\"\n        \"400\":\n          description: NoSuchDomain\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/NoSuchDomain\"\n      parameters:\n        - name: DomainName\n          in: query\n          required: true\n          description: The name of the domain in which to perform the operation.\n          schema:\n            type: string\n        - name: ItemName\n          in: query\n          required: true\n          description: The name of the item.\n          schema:\n            type: string\n        - name: AttributeNames\n          in: query\n          required: false\n          description: The names of the attributes.\n          schema:\n            type: array\n            items:\n              type: string\n        - name: ConsistentRead\n          in: query\n          required: false\n          description: Determines whether or not strong consistency should be enforced when\n            data is read from SimpleDB. If <code>true</code>, any data\n            previously written to SimpleDB will be returned. Otherwise, results\n            will be consistent eventually, and the client may not see data that\n            was written immediately before your read.\n          schema:\n            type: boolean\n        - name: Action\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - GetAttributes\n        - name: Version\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - 2009-04-15\n    parameters:\n      - $ref: \"#/components/parameters/AWSAccessKeyId\"\n      - $ref: \"#/components/parameters/Action\"\n      - $ref: \"#/components/parameters/SignatureMethod\"\n      - $ref: \"#/components/parameters/SignatureVersion\"\n      - $ref: \"#/components/parameters/Timestamp\"\n      - $ref: \"#/components/parameters/Version\"\n      - $ref: \"#/components/parameters/Signature\"\n    post:\n      x-aws-operation-name: GetAttributes\n      operationId: POST GetAttributes\n      description: <p> Returns all of the attributes associated with the specified item.\n        Optionally, the attributes returned can be limited to one or more\n        attributes by specifying an attribute name parameter. </p> <p> If the\n        item does not exist on the replica that was accessed for this operation,\n        an empty set is returned. The system does not return an error as it\n        cannot guarantee the item does not exist on other replicas. </p> <note>\n        If GetAttributes is called without being passed any attribute names, all\n        the attributes for the item are returned. </note>\n      responses:\n        \"200\":\n          description: Success\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/GetAttributesResult\"\n        \"400\":\n          description: NoSuchDomain\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/NoSuchDomain\"\n      parameters:\n        - name: Action\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - GetAttributes\n        - name: Version\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - 2009-04-15\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                DomainName:\n                  description: The name of the domain in which to perform the operation.\n                  type: string\n                ItemName:\n                  description: The name of the item.\n                  type: string\n                AttributeNames:\n                  description: The names of the attributes.\n                  type: array\n                  items:\n                    type: string\n                ConsistentRead:\n                  description: Determines whether or not strong consistency should be\n                    enforced when data is read from SimpleDB. If\n                    <code>true</code>, any data previously written to SimpleDB\n                    will be returned. Otherwise, results will be consistent\n                    eventually, and the client may not see data that was written\n                    immediately before your read.\n                  type: boolean\n              required:\n                - DomainName\n                - ItemName\n  /#Action=ListDomains:\n    get:\n      x-aws-operation-name: ListDomains\n      operationId: GET ListDomains\n      description: ' The <code>ListDomains</code> operation lists all domains associated\n        with the Access Key ID. It returns domain names up to the limit set by\n        <a href=\"#MaxNumberOfDomains\">MaxNumberOfDomains</a>. A <a\n        href=\"#NextToken\">NextToken</a> is returned if there are more than\n        <code>MaxNumberOfDomains</code> domains. Calling\n        <code>ListDomains</code> successive times with the\n        <code>NextToken</code> provided by the operation returns up to\n        <code>MaxNumberOfDomains</code> more domain names with each successive\n        operation call. '\n      responses:\n        \"200\":\n          description: Success\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/ListDomainsResult\"\n        \"400\":\n          description: InvalidNextToken\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/InvalidNextToken\"\n      parameters:\n        - name: MaxNumberOfDomains\n          in: query\n          required: false\n          description: The maximum number of domain names you want returned. The range is 1\n            to 100. The default setting is 100.\n          schema:\n            type: integer\n        - name: NextToken\n          in: query\n          required: false\n          description: A string informing Amazon SimpleDB where to start the next list of\n            domain names.\n          schema:\n            type: string\n        - name: Action\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - ListDomains\n        - name: Version\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - 2009-04-15\n    parameters:\n      - $ref: \"#/components/parameters/AWSAccessKeyId\"\n      - $ref: \"#/components/parameters/Action\"\n      - $ref: \"#/components/parameters/SignatureMethod\"\n      - $ref: \"#/components/parameters/SignatureVersion\"\n      - $ref: \"#/components/parameters/Timestamp\"\n      - $ref: \"#/components/parameters/Version\"\n      - $ref: \"#/components/parameters/Signature\"\n    post:\n      x-aws-operation-name: ListDomains\n      operationId: POST ListDomains\n      description: ' The <code>ListDomains</code> operation lists all domains associated\n        with the Access Key ID. It returns domain names up to the limit set by\n        <a href=\"#MaxNumberOfDomains\">MaxNumberOfDomains</a>. A <a\n        href=\"#NextToken\">NextToken</a> is returned if there are more than\n        <code>MaxNumberOfDomains</code> domains. Calling\n        <code>ListDomains</code> successive times with the\n        <code>NextToken</code> provided by the operation returns up to\n        <code>MaxNumberOfDomains</code> more domain names with each successive\n        operation call. '\n      responses:\n        \"200\":\n          description: Success\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/ListDomainsResult\"\n        \"400\":\n          description: InvalidNextToken\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/InvalidNextToken\"\n      parameters:\n        - name: Action\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - ListDomains\n        - name: Version\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - 2009-04-15\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                MaxNumberOfDomains:\n                  description: The maximum number of domain names you want returned. The\n                    range is 1 to 100. The default setting is 100.\n                  type: integer\n                NextToken:\n                  description: A string informing Amazon SimpleDB where to start the next\n                    list of domain names.\n                  type: string\n  /#Action=PutAttributes:\n    get:\n      x-aws-operation-name: PutAttributes\n      operationId: GET PutAttributes\n      description: \"<p> The PutAttributes operation creates or replaces attributes in an\n        item. The client may specify new attributes using a combination of the\n        <code>Attribute.X.Name</code> and <code>Attribute.X.Value</code>\n        parameters. The client specifies the first attribute by the parameters\n        <code>Attribute.0.Name</code> and <code>Attribute.0.Value</code>, the\n        second attribute by the parameters <code>Attribute.1.Name</code> and\n        <code>Attribute.1.Value</code>, and so on. </p> <p> Attributes are\n        uniquely identified in an item by their name/value combination. For\n        example, a single item can have the attributes <code>{ \\\"first_name\\\",\n        \\\"first_value\\\" }</code> and <code>{ \\\"first_name\\\", second_value\\\"\n        }</code>. However, it cannot have two attribute instances where both the\n        <code>Attribute.X.Name</code> and <code>Attribute.X.Value</code> are the\n        same. </p> <p> Optionally, the requestor can supply the\n        <code>Replace</code> parameter for each individual attribute. Setting\n        this value to <code>true</code> causes the new attribute value to\n        replace the existing attribute value(s). For example, if an item has the\n        attributes <code>{ 'a', '1' }</code>, <code>{ 'b', '2'}</code> and\n        <code>{ 'b', '3' }</code> and the requestor calls\n        <code>PutAttributes</code> using the attributes <code>{ 'b', '4'\n        }</code> with the <code>Replace</code> parameter set to true, the final\n        attributes of the item are changed to <code>{ 'a', '1' }</code> and\n        <code>{ 'b', '4' }</code>, which replaces the previous values of the 'b'\n        attribute with the new value. </p> <note> Using\n        <code>PutAttributes</code> to replace attribute values that do not exist\n        will not result in an error response. </note> <p> You cannot specify an\n        empty string as an attribute name. </p> <p> Because Amazon SimpleDB\n        makes multiple copies of client data and uses an eventual consistency\n        update model, an immediate <a>GetAttributes</a> or <a>Select</a>\n        operation (read) immediately after a <a>PutAttributes</a> or\n        <a>DeleteAttributes</a> operation (write) might not return the updated\n        data. </p> <p> The following limitations are enforced for this\n        operation: <ul> <li>256 total attribute name-value pairs per item</li>\n        <li>One billion attributes per domain</li> <li>10 GB of total user data\n        storage per domain</li> </ul> </p>\"\n      responses:\n        \"200\":\n          description: Success\n        \"400\":\n          description: NoSuchDomain\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/NoSuchDomain\"\n        \"404\":\n          description: AttributeDoesNotExist\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/AttributeDoesNotExist\"\n        \"409\":\n          description: NumberItemAttributesExceeded\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/NumberItemAttributesExceeded\"\n      parameters:\n        - name: DomainName\n          in: query\n          required: true\n          description: The name of the domain in which to perform the operation.\n          schema:\n            type: string\n        - name: ItemName\n          in: query\n          required: true\n          description: The name of the item.\n          schema:\n            type: string\n        - name: Attributes\n          in: query\n          required: true\n          description: The list of attributes.\n          schema:\n            type: array\n            items:\n              type: string\n        - name: Expected.Name\n          in: query\n          description: >-2\n             Specifies the conditions under which data should be updated. If an update condition is specified for a request, the data will only be updated if the condition is satisfied. For example, if an attribute with a specific name and value exists, or if a specific attribute doesn't exist. \n            The name of the attribute involved in the condition.\n          schema:\n            type: string\n        - name: Expected.Value\n          in: query\n          description: >-2\n             Specifies the conditions under which data should be updated. If an update condition is specified for a request, the data will only be updated if the condition is satisfied. For example, if an attribute with a specific name and value exists, or if a specific attribute doesn't exist. \n            The value of an attribute. This value can only be specified when the <code>Exists</code> parameter is equal to <code>true</code>.\n          schema:\n            type: string\n        - name: Expected.Exists\n          in: query\n          description: >-2\n             Specifies the conditions under which data should be updated. If an update condition is specified for a request, the data will only be updated if the condition is satisfied. For example, if an attribute with a specific name and value exists, or if a specific attribute doesn't exist. \n            A value specifying whether or not the specified attribute must exist with the specified value in order for the update condition to be satisfied. Specify <code>true</code> if the attribute must exist for the update condition to be satisfied. Specify <code>false</code> if the attribute should not exist in order for the update condition to be satisfied.\n          schema:\n            type: string\n        - name: Action\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - PutAttributes\n        - name: Version\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - 2009-04-15\n    parameters:\n      - $ref: \"#/components/parameters/AWSAccessKeyId\"\n      - $ref: \"#/components/parameters/Action\"\n      - $ref: \"#/components/parameters/SignatureMethod\"\n      - $ref: \"#/components/parameters/SignatureVersion\"\n      - $ref: \"#/components/parameters/Timestamp\"\n      - $ref: \"#/components/parameters/Version\"\n      - $ref: \"#/components/parameters/Signature\"\n    post:\n      x-aws-operation-name: PutAttributes\n      operationId: POST PutAttributes\n      description: \"<p> The PutAttributes operation creates or replaces attributes in an\n        item. The client may specify new attributes using a combination of the\n        <code>Attribute.X.Name</code> and <code>Attribute.X.Value</code>\n        parameters. The client specifies the first attribute by the parameters\n        <code>Attribute.0.Name</code> and <code>Attribute.0.Value</code>, the\n        second attribute by the parameters <code>Attribute.1.Name</code> and\n        <code>Attribute.1.Value</code>, and so on. </p> <p> Attributes are\n        uniquely identified in an item by their name/value combination. For\n        example, a single item can have the attributes <code>{ \\\"first_name\\\",\n        \\\"first_value\\\" }</code> and <code>{ \\\"first_name\\\", second_value\\\"\n        }</code>. However, it cannot have two attribute instances where both the\n        <code>Attribute.X.Name</code> and <code>Attribute.X.Value</code> are the\n        same. </p> <p> Optionally, the requestor can supply the\n        <code>Replace</code> parameter for each individual attribute. Setting\n        this value to <code>true</code> causes the new attribute value to\n        replace the existing attribute value(s). For example, if an item has the\n        attributes <code>{ 'a', '1' }</code>, <code>{ 'b', '2'}</code> and\n        <code>{ 'b', '3' }</code> and the requestor calls\n        <code>PutAttributes</code> using the attributes <code>{ 'b', '4'\n        }</code> with the <code>Replace</code> parameter set to true, the final\n        attributes of the item are changed to <code>{ 'a', '1' }</code> and\n        <code>{ 'b', '4' }</code>, which replaces the previous values of the 'b'\n        attribute with the new value. </p> <note> Using\n        <code>PutAttributes</code> to replace attribute values that do not exist\n        will not result in an error response. </note> <p> You cannot specify an\n        empty string as an attribute name. </p> <p> Because Amazon SimpleDB\n        makes multiple copies of client data and uses an eventual consistency\n        update model, an immediate <a>GetAttributes</a> or <a>Select</a>\n        operation (read) immediately after a <a>PutAttributes</a> or\n        <a>DeleteAttributes</a> operation (write) might not return the updated\n        data. </p> <p> The following limitations are enforced for this\n        operation: <ul> <li>256 total attribute name-value pairs per item</li>\n        <li>One billion attributes per domain</li> <li>10 GB of total user data\n        storage per domain</li> </ul> </p>\"\n      responses:\n        \"200\":\n          description: Success\n        \"400\":\n          description: NoSuchDomain\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/NoSuchDomain\"\n        \"404\":\n          description: AttributeDoesNotExist\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/AttributeDoesNotExist\"\n        \"409\":\n          description: NumberItemAttributesExceeded\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/NumberItemAttributesExceeded\"\n      parameters:\n        - name: Action\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - PutAttributes\n        - name: Version\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - 2009-04-15\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                DomainName:\n                  description: The name of the domain in which to perform the operation.\n                  type: string\n                ItemName:\n                  description: The name of the item.\n                  type: string\n                Attributes:\n                  description: The list of attributes.\n                  type: array\n                  items:\n                    type: string\n                Expected.Name:\n                  description: >-2\n                     Specifies the conditions under which data should be updated. If an update condition is specified for a request, the data will only be updated if the condition is satisfied. For example, if an attribute with a specific name and value exists, or if a specific attribute doesn't exist. \n                    The name of the attribute involved in the condition.\n                  type: string\n                Expected.Value:\n                  description: >-2\n                     Specifies the conditions under which data should be updated. If an update condition is specified for a request, the data will only be updated if the condition is satisfied. For example, if an attribute with a specific name and value exists, or if a specific attribute doesn't exist. \n                    The value of an attribute. This value can only be specified when the <code>Exists</code> parameter is equal to <code>true</code>.\n                  type: string\n                Expected.Exists:\n                  description: >-2\n                     Specifies the conditions under which data should be updated. If an update condition is specified for a request, the data will only be updated if the condition is satisfied. For example, if an attribute with a specific name and value exists, or if a specific attribute doesn't exist. \n                    A value specifying whether or not the specified attribute must exist with the specified value in order for the update condition to be satisfied. Specify <code>true</code> if the attribute must exist for the update condition to be satisfied. Specify <code>false</code> if the attribute should not exist in order for the update condition to be satisfied.\n                  type: string\n              required:\n                - DomainName\n                - ItemName\n                - Attributes\n  /#Action=Select:\n    get:\n      x-aws-operation-name: Select\n      operationId: GET Select\n      description: <p> The <code>Select</code> operation returns a set of attributes for\n        <code>ItemNames</code> that match the select expression.\n        <code>Select</code> is similar to the standard SQL SELECT statement.\n        </p> <p> The total size of the response cannot exceed 1 MB in total\n        size. Amazon SimpleDB automatically adjusts the number of items returned\n        per page to enforce this limit. For example, if the client asks to\n        retrieve 2500 items, but each individual item is 10 kB in size, the\n        system returns 100 items and an appropriate <code>NextToken</code> so\n        the client can access the next page of results. </p> <p> For information\n        on how to construct select expressions, see Using Select to Create\n        Amazon SimpleDB Queries in the Developer Guide. </p>\n      responses:\n        \"200\":\n          description: Success\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/SelectResult\"\n        \"400\":\n          description: TooManyRequestedAttributes\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/TooManyRequestedAttributes\"\n        \"408\":\n          description: RequestTimeout\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/RequestTimeout\"\n      parameters:\n        - name: SelectExpression\n          in: query\n          required: true\n          description: The expression used to query the domain.\n          schema:\n            type: string\n        - name: NextToken\n          in: query\n          required: false\n          description: A string informing Amazon SimpleDB where to start the next list of\n            <code>ItemNames</code>.\n          schema:\n            type: string\n        - name: ConsistentRead\n          in: query\n          required: false\n          description: Determines whether or not strong consistency should be enforced when\n            data is read from SimpleDB. If <code>true</code>, any data\n            previously written to SimpleDB will be returned. Otherwise, results\n            will be consistent eventually, and the client may not see data that\n            was written immediately before your read.\n          schema:\n            type: boolean\n        - name: Action\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - Select\n        - name: Version\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - 2009-04-15\n    parameters:\n      - $ref: \"#/components/parameters/AWSAccessKeyId\"\n      - $ref: \"#/components/parameters/Action\"\n      - $ref: \"#/components/parameters/SignatureMethod\"\n      - $ref: \"#/components/parameters/SignatureVersion\"\n      - $ref: \"#/components/parameters/Timestamp\"\n      - $ref: \"#/components/parameters/Version\"\n      - $ref: \"#/components/parameters/Signature\"\n    post:\n      x-aws-operation-name: Select\n      operationId: POST Select\n      description: <p> The <code>Select</code> operation returns a set of attributes for\n        <code>ItemNames</code> that match the select expression.\n        <code>Select</code> is similar to the standard SQL SELECT statement.\n        </p> <p> The total size of the response cannot exceed 1 MB in total\n        size. Amazon SimpleDB automatically adjusts the number of items returned\n        per page to enforce this limit. For example, if the client asks to\n        retrieve 2500 items, but each individual item is 10 kB in size, the\n        system returns 100 items and an appropriate <code>NextToken</code> so\n        the client can access the next page of results. </p> <p> For information\n        on how to construct select expressions, see Using Select to Create\n        Amazon SimpleDB Queries in the Developer Guide. </p>\n      responses:\n        \"200\":\n          description: Success\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/SelectResult\"\n        \"400\":\n          description: TooManyRequestedAttributes\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/TooManyRequestedAttributes\"\n        \"408\":\n          description: RequestTimeout\n          x-aws-exception: true\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/RequestTimeout\"\n      parameters:\n        - name: Action\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - Select\n        - name: Version\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - 2009-04-15\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                SelectExpression:\n                  description: The expression used to query the domain.\n                  type: string\n                NextToken:\n                  description: A string informing Amazon SimpleDB where to start the next\n                    list of <code>ItemNames</code>.\n                  type: string\n                ConsistentRead:\n                  description: Determines whether or not strong consistency should be\n                    enforced when data is read from SimpleDB. If\n                    <code>true</code>, any data previously written to SimpleDB\n                    will be returned. Otherwise, results will be consistent\n                    eventually, and the client may not see data that was written\n                    immediately before your read.\n                  type: boolean\n              required:\n                - SelectExpression\nservers:\n  - url: http://sdb.amazonaws.com\n    variables: {}\n    description: The general Amazon SimpleDB endpoint for US East (N. Virginia)\n  - url: https://sdb.amazonaws.com\n    variables: {}\n    description: The general Amazon SimpleDB endpoint for US East (N. Virginia)\n  - url: http://sdb.{region}.amazonaws.com\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - us-east-2\n          - us-west-1\n          - us-west-2\n          - us-gov-west-1\n          - us-gov-east-1\n          - ca-central-1\n          - eu-north-1\n          - eu-west-1\n          - eu-west-2\n          - eu-west-3\n          - eu-central-1\n          - ap-northeast-1\n          - ap-northeast-2\n          - ap-northeast-3\n          - ap-southeast-1\n          - ap-southeast-2\n          - ap-south-1\n          - sa-east-1\n        default: us-east-2\n    description: The Amazon SimpleDB multi-region endpoint\n  - url: https://sdb.{region}.amazonaws.com\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - us-east-2\n          - us-west-1\n          - us-west-2\n          - us-gov-west-1\n          - us-gov-east-1\n          - ca-central-1\n          - eu-north-1\n          - eu-west-1\n          - eu-west-2\n          - eu-west-3\n          - eu-central-1\n          - ap-northeast-1\n          - ap-northeast-2\n          - ap-northeast-3\n          - ap-southeast-1\n          - ap-southeast-2\n          - ap-south-1\n          - sa-east-1\n        default: us-east-2\n    description: The Amazon SimpleDB multi-region endpoint\n  - url: http://sdb.{region}.amazonaws.com.cn\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - cn-north-1\n          - cn-northwest-1\n        default: cn-north-1\n    description: The Amazon SimpleDB endpoint for China (Beijing) and China (Ningxia)\n  - url: https://sdb.{region}.amazonaws.com.cn\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - cn-north-1\n          - cn-northwest-1\n        default: cn-north-1\n    description: The Amazon SimpleDB endpoint for China (Beijing) and China (Ningxia)\ncomponents:\n  parameters:\n    AWSAccessKeyId:\n      name: AWSAccessKeyId\n      in: query\n      required: true\n      schema:\n        type: string\n    Action:\n      name: Action\n      in: query\n      required: true\n      schema:\n        type: string\n    SignatureMethod:\n      name: SignatureMethod\n      in: query\n      required: true\n      schema:\n        type: string\n    SignatureVersion:\n      name: SignatureVersion\n      in: query\n      required: true\n      schema:\n        type: string\n    Timestamp:\n      name: Timestamp\n      in: query\n      required: true\n      schema:\n        type: string\n    Version:\n      name: Version\n      in: query\n      required: true\n      schema:\n        type: string\n    Signature:\n      name: Signature\n      in: query\n      required: true\n      schema:\n        type: string\n  securitySchemes:\n    hmac:\n      type: apiKey\n      name: Authorization\n      in: header\n      description: Amazon Signature authorization v2\n      x-amazon-apigateway-authtype: awsSigv2\n  schemas:\n    DeletableItem:\n      type: object\n      required:\n        - Name\n      properties:\n        Name:\n          $ref: \"#/components/schemas/String\"\n        Attributes:\n          $ref: \"#/components/schemas/DeletableAttributeList\"\n    ReplaceableItem:\n      type: object\n      required:\n        - Name\n        - Attributes\n      properties:\n        Name:\n          $ref: \"#/components/schemas/String\"\n        Attributes:\n          $ref: \"#/components/schemas/ReplaceableAttributeList\"\n      description: \"\"\n    DuplicateItemName:\n      type: object\n      properties:\n        BoxUsage:\n          $ref: \"#/components/schemas/Float\"\n      description: \"The item name was specified more than once. \"\n    InvalidParameterValue:\n      type: object\n      properties:\n        BoxUsage:\n          $ref: \"#/components/schemas/Float\"\n      description: The value for a parameter is invalid.\n    MissingParameter:\n      type: object\n      properties:\n        BoxUsage:\n          $ref: \"#/components/schemas/Float\"\n      description: The request must contain the specified missing parameter.\n    NoSuchDomain:\n      type: object\n      properties:\n        BoxUsage:\n          $ref: \"#/components/schemas/Float\"\n      description: The specified domain does not exist.\n    NumberItemAttributesExceeded:\n      type: object\n      properties:\n        BoxUsage:\n          $ref: \"#/components/schemas/Float\"\n      description: Too many attributes in this item.\n    NumberDomainAttributesExceeded:\n      type: object\n      properties:\n        BoxUsage:\n          $ref: \"#/components/schemas/Float\"\n      description: Too many attributes in this domain.\n    NumberDomainBytesExceeded:\n      type: object\n      properties:\n        BoxUsage:\n          $ref: \"#/components/schemas/Float\"\n      description: Too many bytes in this domain.\n    NumberSubmittedItemsExceeded:\n      type: object\n      properties:\n        BoxUsage:\n          $ref: \"#/components/schemas/Float\"\n      description: Too many items exist in a single call.\n    NumberSubmittedAttributesExceeded:\n      type: object\n      properties:\n        BoxUsage:\n          $ref: \"#/components/schemas/Float\"\n      description: Too many attributes exist in a single call.\n    NumberDomainsExceeded:\n      type: object\n      properties:\n        BoxUsage:\n          $ref: \"#/components/schemas/Float\"\n      description: Too many domains exist per this account.\n    DeletableAttribute:\n      type: object\n      required:\n        - Name\n      properties:\n        Name:\n          $ref: \"#/components/schemas/String\"\n        Value:\n          $ref: \"#/components/schemas/String\"\n      description: \"\"\n    String:\n      type: string\n    Boolean:\n      type: boolean\n    AttributeDoesNotExist:\n      type: object\n      properties:\n        BoxUsage:\n          $ref: \"#/components/schemas/Float\"\n      description: The specified attribute does not exist.\n    DomainMetadataResult:\n      type: object\n      properties:\n        ItemCount:\n          $ref: \"#/components/schemas/Integer\"\n        ItemNamesSizeBytes:\n          $ref: \"#/components/schemas/Long\"\n        AttributeNameCount:\n          $ref: \"#/components/schemas/Integer\"\n        AttributeNamesSizeBytes:\n          $ref: \"#/components/schemas/Long\"\n        AttributeValueCount:\n          $ref: \"#/components/schemas/Integer\"\n        AttributeValuesSizeBytes:\n          $ref: \"#/components/schemas/Long\"\n        Timestamp:\n          $ref: \"#/components/schemas/Integer\"\n    GetAttributesResult:\n      type: object\n      properties:\n        Attributes:\n          $ref: \"#/components/schemas/AttributeList\"\n    ListDomainsResult:\n      type: object\n      properties:\n        DomainNames:\n          $ref: \"#/components/schemas/DomainNameList\"\n        NextToken:\n          $ref: \"#/components/schemas/String\"\n    InvalidNextToken:\n      type: object\n      properties:\n        BoxUsage:\n          $ref: \"#/components/schemas/Float\"\n      description: \"The specified NextToken is not valid. \"\n    ReplaceableAttribute:\n      type: object\n      required:\n        - Name\n        - Value\n      properties:\n        Name:\n          $ref: \"#/components/schemas/String\"\n        Value:\n          $ref: \"#/components/schemas/String\"\n        Replace:\n          $ref: \"#/components/schemas/Boolean\"\n      description: \"\"\n    SelectResult:\n      type: object\n      properties:\n        Items:\n          $ref: \"#/components/schemas/ItemList\"\n        NextToken:\n          $ref: \"#/components/schemas/String\"\n    InvalidNumberPredicates:\n      type: object\n      properties:\n        BoxUsage:\n          $ref: \"#/components/schemas/Float\"\n      description: Too many predicates exist in the query expression.\n    InvalidNumberValueTests:\n      type: object\n      properties:\n        BoxUsage:\n          $ref: \"#/components/schemas/Float\"\n      description: Too many predicates exist in the query expression.\n    InvalidQueryExpression:\n      type: object\n      properties:\n        BoxUsage:\n          $ref: \"#/components/schemas/Float\"\n      description: The specified query expression syntax is not valid.\n    RequestTimeout:\n      type: object\n      properties:\n        BoxUsage:\n          $ref: \"#/components/schemas/Float\"\n      description: A timeout occurred when attempting to query the specified domain with\n        specified query expression.\n    TooManyRequestedAttributes:\n      type: object\n      properties:\n        BoxUsage:\n          $ref: \"#/components/schemas/Float\"\n      description: Too many attributes requested.\n    Attribute:\n      type: object\n      required:\n        - Name\n        - Value\n      properties:\n        Name:\n          $ref: \"#/components/schemas/String\"\n        AlternateNameEncoding:\n          $ref: \"#/components/schemas/String\"\n        Value:\n          $ref: \"#/components/schemas/String\"\n        AlternateValueEncoding:\n          $ref: \"#/components/schemas/String\"\n      description: \"\"\n    Float:\n      type: number\n      format: float\n    AttributeList:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Attribute\"\n      xml:\n        wrapped: false\n    AttributeNameList:\n      type: array\n      items:\n        $ref: \"#/components/schemas/String\"\n      xml:\n        wrapped: false\n    DeletableItemList:\n      type: array\n      items:\n        $ref: \"#/components/schemas/DeletableItem\"\n      xml:\n        wrapped: false\n    BatchDeleteAttributesRequest:\n      type: object\n      required:\n        - DomainName\n        - Items\n      properties:\n        DomainName:\n          $ref: \"#/components/schemas/String\"\n        Items:\n          $ref: \"#/components/schemas/DeletableItemList\"\n    ReplaceableItemList:\n      type: array\n      items:\n        $ref: \"#/components/schemas/ReplaceableItem\"\n      xml:\n        wrapped: false\n    BatchPutAttributesRequest:\n      type: object\n      required:\n        - DomainName\n        - Items\n      properties:\n        DomainName:\n          $ref: \"#/components/schemas/String\"\n        Items:\n          $ref: \"#/components/schemas/ReplaceableItemList\"\n    CreateDomainRequest:\n      type: object\n      required:\n        - DomainName\n      properties:\n        DomainName:\n          $ref: \"#/components/schemas/String\"\n    DeletableAttributeList:\n      type: array\n      items:\n        $ref: \"#/components/schemas/DeletableAttribute\"\n      xml:\n        wrapped: false\n    UpdateCondition:\n      type: object\n      properties:\n        Name:\n          $ref: \"#/components/schemas/String\"\n        Value:\n          $ref: \"#/components/schemas/String\"\n        Exists:\n          $ref: \"#/components/schemas/Boolean\"\n      description: \" Specifies the conditions under which data should be updated. If an\n        update condition is specified for a request, the data will only be\n        updated if the condition is satisfied. For example, if an attribute with\n        a specific name and value exists, or if a specific attribute doesn't\n        exist. \"\n    DeleteAttributesRequest:\n      type: object\n      required:\n        - DomainName\n        - ItemName\n      properties:\n        DomainName:\n          $ref: \"#/components/schemas/String\"\n        ItemName:\n          $ref: \"#/components/schemas/String\"\n        Attributes:\n          $ref: \"#/components/schemas/DeletableAttributeList\"\n        Expected:\n          $ref: \"#/components/schemas/UpdateCondition\"\n    DeleteDomainRequest:\n      type: object\n      required:\n        - DomainName\n      properties:\n        DomainName:\n          $ref: \"#/components/schemas/String\"\n    DomainMetadataRequest:\n      type: object\n      required:\n        - DomainName\n      properties:\n        DomainName:\n          $ref: \"#/components/schemas/String\"\n    Integer:\n      type: integer\n    Long:\n      type: integer\n    DomainNameList:\n      type: array\n      items:\n        $ref: \"#/components/schemas/String\"\n      xml:\n        wrapped: false\n    GetAttributesRequest:\n      type: object\n      required:\n        - DomainName\n        - ItemName\n      properties:\n        DomainName:\n          $ref: \"#/components/schemas/String\"\n        ItemName:\n          $ref: \"#/components/schemas/String\"\n        AttributeNames:\n          $ref: \"#/components/schemas/AttributeNameList\"\n        ConsistentRead:\n          $ref: \"#/components/schemas/Boolean\"\n    Item:\n      type: object\n      required:\n        - Name\n        - Attributes\n      properties:\n        Name:\n          $ref: \"#/components/schemas/String\"\n        AlternateNameEncoding:\n          $ref: \"#/components/schemas/String\"\n        Attributes:\n          $ref: \"#/components/schemas/AttributeList\"\n      description: \"\"\n    ItemList:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Item\"\n      xml:\n        wrapped: false\n    ListDomainsRequest:\n      type: object\n      properties:\n        MaxNumberOfDomains:\n          $ref: \"#/components/schemas/Integer\"\n        NextToken:\n          $ref: \"#/components/schemas/String\"\n    ReplaceableAttributeList:\n      type: array\n      items:\n        $ref: \"#/components/schemas/ReplaceableAttribute\"\n      xml:\n        wrapped: false\n    PutAttributesRequest:\n      type: object\n      required:\n        - DomainName\n        - ItemName\n        - Attributes\n      properties:\n        DomainName:\n          $ref: \"#/components/schemas/String\"\n        ItemName:\n          $ref: \"#/components/schemas/String\"\n        Attributes:\n          $ref: \"#/components/schemas/ReplaceableAttributeList\"\n        Expected:\n          $ref: \"#/components/schemas/UpdateCondition\"\n    SelectRequest:\n      type: object\n      required:\n        - SelectExpression\n      properties:\n        SelectExpression:\n          $ref: \"#/components/schemas/String\"\n        NextToken:\n          $ref: \"#/components/schemas/String\"\n        ConsistentRead:\n          $ref: \"#/components/schemas/Boolean\"\n",
			"canonicalURL": "/github.com/restful-ma/thresholds@5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/-/blob/benchmark-repository/openapi/amazonaws.com-sdb-2009-04-15-swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/restful-ma/thresholds/blob/5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/benchmark-repository/openapi/amazonaws.com-sdb-2009-04-15-swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/#Action=BatchDeleteAttributes\": at 1:11957: get: operation \"GET BatchDeleteAttributes\": at 1:11964: parse path \"/#Action=BatchDeleteAttributes\": path MUST NOT contain a fragment"
}