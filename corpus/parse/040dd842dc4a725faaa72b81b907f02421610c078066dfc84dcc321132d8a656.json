{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/mainflux/mainflux"
		},
		"file": {
			"name": "things.yml",
			"size": 0,
			"path": "api/openapi/things.yml",
			"byteSize": 33818,
			"content": "openapi: 3.0.1\ninfo:\n  title: Mainflux things service\n  description: HTTP API for managing platform things and channels.\n  version: \"1.0.0\"\n\npaths:\n  /things:\n    post:\n      summary: Adds new thing\n      description: |\n        Adds new thing to the list of things owned by user identified using\n        the provided access token.\n      tags:\n        - things\n      requestBody:\n        $ref: \"#/components/requestBodies/ThingCreateReq\"\n      responses:\n        '201':\n          $ref: \"#/components/responses/CreateThingRes\"\n        '400':\n          description: Failed due to malformed JSON.\n        '401':\n          description: Missing or invalid access token provided.\n        '409':\n          description: Entity already exist.\n        '415':\n          description: Missing or invalid content type.\n        '422':\n          description: Database can't process request.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n    get:\n      summary: Retrieves things\n      description: |\n        Retrieves a list of things. Due to performance concerns, data\n        is retrieved in subsets. The API things must ensure that the entire\n        dataset is consumed either by making subsequent requests, or by\n        increasing the subset size of the initial request.\n      tags:\n        - things\n      parameters:\n        - $ref: \"#/components/parameters/Limit\"\n        - $ref: \"#/components/parameters/Offset\"\n        - $ref: \"#/components/parameters/Name\"\n        - $ref: \"#/components/parameters/Order\"\n        - $ref: \"#/components/parameters/Direction\"\n        - $ref: \"#/components/parameters/Metadata\"\n      responses:\n        '200':\n          $ref: \"#/components/responses/ThingsPageRes\"\n        '400':\n          description: Failed due to malformed query parameters.\n        '401':\n          description: Missing or invalid access token provided.\n        '404':\n          description: A non-existent entity request.\n        '422':\n          description: Database can't process request.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n  /things/search:\n    post:\n      summary: Search and retrieves things\n      description: |\n        Retrieves a list of things with name and metadata filtering.\n        Due to performance concerns, data is retrieved in subsets.\n        The API things must ensure that the entire\n        dataset is consumed either by making subsequent requests, or by\n        increasing the subset size of the initial request.\n      tags:\n        - things\n      requestBody:\n        $ref: \"#/components/requestBodies/ThingsSearchReq\"\n      responses:\n        '200':\n          $ref: \"#/components/responses/ThingsPageRes\"\n        '400':\n          description: Failed due to malformed query parameters.\n        '401':\n          description: Missing or invalid access token provided.\n        '404':\n          description: A non-existent entity request.\n        '422':\n          description: Unprocessable Entity\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n  /things/bulk:\n    post:\n      summary: Bulk provisions new things\n      description: |\n        Adds new things to the list of things owned by user identified using\n        the provided access token.\n      tags:\n        - things\n      requestBody:\n        $ref: \"#/components/requestBodies/ThingsCreateReq\"\n      responses:\n        '201':\n          description: Things registered.\n        '400':\n          description: Failed due to malformed JSON.\n        '401':\n          description: Missing or invalid access token provided.\n        '415':\n          description: Missing or invalid content type.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n  /things/{thingId}:\n    get:\n      summary: Retrieves thing info\n      tags:\n        - things\n      parameters:\n        - $ref: \"#/components/parameters/ThingId\"\n      responses:\n        '200':\n          $ref: \"#/components/responses/ThingRes\"\n        '401':\n          description: Missing or invalid access token provided.\n        '404':\n          description: Thing does not exist.\n        '422':\n          description: Database can't process request.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n    put:\n      summary: Updates thing info\n      description: |\n        Update is performed by replacing the current resource data with values\n        provided in a request payload. Note that the thing's type and ID\n        cannot be changed.\n      tags:\n        - things\n      parameters:\n        - $ref: \"#/components/parameters/ThingId\"\n      requestBody:\n        $ref: \"#/components/requestBodies/ThingUpdateReq\"\n      responses:\n        '200':\n          description: Thing updated.\n        '400':\n          description: Failed due to malformed JSON.\n        '401':\n          description: Missing or invalid access token provided.\n        '404':\n          description: Thing does not exist.\n        '415':\n          description: Missing or invalid content type.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n    delete:\n      summary: Removes a thing\n      description: |\n        Removes a thing. The service will ensure that the removed thing is\n        disconnected from all of the existing channels.\n      tags:\n        - things\n      parameters:\n        - $ref: \"#/components/parameters/ThingId\"\n      responses:\n        '204':\n          description: Thing removed.\n        '400':\n          description: Failed due to malformed thing's ID.\n        '401':\n          description: Missing or invalid access token provided.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n  /things/{thingId}/share:\n    post:\n      summary: Shares a thing with user identified by request body.\n      description: |\n        Adds 'read', 'write' or 'delete' policies to the user identified by the request body.\n        Sharing a particular thing is only allowed to users who have 'write' access to that thing.\n      tags:\n        - things\n      parameters:\n        - $ref: \"#/components/parameters/ThingId\"\n      requestBody:\n        $ref: \"#/components/requestBodies/ShareThingReq\"\n      responses:\n        '200':\n          description: Policies shared.\n        '400':\n          description: Failed due to malformed JSON.\n        '401':\n          description: Missing or invalid access token provided.\n        '403':\n          description: Lack of policies in order to share the thing.\n        '415':\n          description: Missing or invalid content type.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n  /things/{thingId}/key:\n    patch:\n      summary: Updates thing key\n      description: |\n        Update is performed by replacing current key with a new one.\n      tags:\n        - things\n      parameters:\n        - $ref: \"#/components/parameters/ThingId\"\n      requestBody:\n        $ref: \"#/components/requestBodies/KeyUpdateReq\"\n      responses:\n        '200':\n          description: Thing key updated.\n        '400':\n          description: Failed due to malformed JSON.\n        '401':\n          description: Missing or invalid access token provided.\n        '404':\n          description: Thing does not exist.\n        '409':\n          description: Specified key already exists.\n        '415':\n          description: Missing or invalid content type.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n  /channels:\n    post:\n      summary: Creates new channel\n      description: |\n        Creates new channel. User identified by the provided access token will\n        be the channel's owner.\n      tags:\n        - channels\n      requestBody:\n        $ref: \"#/components/requestBodies/ChannelCreateReq\"\n      responses:\n        '201':\n          $ref: \"#/components/responses/ChannelCreateRes\"\n        '400':\n          description: Failed due to malformed JSON.\n        '401':\n          description: Missing or invalid access token provided.\n        '409':\n          description: Entity already exist.\n        '415':\n          description: Missing or invalid content type.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n    get:\n      summary: Retrieves channels\n      description: |\n        Retrieves a list of channels. Due to performance concerns, data\n        is retrieved in subsets. The API things must ensure that the entire\n        dataset is consumed either by making subsequent requests, or by\n        increasing the subset size of the initial request.\n      tags:\n        - channels\n      parameters:\n        - $ref: \"#/components/parameters/Limit\"\n        - $ref: \"#/components/parameters/Offset\"\n        - $ref: \"#/components/parameters/Name\"\n        - $ref: \"#/components/parameters/Order\"\n        - $ref: \"#/components/parameters/Direction\"\n        - $ref: \"#/components/parameters/Metadata\"\n      responses:\n        '200':\n          $ref: \"#/components/responses/ChannelsPageRes\"\n        '400':\n          description: Failed due to malformed query parameters.\n        '401':\n          description: Missing or invalid access token provided.\n        '422':\n          description: Database can't process request.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n  /channels/bulk:\n    post:\n      summary: Bulk provisions new channels\n      description: |\n        Adds new channels to the list of channels owned by user identified using\n        the provided access token.\n      tags:\n        - channels\n      requestBody:\n        $ref: \"#/components/requestBodies/ChannelsCreateReq\"\n      responses:\n        '201':\n          description: Channels registered.\n        '400':\n          description: Failed due to malformed JSON.\n        '401':\n          description: Missing or invalid access token provided.\n        '409':\n          description: Entity already exist.\n        '415':\n          description: Missing or invalid content type.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n  /channels/{chanId}:\n    get:\n      summary: Retrieves channel info\n      tags:\n        - channels\n      parameters:\n        - $ref: \"#/components/parameters/ChanId\"\n      responses:\n        '200':\n          $ref: \"#/components/responses/ChannelRes\"\n        '400':\n          description: Failed due to malformed channel's ID.\n        '401':\n          description: Missing or invalid access token provided.\n        '404':\n          description: Channel does not exist.\n        '422':\n          description: Database can't process request.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n    put:\n      summary: Updates channel info\n      description: |\n        Update is performed by replacing the current resource data with values\n        provided in a request payload. Note that the channel's ID will not be\n        affected.\n      tags:\n        - channels\n      parameters:\n        - $ref: \"#/components/parameters/ChanId\"\n      requestBody:\n        $ref: \"#/components/requestBodies/ChannelCreateReq\"\n      responses:\n        '200':\n          description: Channel updated.\n        '400':\n          description: Failed due to malformed JSON.\n        '401':\n          description: Missing or invalid access token provided.\n        '404':\n          description: Channel does not exist.\n        '415':\n          description: Missing or invalid content type.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n    delete:\n      summary: Removes a channel\n      description: |\n        Removes a channel. The service will ensure that the subscribed apps and\n        things are unsubscribed from the removed channel.\n      tags:\n        - channels\n      parameters:\n        - $ref: \"#/components/parameters/ChanId\"\n      responses:\n        '204':\n          description: Channel removed.\n        '400':\n          description: Failed due to malformed channel's ID.\n        '401':\n          description: Missing or invalid access token provided.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n  /connect:\n    post:\n      summary: Connects thing and channel.\n      description: |\n        Connect things specified by IDs to channels specified by IDs.\n        Channel and thing are owned by user identified using the provided access token.\n      tags:\n        - things\n      requestBody:\n        $ref: \"#/components/requestBodies/ConnCreateReq\"\n      responses:\n        '201':\n          $ref: \"#/components/responses/ConnCreateRes\"\n        '400':\n          description: Failed due to malformed JSON.\n        '401':\n          description: Missing or invalid access token provided.\n        '404':\n          description: A non-existent entity request.\n        '409':\n          description: Entity already exist.\n        '415':\n          description: Missing or invalid content type.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n  /disconnect:\n    put:\n      summary: Disconnect things and channels using lists of IDs.\n      description: |\n        Disconnect things from channels specified by lists of IDs.\n        Channels and things are owned by user identified using the provided access token.\n      tags:\n      - things\n      requestBody:\n        $ref: \"#/components/requestBodies/DisconnReq\"\n      responses:\n        '200':\n          $ref: \"#/components/responses/DisconnRes\"\n        '400':\n          description: Failed due to malformed JSON.\n        '401':\n          description: Missing or invalid access token provided.\n        '404':\n          description: A non-existent entity request.\n        '415':\n          description: Missing or invalid content type.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n  /things/{thingId}/channels:\n    get:\n      summary: List of channels connected to specified thing\n      description: |\n        Retrieves list of channels connected to specified thing with pagination\n        metadata.\n      tags:\n        - channels\n      parameters:\n        - $ref: \"#/components/parameters/ThingId\"\n        - $ref: \"#/components/parameters/Offset\"\n        - $ref: \"#/components/parameters/Limit\"\n        - $ref: \"#/components/parameters/Connected\"\n      responses:\n        '200':\n          $ref: \"#/components/responses/ChannelsPageRes\"\n        '400':\n          description: Failed due to malformed query parameters.\n        '401':\n          description: Missing or invalid access token provided.\n        '404':\n          description: Thing does not exist.\n        '422':\n          description: Database can't process request.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n  /channels/{chanId}/things:\n    get:\n      summary: List of things connected to specified channel\n      description: |\n        Retrieves list of things connected to specified channel with pagination\n        metadata.\n      tags:\n        - things\n      parameters:\n        - $ref: \"#/components/parameters/ChanId\"\n        - $ref: \"#/components/parameters/Offset\"\n        - $ref: \"#/components/parameters/Limit\"\n        - $ref: \"#/components/parameters/Connected\"\n      responses:\n        '200':\n          $ref: \"#/components/responses/ThingsPageRes\"\n        '400':\n          description: Failed due to malformed query parameters.\n        '401':\n          description: Missing or invalid access token provided.\n        '404':\n          description: A non-existent entity request.\n        '422':\n          description: Database can't process request.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n  /channels/{chanId}/things/{thingId}:\n    put:\n      summary: Connects the thing to the channel\n      description: |\n        Creates connection between a thing and a channel. Once connected to\n        the channel, things are allowed to exchange messages through it.\n      tags:\n        - channels\n      parameters:\n        - $ref: \"#/components/parameters/ChanId\"\n        - $ref: \"#/components/parameters/ThingId\"\n      responses:\n        '200':\n          description: Thing connected.\n        '400':\n          description: Failed due to malformed query parameters.\n        '401':\n          description: Missing or invalid access token provided.\n        '404':\n          description: Channel or thing does not exist.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n    delete:\n      summary: Disconnects the thing from the channel\n      description: |\n        Removes connection between a thing and a channel. Once connection is\n        removed, thing can no longer exchange messages through the channel.\n      tags:\n        - channels\n      parameters:\n        - $ref: \"#/components/parameters/ChanId\"\n        - $ref: \"#/components/parameters/ThingId\"\n      responses:\n        '204':\n          description: Thing disconnected.\n        '400':\n          description: Failed due to malformed query parameters.\n        '401':\n          description: Missing or invalid access token provided.\n        '404':\n          description: Channel or thing does not exist.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n  /identify/channels/{chanId}/access-by-key:\n    post:\n      summary: Checks if thing has access to a channel.\n      description: |\n        Checks if a thing with a specified key has an access to a specified\n        channel and if it has, it returns that things id.\n      tags:\n        - access\n      parameters:\n        - $ref: \"#/components/parameters/ChanId\"\n      requestBody:\n        $ref: \"#/components/requestBodies/IdentityReq\"\n      responses:\n        '200':\n          $ref: \"#/components/responses/AccessGrantedRes\"\n        '401':\n          description: |\n            Thing and channel are not connected, or thing with specified key doesn't\n            exist.\n        '415':\n          description: Missing or invalid content type.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n  /identify/channels/{chanId}/access-by-id:\n    post:\n      summary: Checks if thing has access to a channel.\n      description: |\n        Checks if a thing with a specified ID has an access to a specified\n        channel.\n      tags:\n        - access\n      parameters:\n        - $ref: \"#/components/parameters/ChanId\"\n      requestBody:\n        $ref: \"#/components/requestBodies/AccessByIDReq\"\n      responses:\n        '200':\n          description: Thing has access to the specified channel.\n        '401':\n          description: |\n            Thing and channel are not connected, or thing with specified ID doesn't\n            exist.\n        '415':\n          description: Missing or invalid content type.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n  /identify:\n    post:\n      summary: Validates thing's key and returns it's ID if key is valid.\n      description: |\n        Validates thing's key and returns it's ID if specified key exists\n        and is valid.\n      tags:\n        - identity\n      requestBody:\n        $ref: \"#/components/requestBodies/IdentityReq\"\n      responses:\n        '200':\n          $ref: \"#/components/responses/IdentityRes\"\n        '401':\n          description: Thing with specified key doesn't exist.\n        '415':\n          description: Missing or invalid content type.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n  /groups/{groupId}:\n    get:\n      summary: Retrieves things\n      description: |\n        Retrieves a list of things that belong to a group. Due to performance concerns, data\n        is retrieved in subsets. The API things must ensure that the entire\n        dataset is consumed either by making subsequent requests, or by\n        increasing the subset size of the initial request.\n      tags:\n        - things\n      parameters:\n        - $ref: \"#/components/parameters/GroupId\"\n        - $ref: \"#/components/parameters/Limit\"\n        - $ref: \"#/components/parameters/Offset\"\n        - $ref: \"#/components/parameters/Order\"\n        - $ref: \"#/components/parameters/Direction\"\n        - $ref: \"#/components/parameters/Metadata\"\n      responses:\n        '200':\n          $ref: \"#/components/responses/ThingsPageRes\"\n        '400':\n          description: Failed due to malformed query parameters.\n        '401':\n          description: Missing or invalid access token provided.\n        '404':\n          description: A non-existent entity request.\n        '422':\n          description: Database can't process request.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n  /health:\n    get:\n      summary: Retrieves service health check info.\n      tags:\n        - health\n      responses:\n        '200':\n          $ref: \"#/components/responses/HealthRes\"\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n\ncomponents:\n  schemas:\n    Key:\n      type: string\n      format: uuid\n      description: |\n        Thing key that is used for thing auth. If there is\n        not one provided service will generate one in UUID\n        format.\n    Identity:\n      type: object\n      properties:\n        id:\n          type: string\n          format: uuid\n          description: Thing unique identifier. This can be either\n            provided by the user or left blank. If the user provides a UUID,\n            it would be validated. If there is not one provided then\n            the service will generate one in UUID format.\n    ThingReqSchema:\n      type: object\n      properties:\n        key:\n          $ref: \"#/components/schemas/Key\"\n        name:\n          type: string\n          description: Free-form thing name.\n        metadata:\n          type: object\n          description: Arbitrary, object-encoded thing's data.\n    ThingsReqSchema:\n      type: object\n      properties:\n        name:\n          type: string\n          description: Name filter. Filtering is performed as a case-insensitive partial match.\n        metadata:\n          type: object\n          description: Metadata filter. Filtering is performed matching the parameter with metadata on top level. Parameter is json.\n        total:\n          type: integer\n          description: Total number of items.\n        offset:\n          type: integer\n          description: Number of items to skip during retrieval.\n          default: 0\n          minimum: 0\n        limit:\n          type: integer\n          description: Size of the subset to retrieve.\n          default: 10\n          maximum: 100\n          minimum: 1\n        order:\n          type: string\n          description: Order type.\n          default: id\n          enum:\n            - name\n            - id\n        dir:\n          type: string\n          description: Order direction.\n          default: desc\n          enum:\n            - asc\n            - desc\n    ThingResSchema:\n      type: object\n      properties:\n        id:\n          type: string\n          format: uuid\n          description: Unique thing identifier generated by the service.\n        name:\n          type: string\n          description: Free-form thing name.\n        key:\n          type: string\n          format: uuid\n          description: Auto-generated access key.\n        metadata:\n          type: object\n          description: Arbitrary, object-encoded thing's data.\n      required:\n        - id\n        - type\n        - key\n    ThingsPage:\n      type: object\n      properties:\n        things:\n          type: array\n          minItems: 0\n          uniqueItems: true\n          items:\n            $ref: \"#/components/schemas/ThingResSchema\"\n        total:\n          type: integer\n          description: Total number of items.\n        offset:\n          type: integer\n          description: Number of items to skip during retrieval.\n        limit:\n          type: integer\n          description: Maximum number of items to return in one page.\n      required:\n        - things\n    ChannelReqSchema:\n      type: object\n      properties:\n        name:\n          type: string\n          description: Free-form channel name.\n        metadata:\n          type: object\n          description: Arbitrary, object-encoded channel's data.\n    ChannelResSchema:\n      type: object\n      properties:\n        id:\n          type: string\n          description: Unique channel identifier generated by the service.\n        name:\n          type: string\n          description: Free-form channel name.\n        metadata:\n          type: object\n          description: Arbitrary, object-encoded channel's data.\n      required:\n        - id\n    ChannelsPage:\n      type: object\n      properties:\n        channels:\n          type: array\n          minItems: 0\n          uniqueItems: true\n          items:\n            $ref: \"#/components/schemas/ChannelResSchema\"\n        total:\n          type: integer\n          description: Total number of items.\n        offset:\n          type: integer\n          description: Number of items to skip during retrieval.\n        limit:\n          type: integer\n          description: Maximum number of items to return in one page.\n      required:\n        - channels\n    ConnectionReqSchema:\n      type: object\n      properties:\n        channel_ids:\n          type: array\n          description: Channel IDs.\n          items:\n            type: string\n        thing_ids:\n          type: array\n          description: Thing IDs\n          items:\n            type: string\n    ShareThingReqSchema:\n      type: object\n      properties:\n        user_id:\n          type: string\n          description: User ID.\n          items:\n            type: string\n        policies:\n          type: array\n          description: Policies\n          items:\n            type: string\n\n  parameters:\n    ChanId:\n      name: chanId\n      description: Unique channel identifier.\n      in: path\n      schema:\n        type: string\n        format: uuid\n      required: true\n    ThingId:\n      name: thingId\n      description: Unique thing identifier.\n      in: path\n      schema:\n        type: string\n        format: uuid\n      required: true\n    GroupId:\n      name: groupId\n      description: Unique group identifier.\n      in: path\n      schema:\n        type: string\n        format: ulid\n      required: true\n    Limit:\n      name: limit\n      description: Size of the subset to retrieve.\n      in: query\n      schema:\n        type: integer\n        default: 10\n        maximum: 100\n        minimum: 1\n      required: false\n    Offset:\n      name: offset\n      description: Number of items to skip during retrieval.\n      in: query\n      schema:\n        type: integer\n        default: 0\n        minimum: 0\n      required: false\n    Connected:\n      name: connected\n      description: Connection state of the subset to retrieve.\n      in: query\n      schema:\n        type: boolean\n        default: true\n      required: false\n    Name:\n      name: name\n      description: Name filter. Filtering is performed as a case-insensitive partial match.\n      in: query\n      schema:\n        type: string\n      required: false\n    Order:\n      name: order\n      description: Order type.\n      in: query\n      schema:\n        type: string\n        default: id\n        enum:\n          - name\n          - id\n      required: false\n    Direction:\n      name: dir\n      description: Order direction.\n      in: query\n      schema:\n        type: string\n        default: desc\n        enum:\n          - asc\n          - desc\n      required: false\n    Metadata:\n      name: metadata\n      description: Metadata filter. Filtering is performed matching the parameter with metadata on top level. Parameter is json.\n      in: query\n      required: false\n      schema:\n        type: object\n        additionalProperties: {}\n\n  requestBodies:\n    ThingCreateReq:\n      description: JSON-formatted document describing the new thing.\n      required: true\n      content:\n        application/json:\n          schema:\n           $ref: \"#/components/schemas/ThingReqSchema\"\n    ThingsCreateReq:\n      description: JSON-formatted document describing the new things.\n      required: true\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              key:\n                $ref: \"#/components/schemas/Key\"\n              things:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ThingReqSchema\"\n    ThingUpdateReq:\n      description: Arbitrary, object-encoded thing's data.\n      required: true\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              name:\n                type: string\n                description: Free-form thing name.\n              metadata:\n                type: object\n    ThingsSearchReq:\n      description: JSON-formatted document describing search parameters.\n      required: true\n      content:\n        application/json:\n          schema:\n           $ref: \"#/components/schemas/ThingsReqSchema\"\n    KeyUpdateReq:\n      required: true\n      description: JSON containing thing.\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              key:\n                type: string\n                format: uuid\n                description: Thing key that is used for thing auth.\n    ChannelCreateReq:\n      description: JSON-formatted document describing the updated channel.\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ChannelReqSchema\"\n    ChannelsCreateReq:\n      description: JSON-formatted document describing the new channels.\n      required: true\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              key:\n                $ref: \"#/components/schemas/Key\"\n              things:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ChannelReqSchema\"\n    ConnCreateReq:\n      description: JSON-formatted document describing the new connection.\n      required: true\n      content:\n        application/json:\n          schema:\n           $ref: \"#/components/schemas/ConnectionReqSchema\"\n    DisconnReq:\n      description: JSON-formatted document describing the entities for disconnection.\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ConnectionReqSchema\"\n    IdentityReq:\n      description: JSON-formatted document that contains thing key.\n      required: true\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              token:\n                type: string\n                format: uuid\n                description: Thing key that is used for thing auth.\n            required:\n              - token\n    AccessByIDReq:\n      description: JSON-formatted document that contains thing key.\n      required: true\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              thing_id:\n                type: string\n                format: uuid\n                description: Thing ID by which thing is uniquely identified.\n    ShareThingReq:\n      description: JSON-formatted document describing sharing things policies.\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ShareThingReqSchema\"\n\n  responses:\n    CreateThingRes:\n      description: Thing registered.\n      headers:\n        Location:\n          content:\n            text/plain:\n              schema:\n                type: string\n                description: Created thing's relative URL.\n                example: /things/{thingId}\n    ThingRes:\n      description: Data retrieved.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ThingResSchema\"\n    ThingsPageRes:\n      description: Data retrieved.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ThingsPage\"\n    ChannelCreateRes:\n      description: Channel created.\n      headers:\n        Location:\n          content:\n            text/plain:\n              schema:\n                type: string\n                description: Created channel's relative URL (i.e. /channels/{chanId}).\n    ChannelRes:\n      description: Data retrieved.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ChannelResSchema\"\n    ChannelsPageRes:\n      description: Data retrieved.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ChannelsPage\"\n    ConnCreateRes:\n      description: Thing registered.\n      headers:\n        Location:\n          content:\n            text/plain:\n              schema:\n                type: string\n                description: Created thing's relative URL.\n                example: /things/{thingId}\n    DisconnRes:\n      description: Things disconnected.\n    AccessGrantedRes:\n      description: |\n        Thing has access to the specified channel and the thing ID is returned.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Identity\"\n    IdentityRes:\n      description: Thing ID returned.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Identity\"\n    ServiceError:\n      description: Unexpected server-side error occurred.\n      content:\n        application/json:\n          schema:\n            type: string\n            format: byte\n    HealthRes:\n      description: Service Health Check.\n      content:\n        application/json:\n          schema:\n            $ref: \"./schemas/HealthInfo.yml\"\n\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n      description: |\n        * Users access: \"Authorization: Bearer \u003cuser_token\u003e\"\n\nsecurity:\n  - bearerAuth: []\n"
		}
	},
	"Error": "parse: parse spec: parse components: responses: \"HealthRes\": content: \"application/json\": schema: parse schema: resolve \"./schemas/HealthInfo.yml\": find schema: external base \"./schemas/HealthInfo.yml\" is not supported"
}