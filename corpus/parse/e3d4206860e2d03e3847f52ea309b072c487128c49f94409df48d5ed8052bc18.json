{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/mautrix/telegram"
		},
		"file": {
			"name": "spec.yaml",
			"size": 0,
			"path": "mautrix_telegram/web/provisioning/spec.yaml",
			"byteSize": 36054,
			"content": "openapi: 3.0.0\ninfo:\n  title: Mautrix-Telegram provisioning\n  version: 0.11.3\n  description: The provisioning API for Mautrix-Telegram, the Matrix-Telegram puppeting/relaybot bridge.\n  license:\n    name: AGPLv3\n    url: https://github.com/mautrix/telegram/blob/master/LICENSE\n\nexternalDocs:\n  description: Provisioning API docs on docs.mau.fi\n  url: https://docs.mau.fi/bridges/python/telegram/provisioning-api.html\n\ntags:\n- name: User info\n- name: Authentication\n- name: Bridging\n- name: Misc\n\npaths:\n  /v1/bridge:\n    get:\n      operationId: get_bridge\n      summary: Get the bridge's information\n      tags: [Misc]\n      responses:\n        200:\n          description: The bridge information\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  relaybot_username:\n                    type: string\n                    description: The relay bot's username on Telegram\n  /v1/portal/{room_id}:\n    get:\n      operationId: get_portal\n      summary: Get the bridging status and info of the connected Telegram chat\n      tags: [Bridging]\n      responses:\n        200:\n          description: Room is bridged\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PortalInfo\"\n        400:\n          $ref: \"#/components/responses/BadRequest\"\n        404:\n          description: Unknown portal\n          content:\n            application/json:\n              schema:\n                type: object\n                title: Error\n                properties:\n                  errcode:\n                    type: string\n                    title: Error code\n                    description: A machine-readable error code\n                    enum:\n                      - portal_not_found\n                  error:\n                    $ref: \"#/components/schemas/HumanReadableError\"\n      parameters:\n        - name: room_id\n          in: path\n          description: The Matrix ID of the room whose bridging status to get\n          required: true\n          schema:\n            type: string\n            pattern: \"![^/]+\"\n        - name: user_id\n          in: query\n          description: Optional Matrix user ID to check if the user has permissions to do bridging.\n          required: false\n          schema:\n            type: string\n  /v1/portal/{chat_id}:\n    get:\n      operationId: get_portal_by_tgid\n      summary: Get the bridging status and info of the connected Telegram chat\n      tags: [Bridging]\n      responses:\n        200:\n          description: Chat is bridged\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PortalInfo\"\n        400:\n          description: Invalid Telegram chat ID\n          content:\n            application/json:\n              schema:\n                type: object\n                title: Error\n                properties:\n                  errcode:\n                    type: string\n                    title: Error code\n                    description: A machine-readable error code\n                    enum:\n                      - tgid_invalid\n                  error:\n                    $ref: \"#/components/schemas/HumanReadableError\"\n        404:\n          description: Unknown portal\n          content:\n            application/json:\n              schema:\n                type: object\n                title: Error\n                properties:\n                  errcode:\n                    type: string\n                    title: Error code\n                    description: A machine-readable error code\n                    enum:\n                      - portal_not_found\n                  error:\n                    $ref: \"#/components/schemas/HumanReadableError\"\n      parameters:\n        - name: chat_id\n          in: path\n          description: The Matrix ID of the room whose bridging status to get\n          required: true\n          schema:\n            type: integer\n            pattern: -[0-9]+\n        - name: user_id\n          in: query\n          description: Optional Matrix user ID to check if the user has permissions to do bridging.\n          required: false\n          schema:\n            type: string\n  /v1/portal/{room_id}/connect/{chat_id}:\n    post:\n      operationId: connect_portal\n      summary: Connect an existing Telegram chat to the given room\n      tags: [Bridging]\n      parameters:\n        - name: room_id\n          in: path\n          description: The Matrix ID of the room to which the Telegram chat should be connected\n          required: true\n          schema:\n            type: string\n        - name: chat_id\n          in: path\n          description: The ID of the Telegram chat to connect\n          required: true\n          schema:\n            type: integer\n            pattern: -[0-9]+\n        - name: force\n          in: query\n          description: Set to force bridging by unbridging or deleting existing portal rooms.\n          required: false\n          schema:\n            type: string\n            enum:\n              - delete\n              - unbridge\n        - name: user_id\n          in: query\n          description: Optional Matrix user ID to check if the user has permissions to do the bridging.\n          required: false\n          schema:\n            type: string\n      responses:\n        200:\n          description: Telegram chat was already bridged to given room.\n        202:\n          description: Room bridging initiated\n        400:\n          $ref: \"#/components/responses/BadRequest\"\n        403:\n          description: \"Given user doesn't have permission to bridge the room, or the bridge bot is not in the room\"\n          content:\n            application/json:\n              schema:\n                type: object\n                title: Error\n                properties:\n                  errcode:\n                    type: string\n                    title: Error code\n                    description: A machine-readable error code\n                    enum:\n                      - not_enough_permissions\n                      - bot_not_in_room\n                      - bot_not_in_chat\n                      - not_logged_in\n                  error:\n                    $ref: \"#/components/schemas/HumanReadableError\"\n        409:\n          description: Matrix room or Telegram chat is already bridged to another chat/room\n          content:\n            application/json:\n              schema:\n                type: object\n                title: Error\n                properties:\n                  errcode:\n                    type: string\n                    title: Error code\n                    description: A machine-readable error code\n                    example: \u003croom|chat\u003e_already_bridged\n                    enum:\n                      - room_already_bridged\n                      - chat_already_bridged\n                  error:\n                    $ref: \"#/components/schemas/HumanReadableError\"\n  /v1/portal/{room_id}/create:\n    post:\n      operationId: create_portal\n      summary: Create a new Telegram chat for the given room\n      tags: [Bridging]\n      responses:\n        201:\n          description: Telegram chat created\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  chat_id:\n                    type: integer\n        400:\n          $ref: \"#/components/responses/BadRequest\"\n        403:\n          description: \"Given user isn't logged in with a real account or doesn't have permission to bridge the room, or the bridge bot is not in the room\"\n          content:\n            application/json:\n              schema:\n                type: object\n                title: Error\n                properties:\n                  errcode:\n                    type: string\n                    title: Error code\n                    description: A machine-readable error code\n                    enum:\n                      - not_logged_in_real_account\n                      - not_enough_permissions\n                      - bot_not_in_room\n                  error:\n                    $ref: \"#/components/schemas/HumanReadableError\"\n        409:\n          description: Room is already bridged\n          content:\n            application/json:\n              schema:\n                type: object\n                title: Error\n                properties:\n                  errcode:\n                    type: string\n                    title: Error code\n                    description: A machine-readable error code\n                    enum:\n                      - room_already_bridged\n                  error:\n                    $ref: \"#/components/schemas/HumanReadableError\"\n      parameters:\n        - name: room_id\n          in: path\n          description: The Matrix ID of the room whose bridging status to get\n          required: true\n          schema:\n            type: string\n        - name: user_id\n          in: query\n          description: Matrix user to create the chat as.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required: [type]\n              properties:\n                type:\n                  description: The type of chat to create\n                  type: string\n                  example: supergroup\n                  enum:\n                    - chat\n                    - supergroup\n                    - channel\n                title:\n                  description: Title for the new chat\n                  type: string\n                  example: Mautrix-Telegram Bridge\n                about:\n                  description: About text for the new chat\n                  type: string\n                  example: Discussion about mautrix-telegram\n        required: true\n  /v1/portal/{room_id}/disconnect:\n    post:\n      operationId: disconnect_portal\n      summary: Disconnect the Telegram chat from the room\n      tags: [Bridging]\n      responses:\n        202:\n          description: Room unbridging initiated\n        400:\n          $ref: \"#/components/responses/BadRequest\"\n        403:\n          $ref: \"#/components/responses/PermissionError\"\n        404:\n          description: Unknown portal\n          content:\n            application/json:\n              schema:\n                type: object\n                title: Error\n                properties:\n                  errcode:\n                    type: string\n                    title: Error code\n                    description: A machine-readable error code\n                    enum:\n                      - portal_not_found\n                  error:\n                    $ref: \"#/components/schemas/HumanReadableError\"\n      parameters:\n        - name: room_id\n          in: path\n          description: The Matrix ID of the room whose bridging status to get\n          required: true\n          schema:\n            type: string\n        - name: user_id\n          in: query\n          description: Optional Matrix user ID to check if the user has permissions to do the bridging.\n          required: false\n          schema:\n            type: string\n        - name: delete\n          in: query\n          description: Whether or not to delete the room completely (kick all users instead of just Telegram puppets)\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: sync\n          in: query\n          description: Whether or not to wait for the unbridging to be completed before responding. **Could cause timeouts in large rooms**\n          required: false\n          schema:\n            type: boolean\n            default: false\n  /v1/user/{user_id}:\n    get:\n      operationId: get_me\n      summary: Get the info of the Telegram user the given Matrix user is logged in as\n      tags: [User info]\n      responses:\n        200:\n          description: User found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserInfo\"\n        400:\n          $ref: \"#/components/responses/BadRequest\"\n        403:\n          $ref: \"#/components/responses/NotWhitelistedError\"\n        500:\n          $ref: \"#/components/responses/UnknownError\"\n      parameters:\n        - name: user_id\n          in: path\n          description: The Matrix ID of the user who to log in as\n          required: true\n          schema:\n            type: string\n  /v1/user/{user_id}/chats:\n    get:\n      operationId: get_chats\n      summary: Get the list of Telegram chats the given Matrix user has access to\n      tags: [User info]\n      responses:\n        200:\n          description: User is logged in\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserChats\"\n        400:\n          $ref: \"#/components/responses/BadRequest\"\n        403:\n          description: User is not logged in or not whitelisted\n          content:\n            application/json:\n              schema:\n                type: object\n                title: Error\n                properties:\n                  errcode:\n                    type: string\n                    title: Error code\n                    description: A machine-readable error code\n                    enum:\n                      - not_logged_in\n                      - mxid_not_whitelisted\n                  error:\n                    $ref: \"#/components/schemas/HumanReadableError\"\n        500:\n          $ref: \"#/components/responses/UnknownError\"\n      parameters:\n        - name: user_id\n          in: path\n          description: The Matrix ID of the user who to log in as\n          required: true\n          schema:\n            type: string\n  /v1/user/{user_id}/contacts:\n    get:\n      operationId: get_contacts\n      summary: Get the user's Telegram contacts\n      tags: [User info]\n      responses:\n        200:\n          description: Found contact list\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserContacts\"\n        403:\n          description: User is not logged in or not whitelisted\n          content:\n            application/json:\n              schema:\n                type: object\n                title: Error\n                properties:\n                  errcode:\n                    type: string\n                    title: Error code\n                    description: A machine-readable error code\n                    enum:\n                      - not_logged_in\n                      - mxid_not_whitelisted\n                  error:\n                    $ref: \"#/components/schemas/HumanReadableError\"\n        500:\n          $ref: \"#/components/responses/UnknownError\"\n      parameters:\n        - name: user_id\n          in: path\n          description: The Matrix ID of the user who to log in as\n          required: true\n          schema:\n            type: string\n  /v1/user/{user_id}/pm/{identifier}:\n    post:\n      operationId: start_dm\n      summary: Start a direct chat with a Telegram user.\n      tags: [Bridging]\n      responses:\n        200:\n          description: A portal already existed\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StartedChat\"\n        201:\n          description: A portal was created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StartedChat\"\n        403:\n          description: User is not logged in or not whitelisted\n          content:\n            application/json:\n              schema:\n                type: object\n                title: Error\n                properties:\n                  errcode:\n                    type: string\n                    title: Error code\n                    description: A machine-readable error code\n                    enum:\n                      - not_logged_in\n                      - mxid_not_whitelisted\n                  error:\n                    $ref: \"#/components/schemas/HumanReadableError\"\n        500:\n          $ref: \"#/components/responses/UnknownError\"\n      parameters:\n        - name: user_id\n          in: path\n          description: The Matrix ID of the user who to log in as\n          required: true\n          schema:\n            type: string\n        - name: identifier\n          in: path\n          description: The Telegram identifier of the user to start a private chat with. Username, phone number or internal ID.\n          required: true\n          schema:\n            anyOf:\n              - type: string\n                description: Telegram username (no prefix) or international phone number (starting with +)\n                example: tguser\n              - type: integer\n                description: Internal Telegram user ID\n                example: 987654321\n  /v1/user/{user_id}/login/bot_token:\n    post:\n      operationId: post_bot_token\n      summary: Log in with a bot token\n      tags: [Authentication]\n      responses:\n        200:\n          description: Login successful\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AuthSuccess\"\n        400:\n          $ref: \"#/components/responses/BadRequest\"\n        401:\n          description: Invalid or expired bot token or invalid shared secret\n          content:\n            application/json:\n              schema:\n                type: object\n                title: Error\n                properties:\n                  errcode:\n                    type: string\n                    title: Error code\n                    description: A machine-readable error code\n                    example: bot_token_\u003cerror\u003e\n                    enum:\n                      - bot_token_invalid\n                      - bot_token_expired\n                      - shared_secret_invalid\n                  error:\n                    $ref: \"#/components/schemas/HumanReadableError\"\n        403:\n          $ref: \"#/components/responses/NotWhitelistedError\"\n        409:\n          $ref: \"#/components/responses/AlreadyLoggedInError\"\n        500:\n          $ref: \"#/components/responses/UnknownError\"\n      parameters:\n        - name: user_id\n          in: path\n          description: The Matrix ID of the user who to log in as\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                token:\n                  type: string\n                  description: The access token of the bot to log in as\n                  example: 297900271:IXjeGEcAN61zHnjPgkWnYWyvVp9K4ulHBEv\n        required: true\n  /v1/user/{user_id}/login/request_code:\n    post:\n      operationId: post_login_phone\n      summary: Request a phone code from Telegram\n      tags: [Authentication]\n      responses:\n        200:\n          description: Code requested successfully\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AuthSuccess\"\n        400:\n          description: Invalid phone number or JSON\n          content:\n            application/json:\n              schema:\n                type: object\n                title: Error\n                properties:\n                  errcode:\n                    type: string\n                    title: Error code\n                    description: A machine-readable error code\n                    example: machine_readable_error\n                    enum:\n                      - phone_number_invalid\n                      - json_invalid\n                  error:\n                    $ref: \"#/components/schemas/HumanReadableError\"\n        401:\n          description: Invalid shared secret\n          content:\n            application/json:\n              schema:\n                type: object\n                title: Error\n                properties:\n                  errcode:\n                    type: string\n                    title: Error code\n                    description: A machine-readable error code\n                    enum:\n                      - shared_secret_invalid\n                  error:\n                    $ref: \"#/components/schemas/HumanReadableError\"\n        403:\n          description: Matrix ID is not whitelisted or phone number is banned or has forbidden 3rd party apps\n          content:\n            application/json:\n              schema:\n                type: object\n                title: Error\n                properties:\n                  errcode:\n                    type: string\n                    title: Error code\n                    description: A machine-readable error code\n                    example: machine_readable_error\n                    enum:\n                      - mxid_not_whitelisted\n                      - phone_number_banned\n                      - phone_number_app_signup_forbidden\n                  error:\n                    $ref: \"#/components/schemas/HumanReadableError\"\n        404:\n          description: Unregistered phone number\n          content:\n            application/json:\n              schema:\n                type: object\n                title: Error\n                properties:\n                  errcode:\n                    type: string\n                    title: Error code\n                    description: A machine-readable error code\n                    enum:\n                      - phone_number_unoccupied\n                  error:\n                    $ref: \"#/components/schemas/HumanReadableError\"\n        409:\n          $ref: \"#/components/responses/AlreadyLoggedInError\"\n        429:\n          description: Phone number has been temporarily blocked for flooding\n          content:\n            application/json:\n              schema:\n                type: object\n                title: Error\n                properties:\n                  errcode:\n                    type: string\n                    title: Error code\n                    description: A machine-readable error code\n                    enum:\n                      - flood_wait\n                      - phone_number_flood\n                  error:\n                    $ref: \"#/components/schemas/HumanReadableError\"\n        500:\n          $ref: \"#/components/responses/UnknownError\"\n      parameters:\n        - name: user_id\n          in: path\n          description: The Matrix ID of the user who to log in as\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                phone:\n                  type: string\n                  description: The phone number to log in as.\n                  example: \"+123456789\"\n        required: true\n  /v1/user/{user_id}/login/send_code:\n    post:\n      operationId: post_login_code\n      summary: Send the login code\n      tags: [Authentication]\n      responses:\n        200:\n          description: Login successful\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AuthSuccess\"\n        202:\n          description: Correct code, but two-factor authentication is enabled\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AuthSuccess\"\n        400:\n          $ref: \"#/components/responses/BadRequest\"\n        401:\n          description: Invalid phone code or shared secret\n          content:\n            application/json:\n              schema:\n                type: object\n                title: Error\n                properties:\n                  errcode:\n                    type: string\n                    title: Error code\n                    description: A machine-readable error code\n                    enum:\n                      - phone_code_invalid\n                      - shared_secret_invalid\n                  error:\n                    $ref: \"#/components/schemas/HumanReadableError\"\n        403:\n          description: Matrix ID not whitelisted or phone code expired\n          content:\n            application/json:\n              schema:\n                type: object\n                title: Error\n                properties:\n                  errcode:\n                    type: string\n                    title: Error code\n                    description: A machine-readable error code\n                    example: machine_readable_error\n                    enum:\n                      - mxid_not_whitelisted\n                      - phone_code_expired\n                  error:\n                    $ref: \"#/components/schemas/HumanReadableError\"\n        409:\n          $ref: \"#/components/responses/AlreadyLoggedInError\"\n        500:\n          $ref: \"#/components/responses/UnknownError\"\n      parameters:\n        - name: user_id\n          in: path\n          description: The Matrix ID of the user who to log in as\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                code:\n                  type: integer\n                  description: The phone code from Telegram.\n                  format: int32\n                  example: 123456\n        required: true\n  /v1/user/{user_id}/login/send_password:\n    post:\n      operationId: post_login_password\n      summary: Send the two-factor auth password\n      tags: [Authentication]\n      responses:\n        200:\n          description: Login successful\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AuthSuccess\"\n        400:\n          description: Missing password or invalid JSON\n          content:\n            application/json:\n              schema:\n                type: object\n                title: Error\n                properties:\n                  errcode:\n                    type: string\n                    title: Error code\n                    description: A machine-readable error code\n                    example: _empty\n                    enum:\n                      - password_empty\n                      - json_invalid\n                  error:\n                    $ref: \"#/components/schemas/HumanReadableError\"\n        401:\n          description: Incorrect password or invalid shared secret\n          content:\n            application/json:\n              schema:\n                type: object\n                title: Error\n                properties:\n                  errcode:\n                    type: string\n                    title: Error code\n                    description: A machine-readable error code\n                    enum:\n                      - password_invalid\n                      - shared_secret_invalid\n                  error:\n                    $ref: \"#/components/schemas/HumanReadableError\"\n        403:\n          $ref: \"#/components/responses/NotWhitelistedError\"\n        409:\n          $ref: \"#/components/responses/AlreadyLoggedInError\"\n        500:\n          $ref: \"#/components/responses/UnknownError\"\n      parameters:\n        - name: user_id\n          in: path\n          description: The Matrix ID of the user who to log in as\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                password:\n                  type: string\n                  description: The two-factor auth password\n                  format: password\n                  example: hunter2\n        required: true\n  /v1/user/{user_id}/logout:\n    post:\n      operationId: logout\n      summary: Log out\n      tags:\n        - Authentication\n      responses:\n        200:\n          description: Logout successful\n        403:\n          description: User was not logged in\n          content:\n            application/json:\n              schema:\n                type: object\n                title: Error\n                properties:\n                  errcode:\n                    type: string\n                    title: Error code\n                    description: A machine-readable error code\n                    enum:\n                      - not_logged_in\n                  error:\n                    $ref: \"#/components/schemas/HumanReadableError\"\n        500:\n          $ref: \"#/components/responses/UnknownError\"\n      parameters:\n        - name: user_id\n          in: path\n          description: The Matrix ID of the user who to log out as\n          required: true\n          schema:\n            type: string\nsecurity:\n  - Bearer: []\nservers:\n  - url: /_matrix/provision\ncomponents:\n  responses:\n    NotWhitelistedError:\n      description: Matrix ID not whitelisted for puppeting\n      content:\n        application/json:\n          schema:\n            type: object\n            title: Error\n            properties:\n              errcode:\n                type: string\n                title: Error code\n                description: A machine-readable error code\n                enum:\n                  - mxid_not_whitelisted\n              error:\n                $ref: \"#/components/schemas/HumanReadableError\"\n    AlreadyLoggedInError:\n      description: The Matrix user is already logged in\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              state:\n                type: string\n                enum:\n                  - logged-in\n              username:\n                type: string\n                description: The Telegram username the user is logged in as.\n              phone:\n                type: string\n                description: The phone number of the account the user is logged into.\n    BadRequest:\n      description: Invalid JSON.\n      content:\n        application/json:\n          schema:\n            type: object\n            title: Error\n            properties:\n              errcode:\n                type: string\n                title: Error code\n                description: A machine-readable error code\n                enum:\n                  - json_invalid\n                  - mxid_empty\n                  - body_value_missing\n                  - body_value_invalid\n              error:\n                $ref: \"#/components/schemas/HumanReadableError\"\n    UnknownError:\n      description: Unknown error\n      content:\n        application/json:\n          schema:\n            type: object\n            title: UnknownError\n            properties:\n              errcode:\n                type: string\n                title: Error code\n                description: A machine-readable error code\n                enum:\n                  - unknown_error\n                  - unhandled_error\n              error:\n                type: string\n                title: Error\n                description: A human-readable description of the error\n                example: Internal server error while .\n    PermissionError:\n      description: The given Matrix user doesn't have the permissions to do that.\n      content:\n        application/json:\n          schema:\n            type: object\n            title: Error\n            properties:\n              errcode:\n                type: string\n                title: Error code\n                description: A machine-readable error code\n                example: not_enough_permissions\n                enum:\n                  - not_enough_permissions\n              error:\n                $ref: \"#/components/schemas/HumanReadableError\"\n  securitySchemes:\n    Bearer:\n      description: Required authentication for all endpoints\n      name: Authorization\n      in: header\n      type: apiKey\n  schemas:\n    UserInfo:\n      type: object\n      properties:\n        mxid:\n          type: string\n          example: \"@usern:example.com\"\n        permissions:\n          type: string\n          example: user\n          enum:\n            - none\n            - relaybot\n            - user\n            - full\n            - admin\n        telegram:\n          type: object\n          properties:\n            id:\n              type: integer\n              example: 123456789\n            username:\n              type: string\n              example: username\n            first_name:\n              type: string\n              example: Usern\n            last_name:\n              type: string\n              example: A.\n            phone:\n              type: string\n              example: 123456789\n            is_bot:\n              type: boolean\n              example: false\n    UserChats:\n      type: array\n      items:\n        type: object\n        properties:\n          id:\n            type: integer\n            example: -123456789\n            description: A bot API style chat ID.\n          title:\n            type: string\n    UserContactInfo:\n      type: object\n      properties:\n        name:\n          type: string\n          description: The displayname of the Telegram user.\n          example: Telegram User\n        username:\n          type: string\n          description: The username of the Telegram user.\n          example: tguser\n        phone:\n          type: string\n          description: The phone number of the Telegram user.\n          example: +123456789\n        is_bot:\n          type: boolean\n          description: Whether the Telegram user is a bot or a normal user.\n          example: false\n        avatar_url:\n          type: string\n          description: The Matrix avatar URL for the Telegram user's ghost.\n          example: mxc://example.com/abcdef123456\n    UserContacts:\n      type: object\n      properties:\n        \"\u003cphone\u003e\":\n          $ref: \"#/components/schemas/UserContactInfo\"\n      # TODO use this when SwaggerUI supports OpenAPI 3.1\n      #patternProperties:\n      #  \"^[0-9]+$\":\n      #    $ref: \"#/components/schemas/UserContactInfo\"\n    StartedChat:\n      type: object\n      properties:\n        room_id:\n          type: string\n          description: The Matrix room ID.\n          example: \"!foo:example.com\"\n        just_created:\n          type: boolean\n          description: True if the portal was just created for this request.\n          example: false\n        id:\n          type: integer\n          description: The Telegram user ID.\n          example: 987654321\n        contact_info:\n          $ref: \"#/components/schemas/UserContactInfo\"\n    PortalInfo:\n      type: object\n      properties:\n        mxid:\n          type: string\n          example: \"!foo:example.com\"\n        chat_id:\n          type: integer\n          example: -100123456789\n        peer_type:\n          type: string\n          enum:\n            - user\n            - chat\n            - channel\n        megagroup:\n          type: boolean\n        username:\n          type: string\n        title:\n          type: string\n        about:\n          type: string\n        can_unbridge:\n          type: boolean\n          description: If a user ID was provided with the request, this will indicate whether or not the user can unbridge the room.\n    AuthSuccess:\n      type: object\n      properties:\n        state:\n          type: string\n          description: The state/next step after the successful operation.\n          enum:\n            - code\n            - request\n            - password\n            - token\n            - logged-in\n        username:\n          type: string\n          description: The Telegram username the user is logged in as. Only applicable if state=logged-in\n        phone:\n          type: string\n          description: The phone number of the account the user logged into. Only applicable if state=logged-in\n    HumanReadableError:\n      type: string\n      description: A human-readable description of the error\n      example: A human-readable description of the error\n",
			"canonicalURL": "/github.com/mautrix/telegram@65bd7fcc49b6833c857966d59437e9426e115907/-/blob/mautrix_telegram/web/provisioning/spec.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/mautrix/telegram/blob/65bd7fcc49b6833c857966d59437e9426e115907/mautrix_telegram/web/provisioning/spec.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: at 1:7126: duplicate path: \"/v1/portal/{room_id}\""
}