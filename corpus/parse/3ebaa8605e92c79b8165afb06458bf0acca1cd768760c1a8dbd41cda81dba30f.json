{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/IndustryEssentials/ymir"
		},
		"file": {
			"name": "ymir_viz_API.yaml",
			"size": 0,
			"path": "ymir/backend/src/ymir_viz/doc/ymir_viz_API.yaml",
			"byteSize": 9051,
			"content": "openapi: 3.0.1\ninfo:\n  title: Ymir-viz\n  description: Ymir-viz\n  contact:\n    email: test@ymir.ai\n  license:\n    name: Apache 2.0\n    url: \"https://www.apache.org/licenses/LICENSE-2.0.html\"\n  version: 1.0.0\nservers:\n  - url: \"http://xxx.com/v1\"\ntags:\n  - name: asset\n    description: Assets represent the smallest granular resources, like pictures\n  - name: model\n    description: Training task produces model\npaths:\n  \"/users/{user_id}/repositories/{repo_id}/branches/{branch_id}/datasets\":\n    get:\n      tags:\n        - dataset\n      summary: \"get dataset info\"\n      description: \"get dataset info\"\n      operationId: get_dataset_info\n      parameters:\n        - name: user_id\n          in: path\n          description: user_id\n          required: true\n          schema:\n            type: string\n        - name: repo_id\n          in: path\n          description: repo_id\n          required: true\n          schema:\n            type: string\n        - name: branch_id\n          in: path\n          description: branch_id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DatasetResult\"\n        \"400\":\n          description: Dataset not exists\n  \"/users/{user_id}/repositories/{repo_id}/branches/{branch_id}/assets\":\n    get:\n      tags:\n        - asset\n      summary: \"get assets info from special user_id,repo_id,branch_id\"\n      description: \"get assets info from special user_id,repo_id,branch_id, sort by asset_id\"\n      operationId: get_asserts_info\n      parameters:\n        - name: user_id\n          in: path\n          description: user_id\n          required: true\n          schema:\n            type: string\n        - name: repo_id\n          in: path\n          description: repo_id\n          required: true\n          schema:\n            type: string\n        - name: branch_id\n          in: path\n          description: branch_id\n          required: true\n          schema:\n            type: string\n        - name: offset\n          in: query\n          description: offset\n          required: false\n          schema:\n            type: integer\n            default: 0\n        - name: limit\n          in: query\n          description: limit\n          required: false\n          schema:\n            type: integer\n            default: 20\n            maximum: 100\n            minimum: 0\n        - name: class_id\n          in: query\n          description: single class id\n          required: false\n          schema:\n            type: integer\n            default: false\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AssetsResult\"\n        \"400\":\n          description: Branch not exists\n          content: {}\n  \"/users/{user_id}/repositories/{repo_id}/branches/{branch_id}/assets/{asset_id}\":\n    get:\n      tags:\n        - asset\n      summary: \"get asset_id info\"\n      description: \"\"\n      operationId: get_assert_id_Info\n      parameters:\n        - name: user_id\n          in: path\n          description: user_id\n          required: true\n          schema:\n            type: string\n        - name: repo_id\n          in: path\n          description: repo_id\n          required: true\n          schema:\n            type: string\n        - name: branch_id\n          in: path\n          description: branch_id\n          required: true\n          schema:\n            type: string\n        - name: asset_id\n          in: path\n          description: asset_id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AssetMetaResult\"\n        \"400\":\n          description: Branch not exists\n          content: {}\n  \"/users/{user_id}/repositories/{repo_id}/branches/{branch_id}/models\":\n    get:\n      tags:\n        - model\n      summary: \"get model info\"\n      description: \"get model info\"\n      operationId: get_model_info\n      parameters:\n        - name: user_id\n          in: path\n          description: user_id\n          required: true\n          schema:\n            type: string\n        - name: repo_id\n          in: path\n          description: repo_id\n          required: true\n          schema:\n            type: string\n        - name: branch_id\n          in: path\n          description: branch_id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ModelResult\"\n        \"400\":\n          description: Task not exists\ncomponents:\n  schemas:\n    AssetInfo:\n      type: object\n      properties:\n        asset_id:\n          type: string\n        class_ids:\n          type: array\n          items:\n            type: integer\n            example: [2, 4]\n    #        annotations:\n    #          $ref: '#/components/schemas/Annotations'\n    AssetsResult:\n      allOf:\n        - $ref: \"#/components/schemas/ApiResponse\"\n        - type: object\n          properties:\n            result:\n              type: object\n              properties:\n                elements:\n                  type: array\n                  items:\n                    $ref: \"#/components/schemas/AssetInfo\"\n                offset:\n                  type: integer\n                limit:\n                  type: integer\n                tatal:\n                  type: integer\n    AssetMetaResult:\n      allOf:\n        - $ref: \"#/components/schemas/ApiResponse\"\n        - type: object\n          properties:\n            result:\n              $ref: \"#/components/schemas/AssetsMetaInfo\"\n    AssetsMetaInfo:\n      type: object\n      properties:\n        annotations:\n          $ref: \"#/components/schemas/Annotations\"\n        class_ids:\n          type: array\n          items:\n            type: integer\n        metadata:\n          type: object\n          properties:\n            asset_type:\n              type: string\n            width:\n              type: integer\n            height:\n              type: integer\n            image_channels:\n              type: integer\n            timestamp:\n              type: object\n              properties:\n                start:\n                  type: integer\n      example:\n        annotations:\n          - box:\n              x: 121\n              y: 1\n              w: 33\n              h: 44\n            class_id: 4\n            score: 0.33\n        class_ids:\n          - 4\n          - 6\n        metadata:\n          asset_type: pic\n          width: 100\n          height: 100\n          image_channels: 1\n          timestamp: { \"start\": 45645 }\n    ModelResult:\n      allOf:\n        - $ref: \"#/components/schemas/ApiResponse\"\n        - type: object\n          properties:\n            result:\n              type: object\n              properties:\n                model_id:\n                  type: string\n                model_mAP:\n                  type: integer\n                  maximum: 1\n                  minimum: 0\n                  description: mean average precision of the model\n                  example: 0.5\n                task_parameters:\n                  type: string\n                executor_config:\n                  type: string\n    DatasetResult:\n      allOf:\n        - $ref: \"#/components/schemas/ApiResponse\"\n        - type: object\n          properties:\n            result:\n              type: object\n              properties:\n                total_images_cnt:\n                  type: integer\n                class_ids_count:\n                  type: object\n                  example: \"{3:8, 4:2}\"\n                class_names_count:\n                  type: object\n                  example: \"{'cat':8, 'dog':2}\"\n                ignored_labels:\n                  type: object\n                  example: \"{'cat':8}\"\n                negative_info:\n                  type: object\n                  properties:\n                    negative_images_cnt:\n                      type: integer\n                    project_negative_images_cnt:\n                      type: integer\n\n    ApiResponse:\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        request_id:\n          type: string\n        message:\n          type: string\n    Annotations:\n      type: array\n      items:\n        type: object\n        properties:\n          box:\n            type: object\n            properties:\n              x:\n                type: integer\n              y:\n                type: integer\n              w:\n                type: integer\n              h:\n                type: integer\n          class_id:\n            type: integer\n          score:\n            type: integer\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /users/{user_id}/repositories/{repo_id}/branches/{branch_id}/assets: get: operation \"get_asserts_info\": parameters: parse parameter \"class_id\": schema: parse default: expected type \"integer\", got \"bool\""
}