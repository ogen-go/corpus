{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/PacktPublishing/Angular-6-for-Enterprise-Ready-Web-Applications"
		},
		"file": {
			"name": "swagger.oas3.yaml",
			"size": 0,
			"path": "Chapter08/lemon-mart-swagger-server/swagger.oas3.yaml",
			"byteSize": 3615,
			"content": "openapi: 3.0.0\ninfo:\n  title: LemonMart\n  description: LemonMart API\n  version: \"1.0.0\"\n\nservers:\n  - url: http://localhost:3000\n    description: Local environment\n  - url: https://mystagingserver.com/v1\n    description: Staging environment\n  - url: https://myprodserver.com/v1\n    description: Production environment\n\ncomponents:\n  schemas:\n    Role:\n      type: string\n      enum: [clerk, cashier, manager]\n    Name:\n      type: object\n      properties:\n        first:\n          type: string\n        middle:\n          type: string\n        last:\n          type: string\n    User:\n      type: object\n      properties:\n        id:\n          type: string\n        email:\n          type: string\n        name:\n          $ref: '#/components/schemas/Name'\n        picture:\n          type: string\n        role:\n          $ref: '#/components/schemas/Role'\n        userStatus:\n          type: boolean\n        lastModified:\n          type: string\n          format: date\n        lastModifiedBy:\n          type: string\n    Users:\n      type: object\n      properties:\n        total:\n          type: number\n          format: int32\n      items:\n        $ref: '#/components/schemas/ArrayOfUser'\n    ArrayOfUser:\n      type: array\n      items:\n            $ref: '#/components/schemas/User'\n  parameters:\n    offsetParam: # <-- Arbitrary name for the definition that will be used to refer to it.\n                  # Not necessarily the same as the parameter name.\n      in: query\n      name: offset\n      required: false\n      schema:\n        type: integer\n        minimum: 0\n      description: The number of items to skip before starting to collect the result set.\n    limitParam:\n      in: query\n      name: limit\n      required: false\n      schema:\n        type: integer\n        minimum: 1\n        maximum: 50\n        default: 20\n      description: The numbers of items to return.\n\npaths:\n  /users:\n    get:\n      description: |\n        Searches and returns `User` objects.\n        Optional query params determines values of returned array\n      parameters:\n        - in: query\n          name: search\n          required: false\n          schema:\n            type: string\n          description: Search text\n        - $ref: '#/components/parameters/offsetParam'\n        - $ref: '#/components/parameters/limitParam'\n      responses:\n        '200': # Response\n          description: OK\n          content: # Response body\n            application/json: # Media type\n              schema:\n                $ref: '#/components/schemas/Users'\n  /user/{id}:\n    get:\n      description: Gets a `User` object by id\n      parameters:\n        - in: path\n          name: id\n          required: true\n          schema:\n            type: string\n          description: User's unique id\n      responses:\n         '200': # Response\n            description: OK\n            content: # Response body\n              application/json: # Media type\n                schema:\n                  $ref: '#/components/schemas/User'\n    put:\n      description: Updates a `User` object given id\n      parameters:\n        - in: path\n          name: id\n          required: true\n          schema:\n            type: string\n          description: User's unique id\n        - in: query\n          name: userData\n          schema:\n            $ref: '#/components/schemas/User'\n          style: form\n          explode: false\n          description: Updated user object\n      responses:\n        '200':\n          description: OK\n          content: # Response body\n              application/json: # Media type\n                schema:\n                  $ref: '#/components/schemas/User'",
			"canonicalURL": "/github.com/PacktPublishing/Angular-6-for-Enterprise-Ready-Web-Applications@2a4168c9a699431479fbdb4c612b9f371bfcaa3c/-/blob/Chapter08/lemon-mart-swagger-server/swagger.oas3.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/PacktPublishing/Angular-6-for-Enterprise-Ready-Web-Applications/blob/2a4168c9a699431479fbdb4c612b9f371bfcaa3c/Chapter08/lemon-mart-swagger-server/swagger.oas3.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: at 1:15: schemas: \"Users\": parse schema: object cannot contain 'items' field"
}