{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/radiantearth/stac-api-spec"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "ogcapi-features/openapi.yaml",
			"byteSize": 17047,
			"content": "openapi: 3.0.3\ninfo:\n  title: STAC API - Features\n  version: '1.0.0-rc.1'\n  description: \u003e-\n    This is an OpenAPI definition of the SpatioTemporal Asset Catalog API - Features\n    specification. This extends OGC API - Features - Part 1: Core.\n  contact:\n    name: STAC Specification\n    url: 'http://stacspec.org'\n  license:\n    name: Apache License 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0'\ntags:\n  - name: Features\n    description: |-\n      All endpoints related to OGC API - Features - Part 1: Core\npaths:\n  '/':\n    get:\n      tags:\n        - Features\n      summary: landing page\n      description: |-\n        The landing page provides links to the sub-resources.\n      operationId: getLandingPage\n      responses:\n        '200':\n          description: |-\n            The landing page provides links to the API definition\n            (link relations `service-desc` and `service-doc`),\n            the Conformance declaration (path `/conformance`,\n            link relation `conformance`), and the Feature\n            Collections (path `/collections`, link relation\n            `data`).\n          content:\n            application/json:\n              schema:\n                $ref: '../core/openapi.yaml#/components/schemas/landingPage'\n              example:\n                stac_version: '1.0.0'\n                type: Catalog\n                id: sentinel\n                title: Copernicus Sentinel Imagery\n                description: Catalog of Copernicus Sentinel 1 and 2 imagery.\n                conformsTo:\n                  - 'https://api.stacspec.org/v1.0.0-rc.1/core'\n                  - 'http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/core'\n                  - 'http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/oas30'\n                  - 'http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/geojson'\n                links:\n                  - href: 'http://data.example.org/'\n                    rel: self\n                    type: application/json\n                    title: this document\n                  - href: 'http://data.example.org/api'\n                    rel: service-desc\n                    type: application/vnd.oai.openapi+json;version=3.0\n                    title: the API definition\n                  - href: 'http://data.example.org/api.html'\n                    rel: service-doc\n                    type: text/html\n                    title: the API documentation\n                  - href: 'http://data.example.org/conformance'\n                    rel: conformance\n                    type: application/json\n                    title: OGC API conformance classes implemented by this server\n                  - href: 'http://data.example.org/collections'\n                    rel: data\n                    type: application/json\n                    title: Information about the feature collections\n  '/conformance':\n    get:\n      tags:\n        - Features\n      summary: information about specifications that this API conforms to\n      description: |-\n        A list of all conformance classes specified in a standard that the\n        server conforms to.\n      operationId: getConformanceDeclaration\n      responses:\n        '200':\n          $ref: '#/components/responses/ConformanceDeclaration'\n        '500':\n          $ref: '#/components/responses/ServerError'\n  '/collections':\n    get:\n      tags:\n        - Features\n      summary: the feature collections in the dataset\n      description: |-\n        A body of Feature Collections that belong or are used together with additional links.\n        Request may not return the full set of metadata per Feature Collection.\n      operationId: getCollections\n      responses:\n        '200':\n          $ref: '#/components/responses/Collections'\n        '500':\n          $ref: '#/components/responses/ServerError'\n  '/collections/{collectionId}':\n    get:\n      tags:\n        - Features\n      summary: |-\n        describe the feature collection with id `collectionId`\n      description: |-\n        A single Feature Collection for the given if `collectionId`.\n        Request this endpoint to get a full list of metadata for the Feature Collection.\n      operationId: describeCollection\n      parameters:\n        - $ref: '#/components/parameters/collectionId'\n      responses:\n        '200':\n          $ref: '#/components/responses/Collection'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/ServerError'\n  '/collections/{collectionId}/items':\n    get:\n      tags:\n        - Features\n      summary: fetch features\n      description: |-\n        Fetch features of the feature collection with id `collectionId`.\n\n        Every feature in a dataset belongs to a collection. A dataset may\n        consist of multiple feature collections. A feature collection is often a\n        collection of features of a similar type, based on a common schema.\n      operationId: getFeatures\n      parameters:\n        - $ref: '#/components/parameters/collectionId'\n        - $ref: '#/components/parameters/limit'\n        - $ref: '#/components/parameters/bbox'\n        - $ref: '#/components/parameters/datetime'\n      responses:\n        '200':\n          $ref: '#/components/responses/Features'\n        '400':\n          $ref: '#/components/responses/InvalidParameter'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/ServerError'\n  '/collections/{collectionId}/items/{featureId}':\n    get:\n      tags:\n        - Features\n      summary: fetch a single feature\n      description: |-\n        Fetch the feature with id `featureId` in the feature collection\n        with id `collectionId`.\n      operationId: getFeature\n      parameters:\n        - $ref: '#/components/parameters/collectionId'\n        - $ref: '#/components/parameters/featureId'\n      responses:\n        '200':\n          $ref: '#/components/responses/Feature'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/ServerError'\ncomponents:\n  parameters:\n    bbox:\n      name: bbox\n      in: query\n      description: |-\n        Only features that have a geometry that intersects the bounding box are selected.\n        The bounding box is provided as four or six numbers, depending on whether the\n        coordinate reference system includes a vertical axis (height or depth):\n\n        * Lower left corner, coordinate axis 1\n        * Lower left corner, coordinate axis 2\n        * Minimum value, coordinate axis 3 (optional)\n        * Upper right corner, coordinate axis 1\n        * Upper right corner, coordinate axis 2\n        * Maximum value, coordinate axis 3 (optional)\n\n        The coordinate reference system of the values is WGS 84 longitude/latitude\n        (http://www.opengis.net/def/crs/OGC/1.3/CRS84).\n\n        For WGS 84 longitude/latitude the values are in most cases the sequence of\n        minimum longitude, minimum latitude, maximum longitude and maximum latitude.\n        However, in cases where the box spans the antimeridian the first value\n        (west-most box edge) is larger than the third value (east-most box edge).\n\n        If the vertical axis is included, the third and the sixth number are\n        the bottom and the top of the 3-dimensional bounding box.\n\n        If a feature has multiple spatial geometry properties, it is the decision of the\n        server whether only a single spatial geometry property is used to determine\n        the extent or all relevant geometries.\n      required: false\n      schema:\n        type: array\n        oneOf:\n          - minItems: 4\n            maxItems: 4\n          - minItems: 6\n            maxItems: 6\n        items:\n          type: number\n      style: form\n      explode: false\n    collectionId:\n      name: collectionId\n      in: path\n      description: local identifier of a collection\n      required: true\n      schema:\n        type: string\n    datetime:\n      name: datetime\n      in: query\n      description: |-\n        Either a date-time or an interval, open or closed. Date and time expressions\n        adhere to RFC 3339. Open intervals are expressed using double-dots.\n\n        Examples:\n\n        * A date-time: \"2018-02-12T23:20:50Z\"\n        * A closed interval: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\"\n        * Open intervals: \"2018-02-12T00:00:00Z/..\" or \"../2018-03-18T12:31:12Z\"\n\n        Only features that have a temporal property that intersects the value of\n        `datetime` are selected.\n\n        If a feature has multiple temporal properties, it is the decision of the\n        server whether only a single temporal property is used to determine\n        the extent or all relevant temporal properties.\n      required: false\n      schema:\n        type: string\n      style: form\n      explode: false\n    featureId:\n      name: featureId\n      in: path\n      description: local identifier of a feature\n      required: true\n      schema:\n        type: string\n    limit:\n      name: limit\n      in: query\n      description: |-\n        The optional limit parameter recommends the number of items that should be present in the response document.\n\n        If the limit parameter value is greater than advertised limit maximum, the server must return the\n        maximum possible number of items, rather than responding with an error.\n\n        Only items are counted that are on the first level of the collection in the response document.\n        Nested objects contained within the explicitly requested items must not be counted.\n\n        Minimum = 1. Maximum = 10000. Default = 10.\n      required: false\n      schema:\n        type: integer\n        minimum: 1\n        maximum: 10000\n        default: 10\n      style: form\n      explode: false\n  schemas:\n    collections:\n      type: object\n      required:\n        - links\n        - collections\n      properties:\n        links:\n          $ref: '../core/commons.yaml#/components/schemas/links'\n        collections:\n          type: array\n          items:\n            $ref: '../core/commons.yaml#/components/schemas/collection'\n    featureCollectionGeoJSON:\n      allOf:\n        - $ref: '../core/commons.yaml#/components/schemas/featureCollectionGeoJSON'\n        - type: object\n          required:\n            - features\n          properties:\n            features:\n              type: array\n              items:\n                $ref: '../core/commons.yaml#/components/schemas/item'\n            links:\n              $ref: '../core/commons.yaml#/components/schemas/links'\n            timeStamp:\n              $ref: '#/components/schemas/timeStamp'\n            numberMatched:\n              $ref: '#/components/schemas/numberMatched'\n            numberReturned:\n              $ref: '#/components/schemas/numberReturned'\n    numberMatched:\n      description: |-\n        The number of features of the feature type that match the selection\n        parameters like `bbox`.\n      type: integer\n      minimum: 0\n      example: 127\n    numberReturned:\n      description: |-\n        The number of features in the feature collection.\n\n        A server may omit this information in a response, if the information\n        about the number of features is not known or difficult to compute.\n\n        If the value is provided, the value must be identical to the number\n        of items in the \"features\" array.\n      type: integer\n      minimum: 0\n      example: 10\n    timeStamp:\n      description: This property indicates the time and date when the response was generated.\n      type: string\n      format: date-time\n      example: '2017-08-17T08:05:32Z'\n  responses:\n    ConformanceDeclaration:\n      description: |-\n        The URIs of all conformance classes supported by the server.\n\n        To support \"generic\" clients that want to access multiple\n        OGC API Features implementations - and not \"just\" a specific\n        API / server, the server declares the conformance\n        classes it implements and conforms to.\n      content:\n        application/json:\n          schema:\n            $ref: '../core/commons.yaml#/components/schemas/conformanceClasses'\n          example:\n            conformsTo:\n              - 'http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/core'\n              - 'http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/oas30'\n              - 'http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/geojson'\n    Collections:\n      description: |-\n        The feature collections shared by this API.\n\n        The dataset is organized as one or more feature collections. This resource\n        provides information about and access to the collections.\n\n        The response contains the list of collections. For each collection, a link\n        to the items in the collection (path `/collections/{collectionId}/items`,\n        link relation `items`) as well as key information about the collection.\n        This information includes:\n\n        * A local identifier for the collection that is unique for the dataset;\n        * A list of coordinate reference systems (CRS) in which geometries may be returned by the server. The first CRS is the default coordinate reference system (the default is always WGS 84 with axis order longitude/latitude);\n        * An optional title and description for the collection;\n        * An optional extent that can be used to provide an indication of the spatial and temporal extent of the collection - typically derived from the data;\n        * An optional indicator about the type of the items in the collection (the default value, if the indicator is not provided, is 'feature').\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/collections'\n    Collection:\n      description: |-\n        Information about the feature collection with id `collectionId`.\n\n        The response contains a link to the items in the collection\n        (path `/collections/{collectionId}/items`, link relation `items`)\n        as well as key information about the collection. This information\n        includes:\n\n        * A local identifier for the collection that is unique for the dataset;\n        * A list of coordinate reference systems (CRS) in which geometries may be returned by the server. The first CRS is the default coordinate reference system (the default is always WGS 84 with axis order longitude/latitude);\n        * An optional title and description for the collection;\n        * An optional extent that can be used to provide an indication of the spatial and temporal extent of the collection - typically derived from the data;\n        * An optional indicator about the type of the items in the collection (the default value, if the indicator is not provided, is 'feature').\n      content:\n        application/json:\n          schema:\n            $ref: '../core/commons.yaml#/components/schemas/collection'\n    Features:\n      description: |-\n        The response is a document consisting of features in the collection.\n        The features included in the response are determined by the server\n        based on the query parameters of the request. To support access to\n        larger collections without overloading the client, the API supports\n        paged access with links to the next page, if more features are selected\n        that the page size.\n\n        The `bbox` and `datetime` parameter can be used to select only a\n        subset of the features in the collection (the features that are in the\n        bounding box or time interval). The `bbox` parameter matches all features\n        in the collection that are not associated with a location, too. The\n        `datetime` parameter matches all features in the collection that are\n        not associated with a time stamp or interval, too.\n\n        The `limit` parameter may be used to control the subset of the\n        selected features that should be returned in the response, the page size.\n        Each page may include information about the number of selected and\n        returned features (`numberMatched` and `numberReturned`) as well as\n        links to support paging (link relation `next`).\n      content:\n        application/geo+json:\n          schema:\n            $ref: '#/components/schemas/featureCollectionGeoJSON'\n    Feature:\n      description: |-\n        fetch the feature with id `featureId` in the feature collection\n        with id `collectionId`\n      content:\n        application/geo+json:\n          schema:\n            $ref: '../core/commons.yaml#/components/schemas/item'\n    InvalidParameter:\n      description: |-\n        A query parameter has an invalid value.\n      content:\n        application/json:\n          schema:\n            $ref: '../core/commons.yaml#/components/schemas/exception'\n    NotFound:\n      description: |-\n        The requested URI was not found.\n    ServerError:\n      description: |-\n        A server error occurred.\n      content:\n        application/json:\n          schema:\n            $ref: '../core/commons.yaml#/components/schemas/exception'\n"
		}
	},
	"Error": "parse: parse spec: paths: /: get: operation \"getLandingPage\": responses: 200: content: \"application/json\": schema: parse schema: reference \"../core/openapi.yaml#/components/schemas/landingPage\": resolve reference \"../core/openapi.yaml#/components/schemas/landingPage\": invalid schema reference \"../core/openapi.yaml#/components/schemas/landingPage\""
}