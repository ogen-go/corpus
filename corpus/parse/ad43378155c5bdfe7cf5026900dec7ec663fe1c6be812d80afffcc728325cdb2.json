{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/tatumio/tatum-blockchain-connector"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "multiToken-connector/module/openapi.yaml",
			"byteSize": 108442,
			"content": "openapi: 3.0.0\nservers:\n  - url: 'https://api-eu1.tatum.io'\ninfo:\n  version: 1.0.1\n  title: Tatum Multi Token Abstraction API\ntags:\n  - description: |\n      \u003cp\u003eMulti Token (ERC-1155|) is a type of contract where multiple NFT or \"non-fungible token\" can be deployed with FT \"Fungible Tokens\". Non-fungible means that each token is unique and irreplaceable while Fungible tokens are tokens that have same value. This principle gives Multi Token their value and gives rise to a wide range of interesting potential use cases.\u003cbr/\u003e\n      Multi Tokens can be used for nearly any digital asset or good to ensure authenticity and scarcity. The possibilities are endless, but here are a few example use cases:\n      \u003cul\u003e\n      \u003cli\u003e\u003cb\u003eIn-game assets\u003c/b\u003e - Multi Tokens can be used to create unique collectibles in the form of characters, weapons, skins, or other equipment. Players can resell or trade assets directly as they choose, and their authenticity is easily verifiable. No more eBay, no more scammers.\u003c/li\u003e\n      \u003cli\u003e\u003cb\u003eMusic and other digital media\u003c/b\u003e - Multi Tokens can be used to create rare and unique collectible digital releases. Similarly, NFTs can be used to sell videos, art, or any other type of digital media. Collectors can own digital originals of their favorite songs, movies, or virtually anything else you can imagine.\u003c/li\u003e\n      \u003cli\u003e\u003cb\u003eDigital sports merch\u003c/b\u003e - Trading cards, memorabilia, classic moments in sports history, and one-of-a-kind experiences can also be sold as NFTs, opening up a world of possibilities for sports leagues and teams worldwide. The NBA Top Shot website sells collectible “moments” from the league’s history, and at the time of writing, the website is completely sold out and closed for new sign-ups.\u003c/li\u003e\n      \u003cbr/\u003e\n      These endpoints wraps up standard Multi Token implementation and operations, which can be done with them. Endpoints are blockchain agnostic, the only differentatior is the \u003cb\u003echain\u003c/b\u003e parameter in the URL path.\u003cbr/\u003e\u003cbr/\u003e\n      Tatum now supports Multi Token on these blockchains:\u003cbr/\u003e\n      \u003cul\u003e\n      \u003cli\u003e\u003cb\u003eEthereum\u003c/b\u003e\u003c/li\u003e\n      \u003cli\u003e\u003cb\u003ePolygon (Matic)\u003c/b\u003e\u003c/li\u003e\n      \u003cli\u003e\u003cb\u003eKcs (KCS)\u003c/b\u003e\u003c/li\u003e\n      \u003cli\u003e\u003cb\u003eCelo\u003c/b\u003e\u003c/li\u003e\n      \u003cli\u003e\u003cb\u003eHarmony.ONE\u003c/b\u003e\u003c/li\u003e\n      \u003cli\u003e\u003cb\u003eBinance Smart Chain\u003c/b\u003e\u003c/li\u003e\n      \u003cli\u003e\u003cb\u003eAlgorand\u003c/b\u003e\u003c/li\u003e\n      \u003c/ul\u003e\n      \u003c/p\u003e\n    name: Blockchain / Multi Token (ERC-1155)\npaths:\n  /v3/multitoken/deploy:\n    post:\n      description: |\n        \u003cp\u003eDeploy Multi Token Smart Contract. This method creates new ERC1155 Smart Contract (Multi Tokens) on the blockchain. Smart contract is standardized and audited.\n        It is possible to mint, burn and transfer tokens. It is also possible to mint multiple tokens at once.\u003cbr/\u003e\n        Tatum now supports Multi Tokens on these blockchains:\u003cbr/\u003e\n        \u003cul\u003e\n        \u003cli\u003e\u003cb\u003eEthereum\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003ePolygon (Matic)\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eKcs (KCS)\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eCelo\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eHarmony.ONE\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eBinance Smart Chain\u003c/b\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n\n        This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key.\n        No one should ever send it's own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey\n        or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production,\n        \u003ca href=\"https://github.com/tatumio/tatum-kms\" target=\"_blank\"\u003eTatum KMS\u003c/a\u003e should be used for the highest security standards, and signatureId should be present in the request.\n        Alternatively, using the Tatum client library for supported languages.\n        \u003c/p\u003e\n      operationId: DeployMultiToken\n      parameters:\n        - description: \"Type of testnet. Defaults to ropsten. Valid only for ETH invocations.\"\n          in: header\n          name: x-testnet-type\n          required: false\n          schema:\n            default: ethereum-ropsten\n            type: string\n            enum:\n              - ethereum-ropsten\n              - ethereum-rinkeby\n      requestBody:\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: \"#/components/schemas/DeployMultiToken\"\n                - $ref: \"#/components/schemas/DeployMultiTokenKMS\"\n                - $ref: \"#/components/schemas/DeployMultiTokenCelo\"\n                - $ref: \"#/components/schemas/DeployMultiTokenCeloKMS\"\n        required: true\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/TransactionHashKMS\"\n                  - $ref: \"#/components/schemas/SignatureId\"\n          description: OK\n        400: \u0026API400\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error400\"\n          description: Bad Request. Validation failed for the given object in the HTTP Body or Request parameters.\n        401: \u0026API401\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/Error401NotActive\"\n                  - $ref: \"#/components/schemas/Error401Invalid\"\n          description: Unauthorized. Not valid or inactive subscription key present in the HTTP Header.\n        403: \u0026API403\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/Error403\"\n        500: \u0026API500\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error500\"\n          description: Internal server error. There was an error on the server during the processing of the request.\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Deploy Multi Token Smart Contract.\n      tags:\n        - Blockchain / Multi Token (ERC-1155)\n  /v3/multitoken/mint:\n    post:\n      description: |\n        \u003ch4\u003e2 credits per API call.\u003c/h4\u003e\u003cbr/\u003e\n        \u003cp\u003eMint a fixed amount of Multi Token and transfer it to destination account. Create and transfer any Multi Token token from smart contract defined in contractAddress.\n        It is possible to add Metadata to the created token with a more detailed information about it.\u003cbr/\u003e\u003cbr/\u003e\n        Tatum now supports Multi Token these blockchains:\u003cbr/\u003e\n        \u003cul\u003e\n        \u003cli\u003e\u003cb\u003eEthereum\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003ePolygon (Matic)\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eKcs (KCS)\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eCelo\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eHarmony.ONE\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eBinance Smart Chain\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eAlgorand\u003c/b\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n        This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key.\n        No one should ever send it's own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey\n        or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production,\n        \u003ca href=\"https://github.com/tatumio/tatum-kms\" target=\"_blank\"\u003eTatum KMS\u003c/a\u003e should be used for the highest security standards, and signatureId should be present in the request.\n        Alternatively, using the Tatum client library for supported languages.\n        \u003c/p\u003e\n      operationId: MintMultiToken\n      parameters:\n        - description: \"Type of testnet. Defaults to ropsten. Valid only for ETH invocations.\"\n          in: header\n          name: x-testnet-type\n          required: false\n          schema:\n            default: ethereum-ropsten\n            type: string\n            enum:\n              - ethereum-ropsten\n              - ethereum-rinkeby\n      requestBody:\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: \"#/components/schemas/MintMultiToken\"\n                - $ref: \"#/components/schemas/MintMultiTokenKMS\"\n                - $ref: \"#/components/schemas/MintMultiTokenCelo\"\n                - $ref: \"#/components/schemas/MintMultiTokenKMSCelo\"\n        required: true\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/TransactionHashKMS\"\n                  - $ref: \"#/components/schemas/SignatureId\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/Error403Celo\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Mint Multi Token\n      tags:\n        - Blockchain / Multi Token (ERC-1155)\n  /v3/multitoken/mint/batch:\n    post:\n      description: |\n        \u003ch4\u003e2 credits per API call.\u003c/h4\u003e\u003cbr/\u003e\n        \u003cp\u003eCreate a fixed amount of multiple Multi Tokens Tokens and transfer them to destination account in one transaction. Create and transfer Multi Tokens tokens from smart contract defined in contractAddress.\u003cbr/\u003e\u003cbr/\u003e\n        Tatum now supports Multi Tokens on these blockchains:\u003cbr/\u003e\n        \u003cul\u003e\n        \u003cli\u003e\u003cb\u003eEthereum\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003ePolygon (Matic)\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eKcs (KCS)\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eCelo\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eHarmony.ONE\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eBinance Smart Chain\u003c/b\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n        This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key.\n        No one should ever send it's own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey\n        or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production,\n        \u003ca href=\"https://github.com/tatumio/tatum-kms\" target=\"_blank\"\u003eTatum KMS\u003c/a\u003e should be used for the highest security standards, and signatureId should be present in the request.\n        Alternatively, using the Tatum client library for supported languages.\n        \u003c/p\u003e\n      operationId: MintMultiTokenBatch\n      parameters:\n        - description: \"Type of testnet. Defaults to ropsten. Valid only for ETH invocations.\"\n          in: header\n          name: x-testnet-type\n          required: false\n          schema:\n            default: ethereum-ropsten\n            type: string\n            enum:\n              - ethereum-ropsten\n              - ethereum-rinkeby\n      requestBody:\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: \"#/components/schemas/MintMultiTokenBatch\"\n                - $ref: \"#/components/schemas/MintMultiTokenBatchKMS\"\n                - $ref: \"#/components/schemas/MintMultiTokenBatchCelo\"\n                - $ref: \"#/components/schemas/MintMultiTokenBatchKMSCelo\"\n        required: true\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/TransactionHashKMS\"\n                  - $ref: \"#/components/schemas/SignatureId\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/Error403Celo\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Mint Multi Token Batch\n      tags:\n        - Blockchain / Multi Token (ERC-1155)\n  /v3/multitoken/burn:\n    post:\n      description: |\n        \u003ch4\u003e2 credits per API call.\u003c/h4\u003e\u003cbr/\u003e\n        \u003cp\u003eBurn a fixed amount of Multi Tokens by id. This method destroys Multi Tokens from smart contract defined in contractAddress.\u003cbr/\u003e\u003cbr/\u003e\n        Tatum now supports Multi Token these blockchains:\u003cbr/\u003e\n        \u003cul\u003e\n        \u003cli\u003e\u003cb\u003eEthereum\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003ePolygon (Matic)\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eKcs (Matic)\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eCelo\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eHarmony.ONE\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eBinance Smart Chain\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eAlgorand\u003c/b\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n        This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key.\n        No one should ever send it's own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey\n        or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production,\n        \u003ca href=\"https://github.com/tatumio/tatum-kms\" target=\"_blank\"\u003eTatum KMS\u003c/a\u003e should be used for the highest security standards, and signatureId should be present in the request.\n        Alternatively, using the Tatum client library for supported languages.\n        \u003c/p\u003e\n      operationId: BurnMultiToken\n      parameters:\n        - description: \"Type of testnet. Defaults to ropsten. Valid only for ETH invocations.\"\n          in: header\n          name: x-testnet-type\n          required: false\n          schema:\n            default: ethereum-ropsten\n            type: string\n            enum:\n              - ethereum-ropsten\n              - ethereum-rinkeby\n      requestBody:\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: \"#/components/schemas/BurnMultiToken\"\n                - $ref: \"#/components/schemas/BurnMultiTokenKMS\"\n                - $ref: \"#/components/schemas/BurnMultiTokenCelo\"\n                - $ref: \"#/components/schemas/BurnMultiTokenKMSCelo\"\n        required: true\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/TransactionHashKMS\"\n                  - $ref: \"#/components/schemas/SignatureId\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/Error403Celo\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Burn Multi Token\n      tags:\n        - Blockchain / Multi Token (ERC-1155)\n  /v3/multitoken/burn/batch:\n    post:\n      description: |\n        \u003ch4\u003e2 credits per API call.\u003c/h4\u003e\u003cbr/\u003e\n        \u003cp\u003eBurn multiple Multi Token Tokens by id assigned to same address in one transaction. This method destroys any Multi Tokens token from smart contract defined in contractAddress.\u003cbr/\u003e\u003cbr/\u003e\n        Tatum now supports Multi Tokens these blockchains:\u003cbr/\u003e\n        \u003cul\u003e\n        \u003cli\u003e\u003cb\u003eEthereum\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003ePolygon (Matic)\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eKcs (KCS)\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eCelo\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eHarmony.ONE\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eBinance Smart Chain\u003c/b\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n        This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key.\n        No one should ever send it's own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey\n        or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production,\n        \u003ca href=\"https://github.com/tatumio/tatum-kms\" target=\"_blank\"\u003eTatum KMS\u003c/a\u003e should be used for the highest security standards, and signatureId should be present in the request.\n        Alternatively, using the Tatum client library for supported languages.\n        \u003c/p\u003e\n      operationId: BurnMultiTokenBatch\n      parameters:\n        - description: \"Type of testnet. Defaults to ropsten. Valid only for ETH invocations.\"\n          in: header\n          name: x-testnet-type\n          required: false\n          schema:\n            default: ethereum-ropsten\n            type: string\n            enum:\n              - ethereum-ropsten\n              - ethereum-rinkeby\n      requestBody:\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: \"#/components/schemas/BurnMultiTokenBatch\"\n                - $ref: \"#/components/schemas/BurnMultiTokenBatchKMS\"\n                - $ref: \"#/components/schemas/BurnMultiTokenBatchCelo\"\n                - $ref: \"#/components/schemas/BurnMultiTokenBatchKMSCelo\"\n        required: true\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/TransactionHashKMS\"\n                  - $ref: \"#/components/schemas/SignatureId\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/Error403Celo\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Burn Multi Token Batch\n      tags:\n        - Blockchain / Multi Token (ERC-1155)\n  /v3/multitoken/transaction:\n    post:\n      description: |\n        \u003ch4\u003e2 credits per API call.\u003c/h4\u003e\u003cbr/\u003e\n        \u003cp\u003eTransfer a certain amount of Multi Token from account to another account. Transfer Multi Tokens token from smart contract defined in contractAddress.\n        Only 1 specific token with specified tokenId and value can be transfered. This method invokes ERC1155 method safeTransfer() to transfer the token in case of ETH, Celo and BSC.\u003cbr/\u003e\u003cbr/\u003e\n        Tatum now supports Multi Token these blockchains:\u003cbr/\u003e\n        \u003cul\u003e\n        \u003cli\u003e\u003cb\u003eEthereum\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003ePolygon (Matic)\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eKcs (KCS)\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eCelo\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eHarmony.ONE\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eBinance Smart Chain\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eAlgorand\u003c/b\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n        This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key.\n        No one should ever send it's own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey\n        or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production,\n        \u003ca href=\"https://github.com/tatumio/tatum-kms\" target=\"_blank\"\u003eTatum KMS\u003c/a\u003e should be used for the highest security standards, and signatureId should be present in the request.\n        Alternatively, using the Tatum client library for supported languages.\n        \u003c/p\u003e\n      operationId: TransferMultiToken\n      parameters:\n        - description: \"Type of testnet. Defaults to ropsten. Valid only for ETH invocations.\"\n          in: header\n          name: x-testnet-type\n          required: false\n          schema:\n            default: ethereum-ropsten\n            type: string\n            enum:\n              - ethereum-ropsten\n              - ethereum-rinkeby\n      requestBody:\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: \"#/components/schemas/TransferMultiToken\"\n                - $ref: \"#/components/schemas/TransferMultiTokenCelo\"\n                - $ref: \"#/components/schemas/TransferMultiTokenKMS\"\n                - $ref: \"#/components/schemas/TransferMultiTokenKMSCelo\"\n        required: true\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/TransactionHashKMS\"\n                  - $ref: \"#/components/schemas/SignatureId\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/Error403Celo\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Transfer Multi Token Token\n      tags:\n        - Blockchain / Multi Token (ERC-1155)\n  /v3/multitoken/transaction/batch:\n    post:\n      description: |\n        \u003ch4\u003e2 credits per API call.\u003c/h4\u003e\u003cbr/\u003e\n        \u003cp\u003eTransfer Multi Token Batch from account to various other accounts in one transaction. Transfer multiple Multi Tokens token from smart contract defined in contractAddress.\n        Multiple token with specified tokenIds and values can be transfered. This method invokes ERC1155 method safeTransfer() to transfer the token in case of ETH, Celo and BSC.\u003cbr/\u003e\u003cbr/\u003e\n        Tatum now supports Multi Tokens these blockchains:\u003cbr/\u003e\n        \u003cul\u003e\n        \u003cli\u003e\u003cb\u003eEthereum\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003ePolygon (Matic)\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eKcs (KCS)\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eCelo\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eHarmony.ONE\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eBinance Smart Chain\u003c/b\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n        This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key.\n        No one should ever send it's own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey\n        or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production,\n        \u003ca href=\"https://github.com/tatumio/tatum-kms\" target=\"_blank\"\u003eTatum KMS\u003c/a\u003e should be used for the highest security standards, and signatureId should be present in the request.\n        Alternatively, using the Tatum client library for supported languages.\n        \u003c/p\u003e\n      operationId: TransferMultiTokenBatch\n      parameters:\n        - description: \"Type of testnet. Defaults to ropsten. Valid only for ETH invocations.\"\n          in: header\n          name: x-testnet-type\n          required: false\n          schema:\n            default: ethereum-ropsten\n            type: string\n            enum:\n              - ethereum-ropsten\n              - ethereum-rinkeby\n      requestBody:\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: \"#/components/schemas/TransferMultiTokenBatch\"\n                - $ref: \"#/components/schemas/TransferMultiTokenBatchKMS\"\n                - $ref: \"#/components/schemas/TransferMultiTokenBatchCelo\"\n                - $ref: \"#/components/schemas/TransferMultiTokenBatchKMSCelo\"\n        required: true\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/TransactionHashKMS\"\n                  - $ref: \"#/components/schemas/SignatureId\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/Error403Celo\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Transfer Multi Token Batch\n      tags:\n        - Blockchain / Multi Token (ERC-1155)\n  /v3/multitoken/mint/add:\n    post:\n      description: |\n        \u003ch4\u003e2 credits per API call.\u003c/h4\u003e\u003cbr/\u003e\n        \u003cp\u003eAdd Multi Token minter.\u003cbr/\u003e\u003cbr/\u003e\n        Tatum now supports Multi Tokens these blockchains:\u003cbr/\u003e\n        \u003cul\u003e\n        \u003cli\u003e\u003cb\u003eEthereum\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003ePolygon (Matic)\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eKcs (KCS)\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eCelo\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eHarmony.ONE\u003c/b\u003e\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003eBinance Smart Chain\u003c/b\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n        This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key.\n        No one should ever send it's own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey\n        or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production,\n        \u003ca href=\"https://github.com/tatumio/tatum-kms\" target=\"_blank\"\u003eTatum KMS\u003c/a\u003e should be used for the highest security standards, and signatureId should be present in the request.\n        Alternatively, using the Tatum client library for supported languages.\n        \u003c/p\u003e\n      operationId: AddMultiTokenMinter\n      parameters:\n        - description: \"Type of testnet. Defaults to ropsten. Valid only for ETH invocations.\"\n          in: header\n          name: x-testnet-type\n          required: false\n          schema:\n            default: ethereum-ropsten\n            type: string\n            enum:\n              - ethereum-ropsten\n              - ethereum-rinkeby\n      requestBody:\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: \"#/components/schemas/AddMultiTokenMinter\"\n                - $ref: \"#/components/schemas/AddMultiTokenMinterKMS\"\n        required: true\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/TransactionHashKMS\"\n                  - $ref: \"#/components/schemas/SignatureId\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/Error403Celo\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Add Multi Token miter\n      tags:\n        - Blockchain / Multi Token (ERC-1155)\n  /v3/multitoken/transaction/{chain}/{address}/{tokenAddress}:\n    get:\n      description: \"\u003ch4\u003e1 credit per API call.\u003c/h4\u003e\u003cbr/\u003e\u003cp\u003eGet Multi Token (ERC-1155) transactions by address. This includes incoming and outgoing transactions for the address.\u003c/p\u003e\"\n      operationId: MultiTokenGetTransactionByAddress\n      parameters:\n        - description: \"Blockchain to work with\"\n          in: path\n          name: chain\n          required: true\n          schema:\n            type: string\n            enum:\n              - CELO\n              - ETH\n              - MATIC\n            example: CELO\n        - description: \"Account address\"\n          in: path\n          name: address\n          required: true\n          schema:\n            type: string\n            example: \"0x8ce4e40889a13971681391aad29e88efaf91f784\"\n        - description: \"Token address\"\n          in: path\n          name: tokenAddress\n          required: true\n          schema:\n            type: string\n            example: \"0x1ce4e40889a13971681391aad29e88efaf91f784\"\n        - description: Max number of items per page is 50.\n          in: query\n          name: pageSize\n          schema:\n            type: number\n            example: 10\n            maximum: 50\n            minimum: 1\n          required: true\n        - description: Offset to obtain next page of the data.\n          in: query\n          name: offset\n          schema:\n            type: number\n            example: 0\n        - description: Transactions from this block onwords will be included.\n          in: query\n          name: from\n          schema:\n            type: number\n            minimum: 0\n            example: 1087623\n        - description: Transactions up to this block will be included.\n          in: query\n          name: to\n          schema:\n            type: number\n            minimum: 0\n            example: 1087823\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  oneOf:\n                    - $ref: \"#/components/schemas/MultiTx\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Get Multi Token transactions by address\n      tags:\n        - Blockchain / Multi Token (ERC-1155)\n  /v3/multitoken/address/{chain}/{hash}:\n    get:\n      description: |\n        \u003ch4\u003e1 credit per API call.\u003c/h4\u003e\u003cbr/\u003e\n        \u003cp\u003eGet Multi Token contract address from deploy transaction. This method is deprecated, use \u003ca href=\"#operation/SCGetContractAddress\"\u003eGet contract address\u003c/a\u003e instead.\u003c/p\u003e\n      deprecated: true\n      operationId: MultiTokenGetContractAddress\n      parameters:\n        - description: Blockchain to work with\n          in: path\n          name: chain\n          required: true\n          schema:\n            type: string\n            enum:\n              - ETH\n              - MATIC\n              - KCS\n              - ONE\n              - CELO\n              - BSC\n        - description: \"Transaction hash\"\n          in: path\n          name: hash\n          required: true\n          schema:\n            type: string\n            example: \"0xe6e7340394958674cdf8606936d292f565e4ecc476aaa8b258ec8a141f7c75d7\"\n        - description: \"Type of testnet. Defaults to ropsten. Valid only for ETH invocations.\"\n          in: header\n          name: x-testnet-type\n          required: false\n          schema:\n            default: ethereum-ropsten\n            type: string\n            enum:\n              - ethereum-ropsten\n              - ethereum-rinkeby\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  contractAddress:\n                    type: string\n                    description: Address of the Multi Token token.\n                    example: \"0xc21C81ef03f98898Fb155E00C364e8a7b9D158b8\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/Error403TxNotFound\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Get Contract address\n      tags:\n        - Blockchain / Multi Token (ERC-1155)\n  /v3/multitoken/transaction/{chain}/{hash}:\n    get:\n      description: \"\u003ch4\u003e1 credit per API call.\u003c/h4\u003e\u003cbr/\u003e\u003cp\u003eGet Multi Token transaction by transaction hash.\u003c/p\u003e\"\n      operationId: MultiTokenGetTransaction\n      parameters:\n        - description: Blockchain to work with\n          in: path\n          name: chain\n          required: true\n          schema:\n            type: string\n            enum:\n              - ETH\n              - MATIC\n              - KCS\n              - ONE\n              - CELO\n              - BSC\n        - description: \"Transaction hash\"\n          in: path\n          name: hash\n          required: true\n          schema:\n            type: string\n            example: \"0xe6e7340394958674cdf8606936d292f565e4ecc476aaa8b258ec8a141f7c75d7\"\n        - description: \"Type of testnet. Defaults to ropsten. Valid only for ETH invocations.\"\n          in: header\n          name: x-testnet-type\n          required: false\n          schema:\n            default: ethereum-ropsten\n            type: string\n            enum:\n              - ethereum-ropsten\n              - ethereum-rinkeby\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/CeloTx\"\n                  - $ref: \"#/components/schemas/EthTx\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/Error403TxNotFound\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Get Transaction\n      tags:\n        - Blockchain / Multi Token (ERC-1155)\n  /v3/multitoken/address/balance/{chain}/{address}:\n    get:\n      description: |\n        \u003ch4\u003e1 credit per API call.\u003c/h4\u003e\u003cbr/\u003e\u003cp\u003eGet Multi Tokens on address. Returns all tokenIDs of all contracts this address holds.\u003c/p\u003e\n      operationId: MultiTokenGetAddressBalance\n      parameters:\n        - description: Blockchain to work with\n          in: path\n          name: chain\n          required: true\n          schema:\n            type: string\n            enum:\n              - ETH\n              - MATIC\n              - CELO\n            example: ETH\n        - description: \"Blockchain address\"\n          in: path\n          name: address\n          required: true\n          schema:\n            type: string\n            example: \"0x3223AEB8404C7525FcAA6C512f91e287AE9FfE7B\"\n        - description: \"Type of testnet. Defaults to ropsten. Valid only for ETH invocations.\"\n          in: header\n          name: x-testnet-type\n          required: false\n          schema:\n            default: ethereum-ropsten\n            type: string\n            enum:\n              - ethereum-ropsten\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    contractAddress:\n                      type: string\n                      example: \"0x771987a5add0ef1ce303aa069df82dd7f8fbb33b\"\n                      description: Contract address of the Multi Token\n                    balances:\n                      type: array\n                      items:\n                        type: object\n                        properties:\n                          tokenId:\n                            type: string\n                            description: Token ID.\n                            example: \"10\"\n                          amount:\n                            type: string\n                            description: Number of tokens held by the address.\n                            example: \"17\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error403Celo\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Get Multi Tokens by Address\n      tags:\n        - Blockchain / Multi Token (ERC-1155)\n  /v3/multitoken/balance/{chain}/{contractAddress}/{address}/{tokenId}:\n    get:\n      description: |\n        \u003ch4\u003e1 credit per API call.\u003c/h4\u003e\u003cbr/\u003e\u003cp\u003eGet Multi Tokens on Account. Returns tokenIDs of tokens Account holds.\u003c/p\u003e\n      operationId: MultiTokenGetBalance\n      parameters:\n        - description: Blockchain to work with\n          in: path\n          name: chain\n          required: true\n          schema:\n            type: string\n            enum:\n              - ETH\n              - MATIC\n              - KCS\n              - ONE\n              - CELO\n              - BSC\n        - description: \"Account address\"\n          in: path\n          name: address\n          required: true\n          schema:\n            type: string\n            example: \"0x3223AEB8404C7525FcAA6C512f91e287AE9FfE7B\"\n        - description: \"Multi Token contract address\"\n          in: path\n          name: contractAddress\n          required: true\n          schema:\n            type: string\n            example: \"0x94Ce79B9F001E25BBEbE7C01998A78F7B27D1326\"\n        - description: \"Multi Token tokenID\"\n          in: path\n          name: tokenId\n          required: true\n          schema:\n            type: string\n            example: \"100\"\n        - description: \"Type of testnet. Defaults to ropsten. Valid only for ETH invocations.\"\n          in: header\n          name: x-testnet-type\n          required: false\n          schema:\n            default: ethereum-ropsten\n            type: string\n            enum:\n              - ethereum-ropsten\n              - ethereum-rinkeby\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n                  description: Token ID.\n                  example: \"10\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error403Celo\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Get Multi Token Account balance\n      tags:\n        - Blockchain / Multi Token (ERC-1155)\n  /v3/multitoken/balance/batch/{chain}/{contractAddress}:\n    get:\n#      deprecated: true\n      description: |\n        \u003ch4\u003e1 credit per API call.\u003c/h4\u003e\u003cbr/\u003e\u003cp\u003eGet Multi Tokens on Account. Returns tokenIDs of tokens Account holds.\u003c/p\u003e\n#        \u003ch4\u003e1 credit per API call.\u003c/h4\u003e\u003cbr/\u003e\u003cp\u003eGet Multi Tokens on Account. Returns tokenIDs of tokens Account holds. This method is deprecated, use \u003ca href=\"#operation/MultiTokenGetAddressBalance\"\u003eGet contract address\u003c/a\u003e instead.\u003c/p\u003e\n      operationId: MultiTokenGetBalanceBatch\n      parameters:\n        - description: Blockchain to work with\n          in: path\n          name: chain\n          required: true\n          schema:\n            type: string\n            enum:\n              - ETH\n              - MATIC\n              - KCS\n              - ONE\n              - CELO\n              - BSC\n        - description: \"Multi Token contract address\"\n          in: path\n          name: contractAddress\n          required: true\n          schema:\n            type: string\n            example: \"0x94Ce79B9F001E25BBEbE7C01998A78F7B27D1326\"\n        - description: \"Comma separated TokenIds to get balance for\"\n          in: query\n          name: tokenId\n          required: true\n          schema:\n            type: string\n            example: \"1,2,3\"\n        - description: \"Comma separated addresses to get balance for\"\n          in: query\n          name: address\n          required: true\n          schema:\n            type: string\n            example: \"0x3223AEB8404C7525FcAA6C512f91e287AE9FfE7B,0x3223AEB8404C7525FcAA6C512f91e287AE9FfE7B,0x3223AEB8404C7525FcAA6C512f91e287AE9FfE7B\"\n        - description: \"Type of testnet. Defaults to ropsten. Valid only for ETH invocations.\"\n          in: header\n          name: x-testnet-type\n          required: false\n          schema:\n            default: ethereum-ropsten\n            type: string\n            enum:\n              - ethereum-ropsten\n              - ethereum-rinkeby\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                type: array\n                example: [\"10\",\"20\"]\n                items:\n                  type: string\n                  description: Token ID.\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error403Celo\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Get Multi Token Account balance Batch\n      tags:\n        - Blockchain / Multi Token (ERC-1155)\n  /v3/multitoken/metadata/{chain}/{contractAddress}/{token}:\n    get:\n      description: \"\u003ch4\u003e1 credit per API call.\u003c/h4\u003e\u003cbr/\u003e\u003cp\u003eGet Multi Token metadata.\u003c/p\u003e\"\n      operationId: MultiTokenGetMetadata\n      parameters:\n        - description: Blockchain to work with\n          in: path\n          name: chain\n          required: true\n          schema:\n            type: string\n            enum:\n              - ETH\n              - MATIC\n              - KCS\n              - ONE\n              - CELO\n              - BSC\n        - description: \"Token ID\"\n          in: path\n          name: token\n          required: true\n          schema:\n            type: string\n            example: \"1\"\n            maxLength: 32\n        - description: \"Multi Token contract address\"\n          in: path\n          name: contractAddress\n          required: true\n          schema:\n            type: string\n            example: \"0x94Ce79B9F001E25BBEbE7C01998A78F7B27D1326\"\n        - description: \"Type of testnet. Defaults to ropsten. Valid only for ETH invocations.\"\n          in: header\n          name: x-testnet-type\n          required: false\n          schema:\n            default: ethereum-ropsten\n            type: string\n            enum:\n              - ethereum-ropsten\n              - ethereum-rinkeby\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: string\n                    description: Metadata associated with token.\n                    example: \"https://my_token_data.com\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error403Celo\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Get Multi Token Token Metadata\n      tags:\n        - Blockchain / Multi Token (ERC-1155)\ncomponents:\n  securitySchemes:\n    X-Api-Key:\n      description: |\n        To maintain the highest security level, Tatum requires X-API-Key HTTP header.\n        This X-API-Key represents identification of the plan and can be used by 1 developer or per environment.\n        Each X-API-Key is bound to the test or production blockchains.\n      in: header\n      name: x-api-key\n      type: apiKey\n  schemas:\n    TransferMultiTokenCelo:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: CELO\n          description: Chain to work with.\n          enum:\n            - CELO\n        to:\n          maxLength: 42\n          minLength: 42\n          description: Blockchain address to send Multi Token token to\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        tokenId:\n          description: ID of token.\n          example: \"100000\"\n          type: string\n          maxLength: 256\n        amount:\n          description: Amount of token.\n          example: \"100000\"\n          type: string\n          maxLength: 256\n        data:\n          description: Data in bytes\n          example: \"0x1234\"\n          type: string\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of Multi Token token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        fromPrivateKey:\n          type: string\n          maxLength: 66\n          example: \"0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2\"\n          minLength: 66\n          description: Private key of sender address. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          example: 1\n          description: Nonce to be set to Celo transaction. If not present, last known nonce will be used.\n        feeCurrency:\n          type: string\n          description: Currency to pay for transaction gas\n          enum:\n            - CELO\n            - CUSD\n            - CEUR\n      required:\n        - chain\n        - to\n        - contractAddress\n        - tokenId\n        - fromPrivateKey\n    MultiTx:\n      type: object\n      properties:\n        blockNumber:\n          type: number\n          example: 6541235\n          description: Block number\n        txId:\n          type: string\n          example: \"0x955c1037608c7aecb6d1a3f150ce7d0a80536bcabb0deb69d62f55292cc4c372\"\n          description: Transaction ID\n        contractAddress:\n          type: string\n          example: \"0x4f54fAD27F7F46C102Cd49b8E75C5593397cd9c3\"\n          description: Contract address\n        tokenId:\n          type: string\n          example: \"1\"\n          description: ID of the token\n        amount:\n          type: string\n          example: \"1\"\n          description: Amount of tokens transferred.\n        from:\n          type: string\n          example: \"0x780c3de0aba1b51f04cfe8a5d9d277d4ad032b8d\"\n          description: Sender\n        operator:\n          type: string\n          example: \"0x780c3de0aba1b51f04cfe8a5d9d277d4ad032b8d\"\n          description: Operator\n        to:\n          type: string\n          example: \"0x8cb76aed9c5e336ef961265c6079c14e9cd3d2ea\"\n          description: recipient\n      required:\n        - blockNumber\n        - txId\n        - contractAddress\n        - tokenId\n        - from\n        - to\n        - amount\n        - operator\n    TransferMultiTokenBatchCelo:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: CELO\n          description: Chain to work with.\n          enum:\n            - CELO\n        to:\n          maxLength: 42\n          minLength: 42\n          description: Blockchain address to send Multi Token token to\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        tokenId:\n          description: ID of token.\n          example: [\"100000\"]\n          type: array\n          items:\n            type: string\n            maxLength: 32\n        amounts:\n          description: Amount of token to be transferred\n          example: [\"100000\"]\n          type: array\n          items:\n            type: string\n            maxLength: 32\n        data:\n          description: Data in bytes\n          example: \"0x1234\"\n          type: string\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of Multi Token token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        fromPrivateKey:\n          type: string\n          maxLength: 66\n          example: \"0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2\"\n          minLength: 66\n          description: Private key of sender address. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          example: 1\n          description: Nonce to be set to Celo transaction. If not present, last known nonce will be used.\n        feeCurrency:\n          type: string\n          description: Currency to pay for transaction gas\n          enum:\n            - CELO\n            - CUSD\n            - CEUR\n      required:\n        - chain\n        - to\n        - contractAddress\n        - tokenId\n        - amounts\n        - fromPrivateKey\n    DeployMultiTokenCelo:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: CELO\n          description: Chain to work with.\n          enum:\n            - CELO\n        uri:\n          description: URI of the Multi Token contract\n          example: example.com\n          maxLength: 100\n          minLength: 1\n          type: string\n        publicMint:\n          description: True if the contract is publicMint type\n          example: true\n          type: boolean\n        fromPrivateKey:\n          description: Private key of account address, from which gas for deployment of ERC1155 will be paid. Private key, or signature Id must be present.\n          type: string\n          maxLength: 66\n          example: \"0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2\"\n          minLength: 66\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to transaction. If not present, last known nonce will be used.\n        feeCurrency:\n          type: string\n          description: Currency to pay for transaction gas\n          enum:\n            - CELO\n            - CUSD\n            - CEUR\n      required:\n        - chain\n        - uri\n        - feeCurrency\n        - fromPrivateKey\n    DeployMultiTokenCeloKMS:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: CELO\n          description: Chain to work with.\n          enum:\n            - CELO\n        uri:\n          description: URI of the Multi Token contract\n          example: example.com\n          maxLength: 100\n          minLength: 1\n          type: string\n        publicMint:\n          description: True if the contract is publicMint type\n          example: true\n          type: boolean\n        index:\n          type: number\n          minimum: 0\n          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n        feeCurrency:\n          type: string\n          description: Currency to pay for transaction gas\n          enum:\n            - CELO\n            - CUSD\n            - CEUR\n      required:\n        - chain\n        - uri\n        - feeCurrency\n        - signatureId\n    MintMultiTokenBatchKMSCelo:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: CELO\n          description: Chain to work with.\n          enum:\n            - CELO\n        to:\n          type: array\n          description: Blockchain address to send Multi Token token to.\n          example: [ \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\" ]\n          items:\n            maxLength: 42\n            minLength: 42\n            type: string\n        tokenId:\n          type: array\n          description: ID of token to be created.\n          example: [[ \"100000\",\"100001\" ]]\n          items:\n            type: array\n            items:\n              type: string\n              maxLength: 32\n        amounts:\n          type: array\n          description: ID of token to be created.\n          example: [[ \"100\",\"100\" ]]\n          items:\n            type: array\n            items:\n              type: string\n              maxLength: 32\n        data:\n          description: Data in bytes\n          example: \"0x1234\"\n          type: string\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of Multi Token token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        index:\n          type: number\n          minimum: 0\n          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Celo transaction. If not present, last known nonce will be used.\n        feeCurrency:\n          type: string\n          description: Currency to pay for transaction gas\n          enum:\n            - CELO\n            - CUSD\n            - CEUR\n      required:\n        - chain\n        - to\n        - contractAddress\n        - feeCurrency\n        - tokenId\n        - amounts\n        - signatureId\n    BurnMultiTokenCelo:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: CELO\n          description: Chain to work with.\n          enum:\n            - CELO\n        account:\n          maxLength: 42\n          minLength: 42\n          description: Address of holder\n          example: \"0x4b812a77b109A150C2Fc89eD133EaBC78bC9EC8f\"\n          type: string\n        tokenId:\n          description: ID of token to be destroyed.\n          example: \"100000\"\n          type: string\n          maxLength: 32\n        amount:\n          description: amount of token to be destroyed.\n          example: \"100000\"\n          type: string\n          maxLength: 32\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of Multi Token token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        fromPrivateKey:\n          type: string\n          maxLength: 66\n          example: \"0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2\"\n          minLength: 66\n          description: Private key of sender address. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Celo transaction. If not present, last known nonce will be used.\n        feeCurrency:\n          type: string\n          description: Currency to pay for transaction gas\n          enum:\n            - CELO\n            - CUSD\n            - CEUR\n      required:\n        - chain\n        - contractAddress\n        - feeCurrency\n        - fromPrivateKey\n        - tokenId\n        - amount\n        - account\n    BurnMultiTokenBatchCelo:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: CELO\n          description: Chain to work with.\n          enum:\n            - CELO\n        account:\n          maxLength: 42\n          minLength: 42\n          description: Address of holder\n          example: \"0x4b812a77b109A150C2Fc89eD133EaBC78bC9EC8f\"\n          type: string\n        tokenId:\n          description: ID of token to be destroyed.\n          example: [\"100000\"]\n          type: array\n          items:\n            type: string\n            maxLength: 32\n        amounts:\n          description: amounts of token to be destroyed.\n          example: [\"100000\"]\n          type: array\n          items:\n            type: string\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of Multi Token token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        fromPrivateKey:\n          type: string\n          maxLength: 66\n          example: \"0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2\"\n          minLength: 66\n          description: Private key of sender address. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Celo transaction. If not present, last known nonce will be used.\n        feeCurrency:\n          type: string\n          description: Currency to pay for transaction gas\n          enum:\n            - CELO\n            - CUSD\n            - CEUR\n      required:\n        - chain\n        - contractAddress\n        - feeCurrency\n        - fromPrivateKey\n        - tokenId\n        - amounts\n        - account\n    BurnMultiTokenKMSCelo:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: CELO\n          description: Chain to work with.\n          enum:\n            - CELO\n        account:\n          maxLength: 42\n          minLength: 42\n          description: Address of holder\n          example: \"0x4b812a77b109A150C2Fc89eD133EaBC78bC9EC8f\"\n          type: string\n        tokenId:\n          description: ID of token to be destroyed.\n          example: \"100000\"\n          type: string\n          maxLength: 32\n        amount:\n          description: amount of token to be destroyed.\n          example: \"100000\"\n          type: string\n          maxLength: 32\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of Multi Token token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        index:\n          type: number\n          minimum: 0\n          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Celo transaction. If not present, last known nonce will be used.\n        feeCurrency:\n          type: string\n          description: Currency to pay for transaction gas\n          enum:\n            - CELO\n            - CUSD\n            - CEUR\n      required:\n        - chain\n        - feeCurrency\n        - contractAddress\n        - tokenId\n        - amount\n        - signatureId\n        - account\n    AddMultiTokenMinterKMS:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: ETH\n          description: Chain to work with.\n          enum:\n            - ETH\n            - MATIC\n            - KCS\n            - CELO\n            - ONE\n            - BSC\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of MultiToken token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        minter:\n          maxLength: 42\n          minLength: 42\n          description: Address of MultiToken minter\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        index:\n          type: number\n          minimum: 0\n          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Ethereum transaction. If not present, last known nonce will be used.\n        fee:\n          description: Custom defined fee. If not present, it will be calculated automatically.\n          type: object\n          required:\n            - gasLimit\n            - gasPrice\n          properties:\n            gasLimit:\n              type: string\n              description: Gas limit for transaction in gas price.\n              pattern: ^[+]?\\d+$\n              example: \"40000\"\n            gasPrice:\n              type: string\n              description: Gas price in Gwei.\n              pattern: ^[+]?\\d+$\n              example: \"20\"\n        feeCurrency:\n          type: string\n          description: Currency to pay for transaction gas, only valid for CELO chain.\n          enum:\n            - CELO\n            - CUSD\n            - CEUR\n      required:\n        - chain\n        - url\n        - contractAddress\n        - minter\n        - signatureId\n    AddMultiTokenMinter:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: ETH\n          description: Chain to work with.\n          enum:\n            - ETH\n            - MATIC\n            - KCS\n            - CELO\n            - ONE\n            - BSC\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of MultiToken token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        minter:\n          maxLength: 42\n          minLength: 42\n          description: Address of MultiToken minter\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        fromPrivateKey:\n          type: string\n          maxLength: 66\n          example: \"0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2\"\n          minLength: 66\n          description: Private key of sender address. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Ethereum transaction. If not present, last known nonce will be used.\n        fee:\n          description: Custom defined fee. If not present, it will be calculated automatically.\n          type: object\n          required:\n            - gasLimit\n            - gasPrice\n          properties:\n            gasLimit:\n              type: string\n              description: Gas limit for transaction in gas price.\n              pattern: ^[+]?\\d+$\n              example: \"40000\"\n            gasPrice:\n              type: string\n              description: Gas price in Gwei.\n              pattern: ^[+]?\\d+$\n              example: \"20\"\n        feeCurrency:\n          type: string\n          description: Currency to pay for transaction gas, only valid for CELO chain.\n          enum:\n            - CELO\n            - CUSD\n            - CEUR\n      required:\n        - minter\n        - chain\n        - url\n        - contractAddress\n        - fromPrivateKey\n    BurnMultiTokenBatchKMSCelo:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: CELO\n          description: Chain to work with.\n          enum:\n            - CELO\n        account:\n          maxLength: 42\n          minLength: 42\n          description: Address of holder\n          example: \"0x4b812a77b109A150C2Fc89eD133EaBC78bC9EC8f\"\n          type: string\n        tokenId:\n          description: IDs of token to be destroyed.\n          example: [\"100000\"]\n          type: array\n          items:\n            type: string\n            maxLength: 32\n        amounts:\n          description: amounts of token to be destroyed.\n          example: [\"100000\"]\n          type: array\n          items:\n            type: string\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of Multi Token token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        index:\n          type: number\n          minimum: 0\n          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Celo transaction. If not present, last known nonce will be used.\n        feeCurrency:\n          type: string\n          description: Currency to pay for transaction gas\n          enum:\n            - CELO\n            - CUSD\n            - CEUR\n      required:\n        - chain\n        - feeCurrency\n        - contractAddress\n        - tokenId\n        - amount\n        - account\n        - signatureId\n    TransferMultiTokenKMSCelo:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: CELO\n          description: Chain to work with.\n          enum:\n            - CELO\n        to:\n          maxLength: 42\n          minLength: 42\n          description: Blockchain address to send Multi Token token to\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        tokenId:\n          description: ID of token.\n          example: \"100000\"\n          type: string\n          maxLength: 256\n        amount:\n          description: amount of token.\n          example: \"100000\"\n          type: string\n        data:\n          description: Data in bytes\n          example: \"0x1234\"\n          type: string\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of Multi Token token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        index:\n          type: number\n          minimum: 0\n          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          example: 1\n          description: Nonce to be set to Celo transaction. If not present, last known nonce will be used.\n        feeCurrency:\n          type: string\n          description: Currency to pay for transaction gas\n          enum:\n            - CELO\n            - CUSD\n            - CEUR\n      required:\n        - chain\n        - to\n        - contractAddress\n        - feeCurrency\n        - signatureId\n        - tokenId\n        - amount\n    TransferMultiTokenBatchKMSCelo:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: CELO\n          description: Chain to work with.\n          enum:\n            - CELO\n        to:\n          maxLength: 42\n          minLength: 42\n          description: Blockchain address to send Multi Token token to\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        tokenId:\n          description: ID of token.\n          example: [\"100000\"]\n          type: array\n          items:\n            type: string\n        amounts:\n          description: amounts of token.\n          example: [\"100000\"]\n          type: array\n          items:\n            type: string\n        data:\n          description: Data in bytes\n          example: \"0x1234\"\n          type: string\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of Multi Token token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        index:\n          type: number\n          minimum: 0\n          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          example: 1\n          description: Nonce to be set to Celo transaction. If not present, last known nonce will be used.\n        feeCurrency:\n          type: string\n          description: Currency to pay for transaction gas\n          enum:\n            - CELO\n            - CUSD\n            - CEUR\n      required:\n        - chain\n        - to\n        - contractAddress\n        - feeCurrency\n        - signatureId\n        - tokenId\n        - amounts\n    MintMultiTokenCelo:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: CELO\n          description: Chain to work with.\n          enum:\n            - CELO\n        tokenId:\n          description: ID of token to be created.\n          example: \"100000\"\n          type: string\n          maxLength: 32\n        amount:\n          description: amount of token to be created.\n          example: \"100000\"\n          type: string\n        to:\n          maxLength: 42\n          minLength: 42\n          description: Blockchain address to send Multi Token token to\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of Multi Token token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        data:\n          description: Data in bytes\n          example: \"0x1234\"\n          type: string\n        fromPrivateKey:\n          type: string\n          maxLength: 66\n          example: \"0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2\"\n          minLength: 66\n          description: Private key of sender address. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Celo transaction. If not present, last known nonce will be used.\n        feeCurrency:\n          type: string\n          description: Currency to pay for transaction gas\n          enum:\n            - CELO\n            - CUSD\n            - CEUR\n      required:\n        - chain\n        - to\n        - tokenId\n        - amount\n        - feeCurrency\n        - contractAddress\n        - fromPrivateKey\n    MintMultiTokenBatchCelo:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: CELO\n          description: Chain to work with.\n          enum:\n            - CELO\n        tokenId:\n          type: array\n          description: ID of token to be created.\n          example: [[ \"100000\",\"100001\" ]]\n          items:\n            type: array\n            items:\n              type: string\n              maxLength: 32\n        amounts:\n          type: array\n          description: ID of token to be created.\n          example: [[ \"100\",\"100\" ]]\n          items:\n            type: array\n            items:\n              type: string\n              maxLength: 32\n        data:\n          description: Data in bytes\n          example: \"0x1234\"\n          type: string\n        to:\n          maxLength: 42\n          minLength: 42\n          description: Blockchain address to send Multi Token token to\n          example: ['0x4b812a77b109A150C2Fc89eD133EaBC78bC9EC8f']\n          type: array\n          items:\n            type: string\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of Multi Token token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        fromPrivateKey:\n          type: string\n          maxLength: 66\n          example: \"0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2\"\n          minLength: 66\n          description: Private key of sender address. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Celo transaction. If not present, last known nonce will be used.\n        feeCurrency:\n          type: string\n          description: Currency to pay for transaction gas\n          enum:\n            - CELO\n            - CUSD\n            - CEUR\n      required:\n        - chain\n        - to\n        - tokenId\n        - amounts\n        - feeCurrency\n        - contractAddress\n        - fromPrivateKey\n    MintMultiTokenKMSCelo:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: CELO\n          description: Chain to work with.\n          enum:\n            - CELO\n        tokenId:\n          description: ID of token to be created.\n          example: \"100000\"\n          type: string\n          maxLength: 32\n        amount:\n          description: amount of token to be created.\n          example: \"100000\"\n          type: string\n          maxLength: 32\n        to:\n          maxLength: 42\n          minLength: 42\n          description: Blockchain address to send Multi Token token to\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of Multi Token token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        data:\n          description: Data in bytes\n          example: \"0x1234\"\n          type: string\n        index:\n          type: number\n          minimum: 0\n          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Celo transaction. If not present, last known nonce will be used.\n        feeCurrency:\n          type: string\n          description: Currency to pay for transaction gas\n          enum:\n            - CELO\n            - CUSD\n            - CEUR\n      required:\n        - chain\n        - to\n        - tokenId\n        - amount\n        - feeCurrency\n        - contractAddress\n        - signatureId\n    TransferMultiToken:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: ETH\n          description: Chain to work with.\n          enum:\n            - ETH\n            - ONE\n            - MATIC\n            - KCS\n            - BSC\n            - ALGO\n        to:\n          maxLength: 58\n          minLength: 42\n          description: Blockchain address to send Multi Token token to\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        tokenId:\n          description: ID of token.\n          example: \"100000\"\n          type: string\n          maxLength: 256\n        amount:\n          description: amount of token.\n          example: \"100000\"\n          type: string\n          maxLength: 32\n        data:\n          description: Data in bytes\n          example: \"0x1234\"\n          type: string\n        contractAddress:\n          maxLength: 42\n          minLength: 1\n          description: Address of Multi Token token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        fromPrivateKey:\n          type: string\n          maxLength: 103\n          example: \"0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2\"\n          minLength: 66\n          description: Private key of sender address. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          example: 1\n          description: Nonce to be set to transaction. If not present, last known nonce will be used.\n        fee:\n          description: Custom defined fee. If not present, it will be calculated automatically.\n          type: object\n          required:\n            - gasLimit\n            - gasPrice\n          properties:\n            gasLimit:\n              type: string\n              description: Gas limit for transaction in gas price.\n              pattern: ^[+]?\\d+$\n              example: \"40000\"\n            gasPrice:\n              type: string\n              description: Gas price in Gwei.\n              pattern: ^[+]?\\d+$\n              example: \"20\"\n      required:\n        - to\n        - chain\n        - contractAddress\n        - tokenId\n        - fromPrivateKey\n    TransferMultiTokenBatch:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: ETH\n          description: Chain to work with.\n          enum:\n            - ETH\n            - ONE\n            - MATIC\n            - KCS\n            - BSC\n        to:\n          maxLength: 42\n          minLength: 42\n          description: Blockchain address to send Multi Token token to\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        tokenId:\n          description: ID of token.\n          example: [\"100000\"]\n          type: array\n          items:\n            type: string\n            maxLength: 256\n        amounts:\n          description: amounts of token.\n          example: [\"100000\"]\n          type: array\n          items:\n            type: string\n            maxLength: 32\n        data:\n          description: Data in bytes\n          example: \"0x1234\"\n          type: string\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of Multi Token token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        fromPrivateKey:\n          type: string\n          maxLength: 66\n          example: \"0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2\"\n          minLength: 66\n          description: Private key of sender address. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          example: 1\n          description: Nonce to be set to transaction. If not present, last known nonce will be used.\n        fee:\n          description: Custom defined fee. If not present, it will be calculated automatically.\n          type: object\n          required:\n            - gasLimit\n            - gasPrice\n          properties:\n            gasLimit:\n              type: string\n              description: Gas limit for transaction in gas price.\n              pattern: ^[+]?\\d+$\n              example: \"40000\"\n            gasPrice:\n              type: string\n              description: Gas price in Gwei.\n              pattern: ^[+]?\\d+$\n              example: \"20\"\n      required:\n        - to\n        - chain\n        - contractAddress\n        - tokenId\n        - amounts\n        - fromPrivateKey\n    DeployMultiToken:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: ETH\n          description: Chain to work with.\n          enum:\n            - ETH\n            - ONE\n            - MATIC\n            - KCS\n            - BSC\n        uri:\n          description: URI of the Multi Token token\n          example: example.com\n          type: string\n        fromPrivateKey:\n          description: Private key of account address, from which gas for deployment of ERC1155 will be paid. Private key, or signature Id must be present.\n          type: string\n          maxLength: 66\n          example: \"0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2\"\n          minLength: 66\n        publicMint:\n          description: True if the contract is publicMint type\n          example: true\n          type: boolean\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to transaction. If not present, last known nonce will be used.\n        fee:\n          description: Custom defined fee. If not present, it will be calculated automatically.\n          type: object\n          required:\n            - gasLimit\n            - gasPrice\n          properties:\n            gasLimit:\n              type: string\n              description: Gas limit for transaction in gas price.\n              pattern: ^[+]?\\d+$\n              example: \"40000\"\n            gasPrice:\n              type: string\n              description: Gas price in Gwei.\n              pattern: ^[+]?\\d+$\n              example: \"20\"\n      required:\n        - uri\n        - chain\n        - fromPrivateKey\n    DeployMultiTokenKMS:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: ETH\n          description: Chain to work with.\n          enum:\n            - ETH\n            - ONE\n            - MATIC\n            - KCS\n            - BSC\n        uri:\n          description: URI of the Multi Token token\n          example: example.com\n          type: string\n        publicMint:\n          description: True if the contract is publicMint type\n          example: true\n          type: boolean\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to transaction. If not present, last known nonce will be used.\n        fee:\n          description: Custom defined fee. If not present, it will be calculated automatically.\n          type: object\n          required:\n            - gasLimit\n            - gasPrice\n          properties:\n            gasLimit:\n              type: string\n              description: Gas limit for transaction in gas price.\n              pattern: ^[+]?\\d+$\n              example: \"40000\"\n            gasPrice:\n              type: string\n              description: Gas price in Gwei.\n              pattern: ^[+]?\\d+$\n              example: \"20\"\n      required:\n        - uri\n        - chain\n        - signatureId\n    TransferMultiTokenKMS:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: ETH\n          description: Chain to work with.\n          enum:\n            - ETH\n            - ONE\n            - MATIC\n            - KCS\n            - BSC\n        to:\n          maxLength: 42\n          minLength: 42\n          description: Blockchain address to send Multi Token token to\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        tokenId:\n          description: ID of token.\n          example: \"100000\"\n          type: string\n          maxLength: 256\n        amount:\n          description: amount of token.\n          example: \"100000\"\n          type: string\n          maxLength: 32\n        data:\n          description: Data in bytes\n          example: \"0x1234\"\n          type: string\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of Multi Token token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        index:\n          type: number\n          minimum: 0\n          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          example: 1\n          description: Nonce to be set to transaction. If not present, last known nonce will be used.\n        fee:\n          description: Custom defined fee. If not present, it will be calculated automatically.\n          type: object\n          required:\n            - gasLimit\n            - gasPrice\n          properties:\n            gasLimit:\n              type: string\n              description: Gas limit for transaction in gas price.\n              pattern: ^[+]?\\d+$\n              example: \"40000\"\n            gasPrice:\n              type: string\n              description: Gas price in Gwei.\n              pattern: ^[+]?\\d+$\n              example: \"20\"\n      required:\n        - to\n        - chain\n        - contractAddress\n        - signatureId\n        - tokenId\n        - amount\n    TransferMultiTokenBatchKMS:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: ETH\n          description: Chain to work with.\n          enum:\n            - ETH\n            - ONE\n            - MATIC\n            - KCS\n            - BSC\n        to:\n          maxLength: 42\n          minLength: 42\n          description: Blockchain address to send Multi Token token to\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        tokenId:\n          description: ID of token.\n          example: [\"100000\"]\n          type: array\n          items:\n            type: string\n            maxLength: 256\n        amount:\n          description: amount of token.\n          example: [\"100000\"]\n          type: array\n          maxLength: 256\n          items:\n            type: string\n            maxLength: 32\n        data:\n          description: Data in bytes\n          example: \"0x1234\"\n          type: string\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of Multi Token token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        index:\n          type: number\n          minimum: 0\n          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          example: 1\n          description: Nonce to be set to transaction. If not present, last known nonce will be used.\n        fee:\n          description: Custom defined fee. If not present, it will be calculated automatically.\n          type: object\n          required:\n            - gasLimit\n            - gasPrice\n          properties:\n            gasLimit:\n              type: string\n              description: Gas limit for transaction in gas price.\n              pattern: ^[+]?\\d+$\n              example: \"40000\"\n            gasPrice:\n              type: string\n              description: Gas price in Gwei.\n              pattern: ^[+]?\\d+$\n              example: \"20\"\n      required:\n        - to\n        - chain\n        - contractAddress\n        - signatureId\n        - tokenId\n        - amount\n    MintMultiToken:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: ETH\n          description: Chain to work with.\n          enum:\n            - ETH\n            - ONE\n            - MATIC\n            - KCS\n            - BSC\n            - ALGO\n        tokenId:\n          description: ID of token to be created.\n          example: \"100000\"\n          type: string\n          maxLength: 32\n        to:\n          maxLength: 58\n          minLength: 42\n          description: Blockchain address to send Multi Token token to\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        contractAddress:\n          maxLength: 42\n          minLength: 1\n          description: Address of Multi Token token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        amount:\n          description: amount of token to be created.\n          example: \"100000\"\n          type: string\n          maxLength: 32\n        data:\n          description: Data in bytes\n          example: \"0x1234\"\n          type: string\n        index:\n          type: number\n          minimum: 0\n          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to transaction. If not present, last known nonce will be used.\n        fee:\n          description: Custom defined fee. If not present, it will be calculated automatically.\n          type: object\n          required:\n            - gasLimit\n            - gasPrice\n          properties:\n            gasLimit:\n              type: string\n              description: Gas limit for transaction in gas price.\n              pattern: ^[+]?\\d+$\n              example: \"40000\"\n            gasPrice:\n              type: string\n              description: Gas price in Gwei.\n              pattern: ^[+]?\\d+$\n              example: \"20\"\n      required:\n        - to\n        - chain\n        - url\n        - contractAddress\n        - fromPrivateKey\n        - tokenId\n        - amount\n    MintMultiTokenKMS:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: ETH\n          description: Chain to work with.\n          enum:\n            - ETH\n            - ONE\n            - MATIC\n            - KCS\n            - BSC\n        tokenId:\n          description: ID of token to be created.\n          example: \"100000\"\n          type: string\n          maxLength: 32\n        to:\n          maxLength: 42\n          minLength: 42\n          description: Blockchain address to send Multi Token token to\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of Multi Token token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        amount:\n          description: amount of token to be created.\n          example: \"100000\"\n          type: string\n          maxLength: 32\n        data:\n          description: Data in bytes\n          example: \"0x1234\"\n          type: string\n        index:\n          type: number\n          minimum: 0\n          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to transaction. If not present, last known nonce will be used.\n        fee:\n          description: Custom defined fee. If not present, it will be calculated automatically.\n          type: object\n          required:\n            - gasLimit\n            - gasPrice\n          properties:\n            gasLimit:\n              type: string\n              description: Gas limit for transaction in gas price.\n              pattern: ^[+]?\\d+$\n              example: \"40000\"\n            gasPrice:\n              type: string\n              description: Gas price in Gwei.\n              pattern: ^[+]?\\d+$\n              example: \"20\"\n      required:\n        - to\n        - chain\n        - url\n        - contractAddress\n        - signatureId\n        - tokenId\n        - amount\n    MintMultiTokenBatch:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: ETH\n          description: Chain to work with.\n          enum:\n            - ETH\n            - ONE\n            - MATIC\n            - KCS\n            - BSC\n        to:\n          type: array\n          description: Blockchain address to send Multi Token token to.\n          example: [ \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"]\n          items:\n            maxLength: 42\n            minLength: 42\n            type: string\n        tokenId:\n          type: array\n          description: ID of token to be created.\n          example: [[ \"100000\",\"100001\" ]]\n          items:\n            type: array\n            items:\n              type: string\n              maxLength: 32\n        amounts:\n          type: array\n          description: ID of token to be created.\n          example: [[ \"100\",\"100\" ]]\n          items:\n            type: array\n            items:\n              type: string\n              maxLength: 32\n        data:\n          description: Data in bytes\n          example: \"0x1234\"\n          type: string\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of Multi Token token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        fromPrivateKey:\n          type: string\n          maxLength: 66\n          example: \"0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2\"\n          minLength: 66\n          description: Private key of sender address. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to transaction. If not present, last known nonce will be used.\n        fee:\n          description: Custom defined fee. If not present, it will be calculated automatically.\n          type: object\n          required:\n            - gasLimit\n            - gasPrice\n          properties:\n            gasLimit:\n              type: string\n              description: Gas limit for transaction in gas price.\n              pattern: ^[+]?\\d+$\n              example: \"40000\"\n            gasPrice:\n              type: string\n              description: Gas price in Gwei.\n              pattern: ^[+]?\\d+$\n              example: \"20\"\n      required:\n        - to\n        - chain\n        - url\n        - contractAddress\n        - fromPrivateKey\n        - tokenId\n        - amounts\n    MintMultiTokenBatchKMS:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: ETH\n          description: Chain to work with.\n          enum:\n            - ETH\n            - ONE\n            - MATIC\n            - KCS\n            - BSC\n        to:\n          type: array\n          description: Blockchain address to send Multi Token token to.\n          example: [ \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\" ]\n          items:\n            maxLength: 42\n            minLength: 42\n            type: string\n        tokenId:\n          type: array\n          description: ID of token to be created.\n          example: [[ \"100000\",\"100001\" ]]\n          items:\n            type: array\n            items:\n              type: string\n              maxLength: 32\n        amounts:\n          type: array\n          description: ID of token to be created.\n          example: [[ \"100\",\"100\" ]]\n          items:\n            type: array\n            items:\n              type: string\n              maxLength: 32\n        data:\n          description: Data in bytes\n          example: \"0x1234\"\n          type: string\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of Multi Token token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        index:\n          type: number\n          minimum: 0\n          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to transaction. If not present, last known nonce will be used.\n        fee:\n          description: Custom defined fee. If not present, it will be calculated automatically.\n          type: object\n          required:\n            - gasLimit\n            - gasPrice\n          properties:\n            gasLimit:\n              type: string\n              description: Gas limit for transaction in gas price.\n              pattern: ^[+]?\\d+$\n              example: \"40000\"\n            gasPrice:\n              type: string\n              description: Gas price in Gwei.\n              pattern: ^[+]?\\d+$\n              example: \"20\"\n      required:\n        - to\n        - chain\n        - contractAddress\n        - tokenId\n        - url\n        - signatureId\n        - amounts\n    BurnMultiToken:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: ETH\n          description: Chain to work with.\n          enum:\n            - ETH\n            - ONE\n            - MATIC\n            - KCS\n            - BSC\n            - ALGO\n        account:\n          maxLength: 58\n          minLength: 42\n          description: Address of holder\n          example: \"0x4b812a77b109A150C2Fc89eD133EaBC78bC9EC8f\"\n          type: string\n        tokenId:\n          description: ID of token to be destroyed.\n          example: \"100000\"\n          type: string\n          maxLength: 32\n        contractAddress:\n          maxLength: 42\n          minLength: 1\n          description: Address of Multi Token token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        fromPrivateKey:\n          type: string\n          maxLength: 103\n          example: \"0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2\"\n          minLength: 66\n          description: Private key of sender address. Private key, or signature Id must be present.\n        data:\n          description: Data in bytes\n          example: \"0x1234\"\n          type: string\n        amount:\n          description: amount of token to be destroyed.\n          example: \"100000\"\n          type: string\n          maxLength: 32\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to transaction. If not present, last known nonce will be used.\n        fee:\n          description: Custom defined fee. If not present, it will be calculated automatically.\n          type: object\n          required:\n            - gasLimit\n            - gasPrice\n          properties:\n            gasLimit:\n              type: string\n              description: Gas limit for transaction in gas price.\n              pattern: ^[+]?\\d+$\n              example: \"40000\"\n            gasPrice:\n              type: string\n              description: Gas price in Gwei.\n              pattern: ^[+]?\\d+$\n              example: \"20\"\n      required:\n        - account\n        - chain\n        - contractAddress\n        - fromPrivateKey\n        - tokenId\n        - amount\n    BurnMultiTokenBatch:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: ETH\n          description: Chain to work with.\n          enum:\n            - ETH\n            - ONE\n            - MATIC\n            - KCS\n            - BSC\n        account:\n          maxLength: 42\n          minLength: 42\n          description: Address of holder\n          example: \"0x4b812a77b109A150C2Fc89eD133EaBC78bC9EC8f\"\n          type: string\n        tokenId:\n          description: ID of token to be destroyed.\n          example: [\"1000\",\"1001\"]\n          type: array\n          items:\n            type: string\n            maxLength: 32\n        amounts:\n          description: ID of token to be destroyed.\n          example: [\"10\",\"10\"]\n          type: array\n          items:\n            type: string\n        data:\n          description: Data in bytes\n          example: \"0x1234\"\n          type: string\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of Multi Token token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        fromPrivateKey:\n          type: string\n          maxLength: 66\n          example: \"0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2\"\n          minLength: 66\n          description: Private key of sender address. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to transaction. If not present, last known nonce will be used.\n        fee:\n          description: Custom defined fee. If not present, it will be calculated automatically.\n          type: object\n          required:\n            - gasLimit\n            - gasPrice\n          properties:\n            gasLimit:\n              type: string\n              description: Gas limit for transaction in gas price.\n              pattern: ^[+]?\\d+$\n              example: \"40000\"\n            gasPrice:\n              type: string\n              description: Gas price in Gwei.\n              pattern: ^[+]?\\d+$\n              example: \"20\"\n      required:\n        - account\n        - amounts\n        - chain\n        - url\n        - contractAddress\n        - fromPrivateKey\n        - tokenId\n    BurnMultiTokenKMS:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: ETH\n          description: Chain to work with.\n          enum:\n            - ETH\n            - ONE\n            - MATIC\n            - KCS\n            - BSC\n        account:\n          maxLength: 42\n          minLength: 42\n          description: Address of holder\n          example: \"0x4b812a77b109A150C2Fc89eD133EaBC78bC9EC8f\"\n          type: string\n        tokenId:\n          description: ID of token to be destroyed.\n          example: \"100000\"\n          type: string\n          maxLength: 32\n        amount:\n          description: amount of token to be destroyed.\n          example: \"100\"\n          type: string\n          maxLength: 32\n        data:\n          description: Data in bytes\n          example: \"0x1234\"\n          type: string\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of Multi Token token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        index:\n          type: number\n          minimum: 0\n          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to transaction. If not present, last known nonce will be used.\n        fee:\n          description: Custom defined fee. If not present, it will be calculated automatically.\n          type: object\n          required:\n            - gasLimit\n            - gasPrice\n          properties:\n            gasLimit:\n              type: string\n              description: Gas limit for transaction in gas price.\n              pattern: ^[+]?\\d+$\n              example: \"40000\"\n            gasPrice:\n              type: string\n              description: Gas price in Gwei.\n              pattern: ^[+]?\\d+$\n              example: \"20\"\n      required:\n        - account\n        - chain\n        - amount\n        - contractAddress\n        - tokenId\n        - signatureId\n    BurnMultiTokenBatchKMS:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: ETH\n          description: Chain to work with.\n          enum:\n            - ETH\n            - ONE\n            - MATIC\n            - KCS\n            - BSC\n        account:\n          maxLength: 42\n          minLength: 42\n          description: Address of holder\n          example: \"0x4b812a77b109A150C2Fc89eD133EaBC78bC9EC8f\"\n          type: string\n        tokenId:\n          description: ID of token to be destroyed.\n          example: [\"100\",\"101\"]\n          type: array\n          items:\n            type: string\n            maxLength: 32\n        amounts:\n          description: ID of token to be destroyed.\n          example: [\"10\",\"10\"]\n          type: array\n          items:\n            type: string\n        data:\n          description: Data in bytes\n          example: \"0x1234\"\n          type: string\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of Multi Token token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        index:\n          type: number\n          minimum: 0\n          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to transaction. If not present, last known nonce will be used.\n        fee:\n          description: Custom defined fee. If not present, it will be calculated automatically.\n          type: object\n          required:\n            - gasLimit\n            - gasPrice\n          properties:\n            gasLimit:\n              type: string\n              description: Gas limit for transaction in gas price.\n              pattern: ^[+]?\\d+$\n              example: \"40000\"\n            gasPrice:\n              type: string\n              description: Gas price in Gwei.\n              pattern: ^[+]?\\d+$\n              example: \"20\"\n      required:\n        - account\n        - chain\n        - amount\n        - contractAddress\n        - tokenId\n        - signatureId"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /v3/multitoken/balance/{chain}/{contractAddress}/{address}/{tokenId}: get: operation \"MultiTokenGetBalance\": responses: 400: content: \"application/json\": schema: parse schema: resolve \"#/components/schemas/Error400\": find schema: resolve \"#/components/schemas/Error400\": can't find value for \"components/schemas/Error400\""
}