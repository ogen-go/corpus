{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/apache/iceberg"
		},
		"file": {
			"name": "rest-catalog-open-api.yaml",
			"size": 0,
			"path": "open-api/rest-catalog-open-api.yaml",
			"byteSize": 67119,
			"content": "#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n\n---\nopenapi: 3.0.3\ninfo:\n  title: Apache Iceberg REST Catalog API\n  license:\n    name: Apache 2.0\n    url: https://www.apache.org/licenses/LICENSE-2.0.html\n  version: 0.0.1\n  description:\n    Defines the specification for the first version of the REST Catalog API.\n    Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.\nservers:\n  - url: \"{scheme}://{host}/{basePath}\"\n    description: Server URL when the port can be inferred from the scheme\n    variables:\n      scheme:\n        description: The scheme of the URI, either http or https.\n        default: https\n      host:\n        description: The host address for the specified server\n        default: localhost\n      basePath:\n        description: Optional prefix to be appended to all routes\n        default: \"\"\n  - url: \"{scheme}://{host}:{port}/{basePath}\"\n    description: Generic base server URL, with all parts configurable\n    variables:\n      scheme:\n        description: The scheme of the URI, either http or https.\n        default: https\n      host:\n        description: The host address for the specified server\n        default: localhost\n      port:\n        description: The port used when addressing the host\n        default: \"443\"\n      basePath:\n        description: Optional prefix to be appended to all routes\n        default: \"\"\n# All routes are currently configured using an Authorization header.\nsecurity:\n  - OAuth2: [catalog]\n  - BearerAuth: []\n\npaths:\n  /v1/config:\n\n    get:\n      tags:\n        - Configuration API\n      summary: List all catalog configuration settings\n      operationId: getConfig\n      description:\n        \"\n        All REST clients should first call this route to get catalog configuration\n        properties from the server to configure the catalog and its HTTP client.\n        Configuration from the server consists of two sets of key/value pairs.\n\n        - defaults -  properties that should be used as default configuration; applied before client configuration\n\n        - overrides - properties that should be used to override client configuration; applied after defaults and client configuration\n\n\n        Catalog configuration is constructed by setting the defaults, then client-\n        provided configuration, and finally overrides. The final property set is then\n        used to configure the catalog.\n\n\n        For example, a default configuration property might set the size of the\n        client pool, which can be replaced with a client-specific setting. An\n        override might be used to set the warehouse location, which is stored\n        on the server rather than in client configuration.\n\n\n        Common catalog configuration settings are documented at\n        https://iceberg.apache.org/configuration/#catalog-properties\n        \"\n      responses:\n        200:\n          description: Server specified configuration values.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CatalogConfig'\n              example: {\n                \"overrides\": {\n                  \"warehouse\": \"s3://bucket/warehouse/\"\n                },\n                \"defaults\": {\n                  \"clients\": \"4\"\n                }\n              }\n        400:\n          $ref: '#/components/responses/BadRequestErrorResponse'\n        401:\n          $ref: '#/components/responses/UnauthorizedResponse'\n        403:\n          $ref: '#/components/responses/ForbiddenResponse'\n        419:\n          $ref: '#/components/responses/AuthenticationTimeoutResponse'\n        503:\n          $ref: '#/components/responses/ServiceUnavailableResponse'\n        5XX:\n          $ref: '#/components/responses/ServerErrorResponse'\n\n  /v1/oauth/tokens:\n\n    post:\n      tags:\n        - OAuth2 API\n      summary: Get a token using an OAuth2 flow\n      operationId: getToken\n      description:\n        Exchange credentials for a token using the OAuth2 client credentials flow or token exchange.\n\n\n        This endpoint is used for three purposes -\n\n        1. To exchange client credentials (client ID and secret) for an access token\n           This uses the client credentials flow.\n\n        2. To exchange a client token and an identity token for a more specific access token\n           This uses the token exchange flow.\n\n        3. To exchange an access token for one with the same claims and a refreshed expiration period\n           This uses the token exchange flow.\n\n\n        For example, a catalog client may be configured with client credentials from the OAuth2\n        Authorization flow. This client would exchange its client ID and secret for an access token\n        using the client credentials request with this endpoint (1). Subsequent requests would then\n        use that access token.\n\n\n        Some clients may also handle sessions that have additional user context. These clients would\n        use the token exchange flow to exchange a user token (the \"subject\" token) from the session\n        for a more specific access token for that user, using the catalog's access token as the\n        \"actor\" token (2). The user ID token is the \"subject\" token and can be any token type\n        allowed by the OAuth2 token exchange flow, including a unsecured JWT token with a sub claim.\n        This request should use the catalog's bearer token in the \"Authorization\" header.\n\n\n        Clients may also use the token exchange flow to refresh a token that is about to expire by\n        sending a token exchange request (3). The request's \"subject\" token should be the expiring\n        token. This request should use the subject token in the \"Authorization\" header.\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/OAuthTokenRequest'\n      responses:\n        200:\n          $ref: '#/components/responses/OAuthTokenResponse'\n        400:\n          $ref: '#/components/responses/OAuthErrorResponse'\n        401:\n          $ref: '#/components/responses/UnauthorizedResponse'\n        503:\n          $ref: '#/components/responses/ServiceUnavailableResponse'\n        5XX:\n          $ref: '#/components/responses/ServerErrorResponse'\n\n  /v1/{prefix}/namespaces:\n    parameters:\n      - $ref: '#/components/parameters/prefix'\n\n    get:\n      tags:\n        - Catalog API\n      summary: List namespaces, optionally providing a parent namespace to list underneath\n      description:\n        List all namespaces at a certain level, optionally starting from a given parent namespace.\n        For example, if table accounting.tax.paid exists, using 'SELECT NAMESPACE IN accounting' would\n        translate into `GET /namespaces?parent=accounting` and must return a namespace, [\"accounting\", \"tax\"].\n        If `parent` is not provided, all top-level namespaces should be listed.\n      operationId: listNamespaces\n      parameters:\n        - name: parent\n          in: query\n          description:\n            An optional namespace, underneath which to list namespaces.\n            If not provided or empty, all top-level namespaces should be listed.\n            If parent is a multipart namespace, the parts must be separated by the unit separator (`0x1F`) byte.\n          required: false\n          allowEmptyValue: true\n          schema:\n            type: string\n          example: \"accounting%1Ftax\"\n      responses:\n        200:\n          $ref: '#/components/responses/ListNamespacesResponse'\n        400:\n          $ref: '#/components/responses/BadRequestErrorResponse'\n        401:\n          $ref: '#/components/responses/UnauthorizedResponse'\n        403:\n          $ref: '#/components/responses/ForbiddenResponse'\n        404:\n          description: Not Found - Namespace provided in the `parent` query parameter is not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n              examples:\n                NoSuchNamespaceExample:\n                  $ref: '#/components/examples/NoSuchNamespaceError'\n        419:\n          $ref: '#/components/responses/AuthenticationTimeoutResponse'\n        503:\n          $ref: '#/components/responses/ServiceUnavailableResponse'\n        5XX:\n          $ref: '#/components/responses/ServerErrorResponse'\n\n    post:\n      tags:\n        - Catalog API\n      summary: Create a namespace\n      description:\n        Create a namespace, with an optional set of properties.\n        The server might also add properties, such as `last_modified_time` etc.\n      operationId: createNamespace\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateNamespaceRequest'\n      responses:\n        200:\n          $ref: '#/components/responses/CreateNamespaceResponse'\n        400:\n          $ref: '#/components/responses/BadRequestErrorResponse'\n        401:\n          $ref: '#/components/responses/UnauthorizedResponse'\n        403:\n          $ref: '#/components/responses/ForbiddenResponse'\n        406:\n          $ref: '#/components/responses/UnsupportedOperationResponse'\n        409:\n          description: Conflict - The namespace already exists\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n              examples:\n                NamespaceAlreadyExists:\n                  $ref: '#/components/examples/NamespaceAlreadyExistsError'\n        419:\n          $ref: '#/components/responses/AuthenticationTimeoutResponse'\n        503:\n          $ref: '#/components/responses/ServiceUnavailableResponse'\n        5XX:\n          $ref: '#/components/responses/ServerErrorResponse'\n\n  /v1/{prefix}/namespaces/{namespace}:\n    parameters:\n      - $ref: '#/components/parameters/prefix'\n      - $ref: '#/components/parameters/namespace'\n\n    get:\n      tags:\n        - Catalog API\n      summary: Load the metadata properties for a namespace\n      operationId: loadNamespaceMetadata\n      description: Return all stored metadata properties for a given namespace\n      responses:\n        200:\n          $ref: '#/components/responses/GetNamespaceResponse'\n        400:\n          $ref: '#/components/responses/BadRequestErrorResponse'\n        401:\n          $ref: '#/components/responses/UnauthorizedResponse'\n        403:\n          $ref: '#/components/responses/ForbiddenResponse'\n        404:\n          description: Not Found - Namespace not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n              examples:\n                NoSuchNamespaceExample:\n                  $ref: '#/components/examples/NoSuchNamespaceError'\n        419:\n          $ref: '#/components/responses/AuthenticationTimeoutResponse'\n        503:\n          $ref: '#/components/responses/ServiceUnavailableResponse'\n        5XX:\n          $ref: '#/components/responses/ServerErrorResponse'\n\n    delete:\n      tags:\n        - Catalog API\n      summary: Drop a namespace from the catalog. Namespace must be empty.\n      operationId: dropNamespace\n      responses:\n        204:\n          description: Success, no content\n        400:\n          $ref: '#/components/responses/BadRequestErrorResponse'\n        401:\n          $ref: '#/components/responses/UnauthorizedResponse'\n        403:\n          $ref: '#/components/responses/ForbiddenResponse'\n        404:\n          description: Not Found - Namespace to delete does not exist.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n              examples:\n                NoSuchNamespaceExample:\n                  $ref: '#/components/examples/NoSuchNamespaceError'\n        419:\n          $ref: '#/components/responses/AuthenticationTimeoutResponse'\n        503:\n          $ref: '#/components/responses/ServiceUnavailableResponse'\n        5XX:\n          $ref: '#/components/responses/ServerErrorResponse'\n\n  /v1/{prefix}/namespaces/{namespace}/properties:\n    parameters:\n      - $ref: '#/components/parameters/prefix'\n      - $ref: '#/components/parameters/namespace'\n\n    post:\n      tags:\n        - Catalog API\n      summary: Set or remove properties on a namespace\n      operationId: updateProperties\n      description:\n        Set and/or remove properties on a namespace.\n        The request body specifies a list of properties to remove and a map\n        of key value pairs to update.\n\n        Properties that are not in the request are not modified or removed by this call.\n\n        Server implementations are not required to support namespace properties.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateNamespacePropertiesRequest'\n            examples:\n              UpdateAndRemoveProperties:\n                $ref: '#/components/examples/UpdateAndRemoveNamespacePropertiesRequest'\n      responses:\n        200:\n          $ref: '#/components/responses/UpdateNamespacePropertiesResponse'\n        400:\n          $ref: '#/components/responses/BadRequestErrorResponse'\n        401:\n          $ref: '#/components/responses/UnauthorizedResponse'\n        403:\n          $ref: '#/components/responses/ForbiddenResponse'\n        404:\n          description: Not Found - Namespace not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n              examples:\n                NamespaceNotFound:\n                  $ref: '#/components/examples/NoSuchNamespaceError'\n        406:\n          $ref: '#/components/responses/UnsupportedOperationResponse'\n        422:\n          description: Unprocessable Entity - A property key was included in both `removals` and `updates`\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n              examples:\n                UnprocessableEntityDuplicateKey:\n                  $ref: '#/components/examples/UnprocessableEntityDuplicateKey'\n        419:\n          $ref: '#/components/responses/AuthenticationTimeoutResponse'\n        503:\n          $ref: '#/components/responses/ServiceUnavailableResponse'\n        5XX:\n          $ref: '#/components/responses/ServerErrorResponse'\n\n  /v1/{prefix}/namespaces/{namespace}/tables:\n    parameters:\n      - $ref: '#/components/parameters/prefix'\n      - $ref: '#/components/parameters/namespace'\n\n    get:\n      tags:\n        - Catalog API\n      summary: List all table identifiers underneath a given namespace\n      description: Return all table identifiers under this namespace\n      operationId: listTables\n      responses:\n        200:\n          $ref: '#/components/responses/ListTablesResponse'\n        400:\n          $ref: '#/components/responses/BadRequestErrorResponse'\n        401:\n          $ref: '#/components/responses/UnauthorizedResponse'\n        403:\n          $ref: '#/components/responses/ForbiddenResponse'\n        404:\n          description: Not Found - The namespace specified does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n              examples:\n                NamespaceNotFound:\n                  $ref: '#/components/examples/NoSuchNamespaceError'\n        419:\n          $ref: '#/components/responses/AuthenticationTimeoutResponse'\n        503:\n          $ref: '#/components/responses/ServiceUnavailableResponse'\n        5XX:\n          $ref: '#/components/responses/ServerErrorResponse'\n\n    post:\n      tags:\n        - Catalog API\n      summary: Create a table in the given namespace\n      description:\n        Create a table or start a create transaction, like atomic CTAS.\n\n\n        If `stage-create` is false, the table is created immediately.\n\n\n        If `stage-create` is true, the table is not created, but table metadata is initialized and returned.\n        The service should prepare as needed for a commit to the table commit endpoint to complete the create\n        transaction. The client uses the returned metadata to begin a transaction. To commit the transaction,\n        the client sends all create and subsequent changes to the table commit route. Changes from the table\n        create operation include changes like AddSchemaUpdate and SetCurrentSchemaUpdate that set the initial\n        table state.\n      operationId: createTable\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateTableRequest'\n      responses:\n        200:\n          $ref: '#/components/responses/CreateTableResponse'\n        400:\n          $ref: '#/components/responses/BadRequestErrorResponse'\n        401:\n          $ref: '#/components/responses/UnauthorizedResponse'\n        403:\n          $ref: '#/components/responses/ForbiddenResponse'\n        404:\n          description: Not Found - The namespace specified does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n              examples:\n                NamespaceNotFound:\n                  $ref: '#/components/examples/NoSuchNamespaceError'\n        409:\n          description: Conflict - The table already exists\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n              examples:\n                NamespaceAlreadyExists:\n                  $ref: '#/components/examples/TableAlreadyExistsError'\n        419:\n          $ref: '#/components/responses/AuthenticationTimeoutResponse'\n        503:\n          $ref: '#/components/responses/ServiceUnavailableResponse'\n        5XX:\n          $ref: '#/components/responses/ServerErrorResponse'\n\n  /v1/{prefix}/namespaces/{namespace}/tables/{table}:\n    parameters:\n      - $ref: '#/components/parameters/prefix'\n      - $ref: '#/components/parameters/namespace'\n      - $ref: '#/components/parameters/table'\n\n    get:\n      tags:\n        - Catalog API\n      summary: Load a table from the catalog\n      operationId: loadTable\n      description:\n        Load a table from the catalog.\n\n\n        The response contains both configuration and table metadata. The configuration, if non-empty is used\n        as additional configuration for the table that overrides catalog configuration. For example, this\n        configuration may change the FileIO implemented used for the table.\n\n\n        The response also contains the table's full metadata.\n\n\n        The catalog configuration may contain credentials that should be used for subsequent requests for the\n        table. The configuration key \"token\" is used to pass an access token to be used as a bearer token\n        for table requests. Otherwise, a token may be passed using a RFC 8693 token type as a configuration\n        key. For example, \"urn:ietf:params:oauth:token-type:jwt=\u003cJWT-token\u003e\".\n      responses:\n        200:\n          $ref: '#/components/responses/LoadTableResponse'\n        400:\n          $ref: '#/components/responses/BadRequestErrorResponse'\n        401:\n          $ref: '#/components/responses/UnauthorizedResponse'\n        403:\n          $ref: '#/components/responses/ForbiddenResponse'\n        404:\n          description:\n            Not Found - NoSuchTableException, table to load does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n              examples:\n                TableToLoadDoesNotExist:\n                  $ref: '#/components/examples/NoSuchTableError'\n        419:\n          $ref: '#/components/responses/AuthenticationTimeoutResponse'\n        503:\n          $ref: '#/components/responses/ServiceUnavailableResponse'\n        5XX:\n          $ref: '#/components/responses/ServerErrorResponse'\n\n    post:\n      tags:\n        - Catalog API\n      summary: Commit updates to a table\n      operationId: updateTable\n      description:\n        Commit updates to a table.\n\n\n        Commits have two parts, requirements and updates. Requirements are assertions that will be validated\n        before attempting to make and commit changes. For example, `assert-ref-snapshot-id` will check that a\n        named ref's snapshot ID has a certain value.\n\n\n        Updates are changes to make to table metadata. For example, after asserting that the current main ref\n        is at the expected snapshot, a commit may add a new child snapshot and set the ref to the new\n        snapshot id.\n\n\n        Create table transactions that are started by createTable with `stage-create` set to true are\n        committed using this route. Transactions should include all changes to the table, including table\n        initialization, like AddSchemaUpdate and SetCurrentSchemaUpdate. The `assert-create` requirement is\n        used to ensure that the table was not created concurrently.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CommitTableRequest'\n      responses:\n        200:\n          $ref: '#/components/responses/CommitTableResponse'\n        400:\n          $ref: '#/components/responses/BadRequestErrorResponse'\n        401:\n          $ref: '#/components/responses/UnauthorizedResponse'\n        403:\n          $ref: '#/components/responses/ForbiddenResponse'\n        404:\n          description:\n            Not Found - NoSuchTableException, table to load does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n              examples:\n                TableToUpdateDoesNotExist:\n                  $ref: '#/components/examples/NoSuchTableError'\n        409:\n          description:\n            Conflict - CommitFailedException, one or more requirements failed. The client may retry.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        419:\n          $ref: '#/components/responses/AuthenticationTimeoutResponse'\n        500:\n          description:\n            An unknown server-side problem occurred; the commit state is unknown.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n              example: {\n                \"error\": {\n                  \"message\": \"Internal Server Error\",\n                  \"type\": \"CommitStateUnknownException\",\n                  \"code\": 500\n                }\n              }\n        503:\n          $ref: '#/components/responses/ServiceUnavailableResponse'\n        504:\n          description:\n            A server-side gateway timeout occurred; the commit state is unknown.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n              example: {\n                \"error\": {\n                  \"message\": \"Gateway timed out during commit\",\n                  \"type\": \"CommitStateUnknownException\",\n                  \"code\": 504\n                }\n              }\n        5XX:\n          description:\n            A server-side problem that might not be addressable on the client.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n              example: {\n                \"error\": {\n                  \"message\": \"Bad Gateway\",\n                  \"type\": \"InternalServerError\",\n                  \"code\": 502\n                }\n              }\n\n    delete:\n      tags:\n        - Catalog API\n      summary: Drop a table from the catalog\n      operationId: dropTable\n      description: Remove a table from the catalog\n      parameters:\n        - name: purgeRequested\n          in: query\n          required: false\n          description: Whether the user requested to purge the underlying table's data and metadata\n          schema:\n            type: boolean\n            default: false\n      responses:\n        204:\n          description: Success, no content\n        400:\n          $ref: '#/components/responses/BadRequestErrorResponse'\n        401:\n          $ref: '#/components/responses/UnauthorizedResponse'\n        403:\n          $ref: '#/components/responses/ForbiddenResponse'\n        404:\n          description:\n            Not Found - NoSuchTableException, Table to drop does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n              examples:\n                TableToDeleteDoesNotExist:\n                  $ref: '#/components/examples/NoSuchTableError'\n        419:\n          $ref: '#/components/responses/AuthenticationTimeoutResponse'\n        503:\n          $ref: '#/components/responses/ServiceUnavailableResponse'\n        5XX:\n          $ref: '#/components/responses/ServerErrorResponse'\n\n    head:\n      tags:\n        - Catalog API\n      summary: Check if a table exists\n      operationId: tableExists\n      description:\n        Check if a table exists within a given namespace. This request does not return a response body.\n      responses:\n        200:\n          description: OK - Table Exists\n        400:\n          description: Bad Request\n        401:\n          description: Unauthorized\n        404:\n          description: Not Found\n        419:\n          $ref: '#/components/responses/AuthenticationTimeoutResponse'\n        503:\n          $ref: '#/components/responses/ServiceUnavailableResponse'\n        5XX:\n          $ref: '#/components/responses/ServerErrorResponse'\n\n  /v1/{prefix}/tables/rename:\n    parameters:\n      - $ref: '#/components/parameters/prefix'\n\n    post:\n      tags:\n        - Catalog API\n      summary: Rename a table from its current name to a new name\n      description:\n        Rename a table from one identifier to another. It's valid to move a table\n        across namespaces, but the server implementation is not required to support it.\n      operationId: renameTable\n      requestBody:\n        description: Current table identifier to rename and new table identifier to rename to\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RenameTableRequest'\n            examples:\n              RenameTableSameNamespace:\n                $ref: '#/components/examples/RenameTableSameNamespace'\n        required: true\n      responses:\n        200:\n          description: OK\n        400:\n          $ref: '#/components/responses/BadRequestErrorResponse'\n        401:\n          $ref: '#/components/responses/UnauthorizedResponse'\n        403:\n          $ref: '#/components/responses/ForbiddenResponse'\n        404:\n          description:\n            Not Found\n            - NoSuchTableException, Table to rename does not exist\n            - NoSuchNamespaceException, The target namespace of the new table identifier does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n              examples:\n                TableToRenameDoesNotExist:\n                  $ref: '#/components/examples/NoSuchTableError'\n                NamespaceToRenameToDoesNotExist:\n                  $ref: '#/components/examples/NoSuchNamespaceError'\n        406:\n          $ref: '#/components/responses/UnsupportedOperationResponse'\n        409:\n          description: Conflict - The target table identifier to rename to already exists\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n              example:\n                $ref: '#/components/examples/TableAlreadyExistsError'\n        419:\n          $ref: '#/components/responses/AuthenticationTimeoutResponse'\n        503:\n          $ref: '#/components/responses/ServiceUnavailableResponse'\n        5XX:\n          $ref: '#/components/responses/ServerErrorResponse'\n\ncomponents:\n  #######################################################\n  # Common Parameter Definitions Used In Several Routes #\n  #######################################################\n  parameters:\n    namespace:\n      name: namespace\n      in: path\n      required: true\n      description:\n        A namespace identifier as a single string.\n        Multipart namespace parts should be separated by the unit separator (`0x1F`) byte.\n      schema:\n        type: string\n      examples:\n        singlepart_namespace:\n          value: \"accounting\"\n        multipart_namespace:\n          value: \"accounting%1Ftax\"\n\n    prefix:\n      name: prefix\n      in: path\n      schema:\n        type: string\n      required: true\n      description: An optional prefix in the path\n\n    table:\n      name: table\n      in: path\n      description: A table name\n      required: true\n      schema:\n        type: string\n      example: \"sales\"\n\n  ##############################\n  # Application Schema Objects #\n  ##############################\n  schemas:\n\n    ErrorModel:\n      type: object\n      description: JSON error payload returned in a response with further details on the error\n      required:\n        - message\n        - type\n        - code\n      properties:\n        message:\n          type: string\n          description: Human-readable error message\n        type:\n          type: string\n          description: Internal type definition of the error\n          example: NoSuchNamespaceException\n        code:\n          type: integer\n          minimum: 400\n          maximum: 600\n          description: HTTP response code\n          example: 404\n        stack:\n          type: array\n          items:\n            type: string\n\n    CatalogConfig:\n      type: object\n      description: Server-provided configuration for the catalog.\n      required:\n        - defaults\n        - overrides\n      properties:\n        overrides:\n          type: object\n          description:\n            Properties that should be used to override client configuration; applied after defaults and client configuration.\n        defaults:\n          type: object\n          description:\n            Properties that should be used as default configuration; applied before client configuration.\n\n    CreateNamespaceRequest:\n      type: object\n      required:\n        - namespace\n      properties:\n        namespace:\n          $ref: '#/components/schemas/Namespace'\n        properties:\n          type: object\n          description: Configured string to string map of properties for the namespace\n          example: { \"owner\": \"Hank Bendickson\" }\n          default: { }\n\n    UpdateNamespacePropertiesRequest:\n      type: object\n      properties:\n        removals:\n          type: array\n          uniqueItems: true\n          items:\n            type: string\n          example: [ \"department\", \"access_group\" ]\n        updates:\n          uniqueItems: true\n          type: object\n          items:\n            type: string\n          example: { \"owner\": \"Hank Bendickson\" }\n\n    RenameTableRequest:\n      type: object\n      required:\n        - source\n        - destination\n      properties:\n        source:\n          $ref: '#/components/schemas/TableIdentifier'\n        destination:\n          $ref: '#/components/schemas/TableIdentifier'\n\n    Namespace:\n      description: Reference to one or more levels of a namespace\n      type: array\n      items:\n        type: string\n      example: [ \"accounting\", \"tax\" ]\n\n    TableIdentifier:\n      type: object\n      required:\n        - namespace\n        - name\n      properties:\n        namespace:\n          $ref: '#/components/schemas/Namespace'\n        name:\n          type: string\n          nullable: false\n\n    PrimitiveType:\n      type: string\n      example:\n        - \"long\"\n        - \"string\"\n        - \"fixed[16]\"\n        - \"decimal(10,2)\"\n\n    StructField:\n      type: object\n      required:\n        - id\n        - name\n        - type\n        - required\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n        type:\n          $ref: '#/components/schemas/Type'\n        required:\n          type: boolean\n        doc:\n          type: string\n\n    StructType:\n      type: object\n      required:\n        - type\n        - fields\n      properties:\n        type:\n          type: string\n          enum: [\"struct\"]\n        fields:\n          type: array\n          items:\n            $ref: '#/components/schemas/StructField'\n\n    ListType:\n      type: object\n      required:\n        - type\n        - element-id\n        - element\n        - element-required\n      properties:\n        type:\n          type: string\n          enum: [\"list\"]\n        element-id:\n          type: integer\n        element:\n          $ref: '#/components/schemas/Type'\n        element-required:\n          type: boolean\n\n    MapType:\n      type: object\n      required:\n        - type\n        - key-id\n        - key\n        - value-id\n        - value\n        - value-required\n      properties:\n        type:\n          type: string\n          enum: [\"map\"]\n        key-id:\n          type: integer\n        key:\n          $ref: '#/components/schemas/Type'\n        value-id:\n          type: integer\n        value:\n          $ref: '#/components/schemas/Type'\n        value-required:\n          type: boolean\n\n    Type:\n      oneOf:\n        - $ref: '#/components/schemas/PrimitiveType'\n        - $ref: '#/components/schemas/StructType'\n        - $ref: '#/components/schemas/ListType'\n        - $ref: '#/components/schemas/MapType'\n\n    Schema:\n      allOf:\n        - $ref: '#/components/schemas/StructType'\n        - type: object\n          properties:\n            schema-id:\n              type: integer\n              readOnly: true\n            identifier-field-ids:\n              type: array\n              items:\n                type: integer\n\n    Transform:\n      type: string\n      example:\n        - \"identity\"\n        - \"year\"\n        - \"month\"\n        - \"day\"\n        - \"hour\"\n        - \"bucket[256]\"\n        - \"truncate[16]\"\n\n    PartitionField:\n      type: object\n      required:\n        - source-id\n        - transform\n        - name\n      properties:\n        field-id:\n          type: integer\n        source-id:\n          type: integer\n        name:\n          type: string\n        transform:\n          $ref: '#/components/schemas/Transform'\n\n    PartitionSpec:\n      type: object\n      required:\n        - fields\n      properties:\n        spec-id:\n          type: integer\n          readOnly: true\n        fields:\n          type: array\n          items:\n            $ref: '#/components/schemas/PartitionField'\n\n    SortDirection:\n      type: string\n      enum: [\"asc\", \"desc\"]\n\n    NullOrder:\n      type: string\n      enum: [\"nulls-first\", \"nulls-last\"]\n\n    SortField:\n      type: object\n      required:\n        - source-id\n        - transform\n        - direction\n        - null-order\n      properties:\n        source-id:\n          type: integer\n        transform:\n          $ref: '#/components/schemas/Transform'\n        direction:\n          $ref: '#/components/schemas/SortDirection'\n        null-order:\n          $ref: '#/components/schemas/NullOrder'\n\n    SortOrder:\n      type: object\n      required:\n        - order-id\n        - fields\n      properties:\n        order-id:\n          type: integer\n          readOnly: true\n        fields:\n          type: array\n          items:\n            $ref: '#/components/schemas/SortField'\n\n    Snapshot:\n      type: object\n      required:\n        - snapshot-id\n        - timestamp-ms\n        - manifest-list\n        - summary\n      properties:\n        snapshot-id:\n          type: integer\n        timestamp-ms:\n          type: integer\n        manifest-list:\n          type: string\n          description: Location of the snapshot's manifest list file\n        schema-id:\n          type: integer\n        summary:\n          type: object\n          required:\n            - operation\n          properties:\n            operation:\n              type: string\n              enum: [\"append\", \"replace\", \"overwrite\", \"delete\"]\n            additionalProperties:\n              type: string\n\n    SnapshotReference:\n      type: object\n      required:\n        - type\n        - snapshot-id\n      properties:\n        type:\n          type: string\n          enum: [\"tag\", \"branch\"]\n        snapshot-id:\n          type: integer\n          format: int64\n        max-ref-age-ms:\n          type: integer\n          format: int64\n        max-snapshot-age-ms:\n          type: integer\n          format: int64\n        min-snapshots-to-keep:\n          type: integer\n\n    SnapshotReferences:\n      type: object\n      additionalProperties:\n        $ref: '#/components/schemas/SnapshotReference'\n\n    SnapshotLog:\n      type: array\n      items:\n        type: object\n        required:\n          - snapshot-id\n          - timestamp-ms\n        properties:\n          snapshot-id:\n            type: integer\n          timestamp-ms:\n            type: integer\n\n    MetadataLog:\n      type: array\n      items:\n        type: object\n        required:\n          - metadata-file\n          - timestamp-ms\n        properties:\n          metadata-file:\n            type: string\n          timestamp-ms:\n            type: integer\n\n    TableMetadata:\n      type: object\n      required:\n        - format-version\n        - table-uuid\n      properties:\n        format-version:\n          type: integer\n          minimum: 1\n          maximum: 2\n        table-uuid:\n          type: string\n        location:\n          type: string\n        last-updated-ms:\n          type: integer\n        properties:\n          type: object\n          additionalProperties:\n            type: string\n        # schema tracking\n        schemas:\n          type: array\n          items:\n            $ref: '#/components/schemas/Schema'\n        current-schema-id:\n          type: integer\n        last-column-id:\n          type: integer\n        # partition spec tracking\n        partition-specs:\n          type: array\n          items:\n            $ref: '#/components/schemas/PartitionSpec'\n        default-spec-id:\n          type: integer\n        last-partition-id:\n          type: integer\n        # sort order tracking\n        sort-orders:\n          type: array\n          items:\n            $ref: '#/components/schemas/SortOrder'\n        default-sort-order-id:\n          type: integer\n        # snapshot tracking\n        snapshots:\n          type: array\n          items:\n            $ref: '#/components/schemas/Snapshot'\n        refs:\n          $ref: '#/components/schemas/SnapshotReferences'\n        current-snapshot-id:\n          type: integer\n        # logs\n        snapshot-log:\n          $ref: '#/components/schemas/SnapshotLog'\n        metadata-log:\n          $ref: '#/components/schemas/MetadataLog'\n\n    BaseUpdate:\n      type: object\n      required:\n        - action\n      properties:\n        action:\n          type: string\n          enum:\n            - upgrade-format-version\n            - add-schema\n            - set-current-schema\n            - add-spec\n            - set-default-spec\n            - add-sort-order\n            - set-default-sort-order\n            - add-snapshot\n            - set-snapshot-ref\n            - remove-snapshots\n            - remove-snapshot-ref\n            - set-location\n            - set-properties\n            - remove-properties\n\n    UpgradeFormatVersionUpdate:\n      allOf:\n        - $ref: '#/components/schemas/BaseUpdate'\n        - type: object\n          required:\n            - format-version\n          properties:\n            format-version:\n              type: integer\n\n    AddSchemaUpdate:\n      allOf:\n        - $ref: '#/components/schemas/BaseUpdate'\n        - type: object\n          required:\n            - schema\n          properties:\n            schema:\n              $ref: '#/components/schemas/Schema'\n\n    SetCurrentSchemaUpdate:\n      allOf:\n        - $ref: '#/components/schemas/BaseUpdate'\n        - type: object\n          required:\n            - schema-id\n          properties:\n            schema-id:\n              type: integer\n              description: Schema ID to set as current, or -1 to set last added schema\n\n    AddPartitionSpecUpdate:\n      allOf:\n        - $ref: '#/components/schemas/BaseUpdate'\n        - type: object\n          required:\n            - spec\n          properties:\n            spec:\n              $ref: '#/components/schemas/PartitionSpec'\n\n    SetDefaultSpecUpdate:\n      allOf:\n        - $ref: '#/components/schemas/BaseUpdate'\n        - type: object\n          required:\n            - spec-id\n          properties:\n            spec-id:\n              type: integer\n              description: Partition spec ID to set as the default, or -1 to set last added spec\n\n    AddSortOrderUpdate:\n      allOf:\n        - $ref: '#/components/schemas/BaseUpdate'\n        - type: object\n          required:\n            - sort-order\n          properties:\n            sort-order:\n              $ref: '#/components/schemas/SortOrder'\n\n    SetDefaultSortOrderUpdate:\n      allOf:\n        - $ref: '#/components/schemas/BaseUpdate'\n        - type: object\n          required:\n            - sort-order-id\n          properties:\n            sort-order-id:\n              type: integer\n              description: Sort order ID to set as the default, or -1 to set last added sort order\n\n    AddSnapshotUpdate:\n      allOf:\n        - $ref: '#/components/schemas/BaseUpdate'\n        - type: object\n          required:\n            - snapshot\n          properties:\n            snapshot:\n              $ref: '#/components/schemas/Snapshot'\n\n    SetSnapshotRefUpdate:\n      allOf:\n        - $ref: '#/components/schemas/BaseUpdate'\n        - $ref: '#/components/schemas/SnapshotReference'\n        - type: object\n          required:\n            - ref-name\n          properties:\n            ref-name:\n              type: string\n\n    RemoveSnapshotsUpdate:\n      allOf:\n        - $ref: '#/components/schemas/BaseUpdate'\n        - type: object\n          required:\n            - snapshot-ids\n          properties:\n            snapshot-ids:\n              type: array\n              items:\n                type: integer\n                format: int64\n\n    RemoveSnapshotRefUpdate:\n      allOf:\n        - $ref: '#/components/schemas/BaseUpdate'\n        - type: object\n          required:\n            - ref-name\n          properties:\n            ref-name:\n              type: string\n\n    SetLocationUpdate:\n      allOf:\n        - $ref: '#/components/schemas/BaseUpdate'\n        - type: object\n          required:\n            - location\n          properties:\n            location:\n              type: string\n\n    SetPropertiesUpdate:\n      allOf:\n        - $ref: '#/components/schemas/BaseUpdate'\n        - type: object\n          required:\n            - updates\n          properties:\n            updates:\n              type: object\n              additionalProperties:\n                type: string\n\n    RemovePropertiesUpdate:\n      allOf:\n        - $ref: '#/components/schemas/BaseUpdate'\n        - type: object\n          required:\n            - removals\n          properties:\n            removals:\n              type: array\n              items:\n                type: string\n\n    TableUpdate:\n      anyOf:\n        - $ref: '#/components/schemas/UpgradeFormatVersionUpdate'\n        - $ref: '#/components/schemas/AddSchemaUpdate'\n        - $ref: '#/components/schemas/SetCurrentSchemaUpdate'\n        - $ref: '#/components/schemas/AddPartitionSpecUpdate'\n        - $ref: '#/components/schemas/SetDefaultSpecUpdate'\n        - $ref: '#/components/schemas/AddSortOrderUpdate'\n        - $ref: '#/components/schemas/SetDefaultSortOrderUpdate'\n        - $ref: '#/components/schemas/AddSnapshotUpdate'\n        - $ref: '#/components/schemas/SetSnapshotRefUpdate'\n        - $ref: '#/components/schemas/RemoveSnapshotsUpdate'\n        - $ref: '#/components/schemas/RemoveSnapshotRefUpdate'\n        - $ref: '#/components/schemas/SetLocationUpdate'\n        - $ref: '#/components/schemas/SetPropertiesUpdate'\n        - $ref: '#/components/schemas/RemovePropertiesUpdate'\n\n    TableRequirement:\n      description:\n        Assertions from the client that must be valid for the commit to succeed. Assertions are identified by `type` -\n\n        - `assert-create` - the table must not already exist; used for create transactions\n\n        - `assert-table-uuid` - the table UUID must match the requirement's `uuid`\n\n        - `assert-ref-snapshot-id` - the table branch or tag identified by the requirement's `ref` must reference the requirement's `snapshot-id`; if `snapshot-id` is `null` or missing, the ref must not already exist\n\n        - `assert-last-assigned-field-id` - the table's last assigned column id must match the requirement's `last-assigned-field-id`\n\n        - `assert-current-schema-id` - the table's current schema id must match the requirement's `current-schema-id`\n\n        - `assert-last-assigned-partition-id` - the table's last assigned partition id must match the requirement's `last-assigned-partition-id`\n\n        - `assert-default-spec-id` - the table's default spec id must match the requirement's `default-spec-id`\n\n        - `assert-default-sort-order-id` - the table's default sort order id must match the requirement's `default-sort-order-id`\n      type: object\n      required:\n        - requirement\n      properties:\n        requirement:\n          type: string\n          enum:\n            - assert-create\n            - assert-table-uuid\n            - assert-ref-snapshot-id\n            - assert-last-assigned-field-id\n            - assert-current-schema-id\n            - assert-last-assigned-partition-id\n            - assert-default-spec-id\n            - assert-default-sort-order-id\n        ref:\n          type: string\n        uuid:\n          type: string\n        snapshot-id:\n          type: integer\n          format: int64\n        last-assigned-field-id:\n          type: integer\n        current-schema-id:\n          type: integer\n        last-assigned-partition-id:\n          type: integer\n        default-spec-id:\n          type: integer\n        default-sort-order-id:\n          type: integer\n\n    LoadTableResult:\n      description:\n        Result used when a table is successfully loaded.\n\n\n        The table metadata JSON is returned in the `metadata` field. The corresponding file location of table metadata should be returned in the `metadata-location` field, unless the metadata is not yet committed. For example, a create transaction may return metadata that is staged but not committed.\n        Clients can check whether metadata has changed by comparing metadata locations after the table has been created.\n\n\n        The `config` map returns table-specific configuration for the table's resources, including its HTTP client and FileIO. For example, config may contain a specific FileIO implementation class for the table depending on its underlying storage.\n      type: object\n      required:\n        - metadata\n      properties:\n        metadata-location:\n          type: string\n          description: May be null if the table is staged as part of a transaction\n        metadata:\n          $ref: '#/components/schemas/TableMetadata'\n        config:\n          type: object\n          additionalProperties:\n            type: string\n\n    CommitTableRequest:\n      type: object\n      required:\n        - requirements\n        - updates\n      properties:\n        requirements:\n          type: array\n          items:\n            $ref: '#/components/schemas/TableRequirement'\n        updates:\n          type: array\n          items:\n            $ref: '#/components/schemas/TableUpdate'\n\n    CreateTableRequest:\n      type: object\n      required:\n        - name\n        - schema\n      properties:\n        name:\n          type: string\n        location:\n          type: string\n        schema:\n          $ref: '#/components/schemas/Schema'\n        partition-spec:\n          $ref: '#/components/schemas/PartitionSpec'\n        write-order:\n          $ref: '#/components/schemas/SortOrder'\n        stage-create:\n          type: boolean\n        properties:\n          type: object\n          additionalProperties:\n            type: string\n\n    TokenType:\n      type: string\n      enum:\n        - urn:ietf:params:oauth:token-type:access_token\n        - urn:ietf:params:oauth:token-type:refresh_token\n        - urn:ietf:params:oauth:token-type:id_token\n        - urn:ietf:params:oauth:token-type:saml1\n        - urn:ietf:params:oauth:token-type:saml2\n        - urn:ietf:params:oauth:token-type:jwt\n      description:\n        Token type identifier, from RFC 8693 Section 3\n\n\n        See https://datatracker.ietf.org/doc/html/rfc8693#section-3\n\n    OAuthClientCredentialsRequest:\n      description:\n        OAuth2 client credentials request\n\n\n        See https://datatracker.ietf.org/doc/html/rfc6749#section-4.4\n      type: object\n      required:\n        - grant_type\n        - client_id\n        - client_secret\n      properties:\n        grant_type:\n          type: string\n          enum:\n            - client_credentials\n        scope:\n          type: string\n        client_id:\n          type: string\n          description:\n            Client ID\n\n\n            This can be sent in the request body, but OAuth2 recommends sending it in\n            a Basic Authorization header.\n        client_secret:\n          type: string\n          description:\n            Client secret\n\n\n            This can be sent in the request body, but OAuth2 recommends sending it in\n            a Basic Authorization header.\n\n    OAuthTokenExchangeRequest:\n      description:\n        OAuth2 token exchange request\n\n\n        See https://datatracker.ietf.org/doc/html/rfc8693\n      type: object\n      required:\n        - grant_type\n        - subject_token\n        - subject_token_type\n      properties:\n        grant_type:\n          type: string\n          enum:\n            - urn:ietf:params:oauth:grant-type:token-exchange\n        scope:\n          type: string\n        requested_token_type:\n          $ref: '#/components/schemas/TokenType'\n        subject_token:\n          type: string\n          description: Subject token for token exchange request\n        subject_token_type:\n          $ref: '#/components/schemas/TokenType'\n        actor_token:\n          type: string\n          description: Actor token for token exchange request\n        actor_token_type:\n          $ref: '#/components/schemas/TokenType'\n\n    OAuthTokenRequest:\n      anyOf:\n        - $ref: '#/components/schemas/OAuthClientCredentialsRequest'\n        - $ref: '#/components/schemas/OAuthTokenExchangeRequest'\n\n  #############################\n  # Reusable Response Objects #\n  #############################\n  responses:\n\n    OAuthTokenResponse:\n      description: OAuth2 token response for client credentials or token exchange\n      content:\n        application/json:\n          schema:\n            required:\n              - access_token\n              - token_type\n            properties:\n              access_token:\n                type: string\n                description:\n                  The access token, for client credentials or token exchange\n              token_type:\n                type: string\n                enum:\n                  - bearer\n                  - mac\n                  - N_A\n                description:\n                  Access token type for client credentials or token exchange\n\n\n                  See https://datatracker.ietf.org/doc/html/rfc6749#section-7.1\n              expires_in:\n                type: integer\n                description:\n                  Lifetime of the access token in seconds for client credentials or token exchange\n              issued_token_type:\n                $ref: '#/components/schemas/TokenType'\n              refresh_token:\n                type: string\n                description: Refresh token for client credentials or token exchange\n              scope:\n                type: string\n                description: Authorization scope for client credentials or token exchange\n\n    OAuthErrorResponse:\n      description: OAuth2 error response\n      content:\n        application/json:\n          schema:\n            required:\n              - error\n            properties:\n              error:\n                type: string\n                enum:\n                  - invalid_request\n                  - invalid_client\n                  - invalid_grant\n                  - unauthorized_client\n                  - unsupported_grant_type\n                  - invalid_scope\n              error_description:\n                type: string\n              error_uri:\n                type: string\n\n    BadRequestErrorResponse:\n      description:\n        Indicates a bad request error. It could be caused by an unexpected request\n        body format or other forms of request validation failure, such as invalid json.\n        Usually serves application/json content, although in some cases simple text/plain content might\n        be returned by the server's middleware.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorModel'\n          example: {\n            \"error\": {\n              \"message\": \"Malformed request\",\n              \"type\": \"BadRequestException\",\n              \"code\": 400\n            }\n          }\n\n    #  Note that this is a representative example response for use as a shorthand in the spec.\n    #  The fields `message` and `type` as indicated here are not presently prescriptive.\n    UnauthorizedResponse:\n      description:\n        Unauthorized. Authentication is required and has failed or has not yet been provided.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorModel'\n          example: {\n            \"error\": {\n              \"message\": \"Not authorized to make this request\",\n              \"type\": \"NotAuthorizedException\",\n              \"code\": 401\n            }\n          }\n\n    #  Note that this is a representative example response for use as a shorthand in the spec.\n    #  The fields `message` and `type` as indicated here are not presently prescriptive.\n    ForbiddenResponse:\n      description: Forbidden. Authenticated user does not have the necessary permissions.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorModel'\n          example: {\n            \"error\": {\n              \"message\": \"Not authorized to make this request\",\n              \"type\": \"NotAuthorizedException\",\n              \"code\": 403\n            }\n          }\n\n    #  Note that this is a representative example response for use as a shorthand in the spec.\n    #  The fields `message` and `type` as indicated here are not presently prescriptive.\n    UnsupportedOperationResponse:\n      description: Not Acceptable / Unsuported Operation. The server does not support this operation.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorModel'\n          example: {\n            \"error\": {\n              \"message\": \"The server does not support this operation\",\n              \"type\": \"UnsupportedOperationException\",\n              \"code\": 406\n            }\n          }\n\n    IcebergErrorResponse:\n      description: JSON wrapper for all error responses (non-2xx)\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              error:\n                $ref: '#/components/schemas/ErrorModel'\n            additionalProperties: false\n            example: {\n              \"error\": {\n                \"message\": \"The server does not support this operation\",\n                \"type\": \"UnsupportedOperationException\",\n                \"code\": 406\n              } }\n\n    CreateNamespaceResponse:\n      description:\n        Represents a successful call to create a namespace.\n        Returns the namespace created, as well as any properties that were stored for the namespace,\n        including those the server might have added. Implementations are not required to support namespace\n        properties.\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - namespace\n            properties:\n              namespace:\n                $ref: '#/components/schemas/Namespace'\n              properties:\n                type: object\n                additionalProperties:\n                  type: string\n                description:\n                  Properties stored on the namespace, if supported by the server.\n                example: { \"owner\": \"Ralph\", \"created_at\": \"1452120468\" }\n                default: { }\n          example: {\n            \"namespace\": [\"accounting\", \"tax\"],\n            \"properties\": { \"owner\": \"Ralph\", \"created_at\": \"1452120468\" }\n          }\n\n    GetNamespaceResponse:\n      description:\n        Returns a namespace, as well as any properties stored on the namespace if namespace properties\n        are supported by the server.\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - namespace\n            properties:\n              namespace:\n                $ref: '#/components/schemas/Namespace'\n              properties:\n                type: object\n                description:\n                  Properties stored on the namespace, if supported by the server.\n                  If the server does not support namespace properties, it should return null for this field.\n                  If namespace properties are supported, but none are set, it should return an empty object.\n                example: { \"owner\": \"Ralph\", 'transient_lastDdlTime': '1452120468' }\n                default: { }\n                nullable: true\n\n    ListTablesResponse:\n      description: A list of table identifiers\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              identifiers:\n                type: array\n                uniqueItems: true\n                items:\n                  $ref: '#/components/schemas/TableIdentifier'\n          examples:\n            ListTablesResponseNonEmpty:\n              $ref: '#/components/examples/ListTablesNonEmptyExample'\n            ListTablesResponseEmpty:\n              $ref: '#/components/examples/ListTablesEmptyExample'\n\n    ListNamespacesResponse:\n      description: A list of namespaces\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              namespaces:\n                type: array\n                uniqueItems: true\n                items:\n                  $ref: '#/components/schemas/Namespace'\n          examples:\n            NonEmptyResponse:\n              $ref: '#/components/examples/ListNamespacesNonEmptyExample'\n            EmptyResponse:\n              $ref: '#/components/examples/ListNamespacesEmptyExample'\n\n    AuthenticationTimeoutResponse:\n      description:\n        Credentials have timed out. If possible, the client should refresh credentials and retry.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorModel'\n          example: {\n            \"error\": {\n              \"message\": \"Credentials have timed out\",\n              \"type\": \"AuthenticationTimeoutException\",\n              \"code\": 419\n            }\n          }\n\n    ServiceUnavailableResponse:\n      description:\n        The service is not ready to handle the request. The client should wait and retry.\n\n\n        The service may additionally send a Retry-After header to indicate when to retry.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorModel'\n          example: {\n            \"error\": {\n              \"message\": \"Slow down\",\n              \"type\": \"SlowDownException\",\n              \"code\": 503\n            }\n          }\n\n    ServerErrorResponse:\n      description:\n        A server-side problem that might not be addressable from the client\n        side. Used for server 5xx errors without more specific documentation in\n        individual routes.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorModel'\n          example: {\n            \"error\": {\n              \"message\": \"Internal Server Error\",\n              \"type\": \"InternalServerError\",\n              \"code\": 500\n            }\n          }\n\n    UpdateNamespacePropertiesResponse:\n      description: JSON data response for a synchronous update properties request.\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - updated\n              - removed\n            properties:\n              updated:\n                description: List of property keys that were added or updated\n                type: array\n                uniqueItems: true\n                items:\n                  type: string\n              removed:\n                description: List of properties that were removed\n                type: array\n                items:\n                  type: string\n              missing:\n                type: array\n                items:\n                  type: string\n                description:\n                  List of properties requested for removal that were not found\n                  in the namespace's properties. Represents a partial success response.\n                  Server's do not need to implement this.\n                nullable: true\n          example: {\n            \"updated\": [ \"owner\" ],\n            \"removed\": [ \"foo\" ],\n            \"missing\": [ \"bar\" ]\n          }\n\n    CreateTableResponse:\n      description: Table metadata result after creating a table\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/LoadTableResult'\n\n    LoadTableResponse:\n      description: Table metadata result when loading a table\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/LoadTableResult'\n\n    CommitTableResponse:\n      description:\n        Response used when a table is successfully updated.\n\n        The table metadata JSON is returned in the metadata field. The corresponding file location of table metadata must be returned in the metadata-location field. Clients can check whether metadata has changed by comparing metadata locations.\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - metadata-location\n              - metadata\n            properties:\n              metadata-location:\n                type: string\n              metadata:\n                $ref: '#/components/schemas/TableMetadata'\n\n  #######################################\n  # Common examples of different values #\n  #######################################\n  examples:\n\n    ListTablesEmptyExample:\n      summary: An empty list for a namespace with no tables\n      value: {\n        \"identifiers\": [ ]\n      }\n\n    ListNamespacesEmptyExample:\n      summary: An empty list of namespaces\n      value: {\n        \"namespaces\": [ ]\n      }\n\n    ListNamespacesNonEmptyExample:\n      summary: A non-empty list of namespaces\n      value: {\n        \"namespaces\": [\n          [\"accounting\", \"tax\"],\n          [\"accounting\", \"credits\"]\n        ]\n      }\n\n    ListTablesNonEmptyExample:\n      summary: A non-empty list of table identifiers\n      value: {\n        \"identifiers\": [\n          { \"namespace\": [\"accounting\", \"tax\"], \"name\": \"paid\" },\n          { \"namespace\": [\"accounting\", \"tax\"], \"name\": \"owed\" }\n        ]\n      }\n\n    MultipartNamespaceAsPathVariable:\n      summary: A multi-part namespace, as represented in a path parameter\n      value: \"accounting%1Ftax\"\n\n    NamespaceAsPathVariable:\n      summary: A single part namespace, as represented in a path paremeter\n      value: \"accounting\"\n\n    NamespaceAlreadyExistsError:\n      summary: The requested namespace already exists\n      value: {\n        \"error\": {\n          \"message\": \"The given namespace already exists\",\n          \"type\": \"AlreadyExistsException\",\n          \"code\": 409\n        }\n      }\n\n    NoSuchTableError:\n      summary: The requested table does not\n      value: {\n        \"error\": {\n          \"message\": \"The given table does not exist\",\n          \"type\": \"NoSuchTableException\",\n          \"code\": 404\n        }\n      }\n\n    NoSuchNamespaceError:\n      summary: The requested namespace does not exist\n      value: {\n        \"error\": {\n          \"message\": \"The given namespace does not exist\",\n          \"type\": \"NoSuchNamespaceException\",\n          \"code\": 404\n        }\n      }\n\n    RenameTableSameNamespace:\n      summary: Rename a table in the same namespace\n      value: {\n        \"source\": { \"namespace\": [\"accounting\", \"tax\"], \"name\": \"paid\" },\n        \"destination\": { \"namespace\": [\"accounting\", \"tax\"], \"name\": \"owed\" }\n      }\n\n    TableAlreadyExistsError:\n      summary: The requested table identifier already exists\n      value: {\n        \"error\": {\n          \"message\": \"The given table already exists\",\n          \"type\": \"AlreadyExistsException\",\n          \"code\": 409\n        }\n      }\n\n    # This is an example response and is not meant to be prescriptive regarding the message or type.\n    UnprocessableEntityDuplicateKey:\n      summary:\n        The request body either has the same key multiple times in what should be a map with unique keys\n        or the request body has keys in two or more fields which should be disjoint sets.\n      value: {\n        \"error\": {\n          \"message\": \"The request cannot be processed as there is a key present multiple times\",\n          \"type\": \"UnprocessableEntityException\",\n          \"code\": 422\n        }\n      }\n\n    UpdateAndRemoveNamespacePropertiesRequest:\n      summary: An update namespace properties request with both properties to remove and properties to upsert.\n      value: {\n        \"removals\": [ \"foo\", \"bar\" ],\n        \"updates\": { \"owner\": \"Raoul\" }\n      }\n\n  securitySchemes:\n    OAuth2:\n      type: oauth2\n      flows:\n        clientCredentials:\n          tokenUrl: /v1/oauth/tokens\n          scopes:\n            catalog: Allows interacting with the Config and Catalog APIs\n    BearerAuth:\n      type: http\n      scheme: bearer\n",
			"canonicalURL": "/github.com/apache/iceberg@906ba1b4998f938c4615a96ec90921e4ccd09c4a/-/blob/open-api/rest-catalog-open-api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/apache/iceberg/blob/906ba1b4998f938c4615a96ec90921e4ccd09c4a/open-api/rest-catalog-open-api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"UpdateNamespacePropertiesRequest\": parse schema: property \"updates\": at 1:27458: parse schema: object cannot contain 'items' field"
}