{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ethereum/beacon-APIs"
		},
		"file": {
			"name": "beacon-node-oapi.yaml",
			"size": 0,
			"path": "beacon-node-oapi.yaml",
			"byteSize": 12089,
			"content": "openapi: \"3.0.3\"\n\ninfo:\n  title: \"Eth Beacon Node API\"\n  description: |\n    API specification for the beacon node, which enables users to query and participate in Ethereum 2.0 phase 0 beacon chain.\n\n    All requests by default send and receive JSON, and as such should have either or both of the \"Content-Type: application/json\"\n    and \"Accept: application/json\" headers.  In addition, some requests can return data in the SSZ format.  To indicate that SSZ\n    data is required in response to a request the header \"Accept: application/octet-stream\" should be sent.  Note that only a subset\n    of requests can respond with data in SSZ format; these are noted in each individual request.\n\n    API endpoints are individually versioned.  As such, there is no direct relationship between all v1 endpoints, all v2 endpoints,\n    _etc._ and no such relationship should be inferred.  All JSON responses return the requested data under a `data` key in the top\n    level of their response.  Additional metadata may or may not be present in other keys at the top level of the response, dependent\n    on the endpoint.  The rules that require an increase in version number are as follows:\n\n      - no field that is listed in an endpoint shall be removed without an increase in the version number\n      - no field that is listed in an endpoint shall be altered in terms of format (_e.g._ from a string to an array) without an\n        increase in the version number\n\n    Note that it is possible for a field to be added to an endpoint's data or metadata without an increase in the version number.\n\n  version: \"Dev - Eth2Spec v1.1.0\"\n  contact:\n    name: Ethereum Github\n    url: https://github.com/ethereum/beacon-apis/issues\n  license:\n    name: \"CC0-1.0\"\n    url: \"https://creativecommons.org/publicdomain/zero/1.0/\"\n\nservers:\n  - url: \"{server_url}\"\n    variables:\n      server_url:\n        description: \"Beacon node API url\"\n        default: \"http://public-mainnet-node.ethereum.org/\"\n\ntags:\n  - name: Beacon\n    description: Set of endpoints to query beacon chain.\n  - name: Config\n    description: Endpoints to query chain configuration, specification, and fork schedules.\n  - name: Debug\n    description: Set of endpoints to debug chain and shouldn't be exposed publicly.\n  - name: Events\n    description: Set of endpoints to for event subscription.\n  - name: Node\n    description: Endpoints to query node related informations\n  - name: Validator\n    description: Endpoints intended for validator clients\n  - name: ValidatorRequiredApi\n    description: |\n      Minimal set of endpoints to enable a working validator implementation.\n\n      [Checkout validator flow](./validator-flow.md) to learn how to use this api.\npaths:\n\n  /eth/v1/beacon/genesis:\n    $ref: \"./apis/beacon/genesis.yaml\"\n  /eth/v1/beacon/states/{state_id}/root:\n    $ref: \"./apis/beacon/states/root.yaml\"\n  /eth/v1/beacon/states/{state_id}/fork:\n    $ref: \"./apis/beacon/states/fork.yaml\"\n  /eth/v1/beacon/states/{state_id}/finality_checkpoints:\n    $ref: \"./apis/beacon/states/finality_checkpoints.yaml\"\n  /eth/v1/beacon/states/{state_id}/validators:\n    $ref: \"./apis/beacon/states/validators.yaml\"\n  /eth/v1/beacon/states/{state_id}/validators/{validator_id}:\n    $ref: \"./apis/beacon/states/validator.yaml\"\n  /eth/v1/beacon/states/{state_id}/validator_balances:\n    $ref: \"./apis/beacon/states/validator_balances.yaml\"\n  /eth/v1/beacon/states/{state_id}/committees:\n    $ref: \"./apis/beacon/states/committee.yaml\"\n  /eth/v1/beacon/states/{state_id}/sync_committees:\n    $ref: \"./apis/beacon/states/sync_committees.yaml\"\n  /eth/v1/beacon/headers:\n    $ref: \"./apis/beacon/blocks/headers.yaml\"\n  /eth/v1/beacon/headers/{block_id}:\n    $ref: \"./apis/beacon/blocks/header.yaml\"\n  /eth/v1/beacon/blocks:\n    $ref: \"./apis/beacon/blocks/blocks.yaml\"\n  /eth/v1/beacon/blinded_blocks:\n    $ref: \"./apis/beacon/blocks/blinded_blocks.yaml\"\n  /eth/v1/beacon/blocks/{block_id}:\n    $ref: \"./apis/beacon/blocks/block.yaml\"\n  /eth/v2/beacon/blocks/{block_id}:\n    $ref: \"./apis/beacon/blocks/block.v2.yaml\"\n  /eth/v1/beacon/blocks/{block_id}/root:\n    $ref: \"./apis/beacon/blocks/root.yaml\"\n  /eth/v1/beacon/blocks/{block_id}/attestations:\n    $ref: \"./apis/beacon/blocks/attestations.yaml\"\n\n  /eth/v1/beacon/pool/attestations:\n    $ref: \"./apis/beacon/pool/attestations.yaml\"\n  /eth/v1/beacon/pool/attester_slashings:\n    $ref: \"./apis/beacon/pool/attester_slashings.yaml\"\n  /eth/v1/beacon/pool/proposer_slashings:\n    $ref: \"./apis/beacon/pool/proposer_slashings.yaml\"\n  /eth/v1/beacon/pool/sync_committees:\n    $ref: \"./apis/beacon/pool/sync_committees.yaml\"\n  /eth/v1/beacon/pool/voluntary_exits:\n    $ref: \"./apis/beacon/pool/voluntary_exists.yaml\"\n\n  /eth/v1/debug/beacon/states/{state_id}:\n    $ref: './apis/debug/state.yaml'\n  /eth/v2/debug/beacon/states/{state_id}:\n    $ref: './apis/debug/state.v2.yaml'\n  /eth/v1/debug/beacon/heads:\n    $ref: './apis/debug/heads.yaml'\n  /eth/v2/debug/beacon/heads:\n    $ref: './apis/debug/heads.v2.yaml'\n\n  /eth/v1/node/identity:\n    $ref: \"./apis/node/identity.yaml\"\n  /eth/v1/node/peers:\n    $ref: \"./apis/node/peers.yaml\"\n  /eth/v1/node/peers/{peer_id}:\n    $ref: \"./apis/node/peer.yaml\"\n  /eth/v1/node/peer_count:\n    $ref: \"./apis/node/peer_count.yaml\"\n  /eth/v1/node/version:\n    $ref: \"./apis/node/version.yaml\"\n  /eth/v1/node/syncing:\n    $ref: \"./apis/node/syncing.yaml\"\n  /eth/v1/node/health:\n    $ref: \"./apis/node/health.yaml\"\n\n  /eth/v1/config/fork_schedule:\n    $ref: \"./apis/config/fork_schedule.yaml\"\n  /eth/v1/config/spec:\n    $ref: \"./apis/config/spec.yaml\"\n  /eth/v1/config/deposit_contract:\n    $ref: \"./apis/config/deposit_contract.yaml\"\n\n  /eth/v1/validator/duties/attester/{epoch}:\n    $ref: \"./apis/validator/duties/attester.yaml\"\n  /eth/v1/validator/duties/proposer/{epoch}:\n    $ref: \"./apis/validator/duties/proposer.yaml\"\n  /eth/v1/validator/duties/sync/{epoch}:\n    $ref: \"./apis/validator/duties/sync.yaml\"\n  /eth/v1/validator/blocks/{slot}:\n    $ref: \"./apis/validator/block.yaml\"\n  /eth/v2/validator/blocks/{slot}:\n    $ref: \"./apis/validator/block.v2.yaml\"\n  /eth/v1/validator/blinded_blocks/{slot}:\n    $ref: \"./apis/validator/blinded_block.yaml\"\n  /eth/v1/validator/attestation_data:\n    $ref: \"./apis/validator/attestation_data.yaml\"\n  /eth/v1/validator/aggregate_attestation:\n    $ref: \"./apis/validator/aggregate_attestation.yaml\"\n  /eth/v1/validator/aggregate_and_proofs:\n    $ref: \"./apis/validator/aggregate_and_proofs.yaml\"\n  /eth/v1/validator/beacon_committee_subscriptions:\n    $ref: \"./apis/validator/beacon_committee_subscriptions.yaml\"\n  /eth/v1/validator/sync_committee_subscriptions:\n    $ref: \"./apis/validator/sync_committee_subscriptions.yaml\"\n  /eth/v1/validator/sync_committee_contribution:\n    $ref: \"./apis/validator/sync_committee_contribution.yaml\"\n  /eth/v1/validator/contribution_and_proofs:\n    $ref: \"./apis/validator/sync_committee_contribution_and_proof.yaml\"\n  /eth/v1/validator/prepare_beacon_proposer:\n    $ref: \"./apis/validator/prepare_beacon_proposer.yaml\"\n  /eth/v1/validator/register_validator:\n    $ref: \"./apis/validator/register_validator.yaml\"\n\n  /eth/v1/events:\n    $ref: \"./apis/eventstream/index.yaml\"\n\n\ncomponents:\n  schemas:\n    BeaconState:\n      $ref: './types/state.yaml#/BeaconState'\n    BeaconBlock:\n      $ref: './types/block.yaml#/BeaconBlock'\n    SignedBeaconBlock:\n      $ref: './types/block.yaml#/SignedBeaconBlock'\n    SignedBeaconBlockHeader:\n      $ref: './types/block.yaml#/SignedBeaconBlockHeader'\n    ValidatorResponse:\n      $ref: './types/api.yaml#/ValidatorResponse'\n    ValidatorBalanceResponse:\n      $ref: './types/api.yaml#/ValidatorBalanceResponse'\n    ValidatorStatus:\n      $ref: './types/api.yaml#/ValidatorStatus'\n    Committee:\n      $ref: './types/api.yaml#/Committee'\n    AttesterSlashing:\n      $ref: './types/attester_slashing.yaml#/AttesterSlashing'\n    ProposerSlashing:\n      $ref: './types/proposer_slashing.yaml#/ProposerSlashing'\n    SignedVoluntaryExit:\n      $ref: './types/voluntary_exit.yaml#/SignedVoluntaryExit'\n    AttesterDuty:\n      $ref: './types/validator.yaml#/AttesterDuty'\n    ProposerDuty:\n      $ref: './types/validator.yaml#/ProposerDuty'\n    Altair.SyncDuty:\n      $ref: './types/validator.yaml#/Altair/SyncDuty'\n    SignedAggregateAndProof:\n      $ref: './types/validator.yaml#/SignedAggregateAndProof'\n    Attestation:\n      $ref: './types/attestation.yaml#/Attestation'\n    AttestationData:\n      $ref: './types/attestation.yaml#/AttestationData'\n    Fork:\n      $ref: './types/misc.yaml#/Fork'\n    Checkpoint:\n      $ref: './types/misc.yaml#/Checkpoint'\n    Uint64:\n      $ref: './types/primitive.yaml#/Uint64'\n    NetworkIdentity:\n      $ref: './types/p2p.yaml#/NetworkIdentity'\n    Peer:\n      $ref: './types/p2p.yaml#/Peer'\n    PeerId:\n      $ref: './types/p2p.yaml#/PeerId'\n    PeerConnectionState:\n      $ref: './types/p2p.yaml#/PeerConnectionState'\n    PeerConnectionDirection:\n      $ref: './types/p2p.yaml#/PeerConnectionDirection'\n    GenesisTime:\n      $ref: './types/primitive.yaml#/GenesisTime'\n    Version:\n      $ref: './types/primitive.yaml#/Version'\n    ForkVersion:\n      $ref: './types/primitive.yaml#/ForkVersion'\n    DependentRoot:\n      $ref: './types/primitive.yaml#/DependentRoot'\n    ExecutionOptimistic:\n      $ref: './types/primitive.yaml#/ExecutionOptimistic'\n    Root:\n      $ref: './types/primitive.yaml#/Root'\n    Hex:\n      $ref: './types/primitive.yaml#/Hex'\n    Graffiti:\n      $ref: './types/primitive.yaml#/Graffiti'\n    Signature:\n      $ref: './types/primitive.yaml#/Signature'\n    ErrorMessage:\n      $ref: './types/http.yaml#/ErrorMessage'\n    IndexedErrorMessage:\n      $ref: './types/http.yaml#/IndexedErrorMessage'\n    Altair.SignedBeaconBlock:\n      $ref: './types/altair/block.yaml#/Altair/SignedBeaconBlock'\n    Altair.BeaconBlock:\n      $ref: './types/altair/block.yaml#/Altair/BeaconBlock'\n    Altair.BeaconState:\n      $ref: './types/altair/state.yaml#/Altair/BeaconState'\n    Altair.SyncCommitteeSignature:\n      $ref: './types/altair/sync_committee.yaml#/Altair/SyncCommitteeSignature'\n    Altair.SyncCommitteeSubscription:\n      $ref: './types/altair/sync_committee.yaml#/Altair/SyncCommitteeSubscription'\n    Altair.ContributionAndProof:\n      $ref: './types/altair/sync_committee.yaml#/Altair/ContributionAndProof'\n    Altair.SignedContributionAndProof:\n      $ref: './types/altair/sync_committee.yaml#/Altair/SignedContributionAndProof'\n    Altair.SyncCommitteeContribution:\n      $ref: './types/altair/sync_committee.yaml#/Altair/SyncCommitteeContribution'\n    Altair.SyncCommittee:\n      $ref: './types/altair/sync_committee.yaml#/Altair/SyncCommitteeByValidatorIndices'\n    ExecutionAddress:\n      $ref: './types/primitive.yaml#/ExecutionAddress'\n    Bellatrix.BeaconState:\n      $ref: './types/bellatrix/state.yaml#/Bellatrix/BeaconState'\n    Bellatrix.BeaconBlock:\n      $ref: './types/bellatrix/block.yaml#/Bellatrix/BeaconBlock'\n    Bellatrix.SignedBeaconBlock:\n      $ref: './types/bellatrix/block.yaml#/Bellatrix/SignedBeaconBlock'\n    Bellatrix.BlindedBeaconBlock:\n      $ref: './types/bellatrix/block.yaml#/Bellatrix/BlindedBeaconBlock'\n    Bellatrix.SignedBlindedBeaconBlock:\n      $ref: './types/bellatrix/block.yaml#/Bellatrix/SignedBlindedBeaconBlock'\n    ConsensusVersion:\n      enum: [phase0, altair, bellatrix]\n      example: \"phase0\"\n    SignedValidatorRegistration:\n      $ref: './types/registration.yaml#/SignedValidatorRegistration'\n\n  parameters:\n    StateId:\n      $ref: './params/index.yaml#/StateId'\n    BlockId:\n      $ref: './params/index.yaml#/BlockId'\n\n  responses:\n    InvalidRequest:\n      $ref: './types/http.yaml#/InvalidRequest'\n    NotFound:\n      $ref: './types/http.yaml#/NotFound'\n    InternalError:\n      $ref: './types/http.yaml#/InternalError'\n    CurrentlySyncing:\n      $ref: './types/http.yaml#/CurrentlySyncing'\n\n  headers:\n    Eth-Consensus-Version:\n      description: Required in response so client can deserialize returned json or ssz data more effectively.\n      required: true\n      schema:\n        $ref: '#/components/schemas/ConsensusVersion'\n"
		}
	},
	"Error": "parse: parse spec: parse components: parameters: \"StateId\": resolve \"./params/index.yaml#/StateId\" reference: invalid parameter reference: \"./params/index.yaml#/StateId\""
}