{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/aws/serverless-application-model"
		},
		"file": {
			"name": "error_http_api_invalid_tags_format.yaml",
			"size": 0,
			"path": "tests/translator/input/error_http_api_invalid_tags_format.yaml",
			"byteSize": 2252,
			"content": "Conditions:\n  condition:\n    Fn::Equals:\n    - true\n    - true\nResources:\n  HttpApiFunction:\n    Condition: condition\n    Type: AWS::Serverless::Function\n    Properties:\n      CodeUri: s3://sam-demo-bucket/todo_list.zip\n      Handler: index.restapi\n      Runtime: python3.7\n      Events:\n        SimpleCase:\n          Type: HttpApi\n          Properties:\n            ApiId: !Ref MyApi\n  MyApi:\n    Type: AWS::Serverless::HttpApi\n    Properties:\n      DefinitionBody:\n        info:\n          version: '1.0'\n          title:\n            Ref: AWS::StackName\n        paths:\n          /basic:\n            post:\n              x-amazon-apigateway-integration:\n                httpMethod: POST\n                type: aws_proxy\n                uri:\n                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DifferentFunction.Arn}/invocations\n                payloadFormatVersion: '1.0'\n              security:\n              - OpenIdAuth:\n                - scope3\n              responses: {}\n            get:\n              x-amazon-apigateway-integration:\n                httpMethod: POST\n                type: aws_proxy\n                uri:\n                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DifferentFunction.Arn}/invocations\n                payloadFormatVersion: '1.0'\n              responses: {}\n        openapi: 3.0.1\n        tags:\n          name: tag1\n        components:\n          securitySchemes:\n            oauth2Auth:\n              type: oauth2\n              x-amazon-apigateway-authorizer:\n                identitySource: $request.querystring.param\n                type: jwt\n                jwtConfiguration:\n                  audience:\n                  - MyApi\n                  issuer: https://www.example.com/v1/connect/oidc\n            OpenIdAuth:\n              type: openIdConnect\n              x-amazon-apigateway-authorizer:\n                identitySource: $request.querystring.param\n                type: jwt\n                jwtConfiguration:\n                  audience:\n                  - MyApi\n                  issuer: https://www.example.com/v1/connect/oidc\n                openIdConnectUrl: https://www.example.com/v1/connect\n",
			"canonicalURL": "/github.com/aws/serverless-application-model@2f53aebdcf9b322a395eaa872e5368ddc3c76c95/-/blob/tests/translator/input/error_http_api_invalid_tags_format.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/aws/serverless-application-model/blob/2f53aebdcf9b322a395eaa872e5368ddc3c76c95/tests/translator/input/error_http_api_invalid_tags_format.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse version: at tests/translator/input/error_http_api_invalid_tags_format.yaml:1:1: invalid version: invalid major version: strconv.Atoi: parsing \"\": invalid syntax"
}