{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/android/privacy-sandbox-samples"
		},
		"file": {
			"name": "js-server.json",
			"size": 0,
			"path": "Fledge/FledgeServerSpec/js-server.json",
			"byteSize": 4609,
			"content": "{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"js\",\n    \"version\": \"1.1.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://{{url}}\"\n    }\n  ],\n  \"paths\": {\n    \"/bidding\": {\n      \"get\": {\n        \"tags\": [\n            \"default\"\n        ],\n        \"summary\": \"/bidding\",\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"type\": \"string\"\n                },\n                \"example\": \"\\nconst simulateDelay = (ms) =\u003e {\\n  var start = new Date().getTime();\\n  var end = start;\\n  while(end \u003c start + ms) {\\n      end = new Date().getTime();\\n  }\\n}\\n\\n/**\\n * Generates a bid of 10 for the shoes CA, and a bid of 5 otherwise\\n */\\nfunction generateBid(ad, auction_signals, per_buyer_signals,\\n  trusted_bidding_signals, contextual_signals, user_signals,\\n  custom_audience_signals) {\\n  var bid = 5;\\n  if (custom_audience_signals.name === \\\"shoes\\\") {\\n      bid = 10;\\n  }\\n  simulateDelay(0);\\n  return {'status': 0, 'ad': ad, 'bid': bid };\\n}\\n\\nfunction reportWin(ad_selection_signals, per_buyer_signals, signals_for_buyer,\\n contextual_signals, custom_audience_signals) {\\n  // Add the address of your reporting server here\\n  let reporting_address = 'https://reporting.example.com';\\n  simulateDelay(0);\\n  return {'status': 0, 'results': {'reporting_uri':\\n         reporting_address + '?ca=' + custom_audience_signals.name} };\\n}\\n\"\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/scoring\": {\n      \"get\": {\n        \"tags\": [\n            \"default\"\n        ],\n        \"summary\": \"/scoring\",\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"type\": \"string\"\n                },\n                \"example\": \"\\n const simulateDelay = (ms) =\u003e {\\n   var start = new Date().getTime();\\n   var end = start;\\n   while(end \u003c start + ms) {\\n       end = new Date().getTime();\\n   }\\n }\\n\\n\\n/**\\n * Trivial scoring function -- scores each ad with the value of its bid.\\n */\\nfunction scoreAd(ad, bid, auction_config, seller_signals, trusted_scoring_signals,\\n  contextual_signal, user_signal, custom_audience_signal) {\\n  simulateDelay(0);\\n  return {'status': 0, 'score': bid };\\n}\\n\\n\\nfunction reportResult(ad_selection_config, render_uri, bid, contextual_signals) {\\n  // Add the address of your reporting server here\\n  let reporting_address = 'https://reporting.example.com';\\n  simulateDelay(0);\\n  return {'status': 0, 'results': {'signals_for_buyer': '{\\\"signals_for_buyer\\\" : 1}'\\n          , 'reporting_uri': reporting_address + '?render_uri='\\n              + render_uri + '?bid=' + bid } };\\n}\\n\"\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/bidding/daily\": {\n      \"get\": {\n        \"tags\": [\n          \"default\"\n        ],\n        \"summary\": \"/bidding/daily\",\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\"\n                },\n                \"example\": {\n                  \"user_bidding_signals\": {\n                    \"valid\": true,\n                    \"arbitrary\": \"yes\"\n                  },\n                  \"trusted_bidding_data\": {\n                    \"trusted_bidding_uri\": \"https://js.example.com/bidding/trusted\",\n                    \"trusted_bidding_keys\": [\n                      \"key1\",\n                      \"key2\"\n                    ]\n                  },\n                  \"ads\": [\n                    {\n                      \"render_uri\": \"https://js.example.com/render/ad1\",\n                      \"metadata\": {\n                        \"valid\": 1\n                      }\n                    },\n                    {\n                      \"render_uri\": \"https://js.example.com/render/ad2\",\n                      \"metadata\": {\n                        \"valid\": 2\n                      }\n                    }\n                  ]\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/bidding/trusted\": {\n      \"get\": {\n        \"tags\": [\n          \"default\"\n        ],\n        \"summary\": \"/bidding/trusted\",\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\"\n                },\n                \"example\": {\n                  \"valid_signals\": true,\n                  \"arbitrary\": \"yes\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
			"canonicalURL": "/github.com/android/privacy-sandbox-samples@7a2b46ba151120dbbdb13dcd546924d6236c46bd/-/blob/Fledge/FledgeServerSpec/js-server.json",
			"externalURLs": [
				{
					"url": "https://github.com/android/privacy-sandbox-samples/blob/7a2b46ba151120dbbdb13dcd546924d6236c46bd/Fledge/FledgeServerSpec/js-server.json",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse servers: at Fledge/FledgeServerSpec/js-server.json:9:14: invalid path: http://{{url}}"
}