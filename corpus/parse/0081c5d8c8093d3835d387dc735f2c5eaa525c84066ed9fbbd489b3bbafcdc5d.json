{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/EncryFoundation/EncryCore"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "src/main/resources/api/openapi.yaml",
			"byteSize": 23121,
			"content": "openapi: \"3.0.0\"\n\ninfo:\n  version: \"0.3.1\"\n  title: Encry Node API\n  description: API docs for Encry Node.\n  contact:\n    name: Encry Core Team\n    email:\n    url:\n  license:\n    name: GPL 3.0\n    url:\n\ncomponents:\n  schemas:\n    # Objects\n    SimplePaymentTransaction:\n      type: object\n      description: Simple transaction with only one transfer directive inside.\n      required:\n       - accPubKey\n       - sig\n       - fee\n       - change\n       - timestamp\n       - useBoxes\n       - recipient\n       - amount\n      properties:\n        accPubKey:\n          description: Sender public key (Base58)\n          example: \"D2bXMwWN8P9nWJ9qqwZJLauAdcZHX9n6s91QQ9vK6Zu4\"\n        sig:\n          description: Digital signature bytes (Base58)\n          example: \"ahpXMwWN5P9nWJ7qqwZfLauAdcZHX9n6s29QQ9vKZqu9\"\n        fee:\n          description: Fee amount\n          example: 1000000\n        change:\n          description: Change to be sent back to sender\n          example: 10000\n        timestamp:\n          description: Timestamp\n          example: 15879806785\n        useBoxes:\n          description: Array of ADKey's (Inputs ids)\n          example: [\"ghxXMwWN5P9nWJ7qqwZfLauAdcZHX9n6s29QQ9vKZqu9\", \"ydbXMwWN8P9nWJ9qqwZJLauAdcZHX9n6s91QQ9vK6Zu4\"]\n        recipient:\n          description: Recipient address (Base58Check(pubKey))\n          example: \"QSbuKMwWN8P9nWJ9qqwZJLauAdcZHX9n6s91QQ9vK6Zu4\"\n        amount:\n          description: Transafer amount\n          example: 100000\n\n    FullBlock:\n      description: Block with header and transactions\n      type: object\n      required:\n        - header\n        - transactions\n        - adProofs\n      properties:\n        header:\n          $ref: '#/components/schemas/BlockHeader'\n        blockTransactions:\n          $ref: '#/components/schemas/BlockTransactions'\n        adProofs:\n          $ref: '#/components/schemas/BlockADProofs'\n\n    BlockHeader:\n      type: object\n      required:\n        - id\n        - timestamp\n        - reference\n        - version\n        - interlinks\n        - stateRoot\n        - transactionsRoot\n        - nBits\n        - votes\n        - nonce\n        - equihashSolutions\n        - height\n      properties:\n        id:\n          $ref: '#/components/schemas/ModifierId'\n        timestamp:\n          type: integer\n          format: int32\n          example: 1501505945003\n        reference:\n          $ref: '#/components/schemas/ModifierId'\n        version:\n           type: integer\n           format: int32\n           example: 2\n        interlinks:\n          # todo better description\n          description: Interlinks\n          type: array\n          items:\n            $ref: '#/components/schemas/Digest32'\n        adProofsRoot:\n          $ref: '#/components/schemas/Digest32'\n        stateRoot:\n          $ref: '#/components/schemas/ADDigest'\n        transactionsRoot:\n          $ref: '#/components/schemas/Digest32'\n        nBits:\n          # todo actually it is unsigned int?\n          type: integer\n          format: int64\n          example: 19857408\n        votes:\n          $ref: '#/components/schemas/Votes'\n        nonce:\n          type: integer\n          format: int32\n          example: 324573\n        equihashSolutions:\n          description: Base58-encoded equihash solutions\n          type: string\n          example: 11M1yYZ6GLUJJXWmBSsSiZ412y8SLWEh68WwynR77ykcoEr1QxnEWYPdTSbi7qLbHrZhGkQsQgyW3PqrZVAXtBXEZvravSZwm5rWZZorGotNXA8ZKXgwnbDAh24ZjZCcwk8SQ2zdPn7vCiL7AvQppeuqaM2NQPjsE92bCtpgqnbkh\n        height:\n          type: integer\n          format: int32\n          minimum: 0\n          example: 667\n\n    BlockTransactions:\n      type: object\n      required:\n        - headerId\n        - transactions\n      properties:\n        headerId:\n          $ref: '#/components/schemas/ModifierId'\n        transactions:\n          description: Anyone can spend transaction objects\n          type: array\n          items:\n            $ref: '#/components/schemas/AnyoneCanSpendTransaction'\n\n    BlockADProofs:\n      type: object\n      required:\n        - headerId\n        - proofBytes\n        - digest\n      properties:\n        headerId:\n          $ref: '#/components/schemas/ModifierId'\n        proofBytes:\n          $ref: '#/components/schemas/SerializedAdProof'\n        digest:\n          $ref: '#/components/schemas/Digest32'\n\n    Peer:\n      type: object\n      required:\n        - address\n      properties:\n        address:\n          type: string\n          example: 127.0.0.1:5673\n        name:\n          type: string\n          example: mynode\n        nonce:\n          type: integer\n          format: int32\n          example: 123456\n        lastSeen:\n          type: integer\n          format: int64\n          example: 1514194867\n\n    NodeInfo:\n      type: object\n      required:\n        - name\n        - version\n        - fullHeight\n        - headersHeight\n        - bestFullHeaderId\n        - stateRoot\n        - stateType\n        - stateVersion\n        - previousFullHeaderId\n        - isMining\n        - votes\n        - peersCount\n        - unconfirmedCount\n        - difficulty\n      properties:\n        name:\n          type: string\n          example: my-node-1\n        version:\n          type: string\n          example: 0.0.1\n        fullHeight:\n          type: integer\n          format: int32\n          description: Can be 0 if state is empty\n          minimum: 0\n          example: 667\n        headersHeight:\n          type: integer\n          format: int32\n          description: Can be 0 if state is empty\n          minimum: 0\n          example: 667\n        bestFullHeaderId:\n          $ref: '#/components/schemas/ModifierId'\n        previousFullHeaderId:\n          $ref: '#/components/schemas/ModifierId'\n        bestHeaderId:\n          $ref: '#/components/schemas/ModifierId'\n        stateRoot:\n          type: string\n          description: Can be 'null' if state is empty\n          example: D2bXMwWN8P9nWJ9qqwZJLauAdcZHX9n6s91QQ9vK6Zu4\n        difficulty:\n          type: integer\n          format: int32\n          minimum: 0\n          example: 667\n        stateType:\n          type: string\n          enum:\n            - digest\n            - utxo\n        stateVersion:\n          type: string\n          example: D2bXMwWN8P9nWJ9qqwZJLauAdcZHX9n6s91QQ9vK6Zu4\n        isMining:\n          type: boolean\n          example: true\n        votes:\n          type: string\n          $ref: '#/components/schemas/Votes'\n        peersCount:\n          type: integer\n          description: Number of connected peers\n          format: int32\n          minimum: 0\n          example: 327\n        unconfirmedCount:\n          description: Current unconfirmed transactions count\n          type: integer\n          format: int32\n          minimum: 0\n          maximum: 10000\n          example: 327\n\n    TransactionId:\n      description: Base16-encoded transaction id bytes\n      type: string\n      example: 141cef0ed1e1cbd3bdf2da2d39fb9a0e697b8777012b169609eb76313506ef66\n\n    ModifierId:\n      description: Base58-encoded 32 byte modifier id\n      type: string\n      example: D2bXMwWN8P9nWJ9qqwZJLauAdcZHX9n6s91QQ9vK6Zu4\n\n    Digest32:\n      description: Base58-encoded 32 byte digest\n      type: string\n      example: FjX5cPuwMc2ocDLPWzt6jq29BXjvU6d5w5XURDJ6dmoM\n\n    ADDigest:\n      description: Base58-encoded 33 byte digest - digest with extra byte with tree height\n      type: string\n      example: FjX5cPuwMc2ocDLPWzt6jq29BXjvU6d5w5XURDJ6dmoM\n\n    SerializedAdProof:\n      description: Base58-encoded ad proofs\n      type: string\n      example: DpvhNdDszrCDm1qmwFXmxaiz4bgEG19dGVhBaYsofV93BwmFofbnFQ7kNwnDSvptb1NGBmi6GtrFyacj8hBWNueRHVCyctAJE2sSoNxVQiSJEqRaa5NFp3DACG16RPvDDgbG8qZ1kNdfZhK9S6q77LwYhPbzYL2s2x7uzScQdccw4HR68mogEgBXomAXuisJyy4indYfCdEZmFHPELn9Md9F4SGu9BpAKYMUjEwkRKt7Ype8M6MHKFuxiVCTTq2fLC8FVUeSJLDM7BVaZtLctaeuZ3LR3sx1tog7daXTAjsXWYZXvqUVs1qynXvJZnFuAN5wLoynnN7YVahHRGQk9sUQaxtPbt7L5qzBzooXedE9LFssvU9zV3KNM2PkbpaHdAu7tJHWoTNyCzZuR2JqSfnpSDkXhZCQhRB7m7vbGzokZ7DcGwtNUxBr7HdEdEUQLRmpHbLqjL82zZuYvykUyPZwCnphaKku7RW3f3BDk3DReCeFBPZkYkoEJFHe9mCAAM5WD44vtTeNokuMrtUbvUgnUFpBnyJsQf7WHAiFsBbRjZwjgoyUYKJCSLSqp3QwoGW5sSXmGvwG9peFFB3yb6gGdDLJqTx2zTqh3znPpK9S5ePGPdCcmbnNKh1pxqnARhDB8xC7eG6Edvhwh7Nx1sSDHXo8xp3hWUdFT4APK16Wr8KNa4xEKuh9mkb31AQhCuD8GsyRaW9oGdJKtZnwrYeBWGrDQ9c99PG2yyA7JzDcvdALdH7Z7T4pd57KFn4VTdJrT6tqwJPh3wERgQFUUEQ2grpxBg8ZMZy1YEzLu1MnJJVvvx66efK1GPytK4n1hKs3pogMW2Fxi5zbLean7k9Fj6VGcbFKGbJPqzhTr3TW6ywNsBmh7ntSmrV3k45RxWb4KWJByiy25xkQg57qyij71F2vzZgTs3kRVVMS4asE8r3qLiA4w8QKfay7JWC9XVuRJQwMPPeVNRfJP7kK1giZhZahzbCFKLcuP6ShzxBzZmTzhRGuF3HtsbtWawv21czEANc6cV6ymyrics3jtMizGwwAcUcasToNuBih34HhspF65HnR5gKZqqHwkbugeDCpDYieAQzwTLzd52ocdJp98dvHU1SWAGdKaeqhF75FiijZebKb3mQiPMTFj2PMwSTjttarPwpEdEwRLxGPezvCUdq7rJAoZJbszaCBnTDjHjqsv5UiyLXr7gM9uyzMX9GMwTnrWYrEwYAD2Yih4b9mvtMdDeZ1mfJsT9r47xLPqgyxbd232U8pu28JbUrrfpZ2mZARTsXzYsuFQusnbzCo72PWNUvceTXh5f5TFhMbmCydcrfCyM3JFV2FrxwNKFKdFvdppAGXGKwhk5cB4\n\n    Votes:\n      description: Base58-encoded votes array\n      type: string\n      example: AcRpicD\n\n    BlockSignature:\n      description: Base58-encoded block signature\n      type: string\n      example: 3b2QWFpkTAP94ydewvRc6CyxRtcc7q6DpvYVFFfGERyy5sjD3pAVHdPCCDXi7XKDZePxHD35nJJroaQWUy6EZcmz\n\npaths:\n  /blocks:\n    get:\n      summary: Get the Array of header ids\n      operationId: getHeaderIds\n      tags:\n        - blocks\n      parameters:\n        - in: query\n          name: limit\n          required: false\n          description: The number of items in list to return\n          schema:\n            type: integer\n            format: int32\n            minimum: 10\n            maximum: 100\n            default: 50\n        - in: query\n          name: offset\n          required: false\n          description: The number of items in list to skip\n          schema:\n            type: integer\n            format: int32\n            default: 0\n      responses:\n        200:\n          # TODO : decide whether without `heightFrom` and/or `heightTo` the response will contain `limit` blocks stating from 0 + `offset`, or last `limit` blocks\n          description: Array of header ids\n          example: [\"D2bXMwWN8P9nWJ9qqwZJLauAdcZHX9n6s91QQ9vK6Zu4\"]\n          content:\n            application/json:\n              schema:\n                type: array\n                description: Array of header ids\n                items:\n                  type: string\n                  example: D2bXMwWN8P9nWJ9qqwZJLauAdcZHX9n6s91QQ9vK6Zu4\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                type: string\n                enum:\n                  # Parameter `offset` is out of range\n                  - invalid.offset.out.of.range\n    post:\n      summary: Send a mined block\n      operationId: sendMinedBlock\n      tags:\n        - blocks\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FullBlock'\n      responses:\n        200:\n          description: Block is valid\n        default:\n          description: Error\n          content:\n            application/json:\n              type: string\n              enum:\n                - invalid.block\n\n  /blocks/at/{blockHeight}:\n    get:\n      summary: Get the header ids at a given height\n      operationId: getFullBlockAt\n      tags:\n        - blocks\n      parameters:\n        - in: path\n          name: blockHeight\n          required: true\n          description: Height of a wanted block\n          schema:\n            type: integer\n            format: int32\n      responses:\n        200:\n          description: Array of header ids\n          content:\n            application/json:\n              schema:\n                type: array\n                description: Array of header ids\n                example: [\"D2bXMwWN8P9nWJ9qqwZJLauAdcZHX9n6s91QQ9vK6Zu4\"]\n                items:\n                  type: string\n                  example: D2bXMwWN8P9nWJ9qqwZJLauAdcZHX9n6s91QQ9vK6Zu4\n        404:\n          description: Blocks at this height doesn't exist\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                type: string\n                enum:\n                  # Provided height is invalid\n                  - invalid.block.height\n\n  /blocks/{headerId}:\n    get:\n      summary: Get the full block info by a given signature\n      operationId: getFullBlockById\n      tags:\n        - blocks\n      parameters:\n        # todo move out after full support aos3.0 was added to swagger-codegen\n        - in: path\n          name: headerId\n          required: true\n          description: ID of a wanted block\n          schema:\n            type: string\n      responses:\n        200:\n          description: Block object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FullBlock'\n        404:\n          description: Block with this id doesn't exist\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                type: string\n                enum:\n                  # Provided header id is invalid\n                  - invalid.block.id\n\n  /blocks/{headerId}/header:\n    get:\n      summary: Get the block header info by a given signature\n      operationId: getBlockHeaderById\n      tags:\n        - blocks\n      parameters:\n        # todo move out after full support aos3.0 was added to swagger-codegen\n        - in: path\n          name: headerId\n          required: true\n          description: ID of a wanted block header\n          schema:\n            type: string\n      responses:\n        200:\n          description: Block header object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BlockHeader'\n        404:\n          description: Block with this id doesn't exist\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                type: string\n                enum:\n                  # Provided header id is invalid\n                  - invalid.block.id\n\n  /blocks/{headerId}/transactions:\n    get:\n      summary: Get the block transactions info by a given signature\n      operationId: getBlockTransactionsById\n      tags:\n        - blocks\n      parameters:\n        # todo move out after full support aos3.0 was added to swagger-codegen\n        - in: path\n          name: headerId\n          required: true\n          description: ID of a wanted block transactions\n          schema:\n            type: string\n      responses:\n        200:\n          description: Block transaction object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BlockTransactions'\n        404:\n          description: Block with this id doesn't exist\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                type: string\n                enum:\n                  # Provided header id is invalid\n                  - invalid.block.id\n\n  /blocks/candidateBlock:\n    get:\n      summary: Get the candidate block for mining\n      operationId: getCandidateBlock\n      tags:\n        - blocks\n      responses:\n        200:\n          description: Candidate Full Block object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FullBlock'\n\n  /block/lastHeaders/{count}:\n    get:\n      summary: Get the last headers objects\n      operationId: getLastHeaders\n      tags:\n        - blocks\n      parameters:\n        # todo move out after full support aos3.0 was added to swagger-codegen\n        - in: path\n          name: count\n          required: true\n          description: count of a wanted block headers\n          schema:\n            type: number\n      responses:\n        200:\n          description: Array of block headers\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/BlockHeader'\n\n  /info:\n    get:\n      summary: Get the information about the Node\n      operationId: getNodeInfo\n      tags:\n        - info\n      responses:\n        200:\n          description: Node info object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NodeInfo'\n\n  /transactions:\n    post:\n      summary: Send an anyone can spend transaction\n      operationId: sendTransaction\n      tags:\n        - transactions\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AnyoneCanSpendTransaction'\n      responses:\n        200:\n          description: JSON with ID of the new transaction\n          content:\n            application/json:\n              schema:\n                description: ID of the new transaction\n                content:\n                  application/json:\n                    schema:\n                      $ref: '#/components/schemas/TransactionId'\n        default:\n          description: Error\n          content:\n            application/json:\n              type: string\n              enum:\n                # Transaction signature doesn't match transaction data\n                - invalid.transaction.signature\n                # Provided timestamp is invalid\n                - invalid.transaction.timestamp\n                # Provided amount in invalid\n                - invalid.transaction.value\n                # Provided box nonce in invalid\n                - invalid.box.nonce\n                - invalid.json\n\n  /transactions/{transactionId}:\n    get:\n      summary: Get the details of a given transaction, its status and the height of block it belongs to\n      operationId: getTransactionById\n      tags:\n        - transactions\n      parameters:\n        - in: path\n          name: transactionId\n          required: true\n          description: ID of a wanted transaction\n          schema:\n            $ref: '#/components/schemas/TransactionId'\n      responses:\n        200:\n          description: Anyone can spend transactions object\n          content:\n            application/json:\n              $ref: '#/components/schemas/AnyoneCanSpendTransaction'\n        404:\n          description: Transaction with this id doesn't exist\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                type: string\n                enum:\n                  # Provided transaction ID is invalid\n                  - invalid.transaction.id\n\n  /transactions/unconfirmed:\n    parameters:\n      # useless, varies dynamically\n      - in: query\n        name: limit\n        required: false\n        description: The number of items in list to return\n        schema:\n          type: integer\n          format: int32\n          minimum: 10\n          maximum: 100\n          default: 50\n      - in: query\n        name: offset\n        required: false\n        description: The number of items in list to skip\n        schema:\n          type: integer\n          format: int32\n          default: 0\n      # todo from timestamp?\n    get:\n      summary: Get current pool of the unconfirmed transactions pool\n      operationId: getUnconfirmedTransactions\n      tags:\n        - transactions\n      responses:\n        200:\n          description: Array with anyone can spend transactions objects\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AnyoneCanSpendTransaction'\n\n  /peers/all:\n    get:\n      summary: Get all known peers\n      operationId: getAllPeers\n      tags:\n        - peers\n      responses:\n        200:\n          description: Array of peer objects\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Peer'\n\n  /peers/connected:\n    get:\n      summary: Get current connected peers\n      operationId: getConnectedPeers\n      tags:\n        - peers\n      responses:\n        200:\n          description: Array of peer objects\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Peer'\n\n  /peers/connect:\n    post:\n      summary: Add address to peers list\n      operationId: connectToPeer\n      tags:\n        - peers\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: string\n              example: 127.0.0.1:5673\n      responses:\n        200:\n          description: Attempt to connect to the peer\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                type: string\n                enum:\n                  - invalid.peer.address\n                  - invalid.json\n\n  /peers/blacklisted:\n    get:\n      summary: Get blacklisted peers\n      operationId: getBlacklistedPeers\n      tags:\n        - peers\n      responses:\n        200:\n          description: Array of the addresses\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n                  descriptiom: Blacklisted node address\n\n  /utils/seed:\n    get:\n      summary: Get random seed with 32 bytes size\n      operationId: getRandomSeed\n      tags:\n        - utils\n      responses:\n        200:\n          description: Base58-encoded 32 byte seed\n          content:\n            text/plain:\n              schema:\n                type: string\n                example: 7yaASMijGEGTbttYHg1MrXnWB8EbzjJnFLSWvmNoHrXV\n\n  /utils/seed/{length}:\n    get:\n      summary: Generate random seed of specified length in bytes\n      operationId: getRandomSeedWithLength\n      tags:\n        - utils\n      parameters:\n        - in: path\n          name: length\n          required: true\n          description: seed length in bytes\n          schema:\n            type: string\n      responses:\n        200:\n          description: Base58-encoded N byte seed\n          content:\n            text/plain:\n              schema:\n                type: string\n                example: 7yaASMijGEGTbttYHg1MrXnWB8EbzjJnFLSWvmNoHrXV\n\n  /utils/hash/blake2b:\n    post:\n      summary: Return Blake2b hash of specified message\n      operationId: hashBlake2b\n      tags:\n        - utils\n      requestBody:\n        required: true\n        content:\n          text/plain:\n            schema:\n              type: string\n              example: 7yaASMijGEGTbttYHg1MrXnWB8EbzjJnFLSWvmNoHrXV\n      responses:\n        200:\n          description: Base58-encoded 32 byte hash\n          content:\n            text/plain:\n              schema:\n                type: string\n                example: 6QLZkR1RdHvF7gUw7oms1XdQM6kc9kxpmyHRADN5x7uQ",
			"canonicalURL": "/github.com/EncryFoundation/EncryCore@6acb7f481db829370d1a1af9b2d062cfcd68980d/-/blob/src/main/resources/api/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/EncryFoundation/EncryCore/blob/6acb7f481db829370d1a1af9b2d062cfcd68980d/src/main/resources/api/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"FullBlock\": parse schema: property \"blockTransactions\": parse schema: parse schema: property \"transactions\": parse schema: parse schema: at 1:2039: find schema: resolve: can't find value for \"components/schemas/AnyoneCanSpendTransaction\""
}