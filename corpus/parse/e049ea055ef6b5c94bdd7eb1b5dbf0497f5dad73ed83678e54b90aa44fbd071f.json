{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/geoserver/geoserver"
		},
		"file": {
			"name": "featuretypes.yaml",
			"size": 0,
			"path": "src/community/rest-openapi/openapi/src/main/resources/org/geoserver/rest/openapi/1.0.0/featuretypes.yaml",
			"byteSize": 15054,
			"content": "openapi: 3.0.0\ninfo:\n  version: 1.0.0\n  title: GeoServer Feature Types\n  description: A feature type is a vector based spatial resource or data set that\n    originates from a data store. In some cases, such as with a shapefile, a\n    feature type has a one-to-one relationship with its data store. In other\n    cases, such as PostGIS, the relationship of feature type to data store is\n    many-to-one, feature types corresponding to a table in the database.\n\nservers:\n  - url: http://localhost:8080/geoserver/rest\n  - url: https://localhost:8080/geoserver/rest\n\nsecurity:\n  - basicAuth:\n      []\ntags:\n  - name: featuretypes\n    description: FeatureTypes API\n\npaths:\n  \"/workspaces/{workspaceName}/datastores/{storeName}/featuretypes\":\n    parameters:\n      - name: workspaceName\n        in: path\n        description: The name of the workspace\n        required: true\n        schema:\n          type: string\n      - name: storeName\n        in: path\n        description: The name of the datastore\n        required: true\n        schema:\n          type: string\n    get:\n      operationId: getFeatureTypesByStore\n      tags:\n        - featuretypes\n      description: \u003e\n        Get a list of feature types for the workspace and datastore.\n      parameters:\n        - name: list\n          description: \u003e\n            The list parameter is used to control the category of feature types\n            that are returned. Must be one of \"configured\", \"available\",\n            \"available_with_geom\", \"all\"\n          in: query\n          required: false\n          schema:\n            type: string\n            enum:\n              - configured\n              - available\n              - available_with_geom\n              - all\n        - in: query\n          name: quietOnNotFound\n          required: false\n          schema:\n             type: boolean\n             default: true\n      responses:\n        \"200\":\n          $ref: '#/components/responses/FeatureTypeList'\n    post:\n      operationId: createFeatureTypeOnStore\n      tags:\n        - featuretypes\n      description: \u003e\n        Create a new feature type. Note -  when creating a new feature type via\n        POST, if no underlying dataset with the specified name exists an attempt\n        will be made to create it. This will work only in cases where the\n        underlying data format supports the creation of new types (such as a\n        database). When creating a feature type in this manner the client should\n        include all attribute information in the feature type representation.\n      requestBody:\n        $ref: \"#/components/requestBodies/FeatureTypeInfo\"\n      responses:\n        \"201\":\n          description: The feature type was successfully created.\n          headers:\n            Location:\n              description: The location of the newly created feature type.\n              schema:\n                type: string\n\n  \"/workspaces/{workspaceName}/featuretypes\":\n    parameters:\n      - name: workspaceName\n        in: path\n        description: The name of the workspace\n        required: true\n        schema:\n          type: string\n    get:\n      operationId: getFeatureTypesByWorkspace\n      tags:\n        - featuretypes\n      description: \u003e\n        Get a list of all feature types for all datastors in the workspace.\n      parameters:\n        - name: list\n          description: \u003e\n            The list parameter is used to control the category of feature types\n            that are returned. Must be one of \"configured\", \"available\",\n            \"available_with_geom\", \"all\"\n          in: query\n          required: false\n          schema:\n            type: string\n            enum:\n              - configured\n              - available\n              - available_with_geom\n              - all\n      responses:\n        \"200\":\n          $ref: '#/components/responses/FeatureTypeList'\n    post:\n      operationId: createFeatureType\n      tags:\n        - featuretypes\n      description: \u003e\n        Create a new feature type, the feature type definition needs to\n        reference a store. Note -  when creating a new feature type via POST, if\n        no underlying dataset with the specified name exists an attempt will be\n        made to create it. This will work only in cases where the underlying\n        data format supports the creation of new types (such as a database).\n        When creating a feature type in this manner the client should include\n        all attribute information in the feature type representation.\n      requestBody:\n        $ref: \"#/components/requestBodies/FeatureTypeInfo\"\n      responses:\n        \"201\":\n          description: The feature type was successfully created.\n          headers:\n            Location:\n              description: The location of the newly created feature type.\n              schema:\n                type: string\n  \"/workspaces/{workspaceName}/datastores/{storeName}/featuretypes/{featureTypeName}.\":\n    parameters:\n      - name: workspaceName\n        in: path\n        description: The name of the workspace\n        required: true\n        schema:\n          type: string\n      - name: storeName\n        in: path\n        description: The name of the datastore\n        required: true\n        schema:\n          type: string\n      - name: featureTypeName\n        in: path\n        description: The name of the feature type\n        required: true\n        schema:\n          type: string\n    get:\n      operationId: getFeatureType\n      tags:\n        - featuretypes\n      description: Get an individual feature type\n      parameters:\n        - name: quietOnNotFound\n          in: query\n          description: Prevents logging an Exception when the feature type is not present.\n            Note that 404 status code will be returned anyway. Defaults to\n            \"false\".\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        \"200\":\n          $ref: '#/components/responses/FeatureType'\n    put:\n      operationId: modifyFeatureTypeByStore\n      tags:\n        - featuretypes\n      description: Update an individual feature type\n      parameters:\n        - name: recalculate\n          in: query\n          description: Specifies whether to recalculate any bounding boxes for a feature\n            type. Some properties of feature types are automatically\n            recalculated when necessary. In particular, the native bounding box\n            is recalculated when the projection or projection policy are\n            changed, and the lat/lon bounding box is recalculated when the\n            native bounding box is recalculated, or when a new native bounding\n            box is explicitly provided in the request. (The native and lat/lon\n            bounding boxes are not automatically recalculated when they are\n            explicitly included in the request.) In addition, the client may\n            explicitly request a fixed set of fields to calculate, by including\n            a comma-separated list of their names in the recalculate\n            parameter.  The empty parameter 'recalculate=' is useful avoid slow\n            recalculation when operating against large datasets as\n            'recalculate=' avoids calculating any fields, regardless of any\n            changes to projection, projection policy, etc. The nativebbox\n            parameter 'recalculate=nativebbox' is used recalculates the native\n            bounding box, while avoiding recalculating the lat/lon bounding box.\n            Recalculate parameters can be used in together -\n            'recalculate=nativebbox,latlonbbox' can be used after a bulk import\n            to  to recalculates both the native bounding box and the lat/lon\n            bounding box.\n          required: false\n          style: form\n          explode: false\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - nativebbox\n                - latlonbbox\n            minItems: 0\n            maxItems: 2\n      requestBody:\n        $ref: \"#/components/requestBodies/FeatureTypeInfo\"\n      responses:\n        \"200\":\n          description: The feature type was successfully updated.\n    delete:\n      operationId: deleteFeatureTypeByStore\n      tags:\n        - featuretypes\n      description: Delete a feature type (optionally recursively deleting layers).\n      parameters:\n        - name: recurse\n          in: query\n          description: Recursively deletes all layers referenced by the specified\n            featuretype. Allowed values for this parameter are true or false.\n            The default value is false. A request with 'recurse=false' will fail\n            if any layers reference the featuretype.\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        \"200\":\n          description: The feature type was successfully deleted.\n  \"/workspaces/{workspaceName}/featuretypes/{featureTypeName}\":\n    parameters:\n      - name: workspaceName\n        in: path\n        description: The name of the workspace\n        required: true\n        schema:\n          type: string\n      - name: featureTypeName\n        in: path\n        description: The name of the feature type\n        required: true\n        schema:\n          type: string\n    get:\n      operationId: getFeatureTypeByDefaultStore\n      tags:\n        - featuretypes\n      description: Get an individual feature type in the default data store for the\n        workspace\n      parameters:\n        - name: quietOnNotFound\n          in: query\n          description: Prevents logging an Exception when the feature type is not present.\n            Note that 404 status code will be returned anyway. Defaults to\n            \"false\".\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        \"200\":\n          $ref: '#/components/responses/FeatureType'\n    put:\n      operationId: modifyFeatureType\n      tags:\n        - featuretypes\n      description: Update an individual feature type in the default data store for the\n        workspace\n      parameters:\n        - name: recalculate\n          in: query\n          description: Specifies whether to recalculate any bounding boxes for a feature\n            type. Some properties of feature types are automatically\n            recalculated when necessary. In particular, the native bounding box\n            is recalculated when the projection or projection policy are\n            changed, and the lat/lon bounding box is recalculated when the\n            native bounding box is recalculated, or when a new native bounding\n            box is explicitly provided in the request. (The native and lat/lon\n            bounding boxes are not automatically recalculated when they are\n            explicitly included in the request.) In addition, the client may\n            explicitly request a fixed set of fields to calculate, by including\n            a comma-separated list of their names in the recalculate\n            parameter.  The empty parameter 'recalculate=' is useful avoid slow\n            recalculation when operating against large datasets as\n            'recalculate=' avoids calculating any fields, regardless of any\n            changes to projection, projection policy, etc. The nativebbox\n            parameter 'recalculate=nativebbox' is used recalculates the native\n            bounding box, while avoiding recalculating the lat/lon bounding box.\n            Recalculate parameters can be used in together -\n            'recalculate=nativebbox,latlonbbox' can be used after a bulk import\n            to  to recalculates both the native bounding box and the lat/lon\n            bounding box.\n          required: false\n          style: form\n          explode: false\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - nativebbox\n                - latlonbbox\n            minItems: 0\n            maxItems: 2\n      requestBody:\n        $ref: \"#/components/requestBodies/FeatureTypeInfo\"\n      responses:\n        \"200\":\n          description: The feature type was successfully updated.\n    delete:\n      operationId: deleteFeatureType\n      tags:\n        - featuretypes\n      description: Delete a feature type in the default data store for the workspace\n        (optionally recursively deleting layers).\n      parameters:\n        - name: recurse\n          in: query\n          description: Recursively deletes all layers referenced by the specified\n            featuretype. Allowed values for this parameter are true or false.\n            The default value is false. A request with 'recurse=false' will fail\n            if any layers reference the featuretype.\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        \"200\":\n          description: The feature type was successfully deleted.\ncomponents:\n  requestBodies:\n    FeatureTypeInfo:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/FeatureTypeInfoWrapper\"\n      description: The body of the feature type to POST\n      required: true\n  securitySchemes:\n    basicAuth:\n      type: http\n      description: HTTP Basic Authentication. Works over `HTTP` and `HTTPS`\n      scheme: basic\n  responses:\n    FeatureTypeList:\n      description: Successful response containing featuretype list.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/FeatureTypeList'\n    FeatureType:\n      description: Successful response containing feature type.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/FeatureTypeResponseWrapper'\n  schemas:\n    FeatureTypeList:\n      type: object\n      description: ''\n      properties:\n        featureTypes:\n          $ref: \"#/components/schemas/FeatureTypesListWrapper\"\n      example:\n        {\"featureTypes\": {\n            \"featureType\": [\n              {\n                \"name\": \"PrimitiveGeoFeature\",\n                \"href\": \"http://localhost:8080/geoserver/restng/workspaces/sf/datastores/sf/featuretypes/PrimitiveGeoFeature.json\"\n              },\n              {\n                \"name\": \"archsites\",\n                \"href\": \"http://localhost:8080/geoserver/restng/workspaces/sf/datastores/sf/featuretypes/archsites.json\"\n              }\n            ]\n          }\n        }\n\n    FeatureTypesListWrapper:\n      title: wrapper object in order to comply with current API encoding\n      type: object\n      required:\n        - featureType\n      properties:\n        featureType:\n          $ref: \"catalogresponses.yaml#/components/schemas/NamedLinks\"\n\n    FeatureTypeResponseWrapper:\n      type: object\n      properties:\n        featureType:\n          $ref: \"catalogresponses.yaml#/components/schemas/FeatureTypeResponse\"\n\n    FeatureTypeInfoWrapper:\n      type: object\n      properties:\n        featureType:\n          $ref: \"catalog.yaml#/components/schemas/FeatureTypeInfo\"\n\n"
		}
	},
	"Error": "parse: parse spec: paths: /workspaces/{workspaceName}/datastores/{storeName}/featuretypes: get: operation \"getFeatureTypesByStore\": responses: 200: resolve \"#/components/responses/FeatureTypeList\" reference: content: \"application/json\": schema: parse schema: resolve \"#/components/schemas/FeatureTypeList\": parse schema: property \"featureTypes\": parse schema: resolve \"#/components/schemas/FeatureTypesListWrapper\": parse schema: property \"featureType\": parse schema: resolve \"catalogresponses.yaml#/components/schemas/NamedLinks\": find schema: external base \"catalogresponses.yaml\" is not supported"
}