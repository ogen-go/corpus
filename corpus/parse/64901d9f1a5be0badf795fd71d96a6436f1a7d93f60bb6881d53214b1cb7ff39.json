{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/zinclabs/sdk-go-zincsearch"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "api/openapi.yaml",
			"byteSize": 70708,
			"content": "openapi: 3.0.1\ninfo:\n  contact:\n    name: Zinc Search\n    url: https://www.zincsearch.com\n  description: Zinc Search engine API documents https://docs.zincsearch.com\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  termsOfService: http://swagger.io/terms/\n  title: Zinc Search engine API\n  version: 0.2.7\nservers:\n- url: http://localhost:4080/\n- url: https://localhost:4080/\nsecurity:\n- basicAuth: []\npaths:\n  /api/_analyze:\n    post:\n      operationId: Analyze\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n        description: Query\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/index.AnalyzeResponse'\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponseError'\n          description: Bad Request\n      summary: Analyze\n      tags:\n      - Index\n      x-codegen-request-body-name: query\n  /api/_bulk:\n    post:\n      operationId: Bulk\n      requestBody:\n        content:\n          text/plain:\n            schema:\n              type: string\n        description: Query\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponseRecordCount'\n          description: OK\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponseError'\n          description: Internal Server Error\n      summary: Bulk documents\n      tags:\n      - Document\n      x-codegen-request-body-name: query\n  /api/_bulkv2:\n    post:\n      operationId: Bulkv2\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/meta.JSONIngest'\n        description: Query\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponseRecordCount'\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponseError'\n          description: Bad Request\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponseError'\n          description: Internal Server Error\n      summary: Bulkv2 documents\n      tags:\n      - Document\n      x-codegen-request-body-name: query\n  /api/index:\n    get:\n      operationId: List\n      parameters:\n      - description: page num\n        explode: true\n        in: query\n        name: page_num\n        required: false\n        schema:\n          type: integer\n        style: form\n      - description: page size\n        explode: true\n        in: query\n        name: page_size\n        required: false\n        schema:\n          type: integer\n        style: form\n      - description: sort by\n        explode: true\n        in: query\n        name: sort_by\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: desc\n        explode: true\n        in: query\n        name: desc\n        required: false\n        schema:\n          type: boolean\n        style: form\n      - description: name\n        explode: true\n        in: query\n        name: name\n        required: false\n        schema:\n          type: string\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/index.IndexListResponse'\n          description: OK\n      summary: List indexes\n      tags:\n      - Index\n    post:\n      operationId: Create\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/meta.IndexSimple'\n        description: Index data\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponseIndex'\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponseError'\n          description: Bad Request\n      summary: Create index\n      tags:\n      - Index\n      x-codegen-request-body-name: data\n  /api/index/{index}:\n    delete:\n      operationId: Delete\n      parameters:\n      - description: Index\n        explode: false\n        in: path\n        name: index\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponseIndex'\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponseError'\n          description: Bad Request\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponseError'\n          description: Internal Server Error\n      summary: Delete index\n      tags:\n      - Index\n    head:\n      operationId: Exists\n      parameters:\n      - description: Index\n        explode: false\n        in: path\n        name: index\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponse'\n          description: OK\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponse'\n          description: Not Found\n      summary: Checks if the index exists\n      tags:\n      - Index\n  /api/index/{index}/refresh:\n    post:\n      operationId: Refresh\n      parameters:\n      - description: Index\n        explode: false\n        in: path\n        name: index\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponse'\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponseError'\n          description: Bad Request\n      summary: Resfresh index\n      tags:\n      - Index\n  /api/index_name:\n    get:\n      operationId: IndexNameList\n      parameters:\n      - description: IndexName\n        explode: true\n        in: query\n        name: name\n        required: false\n        schema:\n          type: string\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  type: string\n                type: array\n          description: OK\n      summary: List index Name\n      tags:\n      - Index\n  /api/login:\n    post:\n      operationId: Login\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/auth.LoginRequest'\n        description: Login credentials\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/auth.LoginResponse'\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponseError'\n          description: Bad Request\n      summary: Login\n      tags:\n      - User\n      x-codegen-request-body-name: login\n  /api/user:\n    get:\n      operationId: List\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/meta.User'\n                type: array\n          description: OK\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponseError'\n          description: Internal Server Error\n      summary: List user\n      tags:\n      - User\n    post:\n      operationId: Create\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/meta.User'\n        description: User data\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponseID'\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponseError'\n          description: Bad Request\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponseError'\n          description: Internal Server Error\n      summary: Create user\n      tags:\n      - User\n      x-codegen-request-body-name: user\n    put:\n      operationId: Update\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/meta.User'\n        description: User data\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponseID'\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponseError'\n          description: Bad Request\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponseError'\n          description: Internal Server Error\n      summary: Update user\n      tags:\n      - User\n      x-codegen-request-body-name: user\n  /api/user/{id}:\n    delete:\n      operationId: Delete\n      parameters:\n      - description: User id\n        explode: false\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponseID'\n          description: OK\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponseError'\n          description: Internal Server Error\n      summary: Delete user\n      tags:\n      - User\n  /api/{index}/_analyze:\n    post:\n      operationId: AnalyzeIndex\n      parameters:\n      - description: Index\n        explode: false\n        in: path\n        name: index\n        required: true\n        schema:\n          type: string\n        style: simple\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n        description: Query\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/index.AnalyzeResponse'\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponseError'\n          description: Bad Request\n      summary: Analyze\n      tags:\n      - Index\n      x-codegen-request-body-name: query\n  /api/{index}/_doc:\n    post:\n      operationId: Index\n      parameters:\n      - description: Index\n        explode: false\n        in: path\n        name: index\n        required: true\n        schema:\n          type: string\n        style: simple\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n        description: Document\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponseID'\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponseError'\n          description: Bad Request\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponseError'\n          description: Internal Server Error\n      summary: Create or update document\n      tags:\n      - Document\n      x-codegen-request-body-name: document\n  /api/{index}/_doc/{id}:\n    delete:\n      operationId: Delete\n      parameters:\n      - description: Index\n        explode: false\n        in: path\n        name: index\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: ID\n        explode: false\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponseDocument'\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponseError'\n          description: Bad Request\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponseError'\n          description: Internal Server Error\n      summary: Delete document\n      tags:\n      - Document\n    put:\n      operationId: IndexWithID\n      parameters:\n      - description: Index\n        explode: false\n        in: path\n        name: index\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: ID\n        explode: false\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n        description: Document\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponseID'\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponseError'\n          description: Bad Request\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponseError'\n          description: Internal Server Error\n      summary: Create or update document with id\n      tags:\n      - Document\n      x-codegen-request-body-name: document\n  /api/{index}/_mapping:\n    get:\n      operationId: GetMapping\n      parameters:\n      - description: Index\n        explode: false\n        in: path\n        name: index\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponseError'\n          description: Bad Request\n      summary: Get index mappings\n      tags:\n      - Index\n    put:\n      operationId: SetMapping\n      parameters:\n      - description: Index\n        explode: false\n        in: path\n        name: index\n        required: true\n        schema:\n          type: string\n        style: simple\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/meta.Mappings'\n        description: Mapping\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponse'\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponseError'\n          description: Bad Request\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponseError'\n          description: Internal Server Error\n      summary: Set index mappings\n      tags:\n      - Index\n      x-codegen-request-body-name: mapping\n  /api/{index}/_multi:\n    post:\n      operationId: Multi\n      parameters:\n      - description: Index\n        explode: false\n        in: path\n        name: index\n        required: true\n        schema:\n          type: string\n        style: simple\n      requestBody:\n        content:\n          text/plain:\n            schema:\n              type: string\n        description: Query\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponseRecordCount'\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponseError'\n          description: Bad Request\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponseError'\n          description: Internal Server Error\n      summary: Multi documents\n      tags:\n      - Document\n      x-codegen-request-body-name: query\n  /api/{index}/_search:\n    post:\n      operationId: SearchV1\n      parameters:\n      - description: Index\n        explode: false\n        in: path\n        name: index\n        required: true\n        schema:\n          type: string\n        style: simple\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/v1.ZincQuery'\n        description: Query\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/v1.SearchResponse'\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponseError'\n          description: Bad Request\n      summary: Search V1\n      tags:\n      - Search\n      x-codegen-request-body-name: query\n  /api/{index}/_settings:\n    get:\n      operationId: GetSettings\n      parameters:\n      - description: Index\n        explode: false\n        in: path\n        name: index\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponseError'\n          description: Bad Request\n      summary: Get index settings\n      tags:\n      - Index\n    put:\n      operationId: SetSettings\n      parameters:\n      - description: Index\n        explode: false\n        in: path\n        name: index\n        required: true\n        schema:\n          type: string\n        style: simple\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/meta.IndexSettings'\n        description: Settings\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponse'\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponseError'\n          description: Bad Request\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponseError'\n          description: Internal Server Error\n      summary: Set index Settings\n      tags:\n      - Index\n      x-codegen-request-body-name: settings\n  /api/{index}/_update/{id}:\n    post:\n      operationId: Update\n      parameters:\n      - description: Index\n        explode: false\n        in: path\n        name: index\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: ID\n        explode: false\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n        description: Document\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponseID'\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponseError'\n          description: Bad Request\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponseError'\n          description: Internal Server Error\n      summary: Update document with id\n      tags:\n      - Document\n      x-codegen-request-body-name: document\n  /es/_bulk:\n    post:\n      operationId: ESBulk\n      requestBody:\n        content:\n          text/plain:\n            schema:\n              type: string\n        description: Query\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: OK\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponseError'\n          description: Internal Server Error\n      summary: ES bulk documents\n      tags:\n      - Document\n      x-codegen-request-body-name: query\n  /es/_index_template:\n    get:\n      operationId: ListTemplates\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/meta.Template'\n                type: array\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponseError'\n          description: Bad Request\n      summary: List index teplates\n      tags:\n      - Index\n    post:\n      operationId: CreateTemplate\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/meta.IndexTemplate'\n        description: Template data\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponseTemplate'\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponseError'\n          description: Bad Request\n      summary: Create update index template\n      tags:\n      - Index\n      x-codegen-request-body-name: template\n  /es/_index_template/{name}:\n    delete:\n      operationId: DeleteTemplate\n      parameters:\n      - description: Template\n        explode: false\n        in: path\n        name: name\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponse'\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponseError'\n          description: Bad Request\n      summary: Delete template\n      tags:\n      - Index\n    get:\n      operationId: GetTemplate\n      parameters:\n      - description: Template\n        explode: false\n        in: path\n        name: name\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.IndexTemplate'\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponseError'\n          description: Bad Request\n      summary: Get index template\n      tags:\n      - Index\n    put:\n      operationId: UpdateTemplate\n      parameters:\n      - description: Template\n        explode: false\n        in: path\n        name: name\n        required: true\n        schema:\n          type: string\n        style: simple\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/meta.IndexTemplate'\n        description: Template data\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponseTemplate'\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponseError'\n          description: Bad Request\n      summary: Create update index template\n      tags:\n      - Index\n      x-codegen-request-body-name: template\n  /es/_msearch:\n    post:\n      operationId: MSearch\n      requestBody:\n        content:\n          text/plain:\n            schema:\n              type: string\n        description: Query\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.SearchResponse'\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponseError'\n          description: Bad Request\n      summary: Search V2 MultipleSearch for compatible ES\n      tags:\n      - Search\n      x-codegen-request-body-name: query\n  /es/{index}:\n    head:\n      operationId: EsExists\n      parameters:\n      - description: Index\n        explode: false\n        in: path\n        name: index\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponse'\n          description: OK\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponse'\n          description: Not Found\n      summary: Checks if the index exists for compatible ES\n      tags:\n      - Index\n    put:\n      operationId: ESCreateIndex\n      parameters:\n      - description: Index\n        explode: false\n        in: path\n        name: index\n        required: true\n        schema:\n          type: string\n        style: simple\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              $ref: '#/components/schemas/meta.IndexSimple'\n        description: Index data\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponse'\n          description: Bad Request\n      summary: Create index for compatible ES\n      tags:\n      - Index\n      x-codegen-request-body-name: data\n  /es/{index}/_mapping:\n    get:\n      operationId: ESGetMapping\n      parameters:\n      - description: Index\n        explode: false\n        in: path\n        name: index\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponse'\n          description: Bad Request\n      summary: Get index mappings for compatible ES\n      tags:\n      - Index\n  /es/{index}/_search:\n    post:\n      operationId: Search\n      parameters:\n      - description: Index\n        explode: false\n        in: path\n        name: index\n        required: true\n        schema:\n          type: string\n        style: simple\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/meta.ZincQuery'\n        description: Query\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.SearchResponse'\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HTTPResponseError'\n          description: Bad Request\n      summary: Search V2 DSL for compatible ES\n      tags:\n      - Search\n      x-codegen-request-body-name: query\n  /healthz:\n    get:\n      operationId: Healthz\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.HealthzResponse'\n          description: OK\n      summary: Get healthz\n  /version:\n    get:\n      operationId: Version\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/meta.VersionResponse'\n          description: OK\n      summary: Get version\ncomponents:\n  schemas:\n    aggregation.HistogramBound:\n      properties:\n        max:\n          description: maximum\n          type: number\n        min:\n          description: minimum\n          type: number\n      type: object\n    auth.LoginRequest:\n      properties:\n        _id:\n          type: string\n        password:\n          type: string\n      type: object\n    auth.LoginResponse:\n      example:\n        validated: true\n        user:\n          role: role\n          name: name\n          _id: _id\n      properties:\n        user:\n          $ref: '#/components/schemas/auth.LoginUser'\n        validated:\n          type: boolean\n      type: object\n    auth.LoginUser:\n      example:\n        role: role\n        name: name\n        _id: _id\n      properties:\n        _id:\n          type: string\n        name:\n          type: string\n        role:\n          type: string\n      type: object\n    core.Index:\n      type: object\n    index.AnalyzeResponse:\n      example:\n        tokens:\n        - end_offset: 0\n          position: 6\n          start_offset: 1\n          keyword: true\n          type: type\n          token: token\n        - end_offset: 0\n          position: 6\n          start_offset: 1\n          keyword: true\n          type: type\n          token: token\n      properties:\n        tokens:\n          items:\n            $ref: '#/components/schemas/index.AnalyzeResponseToken'\n          type: array\n      type: object\n    index.AnalyzeResponseToken:\n      example:\n        end_offset: 0\n        position: 6\n        start_offset: 1\n        keyword: true\n        type: type\n        token: token\n      properties:\n        end_offset:\n          type: integer\n        keyword:\n          type: boolean\n        position:\n          type: integer\n        start_offset:\n          type: integer\n        token:\n          type: string\n        type:\n          type: string\n      type: object\n    index.IndexListResponse:\n      example:\n        page:\n          total: 1\n          page_num: 0\n          page_size: 6\n        list:\n        - null\n        - null\n      properties:\n        list:\n          items:\n            $ref: '#/components/schemas/core.Index'\n          type: array\n        page:\n          $ref: '#/components/schemas/meta.Page'\n      type: object\n    meta.AggregationAutoDateHistogram:\n      properties:\n        buckets:\n          type: integer\n        field:\n          type: string\n        format:\n          description: format key_as_string\n          type: string\n        keyed:\n          type: boolean\n        minimum_interval:\n          description: \"minute,hour,day,week,month,quarter,year\"\n          type: string\n        time_zone:\n          description: time_zone\n          type: string\n      type: object\n    meta.AggregationDateHistogram:\n      properties:\n        calendar_interval:\n          description: \"minute,hour,day,week,month,quarter,year\"\n          type: string\n        extended_bounds:\n          $ref: '#/components/schemas/aggregation.HistogramBound'\n        field:\n          type: string\n        fixed_interval:\n          description: \"ms,s,m,h,d\"\n          type: string\n        format:\n          description: format key_as_string\n          type: string\n        hard_bounds:\n          $ref: '#/components/schemas/aggregation.HistogramBound'\n        interval:\n          description: \"ms,s,m,h,d\"\n          type: string\n        keyed:\n          type: boolean\n        min_doc_count:\n          type: integer\n        size:\n          type: integer\n        time_zone:\n          description: time_zone\n          type: string\n      type: object\n    meta.AggregationDateRange:\n      properties:\n        field:\n          type: string\n        format:\n          description: \"format the `to` and `from` values to `_as_string`, and used\\\n            \\ to format `keyed response`\"\n          type: string\n        keyed:\n          type: boolean\n        ranges:\n          description: refer\n          items:\n            $ref: '#/components/schemas/meta.DateRange'\n          type: array\n        time_zone:\n          description: refer\n          type: string\n      type: object\n    meta.AggregationHistogram:\n      properties:\n        extended_bounds:\n          $ref: '#/components/schemas/aggregation.HistogramBound'\n        field:\n          type: string\n        hard_bounds:\n          $ref: '#/components/schemas/aggregation.HistogramBound'\n        interval:\n          type: number\n        keyed:\n          type: boolean\n        min_doc_count:\n          type: integer\n        offset:\n          type: number\n        size:\n          type: integer\n      type: object\n    meta.AggregationIPRange:\n      properties:\n        field:\n          type: string\n        keyed:\n          type: boolean\n        ranges:\n          items:\n            $ref: '#/components/schemas/meta.IPRange'\n          type: array\n      type: object\n    meta.AggregationMetric:\n      properties:\n        field:\n          type: string\n        weight_field:\n          description: Field name to be used for setting weight for primary field\n            for weighted average aggregation\n          type: string\n      type: object\n    meta.AggregationRange:\n      properties:\n        field:\n          type: string\n        keyed:\n          type: boolean\n        ranges:\n          items:\n            $ref: '#/components/schemas/meta.Range'\n          type: array\n      type: object\n    meta.AggregationResponse:\n      example:\n        buckets: \"{}\"\n        interval: interval\n        value: \"{}\"\n      properties:\n        buckets:\n          description: slice or map\n          type: object\n        interval:\n          description: support for auto_date_histogram_aggregation\n          type: string\n        value:\n          type: object\n      type: object\n    meta.Aggregations:\n      properties:\n        aggs:\n          additionalProperties:\n            $ref: '#/components/schemas/meta.Aggregations'\n          description: nested aggregations\n          type: object\n        auto_date_histogram:\n          $ref: '#/components/schemas/meta.AggregationAutoDateHistogram'\n        avg:\n          $ref: '#/components/schemas/meta.AggregationMetric'\n        cardinality:\n          $ref: '#/components/schemas/meta.AggregationMetric'\n        count:\n          $ref: '#/components/schemas/meta.AggregationMetric'\n        date_histogram:\n          $ref: '#/components/schemas/meta.AggregationDateHistogram'\n        date_range:\n          $ref: '#/components/schemas/meta.AggregationDateRange'\n        histogram:\n          $ref: '#/components/schemas/meta.AggregationHistogram'\n        ip_range:\n          $ref: '#/components/schemas/meta.AggregationIPRange'\n        max:\n          $ref: '#/components/schemas/meta.AggregationMetric'\n        min:\n          $ref: '#/components/schemas/meta.AggregationMetric'\n        range:\n          $ref: '#/components/schemas/meta.AggregationRange'\n        sum:\n          $ref: '#/components/schemas/meta.AggregationMetric'\n        terms:\n          $ref: '#/components/schemas/meta.AggregationsTerms'\n        weighted_avg:\n          $ref: '#/components/schemas/meta.AggregationMetric'\n      type: object\n    meta.AggregationsTerms:\n      properties:\n        field:\n          type: string\n        order:\n          additionalProperties:\n            type: string\n          description: \"{ \\\"_count\\\": \\\"asc\\\" }\"\n          type: object\n        size:\n          type: integer\n      type: object\n    meta.Analyzer:\n      example:\n        filter:\n        - filter\n        - filter\n        char_filter:\n        - char_filter\n        - char_filter\n        lowercase: true\n        pattern: pattern\n        token_filter:\n        - token_filter\n        - token_filter\n        type: type\n        stopwords:\n        - stopwords\n        - stopwords\n        tokenizer: tokenizer\n      properties:\n        char_filter:\n          items:\n            type: string\n          type: array\n        filter:\n          description: \"compatibility with es, alias for TokenFilter\"\n          items:\n            type: string\n          type: array\n        lowercase:\n          description: for type=pattern\n          type: boolean\n        pattern:\n          description: for type=pattern\n          type: string\n        stopwords:\n          description: \"for type=pattern,standard,stop\"\n          items:\n            type: string\n          type: array\n        token_filter:\n          items:\n            type: string\n          type: array\n        tokenizer:\n          type: string\n        type:\n          description: options for compatible\n          type: string\n      type: object\n    meta.BoolQuery:\n      properties:\n        filter:\n          description: \"query, [query1, query2]\"\n          items:\n            $ref: '#/components/schemas/meta.Query'\n          type: array\n        minimum_should_match:\n          description: only for should\n          type: number\n        must:\n          description: \"query, [query1, query2]\"\n          items:\n            $ref: '#/components/schemas/meta.Query'\n          type: array\n        must_not:\n          description: \"query, [query1, query2]\"\n          items:\n            $ref: '#/components/schemas/meta.Query'\n          type: array\n        should:\n          description: \"query, [query1, query2]\"\n          items:\n            $ref: '#/components/schemas/meta.Query'\n          type: array\n      type: object\n    meta.DateRange:\n      properties:\n        from:\n          type: string\n        to:\n          type: string\n      type: object\n    meta.ExistsQuery:\n      properties:\n        field:\n          type: string\n      type: object\n    meta.FuzzyQuery:\n      properties:\n        boost:\n          type: number\n        fuzziness:\n          description: \"auto, 1,2,3,n\"\n          type: object\n        prefix_length:\n          type: number\n        value:\n          type: string\n      type: object\n    meta.HTTPResponse:\n      example:\n        message: message\n      properties:\n        message:\n          type: string\n      type: object\n    meta.HTTPResponseDocument:\n      example:\n        index: index\n        id: id\n        message: message\n      properties:\n        id:\n          type: string\n        index:\n          type: string\n        message:\n          type: string\n      type: object\n    meta.HTTPResponseError:\n      properties:\n        error:\n          type: string\n      type: object\n    meta.HTTPResponseID:\n      example:\n        id: id\n        message: message\n      properties:\n        id:\n          type: string\n        message:\n          type: string\n      type: object\n    meta.HTTPResponseIndex:\n      example:\n        storage_type: storage_type\n        index: index\n        message: message\n      properties:\n        index:\n          type: string\n        message:\n          type: string\n        storage_type:\n          type: string\n      type: object\n    meta.HTTPResponseRecordCount:\n      example:\n        record_count: 0\n        message: message\n      properties:\n        message:\n          type: string\n        record_count:\n          type: integer\n      type: object\n    meta.HTTPResponseTemplate:\n      example:\n        template: template\n        message: message\n      properties:\n        message:\n          type: string\n        template:\n          type: string\n      type: object\n    meta.HealthzResponse:\n      example:\n        status: status\n      properties:\n        status:\n          type: string\n      type: object\n    meta.Highlight:\n      properties:\n        fields:\n          additionalProperties:\n            $ref: '#/components/schemas/meta.Highlight'\n          type: object\n        fragment_size:\n          type: integer\n        number_of_fragments:\n          type: integer\n        post_tags:\n          items:\n            type: string\n          type: array\n        pre_tags:\n          items:\n            type: string\n          type: array\n      type: object\n    meta.Hit:\n      example:\n        highlight: \"{}\"\n        '@timestamp': '@timestamp'\n        _index: _index\n        _type: _type\n        _source: \"{}\"\n        _id: _id\n        _score: 5.637376656633329\n        fields: \"{}\"\n      properties:\n        '@timestamp':\n          type: string\n        _id:\n          type: string\n        _index:\n          type: string\n        _score:\n          type: number\n        _source:\n          type: object\n        _type:\n          type: string\n        fields:\n          properties: {}\n          type: object\n        highlight:\n          properties: {}\n          type: object\n      type: object\n    meta.Hits:\n      example:\n        hits:\n        - highlight: \"{}\"\n          '@timestamp': '@timestamp'\n          _index: _index\n          _type: _type\n          _source: \"{}\"\n          _id: _id\n          _score: 5.637376656633329\n          fields: \"{}\"\n        - highlight: \"{}\"\n          '@timestamp': '@timestamp'\n          _index: _index\n          _type: _type\n          _source: \"{}\"\n          _id: _id\n          _score: 5.637376656633329\n          fields: \"{}\"\n        total:\n          value: 7\n        max_score: 2.3021358869347655\n      properties:\n        hits:\n          items:\n            $ref: '#/components/schemas/meta.Hit'\n          type: array\n        max_score:\n          type: number\n        total:\n          $ref: '#/components/schemas/meta.Total'\n      type: object\n    meta.IPRange:\n      properties:\n        from:\n          type: string\n        to:\n          type: string\n      type: object\n    meta.IdsQuery:\n      properties:\n        values:\n          items:\n            type: string\n          type: array\n      type: object\n    meta.IndexAnalysis:\n      example:\n        filter: \"{}\"\n        char_filter: \"{}\"\n        analyzer:\n          key:\n            filter:\n            - filter\n            - filter\n            char_filter:\n            - char_filter\n            - char_filter\n            lowercase: true\n            pattern: pattern\n            token_filter:\n            - token_filter\n            - token_filter\n            type: type\n            stopwords:\n            - stopwords\n            - stopwords\n            tokenizer: tokenizer\n        token_filter: \"{}\"\n        tokenizer: \"{}\"\n      properties:\n        analyzer:\n          additionalProperties:\n            $ref: '#/components/schemas/meta.Analyzer'\n          type: object\n        char_filter:\n          properties: {}\n          type: object\n        filter:\n          description: \"compatibility with es, alias for TokenFilter\"\n          properties: {}\n          type: object\n        token_filter:\n          properties: {}\n          type: object\n        tokenizer:\n          properties: {}\n          type: object\n      type: object\n    meta.IndexSettings:\n      example:\n        number_of_shards: 1\n        analysis:\n          filter: \"{}\"\n          char_filter: \"{}\"\n          analyzer:\n            key:\n              filter:\n              - filter\n              - filter\n              char_filter:\n              - char_filter\n              - char_filter\n              lowercase: true\n              pattern: pattern\n              token_filter:\n              - token_filter\n              - token_filter\n              type: type\n              stopwords:\n              - stopwords\n              - stopwords\n              tokenizer: tokenizer\n          token_filter: \"{}\"\n          tokenizer: \"{}\"\n        number_of_replicas: 6\n      properties:\n        analysis:\n          $ref: '#/components/schemas/meta.IndexAnalysis'\n        number_of_replicas:\n          type: integer\n        number_of_shards:\n          type: integer\n      type: object\n    meta.IndexSimple:\n      properties:\n        mappings:\n          properties: {}\n          type: object\n        name:\n          type: string\n        settings:\n          $ref: '#/components/schemas/meta.IndexSettings'\n        shard_num:\n          type: integer\n        storage_type:\n          type: string\n      type: object\n    meta.IndexTemplate:\n      example:\n        template:\n          settings:\n            number_of_shards: 1\n            analysis:\n              filter: \"{}\"\n              char_filter: \"{}\"\n              analyzer:\n                key:\n                  filter:\n                  - filter\n                  - filter\n                  char_filter:\n                  - char_filter\n                  - char_filter\n                  lowercase: true\n                  pattern: pattern\n                  token_filter:\n                  - token_filter\n                  - token_filter\n                  type: type\n                  stopwords:\n                  - stopwords\n                  - stopwords\n                  tokenizer: tokenizer\n              token_filter: \"{}\"\n              tokenizer: \"{}\"\n            number_of_replicas: 6\n          mappings:\n            properties:\n              key:\n                search_analyzer: search_analyzer\n                analyzer: analyzer\n                aggregatable: true\n                format: format\n                index: true\n                highlightable: true\n                sortable: true\n                store: true\n                fields:\n                  key: null\n                time_zone: time_zone\n                type: type\n        updated_at: updated_at\n        created_at: created_at\n        index_patterns:\n        - index_patterns\n        - index_patterns\n        priority: 0\n      properties:\n        created_at:\n          type: string\n        index_patterns:\n          items:\n            type: string\n          type: array\n        priority:\n          description: highest priority is chosen\n          type: integer\n        template:\n          $ref: '#/components/schemas/meta.TemplateTemplate'\n        updated_at:\n          type: string\n      type: object\n    meta.JSONIngest:\n      properties:\n        index:\n          type: string\n        records:\n          items:\n            properties: {}\n            type: object\n          type: array\n      type: object\n    meta.Mappings:\n      example:\n        properties:\n          key:\n            search_analyzer: search_analyzer\n            analyzer: analyzer\n            aggregatable: true\n            format: format\n            index: true\n            highlightable: true\n            sortable: true\n            store: true\n            fields:\n              key: null\n            time_zone: time_zone\n            type: type\n      properties:\n        properties:\n          additionalProperties:\n            $ref: '#/components/schemas/meta.Property'\n          type: object\n      type: object\n    meta.MatchAllQuery:\n      type: object\n    meta.MatchBoolPrefixQuery:\n      properties:\n        analyzer:\n          type: string\n        boost:\n          type: number\n        query:\n          type: string\n      type: object\n    meta.MatchNoneQuery:\n      type: object\n    meta.MatchPhrasePrefixQuery:\n      properties:\n        analyzer:\n          type: string\n        boost:\n          type: number\n        query:\n          type: string\n      type: object\n    meta.MatchPhraseQuery:\n      properties:\n        analyzer:\n          type: string\n        boost:\n          type: number\n        query:\n          type: string\n      type: object\n    meta.MatchQuery:\n      properties:\n        analyzer:\n          type: string\n        boost:\n          type: number\n        fuzziness:\n          description: \"auto, 1,2,3,n\"\n          type: object\n        operator:\n          description: \"or(default), and\"\n          type: string\n        prefix_length:\n          type: number\n        query:\n          type: string\n      type: object\n    meta.MultiMatchQuery:\n      properties:\n        analyzer:\n          type: string\n        boost:\n          type: number\n        fields:\n          items:\n            type: string\n          type: array\n        minimum_should_match:\n          type: number\n        operator:\n          description: \"or(default), and\"\n          type: string\n        query:\n          type: string\n        type:\n          description: \"best_fields(default), most_fields, cross_fields, phrase, phrase_prefix,\\\n            \\ bool_prefix\"\n          type: string\n      type: object\n    meta.Page:\n      example:\n        total: 1\n        page_num: 0\n        page_size: 6\n      properties:\n        page_num:\n          type: integer\n        page_size:\n          type: integer\n        total:\n          type: integer\n      type: object\n    meta.PrefixQuery:\n      properties:\n        boost:\n          type: number\n        value:\n          description: You can speed up prefix queries using the index_prefixes mapping\n            parameter.\n          type: string\n      type: object\n    meta.Property:\n      example:\n        search_analyzer: search_analyzer\n        analyzer: analyzer\n        aggregatable: true\n        format: format\n        index: true\n        highlightable: true\n        sortable: true\n        store: true\n        fields:\n          key: null\n        time_zone: time_zone\n        type: type\n      properties:\n        aggregatable:\n          type: boolean\n        analyzer:\n          type: string\n        fields:\n          additionalProperties:\n            $ref: '#/components/schemas/meta.Property'\n          description: \"Fields allow the same string value to be indexed in multiple\\\n            \\ ways for different purposes,\\nsuch as one field for search and a multi-field\\\n            \\ for sorting and aggregations,\\nor the same string value analyzed by\\\n            \\ different analyzers.\\nIf the Fields property is defined within a sub-field,\\\n            \\ it will be ignored.\\n\\nCurrently, only \\\"text\\\" fields support the Fields\\\n            \\ parameter.\"\n          type: object\n        format:\n          description: date format yyyy-MM-dd HH:mm:ss || yyyy-MM-dd || epoch_millis\n          type: string\n        highlightable:\n          type: boolean\n        index:\n          type: boolean\n        search_analyzer:\n          type: string\n        sortable:\n          type: boolean\n        store:\n          type: boolean\n        time_zone:\n          description: date format time_zone\n          type: string\n        type:\n          description: \"text, keyword, date, numeric, boolean, geo_point\"\n          type: string\n      type: object\n    meta.Query:\n      properties:\n        bool:\n          $ref: '#/components/schemas/meta.BoolQuery'\n        exists:\n          $ref: '#/components/schemas/meta.ExistsQuery'\n        fuzzy:\n          additionalProperties:\n            $ref: '#/components/schemas/meta.FuzzyQuery'\n          description: \"simple, PrefixQuery\"\n          type: object\n        ids:\n          $ref: '#/components/schemas/meta.IdsQuery'\n        match:\n          additionalProperties:\n            $ref: '#/components/schemas/meta.MatchQuery'\n          description: \"simple, MatchQuery\"\n          type: object\n        match_all:\n          type: object\n        match_bool_prefix:\n          additionalProperties:\n            $ref: '#/components/schemas/meta.MatchBoolPrefixQuery'\n          description: \"simple, MatchBoolPrefixQuery\"\n          type: object\n        match_none:\n          type: object\n        match_phrase:\n          additionalProperties:\n            $ref: '#/components/schemas/meta.MatchPhraseQuery'\n          description: \"simple, MatchPhraseQuery\"\n          type: object\n        match_phrase_prefix:\n          additionalProperties:\n            $ref: '#/components/schemas/meta.MatchPhrasePrefixQuery'\n          description: \"simple, MatchPhrasePrefixQuery\"\n          type: object\n        multi_match:\n          $ref: '#/components/schemas/meta.MultiMatchQuery'\n        prefix:\n          additionalProperties:\n            $ref: '#/components/schemas/meta.PrefixQuery'\n          description: \".\"\n          type: object\n        query_string:\n          $ref: '#/components/schemas/meta.QueryStringQuery'\n        range:\n          additionalProperties:\n            $ref: '#/components/schemas/meta.RangeQuery'\n          description: \"simple, FuzzyQuery\"\n          type: object\n        regexp:\n          additionalProperties:\n            $ref: '#/components/schemas/meta.RegexpQuery'\n          description: \"simple, FuzzyQuery\"\n          type: object\n        simple_query_string:\n          $ref: '#/components/schemas/meta.SimpleQueryStringQuery'\n        term:\n          additionalProperties:\n            $ref: '#/components/schemas/meta.TermQuery'\n          description: \"simple, TermQuery\"\n          type: object\n        terms:\n          additionalProperties:\n            $ref: '#/components/schemas/meta.TermsQuery'\n          description: \".\"\n          type: object\n        wildcard:\n          additionalProperties:\n            $ref: '#/components/schemas/meta.WildcardQuery'\n          description: \"simple, WildcardQuery\"\n          type: object\n      type: object\n    meta.QueryStringQuery:\n      properties:\n        analyzer:\n          type: string\n        boost:\n          type: number\n        default_field:\n          type: string\n        default_operator:\n          description: \"or(default), and\"\n          type: string\n        fields:\n          items:\n            type: string\n          type: array\n        query:\n          type: string\n      type: object\n    meta.Range:\n      properties:\n        from:\n          type: number\n        to:\n          type: number\n      type: object\n    meta.RangeQuery:\n      properties:\n        boost:\n          type: number\n        format:\n          description: Date format used to convert date values in the query.\n          type: string\n        gt:\n          description: \"string, float64\"\n          type: string\n        gte:\n          description: \"string, float64\"\n          type: string\n        lt:\n          description: \"string, float64\"\n          type: string\n        lte:\n          description: \"string, float64\"\n          type: string\n        time_zone:\n          description: used to convert date values in the query to UTC.\n          type: string\n      type: object\n    meta.RegexpQuery:\n      properties:\n        boost:\n          type: number\n        flags:\n          type: string\n        value:\n          type: string\n      type: object\n    meta.SearchResponse:\n      example:\n        _shards:\n          total: 5\n          failed: 0\n          skipped: 6\n          successful: 1\n        hits:\n          hits:\n          - highlight: \"{}\"\n            '@timestamp': '@timestamp'\n            _index: _index\n            _type: _type\n            _source: \"{}\"\n            _id: _id\n            _score: 5.637376656633329\n            fields: \"{}\"\n          - highlight: \"{}\"\n            '@timestamp': '@timestamp'\n            _index: _index\n            _type: _type\n            _source: \"{}\"\n            _id: _id\n            _score: 5.637376656633329\n            fields: \"{}\"\n          total:\n            value: 7\n          max_score: 2.3021358869347655\n        took: 9\n        timed_out: true\n        error: error\n        aggregations:\n          key:\n            buckets: \"{}\"\n            interval: interval\n            value: \"{}\"\n      properties:\n        _shards:\n          $ref: '#/components/schemas/meta.Shards'\n        aggregations:\n          additionalProperties:\n            $ref: '#/components/schemas/meta.AggregationResponse'\n          type: object\n        error:\n          type: string\n        hits:\n          $ref: '#/components/schemas/meta.Hits'\n        timed_out:\n          type: boolean\n        took:\n          description: Time it took to generate the response\n          type: integer\n      type: object\n    meta.Shards:\n      example:\n        total: 5\n        failed: 0\n        skipped: 6\n        successful: 1\n      properties:\n        failed:\n          type: integer\n        skipped:\n          type: integer\n        successful:\n          type: integer\n        total:\n          type: integer\n      type: object\n    meta.SimpleQueryStringQuery:\n      properties:\n        all_fields:\n          type: boolean\n        analyzer:\n          type: string\n        boost:\n          type: number\n        default_operator:\n          description: \"or(default), and\"\n          type: string\n        fields:\n          items:\n            type: string\n          type: array\n        query:\n          type: string\n      type: object\n    meta.Template:\n      example:\n        index_template:\n          template:\n            settings:\n              number_of_shards: 1\n              analysis:\n                filter: \"{}\"\n                char_filter: \"{}\"\n                analyzer:\n                  key:\n                    filter:\n                    - filter\n                    - filter\n                    char_filter:\n                    - char_filter\n                    - char_filter\n                    lowercase: true\n                    pattern: pattern\n                    token_filter:\n                    - token_filter\n                    - token_filter\n                    type: type\n                    stopwords:\n                    - stopwords\n                    - stopwords\n                    tokenizer: tokenizer\n                token_filter: \"{}\"\n                tokenizer: \"{}\"\n              number_of_replicas: 6\n            mappings:\n              properties:\n                key:\n                  search_analyzer: search_analyzer\n                  analyzer: analyzer\n                  aggregatable: true\n                  format: format\n                  index: true\n                  highlightable: true\n                  sortable: true\n                  store: true\n                  fields:\n                    key: null\n                  time_zone: time_zone\n                  type: type\n          updated_at: updated_at\n          created_at: created_at\n          index_patterns:\n          - index_patterns\n          - index_patterns\n          priority: 0\n        name: name\n      properties:\n        index_template:\n          $ref: '#/components/schemas/meta.IndexTemplate'\n        name:\n          type: string\n      type: object\n    meta.TemplateTemplate:\n      example:\n        settings:\n          number_of_shards: 1\n          analysis:\n            filter: \"{}\"\n            char_filter: \"{}\"\n            analyzer:\n              key:\n                filter:\n                - filter\n                - filter\n                char_filter:\n                - char_filter\n                - char_filter\n                lowercase: true\n                pattern: pattern\n                token_filter:\n                - token_filter\n                - token_filter\n                type: type\n                stopwords:\n                - stopwords\n                - stopwords\n                tokenizer: tokenizer\n            token_filter: \"{}\"\n            tokenizer: \"{}\"\n          number_of_replicas: 6\n        mappings:\n          properties:\n            key:\n              search_analyzer: search_analyzer\n              analyzer: analyzer\n              aggregatable: true\n              format: format\n              index: true\n              highlightable: true\n              sortable: true\n              store: true\n              fields:\n                key: null\n              time_zone: time_zone\n              type: type\n      properties:\n        mappings:\n          $ref: '#/components/schemas/meta.Mappings'\n        settings:\n          $ref: '#/components/schemas/meta.IndexSettings'\n      type: object\n    meta.TermQuery:\n      properties:\n        boost:\n          type: number\n        case_insensitive:\n          type: boolean\n        value:\n          type: string\n      type: object\n    meta.TermsQuery:\n      type: object\n    meta.Total:\n      example:\n        value: 7\n      properties:\n        value:\n          description: Count of documents returned\n          type: integer\n      type: object\n    meta.User:\n      example:\n        password: password\n        role: role\n        salt: salt\n        updated_at: updated_at\n        name: name\n        created_at: created_at\n        _id: _id\n      properties:\n        _id:\n          type: string\n        created_at:\n          type: string\n        name:\n          type: string\n        password:\n          type: string\n        role:\n          type: string\n        salt:\n          type: string\n        updated_at:\n          type: string\n      type: object\n    meta.VersionResponse:\n      example:\n        build_date: build_date\n        build: build\n        branch: branch\n        version: version\n        commit_hash: commit_hash\n      properties:\n        branch:\n          type: string\n        build:\n          type: string\n        build_date:\n          type: string\n        commit_hash:\n          type: string\n        version:\n          type: string\n      type: object\n    meta.WildcardQuery:\n      properties:\n        boost:\n          type: number\n        value:\n          type: string\n      type: object\n    meta.ZincQuery:\n      properties:\n        _source:\n          description: \"true, false, [\\\"field1\\\", \\\"field2.*\\\"]\"\n          items:\n            type: string\n          type: array\n        aggs:\n          additionalProperties:\n            $ref: '#/components/schemas/meta.Aggregations'\n          type: object\n        explain:\n          type: boolean\n        fields:\n          description: \"[\\\"field1\\\", \\\"field2.*\\\", {\\\"field\\\": \\\"fieldName\\\", \\\"format\\\"\\\n            : \\\"epoch_millis\\\"}]\"\n          items:\n            type: string\n          type: array\n        from:\n          type: integer\n        highlight:\n          $ref: '#/components/schemas/meta.Highlight'\n        query:\n          $ref: '#/components/schemas/meta.Query'\n        size:\n          type: integer\n        sort:\n          description: \"\\\"_sorce\\\", [\\\"+Year\\\",\\\"-Year\\\", {\\\"Year\\\": \\\"desc\\\"}, \\\"\\\n            Date\\\": {\\\"order\\\": \\\"asc\\\"\\\", \\\"format\\\": \\\"yyyy-MM-dd\\\"}}\\\"}]\"\n          items:\n            type: string\n          type: array\n        timeout:\n          type: integer\n        track_total_hits:\n          type: boolean\n      type: object\n    v1.AggregationBucket:\n      example:\n        doc_count: 0\n        aggregations:\n          key: null\n        key: key\n      properties:\n        aggregations:\n          additionalProperties:\n            $ref: '#/components/schemas/v1.AggregationResponse'\n          type: object\n        doc_count:\n          type: integer\n        key:\n          type: string\n      type: object\n    v1.AggregationDateRange:\n      properties:\n        from:\n          type: string\n        to:\n          type: string\n      type: object\n    v1.AggregationNumberRange:\n      properties:\n        from:\n          type: number\n        to:\n          type: number\n      type: object\n    v1.AggregationParams:\n      properties:\n        agg_type:\n          type: string\n        aggs:\n          additionalProperties:\n            $ref: '#/components/schemas/v1.AggregationParams'\n          type: object\n        date_ranges:\n          items:\n            $ref: '#/components/schemas/v1.AggregationDateRange'\n          type: array\n        field:\n          type: string\n        ranges:\n          items:\n            $ref: '#/components/schemas/v1.AggregationNumberRange'\n          type: array\n        size:\n          type: integer\n        weight_field:\n          description: Field name to be used for setting weight for primary field\n            for weighted average aggregation\n          type: string\n      type: object\n    v1.AggregationResponse:\n      example:\n        buckets:\n        - doc_count: 0\n          aggregations:\n            key: null\n          key: key\n        - doc_count: 0\n          aggregations:\n            key: null\n          key: key\n        value: \"{}\"\n      properties:\n        buckets:\n          items:\n            $ref: '#/components/schemas/v1.AggregationBucket'\n          type: array\n        value:\n          type: object\n      type: object\n    v1.Hit:\n      example:\n        highlight: \"{}\"\n        '@timestamp': '@timestamp'\n        _index: _index\n        _type: _type\n        _source: \"{}\"\n        _id: _id\n        _score: 6.027456183070403\n      properties:\n        '@timestamp':\n          type: string\n        _id:\n          type: string\n        _index:\n          type: string\n        _score:\n          type: number\n        _source:\n          type: object\n        _type:\n          type: string\n        highlight:\n          properties: {}\n          type: object\n      type: object\n    v1.Hits:\n      example:\n        hits:\n        - highlight: \"{}\"\n          '@timestamp': '@timestamp'\n          _index: _index\n          _type: _type\n          _source: \"{}\"\n          _id: _id\n          _score: 6.027456183070403\n        - highlight: \"{}\"\n          '@timestamp': '@timestamp'\n          _index: _index\n          _type: _type\n          _source: \"{}\"\n          _id: _id\n          _score: 6.027456183070403\n        total:\n          value: 5\n        max_score: 1.4658129805029452\n      properties:\n        hits:\n          items:\n            $ref: '#/components/schemas/v1.Hit'\n          type: array\n        max_score:\n          type: number\n        total:\n          $ref: '#/components/schemas/v1.Total'\n      type: object\n    v1.QueryParams:\n      properties:\n        boost:\n          type: integer\n        end_time:\n          type: string\n        field:\n          type: string\n        start_time:\n          type: string\n        term:\n          type: string\n        terms:\n          description: For multi phrase query\n          items:\n            items:\n              type: string\n            type: array\n          type: array\n      type: object\n    v1.SearchResponse:\n      example:\n        hits:\n          hits:\n          - highlight: \"{}\"\n            '@timestamp': '@timestamp'\n            _index: _index\n            _type: _type\n            _source: \"{}\"\n            _id: _id\n            _score: 6.027456183070403\n          - highlight: \"{}\"\n            '@timestamp': '@timestamp'\n            _index: _index\n            _type: _type\n            _source: \"{}\"\n            _id: _id\n            _score: 6.027456183070403\n          total:\n            value: 5\n          max_score: 1.4658129805029452\n        took: 5\n        timed_out: true\n        error: error\n        aggregations:\n          key:\n            buckets:\n            - doc_count: 0\n              aggregations:\n                key: null\n              key: key\n            - doc_count: 0\n              aggregations:\n                key: null\n              key: key\n            value: \"{}\"\n      properties:\n        aggregations:\n          additionalProperties:\n            $ref: '#/components/schemas/v1.AggregationResponse'\n          type: object\n        error:\n          type: string\n        hits:\n          $ref: '#/components/schemas/v1.Hits'\n        timed_out:\n          type: boolean\n        took:\n          description: Time it took to generate the response\n          type: integer\n      type: object\n    v1.Total:\n      example:\n        value: 5\n      properties:\n        value:\n          description: Count of documents returned\n          type: integer\n      type: object\n    v1.ZincQuery:\n      properties:\n        _source:\n          items:\n            type: string\n          type: array\n        aggs:\n          additionalProperties:\n            $ref: '#/components/schemas/v1.AggregationParams'\n          type: object\n        explain:\n          type: boolean\n        from:\n          type: integer\n        highlight:\n          $ref: '#/components/schemas/meta.Highlight'\n        max_results:\n          type: integer\n        query:\n          $ref: '#/components/schemas/v1.QueryParams'\n        search_type:\n          description: \"SearchType is the type of search to perform. Can be match,\\\n            \\ match_phrase, query_string, etc\"\n          type: string\n        sort_fields:\n          items:\n            type: string\n          type: array\n      type: object\n  securitySchemes:\n    basicAuth:\n      scheme: basic\n      type: http\nx-original-swagger-version: \"2.0\"\n",
			"canonicalURL": "/github.com/zinclabs/sdk-go-zincsearch@30d53bc22636cc1f14c04a97f4efc26960b7e2df/-/blob/api/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/zinclabs/sdk-go-zincsearch/blob/30d53bc22636cc1f14c04a97f4efc26960b7e2df/api/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/api/user\": at 1:35054: get: duplicate operationId: \"List\""
}