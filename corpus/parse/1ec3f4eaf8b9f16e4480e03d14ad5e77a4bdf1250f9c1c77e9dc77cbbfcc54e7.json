{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ccxt-rest/ccxt-rest"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "api/swagger/swagger.yaml",
			"byteSize": 55174,
			"content": "openapi: 3.0.0\ninfo:\n  version: \"2.5.0\"\n  title: CCXT REST\n  contact:\n    name: \"Adroit\"\n    email: \"hello@adroit.ph\"\n    url: \"https://adroit.ph/ccxt-rest-contact-us/\"\n  license:\n    name: \"MIT\"\n    url: \"https://github.com/ccxt-rest/ccxt-rest/blob/master/LICENSE.txt\"\nservers:\n  - url: 'http://localhost:3000/'\ntags:\n  - name: Authentication API\n    description: \u003e-\n      APIs that manage [creation](/#createPrivateConnection) / [deletion](/#deletePrivateConnection) / [retrieving](/#getone) of exchange connections. \n      \n\n      Most [Public Data APIs](/#ccxt-rest-public-data-api) by most exchanges can be used without providing the API Key and Secret. \n      \n      \n      For example, you get retrieve the market of binance by doing `GET:/exchange/binance/market` directly and would be able to get\n      the markets of binance. \n      \n      \n      But some exchanges though would require you to use an API Key and Secret even when accessing their Public Data API. For \n      example, for cointiger, if you want to retrieve its market and you do `GET:/exchange/cointiger/market`, you will a `403` error\n      (_i.e. meaning you were unauthorized to access it_). Thus, to use that api of continger, you would first have to provide your\n      API Key and Secret to continger via `POST:/exchange/continger -d {\"id\":\"myCoinTiger\",\"apiKey\":\"My-COINTIGER-KEY\",\"secret\":\"s3cret\"}`.\n      From there, you will get a response `{\"token\":\"xxx.yyy.zzz\"}`. That `\"xxx.yyy.zzz\"` would then what you will use to connect to\n      coiniger - i.e. `GET:/exchange/cointiger/market -H \"Authorization: Bearer xxx.yyy.zzz\"` and this time, your request will push \n      through and would be able to get cointiger's market.\n\n      \n      Furthemore, all [Private Data APIs](/#ccxt-rest-private-data-api) of all exchanges would require API Key and Secret. Thus,\n      although `GET:/exchange/binance/market` would work, doing `GET:/exchange/binance/balances` will not. You'd have to provide first\n      binance your API Key and Secret like `POST:/exchange/binance -d {\"id\":\"myBinance\",\"apiKey\":\"binance-key\",\"secret\":\"s3cret\"}`, to\n      get something like `{\"token\":\"aaa.bbb.ccc\"}`, which you can then use to execute \n      `GET:/exchange/binance/balances -H \"Authorization: Bearer aaa.bbb.ccc\"` which would finally get your balances.\n  - name: Exchange Management API\n    description: APIs for retrieving supported exchanges\n  - name: Public Data API\n    description: APIs that retrieve public data (like ticker, order books, trades, etc)\n  - name: Private Data API\n    description: APIs that retrieve private data (like your balances, your open orders, your closed orders, your trades, etc)\n  - name: Experimental API\n    description: APIs that may be useful but are in experimental stage. Some of these APIs may potentially be removed in the future or be moved into one of the previous categories\npaths:\n  /exchanges:\n    get:\n      description: List all support exchanges by this server\n      tags:\n        - Exchange Management API\n      x-swagger-router-controller: exchange\n      operationId: list\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref : \"#/components/schemas/Exchange\"\n                example: [\"_1btcxe\",\"acx\",\"anxpro\",\"anybits\",\"bcex\",\"bequant\",\"bibox\",\"bigone\",\"binance\",\"binanceje\",\"bit2c\",\"bitbank\",\"bitbay\",\"bitfinex\",\"bitfinex2\",\"bitflyer\",\"bitforex\",\"bithumb\",\"bitibu\",\"bitkk\",\"bitlish\",\"bitmarket\",\"bitmex\",\"bitsane\",\"bitso\",\"bitstamp\",\"bitstamp1\",\"bittrex\",\"bitz\",\"bl3p\",\"bleutrade\",\"braziliex\",\"btcalpha\",\"btcbox\",\"btcchina\",\"btcexchange\",\"btcmarkets\",\"btctradeim\",\"btctradeua\",\"btcturk\",\"buda\",\"bxinth\",\"ccex\",\"cex\",\"chbtc\",\"chilebit\",\"cobinhood\",\"coinbase\",\"coinbaseprime\",\"coinbasepro\",\"coincheck\",\"coinegg\",\"coinex\",\"coinexchange\",\"coinfalcon\",\"coinfloor\",\"coingi\",\"coinmarketcap\",\"coinmate\",\"coinnest\",\"coinone\",\"coinspot\",\"cointiger\",\"coolcoin\",\"coss\",\"crex24\",\"crypton\",\"cryptopia\",\"deribit\",\"dsx\",\"ethfinex\",\"exmo\",\"exx\",\"fcoin\",\"fcoinjp\",\"flowbtc\",\"foxbit\",\"fybse\",\"fybsg\",\"gateio\",\"gdax\",\"gemini\",\"getbtc\",\"hadax\",\"hitbtc\",\"hitbtc2\",\"huobipro\",\"huobiru\",\"ice3x\",\"independentreserve\",\"indodax\",\"itbit\",\"jubi\",\"kkex\",\"kraken\",\"kucoin\",\"kucoin2\",\"kuna\",\"lakebtc\",\"lbank\",\"liqui\",\"liquid\",\"livecoin\",\"luno\",\"lykke\",\"mandala\",\"mercado\",\"mixcoins\",\"negociecoins\",\"nova\",\"okcoincny\",\"okcoinusd\",\"okex\",\"paymium\",\"poloniex\",\"rightbtc\",\"southxchange\",\"stronghold\",\"surbitcoin\",\"theocean\",\"therock\",\"tidebit\",\"tidex\",\"uex\",\"upbit\",\"urdubit\",\"vaultoro\",\"vbtc\",\"virwox\",\"xbtce\",\"yobit\",\"zaif\",\"zb\"]\n                x-content-type: application/json\n        \"500\":\n          description: If an unexpected error occurred\n  /exchange/{exchangeName}:\n    get:\n      description: Retreives the current exchange connection details given the {exchangeName} and access token in the header\n      security:\n        - bearerAuth: []\n      tags:\n        - Authentication API\n      x-swagger-router-controller: exchange\n      operationId: getConnection\n      parameters:\n        - $ref: \"#/components/parameters/exchangeNameParam\"\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExchangeResponse'\n        \"404\":\n          description: Exchange with that name is NOT supported\n        \"500\":\n          description: If an unexpected error occurred\n    post:\n      description: Creates a private connection to the exchange referenced in {exchangeName}\n      security:\n        - bearerAuth: []\n      tags:\n        - Authentication API\n      operationId: createPrivateConnection\n      parameters:\n        - $ref: \"#/components/parameters/exchangeNameParam\"\n      requestBody:\n        description: The exchange to create.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/exchangeConfig'\n        required: true\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccessToken'\n        \"404\":\n          description: Exchange with that name is NOT supported\n        \"500\":\n          description: If an unexpected error occurred\n        \"503\":\n          description: Support for exchange is currently broken\n      x-swagger-router-controller: exchange\n    delete:\n      description: Delete the exchange connection referenced by access token in the header\n      security:\n        - bearerAuth: []\n      tags:\n        - Authentication API\n      x-swagger-router-controller: exchange\n      operationId: deletePrivateConnection\n      parameters:\n        - $ref: \"#/components/parameters/exchangeNameParam\"\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExchangeResponse'\n        \"404\":\n          description: Exchange with that name is NOT supported\n        \"500\":\n          description: If an unexpected error occurred\n  /exchange/{exchangeName}/markets:\n    get:\n      description: \u003e-\n        Get the markets of the exchange referenced by the {exchangeName}.\n        \n        \n        \u003cbr/\u003e *Parameters listed here are common to all exchanges. But any other parameter passed would be forwarded as well into the exchange.*\n      security:\n        - bearerAuth: []\n      tags:\n        - Public Data API\n      x-swagger-router-controller: exchange\n      operationId: markets\n      parameters:\n        - $ref: \"#/components/parameters/exchangeNameParam\"\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/MarketResponse'\n                x-content-type: application/json\n        \"400\":\n          description: If the exchange itself complained about the parameters passed\n        \"401\":\n          description: If the exchange integration requires api key and secret for this function\n        \"403\":\n          description: If the exchange integration had an authentication issue (most probably nonce error)\n        \"404\":\n          description: Exchange with that name is NOT supported\n        \"500\":\n          description: If an unexpected error occurred\n        \"501\":\n          description: If the exchange integration does NOT support this function\n        \"504\":\n          description: If the exchange itself could not be reached because of some network error\n  /exchange/{exchangeName}/orderBook:\n    get:\n      description: \u003e-\n        Get the order book of the exchange referenced by the {exchangeName} and `?symbol=`. \n        \n        \n        \u003cbr/\u003e *Parameters listed here are common to all exchanges. But any other parameter passed would be forwarded as well into the exchange.*\n      security:\n        - bearerAuth: []\n      tags:\n        - Public Data API\n      x-swagger-router-controller: exchange\n      operationId: orderBook\n      parameters:\n        - $ref: \"#/components/parameters/exchangeNameParam\"\n        - $ref: \"#/components/parameters/requiredExchangeSymbolParam\"\n        - name: limit\n          in: query\n          description: The limit of the exchange's order book to be retrieved.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: number\n        - name: exchangeSpecificParams\n          in: query\n          description: Any exchange specific parameters you want to pass in\n          schema:\n            type: object\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/OrderBookResponse'\n                x-content-type: application/json\n        \"400\":\n          description: If the exchange itself complained about the parameters passed\n        \"401\":\n          description: If the exchange integration requires api key and secret for this function\n        \"403\":\n          description: If the exchange integration had an authentication issue (most probably nonce error)\n        \"404\":\n          description: Exchange with that name is NOT supported\n        \"500\":\n          description: If an unexpected error occurred\n        \"501\":\n          description: If the exchange integration does NOT support this function\n        \"504\":\n          description: If the exchange itself could not be reached because of some network error\n  /exchange/{exchangeName}/l2OrderBook:\n    get:\n      description: \u003e-\n        Get the Level 2 Order Book of the exchange referenced by the {exchangeName} and `?symbol=`.\n        \n        \n        \u003cbr/\u003e *Parameters listed here are common to all exchanges. But any other parameter passed would be forwarded as well into the exchange.*\n      security:\n        - bearerAuth: []\n      tags:\n        - Public Data API\n      x-swagger-router-controller: exchange\n      operationId: l2OrderBook\n      parameters:\n        - $ref: \"#/components/parameters/exchangeNameParam\"\n        - $ref: \"#/components/parameters/requiredExchangeSymbolParam\"\n        - name: limit\n          in: query\n          description: The limit of the exchange's order book to be retrieved.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: number\n        - name: exchangeSpecificParams\n          in: query\n          description: Any exchange specific parameters you want to pass in\n          schema:\n            type: object\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/OrderBookResponse'\n                x-content-type: application/json\n        \"400\":\n          description: If the exchange itself complained about the parameters passed\n        \"401\":\n          description: If the exchange integration requires api key and secret for this function\n        \"403\":\n          description: If the exchange integration had an authentication issue (most probably nonce error)\n        \"404\":\n          description: Exchange with that name is NOT supported\n        \"500\":\n          description: If an unexpected error occurred\n        \"501\":\n          description: If the exchange integration does NOT support this function\n        \"504\":\n          description: If the exchange itself could not be reached because of some network error\n  /exchange/{exchangeName}/trades:\n    get:\n      description: \u003e- \n        Get the trades of the exchange referenced by the {exchangeName} and `?symbol=`.\n        \n        \n        \u003cbr/\u003e *Parameters listed here are common to all exchanges. But any other parameter passed would be forwarded as well into the exchange.*\n      security:\n        - bearerAuth: []\n      tags:\n        - Public Data API\n      x-swagger-router-controller: exchange\n      operationId: trades\n      parameters:\n        - $ref: \"#/components/parameters/exchangeNameParam\"\n        - $ref: \"#/components/parameters/requiredExchangeSymbolParam\"\n        - name: since\n          in: query\n          description: Retrieve the trades starting from 'since'\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: The limit of the exchange's trades to be retrieved.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: number\n        - name: exchangeSpecificParams\n          in: query\n          description: Any exchange specific parameters you want to pass in\n          schema:\n            type: object\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/TradeResponse'\n                x-content-type: application/json\n        \"400\":\n          description: If the exchange itself complained about the parameters passed\n        \"401\":\n          description: If the exchange integration requires api key and secret for this function\n        \"403\":\n          description: If the exchange integration had an authentication issue (most probably nonce error)\n        \"404\":\n          description: Exchange with that name is NOT supported\n        \"500\":\n          description: If an unexpected error occurred\n        \"501\":\n          description: If the exchange integration does NOT support this function\n        \"504\":\n          description: If the exchange itself could not be reached because of some network error\n  /exchange/{exchangeName}/ticker:\n    get:\n      description: \u003e-\n        Get the ticker of the exchange referenced by the {exchangeName} and `?symbol=`.\n        \n        \n        \u003cbr/\u003e *Parameters listed here are common to all exchanges. But any other parameter passed would be forwarded as well into the exchange.*\n      security:\n        - bearerAuth: []\n      tags:\n        - Public Data API\n      x-swagger-router-controller: exchange\n      operationId: ticker\n      parameters:\n        - $ref: \"#/components/parameters/exchangeNameParam\"\n        - $ref: \"#/components/parameters/requiredExchangeSymbolParam\"\n        - name: symbol\n          in: query\n          description: \u003e-\n            The symbol of the exchange's data to be retrieved. Possible values\n            are any of symbols in\n            GET:/exchange/{exchangeName}/markets\n          required: true\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: exchangeSpecificParams\n          in: query\n          description: Any exchange specific parameters you want to pass in\n          schema:\n            type: object\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TickerResponse'\n        \"400\":\n          description: If the exchange itself complained about the parameters passed\n        \"401\":\n          description: If the exchange integration requires api key and secret for this function\n        \"403\":\n          description: If the exchange integration had an authentication issue (most probably nonce error)\n        \"404\":\n          description: Exchange with that name is NOT supported\n        \"500\":\n          description: If an unexpected error occurred\n        \"501\":\n          description: If the exchange integration does NOT support this function\n        \"504\":\n          description: If the exchange itself could not be reached because of some network error\n  /exchange/{exchangeName}/tickers:\n    get:\n      description: \u003e-\n        Get the tickers of the exchange referenced by the {exchangeName} and `?symbol=`.\n        \n        \n        \u003cbr/\u003e *Parameters listed here are common to all exchanges. But any other parameter passed would be forwarded as well into the exchange.*\n      security:\n        - bearerAuth: []\n      tags:\n        - Public Data API\n      x-swagger-router-controller: exchange\n      operationId: tickers\n      parameters:\n        - $ref: \"#/components/parameters/exchangeNameParam\"\n        - $ref: \"#/components/parameters/optionalExchangeSymbolParam\"\n        - name: exchangeSpecificParams\n          in: query\n          description: Any exchange specific parameters you want to pass in\n          schema:\n            type: object\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/TickerResponse'\n                x-content-type: application/json\n        \"400\":\n          description: If the exchange itself complained about the parameters passed\n        \"401\":\n          description: If the exchange integration requires api key and secret for this function\n        \"403\":\n          description: If the exchange integration had an authentication issue (most probably nonce error)\n        \"404\":\n          description: Exchange with that name is NOT supported\n        \"500\":\n          description: If an unexpected error occurred\n        \"501\":\n          description: If the exchange integration does NOT support this function\n        \"504\":\n          description: If the exchange itself could not be reached because of some network error\n  /exchange/{exchangeName}/balances:\n    get:\n      description: \u003e-\n        Get the balances of the exchange referenced by the {exchangeName}. \n        \n        \n        \u003cbr/\u003e *Parameters listed here are common to all exchanges. But any other parameter passed would be forwarded as well into the exchange.*\n      security:\n        - bearerAuth: []\n      tags:\n        - Private Data API\n      x-swagger-router-controller: exchange\n      operationId: balances\n      parameters:\n        - $ref: \"#/components/parameters/exchangeNameParam\"\n        - name: exchangeSpecificParams\n          in: query\n          description: Any exchange specific parameters you want to pass in\n          schema:\n            type: object\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BalanceResponse'\n        \"400\":\n          description: If the exchange itself complained about the parameters passed\n        \"401\":\n          description: If the exchange integration requires api key and secret for this function\n        \"403\":\n          description: If the exchange integration had an authentication issue (most probably nonce error)\n        \"404\":\n          description: Exchange with that name is NOT supported\n        \"500\":\n          description: If an unexpected error occurred\n        \"501\":\n          description: If the exchange integration does NOT support this function\n        \"504\":\n          description: If the exchange itself could not be reached because of some network error\n  /exchange/{exchangeName}/orders:\n    get:\n      description: \u003e-\n        Get the orders of the exchange referenced by the {exchangeName}. \n        \n        \n        \u003cbr/\u003e *Parameters listed here are common to all exchanges. But any other parameter passed would be forwarded as well into the exchange.*\n      security:\n        - bearerAuth: []\n      tags:\n        - Private Data API\n      x-swagger-router-controller: exchange\n      operationId: fetchOrders\n      parameters:\n        - $ref: \"#/components/parameters/exchangeNameParam\"\n        - $ref: \"#/components/parameters/optionalExchangeSymbolParam\"\n        - name: since\n          in: query\n          description: Retrieve the orders starting from 'since'\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: The limit of the exchange's orders to be retrieved.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: number\n        - name: exchangeSpecificParams\n          in: query\n          description: Any exchange specific parameters you want to pass in\n          schema:\n            type: object\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/OrderResponse'\n                x-content-type: application/json\n        \"400\":\n          description: If the exchange itself complained about the parameters passed\n        \"401\":\n          description: If the exchange integration requires api key and secret for this function\n        \"403\":\n          description: If the exchange integration had an authentication issue (most probably nonce error)\n        \"404\":\n          description: Exchange with that name is NOT supported\n        \"500\":\n          description: If an unexpected error occurred\n        \"501\":\n          description: If the exchange integration does NOT support this function\n        \"504\":\n          description: If the exchange itself could not be reached because of some network error\n  /exchange/{exchangeName}/orders/open:\n    get:\n      description: \u003e-\n        Get the open orders of the exchange referenced by the {exchangeName}. \n        \n        \n        \u003cbr/\u003e *Parameters listed here are common to all exchanges. But any other parameter passed would be forwarded as well into the exchange.*\n      security:\n        - bearerAuth: []\n      tags:\n        - Private Data API\n      x-swagger-router-controller: exchange\n      operationId: fetchOpenOrders\n      parameters:\n        - $ref: \"#/components/parameters/exchangeNameParam\"\n        - $ref: \"#/components/parameters/optionalExchangeSymbolParam\"\n        - name: since\n          in: query\n          description: Retrieve the orders starting from 'since'\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: The limit of the exchange's orders to be retrieved.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: number\n        - name: exchangeSpecificParams\n          in: query\n          description: Any exchange specific parameters you want to pass in\n          schema:\n            type: object\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/OrderResponse'\n                x-content-type: application/json\n        \"400\":\n          description: If the exchange itself complained about the parameters passed\n        \"401\":\n          description: If the exchange integration requires api key and secret for this function\n        \"403\":\n          description: If the exchange integration had an authentication issue (most probably nonce error)\n        \"404\":\n          description: Exchange with that name is NOT supported\n        \"500\":\n          description: If an unexpected error occurred\n        \"501\":\n          description: If the exchange integration does NOT support this function\n        \"504\":\n          description: If the exchange itself could not be reached because of some network error\n  /exchange/{exchangeName}/orders/closed:\n    get:\n      description: \u003e-\n        Get the closed orders of the exchange referenced by the {exchangeName}.\n        \n        \n        \u003cbr/\u003e *Parameters listed here are common to all exchanges. But any other parameter passed would be forwarded as well into the exchange.*\n      security:\n        - bearerAuth: []\n      tags:\n        - Private Data API\n      x-swagger-router-controller: exchange\n      operationId: fetchClosedOrders\n      parameters:\n        - $ref: \"#/components/parameters/exchangeNameParam\"\n        - $ref: \"#/components/parameters/optionalExchangeSymbolParam\"\n        - name: since\n          in: query\n          description: Retrieve the orders starting from 'since'\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: The limit of the exchange's orders to be retrieved.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: number\n        - name: exchangeSpecificParams\n          in: query\n          description: Any exchange specific parameters you want to pass in\n          schema:\n            type: object\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/OrderResponse'\n                x-content-type: application/json\n        \"400\":\n          description: If the exchange itself complained about the parameters passed\n        \"401\":\n          description: If the exchange integration requires api key and secret for this function\n        \"403\":\n          description: If the exchange integration had an authentication issue (most probably nonce error)\n        \"404\":\n          description: Exchange with that name is NOT supported\n        \"500\":\n          description: If an unexpected error occurred\n        \"501\":\n          description: If the exchange integration does NOT support this function\n        \"504\":\n          description: If the exchange itself could not be reached because of some network error\n  /exchange/{exchangeName}/trades/mine:\n    get:\n      description: \u003e-\n        Get my trades of the exchange referenced by the {exchangeName}. \n        \n        \n        \u003cbr/\u003e *Parameters listed here are common to all exchanges. But any other parameter passed would be forwarded as well into the exchange.*\n      security:\n        - bearerAuth: []\n      tags:\n        - Private Data API\n      x-swagger-router-controller: exchange\n      operationId: fetchMyTrades\n      parameters:\n        - $ref: \"#/components/parameters/exchangeNameParam\"\n        - $ref: \"#/components/parameters/optionalExchangeSymbolParam\"\n        - name: since\n          in: query\n          description: Retrieve the trades starting from 'since'\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: The limit of the exchange's trades to be retrieved.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: number\n        - name: exchangeSpecificParams\n          in: query\n          description: Any exchange specific parameters you want to pass in\n          schema:\n            type: object\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/TradeResponse'\n                x-content-type: application/json\n        \"400\":\n          description: If the exchange itself complained about the parameters passed\n        \"401\":\n          description: If the exchange integration requires api key and secret for this function\n        \"403\":\n          description: If the exchange integration had an authentication issue (most probably nonce error)\n        \"404\":\n          description: Exchange with that name is NOT supported\n        \"500\":\n          description: If an unexpected error occurred\n        \"501\":\n          description: If the exchange integration does NOT support this function\n        \"504\":\n          description: If the exchange itself could not be reached because of some network error\n  /exchange/{exchangeName}/order:\n    post:\n      description: Create an order on the exchange referenced by the {exchangeName}\n      security:\n        - bearerAuth: []\n      tags:\n        - Private Data API\n      x-swagger-router-controller: exchange\n      operationId: createOrder\n      parameters:\n        - $ref: \"#/components/parameters/exchangeNameParam\"\n      requestBody:\n        description: The order to place.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/orderPlacement'\n        required: false\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OrderResponse'\n        \"400\":\n          description: If the exchange itself complained about the parameters passed\n        \"401\":\n          description: If the exchange integration requires api key and secret for this function\n        \"403\":\n          description: If the exchange integration had an authentication issue (most probably nonce error)\n        \"404\":\n          description: Exchange with that name is NOT supported\n        \"500\":\n          description: If an unexpected error occurred\n        \"501\":\n          description: If the exchange integration does NOT support this function\n        \"504\":\n          description: If the exchange itself could not be reached because of some network error\n  /exchange/{exchangeName}/order/{orderId}:\n    get:\n      description: \u003e-\n        Retrieves the information of an order on the exchange referenced by the {exchangeName} and {orderId}. \n        \n        \n        \u003cbr/\u003e *Parameters listed here are common to all exchanges. But any other parameter passed would be forwarded as well into the exchange.*\n      security:\n        - bearerAuth: []\n      tags:\n        - Private Data API\n      x-swagger-router-controller: exchange\n      operationId: fetchOrder\n      parameters:\n        - $ref: \"#/components/parameters/exchangeNameParam\"\n        - $ref: \"#/components/parameters/orderIdParam\"\n        - $ref: \"#/components/parameters/optionalExchangeSymbolParam\"\n        - name: exchangeSpecificParams\n          in: query\n          description: Any exchange specific parameters you want to pass in\n          schema:\n            type: object\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OrderResponse'\n        \"400\":\n          description: If the exchange itself complained about the parameters passed\n        \"401\":\n          description: If the exchange integration requires api key and secret for this function\n        \"403\":\n          description: If the exchange integration had an authentication issue (most probably nonce error)\n        \"404\":\n          description: Exchange with that name is NOT supported\n        \"500\":\n          description: If an unexpected error occurred\n        \"501\":\n          description: If the exchange integration does NOT support this function\n        \"504\":\n          description: If the exchange itself could not be reached because of some network error\n    delete:\n      description: \u003e- \n        Cancel an open order on the exchange referenced by the {exchangeName} and {orderId}. \n        \n        \n        \u003cbr/\u003e *Parameters listed here are common to all exchanges. But any other parameter passed would be forwarded as well into the exchange.*\n      security:\n        - bearerAuth: []\n      tags:\n        - Private Data API\n      x-swagger-router-controller: exchange\n      operationId: cancelOrder\n      parameters:\n        - $ref: \"#/components/parameters/exchangeNameParam\"\n        - $ref: \"#/components/parameters/orderIdParam\"\n        - $ref: \"#/components/parameters/optionalExchangeSymbolParam\"\n        - name: exchangeSpecificParams\n          in: query\n          description: Any exchange specific parameters you want to pass in\n          schema:\n            type: object\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OrderResponse'\n        \"400\":\n          description: If the exchange itself complained about the parameters passed\n        \"401\":\n          description: If the exchange integration requires api key and secret for this function\n        \"403\":\n          description: If the exchange integration had an authentication issue (most probably nonce error)\n        \"404\":\n          description: Exchange with that name is NOT supported\n        \"500\":\n          description: If an unexpected error occurred\n        \"501\":\n          description: If the exchange integration does NOT support this function\n        \"504\":\n          description: If the exchange itself could not be reached because of some network error\n  /exchange/{exchangeName}/_/{methodName}:\n    post:\n      description: Invokes a ccxt javascript object's method call directly\n      security:\n        - bearerAuth: []\n      tags:\n        - Experimental API\n      x-swagger-router-controller: exchange\n      operationId: directCall\n      parameters:\n        - $ref: \"#/components/parameters/exchangeNameParam\"\n        - name: methodName\n          in: path\n          description: The method name of the exchange that would be invoked directly\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      requestBody:\n        description: The array of values that would be passed as parameters to the direct method call\n        content:\n          application/json:\n            schema:\n              type: array\n        required: false\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                x-content-type: application/json\n        \"400\":\n          description: If the exchange itself complained about the parameters passed\n        \"401\":\n          description: If the exchange integration requires api key and secret for this function\n        \"403\":\n          description: If the exchange integration had an authentication issue (most probably nonce error)\n        \"404\":\n          description: Exchange with that name is NOT supported\n        \"500\":\n          description: If an unexpected error occurred\n        \"501\":\n          description: If the exchange integration does NOT support this function\n        \"504\":\n          description: If the exchange itself could not be reached because of some network error\ncomponents:\n  schemas:\n    OrderBookLevel:\n      required:\n        - price\n      type: object\n      properties:\n        price:\n          type: number\n          description: \u003e-\n            The price being asked for. If this is a bid, then this is the amount\n            the bidder is willing to buy. If this is a sell, then this is the\n            amount the seller is willing to sell for.\n        amount:\n          type: number\n          description: The amount of units being sold.\n    BalanceInfo:\n      required:\n        - currency\n        - free\n        - total\n        - used\n      type: object\n      properties:\n        currency:\n          type: string\n          description: The currency at which this balance refers to\n        free:\n          type: number\n          description: The amount of currency that is free to used\n        used:\n          type: number\n          description: The amount of currency that is currently used\n        total:\n          type: number\n          description: The total amount of currency (free + used)\n    MarketResponse:\n      required:\n        - base\n        - id\n        - info\n        - limits\n        - lot\n        - precision\n        - quote\n        - symbol\n      type: object\n      properties:\n        id:\n          type: string\n          description: The unique identifier for this market\n        symbol:\n          type: string\n          description: \u003e-\n            A unified way of referencing this Market. When a symbol parameter is\n            needed in one of the APIs, this iis where you will get it.\n        base:\n          type: string\n          description: 'The base currency. Given ''BTC/USD'', the base is ''BTC'''\n        quote:\n          type: string\n          description: 'The quote currency. Given ''BTC/USD'', the quote is ''USD'''\n        info:\n          type: object\n          properties: {}\n          description: Raw market response gotten from the exchange site's API\n        lot:\n          type: number\n          description: \u003e-\n            When placing an order, its amount must be divisible by this lot\n            value\n        limits:\n          $ref: '#/components/schemas/Limits'\n        precision:\n          $ref: '#/components/schemas/Precision'\n    TradeResponse:\n      required:\n        - amount\n        - info\n        - price\n        - side\n        - symbol\n      type: object\n      properties:\n        id:\n          type: string\n          description: The unique identifier of the exchange for this trade\n        info:\n          type: object\n          properties: {}\n          description: Raw trade response gotten from the exchange site's API\n        timestamp:\n          type: number\n          description: The timestamp of this trade\n          format: date-time\n        symbol:\n          type: string\n          description: The currency pair of this trade\n        side:\n          $ref : \"#/components/schemas/Side\"\n        price:\n          type: number\n          description: The price of this trade\n        amount:\n          type: number\n          description: The amount of this trade\n    OrderResponse:\n      required:\n        - id\n      type: object\n      properties:\n        id:\n          type: string\n          description: The unique identifier of the exchange for this order\n        timestamp:\n          type: number\n          description: The timestamp of this order\n        datetime:\n          type: string\n          description: The datetime of this order\n          format: date-time\n        symbol:\n          type: string\n          description: The currency pair of this order\n        type:\n          $ref : \"#/components/schemas/OrderType\"\n        side:\n          $ref : \"#/components/schemas/Side\"\n        price:\n          type: number\n          description: The price of this order\n        amount:\n          type: number\n          description: The amount of this order\n        cost:\n          type: number\n          description: The cost of this order (i.e. price x amount)\n        filled:\n          type: number\n          description: \u003e-\n            The amount of this order that is currently filled (i.e. this can be\n            less than or equal to 'amount')\n        remaining:\n          type: number\n          description: \u003e-\n            The amount of this order that is still yet to be filled (i.e. this\n            can be less than or equal to 'amount')\n        status:\n          $ref : \"#/components/schemas/OrderStatus\"\n        info:\n          type: object\n          properties: {}\n          description: Raw order response gotten from the exchange site's API\n    Side:\n      type: string\n      description: Wether this is a bid or ask (i.e. buy or sell) order\n      enum:\n        - buy\n        - sell\n    Exchange:\n      type: string\n      enum: [\"_1btcxe\", \"acx\", \"anxpro\", \"aofex\", \"bcex\", \"bequant\", \"bibox\", \"bigone\", \"binance\", \"binanceje\", \"binanceus\", \"bit2c\", \"bitbank\", \"bitbay\", \"bitfinex\", \"bitfinex2\", \"bitflyer\", \"bitforex\", \"bithumb\", \"bitkk\", \"bitmart\", \"bitmax\", \"bitmex\", \"bitso\", \"bitstamp\", \"bitstamp1\", \"bittrex\", \"bitvavo\", \"bitz\", \"bl3p\", \"bleutrade\", \"braziliex\", \"btcalpha\", \"btcbox\", \"btcmarkets\", \"btctradeim\", \"btctradeua\", \"btcturk\", \"buda\", \"bw\", \"bybit\", \"bytetrade\", \"cex\", \"chilebit\", \"coinbase\", \"coinbaseprime\", \"coinbasepro\", \"coincheck\", \"coinegg\", \"coinex\", \"coinfalcon\", \"coinfloor\", \"coingi\", \"coinmarketcap\", \"coinmate\", \"coinone\", \"coinspot\", \"coolcoin\", \"coss\", \"crex24\", \"currencycom\", \"deribit\", \"digifinex\", \"dsx\", \"eterbase\", \"exmo\", \"exx\", \"fcoin\", \"fcoinjp\", \"flowbtc\", \"foxbit\", \"ftx\", \"fybse\", \"gateio\", \"gemini\", \"hbtc\", \"hitbtc\", \"hollaex\", \"huobipro\", \"huobiru\", \"ice3x\", \"idex\", \"independentreserve\", \"indodax\", \"itbit\", \"kkex\", \"kraken\", \"kucoin\", \"kuna\", \"lakebtc\", \"latoken\", \"lbank\", \"liquid\", \"livecoin\", \"luno\", \"lykke\", \"mercado\", \"mixcoins\", \"oceanex\", \"okcoin\", \"okex\", \"paymium\", \"poloniex\", \"probit\", \"qtrade\", \"rightbtc\", \"southxchange\", \"stex\", \"stronghold\", \"surbitcoin\", \"theocean\", \"therock\", \"tidebit\", \"tidex\", \"timex\", \"topq\", \"upbit\", \"vaultoro\", \"vbtc\", \"whitebit\", \"xbtce\", \"yobit\", \"zaif\", \"zb\"]      \n    OrderBookResponse:\n      required:\n        - asks\n        - bids\n      type: object\n      properties:\n        bids:\n          type: array\n          description: The publicly listed buy orders\n          items:\n            $ref: '#/components/schemas/OrderBookLevel'\n        asks:\n          type: array\n          description: The publicly listed sell orders\n          items:\n            $ref: '#/components/schemas/OrderBookLevel'\n        timestamp:\n          type: number\n          description: The timestamp associated for this order book\n        datetime:\n          type: string\n          description: The timestamp associated for this order book\n          format: date-time\n    OrderStatus:\n      type: string\n      description: The current status of this order\n      enum:\n        - open\n        - closed\n        - canceled\n        - canceling\n    OrderType:\n      type: string\n      description: Whether this is a 'market' order or a 'limit' order\n      enum:\n        - market\n        - limit\n    Limits:\n      required:\n        - amount\n        - cost\n        - price\n      type: object\n      properties:\n        amount:\n          $ref: '#/components/schemas/Limit'\n        price:\n          $ref: '#/components/schemas/Limit'\n        cost:\n          $ref: '#/components/schemas/Limit'\n    BalanceResponse:\n      required:\n        - balances\n        - info\n      type: object\n      properties:\n        info:\n          type: object\n          properties: {}\n          description: Raw balance response gotten from the exchange site's API\n        balances:\n          type: array\n          description: List of balances per currency that you own\n          items:\n            $ref: '#/components/schemas/BalanceInfo'\n    Precision:\n      required:\n        - amount\n        - price\n      type: object\n      properties:\n        amount:\n          type: number\n          description: \u003e-\n            The allowable precision of the amount when placing an order. For\n            example, given 2, then an amount of 0.123 must be made either 0.12\n            (or 0.13)\n        price:\n          type: number\n          description: \u003e-\n            The allowable precision of the amount when placing an order. For\n            example, given 2, then a price of 0.123 must be made either 0.12 (or\n            0.13)\n    AccessToken:\n      required:\n        - token\n      properties:\n        token:\n          type: string\n          description: \u003e- \n            The JWT token that needs to be added into the 'Authorization'\n            header with the 'Bearer ' prefix. For example, given a token of xyz,\n            do a secured request with 'Authorization: Bearer xyz'\n    ExchangeResponse:\n      required:\n        - id\n        - countries\n        - enableRateLimit\n        - name\n        - private\n      type: object\n      properties:\n        id:\n          type: string\n          description: \u003e-\n            The id of the exchange. When you created the exchange (via\n            POST:/exchanges/{exhangeName}), the 'id' parameter there becomes the\n            name here\n        name:\n          type: string\n          description: \u003e-\n            The name of the exchange. \n        private:\n          type: boolean\n          description: Whether this exchange is private (has apiKey) or public (no apiKey)\n        enableRateLimit:\n          type: boolean\n          description: \u003e-\n            Whether to enable the built in rate limiter or not. The built in\n            rate limiter is an approximation of the actual exchange's limit. To\n            have a more accurate rate limiting, set this to false and implement\n            the rate limiter on your client\n          default: true\n        countries:\n          type: array\n          description: The list of countries where this exchange is a member of\n          items:\n            type: string\n        rateLimit:\n          type: integer\n          description: \u003e-\n            A request rate limit in milliseconds. Specifies the required minimal\n            delay between two consequent HTTP requests to the same exchange. If\n            enableRateLimit is set to false, this would be ignored.\n        twofa:\n          type: boolean\n          description: Whether to enable two factor authentication or not\n          default: false\n        has:\n          $ref: '#/components/schemas/ExchangeHasCapabilities'\n        urls:\n          type: object\n          properties: {}\n          description: Collection of URLs this exchange has\n    TickerResponse:\n      required:\n        - ask\n        - baseVolume\n        - bid\n        - close\n        - datetime\n        - high\n        - info\n        - last\n        - low\n        - quoteVolume\n        - symbol\n        - timestamp\n        - vwap\n      type: object\n      properties:\n        symbol:\n          type: string\n          description: The currency pair of this tick\n        timestamp:\n          type: number\n          description: The timestamp of this tick\n        datetime:\n          type: string\n          description: The datetime of this tick\n          format: date-time\n        high:\n          type: number\n          description: The higest price of this tick\n        low:\n          type: number\n          description: The lowest price of this tick\n        bid:\n          type: number\n          description: The current bid price of this tick\n        ask:\n          type: number\n          description: The current ask price of this tick\n        vwap:\n          type: number\n          description: The volume weighted average price of this tick\n        close:\n          type: number\n          description: The closing price of this tick\n        last:\n          type: number\n          description: The last price of this tick\n        baseVolume:\n          type: number\n          description: The volume of the base currency of this tick\n        quoteVolume:\n          type: number\n          description: The volume of the quote currency of this tick\n        info:\n          type: object\n          properties: {}\n          description: Raw ticker response gotten from the exchange site's API\n    Limit:\n      required:\n        - max\n        - min\n      type: object\n      properties:\n        min:\n          type: number\n          description: The minimum allowable value\n        max:\n          type: number\n          description: The maximum allowable value\n    ExchangeCapability:\n      type: string\n      enum:\n        - 'true'\n        - 'false'\n        - emulated\n    ExchangeHasCapabilities:\n      required:\n        - CORS\n        - cancelOrder\n        - cancelOrders\n        - createDepositAddress\n        - createLimitOrder\n        - createMarketOrder\n        - createOrder\n        - editOrder\n        - fetchBalance\n        - fetchBidsAsks\n        - fetchClosedOrders\n        - fetchCurrencies\n        - fetchDepositAddress\n        - fetchFundingFees\n        - fetchL2OrderBook\n        - fetchMarkets\n        - fetchMyTrades\n        - fetchOHLCV\n        - fetchOpenOrders\n        - fetchOrder\n        - fetchOrderBook\n        - fetchOrderBooks\n        - fetchOrders\n        - fetchTicker\n        - fetchTickers\n        - fetchTrades\n        - fetchTradingFees\n        - fetchTradingLimits\n        - privateAPI\n        - publicAPI\n        - withdraw\n      type: object\n      properties:\n        CORS:\n          $ref : \"#/components/schemas/ExchangeCapability\"\n        publicAPI:\n          $ref : \"#/components/schemas/ExchangeCapability\"\n        privateAPI:\n          $ref : \"#/components/schemas/ExchangeCapability\"\n        cancelOrder:\n          $ref : \"#/components/schemas/ExchangeCapability\"\n        cancelOrders:\n          $ref : \"#/components/schemas/ExchangeCapability\"\n        createDepositAddress:\n          $ref : \"#/components/schemas/ExchangeCapability\"\n        createOrder:\n          $ref : \"#/components/schemas/ExchangeCapability\"\n        createMarketOrder:\n          $ref : \"#/components/schemas/ExchangeCapability\"\n        createLimitOrder:\n          $ref : \"#/components/schemas/ExchangeCapability\"\n        editOrder:\n          $ref : \"#/components/schemas/ExchangeCapability\"\n        fetchBalance:\n          $ref : \"#/components/schemas/ExchangeCapability\"\n        fetchBidsAsks:\n          $ref : \"#/components/schemas/ExchangeCapability\"\n        fetchClosedOrders:\n          $ref : \"#/components/schemas/ExchangeCapability\"\n        fetchCurrencies:\n          $ref : \"#/components/schemas/ExchangeCapability\"\n        fetchDepositAddress:\n          $ref : \"#/components/schemas/ExchangeCapability\"\n        fetchFundingFees:\n          $ref : \"#/components/schemas/ExchangeCapability\"\n        fetchL2OrderBook:\n          $ref : \"#/components/schemas/ExchangeCapability\"\n        fetchMarkets:\n          $ref : \"#/components/schemas/ExchangeCapability\"\n        fetchMyTrades:\n          $ref : \"#/components/schemas/ExchangeCapability\"\n        fetchOHLCV:\n          $ref : \"#/components/schemas/ExchangeCapability\"\n        fetchOpenOrders:\n          $ref : \"#/components/schemas/ExchangeCapability\"\n        fetchOrder:\n          $ref : \"#/components/schemas/ExchangeCapability\"\n        fetchOrderBook:\n          $ref : \"#/components/schemas/ExchangeCapability\"\n        fetchOrderBooks:\n          $ref : \"#/components/schemas/ExchangeCapability\"\n        fetchOrders:\n          $ref : \"#/components/schemas/ExchangeCapability\"\n        fetchTicker:\n          $ref : \"#/components/schemas/ExchangeCapability\"\n        fetchTickers:\n          $ref : \"#/components/schemas/ExchangeCapability\"\n        fetchTrades:\n          $ref : \"#/components/schemas/ExchangeCapability\"\n        fetchTradingFees:\n          $ref : \"#/components/schemas/ExchangeCapability\"\n        fetchTradingLimits:\n          $ref : \"#/components/schemas/ExchangeCapability\"\n        withdraw:\n          $ref : \"#/components/schemas/ExchangeCapability\"\n    exchangeConfig:\n      required:\n        - id\n      type: object\n      properties:\n        id:\n          type: string\n          description: \u003e-\n            The unique identifier for this exchange. \n        apiKey:\n          type: string\n          description: \u003e-\n            The API key you got from the exchange itself. This with the secret\n            is what will allow you to access the exchange\n        secret:\n          type: string\n          description: \u003e-\n            The Secret key you got from the exchange itself. This with the\n            apiKey is what will allow you to access the exchange\n        enableRateLimit:\n          type: boolean\n          description: \u003e-\n            Whether to enable the built in rate limiter or not. The built in\n            rate limiter is an approximation of the actual exchange's limit. To\n            have a more accurate rate limiting, set this to false and implement\n            the rate limiter on your client\n          default: true\n    orderPlacement:\n      required:\n        - amount\n        - side\n        - symbol\n        - type\n      type: object\n      properties:\n        symbol:\n          type: string\n          description: The currency pair (base/quote) of the order to be created\n        type:\n          $ref : \"#/components/schemas/OrderType\"\n        side:\n          $ref : \"#/components/schemas/Side\"\n        amount:\n          type: number\n          description: The amount of currency pair's base that we want to buy or sell\n        price:\n          type: number\n          description: \u003e-\n            The buying price or the selling price in terms of the quote. Price\n            is needed for market orders and ignored in limit orders\n        exchangeSpecificParams:\n          type: object\n          properties: {}\n          description: Exchange specific parameters\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT  \n  parameters:\n    orderIdParam:\n      name: orderId\n      in: path\n      description: \u003e-\n        The id of the order. Possible values are any of the result of\n        GET:/exchange/{exchangeName}/orders.\n      required: true\n      style: simple\n      explode: false\n      schema:\n        type: string\n    requiredExchangeSymbolParam:\n      name: symbol\n      in: query\n      description: \u003e-\n        The symbol of the exchange's data to be retrieved. Possible values are\n        any of symbols in GET:/exchange/{exchangeName}/markets\n      required: true\n      style: form\n      explode: true\n      schema:\n        type: string\n    optionalExchangeSymbolParam:\n      name: symbol\n      in: query\n      description: \u003e-\n        The symbol of the exchange's data to be retrieved. Possible values are\n        any of symbols in GET:/exchange/{exchangeName}/markets\n      required: false\n      style: form\n      explode: true\n      schema:\n        type: string\n    exchangeNameParam:\n      name: exchangeName\n      in: path\n      description: \u003e-\n        The name of the exchange. Possible values are any of the result of\n        GET:/exchanges.\n      required: true\n      style: simple\n      explode: false\n      schema:\n        $ref : \"#/components/schemas/Exchange\"\n",
			"canonicalURL": "/github.com/ccxt-rest/ccxt-rest@6c1ae031bdfbf490e69ea0498eac97a4f6218ff0/-/blob/api/swagger/swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ccxt-rest/ccxt-rest/blob/6c1ae031bdfbf490e69ea0498eac97a4f6218ff0/api/swagger/swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/exchange/{exchangeName}/ticker\": get: operation \"ticker\": parameters: at 1:34762: duplicate parameter: \"symbol\" in \"query\""
}