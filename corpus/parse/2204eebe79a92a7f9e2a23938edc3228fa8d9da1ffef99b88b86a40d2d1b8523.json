{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/digirati-co-uk/taxonomy-manager"
		},
		"file": {
			"name": "management.oas3.yaml",
			"size": 0,
			"path": "docs/api/management.oas3.yaml",
			"byteSize": 14306,
			"content": "openapi: 3.0.0\nservers:\n  - url: http://taxman.com\ninfo:\n\n  title: \"Taxonomy Manager API\"\n  version: \"0.0.1\"\n  contact:\n    name: Digirati\n    email: opensource@digirati.com\n    url: https://github.com/digirati-co-uk/digirati-taxonomy-manager\n  description: |\n\n    # Introduction\n\n    This specification covers all actions and operations required to create and manage a SKOS taxonomy.\n\n    # Data Model\n\n    The taxonomy management API is architected as a set of RESTful JSON-LD resources that can be manipulated and traversed\n    by a client. All URIs present in an API response from the management system **MUST** be dereferencable as SKOS resources.\n    The operations listed below specify the actions that can be performed on the collection of taxonomies that TaxMan hosts.\n\n    # Localization\n\n    The SKOS data model puts a large focus on localization of taxonomies, and the API should respect and export this.\n    Any property with a type of rdfs:PlainLiteral should be marshalled to JSON with an embedded language map, even when\n    only one other label exists for the property.\n\n    \u003csmall\u003eConforming Response\u003c/small\u003e\n    ```json\n    {\n      \"@id\": \"\u003cx\u003e\",\n      \"skos:prefLabel\": [\n        {\n          \"@lang\": \"en\",\n          \"@value\": \"test\"\n        }\n      ]\n    }\n    ```\n\n    \u003csmall\u003eNon-conforming Response\u003c/small\u003e\n    ```json\n    {\n      \"@id\": \"\u003cx\u003e\",\n      \"skos:prefLabel\": \"test\"\n    }\n    ```\n\n    # Deferencing Resources\n\n    It **MUST** be possible to deference all resources that are referenced by IRI. For example, when a GET request to a _skos:Concept_\n    provides a list of IRIs that are _broader_ or _narrower_ concepts then each of those elements should have an IRI that dereferences to\n    a taxonomy management endpoint. This is in addition to providing all [Lexical labels](https://www.w3.org/TR/skos-reference/#labels) for each resource\n    as described in the Data Model.\n\n\ntags:\n  - name: Project\n    description: |\n      A project is a collection of Concept Schemes, and some associated metadata. A project does not own concept schemes,\n      however can associate itself with them by using the `dcterms:hasPart` term.\n  - name: ConceptScheme\n    description: |\n      A Concept Scheme contains a collection of concepts, with several of as top-level concepts that serve as an entrypoint into the taxonomy\n      graph.\n  - name: Concept\n    description: Operations executed on single concepts.\n  - name: Analysis\n    description: Operations used to run text analysis.\npaths:\n  /0.1/analysis:\n    post:\n      summary: Analyse a text document.\n      tags:\n        - Analysis\n      requestBody:\n        $ref: '#/components/requestBodies/analysis'\n      responses:\n        '200':\n          description: A collection of concepts that were found during analysis.\n          content:\n            'application/ld+json;profile=\"http://www.w3.org/2004/02/skos/core.jsonld\"':\n              example:\n                $ref: './samples/analysis/analysis--response.json'\n              schema:\n                $ref: './schemas/collection/response.json'\n  /0.1/project/{project}:\n    get:\n      parameters:\n        - $ref: '#/components/parameters/project'\n      summary: Get a project\n      tags:\n        - Project\n      responses:\n        '404':\n          $ref: '#/components/responses/notFound'\n        '200':\n          description: Compact JSON-LD representation of a Project resource.\n          content:\n            'application/ld+json;profile=\"http://www.w3.org/2004/02/skos/core.jsonld\"':\n              example:\n                $ref: './samples/project/new-project--response.json'\n              schema:\n                $ref: './schemas/project/response.json'\n    put:\n      summary: Update a project\n      tags:\n        - Project\n      requestBody:\n        $ref: '#/components/requestBodies/project'\n      responses:\n        '404':\n          $ref: '#/components/responses/notFound'\n        '422':\n          $ref: '#/components/responses/validationFailed'\n        '204':\n          description: Update successful. Resource is unchanged from reqest body.\n\n  /0.1/project:\n    post:\n      summary: Create a project\n      tags:\n        - Project\n      requestBody:\n        $ref: '#/components/requestBodies/project'\n      responses:\n        '409':\n          $ref: '#/components/responses/conflict'\n        '422':\n          $ref: '#/components/responses/validationFailed'\n        '201':\n          description: JSON-LD representation of the new Project resource.\n          content:\n            'application/ld+json;profile=\"http://www.w3.org/2004/02/skos/core.jsonld\"':\n              example:\n                $ref: samples/project/new-project--response.json\n              schema:\n                $ref: schemas/project/response.json\n    get:\n      summary: Gets all projects\n      tags:\n        - Project\n      responses:\n        '200':\n          description: A collection of all projects\n          content:\n            'application/ld+json;profile=\"http://www.w3.org/2004/02/skos/core.jsonld\"':\n              example:\n                $ref: './samples/analysis/analysis--response.json'\n              schema:\n                $ref: './schemas/collection/response.json'\n\n  /0.1/concept-scheme/{scheme}/concept/{concept}:\n    parameters:\n      - $ref: '#/components/parameters/scheme'\n      - $ref: '#/components/parameters/concept'\n    put:\n      tags:\n        - Concept\n      description: Update an existing Concept.\n      requestBody:\n        description: The updated skos:Concept resource to be saved.\n        content:\n          'application/ld+json;profile=\"http://www.w3.org/2004/02/skos/core.jsonld\"':\n            example:\n              $ref: './samples/concept/update-concept--request.json'\n            schema:\n              $ref: './schemas/concept/request.json'\n      responses:\n        '404':\n          $ref: '#/components/responses/notFound'\n        '422':\n          $ref: '#/components/responses/validationFailed'\n        '204':\n          description: Update successful. Resource is unchanged from request bodyc.\n\n    get:\n      tags:\n        - Concept\n      description: Fetch an existing Concept\n      responses:\n        '200':\n          description: The remote representation of the skos:Concept.\n          content:\n            'application/ld+json;profile=\"http://www.w3.org/2004/02/skos/core.jsonld\"':\n              example:\n                $ref: './samples/concept/new-concept--response.json'\n              schema:\n                $ref: './schemas/concept/response.json'\n        '404':\n          $ref: '#/components/responses/notFound'\n\n  /0.1/concept-scheme/{scheme}/concept:\n    parameters:\n      - $ref: '#/components/parameters/scheme'\n    post:\n      tags:\n        - Concept\n      summary: Create a new Concept\n      operationId: addConceptToScheme\n      requestBody:\n        description: A skos:Concept resource.\n        content:\n          'application/ld+json;profile=\"http://www.w3.org/2004/02/skos/core.jsonld\"':\n            example:\n              $ref: './samples/concept/new-concept--request.json'\n            schema:\n              $ref: './schemas/concept/request.json'\n      responses:\n        '422':\n          $ref: '#/components/responses/validationFailed'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '201':\n          description: The newly created skos:Concept resource, with the additional skos:inScheme property for the new parent.\n          content:\n            'application/ld+json;profile=\"http://www.w3.org/2004/02/skos/core.jsonld\"':\n              example:\n                $ref: samples/concept/new-concept--response.json\n              schema:\n                $ref: schemas/concept/response.json\n\n  /0.1/concept-scheme/{scheme}:\n    parameters:\n      - $ref: '#/components/parameters/scheme'\n    put:\n      summary: Update a ConceptScheme\n      tags:\n        - ConceptScheme\n      requestBody:\n        description: \"A JSON-LD representation of the ConceptScheme being updated.\"\n        content:\n          'application/ld+json;profile=\"http://www.w3.org/2004/02/skos/core.jsonld\"':\n            example:\n              $ref: './samples/concept-scheme/update-concept-scheme--request.json'\n            schema:\n              $ref: './schemas/concept-scheme/request.json'\n      responses:\n        '422':\n          $ref: '#/components/responses/validationFailed'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '204':\n          description: Update was successful. Resource is unchanged from request body.\n\n    get:\n      summary: Get a ConceptScheme\n      tags:\n        - ConceptScheme\n      responses:\n        '404':\n          $ref: '#/components/responses/notFound'\n        '200':\n          description: |\n            A skos:ConceptScheme resource, containing embedded links to the skos:Concept entries\n            appearing within it. Any embedded data (such as a `skos:Concept`, or a linked `skos:Collection`)\n            will contain presentational properties as defined by _Lexical Labels_ in the SKOS specification.\n          content:\n            'application/ld+json;profile=\"http://www.w3.org/2004/02/skos/core.jsonld\"':\n              example:\n                $ref: samples/concept-scheme/new-concept-scheme--response.json\n              schema:\n                $ref: schemas/concept-scheme/response.json\n  /0.1/concept-scheme/:\n    post:\n      summary: Create a ConceptScheme\n      tags:\n        - ConceptScheme\n      operationId: createConceptScheme\n      requestBody:\n        description: \"A representation of the ConceptScheme being created.\"\n        content:\n          'application/ld+json;profile=\"http://www.w3.org/2004/02/skos/core.jsonld\"':\n            example:\n              $ref: './samples/concept-scheme/new-concept-scheme--request.json'\n            schema:\n              $ref: './schemas/concept-scheme/request.json'\n          multipart/form-data:\n            example:\n              $ref: './samples/concept-scheme/new-concept-scheme--request.xml'\n      responses:\n        '201':\n          description: The newly created ConceptScheme resource.\n          links:\n            addConcept:\n              operationId: addConceptToScheme\n              parameters:\n                scheme: $response.body#/@id\n          content:\n            'application/ld+json;profile=\"http://www.w3.org/2004/02/skos/core.jsonld\"':\n              example:\n                $ref: './samples/concept-scheme/new-concept-scheme--response.json'\n              schema:\n                $ref: schemas/concept-scheme/response.json\n  /0.1/concept/search/:\n    get:\n      summary: Search for all concepts with a given label prefix in a given language\n      tags:\n        - Concept\n      operationId: searchConcepts\n      parameters:\n        - name: label\n          in: query\n          description: The label prefix to search for\n          required: true\n          schema:\n            type: string\n            example: con\n        - name: language\n          in: query\n          description: The ISO 639-1 language key to search for\n          required: true\n          schema:\n            type: string\n            example: en\n      responses:\n        '200':\n          description: |\n            A `skos:Collection` containing a list of all `skos:Concept`s with a label prefixed with the `label` query\n            parameter, in the language provided by the `language` query parameter.\n          content:\n            'application/ld+json;profile=\"http://www.w3.org/2004/02/skos/core.jsonld\"':\n              example:\n                $ref: './samples/concepts/search-concepts--response.json'\n              schema:\n                $ref: './schemas/collection/response.json'\n\ncomponents:\n  requestBodies:\n    analysis:\n      required: true\n      description: JSON representation of a text document.\n      content:\n        'application/ld+json;profile=\"http://www.w3.org/2004/02/skos/core.jsonld\"':\n          example:\n            $ref: './samples/analysis/analysis--request.json'\n          schema:\n            $ref: './schemas/analysis/request.json'\n\n    project:\n      required: true\n      description: JSON-LD representation of the Project.\n      content:\n        'application/ld+json;profile=\"http://www.w3.org/2004/02/skos/core.jsonld\"':\n          example:\n            $ref: './samples/project/new-project--request.json'\n          schema:\n            $ref: './schemas/project/response.json'\n  responses:\n    validationFailed:\n      description: The request body failed validation\n      content:\n        'application/problem+json':\n          schema:\n            $ref: '#/components/schemas/validationError'\n    notFound:\n      description: The specified resource was not found\n      content:\n        'application/problem+json':\n          schema:\n            $ref: '#/components/schemas/error'\n    unauthorized:\n      description: Unauthorized\n      content:\n        'application/problem+json':\n          schema:\n            $ref: '#/components/schemas/error'\n    conflict:\n      description: Conflict\n      content:\n        'application/problem+json':\n          schema:\n            $ref: '#/components/schemas/error'\n\n  schemas:\n    validationError:\n      type: object\n      required:\n        - code\n        - message\n        - errors\n      properties:\n        errors:\n          type: array\n          items:\n            type: object\n            properties:\n              id:\n                type: string\n              property:\n                type: string\n              message:\n                type: string\n        code:\n          type: string\n        message:\n          type: string\n\n    error:\n      type: object\n      properties:\n        code:\n          type: string\n        message:\n          type: string\n      required:\n        - code\n        - message\n\n  parameters:\n    project:\n      name: project\n      in: path\n      description: Project identifier. The unique slug for the Project being addressed.\n      schema:\n        type: string\n    concept:\n      name: concept\n      in: path\n      description: Concept identifier. The unique identifier of the Concept being addressed (not its IRI).\n      schema:\n        type: string\n    scheme:\n      name: scheme\n      in: path\n      description: Scheme identifier. The unique identifier of the ConceptScheme being addressed (not its IRI).\n      schema:\n        type: string\n",
			"canonicalURL": "/github.com/digirati-co-uk/taxonomy-manager@20258e45d0f70ec1f8680288770c7bcc2ed2fa4f/-/blob/docs/api/management.oas3.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/digirati-co-uk/taxonomy-manager/blob/20258e45d0f70ec1f8680288770c7bcc2ed2fa4f/docs/api/management.oas3.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: parameters: \"concept\": path parameters must be required"
}