{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/fantasy1114/euphorus_back"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "docs/swagger.yaml",
			"byteSize": 21152,
			"content": "openapi: 3.0.3\ninfo:\n  version: 1.0.0\n  title: World Happiness Rankings\n  description: \u003e-\n    This API has been created to support the assessment in QUT's CAB230 Web\n    Computing unit. It exposes a small number of REST endpoints which implement\n    CRUD operations on a database containing publicly available data from the\n    World Happiness Report (\u003ca\n    href=\"https://en.wikipedia.org/wiki/World_Happiness_Report\"\n    target=\"_blank\"\u003ehttps://en.wikipedia.org/wiki/World_Happiness_Report\u003c/a\u003e) -\n    an annual survey that ranks the overall happiness of a country according to\n    the views of its citizens on a range of happiness measures. This API\n    provides access to the survey data for the years 2015 to 2020 (inclusive).\n    The API endpoints and their usage are described in detail below.\ncomponents:\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      description: Enter JWT Bearer token **_only_**\n      name: Authorization\n      in: header\n  schemas:\n    InvalidProfileBodyFormat:\n      type: object\n      properties:\n        error:\n          type: boolean\n          example: \"true\"\n        message:\n          type: string\n          example: \u003e-\n            Request body incomplete: firstName, lastName, dob and address are\n            required.\n    InvalidFirstNameLastNameAddressFormat:\n      type: object\n      properties:\n        error:\n          type: boolean\n          example: \"true\"\n        message:\n          type: string\n          example: \u003e-\n            Request body invalid, firstName, lastName and address must be\n            strings only.\n    InvalidProfileDateFormat:\n      type: object\n      properties:\n        error:\n          type: boolean\n          example: \"true\"\n        message:\n          type: string\n          example: \"Invalid input: dob must be a real date in format YYYY-MM-DD.\"\n    InvalidProfileDate:\n      type: object\n      properties:\n        error:\n          type: boolean\n          example: \"true\"\n        message:\n          type: string\n          example: \"Invalid input: dob must be a date in the past.\"\n    InvalidCountryFormat:\n      type: object\n      properties:\n        error:\n          type: boolean\n          example: \"true\"\n        message:\n          type: string\n          example: \u003e-\n            Invalid country format. Country query parameter cannot contain\n            numbers.\n    InvalidYearFormat:\n      type: object\n      properties:\n        error:\n          type: boolean\n          example: \"true\"\n        message:\n          type: string\n          example: Invalid year format. Format must be yyyy.\n    InvalidParametersRankings:\n      type: object\n      properties:\n        error:\n          type: boolean\n          example: \"true\"\n        message:\n          type: string\n          example: Invalid query parameters. Only year and country are permitted.\n    InvalidParametersFactors:\n      type: object\n      properties:\n        error:\n          type: boolean\n          example: \"true\"\n        message:\n          type: string\n          example: Invalid query parameters. Only limit and country are permitted.\n    InvalidLimitFormat:\n      type: object\n      properties:\n        error:\n          type: boolean\n          example: \"true\"\n        message:\n          type: string\n          example: Invalid limit query. Limit must be a positive number.\n    MissingAuthHeader:\n      type: object\n      properties:\n        error:\n          type: boolean\n          example: \"true\"\n        message:\n          type: string\n          example: Authorization header ('Bearer token') not found\n    TokenExpired:\n      type: object\n      properties:\n        error:\n          type: boolean\n          example: \"true\"\n        message:\n          type: string\n          example: JWT token has expired\n    InvalidJWT:\n      type: object\n      properties:\n        error:\n          type: boolean\n          example: \"true\"\n        message:\n          type: string\n          example: Invalid JWT token\n    MalformedAuthHeader:\n      type: object\n      properties:\n        error:\n          type: boolean\n          example: \"true\"\n        message:\n          type: string\n          example: Authorization header is malformed\n    PublicProfile:\n      type: object\n      properties:\n        email:\n          type: string\n          example: mike@gmail.com\n        firstName:\n          type: string\n          example: Michael\n        lastName:\n          type: string\n          example: Jordan\n    AuthenticatedProfile:\n      type: object\n      properties:\n        email:\n          type: string\n          example: mike@gmail.com\n        firstName:\n          type: string\n          example: Michael\n        lastName:\n          type: string\n          example: Jordan\n        dob:\n          type: string\n          example: \"1963-02-17\"\n          format: date\n          pattern: \"YYYY-MM-DD\"\n        address:\n          type: string\n          example: \"123 Fake Street, Springfield\"\nproduces:\n  - application/json\npaths:\n  /rankings:\n    get:\n      tags:\n        - Data\n      description: \u003e-\n        Returns a list of countries and their happiness rank for the years 2015\n        to 2020. The list is arranged by year, in descending order. The list can\n        optionally be filtered by year and/or country name using query\n        parameters.\n      parameters:\n        - name: year\n          in: query\n          description: Year of world happiness report\n          required: false\n          type: number\n        - name: country\n          in: query\n          description: Name of country\n          required: false\n          type: string\n      responses:\n        \"200\":\n          description: \u003e-\n            An array of objects containing happiness rank, country, score and\n            year properties. An example of one object in the array is shown\n            below.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    rank:\n                      type: number\n                      example: \"1\"\n                    country:\n                      type: string\n                      example: Finland\n                    score:\n                      type: number\n                      example: \"7.769\"\n                    year:\n                      type: number\n                      example: \"2019\"\n        \"400\":\n          description: \u003e-\n            Invalid country or year query parameters. Click on 'Schema' below to\n            see the possible error responses.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/InvalidCountryFormat\"\n                  - $ref: \"#/components/schemas/InvalidYearFormat\"\n                  - $ref: \"#/components/schemas/InvalidParametersRankings\"\n  /countries:\n    get:\n      tags:\n        - Data\n      description: \"Returns a list of all surveyed countries, ordered alphabetically.\"\n      responses:\n        \"200\":\n          description: \u003e-\n            An array of countries. An example of the first five elements in the\n            array is shown below.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n                example:\n                  - Afghanistan\n                  - Albania\n                  - Algeria\n                  - Angola\n                  - Argentina\n        \"400\":\n          description: Invalid query parameters.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: boolean\n                    example: \"true\"\n                  message:\n                    type: string\n                    example: \u003e-\n                      Invalid query parameters. Query parameters are not\n                      permitted.\n  \"/factors/{year}\":\n    get:\n      tags:\n        - Data\n      description: \u003e-\n        Returns a list of countries and their associated happiness factor scores\n        for the specified year. The path parameter (year) is required. The\n        number of returned results can be limited by the optional limit query\n        parameter. A result for a single country can be obtained via the\n        optional country query parameter. This route also requires the user to\n        be authenticated - a valid JWT token must be sent in the header of the\n        request. To test this route using Swagger, click the green 'Authorize'\n        button at the top of this page to enter your JWT token. A JWT token can\n        be obtained by logging in.\n      parameters:\n        - name: year\n          in: path\n          description: Year of world happiness report\n          required: true\n          schema:\n            type: number\n        - name: limit\n          in: query\n          description: The maximum number of results to return\n          schema:\n            type: number\n        - name: country\n          in: query\n          description: Name of country\n          schema:\n            type: string\n      security:\n        - bearerAuth: []\n      responses:\n        \"200\":\n          description: \u003e-\n            An array of objects containing happiness rank, country, score,\n            economy, family, health, freedom, generosity and trust properties.\n            An example of one object in the array is shown below.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    rank:\n                      type: number\n                      example: \"1\"\n                    country:\n                      type: string\n                      example: Finland\n                    score:\n                      type: string\n                      example: \"7.769\"\n                    economy:\n                      type: string\n                      example: \"1.340\"\n                    family:\n                      type: string\n                      example: \"1.587\"\n                    health:\n                      type: string\n                      example: \"1.340\"\n                    freedom:\n                      type: string\n                      example: \"0.596\"\n                    generosity:\n                      type: string\n                      example: \"0.153\"\n                    trust:\n                      type: string\n                      example: \"0.393\"\n        \"400\":\n          description: \u003e-\n            Invalid parameters. Click on 'Schema' below to see the possible\n            error responses.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/InvalidYearFormat\"\n                  - $ref: \"#/components/schemas/InvalidParametersFactors\"\n                  - $ref: \"#/components/schemas/InvalidLimitFormat\"\n                  - $ref: \"#/components/schemas/InvalidCountryFormat\"\n        \"401\":\n          description: \u003e-\n            Unauthorized. Click on 'Schema' below to see the possible error\n            responses.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/MissingAuthHeader\"\n                  - $ref: \"#/components/schemas/TokenExpired\"\n                  - $ref: \"#/components/schemas/InvalidJWT\"\n                  - $ref: \"#/components/schemas/MalformedAuthHeader\"\n  /user/register:\n    post:\n      tags:\n        - Authentication\n      description: \u003e-\n        Creates a new user account. A request body containing the user to be\n        registered must be sent.\n      requestBody:\n        description: \u003e-\n          An object containing the email and password of the user to be\n          registered.\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                email:\n                  type: string\n                  example: mike@gmail.com\n                password:\n                  type: string\n                  example: password\n      responses:\n        \"201\":\n          description: User successfully created\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    example: User created\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: boolean\n                    example: \"true\"\n                  message:\n                    type: string\n                    example: \u003e-\n                      Request body incomplete, both email and password are\n                      required\n        \"409\":\n          description: User already exists\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: boolean\n                    example: \"true\"\n                  message:\n                    type: string\n                    example: User already exists\n  /user/login:\n    post:\n      description: \u003e-\n        Log in to an existing user account. A request body containing the user\n        credentials must be sent.\n      tags:\n        - Authentication\n      requestBody:\n        description: The credentials of the user to log in.\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                email:\n                  type: string\n                  example: mike@gmail.com\n                password:\n                  type: string\n                  example: password\n      responses:\n        \"200\":\n          description: Log in successful\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  token:\n                    type: string\n                    example: ajsonwebtoken\n                  token_type:\n                    type: string\n                    example: Bearer\n                  expires_in:\n                    type: number\n                    example: 86400\n        \"400\":\n          description: Invalid log in request\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: boolean\n                    example: \"true\"\n                  message:\n                    type: string\n                    example: \u003e-\n                      Request body incomplete, both email and password are\n                      required\n        \"401\":\n          description: Log in failed\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: boolean\n                    example: \"true\"\n                  message:\n                    type: string\n                    example: Incorrect email or password\n  /user/{email}/profile:\n    get:\n      description: \u003e-\n        Returns an object containing a user's profile information. The path parameter (email) is required and must be an email that has been registered. This route returns additional information if the user is authenticated. To be authenticated, a valid JWT token must be sent in the header of the request. To test this using Swagger, click the green 'Authorize' button at the top of this page to enter your JWT token. A JWT token can be obtained by logging in.\n      tags:\n        - Profile\n      parameters:\n        - name: email\n          in: path\n          description: Email address of a registered user\n          required: true\n          type: string\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: An object containing email, firstName, lastName, address (authenticated only) and dob (authenticated only) properties. An example object for an authenticated request is shown below. If no profile information has been entered for the user via the profile PUT request route, all returned values except email are expected to be null. Click on 'Schema' below to see a response example for an unauthenticated request.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/AuthenticatedProfile\"\n                  - $ref: \"#/components/schemas/PublicProfile\"\n        \"401\":\n          description: Unauthorized. Click on 'Schema' below to see the possible error responses.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/TokenExpired\"\n                  - $ref: \"#/components/schemas/InvalidJWT\"\n                  - $ref: \"#/components/schemas/MalformedAuthHeader\"\n        \"404\":\n          description: User not found\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: boolean\n                    example: \"true\"\n                  message:\n                    type: string\n                    example: \u003e-\n                      User not found\n    put:\n      description: \u003e-\n        Updates a user's profile information. The path parameter (email) is required and must be an email that has been registered. A request body containing the user's profile information must be sent. This route returns an object containing the user's updated profile information. This route also requires the user to be authenticated - a valid JWT token must be sent in the header of the request. To test this route using Swagger, click the green 'Authorize' button at the top of this page to enter your JWT token. A JWT token can be obtained by logging in.\n      tags:\n        - Profile\n      parameters:\n        - name: email\n          in: path\n          description: Email address of a registered user\n          required: true\n          type: string\n          schema:\n            type: string\n      requestBody:\n        description: An object containing the user's firstName, lastName, dob and address. firstName, lastName and address must be strings. dob must be a validate date string in the past matching the format YYYY-MM-DD. All key/value pairs are required.\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                firstName:\n                  type: string\n                  example: Michael\n                lastName:\n                  type: string\n                  example: Jordan\n                dob:\n                  type: string\n                  example: 1963-02-17\n                address:\n                  type: string\n                  example: 123 Fake Street, Springfield\n\n      responses:\n        \"200\":\n          description: An object containing the user's updated profile information. The object should contain email, firstName, lastName, dob and address properties. An example object is shown below.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/AuthenticatedProfile\"\n        \"400\":\n          description: Bad request. Click on 'Schema' below to see the possible error responses.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/InvalidProfileBodyFormat\"\n                  - $ref: \"#/components/schemas/InvalidFirstNameLastNameAddressFormat\"\n                  - $ref: \"#/components/schemas/InvalidProfileDateFormat\"\n                  - $ref: \"#/components/schemas/InvalidProfileDate\"\n        \"401\":\n          description: Unauthorized. Click on 'Schema' below to see the possible error responses.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/MissingAuthHeader\"\n                  - $ref: \"#/components/schemas/TokenExpired\"\n                  - $ref: \"#/components/schemas/InvalidJWT\"\n                  - $ref: \"#/components/schemas/MalformedAuthHeader\"\n        \"403\":\n          description: Forbidden. Email address associated with JWT token is not the same as email provided in path parameter.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: boolean\n                    example: true\n                  message:\n                    type: string\n                    example: \"Forbidden\"\n",
			"canonicalURL": "/github.com/fantasy1114/euphorus_back@a24cd90e9525b8909b42171e530a139d012e2ff8/-/blob/docs/swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/fantasy1114/euphorus_back/blob/a24cd90e9525b8909b42171e530a139d012e2ff8/docs/swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/rankings\": get: parameters: parse parameter \"year\": at docs/swagger.yaml:193:11: parameter MUST contain either a schema property, or a content property"
}