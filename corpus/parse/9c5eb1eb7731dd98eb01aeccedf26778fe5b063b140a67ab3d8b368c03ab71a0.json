{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/PaloAltoNetworks/gaia"
		},
		"file": {
			"name": "service.json",
			"size": 0,
			"path": "openapi3_autogen/service.json",
			"byteSize": 19347,
			"content": "{\n  \"openapi\": \"3.0.3\",\n  \"components\": {\n    \"schemas\": {\n      \"service\": {\n        \"description\": \"Defines a generic service object at layer 4 or layer 7 that encapsulates the\\ndescription of a microservice. A service exposes APIs and can be implemented\\nthrough third-party entities (such as a cloud provider) or through processing\\nunits.\",\n        \"properties\": {\n          \"ID\": {\n            \"description\": \"Identifier of the object.\",\n            \"readOnly\": true,\n            \"type\": \"string\"\n          },\n          \"IPs\": {\n            \"description\": \"The list of IP addresses where the service can be accessed. This is an optional\\nattribute and is only required if no host names are provided. The system will\\nautomatically resolve IP addresses from host names otherwise.\",\n            \"items\": {\n              \"type\": \"string\"\n            },\n            \"type\": \"array\"\n          },\n          \"JWTSigningCertificate\": {\n            \"description\": \"PEM-encoded certificate that will be used to validate the user's JSON web token\\n(JWT)\\nin HTTP requests. This is an optional field, needed only if the\\n`authorizationType`\\nis set to `JWT`.\",\n            \"type\": \"string\"\n          },\n          \"MTLSCertificateAuthority\": {\n            \"description\": \"PEM-encoded certificate authority to use to verify client certificates. This\\nonly applies if `authorizationType` is set to `MTLS`. If it is not set,\\nMicrosegmentation Console's public signing certificate authority will be used.\",\n            \"type\": \"string\"\n          },\n          \"OIDCCallbackURL\": {\n            \"description\": \"This is an advanced setting. Optional OIDC callback URL. If you don't set it,\\nthe enforcer will autodiscover it. It will be\\n`https://\\u003chosts[0]|IPs[0]\\u003e/aporeto/oidc/callback`.\",\n            \"type\": \"string\"\n          },\n          \"OIDCClientID\": {\n            \"description\": \"OIDC Client ID. Only has effect if the `authorizationType` is set to `OIDC`.\",\n            \"type\": \"string\"\n          },\n          \"OIDCClientSecret\": {\n            \"description\": \"OIDC Client Secret. Only has effect if the `authorizationType` is set to `OIDC`.\",\n            \"type\": \"string\"\n          },\n          \"OIDCProviderURL\": {\n            \"description\": \"OIDC discovery endpoint. Only has effect if the `authorizationType`\\nis set to `OIDC`.\",\n            \"example\": \"https://accounts.google.com\",\n            \"type\": \"string\"\n          },\n          \"OIDCScopes\": {\n            \"description\": \"Configures the scopes you want to request from the OIDC provider. Only has\\neffect\\nif `authorizationType` is set to `OIDC`.\",\n            \"example\": [\n              \"email\",\n              \"profile\"\n            ],\n            \"items\": {\n              \"type\": \"string\"\n            },\n            \"type\": \"array\"\n          },\n          \"TLSCertificate\": {\n            \"description\": \"PEM-encoded certificate to expose to the clients for TLS. Only has effect and\\nrequired if `TLSType` is set to `External`.\",\n            \"type\": \"string\"\n          },\n          \"TLSCertificateKey\": {\n            \"description\": \"PEM-encoded certificate key associated with `TLSCertificate`. Only has effect\\nand required if `TLSType` is set to `External`.\",\n            \"type\": \"string\"\n          },\n          \"TLSType\": {\n            \"default\": \"Aporeto\",\n            \"description\": \"Set how to provide a server certificate to the service.\\n\\n- `Aporeto`: Generate a certificate signed by the Microsegmentation\\nConsole public CA.\\n- `LetsEncrypt`: Issue a certificate from Let's Encrypt.\\n- `External`: Let you define your own certificate and key to use.\\n- `None`: TLS is disabled (not recommended).\",\n            \"enum\": [\n              \"Aporeto\",\n              \"LetsEncrypt\",\n              \"External\",\n              \"None\"\n            ]\n          },\n          \"annotations\": {\n            \"additionalProperties\": {\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"type\": \"array\"\n            },\n            \"description\": \"Stores additional information about an entity.\",\n            \"type\": \"object\"\n          },\n          \"associatedTags\": {\n            \"description\": \"List of tags attached to an entity.\",\n            \"items\": {\n              \"type\": \"string\"\n            },\n            \"type\": \"array\"\n          },\n          \"authorizationType\": {\n            \"default\": \"None\",\n            \"description\": \"Defines the user authorization type that should be used.\\n\\n- `None` (default): No authorization.\\n- `JWT`:  Configures a simple JWT verification from the HTTP `Authorization`\\nheader.\\n- `OIDC`: Configures OIDC authorization. You must then set\\n`OIDCClientID`,`OIDCClientSecret`, `OIDCProviderURL`.\\n- `MTLS`: Configures client certificate authorization. Then you can optionally\\nuse `MTLSCertificateAuthority`, otherwise Microsegmentation Console's public\\nsigning certificate will be used.\",\n            \"enum\": [\n              \"None\",\n              \"JWT\",\n              \"OIDC\",\n              \"MTLS\"\n            ]\n          },\n          \"claimsToHTTPHeaderMappings\": {\n            \"description\": \"Defines a list of mappings between claims and HTTP headers. When these mappings\\nare defined, the enforcer will copy the values of the claims to the\\ncorresponding HTTP headers.\",\n            \"items\": {\n              \"$ref\": \"./claimmapping#/components/schemas/claimmapping\"\n            },\n            \"type\": \"array\"\n          },\n          \"createTime\": {\n            \"description\": \"Creation date of the object.\",\n            \"format\": \"date-time\",\n            \"readOnly\": true,\n            \"type\": \"string\"\n          },\n          \"description\": {\n            \"description\": \"Description of the object.\",\n            \"type\": \"string\"\n          },\n          \"disabled\": {\n            \"description\": \"Defines if the property is disabled.\",\n            \"type\": \"boolean\"\n          },\n          \"endpoints\": {\n            \"description\": \"Resolves the API endpoints that the service is exposing. Only valid during\\npolicy rendering.\",\n            \"items\": {\n              \"$ref\": \"./endpoint#/components/schemas/endpoint\"\n            },\n            \"readOnly\": true,\n            \"type\": \"array\"\n          },\n          \"exposedAPIs\": {\n            \"description\": \"Contains a tag expression that will determine which APIs a service is exposing.\\nThe APIs can be defined as the `RESTAPISpec` or similar specifications for other\\nlayer 7 protocols.\",\n            \"example\": [\n              [\n                \"package=p1\"\n              ]\n            ],\n            \"items\": {\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"type\": \"array\"\n            },\n            \"type\": \"array\"\n          },\n          \"exposedPort\": {\n            \"description\": \"The port that the service can be accessed on. Note that this is different from\\nthe `port` attribute that describes the port that the service is actually\\nlistening on. For example if a load balancer is used, the `exposedPort` is\\nthe port that the load balancer is listening for the service, whereas the\\nport that the implementation is listening on can be different.\",\n            \"example\": 443,\n            \"type\": \"integer\"\n          },\n          \"exposedServiceIsTLS\": {\n            \"default\": false,\n            \"description\": \"Indicates that the exposed service is TLS. This means that the enforcer has to\\ninitiate a TLS session in order to forward traffic to the service.\",\n            \"type\": \"boolean\"\n          },\n          \"external\": {\n            \"default\": false,\n            \"description\": \"Indicates if this is an external service.\",\n            \"type\": \"boolean\"\n          },\n          \"hosts\": {\n            \"description\": \"The host names that the service can be accessed on.\",\n            \"items\": {\n              \"type\": \"string\"\n            },\n            \"type\": \"array\"\n          },\n          \"metadata\": {\n            \"description\": \"Contains tags that can only be set during creation, must all start\\nwith the '@' prefix, and should only be used by external systems.\",\n            \"items\": {\n              \"type\": \"string\"\n            },\n            \"type\": \"array\"\n          },\n          \"name\": {\n            \"description\": \"Name of the entity.\",\n            \"example\": \"the name\",\n            \"type\": \"string\"\n          },\n          \"namespace\": {\n            \"description\": \"Namespace tag attached to an entity.\",\n            \"readOnly\": true,\n            \"type\": \"string\"\n          },\n          \"normalizedTags\": {\n            \"description\": \"Contains the list of normalized tags of the entities.\",\n            \"items\": {\n              \"type\": \"string\"\n            },\n            \"readOnly\": true,\n            \"type\": \"array\"\n          },\n          \"port\": {\n            \"description\": \"The port that the implementation of the service is listening to. It can be\\ndifferent than `exposedPort`. This is needed for port mapping use cases\\nwhere there are private and public ports.\",\n            \"example\": 443,\n            \"type\": \"integer\"\n          },\n          \"propagate\": {\n            \"description\": \"Propagates the policy to all of its children.\",\n            \"type\": \"boolean\"\n          },\n          \"protected\": {\n            \"description\": \"Defines if the object is protected.\",\n            \"type\": \"boolean\"\n          },\n          \"proxyProtocolEnabled\": {\n            \"description\": \"Enable trust in proxy protocols header.\",\n            \"type\": \"boolean\"\n          },\n          \"proxyProtocolSubnets\": {\n            \"description\": \"Only allow proxy protocols from the given subnets .\",\n            \"items\": {\n              \"type\": \"string\"\n            },\n            \"type\": \"array\"\n          },\n          \"publicApplicationPort\": {\n            \"description\": \"A new virtual port that the service can be accessed on using HTTPS. Since the\\nenforcer transparently inserts TLS in the application path, you might want\\nto declare a new port where the enforcer listens for TLS. However, the\\napplication does not need to be modified and the enforcer will map the\\ntraffic to the correct application port. This is useful when\\nan application is being accessed from a public network.\",\n            \"example\": 443,\n            \"type\": \"integer\"\n          },\n          \"redirectURLOnAuthorizationFailure\": {\n            \"description\": \"If this is set, the user will be redirected to that URL in case of any\\nauthorization failure, allowing you to provide a nice message to the user.\\nThe query parameter `?failure_message=\\u003cmessage\\u003e` will be added to that\\nURL explaining the possible reason for the failure.\",\n            \"type\": \"string\"\n          },\n          \"selectors\": {\n            \"description\": \"A tag or tag expression that identifies the processing unit that implements this\\nparticular service.\",\n            \"example\": [\n              [\n                \"$identity=processingunit\"\n              ]\n            ],\n            \"items\": {\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"type\": \"array\"\n            },\n            \"type\": \"array\"\n          },\n          \"trustedCertificateAuthorities\": {\n            \"description\": \"PEM-encoded certificate authorities to trust when additional hops are needed. It\\nmust be set if the service must reach a service marked as `external` or must go\\nthrough an additional TLS termination point like a layer 7 load balancer.\",\n            \"type\": \"string\"\n          },\n          \"type\": {\n            \"default\": \"HTTP\",\n            \"description\": \"Type of service.\",\n            \"enum\": [\n              \"HTTP\",\n              \"TCP\",\n              \"KubernetesSecrets\",\n              \"VaultSecrets\"\n            ]\n          },\n          \"updateTime\": {\n            \"description\": \"Last update date of the object.\",\n            \"format\": \"date-time\",\n            \"readOnly\": true,\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"exposedPort\",\n          \"name\"\n        ],\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"info\": {\n    \"contact\": {\n      \"email\": \"dev@aporeto.com\",\n      \"name\": \"Aporeto Inc.\",\n      \"url\": \"go.aporeto.io/api\"\n    },\n    \"license\": {\n      \"name\": \"TODO\"\n    },\n    \"termsOfService\": \"https://localhost/TODO\",\n    \"title\": \"service\",\n    \"version\": \"1.0\"\n  },\n  \"paths\": {\n    \"/services\": {\n      \"get\": {\n        \"description\": \"Retrieves the list of services.\",\n        \"operationId\": \"get-all-services\",\n        \"parameters\": [\n          {\n            \"description\": \"Also retrieve the objects that have been archived.\",\n            \"in\": \"query\",\n            \"name\": \"archived\",\n            \"schema\": {\n              \"type\": \"boolean\"\n            }\n          },\n          {\n            \"description\": \"Also retrieve the objects that propagate down.\",\n            \"in\": \"query\",\n            \"name\": \"propagated\",\n            \"schema\": {\n              \"type\": \"boolean\"\n            }\n          },\n          {\n            \"description\": \"Filtering query. Consequent `q` parameters will form an or.\",\n            \"example\": \"associatedTags contains ['$name=hello'] or type == 'Docker'\",\n            \"in\": \"query\",\n            \"name\": \"q\",\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/service\"\n                  },\n                  \"type\": \"array\"\n                }\n              }\n            },\n            \"description\": \"n/a\"\n          }\n        },\n        \"tags\": [\n          \"policy/services\",\n          \"squall\"\n        ]\n      },\n      \"post\": {\n        \"description\": \"Creates a new service.\",\n        \"operationId\": \"create-a-new-service\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/service\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/service\"\n                }\n              }\n            },\n            \"description\": \"n/a\"\n          }\n        },\n        \"tags\": [\n          \"policy/services\",\n          \"squall\"\n        ]\n      }\n    },\n    \"/services/{id}\": {\n      \"delete\": {\n        \"description\": \"Deletes the service with the given ID.\",\n        \"operationId\": \"delete-service-by-ID\",\n        \"parameters\": [\n          {\n            \"description\": \"Filtering query. Consequent `q` parameters will form an or.\",\n            \"example\": \"associatedTags contains ['$name=hello'] or type == 'Docker'\",\n            \"in\": \"query\",\n            \"name\": \"q\",\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/service\"\n                }\n              }\n            },\n            \"description\": \"n/a\"\n          }\n        },\n        \"tags\": [\n          \"policy/services\",\n          \"squall\"\n        ]\n      },\n      \"get\": {\n        \"description\": \"Retrieves the service with the given ID.\",\n        \"operationId\": \"get-service-by-ID\",\n        \"parameters\": [\n          {\n            \"description\": \"Also retrieve the objects that have been archived.\",\n            \"in\": \"query\",\n            \"name\": \"archived\",\n            \"schema\": {\n              \"type\": \"boolean\"\n            }\n          },\n          {\n            \"description\": \"Also retrieve the objects that propagate down.\",\n            \"in\": \"query\",\n            \"name\": \"propagated\",\n            \"schema\": {\n              \"type\": \"boolean\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/service\"\n                }\n              }\n            },\n            \"description\": \"n/a\"\n          }\n        },\n        \"tags\": [\n          \"policy/services\",\n          \"squall\"\n        ]\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        }\n      ],\n      \"put\": {\n        \"description\": \"Updates the service with the given ID.\",\n        \"operationId\": \"update-service-by-ID\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/service\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/service\"\n                }\n              }\n            },\n            \"description\": \"n/a\"\n          }\n        },\n        \"tags\": [\n          \"policy/services\",\n          \"squall\"\n        ]\n      }\n    },\n    \"/services/{id}/httpresourcespecs\": {\n      \"get\": {\n        \"description\": \"Retrieves the HTTP Resource exposed by this service.\",\n        \"operationId\": \"get-all-httpresourcespecs-for-a-given-service\",\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"items\": {\n                    \"$ref\": \"./httpresourcespec#/components/schemas/httpresourcespec\"\n                  },\n                  \"type\": \"array\"\n                }\n              }\n            },\n            \"description\": \"n/a\"\n          }\n        },\n        \"tags\": [\n          \"policy/services\",\n          \"squall\"\n        ]\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        }\n      ]\n    },\n    \"/services/{id}/processingunits\": {\n      \"get\": {\n        \"description\": \"Retrieves the processing units that implement this service.\",\n        \"operationId\": \"get-all-processingunits-for-a-given-service\",\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"items\": {\n                    \"$ref\": \"./processingunit#/components/schemas/processingunit\"\n                  },\n                  \"type\": \"array\"\n                }\n              }\n            },\n            \"description\": \"n/a\"\n          }\n        },\n        \"tags\": [\n          \"core/processingunit\",\n          \"squall\"\n        ]\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        }\n      ]\n    }\n  },\n  \"tags\": [\n    {\n      \"description\": \"This tag is for group 'policy/services'\",\n      \"name\": \"policy/services\"\n    },\n    {\n      \"description\": \"This tag is for package 'squall'\",\n      \"name\": \"squall\"\n    }\n  ]\n}\n"
		}
	},
	"Error": "parse: parse spec: paths: /services: get: operation \"get-all-services\": responses: 200: content: \"application/json\": schema: parse schema: item: parse schema: resolve \"#/components/schemas/service\": parse schema: property \"claimsToHTTPHeaderMappings\": parse schema: item: parse schema: resolve \"./claimmapping#/components/schemas/claimmapping\": find schema: external base \"./claimmapping\" is not supported"
}