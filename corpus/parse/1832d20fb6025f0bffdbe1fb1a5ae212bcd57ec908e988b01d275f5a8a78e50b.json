{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ga4gh-beacon/beacon-v2"
		},
		"file": {
			"name": "endpoints.yaml",
			"size": 0,
			"path": "framework/src/endpoints.yaml",
			"byteSize": 4640,
			"content": "openapi: 3.0.2\nservers: []\ninfo:\n  version: 2.0.0\n  title: GA4GH Beacon API Specification\n  description: A Beacon is a web service for genetic data sharing that can be queried\n    for  information about variants, individuals, biosamples, and other entities.\n  contact:\n    email: beacon@ga4gh.org\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\npaths:\n  /:\n    parameters:\n      - $ref: '#/components/parameters/requestedSchema'\n    get:\n      description: Get information about the beacon\n      operationId: getBeaconRoot\n      tags:\n        - Informational endpoints\n      responses:\n        '200':\n          $ref: '#/components/responses/infoOKResponse'\n        default:\n          description: An unsuccessful operation.\n          $ref: ./responses/beaconErrorResponse.json\n  /info:\n    parameters:\n      - $ref: '#/components/parameters/requestedSchema'\n    get:\n      description: Get information about the beacon\n      operationId: getBeaconInfoRoot\n      tags:\n        - Informational endpoints\n      responses:\n        '200':\n          $ref: '#/components/responses/infoOKResponse'\n        default:\n          description: An unsuccessful operation.\n          $ref: ./responses/beaconErrorResponse.json\n  /service-info:\n    get:\n      description: Get information about the beacon using GA4GH ServiceInfo format\n      operationId: getBeaconServiceInfo\n      tags:\n        - Informational endpoints\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: ./responses/ga4gh-service-info-1-0-0-schema.json\n  /configuration:\n    get:\n      description: TBD\n      operationId: getBeaconConfiguration\n      tags:\n        - Configuration\n      responses:\n        '200':\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                description: Response of a request for information about a Beacon\n                $ref: ./responses/beaconConfigurationResponse.json\n        default:\n          description: An unsuccessful operation.\n          $ref: ./responses/beaconErrorResponse.json\n  /map:\n    get:\n      description: TBD\n      operationId: getBeaconMap\n      tags:\n        - Configuration\n      parameters: []\n      responses:\n        '200':\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                description: Response of a request for information about a Beacon\n                $ref: ./responses/beaconMapResponse.json\n        default:\n          description: An unsuccessful operation.\n          $ref: ./responses/beaconErrorResponse.json\n  /entry_types:\n    get:\n      description: TBD\n      operationId: getEntryTypes\n      tags:\n        - Configuration\n      parameters: []\n      responses:\n        '200':\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                description: Response of a request for information about a Beacon\n                $ref: ./responses/beaconEntryTypesResponse.json\n        default:\n          description: An unsuccessful operation.\n          $ref: ./responses/beaconErrorResponse.json\n  /filtering_terms:\n    parameters:\n      - $ref: '#/components/parameters/skip'\n      - $ref: '#/components/parameters/limit'\n    get:\n      description: Get the list of filtering terms handled by this beacon\n      operationId: getFilteringTerms\n      tags:\n        - Informational endpoints\n      responses:\n        '200':\n          $ref: ./responses/beaconFilteringTermsResponse.json\n        default:\n          description: An unsuccessful operation.\n          $ref: ./responses/beaconErrorResponse.json\ncomponents:\n  responses:\n    infoOKResponse:\n      description: Successful operation.\n      content:\n        application/json:\n          schema:\n            description: Response of a request for information about a Beacon.\n            $ref: ./responses/beaconInfoResponse.json\n  parameters:\n    requestedSchema:\n      name: requestedSchema\n      description: Schema to be used to format the `result` field in the resposne.\n        The response will use Beacon format.\n      in: query\n      required: false\n      schema:\n        type: string\n      example: ga4gh-service-info-v1.0\n    skip:\n      name: skip\n      in: query\n      schema:\n        $ref: ./common/beaconCommonComponents.json#/definitions/Skip\n    limit:\n      name: limit\n      in: query\n      schema:\n        $ref: ./common/beaconCommonComponents.json#/definitions/Limit\n",
			"canonicalURL": "/github.com/ga4gh-beacon/beacon-v2@2c1c56feae84de30bb83ab5737c961a95cd8996b/-/blob/framework/src/endpoints.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ga4gh-beacon/beacon-v2/blob/2c1c56feae84de30bb83ab5737c961a95cd8996b/framework/src/endpoints.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: responses: \"infoOKResponse\": content: application/json: schema: parse schema: at 1:590: external \"./responses/beaconInfoResponse.json\": get: file: local file reference is not allowed"
}