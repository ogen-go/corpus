{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/giulianoc/CatraMMS"
		},
		"file": {
			"name": "swagger-mms-api-unresolved.yaml",
			"size": 0,
			"path": "docs/swagger-mms-api-unresolved.yaml",
			"byteSize": 40630,
			"content": "openapi: 3.0.0\nservers:\n  - description: Media Management System Base URL\n    url: https://mms-api.cloud-mms.com/catramms/v1\ninfo:\n  description: Media Management System API\n  version: v1\n  title: Media Management Service API\n  contact:\n    email: mms-technical-support@cloud-mms.com\n  license:\n    name: Apache 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\ntags:\n  - name: admins\n    description: Secured Admin-only calls\n  - name: developers\n    description: Operations available to regular developers\nsecurity: \n  - BasicAuth: []\npaths:\n  /status:\n    get:\n      security: []\n      tags:\n        - developers\n      summary: status of the API service\n      operationId: statusAPI\n      description: Provide the status of the MMS API service\n      responses:\n        '200':\n          description: API service is up and running\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - status\n                properties:\n                  status:\n                    type: string\n        '500':\n          description: API service is NOT up and running\n  /support:\n    post:\n      tags:\n        - developers\n      summary: ask for MMS support\n      operationId: mmsSupport\n      description: in case of any issue/question about MMS, this API allows you to ask support to the MMS team\n      responses:\n        '201':\n          description: support was submitted\n        '400':\n          description: 'Json field is not present or it is null'\n        '500':\n          description: 'internal server error'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Support'\n        description: 'Support request details:'\n  /login:\n    post:\n      security: []\n      tags:\n        - developers\n      summary: login into the MMS platform\n      operationId: login\n      description: This API allows the user to login into the MMS platform.\n        As input user and password as input, the output will be the api-key\n        associated to the user default workspace\n        with all the rights the user has on the specified workspace\n      responses:\n        '200':\n          description: login done successful\n          content:\n            application/json:\n              schema:\n                type: object\n                items:\n                  $ref: '#/components/schemas/UserAndWorkspace'\n        '400':\n          description: 'Json field is not present or it is null'\n        '500':\n          description: 'internal server error'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - EMail\n                - Password\n              properties:\n                EMail:\n                  type: string\n                  example: anthony@companyName.com\n                Password:\n                  type: string\n                  example: k9wo39lksh\n                RemoteClientIPAddress:\n                  type: string\n                  description: in case this field is present, MMS register the client IP |\n                    used by the user\n                  example: 111.222.333.444\n        description: 'User details'\n  /user:\n    post:\n      security: []\n      tags:\n        - developers\n      summary: register a new User into the MMS platform\n      operationId: registerUser\n      description: This API registers a new user into the MMS platform\n        and creates his default workspace.\n      responses:\n        '201':\n          description: user registered and workspace created successful\n          content:\n            application/json:\n              schema:\n                type: object\n                items:\n                  type: object\n                  required:\n                    - userKey\n                    - workspaceKey\n                  properties:\n                    userKey:\n                      type: integer\n                      format: int64\n                      example: 123\n                    workspaceKey:\n                      type: integer\n                      format: int64\n                      example: 824\n        '400':\n          description: 'Json field is not present or it is null'\n        '500':\n          description: 'internal server error'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserRegistration'\n        description: 'User for Registration details'\n    put:\n      tags:\n        - developers\n      summary: update of a User metadata\n      operationId: updateUser\n      description: This API updates the user metadata\n      responses:\n        '200':\n          description: user updated successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '400':\n          description: 'Json field is not present or it is null'\n        '500':\n          description: 'internal server error'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              items:\n                type: object\n                required:\n                  - Name\n                  - EMail\n                  - Country\n                properties:\n                  Name:\n                    type: string\n                    example: Anthony\n                  EMail:\n                    type: string\n                    example: anthony@companyName.com\n                  Country:\n                    type: string\n                    example: Italy\n        description: 'User fields to be updated'\n  /user/{userKey}/{confirmationeCode}:\n    get:\n      security: []\n      tags:\n        - developers\n      summary: confirm the registration of the user\n      operationId: confirmRegistration\n      description: confirm the registration of the user\n      parameters:\n        - in: path\n          name: userKey\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - in: path\n          name: confirmationeCode\n          required: true\n          schema:\n            type: string\n      responses:\n        '201':\n          description: it returns the api-key of the pair userKey-workspaceKey\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - status\n                  - apiKey\n                properties:\n                  status:\n                    type: string\n                  apiKey:\n                    type: string\n        '500':\n          description: internal server error\n  /workspace:\n    get:\n      tags:\n        - developers\n      summary: return all the workspaces of a user, the own workspace and the shared workspaces\n      operationId: workspaceList\n      description: return all the workspaces of a user, the own workspace and the shared workspaces\n      responses:\n        '200':\n          description: list of all the workspaces\n          content:\n            application/json:\n              schema:\n                type: object\n                items:\n                  type: object\n                  required:\n                    # - requestParameters\n                    - response\n                  properties:\n                    # requestParameters:\n                    response:\n                      type: object\n                      required:\n                        - numFound\n                        - workspaces\n                      properties:\n                        numFound:\n                          type: integer\n                          format: int32\n                        workspaces:\n                          type: array\n                          items:\n                            $ref: '#/components/schemas/Workspace'\n        '500':\n          description: 'internal server error'\n    post:\n      tags:\n        - developers\n      summary: create a new Workspace into the MMS platform\n      operationId: registerWorkspace\n      description: This API registers a new workspace into the MMS platform. It can be executed only by a user having the createRemoveWorkspace or admin priviledge.\n      responses:\n        '201':\n          description: workspace created successful\n          content:\n            application/json:\n              schema:\n                type: object\n                items:\n                  type: object\n                  required:\n                    - workspaceKey\n                  properties:\n                    workspaceKey:\n                      type: integer\n                      format: int64\n                      example: 824\n        '400':\n          description: 'Json field is not present or it is null'\n        '500':\n          description: 'internal server error'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              items:\n                type: object\n                required:\n                  - WorkspaceName\n                properties:\n                  WorkspaceName:\n                    type: string\n                    example: news video\n        description: 'Workspace details'\n    put:\n      tags:\n        - developers\n      summary: update of a Workspace metadata\n      operationId: updateWorkspace\n      description: This API updates the Workspace metadata. Only the owner of the workspace is able to do the update. Moreover, the isEnabled, maxEncodingPriority, encodingPeriod,\n        maxIngestionsNumber and maxStorageInMB fields can be updated only by admin\n      responses:\n        '200':\n          description: workspace updated successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Workspace'\n        '400':\n          description: 'Json field is not present or it is null'\n        '500':\n          description: 'internal server error'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              items:\n                type: object\n                required:\n                  - Enabled\n                  - Name\n                  - MaxEncodingPriority\n                  - EncodingPeriod\n                  - MaxIngestionsNumber\n                  - MaxStorageInMB\n                  - LanguageCode\n                  - CreateRemoveWorkspace\n                  - IngestWorkflow\n                  - CreateProfiles\n                  - DeliveryAuthorization\n                  - ShareWorkspace\n                  - EditMedia\n                  - EditConfiguration\n                  - KillEncoding\n                  - CancelIngestionJob\n                  - EditEncodersPool\n                  - ApplicationRecorder\n                properties:\n                  Enabled:\n                    type: boolean\n                    example: true\n                  Name:\n                    type: string\n                    example: News Video\n                  MaxEncodingPriority:\n                    type: string\n                    example: Low\n                  EncodingPeriod:\n                    type: string\n                    example: Daily\n                  MaxIngestionsNumber:\n                    type: integer\n                    format: int64\n                    example: 20000\n                  MaxStorageInMB:\n                    type: integer\n                    format: int64\n                    example: 500000\n                  LanguageCode:\n                    type: string\n                    example: it\n                  CreateRemoveWorkspace:\n                    type: boolean\n                    example: true\n                  IngestWorkflow:\n                    type: boolean\n                    example: true\n                  CreateProfiles:\n                    type: boolean\n                    example: true\n                  DeliveryAuthorization:\n                    type: boolean\n                    example: true\n                  ShareWorkspace:\n                    type: boolean\n                    example: true\n                  EditMedia:\n                    type: boolean\n                    example: true\n                  EditConfiguration:\n                    type: boolean\n                    example: true\n                  KillEncoding:\n                    type: boolean\n                    example: true\n                  CancelIngestionJob:\n                    type: boolean\n                    example: true\n                  EditEncodersPool:\n                    type: boolean\n                    example: true\n                  ApplicationRecorder:\n                    type: boolean\n                    example: true\n        description: 'Workspace fields to be updated'\n    delete:\n      tags:\n        - developers\n      summary: delete the Workspace identified by the apikey\n      operationId: deleteWorkspace\n      description: delete the Workspace identified by the apikey (http basic authentication password). If the owner does not have any other workspace, also the user is removed. It can be executed only by a user having the createRemoveWorkspace or admin priviledge.\n      responses:\n        '200':\n          description: workspace deleted successful\n        '500':\n          description: 'internal server error'\n  /workspace-encoder/{workspaceKey}/{encoderKey}:\n    post:\n      tags:\n        - developers\n      summary: associate the encoder to the workspace\n      operationId: workspaceEncoderAssociation\n      description: This API associates the encoder to a workspace\n      parameters:\n        - in: path\n          name: workspaceKey\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - in: path\n          name: encoderKey\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: association workspace-encoder created successful\n          content:\n            application/json:\n              schema:\n                type: object\n                items:\n                  type: object\n                  required:\n                    - workspaceKey\n                    - encoderKey\n                  properties:\n                    workspaceKey:\n                      type: integer\n                      format: int64\n                      example: 824\n                    encoderKey:\n                      type: integer\n                      format: int64\n                      example: 824\n        '500':\n          description: 'internal server error'\n    delete:\n      tags:\n        - developers\n      summary: delete the association workspace-encoder. Only admin has the rights to do it\n      operationId: deleteWorkspaceEncoder\n      description: delete the association workspace-encoder. Only admin has the rights to do it\n      parameters:\n        - in: path\n          name: workspaceKey\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - in: path\n          name: encoderKey\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: association workspace-encoder deleted successful\n          content:\n            application/json:\n              schema:\n                type: object\n                items:\n                  type: object\n                  required:\n                    - workspaceKey\n                    - encoderKey\n                  properties:\n                    workspaceKey:\n                      type: integer\n                      format: int64\n                      example: 824\n                    encoderKey:\n                      type: integer\n                      format: int64\n                      example: 824\n        '403':\n          description: 'APIKey does not have the admin permission'\n        '500':\n          description: 'internal server error'\n  /workspace/share:\n    put:\n      tags:\n        - developers\n      summary: share the workspace with a user already present or a new user\n      operationId: shareWorkspace\n      description: This API shares a workspace with a user already present or a new user.  It can be executed only by a user having the shareWorkspace or admin priviledge.\n      parameters:\n        - in: query\n          name: userAlreadyPresent\n          required: true\n          schema:\n            type: boolean\n        - in: query\n          name: createRemoveWorkspace\n          required: true\n          schema:\n            type: boolean\n        - in: query\n          name: ingestWorkflow\n          required: true\n          schema:\n            type: boolean\n        - in: query\n          name: createProfiles\n          required: true\n          schema:\n            type: boolean\n        - in: query\n          name: deliveryAuthorization\n          required: true\n          schema:\n            type: boolean\n        - in: query\n          name: shareWorkspace\n          required: true\n          schema:\n            type: boolean\n        - in: query\n          name: editMedia\n          required: true\n          schema:\n            type: boolean\n        - in: query\n          name: editConfiguration\n          required: true\n          schema:\n            type: boolean\n        - in: query\n          name: killEncoding\n          required: true\n          schema:\n            type: boolean\n        - in: query\n          name: cancelIngestionJob\n          required: true\n          schema:\n            type: boolean\n        - in: query\n          name: editEncodersPool\n          required: true\n          schema:\n            type: boolean\n        - in: query\n          name: applicationRecorder\n          required: true\n          schema:\n            type: boolean\n      responses:\n        '201':\n          description: workspace shared successful\n          content:\n            application/json:\n              schema:\n                type: object\n                items:\n                  type: object\n                  required:\n                    - userKey\n                  properties:\n                    userKey:\n                      type: integer\n                      format: int64\n        '400':\n          description: 'Json field is not present or it is null'\n        '500':\n          description: 'internal server error'\n      requestBody:\n        content:\n          application/json:\n            schema:\n                type: object\n                items:\n                  type: object\n                  required:\n                    - EMail\n                  properties:\n                    EMail:\n                      type: string\n                      example: anthony@companyName.com\n                    Password:\n                      type: string\n                      description: this field is 'required' in case userAlreadyPresent is false\n                      example: 19264hd93h\n                    Name:\n                      type: string\n                      description: this field is 'required' in case userAlreadyPresent is false\n                      example: Anthony\n                    Country:\n                      type: string\n                      description: this field is 'required' in case userAlreadyPresent is false\n                      example: Italy\n        description: 'Just the EMail if userAlreadyPresent is true, all the above fields if userAlreadyPresent is false'\n  /workspace/default/{workspaceKeyToBeSetAsDefault}:\n    put:\n      tags:\n        - developers\n      summary: set the workspace specified by the path parameter as default\n      operationId: workspaceDefault\n      description: This API set the workspace specified by the path parameter as default. This is the workspace used by the MMS platform once the user login into the system\n      parameters:\n        - in: path\n          name: workspaceKeyToBeSetAsDefault\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: default flag set successful\n        '500':\n          description: 'internal server error'\n  /workspace/usage:\n    get:\n      tags:\n        - developers\n      summary: return the storage used by the workspace\n      operationId: workspaceUsage\n      description: return the storage used by the workspace\n      responses:\n        '200':\n          description: storage usage calculated successful\n          content:\n            application/json:\n              schema:\n                type: object\n                items:\n                  type: object\n                  required:\n                    # - requestParameters\n                    - response\n                  properties:\n                    # requestParameters:\n                    response:\n                      type: integer\n                      format: int64\n        '500':\n          description: 'internal server error'\n  /encoder:\n    get:\n      tags:\n        - developers\n      summary: return all the encoders associated to the workspace (current api-key)\n      operationId: encoderList\n      description: return all the encoders associated to the workspace (current api-key). Only in case of admin, it is possible to ask for all the encoders available into the MMS platform or the encoder for a specific workspace (different from the one associated to the api-key)\n      parameters:\n        - in: query\n          name: start\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - in: query\n          name: rows\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - in: query\n          name: label\n          required: false\n          schema:\n            type: string\n        - in: query\n          name: serverName\n          required: false\n          schema:\n            type: string\n        - in: query\n          name: port\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - in: query\n          name: labelOrder\n          required: false\n          description: asc or desc\n          schema:\n            type: string\n        - in: query\n          name: allEncoders\n          required: false\n          description: only in case of user with admin priviledge\n          schema:\n            type: boolean\n        - in: query\n          name: workspaceKey\n          required: false\n          description: only in case of user with admin priviledge\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: list of the encoders\n          content:\n            application/json:\n              schema:\n                type: object\n                items:\n                  type: object\n                  required:\n                    # - requestParameters\n                    - response\n                  properties:\n                    # requestParameters:\n                    response:\n                      type: object\n                      required:\n                        - numFound\n                        - encoders\n                      properties:\n                        numFound:\n                          type: integer\n                          format: int32\n                        encoders:\n                          type: array\n                          items:\n                            $ref: '#/components/schemas/Encoder'\n        '500':\n          description: 'internal server error'\n    post:\n      tags:\n        - developers\n      summary: add a new encoder into the MMS platform\n      operationId: addEncoder\n      description: This API adds a new encoder into the MMS platform. It can be executed only by a user having the admin priviledge.\n      responses:\n        '201':\n          description: workspace created successful\n          content:\n            application/json:\n              schema:\n                type: object\n                items:\n                  $ref: '#/components/schemas/Encoder'\n        '400':\n          description: 'Json field is not present or it is null'\n        '500':\n          description: 'internal server error'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              items:\n                type: object\n                required:\n                  - EncoderKey\n                properties:\n                  EncoderKey:\n                    type: integer\n                    format: int64\n        description: 'Encoder details'\n  /encoder/{encoderKey}:\n    get:\n      tags:\n        - developers\n      summary: return the encoder details identified by the encoderKey parameter\n      operationId: encoderDetails\n      description: return the encoder details identified by the encoderKey parameter\n      parameters:\n        - in: path\n          name: encoderKey\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: encoder details\n          content:\n            application/json:\n              schema:\n                type: object\n                items:\n                  type: object\n                  required:\n                    # - requestParameters\n                    - response\n                  properties:\n                    # requestParameters:\n                    response:\n                      type: object\n                      required:\n                        - numFound\n                        - encoders\n                      properties:\n                        numFound:\n                          type: integer\n                          format: int32\n                        encoders:\n                          type: array\n                          items:\n                            $ref: '#/components/schemas/Encoder'\n        '500':\n          description: 'internal server error'\n    put:\n      tags:\n        - developers\n      summary: update of the Encoder metadata\n      operationId: updateEncoder\n      description: This API updates the Encoder metadata. It can be executed only by a user having the admin priviledge.\n      parameters:\n        - in: path\n          name: encoderKey\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: encoder updated successful\n          content:\n            application/json:\n              schema:\n                type: object\n                items:\n                  type: object\n                  required:\n                    - EncoderKey\n                  properties:\n                    EncoderKey:\n                      type: integer\n                      format: int64\n        '400':\n          description: 'Json field is not present or it is null'\n        '500':\n          description: 'internal server error'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              items:\n                  $ref: '#/components/schemas/Encoder'\n        description: 'Encoder fields to be updated'\n    delete:\n      tags:\n        - developers\n      summary: delete the Encoder\n      operationId: deleteEncoder\n      description: delete the Encoder identified by the encoderKey parameter. It can be executed \n        only by a user having the admin priviledge.\n      parameters:\n        - in: path\n          name: encoderKey\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: encoder deleted successful\n        '500':\n          description: 'internal server error'\n  /encodersPool:\n    get:\n      tags:\n        - developers\n      summary: return all the encodersPool associated to the workspace (current api-key)\n      operationId: encodersPoolList\n      description: return all the encodersPool associated to the workspace (current api-key).\n      parameters:\n        - in: query\n          name: start\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - in: query\n          name: rows\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - in: query\n          name: label\n          required: false\n          schema:\n            type: string\n        - in: query\n          name: labelOrder\n          required: false\n          description: asc or desc\n          schema:\n            type: string\n      responses:\n        '200':\n          description: list of the encodersPool\n          content:\n            application/json:\n              schema:\n                type: object\n                items:\n                  type: object\n                  required:\n                    # - requestParameters\n                    - response\n                  properties:\n                    # requestParameters:\n                    response:\n                      type: object\n                      required:\n                        - numFound\n                        - encoders\n                      properties:\n                        numFound:\n                          type: integer\n                          format: int32\n                        encoders:\n                          type: array\n                          items:\n                            $ref: '#/components/schemas/EncodersPool'\n        '500':\n          description: 'internal server error'\n    post:\n      tags:\n        - developers\n      summary: add a new encodersPool into the MMS platform\n      operationId: addEncodersPool\n      description: This API adds a new encodersPool into the MMS platform.\n      responses:\n        '201':\n          description: encodersPool created successful\n          content:\n            application/json:\n              schema:\n                type: object\n                items:\n                  type: object\n                  required:\n                    - EncodersPoolKey\n                  properties:\n                    EncodersPoolKey:\n                      type: integer\n                      format: int64\n        '400':\n          description: 'Json field is not present or it is null'\n        '500':\n          description: 'internal server error'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              items:\n                type: object\n                required:\n                  - Label\n                  - encoderKeys\n                properties:\n                  encoderKeys:\n                    type: array\n                    items:\n                      type: integer\n                      format: int64\n        description: 'EncodersPool details'\n  /encodersPool/{encodersPoolKey}:\n    get:\n      tags:\n        - developers\n      summary: return the encodersPool details identified by the encodersPoolKey parameter\n      operationId: encodersPoolDetails\n      description: return the encodersPool details identified by the encodersPoolKey parameter\n      parameters:\n        - in: path\n          name: encodersPoolKey\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: encodersPool details\n          content:\n            application/json:\n              schema:\n                type: object\n                items:\n                  type: object\n                  required:\n                    # - requestParameters\n                    - response\n                  properties:\n                    # requestParameters:\n                    response:\n                      type: object\n                      required:\n                        - numFound\n                        - encoders\n                      properties:\n                        numFound:\n                          type: integer\n                          format: int32\n                        encoders:\n                          type: array\n                          items:\n                            $ref: '#/components/schemas/EncodersPool'\n        '500':\n          description: 'internal server error'\n    put:\n      tags:\n        - developers\n      summary: update of the EncodersPool metadata\n      operationId: updateEncodersPool\n      description: This API updates the EncodersPool metadata.\n      parameters:\n        - in: path\n          name: encodersPoolKey\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: encodersPool updated successful\n          content:\n            application/json:\n              schema:\n                type: object\n                items:\n                  type: object\n                  required:\n                    - EncodersPoolKey\n                  properties:\n                    EncoderKey:\n                      type: integer\n                      format: int64\n        '400':\n          description: 'Json field is not present or it is null'\n        '500':\n          description: 'internal server error'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              items:\n                  $ref: '#/components/schemas/EncodersPool'\n        description: 'EncodersPool fields to be updated'\n    delete:\n      tags:\n        - developers\n      summary: delete the EncodersPool\n      operationId: deleteEncodersPool\n      description: delete the EncodersPool identified by the encodersPoolKey parameter\n      parameters:\n        - in: path\n          name: encodersPoolKey\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: encodersPool deleted successful\n        '500':\n          description: 'internal server error'\ncomponents:\n  securitySchemes:\n    BasicAuth:\n      type: http\n      scheme: basic\n  schemas:\n    Encoder:\n      type: object\n      required:\n        - enabled\n        - encoderKey\n        - external\n        - label\n        - protocol\n        - port\n        - serverName\n      properties:\n        enabled:\n          type: boolean\n          example: true\n        encoderKey:\n          type: integer\n          format: int64\n        external:\n          type: boolean\n          example: true\n        label:\n          type: string\n          example: encoder for channels\n        protocol:\n          type: string\n          example: http\n        port:\n          type: integer\n          format: int32\n          example: 8088\n        serverName:\n          type: string\n          example: mms-t-transcoder-fr-1\n    EncodersPool:\n      type: object\n      required:\n        - encodersPoolKey\n        - label\n        - encoders\n      properties:\n        encodersPoolKey:\n          type: integer\n          format: int64\n        label:\n          type: string\n          example: encodersPool for channels\n        encoders:\n          type: array\n          items:\n            $ref: '#/components/schemas/Encoder'\n    Support:\n      type: object\n      required:\n        - UserEmailAddress\n        - Subject\n        - Text\n      properties:\n        UserEmailAddress:\n          type: string\n          example: anthony@companyName.com\n        Subject:\n          type: string\n          example: Proxy task does not work\n        Text:\n          type: string\n          example: 'The Proxy task fails woth the following error: .....'\n    UserRegistration:\n      type: object\n      required:\n        - EMail\n        - Password\n      properties:\n        EMail:\n          type: string\n          example: anthony@companyName.com\n        Password:\n          type: string\n          example: 19264hd93h\n        Name:\n          type: string\n          example: Anthony\n        WorkspaceName:\n          type: string\n          description: name of the default workspace associated to the user. If not provided\n            it is set with the 'Name' of the user if present adn, if not present, it is set\n            with the 'EMail' of the user.\n        Country:\n          type: string\n          example: Italy\n    UserAndWorkspace:\n      type: object\n      required:\n        - name\n        - userKey\n        - eMailAddress\n        - country\n        - creationDate\n        - expirationDate\n        - ldapEnabled\n        - loginWorkspace\n      properties:\n        name:\n          type: string\n          example: Anthony\n        userKey:\n          type: integer\n          format: int64\n          example: 1\n        eMailAddress:\n          type: string\n          format: email\n          example: anthony@companyName.com\n        country:\n          type: string\n          example: Italy\n        creationDate:\n          type: string\n          format: date-time\n          example: 2021-04-08T20:28:33Z\n        expirationDate:\n          type: string\n          format: date-time\n          example: 2031-04-06T20:06:39Z\n        ldapEnabled:\n          type: boolean\n          example: false\n        loginWorkspace:\n          $ref: '#/components/schemas/Workspace'\n    User:\n      type: object\n      required:\n        - name\n        - userKey\n        - eMailAddress\n        - country\n        - creationDate\n        - expirationDate\n        - ldapEnabled\n      properties:\n        name:\n          type: string\n          example: Anthony\n        userKey:\n          type: integer\n          format: int64\n          example: 1\n        eMailAddress:\n          type: string\n          format: email\n          example: anthony@companyName.com\n        country:\n          type: string\n          example: Italy\n        creationDate:\n          type: string\n          format: date-time\n          example: 2021-04-08T20:28:33Z\n        expirationDate:\n          type: string\n          format: date-time\n          example: 2031-04-06T20:06:39Z\n        ldapEnabled:\n          type: boolean\n          example: false\n    UserAPIKey:\n      type: object\n      required:\n        - apiKey\n        - owner\n        - default\n        - admin\n        - applicationRecorder\n        - cancelIngestionJob\n        - createProfiles\n        - createRemoveWorkspace\n        - deliveryAuthorization\n        - editConfiguration\n        - editEncodersPool\n        - editMedia\n        - ingestWorkflow\n        - killEncoding\n        - shareWorkspace\n      properties:\n        apiKey:\n          type: string\n          example: 1j1l1x1p1l1d1q1r1f111w1u1d1p1e1r1q1h1C1j1p1d1l1o111f1r1p1b1b1V111S1b1b14141419131714161518\n        owner:\n          type: boolean\n          example: true\n        default:\n          type: boolean\n          example: true\n        admin:\n          type: boolean\n          example: true\n        applicationRecorder:\n          type: boolean\n          example: true\n        cancelIngestionJob:\n          type: boolean\n          example: true\n        createProfiles:\n          type: boolean\n          example: true\n        createRemoveWorkspace:\n          type: boolean\n          example: true\n        deliveryAuthorization:\n          type: boolean\n          example: true\n        editConfiguration:\n          type: boolean\n          example: true\n        editEncodersPool:\n          type: boolean\n          example: true\n        editMedia:\n          type: boolean\n          example: true\n        ingestWorkflow:\n          type: boolean\n          example: true\n        killEncoding:\n          type: boolean\n          example: true\n        shareWorkspace:\n          type: boolean\n          example: true\n    Workspace:\n      type: object\n      required:\n        - creationDate\n        - isEnabled\n        - languageCode\n        - maxStorageInMB\n        - maxEncodingPriority\n        - maxIngestionsNumber\n        - encodingPeriod\n        - userAPIKey\n      properties:\n        creationDate:\n          type: string\n          format: date-time\n          example: 2021-04-08T20:28:33Z\n        isEnabled:\n          type: boolean\n          example: true\n        languageCode:\n          type: string\n          example: it\n        maxStorageInMB:\n          type: integer\n          format: int64\n          example: 500000\n        maxEncodingPriority:\n          type: string\n          example: Low\n        maxIngestionsNumber:\n          type: integer\n          format: int64\n          example: 20000\n        encodingPeriod:\n          type: string\n          example: Daily\n        userAPIKey:\n          $ref: '#/components/schemas/UserAPIKey'\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /workspace/share: put: operation \"shareWorkspace\": requestBody: content: application/json: schema: parse schema: object cannot contain 'items' field"
}