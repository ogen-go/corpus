{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/MetisProtocol/metis"
		},
		"file": {
			"name": "metis.v1.yaml",
			"size": 0,
			"path": "api/reference/metis.v1.yaml",
			"byteSize": 15580,
			"content": "openapi: 3.0.0\ninfo:\n  title: metis\n  version: '1.0'\n  license:\n    name: MIT\nservers:\n  - url: 'http://metis.io/api/v1'\npaths:\n  /userprofile:\n    get:\n      summary: Get the details of the current user\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: ../models/user.v1.yaml\n      operationId: get-users\n  /userengagements:\n    get:\n      summary: Get the engagements of the current user\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: ../models/engagement.v1.yaml\n      operationId: get-userengagements\n  /userstakes:\n    get:\n      summary: Get the stake arrangements of th current user\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: ../models/stake.v1.yaml\n      operationId: get-userstakes\n  '/engagement/{id}/commit':\n    parameters:\n      - schema:\n          type: string\n        name: id\n        in: path\n        required: true\n    post:\n      summary: Commit an engagement as a provider\n      operationId: post-engagement-id-commit\n      responses:\n        '200':\n          description: OK\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                amount:\n                  type: string\n      description: 'Commit the user as a provider of an engagment contract. This operation will trigger a token payment through the metis framework. The specified amount of token will be deposited to the engagement contract as a stake. '\n  '/engagement/{id}/finish':\n    parameters:\n      - schema:\n          type: string\n        name: id\n        in: path\n        required: true\n    post:\n      summary: ''\n      operationId: post-engagement-id-finish\n      responses:\n        '200':\n          description: OK\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                result:\n                  type: string\n                  maxLength: 254\n      description: Notify the engagment client that the work has finished. The result should contain either the content of the work or the desciption to find the content of the work. The result will be written into the contract and ecnrypted by the serivce public key and engagement public key.\n  '/engagement/{id}/review':\n    parameters:\n      - schema:\n          type: string\n        name: id\n        in: path\n        required: true\n    post:\n      summary: ''\n      operationId: post-engagement-id-review\n      responses:\n        '200':\n          description: OK\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                verdict:\n                  type: string\n                  enum:\n                    - 'yes'\n                    - 'no'\n      description: 'As the engagement client, provide th verdict of the review. If the verdict is yes, this operation will trigger a delayed token transfer of the agreed payment to the client within the engagement contract. Upon the successful close of the engagement contract '\n  '/engagement/{id}/dispute':\n    parameters:\n      - schema:\n          type: string\n        name: id\n        in: path\n        required: true\n    post:\n      summary: Raise a dispute of the engagmenet\n      operationId: post-engagement-id-dispute\n      responses:\n        '200':\n          description: OK\n      description: 'Use when there is issues during the engagement. Either the provider or the client can raise a dispute. When the contract is in the dispute state, it cannot be closed without eithre a dispute dismisal or an arbitration.'\n  '/engagement/{id}/dismissdispute':\n    parameters:\n      - schema:\n          type: string\n        name: id\n        in: path\n        required: true\n    post:\n      summary: Withdraw a dispute\n      operationId: post-engagement-id-dismissdispute\n      responses:\n        '200':\n          description: OK\n      description: Back to normal.\n  '/engagement/{id}/arbitrate':\n    parameters:\n      - schema:\n          type: string\n        name: id\n        in: path\n        required: true\n    post:\n      summary: Provide arbitration results\n      operationId: post-engagement-id-arbitrate\n      responses:\n        '200':\n          description: OK\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                clientamount:\n                  type: string\n                provideramount:\n                  type: string\n  /user/register:\n    post:\n      summary: Register the current user with the service (DAC)\n      operationId: post-user-register\n      responses:\n        '200':\n          description: OK\n  /user/exit:\n    post:\n      summary: Unregister the current user from the service (DAC)\n      operationId: post-user-exit\n      responses:\n        '200':\n          description: OK\n  /engagements:\n    get:\n      summary: Get the list of engagements\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: ../models/engagement.v1.yaml\n      operationId: get-engagements\n      description: Get the list of enagagmenets\n    post:\n      summary: Create a new engagement\n      operationId: post-engagements\n      responses:\n        '200':\n          description: OK\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: ../models/engagement.v1.yaml\n  /stakes:\n    get:\n      summary: Get the list of stake arrangements\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: ../models/stake.v1.yaml\n      operationId: get-stakes\n    post:\n      summary: Create a new stake arrangement\n      operationId: post-stakes\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: ../models/stake.v1.yaml\n  '/stake/{id}/commit':\n    parameters:\n      - schema:\n          type: string\n        name: id\n        in: path\n        required: true\n    post:\n      summary: commit a stake arragement\n      operationId: post-stake-id-commit\n      responses:\n        '200':\n          description: OK\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                amount:\n                  type: string\n  '/stake/{id}/terminate':\n    parameters:\n      - schema:\n          type: string\n        name: id\n        in: path\n        required: true\n    post:\n      summary: Propose a termination of the arrangement\n      operationId: post-stake-id-terminate\n      responses:\n        '200':\n          description: OK\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                reason:\n                  type: string\n                  maxLength: 254\n  '/stake/{id}/withdraw':\n    parameters:\n      - schema:\n          type: string\n        name: id\n        in: path\n        required: true\n    post:\n      summary: withdraw the staked tokens\n      operationId: post-stake-id-withdraw\n      responses:\n        '200':\n          description: OK\n  '/stake/{id}/dispute':\n    parameters:\n      - schema:\n          type: string\n        name: id\n        in: path\n        required: true\n    post:\n      summary: ''\n      operationId: post-stake-id-dispute\n      responses:\n        '200':\n          description: OK\n      description: ''\n  '/stake/{id}/dismissdispute':\n    parameters:\n      - schema:\n          type: string\n        name: id\n        in: path\n        required: true\n    post:\n      summary: ''\n      operationId: post-stake-id-dismissdispute\n      responses:\n        '200':\n          description: OK\n  '/stake/{id}/arbitrate':\n    parameters:\n      - schema:\n          type: string\n        name: id\n        in: path\n        required: true\n    post:\n      summary: ''\n      operationId: post-stake-id-arbitrate\n      responses:\n        '200':\n          description: OK\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                parties:\n                  type: array\n                  items:\n                    type: string\n                amounts:\n                  type: array\n                  items:\n                    type: string\n  /assets:\n    get:\n      summary: Get the list of assets\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: ../models/assetmeta.v1.yaml\n              examples: {}\n          headers:\n            x-next:\n              schema:\n                type: string\n              description: the link to the next page of the results\n      operationId: get-assets\n      description: |-\n        Get the list of assets this service can access to. A number of filters are supported.\n        The list returned will include the public assets and private assets that belong to the user. Deprecated assets will not be included.\n      parameters:\n        - schema:\n            type: string\n          in: query\n          name: owner\n          description: the owner of the asset\n        - schema:\n            type: string\n          in: query\n          name: name\n          description: the name of the asset\n        - schema:\n            type: string\n          in: query\n          name: minvalue\n          description: the minimum value of the asset\n        - schema:\n            type: string\n          in: query\n          name: maxvalue\n          description: the maximum value of the asset\n        - schema:\n            type: string\n          in: query\n          name: type\n          description: the type of the asset\n    post:\n      summary: Create a new asset\n      operationId: post-assets\n      responses:\n        '200':\n          description: OK\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: ../models/asset.v1.yaml\n      description: \"Create a new asset. The metadata of the asset is stored as is. The details of the asset is encrypted using the service's public key.\"\n  /userassets:\n    get:\n      summary: Get the list of assets\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: ../models/asset.v1.yaml\n      operationId: get-userassets\n      parameters:\n        - schema:\n            type: string\n          in: query\n          name: name\n          description: the name of the asset\n        - schema:\n            type: string\n          in: query\n          name: minvalue\n          description: the minimum value of the asset\n        - schema:\n            type: string\n          in: query\n          name: maxvalue\n          description: the maximum value of the asset\n      description: |-\n        Get the list of assets owned by the current user. A number of filters are available.\n\n        The list returned WILL include the deprecated assets\n  '/asset/{id}/request':\n    parameters:\n      - schema:\n          type: string\n        name: id\n        in: path\n        required: true\n    post:\n      summary: Request to use the asset\n      operationId: post-asset-id-request\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: ../models/assetdetail.v1.yaml\n        '402':\n          description: Payment Required\n      description: |-\n        Request to use a particular asset. This operation will trigger a token payment through the metis framework. The user will be charged X amount of tokens calculated based on the value of the asset. If the request is successful, the endpoint will return the details of the asset so that the service can start to build the reference. The asset contract will not manage user sessions. It is up to the DAC (service) to decide how to management the references of the asset. Whether the payment means a life-time grant of the use or a temporary grant of use is a service's sole decsion.\n\n        The asset must be visible and available to the current service.\n  '/asset/{id}':\n    parameters:\n      - schema:\n          type: string\n        name: id\n        in: path\n        required: true\n    get:\n      summary: Get the detail of the asset\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: ../models/asset.v1.yaml\n        '403':\n          description: Forbidden\n      operationId: get-asset-id\n      description: Get the full details of an asset. The asset must be accessible to the current user.\n    put:\n      summary: Modify an asset\n      operationId: put-asset-id\n      responses:\n        '200':\n          description: OK\n        '403':\n          description: Forbidden\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: ../models/asset.v1.yaml\n  '/engagement/{id}/close':\n    parameters:\n      - schema:\n          type: string\n        name: id\n        in: path\n        required: true\n    post:\n      summary: Close an engagement\n      operationId: post-engagement-id-close\n      responses:\n        '200':\n          description: OK\n      description: \"Properly end the engagement. Either party can request to close the contract. Once both parties agree or if there is no response from the other party for 7 days, the current balances stored in the contract will be finalized and distributed to each party's user account.\"\n  '/engagement/{id}/requestarbitration':\n    parameters:\n      - schema:\n          type: string\n        name: id\n        in: path\n        required: true\n    post:\n      summary: Request an arbitration\n      operationId: post-engagement-id-requestarbitration\n      responses:\n        '200':\n          description: OK\n      description: \"An arbitration can be requested. But the servie may come with a charge. It's up to the DAC to decide the arbitration mechanism.\"\n  '/stake/{id}/requestarbitration':\n    parameters:\n      - schema:\n          type: string\n        name: id\n        in: path\n        required: true\n    post:\n      summary: Request an arbitration\n      operationId: post-stake-id-requestarbitration\n      responses:\n        '200':\n          description: OK\ncomponents:\n  schemas: {}\n  securitySchemes:\n    authtoken:\n      type: oauth2\nsecurity:\n  - authtoken: []\n"
		}
	},
	"Error": "parse: parse spec: paths: /stakes: get: operation \"get-stakes\": responses: 200: content: \"application/json\": schema: parse schema: item: parse schema: resolve \"../models/stake.v1.yaml\": find schema: external base \"../models/stake.v1.yaml\" is not supported"
}