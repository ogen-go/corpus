{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/storageos/cluster-operator"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "vendor/github.com/storageos/go-api/v2/api/openapi.yaml",
			"byteSize": 255208,
			"content": "openapi: 3.0.2\ninfo:\n  contact:\n    email: info@storageos.com\n    name: StorageOS\n    url: https://storageos.com\n  title: StorageOS API\n  version: 2.4.0\nexternalDocs:\n  description: The latest StorageOS user documentation\n  url: https://docs.storageos.com/\nservers:\n- url: /v2\npaths:\n  /auth/login:\n    post:\n      description: Generate a new JWT token for a user.\n      operationId: authenticateUser\n      requestBody:\n        $ref: '#/components/requestBodies/AuthUserData'\n        content:\n          application/json:\n            schema:\n              example:\n                username: admin\n                password: supersecret\n              properties:\n                username:\n                  type: string\n                password:\n                  format: password\n                  type: string\n              required:\n              - password\n              - username\n              title: AuthUserData\n              type: object\n        description: The credentials to use for authentication.\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserSession'\n          description: Successfully authenticated the returned user.\n          headers:\n            Authorization:\n              description: |\n                The JWT token - this header should be sent to the server to perform an authenticated request.\n              explode: false\n              schema:\n                type: string\n              style: simple\n            Authorization-Expires-Seconds:\n              description: |\n                A formatted string representing the number of  seconds after which the login session will  expire.\n              explode: false\n              schema:\n                example: 60\n                type: uint64\n              style: simple\n        \"400\":\n          content:\n            application/json:\n              example:\n                error: a short description of the validation failure\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request does not conform to the API specification.\n        \"401\":\n          content:\n            application/json:\n              example:\n                error: authentication required\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The requested endpoint requires authentication - you must log in first.\n            If attempting to log in, your credentials were not recognised.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The request caused an internal server error and should be retried.\n            Check the health of the node/cluster and if the error persists, contact support.\n        \"503\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The server is currently unable to handle the request due to a temporary store failure.\n            Check the health of the node/cluster and if the error persists, contact support.\n      summary: Authenticate a user\n  /auth/refresh:\n    post:\n      description: Obtain a fresh token with an updated expiry deadline.\n      operationId: refreshJwt\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserSession'\n          description: Refresh was successful\n          headers:\n            Authorization:\n              description: The new JWT token.\n              explode: false\n              schema:\n                type: string\n              style: simple\n            Authorization-Expires-In:\n              description: |\n                A formatted string representing the duration  after which the refreshed token will expire.\n              explode: false\n              schema:\n                example: 60\n                type: uint64\n              style: simple\n        \"401\":\n          content:\n            application/json:\n              example:\n                error: authentication required\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The requested endpoint requires authentication - you must log in first.\n            If attempting to log in, your credentials were not recognised.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The request caused an internal server error and should be retried.\n            Check the health of the node/cluster and if the error persists, contact support.\n        \"503\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The server is currently unable to handle the request due to a temporary store failure.\n            Check the health of the node/cluster and if the error persists, contact support.\n      security:\n      - jwt: []\n      summary: Refresh the JWT\n  /users:\n    get:\n      description: Fetch the list of users of the cluster.\n      operationId: listUsers\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserList'\n          description: A list of cluster users.\n        \"401\":\n          content:\n            application/json:\n              example:\n                error: authentication required\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The requested endpoint requires authentication - you must log in first.\n            If attempting to log in, your credentials were not recognised.\n        \"403\":\n          content:\n            application/json:\n              example:\n                error: unauthorised\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The authenticated user does not have permission to perform the requested action.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The request caused an internal server error and should be retried.\n            Check the health of the node/cluster and if the error persists, contact support.\n        \"503\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The server is currently unable to handle the request due to a temporary store failure.\n            Check the health of the node/cluster and if the error persists, contact support.\n      security:\n      - jwt: []\n      summary: Fetch the list of users\n    post:\n      description: |\n        Create a new user in the cluster - only administrators can create new users.\n      operationId: createUser\n      requestBody:\n        $ref: '#/components/requestBodies/CreateUserData'\n        content:\n          application/json:\n            schema:\n              example:\n                password: turtlesaregreat\n                groups:\n                - 24d5db6f-9738-4f17-a257-b9dd41a35309\n                - 4223b453-4d47-49d5-960f-23fc7a8153ba\n                isAdmin: true\n                username: admin\n              properties:\n                username:\n                  example: admin\n                  type: string\n                password:\n                  default: unchanged\n                  description: If not present, the existing password is not changed\n                  example: turtlesaregreat\n                  format: password\n                  type: string\n                  writeOnly: true\n                isAdmin:\n                  default: false\n                  description: |\n                    If true, this user is an administrator of the cluster.\n                    Administrators bypass the usual authentication checks and are granted access to all resources. Some actions (such as adding a new user) can only be performed by an administrator.\n                  example: true\n                  type: boolean\n                groups:\n                  default: []\n                  description: |\n                    Defines a set of policy group IDs this user is a member of.\n                    Policy groups can be used to logically group users and apply authorisation  policies to all members.\n                  example:\n                  - 24d5db6f-9738-4f17-a257-b9dd41a35309\n                  - 4223b453-4d47-49d5-960f-23fc7a8153ba\n                  items:\n                    $ref: '#/components/schemas/PolicyGroupID'\n                  nullable: true\n                  type: array\n              required:\n              - password\n              - username\n              title: CreateUserData\n              type: object\n        description: Data required to create a new user in the cluster.\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n          description: The account was successfully created\n        \"400\":\n          content:\n            application/json:\n              example:\n                error: a short description of the validation failure\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request does not conform to the API specification.\n        \"401\":\n          content:\n            application/json:\n              example:\n                error: authentication required\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The requested endpoint requires authentication - you must log in first.\n            If attempting to log in, your credentials were not recognised.\n        \"403\":\n          content:\n            application/json:\n              example:\n                error: unauthorised\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The authenticated user does not have permission to perform the requested action.\n        \"409\":\n          content:\n            application/json:\n              example:\n                error: already exists\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The entity to be wrote uses an identifier that already exists.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The request caused an internal server error and should be retried.\n            Check the health of the node/cluster and if the error persists, contact support.\n        \"503\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The server is currently unable to handle the request due to a temporary store failure.\n            Check the health of the node/cluster and if the error persists, contact support.\n      security:\n      - jwt: []\n      summary: Create a new user\n  /users/{id}:\n    delete:\n      description: |\n        Remove the user identified by id.\n        This request will not succeed if the target account is the currently authenticated account. Use the separate users/self endpoint for this purpose.\n      operationId: deleteUser\n      parameters:\n      - description: ID of a user\n        explode: false\n        in: path\n        name: id\n        required: true\n        schema:\n          $ref: '#/components/schemas/UserID'\n        style: simple\n      - description: |\n          This value is used to perform a conditional delete or update of the entity.\n          If the entity has been modified since the version token was obtained, the request will fail with a HTTP 409 Conflict.\n        explode: true\n        in: query\n        name: version\n        required: true\n        schema:\n          $ref: '#/components/schemas/Version'\n        style: form\n      - description: |\n          If set to true this value indicates that the user wants to ignore entity version constraints, thereby \"forcing\" the operation.\n        explode: true\n        in: query\n        name: ignore-version\n        required: false\n        schema:\n          $ref: '#/components/schemas/IgnoreVersion'\n        style: form\n      responses:\n        \"200\":\n          description: The user was successfully deleted.\n        \"400\":\n          content:\n            application/json:\n              example:\n                error: a short description of the validation failure\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request does not conform to the API specification.\n        \"401\":\n          content:\n            application/json:\n              example:\n                error: authentication required\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The requested endpoint requires authentication - you must log in first.\n            If attempting to log in, your credentials were not recognised.\n        \"403\":\n          content:\n            application/json:\n              example:\n                error: unauthorised\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The authenticated user does not have permission to perform the requested action.\n        \"404\":\n          content:\n            application/json:\n              example:\n                error: not found\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            A referenced resource does not exist.\n        \"412\":\n          content:\n            application/json:\n              example:\n                error: attempting to write stale object\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The entity to be wrote has been concurrently updated by another request - the submitted entity data has been replaced.\n            The caller should fetch the entity again, check the actions are still required and resubmit the request with the new entity version field.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The request caused an internal server error and should be retried.\n            Check the health of the node/cluster and if the error persists, contact support.\n        \"503\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The server is currently unable to handle the request due to a temporary store failure.\n            Check the health of the node/cluster and if the error persists, contact support.\n      security:\n      - jwt: []\n      summary: Delete a user\n    get:\n      description: Fetch the user identified by id.\n      operationId: getUser\n      parameters:\n      - description: ID of a user\n        explode: false\n        in: path\n        name: id\n        required: true\n        schema:\n          $ref: '#/components/schemas/UserID'\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n          description: The user information.\n        \"401\":\n          content:\n            application/json:\n              example:\n                error: authentication required\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The requested endpoint requires authentication - you must log in first.\n            If attempting to log in, your credentials were not recognised.\n        \"403\":\n          content:\n            application/json:\n              example:\n                error: unauthorised\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The authenticated user does not have permission to perform the requested action.\n        \"404\":\n          content:\n            application/json:\n              example:\n                error: not found\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            A referenced resource does not exist.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The request caused an internal server error and should be retried.\n            Check the health of the node/cluster and if the error persists, contact support.\n        \"503\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The server is currently unable to handle the request due to a temporary store failure.\n            Check the health of the node/cluster and if the error persists, contact support.\n      security:\n      - jwt: []\n      summary: Fetch a user\n    put:\n      description: |\n        Update the user identified by id.\n        This request will not succeed if the target account is the currently authenticated account. Use the separate users/self endpoint for this purpose.\n      operationId: updateUser\n      parameters:\n      - description: ID of a user\n        explode: false\n        in: path\n        name: id\n        required: true\n        schema:\n          $ref: '#/components/schemas/UserID'\n        style: simple\n      - description: |\n          If set to true this value indicates that the user wants to ignore entity version constraints, thereby \"forcing\" the operation.\n        explode: true\n        in: query\n        name: ignore-version\n        required: false\n        schema:\n          $ref: '#/components/schemas/IgnoreVersion'\n        style: form\n      requestBody:\n        $ref: '#/components/requestBodies/UpdateUserData'\n        content:\n          application/json:\n            schema:\n              example:\n                password: turtlesaregreat\n                groups:\n                - 24d5db6f-9738-4f17-a257-b9dd41a35309\n                - 4223b453-4d47-49d5-960f-23fc7a8153ba\n                isAdmin: true\n                version: NDI0MjQyNDI0MjQyNDI0MjQy\n              properties:\n                password:\n                  default: unchanged\n                  description: If not present, the existing password is not changed\n                  example: turtlesaregreat\n                  format: password\n                  type: string\n                  writeOnly: true\n                isAdmin:\n                  default: false\n                  description: |\n                    If true, this user is an administrator of the cluster.\n                    Administrators bypass the usual authentication checks and are granted access to all resources. Some actions (such as adding a new user) can only be performed by an administrator.\n                  example: true\n                  type: boolean\n                groups:\n                  default: []\n                  description: |\n                    Defines a set of policy group IDs this user is a member of.\n                    Policy groups can be used to logically group users and apply authorisation  policies to all members.\n                  example:\n                  - 24d5db6f-9738-4f17-a257-b9dd41a35309\n                  - 4223b453-4d47-49d5-960f-23fc7a8153ba\n                  items:\n                    $ref: '#/components/schemas/PolicyGroupID'\n                  nullable: true\n                  type: array\n                version:\n                  description: |\n                    An opaque representation of an entity version at the time it was obtained from the API.\n                    All operations that mutate the entity must include this version field in the request unchanged.\n                    The format of this type is undefined and may change but the defined properties will not change.\n                  example: NDI0MjQyNDI0MjQyNDI0MjQy\n                  maxLength: 30\n                  type: string\n              title: UpdateUserData\n              type: object\n        description: The new User data to store.\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n          description: The account was successfully updated\n        \"400\":\n          content:\n            application/json:\n              example:\n                error: a short description of the validation failure\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request does not conform to the API specification.\n        \"401\":\n          content:\n            application/json:\n              example:\n                error: authentication required\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The requested endpoint requires authentication - you must log in first.\n            If attempting to log in, your credentials were not recognised.\n        \"403\":\n          content:\n            application/json:\n              example:\n                error: unauthorised\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The authenticated user does not have permission to perform the requested action.\n        \"404\":\n          content:\n            application/json:\n              example:\n                error: not found\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            A referenced resource does not exist.\n        \"412\":\n          content:\n            application/json:\n              example:\n                error: attempting to write stale object\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The entity to be wrote has been concurrently updated by another request - the submitted entity data has been replaced.\n            The caller should fetch the entity again, check the actions are still required and resubmit the request with the new entity version field.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The request caused an internal server error and should be retried.\n            Check the health of the node/cluster and if the error persists, contact support.\n        \"503\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The server is currently unable to handle the request due to a temporary store failure.\n            Check the health of the node/cluster and if the error persists, contact support.\n      security:\n      - jwt: []\n      summary: Update a user\n  /users/{id}/sessions:\n    delete:\n      description: |\n        Invalidates active JWTs on a per-user basis, specified by id.\n        This request will not succeed if the target account is the currently authenticated account. Use the separate users/self endpoint for this purpose.\n      operationId: deleteSessions\n      parameters:\n      - description: ID of a user\n        explode: false\n        in: path\n        name: id\n        required: true\n        schema:\n          $ref: '#/components/schemas/UserID'\n        style: simple\n      responses:\n        \"200\":\n          description: The users current session was successfully invalidated.\n        \"400\":\n          content:\n            application/json:\n              example:\n                error: a short description of the validation failure\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request does not conform to the API specification.\n        \"401\":\n          content:\n            application/json:\n              example:\n                error: authentication required\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The requested endpoint requires authentication - you must log in first.\n            If attempting to log in, your credentials were not recognised.\n        \"403\":\n          content:\n            application/json:\n              example:\n                error: unauthorised\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The authenticated user does not have permission to perform the requested action.\n        \"404\":\n          content:\n            application/json:\n              example:\n                error: not found\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            A referenced resource does not exist.\n        \"412\":\n          content:\n            application/json:\n              example:\n                error: attempting to write stale object\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The entity to be wrote has been concurrently updated by another request - the submitted entity data has been replaced.\n            The caller should fetch the entity again, check the actions are still required and resubmit the request with the new entity version field.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The request caused an internal server error and should be retried.\n            Check the health of the node/cluster and if the error persists, contact support.\n        \"503\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The server is currently unable to handle the request due to a temporary store failure.\n            Check the health of the node/cluster and if the error persists, contact support.\n      security:\n      - jwt: []\n      summary: Invalidate login sessions\n  /users/self:\n    delete:\n      description: Remove the authenticated user from the cluster.\n      operationId: deleteAuthenticatedUser\n      parameters:\n      - description: |\n          This value is used to perform a conditional delete or update of the entity.\n          If the entity has been modified since the version token was obtained, the request will fail with a HTTP 409 Conflict.\n        explode: true\n        in: query\n        name: version\n        required: true\n        schema:\n          $ref: '#/components/schemas/Version'\n        style: form\n      - description: |\n          If set to true this value indicates that the user wants to ignore entity version constraints, thereby \"forcing\" the operation.\n        explode: true\n        in: query\n        name: ignore-version\n        required: false\n        schema:\n          $ref: '#/components/schemas/IgnoreVersion'\n        style: form\n      responses:\n        \"200\":\n          description: The authenticated user was successfully deleted.\n        \"400\":\n          content:\n            application/json:\n              example:\n                error: a short description of the validation failure\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request does not conform to the API specification.\n        \"401\":\n          content:\n            application/json:\n              example:\n                error: authentication required\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The requested endpoint requires authentication - you must log in first.\n            If attempting to log in, your credentials were not recognised.\n        \"403\":\n          content:\n            application/json:\n              example:\n                error: unauthorised\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The authenticated user does not have permission to perform the requested action.\n        \"404\":\n          content:\n            application/json:\n              example:\n                error: not found\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            A referenced resource does not exist.\n        \"412\":\n          content:\n            application/json:\n              example:\n                error: attempting to write stale object\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The entity to be wrote has been concurrently updated by another request - the submitted entity data has been replaced.\n            The caller should fetch the entity again, check the actions are still required and resubmit the request with the new entity version field.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The request caused an internal server error and should be retried.\n            Check the health of the node/cluster and if the error persists, contact support.\n        \"503\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The server is currently unable to handle the request due to a temporary store failure.\n            Check the health of the node/cluster and if the error persists, contact support.\n      security:\n      - jwt: []\n      summary: Delete the authenticated user\n    get:\n      description: Fetch authenticated user's information.\n      operationId: getAuthenticatedUser\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n          description: The authenticated user's information.\n        \"401\":\n          content:\n            application/json:\n              example:\n                error: authentication required\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The requested endpoint requires authentication - you must log in first.\n            If attempting to log in, your credentials were not recognised.\n        \"403\":\n          content:\n            application/json:\n              example:\n                error: unauthorised\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The authenticated user does not have permission to perform the requested action.\n        \"404\":\n          content:\n            application/json:\n              example:\n                error: not found\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            A referenced resource does not exist.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The request caused an internal server error and should be retried.\n            Check the health of the node/cluster and if the error persists, contact support.\n        \"503\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The server is currently unable to handle the request due to a temporary store failure.\n            Check the health of the node/cluster and if the error persists, contact support.\n      security:\n      - jwt: []\n      summary: Get the currently authenticated user's information\n    put:\n      description: Update the authenticated user.\n      operationId: updateAuthenticatedUser\n      parameters:\n      - description: |\n          If set to true this value indicates that the user wants to ignore entity version constraints, thereby \"forcing\" the operation.\n        explode: true\n        in: query\n        name: ignore-version\n        required: false\n        schema:\n          $ref: '#/components/schemas/IgnoreVersion'\n        style: form\n      requestBody:\n        $ref: '#/components/requestBodies/UpdateAuthenticatedUserData'\n        content:\n          application/json:\n            schema:\n              example:\n                password: turtlesaregreat\n                version: NDI0MjQyNDI0MjQyNDI0MjQy\n              properties:\n                password:\n                  default: unchanged\n                  description: If not present, the existing password is not changed\n                  example: turtlesaregreat\n                  format: password\n                  type: string\n                  writeOnly: true\n                version:\n                  description: |\n                    An opaque representation of an entity version at the time it was obtained from the API.\n                    All operations that mutate the entity must include this version field in the request unchanged.\n                    The format of this type is undefined and may change but the defined properties will not change.\n                  example: NDI0MjQyNDI0MjQyNDI0MjQy\n                  maxLength: 30\n                  type: string\n              title: UpdateAuthenticatedUserData\n              type: object\n        description: The new authenticated user's data.\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n          description: The account was successfully updated\n        \"400\":\n          content:\n            application/json:\n              example:\n                error: a short description of the validation failure\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request does not conform to the API specification.\n        \"401\":\n          content:\n            application/json:\n              example:\n                error: authentication required\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The requested endpoint requires authentication - you must log in first.\n            If attempting to log in, your credentials were not recognised.\n        \"403\":\n          content:\n            application/json:\n              example:\n                error: unauthorised\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The authenticated user does not have permission to perform the requested action.\n        \"404\":\n          content:\n            application/json:\n              example:\n                error: not found\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            A referenced resource does not exist.\n        \"412\":\n          content:\n            application/json:\n              example:\n                error: attempting to write stale object\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The entity to be wrote has been concurrently updated by another request - the submitted entity data has been replaced.\n            The caller should fetch the entity again, check the actions are still required and resubmit the request with the new entity version field.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The request caused an internal server error and should be retried.\n            Check the health of the node/cluster and if the error persists, contact support.\n        \"503\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The server is currently unable to handle the request due to a temporary store failure.\n            Check the health of the node/cluster and if the error persists, contact support.\n      security:\n      - jwt: []\n      summary: Update the authenticated user's information\n  /users/self/sessions:\n    delete:\n      description: Invalidates logged in user's active JWTs.\n      operationId: deleteAuthenticatedUserSessions\n      responses:\n        \"200\":\n          description: The authenticated user's sessions have been invalidated.\n        \"400\":\n          content:\n            application/json:\n              example:\n                error: a short description of the validation failure\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request does not conform to the API specification.\n        \"401\":\n          content:\n            application/json:\n              example:\n                error: authentication required\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The requested endpoint requires authentication - you must log in first.\n            If attempting to log in, your credentials were not recognised.\n        \"403\":\n          content:\n            application/json:\n              example:\n                error: unauthorised\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The authenticated user does not have permission to perform the requested action.\n        \"404\":\n          content:\n            application/json:\n              example:\n                error: not found\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            A referenced resource does not exist.\n        \"412\":\n          content:\n            application/json:\n              example:\n                error: attempting to write stale object\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The entity to be wrote has been concurrently updated by another request - the submitted entity data has been replaced.\n            The caller should fetch the entity again, check the actions are still required and resubmit the request with the new entity version field.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The request caused an internal server error and should be retried.\n            Check the health of the node/cluster and if the error persists, contact support.\n        \"503\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The server is currently unable to handle the request due to a temporary store failure.\n            Check the health of the node/cluster and if the error persists, contact support.\n      security:\n      - jwt: []\n      summary: Invalidate the logged in user's sessions\n  /namespaces:\n    get:\n      description: Fetch the list of namespaces in the cluster.\n      operationId: listNamespaces\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NamespaceList'\n          description: A list of cluster namespaces.\n        \"401\":\n          content:\n            application/json:\n              example:\n                error: authentication required\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The requested endpoint requires authentication - you must log in first.\n            If attempting to log in, your credentials were not recognised.\n        \"403\":\n          content:\n            application/json:\n              example:\n                error: unauthorised\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The authenticated user does not have permission to perform the requested action.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The request caused an internal server error and should be retried.\n            Check the health of the node/cluster and if the error persists, contact support.\n        \"503\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The server is currently unable to handle the request due to a temporary store failure.\n            Check the health of the node/cluster and if the error persists, contact support.\n      security:\n      - jwt: []\n      summary: Fetch the list of namespaces\n    post:\n      description: |\n        Create a new namespace in the cluster - only administrators can create new namespaces.\n      operationId: createNamespace\n      requestBody:\n        $ref: '#/components/requestBodies/CreateNamespaceData'\n        content:\n          application/json:\n            schema:\n              example:\n                name: dev\n                labels:\n                  env: prod\n                  rack: db-1\n              properties:\n                name:\n                  description: |\n                    The name of the namespace shown in the CLI and UI\n                  example: dev\n                  pattern: ^[a-z0-9.\\-]{1,253}$\n                  type: string\n                labels:\n                  additionalProperties:\n                    type: string\n                  description: |\n                    A set of arbitrary key value labels to apply to the entity.\n                  example:\n                    env: prod\n                    rack: db-1\n                  externalDocs:\n                    url: https://docs.storageos.com/docs/reference/labels\n                  type: object\n              title: CreateNamespaceData\n              type: object\n        description: Data required to create a new namespace in the cluster.\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Namespace'\n          description: The namespace was successfully created\n        \"400\":\n          content:\n            application/json:\n              example:\n                error: a short description of the validation failure\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request does not conform to the API specification.\n        \"401\":\n          content:\n            application/json:\n              example:\n                error: authentication required\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The requested endpoint requires authentication - you must log in first.\n            If attempting to log in, your credentials were not recognised.\n        \"403\":\n          content:\n            application/json:\n              example:\n                error: unauthorised\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The authenticated user does not have permission to perform the requested action.\n        \"409\":\n          content:\n            application/json:\n              example:\n                error: already exists\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The entity to be wrote uses an identifier that already exists.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The request caused an internal server error and should be retried.\n            Check the health of the node/cluster and if the error persists, contact support.\n        \"503\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The server is currently unable to handle the request due to a temporary store failure.\n            Check the health of the node/cluster and if the error persists, contact support.\n      security:\n      - jwt: []\n      summary: Create a new namespace\n  /namespaces/{id}:\n    delete:\n      description: Remove the namespace identified by id.\n      operationId: deleteNamespace\n      parameters:\n      - description: ID of a namespace\n        explode: false\n        in: path\n        name: id\n        required: true\n        schema:\n          $ref: '#/components/schemas/NamespaceID'\n        style: simple\n      - description: |\n          This value is used to perform a conditional delete or update of the entity.\n          If the entity has been modified since the version token was obtained, the request will fail with a HTTP 409 Conflict.\n        explode: true\n        in: query\n        name: version\n        required: true\n        schema:\n          $ref: '#/components/schemas/Version'\n        style: form\n      - description: |\n          If set to true this value indicates that the user wants to ignore entity version constraints, thereby \"forcing\" the operation.\n        explode: true\n        in: query\n        name: ignore-version\n        required: false\n        schema:\n          $ref: '#/components/schemas/IgnoreVersion'\n        style: form\n      responses:\n        \"200\":\n          description: The namespace was successfully deleted.\n        \"400\":\n          content:\n            application/json:\n              example:\n                error: a short description of the validation failure\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request does not conform to the API specification.\n        \"401\":\n          content:\n            application/json:\n              example:\n                error: authentication required\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The requested endpoint requires authentication - you must log in first.\n            If attempting to log in, your credentials were not recognised.\n        \"403\":\n          content:\n            application/json:\n              example:\n                error: unauthorised\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The authenticated user does not have permission to perform the requested action.\n        \"404\":\n          content:\n            application/json:\n              example:\n                error: not found\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            A referenced resource does not exist.\n        \"409\":\n          content:\n            application/json:\n              example:\n                error: in use\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            A referenced entity is currently in use.\n        \"412\":\n          content:\n            application/json:\n              example:\n                error: attempting to write stale object\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The entity to be wrote has been concurrently updated by another request - the submitted entity data has been replaced.\n            The caller should fetch the entity again, check the actions are still required and resubmit the request with the new entity version field.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The request caused an internal server error and should be retried.\n            Check the health of the node/cluster and if the error persists, contact support.\n        \"503\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The server is currently unable to handle the request due to a temporary store failure.\n            Check the health of the node/cluster and if the error persists, contact support.\n      security:\n      - jwt: []\n      summary: Delete a namespace\n    get:\n      description: Fetch the namespace identified by id.\n      operationId: getNamespace\n      parameters:\n      - description: ID of a namespace\n        explode: false\n        in: path\n        name: id\n        required: true\n        schema:\n          $ref: '#/components/schemas/NamespaceID'\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Namespace'\n          description: The namespace information.\n        \"400\":\n          content:\n            application/json:\n              example:\n                error: a short description of the validation failure\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request does not conform to the API specification.\n        \"401\":\n          content:\n            application/json:\n              example:\n                error: authentication required\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The requested endpoint requires authentication - you must log in first.\n            If attempting to log in, your credentials were not recognised.\n        \"403\":\n          content:\n            application/json:\n              example:\n                error: unauthorised\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The authenticated user does not have permission to perform the requested action.\n        \"404\":\n          content:\n            application/json:\n              example:\n                error: not found\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            A referenced resource does not exist.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The request caused an internal server error and should be retried.\n            Check the health of the node/cluster and if the error persists, contact support.\n        \"503\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The server is currently unable to handle the request due to a temporary store failure.\n            Check the health of the node/cluster and if the error persists, contact support.\n      security:\n      - jwt: []\n      summary: Fetch a namespace\n    put:\n      description: Update the namespace identified by id.\n      operationId: updateNamespace\n      parameters:\n      - description: ID of a namespace\n        explode: false\n        in: path\n        name: id\n        required: true\n        schema:\n          $ref: '#/components/schemas/NamespaceID'\n        style: simple\n      - description: |\n          If set to true this value indicates that the user wants to ignore entity version constraints, thereby \"forcing\" the operation.\n        explode: true\n        in: query\n        name: ignore-version\n        required: false\n        schema:\n          $ref: '#/components/schemas/IgnoreVersion'\n        style: form\n      requestBody:\n        $ref: '#/components/requestBodies/UpdateNamespaceData'\n        content:\n          application/json:\n            schema:\n              example:\n                version: NDI0MjQyNDI0MjQyNDI0MjQy\n                labels:\n                  env: prod\n                  rack: db-1\n              properties:\n                labels:\n                  additionalProperties:\n                    type: string\n                  description: |\n                    A set of arbitrary key value labels to apply to the entity.\n                  example:\n                    env: prod\n                    rack: db-1\n                  externalDocs:\n                    url: https://docs.storageos.com/docs/reference/labels\n                  type: object\n                version:\n                  description: |\n                    An opaque representation of an entity version at the time it was obtained from the API.\n                    All operations that mutate the entity must include this version field in the request unchanged.\n                    The format of this type is undefined and may change but the defined properties will not change.\n                  example: NDI0MjQyNDI0MjQyNDI0MjQy\n                  maxLength: 30\n                  type: string\n              title: UpdateNamespaceData\n              type: object\n        description: The new namespace data to store.\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Namespace'\n          description: The namespace was successfully updated\n        \"400\":\n          content:\n            application/json:\n              example:\n                error: a short description of the validation failure\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request does not conform to the API specification.\n        \"401\":\n          content:\n            application/json:\n              example:\n                error: authentication required\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The requested endpoint requires authentication - you must log in first.\n            If attempting to log in, your credentials were not recognised.\n        \"403\":\n          content:\n            application/json:\n              example:\n                error: unauthorised\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The authenticated user does not have permission to perform the requested action.\n        \"404\":\n          content:\n            application/json:\n              example:\n                error: not found\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            A referenced resource does not exist.\n        \"412\":\n          content:\n            application/json:\n              example:\n                error: attempting to write stale object\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The entity to be wrote has been concurrently updated by another request - the submitted entity data has been replaced.\n            The caller should fetch the entity again, check the actions are still required and resubmit the request with the new entity version field.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The request caused an internal server error and should be retried.\n            Check the health of the node/cluster and if the error persists, contact support.\n        \"503\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The server is currently unable to handle the request due to a temporary store failure.\n            Check the health of the node/cluster and if the error persists, contact support.\n      security:\n      - jwt: []\n      summary: Update a namespace\n  /nodes:\n    get:\n      description: Fetch the list of nodes of the cluster.\n      operationId: listNodes\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NodeList'\n          description: A list of cluster nodes.\n        \"401\":\n          content:\n            application/json:\n              example:\n                error: authentication required\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The requested endpoint requires authentication - you must log in first.\n            If attempting to log in, your credentials were not recognised.\n        \"403\":\n          content:\n            application/json:\n              example:\n                error: unauthorised\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The authenticated user does not have permission to perform the requested action.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The request caused an internal server error and should be retried.\n            Check the health of the node/cluster and if the error persists, contact support.\n        \"503\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The server is currently unable to handle the request due to a temporary store failure.\n            Check the health of the node/cluster and if the error persists, contact support.\n      security:\n      - jwt: []\n      summary: Fetch the list of nodes\n  /nodes/{id}:\n    delete:\n      description: |\n        Remove the node identified by id.\n        A node can only be deleted if it is currently offline and does not host any master deployments.\n      operationId: deleteNode\n      parameters:\n      - description: ID of a node\n        explode: false\n        in: path\n        name: id\n        required: true\n        schema:\n          $ref: '#/components/schemas/NodeID'\n        style: simple\n      - description: |\n          This value is used to perform a conditional delete or update of the entity.\n          If the entity has been modified since the version token was obtained, the request will fail with a HTTP 409 Conflict.\n        explode: true\n        in: query\n        name: version\n        required: true\n        schema:\n          $ref: '#/components/schemas/Version'\n        style: form\n      - description: |\n          If set to true this value indicates that the user wants to ignore entity version constraints, thereby \"forcing\" the operation.\n        explode: true\n        in: query\n        name: ignore-version\n        required: false\n        schema:\n          $ref: '#/components/schemas/IgnoreVersion'\n        style: form\n      - description: |\n          Optional parameter which will make the api request asynchronous. The operation will not be cancelled even if the client disconnect.\n          The URL parameter value overrides the \"async-max\" header value, if any.\n          The value of this header defines the timeout duration for the request, it must be set to a valid duration string.\n          A duration string is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\", or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\".\n          We reject negative or nil duration values.\n        explode: true\n        in: query\n        name: async-max\n        required: false\n        schema:\n          type: string\n        style: form\n      responses:\n        \"200\":\n          description: The node was successfully deleted.\n        \"202\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AcceptedMessage'\n          description: |\n            An aynchronous request has been accepted\n        \"400\":\n          content:\n            application/json:\n              example:\n                error: a short description of the validation failure\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request does not conform to the API specification.\n        \"401\":\n          content:\n            application/json:\n              example:\n                error: authentication required\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The requested endpoint requires authentication - you must log in first.\n            If attempting to log in, your credentials were not recognised.\n        \"403\":\n          content:\n            application/json:\n              example:\n                error: unauthorised\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The authenticated user does not have permission to perform the requested action.\n        \"404\":\n          content:\n            application/json:\n              example:\n                error: not found\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            A referenced resource does not exist.\n        \"409\":\n          content:\n            application/json:\n              example:\n                error: in use\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            A referenced entity is currently in use.\n        \"412\":\n          content:\n            application/json:\n              example:\n                error: attempting to write stale object\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The entity to be wrote has been concurrently updated by another request - the submitted entity data has been replaced.\n            The caller should fetch the entity again, check the actions are still required and resubmit the request with the new entity version field.\n        \"423\":\n          content:\n            application/json:\n              example:\n                error: entity locked\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            A lock is held for the target entity, preventing the operation to be carried out safely.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The request caused an internal server error and should be retried.\n            Check the health of the node/cluster and if the error persists, contact support.\n        \"503\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The server is currently unable to handle the request due to a temporary store failure.\n            Check the health of the node/cluster and if the error persists, contact support.\n      security:\n      - jwt: []\n      summary: Delete a node\n    get:\n      description: Fetch the node identified by id.\n      operationId: getNode\n      parameters:\n      - description: ID of a node\n        explode: false\n        in: path\n        name: id\n        required: true\n        schema:\n          $ref: '#/components/schemas/NodeID'\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Node'\n          description: The node information.\n        \"401\":\n          content:\n            application/json:\n              example:\n                error: authentication required\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The requested endpoint requires authentication - you must log in first.\n            If attempting to log in, your credentials were not recognised.\n        \"403\":\n          content:\n            application/json:\n              example:\n                error: unauthorised\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The authenticated user does not have permission to perform the requested action.\n        \"404\":\n          content:\n            application/json:\n              example:\n                error: not found\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            A referenced resource does not exist.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The request caused an internal server error and should be retried.\n            Check the health of the node/cluster and if the error persists, contact support.\n        \"503\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The server is currently unable to handle the request due to a temporary store failure.\n            Check the health of the node/cluster and if the error persists, contact support.\n      security:\n      - jwt: []\n      summary: Fetch a node\n    put:\n      description: |\n        Update the non-storageos labels configured for the node  identified by id.\n      operationId: updateNode\n      parameters:\n      - description: ID of a node\n        explode: false\n        in: path\n        name: id\n        required: true\n        schema:\n          $ref: '#/components/schemas/NodeID'\n        style: simple\n      requestBody:\n        $ref: '#/components/requestBodies/UpdateNodeData'\n        content:\n          application/json:\n            schema:\n              example:\n                version: NDI0MjQyNDI0MjQyNDI0MjQy\n                labels:\n                  env: prod\n                  rack: db-1\n              properties:\n                labels:\n                  additionalProperties:\n                    type: string\n                  description: |\n                    A set of arbitrary key value labels to apply to the entity.\n                  example:\n                    env: prod\n                    rack: db-1\n                  externalDocs:\n                    url: https://docs.storageos.com/docs/reference/labels\n                  type: object\n                version:\n                  description: |\n                    An opaque representation of an entity version at the time it was obtained from the API.\n                    All operations that mutate the entity must include this version field in the request unchanged.\n                    The format of this type is undefined and may change but the defined properties will not change.\n                  example: NDI0MjQyNDI0MjQyNDI0MjQy\n                  maxLength: 30\n                  type: string\n              title: UpdateNodeData\n              type: object\n        description: \"Update the label configuration of the node to the desired state.\\\n          \\ Alterations of StorageOS labels are rejected. \\n\"\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Node'\n          description: The node was successfully updated\n        \"400\":\n          content:\n            application/json:\n              example:\n                error: a short description of the validation failure\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request does not conform to the API specification.\n        \"401\":\n          content:\n            application/json:\n              example:\n                error: authentication required\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The requested endpoint requires authentication - you must log in first.\n            If attempting to log in, your credentials were not recognised.\n        \"403\":\n          content:\n            application/json:\n              example:\n                error: unauthorised\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The authenticated user does not have permission to perform the requested action.\n        \"404\":\n          content:\n            application/json:\n              example:\n                error: not found\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            A referenced resource does not exist.\n        \"412\":\n          content:\n            application/json:\n              example:\n                error: attempting to write stale object\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The entity to be wrote has been concurrently updated by another request - the submitted entity data has been replaced.\n            The caller should fetch the entity again, check the actions are still required and resubmit the request with the new entity version field.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The request caused an internal server error and should be retried.\n            Check the health of the node/cluster and if the error persists, contact support.\n        \"503\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The server is currently unable to handle the request due to a temporary store failure.\n            Check the health of the node/cluster and if the error persists, contact support.\n      security:\n      - jwt: []\n      summary: Update a node\n  /nodes/{id}/compute-only:\n    put:\n      description: |\n        Set the compute-only configuration state for the node corresponding  to id given by the request.\n      operationId: setComputeOnly\n      parameters:\n      - description: ID of a Node\n        explode: false\n        in: path\n        name: id\n        required: true\n        schema:\n          $ref: '#/components/schemas/NodeID'\n        style: simple\n      - description: |\n          If set to true this value indicates that the user wants to ignore entity version constraints, thereby \"forcing\" the operation.\n        explode: true\n        in: query\n        name: ignore-version\n        required: false\n        schema:\n          $ref: '#/components/schemas/IgnoreVersion'\n        style: form\n      requestBody:\n        $ref: '#/components/requestBodies/SetComputeOnlyNodeData'\n        content:\n          application/json:\n            schema:\n              example:\n                computeOnly: true\n                version: NDI0MjQyNDI0MjQyNDI0MjQy\n              properties:\n                computeOnly:\n                  description: |\n                    Marks the node's desired configuration  state as compute-only. This will result in the node being avoided for volume placement\n                  example: true\n                  type: boolean\n                version:\n                  description: |\n                    An opaque representation of an entity version at the time it was obtained from the API.\n                    All operations that mutate the entity must include this version field in the request unchanged.\n                    The format of this type is undefined and may change but the defined properties will not change.\n                  example: NDI0MjQyNDI0MjQyNDI0MjQy\n                  maxLength: 30\n                  type: string\n              title: SetComputeOnlyNodeData\n              type: object\n        description: Desired compute-only configuration state for the node.\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Node'\n          description: The node was successfullly updated\n        \"400\":\n          content:\n            application/json:\n              example:\n                error: a short description of the validation failure\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request does not conform to the API specification.\n        \"401\":\n          content:\n            application/json:\n              example:\n                error: authentication required\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The requested endpoint requires authentication - you must log in first.\n            If attempting to log in, your credentials were not recognised.\n        \"403\":\n          content:\n            application/json:\n              example:\n                error: unauthorised\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The authenticated user does not have permission to perform the requested action.\n        \"404\":\n          content:\n            application/json:\n              example:\n                error: not found\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            A referenced resource does not exist.\n        \"412\":\n          content:\n            application/json:\n              example:\n                error: attempting to write stale object\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The entity to be wrote has been concurrently updated by another request - the submitted entity data has been replaced.\n            The caller should fetch the entity again, check the actions are still required and resubmit the request with the new entity version field.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The request caused an internal server error and should be retried.\n            Check the health of the node/cluster and if the error persists, contact support.\n        \"503\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The server is currently unable to handle the request due to a temporary store failure.\n            Check the health of the node/cluster and if the error persists, contact support.\n      security:\n      - jwt: []\n      summary: Modify the computeonly behaviour state for a node\n  /policies:\n    get:\n      description: Fetch the list of policy groups in the cluster.\n      operationId: listPolicyGroups\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PolicyGroupList'\n          description: A list of cluster policy groups.\n        \"401\":\n          content:\n            application/json:\n              example:\n                error: authentication required\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The requested endpoint requires authentication - you must log in first.\n            If attempting to log in, your credentials were not recognised.\n        \"403\":\n          content:\n            application/json:\n              example:\n                error: unauthorised\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The authenticated user does not have permission to perform the requested action.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The request caused an internal server error and should be retried.\n            Check the health of the node/cluster and if the error persists, contact support.\n        \"503\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The server is currently unable to handle the request due to a temporary store failure.\n            Check the health of the node/cluster and if the error persists, contact support.\n      security:\n      - jwt: []\n      summary: Fetch the list of policy groups\n    post:\n      description: |\n        Create a new policy group in the cluster - only administrators can create new policy groups.\n      operationId: createPolicyGroup\n      requestBody:\n        $ref: '#/components/requestBodies/CreatePolicyGroupData'\n        content:\n          application/json:\n            schema:\n              example:\n                specs:\n                - namespaceID: 251f065a-d89b-4426-a752-5fdd144d00e8\n                  resourceType: '*'\n                  readOnly: false\n                - namespaceID: 5f009d1f-6618-43c2-9ae4-e699461dda8e\n                  resourceType: volume\n                  readOnly: true\n                name: dev-users\n              properties:\n                name:\n                  example: dev-users\n                  type: string\n                specs:\n                  default: []\n                  description: A set of authorisation policies to apply to the policy\n                    group.\n                  example:\n                  - namespaceID: 251f065a-d89b-4426-a752-5fdd144d00e8\n                    resourceType: '*'\n                    readOnly: false\n                  - namespaceID: 5f009d1f-6618-43c2-9ae4-e699461dda8e\n                    resourceType: volume\n                    readOnly: true\n                  items:\n                    $ref: '#/components/schemas/_policies_specs'\n                  nullable: true\n                  type: array\n              title: CreatePolicyGroupData\n              type: object\n        description: Data required to create a new policy group in the cluster.\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PolicyGroup'\n          description: The policy group was successfully created\n        \"400\":\n          content:\n            application/json:\n              example:\n                error: a short description of the validation failure\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request does not conform to the API specification.\n        \"401\":\n          content:\n            application/json:\n              example:\n                error: authentication required\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The requested endpoint requires authentication - you must log in first.\n            If attempting to log in, your credentials were not recognised.\n        \"403\":\n          content:\n            application/json:\n              example:\n                error: unauthorised\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The authenticated user does not have permission to perform the requested action.\n        \"409\":\n          content:\n            application/json:\n              example:\n                error: already exists\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The entity to be wrote uses an identifier that already exists.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The request caused an internal server error and should be retried.\n            Check the health of the node/cluster and if the error persists, contact support.\n        \"503\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The server is currently unable to handle the request due to a temporary store failure.\n            Check the health of the node/cluster and if the error persists, contact support.\n      security:\n      - jwt: []\n      summary: Create a new policy group\n  /policies/{id}:\n    delete:\n      description: Remove the policy group identified by id.\n      operationId: deletePolicyGroup\n      parameters:\n      - description: ID of a policy group\n        explode: false\n        in: path\n        name: id\n        required: true\n        schema:\n          $ref: '#/components/schemas/PolicyGroupID'\n        style: simple\n      - description: |\n          This value is used to perform a conditional delete or update of the entity.\n          If the entity has been modified since the version token was obtained, the request will fail with a HTTP 409 Conflict.\n        explode: true\n        in: query\n        name: version\n        required: true\n        schema:\n          $ref: '#/components/schemas/Version'\n        style: form\n      - description: |\n          If set to true this value indicates that the user wants to ignore entity version constraints, thereby \"forcing\" the operation.\n        explode: true\n        in: query\n        name: ignore-version\n        required: false\n        schema:\n          $ref: '#/components/schemas/IgnoreVersion'\n        style: form\n      responses:\n        \"200\":\n          description: The policy group was successfully deleted.\n        \"400\":\n          content:\n            application/json:\n              example:\n                error: a short description of the validation failure\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request does not conform to the API specification.\n        \"401\":\n          content:\n            application/json:\n              example:\n                error: authentication required\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The requested endpoint requires authentication - you must log in first.\n            If attempting to log in, your credentials were not recognised.\n        \"403\":\n          content:\n            application/json:\n              example:\n                error: unauthorised\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The authenticated user does not have permission to perform the requested action.\n        \"404\":\n          content:\n            application/json:\n              example:\n                error: not found\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            A referenced resource does not exist.\n        \"409\":\n          content:\n            application/json:\n              example:\n                error: in use\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            A referenced entity is currently in use.\n        \"412\":\n          content:\n            application/json:\n              example:\n                error: attempting to write stale object\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The entity to be wrote has been concurrently updated by another request - the submitted entity data has been replaced.\n            The caller should fetch the entity again, check the actions are still required and resubmit the request with the new entity version field.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The request caused an internal server error and should be retried.\n            Check the health of the node/cluster and if the error persists, contact support.\n        \"503\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The server is currently unable to handle the request due to a temporary store failure.\n            Check the health of the node/cluster and if the error persists, contact support.\n      security:\n      - jwt: []\n      summary: Delete a policy group\n    get:\n      description: Fetch the policy group identified by id.\n      operationId: getPolicyGroup\n      parameters:\n      - description: ID of a policy group\n        explode: false\n        in: path\n        name: id\n        required: true\n        schema:\n          $ref: '#/components/schemas/PolicyGroupID'\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PolicyGroup'\n          description: The policy group information.\n        \"400\":\n          content:\n            application/json:\n              example:\n                error: a short description of the validation failure\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request does not conform to the API specification.\n        \"401\":\n          content:\n            application/json:\n              example:\n                error: authentication required\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The requested endpoint requires authentication - you must log in first.\n            If attempting to log in, your credentials were not recognised.\n        \"403\":\n          content:\n            application/json:\n              example:\n                error: unauthorised\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The authenticated user does not have permission to perform the requested action.\n        \"404\":\n          content:\n            application/json:\n              example:\n                error: not found\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            A referenced resource does not exist.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The request caused an internal server error and should be retried.\n            Check the health of the node/cluster and if the error persists, contact support.\n        \"503\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The server is currently unable to handle the request due to a temporary store failure.\n            Check the health of the node/cluster and if the error persists, contact support.\n      security:\n      - jwt: []\n      summary: Fetch a policy group\n    put:\n      description: Update the policy group identified by id.\n      operationId: updatePolicyGroup\n      parameters:\n      - description: ID of a policy group\n        explode: false\n        in: path\n        name: id\n        required: true\n        schema:\n          $ref: '#/components/schemas/PolicyGroupID'\n        style: simple\n      - description: |\n          If set to true this value indicates that the user wants to ignore entity version constraints, thereby \"forcing\" the operation.\n        explode: true\n        in: query\n        name: ignore-version\n        required: false\n        schema:\n          $ref: '#/components/schemas/IgnoreVersion'\n        style: form\n      requestBody:\n        $ref: '#/components/requestBodies/UpdatePolicyGroupData'\n        content:\n          application/json:\n            schema:\n              example:\n                specs:\n                - namespaceID: 251f065a-d89b-4426-a752-5fdd144d00e8\n                  resourceType: '*'\n                  readOnly: false\n                - namespaceID: 5f009d1f-6618-43c2-9ae4-e699461dda8e\n                  resourceType: volume\n                  readOnly: true\n                version: NDI0MjQyNDI0MjQyNDI0MjQy\n              properties:\n                specs:\n                  default: []\n                  description: A set of authorisation policies to apply to the policy\n                    group.\n                  example:\n                  - namespaceID: 251f065a-d89b-4426-a752-5fdd144d00e8\n                    resourceType: '*'\n                    readOnly: false\n                  - namespaceID: 5f009d1f-6618-43c2-9ae4-e699461dda8e\n                    resourceType: volume\n                    readOnly: true\n                  items:\n                    $ref: '#/components/schemas/_policies__id__specs'\n                  nullable: true\n                  type: array\n                version:\n                  description: |\n                    An opaque representation of an entity version at the time it was obtained from the API.\n                    All operations that mutate the entity must include this version field in the request unchanged.\n                    The format of this type is undefined and may change but the defined properties will not change.\n                  example: NDI0MjQyNDI0MjQyNDI0MjQy\n                  maxLength: 30\n                  type: string\n              title: UpdatePolicyGroupData\n              type: object\n        description: The new policy group data to store.\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PolicyGroup'\n          description: The policy group was successfully updated\n        \"400\":\n          content:\n            application/json:\n              example:\n                error: a short description of the validation failure\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request does not conform to the API specification.\n        \"401\":\n          content:\n            application/json:\n              example:\n                error: authentication required\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The requested endpoint requires authentication - you must log in first.\n            If attempting to log in, your credentials were not recognised.\n        \"403\":\n          content:\n            application/json:\n              example:\n                error: unauthorised\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The authenticated user does not have permission to perform the requested action.\n        \"404\":\n          content:\n            application/json:\n              example:\n                error: not found\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            A referenced resource does not exist.\n        \"412\":\n          content:\n            application/json:\n              example:\n                error: attempting to write stale object\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The entity to be wrote has been concurrently updated by another request - the submitted entity data has been replaced.\n            The caller should fetch the entity again, check the actions are still required and resubmit the request with the new entity version field.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The request caused an internal server error and should be retried.\n            Check the health of the node/cluster and if the error persists, contact support.\n        \"503\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The server is currently unable to handle the request due to a temporary store failure.\n            Check the health of the node/cluster and if the error persists, contact support.\n      security:\n      - jwt: []\n      summary: Update a policy group\n  /namespaces/{namespaceID}/volumes:\n    get:\n      description: Fetch the list of volumes in the cluster.\n      operationId: listVolumes\n      parameters:\n      - description: ID of a Namespace\n        explode: false\n        in: path\n        name: namespaceID\n        required: true\n        schema:\n          $ref: '#/components/schemas/NamespaceID'\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VolumeList'\n          description: A list of the namespace's volumes.\n        \"401\":\n          content:\n            application/json:\n              example:\n                error: authentication required\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The requested endpoint requires authentication - you must log in first.\n            If attempting to log in, your credentials were not recognised.\n        \"403\":\n          content:\n            application/json:\n              example:\n                error: unauthorised\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The authenticated user does not have permission to perform the requested action.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The request caused an internal server error and should be retried.\n            Check the health of the node/cluster and if the error persists, contact support.\n        \"503\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The server is currently unable to handle the request due to a temporary store failure.\n            Check the health of the node/cluster and if the error persists, contact support.\n      security:\n      - jwt: []\n      summary: Fetch the list of volumes in the given namespace\n    post:\n      description: Create a new volume in the given namespace\n      operationId: createVolume\n      parameters:\n      - description: ID of a Namespace\n        explode: false\n        in: path\n        name: namespaceID\n        required: true\n        schema:\n          $ref: '#/components/schemas/NamespaceID'\n        style: simple\n      - description: |\n          Optional parameter which will make the api request asynchronous. The operation will not be cancelled even if the client disconnect.\n          The URL parameter value overrides the \"async-max\" header value, if any.\n          The value of this header defines the timeout duration for the request, it must be set to a valid duration string.\n          A duration string is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\", or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\".\n          We reject negative or nil duration values.\n        explode: true\n        in: query\n        name: async-max\n        required: false\n        schema:\n          type: string\n        style: form\n      requestBody:\n        $ref: '#/components/requestBodies/CreateVolumeData'\n        content:\n          application/json:\n            schema:\n              example:\n                namespaceID: c5666b58-b805-4215-ab4a-cb094948ccc6\n                name: data\n                description: This volume contains the data for my app\n                fsType: ext4\n                labels:\n                  env: prod\n                  rack: db-1\n                sizeBytes: 5000\n              properties:\n                namespaceID:\n                  description: |\n                    A unique identifier for a namespace. The format of this type is undefined and may change but the defined properties will not change..\n                  example: c5666b58-b805-4215-ab4a-cb094948ccc6\n                  type: string\n                labels:\n                  additionalProperties:\n                    type: string\n                  description: |\n                    A set of arbitrary key value labels to apply to the entity.\n                  example:\n                    env: prod\n                    rack: db-1\n                  externalDocs:\n                    url: https://docs.storageos.com/docs/reference/labels\n                  type: object\n                name:\n                  description: |\n                    The name of the volume shown in the CLI and UI\n                  example: data\n                  pattern: ^[a-z0-9.\\-]{1,253}$\n                  type: string\n                fsType:\n                  $ref: '#/components/schemas/FsType'\n                description:\n                  example: This volume contains the data for my app\n                  type: string\n                sizeBytes:\n                  description: |\n                    A volume's size in bytes\n                  example: 5000\n                  minimum: 0\n                  type: uint64\n              required:\n              - fsType\n              - name\n              - namespaceID\n              - sizeBytes\n              title: CreateVolumeData\n              type: object\n        description: Data required to create a new volume in the cluster.\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Volume'\n          description: The volume was successfully created\n        \"202\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AcceptedMessage'\n          description: |\n            An aynchronous request has been accepted\n        \"400\":\n          content:\n            application/json:\n              example:\n                error: a short description of the validation failure\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request does not conform to the API specification.\n        \"401\":\n          content:\n            application/json:\n              example:\n                error: authentication required\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The requested endpoint requires authentication - you must log in first.\n            If attempting to log in, your credentials were not recognised.\n        \"403\":\n          content:\n            application/json:\n              example:\n                error: unauthorised\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The authenticated user does not have permission to perform the requested action.\n        \"409\":\n          content:\n            application/json:\n              example:\n                error: already exists\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The entity to be wrote uses an identifier that already exists.\n        \"451\":\n          content:\n            application/json:\n              example:\n                error: insufficient allowed capacity (bytes) (used 53687091200, allowed\n                  53687091200, requested 5000000)\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The requested operation failed because your storageOS licence does not allow it, either create an account for a free licence or buy a professional licence.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The request caused an internal server error and should be retried.\n            Check the health of the node/cluster and if the error persists, contact support.\n        \"503\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The server is currently unable to handle the request due to a temporary store failure.\n            Check the health of the node/cluster and if the error persists, contact support.\n        \"507\":\n          content:\n            application/json:\n              example:\n                error: insufficient storage capacity available\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            Available storage is not enough to handle the request or target node has reached maximum number of attached volumes.\n      security:\n      - jwt: []\n      summary: Create a new Volume in the specified namespace\n  /namespaces/{namespaceID}/volumes/{id}:\n    delete:\n      description: Remove the volume identified by id.\n      operationId: deleteVolume\n      parameters:\n      - description: ID of a Namespace\n        explode: false\n        in: path\n        name: namespaceID\n        required: true\n        schema:\n          $ref: '#/components/schemas/NamespaceID'\n        style: simple\n      - description: ID of a Volume\n        explode: false\n        in: path\n        name: id\n        required: true\n        schema:\n          $ref: '#/components/schemas/VolumeID'\n        style: simple\n      - description: |\n          This value is used to perform a conditional delete or update of the entity.\n          If the entity has been modified since the version token was obtained, the request will fail with a HTTP 409 Conflict.\n        explode: true\n        in: query\n        name: version\n        required: true\n        schema:\n          $ref: '#/components/schemas/Version'\n        style: form\n      - description: |\n          If set to true this value indicates that the user wants to ignore entity version constraints, thereby \"forcing\" the operation.\n        explode: true\n        in: query\n        name: ignore-version\n        required: false\n        schema:\n          $ref: '#/components/schemas/IgnoreVersion'\n        style: form\n      - description: |\n          Optional parameter which will make the api request asynchronous. The operation will not be cancelled even if the client disconnect.\n          The URL parameter value overrides the \"async-max\" header value, if any.\n          The value of this header defines the timeout duration for the request, it must be set to a valid duration string.\n          A duration string is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\", or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\".\n          We reject negative or nil duration values.\n        explode: true\n        in: query\n        name: async-max\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: |\n          If set to true, enables deletion of a volume when all  deployments are offline, bypassing the host nodes which cannot be reached.\n          An offline delete request will be rejected when either a) there are online deployments for the target volume or b) there is evidence that an unreachable node still has the volume master\n        explode: true\n        in: query\n        name: offline-delete\n        required: false\n        schema:\n          default: false\n          example: true\n          type: boolean\n        style: form\n      responses:\n        \"200\":\n          description: The volume was successfully deleted.\n        \"202\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AcceptedMessage'\n          description: |\n            An aynchronous request has been accepted\n        \"400\":\n          content:\n            application/json:\n              example:\n                error: a short description of the validation failure\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request does not conform to the API specification.\n        \"401\":\n          content:\n            application/json:\n              example:\n                error: authentication required\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The requested endpoint requires authentication - you must log in first.\n            If attempting to log in, your credentials were not recognised.\n        \"403\":\n          content:\n            application/json:\n              example:\n                error: unauthorised\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The authenticated user does not have permission to perform the requested action.\n        \"404\":\n          content:\n            application/json:\n              example:\n                error: not found\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            A referenced resource does not exist.\n        \"409\":\n          content:\n            application/json:\n              example:\n                error: in use\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            A referenced entity is currently in use.\n        \"412\":\n          content:\n            application/json:\n              example:\n                error: attempting to write stale object\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The entity to be wrote has been concurrently updated by another request - the submitted entity data has been replaced.\n            The caller should fetch the entity again, check the actions are still required and resubmit the request with the new entity version field.\n        \"422\":\n          content:\n            application/json:\n              example:\n                error: invalid state for operation (currently \"deleted\")\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            An action was requested that cannot be performed on the entity in it's current state.\n            As an example, this error might be returned when trying to delete a currently mounted volume.\n        \"423\":\n          content:\n            application/json:\n              example:\n                error: entity locked\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            A lock is held for the target entity, preventing the operation to be carried out safely.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The request caused an internal server error and should be retried.\n            Check the health of the node/cluster and if the error persists, contact support.\n        \"503\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The server is currently unable to handle the request due to a temporary store failure.\n            Check the health of the node/cluster and if the error persists, contact support.\n      security:\n      - jwt: []\n      summary: Delete a volume\n    get:\n      description: Fetch the volume identified by id.\n      operationId: getVolume\n      parameters:\n      - description: ID of a Namespace\n        explode: false\n        in: path\n        name: namespaceID\n        required: true\n        schema:\n          $ref: '#/components/schemas/NamespaceID'\n        style: simple\n      - description: ID of a Volume\n        explode: false\n        in: path\n        name: id\n        required: true\n        schema:\n          $ref: '#/components/schemas/VolumeID'\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Volume'\n          description: The volume information.\n        \"400\":\n          content:\n            application/json:\n              example:\n                error: a short description of the validation failure\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request does not conform to the API specification.\n        \"401\":\n          content:\n            application/json:\n              example:\n                error: authentication required\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The requested endpoint requires authentication - you must log in first.\n            If attempting to log in, your credentials were not recognised.\n        \"403\":\n          content:\n            application/json:\n              example:\n                error: unauthorised\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The authenticated user does not have permission to perform the requested action.\n        \"404\":\n          content:\n            application/json:\n              example:\n                error: not found\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            A referenced resource does not exist.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The request caused an internal server error and should be retried.\n            Check the health of the node/cluster and if the error persists, contact support.\n        \"503\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The server is currently unable to handle the request due to a temporary store failure.\n            Check the health of the node/cluster and if the error persists, contact support.\n      security:\n      - jwt: []\n      summary: Fetch a volume\n    put:\n      description: |\n        Update the description and non-storageos labels configured for the volume identified by id.\n      operationId: updateVolume\n      parameters:\n      - description: ID of a Namespace\n        explode: false\n        in: path\n        name: namespaceID\n        required: true\n        schema:\n          $ref: '#/components/schemas/NamespaceID'\n        style: simple\n      - description: ID of a Volume\n        explode: false\n        in: path\n        name: id\n        required: true\n        schema:\n          $ref: '#/components/schemas/VolumeID'\n        style: simple\n      - description: |\n          If set to true this value indicates that the user wants to ignore entity version constraints, thereby \"forcing\" the operation.\n        explode: true\n        in: query\n        name: ignore-version\n        required: false\n        schema:\n          $ref: '#/components/schemas/IgnoreVersion'\n        style: form\n      - description: |\n          Optional parameter which will make the api request asynchronous. The operation will not be cancelled even if the client disconnect.\n          The URL parameter value overrides the \"async-max\" header value, if any.\n          The value of this header defines the timeout duration for the request, it must be set to a valid duration string.\n          A duration string is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\", or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\".\n          We reject negative or nil duration values.\n        explode: true\n        in: query\n        name: async-max\n        required: false\n        schema:\n          type: string\n        style: form\n      requestBody:\n        $ref: '#/components/requestBodies/UpdateVolumeData'\n        content:\n          application/json:\n            schema:\n              example:\n                description: This volume contains the data for my app\n                version: NDI0MjQyNDI0MjQyNDI0MjQy\n                labels:\n                  env: prod\n                  rack: db-1\n              properties:\n                labels:\n                  additionalProperties:\n                    type: string\n                  description: |\n                    A set of arbitrary key value labels to apply to the entity.\n                  example:\n                    env: prod\n                    rack: db-1\n                  externalDocs:\n                    url: https://docs.storageos.com/docs/reference/labels\n                  type: object\n                description:\n                  example: This volume contains the data for my app\n                  type: string\n                version:\n                  description: |\n                    An opaque representation of an entity version at the time it was obtained from the API.\n                    All operations that mutate the entity must include this version field in the request unchanged.\n                    The format of this type is undefined and may change but the defined properties will not change.\n                  example: NDI0MjQyNDI0MjQyNDI0MjQy\n                  maxLength: 30\n                  type: string\n              title: UpdateVolumeData\n              type: object\n        description: |\n          Update the volume description and label configuration to the desired state. Alterations of StorageOS labels are rejected.\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Volume'\n          description: The volume was successfully updated\n        \"400\":\n          content:\n            application/json:\n              example:\n                error: a short description of the validation failure\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request does not conform to the API specification.\n        \"401\":\n          content:\n            application/json:\n              example:\n                error: authentication required\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The requested endpoint requires authentication - you must log in first.\n            If attempting to log in, your credentials were not recognised.\n        \"403\":\n          content:\n            application/json:\n              example:\n                error: unauthorised\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The authenticated user does not have permission to perform the requested action.\n        \"404\":\n          content:\n            application/json:\n              example:\n                error: not found\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            A referenced resource does not exist.\n        \"412\":\n          content:\n            application/json:\n              example:\n                error: attempting to write stale object\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The entity to be wrote has been concurrently updated by another request - the submitted entity data has been replaced.\n            The caller should fetch the entity again, check the actions are still required and resubmit the request with the new entity version field.\n        \"451\":\n          content:\n            application/json:\n              example:\n                error: insufficient allowed capacity (bytes) (used 53687091200, allowed\n                  53687091200, requested 5000000)\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The requested operation failed because your storageOS licence does not allow it, either create an account for a free licence or buy a professional licence.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The request caused an internal server error and should be retried.\n            Check the health of the node/cluster and if the error persists, contact support.\n        \"503\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The server is currently unable to handle the request due to a temporary store failure.\n            Check the health of the node/cluster and if the error persists, contact support.\n      security:\n      - jwt: []\n      summary: Update a volume\n  /namespaces/{namespaceID}/volumes/{id}/attach:\n    delete:\n      description: Detach the volume identified by id.\n      operationId: detachVolume\n      parameters:\n      - description: ID of a Namespace\n        explode: false\n        in: path\n        name: namespaceID\n        required: true\n        schema:\n          $ref: '#/components/schemas/NamespaceID'\n        style: simple\n      - description: ID of a Volume\n        explode: false\n        in: path\n        name: id\n        required: true\n        schema:\n          $ref: '#/components/schemas/VolumeID'\n        style: simple\n      - description: |\n          This value is used to perform a conditional delete or update of the entity.\n          If the entity has been modified since the version token was obtained, the request will fail with a HTTP 409 Conflict.\n        explode: true\n        in: query\n        name: version\n        required: true\n        schema:\n          $ref: '#/components/schemas/Version'\n        style: form\n      - description: |\n          If set to true this value indicates that the user wants to ignore entity version constraints, thereby \"forcing\" the operation.\n        explode: true\n        in: query\n        name: ignore-version\n        required: false\n        schema:\n          $ref: '#/components/schemas/IgnoreVersion'\n        style: form\n      - description: |\n          Optional parameter which will make the api request asynchronous. The operation will not be cancelled even if the client disconnect.\n          The URL parameter value overrides the \"async-max\" header value, if any.\n          The value of this header defines the timeout duration for the request, it must be set to a valid duration string.\n          A duration string is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\", or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\".\n          We reject negative or nil duration values.\n        explode: true\n        in: query\n        name: async-max\n        required: false\n        schema:\n          type: string\n        style: form\n      responses:\n        \"200\":\n          description: The volume was successfully detached.\n        \"400\":\n          content:\n            application/json:\n              example:\n                error: a short description of the validation failure\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request does not conform to the API specification.\n        \"401\":\n          content:\n            application/json:\n              example:\n                error: authentication required\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The requested endpoint requires authentication - you must log in first.\n            If attempting to log in, your credentials were not recognised.\n        \"403\":\n          content:\n            application/json:\n              example:\n                error: unauthorised\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The authenticated user does not have permission to perform the requested action.\n        \"404\":\n          content:\n            application/json:\n              example:\n                error: not found\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            A referenced resource does not exist.\n        \"409\":\n          content:\n            application/json:\n              example:\n                error: in use\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            A referenced entity is currently in use.\n        \"412\":\n          content:\n            application/json:\n              example:\n                error: attempting to write stale object\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The entity to be wrote has been concurrently updated by another request - the submitted entity data has been replaced.\n            The caller should fetch the entity again, check the actions are still required and resubmit the request with the new entity version field.\n        \"422\":\n          content:\n            application/json:\n              example:\n                error: invalid state for operation (currently \"deleted\")\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            An action was requested that cannot be performed on the entity in it's current state.\n            As an example, this error might be returned when trying to delete a currently mounted volume.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The request caused an internal server error and should be retried.\n            Check the health of the node/cluster and if the error persists, contact support.\n        \"503\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The server is currently unable to handle the request due to a temporary store failure.\n            Check the health of the node/cluster and if the error persists, contact support.\n      security:\n      - jwt: []\n      summary: Detach the given volume\n    post:\n      description: |\n        Attach the volume identified by id to the node identified in the request's body.\n      operationId: attachVolume\n      parameters:\n      - description: ID of a Namespace\n        explode: false\n        in: path\n        name: namespaceID\n        required: true\n        schema:\n          $ref: '#/components/schemas/NamespaceID'\n        style: simple\n      - description: ID of a Volume\n        explode: false\n        in: path\n        name: id\n        required: true\n        schema:\n          $ref: '#/components/schemas/VolumeID'\n        style: simple\n      requestBody:\n        $ref: '#/components/requestBodies/AttachVolumeData'\n        content:\n          application/json:\n            schema:\n              example:\n                nodeID: c5666b58-b805-4215-ab4a-cb094948ccc6\n              properties:\n                nodeID:\n                  description: |\n                    A unique identifier for a node. The format of this type is undefined and may change but the defined properties will not change.\n                  example: c5666b58-b805-4215-ab4a-cb094948ccc6\n                  readOnly: true\n                  type: string\n              title: AttachVolumeData\n              type: object\n        description: Node ID to which the volume will be attached.\n        required: true\n      responses:\n        \"200\":\n          description: The volume was successfully attached.\n        \"400\":\n          content:\n            application/json:\n              example:\n                error: a short description of the validation failure\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request does not conform to the API specification.\n        \"401\":\n          content:\n            application/json:\n              example:\n                error: authentication required\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The requested endpoint requires authentication - you must log in first.\n            If attempting to log in, your credentials were not recognised.\n        \"403\":\n          content:\n            application/json:\n              example:\n                error: unauthorised\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The authenticated user does not have permission to perform the requested action.\n        \"404\":\n          content:\n            application/json:\n              example:\n                error: not found\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            A referenced resource does not exist.\n        \"409\":\n          content:\n            application/json:\n              example:\n                error: in use\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            A referenced entity is currently in use.\n        \"422\":\n          content:\n            application/json:\n              example:\n                error: invalid state for operation (currently \"deleted\")\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            An action was requested that cannot be performed on the entity in it's current state.\n            As an example, this error might be returned when trying to delete a currently mounted volume.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The request caused an internal server error and should be retried.\n            Check the health of the node/cluster and if the error persists, contact support.\n        \"507\":\n          content:\n            application/json:\n              example:\n                error: insufficient storage capacity available\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            Available storage is not enough to handle the request or target node has reached maximum number of attached volumes.\n      security:\n      - jwt: []\n      summary: Attach a volume to the given node\n  /namespaces/{namespaceID}/volumes/{id}/nfs/attach:\n    post:\n      description: |\n        Attach the given volume as an NFS volume.\n        If no export configuration has been set via the /nfs/export-config endpoint, the nfs service will start with defaults settings (sharing the volume at its root).\n      operationId: attachNFSVolume\n      parameters:\n      - description: ID of a Namespace\n        explode: false\n        in: path\n        name: namespaceID\n        required: true\n        schema:\n          $ref: '#/components/schemas/NamespaceID'\n        style: simple\n      - description: ID of a Volume\n        explode: false\n        in: path\n        name: id\n        required: true\n        schema:\n          $ref: '#/components/schemas/VolumeID'\n        style: simple\n      - description: |\n          If set to true this value indicates that the user wants to ignore entity version constraints, thereby \"forcing\" the operation.\n        explode: true\n        in: query\n        name: ignore-version\n        required: false\n        schema:\n          $ref: '#/components/schemas/IgnoreVersion'\n        style: form\n      - description: |\n          Optional parameter which will make the api request asynchronous. The operation will not be cancelled even if the client disconnect.\n          The URL parameter value overrides the \"async-max\" header value, if any.\n          The value of this header defines the timeout duration for the request, it must be set to a valid duration string.\n          A duration string is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\", or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\".\n          We reject negative or nil duration values.\n        explode: true\n        in: query\n        name: async-max\n        required: false\n        schema:\n          type: string\n        style: form\n      requestBody:\n        $ref: '#/components/requestBodies/AttachNFSVolumeData'\n        content:\n          application/json:\n            schema:\n              properties:\n                version:\n                  description: |\n                    An opaque representation of an entity version at the time it was obtained from the API.\n                    All operations that mutate the entity must include this version field in the request unchanged.\n                    The format of this type is undefined and may change but the defined properties will not change.\n                  example: NDI0MjQyNDI0MjQyNDI0MjQy\n                  maxLength: 30\n                  type: string\n              title: AttachNFSVolumeData\n              type: object\n        description: NFS volume configuration. The version is the corresponding volume's\n          version.\n        required: true\n      responses:\n        \"200\":\n          description: The volume was successfully attached.\n        \"400\":\n          content:\n            application/json:\n              example:\n                error: a short description of the validation failure\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request does not conform to the API specification.\n        \"401\":\n          content:\n            application/json:\n              example:\n                error: authentication required\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The requested endpoint requires authentication - you must log in first.\n            If attempting to log in, your credentials were not recognised.\n        \"403\":\n          content:\n            application/json:\n              example:\n                error: unauthorised\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The authenticated user does not have permission to perform the requested action.\n        \"404\":\n          content:\n            application/json:\n              example:\n                error: not found\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            A referenced resource does not exist.\n        \"409\":\n          content:\n            application/json:\n              example:\n                error: in use\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            A referenced entity is currently in use.\n        \"412\":\n          content:\n            application/json:\n              example:\n                error: attempting to write stale object\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The entity to be wrote has been concurrently updated by another request - the submitted entity data has been replaced.\n            The caller should fetch the entity again, check the actions are still required and resubmit the request with the new entity version field.\n        \"422\":\n          content:\n            application/json:\n              example:\n                error: invalid state for operation (currently \"deleted\")\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            An action was requested that cannot be performed on the entity in it's current state.\n            As an example, this error might be returned when trying to delete a currently mounted volume.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The request caused an internal server error and should be retried.\n            Check the health of the node/cluster and if the error persists, contact support.\n      security:\n      - jwt: []\n      summary: attach and share the volume using NFS\n  /namespaces/{namespaceID}/volumes/{id}/nfs/mount-endpoint:\n    put:\n      description: |\n        Update the NFS volume's mount endpoint\n      operationId: updateNFSVolumeMountEndpoint\n      parameters:\n      - description: ID of a Namespace\n        explode: false\n        in: path\n        name: namespaceID\n        required: true\n        schema:\n          $ref: '#/components/schemas/NamespaceID'\n        style: simple\n      - description: ID of a Volume\n        explode: false\n        in: path\n        name: id\n        required: true\n        schema:\n          $ref: '#/components/schemas/VolumeID'\n        style: simple\n      - description: |\n          If set to true this value indicates that the user wants to ignore entity version constraints, thereby \"forcing\" the operation.\n        explode: true\n        in: query\n        name: ignore-version\n        required: false\n        schema:\n          $ref: '#/components/schemas/IgnoreVersion'\n        style: form\n      - description: |\n          Optional parameter which will make the api request asynchronous. The operation will not be cancelled even if the client disconnect.\n          The URL parameter value overrides the \"async-max\" header value, if any.\n          The value of this header defines the timeout duration for the request, it must be set to a valid duration string.\n          A duration string is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\", or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\".\n          We reject negative or nil duration values.\n        explode: true\n        in: query\n        name: async-max\n        required: false\n        schema:\n          type: string\n        style: form\n      requestBody:\n        $ref: '#/components/requestBodies/NFSVolumeMountEndpoint'\n        content:\n          application/json:\n            schema:\n              properties:\n                mountEndpoint:\n                  default: \"\"\n                  description: |\n                    The address to which the NFS server is bound.\n                  type: string\n                version:\n                  description: |\n                    An opaque representation of an entity version at the time it was obtained from the API.\n                    All operations that mutate the entity must include this version field in the request unchanged.\n                    The format of this type is undefined and may change but the defined properties will not change.\n                  example: NDI0MjQyNDI0MjQyNDI0MjQy\n                  maxLength: 30\n                  type: string\n              title: NFSVolumeMountEndpoint\n              type: object\n        description: |\n          Update an existing NFS volume's mount endpoint\n        required: true\n      responses:\n        \"200\":\n          description: The volume's mount endpoint was successfully updated.\n        \"400\":\n          content:\n            application/json:\n              example:\n                error: a short description of the validation failure\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request does not conform to the API specification.\n        \"401\":\n          content:\n            application/json:\n              example:\n                error: authentication required\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The requested endpoint requires authentication - you must log in first.\n            If attempting to log in, your credentials were not recognised.\n        \"403\":\n          content:\n            application/json:\n              example:\n                error: unauthorised\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The authenticated user does not have permission to perform the requested action.\n        \"404\":\n          content:\n            application/json:\n              example:\n                error: not found\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            A referenced resource does not exist.\n        \"409\":\n          content:\n            application/json:\n              example:\n                error: in use\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            A referenced entity is currently in use.\n        \"412\":\n          content:\n            application/json:\n              example:\n                error: attempting to write stale object\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The entity to be wrote has been concurrently updated by another request - the submitted entity data has been replaced.\n            The caller should fetch the entity again, check the actions are still required and resubmit the request with the new entity version field.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The request caused an internal server error and should be retried.\n            Check the health of the node/cluster and if the error persists, contact support.\n      security:\n      - jwt: []\n      summary: Update an nfs volume's mount endpoint\n  /namespaces/{namespaceID}/volumes/{id}/nfs/export-config:\n    put:\n      description: |\n        Update the NFS volume's export configuration\n      operationId: updateNFSVolumeExports\n      parameters:\n      - description: ID of a Namespace\n        explode: false\n        in: path\n        name: namespaceID\n        required: true\n        schema:\n          $ref: '#/components/schemas/NamespaceID'\n        style: simple\n      - description: ID of a Volume\n        explode: false\n        in: path\n        name: id\n        required: true\n        schema:\n          $ref: '#/components/schemas/VolumeID'\n        style: simple\n      - description: |\n          If set to true this value indicates that the user wants to ignore entity version constraints, thereby \"forcing\" the operation.\n        explode: true\n        in: query\n        name: ignore-version\n        required: false\n        schema:\n          $ref: '#/components/schemas/IgnoreVersion'\n        style: form\n      - description: |\n          Optional parameter which will make the api request asynchronous. The operation will not be cancelled even if the client disconnect.\n          The URL parameter value overrides the \"async-max\" header value, if any.\n          The value of this header defines the timeout duration for the request, it must be set to a valid duration string.\n          A duration string is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\", or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\".\n          We reject negative or nil duration values.\n        explode: true\n        in: query\n        name: async-max\n        required: false\n        schema:\n          type: string\n        style: form\n      requestBody:\n        $ref: '#/components/requestBodies/NFSVolumeExports'\n        content:\n          application/json:\n            schema:\n              properties:\n                exports:\n                  items:\n                    $ref: '#/components/schemas/NfsExportConfig'\n                  type: array\n                version:\n                  description: |\n                    An opaque representation of an entity version at the time it was obtained from the API.\n                    All operations that mutate the entity must include this version field in the request unchanged.\n                    The format of this type is undefined and may change but the defined properties will not change.\n                  example: NDI0MjQyNDI0MjQyNDI0MjQy\n                  maxLength: 30\n                  type: string\n              title: NFSVolumeExports\n              type: object\n        description: |\n          Updates an existing volume's NFS export configuration.\n          The volume will use the given export configuration once attached.\n        required: true\n      responses:\n        \"200\":\n          description: The volume's NFS export configuration was successfully updated.\n        \"400\":\n          content:\n            application/json:\n              example:\n                error: a short description of the validation failure\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request does not conform to the API specification.\n        \"401\":\n          content:\n            application/json:\n              example:\n                error: authentication required\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The requested endpoint requires authentication - you must log in first.\n            If attempting to log in, your credentials were not recognised.\n        \"403\":\n          content:\n            application/json:\n              example:\n                error: unauthorised\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The authenticated user does not have permission to perform the requested action.\n        \"404\":\n          content:\n            application/json:\n              example:\n                error: not found\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            A referenced resource does not exist.\n        \"409\":\n          content:\n            application/json:\n              example:\n                error: in use\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            A referenced entity is currently in use.\n        \"412\":\n          content:\n            application/json:\n              example:\n                error: attempting to write stale object\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The entity to be wrote has been concurrently updated by another request - the submitted entity data has been replaced.\n            The caller should fetch the entity again, check the actions are still required and resubmit the request with the new entity version field.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The request caused an internal server error and should be retried.\n            Check the health of the node/cluster and if the error persists, contact support.\n      security:\n      - jwt: []\n      summary: Update an nfs volume's export configuration\n  /namespaces/{namespaceID}/volumes/{id}/replicas:\n    put:\n      description: |\n        Set the number of replicas for the volume identified by id to the number specified in the request's body. This modifies the protected StorageOS system label \"storageos.com/replicas\".\n        This request changes the desired replica count, and returns an error if changing the desired replica count failed. StorageOS satisfies the new replica configuration asynchronously.\n      operationId: setReplicas\n      parameters:\n      - description: ID of a Namespace\n        explode: false\n        in: path\n        name: namespaceID\n        required: true\n        schema:\n          $ref: '#/components/schemas/NamespaceID'\n        style: simple\n      - description: ID of a Volume\n        explode: false\n        in: path\n        name: id\n        required: true\n        schema:\n          $ref: '#/components/schemas/VolumeID'\n        style: simple\n      - description: |\n          If set to true this value indicates that the user wants to ignore entity version constraints, thereby \"forcing\" the operation.\n        explode: true\n        in: query\n        name: ignore-version\n        required: false\n        schema:\n          $ref: '#/components/schemas/IgnoreVersion'\n        style: form\n      requestBody:\n        $ref: '#/components/requestBodies/SetReplicasRequest'\n        content:\n          application/json:\n            schema:\n              example:\n                replicas: 2\n                version: NDI0MjQyNDI0MjQyNDI0MjQy\n              properties:\n                replicas:\n                  description: |\n                    The number of replicas desired.\n                  example: 2\n                  maximum: 5\n                  minimum: 0\n                  type: uint64\n                version:\n                  description: |\n                    An opaque representation of an entity version at the time it was obtained from the API.\n                    All operations that mutate the entity must include this version field in the request unchanged.\n                    The format of this type is undefined and may change but the defined properties will not change.\n                  example: NDI0MjQyNDI0MjQyNDI0MjQy\n                  maxLength: 30\n                  type: string\n              title: SetReplicasRequest\n              type: object\n        description: Number of replicas\n        required: true\n      responses:\n        \"202\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AcceptedMessage'\n          description: |\n            An aynchronous request has been accepted\n        \"400\":\n          content:\n            application/json:\n              example:\n                error: a short description of the validation failure\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request does not conform to the API specification.\n        \"401\":\n          content:\n            application/json:\n              example:\n                error: authentication required\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The requested endpoint requires authentication - you must log in first.\n            If attempting to log in, your credentials were not recognised.\n        \"403\":\n          content:\n            application/json:\n              example:\n                error: unauthorised\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The authenticated user does not have permission to perform the requested action.\n        \"404\":\n          content:\n            application/json:\n              example:\n                error: not found\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            A referenced resource does not exist.\n        \"412\":\n          content:\n            application/json:\n              example:\n                error: attempting to write stale object\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The entity to be wrote has been concurrently updated by another request - the submitted entity data has been replaced.\n            The caller should fetch the entity again, check the actions are still required and resubmit the request with the new entity version field.\n        \"422\":\n          content:\n            application/json:\n              example:\n                error: invalid state for operation (currently \"deleted\")\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            An action was requested that cannot be performed on the entity in it's current state.\n            As an example, this error might be returned when trying to delete a currently mounted volume.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The request caused an internal server error and should be retried.\n            Check the health of the node/cluster and if the error persists, contact support.\n        \"503\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The server is currently unable to handle the request due to a temporary store failure.\n            Check the health of the node/cluster and if the error persists, contact support.\n      security:\n      - jwt: []\n      summary: Set the number of replicas to maintain for the volume.\n  /namespaces/{namespaceID}/volumes/{id}/failure-mode:\n    put:\n      description: |\n        Set the behaviour of the volume identified by id when responding to observed replica failure. This modifies the protected  StorageOS system label \"storageos.com/failure-mode\".\n        This request may either specify a precise failure threshold or a more flexible intent-based failure mode operating with respect  to the volume's current replication target.\n        A request will be denied if the current state of the volume does not satisfy the requested failure behaviour.\n      operationId: setFailureMode\n      parameters:\n      - description: ID of a Namespace\n        explode: false\n        in: path\n        name: namespaceID\n        required: true\n        schema:\n          $ref: '#/components/schemas/NamespaceID'\n        style: simple\n      - description: ID of a Volume\n        explode: false\n        in: path\n        name: id\n        required: true\n        schema:\n          $ref: '#/components/schemas/VolumeID'\n        style: simple\n      - description: |\n          If set to true this value indicates that the user wants to ignore entity version constraints, thereby \"forcing\" the operation.\n        explode: true\n        in: query\n        name: ignore-version\n        required: false\n        schema:\n          $ref: '#/components/schemas/IgnoreVersion'\n        style: form\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SetFailureModeRequest'\n        description: Failure mode to use\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Volume'\n          description: The updated volume information.\n        \"400\":\n          content:\n            application/json:\n              example:\n                error: a short description of the validation failure\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request does not conform to the API specification.\n        \"401\":\n          content:\n            application/json:\n              example:\n                error: authentication required\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The requested endpoint requires authentication - you must log in first.\n            If attempting to log in, your credentials were not recognised.\n        \"403\":\n          content:\n            application/json:\n              example:\n                error: unauthorised\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The authenticated user does not have permission to perform the requested action.\n        \"404\":\n          content:\n            application/json:\n              example:\n                error: not found\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            A referenced resource does not exist.\n        \"409\":\n          content:\n            application/json:\n              example:\n                error: label \\\"a\\\" with value \\\"b\\\" conflicts with label \\\"c\\\" with\n                  value \\\"d\\\"\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The requested configuration change for the referenced entity cannot be made as it would result in a conflict which invalidates the resultant config.\n        \"412\":\n          content:\n            application/json:\n              example:\n                error: attempting to write stale object\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The entity to be wrote has been concurrently updated by another request - the submitted entity data has been replaced.\n            The caller should fetch the entity again, check the actions are still required and resubmit the request with the new entity version field.\n        \"422\":\n          content:\n            application/json:\n              example:\n                error: invalid state for operation (currently \"deleted\")\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            An action was requested that cannot be performed on the entity in it's current state.\n            As an example, this error might be returned when trying to delete a currently mounted volume.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The request caused an internal server error and should be retried.\n            Check the health of the node/cluster and if the error persists, contact support.\n        \"503\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The server is currently unable to handle the request due to a temporary store failure.\n            Check the health of the node/cluster and if the error persists, contact support.\n      security:\n      - jwt: []\n      summary: Set the failure mode of the volume.\n  /namespaces/{namespaceID}/volumes/{id}/size:\n    put:\n      description: |\n        Resize the volume identified by id in the namespace identified by namespaceID. A volume's size cannot be reduced.\n      operationId: resizeVolume\n      parameters:\n      - description: ID of a Namespace\n        explode: false\n        in: path\n        name: namespaceID\n        required: true\n        schema:\n          $ref: '#/components/schemas/NamespaceID'\n        style: simple\n      - description: ID of a Volume\n        explode: false\n        in: path\n        name: id\n        required: true\n        schema:\n          $ref: '#/components/schemas/VolumeID'\n        style: simple\n      - description: |\n          Optional parameter which will make the api request asynchronous. The operation will not be cancelled even if the client disconnect.\n          The URL parameter value overrides the \"async-max\" header value, if any.\n          The value of this header defines the timeout duration for the request, it must be set to a valid duration string.\n          A duration string is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\", or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\".\n          We reject negative or nil duration values.\n        explode: true\n        in: query\n        name: async-max\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: |\n          If set to true this value indicates that the user wants to ignore entity version constraints, thereby \"forcing\" the operation.\n        explode: true\n        in: query\n        name: ignore-version\n        required: false\n        schema:\n          $ref: '#/components/schemas/IgnoreVersion'\n        style: form\n      requestBody:\n        $ref: '#/components/requestBodies/ResizeVolumeRequest'\n        content:\n          application/json:\n            schema:\n              example:\n                version: NDI0MjQyNDI0MjQyNDI0MjQy\n                sizeBytes: 5368709000\n              properties:\n                sizeBytes:\n                  description: |\n                    The desired new size for the volume in  bytes. This value cannot be less than  the current size of the volume.\n                  example: 5368709000\n                  minimum: 1073742000\n                  type: uint64\n                version:\n                  description: |\n                    An opaque representation of an entity version at the time it was obtained from the API.\n                    All operations that mutate the entity must include this version field in the request unchanged.\n                    The format of this type is undefined and may change but the defined properties will not change.\n                  example: NDI0MjQyNDI0MjQyNDI0MjQy\n                  maxLength: 30\n                  type: string\n              title: ResizeVolumeRequest\n              type: object\n        description: The new size to give the volume\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Volume'\n          description: The volume was resized successfully.\n        \"202\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AcceptedMessage'\n          description: |\n            An aynchronous request has been accepted\n        \"400\":\n          content:\n            application/json:\n              example:\n                error: a short description of the validation failure\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request does not conform to the API specification.\n        \"401\":\n          content:\n            application/json:\n              example:\n                error: authentication required\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The requested endpoint requires authentication - you must log in first.\n            If attempting to log in, your credentials were not recognised.\n        \"403\":\n          content:\n            application/json:\n              example:\n                error: unauthorised\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The authenticated user does not have permission to perform the requested action.\n        \"404\":\n          content:\n            application/json:\n              example:\n                error: not found\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            A referenced resource does not exist.\n        \"412\":\n          content:\n            application/json:\n              example:\n                error: attempting to write stale object\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The entity to be wrote has been concurrently updated by another request - the submitted entity data has been replaced.\n            The caller should fetch the entity again, check the actions are still required and resubmit the request with the new entity version field.\n        \"422\":\n          content:\n            application/json:\n              example:\n                error: invalid state for operation (currently \"deleted\")\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            An action was requested that cannot be performed on the entity in it's current state.\n            As an example, this error might be returned when trying to delete a currently mounted volume.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The request caused an internal server error and should be retried.\n            Check the health of the node/cluster and if the error persists, contact support.\n        \"503\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The server is currently unable to handle the request due to a temporary store failure.\n            Check the health of the node/cluster and if the error persists, contact support.\n      security:\n      - jwt: []\n      summary: Increase the size of a volume.\n  /cluster:\n    get:\n      description: |\n        Retrieves the current global configuration settings in use by the cluster.\n      operationId: getCluster\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Cluster'\n          description: The cluster-wide configuration information.\n        \"401\":\n          content:\n            application/json:\n              example:\n                error: authentication required\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The requested endpoint requires authentication - you must log in first.\n            If attempting to log in, your credentials were not recognised.\n        \"403\":\n          content:\n            application/json:\n              example:\n                error: unauthorised\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The authenticated user does not have permission to perform the requested action.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The request caused an internal server error and should be retried.\n            Check the health of the node/cluster and if the error persists, contact support.\n        \"503\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The server is currently unable to handle the request due to a temporary store failure.\n            Check the health of the node/cluster and if the error persists, contact support.\n      security:\n      - jwt: []\n      summary: Retrieves the cluster's global configuration settings\n    put:\n      description: Update the global configuration settings to use for the cluster.\n      operationId: updateCluster\n      parameters:\n      - description: |\n          If set to true this value indicates that the user wants to ignore entity version constraints, thereby \"forcing\" the operation.\n        explode: true\n        in: query\n        name: ignore-version\n        required: false\n        schema:\n          $ref: '#/components/schemas/IgnoreVersion'\n        style: form\n      requestBody:\n        $ref: '#/components/requestBodies/UpdateClusterData'\n        content:\n          application/json:\n            schema:\n              example:\n                disableVersionCheck: false\n                disableCrashReporting: false\n                logFormat: json\n                logLevel: debug\n                disableTelemetry: false\n                version: NDI0MjQyNDI0MjQyNDI0MjQy\n              properties:\n                disableTelemetry:\n                  default: false\n                  description: |\n                    Disables collection of telemetry data across the cluster.\n                  example: false\n                  type: boolean\n                disableCrashReporting:\n                  default: false\n                  description: |\n                    Disables collection of reports for any fatal crashes across the cluster.\n                  example: false\n                  type: boolean\n                disableVersionCheck:\n                  default: false\n                  description: |\n                    Disables the mechanism responsible for checking if there is an updated version of StorageOS available for installation.\n                  example: false\n                  type: boolean\n                logLevel:\n                  $ref: '#/components/schemas/LogLevel'\n                logFormat:\n                  $ref: '#/components/schemas/LogFormat'\n                version:\n                  description: |\n                    An opaque representation of an entity version at the time it was obtained from the API.\n                    All operations that mutate the entity must include this version field in the request unchanged.\n                    The format of this type is undefined and may change but the defined properties will not change.\n                  example: NDI0MjQyNDI0MjQyNDI0MjQy\n                  maxLength: 30\n                  type: string\n              title: UpdateClusterData\n              type: object\n        description: The new cluster-wide configuration settings to apply.\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Cluster'\n          description: The cluster was successfully updated.\n        \"400\":\n          content:\n            application/json:\n              example:\n                error: a short description of the validation failure\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request does not conform to the API specification.\n        \"401\":\n          content:\n            application/json:\n              example:\n                error: authentication required\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The requested endpoint requires authentication - you must log in first.\n            If attempting to log in, your credentials were not recognised.\n        \"403\":\n          content:\n            application/json:\n              example:\n                error: unauthorised\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The authenticated user does not have permission to perform the requested action.\n        \"412\":\n          content:\n            application/json:\n              example:\n                error: attempting to write stale object\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The entity to be wrote has been concurrently updated by another request - the submitted entity data has been replaced.\n            The caller should fetch the entity again, check the actions are still required and resubmit the request with the new entity version field.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The request caused an internal server error and should be retried.\n            Check the health of the node/cluster and if the error persists, contact support.\n        \"503\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The server is currently unable to handle the request due to a temporary store failure.\n            Check the health of the node/cluster and if the error persists, contact support.\n      security:\n      - jwt: []\n      summary: Update the cluster's global configuration settings\n  /cluster/licence:\n    get:\n      description: |\n        Retrieves the cluster's current licence information\n      operationId: getLicence\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Licence'\n          description: The cluster's licence information.\n        \"401\":\n          content:\n            application/json:\n              example:\n                error: authentication required\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The requested endpoint requires authentication - you must log in first.\n            If attempting to log in, your credentials were not recognised.\n        \"403\":\n          content:\n            application/json:\n              example:\n                error: unauthorised\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The authenticated user does not have permission to perform the requested action.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The request caused an internal server error and should be retried.\n            Check the health of the node/cluster and if the error persists, contact support.\n        \"503\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The server is currently unable to handle the request due to a temporary store failure.\n            Check the health of the node/cluster and if the error persists, contact support.\n      security:\n      - jwt: []\n      summary: Retrieves the cluster's licence information\n    put:\n      description: Update the cluster's licence.\n      operationId: updateLicence\n      parameters:\n      - description: |\n          If set to true this value indicates that the user wants to ignore entity version constraints, thereby \"forcing\" the operation.\n        explode: true\n        in: query\n        name: ignore-version\n        required: false\n        schema:\n          $ref: '#/components/schemas/IgnoreVersion'\n        style: form\n      requestBody:\n        $ref: '#/components/requestBodies/UpdateLicence'\n        content:\n          application/json:\n            schema:\n              example:\n                version: NDI0MjQyNDI0MjQyNDI0MjQy\n                key: key\n              properties:\n                key:\n                  description: |\n                    A StorageOS product licence key, used to register a cluster. The format of this type is opaque and may change.\n                  type: string\n                version:\n                  description: |\n                    An opaque representation of an entity version at the time it was obtained from the API.\n                    All operations that mutate the entity must include this version field in the request unchanged.\n                    The format of this type is undefined and may change but the defined properties will not change.\n                  example: NDI0MjQyNDI0MjQyNDI0MjQy\n                  maxLength: 30\n                  type: string\n              title: UpdateLicence\n              type: object\n        description: |\n          A StorageOS product licence key, used to register a cluster. The format of this type is opaque and may change.\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Licence'\n          description: The provided licence was successfully applied.\n        \"400\":\n          content:\n            application/json:\n              example:\n                error: a short description of the validation failure\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request does not conform to the API specification.\n        \"401\":\n          content:\n            application/json:\n              example:\n                error: authentication required\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The requested endpoint requires authentication - you must log in first.\n            If attempting to log in, your credentials were not recognised.\n        \"403\":\n          content:\n            application/json:\n              example:\n                error: unauthorised\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The authenticated user does not have permission to perform the requested action.\n        \"412\":\n          content:\n            application/json:\n              example:\n                error: attempting to write stale object\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The entity to be wrote has been concurrently updated by another request - the submitted entity data has been replaced.\n            The caller should fetch the entity again, check the actions are still required and resubmit the request with the new entity version field.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The request caused an internal server error and should be retried.\n            Check the health of the node/cluster and if the error persists, contact support.\n        \"503\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The server is currently unable to handle the request due to a temporary store failure.\n            Check the health of the node/cluster and if the error persists, contact support.\n      security:\n      - jwt: []\n      summary: Update the licence global configuration settings\n  /diagnostics:\n    get:\n      description: \"Requests that the recipient node gathers information about the\\\n        \\ global state of the cluster and detailed information about the local state\\\n        \\ of each node in the cluster, using it to then build and return a bundle\\\n        \\ which can be used for  troubleshooting. For clusters in an unhealthy state\\\n        \\ this may result in a slower, incomplete response. \\nIf the cluster has many\\\n        \\ nodes, it is recommended to use the  single node diagnostic collection endpoint\\\n        \\ to target the desired nodes in turn.\\nThe request will only be served when\\\n        \\ the authenticated user is an administrator.\\n\"\n      operationId: getDiagnostics\n      responses:\n        \"200\":\n          content:\n            application/octet-stream:\n              schema:\n                format: binary\n                type: string\n          description: |\n            A diagnostics bundle was successfully built and returned.\n        \"401\":\n          content:\n            application/json:\n              example:\n                error: authentication required\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The requested endpoint requires authentication - you must log in first.\n            If attempting to log in, your credentials were not recognised.\n        \"403\":\n          content:\n            application/json:\n              example:\n                error: unauthorised\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The authenticated user does not have permission to perform the requested action.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The request caused an internal server error and should be retried.\n            Check the health of the node/cluster and if the error persists, contact support.\n        \"502\":\n          content:\n            application/octet-stream:\n              schema:\n                format: binary\n                type: string\n          description: |\n            The server is returning an incomplete diagnostic bundle.\n            A bundle may contain partial information if one or more nodes failed to respond, or some other error occured during the collection process.\n            The returned bundle is still valid and should be sent to StorageOS.\n        \"503\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The server is currently unable to handle the request due to a temporary store failure.\n            Check the health of the node/cluster and if the error persists, contact support.\n      security:\n      - jwt: []\n      summary: Retrieves a diagnostics bundle from the target node\n  /diagnostics/{id}:\n    get:\n      description: |\n        Requests that the recipient node gathers information about the global state of the cluster and detailed information about the target node, using it to then build and return a bundle which can be used for troubleshooting. If the target node is in an unhealthy state then the response may be slower and  incomplete.\n        The request will only be served when the authenticated user is an administrator.\n      operationId: getSingleNodeDiagnostics\n      parameters:\n      - description: ID of a node\n        explode: false\n        in: path\n        name: id\n        required: true\n        schema:\n          $ref: '#/components/schemas/NodeID'\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/octet-stream:\n              schema:\n                format: binary\n                type: string\n          description: |\n            A diagnostics bundle was successfully built and returned for just the target node.\n        \"401\":\n          content:\n            application/json:\n              example:\n                error: authentication required\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The requested endpoint requires authentication - you must log in first.\n            If attempting to log in, your credentials were not recognised.\n        \"403\":\n          content:\n            application/json:\n              example:\n                error: unauthorised\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The authenticated user does not have permission to perform the requested action.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The request caused an internal server error and should be retried.\n            Check the health of the node/cluster and if the error persists, contact support.\n        \"502\":\n          content:\n            application/octet-stream:\n              schema:\n                format: binary\n                type: string\n          description: |\n            The server is returning an incomplete diagnostic bundle.\n            A single-node bundle may contain partial information if the target node failed to respond, or did not gather all available diagnostics during the collection process.\n            The returned bundle may still contain useful data and  should be sent to StorageOS.\n        \"503\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            The server is currently unable to handle the request due to a temporary store failure.\n            Check the health of the node/cluster and if the error persists, contact support.\n      security:\n      - jwt: []\n      summary: Retrieves a single node diagnostics bundle from the target node\n  /openapi:\n    get:\n      description: Serves this openapi spec file\n      operationId: spec\n      responses:\n        \"200\":\n          content:\n            text/yaml:\n              schema:\n                $ref: '#/components/schemas/OpenAPISpec'\n          description: The openapi spec file has been served\n      summary: Serves this openapi spec file\ncomponents:\n  parameters:\n    ObjectVersion:\n      description: |\n        This value is used to perform a conditional delete or update of the entity.\n        If the entity has been modified since the version token was obtained, the request will fail with a HTTP 409 Conflict.\n      explode: true\n      in: query\n      name: version\n      required: true\n      schema:\n        $ref: '#/components/schemas/Version'\n      style: form\n    IgnoreVersion:\n      description: |\n        If set to true this value indicates that the user wants to ignore entity version constraints, thereby \"forcing\" the operation.\n      explode: true\n      in: query\n      name: ignore-version\n      required: false\n      schema:\n        $ref: '#/components/schemas/IgnoreVersion'\n      style: form\n    AsyncHeader:\n      description: |\n        Optional header which will make the api request asynchronous. The operation will not be cancelled even if the client disconnect.\n        The value of this header defines the timeout duration for the request, it must be set to a valid duration string.\n        A duration string is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\", or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\".\n        We reject negative or nil duration values.\n      example: async-max:20s\n      explode: false\n      in: header\n      name: async-max\n      required: false\n      schema:\n        type: string\n      style: simple\n    AsyncParam:\n      description: |\n        Optional parameter which will make the api request asynchronous. The operation will not be cancelled even if the client disconnect.\n        The URL parameter value overrides the \"async-max\" header value, if any.\n        The value of this header defines the timeout duration for the request, it must be set to a valid duration string.\n        A duration string is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\", or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\".\n        We reject negative or nil duration values.\n      explode: true\n      in: query\n      name: async-max\n      required: false\n      schema:\n        type: string\n      style: form\n  requestBodies:\n    SetComputeOnlyNodeData:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/SetComputeOnlyNodeData'\n      required: true\n    CreateVolumeData:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/CreateVolumeData'\n      required: true\n    UpdateVolumeData:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/UpdateVolumeData'\n      required: true\n    UpdateUserData:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/UpdateUserData'\n      required: true\n    NFSVolumeMountEndpoint:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/NFSVolumeMountEndpoint'\n      required: true\n    CreateUserData:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/CreateUserData'\n      required: true\n    ResizeVolumeRequest:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ResizeVolumeRequest'\n      required: true\n    UpdateLicence:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/UpdateLicence'\n      required: true\n    AttachNFSVolumeData:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/AttachNFSVolumeData'\n      required: true\n    CreatePolicyGroupData:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/CreatePolicyGroupData'\n      required: true\n    UpdatePolicyGroupData:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/UpdatePolicyGroupData'\n      required: true\n    NFSVolumeExports:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/NFSVolumeExports'\n      required: true\n    SetReplicasRequest:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/SetReplicasRequest'\n      required: true\n    UpdateAuthenticatedUserData:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/UpdateAuthenticatedUserData'\n      required: true\n    AuthUserData:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/AuthUserData'\n      required: true\n    UpdateNamespaceData:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/UpdateNamespaceData'\n      required: true\n    UpdateNodeData:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/UpdateNodeData'\n      required: true\n    UpdateClusterData:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/UpdateClusterData'\n      required: true\n    AttachVolumeData:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/AttachVolumeData'\n      required: true\n    CreateNamespaceData:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/CreateNamespaceData'\n      required: true\n  responses:\n    BadRequest:\n      content:\n        application/json:\n          example:\n            error: a short description of the validation failure\n          schema:\n            $ref: '#/components/schemas/Error'\n      description: The request does not conform to the API specification.\n    ServerError:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n      description: |\n        The request caused an internal server error and should be retried.\n        Check the health of the node/cluster and if the error persists, contact support.\n    StoreError:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n      description: |\n        The server is currently unable to handle the request due to a temporary store failure.\n        Check the health of the node/cluster and if the error persists, contact support.\n    LicenceRestricted:\n      content:\n        application/json:\n          example:\n            error: insufficient allowed capacity (bytes) (used 53687091200, allowed\n              53687091200, requested 5000000)\n          schema:\n            $ref: '#/components/schemas/Error'\n      description: |\n        The requested operation failed because your storageOS licence does not allow it, either create an account for a free licence or buy a professional licence.\n    Unauthorised:\n      content:\n        application/json:\n          example:\n            error: authentication required\n          schema:\n            $ref: '#/components/schemas/Error'\n      description: |\n        The requested endpoint requires authentication - you must log in first.\n        If attempting to log in, your credentials were not recognised.\n    Forbidden:\n      content:\n        application/json:\n          example:\n            error: unauthorised\n          schema:\n            $ref: '#/components/schemas/Error'\n      description: |\n        The authenticated user does not have permission to perform the requested action.\n    NotFound:\n      content:\n        application/json:\n          example:\n            error: not found\n          schema:\n            $ref: '#/components/schemas/Error'\n      description: |\n        A referenced resource does not exist.\n    InsufficientStorage:\n      content:\n        application/json:\n          example:\n            error: insufficient storage capacity available\n          schema:\n            $ref: '#/components/schemas/Error'\n      description: |\n        Available storage is not enough to handle the request or target node has reached maximum number of attached volumes.\n    StaleWrite:\n      content:\n        application/json:\n          example:\n            error: attempting to write stale object\n          schema:\n            $ref: '#/components/schemas/Error'\n      description: |\n        The entity to be wrote has been concurrently updated by another request - the submitted entity data has been replaced.\n        The caller should fetch the entity again, check the actions are still required and resubmit the request with the new entity version field.\n    InvalidStateTransition:\n      content:\n        application/json:\n          example:\n            error: invalid state for operation (currently \"deleted\")\n          schema:\n            $ref: '#/components/schemas/Error'\n      description: |\n        An action was requested that cannot be performed on the entity in it's current state.\n        As an example, this error might be returned when trying to delete a currently mounted volume.\n    AlreadyExists:\n      content:\n        application/json:\n          example:\n            error: already exists\n          schema:\n            $ref: '#/components/schemas/Error'\n      description: |\n        The entity to be wrote uses an identifier that already exists.\n    InUse:\n      content:\n        application/json:\n          example:\n            error: in use\n          schema:\n            $ref: '#/components/schemas/Error'\n      description: |\n        A referenced entity is currently in use.\n    InvalidResult:\n      content:\n        application/json:\n          example:\n            error: label \\\"a\\\" with value \\\"b\\\" conflicts with label \\\"c\\\" with value\n              \\\"d\\\"\n          schema:\n            $ref: '#/components/schemas/Error'\n      description: |\n        The requested configuration change for the referenced entity cannot be made as it would result in a conflict which invalidates the resultant config.\n    Locked:\n      content:\n        application/json:\n          example:\n            error: entity locked\n          schema:\n            $ref: '#/components/schemas/Error'\n      description: |\n        A lock is held for the target entity, preventing the operation to be carried out safely.\n    Accepted:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/AcceptedMessage'\n      description: |\n        An aynchronous request has been accepted\n  schemas:\n    OpenAPISpec:\n      description: |\n        Serves this openapi specification file.\n      readOnly: true\n      type: string\n    Error:\n      example:\n        error: A short description of the error\n      properties:\n        error:\n          type: string\n      required:\n      - error\n      type: object\n    Version:\n      description: |\n        An opaque representation of an entity version at the time it was obtained from the API.\n        All operations that mutate the entity must include this version field in the request unchanged.\n        The format of this type is undefined and may change but the defined properties will not change.\n      example: NDI0MjQyNDI0MjQyNDI0MjQy\n      maxLength: 30\n      type: string\n    IgnoreVersion:\n      default: false\n      description: |\n        Ignoring the entity version constraints.\n        If set to true this value indicates that the user wants to ignore entity version constraints, thereby \"forcing\" the operation.\n      example: true\n      type: boolean\n    ExpiresAt:\n      description: |\n        The time after which a licence will no longer be valid\n        This timestamp is set when the licence is created.\n        String format is RFC3339.\n      example: 2019-03-10T13:42:42Z\n      format: date-time\n      readOnly: true\n      type: string\n    CreatedAt:\n      description: |\n        The time the entity was created.\n        This timestamp is set by the node that created the entity, and may not be correct if the node's local clock was skewed.\n        This value is for the user's informative purposes only, and correctness is not required.\n        String format is RFC3339.\n      example: 2019-03-10T13:42:42Z\n      format: date-time\n      readOnly: true\n      type: string\n    UpdatedAt:\n      description: |\n        The time the entity was last updated.\n        This timestamp is set by the node that last updated the entity, and may not be correct if the node's local clock was skewed.\n        This value is for the user's informative purposes only, and correctness is not required.\n        String format is RFC3339.\n      example: 2019-03-29T23:13:13Z\n      format: date-time\n      readOnly: true\n      type: string\n    FsType:\n      description: |\n        The file system type of a volume. \"block\" is a raw block device (no filesystem).\n      enum:\n      - ext2\n      - ext3\n      - ext4\n      - xfs\n      - btrfs\n      - block\n      example: ext4\n      type: string\n    AttachType:\n      description: |\n        The attachment type of a volume. \"host\" indicates that the volume is consumed by the node it is attached to.\n      enum:\n      - unknown\n      - detached\n      - nfs\n      - host\n      example: host\n      readOnly: true\n      type: string\n    FailureModeIntent:\n      description: \"The intent-based failure mode behaviour of a volume. The default\\\n        \\ behaviour for a volume is \\\"hard\\\", in the absence of a directly  configured\\\n        \\ intent or numerical failure threshold. \\n\"\n      enum:\n      - hard\n      - soft\n      - alwayson\n      example: hard\n      type: string\n    NodeHealth:\n      description: |\n        The operational health of a node entity\n      enum:\n      - online\n      - offline\n      - unknown\n      example: online\n      readOnly: true\n      type: string\n    MasterHealth:\n      description: |\n        The operational health of a volume master deployment\n      enum:\n      - online\n      - offline\n      - unknown\n      example: online\n      readOnly: true\n      type: string\n    ReplicaHealth:\n      description: |\n        The operational health of a volume replica deployment\n      enum:\n      - recovering\n      - provisioning\n      - provisioned\n      - syncing\n      - ready\n      - deleted\n      - failed\n      - unknown\n      example: ready\n      readOnly: true\n      type: string\n    SyncProgress:\n      description: \"The progress report for an ongoing sync. \\n\"\n      properties:\n        bytesRemaining:\n          description: |\n            Number of bytes left remaining to complete the sync.\n          example: 500000\n          type: uint64\n        throughputBytes:\n          description: |\n            The average throughput of the sync given as bytes per  second.\n          example: 100000\n          type: uint64\n        estimatedSecondsRemaining:\n          description: |\n            The estimated time left for the sync to complete, given in seconds. When this field has a value of 0 either the  sync is complete or no duration estimate could be made. The values reported for bytesRemaining and  throughputBytes provide the client with the information needed to choose what to display.\n          example: 5\n          type: uint64\n      readOnly: true\n      type: object\n    CapacityStats:\n      example:\n        total: 42\n        available: 42\n        free: 42\n      properties:\n        total:\n          description: |\n            Total bytes in the filesystem\n          example: 42\n          type: uint64\n        free:\n          description: |\n            Free bytes in the filesystem available to root user\n          example: 42\n          type: uint64\n        available:\n          description: |\n            Byte value available to an unprivileged user\n          example: 42\n          type: uint64\n      type: object\n    NfsAcl:\n      example:\n        squashConfig:\n          uid: \"\"\n          gid: \"\"\n          squash: root\n        accessLevel: rw\n        identity:\n          identityType: hostname\n          matcher: '*.prod.storageos.com'\n      properties:\n        identity:\n          $ref: '#/components/schemas/NfsAcl_identity'\n        squashConfig:\n          $ref: '#/components/schemas/NfsAcl_squashConfig'\n        accessLevel:\n          description: |\n            The access level this ACL grants - read-only, or read-write.\n          enum:\n          - ro\n          - rw\n          example: rw\n          type: string\n      type: object\n    NfsExportConfig:\n      example:\n        path: /very/important/files/\n        acls:\n        - squashConfig:\n            uid: \"\"\n            gid: \"\"\n            squash: root\n          accessLevel: rw\n          identity:\n            identityType: hostname\n            matcher: '*.prod.storageos.com'\n        - squashConfig:\n            uid: \"\"\n            gid: \"\"\n            squash: root\n          accessLevel: rw\n          identity:\n            identityType: hostname\n            matcher: '*.prod.storageos.com'\n        pseudoPath: /very/important/files/somewhere/else\n        exportID: 42\n      properties:\n        exportID:\n          description: |\n            ID for this export\n          example: 42\n          type: uint64\n        path:\n          default: \"\"\n          description: |\n            The path relative to the volume root to serve as the export root\n          example: /very/important/files/\n          type: string\n        pseudoPath:\n          default: \"\"\n          description: |\n            The configured pseudo path in the NFS virtual filesystem. This is the path clients will see when traversing to this export on the NFS share.\n          example: /very/important/files/somewhere/else\n          type: string\n        acls:\n          items:\n            $ref: '#/components/schemas/NfsAcl'\n          type: array\n      type: object\n    NfsConfig:\n      example:\n        exports:\n        - path: /very/important/files/\n          acls:\n          - squashConfig:\n              uid: \"\"\n              gid: \"\"\n              squash: root\n            accessLevel: rw\n            identity:\n              identityType: hostname\n              matcher: '*.prod.storageos.com'\n          - squashConfig:\n              uid: \"\"\n              gid: \"\"\n              squash: root\n            accessLevel: rw\n            identity:\n              identityType: hostname\n              matcher: '*.prod.storageos.com'\n          pseudoPath: /very/important/files/somewhere/else\n          exportID: 42\n        - path: /very/important/files/\n          acls:\n          - squashConfig:\n              uid: \"\"\n              gid: \"\"\n              squash: root\n            accessLevel: rw\n            identity:\n              identityType: hostname\n              matcher: '*.prod.storageos.com'\n          - squashConfig:\n              uid: \"\"\n              gid: \"\"\n              squash: root\n            accessLevel: rw\n            identity:\n              identityType: hostname\n              matcher: '*.prod.storageos.com'\n          pseudoPath: /very/important/files/somewhere/else\n          exportID: 42\n        serviceEndpoint: serviceEndpoint\n      properties:\n        exports:\n          items:\n            $ref: '#/components/schemas/NfsExportConfig'\n          nullable: true\n          type: array\n        serviceEndpoint:\n          default: \"\"\n          description: |\n            The address to which the NFS server is bound.\n          nullable: true\n          readOnly: true\n          type: string\n      type: object\n    Labels:\n      additionalProperties:\n        type: string\n      description: |\n        A set of arbitrary key value labels to apply to the entity.\n      example:\n        env: prod\n        rack: db-1\n      externalDocs:\n        url: https://docs.storageos.com/docs/reference/labels\n      type: object\n    LogLevel:\n      default: info\n      description: |\n        This setting determines the log level for nodes across the cluster to use when recording entries in the log. All entries below the specified log level are discarded, where \"error\" is the highest log level and \"debug\" is the lowest.\n        This setting is only checked by nodes on startup. Changing this setting will not affect the behaviour of nodes that are already operational.\n      enum:\n      - debug\n      - info\n      - warn\n      - error\n      example: debug\n      type: string\n    LogFormat:\n      default: default\n      description: |\n        This setting determines the format nodes in the cluster will use for log entries.\n        This setting is only checked by nodes on startup. Changing this setting will not affect the behaviour of nodes that are already operational.\n      enum:\n      - default\n      - json\n      example: json\n      type: string\n    ClusterID:\n      description: |\n        A unique identifier for a cluster. The format of this type is undefined and may change but the defined properties will not change.\n      example: c5666b58-b805-4215-ab4a-cb094948ccc6\n      readOnly: true\n      type: string\n    NodeID:\n      description: |\n        A unique identifier for a node. The format of this type is undefined and may change but the defined properties will not change.\n      example: c5666b58-b805-4215-ab4a-cb094948ccc6\n      readOnly: true\n      type: string\n    VolumeID:\n      description: |\n        A unique identifier for a volume. The format of this type is undefined and may change but the defined properties will not change.\n      example: c5666b58-b805-4215-ab4a-cb094948ccc6\n      type: string\n    DeploymentID:\n      description: |\n        A unique identifier for a volume deployment. The format of this type is undefined and may change but the defined properties will not change.\n      example: c5666b58-b805-4215-ab4a-cb094948ccc6\n      type: string\n    NamespaceID:\n      description: |\n        A unique identifier for a namespace. The format of this type is undefined and may change but the defined properties will not change..\n      example: c5666b58-b805-4215-ab4a-cb094948ccc6\n      type: string\n    UserID:\n      description: |\n        A unique identifier for a user. The format of this type is undefined and may change but the defined properties will not change..\n      example: c5666b58-b805-4215-ab4a-cb094948ccc6\n      type: string\n    PolicyGroupID:\n      description: |\n        A unique identifier for a policy group. The format of this type is undefined and may change but the defined properties will not change..\n      example: c5666b58-b805-4215-ab4a-cb094948ccc6\n      type: string\n    Cluster:\n      example:\n        disableVersionCheck: false\n        createdAt: 2019-03-10T13:42:42Z\n        disableCrashReporting: false\n        logFormat: json\n        logLevel: debug\n        disableTelemetry: false\n        id: c5666b58-b805-4215-ab4a-cb094948ccc6\n        version: NDI0MjQyNDI0MjQyNDI0MjQy\n        updatedAt: 2019-03-29T23:13:13Z\n      properties:\n        id:\n          description: |\n            A unique identifier for a cluster. The format of this type is undefined and may change but the defined properties will not change.\n          example: c5666b58-b805-4215-ab4a-cb094948ccc6\n          readOnly: true\n          type: string\n        disableTelemetry:\n          default: false\n          description: Disables collection of telemetry data across the cluster.\n          example: false\n          type: boolean\n        disableCrashReporting:\n          default: false\n          description: |\n            Disables collection of reports for any fatal crashes across the cluster.\n          example: false\n          type: boolean\n        disableVersionCheck:\n          default: false\n          description: |\n            Disables the mechanism responsible for checking if there is an updated version of StorageOS available for installation.\n          example: false\n          type: boolean\n        logLevel:\n          $ref: '#/components/schemas/LogLevel'\n        logFormat:\n          $ref: '#/components/schemas/LogFormat'\n        createdAt:\n          description: |\n            The time the entity was created.\n            This timestamp is set by the node that created the entity, and may not be correct if the node's local clock was skewed.\n            This value is for the user's informative purposes only, and correctness is not required.\n            String format is RFC3339.\n          example: 2019-03-10T13:42:42Z\n          format: date-time\n          readOnly: true\n          type: string\n        updatedAt:\n          description: |\n            The time the entity was last updated.\n            This timestamp is set by the node that last updated the entity, and may not be correct if the node's local clock was skewed.\n            This value is for the user's informative purposes only, and correctness is not required.\n            String format is RFC3339.\n          example: 2019-03-29T23:13:13Z\n          format: date-time\n          readOnly: true\n          type: string\n        version:\n          description: |\n            An opaque representation of an entity version at the time it was obtained from the API.\n            All operations that mutate the entity must include this version field in the request unchanged.\n            The format of this type is undefined and may change but the defined properties will not change.\n          example: NDI0MjQyNDI0MjQyNDI0MjQy\n          maxLength: 30\n          type: string\n      type: object\n    User:\n      example:\n        createdAt: 2019-03-10T13:42:42Z\n        groups:\n        - 24d5db6f-9738-4f17-a257-b9dd41a35309\n        - 4223b453-4d47-49d5-960f-23fc7a8153ba\n        id: c5666b58-b805-4215-ab4a-cb094948ccc6\n        isAdmin: true\n        version: NDI0MjQyNDI0MjQyNDI0MjQy\n        username: admin\n        updatedAt: 2019-03-29T23:13:13Z\n      properties:\n        id:\n          description: |\n            A unique identifier for a user. The format of this type is undefined and may change but the defined properties will not change..\n          example: c5666b58-b805-4215-ab4a-cb094948ccc6\n          type: string\n        username:\n          example: admin\n          type: string\n        isAdmin:\n          default: false\n          description: |\n            If true, this user is an administrator of the cluster.\n            Administrators bypass the usual authentication checks and are granted access to all resources. Some actions (such as adding a new user) can only be performed by an administrator.\n          example: true\n          type: boolean\n        groups:\n          default: []\n          description: |\n            Defines a set of policy group IDs this user is a member of.\n            Policy groups can be used to logically group users and  apply authorisation policies to all members.\n          example:\n          - 24d5db6f-9738-4f17-a257-b9dd41a35309\n          - 4223b453-4d47-49d5-960f-23fc7a8153ba\n          items:\n            $ref: '#/components/schemas/PolicyGroupID'\n          nullable: true\n          type: array\n        createdAt:\n          description: |\n            The time the entity was created.\n            This timestamp is set by the node that created the entity, and may not be correct if the node's local clock was skewed.\n            This value is for the user's informative purposes only, and correctness is not required.\n            String format is RFC3339.\n          example: 2019-03-10T13:42:42Z\n          format: date-time\n          readOnly: true\n          type: string\n        updatedAt:\n          description: |\n            The time the entity was last updated.\n            This timestamp is set by the node that last updated the entity, and may not be correct if the node's local clock was skewed.\n            This value is for the user's informative purposes only, and correctness is not required.\n            String format is RFC3339.\n          example: 2019-03-29T23:13:13Z\n          format: date-time\n          readOnly: true\n          type: string\n        version:\n          description: |\n            An opaque representation of an entity version at the time it was obtained from the API.\n            All operations that mutate the entity must include this version field in the request unchanged.\n            The format of this type is undefined and may change but the defined properties will not change.\n          example: NDI0MjQyNDI0MjQyNDI0MjQy\n          maxLength: 30\n          type: string\n      type: object\n    UserSession:\n      allOf:\n      - $ref: '#/components/schemas/User'\n      - $ref: '#/components/schemas/UserSession_allOf'\n    Volume:\n      example:\n        attachmentType: host\n        replicas:\n        - null\n        - null\n        description: This volume contains the data for my app\n        fsType: ext4\n        version: NDI0MjQyNDI0MjQyNDI0MjQy\n        labels:\n          env: prod\n          rack: db-1\n        master: \"\"\n        sizeBytes: 5368709000\n        attachedOn: \"\"\n        createdAt: 2019-03-10T13:42:42Z\n        namespaceID: \"\"\n        name: app-data\n        nfs:\n          exports:\n          - path: /very/important/files/\n            acls:\n            - squashConfig:\n                uid: \"\"\n                gid: \"\"\n                squash: root\n              accessLevel: rw\n              identity:\n                identityType: hostname\n                matcher: '*.prod.storageos.com'\n            - squashConfig:\n                uid: \"\"\n                gid: \"\"\n                squash: root\n              accessLevel: rw\n              identity:\n                identityType: hostname\n                matcher: '*.prod.storageos.com'\n            pseudoPath: /very/important/files/somewhere/else\n            exportID: 42\n          - path: /very/important/files/\n            acls:\n            - squashConfig:\n                uid: \"\"\n                gid: \"\"\n                squash: root\n              accessLevel: rw\n              identity:\n                identityType: hostname\n                matcher: '*.prod.storageos.com'\n            - squashConfig:\n                uid: \"\"\n                gid: \"\"\n                squash: root\n              accessLevel: rw\n              identity:\n                identityType: hostname\n                matcher: '*.prod.storageos.com'\n            pseudoPath: /very/important/files/somewhere/else\n            exportID: 42\n          serviceEndpoint: serviceEndpoint\n        id: c5666b58-b805-4215-ab4a-cb094948ccc6\n        updatedAt: 2019-03-29T23:13:13Z\n      properties:\n        id:\n          description: |\n            A unique identifier for a volume. The format of this type is undefined and may change but the defined properties will not change.\n          example: c5666b58-b805-4215-ab4a-cb094948ccc6\n          type: string\n        name:\n          example: app-data\n          type: string\n        description:\n          example: This volume contains the data for my app\n          type: string\n        attachedOn:\n          allOf:\n          - $ref: '#/components/schemas/NodeID'\n          readOnly: true\n        nfs:\n          $ref: '#/components/schemas/NfsConfig'\n        namespaceID:\n          allOf:\n          - $ref: '#/components/schemas/NamespaceID'\n          readOnly: true\n        labels:\n          additionalProperties:\n            type: string\n          description: |\n            A set of arbitrary key value labels to apply to the entity.\n          example:\n            env: prod\n            rack: db-1\n          externalDocs:\n            url: https://docs.storageos.com/docs/reference/labels\n          type: object\n        fsType:\n          $ref: '#/components/schemas/FsType'\n        attachmentType:\n          $ref: '#/components/schemas/AttachType'\n        master:\n          allOf:\n          - $ref: '#/components/schemas/MasterDeploymentInfo'\n          readOnly: true\n        replicas:\n          default: []\n          items:\n            $ref: '#/components/schemas/ReplicaDeploymentInfo'\n          nullable: true\n          readOnly: true\n          type: array\n        sizeBytes:\n          description: |\n            A volume's size in bytes\n          example: 5368709000\n          minimum: 1073742000\n          type: uint64\n        createdAt:\n          description: |\n            The time the entity was created.\n            This timestamp is set by the node that created the entity, and may not be correct if the node's local clock was skewed.\n            This value is for the user's informative purposes only, and correctness is not required.\n            String format is RFC3339.\n          example: 2019-03-10T13:42:42Z\n          format: date-time\n          readOnly: true\n          type: string\n        updatedAt:\n          description: |\n            The time the entity was last updated.\n            This timestamp is set by the node that last updated the entity, and may not be correct if the node's local clock was skewed.\n            This value is for the user's informative purposes only, and correctness is not required.\n            String format is RFC3339.\n          example: 2019-03-29T23:13:13Z\n          format: date-time\n          readOnly: true\n          type: string\n        version:\n          description: |\n            An opaque representation of an entity version at the time it was obtained from the API.\n            All operations that mutate the entity must include this version field in the request unchanged.\n            The format of this type is undefined and may change but the defined properties will not change.\n          example: NDI0MjQyNDI0MjQyNDI0MjQy\n          maxLength: 30\n          type: string\n      type: object\n    DeploymentInfo:\n      properties:\n        id:\n          description: |\n            A unique identifier for a volume deployment. The format of this type is undefined and may change but the defined properties will not change.\n          example: c5666b58-b805-4215-ab4a-cb094948ccc6\n          type: string\n        nodeID:\n          description: |\n            A unique identifier for a node. The format of this type is undefined and may change but the defined properties will not change.\n          example: c5666b58-b805-4215-ab4a-cb094948ccc6\n          readOnly: true\n          type: string\n        promotable:\n          description: |\n            Indicates if the volume deployment is eligible for promotion\n          type: boolean\n      type: object\n    MasterDeploymentInfo:\n      allOf:\n      - $ref: '#/components/schemas/DeploymentInfo'\n      - $ref: '#/components/schemas/MasterDeploymentInfo_allOf'\n    ReplicaDeploymentInfo:\n      allOf:\n      - $ref: '#/components/schemas/DeploymentInfo'\n      - $ref: '#/components/schemas/ReplicaDeploymentInfo_allOf'\n    Node:\n      example:\n        createdAt: 2019-03-10T13:42:42Z\n        gossipEndpoint: '[\"192.0.2.1:5711\"]'\n        ioEndpoint: '[\"192.0.2.1:5703\"]'\n        name: db1.lcy.storageos.network\n        health: online\n        id: c5666b58-b805-4215-ab4a-cb094948ccc6\n        supervisorEndpoint: '[\"192.0.2.1:5704\"]'\n        clusteringEndpoint: '[\"192.0.2.1:5710\"]'\n        version: NDI0MjQyNDI0MjQyNDI0MjQy\n        capacity:\n          total: 42\n          available: 42\n          free: 42\n        labels:\n          env: prod\n          rack: db-1\n        updatedAt: 2019-03-29T23:13:13Z\n      properties:\n        id:\n          description: |\n            A unique identifier for a node. The format of this type is undefined and may change but the defined properties will not change.\n          example: c5666b58-b805-4215-ab4a-cb094948ccc6\n          readOnly: true\n          type: string\n        name:\n          description: |\n            The hostname of the node.\n            This value is set by the node each time it joins the StorageOS cluster.\n          example: db1.lcy.storageos.network\n          readOnly: true\n          type: string\n        health:\n          $ref: '#/components/schemas/NodeHealth'\n        capacity:\n          $ref: '#/components/schemas/CapacityStats'\n        ioEndpoint:\n          description: |\n            Endpoint at which we operate our dataplane's dfs service. (used for IO operations)\n            This value is set on startup by the corresponding environment variable (IO_ADVERTISE_ADDRESS)\n          example: '[\"192.0.2.1:5703\"]'\n          readOnly: true\n          type: string\n        supervisorEndpoint:\n          description: |\n            Endpoint at which we operate our dataplane's supervisor service (used for sync).\n            This value is set on startup by the corresponding environment variable (SUPERVISOR_ADVERTISE_ADDRESS)\n          example: '[\"192.0.2.1:5704\"]'\n          readOnly: true\n          type: string\n        gossipEndpoint:\n          description: |\n            Endpoint at which we operate our health checking service.\n            This value is set on startup by the corresponding environment variable (GOSSIP_ADVERTISE_ADDRESS)\n          example: '[\"192.0.2.1:5711\"]'\n          readOnly: true\n          type: string\n        clusteringEndpoint:\n          description: |\n            Endpoint at which we operate our clustering GRPC API.\n            This value is set on startup by the corresponding environment variable (INTERNAL_API_ADVERTISE_ADDRESS)\n          example: '[\"192.0.2.1:5710\"]'\n          readOnly: true\n          type: string\n        labels:\n          additionalProperties:\n            type: string\n          description: |\n            A set of arbitrary key value labels to apply to the entity.\n          example:\n            env: prod\n            rack: db-1\n          externalDocs:\n            url: https://docs.storageos.com/docs/reference/labels\n          type: object\n        createdAt:\n          description: |\n            The time the entity was created.\n            This timestamp is set by the node that created the entity, and may not be correct if the node's local clock was skewed.\n            This value is for the user's informative purposes only, and correctness is not required.\n            String format is RFC3339.\n          example: 2019-03-10T13:42:42Z\n          format: date-time\n          readOnly: true\n          type: string\n        updatedAt:\n          description: |\n            The time the entity was last updated.\n            This timestamp is set by the node that last updated the entity, and may not be correct if the node's local clock was skewed.\n            This value is for the user's informative purposes only, and correctness is not required.\n            String format is RFC3339.\n          example: 2019-03-29T23:13:13Z\n          format: date-time\n          readOnly: true\n          type: string\n        version:\n          description: |\n            An opaque representation of an entity version at the time it was obtained from the API.\n            All operations that mutate the entity must include this version field in the request unchanged.\n            The format of this type is undefined and may change but the defined properties will not change.\n          example: NDI0MjQyNDI0MjQyNDI0MjQy\n          maxLength: 30\n          type: string\n      type: object\n    Namespace:\n      example:\n        createdAt: 2019-03-10T13:42:42Z\n        name: dev\n        id: c5666b58-b805-4215-ab4a-cb094948ccc6\n        version: NDI0MjQyNDI0MjQyNDI0MjQy\n        labels:\n          env: prod\n          rack: db-1\n        updatedAt: 2019-03-29T23:13:13Z\n      properties:\n        id:\n          description: |\n            A unique identifier for a namespace. The format of this type is undefined and may change but the defined properties will not change..\n          example: c5666b58-b805-4215-ab4a-cb094948ccc6\n          type: string\n        name:\n          example: dev\n          readOnly: true\n          type: string\n        labels:\n          additionalProperties:\n            type: string\n          description: |\n            A set of arbitrary key value labels to apply to the entity.\n          example:\n            env: prod\n            rack: db-1\n          externalDocs:\n            url: https://docs.storageos.com/docs/reference/labels\n          type: object\n        createdAt:\n          description: |\n            The time the entity was created.\n            This timestamp is set by the node that created the entity, and may not be correct if the node's local clock was skewed.\n            This value is for the user's informative purposes only, and correctness is not required.\n            String format is RFC3339.\n          example: 2019-03-10T13:42:42Z\n          format: date-time\n          readOnly: true\n          type: string\n        updatedAt:\n          description: |\n            The time the entity was last updated.\n            This timestamp is set by the node that last updated the entity, and may not be correct if the node's local clock was skewed.\n            This value is for the user's informative purposes only, and correctness is not required.\n            String format is RFC3339.\n          example: 2019-03-29T23:13:13Z\n          format: date-time\n          readOnly: true\n          type: string\n        version:\n          description: |\n            An opaque representation of an entity version at the time it was obtained from the API.\n            All operations that mutate the entity must include this version field in the request unchanged.\n            The format of this type is undefined and may change but the defined properties will not change.\n          example: NDI0MjQyNDI0MjQyNDI0MjQy\n          maxLength: 30\n          type: string\n      type: object\n    PolicyGroup:\n      example:\n        specs:\n        - namespaceID: 251f065a-d89b-4426-a752-5fdd144d00e8\n          resourceType: '*'\n          readOnly: false\n        - namespaceID: 5f009d1f-6618-43c2-9ae4-e699461dda8e\n          resourceType: volume\n          readOnly: true\n        createdAt: 2019-03-10T13:42:42Z\n        name: dev-users\n        id: c5666b58-b805-4215-ab4a-cb094948ccc6\n        version: NDI0MjQyNDI0MjQyNDI0MjQy\n        users:\n        - id: 82f297ae-8381-4c09-b9a1-8401c83c418d\n          username: user_a\n        - id: f4bb11d6-594a-4f21-9d1c-d49711a0453e\n          username: user_b\n        - id: 30d3a4dc-971b-4f3e-9b89-5da6fea383ce\n          username: user_c\n        updatedAt: 2019-03-29T23:13:13Z\n      properties:\n        id:\n          description: |\n            A unique identifier for a policy group. The format of this type is undefined and may change but the defined properties will not change..\n          example: c5666b58-b805-4215-ab4a-cb094948ccc6\n          type: string\n        name:\n          example: dev-users\n          type: string\n        users:\n          description: The list of user IDs which this policy group governs.\n          example:\n          - id: 82f297ae-8381-4c09-b9a1-8401c83c418d\n            username: user_a\n          - id: f4bb11d6-594a-4f21-9d1c-d49711a0453e\n            username: user_b\n          - id: 30d3a4dc-971b-4f3e-9b89-5da6fea383ce\n            username: user_c\n          items:\n            $ref: '#/components/schemas/PolicyGroup_users'\n          readOnly: true\n          type: array\n        specs:\n          default: []\n          description: A set of authorisation policies to apply to the policy group.\n          example:\n          - namespaceID: 251f065a-d89b-4426-a752-5fdd144d00e8\n            resourceType: '*'\n            readOnly: false\n          - namespaceID: 5f009d1f-6618-43c2-9ae4-e699461dda8e\n            resourceType: volume\n            readOnly: true\n          items:\n            $ref: '#/components/schemas/_policies__id__specs'\n          nullable: true\n          type: array\n        createdAt:\n          description: |\n            The time the entity was created.\n            This timestamp is set by the node that created the entity, and may not be correct if the node's local clock was skewed.\n            This value is for the user's informative purposes only, and correctness is not required.\n            String format is RFC3339.\n          example: 2019-03-10T13:42:42Z\n          format: date-time\n          readOnly: true\n          type: string\n        updatedAt:\n          description: |\n            The time the entity was last updated.\n            This timestamp is set by the node that last updated the entity, and may not be correct if the node's local clock was skewed.\n            This value is for the user's informative purposes only, and correctness is not required.\n            String format is RFC3339.\n          example: 2019-03-29T23:13:13Z\n          format: date-time\n          readOnly: true\n          type: string\n        version:\n          description: |\n            An opaque representation of an entity version at the time it was obtained from the API.\n            All operations that mutate the entity must include this version field in the request unchanged.\n            The format of this type is undefined and may change but the defined properties will not change.\n          example: NDI0MjQyNDI0MjQyNDI0MjQy\n          maxLength: 30\n          type: string\n      type: object\n    Licence:\n      description: |\n        A representation of a cluster's licence properties\n      example:\n        clusterCapacityBytes: 1000000\n        features:\n        - features\n        - features\n        kind: unregistered\n        clusterID: c5666b58-b805-4215-ab4a-cb094948ccc6\n        usedBytes: 42\n        version: NDI0MjQyNDI0MjQyNDI0MjQy\n        expiresAt: 2019-03-10T13:42:42Z\n        customerName: Desmond\n      properties:\n        clusterID:\n          description: |\n            A unique identifier for a cluster. The format of this type is undefined and may change but the defined properties will not change.\n          example: c5666b58-b805-4215-ab4a-cb094948ccc6\n          readOnly: true\n          type: string\n        expiresAt:\n          description: |\n            The time after which a licence will no longer be valid\n            This timestamp is set when the licence is created.\n            String format is RFC3339.\n          example: 2019-03-10T13:42:42Z\n          format: date-time\n          readOnly: true\n          type: string\n        clusterCapacityBytes:\n          description: |\n            The allowed provisioning capacity in bytes\n            This value if for the cluster, if provisioning a volume brings the cluster's total provisioned capacity above it the request will fail\n          example: 1000000\n          minimum: 0\n          type: uint64\n        usedBytes:\n          description: |\n            Sum of the size of all volumes in the cluster\n          example: 42\n          type: uint64\n        kind:\n          description: |\n            Denotes which category the licence belongs to\n          example: unregistered\n          type: string\n        customerName:\n          description: |\n            A user friendly reference to the customer\n          example: Desmond\n          type: string\n        features:\n          description: |\n            A list of product features which are enabled by the  licence, subject to the installed version.\n          items:\n            type: string\n          nullable: true\n          type: array\n        version:\n          description: |\n            An opaque representation of an entity version at the time it was obtained from the API.\n            All operations that mutate the entity must include this version field in the request unchanged.\n            The format of this type is undefined and may change but the defined properties will not change.\n          example: NDI0MjQyNDI0MjQyNDI0MjQy\n          maxLength: 30\n          type: string\n      type: object\n    AcceptedMessage:\n      example:\n        msg: 'asynchronous request accepted with timeout: 10s'\n      properties:\n        msg:\n          type: string\n      type: object\n    UserList:\n      items:\n        $ref: '#/components/schemas/User'\n      type: array\n    NamespaceList:\n      items:\n        $ref: '#/components/schemas/Namespace'\n      type: array\n    NodeList:\n      items:\n        $ref: '#/components/schemas/Node'\n      type: array\n    PolicyGroupList:\n      items:\n        $ref: '#/components/schemas/PolicyGroup'\n      type: array\n    VolumeList:\n      items:\n        $ref: '#/components/schemas/Volume'\n      type: array\n    SetFailureThresholdRequestData:\n      properties:\n        failureThreshold:\n          description: |\n            The minimum number of replicas required to be online and receiving writes in order for the volume to remain read-writable. This value replaces any previously set failure threshold or intent-based failure mode.\n          example: 2\n          maximum: 5\n          minimum: 0\n          type: uint64\n        version:\n          description: |\n            An opaque representation of an entity version at the time it was obtained from the API.\n            All operations that mutate the entity must include this version field in the request unchanged.\n            The format of this type is undefined and may change but the defined properties will not change.\n          example: NDI0MjQyNDI0MjQyNDI0MjQy\n          maxLength: 30\n          type: string\n      type: object\n    SetFailureModeIntentRequestData:\n      properties:\n        mode:\n          $ref: '#/components/schemas/FailureModeIntent'\n        version:\n          description: |\n            An opaque representation of an entity version at the time it was obtained from the API.\n            All operations that mutate the entity must include this version field in the request unchanged.\n            The format of this type is undefined and may change but the defined properties will not change.\n          example: NDI0MjQyNDI0MjQyNDI0MjQy\n          maxLength: 30\n          type: string\n      type: object\n    SetFailureModeRequest:\n      oneOf:\n      - $ref: '#/components/schemas/SetFailureThresholdRequestData'\n      - $ref: '#/components/schemas/SetFailureModeIntentRequestData'\n    AuthUserData:\n      example:\n        username: admin\n        password: supersecret\n      properties:\n        username:\n          type: string\n        password:\n          format: password\n          type: string\n      required:\n      - password\n      - username\n      title: AuthUserData\n      type: object\n    CreateUserData:\n      example:\n        password: turtlesaregreat\n        groups:\n        - 24d5db6f-9738-4f17-a257-b9dd41a35309\n        - 4223b453-4d47-49d5-960f-23fc7a8153ba\n        isAdmin: true\n        username: admin\n      properties:\n        username:\n          example: admin\n          type: string\n        password:\n          default: unchanged\n          description: If not present, the existing password is not changed\n          example: turtlesaregreat\n          format: password\n          type: string\n          writeOnly: true\n        isAdmin:\n          default: false\n          description: |\n            If true, this user is an administrator of the cluster.\n            Administrators bypass the usual authentication checks and are granted access to all resources. Some actions (such as adding a new user) can only be performed by an administrator.\n          example: true\n          type: boolean\n        groups:\n          default: []\n          description: |\n            Defines a set of policy group IDs this user is a member of.\n            Policy groups can be used to logically group users and apply authorisation  policies to all members.\n          example:\n          - 24d5db6f-9738-4f17-a257-b9dd41a35309\n          - 4223b453-4d47-49d5-960f-23fc7a8153ba\n          items:\n            $ref: '#/components/schemas/PolicyGroupID'\n          nullable: true\n          type: array\n      required:\n      - password\n      - username\n      title: CreateUserData\n      type: object\n    UpdateUserData:\n      example:\n        password: turtlesaregreat\n        groups:\n        - 24d5db6f-9738-4f17-a257-b9dd41a35309\n        - 4223b453-4d47-49d5-960f-23fc7a8153ba\n        isAdmin: true\n        version: NDI0MjQyNDI0MjQyNDI0MjQy\n      properties:\n        password:\n          default: unchanged\n          description: If not present, the existing password is not changed\n          example: turtlesaregreat\n          format: password\n          type: string\n          writeOnly: true\n        isAdmin:\n          default: false\n          description: |\n            If true, this user is an administrator of the cluster.\n            Administrators bypass the usual authentication checks and are granted access to all resources. Some actions (such as adding a new user) can only be performed by an administrator.\n          example: true\n          type: boolean\n        groups:\n          default: []\n          description: |\n            Defines a set of policy group IDs this user is a member of.\n            Policy groups can be used to logically group users and apply authorisation  policies to all members.\n          example:\n          - 24d5db6f-9738-4f17-a257-b9dd41a35309\n          - 4223b453-4d47-49d5-960f-23fc7a8153ba\n          items:\n            $ref: '#/components/schemas/PolicyGroupID'\n          nullable: true\n          type: array\n        version:\n          description: |\n            An opaque representation of an entity version at the time it was obtained from the API.\n            All operations that mutate the entity must include this version field in the request unchanged.\n            The format of this type is undefined and may change but the defined properties will not change.\n          example: NDI0MjQyNDI0MjQyNDI0MjQy\n          maxLength: 30\n          type: string\n      title: UpdateUserData\n      type: object\n    UpdateAuthenticatedUserData:\n      example:\n        password: turtlesaregreat\n        version: NDI0MjQyNDI0MjQyNDI0MjQy\n      properties:\n        password:\n          default: unchanged\n          description: If not present, the existing password is not changed\n          example: turtlesaregreat\n          format: password\n          type: string\n          writeOnly: true\n        version:\n          description: |\n            An opaque representation of an entity version at the time it was obtained from the API.\n            All operations that mutate the entity must include this version field in the request unchanged.\n            The format of this type is undefined and may change but the defined properties will not change.\n          example: NDI0MjQyNDI0MjQyNDI0MjQy\n          maxLength: 30\n          type: string\n      title: UpdateAuthenticatedUserData\n      type: object\n    CreateNamespaceData:\n      example:\n        name: dev\n        labels:\n          env: prod\n          rack: db-1\n      properties:\n        name:\n          description: |\n            The name of the namespace shown in the CLI and UI\n          example: dev\n          pattern: ^[a-z0-9.\\-]{1,253}$\n          type: string\n        labels:\n          additionalProperties:\n            type: string\n          description: |\n            A set of arbitrary key value labels to apply to the entity.\n          example:\n            env: prod\n            rack: db-1\n          externalDocs:\n            url: https://docs.storageos.com/docs/reference/labels\n          type: object\n      title: CreateNamespaceData\n      type: object\n    UpdateNamespaceData:\n      example:\n        version: NDI0MjQyNDI0MjQyNDI0MjQy\n        labels:\n          env: prod\n          rack: db-1\n      properties:\n        labels:\n          additionalProperties:\n            type: string\n          description: |\n            A set of arbitrary key value labels to apply to the entity.\n          example:\n            env: prod\n            rack: db-1\n          externalDocs:\n            url: https://docs.storageos.com/docs/reference/labels\n          type: object\n        version:\n          description: |\n            An opaque representation of an entity version at the time it was obtained from the API.\n            All operations that mutate the entity must include this version field in the request unchanged.\n            The format of this type is undefined and may change but the defined properties will not change.\n          example: NDI0MjQyNDI0MjQyNDI0MjQy\n          maxLength: 30\n          type: string\n      title: UpdateNamespaceData\n      type: object\n    UpdateNodeData:\n      example:\n        version: NDI0MjQyNDI0MjQyNDI0MjQy\n        labels:\n          env: prod\n          rack: db-1\n      properties:\n        labels:\n          additionalProperties:\n            type: string\n          description: |\n            A set of arbitrary key value labels to apply to the entity.\n          example:\n            env: prod\n            rack: db-1\n          externalDocs:\n            url: https://docs.storageos.com/docs/reference/labels\n          type: object\n        version:\n          description: |\n            An opaque representation of an entity version at the time it was obtained from the API.\n            All operations that mutate the entity must include this version field in the request unchanged.\n            The format of this type is undefined and may change but the defined properties will not change.\n          example: NDI0MjQyNDI0MjQyNDI0MjQy\n          maxLength: 30\n          type: string\n      title: UpdateNodeData\n      type: object\n    SetComputeOnlyNodeData:\n      example:\n        computeOnly: true\n        version: NDI0MjQyNDI0MjQyNDI0MjQy\n      properties:\n        computeOnly:\n          description: |\n            Marks the node's desired configuration  state as compute-only. This will result in the node being avoided for volume placement\n          example: true\n          type: boolean\n        version:\n          description: |\n            An opaque representation of an entity version at the time it was obtained from the API.\n            All operations that mutate the entity must include this version field in the request unchanged.\n            The format of this type is undefined and may change but the defined properties will not change.\n          example: NDI0MjQyNDI0MjQyNDI0MjQy\n          maxLength: 30\n          type: string\n      title: SetComputeOnlyNodeData\n      type: object\n    _policies_specs:\n      properties:\n        namespaceID:\n          description: |\n            A unique identifier for a namespace. The format of this type is undefined and may change but the defined properties will not change..\n          example: c5666b58-b805-4215-ab4a-cb094948ccc6\n          type: string\n        resourceType:\n          description: |\n            The resource type this policy grants access to.\n          enum:\n          - '*'\n          - cluster\n          - namespace\n          - node\n          - policy\n          - user\n          - volume\n          example: volume\n          type: string\n        readOnly:\n          default: false\n          description: |\n            If true, disallows requests that attempt to mutate the resource.\n          example: false\n          type: boolean\n    CreatePolicyGroupData:\n      example:\n        specs:\n        - namespaceID: 251f065a-d89b-4426-a752-5fdd144d00e8\n          resourceType: '*'\n          readOnly: false\n        - namespaceID: 5f009d1f-6618-43c2-9ae4-e699461dda8e\n          resourceType: volume\n          readOnly: true\n        name: dev-users\n      properties:\n        name:\n          example: dev-users\n          type: string\n        specs:\n          default: []\n          description: A set of authorisation policies to apply to the policy group.\n          example:\n          - namespaceID: 251f065a-d89b-4426-a752-5fdd144d00e8\n            resourceType: '*'\n            readOnly: false\n          - namespaceID: 5f009d1f-6618-43c2-9ae4-e699461dda8e\n            resourceType: volume\n            readOnly: true\n          items:\n            $ref: '#/components/schemas/_policies_specs'\n          nullable: true\n          type: array\n      title: CreatePolicyGroupData\n      type: object\n    _policies__id__specs:\n      properties:\n        namespaceID:\n          description: |\n            A unique identifier for a namespace. The format of this type is undefined and may change but the defined properties will not change..\n          example: c5666b58-b805-4215-ab4a-cb094948ccc6\n          type: string\n        resourceType:\n          description: |\n            The resource type this policy grants access to.\n          enum:\n          - '*'\n          - volume\n          - policy\n          example: volume\n          type: string\n        readOnly:\n          default: false\n          description: |\n            If true, disallows requests that attempt to mutate the resource.\n          example: false\n          type: boolean\n    UpdatePolicyGroupData:\n      example:\n        specs:\n        - namespaceID: 251f065a-d89b-4426-a752-5fdd144d00e8\n          resourceType: '*'\n          readOnly: false\n        - namespaceID: 5f009d1f-6618-43c2-9ae4-e699461dda8e\n          resourceType: volume\n          readOnly: true\n        version: NDI0MjQyNDI0MjQyNDI0MjQy\n      properties:\n        specs:\n          default: []\n          description: A set of authorisation policies to apply to the policy group.\n          example:\n          - namespaceID: 251f065a-d89b-4426-a752-5fdd144d00e8\n            resourceType: '*'\n            readOnly: false\n          - namespaceID: 5f009d1f-6618-43c2-9ae4-e699461dda8e\n            resourceType: volume\n            readOnly: true\n          items:\n            $ref: '#/components/schemas/_policies__id__specs'\n          nullable: true\n          type: array\n        version:\n          description: |\n            An opaque representation of an entity version at the time it was obtained from the API.\n            All operations that mutate the entity must include this version field in the request unchanged.\n            The format of this type is undefined and may change but the defined properties will not change.\n          example: NDI0MjQyNDI0MjQyNDI0MjQy\n          maxLength: 30\n          type: string\n      title: UpdatePolicyGroupData\n      type: object\n    CreateVolumeData:\n      example:\n        namespaceID: c5666b58-b805-4215-ab4a-cb094948ccc6\n        name: data\n        description: This volume contains the data for my app\n        fsType: ext4\n        labels:\n          env: prod\n          rack: db-1\n        sizeBytes: 5000\n      properties:\n        namespaceID:\n          description: |\n            A unique identifier for a namespace. The format of this type is undefined and may change but the defined properties will not change..\n          example: c5666b58-b805-4215-ab4a-cb094948ccc6\n          type: string\n        labels:\n          additionalProperties:\n            type: string\n          description: |\n            A set of arbitrary key value labels to apply to the entity.\n          example:\n            env: prod\n            rack: db-1\n          externalDocs:\n            url: https://docs.storageos.com/docs/reference/labels\n          type: object\n        name:\n          description: |\n            The name of the volume shown in the CLI and UI\n          example: data\n          pattern: ^[a-z0-9.\\-]{1,253}$\n          type: string\n        fsType:\n          $ref: '#/components/schemas/FsType'\n        description:\n          example: This volume contains the data for my app\n          type: string\n        sizeBytes:\n          description: |\n            A volume's size in bytes\n          example: 5000\n          minimum: 0\n          type: uint64\n      required:\n      - fsType\n      - name\n      - namespaceID\n      - sizeBytes\n      title: CreateVolumeData\n      type: object\n    UpdateVolumeData:\n      example:\n        description: This volume contains the data for my app\n        version: NDI0MjQyNDI0MjQyNDI0MjQy\n        labels:\n          env: prod\n          rack: db-1\n      properties:\n        labels:\n          additionalProperties:\n            type: string\n          description: |\n            A set of arbitrary key value labels to apply to the entity.\n          example:\n            env: prod\n            rack: db-1\n          externalDocs:\n            url: https://docs.storageos.com/docs/reference/labels\n          type: object\n        description:\n          example: This volume contains the data for my app\n          type: string\n        version:\n          description: |\n            An opaque representation of an entity version at the time it was obtained from the API.\n            All operations that mutate the entity must include this version field in the request unchanged.\n            The format of this type is undefined and may change but the defined properties will not change.\n          example: NDI0MjQyNDI0MjQyNDI0MjQy\n          maxLength: 30\n          type: string\n      title: UpdateVolumeData\n      type: object\n    AttachVolumeData:\n      example:\n        nodeID: c5666b58-b805-4215-ab4a-cb094948ccc6\n      properties:\n        nodeID:\n          description: |\n            A unique identifier for a node. The format of this type is undefined and may change but the defined properties will not change.\n          example: c5666b58-b805-4215-ab4a-cb094948ccc6\n          readOnly: true\n          type: string\n      title: AttachVolumeData\n      type: object\n    AttachNFSVolumeData:\n      properties:\n        version:\n          description: |\n            An opaque representation of an entity version at the time it was obtained from the API.\n            All operations that mutate the entity must include this version field in the request unchanged.\n            The format of this type is undefined and may change but the defined properties will not change.\n          example: NDI0MjQyNDI0MjQyNDI0MjQy\n          maxLength: 30\n          type: string\n      title: AttachNFSVolumeData\n      type: object\n    NFSVolumeMountEndpoint:\n      properties:\n        mountEndpoint:\n          default: \"\"\n          description: |\n            The address to which the NFS server is bound.\n          type: string\n        version:\n          description: |\n            An opaque representation of an entity version at the time it was obtained from the API.\n            All operations that mutate the entity must include this version field in the request unchanged.\n            The format of this type is undefined and may change but the defined properties will not change.\n          example: NDI0MjQyNDI0MjQyNDI0MjQy\n          maxLength: 30\n          type: string\n      title: NFSVolumeMountEndpoint\n      type: object\n    NFSVolumeExports:\n      properties:\n        exports:\n          items:\n            $ref: '#/components/schemas/NfsExportConfig'\n          type: array\n        version:\n          description: |\n            An opaque representation of an entity version at the time it was obtained from the API.\n            All operations that mutate the entity must include this version field in the request unchanged.\n            The format of this type is undefined and may change but the defined properties will not change.\n          example: NDI0MjQyNDI0MjQyNDI0MjQy\n          maxLength: 30\n          type: string\n      title: NFSVolumeExports\n      type: object\n    SetReplicasRequest:\n      example:\n        replicas: 2\n        version: NDI0MjQyNDI0MjQyNDI0MjQy\n      properties:\n        replicas:\n          description: |\n            The number of replicas desired.\n          example: 2\n          maximum: 5\n          minimum: 0\n          type: uint64\n        version:\n          description: |\n            An opaque representation of an entity version at the time it was obtained from the API.\n            All operations that mutate the entity must include this version field in the request unchanged.\n            The format of this type is undefined and may change but the defined properties will not change.\n          example: NDI0MjQyNDI0MjQyNDI0MjQy\n          maxLength: 30\n          type: string\n      title: SetReplicasRequest\n      type: object\n    ResizeVolumeRequest:\n      example:\n        version: NDI0MjQyNDI0MjQyNDI0MjQy\n        sizeBytes: 5368709000\n      properties:\n        sizeBytes:\n          description: |\n            The desired new size for the volume in  bytes. This value cannot be less than  the current size of the volume.\n          example: 5368709000\n          minimum: 1073742000\n          type: uint64\n        version:\n          description: |\n            An opaque representation of an entity version at the time it was obtained from the API.\n            All operations that mutate the entity must include this version field in the request unchanged.\n            The format of this type is undefined and may change but the defined properties will not change.\n          example: NDI0MjQyNDI0MjQyNDI0MjQy\n          maxLength: 30\n          type: string\n      title: ResizeVolumeRequest\n      type: object\n    UpdateClusterData:\n      example:\n        disableVersionCheck: false\n        disableCrashReporting: false\n        logFormat: json\n        logLevel: debug\n        disableTelemetry: false\n        version: NDI0MjQyNDI0MjQyNDI0MjQy\n      properties:\n        disableTelemetry:\n          default: false\n          description: |\n            Disables collection of telemetry data across the cluster.\n          example: false\n          type: boolean\n        disableCrashReporting:\n          default: false\n          description: |\n            Disables collection of reports for any fatal crashes across the cluster.\n          example: false\n          type: boolean\n        disableVersionCheck:\n          default: false\n          description: |\n            Disables the mechanism responsible for checking if there is an updated version of StorageOS available for installation.\n          example: false\n          type: boolean\n        logLevel:\n          $ref: '#/components/schemas/LogLevel'\n        logFormat:\n          $ref: '#/components/schemas/LogFormat'\n        version:\n          description: |\n            An opaque representation of an entity version at the time it was obtained from the API.\n            All operations that mutate the entity must include this version field in the request unchanged.\n            The format of this type is undefined and may change but the defined properties will not change.\n          example: NDI0MjQyNDI0MjQyNDI0MjQy\n          maxLength: 30\n          type: string\n      title: UpdateClusterData\n      type: object\n    UpdateLicence:\n      example:\n        version: NDI0MjQyNDI0MjQyNDI0MjQy\n        key: key\n      properties:\n        key:\n          description: |\n            A StorageOS product licence key, used to register a cluster. The format of this type is opaque and may change.\n          type: string\n        version:\n          description: |\n            An opaque representation of an entity version at the time it was obtained from the API.\n            All operations that mutate the entity must include this version field in the request unchanged.\n            The format of this type is undefined and may change but the defined properties will not change.\n          example: NDI0MjQyNDI0MjQyNDI0MjQy\n          maxLength: 30\n          type: string\n      title: UpdateLicence\n      type: object\n    NfsAcl_identity:\n      example:\n        identityType: hostname\n        matcher: '*.prod.storageos.com'\n      properties:\n        identityType:\n          description: |\n            The identity type used to identify the nfs client.\n          enum:\n          - cidr\n          - hostname\n          - netgroup\n          example: hostname\n          type: string\n        matcher:\n          description: |\n            NFS identity matcher.\n            For \"cidr\", this should be a valid CIDR block string such as \"10.0.0.0/8\".\n            For \"hostname\", this must be the hostname sent by the client, with ? and * wildcard characters.\n            For netgroup, this must be in the form of \"@netgroup\" with ? and * wildcard characters.\n          example: '*.prod.storageos.com'\n          type: string\n    NfsAcl_squashConfig:\n      example:\n        uid: \"\"\n        gid: \"\"\n        squash: root\n      properties:\n        uid:\n          type: int64\n        gid:\n          type: int64\n        squash:\n          description: \"SquashConfig defines the root squashing behaviour. \\nWhen\\\n            \\ a client creates a file, it sends the user UID from the client. If the\\\n            \\ client is running as root, this sends uid=0. Root squashing allows the\\\n            \\ NFS administrator to prevent the client from writing as \\\"root\\\" to\\\n            \\ the NFS share, instead mapping the client to a new UID/GID (usually\\\n            \\ nfsnobody, -2).\\n\\\"none\\\" performs no UID/GID alterations, using the\\\n            \\ values sent by the client.\\n\\\"root\\\" mapps UID \u0026 GID 0 to the values\\\n            \\ specified.\\n\\\"rootuid\\\" maps UID 0 and a GID of any value to the value\\\n            \\ specified.\\n\\\"all\\\" maps changes all UID and GID values to those specified.\\n\"\n          enum:\n          - none\n          - root\n          - rootuid\n          - all\n          example: root\n          type: string\n    UserSession_allOf_session:\n      properties:\n        expiresInSeconds:\n          description: |\n            The maximum duration which the auth session  will remain valid for in seconds.\n          example: 60\n          minimum: 0\n          type: uint64\n        token:\n          description: |\n            The JWT token for the auth session.\n          type: string\n    UserSession_allOf:\n      properties:\n        session:\n          $ref: '#/components/schemas/UserSession_allOf_session'\n    MasterDeploymentInfo_allOf:\n      properties:\n        health:\n          $ref: '#/components/schemas/MasterHealth'\n    ReplicaDeploymentInfo_allOf:\n      properties:\n        health:\n          $ref: '#/components/schemas/ReplicaHealth'\n        syncProgress:\n          $ref: '#/components/schemas/SyncProgress'\n    PolicyGroup_users:\n      properties:\n        id:\n          description: |\n            A unique identifier for a user. The format of this type is undefined and may change but the defined properties will not change..\n          example: c5666b58-b805-4215-ab4a-cb094948ccc6\n          type: string\n        username:\n          example: admin\n          type: string\n  securitySchemes:\n    jwt:\n      bearerFormat: JWT\n      description: StorageOS uses JSON web tokens for authentication.\n      scheme: bearer\n      type: http\n"
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"ReplicaDeploymentInfo\": parse schema: allOf: [1]: parse schema: resolve \"#/components/schemas/ReplicaDeploymentInfo_allOf\": parse schema: property \"syncProgress\": parse schema: resolve \"#/components/schemas/SyncProgress\": parse schema: property \"bytesRemaining\": parse schema: unexpected schema type: \"uint64\""
}