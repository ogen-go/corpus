{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/datasetu/vermillion"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "api-docs/openapi.yml",
			"byteSize": 34401,
			"content": "openapi: 3.1.0\ninfo:\n  version: 1.0.0\n  title: Vermilllion API Documentation\n  termsOfService: 'https://example.com/terms/'\n  contact:\n    email: pct960@gmail.com\n    url: 'https://vermillion.datasetu.org'\n  license:\n    name: datasetu\n    url: 'https://github.com/datasetu/vermillion/blob/master/LICENSE'\n  x-logo:\n    url: 'https://github.com/datasetu/vermillion/raw/master/images/logo.png'\n    backgroundColor: \"#FFFFFF\"\n    altText: \"Vermillion logo\"\n  description: Vermillion is a high-performance, scalable and secure open-source data exchange platform developed using Vertx. It is a general-purpose resource-server that data providers and consumers can use to exchange time-series as well as static datasets. Vermillion exposes a simple search interface that can be used to query resources using various parameters like time, geo-coordinates, full-text or any combination thereof.\n\ntags:\n  - name: Consumer\n    description: A data consumer is any user or entity which is interested in a data resource that vermillion hosts (or acts as a intermediary for). Consumers discover resources on the datasetu catalogue and use the search interface to query the datasets\n\n  - name: Provider\n    description: A data provider is any user or entity which is responsible for a dataset that vermillion hosts. Providers can be data owners or have delegated access to act as custodians for resources. Providers upload details, access mechanisms, license and other metadata of resources onto the datasetu catalogue. Also, they manage access control rules for their resources on the datasetu auth server. Providers use the publish interface of Vermillion to upload datasets and dynamic metadata associated with it.\n\nservers:\n  - url: 'https://vermillion.datasetu.org'\n\npaths:\n  /download?id=RESOURCE_ID\u0026token=ACCESS_TOKEN:\n    get:\n      tags:\n       - Consumer\n      description: This endpoint is meant for downloading secure file datasets for which access has been obtained beforehand. If the fully-qualified resource ID is known then this endpoint can be invoked from programs or from user-agents like ``curl``. Otherwise, invoking the endpoint with just an access token will bring up an HTML page containing a list of datasets the consumer had requested for. Furthermore, this API can be used in two modes. In the first mode, a specific resource ID or a specific set of resource IDs can be requested (a subset of the resources that the token has authorisation to). They will be then be made available on the consumer's directory which can be downloaded. In the second mode, the consumer can simply pass an access token, and all resources that the token has authorisation to will be made available in the consumer's directory. The pre-condition for the second mode is that the token presented must not have authorisation to heterogenous resources, i.e., a mixture of time-series datasets and files (or files residing on other resource servers). The ``download`` API merely performs the function of symlinking the requested resources to the consumer's directory. Once the symlinks are created, this API internally redirects to the ``/consumer/`` API.\n      operationId: download\n      security:\n        - datasetu-auth-server: [read]\n      parameters:\n        - name: ACCESS_TOKEN\n          in: query\n          required: true\n          description: A token granted by the datasetu auth server to access resources.\n          schema:\n            type: string\n            example: \"auth.datasetu.org/36a83204ea6ad6690a0eccda0f37e153\"\n          allowReserved: true\n        - name: RESOURCE_ID\n          in: query\n          description: A fully qualified resource name obtained from the datasetu catalogue. One or more resource IDs can be specified in this API. In the latter case, the resource IDs need to be separated by a comma. \n          schema:\n            type: string\n            example: \"rbccps.org/e096b3abef24b99383d9bd28e9b8c89cfd50be0b\n            /example.com/test-category/test-resource.public\"\n          allowReserved: true\n      responses:\n        200:\n          description: The file symlinks have been created and the consumer is successfully redirected to the ``/consumer`` API. Depending on the depth of the requested ID (how many elements of the full resource ID), a top-level folder, a list of files, or the contents of a specific file can be displayed.\n          content:\n            text/plain:\n              schema:\n                type: string\n              example: This is a sample text from a file.\n        400:\n          $ref: '#/components/responses/BAD-REQUEST'\n        404:\n          $ref: '#/components/responses/NOT-FOUND'\n        403:\n          $ref: '#/components/responses/FORBIDDEN'\n        500:\n          $ref: '#/components/responses/INTERNAL-SERVER'\n\n  /ProviderByQuery?search_parameter1=value1\u0026search_parameter2=value2:\n    post:\n      tags:\n        - Consumer\n      description: The API provides the capability for a data consumer to download the public datasets as a zip file based on the search query parameters that a data consumer provides as part of the API endpoint. To add more, the API will send a notification as an email to the respective data consumer with the downloadable link of the datasets.\n      operationId: providerbyquery\n      security:\n        - datasetu-auth-server: [ read ]\n      parameters:\n        - name: search_parameter1\n          in: query\n          required: true\n          description: Search_parameter1 can be details of any public dataset that a data consumer is interested.\n          schema:\n            type: string\n            example: \"test\"\n            description: Data consumer is interested in viewing the data of type \"test\"\n          allowReserved: true\n        - name: search_parameter2\n          in: query\n          description: Search_parameter2 can be details of any public dataset that a data consumer is interested.\n          schema:\n            type: string\n            example: \"train\"\n            description: Data consumer is interested in viewing the data of type \"train\"\n          allowReserved: true\n      responses:\n        202:\n          description: Data Consumer sees one or more requested public files/datasets that a data provider has made available publicly in a zip format.\n          content:\n            text/plain:\n              schema:\n                type: string\n              example: Thanks for your interest in the corpus. Your request for download has been received. Soon, you will receive an email from \u003cDataSetu Team, patzzziejordan@gmail.com\u003e to the respective email-id which will contain downloadable links for the same. Note that, the time frame for the email is subjected to the number of files to zip.\n        400:\n          $ref: '#/components/responses/BAD-REQUEST'\n        404:\n          $ref: '#/components/responses/NOT-FOUND'\n        403:\n          $ref: '#/components/responses/FORBIDDEN'\n        500:\n          $ref: '#/components/responses/INTERNAL-SERVER'\n\n  /latest?id=RESOURCE_ID\u0026token=ACCESS_TOKEN:\n    get:\n      tags:\n        - Consumer\n      description: This API is for getting the latest datapoint of a resource. This is typically meant to be used on time-series datasets. However, it could be used to query the latest metadata of static files as well. It supports both open and secure datasets. An access token is required in the latter case.\n      operationId: latest\n      security:\n        - datasetu-auth-server: [read]\n      parameters:\n        - name: RESOURCE_ID\n          in: query\n          required: true\n          description: A fully qualified resource name obtained from the datasetu catalogue.\n          schema:\n            type: string\n            example: \"rbccps.org/e096b3abef24b99383d9bd28e9b8c89cfd50be0b\n            /example.com/test-category/test-resource\"\n          allowReserved: true\n        - name: ACCESS_TOKEN\n          in: query\n          required: false\n          description: An access token granted by the datasetu auth server\n          schema:\n            type: string\n            example: \"auth.datasetu.org/36a83204ea6ad6690a0eccda0f37e179\"\n          allowReserved: true\n      responses:\n        200:\n          description: The latest data of the requested resource is returned\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/latest'\n        400:\n          $ref: '#/components/responses/BAD-REQUEST'\n        404:\n          $ref: '#/components/responses/NOT-FOUND'\n        403:\n          $ref: '#/components/responses/FORBIDDEN'\n        500:\n          $ref: '#/components/responses/INTERNAL-SERVER'\n\n  /publish?id=RESOURCE_ID\u0026token=ACCESS_TOKEN:\n    post:\n      tags:\n        - Provider\n      description: This endpoint gives providers access to publish data into vermillion. Resource ID and access token are mandatory parameters. This API can be used to publish either time series data or static files. Depending on the mode, the request will have to be either application/json or multipart/form-data.\n      operationId: publish\n      security:\n        - datasetu-auth-server: [write]\n      parameters:\n        - name: RESOURCE_ID\n          in: query\n          required: true\n          description: A fully qualified resource name obtained from the datasetu catalogue.\n          schema:\n            type: string\n            example: \"rbccps.org/e096b3abef24b99383d9bd28e9b8c89cfd50be0b\n            /example.com/test-category/test-resource\"\n          allowReserved: true\n        - name: ACCESS_TOKEN\n          in: query\n          required: true\n          description: An access token granted by the datasetu auth server\n          schema:\n            type: string\n            example: \"auth.datasetu.org/36a83204ea6ad6690a0eccda0f37e179\"\n          allowReserved: true\n      requestBody:\n        description: |\n          As mentioned previously, this API can be used to publish time series data or static files. The request will vary depending on the mode used.\n          #### Publish-timeSeriesData\n          Time-series data in JSON, formatted as per the schema specified below.\n\n          #### Publish-staticData\n          Any file that the provider wishes to host on Vermillion\n\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/publish-timeSeriesData'\n\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/publish-staticData'\n\n      responses:\n         201:\n           description: 201 created\n           content:\n              text/plain:\n                schema:\n                  type: string\n                example: Ok\n         400:\n           $ref: '#/components/responses/BAD-REQUEST'\n         404:\n           $ref: '#/components/responses/NOT-FOUND'\n         403:\n           $ref: '#/components/responses/FORBIDDEN'\n         500:\n           $ref: '#/components/responses/INTERNAL-SERVER'\n\n  /search/scroll?token=ACCESS_TOKEN:\n    post:\n      tags:\n        - Consumer\n      description: Scroll API gives all the datasets in chunks of specified size. The size determines the pagination of data points and it is to be defined in search API. Prior to this, search API should be hit to obtain scroll_id.\n      operationId: scrolled-search\n      security:\n        - datasetu-auth-server: [ read ]\n      parameters:\n        - name: ACCESS_TOKEN\n          in: query\n          required: false\n          description: An access token granted by the datasetu auth server\n          schema:\n            type: string\n            example: \"auth.datasetu.org/36a83204ea6ad6690a0eccda0f37e179\"\n          allowReserved: true\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                scroll_id:\n                  type: string\n                  description: This is the scroll Id associated with data.\n                  example: FGluY2x1ZGVfY29udGV4dF91dWlkDXF1ZXJ5QW5kRmV0Y2gBFDFXVGpZbmdCLXVCbkdFcEk3TFF1AAAAAAAAAAIWZWNVMWdVVkVUNHlub1kzdldYR2d3Zw==\n                scroll_duration:\n                  type: string\n                  description: The time duration specified/requested to scroll in and around the data\n                  example: 30m\n              required:\n                - scroll_id\n                - scroll_duration\n\n      responses:\n        200:\n          description: Lists down all the hits of scroll-search\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/scroll-search'\n        400:\n          $ref: '#/components/responses/BAD-REQUEST'\n        500:\n          $ref: '#/components/responses/INTERNAL-SERVER'\n  /search?token=ACCESS_TOKEN:\n    post:\n      tags:\n        - Consumer\n      description: This API provides a search interface for the data hosted on vermillion. Both public and secure datasets can be queried using this API, with an access token being required in the latter case. This interface provides options to query using time, geo-spatial co-ordinates, text or any combination thereof. Resource Id is a mandatory field across all search types. Along with the resource ID, at least one of the other three parameters is necessary for the search query.\n      operationId: Search\n      security: \n        - datasetu-auth-server: [read]\n      parameters:\n        - name: ACCESS_TOKEN\n          in: query\n          required: false\n          description: A token granted by the datasetu auth server to access resources.\n          schema:\n            type: string\n            example: \"auth.datasetu.org/36a83204ea6ad6690a0eccda0f37e179\"\n          allowReserved: true\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: '#/components/schemas/time-series'\n                - $ref: '#/components/schemas/geo-spatial'\n                - $ref: '#/components/schemas/attribute-search'\n                - $ref: '#/components/schemas/complex-search'\n\n        description: |\n          The following lists the various filters which can be used in the search API. A filter can be clubbed with any other filter to perform a complex search.\n          #### Time-series Search\n          This can be used to query resources using a time-based filter.\n          #### Geo-spatial Search\n          This can be used to query resources using a geo-spatial filter, i.e., using geo co-ordinates.\n          #### Attribute Search\n          This can be used to query resources using a text-based or numeric filter.\n          #### Complex Search\n          When one or more of the above filters are used, all of them are applied while querying the DB. \u003cbr/\u003e\u003cbr/\u003e\n\n      responses:\n        200:\n          description: The data from requested resources as a JSON array.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/search'\n        400:\n          $ref: '#/components/responses/BAD-REQUEST'\n        404:\n          $ref: '#/components/responses/NOT-FOUND'\n        403:\n          $ref: '#/components/responses/FORBIDDEN'\n        500:\n         $ref: '#/components/responses/INTERNAL-SERVER'\n  /consumer/ACCESS_TOKEN:\n    get:\n      tags:\n        - Consumer\n      description: This API is for consumers to get access to secure file datasets of providers. The pre-requisite to invoke this API is to invoke the ``/download`` API. The latter will create symlinks for the requested datasets in the consumer's directory. This API can be used on a browser in which case an HTML page containing the folders is returned. Alternatively, it could also be invoked from a user-agent such as ``curl`` if the fully qualified resource ID is known.\n      operationId: consumer\n      security:\n        - datasetu-auth-server: [read]\n      parameters:\n        - name: ACCESS_TOKEN\n          in: path\n          required: true\n          description: A token granted by the datasetu auth server to access resources. In the above example, the endpoint the consumer needs to invoke would be ``/consumer/auth.datasetu.org/36a83204ea6ad6690a0eccda0f37e179``. In this case, the consumer will NOT be able to browse parent directories of their folders unlike the case with the ``/provider/public`` API.\n          schema:\n            type: string\n            example: \"auth.datasetu.org/36a83204ea6ad6690a0eccda0f37e179\"\n          allowReserved: true\n      responses:\n        200:\n          description: Consumer sees all the files/datasets that they had requested for previously using the download API\n          content:\n            text/plain:\n              schema:\n                type: array\n                items:\n                  type: string\n              example: secure-resource-1  secure-resource-2\n        404:\n          $ref: '#/components/responses/NOT-FOUND'\n\n  /provider/public/RESOURCE_ID:\n    get:\n      tags:\n        - Consumer\n      description: This API allows a consumer to browse files/datasets that providers have made available publicly. This API can be used on a browser in which case an HTML page containing the folders is returned. Alternatively, it could also be invoked from a user-agent such as ``curl`` if the fully qualified resource ID is known.\n      operationId: provider\n      security:\n        - datasetu-auth-server: [read]\n      parameters:\n        - name: RESOURCE_ID\n          in: path\n          required: false\n          description: A fully qualified resource name obtained from the datasetu catalogue. In the above resource ID, the full path to access the file is ``/provider/public/rbccps.org/e096b3abef24b99383d9bd28e9b8c89cfd50be0b/example.com/test-category/test-resource``. Furthermore, if a consumer wants to explore all publicly available datasets, they can simply invoke the ``/provider/public`` endpoint which will display publicly available datasets from all providers (of that Vermillion instance)\n          schema:\n            type: string\n            example: \"rbccps.org/e096b3abef24b99383d9bd28e9b8c89cfd50be0b/example.com/test-category/test-resource\"\n          allowReserved: true\n      responses:\n        200:\n          description: Consumer sees one or more public files/datasets that a provider has made available publicly.\n          content:\n            text/plain:\n              schema:\n                type: string\n                items:\n                  type: string\n              example: rbccps.org, iisc.com\n\nsecurity:\n  - datasetu-auth-server:\n      - read\n      - write\ncomponents:\n  securitySchemes:\n    datasetu-auth-server:\n      type: apiKey\n      in: query\n      name: token\n      scopes:\n        read: Grants read access to resources\n        write: Grants write access to resources\n      description: The datasetu-auth-server is the authentication, authorisation and accounting (AAA) server of Datasetu. Data providers can set fine-grained access control policies to regulate access to their resources/datasets. Data consumers can request access tokens to get access to resources. For more information please refer to [Datasetu Auth Server](https://datasetu.github.io/auth/index.html) documentation. Access on a resource could be granted by providers using a ``read`` scope or a ``write`` scope. In the ``read`` scope, consumers will be able to invoke read-related APIs on the datasets. In the ``write`` scope, consumers will be able to invoke APIs that \"write\" to the resource. All APIs except publish need a ``read`` scope. The publish API needs a ``write`` scope for invocation.\n      scheme: custom\n\n  schemas:\n    scroll-search:\n      type: object\n      properties:\n        hits:\n          type: object\n          description: This is the number of hits of data points of the resource in JSON format.\n          properties:\n            data:\n              type: object\n              description: This can be any free-form data of the resource in JSON format.\n              example: { \"data\": { \"Project\": \"Vermillion\",\"ApiDocs\": \"Redoc\", \"Definition\": \"OpenAPI\" } }\n            timestamp:\n              type: string\n              description: Timestamp at which the data was recorded.\n              example: '2021-03-03T10:18:00.952628Z'\n            id:\n              type: string\n              description: A fully qualified id of the resource.\n              example: 'rbccps.org/e096b3abef24b99383d9bd28e9b8c89cfd50be0b/example.com/test-category/test-resource.public'\n            category:\n              type: string\n              description: A broad category into which resourceId/data falls into.\n              example: test-category\n            co-ordinates:\n              type: array\n              description: An array of co-ordinates in [longitude, latitude] format.\n              example: [ '56.9', '76.5' ]\n            mime-type:\n              type: string\n              example: application/json\n        scroll_id:\n          type: string\n          example: FGluY2x1ZGVfY29udGV4dF91dWlkDXF1ZXJ5QW5kRmV0Y2gBFDFXVGpZbmdCLXVCbkdFcEk3TFF1AAAAAAAAAAIWZWNVMWdVVkVUNHlub1kzdldYR2d3Zw==\n          description: This is the scroll Id associated with data.\n    publish-timeSeriesData:\n      type: object\n      properties:\n        timestamp:\n          type: string\n          description: An optional parameter to indicate the relevant timestamp of the resource (created, modified etc.). When not specified, this field defaults to the time at which the data was published.\n          example: '2021-03-03T10:18:00.952628Z'\n        data:\n          type: object\n          description: A mandatory field that contains the data of the resource. This is encased in the ``data`` field to allow for uniform searchability.\n          example: {\"data\" : { \"PM10\" : {\"value\": \"70\", \"unit\": \"micrograms per cubic metre\"}}}\n        coordinates:\n          type: array\n          items:\n            type: string\n          description: An array of co-ordinates specified as [longitude, latitude].\n          example: [ '56.898989', '67.4939' ]\n      required:\n        - data\n    publish-staticData:\n      properties:\n        file:\n          description: The file that needs to be published\n          type: string\n          format: binary\n          example: 'War_and_Peace.pdf'\n        metadata:\n          description: Metadata of the uploaded file as a json.\n          type: string\n          format: binary\n          example: 'metadata.json'\n    resourceId-array:\n      type: array\n      items:\n        type: string\n        description: A json array of resourceIds.\n      example: ['rbccps.org/e096b3abef24b99383d9bd28e9b8c89cfd50be0b/example.com/test-category/test-resource.public', 'rbccps.org/e096b3abef24b99383d9bd28e9b8c89cfd50be0b/example.com/test-category/test-resource-1']\n    resourceId:\n      description: A fully qualified resource name obtained from the datasetu catalogue. If the resource ID or a set of resource IDs do not end with '.public', then the query should compulsorily have an access token.\n      type: string\n      example: 'rbccps.org/e096b3abef24b99383d9bd28e9b8c89cfd50be0b/example.com/test-category/test-resource.public'\n    time-series:\n      type: object\n      properties:\n        id:\n          oneOf:\n            - $ref: '#/components/schemas/resourceId'\n            - $ref: '#/components/schemas/resourceId-array'\n        time:\n          type: object\n          $ref: '#/components/schemas/time'\n        scroll_duration:\n          type: string\n          description: The time duration specified/requested for the ES context to be alive and subsequently to scroll in \u0026 around the data\n          example: 60m\n        size:\n          type: integer\n          description: The number of hits that consumer is interested in.\n          example: 3\n      required:\n        - id\n        - time\n    geo-spatial:\n      type: object\n      properties:\n        id:\n          oneOf:\n            - $ref: '#/components/schemas/resourceId'\n            - $ref: '#/components/schemas/resourceId-array'\n        geoDistance:\n          type: object\n          $ref: '#/components/schemas/geoDistance'\n        scroll_duration:\n          type: string\n          description: The time duration specified/requested for the ES context to be alive and subsequently to scroll in \u0026 around the data\n          example: 60m\n        size:\n          type: integer\n          description: The number of hits that consumer is interested in.\n          example: 6\n      required:\n        - id\n        - geoDistance\n    attribute-search:\n      type: object\n      properties:\n        attribute:\n          oneOf:  #If one-of has schemas of type object then give the description here itself. If description is given in subsequent schema object it wont work.\n            - $ref: '#/components/schemas/attribute-text'\n            - $ref: '#/components/schemas/attribute-numeric'\n          description: |\n            In the 'attribute-text' based search, ``term`` \u0026 ``value`` parameters are mandatory and in the 'attribute-numeric' based search, ``term``, ``min`` \u0026 ``max`` keys are mandatory. The text search is for filtering using a text-key and a text-value. E.g. \n            ```\n            {\"term\": \"car-type\", \"value\": \"sedan\"} \n            ```\n            The 'attribute-numeric' search is for searching over text-keys and numeric-values. E.g. \n            ```\n            {\"term\": \"speed\", \"min\": 50, \"max\": 60}\n            ```\n        id:\n          oneOf:\n            - $ref: '#/components/schemas/resourceId'\n            - $ref: '#/components/schemas/resourceId-array'\n        scroll_duration:\n          type: string\n          description: The time duration specified/requested for the ES context to be alive and subsequently to scroll in \u0026 around the data\n          example: 60m\n        size:\n          type: integer\n          description: The number of hits that consumer is interested in.\n          example: 9\n      required:\n        - id\n        - attribute\n    complex-search:\n      description: This is the example of complex search which uses all combination of time-series, geo-spatial \u0026 attribute based search.\n      type: object\n      properties:\n        id:\n          oneOf:\n            - $ref: '#/components/schemas/resourceId'\n            - $ref: '#/components/schemas/resourceId-array'\n        attribute:\n          type: object\n          description: Attribute is a json object which has three sub parts/keys - min, max and term. For a text filter, ``term`` and ``value`` are sufficient. For searching on a numeric value, ``term``, ``min`` and ``max`` are necessary.\n          oneOf:\n            - $ref: '#/components/schemas/attribute-text'\n            - $ref: '#/components/schemas/attribute-numeric'\n        time:\n          type: object\n          description: Time is a jsonObject containing start and end timestamps\n          $ref: '#/components/schemas/time'\n        geo-spatial:\n          type: object\n          description: A JSON object containing centre coordinates and the distance (radius) for the search\n          properties:\n            id:\n              oneOf:\n                - $ref: '#/components/schemas/resourceId'\n                - $ref: '#/components/schemas/resourceId-array'\n            geoDistance:\n              type: object\n              $ref: '#/components/schemas/geoDistance'\n          required:\n            - id\n            - geoDistance\n        scroll_duration:\n          type: string\n          description: The time duration specified/requested for the ES context to be alive and subsequently to scroll in \u0026 around the data\n          example: 60m\n        size:\n          type: integer\n          description: The number of hits that consumer is interested in.\n          example: 3\n      required:\n        - id\n\n    download:\n      description: Schema for the download API\n      type: string\n      example: This is a test-string\n\n    latest:\n      description: schema for latest data\n      type: object\n      properties:\n        data:\n          type: object\n          description: The data from the resource.\n          example: { \"data\": { \"Project\": \"Vermillion\",\"ApiDocs\": \"Redoc\", \"Definition\": \"OpenAPI\" } }\n        timestamp:\n          type: string\n          description: Timestamp of the datapoint. If left empty while publishing, it defaults to the time of publish\n          example: '2021-03-05T10:18:00.952628Z'\n        id:\n          type: string\n          description: Resource ID of the dataset.\n          example: 'rbccps.org/e096b3abef24b99383d9bd28e9b8c89cfd50be0b/example.com/test-category/test-resource.public'\n        category:\n          type: string\n          description: The broad category into which the data stream from a resource falls into.\n          example: test-category\n\n    search:\n      description: schema for search API response.\n      type: object\n      properties:\n        hits:\n          type: object\n          description: This is the number of hits of data of the resource in JSON format.\n          properties:\n            data:\n              type: object\n              description: This can be any free-form data of the resource in JSON format.\n              example: {\"data\": {\"Project\": \"Vermillion\",\"ApiDocs\": \"Redoc\", \"Definition\": \"OpenAPI\"}}\n            timestamp:\n              type: string\n              description: Timestamp at which the data was recorded.\n              example: '2021-03-03T10:18:00.952628Z'\n            id:\n              type: string\n              description: A fully qualified id of the resource.\n              example: 'rbccps.org/e096b3abef24b99383d9bd28e9b8c89cfd50be0b/example.com/test-category/test-resource.public'\n            category:\n              type: string\n              description: A broad category into which resourceId/data falls into.\n              example: test-category\n            co-ordinates:\n              type: array\n              description: An array of co-ordinates in [longitude, latitude] format.\n              example: [ '56.9', '76.5' ]\n            mime-type:\n              type: string\n              example: application/json\n        scroll_id:\n          type: string\n          example: FGluY2x1ZGVfY29udGV4dF91dWlkDXF1ZXJ5QW5kRmV0Y2gBFDFXVGpZbmdCLXVCbkdFcEk3TFF1AAAAAAAAAAIWZWNVMWdVVkVUNHlub1kzdldYR2d3Zw==\n          description: This is the scroll Id associated with data.\n    attribute-numeric:\n      type: object\n      properties:\n        term:\n          type: string\n          example: 'speed'\n          description: Term can be any JSON key that is present in the dataset that needs to be searched for.\n        min:\n          type: string\n          example: '30'\n          description: The minimum numeric value of the term that the consumer is interested in.\n        max:\n          type: string\n          example: '60'\n          description: The maximum numeric value of the term that the consumer is interested in.\n      required:\n        - term\n        - min\n        - max\n    attribute-text:\n      type: object\n      properties:\n        term:\n          type: string\n          example: 'car-type'\n          description: Term can be any key that is present in the dataset that needs to be searched for.\n        value:\n          type: string\n          example: 'SUV'\n          description: The specific value of the term that the consumer is interested in.\n      required:\n        - term\n        - value\n    geoDistance:\n      description: Used to perform a circular geo-spatial search with the specified co-ordinates as the center and distance as the radius of the circle. Returns all the resources (with other filters applied, if any) lying inside the circle.\n      type: object\n      properties:\n        co-ordinates:\n          type: array\n          example: ['82.9739', '25.3176']\n          description: An array of co-ordinates specified as [longitude, latitude].\n        distance:\n          type: string\n          example: '600m'\n          description: Distance should be specified in metres.\n      required:\n        - co-ordinates\n        - distance\n    time:\n      description: A jsonObject specifying the start and end times.\n      type: object\n      properties:\n        start:\n          type: string\n          example: '2021-02-3'\n          description: Starting timestamp of the time filter. It could be in any valid time format.\n        end:\n          type: string\n          example: '2021-03-3'\n          description: Ending timestamp of the time filter. It could be in any valid time format.\n      required:\n        - start\n        - end\n\n  responses:\n    BAD-REQUEST:\n      description: The request is malformed. One or more required parameters are invalid in the request.\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              code:\n                type: string\n                example: '400'\n              message:\n                type: string\n                example: 'Invalid Request'\n            required:\n              - code\n              - message\n    NOT-FOUND:\n      description: The requested resource/endpoint is not found on the server.\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n                code:\n                  type: string\n                  example: '404'\n                message:\n                  type: string\n                  example: 'Data not found'\n            required:\n              - code\n              - message\n    FORBIDDEN:\n      description: Access to the requested resource(s) is forbidden due to invalid token or inadequate permissions.\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n                code:\n                  type: string\n                  example: '403'\n                message:\n                  type: string\n                  example: 'Forbidden'\n            required:\n              - code\n              - message\n    INTERNAL-SERVER:\n      description: The resource server currently is unable to handle the request. Please try again.\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n                code:\n                  type: string\n                  example: '500'\n                message:\n                  type: string\n                  example: 'Internal server'\n            required:\n              - code\n              - message\n",
			"canonicalURL": "/github.com/datasetu/vermillion@f5d79ab6e5aaa90680e63287ba3589de8cfe5ec8/-/blob/api-docs/openapi.yml",
			"externalURLs": [
				{
					"url": "https://github.com/datasetu/vermillion/blob/f5d79ab6e5aaa90680e63287ba3589de8cfe5ec8/api-docs/openapi.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: at 1:13728: path MUST NOT contain a query string"
}