{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/netiq-ps/netiq-idm-rest-curl-jq"
		},
		"file": {
			"name": "REST_SimpleLoginMode.yaml",
			"size": 0,
			"path": "openapi/edirapi/REST_SimpleLoginMode.yaml",
			"byteSize": 218765,
			"content": "openapi: 3.0.0\ninfo:\n  version: 1.3.0\n  title: eDirectory REST\n  description: This document provides the list of all endpoints and their JSON request/response details of eDirectory REST API. eDirectory REST API (eDirAPI) is JSON format based ldap access application programming Interface(API) that uses HTTP(s) requests to perform ldap operations. REST is architectural style for distributed hypermedia systems. Using these APIs, web application can provide customized secure access to ldap directory. Users can view and manipulate users, groups, objects.\n  license:\n    name: Commercial\nservers:\n  - url: 'https://{server_address}:{port}/{identifier}/{version}/{tenant}'\n    description: Base URL where the REST API will be hosted\n    variables:\n      version:\n        default: v1\n      tenant:\n        default: treename\n      identifier:\n        default: eDirAPI\npaths:\n  /schema/syntaxes:\n    get:\n      summary: List all Syntaxes\n      tags:\n        - Syntaxes\n      operationId: listSyntaxes\n      security:\n        - cookieAuth: []\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n      responses:\n        '200':\n          description: List of all syntaxes\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Syntaxlist'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/schema/syntaxes/{id}':\n    get:\n      summary: 'List syntax referred by {id}'\n      tags:\n        - Syntaxes\n      operationId: getSyntax\n      security:\n        - cookieAuth: []\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - name: id\n          in: path\n          required: true\n          description: The id of the syntax\n          schema:\n            type: string\n          example: 1361411466115121200\n      responses:\n        '200':\n          description: Syntax definition\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Syntax'\n        '404':\n          description: Syntax ID not found\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /schema/attributes:\n    get:\n      summary: List all attributes\n      tags:\n        - Attributes\n      operationId: listAttributes\n      security:\n        - cookieAuth: []\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n      responses:\n        '200':\n          description: List of all attributes\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AttributeList'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      summary: Create an attribute definition\n      tags:\n        - Attributes\n      operationId: postAttribute\n      requestBody:\n        description: The attribute definition\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AttributePost'\n      security:\n        - cookieAuth: []\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port\n      responses:\n        '201':\n          description: Attribute created\n        '400':\n          description: Bad request\n        '401':\n          description: Unauthorized\n        '409':\n          description: Conflict - resource already exists\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'            \n  '/schema/attributes/{name}':\n    get:\n      summary: 'Get attribute definition defined by {name}'\n      tags:\n        - Attributes\n      operationId: getAttribute\n      security:\n        - cookieAuth: []\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - name: name\n          in: path\n          required: true\n          description: The name of the attribute\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Attribute definition\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Attribute'\n        '404':\n          description: Attribute not found\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    \n    delete:\n      summary: Delete an attribute definition\n      tags:\n        - Attributes\n      operationId: delAttribute\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port\n        - name: name\n          in: path\n          required: true\n          description: The name of the attribute\n          schema:\n            type: string\n      security:\n        - cookieAuth: []\n      responses:\n        '204':\n          description: Deletion success\n        '401':\n          description: Unauthorized\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /schema/objectClasses:\n    get:\n      summary: List all objectClasses\n      tags:\n        - ObjectClasses\n      operationId: listObjectClass\n      security:\n        - cookieAuth: []\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n      responses:\n        '200':\n          description: List of all ObjectClasses\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ObjectClassList'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      summary: Create an objectClass definition\n      tags:\n        - ObjectClasses\n      operationId: postObjectClass\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port\n      requestBody:\n        description: The attribute definition\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ObjectClassPost'\n      security:\n        - cookieAuth: []\n      responses:\n        '201':\n          description: ObjectClass created\n        '400':\n          description: Bad request\n        '401':\n          description: Unauthorized\n        '409':\n          description: Conflict - resource already exists\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    put:\n      summary: Update the objectClass definition\n      tags:\n        - ObjectClasses\n      operationId: putObjectClass\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port\n      requestBody:\n        description: The attribute definition\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ObjectClassPost'\n      security:\n        - cookieAuth: []\n      responses:\n        '201':\n          description: ObjectClass updated\n        '400':\n          description: Bad request\n        '401':\n          description: Unauthorized\n        '409':\n          description: Conflict - resource already exists\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/schema/objectClasses/{name}':\n    get:\n      summary: 'Get an ObjectClass definition specified by {name}'\n      tags:\n        - ObjectClasses\n      operationId: getObjectClass\n      security:\n        - cookieAuth: []\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - name: name\n          in: path\n          required: true\n          description: The name of the objectClass\n          schema:\n            type: string\n      responses:\n        '200':\n          description: ObjectClass definition\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ObjectClass'\n        '404':\n          description: ObjectClass not found\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      summary: Delete an ObjectClass definition\n      tags:\n        - ObjectClasses\n      operationId: delObjectClass\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token.\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port\n        - name: name\n          in: path\n          required: true\n          description: The name of the ObjectClass\n          schema:\n            type: string\n      security:\n        - cookieAuth: []\n      responses:\n        '204':\n          description: Deletion success\n        '401':\n          description: Unauthorized\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /session:\n    get:\n      summary: Find if session is valid\n      tags:\n        - Session\n      operationId: validateSession\n      security:\n        - cookieAuth: []\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n      responses:\n        '200':\n          description: Session definition\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Session'\n        '400':\n          description: Bad request\n        '401':\n          description: Unauthorized\n    post:\n      summary: Create a session - Login\n      tags:\n        - Session\n      operationId: createSession\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port\n      requestBody:\n        description: Data required for a session\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SessionPost'\n      security: []\n      responses:\n        '201':\n          description: Session created\n          headers:\n            Set-Cookie:\n              description: \u003e-\n                Session cookie set. This should be returned in X-RSESSION\n                header.\n              schema:\n                type: string\n                example: RSESSIONID=B9344BA; Path=/; HttpOnly; Secure\n        '400':\n          description: Bad request\n        '401':\n          description: Unauthorized\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      summary: Delete a session - Logout\n      tags:\n        - Session\n      operationId: deleteSession\n      security:\n        - cookieAuth: []\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port\n      responses:\n        '204':\n          description: Deletion success\n        '401':\n          description: Unauthorized\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/getanticsrftoken':\n    get:\n      summary : Generate the aticsrftoken and provide the Generated token in the header name \"X-CSRF-Token\" for the next requests. Call this endpoint once just after session creation.\n      tags:\n        - AntiCsrfToken\n      operationId: getanicsrftoken\n      security:\n        - cookieAuth: []\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n      responses:\n        '200':\n          description: antiCSRF token success\n          content:\n            string:\n              example: HuyS8gAPgtfzE4KhUXzNHJzB\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'      \n  '/{resource DN}/search':\n    post:\n      summary: Create a search request\n      tags:\n        - Search\n      operationId: createSearch\n      requestBody:\n        description: Parameters of the search request\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SearchRequest'\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port\n        - name: resource DN\n          in: path\n          required: true\n          description: The resource DN of the entry\n          schema:\n            type: string\n            example: o=alice%2Fcn=bob\n      security:\n        - cookieAuth: []\n      responses:\n        '200':\n          description: Search response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PagedResultSet'\n        '400':\n          description: Bad request\n        '401':\n          description: Unauthorized\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n \n  '/{resource DN}/':\n    get:\n      summary: List children of objects under resource DN\n      tags:\n        - Resource Management\n      operationId: listEntry\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - name: resource DN\n          in: path\n          required: true\n          description: The resource DN of the entry\n          schema:\n            type: string\n            example: o=alice%2Fcn=bob\n      security:\n        - cookieAuth: []\n      responses:\n        '200':\n          description: Entry read success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  description: list of resource DN of children\n                  type: string\n                example:\n                  - /eDirAPI%2Fv1%2FDEMOTREE%2Fo=alice%2Fl=bob\n                  - /eDirAPI%2Fv1%2FDEMOTREE%2Fo=alice%2Fcn=sam\n        '404':\n          description: Entry not found\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/{container DN}':\n    post:\n      summary: Create an entry\n      tags:\n        - Resource Management\n      operationId: postEntry\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port\n        - name: container DN\n          in: path\n          required: true\n          description: The container DN of the entry of the search base - note that * denotes more items\n          schema:\n            type: string\n            example: o=alice%2Fcn=bob\n      requestBody:\n        description: The Entry data\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/EntryPost'\n      security:\n        - cookieAuth: []\n      responses:\n        '201':\n          description: Entry created\n        '400':\n          description: Bad request\n        '401':\n          description: Unauthorized\n        '409':\n          description: Conflict - resource already exists\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/{resource DN}':\n    get:\n      summary: 'Get an object referred to by resource DN'\n      tags:\n        - Resource Management\n      operationId: readEntry\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - name: resource DN\n          in: path\n          required: true\n          description: The resource DN of the entry\n          schema:\n            type: string\n            example: o=alice%2Fcn=bob\n      security:\n        - cookieAuth: []\n      responses:\n        '200':\n          description: Entry definition\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Entry'\n        '404':\n          description: Entry not found\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n    delete:\n      summary: Delete an entry\n      tags:\n        - Resource Management\n      operationId: deleteEntry\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token.\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port\n        - name: resource DN\n          in: path\n          required: true\n          description: The resource DN of the entry\n          schema:\n            type: string\n            example: o=alice%2Fcn=bob\n      security:\n        - cookieAuth: []\n      responses:\n        '204':\n          description: Deletion success\n        '401':\n          description: Unauthorized\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    patch:\n      summary: Modify an entry\n      tags:\n        - Resource Management\n      operationId: patchEntry\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port\n        - name: resource DN\n          in: path\n          required: true\n          description: The resource DN of the entry\n          schema:\n            type: string\n            example: o=alice%2Fcn=bob\n      requestBody:\n        description: The entry modification data in JSON Patch format\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Patch'\n      security:\n        - cookieAuth: []\n      responses:\n        '204':\n          description: Modification success\n        '400':\n          description: Bad request\n        '401':\n          description: Unauthorized\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/move':\n    post:\n      summary: 'Moves, renames and/or copies an entry'\n      tags:\n        - Resource Management\n      operationId: moveEntry\n      requestBody:\n        description: 'The entry move, rename and/or copy data in JSON format'\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MoveItem'\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port\n      security:\n        - cookieAuth: []\n      responses:\n        '204':\n          description: Operation success\n        '400':\n          description: Bad request\n        '401':\n          description: Unauthorized\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MoveResponse'\n  '/{resource DN}/compare':\n    post:\n      summary: 'Compares the value(s) of given attribute of a dn'\n      tags:\n        - Resource Management\n      operationId: compareEntry\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port\n        - name: resource DN\n          in: path\n          required: true\n          description: The resource DN of the entry\n          schema:\n            type: string\n            example: o=alice%2Fcn=bob\n      requestBody:\n        description: 'The entry attribute and values to be compared in JSON format'\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Compare'\n      security:\n        - cookieAuth: []\n      responses:\n        '200':\n          description: Comparison done\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/{resource DN}/privileges':\n    post:\n      summary: Get the privileges list of trustee DN for the resource DN for a given set of attributes\n      tags:\n        - Resource Management\n      operationId: getPrivList\n      requestBody:\n        description: Trustee DN and a list of attributes of the trustee DN for which the rights are asked\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/GetPrivListRequest'\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port\n        - name: resource DN\n          in: path\n          required: true\n          description: The resource DN of the entry\n          schema:\n            type: string\n            example: o=alice%2Fcn=bob   \n      security:\n        - cookieAuth: []\n      responses:\n        '200':\n          description: List of attributes and corresponding privileges\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetPrivListResultSet'\n        '400':\n          description: Bad request\n        '401':\n          description: Unauthorized\n        '404':\n          description: Attribute not found  \n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/{partition DN}/splitPartition':\n    post:\n      summary: Split the Partitons rooted at DN from  parent partition\n      tags:\n        - Partition And Replica      \n      operationId: splitPartions\n      requestBody:\n        description: Split the  partitions \n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SplitRequest'\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port      \n        - name: partition DN\n          in: path\n          required: true\n          description: The resource DN of the entry of the search base - note that * denotes more items\n          schema:\n            type: string\n            example: o=novell    \n      responses:\n        '200':\n          description: Split Partition  created  successfully \n        '400':\n          description:  Container not found \n        '401':\n          description: Unauthorized - access control prevents entry deletion          \n        '409':\n          description: \"NDS error:partition already exists (-679)\"      \n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  \n  \n  '/{partition DN}/mergePartitions':\n    post:\n      summary: Merge the Partitons rooted at DN with parent partition\n      tags:\n        - Partition And Replica       \n      operationId: mergePartions\n      requestBody:\n        description: Merge the splited partitions \n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MergeRequest'\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port      \n        - name: partition DN\n          in: path\n          required: true\n          description: The resource DN of the entry of the search base - note that * denotes more items\n          schema:\n            type: string\n            example: o=novell    \n      responses:\n        '200':\n          description: Merge Partition  created  successfully \n        '400':\n          description: Container not found\n        '401':\n          description: Unauthorized - access control prevents entry deletion          \n        '404':\n          description: \"NDS error :no such value (-602)\"        \n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  '/{partition DN}/addReplica':\n    post:\n      summary: Add Replica \n      tags:\n        - Partition And Replica       \n      operationId: addReplica\n      requestBody:\n        description: add a new Replica \n         - Replica type are\n          a) MASTER \n          b) READ_WRITE\n          c) READ_ONLY\n          d) SPARSE_WRITE\n          e) SPARSE_READ        \n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/addReplicaRequest'\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port      \n        - name: partition DN\n          in: path\n          required: true\n          description: The resource DN of the entry of the search base - note that * denotes more items\n          schema:\n            type: string\n            example: o=novell \n      responses:\n        '200':\n          description: A new Replica added  Successfully\n        '400':\n          description: \"NDS error: replica already exists (-624)\"\n        '401':\n          description: Token Not Found \n        '404':\n          description: \"NDS error: no such entry (-601)\"  \n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  '/{partition DN}/changeReplica':\n    post:\n      summary: Change the type of Replica to the new type specifies by replica type\n      tags:\n        - Partition And Replica       \n      operationId: changeReplica\n      requestBody:\n        description: Change the Replica type             \n         - Replica type are\n          a) MASTER \n          b) READ_WRITE\n          c) READ_ONLY\n          d) SPARSE_WRITE\n          e) SPARSE_READ\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/changeReplicaRequest'\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port      \n        - name: partition DN\n          in: path\n          required: true\n          description: The resource DN of the entry of the search base - note that * denotes more items\n          schema:\n            type: string\n            example: o=novell \n      responses:\n        '200':\n          description: Replica Type changed  Successfully\n        '400':\n          description:  \"NDS error : no such entry (-601)\"\n        '401':\n          description: Invalid credentials \n        '404':\n          description: Could not decode LDAP Extension packet  \n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  '/{partition DN}/removeReplica':\n    post:\n      summary: Remove the present  Replica \n      tags:\n        - Partition And Replica       \n      operationId: RemoveReplica\n      requestBody:\n        description:  Remove the Replica \n         - Replica type are\n          a) MASTER \n          b) READ_WRITE\n          c) READ_ONLY\n          d) SPARSE_WRITE\n          e) SPARSE_READ\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/removeReplicaRequest'\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port      \n        - name: partition DN\n          in: path\n          required: true\n          description: The resource DN of the entry of the search base - note that * denotes more items\n          schema:\n            type: string\n            example: o=novell \n      responses:\n        '200':\n          description: Replica removed  Successfully\n        '400':\n          description:  \"NDS error:no such entry (-601)\"\n        '401':\n          description:  Token Not Found  \n        '404':\n          description: Could not decode LDAP Extension packet  \n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  '/{partition DN}/getReplicaInfo':\n    post:\n      summary: Get the  Replica Information\n      tags:\n        - Partition And Replica       \n      operationId: getReplicaInfo\n      requestBody:\n        description: Get Replica Information \n         - Replica type are\n          a) MASTER \n          b) READ_WRITE\n          c) READ_ONLY\n          d) SPARSE_WRITE\n          e) SPARSE_READ\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/getReplicaInfoRequest'\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port      \n        - name: partition DN\n          in: path\n          required: true\n          description: The resource DN of the entry of the search base - note that * denotes more items\n          schema:\n            type: string\n            example: o=novell \n      responses:\n        '200':\n          description: Give the Replica info in that server\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/getReplicaInfoResponse'\n        '400':\n          description:  Container not found\n        '401':\n          description: Invalid credentials \n        '404':\n          description: \"NDS error: no such entry (-601)\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  '/{server DN}/listReplica':\n    get:\n      summary: List Of Replica that reside on specific server\n      tags:\n        - Partition And Replica       \n      operationId: listReplica\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port      \n        - name: server DN\n          in: path\n          required: true\n          description: The resource DN of the entry of the search base - note that * denotes more items\n          schema:\n            type: string\n            example: o=novell/cn=server2   \n      responses:\n        '200':\n          description: list the Replica present in that server\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/listofReplicaResponse'\n        '400':\n          description:  NDS error=no such value (-602)\n        '401':\n          description: Invalid credentials (49)\n        '404':\n          description: Could not decode LDAP Extension packet  \n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/{server DN}/setReplicaFilter':\n    post:\n      summary: Set the Filter on the server\n      tags:\n      - Partition And Replica\n      operationId: setReplicaFilter\n      requestBody:\n        description: set the filters to server Replica  \n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/setReplicaFilterRequest'\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port      \n        - name: server DN\n          in: path\n          required: true\n          description: The resource DN of the entry of the search base - note that * denotes more items\n          schema:\n            type: string\n            example: cn=server2,o=novell    \n      responses:\n        '200':\n          description: Set Replica filter   created  successfully \n        '400':\n          description: Container not found\n        '401':\n          description: Unauthorized - access control prevents entry deletion          \n        '404':\n          description: \"NDS error :no such value (-602)\"        \n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  \n  '/{server DN}/getReplicaFilter':\n    get:\n      summary : get the filter Replica details on that server \n      tags:\n      - Partition And Replica\n      operationId: getReplicaFilter\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port      \n        - name: server DN\n          in: path\n          required: true\n          description: The resource DN of the entry of the search base - note that * denotes more items\n          schema:\n            type: string\n            example: o=novell/cn=server2   \n      responses:\n        '200':\n          description: list the Replica present in that server\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/getReplicaFilterResponse'\n        '400':\n          description:  NDS error=no such value (-602)\n        '401':\n          description: Invalid credentials (49)\n        '404':\n          description: Could not decode LDAP Extension packet  \n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n                \n  '/{resource DN}/passwordModify':\n    post:\n      summary: LDAP Password Modify Extended Operation\n      tags:\n        - Resource Management\n      operationId: PasswordModifyExtended\n      requestBody:\n        description: oldpassword and newPassword will be present in the request body and UserIdentity will be passed in the URL as resource DN. oldpassword and newPassword will be in base64 encoded format\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PasswordModifyRequest'\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port\n        - name: resource DN\n          in: path\n          required: true\n          description: The resource DN of the entry\n          schema:\n            type: string\n            example: o=alice%2Fcn=bob    \n      security:\n        - cookieAuth: []\n      responses:\n        '200':\n          description: password modify success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PasswordModifyResponse'\n        '400':\n          description: Bad request\n        '401':\n          description: Unauthorized\n        '404':\n          description: Attribute not found\n        '418':\n          description: Unwilling To Perform, if the backend holding the target entry does not support the given operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PasswordModifyUnwillingToPerform'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/{server DN}/triggerLimber':\n    post:\n      summary: Trigger Limber background process on the server DN\n      tags:\n        - Resource Management\n      operationId: triggerLimber\n      requestBody:\n        description: Request body will be empty\n        required: true\n        content:\n          application/json:\n            schema:\n                $ref: '#/components/schemas/triggerLimberPost'\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port\n        - name: server DN\n          in: path\n          required: true\n          description: The server DN on which the Limber process is to be triggred\n          schema:\n            type: string\n            example: o=alice%2Fcn=SLES11SP3server\n      security:\n        - cookieAuth: []\n      responses:\n        '200':\n          description: Limber process trigerred successfully\n        '400':\n          description: Bad request\n        '401':\n          description: Unauthorized\n        '404':\n          description: Server DN not found\n        default:\n          description: Unexpected error  \n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  \"/pki/servercertificates/createCertificate\":\n    post:\n      summary: Create the Server Certificate\n      tags:\n        - Certificate Management\n      operationId: createServerCertificate\n      requestBody:\n        description: parameters for Create  server certificate\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CreateServerRequest\"\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port\n      responses:\n        \"201\":\n          description: Certificate Created Successfully\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SuccessResponse\"\n        \"404\":\n          description: Entry not found\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  \"/pki/servercertificates/importCertificate\":\n    post:\n      summary: Create the Server Certificate with import method\n      tags:\n        - Certificate Management\n      operationId: importServerCertificate\n      requestBody:\n        description: parameters for Create server certificate with import method\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ImportServerRequest\"\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port\n      responses:\n        \"201\":\n          description: Certificate Created Successfully\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SuccessResponse\"\n        \"404\":\n          description: Entry not found\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  \"/pki/servercertificates/backupCertificate\":\n    post:\n      summary: Backup the server certificate\n      tags:\n        - Certificate Management\n      operationId: backupServerCertificate\n      requestBody:\n        description: parameters for Backup server Certificate\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/BackupServerRequest\"\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port\n      responses:\n        \"200\":\n          description: Certificate backup successfull\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BackupResponse\"\n        \"404\":\n          description: Entry not found\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  \"/pki/servercertificates/exportCertificate\":\n    post:\n      summary: Export the server certificate\n      tags:\n        - Certificate Management\n      operationId: exportServerCertificate\n      requestBody:\n        description: parameters for Export server Certificate\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CertificateRequest\"\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port\n      responses:\n        \"200\":\n          description: Certificate export successfull\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ExportResponse\"\n        \"404\":\n          description: Entry not found\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  \"/pki/serverCertificates/decodeCSR\":\n    post:\n      summary: Decode the Certificate\n      tags:\n        - Certificate Management\n      operationId: decodeCSR\n      requestBody:\n        description: parameters for decode certificate\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Decode\"\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port\n      responses:\n        \"200\":\n          description: Decoding the certificate successfull\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DecodeResponse\"\n        \"404\":\n          description: Entry not found\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  \"/pki/serverCertificates/getCertificates\":\n    post:\n      summary: Get the server certificate\n      tags:\n        - Certificate Management\n      operationId: getServerCertificate\n      requestBody:\n        description: parameters for Get server certificate\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/GetRequest\"\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port\n      responses:\n        \"200\":\n          description: Server Certificate Retrieved successfull\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Parse\"\n        \"404\":\n          description: Entry not found\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  \"/pki/serverCertificates/getChain\":\n    post:\n      summary: Get the chain certificate\n      tags:\n        - Certificate Management\n      operationId: getChainCertificate\n      requestBody:\n        description: parameters for Certificate Hierarchy\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/GetRequest\"\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port\n      responses:\n        \"200\":\n          description: chain Certificate Retrieved successfull\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Chain\"\n        \"404\":\n          description: Entry not found\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  \"/pki/serverCertificates/getCSR\":\n    post:\n      summary: Get the CSR(Certificate Signing Request)\n      tags:\n        - Certificate Management\n      operationId: getCSR\n      requestBody:\n        description: parameters for Get CSR\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/GetCSRRequest\"\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port\n      responses:\n        \"200\":\n          description: CSR retrieved successful\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Decode\"\n        \"404\":\n          description: Entry not found\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  \"/pki/serverCertificates/replaceCertificate\":\n    post:\n      summary: Replace the server certificate\n      tags:\n        - Certificate Management\n      operationId: replaceCertificate\n      requestBody:\n        description: parameters for Replace server certificate\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ReplaceRequest\"\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port\n      responses:\n        \"200\":\n          description: Certificate replaced successfully\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SuccessResponse\"\n        \"404\":\n          description: Entry not found\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  \"/pki/serverCertificates/revokeCertificate\":\n    post:\n      summary: Revoke the server certificate\n      tags:\n        - Certificate Management\n      operationId: revokeCertificate\n      requestBody:\n        description: parameters for Revoke server certificate\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/RevokeServerRequest\"\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port\n      responses:\n        \"200\":\n          description: Certificate revoked successfully\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SuccessResponse\"\n        \"404\":\n          description: Entry not found\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  \"/pki/serverCertificates/validateCertificate\":\n    post:\n      summary: Validate the server certificate\n      tags:\n        - Certificate Management\n      operationId: validateCertificate\n      requestBody:\n        description: parameters for Validate Server Certificate\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CertificateRequest\"\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port\n      responses:\n        \"200\":\n          description: Certificate validate successfully\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SuccessResponse\"\n        \"404\":\n          description: Entry not found\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  \"/pki/serverCertificates/issueCertificate\":\n    post:\n      summary: Issue the certificate using CSR\n      tags:\n        - Certificate Management\n      operationId: issueCertificate\n      requestBody:\n        description: parameters for Issue Certificate\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/IssueRequest\"\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port\n      responses:\n        \"200\":\n          description: Certificate Issued successfully\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/IssueResponse\"\n        \"404\":\n          description: Entry not found\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  \"/pki/usercertificates/createCertificate\":\n    post:\n      summary: Create the user Certificate\n      tags:\n        - Certificate Management\n      operationId: createUserCertificate\n      requestBody:\n        description: parameters for Create user certificate\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CreateUserRequest\"\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port\n      responses:\n        \"201\":\n          description: Certificate Created Successfully\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SuccessResponse\"\n        \"404\":\n          description: Entry not found\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  \"/pki/usercertificates/backupCertificate\":\n    post:\n      summary: Backup the user certificate\n      tags:\n        - Certificate Management\n      operationId: backupUserCertificate\n      requestBody:\n        description: parameters for Backup user Certificate\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/BackupUserRequest\"\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port\n      responses:\n        \"200\":\n          description: Certificate backup successfull\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BackupResponse\"\n        \"404\":\n          description: Entry not found\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  \"/pki/usercertificates/exportCertificate\":\n    post:\n      summary: Export the user certificate\n      tags:\n        - Certificate Management\n      operationId: exportUserCertificate\n      requestBody:\n        description: parameters for Export user Certificate\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ExportUserRequest\"\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port\n      responses:\n        \"200\":\n          description: Certificate export successfull\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ExportResponse\"\n        \"404\":\n          description: Entry not found\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  \"/pki/userCertificates/getCertificates\":\n    post:\n      summary: Get the user certificate\n      tags:\n        - Certificate Management\n      operationId: getUserCertificate\n      requestBody:\n        description: parameters for Get user certificate\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/GetUserRequest\"\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port\n      responses:\n        \"200\":\n          description: User Certificate Retrieved successfull\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Parse\"\n        \"404\":\n          description: Entry not found\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  \"/pki/usercertificates/importCertificate\":\n    post:\n      summary: Create the User Certificate with import method\n      tags:\n        - Certificate Management\n      operationId: importUserCertificate\n      requestBody:\n        description: parameters for Create user certificate with import method\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ImportUserRequest\"\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port\n      responses:\n        \"201\":\n          description: Certificate Created Successfully\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SuccessResponse\"\n        \"404\":\n          description: Entry not found\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  \"/pki/userCertificates/revokeCertificate\":\n    post:\n      summary: Revoke the user certificate\n      tags:\n        - Certificate Management\n      operationId: revokeUserCertificate\n      requestBody:\n        description: parameters for Revoke user certificate\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/RevokeUserRequest\"\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port\n      responses:\n        \"200\":\n          description: Certificate revoked successfully\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SuccessResponse\"\n        \"404\":\n          description: Entry not found\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  \"/pki/userCertificates/validateCertificate\":\n    post:\n      summary: Validate the user certificate\n      tags:\n        - Certificate Management\n      operationId: validateUserCertificate\n      requestBody:\n        description: parameters for validate user certificate\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ExportUserRequest\"\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port\n      responses:\n        \"200\":\n          description: Certificate validate successfully\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SuccessResponse\"\n        \"404\":\n          description: Entry not found\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  \"/pki/trustedRootCertificates/getCertificates\":\n    post:\n      summary: Get the trustedRoot certificate\n      tags:\n        - Certificate Management\n      operationId: getTrustedRootCertificate\n      requestBody:\n        description: parameters for Get TrustedRoot certificate\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/GetTrustedRequest\"\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port\n      responses:\n        \"200\":\n          description: Certificate Retrieved successfull\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GetTrustedResponse\"\n        \"404\":\n          description: Entry not found\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  \"/pki/trustedRootCertificates/validateCertificate\":\n    post:\n      summary: Get the trustedRoot certificate\n      tags:\n        - Certificate Management\n      operationId: validateTrustedRootCertificate\n      requestBody:\n        description: parameters for validate TrustedRoot certificate\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ValidateTrustedRequest\"\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port\n      responses:\n        \"200\":\n          description: Certificate validated successfully\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SuccessResponse\"\n\n        \"404\":\n          description: Entry not found\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  \"/pki/certificateAuthority/backupCertificate\":\n    post:\n      summary: Backup an existing CA certificate into a PKCS12 file\n      tags:\n        - Certificate Management\n      operationId: backupCACertificate\n      requestBody:\n        description: parameters  backupcertificate\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/BackupCARequest\"\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port\n      responses:\n        \"200\":\n          description: Certificate backup successfull\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ExportResponse\"\n\n        \"404\":\n          description: Entry not found\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  \"/pki/certificateAuthority/createCertificateAuthority\":\n    post:\n      summary: Create Certificate Authority\n      tags:\n        - Certificate Management\n      operationId: createCertificateAuthority\n      requestBody:\n        description: parameters for createCertificateAuthority\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CreateCARequest\"\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port\n      responses:\n        \"201\":\n          description: Certificate Authority Created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SuccessResponse\"\n\n        \"404\":\n          description: Entry not found\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  \"/pki/certificateAuthority/createCRL\":\n    post:\n      summary: Create CRL\n      tags:\n        - Certificate Management\n      operationId: createCRL\n      requestBody:\n        description: parameters for createCRL\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CreateCRLRequest\"\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port\n      responses:\n        \"201\":\n          description: CRL Created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SuccessResponse\"\n\n        \"404\":\n          description: Entry not found\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  \"/pki/certificateAuthority/getCertificates\":\n    post:\n      summary: Get the certificates  of the CA\n      tags:\n        - Certificate Management\n      operationId: getCACertificates\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port\n      responses:\n        \"200\":\n          description: CA Certificate retrieved successfull\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GetCACertificate\"\n\n        \"404\":\n          description: Entry not found\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  \"/pki/certificateAuthority/getChain\":\n    post:\n      summary: Get the certificate chain of CA\n      tags:\n        - Certificate Management\n      operationId: getChainCertificateCA\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port\n      responses:\n        \"200\":\n          description: chain Certificate Retrieved successfull\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GetCACertificate\"\n        \"404\":\n          description: Entry not found\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  \"/pki/certificateAuthority/getCAConfiguration\":\n    post:\n      summary: Get CA Configuration settings\n      tags:\n        - Certificate Management\n      operationId: getCAConfiguration\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port\n      responses:\n        \"200\":\n          description: CA Configuration  settings retrieved\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CAConfiguration\"\n        \"404\":\n          description: Entry not found\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  \"/pki/certificateAuthority/getCRLs\":\n    post:\n      summary: Get CRLs\n      tags:\n        - Certificate Management\n      operationId: getCRLs\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port\n      responses:\n        \"200\":\n          description: CRLs retrieved\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GetCRLs\"\n        \"404\":\n          description: Entry not found\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  \"/pki/certificateAuthority/importCertificate\":\n    post:\n      summary: Restore CA Certificate by importing PKCS12 file\n      tags:\n        - Certificate Management\n      operationId: importCACertificate\n      requestBody:\n        description: parameters for importCertificate.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ImportCARequest\"\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port\n      responses:\n        \"201\":\n          description: CA Certificate Created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SuccessResponse\"\n        \"404\":\n          description: Entry not found\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  \"/pki/certificateAuthority/issueCRL\":\n    post:\n      summary: Issue CRL\n      tags:\n        - Certificate Management\n      operationId: issueCRL\n      requestBody:\n        description: parameters for issueCRL\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/IssueCRL\"\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port\n      responses:\n        \"200\":\n          description: CRL issued\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SuccessResponse\"\n        \"404\":\n          description: Entry not found\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  \"/pki/certificateAuthority/revokeCertificate\":\n    post:\n      summary: Revoke Certificate\n      tags:\n        - Certificate Management\n      operationId: revokeCACertificate\n      requestBody:\n        description: parameters for revokeCertificate\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/RevokeCARequest\"\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port\n      responses:\n        \"200\":\n          description: Certificate Revoked successfully\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SuccessResponse\"\n        \"404\":\n          description: Entry not found\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  \"/pki/certificateAuthority/updateCAConfiguration\":\n    post:\n      summary: Update CA Configuration settings\n      tags:\n        - Certificate Management\n      operationId: updateCAConfiguration\n      requestBody:\n        description: parameters for updateCAConfiguration\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CAConfiguration\"\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port\n      responses:\n        \"200\":\n          description: CA Configuration  settings updated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SuccessResponse\"\n        \"404\":\n          description: Entry not found\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  \"/pki/certificateAuthority/validateCertificate\":\n    post:\n      summary: Validate the certificate\n      tags:\n        - Certificate Management\n      operationId: validateCACertificate\n      requestBody:\n        description: Types of certificate are\n          a) self-signed RSA\n          b) self-signed EC\n          c) root\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ValidateCARequest\"\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port\n      responses:\n        \"200\":\n          description: Certificate validate successfully\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SuccessResponse\"\n        \"404\":\n          description: Entry not found\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  \"/pki/certificateAuthority/updateCRL\":\n    post:\n      summary: Update CRL\n      tags:\n        - Certificate Management\n      operationId: updateCRL\n      requestBody:\n        description: parameters for updateCRL\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UpdateCRLRequest\"\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port\n      responses:\n        \"200\":\n          description: CRL Updated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SuccessResponse\"\n        \"404\":\n          description: Entry not found\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  \"/pki/createSASServiceObject\":\n    post:\n      summary: Create the SAS Service Object\n      tags:\n        - Certificate Management\n      operationId: createSASServiceObject\n      requestBody:\n        description: parameters for createSASServiceObject\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/SASObject\"\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port\n      responses:\n        \"201\":\n          description: Object created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SuccessResponse\"\n        \"404\":\n          description: Entry not found\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  \"/eba/getNCPCertificates\":\n    post:\n      summary: Get the NCP Certificates\n      tags:\n        - Enhanced Background Authentication\n      operationId: getNCPCertificates\n      requestBody:\n        description: parameters for getNCPCertificates\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ServerIP\"\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port\n      responses:\n        \"200\":\n          description: NCP certificate retrieved successfull\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GetNCPCertificateResponse\"\n        \"404\":\n          description: Entry not found\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  \"/eba/revokeNCPCertificate\":\n    post:\n      summary: Revoke the NCP Certificates\n      tags:\n        - Enhanced Background Authentication\n      operationId: revokeNCPCertificate\n      requestBody:\n        description: parameters for revokeNCPCertificate\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/RevokeNCPCertificate\"\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port\n      responses:\n        \"200\":\n          description: certificate revocation successfull\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SuccessResponse\"\n        \"404\":\n          description: Entry not found\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  \"/eba/getUAPCACertificate\":\n    post:\n      summary: Get the UAP Certificates\n      tags:\n        - Enhanced Background Authentication\n      operationId: getUAPCACertificate\n      requestBody:\n        description: parameters for getUAPCACertificate\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ServerIP\"\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port\n      responses:\n        \"200\":\n          description: certificate retrieved successfull\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GetUAPCAResponse\"\n        \"404\":\n          description: Entry not found\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  \"/eba/getUAPCSRCertificate\":\n    post:\n      summary: Get the UAP CSR Certificates\n      tags:\n        - Enhanced Background Authentication\n      operationId: getUAPCSRCertificate\n      requestBody:\n        description: parameters for getUAPCSRCertificate\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ServerIP\"\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port\n      responses:\n        \"200\":\n          description: certificate retrieved successfull\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GetUAPCSRResponse\"\n        \"404\":\n          description: Entry not found\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  \"/eba/approveUAPCSRCertificate\":\n    post:\n      summary: Approve the UAP CSR Certificates\n      tags:\n        - Enhanced Background Authentication\n      operationId: approveUAPCSRCertificate\n      requestBody:\n        description: parameters for approveUAPCSRCertificate\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ApproveUAPCSRCertificate\"\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          description: The media type of the resource\n          schema:\n            type: string\n            example: application/json\n        - in: header\n          name: X-CSRF-Token\n          required: true\n          description: The anti-CSRF token\n          schema:\n            type: string\n            example: HuyS8gAPgtfzE4KhUXzNHJzB\n        - in: header\n          name: Origin\n          required: true\n          description: The Origin header for anti-CSRF\n          schema:\n            type: string\n            example: https://hostname:port\n      responses:\n        \"200\":\n          description: certificate Approved successfull\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SuccessResponse\"\n        \"404\":\n          description: Entry not found\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\ncomponents:\n  securitySchemes:\n    cookieAuth:\n      type: apiKey\n      in: cookie\n      name: RSESSIONID\n  schemas:\n    Error:\n      type: object\n      required:\n        - code\n        - message\n      properties:\n        code:\n          type: integer\n          format: int32\n          description: Standard LDAP error code from RFC4511\n        message:\n          type: string\n          description: Standard LDAP error message from RFC4511\n    Syntax:\n      type: object\n      properties:\n        id:\n          type: string\n          description: Concatenated OID string - used for uniquely identifying the syntax\n          example: /eDirAPI%2Fv1%2Ftree_name%2Fschema%2Fsyntaxes%2F2168401113719115000\n        oid:\n          type: string\n          description: LDAP OID of the syntax\n          example: 2.16.840.1.113719.1.1.5.1.17\n        desc:\n          type: string\n          description: Description of the Syntax, if received from backend\n          example: Access Control List\n        extensions:\n          type: object\n          description: Extensions received from the backend\n          example:\n            X-NDS_SYNTAX: '17'\n        jsonSchema:\n          type: object\n          description: JSON Schema of the syntax\n          example:\n            id: /eDirAPI%2Fv1%2Ftree_name%2Fschema%2Fsyntaxes%2F2168401113719115000\n            type: object\n            description: ACL\n            $schema: 'https://json-schema.org/draft-06/schema#'\n            properties:\n              data:\n                type: string\n                example: base64\n    Syntaxlist:\n      type: array\n      items:\n        $ref: '#/components/schemas/Syntax'\n    AttributeList:\n      type: array\n      items:\n        $ref: '#/components/schemas/Attribute'\n    Attribute:\n      type: object\n      properties:\n        name:\n          type: array\n          description: Array of names\n          items:\n            type: string\n        oid:\n          type: string\n          description: LDAP OID of the attribute\n        desc:\n          type: string\n          description: Description of the attribute, if received from the backend\n        equality:\n          type: string\n          description: Reference to the definition for equality\n        ordering:\n          type: string\n          description: Reference to the definition for ordering\n        substring:\n          type: string\n          description: Reference to the definition for substring\n        syntax:\n          type: string\n          description: Reference to syntax defintion\n        lowerlimit:\n          type: integer\n          format: int32\n          description: Lower limit if defined\n        upperlimit:\n          type: integer\n          format: int32\n          description: Upper limit if defined\n        flags:\n          type: array\n          items:\n            type: string\n            description: flag is used for restricting the attribute usage in objectClasses\n            enum:\n              - single-value\n              - no-user-modification\n              - collective\n        usage:\n          type: string\n          description:  It indicates how the attribute type is to be used.\n          enum:\n            - userApplications\n            - directoryOperation\n            - distributedOperation\n            - dSAOperation\n        extensions:\n          type: object\n          description: Extensions received from the backend\n      example:\n        name:\n          - /eDirAPI%2Fv1%2Fjtree_name%2Fschema%2Fattributes%2FuserPassword\n        oid: 2.5.4.35\n        desc: Internal NDS policy forces this to be single-valued\n        syntax: /eDirAPI%2Fv1%2Ftree_name%2Fschema%2Fsyntaxes%2F1361411466115121140\n        upperlimit: 128\n        usage: directoryOperation\n    AttributePost:\n      type: object\n      properties:\n        name:\n          type: array\n          description: Array of names\n          items:\n            type: string\n        oid:\n          type: string\n          description: LDAP OID of the attribute\n        desc:\n          type: string\n          description: 'Description of the attribute, if received from the backend'\n        equality:\n          type: string\n          description: Reference to the definition for equality\n        ordering:\n          type: string\n          description: Reference to the definition for ordering\n        substring:\n          type: string\n          description: Reference to the definition for substring\n        syntax:\n          type: string\n          description: Reference to syntax defintion\n        lowerlimit:\n          type: integer\n          format: int32\n          description: Lower limit if defined\n        upperlimit:\n          type: integer\n          format: int32\n          description: Upper limit if defined\n        flags:\n          type: array\n          description: flag is used for restricting the attribute usage in objectClasses.\n          items:\n            type: string\n            enum:\n              - single-value\n              - no-user-modification\n              - collective\n        usage:\n          type: string\n          description:  It indicates how the attribute type is to be used.\n          enum:\n            - userApplications\n            - directoryOperation\n            - distributedOperation\n            - dSAOperation\n        extensions:\n          type: object\n          description: Extensions received from the backend\n      required:\n        - name\n        - oid\n        - syntax\n      example:\n        name:\n          - /eDirAPI%2Fv1%2Ftree_name%2Fschema%2Fattributes%2FuserPassword\n        oid: 2.5.4.35\n        desc: Internal NDS policy forces this to be single-valued\n        syntax: /eDirAPI%2Fv1%2Ftree_name%2Fschema%2Fsyntaxes%2F1361411466115121140\n        upperlimit: 128\n        usage: directoryOperation\n        extensions:\n         X-NDS_FILTERED_REQUIRED: '1'\n         X-NDS_NONREMOVABLE: ''\n    ObjectClass:\n      type: object\n      description: Object Class data model\n      properties:\n        name:\n          type: string\n          description: Name of the objectClass\n        oid:\n          type: string\n          description: LDAP OID of the objectClass\n        desc:\n          type: string\n          description: Description of the objectClass if received\n        obselete:\n          type: boolean\n          description: Is objectClass active\n        sup:\n          type: array\n          description: Array of links to objectClass definitions of super classes\n          items:\n            type: string\n        kind:\n          type: string\n          description: Represents the kind of objectClass. Value of kind must be one of the below enum values\n          enum:\n            - ABSTRACT\n            - STRUCTURAL\n            - AUXILIARY\n        must:\n          type: array\n          description: Array of attribute which must be present.\n          items:\n            type: string\n        may:\n          type: array\n          description: Array of attribute which may be present.\n          items:\n            type: string\n        extensions:\n          type: object\n          description: Extensions received from the backend\n      example:\n        name: \n          - /eDirAPI%2Fv1%2Ftree_name%2Fschema%2FobjectClasses%2FnsimChallengeSet\n        oid: 2.16.840.1.113719.1.39.44.6.1\n        sup:\n          - /eDirAPI%2Fv1%2Ftree_name%2Fschema%2FobjectClasses%2FTop\n        kind: STRUCTURAL\n        must:\n          - /eDirAPI%2Fv1%2Ftree_name%2Fschema%2Fattributes%2Fcn\n        may:\n          - /eDirAPI%2Fv1%2Ftree_name%2Fschema%2Fattributes%2Fdescription\n          - /eDirAPI%2Fv1%2Ftree_name%2Fschema%2Fattributes%2FnsimRequiredQuestions\n          - /eDirAPI%2Fv1%2Ftree_name%2Fschema%2Fattributes%2FnsimRandomQuestions\n          - /eDirAPI%2Fv1%2Ftree_name%2Fschema%2Fattributes%2FnsimNumberRandomQuestions\n          - /eDirAPI%2Fv1%2Ftree_name%2Fschema%2Fattributes%2FnsimMinResponseLength\n          - /eDirAPI%2Fv1%2Ftree_name%2Fschema%2Fattributes%2FnsimMaxResponseLength\n        extensions:\n          X-NDS_NAMING: \n            - /eDirAPI%2Fv1%2Ftree_name%2Fschema%2Fattributes%2Fcn\n          X-NDS_CONTAINMENT:\n            - /eDirAPI%2Fv1%2Ftree_name%2Fschema%2FobjectClasses%2FnspmPasswordPolicyContainer\n            - /eDirAPI%2Fv1%2Ftree_name%2Fschema%2FobjectClasses%2FCountry\n            - /eDirAPI%2Fv1%2Ftree_name%2Fschema%2FobjectClasses%2Fdomain\n            - /eDirAPI%2Fv1%2Ftree_name%2Fschema%2FobjectClasses%2FLocality\n            - /eDirAPI%2Fv1%2Ftree_name%2Fschema%2FobjectClasses%2FOrganization\n            - /eDirAPI%2Fv1%2Ftree_name%2Fschema%2FobjectClasses%2ForganizationalUnit\n          X-NDS_NOT_CONTAINER: ''\n          X-NDS_NAME:\n            - Organizational Unit\n          X-NDS_NONREMOVABLE: '1'\n          X-NDS_ACL_TEMPLATES: \n            privileges:\n              compare: false\n              read: true\n              write: false\n              self: false\n              supervisor: false\n              inheritACL: false\n            scope: 'subtree'\n            trusteeDN: '/eDirAPI%2Fv1%2Ftree_name%2Fo=alice%2Fcn=bob'\n            attribute: '[All Attributes Rights]'\n          X-NDS_SPARSE_OPERATIONAL: ''\n          X-NDS_SPARSE_REQUIRED: ''\n    ObjectClassPost:\n      type: object\n      description: Object Class data model\n      properties:\n        name:\n          type: string\n          description: Name of the objectClass\n        oid:\n          type: string\n          description: LDAP OID of the objectClass\n        desc:\n          type: string\n          description: Description of the objectClass if received\n        obselete:\n          type: boolean\n          description: Is objectClass active\n        sup:\n          type: array\n          description: Array of links to objectClass definitions of super classes\n          items:\n            type: string\n        kind:\n          type: string\n          description: Represents the kind of objectClass. Value of kind must be one of the below enum values\n          enum:\n            - ABSTRACT\n            - STRUCTURAL\n            - AUXILIARY\n        must:\n          type: array\n          description: Array of attribute which must be present\n          items:\n            type: string\n        may:\n          type: array\n          description: Array of attribute which may be present\n          items:\n            type: string\n        extensions:\n          type: object\n          description: Extensions received from the backend\n      required:\n        - name\n        - oid\n        - kind\n      example:\n        name: \n          - /eDirAPI%2Fv1%2Ftree_name%2Fschema%2FobjectClasses%2Falice\n        oid: 2.16.840.1.113719.1.39.44.6.1\n        sup:\n          - /eDirAPI%2Fv1%2Ftree_name%2Fschema%2Fattributes%2FTop\n        kind: ABSTRACT\n        must:\n          - /eDirAPI%2Fv1%2Ftree_name%2Fschema%2Fattributes%2Fcn\n        may:\n          - /eDirAPI%2Fv1%2Ftree_name%2Fschema%2Fattributes%2Fdescription\n        extensions:\n          X-NDS_NAMING: \n            - /eDirAPI%2Fv1%2Ftree_name%2Fschema%2Fattributes%2Fcn\n    ObjectClassList:\n      type: array\n      items:\n        $ref: '#/components/schemas/ObjectClass'\n    Entry:\n      type: object\n      description: JSON representation of a LDAP object\n      properties:\n        dn:\n          type: string\n          description: The DN as relative URI\n          example: /eDirAPI%2Fv1%2Ftree_name%2Fo=alice%2Fcn=bob\n        attributes:\n          type: object\n          description: \u003e-\n            Actual attributes of the object. This object will depend on the\n            objectClass of the entry.\n          properties:\n            cn:\n              type: array\n              description: Array of CNs\n              items:\n               type: string\n               example: bob\n            sn:\n              type: array\n              description: Array of SNs\n              items:\n               type: string\n               example: bob\n            objectclass:\n              type: array\n              description: Array of objectclasses\n              items:\n               type: string\n               example: /eDirAPI%2Fv1%2Ftree_name%2Fschema%2FobjectClasses%2FinetOrgPerson\n    EntryPost:\n      type: object\n      description: JSON representation of a LDAP object\n      properties:\n        dn:\n          type: string\n          description: The DN as relative URI\n          example: /eDirAPI%2Fv1%2Ftree_name%2Fo=alice%2Fcn=bob\n        attributes:\n          type: object\n          description: \u003e-\n            Actual attributes of the object. This object will depend on the\n            objectClass of the entry.\n          properties:\n            cn:\n              type: array\n              description: Array of CNs\n              items:\n               type: string\n               example: bob\n            sn:\n              type: array\n              description: Array of SNs\n              items:\n               type: string\n               example: bob\n            objectclass:\n              type: array\n              description: Array of objectclasses\n              items:\n               type: string\n               example: /eDirAPI%2Fv1%2Ftree_name%2Fschema%2FobjectClasses%2FinetOrgPerson\n          required:\n            - cn\n            - sn\n            - objectclass\n      required:\n        - dn\n        - attributes\n    SessionPost:\n      type: object\n      description: JSON Representation of parameters of a session\n      properties:\n        dn:\n          type: string\n          description: The DN as a relative URI\n          example: /eDirAPI%2Fv1%2Ftree_name%2Fo=alice%2Fcn=bob\n        password:\n          type: string\n          description: The password as a string - this is not displayed back in a GET\n        end_time:\n          type: string\n          description: The end_time as time format applicable for this session\n          example: '2019-05-17T14:44:29.006584692+05:30'\n      required:\n        - dn\n        - password\n    Session:\n      type: object\n      description: JSON Representation of parameters of a session\n      properties:\n        dn:\n          type: string\n          description: The DN as a relative URI\n          example: /eDirAPI%2Fv1%2Ftree_name%2Fo=alice%2Fcn=bob\n        end_time:\n          type: string\n          description: The end_time as time format applicable for this session\n          example: '2019-05-17T14:44:29.006584692+05:30'\n    Patch:\n      type: array\n      items:\n        $ref: '#/components/schemas/PatchItem'\n    PatchItem:\n      type: object\n      description: JSON Patch Item definition used for patch\n      properties:\n        op:\n          type: string\n          description: The operation name which is to be performed\n          enum:\n            - replace\n            - add\n            - delete\n          example: delete\n        path:\n          type: string\n          description: Attribute of the object\n          example: cn\n        value:\n          type: array\n          description: For single-valued attribute, \"value\" will be without array, and for multi-valued attribute, \"value\" will be in the form of array. \"value\" is mandatory for add and replace operations only.\n          items:\n           type: string\n           example: alice\n      required:\n        - op\n        - path\n    MoveItem:\n      type: array\n      items: \n        $ref: '#/components/schemas/Move'\n    Move:\n      type: object\n      description: 'JSON defintion used for rename, move and/or copy'\n      properties:\n        dn:\n          type: string\n          description: The DN, on which move is being performed\n          example: /eDirAPI%2Fv1%2Ftree_name%2Fo=alice%2Fcn=bob\n        newname:\n          type: string\n          description: The new name for final DN\n          example: cn=sam\n        deleteoldname:\n          type: boolean\n          description: \u003e-\n            Decides if old name should be deleted. Leaves old object if this\n            object is moving under another parent\n        newsuperior:\n          type: string\n          description: The DN of the new parent entry under which this object will move to\n          example: '%2Fo=eve%2F'\n      required:\n        - dn\n    MoveResponse:\n      type: array\n      items: \n        $ref: '#/components/schemas/Error'\n    Compare:\n      type: object\n      description: 'JSON defintion used for compare value(s) of attribute'\n      properties:\n        attribute:\n          type: string\n          example: cn\n          description: An existing attribute name of given dn\n        values:\n          type: array\n          description: For single-valued attribute, \"values\" will be without array, and for multi-valued attribute, \"values\" will be in the form of array\n          items:\n            type: string\n            example: bob\n      required:\n        - attribute\n        - values\n    SearchRequest:\n      type: object\n      description: A search request in JSON format\n      properties:\n        scope:\n          type: string\n          description: The Scope of the search\n          enum:\n            - base\n            - one\n            - sub\n        filter:\n          type: string\n          description: LDAP style filter\n          example: \u003e-\n            (|(\u0026(objectClass=inetOrgPerson)(groupMembership=cn=group,o=metropolis))(cn=u*))\n        attributes:\n          type: array\n          description: List of attributes to be returned\n          items:\n            type: string\n          example:\n            - cn\n            - sn\n            - meta.structuralObjectClass\n        page_size:\n          type: integer\n          description: Number of items per page\n          example: 10\n        sort:\n          type: object\n          description: Sort options\n          properties:\n            order:\n              type: string\n              description: The sort order\n              enum:\n                - ascending\n                - descending\n            attributes:\n              type: array\n              items:\n                type: string\n              example:\n                - sn\n        disableCount:\n         type: boolean\n         description: Disable count is the flag to enable/disable the total_pages count in the search response\n         example: false\n    PagedResultSet:\n      type: object\n      description: A set of search results with pages\n      properties:\n        page:\n          type: object\n          description: Page properties\n          properties:\n            total_pages:\n              type: integer\n              description: Total number of pages requested. If disableCount=true, total_pages will be 0\n              example: 100\n            page_size:\n              type: integer\n              description: Number of items per page\n              example: 10\n            current:\n              type: integer\n              description: Current Page number\n              example: 1\n            previous:\n              type: string\n              description: Link to previous page\n              example: ''\n            next:\n              type: string\n              description: Link to next page\n              example: /eDirAPI%2Fv1%2Ftree_name%2Fsearch%2FKbAiO-6l9PdDkfRF0Vr9QpQEA3T2kkuYy_hxP42WLXyNAZGSwkIk4sr8yuOmH7WGsUMjpryPnn3x2SkzP_mTkw==\u0026current=2\n        items:\n          type: array\n          description: List of items - could be object results in a search\n          items:\n            type: object\n    GetPrivListRequest:\n      type: object\n      description: Get Privileges List request\n      properties:\n        trusteeDN:\n          type: string\n          description: The Distinguished Name of the Trustee\n          example: /eDirAPI%2Fv1%2Ftree_name%2Fo=alice%2Fcn=bob\n        attributes:\n          type: array\n          description: List of attributes of the target DN for which Privileges are required\n          items:\n            type: string\n          example:\n            - description\n            - cn\n            - '[Entry Rights]'\n      required:\n        - trusteeDN\n        - attributes\n    PasswordModifyRequest:\n      type: object\n      description: password modify extended request\n      properties:\n        oldpassword:\n          type: string\n          description: The oldpassword value, if present, will contain the user's current password in base64 encoded format.\n          example: MTIzNDU=\n        newpassword:\n          type: string\n          description: The newpassword value, will contain the desired password for this user in base64 encoded format\n          example: NDU2Nzg=\n    GetPrivListResultSet:\n      type: array\n      items:\n        $ref: '#/components/schemas/GetPrivListResponse'      \n          \n    GetPrivListResponse:\n      type: object\n      description: Get Privileges List response\n      properties:\n        attribute:\n          type: string\n          description: The attribute name for which the privileges are returned\n          example: description\n        privileges:\n          type: object\n          description: The privileges list for the given attribute\n          properties:\n            compare:\n              type: boolean\n              description: Trustee has compare rights to the attribute.\n              example: true\n            read:\n              type: boolean\n              description: Trustee has read rights to the attribute.\n              example: true  \n            write:\n              type: boolean\n              description: Trustee has write rights to the attribute.\n              example: true\n            self:\n              type: boolean\n              description: Trustee can add or delete its name as a value of the attribute\n              example: true\n            supervisor:\n              type: boolean\n              description: Trustee has all rights to the object's attributes\n              example: false\n            inheritACL:\n              type: boolean\n              description: Trustee inherits the rights granted in the ACL\n              example: false\n    PasswordModifyResponse:\n      type: object\n      description: It will contain code, message as well as newpassword. If in request newpassword is absent, then only newpassword will be present in response\n      properties:\n        code:\n          type: integer\n          description: Result Code is the LDAP error code\n          example: 0\n        message:\n          type: string\n          description: success message\n          example: Password changed successfully\n        newpassword:\n          type: string\n          description: The newpassword value, will contain the desired password for this user in base64 encoded format\n          example: NTQzMjE=\n\n    triggerLimberPost:\n      type: object\n          \n    PasswordModifyUnwillingToPerform:\n      type: object\n      description: The OpenLDAP server will return an unwilling to perform error if the backend holding the target entry does not support the given operation\n      properties:\n        code:\n          type: integer\n          description: Result Code is the LDAP error code\n          example: 53\n        message:\n          type: string\n          description: LDAP error message\n          example: Unwilling To Perform\n    SplitRequest:\n      type: object\n      description: Get Merge Partiiton request\n      properties:\n        flags:\n          type: integer\n          format: int64\n          description: ensure the server is up or not \n          example: 1\n          \n    MergeRequest:\n      type: object\n      description: Get Merge Partiiton request\n      properties:\n        flags:\n          type: integer\n          format: int64\n          description: ensure the server is up or not \n          example: 1\n\n    addReplicaRequest:\n      type: object\n      description: Get the change Replica type body Request\n      properties:\n        flags:\n          type: integer\n          format: int64\n          description: ensure the server is up or not \n          example: 1\n        replicaType:\n          type: string\n          description: send the replica type as needed \n          example: READ_ONLY\n        serverDN: \n          type: string\n          description: Get the serveDn authentication\n          example: cn=server2,o=novell \n\n    changeReplicaRequest:\n      type: object\n      description: Get the change Replica type body Request\n      properties:\n        flags:\n          type: integer\n          format: int64\n          description: ensure the server is up or not \n          example: 1\n        replicaType:\n          type: string\n          description: send the replica type as needed \n          example: READ_ONLY\n        serverDN: \n          type: string\n          description: Get the serveDn authentication\n          example: cn=server2,o=novell \n    \n    removeReplicaRequest:      \n      type: object\n      description: Get the change Replica type body Request\n      properties:\n        flags:\n          type: integer\n          format: int64\n          description: ensure the server is up or not \n          example: 1\n        serverDN: \n          type: string\n          description: Get the serveDn authentication\n          example: cn=server2,o=novell \n\n    getReplicaInfoRequest:      \n      type: object\n      description: Get the change Replica type body Request\n      properties:\n        serverDN: \n          type: string\n          description: Get the serveDn authentication\n          example: cn=server2,o=novell \n          \n    listofReplicaResponse: \n      type: array \n      items: \n            type: string\n      example:\n        - o=novell\n      description: give the list of replica present in that server\n    \n    getReplicaInfoResponse:    \n      type: object\n      description: give the list of replica present in that server\n      properties :\n        partitionID:\n          type: integer\n          format: int64\n          example: 32810\n        ReplicaState:\n          type: integer\n          format: int64\n          example: 0\n        ModificationTime:\n          type: integer\n          format: int64\n          example: 1561563296\n        PurgeTime:\n          type: integer\n          format: int64\n          example: 1561563296          \n        LocalPartitionID:\n          type: integer\n          format: int64\n          example: 21\n        PartitionDN:\n          type: string\n          example:  \"o= novell\"          \n        ReplicaType:\n          type: integer\n          format: int64\n          example: 2\n        Flags:\n          type: integer\n          format: int64\n          example: 0\n    setReplicaFilterRequest:\n      type: object\n      description: Get Set Filter Replica request\n      properties:\n        ServerDn:\n          type: string\n          description: Get the serveDn authentication\n          example: cn=server2,o=novell\n        ClassFilters:\n          type: array\n          items:\n            $ref: '#/components/schemas/setReplicaSequence'\n    setReplicaSequence:\n      type: object\n      description : Set replica sequence of sequence\n      properties:\n        ClassName: \n          type: string\n          example: inetorgperson\n          \n        Attributes: \n          type: array\n          items: \n            type: string\n            example : cn \n    \n    getReplicaFilterResponse:\n      type : object \n      description: Get the Replica filter Information \n      properties:   \n        ClassName:\n          type : array\n          items:\n            type: string \n            example: country\n            \n        Attributes:\n          type: array \n          items:\n            type : string \n            example:\n              - ACL\n              - backLink \n  \n    GetRequest:\n      type: object\n      description: Certificate Request\n      properties:\n        serverDN:\n          type: string\n          format: string\n          description: serverDN\n          example: serverName.novell\n\n    Parse:\n      type: object\n      description: JSON representation of a server certificate details\n      properties:\n        certificates:\n          type: array\n          description: Array of server certificates\n          items:\n            allOf:\n              - $ref: \"#/components/schemas/CertificateName\"\n              - $ref: \"#/components/schemas/CertificateDetails\"\n\n    CertificateName:\n      type: object\n      properties:\n        certificateName:\n          type: string\n          description: Nick name of the certificate\n          example: cert\n\n    CertificateDetails:\n      type: object\n      properties:\n        certificateVersion:\n          type: integer\n          description: certificate version\n          example: 3\n        subjectDN:\n          type: string\n          description: The entity associated with the public key\n          example: O=novell.CN=admin\n        issuerName:\n          type: string\n          description: Issuer of the certificate\n          example: OU=Organizational CA.O=ED913\n        effectiveDate:\n          type: integer\n          description: starting date of validity\n          example: 1610935020\n        expiryDate:\n          type: integer\n          description: Ending date of validity\n          example: 16174007020\n        serialNumber:\n          type: string\n          description: serial number of the certificate\n          example: 7EF2BD49A786AD53B1CBBC79F326F4AFFA3F7A5C\n        signatureAlgorithm:\n          type: string\n          description: OID of signature Algorithm\n          example: \"{1 2 840 10045 4 3 2}\"\n        keySize:\n          type: integer\n          description: Size of the key in bits\n          example: 381\n        certificate:\n          type: string\n          description: Full certificate in b64 format\n          example: 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\n        extensions:\n          type: array\n          description: Array of extension object\n          items:\n            $ref: \"#/components/schemas/ExtensionDetails\"\n\n    ExtensionDetails:\n      type: object\n      properties:\n        DEREncodedValue:\n          type: number\n          format: Hex\n          description: DER Encoded value of extension\n          example: 301D0603551D250416301406082B0601050507030206082B06010505070304\n        ExtensionOID:\n          type: string\n          description: OID of the extension\n          example: \"{2 5 29 31}\"\n        isCritical:\n          type: boolean\n          description: indicates if critical or not\n          example: true\n        ExtensionType:\n          type: integer\n          description: type indicating the number\n          example: 16\n        DistributionPoints:\n          type: array\n          description: CRL distribution points\n          items:\n            type: string\n            example: CN=One.CN=One - Configuration.CN=CRL Container.CN=Security\n        ExtendedKeyUsage:\n          type: integer\n          description: Extended key usage\n          example: 2\n        KeyUsage:\n          type: integer\n          description: Key Usage\n          example: 40960\n        IPAddress:\n          type: array\n          description: Ip address array\n          items:\n            type: string\n            example: 192.168.0.1\n        Email:\n          type: array\n          description: Email address array\n          items:\n            type: string\n            example: test@gmail.com\n        DNSNames:\n          type: array\n          description: DNS Names array\n          items:\n            type: string\n            example: www.YourCompany.com\n        URI:\n          type: array\n          description: URI array\n          items:\n            type: string\n            example: http://www.YourCompany.com\n        DirectoryNames:\n          type: array\n          description: Directory Names array\n          items:\n            type: string\n            example: .O=YourCompany.C=US\n        rootLabel:\n          type: string\n          description: Root label\n          example: A058020102020200FF020100030D0080000000000000000000000003090080000000000000003018301002010002087FFFFFFFFFFFFFFF010100020406F0DF483018301002010002087FFFFFFFFFFFFFFF010100020406F0DF48\n        registryLabel:\n          type: string\n          description: Registry label\n          example: A158020102020200FF020100030D0040000000000000000000000003090040000000000000003018301002010002087FFFFFFFFFFFFFFF010100020411FFB09D3018301002010002087FFFFFFFFFFFFFFF010100020411FFB09D\n        enterpriseLabel:\n          type: string\n          description: enterprise label\n          example: A158020102020200FF020100030D0040000000000000000000000003090040000000000000003018301002010002087FFFFFFFFFFFFFFF010100020411FFB09D3018301002010002087FFFFFFFFFFFFFFF010100020411FFB09D\n        certificateClass:\n          type: integer\n          description: certificate class\n          example: 23\n        URIReference:\n          type: string\n          description: URI Reference\n          example: http://developer.novell.com/repository/attributes/certattrs_v10.ht\n        version:\n          type: string\n          description: version\n          example: 1.0\n        cryptographicModule:\n          type: integer\n          description: Cryptographic Module\n          example: 1\n        keyStorage:\n          type: integer\n          description: key storage\n          example: 105\n        enforce:\n          type: boolean\n          description: Enforce or not\n          example: true\n        computerSecurity:\n          type: integer\n          description: computer security\n          example: 70\n\n    CreateServerRequest:\n      type: object\n      description: Request for create server certificate\n      properties:\n        serverDN:\n          type: string\n          description: DN of the server  which owns the certificate\n          example: serverName.novell\n        certificateName:\n          type: string\n          description: Nick Name of the certificate\n          example: cert\n        keyAlgorithm:\n          type: integer\n          description: Key Algorithm which the CA will use\n          example: 1\n        keySize:\n          type: integer\n          description: size of the key in bits\n          example: 2048\n        keyUsage:\n          type: integer\n          description: Purposes for which the public key will be used for\n          example: 40960\n        keyUsageExtensionFlag:\n          type: integer\n          description: Additional Information about Key Usage\n          example: 0\n        extendedKeyUsage:\n          type: integer\n          description: Extended usages of the public key\n          example: 56\n        extendedKeyUsageExtensionFlag:\n          type: integer\n          description: Additional Information about Extended Key Usage\n          example: 0\n        allowExportPrivateKey:\n          type: integer\n          description: Whether or not to allow the export of private key\n          example: 0\n        subjectDN:\n          type: string\n          description: the entity associated with the public key\n          example: CN=serverName.o=treeName\n        subjectAltNames:\n          type: array\n          description: Alternative names secured by the certificate\n          items:\n            $ref: \"#/components/schemas/SubjectAltDetails\"\n        signatureAlgorithm:\n          type: integer\n          description: Algorithm used to generate the digital signature for the certificate\n          example: 8\n        extensions:\n          type: array\n          description: extension array\n          items:\n            $ref: \"#/components/schemas/Extension\"\n        validFrom:\n          type: integer\n          description: Start date of the certificate validity\n          example: 1610935020\n        validTo:\n          type: integer\n          description: End date of the certificate validity\n          example: 1674007020\n        validityPeriod:\n          type: number\n          description: Validity of the certificate\n          format: float\n          example: 2\n\n    SuccessResponse:\n      type: object\n      description: Response of createCertificate\n      properties:\n        code:\n          type: integer\n          description: standard LDAP code\n          example: 0\n        message:\n          type: string\n          description: message\n          example: success message\n\n    SubjectAltDetails:\n      type: object\n      description: details of subjectAltName array\n      properties:\n        type:\n          type: integer\n          description: Type of  subject alternative name\n          example: 2\n        value:\n          type: string\n          description: Value of subject alternative name\n          example: www.yourCompany.com\n\n    Extension:\n      type: object\n      description: details of subjectAltName array\n      properties:\n        flags:\n          type: integer\n          description: Extension's flag\n          example: 2\n        value:\n          type: string\n          description: Extension's value\n          example: www.yourCompany.com\n\n    ImportServerRequest:\n      type: object\n      description: Request for import certificate method\n      properties:\n        serverDN:\n          type: string\n          description: DN of the server  which owns the certificate\n          example: serverName.novell\n        certificateName:\n          type: string\n          description: Nick Name of the certificate\n          example: cert\n        fileContent:\n          type: string\n          description: Content of the certificate\n          example: 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\n        password:\n          type: string\n          description: Password of the file\n          example: novell\n\n    BackupResponse:\n      type: object\n      description: Response of backupCertificate endpoint\n      properties:\n        certificate:\n          type: string\n          description: certificate encoded in b64 format\n          example: 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\n        certificateSize:\n          type: integer\n          description: size of the certificate\n          example: 3328\n\n    BackupServerRequest:\n      type: object\n      description: Request for backupCertificate endpoint\n      properties:\n        serverDN:\n          type: string\n          description: DN of the server  which owns the certificate\n          example: serverName.novell\n        certificateName:\n          type: string\n          description: Name of the certificate\n          example: cert\n        password:\n          type: string\n          description: password of the certificate\n          example: novell\n\n    CertificateRequest:\n      type: object\n      description: Request for exportCertificate and validateCertificate endpoint\n      properties:\n        serverDN:\n          type: string\n          description: DN of the server  which owns the certificate\n          example: serverName.novell\n        certificateName:\n          type: string\n          description: Name of the certificate\n          example: cert\n\n    ExportResponse:\n      type: object\n      description: Response of exportCertificate endpoint\n      properties:\n        certificate:\n          type: string\n          description: Contents of the certificate to be exported\n          example: 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\n\n    Decode:\n      type: object\n      description: Request for decodeCSR endpoint\n      properties:\n        certSigningRequest:\n          type: string\n          description: CSR(Certificate Signing Request) for the certificate to be issued\n          example: -----BEGIN CERTIFICATE REQUEST-----\\nMIIC3TCCAcUCAQAwTzELMAkGA1UEBhMCaW4xDjAMBgNVBAgTBWRlbGhpMQ4wDAYD\\nVQQHEwVkZWxoaTEPMA0GA1UEChMGbm92ZWxsMQ8wDQYDVQQDEwZTZXJ2ZXIwggEi\\nMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDbuBEe/9d5pbfbqC5Nh8wjQXbJ\\nP5VoyyRfreBgg2w6/orTbuTePIBAwYkphmm0BnS6otnE9mYsPIhL3YlAi90zPMZD\\n2VEWsNUdCbKC1q45fSPKUfqt43YZjvVmLMchb2uqr79EDxBqZoMsUG0++jbwFLZ7\\nxy8Y41/di7/iBMLwOwdSehly321z2IRDu1ULUEFxvNIIy5n6xb6l2shW94wsjogP\\nqbYeD3qGz2vydeBinJkknSazNn7ywrAbVmI+oc8dALlfW7tdfJ4jKHpu1KgnuSVY\\n5hwuTLmzGSmsvSLoeYYQgXsxHCntw/gjKmnHt9mfOrJexuIJngaEyRabu2xxAgMB\\nAAGgSTBHBgkqhkiG9w0BCQ4xOjA4MDYGA1UdEQQvMC2CDWJlc3RmbGFyZS5jb22C\\nDnVzZWZ1bHJlYWQuY29tggxjaGFuZGFuay5jb20wDQYJKoZIhvcNAQEFBQADggEB\\nAH6UVmPbQtyompOu1+Fkx4KlezxeBImY6iAp7e9pyMfCV+ukD+GxL5Hgw47h9zGS\\ndUOLaOxUEzh3NJ+mGaLruuZuzDc1yX7O5ubU2H/C1ZXN+B5ZOMakMN2gRM241Pru\\nm8GOmE8TMv/7DEumrHBpHAdDZavTOKhGOF6QAKWG0lm+Z0Rf9VwdwZeFPRDfPOUe\\nIB9OmKFg9Ih2WCIuASlTUAo6qdGXbd2eEaRPuqQ0NICqWdejrXjAQDzW2QIrfXW+\\niAQSW9OMnCHgd0Koqxq6A2iOoRctjBPKwyRM3nMlraHKKKB8CgL/R6oAeDIdlh0X\\nNTFFOUGREOzf7KWAw/aXWuc=\\n-----END CERTIFICATE REQUEST-----\n\n    DecodeResponse:\n      type: object\n      description: Response of decodeCSR endpoint\n      properties:\n        subjectDN:\n          type: string\n          description: Subject DN of the CSR\n          example: CN=Server,O=novell\n        signatureAlgorithm:\n          type: string\n          description: Signature algorithm of the CSR\n          example: SHA1-RSA\n        keyAlgorithm:\n          type: string\n          description: Key Algorithm of CSR\n          example: RSA\n        subjectAltNames:\n          type: object\n          description: Subject Alternative Names of CSR\n          properties:\n            dnsNames:\n              type: array\n              description: DNS names\n              items:\n                type: string\n                example: www.yourcompany.com\n            ipAddresses:\n              type: array\n              description: IP Address\n              items:\n                type: string\n                example: 192.168.0.1\n            emailAddresses:\n              type: array\n              description: Email Address\n              items:\n                type: string\n                example: test@gmail.com\n            uris:\n              type: array\n              description: URI\n              items:\n                type: string\n                example: http://www.YourCompany.com\n\n    GetCSRRequest:\n      type: object\n      description: Request for getCSR endpoint\n      properties:\n        serverDN:\n          type: string\n          description: DN of the server  which owns the certificate\n          example: serverName.novell\n        certificateName:\n          type: string\n          description: Nick Name of the certificate\n          example: cert\n        keyAlgorithm:\n          type: integer\n          description: Key Algorithm which the CA will use\n          example: 1\n        keySize:\n          type: integer\n          description: size of the key in bits\n          example: 2048\n        subjectDN:\n          type: string\n          description: the entity associated with the public key\n          example: CN=serverName.o=treeName\n        signatureAlgorithm:\n          type: integer\n          description: Algorithm used to generate the digital signature for the certificate\n          example: 8\n\n    ReplaceRequest:\n      type: object\n      description: Request for replaceCertificate endpoint\n      properties:\n        serverDN:\n          type: string\n          description: DN of the server  which owns the certificate\n          example: serverName.novell\n        certificateName:\n          type: string\n          description: Nick Name of the certificate\n          example: cert\n        fileContent:\n          type: string\n          description: Content of the certificate\n          example: MIIMQgIBAzCCDAIGCSqGSIb3DQEHAaCCC/MEggvvMIIL6zCCAVwGCSqGSIb3DQEHAaCCAU0EggFJMIIBRTCCAUEGCyqGSIb3DQEMCgECoIHkMIHhMBwGCiqGSIb3DQEMAQMwDgQIzfVKLS5oHDYCAgfQBIHAH/4Oce+JjIRrvQ37PVEEJALBGteB6yamfOI4Q7yUVd2bLHJ/YnqMdEM3Nuo8V7847EaXLsBpyqvNnKt+l1QP/MndLUQx8JK6D06gUgnJE3eb9srZIMxzum1XAI2c1IPTraAUPa/Zgmo4tGvXHR5vCziYdydTSot5YY3ujX29J4AZODqs+/ugRD2oggaODRfdTZ6orXNYVfhamQYf3pNqZ/8C54f+NjvOK9ZBCYB/92fabRqah/g3S3NI19d/MOouMUswLgYJKoZIhvcNAQkVMSEEHzAdBgNVHQ4EFgQUw1QzwB4aszYHmFXLcoiSci3Jt8YwGQYJKoZIhvcNAQkUMQweCgBjAGUAcgB0ADEwggqHBgkqhkiG9w0BBwagggp4MIIKdAIBADCCCm0GCSqGSIb3DQEHATAcBgoqhkiG9w0BDAEGMA4ECM31Si0uaBw2AgIH0ICCCkC32rBqWp96aZXcNfNXu7YwFFNXqNbHWatUmHpWt9r+xZaUfzMukJ5I+BsxAnhUAC/D912VBn91gIPgQ9/cPwY6JarXvQqjio4K1uc21WvtwaBgC9feQyy4ekVps7GWrw3U8oJ3AcQQFbTS0JWE9uQbGN1YpCBYFK1NDfUEKlT8hslK5km+U5IlFOp8Rh64npqGJAvEv1WLhK4oWXRQcqBdrAv14GHSMd/F/W5osoJXZwAi7m9PAIWpiCsPHh/ItwVKTt+9XT9s2AM5z/nMsftR3zjAOB6kXN9gmQz0y+zi2/qIlFVbRmcDw+rJ+gEkZ8LYFd59TH1bw8IpNQRFJFLFnw/gpfnNE8mKXopiC5kb4M8AZDtUVL4Ga/sNkYBNyNPu4L/HDyZjFLsM8PvBWJebFJTjdP0MX5dSnO0jYN1rzVAh2yhZImAgWF3HozSxDwB72z9l6+IZL4kbRjTs6ETX3xoDIKSnJQUuTQc7OXelMbQmUv6xH0LPqeCSMN78Q7Wtu8Zc9R0NjeOxUVde6oKqaJwonepm7DD+JuUhsy+mCimhOpFKdr65dtqm1i8TKJJD+A53V3yQiHUpBJsWNPt7uUsc1Bu7ntfAhHLxlPX15J0mlWh+MBd9Aqosw5YO5t+bBSdmdDg90rl5KIFytbd1knvEcmMI32moxme8tbLhqVoSeL+SWSbh0uN5Nf7CqyJn8fW+B+HZ3/wEp18FfutmUgwn5f24o8F8o278W4Km5DkrJlHGGmEijaOSH1lxhnG9+UgdsXmPUvfmdl2fnHUYehmfKYq7mN81JUxviUVZh5Izp6LjQh3Axjqwarq5bEqLiXoLqY39zA/mRgsjr3VYJKV21HeHCQ5MzR5v0iKAUNVshp6Rz85sHS66XgAowrnu5tTdLxLwMYUr/B0hJMi6Q5x4GU5NZzmxRSCzAqdW3a/PuQL7wywcN/6+LfCyI196Yhls8IZzYtHgxV/e/Yw3goOvcDa28MZTKiC370E6LuA62KFqKot/VxNrKs1FeomiBWDt4u75xg3aPyp5b8almx9Ui3v5iuSGvcPXTvgwoHZ01deecqFNPw56ovdLfwaWqi1488/iXnMAQmMAi+XiX2FdHXfhOwoCRISaL0zuAaIRnskdgKaNrpp0jwmvkZGLIiuuR0gt9oYeqcn7fUMZ+NZk7832j75r0AA5ADVMfXWvddb5YdBbTWtTudhy3LB4IqzgIYdVtd6zqxywAcxKGFhg5XysAdRzjvwTntV5uvJ28Nn2GT94n6pcGh53mfSTIJBg3SMCb1+b13xlNCmdy0ogJVCUUlTJysXjbYr/4Mzszu1/VeVq7joeR5KDPfbCJJw6Vg5illhwqQql+kosRQGALAKL+wAy7vTqo6RLIE3A+Z7ZaaFkvB5h2npRgZq4P3EBmaAPz9P5jLSxTmKgED9dFMtGIKysXi5DhSck6RGdQuaykyZSVpL/6tm2VitmClIj3qcj4/n1vBF9yE8+mha6cJALWGST8sxw/fpPGE0Inz01zIJ2ifCqnlcwphQbv44NPFHMjgRBkQOLNiqw0JNs7kLAdGMOFtjilMH4Xwhb7ja5Ig0ADwOh2LBmdZd5EIMSWgu8oS6qg9Crauxei3eA+heIx3n9p/hr3H7/pJe59BQiIJ1EEkAZbIMgD7pAvnrZ6tE1Ij6511CrxHyjFgTmaCs+TUzaYorOq9WrETsNU8L0B0b8janpReeAiLgabzFORv2LT0UPNksYuQsX3Y8nOe3cT2I3zjTkLbFwOrA3gnoqBsZsLruJF80HDPs2SId14UrkZx7aMIAJAtj0BT8fGFdtdrUNFn5VuGSCg7Cqti9TPajqj1c6vHKobwMny0+00q7cxCoBa9sjJMeUf/1j4Dy2vm9TntKmtrQK3JY2if7bx+FnbP0aOimsnAGshiOMnDMgGllrUoUDja/NObDTs+nZURd09MCasmAtU0kE0cstGqMp0M+4FAv+yQLYIeYxPISlGmE4ALrdy5TEwUInojBhRvmnqq5nAWDXL9TmyGapJx0Dn7w6A6tiTaqwIikLsd1WzR3CO+49hngmLUeJ47NIq6Jl1RC7ZvwNXiF6dcJhxRQGQ8NRXdXrzpnxRn0Qe0RjXSFGCZVUzvfOWHjMNHZizibCMO/7Sfn11V8VZbLwiDQsiljs2P6tjr9bRAPsIi3JXeMNe1oVH8mH8jmZ9QIpVya8d+juXPkwtW3djxuEf8vPAzGlqYJl0+RIus7nNTF3XveBvq6DnUGupZFPMOGNV0Pyal/hcUHdbtM8AKSd32yQuSjJoWDkB2EtmRO4fNE7JjphSMMKlwWcH8chvap48XrnV+M0ipHjgcSzUR6gcJMWH6s3tV3zTqHPWvPIRW+T5p3c6oz5q8O8y2fkWDCfTKEI70aYz7D4nuhNr2YZZG1oP2v2RsB51E971kEuJlXyiZibxWy08Qng1e1b+j+rHpGwaWiZXAuIbCDkgVZtEvBzOeUMsgqGXzbffNAGbg1j5qUo2Ydc5jFO5jboSDnDB+PmrcGOZcFPZjHoq7FCFdT5LlALEgncZDoI48s1/eqgxdUUa9XEErNVCDCNygBjfqbJwuWNKfd48wJPHgM3W/AxHHX3QwNT46apYdcsaF6/SwJFsynT4A44XjePQr2pqxMcQENax9zx69SGWYJq5gM4qptKWHarr+5pzQQyAfbAT1+aX2haqRIL6DGldLe5NM1vNq4MIZqpQw+gqoKsusCxi+e5JXMkS8i8EJHaQ/woviES5Mr7MyX8Grhq8k4S7NqPqHEcBmsfLBid/FDAMUod6SMSNGonEAEScPb3EJKjGbLRTtftIIK94y5rUMxEZbZqejroCy43C+JNO1fsZkKQ3zCdxSdXa0FYI4XZD6bBr/OUoHaVhG6Z6Bm4Ov5WcczOQcgB3xJ4ZEPItD1E4VcQ2O5hNb7Hc4Pt5ugQsOFuLVBPeh3STaWvIGvkRrLosJFYDucMpcyBcg1OnkNvX2p/2d68sVxBoQtJxlp3IJ2rsNingsZJd5PxV4PDwvD4mjqljsvNNfiLE7o4JY1QTfREvjf6axDbwF4MV7T+GRc8DvBfSNxvhM5qcLEsC8+h+rkv13HmPMV+g4U7O+0om7COB4I3anMnsZG90/iqGz6oyj+XREpyCjWqVmDSss1tbBo6X8iFbholqAQrcfU/IyR1XS2KyphdFmMpcKNhQpdnPxcHi3w4dRVgsOSbb2pYRrUdHU3HcmBl0gmTgNqMviX5YN/Na/WW8e+gg0t9DiVcNwkE3OksaG2+Z/EnC36HqOnlvfHtGNPdGVHkYzcBudLyz8VJaka8qlic0pp3X0DXQhsD8PphMpu/dxnjnHaRfIPpli07mFp59PE3zH0HsdH8mzvMGnoCjLx2eP4BUue4RBIxR4QJiQS+L/XUMoDDRE/btzu0qR/+oA10SAMNLqUpuR5m8ciKxK8wjpd/vocWJ5lraCUQFjGCAXjhNtqYX/HIq9dR5zrIjTA3MB8wBwYFKw4DAhoEFFOv+Sr+kHwBKMVdPadOUF5ErP6jBBSgL/zS0a89KSdCcPvn3I/SARyMNg==\n        password:\n          type: string\n          description: Password of the file\n          example: novell\n\n    RevokeServerRequest:\n      type: object\n      description: Request for revokeCertificate\n      properties:\n        serverDN:\n          type: string\n          description: DN of the server  which owns the certificate\n          example: serverName.novell\n        CertificateName:\n          type: string\n          description: Nick Name of the Certificate\n          example: cert\n        invalidityDate:\n          type: integer\n          description: Date starting from which the certificate is invalid\n          example: 1597084200\n        crlConfigurationDN:\n          type: string\n          description: CRL Configuration DN\n          example: One - Configuration.CRL Container.Security\n        reason:\n          type: integer\n          description: Reason for revocation\n          example: 1\n        comment:\n          type: string\n          description: Any additional comment for revocation\n          example: Key Compromised\n\n    Chain:\n      type: object\n      description: Response of getChain endpoint\n      properties:\n        certificates:\n          type: array\n          items:\n            $ref: \"#/components/schemas/ChainDetails\"\n\n    ChainDetails:\n      type: object\n      properties:\n        certificateName:\n          type: string\n          description: Nick name of the certificate\n          example: cert\n        certificateChain:\n          type: array\n          items:\n            $ref: \"#/components/schemas/CertificateDetails\"\n\n    IssueRequest:\n      type: object\n      description: Request for issueCertificate endpoint\n      properties:\n        certSigningRequest:\n          type: string\n          description: CSR(Certificate Signing Request) for the certificate to be issued\n          example: -----BEGIN CERTIFICATE REQUEST-----\\nMIIC3TCCAcUCAQAwTzELMAkGA1UEBhMCaW4xDjAMBgNVBAgTBWRlbGhpMQ4wDAYD\\nVQQHEwVkZWxoaTEPMA0GA1UEChMGbm92ZWxsMQ8wDQYDVQQDEwZTZXJ2ZXIwggEi\\nMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDbuBEe/9d5pbfbqC5Nh8wjQXbJ\\nP5VoyyRfreBgg2w6/orTbuTePIBAwYkphmm0BnS6otnE9mYsPIhL3YlAi90zPMZD\\n2VEWsNUdCbKC1q45fSPKUfqt43YZjvVmLMchb2uqr79EDxBqZoMsUG0++jbwFLZ7\\nxy8Y41/di7/iBMLwOwdSehly321z2IRDu1ULUEFxvNIIy5n6xb6l2shW94wsjogP\\nqbYeD3qGz2vydeBinJkknSazNn7ywrAbVmI+oc8dALlfW7tdfJ4jKHpu1KgnuSVY\\n5hwuTLmzGSmsvSLoeYYQgXsxHCntw/gjKmnHt9mfOrJexuIJngaEyRabu2xxAgMB\\nAAGgSTBHBgkqhkiG9w0BCQ4xOjA4MDYGA1UdEQQvMC2CDWJlc3RmbGFyZS5jb22C\\nDnVzZWZ1bHJlYWQuY29tggxjaGFuZGFuay5jb20wDQYJKoZIhvcNAQEFBQADggEB\\nAH6UVmPbQtyompOu1+Fkx4KlezxeBImY6iAp7e9pyMfCV+ukD+GxL5Hgw47h9zGS\\ndUOLaOxUEzh3NJ+mGaLruuZuzDc1yX7O5ubU2H/C1ZXN+B5ZOMakMN2gRM241Pru\\nm8GOmE8TMv/7DEumrHBpHAdDZavTOKhGOF6QAKWG0lm+Z0Rf9VwdwZeFPRDfPOUe\\nIB9OmKFg9Ih2WCIuASlTUAo6qdGXbd2eEaRPuqQ0NICqWdejrXjAQDzW2QIrfXW+\\niAQSW9OMnCHgd0Koqxq6A2iOoRctjBPKwyRM3nMlraHKKKB8CgL/R6oAeDIdlh0X\\nNTFFOUGREOzf7KWAw/aXWuc=\\n-----END CERTIFICATE REQUEST-----\n        keyUsage:\n          type: integer\n          description: Purposes for which the public key will be used for\n          example: 40960\n        keyUsageExtensionFlag:\n          type: integer\n          description: Additional Information about Key Usage\n          example: 0\n        extendedKeyUsage:\n          type: integer\n          description: Extended usages of the public key\n          example: 56\n        extendedKeyUsageExtensionFlag:\n          type: integer\n          description: Additional Information about Extended Key Usage\n          example: 0\n        subjectDN:\n          type: string\n          description: the entity associated with the public key\n          example: CN=serverName.o=treeName\n        subjectAltNames:\n          type: array\n          description: Alternative names secured by the certificate\n          items:\n            $ref: \"#/components/schemas/SubjectAltDetails\"\n        signatureAlgorithm:\n          type: integer\n          description: Algorithm used to generate the digital signature for the certificate\n          example: 8\n        extensions:\n          type: array\n          description: extension array\n          items:\n            $ref: \"#/components/schemas/Extension\"\n        validFrom:\n          type: integer\n          description: Start date of the certificate validity\n          example: 1610935020\n        validTo:\n          type: integer\n          description: End date of the certificate validity\n          example: 1674007020\n        validityPeriod:\n          type: number\n          description: Validity of the certificate\n          format: float\n          example: 2\n        basicConstraintExtensionFlag:\n          type: integer\n          description: Additional Information about Basic Constraint Key Usage\n          example: 0\n        pathLength:\n          type: integer\n          description: Specifies how many subordinate levels of a certificate chain that the CA can certify.\n          example: 0\n        certificateType:\n          type: integer\n          description: Specifies whether the certificate is for CA or not\n          example: 256\n\n    IssueResponse:\n      type: object\n      description: Response of issueCertificate endpoint\n      properties:\n        certificate:\n          type: string\n          description: Certificate which is issued\n          example: MIIG1jCCBb6gAwIBAgIUDDIYtIkOrreUH107alvUEH5nrM4wDQYJKoZIhvcNAQEFBQAwLzEaMBgGA1UECxMRT3JnYW5pemF0aW9uYWwgQ0ExETAPBgNVBAoTCFBVUkFOSUtBMB4XDTIxMDIxNTA3NDIzOFoXDTIzMDIxNTA3NDIzOFowLjEQMA4GA1UEChMHRURJUjkyMDEaMBgGA1UEAxMRU0xFUzEyU1AyLVZBTkktNDAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDbuBEe/9d5pbfbqC5Nh8wjQXbJP5VoyyRfreBgg2w6/orTbuTePIBAwYkphmm0BnS6otnE9mYsPIhL3YlAi90zPMZD2VEWsNUdCbKC1q45fSPKUfqt43YZjvVmLMchb2uqr79EDxBqZoMsUG0++jbwFLZ7xy8Y41/di7/iBMLwOwdSehly321z2IRDu1ULUEFxvNIIy5n6xb6l2shW94wsjogPqbYeD3qGz2vydeBinJkknSazNn7ywrAbVmI+oc8dALlfW7tdfJ4jKHpu1KgnuSVY5hwuTLmzGSmsvSLoeYYQgXsxHCntw/gjKmnHt9mfOrJexuIJngaEyRabu2xxAgMBAAGjggPpMIID5TAdBgNVHQ4EFgQUrEgGlRBZKduRE0uTXihZ3PeQJS8wHwYDVR0jBBgwFoAUk/G0M4xwHwPjpdvnSr5sq1/oJoQwCwYDVR0PBAQDAgWgMDoGA1UdEQQzMDGCD3d3dy5hbGFua2FyLmNvbYgeMQA2ADQALgA5ADkALgAxADYAMgAuADEAMwAxAAAAMIIBzAYLYIZIAYb4NwEJBAEEggG7MIIBtwQCAQABAf8THU5vdmVsbCBTZWN1cml0eSBBdHRyaWJ1dGUodG0pFkNodHRwOi8vZGV2ZWxvcGVyLm5vdmVsbC5jb20vcmVwb3NpdG9yeS9hdHRyaWJ1dGVzL2NlcnRhdHRyc192MTAuaHRtMIIBSKAaAQEAMAgwBgIBAQIBADAIMAYCAQECAQACAQChGgEBADAIMAYCAQECAQAwCDAGAgEBAgEAAgEAogYCAQABAf+jggEEoFgCAQICAgD/AgEAAw0AgAAAAAAAAAAAAAAAAwkAgAAAAAAAAAAwGDAQAgEAAgh//////////wEBAAIEBvDfSDAYMBACAQACCH//////////AQEAAgQG8N9IoVgCAQICAgD/AgEAAw0AQAAAAAAAAAAAAAAAAwkAQAAAAAAAAAAwGDAQAgEAAgh//////////wEBAAIEEf+wnTAYMBACAQACCH//////////AQEAAgQR/7Cdok4wTAIBAgIBAAICAP8DDQCAAAAAAAAAAAAAAAADCQCAAAAAAAAAADASMBACAQACCH//////////AQEAMBIwEAIBAAIIf/////////8BAQAwggGIBgNVHR8EggF/MIIBezAqoCigJoYkaHR0cDovLzEwLjcxLjEyOS44ODo4MDI4L2NybC9vbmUuY3JsMF6gXKBahlhsZGFwOi8vMTAuNzEuMTI5Ljg4OjM4OS9DTj1PbmUsQ049T25lJTIwLSUyMENvbmZpZ3VyYXRpb24sQ049Q1JMJTIwQ29udGFpbmVyLENOPVNlY3VyaXR5MCugKaAnhiVodHRwczovLzEwLjcxLjEyOS44ODo4MDMwL2NybC9vbmUuY3JsMF+gXaBbhllsZGFwczovLzEwLjcxLjEyOS44ODo2MzYvQ049T25lLENOPU9uZSUyMC0lMjBDb25maWd1cmF0aW9uLENOPUNSTCUyMENvbnRhaW5lcixDTj1TZWN1cml0eTBfoF2gW6RZMFcxDDAKBgNVBAMTA09uZTEcMBoGA1UEAxMTT25lIC0gQ29uZmlndXJhdGlvbjEWMBQGA1UEAxMNQ1JMIENvbnRhaW5lcjERMA8GA1UEAxMIU2VjdXJpdHkwDQYJKoZIhvcNAQEFBQADggEBACyh487oaE2Vbf0UrH8XAecqtN/qGcfVAxWbZ1Ou6GavNL450bY+nMTjU69FKX85kMOpaPZR62MV07kSLhl15x/9YZRHmx3d306c4gb/9mNRN6g+Tz8uOa72lbFmljmtm9kQhiKihYhw0taNQBDcnbGGhcHurfFSXqM550CwMml4h7GeToKupuW9iM/SYgbJ7rsPgZoX07Wh037xYKwlxzEpjDj9IJ+u762BsxlqRghGPvtEJkDPN4o02vWBmGT/ZBzJg/HCdecRIzpwVEn53ZXCoRnvotjjNGQv4bHnq7KP33+0JLhgPqI2xRfOi4D/QnbSnbCl1kvmBop+kOhtreM=\n\n    BackupUserRequest:\n      type: object\n      description: Request for backupCertificate endpoint\n      properties:\n        userDN:\n          type: string\n          description: DN of the user  which owns the certificate\n          example: user.novell\n        certificateName:\n          type: string\n          description: Name of the certificate\n          example: cert\n        password:\n          type: string\n          description: password of the certificate\n          example: novell\n\n    ExportUserRequest:\n      type: object\n      description: Request for exportCertificate and validateCertificate endpoint\n      properties:\n        userDN:\n          type: string\n          description: DN of the user  which owns the certificate\n          example: user.novell\n        certificateName:\n          type: string\n          description: Name of the certificate\n          example: cert\n\n    GetUserRequest:\n      type: object\n      description: Request for getCertificate endpoint\n      properties:\n        userDN:\n          type: string\n          description: DN of the user  which owns the certificate\n          example: user.novell\n\n    ImportUserRequest:\n      type: object\n      description: Request for import certificate method\n      properties:\n        userDN:\n          type: string\n          description: DN of the user  which owns the certificate\n          example: user.novell\n        certificateName:\n          type: string\n          description: Nick Name of the certificate\n          example: cert\n        fileContentType:\n          type: string\n          description: Format/ Extension of the file. CERT (for .b64 and .cer), PKCS12 (for .pfx)\n          example: PKCS12\n        fileContent:\n          type: string\n          description: Content of the certificate\n          example: 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\n        password:\n          type: string\n          description: Password of the file. Required only when fileContentType is PKCS12\n          example: novell\n        flag:\n          type: integer\n          description: Required when fileContentType is PKCS12\n          example: 0\n\n    CreateUserRequest:\n      type: object\n      description: request for CreateUserCertificate endpoint\n      properties:\n        userDN:\n          type: string\n          description: DN of the user  which owns the certificate\n          example: user.novell\n        serverDN:\n          type: string\n          description: DN of the server  which owns the certificate\n          example: serverName.novell\n        certificateName:\n          type: string\n          description: Nick Name of the certificate\n          example: cert\n        keyAlgorithm:\n          type: integer\n          description: Key Algorithm which the CA will use\n          example: 1\n        keySize:\n          type: integer\n          description: size of the key in bits\n          example: 2048\n        keyUsage:\n          type: integer\n          description: Purposes for which the public key will be used for\n          example: 40960\n        keyUsageExtensionFlag:\n          type: integer\n          description: Additional Information about Key Usage\n          example: 0\n        extendedKeyUsage:\n          type: integer\n          description: Extended usages of the public key\n          example: 56\n        extendedKeyUsageExtensionFlag:\n          type: integer\n          description: Additional Information about Extended Key Usage\n          example: 0\n        allowExportPrivateKey:\n          type: integer\n          description: Whether or not to allow the export of private key\n          example: 0\n        subjectDN:\n          type: string\n          description: the entity associated with the public key\n          example: O=novell.CN=userName\n        subjectAltNames:\n          type: array\n          description: Alternative names secured by the certificate\n          items:\n            $ref: \"#/components/schemas/SubjectAltDetails\"\n        emailAddress:\n          type: string\n          description: A valid email address of the user\n          example: test@gmail.com\n        signatureAlgorithm:\n          type: integer\n          description: Algorithm used to generate the digital signature for the certificate\n          example: 8\n        extensions:\n          type: array\n          description: extension array\n          items:\n            $ref: \"#/components/schemas/Extension\"\n        validFrom:\n          type: integer\n          description: Start date of the certificate validity\n          example: 1610935020\n        validTo:\n          type: integer\n          description: End date of the certificate validity\n          example: 1674007020\n        validityPeriod:\n          type: number\n          description: Validity of the certificate\n          format: float\n          example: 2\n\n    GetTrustedResponse:\n      type: object\n      description: Response of getCertificates\n      properties:\n        certificates:\n          type: array\n          description: array of certificates\n          items:\n            allOf:\n              - $ref: \"#/components/schemas/TrustedResponse\"\n              - $ref: \"#/components/schemas/CertificateDetails\"\n\n    TrustedResponse:\n      type: object\n      description: Response of getCertificates\n      properties:\n        trustedRootName:\n          type: string\n          description: Name of the trusted root\n          example: trustedRoot1\n        trustedRootContainer:\n          type: string\n          description: Context of the trusted root\n          example: ed920/cn=Security/cn=tc1\n\n    GetTrustedRequest:\n      type: object\n      description: Request for getCertificates\n      properties:\n        trustedRootContainerDN:\n          type: string\n          description: trusted container DN\n          example: trc.novell\n\n    ValidateTrustedRequest:\n      type: object\n      description: Request for validateCertificate\n      properties:\n        trustedRootDN:\n          type: string\n          description: DN of the trusted Root\n          example: cn=tr1,cn=trc,o=novell\n\n    BackupCARequest:\n      type: object\n      description: Request for BackupCertificate endpoint\n      properties:\n        certificate:\n          type: string\n          description: Certificate in base64 format\n          example: MIIFUTCCBDmgAwIBAgIUbSJkYDZBI3psuuAgDeAWaGB+qTYwDQYJKoZIhvcNAQELBQAwZjEZMBcGA1UEChMQTklDSSBMaWNlbnNlZCBDQTFJMEcGA1UEAxNATklDSSBNYWNoaW5lLVVuaXF1ZSBDQSAxMUZGQUY4OS1EMDYxQjU0MERDOEZFRUEzMkI3NDM3MzJFN0FGREQ0NzAeFw0yMDAzMDIxMjExMjJaFw0zMDAzMDIxMjExMjJaMCwxGjAYBgNVBAsTEU9yZ2FuaXphdGlvbmFsIENBMQ4wDAYDVQQKEwVFRDkyMDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKXCxPSLoQITqPZTnCZud76zjAArDImbMzR3exl6mlyaIW2JM611seqm3+lu/DuYKa7YxGZmW1tW3iSDQV7QW72aHsFZuREcnAWEmMp4hGM3fGvXwyduDWNms+GOP0A1563eTGFP3zJtO0O/nwaQPcD3bE+1M1tFpjUXkmeRWn9w8TZgajcXPeLobJY01zSr6ZAlZ2cs02+x9AHyzyLxsVr1tcS7czVfRpmSozpauX86A/hFszgPE1QFEup30sTd3nNbGofGBW3152xmPG1h6vuQAGMCuC16pG8n58/0FZxk03q2xfNBGg/VP0itsDkwP2Q9II82EMZntQ+P0PgdKeUCAwEAAaOCAi8wggIrMB0GA1UdDgQWBBRX8CXvhSzkVIRB1kLtedZMjPDJ6jAfBgNVHSMEGDAWgBTMzCaAZu9BFJtB84/lj+nXd3CoyDAMBgNVHRMEBTADAQH/MAsGA1UdDwQEAwIBBjCCAcwGC2CGSAGG+DcBCQQBBIIBuzCCAbcEAgEAAQH/Ex1Ob3ZlbGwgU2VjdXJpdHkgQXR0cmlidXRlKHRtKRZDaHR0cDovL2RldmVsb3Blci5ub3ZlbGwuY29tL3JlcG9zaXRvcnkvYXR0cmlidXRlcy9jZXJ0YXR0cnNfdjEwLmh0bTCCAUigGgEBADAIMAYCAQECAUYwCDAGAgEBAgEKAgFpoRoBAQAwCDAGAgEBAgEAMAgwBgIBAQIBAAIBAKIGAgEYAQH/o4IBBKBYAgECAgIA/wIBAAMNAIAAAAAAAAAAAAAAAAMJAIAAAAAAAAAAMBgwEAIBAAIIf/////////8BAQACBAbw30gwGDAQAgEAAgh//////////wEBAAIEBvDfSKFYAgECAgIA/wIBAAMNAEAAAAAAAAAAAAAAAAMJAEAAAAAAAAAAMBgwEAIBAAIIf/////////8BAQACBBH/r4kwGDAQAgEAAgh//////////wEBAAIEEf+viaJOMEwCAQICAgD/AgEAAw0AgP//////////////AwkAgP////////8wEjAQAgEAAgh//////////wEB/zASMBACAQACCH//////////AQH/MA0GCSqGSIb3DQEBCwUAA4IBAQB6qLx9p8K84j1HJioP3BJzCSTlCg6/rwcO2ID+RbHu/GAtW1a7XGYB+BzCS8w8BrHeME8AMN5I5Upc7mUmtgknkOv8FXaHFmZyli3IyvkJsnf0xYyvj/CeliaEDMcGMPIy4CteZMHYYoyh3TvF4l2kGpd60b/NtSCFpTmKfONgcMsKslhY75qoKWVJXE2lsB3ZD7W2NteiwTjA4QlR6QqMIaCqJpIYxLPKipJil2EmQszQSgXJkz/ctU9i2DyitwCXnW/CwA4UIfFCsavZ64Fp+OCkP9x5CCANYnwN1r0O27LY/Y7I5KPKWVmk/ozObdQefjqVN+sjNCWNk3niPjqm\n        password:\n          type: string\n          description: Password of the file\n          example: novell\n\n    CreateCARequest:\n      type: object\n      description: Request for createCertificateAuthority\n      properties:\n        serverDN:\n          type: string\n          description: DN of the server  which owns the certificate\n          example: serverName.novell\n        certificateAuthorityName:\n          type: string\n          description: Nick Name of the certificate\n          example: cert\n        keyAlgorithm:\n          type: integer\n          description: Key Algorithm which the CA will use\n          example: 1\n        keySize:\n          type: integer\n          description: size of the key in bits\n          example: 2048\n        keyUsage:\n          type: integer\n          description: Purposes for which the public key will be used for\n          example: 40960\n        keyUsageExtensionFlag:\n          type: integer\n          description: Additional Information about Key Usage\n          example: 0\n        extendedKeyUsage:\n          type: integer\n          description: Extended usages of the public key\n          example: 56\n        extendedKeyUsageExtensionFlag:\n          type: integer\n          description: Additional Information about Extended Key Usage\n          example: 0\n        allowExportPrivateKey:\n          type: integer\n          description: Whether or not to allow the export of private key\n          example: 0\n        basicConstraintsExtensionFlag:\n          type: integer\n          description: Additional information about Basic Constraint\n          example: 0\n        subjectDN:\n          type: string\n          description: the entity associated with the public key\n          example: CN=serverName.o=treeName\n        subjectAltNames:\n          type: array\n          description: Alternative names secured by the certificate\n          items:\n            $ref: \"#/components/schemas/SubjectAltDetails\"\n        signatureAlgorithm:\n          type: integer\n          description: Algorithm used to generate the digital signature for the certificate\n          example: 8\n        extensions:\n          type: array\n          description: extension array\n          items:\n            $ref: \"#/components/schemas/Extension\"\n        validFrom:\n          type: integer\n          description: Start date of the certificate validity\n          example: 1610935020\n        validTo:\n          type: integer\n          description: End date of the certificate validity\n          example: 1674007020\n        validityPeriod:\n          type: number\n          description: Validity of the certificate\n          format: float\n          example: 2\n        CRLs:\n          type: array\n          description: Array of CRL Objects\n          items:\n            $ref: \"#/components/schemas/CRLDetails\"\n\n    CRLDetails:\n      type: object\n      description: Certificate Revokation List objects\n      properties:\n        CRLName:\n          type: string\n          description: Name of the CRL\n          example: CRL_1\n        CRLAlgorithm:\n          type: integer\n          description: Name of the algorithm. Supported Algorithms are\n            0 for RSA\n            1 for ECDSA\n          example: 0\n        CRLFileLocation:\n          type: string\n          description: CRL file location on CA Server\n          example: /var/opt/novell/eDirectory/data/nds-http/crl/CRL_1.crl\n        CRLHTTPCRLDistributionPoints:\n          type: array\n          description: HTTP CRL Distribution points\n          items:\n            type: string\n            example: http://10.71.128.211:8028/crl/CRL_1.crl\n        CRLLDAPDistributionPoints:\n          type: array\n          description: LDAP CRL Distribution points\n          items:\n            type: string\n            example: ldap://10.71.128.211:389/CN=CRL_2 - Configuration,CN=CRL Container,CN=Security\n        CRLConfigurationName:\n          type: string\n          description: Configuration Name of the CRL\n          example: One - Configuration\n\n    CAConfiguration:\n      type: object\n      description: CA Congiguration setting\n      properties:\n        requireReadRights:\n          type: boolean\n          description: Require read rights to operate the CA\n          example: true\n        requireWriteRights:\n          type: boolean\n          description: Require Write rights to operate the CA\n          example: true\n        enableServerSelfProvisioning:\n          type: boolean\n          description: Enable Server Self Provisioning\n          example: true\n        forceHealthCheck:\n          type: boolean\n          description: Health Check - Force default certificate creation/update on CA change\n          example: true\n        enableUserSelfProvisioning:\n          type: boolean\n          description: Enable User Self Provisioning\n          example: true\n        allowUserToIssueEmergencyCRL:\n          type: boolean\n          description: Allow any authenticated user to issue an emergency CRL\n          example: true\n        enableSuiteBMode:\n          type: boolean\n          description: Enable SuiteB Mode\n          example: true\n\n    GetCRLs:\n      type: object\n      description: Response of getCRLs endpoint\n      properties:\n        CRLs:\n          type: array\n          description: Array of CRL objects\n          items:\n            $ref: \"#/components/schemas/CRLs\"\n\n    CRLs:\n      type: object\n      description: contents of CRL array\n      properties:\n        CRLName:\n          type: string\n          description: Name of the CRL\n          example: CRL_1\n        CRLConfigurationName:\n          type: string\n          description: Name of the CRL Configuration\n          example: Two - Configuration\n        status:\n          type: integer\n          description: status of the crl\n          example: 0\n        CRLDN:\n          type: string\n          description: DN of the CRL\n          example: /eDirAPI%2Fv1%2FUser%2Fcn=Security%2Fcn=CRL%20Container%2Fcn=One%20-%20Configuration%2Fcn=One\n        certificateRevocationList:\n          type: string\n          description: List of the CRL\n          example: MIIBBzCBjwIBATAKBggqhkjOPQQDAzAvMRowGAYDVQQLExFPcmdhbml6YXRpb25hbCBDQTERMA8GA1UEChMIUFVSQU5JS0EXDTIxMDIxMjEzMzgwMFoXDTIxMDIyNjEzMzgwMFqgLzAtMB8GA1UdIwQYMBaAFB588k4+tPqxnXI3zjIQ1BHHzH1rMAoGA1UdFAQDAgECMAoGCCqGSM49BAMDA2cAMGQCMFPSiH+nOeXpYSSPglM63jZ7ktZbe/f39JZzAfIuB8we1+k77KaZstnw2+bWb9LcYgIwP3si6jy7Am+dIXgNQ0Bup6g5c7v6ggNPwxf+2wz8Nrkbwfw+9BsK7KxwnRquFZ3nag==\n        CRLAlgorithm:\n          type: integer\n          description: Name of the algorithm. Supported Algorithms are\n            0 for RSA\n            1 for ECDSA\n          example: 0\n        CRLFileLocation:\n          type: string\n          description: CRL file location on CA Server\n          example: /var/opt/novell/eDirectory/data/nds-http/crl/CRL_1.crl\n        CRLDistributionPoints:\n          type: array\n          description: CRL Distribution points\n          items:\n            type: string\n            example: ldap://10.71.128.211:389/CN=CRL_1,CN=CRL_1 - Configuration,CN=CRL Container,CN=Securit\n        lastIssueAttempt:\n          type: integer\n          description: Time of the last issue attempt\n          example: 1613137080\n        lastIssueSuccess:\n          type: integer\n          description: Time of the last issue success\n          example: 1613137080\n        nextCRLIssue:\n          type: integer\n          description: Date of the next CRL Issue\n          example: 1614346680\n        repeatInterval:\n          type: integer\n          description: Date of the next CRL Issue\n          example: 2\n        repeatIntervalType:\n          type: integer\n          description: Interval type of CRL\n          example: 4\n\n    ImportCARequest:\n      type: object\n      description: Request for importCertificate endpoint\n      properties:\n        serverDN:\n          type: string\n          description: DN of the server which owns the certificate\n          example: serverName.novell\n        certificateName:\n          type: string\n          description: Nick name of the certificate\n          example: cert\n        certificates:\n          type: array\n          description: Array of Certificate Objects\n          items:\n            $ref: \"#/components/schemas/Certificate\"\n\n    Certificate:\n      type: object\n      description: content of certificate array\n      properties:\n        algorithm:\n          type: integer\n          description: Name of the algorithm. Supported Algorithms are\n            0 for RSA\n            1 for ECDSA\n          example: 0\n        fileContent:\n          type: string\n          description: Content of the import file\n          example: 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\n        password:\n          type: string\n          description: Password of the file\n          example: novell\n\n    IssueCRL:\n      type: object\n      description: Request for issueCRL endpoint\n      properties:\n        CRLConfigurationName:\n          type: string\n          description: Name of the CRL\n          example: One - Configuration\n\n    RevokeCARequest:\n      type: object\n      description: Request for revokeCertificate endpoint\n      properties:\n        serverDN:\n          type: string\n          description: DN of the server  which owns the certificate\n          example: serverName.novell\n        invalidityDate:\n          type: integer\n          description: Date starting from which the certificate is invalid\n          example: 1597084200\n        crlConfigurationDN:\n          type: string\n          description: CRL Configuration DN\n          example: One - Configuration.CRL Container.Security\n        reason:\n          type: integer\n          description: Reason for revocation\n          example: 1\n        comment:\n          type: string\n          description: Any additional comment for revocation\n          example: Key Compromised\n        certificateType:\n          type: string\n          description: Type of the certificate\n          example: self-signed RSA\n\n    SASObject:\n      type: object\n      description: Request parameters for createSASServiceObject endpoint\n      properties:\n        serverName:\n          type: string\n          description: Name of the server\n          example: server1\n        serverContext:\n          type: string\n          description: context of the server\n          example: o=novell\n\n    UpdateCRLRequest:\n      type: object\n      description: Response of UpdateCRL endpoint\n      properties:\n        serverDN:\n          type: string\n          description: DN of the server which owns the certificate\n          example: serverName.novell\n        CRLs:\n          type: array\n          description: CRL array\n          items:\n            $ref: \"#/components/schemas/UpdateCRLArray\"\n\n    UpdateCRLArray:\n      type: object\n      description: contents of CRL array\n      properties:\n        CRLFileLocation:\n          type: string\n          description: CRL file location on CA Server\n          example: /var/opt/novell/eDirectory/data/nds-http/crl/CRL_1.crl\n        CRLDeleteDistributionPoints:\n          type: array\n          description: LDAP CRL Distribution points\n          items:\n            type: string\n            example: ldap://10.71.128.211:389/CN=CRL_11_EC - Configuration,CN=CRL Container,CN=Security\n        CRLDistributionPoints:\n          type: array\n          description: LDAP CRL Distribution points\n          items:\n            type: string\n            example: http://10.71.128.211:8028/crl1/CRL_1_EC.crl\n        CRLConfigurationName:\n          type: string\n          description: Configuration Name of the CRL\n          example: One - Configuration\n        nextCRLIssue:\n          type: integer\n          description: Date of the next CRL Issue\n          example: 1614346680\n        repeatInterval:\n          type: integer\n          description: Date of the next CRL Issue\n          example: 2\n        repeatIntervalType:\n          type: integer\n          description: Interval type of CRL\n          example: 4\n\n    RevokeUserRequest:\n      type: object\n      description: Request for revokeCertificate\n      properties:\n        UserDN:\n          type: string\n          description: DN of the user which owns the certificate\n          example: userName.novell\n        CertificateName:\n          type: string\n          description: Nick Name of the Certificate\n          example: cert\n        invalidityDate:\n          type: integer\n          description: Date starting from which the certificate is invalid\n          example: 1597084200\n        crlConfigurationDN:\n          type: string\n          description: CRL Configuration DN\n          example: One - Configuration.CRL Container.Security\n        reason:\n          type: integer\n          description: Reason for revocation\n          example: 1\n        comment:\n          type: string\n          description: Any additional comment for revocation\n          example: Key Compromised\n\n    CreateCRLRequest:\n      type: object\n      description: request for createCRL\n      properties:\n        ServerDN:\n          type: string\n          description: DN of the server which owns the certificate\n          example: serverName.novell\n        CRLs:\n          type: array\n          description: CRL array\n          items:\n            $ref: \"#/components/schemas/CRLDetails\"\n\n    GetCACertificate:\n      type: object\n      description: Response of getChain endpoint\n      properties:\n        certificates:\n          type: array\n          items:\n            $ref: \"#/components/schemas/CertificateDetails\"\n\n    ValidateCARequest:\n      type: object\n      description: Request for validateCA endpoint\n      properties:\n        certificateType:\n          type: string\n          description: Types of certificate are\n            a) root\n            b) self-signed RSA\n            c) self-signed EC\n          example: self-signed RSA\n\n    GetNCPCertificateResponse:\n      type: object\n      description: JSON Representation of NCP certificate\n      properties:\n        SubjectNames:\n          type: array\n          description: array of NCP certificates\n          items:\n            $ref: \"#/components/schemas/NCPCertificateDetails\"\n\n    NCPCertificateDetails:\n      type: object\n      properties:\n        subjectNames:\n          type: string\n          description: NCP certificate\n          example: \"ncp://10.71.129.89:524\"\n        EBACAAddress:\n          type: string\n          description: EBA CA Address\n          example: \"164.99.90.180:524\"\n        certificateVersion:\n          type: integer\n          description: version of the certificate\n          example: 3\n        issuerName:\n          type: string\n          description: issuer of the certificate\n          example: \"/CN=EBACA\"\n        subjectName:\n          type: string\n          description: subjectName of the certificate\n          example: \"/UID=2C5A452E-A34E-AC47-8597-2C5A452EA34E\"\n        validityEnd:\n          type: integer\n          description: Ending date of validity\n          example: 1933931093\n        validityStart:\n          type: integer\n          description: Starting date of validity\n          example: 1618571094\n        serialNumber:\n          type: string\n          description: serial number of the certificate\n          example: \"473AA067C0F48C449626473AA067C0F4\"\n        signatureAlgorithm:\n          type: string\n          description: signature Algorithm of the certificate\n          example: ecdsa-with-SHA384\n        extensions:\n          type: array\n          description: Extension details\n          items:\n            $ref: \"#/components/schemas/NCPExtensions\"\n\n    NCPExtensions:\n      type: object\n      properties:\n        ExtensionName:\n          type: string\n          description: Name of the Extension\n          example: X509v3 Basic Constraints\n        ExtensionOID:\n          type: string\n          description: OID of the Extension\n          example: \"{2.5.29.19}\"\n        critical:\n          type: boolean\n          description: indicates if critical or not\n          example: true\n        pathLengthConstraint:\n          type: integer\n          description: path lenght of certificate\n          example: -1\n        certificateAuthority:\n          type: integer\n          description: specifies whether given certificate is CA certificate \n          example: 1\n\n    RevokeNCPCertificate:\n      type: object\n      description: Request parameters for revokeNCPCertificate endpoint\n      properties:\n        serverIP:\n          type: string\n          description: IP Address along with the port for the server\n          example: \"164.99.90.180:524\"\n        serialNumber:\n          type: string\n          description: serial Number of the Certificate\n          example: \"F4AE0A91F69C98439C6CF4AE0A91F69C\"\n\n    ServerIP:\n      type: object\n      description: Request for getUAPCACertificate endpoint\n      properties:\n        serverIP:\n          type: string\n          description: IP Address along with the port for the server\n          example: \"164.99.90.180:524\"\n\n    GetUAPCAResponse:\n      type: object\n      description: Response of GetUAPCACertificate endpoint\n      properties:\n        EBACAAddress:\n          type: string\n          description: EBA CA Address\n          example: \"164.99.90.180:524\"\n        certificateVersion:\n          type: integer\n          description: version of the certificate\n          example: 3\n        issuerName:\n          type: string\n          description: issuer of the certificate\n          example: \"/CN=EBACA\"\n        subjectName:\n          type: string\n          description: subjectName of the certificate\n          example: \"/UID=2C5A452E-A34E-AC47-8597-2C5A452EA34E\"\n        validityEnd:\n          type: integer\n          description: Ending date of validity\n          example: 1933931093\n        validityStart:\n          type: integer\n          description: Starting date of validity\n          example: 1618571094\n        serialNumber:\n          type: string\n          description: serial number of the certificate\n          example: \"473AA067C0F48C449626473AA067C0F4\"\n        signatureAlgorithm:\n          type: string\n          description: signature Algorithm of the certificate\n          example: ecdsa-with-SHA384\n\n    GetUAPCSRResponse:\n      type: object\n      description: Response of GetUAPCSR endpoint\n      properties:\n        CSR:\n          type: array\n          description: List of Certificate Signing Request object\n          items:\n            type: string\n            example: \"02:96:01:B8:65:A3:3D:1F:78:84:E4:1A:6C:F0:93:76:38:8E:48:A4:67:54:0D:10:CA:6B:02:D4:25:BF:2A:9F|.CN=sles12sp2-bob-90180-s2.OU=blr.O=novell.T=SLES12SP2-BOB-90180.|164.99.90.180:1524\"\n\n    ApproveUAPCSRCertificate:\n      type: object\n      description: Request for approveUAPCSRCertificate endpoint\n      properties:\n        serverIP:\n          type: string\n          description: IP Address along with the port for the server\n          example: \"164.99.90.180:524\"\n        CSRs:\n          type: array\n          description: List of Certificate Signing Request object\n          items:\n            $ref: \"#/components/schemas/CSRs\"\n\n    CSRs:\n      type: object\n      properties:\n        serverDN:\n          type: string\n          description: DN of the server\n          example: \".CN=sles12sp2-bob-90180-s4.OU=msr.O=novell.T=SLES12SP2-BOB-90180.\"",
			"canonicalURL": "/github.com/netiq-ps/netiq-idm-rest-curl-jq@bedcd5821707bc806dad06a2f8f7e2726e02403b/-/blob/openapi/edirapi/REST_SimpleLoginMode.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/netiq-ps/netiq-idm-rest-curl-jq/blob/bedcd5821707bc806dad06a2f8f7e2726e02403b/openapi/edirapi/REST_SimpleLoginMode.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: at openapi/edirapi/REST_SimpleLoginMode.yaml:829:3: duplicate path: \"/{resource DN}\""
}