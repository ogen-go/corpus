{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/nightscout/cgm-remote-monitor"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "lib/server/swagger.yaml",
			"byteSize": 33226,
			"content": "openapi: 3.0.0\nservers:\n  - url: /api/v1\ninfo:\n  title: Nightscout API\n  description: Own your DData with the Nightscout API\n  version: 14.2.3\n  license:\n    name: AGPL 3\n    url: 'https://www.gnu.org/licenses/agpl.txt'\nsecurity:\n  - api_secret: []\n    token_in_url: []\n    jwtoken: []\npaths:\n  '/entries/{spec}':\n    get:\n      summary: All Entries matching query\n      description: |\n        The Entries endpoint returns information about the\n        Nightscout entries.\n      parameters:\n        - name: spec\n          in: path\n          description: |\n            entry id, such as `55cf81bc436037528ec75fa5` or a type filter such\n            as `sgv`, `mbg`, etc.\n          required: true\n          schema:\n            type: string\n            default: sgv\n        - name: find\n          in: query\n          description: |\n            The query used to find entries, support nested query syntax, for\n            example `find[dateString][$gte]=2015-08-27`.  All find parameters\n            are interpreted as strings.\n          required: false\n          schema:\n            type: string\n        - name: count\n          in: query\n          description: Number of entries to return.\n          required: false\n          schema:\n            type: number\n      tags:\n        - Entries\n      responses:\n        '200':\n          description: An array of entries\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Entries'\n        default:\n          description: Entries\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Entries'\n  '/slice/{storage}/{field}/{type}/{prefix}/{regex}':\n    get:\n      summary: All Entries matching query\n      description: The Entries endpoint returns information about the Nightscout entries.\n      parameters:\n        - name: storage\n          in: path\n          description: \u003e-\n            Prefix to use in constructing a prefix-based regex, default is\n            `entries`.\n          required: true\n          schema:\n            type: string\n            default: entries\n        - name: field\n          in: path\n          description: \u003e-\n            Name of the field to use Regex against in query object, default is\n            `dateString`.\n          required: true\n          schema:\n            type: string\n            default: dateString\n        - name: type\n          in: path\n          description: 'The type field to search against, default is sgv.'\n          required: true\n          schema:\n            type: string\n            default: sgv\n        - name: prefix\n          in: path\n          description: Prefix to use in constructing a prefix-based regex.\n          required: true\n          schema:\n            type: string\n            default: '2015'\n        - name: regex\n          in: path\n          description: \u003e\n            Tail part of regexp to use in expanding/construccting a query\n            object.\n\n            Regexp also has bash-style brace and glob expansion applied to it,\n\n            creating ways to search for modal times of day, perhaps using\n\n            something like this syntax: `T{15..17}:.*`, this would search for\n\n            all records from 3pm to 5pm.\n          required: true\n          schema:\n            type: string\n            default: .*\n        - name: find\n          in: query\n          description: |\n            The query used to find entries, support nested query syntax, for\n            example `find[dateString][$gte]=2015-08-27`.  All find parameters\n            are interpreted as strings.\n          required: false\n          schema:\n            type: string\n        - name: count\n          in: query\n          description: Number of entries to return.\n          required: false\n          schema:\n            type: number\n      tags:\n        - Entries\n      responses:\n        '200':\n          description: An array of entries\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Entries'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/echo/{storage}/{spec}':\n    get:\n      summary: View generated Mongo Query object\n      description: |\n        Information about the mongo query object created by the query.\n      parameters:\n        - name: storage\n          in: path\n          description: |\n            `entries`, or `treatments` to select the storage layer.\n          required: true\n          schema:\n            type: string\n            default: sgv\n        - name: spec\n          in: path\n          description: |\n            entry id, such as `55cf81bc436037528ec75fa5` or a type filter such\n            as `sgv`, `mbg`, etc.\n            This parameter is optional.\n          required: true\n          schema:\n            type: string\n            default: sgv\n        - name: find\n          in: query\n          description: |\n            The query used to find entries, support nested query syntax, for\n            example `find[dateString][$gte]=2015-08-27`.  All find parameters\n            are interpreted as strings.\n          required: false\n          schema:\n            type: string\n        - name: count\n          in: query\n          description: Number of entries to return.\n          required: false\n          schema:\n            type: number\n      tags:\n        - Entries\n        - Debug\n      responses:\n        '200':\n          description: An array of entries\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MongoQuery'\n  '/times/echo/{prefix}/{regex}':\n    get:\n      summary: Echo the query object to be used.\n      description: Echo debug information about the query object constructed.\n      parameters:\n        - name: prefix\n          in: path\n          description: Prefix to use in constructing a prefix-based regex.\n          required: true\n          schema:\n            type: string\n        - name: regex\n          in: path\n          description: \u003e\n            Tail part of regexp to use in expanding/construccting a query\n            object.\n\n            Regexp also has bash-style brace and glob expansion applied to it,\n\n            creating ways to search for modal times of day, perhaps using\n\n            something like this syntax: `T{15..17}:.*`, this would search for\n\n            all records from 3pm to 5pm.\n          required: true\n          schema:\n            type: string\n        - name: find\n          in: query\n          description: \u003e-\n            The query used to find entries, support nested query syntax, for\n            example `find[dateString][$gte]=2015-08-27`.  All find parameters\n            are interpreted as strings.\n          required: false\n          schema:\n            type: string\n        - name: count\n          in: query\n          description: Number of entries to return.\n          required: false\n          schema:\n            type: number\n      tags:\n        - Entries\n        - Debug\n      responses:\n        '200':\n          description: An array of entries\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MongoQuery'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/times/{prefix}/{regex}':\n    get:\n      summary: All Entries matching query\n      description: The Entries endpoint returns information about the Nightscout entries.\n      parameters:\n        - name: prefix\n          in: path\n          description: Prefix to use in constructing a prefix-based regex.\n          required: true\n          schema:\n            type: string\n        - name: regex\n          in: path\n          description: \u003e\n            Tail part of regexp to use in expanding/construccting a query\n            object.\n\n            Regexp also has bash-style brace and glob expansion applied to it,\n\n            creating ways to search for modal times of day, perhaps using\n\n            something like this syntax: `T{15..17}:.*`, this would search for\n\n            all records from 3pm to 5pm.\n          required: true\n          schema:\n            type: string\n        - name: find\n          in: query\n          description: \u003e-\n            The query used to find entries, support nested query syntax, for\n            example `find[dateString][$gte]=2015-08-27`.  All find parameters\n            are interpreted as strings.\n          required: false\n          schema:\n            type: string\n        - name: count\n          in: query\n          description: Number of entries to return.\n          required: false\n          schema:\n            type: number\n      tags:\n        - Entries\n      responses:\n        '200':\n          description: An array of entries\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Entries'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /entries:\n    get:\n      summary: All Entries matching query\n      description: The Entries endpoint returns information about the Nightscout entries.\n      parameters:\n        - name: find\n          in: query\n          description: \u003e-\n            The query used to find entries, support nested query syntax, for\n            example `find[dateString][$gte]=2015-08-27`.  All find parameters\n            are interpreted as strings.\n          required: false\n          schema:\n            type: string\n        - name: count\n          in: query\n          description: Number of entries to return.\n          required: false\n          schema:\n            type: number\n      tags:\n        - Entries\n      responses:\n        '200':\n          description: An array of entries\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Entries'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      tags:\n        - Entries\n      summary: Add new entries.\n      description: ''\n      operationId: addEntries\n      responses:\n        '200':\n          description: Rejected list of entries.  Empty list is success.\n        '405':\n          description: Invalid input\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Entries'\n          text/plain:\n            schema:\n              $ref: '#/components/schemas/Entries'\n        description: Entries to be uploaded.\n        required: true\n    delete:\n      tags:\n        - Entries\n      summary: Delete entries matching query.\n      description: 'Remove entries, same search syntax as GET.'\n      operationId: remove\n      parameters:\n        - name: find\n          in: query\n          description: \u003e-\n            The query used to find entries, support nested query syntax, for\n            example `find[dateString][$gte]=2015-08-27`.  All find parameters\n            are interpreted as strings.\n          required: false\n          schema:\n            type: string\n        - name: count\n          in: query\n          description: Number of entries to return.\n          required: false\n          schema:\n            type: number\n      responses:\n        '200':\n          description: Empty list is success.\n  /treatments:\n    get:\n      summary: Treatments\n      description: \u003e-\n        The Treatments endpoint returns information about the Nightscout\n        treatments.\n      tags:\n        - Treatments\n      parameters:\n        - name: find\n          in: query\n          description: \u003e-\n            The query used to find entries, supports nested query syntax. \n            Examples `find[insulin][$gte]=3` `find[carb][$gte]=100`\n            `find[eventType]=Correction+Bolus` All find parameters are\n            interpreted as strings.\n          required: false\n          schema:\n            type: string\n        - name: count\n          in: query\n          description: Number of entries to return.\n          required: false\n          schema:\n            type: number\n      responses:\n        '200':\n          description: An array of treatments\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Treatments'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      tags:\n        - Treatments\n      summary: Add new treatments.\n      description: ''\n      operationId: addTreatments\n      responses:\n        '200':\n          description: Rejected list of treatments.  Empty list is success.\n        '405':\n          description: Invalid input\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Treatments'\n        description: Treatments to be uploaded.\n        required: true\n    delete:\n      tags:\n        - Treatments\n      summary: Delete treatments matching query.\n      description: 'Remove treatments, same search syntax as GET.'\n      operationId: remove\n      parameters:\n        - name: find\n          in: query\n          description: \u003e-\n            The query used to find treatments to delete,\n            support nested query syntax, for example `find[insulin][$gte]=3`.\n            All find parameters are interpreted as strings.\n          required: false\n          schema:\n            type: string\n        - name: count\n          in: query\n          description: Number of entries to return.\n          required: false\n          schema:\n            type: number\n      responses:\n        '200':\n          description: Empty list is success.\n  '/treatments/{spec}':\n    delete:\n      summary: Delete treatments record with id provided in spec\n      description: |\n        The Treatments endpoint returns information about the\n        Nightscout devicestatus records.\n      parameters:\n        - name: spec\n          in: path\n          description: |\n            treatment id, such as `55cf81bc436037528ec75fa5`\n          required: true\n          schema:\n            type: string\n      tags:\n        - Treatments\n      responses:\n        '200':\n          description: A status record of the delete.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DeleteStatus'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /profile:\n    get:\n      summary: Profile\n      description: \u003e-\n        The Profile endpoint returns information about the Nightscout Treatment\n        Profiles.\n      tags:\n        - Profile\n      responses:\n        '200':\n          description: An array of treatments\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Profile'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /status:\n    get:\n      summary: Status\n      description: 'Server side status, default settings and capabilities.'\n      tags:\n        - Status\n      responses:\n        '200':\n          description: Server capabilities and status.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Status'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /devicestatus/:\n    get:\n      summary: All Devicestatuses matching query\n      description: \u003e-\n        The Devicestatus endpoint returns information about the Nightscout\n        devicestatus records.\n      parameters:\n        - name: find\n          in: query\n          description: \u003e-\n            The query used to find entries, support nested query syntax, for\n            example `find[dateString][$gte]=2015-08-27`.  All find parameters\n            are interpreted as strings.\n          required: false\n          schema:\n            type: string\n        - name: count\n          in: query\n          description: Number of devicestatus records to return.\n          required: false\n          schema:\n            type: number\n      tags:\n        - Devicestatus\n      responses:\n        '200':\n          description: An array of devicestatus entries\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Devicestatuses'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      tags:\n        - Devicestatus\n      summary: Add new devicestatus records.\n      description: ''\n      operationId: addDevicestatuses\n      responses:\n        '200':\n          description: Rejected list of device statuses.  Empty list is success.\n        '405':\n          description: Invalid input\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Devicestatuses'\n        description: Device statuses to be uploaded.\n        required: true\n    delete:\n      summary: Delete all Devicestatus records matching query\n      description: |\n        The Devicestatus endpoint returns information about the\n        Nightscout devicestatus records.\n      parameters:\n        - name: find\n          in: query\n          description: |\n            The query used to find entries, support nested query syntax, for\n            example `find[created_at][$gte]=2015-08-27`.  All find parameters\n            are interpreted as strings.\n          required: false\n          schema:\n            type: string\n      tags:\n        - Devicestatus\n      responses:\n        '200':\n          description: A status record of the delete.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DeleteStatus'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/devicestatus/{spec}':\n    delete:\n      summary: Delete devicestatus record with id provided in spec\n      description: |\n        The Devicestatus endpoint returns information about the\n        Nightscout devicestatus records.\n      parameters:\n        - name: spec\n          in: path\n          description: |\n            entry id, such as `55cf81bc436037528ec75fa5`\n          required: true\n          schema:\n            type: string\n      tags:\n        - Devicestatus\n      responses:\n        '200':\n          description: A status record of the delete.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DeleteStatus'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\ncomponents:\n  securitySchemes:\n    api_secret:\n      type: apiKey\n      name: api-secret\n      in: header\n      description: The hash of the API_SECRET env var\n    token_in_url:\n      type: apiKey\n      name: token\n      in: query\n      description: \u003e-\n        Add token as query item in the URL. You can manage access Token in\n        `/admin`. This uses json webtokens.\n    jwtoken:\n      type: http\n      scheme: bearer\n      description: Use this if you know the temporary json webtoken.\n      bearerFormat: JWT\n  schemas:\n    Entry:\n      properties:\n        type:\n          type: string\n          description: 'sgv, mbg, cal, etc'\n        dateString:\n          type: string\n          description: 'dateString, MUST be ISO `8601` format date parseable by Javascript Date()'\n        date:\n          type: number\n          description: Epoch\n        sgv:\n          type: number\n          description: The glucose reading. (only available for sgv types)\n        direction:\n          type: string\n          description: \u003e-\n            Direction of glucose trend reported by CGM. (only available for sgv\n            types)\n        noise:\n          type: number\n          description: Noise level at time of reading. (only available for sgv types)\n        filtered:\n          type: number\n          description: \u003e-\n            The raw filtered value directly from CGM transmitter. (only\n            available for sgv types)\n        unfiltered:\n          type: number\n          description: \u003e-\n            The raw unfiltered value directly from CGM transmitter. (only\n            available for sgv types)\n        rssi:\n          type: number\n          description: \u003e-\n            The signal strength from CGM transmitter. (only available for sgv\n            types)\n    Entries:\n      type: array\n      items:\n        $ref: '#/components/schemas/Entry'\n    Devicestatus:\n      required:\n        - device\n        - created_at\n      properties:\n        device:\n          type: string\n          description: 'Device type and hostname for example openaps://hostname'\n        created_at:\n          type: string\n          description: 'dateString, MUST be ISO `8601` format date parseable by Javascript Date()'\n        openaps:\n          type: string\n          description: 'OpenAPS devicestatus record - TODO: Fill Out Details'\n        loop:\n          type: string\n          description: 'Loop devicestatus record - TODO: Fill Out Details'\n        pump:\n          $ref: '#/components/schemas/pump'\n        uploader:\n          $ref: '#/components/schemas/uploader'\n        xdripjs:\n          $ref: '#/components/schemas/xdripjs'\n    Devicestatuses:\n      type: array\n      items:\n        $ref: '#/components/schemas/Devicestatus'\n    pump:\n      properties:\n        clock:\n          type: string\n          description: 'dateString, MUST be ISO `8601` format date parseable by Javascript Date()'\n        battery:\n          $ref: '#/components/schemas/pumpbattery'\n        reservoir:\n          type: number\n          description: Amount of insulin remaining in pump reservoir\n        status:\n          $ref: '#/components/schemas/pumpstatus'\n    pumpbattery:\n      properties:\n        status:\n          type: string\n          description: Pump Battery Status String\n        voltage:\n          type: number\n          description: Pump Battery Voltage Level\n    pumpstatus:\n      properties:\n        status:\n          type: string\n          description: Pump Status String\n        bolusing:\n          type: boolean\n          description: Is Pump Bolusing\n        suspended:\n          type: boolean\n          description: Is Pump Suspended\n        timestamp:\n          type: string\n          description: 'dateString, MUST be ISO `8601` format date parseable by Javascript Date()'\n    uploader:\n      properties:\n        batteryVoltage:\n          type: number\n          description: Uploader Device Battery Voltage\n        battery:\n          type: number\n          description: Uploader Device Battery Percentage Charge Remaining\n    xdripjs:\n      properties:\n        state:\n          type: number\n          description: CGM Sensor Session State Code\n        stateString:\n          type: string\n          description: CGM Sensor Session State String\n        stateStringShort:\n          type: string\n          description: CGM Sensor Session State Short String\n        txId:\n          type: string\n          description: CGM Transmitter ID\n        txStatus:\n          type: number\n          description: CGM Transmitter Status\n        txStatusString:\n          type: string\n          description: CGM Transmitter Status String\n        txStatusStringShort:\n          type: string\n          description: CGM Transmitter Status Short String\n        txActivation:\n          type: number\n          description: CGM Transmitter Activation Milliseconds After Epoch\n        mode:\n          type: string\n          description: 'Mode xdrip-js Application Operationg: expired, not expired, etc.'\n        timestamp:\n          type: number\n          description: Last Update Milliseconds After Epoch\n        rssi:\n          type: number\n          description: Receive Signal Strength of Transmitter\n        unfiltered:\n          type: number\n          description: Most Recent Raw Unfiltered Glucose\n        filtered:\n          type: number\n          description: Most Recent Raw Filtered Glucose\n        noise:\n          type: number\n          description: 'Calculated Noise Value - 1=Clean, 2=Light, 3=Medium, 4=Heavy'\n        noiseString:\n          type: number\n          description: Noise Value String\n        slope:\n          type: number\n          description: Calibration Slope Value\n        intercept:\n          type: number\n          description: Calibration Intercept Value\n        calType:\n          type: string\n          description: Algorithm Used to Calculate Calibration Values\n        lastCalibrationDate:\n          type: number\n          description: Most Recent Calibration Milliseconds After Epoch\n        sessionStart:\n          type: number\n          description: Sensor Session Start Milliseconds After Epoch\n        batteryTimestamp:\n          type: number\n          description: Most Recent Batter Status Read Milliseconds After Epoch\n        voltagea:\n          type: number\n          description: Voltage of Battery A\n        voltageb:\n          type: number\n          description: Voltage of Battery B\n        temperature:\n          type: number\n          description: Transmitter Temperature\n        resistance:\n          type: number\n          description: Sensor Resistance\n    Treatment:\n      properties:\n        _id:\n          type: string\n          description: Internally assigned id.\n        eventType:\n          type: string\n          description: The type of treatment event.\n        created_at:\n          type: string\n          description: 'The date of the event, might be set retroactively .'\n        glucose:\n          type: string\n          description: Current glucose.\n        glucoseType:\n          type: string\n          description: 'Method used to obtain glucose, Finger or Sensor.'\n        carbs:\n          type: number\n          description: Amount of carbs consumed in grams.\n        protein:\n          type: number\n          description: Amount of protein consumed in grams.\n        fat:\n          type: number\n          description: Amount of fat consumed in grams.\n        insulin:\n          type: number\n          description: 'Amount of insulin, if any.'\n        units:\n          type: string\n          description: 'The units for the glucose value, mg/dl or mmol.'\n        transmitterId:\n          type: string\n          description: 'The transmitter ID of the transmitter being started.'\n        sensorCode:\n          type: string\n          description: 'The code used to start a Dexcom G6 sensor.'\n        notes:\n          type: string\n          description: Description/notes of treatment.\n        enteredBy:\n          type: string\n          description: Who entered the treatment.\n    Treatments:\n      type: array\n      items:\n        $ref: '#/components/schemas/Treatment'\n    Profile:\n      properties:\n        sens:\n          type: integer\n          description: Internally assigned id\n        dia:\n          type: integer\n          description: Internally assigned id\n        carbratio:\n          type: integer\n          description: Internally assigned id\n        carbs_hr:\n          type: integer\n          description: Internally assigned id\n        _id:\n          type: string\n          description: Internally assigned id\n    Status:\n      properties:\n        apiEnabled:\n          type: boolean\n          description: Whether or not the REST API is enabled.\n        careportalEnabled:\n          type: boolean\n          description: Whether or not the careportal is enabled in the API.\n        head:\n          type: string\n          description: The git identifier for the running instance of the app.\n        name:\n          type: string\n          description: Nightscout (static)\n        version:\n          type: string\n          description: The version label of the app.\n        settings:\n          $ref: '#/components/schemas/Settings'\n        extendedSettings:\n          $ref: '#/components/schemas/ExtendedSettings'\n    Settings:\n      properties:\n        units:\n          type: string\n          description: Default units for glucose measurements across the server.\n        timeFormat:\n          type: string\n          description: Default time format\n          enum:\n            - 12\n            - 24\n        customTitle:\n          type: string\n          description: Default custom title to be displayed system wide.\n        nightMode:\n          type: boolean\n          description: Should Night mode be enabled by default?\n        theme:\n          type: string\n          description: \u003e-\n            Default theme to be displayed system wide, `default`, `colors`,\n            `colorblindfriendly`.\n        language:\n          type: string\n          description: Default language code to be used system wide\n        showPlugins:\n          type: string\n          description: Plugins that should be shown by default\n        showRawbg:\n          type: string\n          description: \u003e-\n            If Raw BG is enabled when should it be shown? `never`, `always`,\n            `noise`\n        alarmTypes:\n          type: array\n          items:\n            type: string\n          enum:\n            - simple\n            - predict\n          description: 'Enabled alarm types, can be multiple'\n        alarmUrgentHigh:\n          type: boolean\n          description: \u003e-\n            Enable/Disable client-side Urgent High alarms by default, for use\n            with `simple` alarms.\n        alarmHigh:\n          type: boolean\n          description: \u003e-\n            Enable/Disable client-side High alarms by default, for use with\n            `simple` alarms.\n        alarmLow:\n          type: boolean\n          description: \u003e-\n            Enable/Disable client-side Low alarms by default, for use with\n            `simple` alarms.\n        alarmUrgentLow:\n          type: boolean\n          description: \u003e-\n            Enable/Disable client-side Urgent Low alarms by default, for use\n            with `simple` alarms.\n        alarmTimeagoWarn:\n          type: boolean\n          description: Enable/Disable client-side stale data alarms by default.\n        alarmTimeagoWarnMins:\n          type: number\n          description: Number of minutes before a stale data warning is generated.\n        alarmTimeagoUrgent:\n          type: boolean\n          description: Enable/Disable client-side urgent stale data alarms by default.\n        alarmTimeagoUrgentMins:\n          type: number\n          description: Number of minutes before a stale data warning is generated.\n        enable:\n          type: array\n          items:\n            type: string\n          description: Enabled features\n        thresholds:\n          $ref: '#/components/schemas/Threshold'\n    Threshold:\n      properties:\n        bg_high:\n          type: integer\n          description: High BG range.\n        bg_target_top:\n          type: integer\n          description: Top of target range.\n        bg_target_bottom:\n          type: integer\n          description: Bottom of target range.\n        bg_low:\n          type: integer\n          description: Low BG range.\n    ExtendedSettings:\n      description: Extended settings of client side plugins\n    MongoQuery:\n      description: Mongo Query object.\n    Error:\n      properties:\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string\n        fields:\n          type: object\n    DeleteStatus:\n      properties:\n        'n':\n          type: integer\n          format: int32\n          description: Number of records deleted\n        optime:\n          $ref: '#/components/schemas/optime'\n        electionId:\n          type: string\n          description: Election id of operation\n        ok:\n          type: integer\n          format: int32\n          description: Status of whether delete was successful\n        operationTime:\n          type: string\n          description: Time delete operation was executed\n        $clusterTime:\n          type: string\n          description: Information about execution time in cluster environment\n    optime:\n      properties:\n        ts:\n          type: string\n          description: Time the operation started\n        t:\n          type: integer\n          format: int32\n          description: Time the operation took to complete\n",
			"canonicalURL": "/github.com/nightscout/cgm-remote-monitor@4750f13f9ed71a72f26fb0726f155ed78bf3566b/-/blob/lib/server/swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/nightscout/cgm-remote-monitor/blob/4750f13f9ed71a72f26fb0726f155ed78bf3566b/lib/server/swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"Status\": parse schema: property \"settings\": parse schema: resolve \"#/components/schemas/Settings\": parse schema: property \"alarmTypes\": parse enum values: parse value \"\\\"simple\\\"\": expected type \"array\", got \"string\""
}