{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/sasjs/server"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "api/public/swagger.yaml",
			"byteSize": 49703,
			"content": "components:\n    examples: {}\n    headers: {}\n    parameters: {}\n    requestBodies: {}\n    responses: {}\n    schemas:\n        TokenResponse:\n            properties:\n                accessToken:\n                    type: string\n                    description: 'Access Token'\n                    example: someRandomCryptoString\n                refreshToken:\n                    type: string\n                    description: 'Refresh Token'\n                    example: someRandomCryptoString\n            required:\n                - accessToken\n                - refreshToken\n            type: object\n            additionalProperties: false\n        TokenPayload:\n            properties:\n                clientId:\n                    type: string\n                    description: 'Client ID'\n                    example: clientID1\n                code:\n                    type: string\n                    description: 'Authorization code'\n                    example: someRandomCryptoString\n            required:\n                - clientId\n                - code\n            type: object\n            additionalProperties: false\n        InfoJWT:\n            properties:\n                clientId:\n                    type: string\n                userId:\n                    type: number\n                    format: double\n            required:\n                - clientId\n                - userId\n            type: object\n            additionalProperties: false\n        LoginPayload:\n            properties:\n                username:\n                    type: string\n                    description: 'Username for user'\n                    example: secretuser\n                password:\n                    type: string\n                    description: 'Password for user'\n                    example: secretpassword\n            required:\n                - username\n                - password\n            type: object\n            additionalProperties: false\n        AuthorizeResponse:\n            properties:\n                code:\n                    type: string\n                    description: 'Authorization code'\n                    example: someRandomCryptoString\n            required:\n                - code\n            type: object\n            additionalProperties: false\n        AuthorizePayload:\n            properties:\n                clientId:\n                    type: string\n                    description: 'Client ID'\n                    example: clientID1\n            required:\n                - clientId\n            type: object\n            additionalProperties: false\n        ClientPayload:\n            properties:\n                clientId:\n                    type: string\n                    description: 'Client ID'\n                    example: someFormattedClientID1234\n                clientSecret:\n                    type: string\n                    description: 'Client Secret'\n                    example: someRandomCryptoString\n            required:\n                - clientId\n                - clientSecret\n            type: object\n            additionalProperties: false\n        IRecordOfAny:\n            properties: {}\n            type: object\n            additionalProperties: {}\n        LogLine:\n            properties:\n                line:\n                    type: string\n            required:\n                - line\n            type: object\n            additionalProperties: false\n        HTTPHeaders:\n            properties: {}\n            type: object\n            additionalProperties:\n                type: string\n        ExecuteReturnJsonResponse:\n            properties:\n                status:\n                    type: string\n                _webout:\n                    anyOf:\n                        -\n                            type: string\n                        -\n                            $ref: '#/components/schemas/IRecordOfAny'\n                log:\n                    items:\n                        $ref: '#/components/schemas/LogLine'\n                    type: array\n                message:\n                    type: string\n                httpHeaders:\n                    $ref: '#/components/schemas/HTTPHeaders'\n            required:\n                - status\n                - _webout\n                - log\n                - httpHeaders\n            type: object\n            additionalProperties: false\n        ExecuteSASCodePayload:\n            properties:\n                code:\n                    type: string\n                    description: 'Code of SAS program'\n                    example: '* SAS Code HERE;'\n            required:\n                - code\n            type: object\n            additionalProperties: false\n        MemberType.folder:\n            enum:\n                - folder\n            type: string\n        FolderMember:\n            properties:\n                name:\n                    type: string\n                type:\n                    $ref: '#/components/schemas/MemberType.folder'\n                members:\n                    items:\n                        anyOf:\n                            -\n                                $ref: '#/components/schemas/FolderMember'\n                            -\n                                $ref: '#/components/schemas/ServiceMember'\n                            -\n                                $ref: '#/components/schemas/FileMember'\n                    type: array\n            required:\n                - name\n                - type\n                - members\n            type: object\n            additionalProperties: false\n        MemberType.service:\n            enum:\n                - service\n            type: string\n        ServiceMember:\n            properties:\n                name:\n                    type: string\n                type:\n                    $ref: '#/components/schemas/MemberType.service'\n                code:\n                    type: string\n            required:\n                - name\n                - type\n                - code\n            type: object\n            additionalProperties: false\n        MemberType.file:\n            enum:\n                - file\n            type: string\n        FileMember:\n            properties:\n                name:\n                    type: string\n                type:\n                    $ref: '#/components/schemas/MemberType.file'\n                code:\n                    type: string\n            required:\n                - name\n                - type\n                - code\n            type: object\n            additionalProperties: false\n        FileTree:\n            properties:\n                members:\n                    items:\n                        anyOf:\n                            -\n                                $ref: '#/components/schemas/FolderMember'\n                            -\n                                $ref: '#/components/schemas/ServiceMember'\n                            -\n                                $ref: '#/components/schemas/FileMember'\n                    type: array\n            required:\n                - members\n            type: object\n            additionalProperties: false\n        DeployResponse:\n            properties:\n                status:\n                    type: string\n                message:\n                    type: string\n                streamServiceName:\n                    type: string\n                example:\n                    $ref: '#/components/schemas/FileTree'\n            required:\n                - status\n                - message\n            type: object\n            additionalProperties: false\n        DeployPayload:\n            properties:\n                appLoc:\n                    type: string\n                streamWebFolder:\n                    type: string\n                fileTree:\n                    $ref: '#/components/schemas/FileTree'\n            required:\n                - appLoc\n                - fileTree\n            type: object\n            additionalProperties: false\n        UpdateFileResponse:\n            properties:\n                status:\n                    type: string\n                message:\n                    type: string\n            required:\n                - status\n            type: object\n            additionalProperties: false\n        TreeNode:\n            properties:\n                name:\n                    type: string\n                relativePath:\n                    type: string\n                absolutePath:\n                    type: string\n                children:\n                    items:\n                        $ref: '#/components/schemas/TreeNode'\n                    type: array\n            required:\n                - name\n                - relativePath\n                - absolutePath\n                - children\n            type: object\n            additionalProperties: false\n        GetFileTreeResponse:\n            properties:\n                status:\n                    type: string\n                tree:\n                    $ref: '#/components/schemas/TreeNode'\n            required:\n                - status\n                - tree\n            type: object\n            additionalProperties: false\n        UserResponse:\n            properties:\n                id:\n                    type: number\n                    format: double\n                username:\n                    type: string\n                displayName:\n                    type: string\n            required:\n                - id\n                - username\n                - displayName\n            type: object\n            additionalProperties: false\n        UserDetailsResponse:\n            properties:\n                id:\n                    type: number\n                    format: double\n                displayName:\n                    type: string\n                username:\n                    type: string\n                isActive:\n                    type: boolean\n                isAdmin:\n                    type: boolean\n            required:\n                - id\n                - displayName\n                - username\n                - isActive\n                - isAdmin\n            type: object\n            additionalProperties: false\n        UserPayload:\n            properties:\n                displayName:\n                    type: string\n                    description: 'Display name for user'\n                    example: 'John Snow'\n                username:\n                    type: string\n                    description: 'Username for user'\n                    example: johnSnow01\n                password:\n                    type: string\n                    description: 'Password for user'\n                isAdmin:\n                    type: boolean\n                    description: 'Account should be admin or not, defaults to false'\n                    example: 'false'\n                isActive:\n                    type: boolean\n                    description: 'Account should be active or not, defaults to true'\n                    example: 'true'\n            required:\n                - displayName\n                - username\n                - password\n            type: object\n            additionalProperties: false\n        GroupResponse:\n            properties:\n                groupId:\n                    type: number\n                    format: double\n                name:\n                    type: string\n                description:\n                    type: string\n            required:\n                - groupId\n                - name\n                - description\n            type: object\n            additionalProperties: false\n        GroupDetailsResponse:\n            properties:\n                groupId:\n                    type: number\n                    format: double\n                name:\n                    type: string\n                description:\n                    type: string\n                isActive:\n                    type: boolean\n                users:\n                    items:\n                        $ref: '#/components/schemas/UserResponse'\n                    type: array\n            required:\n                - groupId\n                - name\n                - description\n                - isActive\n                - users\n            type: object\n            additionalProperties: false\n        GroupPayload:\n            properties:\n                name:\n                    type: string\n                    description: 'Name of the group'\n                    example: DCGroup\n                description:\n                    type: string\n                    description: 'Description of the group'\n                    example: 'This group represents Data Controller Users'\n                isActive:\n                    type: boolean\n                    description: 'Group should be active or not, defaults to true'\n                    example: 'true'\n            required:\n                - name\n                - description\n            type: object\n            additionalProperties: false\n        InfoResponse:\n            properties:\n                mode:\n                    type: string\n                cors:\n                    type: string\n                whiteList:\n                    items:\n                        type: string\n                    type: array\n                protocol:\n                    type: string\n            required:\n                - mode\n                - cors\n                - whiteList\n                - protocol\n            type: object\n            additionalProperties: false\n        ExecuteReturnJsonPayload:\n            properties:\n                _program:\n                    type: string\n                    description: 'Location of SAS program'\n                    example: /Public/somefolder/some.file\n            type: object\n            additionalProperties: false\n    securitySchemes:\n        bearerAuth:\n            type: http\n            scheme: bearer\n            bearerFormat: JWT\ninfo:\n    title: api\n    version: 0.0.2\n    description: 'Api of SASjs server'\n    contact:\n        name: '4GL Ltd'\nopenapi: 3.0.0\npaths:\n    /SASjsApi/auth/token:\n        post:\n            operationId: Token\n            responses:\n                '200':\n                    description: Ok\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/TokenResponse'\n                            examples:\n                                'Example 1':\n                                    value: {accessToken: someRandomCryptoString, refreshToken: someRandomCryptoString}\n            summary: 'Accepts client/auth code and returns access/refresh tokens'\n            tags:\n                - Auth\n            security: []\n            parameters: []\n            requestBody:\n                required: true\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/TokenPayload'\n    /SASjsApi/auth/refresh:\n        post:\n            operationId: Refresh\n            responses:\n                '200':\n                    description: Ok\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/TokenResponse'\n                            examples:\n                                'Example 1':\n                                    value: {accessToken: someRandomCryptoString, refreshToken: someRandomCryptoString}\n            summary: 'Returns new access/refresh tokens'\n            tags:\n                - Auth\n            security:\n                -\n                    bearerAuth: []\n            parameters: []\n    /SASjsApi/auth/logout:\n        post:\n            operationId: Logout\n            responses:\n                '204':\n                    description: 'No content'\n            summary: 'Logout terminate access/refresh tokens and returns nothing'\n            tags:\n                - Auth\n            security:\n                -\n                    bearerAuth: []\n            parameters: []\n    /:\n        get:\n            operationId: Home\n            responses:\n                '200':\n                    description: Ok\n                    content:\n                        application/json:\n                            schema:\n                                type: string\n            summary: 'Render index.html'\n            tags:\n                - Web\n            security: []\n            parameters: []\n    /SASLogon/login:\n        post:\n            operationId: Login\n            responses:\n                '200':\n                    description: Ok\n                    content:\n                        application/json:\n                            schema:\n                                properties:\n                                    user: {properties: {displayName: {type: string}, username: {type: string}}, required: [displayName, username], type: object}\n                                    loggedIn: {type: boolean}\n                                required:\n                                    - user\n                                    - loggedIn\n                                type: object\n            summary: 'Accept a valid username/password'\n            tags:\n                - Web\n            security: []\n            parameters: []\n            requestBody:\n                required: true\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/LoginPayload'\n    /SASLogon/authorize:\n        post:\n            operationId: Authorize\n            responses:\n                '200':\n                    description: Ok\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/AuthorizeResponse'\n                            examples:\n                                'Example 1':\n                                    value: {code: someRandomCryptoString}\n            summary: 'Accept a valid username/password, plus a CLIENT_ID, and return an AUTH_CODE'\n            tags:\n                - Web\n            security: []\n            parameters: []\n            requestBody:\n                required: true\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/AuthorizePayload'\n    /logout:\n        get:\n            operationId: Logout\n            responses:\n                '200':\n                    description: Ok\n                    content:\n                        application/json:\n                            schema: {}\n            summary: 'Accept a valid username/password'\n            tags:\n                - Web\n            security: []\n            parameters: []\n    /SASjsApi/client:\n        post:\n            operationId: CreateClient\n            responses:\n                '200':\n                    description: Ok\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ClientPayload'\n                            examples:\n                                'Example 1':\n                                    value: {clientId: someFormattedClientID1234, clientSecret: someRandomCryptoString}\n            summary: 'Create client with the following attributes: ClientId, ClientSecret. Admin only task.'\n            tags:\n                - Client\n            security:\n                -\n                    bearerAuth: []\n            parameters: []\n            requestBody:\n                required: true\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/ClientPayload'\n    /SASjsApi/code/execute:\n        post:\n            operationId: ExecuteSASCode\n            responses:\n                '200':\n                    description: Ok\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ExecuteReturnJsonResponse'\n            description: 'Execute SAS code.'\n            summary: 'Run SAS Code and returns log'\n            tags:\n                - CODE\n            security:\n                -\n                    bearerAuth: []\n            parameters: []\n            requestBody:\n                required: true\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/ExecuteSASCodePayload'\n    /SASjsApi/drive/deploy:\n        post:\n            operationId: Deploy\n            responses:\n                '200':\n                    description: Ok\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/DeployResponse'\n                            examples:\n                                'Example 1':\n                                    value: {status: success, message: 'Files deployed successfully to @sasjs/server.'}\n                '400':\n                    description: 'Invalid Format'\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/DeployResponse'\n                            examples:\n                                'Example 1':\n                                    value: {status: failure, message: 'Provided not supported data format.'}\n                '500':\n                    description: 'Execution Error'\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/DeployResponse'\n                            examples:\n                                'Example 1':\n                                    value: {status: failure, message: 'Deployment failed!'}\n            summary: 'Creates/updates files within SASjs Drive using provided payload.'\n            tags:\n                - Drive\n            security:\n                -\n                    bearerAuth: []\n            parameters: []\n            requestBody:\n                required: true\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/DeployPayload'\n    /SASjsApi/drive/deploy/upload:\n        post:\n            operationId: DeployUpload\n            responses:\n                '200':\n                    description: Ok\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/DeployResponse'\n                            examples:\n                                'Example 1':\n                                    value: {status: success, message: 'Files deployed successfully to @sasjs/server.'}\n                '400':\n                    description: 'Invalid Format'\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/DeployResponse'\n                            examples:\n                                'Example 1':\n                                    value: {status: failure, message: 'Provided not supported data format.'}\n                '500':\n                    description: 'Execution Error'\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/DeployResponse'\n                            examples:\n                                'Example 1':\n                                    value: {status: failure, message: 'Deployment failed!'}\n            summary: 'Creates/updates files within SASjs Drive using uploaded JSON file.'\n            tags:\n                - Drive\n            security:\n                -\n                    bearerAuth: []\n            parameters: []\n            requestBody:\n                required: true\n                content:\n                    multipart/form-data:\n                        schema:\n                            type: object\n                            properties:\n                                file:\n                                    type: string\n                                    format: binary\n                            required:\n                                - file\n    /SASjsApi/drive/file:\n        get:\n            operationId: GetFile\n            responses:\n                '204':\n                    description: 'No content'\n            summary: 'Get file from SASjs Drive'\n            tags:\n                - Drive\n            security:\n                -\n                    bearerAuth: []\n            parameters:\n                -\n                    in: query\n                    name: _filePath\n                    required: true\n                    schema:\n                        type: string\n                    example: /Public/somefolder/some.file\n        delete:\n            operationId: DeleteFile\n            responses:\n                '200':\n                    description: Ok\n                    content:\n                        application/json:\n                            schema:\n                                properties:\n                                    status: {type: string}\n                                required:\n                                    - status\n                                type: object\n            summary: 'Delete file from SASjs Drive'\n            tags:\n                - Drive\n            security:\n                -\n                    bearerAuth: []\n            parameters:\n                -\n                    in: query\n                    name: _filePath\n                    required: true\n                    schema:\n                        type: string\n                    example: /Public/somefolder/some.file\n        post:\n            operationId: SaveFile\n            responses:\n                '200':\n                    description: Ok\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/UpdateFileResponse'\n                            examples:\n                                'Example 1':\n                                    value: {status: success}\n                '403':\n                    description: 'File already exists'\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/UpdateFileResponse'\n                            examples:\n                                'Example 1':\n                                    value: {status: failure, message: 'File request failed.'}\n            description: \"It's optional to either provide `_filePath` in url as query parameter\\nOr provide `filePath` in body as form field.\\nBut it's required to provide else API will respond with Bad Request.\"\n            summary: 'Create a file in SASjs Drive'\n            tags:\n                - Drive\n            security:\n                -\n                    bearerAuth: []\n            parameters:\n                -\n                    description: 'Location of SAS program'\n                    in: query\n                    name: _filePath\n                    required: false\n                    schema:\n                        type: string\n                    example: /Public/somefolder/some.file.sas\n            requestBody:\n                required: true\n                content:\n                    multipart/form-data:\n                        schema:\n                            type: object\n                            properties:\n                                file:\n                                    type: string\n                                    format: binary\n                                filePath:\n                                    type: string\n                            required:\n                                - file\n        patch:\n            operationId: UpdateFile\n            responses:\n                '200':\n                    description: Ok\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/UpdateFileResponse'\n                            examples:\n                                'Example 1':\n                                    value: {status: success}\n                '403':\n                    description: \"\"\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/UpdateFileResponse'\n                            examples:\n                                'Example 1':\n                                    value: {status: failure, message: 'File request failed.'}\n            description: \"It's optional to either provide `_filePath` in url as query parameter\\nOr provide `filePath` in body as form field.\\nBut it's required to provide else API will respond with Bad Request.\"\n            summary: 'Modify a file in SASjs Drive'\n            tags:\n                - Drive\n            security:\n                -\n                    bearerAuth: []\n            parameters:\n                -\n                    description: 'Location of SAS program'\n                    in: query\n                    name: _filePath\n                    required: false\n                    schema:\n                        type: string\n                    example: /Public/somefolder/some.file.sas\n            requestBody:\n                required: true\n                content:\n                    multipart/form-data:\n                        schema:\n                            type: object\n                            properties:\n                                file:\n                                    type: string\n                                    format: binary\n                                filePath:\n                                    type: string\n                            required:\n                                - file\n    /SASjsApi/drive/folder:\n        get:\n            operationId: GetFolder\n            responses:\n                '200':\n                    description: Ok\n                    content:\n                        application/json:\n                            schema:\n                                properties:\n                                    folders: {items: {type: string}, type: array}\n                                    files: {items: {type: string}, type: array}\n                                required:\n                                    - folders\n                                    - files\n                                type: object\n            summary: 'Get folder contents from SASjs Drive'\n            tags:\n                - Drive\n            security:\n                -\n                    bearerAuth: []\n            parameters:\n                -\n                    in: query\n                    name: _folderPath\n                    required: false\n                    schema:\n                        type: string\n                    example: /Public/somefolder\n    /SASjsApi/drive/filetree:\n        get:\n            operationId: GetFileTree\n            responses:\n                '200':\n                    description: Ok\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/GetFileTreeResponse'\n            summary: 'Fetch file tree within SASjs Drive.'\n            tags:\n                - Drive\n            security:\n                -\n                    bearerAuth: []\n            parameters: []\n    /SASjsApi/user:\n        get:\n            operationId: GetAllUsers\n            responses:\n                '200':\n                    description: Ok\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: '#/components/schemas/UserResponse'\n                                type: array\n                            examples:\n                                'Example 1':\n                                    value: [{id: 123, username: johnusername, displayName: John}, {id: 456, username: starkusername, displayName: Stark}]\n            summary: 'Get list of all users (username, displayname). All users can request this.'\n            tags:\n                - User\n            security:\n                -\n                    bearerAuth: []\n            parameters: []\n        post:\n            operationId: CreateUser\n            responses:\n                '200':\n                    description: Ok\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/UserDetailsResponse'\n                            examples:\n                                'Example 1':\n                                    value: {id: 1234, displayName: 'John Snow', username: johnSnow01, isAdmin: false, isActive: true}\n            summary: 'Create user with the following attributes: UserId, UserName, Password, isAdmin, isActive. Admin only task.'\n            tags:\n                - User\n            security:\n                -\n                    bearerAuth: []\n            parameters: []\n            requestBody:\n                required: true\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/UserPayload'\n    '/SASjsApi/user/{userId}':\n        get:\n            operationId: GetUser\n            responses:\n                '200':\n                    description: Ok\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/UserDetailsResponse'\n            summary: 'Get user properties - such as group memberships, userName, displayName.'\n            tags:\n                - User\n            security:\n                -\n                    bearerAuth: []\n            parameters:\n                -\n                    description: 'The user''s identifier'\n                    in: path\n                    name: userId\n                    required: true\n                    schema:\n                        format: double\n                        type: number\n                    example: 1234\n        patch:\n            operationId: UpdateUser\n            responses:\n                '200':\n                    description: Ok\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/UserDetailsResponse'\n                            examples:\n                                'Example 1':\n                                    value: {id: 1234, displayName: 'John Snow', username: johnSnow01, isAdmin: false, isActive: true}\n            summary: 'Update user properties - such as displayName. Can be performed either by admins, or the user in question.'\n            tags:\n                - User\n            security:\n                -\n                    bearerAuth: []\n            parameters:\n                -\n                    description: 'The user''s identifier'\n                    in: path\n                    name: userId\n                    required: true\n                    schema:\n                        format: double\n                        type: number\n                    example: '1234'\n            requestBody:\n                required: true\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/UserPayload'\n        delete:\n            operationId: DeleteUser\n            responses:\n                '204':\n                    description: 'No content'\n            summary: 'Delete a user. Can be performed either by admins, or the user in question.'\n            tags:\n                - User\n            security:\n                -\n                    bearerAuth: []\n            parameters:\n                -\n                    description: 'The user''s identifier'\n                    in: path\n                    name: userId\n                    required: true\n                    schema:\n                        format: double\n                        type: number\n                    example: 1234\n            requestBody:\n                required: true\n                content:\n                    application/json:\n                        schema:\n                            properties:\n                                password:\n                                    type: string\n                            type: object\n    /SASjsApi/group:\n        get:\n            operationId: GetAllGroups\n            responses:\n                '200':\n                    description: Ok\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: '#/components/schemas/GroupResponse'\n                                type: array\n                            examples:\n                                'Example 1':\n                                    value: [{groupId: 123, name: DCGroup, description: 'This group represents Data Controller Users'}]\n            summary: 'Get list of all groups (groupName and groupDescription). All users can request this.'\n            tags:\n                - Group\n            security:\n                -\n                    bearerAuth: []\n            parameters: []\n        post:\n            operationId: CreateGroup\n            responses:\n                '200':\n                    description: Ok\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/GroupDetailsResponse'\n                            examples:\n                                'Example 1':\n                                    value: {groupId: 123, name: DCGroup, description: 'This group represents Data Controller Users', isActive: true, users: []}\n            summary: 'Create a new group. Admin only.'\n            tags:\n                - Group\n            security:\n                -\n                    bearerAuth: []\n            parameters: []\n            requestBody:\n                required: true\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/GroupPayload'\n    '/SASjsApi/group/{groupId}':\n        get:\n            operationId: GetGroup\n            responses:\n                '200':\n                    description: Ok\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/GroupDetailsResponse'\n            summary: 'Get list of members of a group (userName). All users can request this.'\n            tags:\n                - Group\n            security:\n                -\n                    bearerAuth: []\n            parameters:\n                -\n                    description: 'The group''s identifier'\n                    in: path\n                    name: groupId\n                    required: true\n                    schema:\n                        format: double\n                        type: number\n                    example: 1234\n        delete:\n            operationId: DeleteGroup\n            responses:\n                '204':\n                    description: 'No content'\n            summary: 'Delete a group. Admin task only.'\n            tags:\n                - Group\n            security:\n                -\n                    bearerAuth: []\n            parameters:\n                -\n                    description: 'The group''s identifier'\n                    in: path\n                    name: groupId\n                    required: true\n                    schema:\n                        format: double\n                        type: number\n                    example: 1234\n    '/SASjsApi/group/{groupId}/{userId}':\n        post:\n            operationId: AddUserToGroup\n            responses:\n                '200':\n                    description: Ok\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/GroupDetailsResponse'\n                            examples:\n                                'Example 1':\n                                    value: {groupId: 123, name: DCGroup, description: 'This group represents Data Controller Users', isActive: true, users: []}\n            summary: 'Add a user to a group. Admin task only.'\n            tags:\n                - Group\n            security:\n                -\n                    bearerAuth: []\n            parameters:\n                -\n                    description: 'The group''s identifier'\n                    in: path\n                    name: groupId\n                    required: true\n                    schema:\n                        format: double\n                        type: number\n                    example: '1234'\n                -\n                    description: 'The user''s identifier'\n                    in: path\n                    name: userId\n                    required: true\n                    schema:\n                        format: double\n                        type: number\n                    example: '6789'\n        delete:\n            operationId: RemoveUserFromGroup\n            responses:\n                '200':\n                    description: Ok\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/GroupDetailsResponse'\n                            examples:\n                                'Example 1':\n                                    value: {groupId: 123, name: DCGroup, description: 'This group represents Data Controller Users', isActive: true, users: []}\n            summary: 'Remove a user to a group. Admin task only.'\n            tags:\n                - Group\n            security:\n                -\n                    bearerAuth: []\n            parameters:\n                -\n                    description: 'The group''s identifier'\n                    in: path\n                    name: groupId\n                    required: true\n                    schema:\n                        format: double\n                        type: number\n                    example: '1234'\n                -\n                    description: 'The user''s identifier'\n                    in: path\n                    name: userId\n                    required: true\n                    schema:\n                        format: double\n                        type: number\n                    example: '6789'\n    /SASjsApi/info:\n        get:\n            operationId: Info\n            responses:\n                '200':\n                    description: Ok\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/InfoResponse'\n                            examples:\n                                'Example 1':\n                                    value: {mode: desktop, cors: enable, whiteList: ['http://example.com', 'http://example2.com'], protocol: http}\n            summary: 'Get server info (mode, cors, whiteList, protocol).'\n            tags:\n                - Info\n            security: []\n            parameters: []\n    /SASjsApi/session:\n        get:\n            operationId: Session\n            responses:\n                '200':\n                    description: Ok\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/UserResponse'\n                            examples:\n                                'Example 1':\n                                    value: {id: 123, username: johnusername, displayName: John}\n            summary: 'Get session info (username).'\n            tags:\n                - Session\n            security:\n                -\n                    bearerAuth: []\n            parameters: []\n    /SASjsApi/stp/execute:\n        get:\n            operationId: ExecuteReturnRaw\n            responses:\n                '200':\n                    description: Ok\n                    content:\n                        application/json:\n                            schema:\n                                anyOf:\n                                    - {type: string}\n                                    - {type: string, format: byte}\n            description: \"Trigger a SAS program using it's location in the _program URL parameter.\\nEnable debugging using the _debug URL parameter.  Setting _debug=131 will\\ncause the log to be streamed in the output.\\n\\nAdditional URL parameters are turned into SAS macro variables.\\n\\nAny files provided in the request body are placed into the SAS session with\\ncorresponding _WEBIN_XXX variables created.\\n\\nThe response headers can be adjusted using the mfs_httpheader() macro.  Any\\nfile type can be returned, including binary files such as zip or xls.\\n\\nIf _debug is \u003e= 131, response headers will contain Content-Type: 'text/plain'\\n\\nThis behaviour differs for POST requests, in which case the response is\\nalways JSON.\"\n            summary: 'Execute Stored Program, return raw _webout content.'\n            tags:\n                - STP\n            security:\n                -\n                    bearerAuth: []\n            parameters:\n                -\n                    description: 'Location of SAS program'\n                    in: query\n                    name: _program\n                    required: true\n                    schema:\n                        type: string\n                    example: /Public/somefolder/some.file\n        post:\n            operationId: ExecuteReturnJson\n            responses:\n                '200':\n                    description: Ok\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ExecuteReturnJsonResponse'\n                            examples:\n                                'Example 1':\n                                    value: {status: success, _webout: 'webout content', log: [], httpHeaders: {Content-type: application/zip, Cache-Control: 'public, max-age=1000'}}\n            description: \"Trigger a SAS program using it's location in the _program URL parameter.\\nEnable debugging using the _debug URL parameter.  In any case, the log is\\nalways returned in the log object.\\n\\nAdditional URL parameters are turned into SAS macro variables.\\n\\nAny files provided in the request body are placed into the SAS session with\\ncorresponding _WEBIN_XXX variables created.\\n\\nThe response will be a JSON object with the following root attributes: log,\\nwebout, headers.\\n\\nThe webout will be a nested JSON object ONLY if the response-header\\ncontains a content-type of application/json AND it is valid JSON.\\nOtherwise it will be a stringified version of the webout content.\\n\\nResponse headers from the mfs_httpheader macro are simply listed in the\\nheaders object, for POST requests they have no effect on the actual\\nresponse header.\"\n            summary: 'Execute Stored Program, return JSON'\n            tags:\n                - STP\n            security:\n                -\n                    bearerAuth: []\n            parameters:\n                -\n                    description: 'Location of SAS program'\n                    in: query\n                    name: _program\n                    required: false\n                    schema:\n                        type: string\n                    example: /Public/somefolder/some.file\n            requestBody:\n                required: false\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/ExecuteReturnJsonPayload'\nservers:\n    -\n        url: /\ntags:\n    -\n        name: Info\n        description: 'Get Server Info'\n    -\n        name: Session\n        description: 'Get Session information'\n    -\n        name: User\n        description: 'Operations about users'\n    -\n        name: Client\n        description: 'Operations about clients'\n    -\n        name: Auth\n        description: 'Operations about auth'\n    -\n        name: Drive\n        description: 'Operations about drive'\n    -\n        name: Group\n        description: 'Operations about group'\n    -\n        name: STP\n        description: 'Operations about STP'\n    -\n        name: CODE\n        description: 'Operations on SAS code'\n    -\n        name: Web\n        description: 'Operations on Web'\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /logout: get: duplicate operationId: \"Logout\""
}