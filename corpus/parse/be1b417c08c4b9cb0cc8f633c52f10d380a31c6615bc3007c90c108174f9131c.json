{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Kraken-CI/kraken"
		},
		"file": {
			"name": "swagger.yml",
			"size": 0,
			"path": "server/kraken/server/swagger.yml",
			"byteSize": 71036,
			"content": "openapi: 3.0.1\ninfo:\n  title: Server API\n  description: Kraken Server REST API\n  version: \"1\"\n\nservers:\n- url: /api\n\nsecurity:\n  - bearerAuth: []  # by default all functions require this security\n\npaths:\n  /version:\n    get:\n      tags:\n      - Management\n      summary: Get server version\n      description: Get server version\n      operationId: get_server_version\n      responses:\n        200:\n          description: Successfully\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServerVersion'\n  /sessions:\n    post:\n      tags:\n        - Users\n      summary: Create a session ie. log in.\n      operationId: login\n      security: []  # no security, it is used to login\n      requestBody:\n        description: project\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                user:\n                  type: string\n                password:\n                  type: string\n      responses:\n        201:\n          description: Successfully created session.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Session'\n  /sessions/{session_id}:\n    delete:\n      tags:\n      - Users\n      summary: Logout\n      description: Logut\n      operationId: logout\n      parameters:\n      - name: session_id\n        in: path\n        description: ID of session\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        200:\n          description: Successfully deleted session\n          content: {}\n  /users/{user_id}/password:\n    put:\n      tags:\n      - Users\n      summary: Change user password\n      description: Change user password\n      operationId: change_password\n      parameters:\n      - name: user_id\n        in: path\n        description: ID of user\n        required: true\n        schema:\n          type: integer\n          format: int64\n      requestBody:\n        description: secret\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserPassword'\n        required: false\n      responses:\n        201:\n          description: Successfully\n          content: {}\n  /systems:\n    get:\n      tags:\n      - Management\n      summary: Get systems\n      description: Get systems\n      operationId: get_systems\n      responses:\n        200:\n          description: An array of system\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Systems'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n  /projects:\n    get:\n      tags:\n      - Management\n      summary: Get projects\n      description: Get projects\n      operationId: get_projects\n      responses:\n        201:\n          description: Successfully created run\n          content: {}\n    post:\n      tags:\n      - Management\n      summary: Create a project\n      description: Create a new project\n      operationId: create_project\n      requestBody:\n        description: project\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Project'\n        required: false\n      responses:\n        201:\n          description: Successfully created run\n          content: {}\n  /projects/{project_id}:\n    get:\n      tags:\n      - Management\n      summary: Get project\n      description: Get project details\n      operationId: get_project\n      parameters:\n      - name: project_id\n        in: path\n        description: ID of project\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - name: with_results\n        in: query\n        description: with results\n        schema:\n          type: boolean\n      responses:\n        200:\n          description: Project details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Project'\n    put:\n      tags:\n      - Management\n      summary: Update a project\n      description: Update project settings\n      operationId: update_project\n      parameters:\n      - name: project_id\n        in: path\n        description: ID of project\n        required: true\n        schema:\n          type: integer\n          format: int64\n      requestBody:\n        description: project\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Project'\n        required: false\n      responses:\n        200:\n          description: Successfully\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Project'\n    delete:\n      tags:\n      - Management\n      summary: Delete a project\n      description: Delete a project\n      operationId: delete_project\n      parameters:\n      - name: project_id\n        in: path\n        description: ID of project\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        200:\n          description: Successfully deleted project\n          content: {}\n  /projects/{project_id}/secrets:\n    post:\n      tags:\n      - Management\n      summary: Create a secret\n      description: Create a new secret\n      operationId: create_secret\n      parameters:\n      - name: project_id\n        in: path\n        description: ID of project\n        required: true\n        schema:\n          type: integer\n          format: int64\n      requestBody:\n        description: secret\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Secret'\n        required: false\n      responses:\n        201:\n          description: Successfully created run\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Secret'\n  /secrets/{secret_id}:\n    put:\n      tags:\n      - Management\n      summary: Update a secret\n      description: Update secret settings\n      operationId: update_secret\n      parameters:\n      - name: secret_id\n        in: path\n        description: ID of secret\n        required: true\n        schema:\n          type: integer\n          format: int64\n      requestBody:\n        description: secret\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Secret'\n        required: false\n      responses:\n        201:\n          description: Successfully\n          content: {}\n    delete:\n      tags:\n      - Management\n      summary: Delete a secret\n      description: Delete a secret\n      operationId: delete_secret\n      parameters:\n      - name: secret_id\n        in: path\n        description: ID of secret\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        200:\n          description: Successfully deleted secret\n          content: {}\n  /projects/{project_id}/branches:\n    post:\n      tags:\n      - Management\n      summary: Create a branch\n      description: Create a new branch\n      operationId: create_branch\n      parameters:\n      - name: project_id\n        in: path\n        description: ID of pet to return\n        required: true\n        schema:\n          type: integer\n          format: int64\n      requestBody:\n        description: branch\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Branch'\n        required: false\n      responses:\n        201:\n          description: Successfully created run\n          content: {}\n  /workflow-schema:\n    get:\n      tags:\n      - Management\n      summary: Get workflow schema\n      operationId: get_workflow_schema\n      responses:\n        200:\n          description: Workflow schema\n          content:\n            application/json:\n              schema:\n                type: object\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n  /branches/{branch_id}:\n    put:\n      tags:\n      - Management\n      summary: Update a branch\n      description: Update branch\n      operationId: update_branch\n      parameters:\n      - name: branch_id\n        in: path\n        description: ID of branch\n        required: true\n        schema:\n          type: integer\n          format: int64\n      requestBody:\n        description: branch\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Branch'\n        required: false\n      responses:\n        200:\n          description: Successfully\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Branch'\n    delete:\n      tags:\n      - Management\n      summary: Delete a branch\n      description: Delete a branch\n      operationId: delete_branch\n      parameters:\n      - name: branch_id\n        in: path\n        description: ID of branch\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        200:\n          description: Successfully deleted branch\n          content: {}\n  /branches/{branch_id}/cfg:\n    get:\n      tags:\n      - Management\n      summary: List all results\n      operationId: get_branch\n      parameters:\n      - name: branch_id\n        in: path\n        description: ID of pet to return\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        200:\n          description: A paged array of runs\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Branch'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n  /branches/{branch_id}/sequences:\n    get:\n      tags:\n      - Management\n      summary: List branch sequences\n      operationId: get_branch_sequences\n      parameters:\n      - name: branch_id\n        in: path\n        description: ID of branch\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        200:\n          description: An array of branch sequences\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BranchSequences'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n  /branches/{branch_id}/stats:\n    get:\n      tags:\n      - Management\n      summary: Stats of a branch\n      operationId: get_branch_stats\n      parameters:\n      - name: branch_id\n        in: path\n        description: ID of branch\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        200:\n          description: Branch stats\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BranchStats'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n  /branches/{branch_id}/flows/{kind}:\n    get:\n      tags:\n      - Execution\n      summary: List all runs\n      operationId: get_flows\n      parameters:\n      - name: branch_id\n        in: path\n        description: ID of pet to return\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - name: kind\n        in: path\n        description: ID of pet to return\n        required: true\n        schema:\n          type: string\n      - name: start\n        in: query\n        description: How many items to return at one time (max 100)\n        schema:\n          type: integer\n          format: int32\n      - name: limit\n        in: query\n        description: How many items to return at one time (max 100)\n        schema:\n          type: integer\n          format: int32\n      - name: middle\n        in: query\n        description: Middle\n        schema:\n          type: integer\n          format: int32\n      responses:\n        200:\n          description: A paged array of runs\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Flows'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n    post:\n      tags:\n      - Execution\n      summary: Create a run\n      description: Create a new run\n      operationId: create_flow\n      parameters:\n      - name: branch_id\n        in: path\n        description: ID of pet to return\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - name: kind\n        in: path\n        description: ID of pet to return\n        required: true\n        schema:\n          type: string\n      requestBody:\n        description: flow\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Flow'\n        required: false\n      responses:\n        201:\n          description: Successfully created run\n          content: {}\n  /branches/{branch_id}/stages:\n    post:\n      tags:\n      - Management\n      summary: Create a stage\n      description: Create a new stage\n      operationId: create_stage\n      parameters:\n      - name: branch_id\n        in: path\n        description: ID of pet to return\n        required: true\n        schema:\n          type: integer\n          format: int64\n      requestBody:\n        description: stage\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Stage'\n        required: false\n      responses:\n        201:\n          description: Successfully created run\n          content: {}\n  /branches/{branch_id}/project_id:\n    put:\n      tags:\n      - Management\n      summary: Move a branch to another project\n      description: Move a branch to another project\n      operationId: move_branch\n      parameters:\n      - name: branch_id\n        in: path\n        description: ID of branch\n        required: true\n        schema:\n          type: integer\n          format: int64\n      requestBody:\n        description: project id\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                project_id:\n                  type: integer\n                  format: int64\n      responses:\n        201:\n          description: Successfully created run\n          content: {}\n  /flows/{flow_id}:\n    get:\n      tags:\n      - Execution\n      summary: List all results\n      operationId: get_flow\n      parameters:\n      - name: flow_id\n        in: path\n        description: ID of pet to return\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        200:\n          description: A paged array of runs\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Flow'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n  /flows/{flow_id}/runs:\n    get:\n      tags:\n      - Execution\n      summary: List all results\n      operationId: get_flow_runs\n      parameters:\n      - name: flow_id\n        in: path\n        description: ID of pet to return\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        200:\n          description: A paged array of runs\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Runs'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n    post:\n      tags:\n      - Execution\n      summary: Create a run\n      description: Create a new run\n      operationId: create_run\n      parameters:\n      - name: flow_id\n        in: path\n        description: ID of pet to return\n        required: true\n        schema:\n          type: integer\n          format: int64\n      requestBody:\n        description: run\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Run'\n        required: false\n      responses:\n        201:\n          description: Successfully created run\n          content: {}\n  /flows/{flow_id}/artifacts:\n    get:\n      tags:\n      - Execution\n      summary: List artifacts of given flow\n      operationId: get_flow_artifacts\n      parameters:\n      - name: flow_id\n        in: path\n        description: ID of pet to return\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        200:\n          description: A paged array of runs\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Artifacts'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n  /flows/{flow_id}/analysis:\n    get:\n      tags:\n      - Results\n      summary: Results analysis of given flow\n      operationId: get_flow_analysis\n      parameters:\n      - name: flow_id\n        in: path\n        description: ID of pet to return\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        200:\n          description: A paged array of runs\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlowAnalysis'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n  /flows/{flow_id}/history:\n    get:\n      tags:\n      - Results\n      summary: Results history of till given flow\n      operationId: get_branch_history\n      parameters:\n      - name: flow_id\n        in: path\n        description: ID of pet to return\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - name: limit\n        in: query\n        description: number of flows to return\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        200:\n          description: An array of flows\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BranchHistory'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n  /stages/{stage_id}:\n    get:\n      tags:\n      - Management\n      summary: Get a stage\n      description: Get stage settings\n      operationId: get_stage\n      parameters:\n      - name: stage_id\n        in: path\n        description: ID of pet to return\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        201:\n          description: Successfully created run\n          content: {}\n    put:\n      tags:\n      - Management\n      summary: Update a stage\n      description: Update stage settings\n      operationId: update_stage\n      parameters:\n      - name: stage_id\n        in: path\n        description: ID of pet to return\n        required: true\n        schema:\n          type: integer\n          format: int64\n      requestBody:\n        description: stage\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Stage'\n      responses:\n        201:\n          description: Successfully created run\n          content: {}\n    delete:\n      tags:\n      - Management\n      summary: Delete a stage\n      description: Delete a stage\n      operationId: delete_stage\n      parameters:\n      - name: stage_id\n        in: path\n        description: ID of pet to return\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        200:\n          description: Successfully deleted stage\n          content: {}\n  /stages/{stage_id}/schema:\n    put:\n      tags:\n      - Management\n      summary: Execute schema_code and return schema in JSON format\n      operationId: get_stage_schema_as_json\n      parameters:\n      - name: stage_id\n        in: path\n        description: ID of pet to return\n        required: true\n        schema:\n          type: integer\n          format: int64\n      requestBody:\n        description: Schema code to execute\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/StageSchemaCode'\n        required: false\n      responses:\n        200:\n          description: A paged array of runs\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StageSchemaJson'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n  /stages/{stage_id}/schedule:\n    get:\n      tags:\n      - Management\n      summary: Get schedule info for stage if there are time triggers configured.\n      operationId: get_stage_schedule\n      parameters:\n      - name: stage_id\n        in: path\n        description: Stage ID\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        200:\n          description: An array of schedules\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StageSchedule'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n  /stages/{stage_id}/runs:\n    get:\n      tags:\n      - Execution\n      summary: List all runs\n      operationId: get_runs\n      parameters:\n      - name: stage_id\n        in: path\n        description: ID of pet to return\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - name: limit\n        in: query\n        description: How many items to return at one time (max 100)\n        schema:\n          type: integer\n          format: int32\n      responses:\n        200:\n          description: A paged array of runs\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Runs'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n  /runs/{run_id}/results:\n    get:\n      tags:\n      - Results\n      summary: List all results\n      operationId: get_run_results\n      parameters:\n      - name: run_id\n        in: path\n        description: ID of pet to return\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - name: start\n        in: query\n        description: How many items to return at one time (max 100)\n        schema:\n          type: integer\n          format: int32\n      - name: limit\n        in: query\n        description: How many items to return at one time (max 100)\n        schema:\n          type: integer\n          format: int32\n      - name: sort_field\n        in: query\n        schema:\n          type: string\n      - name: sort_dir\n        in: query\n        schema:\n          type: string\n      - name: statuses\n        in: query\n        style: form\n        explode: false\n        schema:\n          type: array\n          items:\n            type: integer\n      - name: changes\n        in: query\n        style: form\n        explode: false\n        schema:\n          type: array\n          items:\n            type: integer\n      - name: min_age\n        in: query\n        schema:\n          type: integer\n      - name: max_age\n        in: query\n        schema:\n          type: integer\n      - name: min_instability\n        in: query\n        schema:\n          type: integer\n      - name: max_instability\n        in: query\n        schema:\n          type: integer\n      - name: test_case_text\n        in: query\n        schema:\n          type: string\n      - name: job\n        in: query\n        schema:\n          type: string\n      - name: systems\n        in: query\n        schema:\n          type: array\n          items:\n            type: integer\n      - name: groups\n        in: query\n        schema:\n          type: array\n          items:\n            type: integer\n      responses:\n        200:\n          description: A paged array of runs\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Results'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n  /runs/{run_id}/jobs:\n    get:\n      tags:\n      - Execution\n      summary: List jobs\n      operationId: get_run_jobs\n      parameters:\n      - name: run_id\n        in: path\n        description: ID of pet to return\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - name: start\n        in: query\n        description: How many items to return at one time (max 100)\n        schema:\n          type: integer\n          format: int32\n      - name: limit\n        in: query\n        description: How many items to return at one time (max 100)\n        schema:\n          type: integer\n          format: int32\n      - name: include_covered\n        in: query\n        description: Include covered jobs\n        schema:\n          type: boolean\n      responses:\n        200:\n          description: A paged array of runs\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Jobs'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n  /runs/{run_id}/issues:\n    get:\n      tags:\n      - Execution\n      summary: List run issues\n      operationId: get_run_issues\n      parameters:\n      - name: run_id\n        in: path\n        description: ID of pet to return\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - name: start\n        in: query\n        description: How many items to return at one time (max 100)\n        schema:\n          type: integer\n          format: int32\n      - name: limit\n        in: query\n        description: How many items to return at one time (max 100)\n        schema:\n          type: integer\n          format: int32\n      - name: issue_types\n        in: query\n        style: form\n        explode: false\n        schema:\n          type: array\n          items:\n            type: integer\n      - name: location\n        in: query\n        schema:\n          type: string\n      - name: message\n        in: query\n        schema:\n          type: string\n      - name: symbol\n        in: query\n        schema:\n          type: string\n      - name: min_age\n        in: query\n        schema:\n          type: integer\n      - name: max_age\n        in: query\n        schema:\n          type: integer\n      - name: job\n        in: query\n        schema:\n          type: string\n      responses:\n        200:\n          description: A paged array of runs\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Issues'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n  /runs/{run_id}/artifacts:\n    get:\n      tags:\n      - Execution\n      summary: List artifacts of given run\n      operationId: get_run_artifacts\n      parameters:\n      - name: run_id\n        in: path\n        description: ID of pet to return\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - name: start\n        in: query\n        description: How many items to return at one time (max 100)\n        schema:\n          type: integer\n          format: int32\n      - name: limit\n        in: query\n        description: How many items to return at one time (max 100)\n        schema:\n          type: integer\n          format: int32\n      responses:\n        200:\n          description: A paged array of runs\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Artifacts'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n  /runs/{run_id}:\n    get:\n      tags:\n      - Execution\n      summary: List all results\n      operationId: get_run\n      parameters:\n      - name: run_id\n        in: path\n        description: ID of pet to return\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        200:\n          description: A paged array of runs\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Run'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n    put:\n      tags:\n      - Execution\n      summary: Start manual run or replay existing run ie. start again same jobs\n      operationId: run_run_jobs\n      parameters:\n      - name: run_id\n        in: path\n        description: ID of pet to return\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        200:\n          description: A paged array of runs\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Run'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n    delete:\n      tags:\n      - Execution\n      summary: Cancel a run\n      description: Cancel a run\n      operationId: cancel_run\n      parameters:\n      - name: run_id\n        in: path\n        description: ID of run\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        200:\n          description: Successfully deleted job\n          content: {}\n  /test_case_results/{test_case_result_id}:\n    get:\n      tags:\n      - Results\n      summary: List all results\n      operationId: get_result\n      parameters:\n      - name: test_case_result_id\n        in: path\n        description: ID of pet to return\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        200:\n          description: A paged array of runs\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Result'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n  /test_case_results/{test_case_result_id}/history:\n    get:\n      tags:\n      - Results\n      summary: List all results\n      operationId: get_result_history\n      parameters:\n      - name: test_case_result_id\n        in: path\n        description: ID of pet to return\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - name: start\n        in: query\n        description: How many items to return at one time (max 100)\n        schema:\n          type: integer\n          format: int32\n      - name: limit\n        in: query\n        description: How many items to return at one time (max 100)\n        schema:\n          type: integer\n          format: int32\n      responses:\n        200:\n          description: A paged array of runs\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Results'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n  /test_case_results/{test_case_result_id}/comment:\n    post:\n      tags:\n      - Results\n      summary: Create or update a comment to the result\n      description: Create or update a comment to the result\n      operationId: create_or_update_test_case_comment\n      parameters:\n      - name: test_case_result_id\n        in: path\n        description: ID of test case result\n        required: true\n        schema:\n          type: integer\n          format: int64\n      requestBody:\n        description: Comment to create\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                text:\n                  type: string\n                author:\n                  type: string\n                state:\n                  type: integer\n                  format: int64\n      responses:\n        201:\n          description: Successfully created comment\n          content: {}\n  /jobs:\n    post:\n      tags:\n      - Execution\n      summary: Create a job\n      description: Create a new job\n      operationId: create_job\n      requestBody:\n        description: Job to create\n        content:\n          application/json:\n            schema:\n              required:\n              - run\n              type: object\n              properties:\n                run:\n                  type: integer\n        required: false\n      responses:\n        201:\n          description: Successfully created run\n          content: {}\n  /jobs/{job_id}:\n    put:\n      tags:\n      - Execution\n      summary: Rerun a job\n      operationId: job_rerun\n      parameters:\n      - name: job_id\n        in: path\n        description: ID of pet to return\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        200:\n          description: A paged array of runs\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Job'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n    delete:\n      tags:\n      - Execution\n      summary: Cancel a job\n      description: Cancel a job\n      operationId: delete_job\n      parameters:\n      - name: job_id\n        in: path\n        description: ID of job\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        200:\n          description: Successfully deleted job\n          content: {}\n  /jobs/{job_id}/logs:\n    get:\n      tags:\n      - Execution\n      summary: Get a job logs\n      description: Get a job logs\n      operationId: get_job_logs\n      parameters:\n      - name: job_id\n        in: path\n        description: ID of pet to return\n        required: true\n        schema:\n          type: integer\n      - name: start\n        in: query\n        description: ID of pet to return\n        required: true\n        schema:\n          type: integer\n      - name: limit\n        in: query\n        description: ID of pet to return\n        required: true\n        schema:\n          type: integer\n      - name: order\n        in: query\n        description: ID of pet to return\n        schema:\n          type: string\n      - name: internals\n        in: query\n        description: ID of pet to return\n        schema:\n          type: boolean\n      - name: filters\n        in: query\n        description: ID of pet to return\n        schema:\n          type: string\n      responses:\n        200:\n          description: A paged array of logs\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Logs'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n  /last-rq-jobs:\n    get:\n      tags:\n      - Management\n      summary: Get rq logs\n      description: Get last rq jobs names\n      operationId: get_last_rq_jobs_names\n      responses:\n        200:\n          description: A paged array of logs\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RQJobNames'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n  /services-logs:\n    get:\n      tags:\n      - Management\n      summary: Get services logs\n      description: Get services logs\n      operationId: get_services_logs\n      parameters:\n      - name: services\n        in: query\n        description: ID of pet to return\n        schema:\n          type: array\n          items:\n            type: string\n      - name: level\n        in: query\n        description: log level\n        schema:\n          type: string\n      responses:\n        200:\n          description: A paged array of logs\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServicesLogs'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n  /errors-in-logs:\n    get:\n      tags:\n      - Management\n      summary: Get errors in logs count in the last hour\n      description: Get errors in logs count in the last hour\n      operationId: get_errors_in_logs_count\n      parameters:\n      - name: services\n        in: query\n        description: ID of pet to return\n        schema:\n          type: array\n          items:\n            type: string\n      responses:\n        200:\n          description: A paged array of logs\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorsInLogsCount'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n  /agents:\n    get:\n      tags:\n      - Management\n      summary: Get agents\n      description: Get agents\n      operationId: get_agents\n      parameters:\n      - name: unauthorized\n        in: query\n        description: ID of pet to return\n        schema:\n          type: boolean\n      - name: start\n        in: query\n        description: How many items to return at one time (max 100)\n        schema:\n          type: integer\n          format: int32\n      - name: limit\n        in: query\n        description: How many items to return at one time (max 100)\n        schema:\n          type: integer\n          format: int32\n      - name: sort_field\n        in: query\n        schema:\n          type: string\n      - name: sort_dir\n        in: query\n        schema:\n          type: string\n      responses:\n        200:\n          description: A paged array of logs\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Agents'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n    patch:\n      tags:\n      - Management\n      summary: Update agents\n      description: Update agents\n      operationId: update_agents\n      requestBody:\n        description: List of modified agents\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/Agent'\n        required: false\n      responses:\n        200:\n          description: A paged array of logs\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Agents'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n  /agents/{agent_id}:\n    get:\n      tags:\n      - Management\n      summary: Get agent\n      description: Get agent details\n      operationId: get_agent\n      parameters:\n      - name: agent_id\n        in: path\n        description: ID of agent\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        200:\n          description: Agent details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Agent'\n    put:\n      tags:\n      - Management\n      summary: Update a agent\n      description: Update agent settings\n      operationId: update_agent\n      parameters:\n      - name: agent_id\n        in: path\n        description: ID of agent\n        required: true\n        schema:\n          type: integer\n          format: int64\n      requestBody:\n        description: agent\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Agent'\n        required: false\n      responses:\n        200:\n          description: Successfully\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Agent'\n    delete:\n      tags:\n      - Management\n      summary: Delete a agent\n      description: Delete a agent\n      operationId: delete_agent\n      parameters:\n      - name: agent_id\n        in: path\n        description: ID of agent\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        200:\n          description: Successfully deleted agent\n          content: {}\n  /agents/{agent_id}/jobs:\n    get:\n      tags:\n      - Execution\n      summary: List jobs executed by given agent\n      operationId: get_agent_jobs\n      parameters:\n      - name: agent_id\n        in: path\n        description: ID of agent\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - name: start\n        in: query\n        description: How many items to return at one time (max 100)\n        schema:\n          type: integer\n          format: int32\n      - name: limit\n        in: query\n        description: How many items to return at one time (max 100)\n        schema:\n          type: integer\n          format: int32\n      responses:\n        200:\n          description: A paged array of runs\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Jobs'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n  /groups:\n    get:\n      tags:\n      - Management\n      summary: Get groups\n      description: Get groups\n      operationId: get_groups\n      parameters:\n      - name: start\n        in: query\n        description: How many items to return at one time (max 100)\n        schema:\n          type: integer\n          format: int32\n      - name: limit\n        in: query\n        description: How many items to return at one time (max 100)\n        schema:\n          type: integer\n          format: int32\n      responses:\n        200:\n          description: Successfully\n          content: {}\n    post:\n      tags:\n      - Management\n      summary: Create a group\n      description: Create a new group\n      operationId: create_group\n      requestBody:\n        description: group\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Group'\n        required: false\n      responses:\n        201:\n          description: Successfully created group\n          content: {}\n  /groups/{group_id}:\n    get:\n      tags:\n      - Management\n      summary: Get group\n      description: Get group details\n      operationId: get_group\n      parameters:\n      - name: group_id\n        in: path\n        description: ID of group\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        200:\n          description: Group details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Group'\n    put:\n      tags:\n      - Management\n      summary: Update a group\n      description: Update group settings\n      operationId: update_group\n      parameters:\n      - name: group_id\n        in: path\n        description: ID of group\n        required: true\n        schema:\n          type: integer\n          format: int64\n      requestBody:\n        description: group\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Group'\n        required: false\n      responses:\n        200:\n          description: Successfully\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Group'\n    delete:\n      tags:\n      - Management\n      summary: Delete a group\n      description: Gelete group settings\n      operationId: delete_group\n      parameters:\n      - name: group_id\n        in: path\n        description: ID of group\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        200:\n          description: Successfully\n          content: {}\n  /aws-ec2-regions:\n    get:\n      tags:\n      - Management\n      summary: Get settings\n      description: Get settings details\n      operationId: get_aws_ec2_regions\n      responses:\n        200:\n          description: Settings details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AwsEc2Regions'\n  /aws-ec2-instance-types/{region}:\n    get:\n      tags:\n      - Management\n      summary: Get settings\n      description: Get settings details\n      operationId: get_aws_ec2_instance_types\n      parameters:\n      - name: region\n        in: path\n        description: ID of group\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: Settings details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AwsEc2InstanceTypes'\n  /azure-locations:\n    get:\n      tags:\n      - Management\n      summary: Get settings\n      description: Get settings details\n      operationId: get_azure_locations\n      responses:\n        200:\n          description: Settings details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AzureLocations'\n  /azure-vm-sizes/{location}:\n    get:\n      tags:\n      - Management\n      summary: Get settings\n      description: Get settings details\n      operationId: get_azure_vm_sizes\n      parameters:\n      - name: location\n        in: path\n        description: ID of group\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: Settings details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AzureVmSizes'\n  /settings:\n    get:\n      tags:\n      - Management\n      summary: Get settings\n      description: Get settings details\n      operationId: get_settings\n      responses:\n        200:\n          description: Settings details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Settings'\n    put:\n      tags:\n      - Management\n      summary: Update a project\n      description: Update project settings\n      operationId: update_settings\n      requestBody:\n        description: settings details\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Settings'\n        required: false\n      responses:\n        200:\n          description: Successfully\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Settings'\n  /settings/{resource}/working-state:\n    get:\n      tags:\n      - Management\n      summary: Check if email or AWS settings are working\n      description: Check if email or AWS settings are working\n      operationId: get_settings_working_state\n      parameters:\n      - name: resource\n        in: path\n        description: ID of pet to return\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: Successfully\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SettingsWorkingState'\n  /diagnostics:\n    get:\n      tags:\n      - Management\n      summary: Get health status of Kraken services.\n      description: Get health status of Kraken services.\n      operationId: get_diagnostics\n      responses:\n        200:\n          description: Successfully\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Diagnostics'\n  /tools:\n    get:\n      tags:\n      - Management\n      summary: List tools\n      description: List tools\n      operationId: get_tools\n      parameters:\n      - name: start\n        in: query\n        description: How many items to return at one time (max 100)\n        schema:\n          type: integer\n          format: int32\n      - name: limit\n        in: query\n        description: How many items to return at one time (max 100)\n        schema:\n          type: integer\n          format: int32\n      - name: sort_field\n        in: query\n        schema:\n          type: string\n      - name: sort_dir\n        in: query\n        schema:\n          type: string\n      responses:\n        200:\n          description: Successfully\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Tools'\n    post:\n      tags:\n      - Management\n      summary: Create or update a tool\n      description: Create a new tool or update existing version\n      operationId: create_or_update_tool\n      requestBody:\n        description: group\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Tool'\n      responses:\n        201:\n          description: Successfully created group\n          content: {}\n  /tools/{tool_id}:\n    delete:\n      tags:\n      - Management\n      summary: Delete tool\n      description: List tools\n      operationId: delete_tool\n      parameters:\n      - name: tool_id\n        in: path\n        description: ID of tool\n        required: true\n        schema:\n          type: integer\n          format: int32\n      responses:\n        200:\n          description: Successfully\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Tools'\n  /tools/{name}:\n    get:\n      tags:\n      - Management\n      summary: List tools\n      description: List tools\n      operationId: get_tool_versions\n      parameters:\n      - name: name\n        in: path\n        description: Name of tool\n        required: true\n        schema:\n          type: string\n      - name: start\n        in: query\n        description: How many items to return at one time (max 100)\n        schema:\n          type: integer\n          format: int32\n      - name: limit\n        in: query\n        description: How many items to return at one time (max 100)\n        schema:\n          type: integer\n          format: int32\n      - name: sort_field\n        in: query\n        schema:\n          type: string\n      - name: sort_dir\n        in: query\n        schema:\n          type: string\n      responses:\n        200:\n          description: Successfully\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Tools'\n  /tools/{name}/zip:\n    post:\n      tags:\n      - Management\n      summary: Upload new tool or existing one\n      description: Upload code of a tool and create new one or overwrite existing version\n      operationId: upload_new_or_overwrite_tool\n      parameters:\n      - name: name\n        in: path\n        description: Name of tool\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                meta:\n                  $ref: '#/components/schemas/Tool'\n                file:\n                  type: string\n                  format: binary\n            encoding:\n              meta:\n                contentType: application/json\n              file:\n                contentType: application/zip\n      responses:\n        201:\n          description: Successfully created group\n          content: {}\n\n\ncomponents:\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      x-bearerInfoFunc: kraken.server.users.check_auth_token\n\n  schemas:\n    Session:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        token:\n          type: string\n    UserPassword:\n      type: object\n      properties:\n        password_old:\n          type: string\n        password_new:\n          type: string\n    Flow:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        label:\n          type: string\n        branch_id:\n          type: integer\n          format: int64\n        created:\n          type: string\n          format: date-time\n        project_id:\n          type: integer\n          format: int64\n        project_name:\n          type: string\n        base_branch_name:\n          type: string\n        branch_name:\n          type: string\n        runs:\n          type: object\n          properties: {}\n        stages:\n          type: array\n          items:\n            $ref: '#/components/schemas/Stage'\n        args:\n          type: object\n          properties: {}\n        kind:\n          type: string\n        artifacts:\n          type: object\n          properties:\n            public:\n              type: object\n              properties:\n                count:\n                  type: integer\n                  format: int64\n        report_entries:\n          type: array\n          items:\n            $ref: '#/components/schemas/ReportEntry'\n    Flows:\n      type: object\n      properties:\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/Flow'\n        total:\n          type: integer\n          format: int64\n    Run:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        label:\n          type: string\n        project_id:\n          type: integer\n          format: int64\n        project_name:\n          type: string\n        branch_id:\n          type: integer\n          format: int64\n        branch_name:\n          type: string\n        flow_id:\n          type: integer\n          format: int64\n        flow_kind:\n          type: string\n        flow_label:\n          type: string\n        stage_id:\n          type: integer\n          format: int64\n        stage_name:\n          type: string\n        args:\n          type: object\n          properties: {}\n        created:\n          type: string\n          format: date-time\n        started:\n          type: string\n          format: date-time\n        duration:\n          type: string\n        state:\n          type: string\n        jobs_error:\n          type: integer\n        jobs_rerun:\n          type: integer\n        jobs_waiting:\n          type: integer\n        jobs_executing:\n          type: integer\n        jobs_processing:\n          type: integer\n        jobs_total:\n          type: integer\n        tests_not_run:\n          type: integer\n        tests_passed:\n          type: integer\n        tests_total:\n          type: integer\n        issues_total:\n          type: integer\n        issues_new:\n          type: integer\n        artifacts_total:\n          type: integer\n        report_entries:\n          type: array\n          items:\n            $ref: '#/components/schemas/ReportEntry'\n        fix_cnt:\n          type: integer\n        regr_cnt:\n          type: integer\n        repo_data:\n          type: object\n          properties: {}\n        reason:\n          type: string\n    Runs:\n      type: object\n      properties:\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/Run'\n        total:\n          type: integer\n          format: int64\n    Result:\n      required:\n      - id\n      - job_id\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        job_id:\n          type: integer\n          format: int64\n        values:\n          type: object\n          properties: {}\n    Results:\n      type: object\n      properties:\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/Result'\n        total:\n          type: integer\n          format: int64\n    Issue:\n      required:\n      - id\n      - job_id\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        job_id:\n          type: integer\n          format: int64\n        job_name:\n          type: string\n    Issues:\n      type: object\n      properties:\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/Issue'\n        total:\n          type: integer\n          format: int64\n    Artifact:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        flow_id:\n          type: integer\n          format: int64\n        run_id:\n          type: integer\n          format: int64\n        size:\n          type: integer\n        path:\n          type: string\n    Artifacts:\n      type: object\n      properties:\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/Artifact'\n        total:\n          type: integer\n          format: int64\n    FlowAnalysis:\n      type: object\n      properties:\n        stats:\n          type: object\n        recs_map:\n          type: object\n        total_tests:\n          type: integer\n    BranchHistory:\n      type: object\n      properties:\n        items:\n          type: array\n          items:\n            type: object\n        total:\n          type: integer\n    ReportEntry:\n      type: object\n      properties:\n        name:\n          type: string\n        url:\n          type: string\n    Log:\n      type: object\n      properties:\n        time:\n          type: string\n        message:\n          type: string\n        service:\n          type: string\n        host:\n          type: string\n        level:\n          type: string\n        job:\n          type: integer\n        tool:\n          type: string\n        step:\n          type: integer\n    Logs:\n      type: object\n      properties:\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/Log'\n        total:\n          type: integer\n          format: int64\n        bookmarks:\n          type: object\n          properties:\n            first:\n              type: string\n            last:\n              type: string\n        job:\n          $ref: '#/components/schemas/Job'\n    RQJobNames:\n      type: object\n      properties:\n        items:\n          type: array\n          items:\n            type: object\n            properties:\n              time:\n                type: string\n              name:\n                type: string\n              lines:\n                type: integer\n                format: int64\n    ServicesLog:\n      type: object\n      properties:\n        time:\n          type: string\n        message:\n          type: string\n        service:\n          type: string\n        host:\n          type: string\n        level:\n          type: string\n        tool:\n          type: string\n    ServicesLogs:\n      type: object\n      properties:\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/ServicesLog'\n        total:\n          type: integer\n          format: int64\n    ErrorsInLogsCount:\n      type: object\n      properties:\n        errors_count:\n          type: integer\n          format: int64\n    Job:\n      type: object\n      properties:\n        id:\n          type: integer\n        created:\n          type: string\n          format: date-time\n        started:\n          type: string\n          format: date-time\n        finished:\n          type: string\n          format: date-time\n        completed:\n          type: string\n          format: date-time\n        duration:\n          type: string\n        timeout:\n          type: integer\n        name:\n          type: string\n        state:\n          type: integer\n        completion_status:\n          type: integer\n        notes:\n          type: string\n        run_id:\n          type: integer\n        steps:\n          type: array\n          items:\n            type: object\n            properties: {}\n        agents_group_id:\n          type: integer\n        agents_group_name:\n          type: string\n        agent_id:\n          type: integer\n        agent_name:\n          type: string\n        executor:\n          type: string\n        system:\n          type: string\n    Jobs:\n      type: object\n      properties:\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/Job'\n        total:\n          type: integer\n          format: int64\n    Project:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n        webhooks:\n          type: object\n          properties: {}\n        branches:\n          type: array\n          items:\n            type: object\n            properties: {}\n    Projects:\n      type: object\n      properties:\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/Project'\n        total:\n          type: integer\n          format: int64\n    Secret:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n        project_id:\n          type: integer\n          format: int64\n        project_name:\n          type: string\n        kind:\n          type: string\n        username:\n          type: string\n        key:\n          type: string\n    Branch:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n        branch_name:\n          type: string\n        project_id:\n          type: integer\n          format: int64\n        project_name:\n          type: string\n        forking_model:\n          type: string\n        stages:\n          type: array\n          items:\n            $ref: '#/components/schemas/Stage'\n        flows:\n          type: object\n          properties: {}\n    BranchSequence:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        branch_name:\n          type: string\n        branch_id:\n          type: integer\n          format: int64\n        stage_name:\n          type: string\n        stage_id:\n          type: integer\n          format: int64\n        kind:\n          type: integer\n          format: int64\n        value:\n          type: integer\n          format: int64\n    BranchSequences:\n      type: object\n      properties:\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/BranchSequence'\n        total:\n          type: integer\n          format: int64\n    BranchStats:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        ci:\n          $ref: '#/components/schemas/BranchStatsByKind'\n        dev:\n          $ref: '#/components/schemas/BranchStatsByKind'\n    BranchStatsByKind:\n      type: object\n      properties:\n        flows_total:\n          type: integer\n          format: int64\n        flows_last_week:\n          type: integer\n          format: int64\n        flows_last_month:\n          type: integer\n          format: int64\n        # TODO: failures stats\n        avg_duration_last_month:\n          type: integer\n          format: int64\n        avg_duration_last_week:\n          type: integer\n          format: int64\n        durations:\n          type: array\n          items:\n            type: object\n            properties:\n              flow_label:\n                type: string\n              duration:\n                type: integer\n                format: int64\n        # TODO: failures array\n    Stage:\n      required:\n      - name\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n        branch_id:\n          type: integer\n          format: int64\n        branch_name:\n          type: string\n        schema:\n          type: object\n          properties:\n            parent:\n              type: string\n            triggers:\n              type: object\n              properties:\n                parent:\n                  type: boolean\n            parameters:\n              type: array\n              items:\n                type: object\n                properties:\n                  name:\n                    type: string\n                  default:\n                    type: string\n        schema_code:\n          type: string\n        enabled:\n          type: boolean\n    StageSchemaJson:\n      type: object\n      properties:\n        stage_id:\n          type: integer\n          format: int64\n        schema:\n          type: string\n        error:\n          type: string\n    StageSchemaCode:\n      required:\n      - schema_code\n      type: object\n      properties:\n        schema_code:\n          type: string\n    StageSchedule:\n      type: object\n      properties:\n        schedules:\n          type: array\n          items:\n            type: object\n            properties:\n              name:\n                type: string\n              job_id:\n                type: string\n              next_run_time:\n                type: string\n    Agent:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n        address:\n          type: string\n        authorized:\n          type: boolean\n        ip_address:\n          type: string\n        state:\n          type: integer\n        disabled:\n          type: boolean\n        groups:\n          type: array\n          items:\n            type: object\n            properties: {}\n        job:\n          type: object\n          properties: {}\n        last_seen:\n          type: string\n          format: date-time\n        host_info:\n          type: object\n          properties: {}\n        user_attrs:\n          type: object\n          properties: {}\n    Agents:\n      type: object\n      properties:\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/Agent'\n        total:\n          type: integer\n          format: int64\n    Group:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n        project_name:\n          type: string\n        project_id:\n          type: integer\n        agents_count:\n          type: integer\n    Groups:\n      type: object\n      properties:\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/Group'\n        total:\n          type: integer\n          format: int64\n    System:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n        executor:\n          type: string\n    Systems:\n      type: object\n      properties:\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/System'\n        total:\n          type: integer\n          format: int64\n    AwsEc2Regions:\n      type: object\n      properties:\n        items:\n          type: array\n          items:\n            type: object\n            properties:\n              Endpoint:\n                type: string\n              RegionName:\n                type: string\n              OptInStatus:\n                type: string\n        total:\n          type: integer\n          format: int64\n    AwsEc2InstanceTypes:\n      type: object\n      properties:\n        items:\n          type: array\n          items:\n            type: object\n            properties:\n              InstanceType:\n                type: string\n        total:\n          type: integer\n          format: int64\n    AzureLocations:\n      type: object\n      properties:\n        items:\n          type: array\n          items:\n            type: string\n        total:\n          type: integer\n          format: int64\n    AzureVmSizes:\n      type: object\n      properties:\n        items:\n          type: array\n          items:\n            type: string\n        total:\n          type: integer\n          format: int64\n    Settings:\n      type: object\n      properties:\n        general:\n          type: object\n          properties: {}\n        notification:\n          type: object\n          properties: {}\n        monitoring:\n          type: object\n          properties: {}\n    SettingsWorkingState:\n      type: object\n      properties:\n        state:\n          type: string\n    Diagnostics:\n      type: object\n    Tools:\n      type: object\n      properties:\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/Tool'\n        total:\n          type: integer\n          format: int64\n    Tool:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n    ServerVersion:\n      type: object\n      properties:\n        version:\n          type: string\n    ApiError:\n      required:\n      - code\n      - message\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string\n",
			"canonicalURL": "/github.com/Kraken-CI/kraken@f8782e5eb14c6694114df3eae5b86aeefe696079/-/blob/server/kraken/server/swagger.yml",
			"externalURLs": [
				{
					"url": "https://github.com/Kraken-CI/kraken/blob/f8782e5eb14c6694114df3eae5b86aeefe696079/server/kraken/server/swagger.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: at 1:52272: duplicate path: \"/tools/{tool_id}\""
}