{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/mojaloop/pisp-project"
		},
		"file": {
			"name": "api_spec.yaml",
			"size": 0,
			"path": "docker-contract/ml-testing-toolkit/spec_files/api_definitions/thirdparty_pisp/api_spec.yaml",
			"byteSize": 121040,
			"content": "# DO NOT EDIT THIS FILE DIRECTLY!!!! INSTEAD, EDIT src/interface/ttk-thirdparty-api-template.yaml and run `npm run build:ttk-thirdparty:api` TO UPDATE THIS FILE\nopenapi: 3.0.2\ninfo:\n  title: Mojaloop Thirdparty API Adapter\n  version: '1.0'\n  description: A Mojaloop API for thirdparty interactions between `PISPs` (Payment Initiation Service Providers) and `DFSPs` (Digital Financial Service Providers)\n  license:\n    name: TBD\n    url: TBD\nservers:\n  - url: /\npaths:\n  /consentRequests:\n    post:\n      tags:\n        - consentRequests\n      operationId: CreateConsentRequest\n      summary: CreateConsentRequest\n      description: |\n        A request from a PISP to a DFSP to start the process of delegating consent\n      parameters:\n        - $ref: '#/paths/~1login/post/parameters/0'\n        - $ref: '#/paths/~1login/post/parameters/1'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/2'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/3'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/4'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/5'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/6'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/7'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/8'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/9'\n      requestBody:\n        description: The consentRequest to create\n        required: true\n        content:\n          application/json:\n            schema:\n              title: ConsentRequestsPostRequest\n              type: object\n              description: The object sent in a `POST /consentRequests` request.\n              properties:\n                id:\n                  $ref: '#/components/schemas/SendOTPRequest/properties/consentRequestId'\n                initiatorId:\n                  type: string\n                  description: The id of the PISP who will initiate transactions on a user's behalf.\n                scopes:\n                  type: array\n                  items:\n                    $ref: '#/paths/~1store~1consentRequests~1%7BID%7D/post/requestBody/content/application~1json/schema'\n                authChannels:\n                  type: array\n                  items:\n                    title: ConsentRequestChannelType\n                    type: string\n                    enum:\n                      - WEB\n                      - OTP\n                    description: |\n                      The auth channel being used for the consentRequest.\n                      - \"WEB\" - The Web auth channel.\n                      - \"OTP\" - The OTP auth channel.\n                callbackUri:\n                  type: string\n                  description: The callback uri that the user will be redirected to after completing the WEB auth channel.\n              required:\n                - id\n                - initiatorId\n                - scopes\n                - authChannels\n                - callbackUri\n            example:\n              id: 4cab6274-8b3e-41b4-83ce-fc0847409155\n              initiatorId: pispA\n              authChannels:\n                - WEB\n                - OTP\n              scopes:\n                - accountId: dfspa.alice.1234\n                  actions:\n                    - accounts.transfer\n                    - accounts.getBalance\n                - accountId: dfspa.alice.5678\n                  actions:\n                    - accounts.transfer\n                    - accounts.getBalance\n              callbackUri: 'pisp-app://callback.com'\n      responses:\n        '202':\n          $ref: '#/paths/~1sendOTP/post/responses/202'\n        '400':\n          $ref: '#/paths/~1login/post/responses/400'\n        '401':\n          $ref: '#/paths/~1login/post/responses/401'\n        '403':\n          $ref: '#/paths/~1login/post/responses/403'\n        '404':\n          $ref: '#/paths/~1login/post/responses/404'\n        '405':\n          $ref: '#/paths/~1login/post/responses/405'\n        '406':\n          $ref: '#/paths/~1login/post/responses/406'\n        '501':\n          $ref: '#/paths/~1login/post/responses/501'\n        '503':\n          $ref: '#/paths/~1login/post/responses/503'\n  '/consentRequests/{ID}':\n    put:\n      tags:\n        - consentRequests\n      operationId: UpdateConsentRequest\n      summary: UpdateConsentRequest\n      description: |\n        DFSP updates auth channels and/or auth uri in response to consentRequest.\n\n        PISP updates the consentRequest to include authorization token from their user,\n        which the DFSP is to then verify.\n      parameters:\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/0'\n        - $ref: '#/paths/~1login/post/parameters/0'\n        - $ref: '#/paths/~1login/post/parameters/1'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/2'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/3'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/4'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/5'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/6'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/7'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/8'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/9'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - title: ConsentRequestsIDPutResponseWeb\n                  type: object\n                  description: |\n                    The object sent in a `PUT /consentRequests/{ID}` request.\n\n                    Schema used in the request consent phase of the account linking web flow,\n                    the result is the PISP being instructed on a specific URL where this\n                    supposed user should be redirected. This URL should be a place where\n                    the user can prove their identity (e.g., by logging in).\n                  properties:\n                    initiatorId:\n                      type: string\n                      description: The id of the PISP who will initiate transactions on a user's behalf.\n                    scopes:\n                      type: array\n                      items:\n                        $ref: '#/paths/~1store~1consentRequests~1%7BID%7D/post/requestBody/content/application~1json/schema'\n                    authChannels:\n                      type: array\n                      items:\n                        title: ConsentRequestChannelTypeWeb\n                        type: string\n                        enum:\n                          - WEB\n                        description: |\n                          The web auth channel being used for PUT consentRequest/{ID} request.\n                    callbackUri:\n                      type: string\n                      description: The callback uri that the user will be redirected to after completing the WEB auth channel.\n                    authUri:\n                      type: string\n                      description: The callback uri that the pisp app redirects to for user to complete their login.\n                  required:\n                    - initiatorId\n                    - scopes\n                    - authChannels\n                    - callbackUri\n                    - authUri\n                  additionalProperties: false\n                - title: ConsentRequestsIDPutResponseWebAuth\n                  type: object\n                  description: |\n                    The object sent in a `PUT /consentRequests/{ID}` request.\n\n                    Schema used in the authentication phase of the account linking flow,\n                    the user is expected to prove their identity to the DFSP by passing a OTP\n                    or secret to the PISP.\n                  properties:\n                    initiatorId:\n                      type: string\n                      description: The id of the PISP who will initiate transactions on a user's behalf.\n                    scopes:\n                      type: array\n                      items:\n                        $ref: '#/paths/~1store~1consentRequests~1%7BID%7D/post/requestBody/content/application~1json/schema'\n                    authChannels:\n                      type: array\n                      items:\n                        $ref: '#/paths/~1consentRequests~1%7BID%7D/put/requestBody/content/application~1json/schema/oneOf/0/properties/authChannels/items'\n                    callbackUri:\n                      type: string\n                      description: The callback uri that the user will be redirected to after completing the WEB auth channel.\n                    authUri:\n                      type: string\n                      description: The callback uri that the pisp app redirects to for user to complete their login.\n                    authToken:\n                      type: string\n                      description: The Auth token from the OTP or redirect to pisp app.\n                  required:\n                    - initiatorId\n                    - scopes\n                    - authChannels\n                    - callbackUri\n                    - authUri\n                    - authToken\n                  additionalProperties: false\n                - title: ConsentRequestsIDPutResponseOTP\n                  type: object\n                  description: |\n                    The object sent in a `PUT /consentRequests/{ID}` request.\n\n                    Schema used in the request consent phase of the account linking OTP/SMS flow.\n                  properties:\n                    initiatorId:\n                      type: string\n                      description: The id of the PISP who will initiate transactions on a user's behalf.\n                    scopes:\n                      type: array\n                      items:\n                        $ref: '#/paths/~1store~1consentRequests~1%7BID%7D/post/requestBody/content/application~1json/schema'\n                    authChannels:\n                      type: array\n                      items:\n                        title: ConsentRequestChannelTypeOTP\n                        type: string\n                        enum:\n                          - OTP\n                        description: |\n                          The OTP auth channel being used for PUT consentRequest/{ID} request.\n                    callbackUri:\n                      type: string\n                      description: The callback uri that the user will be redirected to after completing the WEB auth channel.\n                  required:\n                    - initiatorId\n                    - scopes\n                    - authChannels\n                    - callbackUri\n                  additionalProperties: false\n                - title: ConsentRequestsIDPutResponseOTPAuth\n                  type: object\n                  description: |\n                    The object sent in a `PUT /consentRequests/{ID}` request.\n\n                    Schema used in the authentication phase of the account linking flow,\n                    the user is expected to prove their identity to the DFSP by passing a OTP\n                    or secret to the PISP.\n                  properties:\n                    initiatorId:\n                      type: string\n                      description: The id of the PISP who will initiate transactions on a user's behalf.\n                    scopes:\n                      type: array\n                      items:\n                        $ref: '#/paths/~1store~1consentRequests~1%7BID%7D/post/requestBody/content/application~1json/schema'\n                    authChannels:\n                      type: array\n                      items:\n                        $ref: '#/paths/~1consentRequests~1%7BID%7D/put/requestBody/content/application~1json/schema/oneOf/2/properties/authChannels/items'\n                    callbackUri:\n                      type: string\n                      description: The callback uri that the user will be redirected to after completing the WEB auth channel.\n                    authToken:\n                      type: string\n                      description: The Auth token from the OTP or redirect to pisp app.\n                  required:\n                    - initiatorId\n                    - scopes\n                    - authChannels\n                    - callbackUri\n                    - authToken\n                  additionalProperties: false\n            examples:\n              sample1:\n                value:\n                  initiatorId: pispA\n                  authChannels:\n                    - WEB\n                  scopes:\n                    - accountId: dfspa.alice.1234\n                      actions:\n                        - accounts.transfer\n                        - accounts.getBalance\n                    - accountId: dfspa.alice.5678\n                      actions:\n                        - accounts.transfer\n                        - accounts.getBalance\n                  callbackUri: 'pisp-app://callback.com'\n                  authUri: dfspa.com/authorize?consentRequestId=xxxxx\n              sample2:\n                value:\n                  initiatorId: pispA\n                  authChannels:\n                    - WEB\n                  scopes:\n                    - accountId: dfspa.alice.1234\n                      actions:\n                        - accounts.transfer\n                        - accounts.getBalance\n                    - accountId: dfspa.alice.5678\n                      actions:\n                        - accounts.transfer\n                        - accounts.getBalance\n                  callbackUri: 'pisp-app://callback.com'\n                  authUri: dfspa.com/authorize?consentRequestId=xxxxx\n                  authToken: otp or secret\n      responses:\n        '202':\n          $ref: '#/paths/~1sendOTP/post/responses/202'\n        '400':\n          $ref: '#/paths/~1login/post/responses/400'\n        '401':\n          $ref: '#/paths/~1login/post/responses/401'\n        '403':\n          $ref: '#/paths/~1login/post/responses/403'\n        '404':\n          $ref: '#/paths/~1login/post/responses/404'\n        '405':\n          $ref: '#/paths/~1login/post/responses/405'\n        '406':\n          $ref: '#/paths/~1login/post/responses/406'\n        '501':\n          $ref: '#/paths/~1login/post/responses/501'\n        '503':\n          $ref: '#/paths/~1login/post/responses/503'\n  /consents:\n    post:\n      description: |\n        Create a consent object. Called by DFSP after the successful creation and validation of a consentRequest.\n        The request is forwarded to both the Auth service and PISP.\n      summary: CreateConsent\n      operationId: CreateConsent\n      tags:\n        - consents\n      parameters:\n        - $ref: '#/paths/~1login/post/parameters/0'\n        - $ref: '#/paths/~1login/post/parameters/1'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/2'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/3'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/4'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/5'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/6'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/7'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/8'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/9'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              title: ConsentPostRequest\n              type: object\n              description: The object sent in a `POST /consents` request.\n              properties:\n                id:\n                  allOf:\n                    - $ref: '#/components/schemas/SendOTPRequest/properties/consentRequestId'\n                  description: |\n                    Common ID between the PISP and FSP for the Consent object\n                    decided by the DFSP who creates the Consent\n                    This field is REQUIRED for POST /consent.\n                requestId:\n                  allOf:\n                    - $ref: '#/components/schemas/SendOTPRequest/properties/consentRequestId'\n                  description: |\n                    The id of the ConsentRequest that was used to initiate the\n                    creation of this Consent.\n                participantId:\n                  title: FspId\n                  type: string\n                  minLength: 1\n                  maxLength: 32\n                  description: FSP identifier.\n                  example: 1234\n                initiatorId:\n                  allOf:\n                    - $ref: '#/paths/~1consents/post/requestBody/content/application~1json/schema/properties/participantId'\n                  description: PISP identifier who uses this Consent.\n                revokedAt:\n                  title: DateTime\n                  type: string\n                  pattern: '^(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:(\\.\\d{3}))(?:Z|[+-][01]\\d:[0-5]\\d)$'\n                  description: |\n                    The API data type DateTime is a JSON String in a lexical format that is\n                    restricted by a regular expression for interoperability reasons.\n                    The format is according to\n                    [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html),\n                    expressed in a combined date, time and time zone format.\n                    A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM].\n                    Examples are \\\"2016-05-24T08:38:08.699-04:00\\\", \\\"2016-05-24T08:38:08.699Z\\\"\n                    (where Z indicates Zulu time zone, same as UTC).\n                  example: '2016-05-24T08:38:08.699-04:00'\n                scopes:\n                  type: array\n                  items:\n                    $ref: '#/paths/~1store~1consentRequests~1%7BID%7D/post/requestBody/content/application~1json/schema'\n              required:\n                - id\n                - scopes\n                - participantId\n                - initiatorId\n            example:\n              id: 9d553d59-610f-44aa-b7ec-b483af24e98a\n              requestId: 4cab6274-8b3e-41b4-83ce-fc0847409155\n              participantId: dfspA\n              initiatorId: pispA\n              scopes:\n                - accountId: dfspa.alice.1234\n                  actions:\n                    - accounts.transfer\n                    - accounts.getBalance\n                - accountId: dfspa.alice.5678\n                  actions:\n                    - accounts.transfer\n                    - accounts.getBalance\n      responses:\n        '202':\n          $ref: '#/paths/~1sendOTP/post/responses/202'\n        '400':\n          $ref: '#/paths/~1login/post/responses/400'\n        '401':\n          $ref: '#/paths/~1login/post/responses/401'\n        '403':\n          $ref: '#/paths/~1login/post/responses/403'\n        '404':\n          $ref: '#/paths/~1login/post/responses/404'\n        '405':\n          $ref: '#/paths/~1login/post/responses/405'\n        '406':\n          $ref: '#/paths/~1login/post/responses/406'\n        '501':\n          $ref: '#/paths/~1login/post/responses/501'\n        '503':\n          $ref: '#/paths/~1login/post/responses/503'\n  '/consents/{ID}/generateChallenge':\n    post:\n      description: |\n        The HTTP request `POST /consents/{ID}/generateChallenge` is used to create a credential for the given Consent object.\n        The `{ID}` in the URI should contain the `{ID}` that was used in the `POST /consents`.\n\n        - Called by a `PISP` to request a challenge from the `auth-service`, which will be returned to the PISP via `PUT /consents/{ID}`\n      summary: GenerateChallengeRequest\n      tags:\n        - consents\n      operationId: GenerateChallengeRequest\n      parameters:\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/0'\n        - $ref: '#/paths/~1login/post/parameters/0'\n        - $ref: '#/paths/~1login/post/parameters/1'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/2'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/3'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/4'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/5'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/6'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/7'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/8'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/9'\n      requestBody:\n        description: GenerateChallengeRequest Body\n        required: true\n        content:\n          application/json:\n            schema:\n              title: ConsentsIDGenerateChallengePostRequest\n              type: object\n              description: |\n                A credential used to allow a user to prove their identity\n                and access to an account with a DFSP.\n              properties:\n                type:\n                  title: CredentialType\n                  type: string\n                  enum:\n                    - FIDO\n                  description: |\n                    The type of the Credential.\n                    - \"FIDO\" - A FIDO public/private keypair.\n              required:\n                - type\n            example:\n              type: FIDO\n      responses:\n        '202':\n          $ref: '#/paths/~1sendOTP/post/responses/202'\n        '400':\n          $ref: '#/paths/~1login/post/responses/400'\n        '401':\n          $ref: '#/paths/~1login/post/responses/401'\n        '403':\n          $ref: '#/paths/~1login/post/responses/403'\n        '404':\n          $ref: '#/paths/~1login/post/responses/404'\n        '405':\n          $ref: '#/paths/~1login/post/responses/405'\n        '406':\n          $ref: '#/paths/~1login/post/responses/406'\n        '501':\n          $ref: '#/paths/~1login/post/responses/501'\n        '503':\n          $ref: '#/paths/~1login/post/responses/503'\n  '/consents/{ID}':\n    parameters:\n      - name: ID\n        in: path\n        required: true\n        schema:\n          type: string\n        description: The identifier value.\n      - name: Content-Type\n        in: header\n        schema:\n          type: string\n        required: true\n        description: |\n          The `Content-Type` header indicates the specific version of the API used\n          to send the payload body.\n      - name: Date\n        in: header\n        schema:\n          type: string\n        required: true\n        description: The `Date` header field indicates the date when the request was sent.\n      - name: X-Forwarded-For\n        in: header\n        schema:\n          type: string\n        required: false\n        description: |\n          The `X-Forwarded-For` header field is an unofficially accepted standard used\n          for informational purposes of the originating client IP address, as a\n          request might pass multiple proxies, firewalls, and so on. Multiple\n          `X-Forwarded-For` values should be expected and supported by implementers\n          of the API.\n          **Note:** An alternative to `X-Forwarded-For` is defined in\n          [RFC 7239](https://tools.ietf.org/html/rfc7239).\n          However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.\n      - name: FSPIOP-Source\n        in: header\n        schema:\n          type: string\n        required: true\n        description: |\n          The `FSPIOP-Source` header field is a non-HTTP standard field\n          used by the API for identifying the sender of the HTTP request.\n          The field should be set by the original sender of the request.\n          Required for routing and signature verification\n          (see header field `FSPIOP-Signature`).\n      - name: FSPIOP-Destination\n        in: header\n        schema:\n          type: string\n        required: false\n        description: |\n          The `FSPIOP-Destination` header field is a non-HTTP standard field used by\n          the API for HTTP header based routing of requests and responses to the\n          destination. The field should be set by the original sender of the request\n          (if known), so that any entities between the client and the server do not\n          need to parse the payload for routing purposes.\n      - name: FSPIOP-Encryption\n        in: header\n        schema:\n          type: string\n        required: false\n        description: |\n          The `FSPIOP-Encryption` header field is a non-HTTP standard field used by\n          the API for applying end-to-end encryption of the request.\n      - name: FSPIOP-Signature\n        in: header\n        schema:\n          type: string\n        required: false\n        description: |\n          The `FSPIOP-Signature` header field is a non-HTTP standard field used by the\n          API for applying an end-to-end request signature.\n      - name: FSPIOP-URI\n        in: header\n        schema:\n          type: string\n        required: false\n        description: |\n          The `FSPIOP-URI` header field is a non-HTTP standard field used by the API\n          for signature verification, should contain the service URI. Required if\n          signature verification is used, for more information, see\n          [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).\n      - name: FSPIOP-HTTP-Method\n        in: header\n        schema:\n          type: string\n        required: false\n        description: |\n          The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by\n          the API for signature verification, should contain the service HTTP method.\n          Required if signature verification is used, for more information, see\n          [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).\n    put:\n      description: |\n        The HTTP request `PUT /consents/{ID}` is used to update a specified consent object.\n        The `{ID}` in the URI should contain the `{ID}` that was used in the `POST /consents`.\n        - Called by a `auth-service` to add the credential details.\n\n        - Called by a `PISP` to add a signature of the challenge.\n\n        PISP -\u003e Switch\n        Switch -\u003e PISP\n      summary: UpdateConsent\n      tags:\n        - consents\n      operationId: UpdateConsent\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - title: ConsentsIDPutResponseSigned\n                  type: object\n                  description: |\n                    The HTTP request `PUT /consents/{ID}` is used by the PISP to update a Consent\n                    with a signed challenge and register a credential.\n\n                    Called by a `PISP` to after signing a challenge. Sent to an `auth-service` for verification.\n                  properties:\n                    requestId:\n                      allOf:\n                        - $ref: '#/components/schemas/SendOTPRequest/properties/consentRequestId'\n                      description: |\n                        The id of the ConsentRequest that was used to initiate the\n                        creation of this Consent.\n                    participantId:\n                      $ref: '#/paths/~1consents/post/requestBody/content/application~1json/schema/properties/participantId'\n                    initiatorId:\n                      allOf:\n                        - $ref: '#/paths/~1consents/post/requestBody/content/application~1json/schema/properties/participantId'\n                      description: PISP identifier who uses this Consent.\n                    scopes:\n                      type: array\n                      items:\n                        $ref: '#/paths/~1store~1consentRequests~1%7BID%7D/post/requestBody/content/application~1json/schema'\n                    credential:\n                      title: SignedCredential\n                      type: object\n                      description: |\n                        A credential used to allow a user to prove their identity and access\n                        to an account with a DFSP.\n\n                        SignedCredential is a special formatting of the credential to allow us to be\n                        more explicit about the `status` field - it should only ever be PENDING when updating\n                        a credential.\n                      properties:\n                        id:\n                          type: string\n                          description: The id of a Credential.\n                        type:\n                          $ref: '#/paths/~1consents~1%7BID%7D~1generateChallenge/post/requestBody/content/application~1json/schema/properties/type'\n                        status:\n                          type: string\n                          enum:\n                            - PENDING\n                          description: The challenge has signed but not yet verified.\n                        challenge:\n                          title: CredentialChallengeSigned\n                          type: object\n                          description: |\n                            The challenge that has been signed by a PISP.\n                          properties:\n                            payload:\n                              type: string\n                              description: Base64 encoded binary of the challenge that must be answered by the PISP.\n                            signature:\n                              type: string\n                              description: Base64 encoded binary string or result of the payload signed by the PISP using the private key.\n                          required:\n                            - payload\n                            - signature\n                          additionalProperties: false\n                        payload:\n                          type: string\n                          description: Base64 encoded bytes - The public key of the Public/Private keypair.\n                      required:\n                        - id\n                        - type\n                        - status\n                        - challenge\n                        - payload\n                      additionalProperties: false\n                  required:\n                    - requestId\n                    - participantId\n                    - initiatorId\n                    - scopes\n                    - credential\n                - title: ConsentsIDPutResponseUnsigned\n                  type: object\n                  description: |\n                    The HTTP request `PUT /consents/{ID}` is used to request a PISP to sign a challenge.\n                    The `{ID}` in the URI should contain the `{ID}` that was used in the `POST /consents`.\n\n                    Called by a `auth-service` to request PISP to add the credential details.\n                  properties:\n                    requestId:\n                      allOf:\n                        - $ref: '#/components/schemas/SendOTPRequest/properties/consentRequestId'\n                      description: |\n                        The id of the ConsentRequest that was used to initiate the\n                        creation of this Consent.\n                    participantId:\n                      $ref: '#/paths/~1consents/post/requestBody/content/application~1json/schema/properties/participantId'\n                    initiatorId:\n                      allOf:\n                        - $ref: '#/paths/~1consents/post/requestBody/content/application~1json/schema/properties/participantId'\n                      description: PISP identifier who uses this Consent.\n                    scopes:\n                      type: array\n                      items:\n                        $ref: '#/paths/~1store~1consentRequests~1%7BID%7D/post/requestBody/content/application~1json/schema'\n                    credential:\n                      title: UnsignedCredential\n                      type: object\n                      description: |\n                        A credential used to allow a user to prove their identity and access\n                        to an account with a DFSP.\n\n                        UnsignedCredential is a special formatting of the credential to allow us to be\n                        more explicit about the `status` field - it should only ever be PENDING when updating\n                        a credential.\n                      properties:\n                        type:\n                          $ref: '#/paths/~1consents~1%7BID%7D~1generateChallenge/post/requestBody/content/application~1json/schema/properties/type'\n                        status:\n                          type: string\n                          enum:\n                            - PENDING\n                          description: The challenge has initialized but not yet answered by the PISP.\n                        challenge:\n                          title: CredentialChallengeSigned\n                          type: object\n                          description: |\n                            The challenge issued by a DFSP that must be answered by the PISP.\n                          properties:\n                            payload:\n                              type: string\n                              description: Base64 encoded binary of the challenge that must be answered by the PISP.\n                          required:\n                            - payload\n                          additionalProperties: false\n                      required:\n                        - type\n                        - status\n                        - challenge\n                      additionalProperties: false\n                  required:\n                    - requestId\n                    - participantId\n                    - initiatorId\n                    - scopes\n                    - credential\n                - title: ConsentsIDPutResponseVerified\n                  type: object\n                  description: |\n                    The HTTP request `PUT /consents/{ID}` is used by the DFSP or Auth-Service to\n                    update a Consent object once it has been Verified.\n\n                    Called by a `auth-service` to notify a DFSP and PISP that a credential has been verified and registered.\n                  properties:\n                    requestId:\n                      allOf:\n                        - $ref: '#/components/schemas/SendOTPRequest/properties/consentRequestId'\n                      description: |\n                        The id of the ConsentRequest that was used to initiate the\n                        creation of this Consent.\n                    participantId:\n                      $ref: '#/paths/~1consents/post/requestBody/content/application~1json/schema/properties/participantId'\n                    initiatorId:\n                      allOf:\n                        - $ref: '#/paths/~1consents/post/requestBody/content/application~1json/schema/properties/participantId'\n                      description: PISP identifier who uses this Consent.\n                    scopes:\n                      type: array\n                      items:\n                        $ref: '#/paths/~1store~1consentRequests~1%7BID%7D/post/requestBody/content/application~1json/schema'\n                    credential:\n                      title: VerifiedCredential\n                      type: object\n                      description: |\n                        A credential used to allow a user to prove their identity and access\n                        to an account with a DFSP.\n\n                        VerifiedCredential is a special formatting of the credential to allow us to be\n                        more explicit about the `status` field - it should only ever be VERIFIED when updating\n                        a credential.\n                      properties:\n                        id:\n                          type: string\n                          description: The id of a Credential.\n                        type:\n                          $ref: '#/paths/~1consents~1%7BID%7D~1generateChallenge/post/requestBody/content/application~1json/schema/properties/type'\n                        status:\n                          type: string\n                          enum:\n                            - VERIFIED\n                          description: 'The Credential is valid, and ready to be used by the PISP.'\n                        challenge:\n                          $ref: '#/paths/~1consents~1%7BID%7D/put/requestBody/content/application~1json/schema/oneOf/0/properties/credential/properties/challenge'\n                        payload:\n                          type: string\n                          description: Base64 encoded bytes - The public key of the Public/Private keypair.\n                      required:\n                        - type\n                        - status\n                        - challenge\n                      additionalProperties: false\n                  required:\n                    - requestId\n                    - participantId\n                    - initiatorId\n                    - scopes\n                    - credential\n            examples:\n              sample1:\n                value:\n                  requestId: 4cab6274-8b3e-41b4-83ce-fc0847409155\n                  participantId: dfspA\n                  initiatorId: pispA\n                  scopes:\n                    - accountId: dfspa.alice.1234\n                      actions:\n                        - accounts.transfer\n                        - accounts.getBalance\n                    - accountId: dfspa.alice.5678\n                      actions:\n                        - accounts.transfer\n                        - accounts.getBalance\n                  credential:\n                    type: FIDO\n                    status: PENDING\n                    challenge:\n                      payload: base64 encoded challenge\n              sample2:\n                value:\n                  requestId: 4cab6274-8b3e-41b4-83ce-fc0847409155\n                  participantId: dfspA\n                  initiatorId: pispA\n                  scopes:\n                    - accountId: dfspa.alice.1234\n                      actions:\n                        - accounts.transfer\n                        - accounts.getBalance\n                    - accountId: dfspa.alice.5678\n                      actions:\n                        - accounts.transfer\n                        - accounts.getBalance\n                  credential:\n                    id: '9876'\n                    type: FIDO\n                    status: PENDING\n                    challenge:\n                      payload: base64 encoded challenge\n                      signature: payload signed by PISP - using private key\n                    payload: base64 encoded bytes- using public key\n              sample3:\n                value:\n                  requestId: 4cab6274-8b3e-41b4-83ce-fc0847409155\n                  participantId: dfspA\n                  initiatorId: pispA\n                  scopes:\n                    - accountId: dfspa.alice.1234\n                      actions:\n                        - accounts.transfer\n                        - accounts.getBalance\n                    - accountId: dfspa.alice.5678\n                      actions:\n                        - accounts.transfer\n                        - accounts.getBalance\n                  credential:\n                    id: '9876'\n                    type: FIDO\n                    status: VERIFIED\n                    challenge:\n                      payload: base64 encoded challenge\n                      signature: payload signed by PISP - using private key\n                    payload: base64 encoded bytes- using public key\n      responses:\n        '200':\n          $ref: '#/paths/~1login/post/responses/200'\n        '202':\n          $ref: '#/paths/~1sendOTP/post/responses/202'\n        '400':\n          $ref: '#/paths/~1login/post/responses/400'\n        '401':\n          $ref: '#/paths/~1login/post/responses/401'\n        '403':\n          $ref: '#/paths/~1login/post/responses/403'\n        '404':\n          $ref: '#/paths/~1login/post/responses/404'\n        '405':\n          $ref: '#/paths/~1login/post/responses/405'\n        '406':\n          $ref: '#/paths/~1login/post/responses/406'\n        '501':\n          $ref: '#/paths/~1login/post/responses/501'\n        '503':\n          $ref: '#/paths/~1login/post/responses/503'\n    patch:\n      description: |\n        The HTTP request `PATCH /consents/{ID}` is used to notify the PISP and DFSP of revoked consent.\n\n        Switch -\u003e PISP\n      summary: NotifyConsent\n      tags:\n        - consents\n      operationId: NotifyConsent\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              title: ConsentsIDPatchResponse\n              description: |\n                PATCH /consents/{ID} request object.\n\n                Sent to both the PISP and DFSP when a consent is revoked.\n              type: object\n              properties:\n                status:\n                  title: ConsentStatusType\n                  type: string\n                  enum:\n                    - REVOKED\n                  description: |\n                    The status of the Consent.\n                    - \"REVOKED\" - The Consent is no longer valid and has been revoked.\n                revokedAt:\n                  $ref: '#/paths/~1consents/post/requestBody/content/application~1json/schema/properties/revokedAt'\n              required:\n                - status\n                - revokedAt\n      responses:\n        '200':\n          $ref: '#/paths/~1login/post/responses/200'\n        '202':\n          $ref: '#/paths/~1sendOTP/post/responses/202'\n        '400':\n          $ref: '#/paths/~1login/post/responses/400'\n        '401':\n          $ref: '#/paths/~1login/post/responses/401'\n        '403':\n          $ref: '#/paths/~1login/post/responses/403'\n        '404':\n          $ref: '#/paths/~1login/post/responses/404'\n        '405':\n          $ref: '#/paths/~1login/post/responses/405'\n        '406':\n          $ref: '#/paths/~1login/post/responses/406'\n        '501':\n          $ref: '#/paths/~1login/post/responses/501'\n        '503':\n          $ref: '#/paths/~1login/post/responses/503'\n  '/thirdpartyRequests/transactions/{ID}':\n    parameters:\n      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/0'\n      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'\n      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/2'\n      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/3'\n      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/4'\n      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/5'\n      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/6'\n      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/7'\n      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/8'\n      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/9'\n    get:\n      description: |\n        The callback `GET /thirdpartyRequests/transactions/{ID}` is used to get information about a thirdparty request transaction.\n      summary: Get third party transaction requests\n      tags:\n        - thirdpartyRequests\n      operationId: GetThirdpartyTransactionRequests\n      responses:\n        '200':\n          $ref: '#/paths/~1login/post/responses/200'\n        '400':\n          $ref: '#/paths/~1login/post/responses/400'\n        '401':\n          $ref: '#/paths/~1login/post/responses/401'\n        '403':\n          $ref: '#/paths/~1login/post/responses/403'\n        '404':\n          $ref: '#/paths/~1login/post/responses/404'\n        '405':\n          $ref: '#/paths/~1login/post/responses/405'\n        '406':\n          $ref: '#/paths/~1login/post/responses/406'\n        '501':\n          $ref: '#/paths/~1login/post/responses/501'\n        '503':\n          $ref: '#/paths/~1login/post/responses/503'\n    patch:\n      operationId: NotifyThirdpartyTransactionRequests\n      summary: NotifyThirdpartyTransactionRequests\n      description: |\n        The HTTP request `PATCH /thirdpartyRequests/transactions/{ID}` is used to\n        notify a thirdparty of the outcome of a transaction request.\n\n        Switch(Thirdparty API Adapter) -\u003e PISP\n      tags:\n        - thirdpartyRequests\n      parameters:\n        - $ref: '#/paths/~1login/post/parameters/1'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                transactionId:\n                  $ref: '#/components/schemas/SendOTPRequest/properties/consentRequestId'\n                transactionRequestState:\n                  title: TransactionRequestState\n                  type: string\n                  enum:\n                    - RECEIVED\n                    - PENDING\n                    - ACCEPTED\n                    - REJECTED\n                  description: |\n                    Below are the allowed values for the enumeration.\n                    - RECEIVED - Payer FSP has received the transaction from the Payee FSP.\n                    - PENDING - Payer FSP has sent the transaction request to the Payer.\n                    - ACCEPTED - Payer has approved the transaction.\n                    - REJECTED - Payer has rejected the transaction.\"\n                  example: RECEIVED\n      responses:\n        '200':\n          $ref: '#/paths/~1login/post/responses/200'\n        '400':\n          $ref: '#/paths/~1login/post/responses/400'\n        '401':\n          $ref: '#/paths/~1login/post/responses/401'\n        '403':\n          $ref: '#/paths/~1login/post/responses/403'\n        '404':\n          $ref: '#/paths/~1login/post/responses/404'\n        '405':\n          $ref: '#/paths/~1login/post/responses/405'\n        '406':\n          $ref: '#/paths/~1login/post/responses/406'\n        '501':\n          $ref: '#/paths/~1login/post/responses/501'\n        '503':\n          $ref: '#/paths/~1login/post/responses/503'\n  '/thirdpartyRequests/transactions/{ID}/error':\n    put:\n      tags:\n        - thirdpartyRequests\n      operationId: NotifyErrorThirdpartyTransactionRequests\n      summary: NotifyErrorThirdpartyTransactionRequests\n      description: |\n        If the server is unable to find the transaction request, or another processing error occurs,\n        the error callback `PUT /thirdpartyRequests/transactions/{ID}/error` is used.\n        The `{ID}` in the URI should contain the `transactionRequestId` that was used for the creation of the transaction request.     \n      parameters:\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/0'\n        - $ref: '#/paths/~1login/post/parameters/1'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/2'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/3'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/4'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/5'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/6'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/7'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/8'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/9'\n      requestBody:\n        description: Error information returned.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/paths/~1authorizations~1%7BID%7D~1error/put/requestBody/content/application~1json/schema'\n      responses:\n        '200':\n          $ref: '#/paths/~1login/post/responses/200'\n        '400':\n          $ref: '#/paths/~1login/post/responses/400'\n        '401':\n          $ref: '#/paths/~1login/post/responses/401'\n        '403':\n          $ref: '#/paths/~1login/post/responses/403'\n        '404':\n          $ref: '#/paths/~1login/post/responses/404'\n        '405':\n          $ref: '#/paths/~1login/post/responses/405'\n        '406':\n          $ref: '#/paths/~1login/post/responses/406'\n        '501':\n          $ref: '#/paths/~1login/post/responses/501'\n        '503':\n          $ref: '#/paths/~1login/post/responses/503'\n  /thirdpartyRequests/transactions:\n    post:\n      tags:\n        - thirdpartyRequests\n      operationId: CreateThirdpartyTransactionRequests\n      summary: CreateThirdpartyTransactionRequests\n      description: |\n        The HTTP request `POST /thirdpartyRequests/transactions` is used to request the creation of a third party transaction.\n        Called by a PISP to initiate a third party transaction flow.\n\n        PISP -\u003e Switch(Thirdparty API Adapter)\n      parameters:\n        - $ref: '#/paths/~1login/post/parameters/0'\n        - $ref: '#/paths/~1login/post/parameters/1'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/2'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/3'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/4'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/5'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/6'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/7'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/8'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/9'\n      requestBody:\n        description: Transaction request to be created.\n        required: true\n        content:\n          application/json:\n            schema:\n              title: ThirdpartyRequestsTransactionsPostRequest\n              type: object\n              description: The object sent in the POST /thirdpartyRequests/transactions request.\n              properties:\n                transactionRequestId:\n                  allOf:\n                    - $ref: '#/components/schemas/SendOTPRequest/properties/consentRequestId'\n                  description: |\n                    Common ID between the FSPs for the transaction request object. The ID should be reused for resends of the same transaction request. A new ID should be generated for each new transaction request.\n                sourceAccountId:\n                  allOf:\n                    - $ref: '#/paths/~1store~1consentRequests~1%7BID%7D/post/requestBody/content/application~1json/schema/properties/accountId'\n                  description: 'DFSP specific account identifiers, e.g. `dfspa.alice.1234`'\n                consentId:\n                  allOf:\n                    - $ref: '#/components/schemas/SendOTPRequest/properties/consentRequestId'\n                  description: |\n                    Common ID between the PISP and FSP for the Consent object This tells DFSP and auth-service which constent allows the PISP to initiate transaction.\n                payee:\n                  allOf:\n                    - title: Party\n                      type: object\n                      description: Data model for the complex type Party.\n                      properties:\n                        partyIdInfo:\n                          title: PartyIdInfo\n                          type: object\n                          description: Data model for the complex type PartyIdInfo.\n                          properties:\n                            partyIdType:\n                              title: PartyIdType\n                              type: string\n                              enum:\n                                - MSISDN\n                                - EMAIL\n                                - PERSONAL_ID\n                                - BUSINESS\n                                - DEVICE\n                                - ACCOUNT_ID\n                                - IBAN\n                                - ALIAS\n                              description: |\n                                Below are the allowed values for the enumeration.\n                                - MSISDN - An MSISDN (Mobile Station International Subscriber Directory\n                                Number, that is, the phone number) is used as reference to a participant.\n                                The MSISDN identifier should be in international format according to the\n                                [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en).\n                                Optionally, the MSISDN may be prefixed by a single plus sign, indicating the\n                                international prefix.\n                                - EMAIL - An email is used as reference to a\n                                participant. The format of the email should be according to the informational\n                                [RFC 3696](https://tools.ietf.org/html/rfc3696).\n                                - PERSONAL_ID - A personal identifier is used as reference to a participant.\n                                Examples of personal identification are passport number, birth certificate\n                                number, and national registration number. The identifier number is added in\n                                the PartyIdentifier element. The personal identifier type is added in the\n                                PartySubIdOrType element.\n                                - BUSINESS - A specific Business (for example, an organization or a company)\n                                is used as reference to a participant. The BUSINESS identifier can be in any\n                                format. To make a transaction connected to a specific username or bill number\n                                in a Business, the PartySubIdOrType element should be used.\n                                - DEVICE - A specific device (for example, a POS or ATM) ID connected to a\n                                specific business or organization is used as reference to a Party.\n                                For referencing a specific device under a specific business or organization,\n                                use the PartySubIdOrType element.\n                                - ACCOUNT_ID - A bank account number or FSP account ID should be used as\n                                reference to a participant. The ACCOUNT_ID identifier can be in any format,\n                                as formats can greatly differ depending on country and FSP.\n                                - IBAN - A bank account number or FSP account ID is used as reference to a\n                                participant. The IBAN identifier can consist of up to 34 alphanumeric\n                                characters and should be entered without whitespace.\n                                - ALIAS An alias is used as reference to a participant. The alias should be\n                                created in the FSP as an alternative reference to an account owner.\n                                Another example of an alias is a username in the FSP system.\n                                The ALIAS identifier can be in any format. It is also possible to use the\n                                PartySubIdOrType element for identifying an account under an Alias defined\n                                by the PartyIdentifier.\n                              example: PERSONAL_ID\n                            partyIdentifier:\n                              title: PartyIdentifier\n                              type: string\n                              minLength: 1\n                              maxLength: 128\n                              description: Identifier of the Party.\n                              example: 16135551212\n                            partySubIdOrType:\n                              title: PartySubIdOrType\n                              type: string\n                              minLength: 1\n                              maxLength: 128\n                              description: |\n                                Either a sub-identifier of a PartyIdentifier, or a sub-type of the\n                                PartyIdType, normally a PersonalIdentifierType.\n                              example: DRIVING_LICENSE\n                            fspId:\n                              $ref: '#/paths/~1consents/post/requestBody/content/application~1json/schema/properties/participantId'\n                          required:\n                            - partyIdType\n                            - partyIdentifier\n                        merchantClassificationCode:\n                          title: MerchantClassificationCode\n                          type: string\n                          pattern: '^[\\d]{1,4}$'\n                          description: |\n                            A limited set of pre-defined numbers. This list would be a limited set of\n                            numbers identifying a set of popular merchant types like School Fees,\n                            Pubs and Restaurants, Groceries, etc.\n                          example: 4321\n                        name:\n                          title: PartyName\n                          type: string\n                          minLength: 1\n                          maxLength: 128\n                          description: Name of the Party. Could be a real name or a nickname.\n                          example: Henrik Karlsson\n                        personalInfo:\n                          title: PartyPersonalInfo\n                          type: object\n                          description: Data model for the complex type PartyPersonalInfo.\n                          properties:\n                            complexName:\n                              title: PartyComplexName\n                              type: object\n                              description: Data model for the complex type PartyComplexName.\n                              properties:\n                                firstName:\n                                  title: FirstName\n                                  type: string\n                                  minLength: 1\n                                  maxLength: 128\n                                  pattern: '^(?!\\s*$)[\\w .,''-]{1,128}$'\n                                  description: First name of the Party (Name Type).\n                                  example: Henrik\n                                middleName:\n                                  title: MiddleName\n                                  type: string\n                                  minLength: 1\n                                  maxLength: 128\n                                  pattern: '^(?!\\s*$)[\\w .,''-]{1,128}$'\n                                  description: Middle name of the Party (Name Type).\n                                  example: Johannes\n                                lastName:\n                                  title: LastName\n                                  type: string\n                                  minLength: 1\n                                  maxLength: 128\n                                  pattern: '^(?!\\s*$)[\\w .,''-]{1,128}$'\n                                  description: Last name of the Party (Name Type).\n                                  example: Karlsson\n                            dateOfBirth:\n                              title: DateofBirth (type Date)\n                              type: string\n                              pattern: '^(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$'\n                              description: Date of Birth of the Party.\n                              example: '1966-06-16'\n                      required:\n                        - partyIdInfo\n                  description: Information about the Payee in the proposed financial transaction.\n                payer:\n                  allOf:\n                    - $ref: '#/paths/~1thirdpartyRequests~1transactions/post/requestBody/content/application~1json/schema/properties/payee/allOf/0'\n                  description: Information about the Payer in the proposed financial transaction.\n                amountType:\n                  allOf:\n                    - title: AmountType\n                      type: string\n                      enum:\n                        - SEND\n                        - RECEIVE\n                      description: |\n                        Below are the allowed values for the enumeration AmountType.\n                        - SEND - Amount the Payer would like to send, that is, the amount that should\n                        be withdrawn from the Payer account including any fees.\n                        - RECEIVE - Amount the Payer would like the Payee to receive, that is,\n                        the amount that should be sent to the receiver exclusive of any fees.\n                      example: RECEIVE\n                  description: 'SEND for sendAmount, RECEIVE for receiveAmount.'\n                amount:\n                  allOf:\n                    - $ref: '#/components/schemas/OutboundAuthorizationsPostRequest/properties/amount'\n                  description: Requested amount to be transferred from the Payer to Payee.\n                transactionType:\n                  allOf:\n                    - title: TransactionType\n                      type: object\n                      description: Data model for the complex type TransactionType.\n                      properties:\n                        scenario:\n                          title: TransactionScenario\n                          type: string\n                          enum:\n                            - DEPOSIT\n                            - WITHDRAWAL\n                            - TRANSFER\n                            - PAYMENT\n                            - REFUND\n                          description: |\n                            Below are the allowed values for the enumeration.\n                            - DEPOSIT - Used for performing a Cash-In (deposit) transaction.\n                            In a normal scenario, electronic funds are transferred from a\n                            Business account to a Consumer account, and physical cash is given\n                            from the Consumer to the Business User.\n                            - WITHDRAWAL - Used for performing a Cash-Out (withdrawal) transaction.\n                            In a normal scenario, electronic funds are transferred from a Consumer’s\n                            account to a Business account, and physical cash is given from the Business\n                            User to the Consumer.\n                            - TRANSFER - Used for performing a P2P (Peer to Peer, or Consumer to Consumer)\n                            transaction.\n                            - PAYMENT - Usually used for performing a transaction from a Consumer to a\n                            Merchant or Organization, but could also be for a B2B (Business to Business)\n                            payment. The transaction could be online for a purchase in an Internet store,\n                            in a physical store where both the Consumer and Business User are present, a\n                            bill payment, a donation, and so on.\n                            - REFUND - Used for performing a refund of transaction.\n                          example: DEPOSIT\n                        subScenario:\n                          title: TransactionSubScenario\n                          type: string\n                          pattern: '^[A-Z_]{1,32}$'\n                          description: 'Possible sub-scenario, defined locally within the scheme (UndefinedEnum Type).'\n                          example: LOCALLY_DEFINED_SUBSCENARIO\n                        initiator:\n                          title: TransactionInitiator\n                          type: string\n                          enum:\n                            - PAYER\n                            - PAYEE\n                          description: |\n                            Below are the allowed values for the enumeration.\n                            - PAYER - Sender of funds is initiating the transaction.\n                            The account to send from is either owned by the Payer or is connected to the\n                            Payer in some way.\n                            - PAYEE - Recipient of the funds is initiating the transaction by sending a\n                            transaction request. The Payer must approve the transaction, either\n                            automatically by a pre-generated OTP or by pre-approval of the Payee,\n                            or by manually approving in his or her own Device.\n                          example: PAYEE\n                        initiatorType:\n                          title: TransactionInitiatorType\n                          type: string\n                          enum:\n                            - CONSUMER\n                            - AGENT\n                            - BUSINESS\n                            - DEVICE\n                          description: |\n                            Below are the allowed values for the enumeration.\n                            - CONSUMER - Consumer is the initiator of the transaction.\n                            - AGENT - Agent is the initiator of the transaction.\n                            - BUSINESS - Business is the initiator of the transaction.\n                            - DEVICE - Device is the initiator of the transaction.\n                          example: CONSUMER\n                        refundInfo:\n                          title: Refund\n                          type: object\n                          description: Data model for the complex type Refund.\n                          properties:\n                            originalTransactionId:\n                              $ref: '#/components/schemas/SendOTPRequest/properties/consentRequestId'\n                            refundReason:\n                              title: RefundReason\n                              type: string\n                              minLength: 1\n                              maxLength: 128\n                              description: Reason for the refund.\n                              example: Free text indicating reason for the refund.\n                          required:\n                            - originalTransactionId\n                        balanceOfPayments:\n                          title: BalanceOfPayments\n                          type: string\n                          pattern: '^[1-9]\\d{2}$'\n                          description: |\n                            (BopCode) The API data type [BopCode](https://www.imf.org/external/np/sta/bopcode/)\n                            is a JSON String of 3 characters, consisting of digits only.\n                            Negative numbers are not allowed. A leading zero is not allowed.\n                          example: 123\n                      required:\n                        - scenario\n                        - initiator\n                        - initiatorType\n                  description: Type of transaction.\n                expiration:\n                  type: string\n                  description: |\n                    Date and time until when the transaction request is valid. It can be set to get a quick failure in case the peer FSP takes too long to respond.\n                  example: '2016-05-24T08:38:08.699-04:00'\n              required:\n                - transactionRequestId\n                - sourceAccountId\n                - consentId\n                - payee\n                - payer\n                - amountType\n                - amount\n                - transactionType\n                - expiration\n            example:\n              transactionRequestId: 8d34f91d-d078-4077-8263-2c047876fcf6\n              sourceAccountId: dfspa.alice.1234\n              consentId: '111'\n              payee:\n                partyIdInfo:\n                  partyIdType: MSISDN\n                  partyIdentifier: +44 1234 5678\n                  fspId: dfspb\n              payer:\n                personalInfo:\n                  complexName:\n                    firstName: Alice\n                    lastName: K\n                partyIdInfo:\n                  partyIdType: MSISDN\n                  partyIdentifier: +44 8765 4321\n                  fspId: dfspa\n              amountType: SEND\n              amount:\n                amount: '100'\n                currency: USD\n              transactionType:\n                scenario: TRANSFER\n                initiator: PAYER\n                initiatorType: CONSUMER\n              expiration: '2020-07-15T22:17:28.985-01:00'\n      responses:\n        '202':\n          $ref: '#/paths/~1sendOTP/post/responses/202'\n        '400':\n          $ref: '#/paths/~1login/post/responses/400'\n        '401':\n          $ref: '#/paths/~1login/post/responses/401'\n        '403':\n          $ref: '#/paths/~1login/post/responses/403'\n        '404':\n          $ref: '#/paths/~1login/post/responses/404'\n        '405':\n          $ref: '#/paths/~1login/post/responses/405'\n        '406':\n          $ref: '#/paths/~1login/post/responses/406'\n        '501':\n          $ref: '#/paths/~1login/post/responses/501'\n        '503':\n          $ref: '#/paths/~1login/post/responses/503'\n  '/thirdpartyRequests/transactions/{ID}/authorizations':\n    post:\n      tags:\n        - thirdpartyRequests\n      operationId: VerifyThirdPartyAuthorization\n      summary: VerifyThirdPartyAuthorization\n      description: |\n        The HTTP request `POST /thirdpartyRequests/transactions/{id}/authorizations` is used by the DFSP to verify a third party authorization.\n      parameters:\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/0'\n        - $ref: '#/paths/~1login/post/parameters/0'\n        - $ref: '#/paths/~1login/post/parameters/1'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/2'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/3'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/4'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/5'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/6'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/7'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/8'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/9'\n      requestBody:\n        description: The thirdparty authorization details to verify\n        required: true\n        content:\n          application/json:\n            schema:\n              title: ThirdpartyRequestsTransactionsIDAuthorizationsPostRequest\n              type: object\n              description: 'The object sent in the POST /thirdpartyRequests/transactions/{id}/authorizations request.'\n              properties:\n                challenge:\n                  type: string\n                  description: Base64 encoded binary string - the original challenge.\n                value:\n                  allOf:\n                    - $ref: '#/paths/~1thirdpartyRequests~1transactions~1%7BID%7D~1authorizations/put/requestBody/content/application~1json/schema/properties/value/allOf/0'\n                  description: Base64 encoded binary string - the signed challenge\n                consentId:\n                  allOf:\n                    - $ref: '#/components/schemas/SendOTPRequest/properties/consentRequestId'\n                  description: |\n                    Common ID between the PISP and FSP for the Consent object This tells DFSP and auth-service which constent allows the PISP to initiate transaction.\n                sourceAccountId:\n                  allOf:\n                    - $ref: '#/paths/~1store~1consentRequests~1%7BID%7D/post/requestBody/content/application~1json/schema/properties/accountId'\n                  description: 'DFSP specific account identifiers, e.g. `dfspa.alice.1234`'\n                status:\n                  type: string\n                  enum:\n                    - PENDING\n                  description: The status of the authorization. This MUST be PENDING for a POST request\n              required:\n                - challenge\n                - value\n                - consentId\n                - sourceAccountId\n                - status\n            example:\n              challenge: \u003cQuoteResponse object\u003e\n              value: \u003cbase64 encoded binary - the signed quote response object\u003e\n              consentId: 8d34f91d-d078-4077-8263-2c0498dhbjr\n              sourceAccountId: dfspa.alice.1234\n              status: PENDING\n      responses:\n        '202':\n          $ref: '#/paths/~1sendOTP/post/responses/202'\n        '400':\n          $ref: '#/paths/~1login/post/responses/400'\n        '401':\n          $ref: '#/paths/~1login/post/responses/401'\n        '403':\n          $ref: '#/paths/~1login/post/responses/403'\n        '404':\n          $ref: '#/paths/~1login/post/responses/404'\n        '405':\n          $ref: '#/paths/~1login/post/responses/405'\n        '406':\n          $ref: '#/paths/~1login/post/responses/406'\n        '501':\n          $ref: '#/paths/~1login/post/responses/501'\n        '503':\n          $ref: '#/paths/~1login/post/responses/503'\n    put:\n      tags:\n        - thirdpartyRequests\n        - sampled\n      operationId: UpdateThirdpartyAuthorization\n      summary: UpdateThirdpartyAuthorization\n      description: |\n        The HTTP request `PUT /thirdpartyRequests/transactions/{id}/authorizations` is used by the auth-service to update a thirdparty authorization after successful validation.\n        For an unsuccessful authorization result, the `PUT /thirdpartyRequests/transactions/{id}/authorizations/error` will be called by the auth-service, instead of this endpoint.\n      parameters:\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/0'\n        - $ref: '#/paths/~1login/post/parameters/1'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/2'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/3'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/4'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/5'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/6'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/7'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/8'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/9'\n      requestBody:\n        description: The thirdparty authorization details to update\n        required: true\n        content:\n          application/json:\n            schema:\n              title: ThirdpartyRequestsTransactionsIDAuthorizationsPutResponse\n              type: object\n              description: 'The object sent in the PUT /thirdpartyRequests/transactions/{id}/authorizations request.'\n              properties:\n                challenge:\n                  type: string\n                  description: Base64 encoded binary string - the original challenge.\n                value:\n                  allOf:\n                    - type: string\n                      pattern: '^[A-Za-z0-9-_]+[=]{0,2}$'\n                      description: |\n                        The API data type BinaryString is a JSON String.\n                        The string is a base64url  encoding of a string of raw bytes,\n                        where padding (character ‘=’) is added at the end of the data if\n                        needed to ensure that the string is a multiple of 4 characters.\n                        The length restriction indicates the allowed number of characters.\n                  description: Base64 encoded binary string - the signed challenge.\n                consentId:\n                  allOf:\n                    - $ref: '#/components/schemas/SendOTPRequest/properties/consentRequestId'\n                  description: |\n                    Common ID between the PISP and FSP for the Consent object This tells DFSP and auth-service which consent allows the PISP to initiate transaction.\n                sourceAccountId:\n                  allOf:\n                    - $ref: '#/paths/~1store~1consentRequests~1%7BID%7D/post/requestBody/content/application~1json/schema/properties/accountId'\n                  description: 'DFSP specific account identifiers, e.g. `dfspa.alice.1234`'\n                status:\n                  type: string\n                  enum:\n                    - VERIFIED\n                  description: The status of the authorization. This value must be `VERIFIED` for a PUT request.\n              required:\n                - challenge\n                - value\n                - consentId\n                - sourceAccountId\n                - status\n            example:\n              challenge: \u003cQuoteResponse object\u003e\n              value: \u003cbase64 encoded binary - the signed quote response object\u003e\n              consentId: 8d34f91d-d078-4077-8263-2c0498dhbjr\n              sourceAccountId: dfspa.alice.1234\n              status: VERIFIED\n      responses:\n        '200':\n          $ref: '#/paths/~1login/post/responses/200'\n        '400':\n          $ref: '#/paths/~1login/post/responses/400'\n        '401':\n          $ref: '#/paths/~1login/post/responses/401'\n        '403':\n          $ref: '#/paths/~1login/post/responses/403'\n        '404':\n          $ref: '#/paths/~1login/post/responses/404'\n        '405':\n          $ref: '#/paths/~1login/post/responses/405'\n        '406':\n          $ref: '#/paths/~1login/post/responses/406'\n        '501':\n          $ref: '#/paths/~1login/post/responses/501'\n        '503':\n          $ref: '#/paths/~1login/post/responses/503'\n  /authorizations:\n    post:\n      tags:\n        - authorizations\n      operationId: OutboundAuthorizationsPost\n      summary: Outbound Authorizations endpoint\n      description: DFSP Requests Authorization of Transaction from the End User\n      parameters:\n        - $ref: '#/paths/~1login/post/parameters/0'\n        - $ref: '#/paths/~1login/post/parameters/1'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/2'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/3'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/4'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/5'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/6'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/7'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/8'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/9'\n      requestBody:\n        description: Authorization request details\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/OutboundAuthorizationsPostRequest'\n            example:\n              authenticationType: U2F\n              retriesLeft: '1'\n              amount:\n                currency: USD\n                amount: '124.45'\n              transactionId: 2f169631-ef99-4cb1-96dc-91e8fc08f539\n              transactionRequestId: 02e28448-3c05-4059-b5f7-d518d0a2d8ea\n              quote:\n                transferAmount:\n                  currency: USD\n                  amount: '124.45'\n                payeeReceiveAmount:\n                  currency: USD\n                  amount: '123.45'\n                payeeFspFee:\n                  currency: USD\n                  amount: '1.00'\n                payeeFspCommission:\n                  currency: USD\n                  amount: '0'\n                expiration: '2020-08-24T08:38:08.699-04:00'\n                geoCode:\n                  latitude: '+45.4215'\n                  longitude: '+75.6972'\n                ilpPacket: AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZ\n                condition: f5sqb7tBTWPd5Y8BDFdMm9BJR_MNI4isf8p8n4D5pHA\n                extensionList:\n                  extension:\n                    - key: errorDescription\n                      value: This is a more detailed error description\n      responses:\n        '202':\n          $ref: '#/paths/~1sendOTP/post/responses/202'\n        '400':\n          $ref: '#/paths/~1login/post/responses/400'\n        '401':\n          $ref: '#/paths/~1login/post/responses/401'\n        '403':\n          $ref: '#/paths/~1login/post/responses/403'\n        '404':\n          $ref: '#/paths/~1login/post/responses/404'\n        '405':\n          $ref: '#/paths/~1login/post/responses/405'\n        '406':\n          $ref: '#/paths/~1login/post/responses/406'\n        '501':\n          $ref: '#/paths/~1login/post/responses/501'\n        '503':\n          $ref: '#/paths/~1login/post/responses/503'\n  '/authorizations/{ID}':\n    parameters:\n      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/0'\n      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'\n      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/2'\n      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/3'\n      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/4'\n      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/5'\n      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/6'\n      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/7'\n      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/8'\n      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/9'\n    get:\n      tags:\n        - authorizations\n      operationId: GetAuthorizationsById\n      summary: GetAuthorizationsById\n      description: The HTTP request GET /authorizations/ is used to request the Payer to enter the applicable credentials in the Payee FSP system.\n      responses:\n        '202':\n          $ref: '#/paths/~1sendOTP/post/responses/202'\n        '400':\n          $ref: '#/paths/~1login/post/responses/400'\n        '401':\n          $ref: '#/paths/~1login/post/responses/401'\n        '403':\n          $ref: '#/paths/~1login/post/responses/403'\n        '404':\n          $ref: '#/paths/~1login/post/responses/404'\n        '405':\n          $ref: '#/paths/~1login/post/responses/405'\n        '406':\n          $ref: '#/paths/~1login/post/responses/406'\n        '501':\n          $ref: '#/paths/~1login/post/responses/501'\n        '503':\n          $ref: '#/paths/~1login/post/responses/503'\n    put:\n      tags:\n        - authorizations\n      operationId: InboundAuthorizationsIDPutResponse\n      summary: Inbound Authorizations endpoint\n      description: |\n        The callback PUT /authorizations/ is used to inform the client of the\n        result of a previously-requested authorization. The ID in the URI should\n        contain the one that was used in the POST /authorizations/ requestBody.transactionRequestId @ OUTBOUND\n      parameters:\n        - $ref: '#/paths/~1login/post/parameters/1'\n      requestBody:\n        description: Authorization request details\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/InboundAuthorizationsIDPutResponse'\n            example:\n              authenticationInfo:\n                authentication: U2F\n                authenticationValue:\n                  pinValue: '233133331'\n                  counter: '1'\n              responseType: ENTERED\n      responses:\n        '200':\n          $ref: '#/paths/~1login/post/responses/200'\n        '400':\n          $ref: '#/paths/~1login/post/responses/400'\n        '401':\n          $ref: '#/paths/~1login/post/responses/401'\n        '403':\n          $ref: '#/paths/~1login/post/responses/403'\n        '404':\n          $ref: '#/paths/~1login/post/responses/404'\n        '405':\n          $ref: '#/paths/~1login/post/responses/405'\n        '406':\n          $ref: '#/paths/~1login/post/responses/406'\n        '501':\n          $ref: '#/paths/~1login/post/responses/501'\n        '503':\n          $ref: '#/paths/~1login/post/responses/503'\n  '/authorizations/{ID}/error':\n    put:\n      summary: AuthorizationsByIDAndError\n      operationId: AuthorizationsByIDAndError\n      description: 'If the server is unable to find the transaction request, or another processing error occurs, the error callback PUT /authorizations//error is used. The  in the URI should contain the  that was used in the GET /authorizations/.'\n      tags:\n        - authorizations\n      parameters:\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/0'\n        - $ref: '#/paths/~1login/post/parameters/1'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/2'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/3'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/4'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/5'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/6'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/7'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/8'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/9'\n      requestBody:\n        description: Error information returned.\n        required: true\n        content:\n          application/json:\n            schema:\n              title: ErrorInformationObject\n              type: object\n              description: Data model for the complex type object that contains ErrorInformation.\n              properties:\n                errorInformation:\n                  title: ErrorInformation\n                  type: object\n                  description: Data model for the complex type ErrorInformation.\n                  properties:\n                    errorCode:\n                      title: ErrorCode\n                      type: string\n                      pattern: '^[1-9]\\d{3}$'\n                      description: |\n                        The API data type ErrorCode is a JSON String of four characters,\n                        consisting of digits only. Negative numbers are not allowed.\n                        A leading zero is not allowed. Each error code in the API is a\n                        four-digit number, for example, 1234, where the first number\n                        (1 in the example) represents the high-level error category,\n                        the second number (2 in the example) represents the low-level error category,\n                        and the last two numbers (34 in the example) represent the specific error.\n                      example: 5100\n                    errorDescription:\n                      title: ErrorDescription\n                      type: string\n                      minLength: 1\n                      maxLength: 128\n                      description: Error description string.\n                      example: This is an error description.\n                    extensionList:\n                      $ref: '#/paths/~1authorizations/post/requestBody/content/application~1json/schema/properties/quote/properties/extensionList'\n                  required:\n                    - errorCode\n                    - errorDescription\n              required:\n                - errorInformation\n      responses:\n        '200':\n          $ref: '#/paths/~1login/post/responses/200'\n        '400':\n          $ref: '#/paths/~1login/post/responses/400'\n        '401':\n          $ref: '#/paths/~1login/post/responses/401'\n        '403':\n          $ref: '#/paths/~1login/post/responses/403'\n        '404':\n          $ref: '#/paths/~1login/post/responses/404'\n        '405':\n          $ref: '#/paths/~1login/post/responses/405'\n        '406':\n          $ref: '#/paths/~1login/post/responses/406'\n        '501':\n          $ref: '#/paths/~1login/post/responses/501'\n        '503':\n          $ref: '#/paths/~1login/post/responses/503'\n  /login:\n    post:\n      tags:\n        - DFSPSim\n      description: The HTTP request `POST /login` is used to login to DFSP application by providing credentials.\n      summary: DFSP user login\n      operationId: DFSPLogin\n      parameters:\n        - name: Accept\n          in: header\n          required: true\n          schema:\n            type: string\n          description: |\n            The `Accept` header field indicates the version of the API the client\n            would like the server to use.\n        - name: Content-Length\n          in: header\n          required: false\n          schema:\n            type: integer\n          description: |\n            The `Content-Length` header field indicates the anticipated size of the\n            payload body. Only sent if there is a body.\n            **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes).\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/3'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DFSPLoginRequest'\n            example:\n              userName: dfspa.user.name\n              password: dfspa.user.password\n              consentRequestId: 3b346cec-47b3-4def-b870-edb255aaf6c3\n      responses:\n        '200':\n          description: OK\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                title: ErrorInformationResponse\n                type: object\n                description: Data model for the complex type object that contains an optional element ErrorInformation used along with 4xx and 5xx responses.\n                properties:\n                  errorInformation:\n                    $ref: '#/paths/~1authorizations~1%7BID%7D~1error/put/requestBody/content/application~1json/schema/properties/errorInformation'\n          headers:\n            Content-Length:\n              required: false\n              schema:\n                type: integer\n              description: |\n                The `Content-Length` header field indicates the anticipated\n                size of the payload body. Only sent if there is a body.\n                **Note:** The API supports a maximum size of 5242880 bytes\n                (5 Megabytes).\n            Content-Type:\n              schema:\n                type: string\n              required: true\n              description: The `Content-Type` header indicates the specific version of the API used to send the payload body.\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/paths/~1login/post/responses/400/content/application~1json/schema'\n          headers:\n            Content-Length:\n              $ref: '#/paths/~1login/post/responses/400/headers/Content-Length'\n            Content-Type:\n              $ref: '#/paths/~1login/post/responses/400/headers/Content-Type'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/paths/~1login/post/responses/400/content/application~1json/schema'\n          headers:\n            Content-Length:\n              $ref: '#/paths/~1login/post/responses/400/headers/Content-Length'\n            Content-Type:\n              $ref: '#/paths/~1login/post/responses/400/headers/Content-Type'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/paths/~1login/post/responses/400/content/application~1json/schema'\n          headers:\n            Content-Length:\n              $ref: '#/paths/~1login/post/responses/400/headers/Content-Length'\n            Content-Type:\n              $ref: '#/paths/~1login/post/responses/400/headers/Content-Type'\n        '405':\n          description: Method Not Allowed\n          content:\n            application/json:\n              schema:\n                $ref: '#/paths/~1login/post/responses/400/content/application~1json/schema'\n          headers:\n            Content-Length:\n              $ref: '#/paths/~1login/post/responses/400/headers/Content-Length'\n            Content-Type:\n              $ref: '#/paths/~1login/post/responses/400/headers/Content-Type'\n        '406':\n          description: Not Acceptable\n          content:\n            application/json:\n              schema:\n                $ref: '#/paths/~1login/post/responses/400/content/application~1json/schema'\n          headers:\n            Content-Length:\n              $ref: '#/paths/~1login/post/responses/400/headers/Content-Length'\n            Content-Type:\n              $ref: '#/paths/~1login/post/responses/400/headers/Content-Type'\n        '501':\n          description: Not Implemented\n          content:\n            application/json:\n              schema:\n                $ref: '#/paths/~1login/post/responses/400/content/application~1json/schema'\n          headers:\n            Content-Length:\n              $ref: '#/paths/~1login/post/responses/400/headers/Content-Length'\n            Content-Type:\n              $ref: '#/paths/~1login/post/responses/400/headers/Content-Type'\n        '503':\n          description: Service Unavailable\n          content:\n            application/json:\n              schema:\n                $ref: '#/paths/~1login/post/responses/400/content/application~1json/schema'\n          headers:\n            Content-Length:\n              $ref: '#/paths/~1login/post/responses/400/headers/Content-Length'\n            Content-Type:\n              $ref: '#/paths/~1login/post/responses/400/headers/Content-Type'\n  /authorize:\n    post:\n      tags:\n        - DFSPSim\n      description: The HTTP request `POST /authorize` is used to grant consent by a DFSP user.\n      summary: DFSP user authorization\n      operationId: DFSPAuthorize\n      parameters:\n        - $ref: '#/paths/~1login/post/parameters/0'\n        - $ref: '#/paths/~1login/post/parameters/1'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/3'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DFSPAuthorizeRequest'\n            example:\n              userName: dfspa.user.name\n              consentRequestId: 3b346cec-47b3-4def-b870-edb255aaf6c3\n      responses:\n        '200':\n          $ref: '#/paths/~1login/post/responses/200'\n        '400':\n          $ref: '#/paths/~1login/post/responses/400'\n        '401':\n          $ref: '#/paths/~1login/post/responses/401'\n        '403':\n          $ref: '#/paths/~1login/post/responses/403'\n        '404':\n          $ref: '#/paths/~1login/post/responses/404'\n        '405':\n          $ref: '#/paths/~1login/post/responses/405'\n        '406':\n          $ref: '#/paths/~1login/post/responses/406'\n        '501':\n          $ref: '#/paths/~1login/post/responses/501'\n        '503':\n          $ref: '#/paths/~1login/post/responses/503'\n  /sendOTP:\n    post:\n      tags:\n        - DFSPSim\n      description: The HTTP request `POST /sendOTP` is used to send OTP to a DFSP user (most likely through SMS).\n      summary: DFSP Send OTP\n      operationId: SendOTP\n      parameters:\n        - $ref: '#/paths/~1login/post/parameters/0'\n        - $ref: '#/paths/~1login/post/parameters/1'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/3'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SendOTPRequest'\n            example:\n              userName: dfspa.user.name\n              consentRequestId: 3b346cec-47b3-4def-b870-edb255aaf6c3\n              message: '9876'\n      responses:\n        '202':\n          description: Accepted\n        '400':\n          $ref: '#/paths/~1login/post/responses/400'\n        '401':\n          $ref: '#/paths/~1login/post/responses/401'\n        '403':\n          $ref: '#/paths/~1login/post/responses/403'\n        '404':\n          $ref: '#/paths/~1login/post/responses/404'\n        '405':\n          $ref: '#/paths/~1login/post/responses/405'\n        '406':\n          $ref: '#/paths/~1login/post/responses/406'\n        '501':\n          $ref: '#/paths/~1login/post/responses/501'\n        '503':\n          $ref: '#/paths/~1login/post/responses/503'\n  /verifyOTPorSecret:\n    post:\n      tags:\n        - DFSPSim\n      description: The HTTP request `POST /verifyOTPorSecret` is used to verify OTP or Secret received from PISP.\n      summary: /verifyOTPorSecret\n      operationId: VerifyOTPorSecret\n      parameters:\n        - $ref: '#/paths/~1login/post/parameters/0'\n        - $ref: '#/paths/~1login/post/parameters/1'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/3'\n      requestBody:\n        description: Perform verification of OTP or Secret\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/VerifyOTPorSecretRequest'\n            examples:\n              sample1:\n                value:\n                  consentRequestId: 3b346cec-47b3-4def-b870-edb255aaf6c3\n                  value: '1234'\n              sample2:\n                value:\n                  consentRequestId: 3b346cec-47b3-4def-b870-edb255aaf6c4\n                  value: xx auth secret xx\n      responses:\n        '200':\n          $ref: '#/paths/~1login/post/responses/200'\n        '400':\n          $ref: '#/paths/~1login/post/responses/400'\n        '401':\n          $ref: '#/paths/~1login/post/responses/401'\n        '403':\n          $ref: '#/paths/~1login/post/responses/403'\n        '404':\n          $ref: '#/paths/~1login/post/responses/404'\n        '405':\n          $ref: '#/paths/~1login/post/responses/405'\n        '406':\n          $ref: '#/paths/~1login/post/responses/406'\n        '501':\n          $ref: '#/paths/~1login/post/responses/501'\n        '503':\n          $ref: '#/paths/~1login/post/responses/503'\n  '/OTPorSecret/{ID}':\n    get:\n      tags:\n        - DFSPSim\n      description: 'The HTTP request `GET /OTPorSecret/{ID}` is used to get OTP or Secret from DFSP.'\n      summary: Get OTP or Secret for specified consentRequestId\n      operationId: GetOTPorSecret\n      parameters:\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/0'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/3'\n      responses:\n        '200':\n          description: Response containing details of the OTP or Secret\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetOTPorSecretResponse'\n              examples:\n                sample1:\n                  value:\n                    value: '1234'\n                sample2:\n                  value:\n                    value: xx auth secret xx\n        '400':\n          $ref: '#/paths/~1login/post/responses/400'\n        '401':\n          $ref: '#/paths/~1login/post/responses/401'\n        '403':\n          $ref: '#/paths/~1login/post/responses/403'\n        '404':\n          $ref: '#/paths/~1login/post/responses/404'\n        '405':\n          $ref: '#/paths/~1login/post/responses/405'\n        '406':\n          $ref: '#/paths/~1login/post/responses/406'\n        '501':\n          $ref: '#/paths/~1login/post/responses/501'\n        '503':\n          $ref: '#/paths/~1login/post/responses/503'\n  '/store/consentRequests/{ID}':\n    parameters:\n      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/0'\n      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'\n      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/3'\n    get:\n      tags:\n        - DFSPSim\n      operationId: GetConsentRequest\n      summary: GetConsentRequest\n      description: |\n        The HTTP request `GET /store/consentRequests/{ID}` is used by DFSP to load a specified consentRequest.\n      responses:\n        '200':\n          description: Response containing consentRequest details\n          content:\n            application/json:\n              schema:\n                $ref: '#/paths/~1store~1consentRequests~1%7BID%7D/post/requestBody/content/application~1json/schema'\n              example:\n                scopes:\n                  - accountId: dfspa.username.1234\n                    actions:\n                      - accounts.transfer\n                      - accounts.getBalance\n                  - accountId: dfspa.username.5678\n                    actions:\n                      - accounts.transfer\n                      - accounts.getBalance\n        '400':\n          $ref: '#/paths/~1login/post/responses/400'\n        '401':\n          $ref: '#/paths/~1login/post/responses/401'\n        '403':\n          $ref: '#/paths/~1login/post/responses/403'\n        '404':\n          $ref: '#/paths/~1login/post/responses/404'\n        '405':\n          $ref: '#/paths/~1login/post/responses/405'\n        '406':\n          $ref: '#/paths/~1login/post/responses/406'\n        '501':\n          $ref: '#/paths/~1login/post/responses/501'\n        '503':\n          $ref: '#/paths/~1login/post/responses/503'\n    post:\n      tags:\n        - DFSPSim\n      operationId: StoreConsentRequest\n      summary: StoreConsentRequest\n      description: |\n        The HTTP request `POST /store/consentRequests/{ID}` is used by a DFSP to store consentRequests.\n      requestBody:\n        description: The consentRequest to store\n        required: true\n        content:\n          application/json:\n            schema:\n              title: Scope\n              type: object\n              description: Scope + Account Identifier mapping for a Consent.\n              example: |\n                {\n                  accountId: \"dfsp.username.5678\",\n                  actions: [ \"accounts.transfer\", \"accounts.getBalance\" ]\n                }\n              properties:\n                accountId:\n                  title: AccountAddress\n                  type: string\n                  description: |\n                    A long-lived unique account identifier provided by the DFSP. This MUST NOT\n                    be Bank Account Number or anything that may expose a User's private bank\n                    account information.\n                  pattern: '^([0-9A-Za-z_~\\-\\.]+[0-9A-Za-z_~\\-])$'\n                  minLength: 1\n                  maxLength: 1023\n                actions:\n                  type: array\n                  items:\n                    title: ConsentScopeType\n                    type: string\n                    enum:\n                      - accounts.getBalance\n                      - accounts.transfer\n                    description: |\n                      The scopes requested for a ConsentRequest.\n                      - \"accounts.getBalance\" - Get the balance of a given account.\n                      - \"accounts.transfer\" - Initiate a transfer from an account.\n              required:\n                - accountId\n                - actions\n            example:\n              scopes:\n                - accountId: dfspa.username.1234\n                  actions:\n                    - accounts.transfer\n                    - accounts.getBalance\n                - accountId: dfspa.username.5678\n                  actions:\n                    - accounts.transfer\n                    - accounts.getBalance\n      responses:\n        '200':\n          $ref: '#/paths/~1login/post/responses/200'\n        '400':\n          $ref: '#/paths/~1login/post/responses/400'\n        '401':\n          $ref: '#/paths/~1login/post/responses/401'\n        '403':\n          $ref: '#/paths/~1login/post/responses/403'\n        '404':\n          $ref: '#/paths/~1login/post/responses/404'\n        '405':\n          $ref: '#/paths/~1login/post/responses/405'\n        '406':\n          $ref: '#/paths/~1login/post/responses/406'\n        '501':\n          $ref: '#/paths/~1login/post/responses/501'\n        '503':\n          $ref: '#/paths/~1login/post/responses/503'\ncomponents:\n  schemas:\n    Counter:\n      allOf:\n        - title: Integer\n          type: string\n          pattern: '^[1-9]\\d*$'\n          description: |\n            The API data type Integer is a JSON String consisting of digits only.\n            Negative numbers and leading zeroes are not allowed.\n            The data type is always limited to a specific number of digits.\n      description: Sequential counter used for cloning detection. Present only for U2F authentication.\n    U2FPIN:\n      title: U2FPIN\n      type: string\n      pattern: '^\\S{1,64}$'\n      minLength: 1\n      maxLength: 64\n      description: |\n        U2F challenge-response, where payer FSP verifies if the response provided by end-user device matches the previously registered key.\n    U2FPinValue:\n      title: U2FPinValue\n      type: object\n      description: |\n        U2F challenge-response, where payer FSP verifies if the response provided by end-user device matches the previously registered key.\n      properties:\n        pinValue:\n          allOf:\n            - $ref: '#/components/schemas/U2FPIN'\n          description: U2F challenge-response.\n        counter:\n          allOf:\n            - $ref: '#/components/schemas/Counter'\n          description: Sequential counter used for cloning detection. Present only for U2F authentication.\n    AuthenticationValue:\n      title: AuthenticationValue\n      oneOf:\n        - title: OtpValue\n          type: string\n          pattern: '^\\d{3,10}$'\n          description: |\n            The API data type OtpValue is a JSON String of 3 to 10 characters,\n            consisting of digits only. Negative numbers are not allowed.\n            One or more leading zeros are allowed.\n        - title: QRCODE\n          type: string\n          minLength: 1\n          maxLength: 64\n          description: QR code used as a One Time Password.\n        - $ref: '#/components/schemas/U2FPinValue'\n      description: Contains the authentication value. The format depends on the authentication type used in the AuthenticationInfo complex type.\n    AuthenticationInfo:\n      title: AuthenticationInfo\n      type: object\n      description: Data model for the complex type AuthenticationInfo.\n      properties:\n        authentication:\n          title: AuthorizationChannelType\n          type: string\n          enum:\n            - OTP\n            - QRCODE\n            - U2F\n          description: |\n            Below are the allowed values for the enumeration AuthorizationChannelType.\n            - OTP - One-time password generated by the Payer FSP.\n            - QRCODE - QR code used as One Time Password.\n            - U2F - U2F is a new addition isolated to Thirdparty stream.\n\n            This is based on FSPIOP `AuthenticationType` with U2F added.\n          example: U2F\n        authenticationValue:\n          $ref: '#/components/schemas/AuthenticationValue'\n      required:\n        - authentication\n        - authenticationValue\n    SecretValue:\n      title: SecretValue\n      type: string\n      minLength: 1\n      maxLength: 128\n    UserName:\n      title: UserName\n      type: string\n      minLength: 1\n      maxLength: 25\n    Password:\n      title: Password\n      type: string\n      minLength: 1\n      maxLength: 25\n    Message:\n      title: Message\n      type: string\n      description: OTP value or error message\n    InboundAuthorizationsIDPutResponse:\n      description: information about result of required (via POST) /authorization\n      title: AuthorizationsIDPutResponse\n      type: object\n      properties:\n        authenticationInfo:\n          $ref: '#/components/schemas/AuthenticationInfo'\n        responseType:\n          title: AuthorizationResponse\n          type: string\n          enum:\n            - ENTERED\n            - REJECTED\n            - RESEND\n          description: |\n            Below are the allowed values for the enumeration.\n            - ENTERED - Consumer entered the authentication value.\n            - REJECTED - Consumer rejected the transaction.\n            - RESEND - Consumer requested to resend the authentication value.\n          example: ENTERED\n      required:\n        - responseType\n    OutboundAuthorizationsPostRequest:\n      title: authorizationsRequest\n      description: POST /authorizations Request object\n      type: object\n      properties:\n        authenticationType:\n          $ref: '#/components/schemas/AuthenticationInfo/properties/authentication'\n        retriesLeft:\n          $ref: '#/components/schemas/Counter/allOf/0'\n        amount:\n          title: Money\n          type: object\n          description: Data model for the complex type Money.\n          properties:\n            currency:\n              title: Currency\n              description: |\n                The currency codes defined in\n                [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html)\n                as three-letter alphabetic codes are used as the standard naming representation for currencies.\n              type: string\n              minLength: 3\n              maxLength: 3\n              enum:\n                - AED\n                - AFN\n                - ALL\n                - AMD\n                - ANG\n                - AOA\n                - ARS\n                - AUD\n                - AWG\n                - AZN\n                - BAM\n                - BBD\n                - BDT\n                - BGN\n                - BHD\n                - BIF\n                - BMD\n                - BND\n                - BOB\n                - BRL\n                - BSD\n                - BTN\n                - BWP\n                - BYN\n                - BZD\n                - CAD\n                - CDF\n                - CHF\n                - CLP\n                - CNY\n                - COP\n                - CRC\n                - CUC\n                - CUP\n                - CVE\n                - CZK\n                - DJF\n                - DKK\n                - DOP\n                - DZD\n                - EGP\n                - ERN\n                - ETB\n                - EUR\n                - FJD\n                - FKP\n                - GBP\n                - GEL\n                - GGP\n                - GHS\n                - GIP\n                - GMD\n                - GNF\n                - GTQ\n                - GYD\n                - HKD\n                - HNL\n                - HRK\n                - HTG\n                - HUF\n                - IDR\n                - ILS\n                - IMP\n                - INR\n                - IQD\n                - IRR\n                - ISK\n                - JEP\n                - JMD\n                - JOD\n                - JPY\n                - KES\n                - KGS\n                - KHR\n                - KMF\n                - KPW\n                - KRW\n                - KWD\n                - KYD\n                - KZT\n                - LAK\n                - LBP\n                - LKR\n                - LRD\n                - LSL\n                - LYD\n                - MAD\n                - MDL\n                - MGA\n                - MKD\n                - MMK\n                - MNT\n                - MOP\n                - MRO\n                - MUR\n                - MVR\n                - MWK\n                - MXN\n                - MYR\n                - MZN\n                - NAD\n                - NGN\n                - NIO\n                - NOK\n                - NPR\n                - NZD\n                - OMR\n                - PAB\n                - PEN\n                - PGK\n                - PHP\n                - PKR\n                - PLN\n                - PYG\n                - QAR\n                - RON\n                - RSD\n                - RUB\n                - RWF\n                - SAR\n                - SBD\n                - SCR\n                - SDG\n                - SEK\n                - SGD\n                - SHP\n                - SLL\n                - SOS\n                - SPL\n                - SRD\n                - STD\n                - SVC\n                - SYP\n                - SZL\n                - THB\n                - TJS\n                - TMT\n                - TND\n                - TOP\n                - TRY\n                - TTD\n                - TVD\n                - TWD\n                - TZS\n                - UAH\n                - UGX\n                - USD\n                - UYU\n                - UZS\n                - VEF\n                - VND\n                - VUV\n                - WST\n                - XAF\n                - XCD\n                - XDR\n                - XOF\n                - XPF\n                - YER\n                - ZAR\n                - ZMW\n                - ZWD\n              example: USD\n            amount:\n              title: Amount\n              type: string\n              pattern: '^([0]|([1-9][0-9]{0,17}))([.][0-9]{0,3}[1-9])?$'\n              description: |\n                The API data type Amount is a JSON String in a canonical format that is\n                restricted by a regular expression for interoperability reasons.\n                This pattern does not allow any trailing zeroes at all, but allows an amount\n                without a minor currency unit. It also only allows four digits in the minor\n                currency unit; a negative value is not allowed. Using more than 18 digits\n                in the major currency unit is not allowed.\n              example: 123.45\n          required:\n            - currency\n            - amount\n        transactionId:\n          $ref: '#/components/schemas/SendOTPRequest/properties/consentRequestId'\n        transactionRequestId:\n          $ref: '#/components/schemas/SendOTPRequest/properties/consentRequestId'\n        quote:\n          title: QuotesIDPutResponse\n          type: object\n          description: 'The object sent in the PUT /quotes/{ID} callback.'\n          properties:\n            transferAmount:\n              $ref: '#/components/schemas/OutboundAuthorizationsPostRequest/properties/amount'\n            payeeReceiveAmount:\n              $ref: '#/components/schemas/OutboundAuthorizationsPostRequest/properties/amount'\n            payeeFspFee:\n              $ref: '#/components/schemas/OutboundAuthorizationsPostRequest/properties/amount'\n            payeeFspCommission:\n              $ref: '#/components/schemas/OutboundAuthorizationsPostRequest/properties/amount'\n            expiration:\n              $ref: '#/paths/~1consents/post/requestBody/content/application~1json/schema/properties/revokedAt'\n            geoCode:\n              title: GeoCode\n              type: object\n              description: |\n                Data model for the complex type GeoCode.\n                Indicates the geographic location from where the transaction was initiated.\n              properties:\n                latitude:\n                  title: Latitude\n                  type: string\n                  pattern: '^(\\+|-)?(?:90(?:(?:\\.0{1,6})?)|(?:[0-9]|[1-8][0-9])(?:(?:\\.[0-9]{1,6})?))$'\n                  description: |\n                    The API data type Latitude is a JSON String in a lexical format that is\n                    restricted by a regular expression for interoperability reasons.\n                  example: '+45.4215'\n                longitude:\n                  title: Longitude\n                  type: string\n                  pattern: '^(\\+|-)?(?:180(?:(?:\\.0{1,6})?)|(?:[0-9]|[1-9][0-9]|1[0-7][0-9])(?:(?:\\.[0-9]{1,6})?))$'\n                  description: |\n                    The API data type Longitude is a JSON String in a lexical format that\n                    is restricted by a regular expression for interoperability reasons.\n                  example: '+75.6972'\n              required:\n                - latitude\n                - longitude\n            ilpPacket:\n              title: IlpPacket\n              type: string\n              pattern: '^[A-Za-z0-9-_]+[=]{0,2}$'\n              minLength: 1\n              maxLength: 32768\n              description: Information for recipient (transport layer information).\n              example: AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA\n            condition:\n              title: IlpCondition\n              type: string\n              pattern: '^[A-Za-z0-9-_]{43}$'\n              maxLength: 48\n              description: Condition that must be attached to the transfer by the Payer.\n              example: f5sqb7tBTWPd5Y8BDFdMm9BJR_MNI4isf8p8n4D5pHA\n            extensionList:\n              title: ExtensionList\n              type: object\n              description: |\n                Data model for the complex type ExtensionList.\n                An optional list of extensions, specific to deployment.\n              properties:\n                extension:\n                  type: array\n                  items:\n                    title: Extension\n                    type: object\n                    description: Data model for the complex type Extension.\n                    properties:\n                      key:\n                        title: ExtensionKey\n                        type: string\n                        minLength: 1\n                        maxLength: 32\n                        description: Extension key.\n                      value:\n                        title: ExtensionValue\n                        type: string\n                        minLength: 1\n                        maxLength: 128\n                        description: Extension value.\n                    required:\n                      - key\n                      - value\n                  minItems: 1\n                  maxItems: 16\n                  description: Number of Extension elements.\n              required:\n                - extension\n          required:\n            - transferAmount\n            - expiration\n            - ilpPacket\n            - condition\n      required:\n        - authenticationType\n        - retriesLeft\n        - amount\n        - transactionId\n        - transactionRequestId\n        - quote\n    DFSPLoginRequest:\n      title: DFSPLoginRequest\n      type: object\n      description: POST /login request\n      properties:\n        userName:\n          $ref: '#/components/schemas/UserName'\n        password:\n          $ref: '#/components/schemas/Password'\n        consentRequestId:\n          $ref: '#/components/schemas/SendOTPRequest/properties/consentRequestId'\n      required:\n        - userName\n        - password\n        - consentRequestId\n    DFSPAuthorizeRequest:\n      title: DFSPAuthorizeRequest\n      type: object\n      description: POST /authorize request\n      properties:\n        userName:\n          $ref: '#/components/schemas/UserName'\n        consentRequestId:\n          $ref: '#/components/schemas/SendOTPRequest/properties/consentRequestId'\n      required:\n        - userName\n        - consentRequestId\n    SendOTPRequest:\n      title: SendOTPRequest\n      type: object\n      description: POST /sendOTP request\n      properties:\n        userName:\n          $ref: '#/components/schemas/UserName'\n        consentRequestId:\n          title: CorrelationId\n          type: string\n          pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$'\n          description: |\n            Identifier that correlates all messages of the same sequence.\n            The API data type UUID (Universally Unique Identifier) is a JSON String\n            in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122),\n            that is restricted by a regular expression for interoperability reasons.\n            A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).\n          example: b51ec534-ee48-4575-b6a9-ead2955b8069\n        message:\n          $ref: '#/components/schemas/Message'\n      required:\n        - userName\n        - consentRequestId\n        - message\n    VerifyOTPorSecretRequest:\n      title: VerifyOTPorSecretRequest\n      type: object\n      description: POST /verifyOTPorSecret request\n      properties:\n        consentRequestId:\n          $ref: '#/components/schemas/SendOTPRequest/properties/consentRequestId'\n        value:\n          oneOf:\n            - $ref: '#/components/schemas/AuthenticationValue/oneOf/0'\n            - $ref: '#/components/schemas/SecretValue'\n          description: Contains the OTP or Secret value.\n      required:\n        - consentRequestId\n        - value\n    GetOTPorSecretResponse:\n      title: GetOTPorSecretResponse\n      type: object\n      description: 'Get /OTPorSecret/{ID} response'\n      properties:\n        value:\n          oneOf:\n            - $ref: '#/components/schemas/AuthenticationValue/oneOf/0'\n            - $ref: '#/components/schemas/SecretValue'\n          description: Contains the OTP or Secret value.\n      required:\n        - value\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /consentRequests: post: operation \"CreateConsentRequest\": parameters: parse parameter \"\": resolve \"#/paths/~1login/post/parameters/0\" reference: invalid parameter reference"
}