{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/alkemyTech/OT275-server"
		},
		"file": {
			"name": "documentation.yaml",
			"size": 0,
			"path": "src/main/resources/static/documentation.yaml",
			"byteSize": 44999,
			"content": "openapi: 3.0.1\ninfo:\n  title: OT275-Server \"Somos m√°s\"\n  version: v1.0\nservers:\n  - url: http://localhost:8080\n    description: Generated server url\npaths:\n\n  /auth/register:\n\n    post:\n      tags:\n        - Auth\n      summary: Register a new \"User\" and persists it on the database.\n      operationId: register\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RegisterUserRequest'\n        required: true\n      responses:\n        \"201\":\n          description: Registration was successful, the new \"User\" is returned.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterUserResponse'\n        \"400\":\n          description: The provided body does not have a correct format or one of the validations is missing.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestRegisterUser'\n\n  /auth/login:\n\n    post:\n      tags:\n        - Auth\n      summary: Log in as an existing \"User\" and provide an access token.\n      operationId: login\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AuthenticationRequest'\n        required: true\n      responses:\n        \"200\":\n          description: The \"User\" has successfully logged in and returns an access token.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AuthenticationResponse'\n        \"400\":\n          description: The provided body does not have a correct format or one of the validations is missing.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestLoginUser'\n        \"403\":\n          description: Invalid credentials have been provided.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenLogin'\n\n  /auth/me:\n\n    security:\n      - BearerAuth: [ user ]\n    get:\n      tags:\n        - Auth\n      summary: Retrieves the data of an authenticated \"User\" through an access token.\n      operationId: me\n      responses:\n        \"200\":\n          description: Successfully retrieved the \"User\" data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserDataResponse'\n        \"403\":\n          description: No authentication has been provided.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Forbidden'\n\n  /activities:\n\n    post:\n      tags:\n        - Activities\n      operationId: create_4\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateActivityRequest'\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CreateActivityResponse'\n\n  /activities/{id}:\n\n    put:\n      tags:\n        - Activities\n      operationId: update_2\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateActivityRequest'\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UpdateActivityResponse'\n\n  /categories:\n\n    post:\n      summary: Creates a new \"Category\" and persists it to the database.\n      tags:\n        - Categories\n      operationId: create-category\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateCategoryRequest'\n      responses:\n        \"201\":\n          description: Creation was successful, the created \"Category\" is returned.\n          content:\n            application/json:\n              $ref: '#/components/schemas/GetCategoryResponse'\n        \"400\":\n          description: The provided body does not have a correct body or misses one or more of the validations.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestCategories'\n        \"403\":\n          description: Invalid Credentials were provided. Admin credentials needed\n          content:\n            application/json:\n              $ref: '#/components/schemas/Forbidden'\n    get:\n      tags:\n        - Categories\n      summary: Returns the first page of \"Categories\", listing up to ten elements, \"Link\" header may include links to subsequent pages if more than ten elements exist.\n      operationId: paginate-categories\n      responses:\n        \"200\":\n          description: The first page of results is returned, if there are no \"Categories\" in the database it returns an empty list with zero pages and no links.\n          headers:\n            Link:\n              description: Links leading to the first, last, next and / or previous page of the results if available.\n              schema:\n                $ref: '#/components/schemas/LinkHeader'\n              type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ListCategoryResponse'\n        \"403\":\n          description: Invalid Credentials were provided. User or Admin credentials needed.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Forbidden'\n\n  /categories/{id}:\n    get:\n      summary: Returns the \"Category\" resource identified by the \"id\" parameter provided in the URI path.\n      tags:\n        - Categories\n      operationId: get-category\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetCategoryResponse'\n        \"403\":\n          description: Invalid Credentials were provided. User or Admin credentials needed.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Forbidden'\n        \"404\":\n          description: The given \"id\" does not corresponds to an entry in the database\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CategoryNotFound'\n    put:\n      summary: Updates the \"Category\" resource identified by the \"id\" parameter provided in the URI path.\n      tags:\n        - Categories\n      operationId: update-category\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateCategoryRequest'\n        required: true\n      responses:\n        \"200\":\n          description: The update operation was successful. The updated \"Category\" is returned.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetCategoryResponse'\n        \"400\":\n          description: The provided body does not have a correct misses one of more of the validations.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestUpdateCategories'\n        \"403\":\n          description: Invalid Credentials were provided. Admin credentials needed.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Forbidden'\n        \"404\":\n          description: The given \"id\" does not corresponds to an entry in the database.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CategoryNotFound'\n    delete:\n      summary: Deletes the \"Category\" resource identified by the \"id\" parameter provided in the URI path, by setting the \"isSoftDeleted\" attribute to \"true\".\n      tags:\n        - News\n      operationId: delete-category\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          description: The resource has been successfully deleted.\n        \"403\":\n          description: Invalid Credentials were provided. Admin credentials needed.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Forbidden'\n        \"404\":\n          description: The given \"id\" does not corresponds to an entry in the database.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CategoryNotFound'\n\n  /comments:\n\n    post:\n      tags:\n        - Comments\n      operationId: create_2\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateCommentRequest'\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CreateCommentResponse'\n\n    get:\n      tags:\n        - Comments\n      operationId: list_6\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ListCommentResponse'\n\n  /comments/{id}:\n\n    put:\n      tags:\n        - Comments\n      operationId: update_4\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateCommentRequest'\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetCommentResponse'\n\n    delete:\n      tags:\n        - Comments\n      operationId: delete_5\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          description: OK\n\n  /contacts:\n\n    post:\n      tags:\n        - Contact\n      operationId: create_1\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateContactRequest'\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CreateContactResponse'\n\n    get:\n      tags:\n        - Contact\n      operationId: list_5\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ListContactResponse'\n\n  /members:\n\n    get:\n      tags:\n        - Members\n      operationId: list_4\n      parameters:\n        - name: pageable\n          in: query\n          required: true\n          schema:\n            $ref: '#/components/schemas/Pageable'\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ListMemberResponse'\n\n  /members/{id}:\n\n    delete:\n      tags:\n        - Members\n      operationId: delete_4\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          description: OK\n\n  /news:\n\n    post:\n      summary: Creates a \"New\" and persists it to the databse.\n      tags:\n        - News\n      operationId: create-news\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateNewsRequest'\n        required: true\n      responses:\n        \"201\":\n          description: Creation was succesfull, the created \"News\" is returned.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetNewsResponse'\n        \"400\":\n          description: The provided body does not have a correct misses one of more of the validations.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestCreateNews'\n        \"403\":\n          description: Invalid Credentials were provided. Admin credentials needed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Forbidden'\n\n    get:\n      summary: Returns the first page of \"News\", listing up to ten elements, \"Link\" header may include links to subsequent pages if more than ten elements exist\n      tags:\n        - News\n      operationId: paginate-news\n      responses:\n        \"200\":\n          description: The first page of results is returned, if there are no \"News\" in the databse it returns an emptly list with zero pages and no links\n          headers:\n            Link:\n              description: Links  leading to the first,last,next and/or previous page of  the results if available\n              schema:\n                $ref: '#/components/schemas/LinkHeader'\n              type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ListNewsResponse'\n        \"403\":\n          description: Invalid Credentials were provided. User or Admin credentials needed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Forbidden'\n\n  /news/{id}:\n\n    get:\n      summary: Returns the \"News\" resource identified by the \"id\" parameter provided in the URI path.\n      tags:\n        - News\n      operationId: get-news\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetNewsResponse'\n        \"404\":\n          description: The given \"id\" does not corresponds to an entry in the database\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NewsNotFound'\n        \"403\":\n          description: Invalid Credentials were provided. User or Admin credentials needed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Forbidden'\n\n    put:\n      summary: Updates the \"News\" resource identified by the \"id\" parameter provided in the URI path.\n      tags:\n        - News\n      operationId: update-news\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateNewsRequest'\n        required: true\n      responses:\n        \"200\":\n          description: Creation was succesfull, the created \"News\" is returned.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetNewsResponse'\n        \"400\":\n          description: The provided body does not have a correct misses one of more of the validations.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestUpdateNews'\n        \"403\":\n          description: Invalid Credentials were provided. Admin credentials needed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Forbidden'\n        \"404\":\n          description: The given \"id\" does not corresponds to an entry in the database\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NewsNotFound'\n\n    delete:\n      summary: Deletes the \"News\" resource identified by the \"id\" parameter provided in the URI path, by setting the \"isSoftDeleted\" attribute to \"true\"\n      tags:\n        - News\n      operationId: delete-news\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          description: The resource has been succesfully deleted\n        \"403\":\n          description: Invalid Credentials were provided. Admin credentials needed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Forbidden'\n        \"404\":\n          description: The given \"id\" does not corresponds to an entry in the database\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NewsNotFound'\n\n  /news/{id}/comments:\n\n    get:\n      summary: Returns a list of comments related to the \"News\" resource identified by the \"id\" paramether in the URI path.\n      tags:\n        - News\n      operationId: getWithComments\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetNewsWithCommentsResponse'\n        \"403\":\n          description: Invalid Credentials were provided. Admin credentials needed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Forbidden'\n        \"404\":\n          description: The given \"id\" does not corresponds to an entry in the database\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NewsNotFound'\n\n  /organization/public:\n\n    get:\n      tags:\n        - Organization\n      operationId: get\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetOrganizationResponse'\n\n    patch:\n      tags:\n        - Organization\n      operationId: patch\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateOrganizationRequest'\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UpdateOrganizationResponse'\n\n  /slides:\n\n    post:\n      tags:\n        - Slides\n      operationId: add\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateSlideRequest'\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetSlideResponse'\n\n    get:\n      tags:\n        - Slides\n      operationId: list\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ListSlideResponse'\n\n  /slides/{id}:\n\n    get:\n      tags:\n        - Slides\n      operationId: getBy\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetSlideResponse'\n\n    put:\n      tags:\n        - Slides\n      operationId: update_2\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateSlideRequest'\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UpdateSlideResponse'\n\n    delete:\n      tags:\n        - Slides\n      operationId: delete_2\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          description: OK\n\n  /testimonials:\n\n    security:\n      bearerAuth: [ user, admin ]\n\n    post:\n      summary: Creates a new \"Testimonial\" and persists it in the database.\n      tags:\n        - Testimonials\n      operationId: create-testimonial\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateTestimonialRequest'\n        required: true\n      responses:\n        \"201\":\n          description: Creation was successful, the created \"Testimonial\" is returned.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetTestimonialResponse'\n        \"400\":\n          description: The provided body does not have a correct body or misses one or more of the validations.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestTestimonial'\n        \"403\":\n          description: Invalid credentials were provided. User or Admin credentials needed.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Forbidden'\n\n    get:\n      tags:\n        - Testimonials\n      summary: Returns the first page of \"Testimonials\", listing up to ten elements, \"Link\" header may include links to subsequent pages if more than ten elements exist.\n      operationId: paginate-testimonials\n      responses:\n        \"200\":\n          description: The first page of results is returned, if there are no \"Testimonials\" in the database it returns an empty list with zero pages and no links.\n          headers:\n            Link:\n              description: Links leading to the first, last, next and / or previous page of the results if available.\n              schema:\n                $ref: '#/components/schemas/LinkHeader'\n              type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ListTestimonialsResponse'\n        \"403\":\n          description: Invalid credentials were provided. User or Admin credentials needed.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Forbidden'\n\n  /testimonials/{id}:\n\n    security:\n      bearerAuth: [ user, admin ]\n\n    put:\n      summary: Updates the \"Testimonial\" resource identified by the \"ID\" parameter provided in the URI path.\n      tags:\n        - Testimonials\n      operationId: update-testimonial\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateTestimonialRequest'\n        required: true\n      responses:\n        \"200\":\n          description: The update operation was successful. The updated \"Testimonial\" is returned.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetTestimonialResponse'\n        \"400\":\n          description: The provided body does not have a correct misses one of more of the validations.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestTestimonial'\n        \"403\":\n          description: Invalid credentials were provided. Admin credentials needed.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Forbidden'\n        \"404\":\n          description: The given \"ID\" does not corresponds to an entry in the database.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TestimonialNotFound'\n\n    delete:\n      summary: Deletes the \"Testimonial\" resource identified by the \"ID\" parameter provided in the URI path, by setting the \"isSoftDeleted\" attribute to \"true\".\n      tags:\n        - Testimonials\n      operationId: delete-testimonial\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"204\":\n          description: The resource has been successfully deleted.\n        \"403\":\n          description: Invalid credentials were provided. User or Admin credentials needed.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Forbidden'\n        \"404\":\n          description: The given \"ID\" does not corresponds to an entry in the database.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TestimonialNotFound'\n\n  /users:\n\n    get:\n      tags:\n        - Users\n      operationId: list\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ListUserResponse'\n\n  /users/{id}:\n\n    put:\n      tags:\n        - Users\n      operationId: update\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateUserRequest'\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UpdateUserResponse'\n\n    delete:\n      tags:\n        - Users\n      operationId: delete\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          description: OK\n\ncomponents:\n  schemas:\n    CreateTestimonialRequest:\n      required:\n        - name\n      type: object\n      properties:\n        name:\n          maxLength: 50\n          minLength: 0\n          type: string\n          example: Testimonial name\n        content:\n          maxLength: 150\n          minLength: 0\n          type: string\n          example: Testimonial content\n        image:\n          type: string\n          example: https://s3.com/image.jpg\n    UpdateTestimonialRequest:\n      required:\n        - name\n      type: object\n      properties:\n        name:\n          maxLength: 50\n          minLength: 0\n          type: string\n          example: Testimonial new name\n        content:\n          maxLength: 150\n          minLength: 0\n          type: string\n          example: Testimonial new content\n        image:\n          type: string\n          example: Testimonial new image URL\n    ListTestimonialsResponse:\n      type: object\n      properties:\n        page:\n          type: integer\n          format: int32\n          example: 0\n        size:\n          type: integer\n          format: int32\n          example: 10\n        totalPages:\n          type: integer\n          format: int32\n          example: 1\n        categories:\n          type: array\n          items:\n            $ref: '#/components/schemas/GetTestimonialResponse'\n    GetTestimonialResponse:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 1\n        name:\n          type: string\n          example: Testimonial name\n        content:\n          type: string\n          example: Testimonial content\n        image:\n          type: string\n          example: https://s3.com/image.jpg\n    BadRequestTestimonial:\n      type: object\n      properties:\n        statusCode:\n          type: integer\n          format: int64\n          example: 400\n        message:\n          type: string\n          example: Bad Request.\n        moreInfo:\n          type: array\n          items:\n            type: string\n          example:\n            - Content must be alphanumeric.\n            - Name must not be empty.\n            - Name must contain only spaces and letters.\n    TestimonialNotFound:\n      type: object\n      properties:\n        statusCode:\n          type: integer\n          format: int64\n          example: 404\n        message:\n          type: string\n          example: Object not found in database.\n        moreInfo:\n          type: array\n          items:\n            type: string\n          example: Testimonial not found.\n    UpdateUserRequest:\n      required:\n        - firstName\n        - lastName\n        - password\n      type: object\n      properties:\n        firstName:\n          type: string\n        lastName:\n          type: string\n        imageUrl:\n          type: string\n        password:\n          maxLength: 16\n          minLength: 8\n          type: string\n    UpdateUserResponse:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        firstName:\n          type: string\n        lastName:\n          type: string\n        imageUrl:\n          type: string\n    UpdateCategoryRequest:\n      required:\n        - name\n      type: object\n      properties:\n        name:\n          type: string\n          example: new category name\n        description:\n          type: string\n          example: new category description\n        imageUrl:\n          type: string\n          example: new category image\n    UpdateActivityRequest:\n      required:\n        - content\n        - imageUrl\n        - name\n      type: object\n      properties:\n        content:\n          type: string\n        imageUrl:\n          type: string\n        name:\n          type: string\n    UpdateActivityResponse:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        content:\n          type: string\n        imageUrl:\n          type: string\n        name:\n          type: string\n    CreateSlideRequest:\n      required:\n        - base64FileEncoded\n      type: object\n      properties:\n        text:\n          type: string\n        order:\n          type: integer\n          format: int32\n        base64FileEncoded:\n          type: string\n        contentType:\n          type: string\n    GetSlideResponse:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        imageUrl:\n          type: string\n        text:\n          type: string\n        position:\n          type: integer\n          format: int32\n    CreateCategoryRequest:\n      required:\n        - name\n      type: object\n      properties:\n        name:\n          type: string\n          example: new-category-name\n        description:\n          type: string\n          example: new-category-description\n        image:\n          type: string\n          example: new-category.jpg\n    CreateCategoryResponse:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n        description:\n          type: string\n        image:\n          type: string\n    RegisterUserRequest:\n      type: object\n      properties:\n        firstName:\n          type: string\n          example: Edgar Frank\n        lastName:\n          type: string\n          example: Codd\n        email:\n          type: string\n          example: edgarfrank@codd.com\n        password:\n          maxLength: 16\n          minLength: 8\n          type: string\n          example: abcd1234\n    RegisterUserResponse:\n      type: object\n      properties:\n        firstName:\n          type: string\n          example: Gueorgui\n        lastName:\n          type: string\n          example: Adelson-Velski\n        email:\n          type: string\n          example: gueorgui@adelsonvelski.com\n        token:\n          type: string\n          example: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJkYXNkYXNAb3V0bG9vay5jb20iLCJyb2xlcyI6IlJPTEVfVVNFUiIsImlhdCI6MTY2MzI2NzM4MCwiZXhwIjoxNjYzMjcyNzgwfQ.fskEFbR0mqsUuD9ATX0i_X6pIFbkoPLmbCH66BRxAu8\n    AuthenticationRequest:\n      type: object\n      properties:\n        email:\n          type: string\n          example: edsger@dijkstra.com\n        password:\n          maxLength: 16\n          minLength: 8\n          type: string\n          example: abcd1234\n    AuthenticationResponse:\n      type: object\n      properties:\n        firstName:\n          type: string\n          example: John\n        lastName:\n          type: string\n          example: Von Neumann\n        email:\n          type: string\n          example: johnvon@neumann.com\n        imageUrl:\n          type: string\n          example: https://s3.com/image.jpg\n        token:\n          type: string\n          example: eyJzdWIiOiJqb2hudm9uQG5ldW1hbm4uY29tIiwicm9sZXMiOiJST0xFX0FETUlOIiwiaWF0IjoxNjYzMjY0MDc5LCJleHAiOjE2NjMyNjk0Nzl9.oz15M17Ivy3uA7QRQluv9wzD1E5bjVqKu0Cvj4YQHkU\n    SocialMediaRequest:\n      type: object\n      properties:\n        facebookUrl:\n          type: string\n        linkedInUrl:\n          type: string\n        instagramUrl:\n          type: string\n    UserDataResponse:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 10\n        firstName:\n          type: string\n          example: Mary\n        lastName:\n          type: string\n          example: Shaw\n        email:\n          type: string\n          example: mary@shaw.com\n        imageUrl:\n          type: string\n          example: https://s3.com/image.jpg\n        role:\n          type: string\n          example: ROLE_USER\n    UpdateOrganizationRequest:\n      type: object\n      properties:\n        name:\n          type: string\n        imageUrl:\n          type: string\n        address:\n          type: string\n        phone:\n          type: string\n        email:\n          type: string\n        socialMedia:\n          $ref: '#/components/schemas/SocialMediaRequest'\n        aboutUsText:\n          type: string\n        welcomeText:\n          type: string\n    SocialMediaResponse:\n      type: object\n      properties:\n        facebookUrl:\n          type: string\n        linkedInUrl:\n          type: string\n        instagramUrl:\n          type: string\n    UpdateOrganizationResponse:\n      type: object\n      properties:\n        name:\n          type: string\n        imageUrl:\n          type: string\n        address:\n          type: string\n        phone:\n          type: string\n        email:\n          type: string\n        socialMedia:\n          $ref: '#/components/schemas/SocialMediaResponse'\n        aboutUsText:\n          type: string\n        welcomeText:\n          type: string\n    ListSlideResponse:\n      type: object\n      properties:\n        slides:\n          type: array\n          items:\n            $ref: '#/components/schemas/SlideResponse'\n    SlideResponse:\n      type: object\n      properties:\n        imageUrl:\n          type: string\n        order:\n          type: integer\n          format: int32\n    GetOrganizationResponse:\n      type: object\n      properties:\n        name:\n          type: string\n        image:\n          type: string\n        phone:\n          type: string\n        address:\n          type: string\n        slides:\n          type: array\n          items:\n            $ref: '#/components/schemas/SlideWithTextResponse'\n    SlideWithTextResponse:\n      type: object\n      properties:\n        imageUrl:\n          type: string\n        order:\n          type: integer\n          format: int32\n        text:\n          type: string\n    CommentResponse:\n      type: object\n      properties:\n        body:\n          type: string\n    ListCommentResponse:\n      type: object\n      properties:\n        comments:\n          type: array\n          items:\n            $ref: '#/components/schemas/CommentResponse'\n    GetCategoryResponse:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 1\n        description:\n          type: string\n          example: Category description\n        imageUrl:\n          type: string\n          example: Category image URL\n        name:\n          type: string\n          example: Category name\n    BadRequestRegisterUser:\n      type: object\n      properties:\n        statusCode:\n          type: integer\n          format: int64\n          example: 400\n        message:\n          type: string\n          example: Bad Request.\n        moreInfo:\n          type: array\n          items:\n            type: string\n          example:\n            - First name must contain only spaces and letters.\n            - Last name must contain only spaces and letters.\n            - Password must be between 8 and 16 characters long.\n            - Email should be valid.\n    BadRequestLoginUser:\n      type: object\n      properties:\n        statusCode:\n          type: integer\n          format: int64\n          example: 400\n        message:\n          type: string\n          example: Bad Request.\n        moreInfo:\n          type: array\n          items:\n            type: string\n          example:\n            - Email has invalid format.\n            - Password must be between 8 and 16 characters long.\n    BadRequestUpdateCategories:\n      type: object\n      properties:\n        statusCode:\n          type: integer\n          format: int64\n        message:\n          type: string\n        moreInfo:\n          type: array\n          items:\n            type: string\n          example:\n            - Name cannot be empty.\n            - Name must contain only spaces and letters.\n    BadRequestCreateNews:\n      type: object\n      properties:\n        statusCode:\n          type: integer\n          format: int64\n          example: 400\n        message:\n          type: string\n          example: Bad Request.\n        moreInfo:\n          type: array\n          items:\n            type: string\n          example:\n            - Name cannot be empty.\n            - Name must contain only spaces and letters.\n            - Name must be 50 characters or less.\n            - Text cannot be empty.\n            - Text must be alphanumeric.\n            - Image cannot be empty.\n            - Image must be alphanumeric without white spaces.\n    BadRequestUpdateNews:\n      type: object\n      properties:\n        statusCode:\n          type: integer\n          format: int64\n          example: 400\n        message:\n          type: string\n          example: Bad Request.\n        moreInfo:\n          type: array\n          items:\n            type: string\n          example:\n            - Name cannot be empty.\n            - Name must contain only spaces and letters.\n            - Name must be 50 characters or less.\n            - Text cannot be empty.\n            - Text must be alphanumeric.\n    NewsNotFound:\n      type: object\n      properties:\n        statusCode:\n          type: integer\n          format: int64\n          example: 404\n        message:\n          type: string\n          example: Object not found in database.\n        moreInfo:\n          type: array\n          items:\n            type: string\n          example: News not found.\n    CategoryNotFound:\n      type: object\n      properties:\n        statusCode:\n          type: integer\n          format: int64\n          example: 404\n        message:\n          type: string\n          example: Object not found in database.\n        moreInfo:\n          type: array\n          items:\n            type: string\n          example: Category not found.\n    ForbiddenLogin:\n      type: object\n      properties:\n        statusCode:\n          type: integer\n          format: int64\n          example: 403\n        message:\n          type: string\n          example: Invalid credentials.\n        moreInfo:\n          type: array\n          items:\n            Type: string\n          example:\n            - Invalid username or password.\n    Forbidden:\n      type: object\n      properties:\n        statusCode:\n          type: integer\n          format: int64\n          example: 403\n        message:\n          type: string\n          example: Access denied.\n        moreInfo:\n          type: array\n          items:\n            Type: string\n          example:\n            - Access Denied. Contact your administrator.\n    Pageable:\n      type: object\n      properties:\n        page:\n          minimum: 0\n          type: integer\n          format: int32\n        size:\n          minimum: 1\n          type: integer\n          format: int32\n        sort:\n          type: array\n          items:\n            type: string\n    ListNewsResponse:\n      type: object\n      properties:\n        page:\n          type: integer\n          format: int32\n          example: 0\n        size:\n          type: integer\n          format: int32\n          example: 10\n        totalPages:\n          type: integer\n          format: int32\n          example: 1\n        news:\n          type: array\n          items:\n            $ref: '#/components/schemas/GetNewsResponse'\n    LinkHeader:\n      type: string\n      example: \u003clinkToFirst\u003e;rel=\"first\";\u003clinkToLast\u003e;rel=\"last\";\u003clinkToNext\u003e;rel=\"next\";\u003clinkToLast\u003e;rel=\"last\";\n    GetNewsResponse:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 1\n        name:\n          type: string\n          example: News name\n        content:\n          type: string\n          example: News text\n        imageUrl:\n          type: string\n          example: News image URL\n        category:\n          $ref: '#/components/schemas/GetCategoryResponse'\n    CreateNewsRequest:\n      required:\n        - image\n        - name\n        - text\n      type: object\n      properties:\n        name:\n          maxLength: 50\n          minLength: 0\n          type: string\n          example: News name\n        text:\n          type: string\n          example: News text\n        image:\n          type: string\n          example: News image URL\n    UpdateNewsRequest:\n      type: object\n      properties:\n        name:\n          maxLength: 50\n          minLength: 0\n          type: string\n          example: New news name\n        content:\n          type: string\n          example: New news content\n        image:\n          type: string\n          example: New news image URL\n    GetNewsWithCommentsResponse:\n      type: object\n      properties:\n        name:\n          type: string\n          example: News Name\n        comments:\n          type: array\n          items:\n            $ref: '#/components/schemas/GetCommentResponse'\n    GetCommentResponse:\n      type: object\n      properties:\n        body:\n          type: string\n          example: Comment content\n    ListCategoryResponse:\n      type: object\n      properties:\n        page:\n          type: integer\n          format: int32\n          example: 0\n        size:\n          type: integer\n          format: int32\n          example: 10\n        totalPages:\n          type: integer\n          format: int32\n          example: 1\n        categories:\n          type: array\n          items:\n            $ref: '#/components/schemas/GetCategoryResponse'\n  securitySchemes:\n    BearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\nsecurity:\n  - BearerAuth: [ ]\ntags:\n  - name: Auth\n    description: Authentication operations for the \"Auth\" resource.\n  - name: Activities\n  - name: Categories\n    description: CRUD Operations related to the \"Category\" resource.\n  - name: Comments\n  - name: Contact\n  - name: Members\n  - name: News\n    description: CRUD Operations related to the \"News\" resource.\n  - name: Organization\n  - name: Slides\n  - name: Testimonials\n    description: CRUD Operations related to the \"Testimonial\" resource.\n  - name: Users",
			"canonicalURL": "/github.com/alkemyTech/OT275-server@9247f789a305c173dd47719067630781241504ae/-/blob/src/main/resources/static/documentation.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/alkemyTech/OT275-server/blob/9247f789a305c173dd47719067630781241504ae/src/main/resources/static/documentation.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/activities\": post: operation \"create_4\": requestBody: parse content: application/json: schema: parse schema: at src/main/resources/static/documentation.yaml:103:21: $ref: resolve \"#/components/schemas/CreateActivityRequest\": resolve: can't find value for \"components/schemas/CreateActivityRequest\""
}