{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/l7mp/l7mp"
		},
		"file": {
			"name": "l7mp-openapi.yaml",
			"size": 0,
			"path": "openapi/l7mp-openapi.yaml",
			"byteSize": 74377,
			"content": "openapi: 3.0.0\n\ninfo:\n  version: 1.0.0\n  title: L7mp control plane API\n  description: A programming interface for controlling L7mp\n\nservers:\n  - url: '/io.l7mp.api.v1'\n\ncomponents:\n  schemas:\n    io.l7mp.api.v1.Config:\n      description: Full L7mp static and runtime configuration\n      type: object\n      properties:\n        admin:\n          $ref: '#/components/schemas/io.l7mp.api.v1.Admin'\n        listeners:\n          description: A list of Listeners.\n          type: array\n          items:\n            $ref: '#/components/schemas/io.l7mp.api.v1.Listener'\n        clusters:\n          description: A list of Clusters.\n          type: array\n          items:\n            $ref: '#/components/schemas/io.l7mp.api.v1.Cluster'\n        sessions:\n          description: A list of Sessions.\n          type: array\n          items:\n            $ref: '#/components/schemas/io.l7mp.api.v1.Session'\n        rulelists:\n          description: A list of RuleLists.\n          type: array\n          items:\n            $ref: '#/components/schemas/io.l7mp.api.v1.RuleList'\n        rules:\n          description: A list of Rules.\n          type: array\n          items:\n            $ref: '#/components/schemas/io.l7mp.api.v1.Rule'\n        routes:\n          description: A list of Routes.\n          type: array\n          items:\n            $ref: '#/components/schemas/io.l7mp.api.v1.Route'\n      required:\n        - admin\n\n    io.l7mp.api.v1.AdminRequest:\n      description: >\n        Wrapper for addAdmin calls: contains only a single Admin object.\n      type: object\n      required:\n        - admin\n      properties:\n        admin:\n          $ref: '#/components/schemas/io.l7mp.api.v1.Admin'\n\n    io.l7mp.api.v1.Admin:\n      description: Static configuration\n      type: object\n      properties:\n        log_level:\n          type: string\n          description: >\n            Log verbosity, one of, from the most talkative, \"silly\",\n            \"verbose\", \"info\", \"notice\", \"warn\", \"error\", and \"silent\" (not\n            recommended). Default is \"info\".\n        log_file:\n          type: string\n          description: File to write log messages to. Default is \"stderr\".\n        access_log_path:\n          type: string\n          description: Access log (currently unimplemented).\n        strict:\n          type: boolean\n          description: >\n            Enable strict mode: validates all REST API calls against OpenAPI\n            schema (default: false).\n        offload:\n          type: boolean\n          description: >\n            Set/get kernel offload status: \"init\": initialize offload engine, \"no_init\": skip initialization, \"disable\": disable offloading\n        offload_ifs:\n          type: array\n          items:\n            type: string\n          description: >\n            Comma-separated list of interfaces for offloading: the special interface name \"all\" means to apply offloading on all interfaces\n        version:\n          type: string\n          description: Version info.\n\n    io.l7mp.api.v1.ListenerRequest:\n      description: >\n        Wrapper for addListener calls: contains only a single Listener object\n      type: object\n      required:\n        - listener\n      properties:\n        listener:\n          $ref: '#/components/schemas/io.l7mp.api.v1.Listener'\n\n    io.l7mp.api.v1.Listener:\n      description: >\n        A socket that listens for incoming connection requests, an abstraction\n        for an \"ingress port\".\n      type: object\n      required:\n        - name\n        - spec\n        - rules\n      properties:\n        name:\n          description: Name (required).\n          type: string\n        spec:\n          description: Listener specification (required).\n          type: object\n          oneOf:\n            - $ref: '#/components/schemas/io.l7mp.api.v1.HTTPListenerSpec'\n            - $ref: '#/components/schemas/io.l7mp.api.v1.WebSocketListenerSpec'\n            - $ref: '#/components/schemas/io.l7mp.api.v1.UDPListenerSpec'\n            - $ref: '#/components/schemas/io.l7mp.api.v1.TCPListenerSpec'\n            - $ref: '#/components/schemas/io.l7mp.api.v1.UnixDomainSocketListenerSpec'\n            - $ref: '#/components/schemas/io.l7mp.api.v1.JSONSocketListenerSpec'\n          discriminator:\n            propertyName: protocol\n            mapping:\n              HTTP: '#/components/schemas/io.l7mp.api.v1.HTTPListenerSpec'\n              WebSocket: '#/components/schemas/io.l7mp.api.v1.WebSocketListenerSpec'\n              UDP: '#/components/schemas/io.l7mp.api.v1.UDPListenerSpec'\n              TCP: '#/components/schemas/io.l7mp.api.v1.TCPListenerSpec'\n              UnixDomainSocket: '#/components/schemas/io.l7mp.api.v1.UnixDomainSocketListenerSpec'\n              JSONSocket: '#/components/schemas/io.l7mp.api.v1.JSONSocketListenerSpec'\n        rules:\n          description: >\n            The name of a match-action table or an inline list of match-action\n            rules (required).\n          anyOf:\n            - type: string  # reference to a named RuleList\n            - type: array\n              items:\n                $ref: '#/components/schemas/io.l7mp.api.v1.Rule'\n          #   # - $ref: '#/components/schemas/io.l7mp.api.v1.RuleList'\n        options:\n          description: Optional features.\n          type: object\n          properties:\n            track:\n              description: >\n                Sessions created by this listener will be tracked and will be\n                available after ending for a specified amount of time, to help\n                post-mortem analysis. If specified, then value must be an\n                integer, providing the number of seconds during which the\n                session will be available before deletion.\n              type: integer\n\n    io.l7mp.api.v1.HTTPListenerSpec:\n        # - protocol: HTTP\n        # - session ID: IP 5-tuple\n        # - type: session\n        # - mode: server\n      description: \n        A HTTP server specification that accepts HTTP requests at a specified\n        port.\n      type: object\n      required:\n        - protocol\n        - port\n      properties:\n        protocol:\n          type: string\n          enum:  # fixed value\n            - HTTP\n          description: The protocol, must be \"HTTP\".\n        port:\n          $ref: '#/components/schemas/io.l7mp.api.v1.Parameter.Port'\n        path:\n          type: string\n          description: HTTP URL to serve.\n\n    io.l7mp.api.v1.WebSocketListenerSpec:\n        # - protocol: WebSocket\n        # - session ID: IP 5-tuple\n        # - type: datagram-stream\n        # - mode: server\n      description: >\n        A WebSocket server specification that accepts HTTP/WebSocket requests\n        at a specified port.\n      type: object\n      required:\n        - protocol\n        - port\n      properties:\n        protocol:\n          type: string\n          enum:  # fixed value\n            - WebSocket\n          description: The protocol, must be \"WebSocket\".\n        port:\n          $ref: '#/components/schemas/io.l7mp.api.v1.Parameter.Port'\n        path:\n          type: string\n          description: HTTP URL to serve.\n\n    io.l7mp.api.v1.UDPListenerSpec:\n        # - protocol: UDP\n        # - session ID: IP 5-tuple\n        # - type: datagram-stream\n        # - mode: \"singleton/server\"\n      description: >\n        A UDP listener that accepts UDP connections in the specified\n        port. The listener may work in one of 2 possible modes. In Singleton\n        mode, the listener also expects a fully qualified remote address-port\n        pair (both connect.address or connect.port specified), connects back\n        to the remote and stops accepting further connection requests. In\n        Server mode, the listener emits a new session for each UDP packet that\n        belongs to a yet unseen connection (unknown IP 4-tuple). If a remote\n        address or port is specified (one of connect.address or connect.port\n        is specified), accept connections only from that remote address or\n        port. Default is Singleton if both connect.address and connect.port\n        are specified, otherwise Server (override with options.mode).\n      type: object\n      required:\n        - protocol\n        - port\n      properties:\n        protocol:\n          description: The protocol, must be \"UDP\".\n          type: string\n          enum:  # fixed value\n            - UDP\n        port:\n          $ref: '#/components/schemas/io.l7mp.api.v1.Parameter.Port'\n        connect:\n          $ref: '#/components/schemas/io.l7mp.api.v1.Parameter.AddressPortPair'\n        options:\n          type: object\n          properties:\n            mode:\n              description: >\n                Work in singleton mode (only a single session is handled by\n                the listener to a known remote) or server mode (a new session\n                is emitted for each new peer address/port pair).\n              type: string\n              enum:\n              - server\n              - singleton\n\n    io.l7mp.api.v1.TCPListenerSpec:\n        # - protocol: TCP\n        # - session ID: IP 5-tuple\n        # - type: datagram-stream\n        # - mode: server\n      description: |\n        A TCP server specification that accepts TCP requests at a specified\n        port.\n      type: object\n      required:\n        - protocol\n        - port\n      properties:\n        protocol:\n          type: string\n          enum:  # fixed value\n            - TCP\n          description: The protocol, must be \"TCP\".\n        port:\n          $ref: '#/components/schemas/io.l7mp.api.v1.Parameter.Port'\n\n    io.l7mp.api.v1.UnixDomainSocketListenerSpec:\n        # - protocol: UnixDomainSocket\n        # - session ID: Listener name + ID\n        # - type: byte-stream\n        # - mode: server\n      description: >\n        A Unix Domain Socket (UDS) server specification that accepts IPC\n        connection requests at a specified filename.\n      type: object\n      required:\n        - protocol\n        - filename\n      properties:\n        protocol:\n          type: string\n          enum:  # fixed value\n            - UnixDomainSocket\n          description: The protocol, must be \"UnixDomainSocket\".\n        filename:\n          type: string\n          description: File system path to bind to.\n\n    io.l7mp.api.v1.JSONSocketListenerSpec:\n        # - protocol: JSONSocket\n        # - session ID: Listener name + ID\n        # - type: datagram-stream\n        # - mode: \"singleton/server\"\n      description: >\n        This listener implements the server side of the the JSONSocket\n        datagram streaming protocol. JSONSocket implements the \"HTTP header\"\n        semantics, but on top of a dumb unreliable datagram transport like UDP\n        or pure IP. Can be established over any datagram transport, the\n        listener expects the first packet of the stream to be a fully\n        specified JSON object, which will then be copied into the session\n        metadata, and can return an arbitrary response header to the\n        client. Both the JSON request and response headers are transmitted\n        reliably, subject to user specified timeout.\n      type: object\n      required:\n        - protocol\n        - transport\n      properties:\n        protocol:\n          type: string\n          enum:  # fixed value\n            - JSONSocket\n          description: The protocol, must be \"JSONSocket\".\n        transport:\n          description: >\n            The specification of the listener that provides the transport\n            service to JSONSocket.\n          type: object\n          oneOf:\n            - $ref: '#/components/schemas/io.l7mp.api.v1.WebSocketListenerSpec'\n            - $ref: '#/components/schemas/io.l7mp.api.v1.UDPListenerSpec'\n            - $ref: '#/components/schemas/io.l7mp.api.v1.UnixDomainSocketListenerSpec'\n            - $ref: '#/components/schemas/io.l7mp.api.v1.TCPListenerSpec'\n          discriminator:\n            propertyName: protocol\n            mapping:\n              WebSocket: '#/components/schemas/io.l7mp.api.v1.WebSocketListenerSpec'\n              UDP: '#/components/schemas/io.l7mp.api.v1.UDPListenerSpec'\n              UnixDomainSocket: '#/components/schemas/io.l7mp.api.v1.UnixDomainSocketListenerSpec'\n              TCP: '#/components/schemas/io.l7mp.api.v1.TCPListenerSpec'\n\n    io.l7mp.api.v1.EndPointRequest:\n      description: >\n        Wrapper for addEndPoint calls. Contains only a single EndPoint object.\n      type: object\n      required:\n        - endpoint\n      properties:\n        endpoint:\n          $ref: '#/components/schemas/io.l7mp.api.v1.EndPoint'\n\n    io.l7mp.api.v1.ClusterRequest:\n      description: >\n        Wrapper for addCluster calls. Contains only a single Cluster object.\n      type: object\n      required:\n        - cluster\n      properties:\n        cluster:\n          $ref: '#/components/schemas/io.l7mp.api.v1.Cluster'\n\n    io.l7mp.api.v1.Cluster:\n      description: >\n        A socket that originates connections to external services, an\n        abstraction for an \"egress port\".\n      type: object\n      required:\n        - spec\n      properties:\n        name:\n          type: string\n        spec:\n          type: object\n          oneOf:\n            - $ref: '#/components/schemas/io.l7mp.api.v1.WebSocketClusterSpec'\n            - $ref: '#/components/schemas/io.l7mp.api.v1.UDPClusterSpec'\n            - $ref: '#/components/schemas/io.l7mp.api.v1.TCPClusterSpec'\n            - $ref: '#/components/schemas/io.l7mp.api.v1.UnixDomainSocketClusterSpec'\n            - $ref: '#/components/schemas/io.l7mp.api.v1.JSONSocketClusterSpec'\n            - $ref: '#/components/schemas/io.l7mp.api.v1.L7mpControllerSpec'\n            - $ref: '#/components/schemas/io.l7mp.api.v1.StdioClusterSpec'\n            - $ref: '#/components/schemas/io.l7mp.api.v1.EchoClusterSpec'\n            - $ref: '#/components/schemas/io.l7mp.api.v1.DiscardClusterSpec'\n            - $ref: '#/components/schemas/io.l7mp.api.v1.LoggerClusterSpec'\n            - $ref: '#/components/schemas/io.l7mp.api.v1.SyncClusterSpec'\n            - $ref: '#/components/schemas/io.l7mp.api.v1.JSONEncapClusterSpec'\n            - $ref: '#/components/schemas/io.l7mp.api.v1.JSONDecapClusterSpec'\n            - $ref: '#/components/schemas/io.l7mp.api.v1.PrometheusClusterSpec'\n            - $ref: '#/components/schemas/io.l7mp.api.v1.MetricClusterSpec'\n          discriminator:\n            propertyName: protocol\n            mapping:\n              WebSocket: '#/components/schemas/io.l7mp.api.v1.WebSocketClusterSpec'\n              UDP: '#/components/schemas/io.l7mp.api.v1.UDPClusterSpec'\n              TCP: '#/components/schemas/io.l7mp.api.v1.TCPClusterSpec'\n              JSONSocket: '#/components/schemas/io.l7mp.api.v1.JSONSocketClusterSpec'\n              UnixDomainSocket: '#/components/schemas/io.l7mp.api.v1.UnixDomainSocketClusterSpec'\n              L7mpController: '#/components/schemas/io.l7mp.api.v1.L7mpControllerSpec'\n              Stdio: '#/components/schemas/io.l7mp.api.v1.StdioClusterSpec'\n              Echo: '#/components/schemas/io.l7mp.api.v1.EchoClusterSpec'\n              Discard: '#/components/schemas/io.l7mp.api.v1.DiscardClusterSpec'\n              Logger: '#/components/schemas/io.l7mp.api.v1.LoggerClusterSpec'\n              Sync: '#/components/schemas/io.l7mp.api.v1.SyncClusterSpec'\n              JSONEncap: '#/components/schemas/io.l7mp.api.v1.JSONEncapClusterSpec'\n              JSONDecap: '#/components/schemas/io.l7mp.api.v1.JSONDecapClusterSpec'\n              Prometheus: '#/components/schemas/io.l7mp.api.v1.PrometheusClusterSpec'\n              Metric: '#/components/schemas/io.l7mp.api.v1.MetricClusterSpec'\n        endpoints:\n          description: The number of endpoints or a list of EndPoints.\n          anyOf:\n            - type: integer\n            - type: array\n              items:\n                $ref: '#/components/schemas/io.l7mp.api.v1.EndPoint'\n        loadbalancer:\n            $ref: '#/components/schemas/io.l7mp.api.v1.LoadBalancer'\n        options:\n          description: Optional features.\n          anyOf:\n            -  type: object\n            -  type: array\n               items: {}\n\n    io.l7mp.api.v1.PrometheusClusterSpec:\n      description: >\n        A Prometheus cluster specification that queries metrics from the proxy.\n      type: object\n      required:\n        - protocol\n      properties:\n        protocol:\n          description: The protocol, must be \"Prometheus\".\n          type: string\n          enum:  # fixed value\n            - Prometheus\n\n    io.l7mp.api.v1.MetricClusterSpec:\n      description: >\n        A Metric cluster specification that counts bytes and packets that flows trough its stream.\n      type: object\n      required:\n        - protocol\n      properties:\n        protocol:\n          description: The protocol, must be \"Metric\".\n          type: string\n          enum:  # fixed value\n            - Metric\n        byteCounterName:\n          description: The name of the byte counter, must match the regex [a-zA-Z_][a-zA-Z0-9_]* . A Prometheus metric name.\n          type: string\n        packetCounterName:\n          description: The name of the packet counter, must match the regex [a-zA-Z_][a-zA-Z0-9_]* . A Prometheus metric name.\n          type: string\n\n    io.l7mp.api.v1.WebSocketClusterSpec:\n      description: >\n        A WebSocket cluster specification that forwards HTTP/WebSocket\n        connections to an upstream cluster.\n      type: object\n      required:\n        - protocol\n        - port\n      properties:\n        protocol:\n          type: string\n          enum:  # fixed value\n            - WebSocket\n          description: The protocol, must be \"WebSocket\".\n        port:\n          $ref: '#/components/schemas/io.l7mp.api.v1.Parameter.Port'\n\n    io.l7mp.api.v1.UDPClusterSpec:\n      description: >\n        A UDP sender socket that forwards UDP connections to an upstream\n        cluster, connecting to a well-defined remote address-port pair.\n      type: object\n      required:\n        - protocol\n        - port\n      properties:\n        protocol:\n          description: The protocol, must be \"UDP\".\n          type: string\n          enum:  # fixed value\n            - UDP\n        port:\n          $ref: '#/components/schemas/io.l7mp.api.v1.Parameter.Port'\n        bind:\n          $ref: '#/components/schemas/io.l7mp.api.v1.Parameter.AddressPortPair'\n\n    io.l7mp.api.v1.TCPClusterSpec:\n      description: >\n        A TCP cluster specification that forwards TCP connections to an\n        upstream cluster.\n      type: object\n      required:\n        - protocol\n        - port\n      properties:\n        protocol:\n          type: string\n          enum:  # fixed value\n            - TCP\n          description: The protocol, must be \"TCP\".\n        port:\n          $ref: '#/components/schemas/io.l7mp.api.v1.Parameter.Port'\n        bind:\n          $ref: '#/components/schemas/io.l7mp.api.v1.Parameter.AddressPortPair'\n\n    io.l7mp.api.v1.UnixDomainSocketClusterSpec:\n      description: >\n        A Unix Domain Socket (UDS) cluster specification that forwards IPC\n        connections to an upstream cluster.\n      type: object\n      required:\n        - protocol\n      properties:\n        protocol:\n          type: string\n          enum:  # fixed value\n            - UnixDomainSocket\n          description: The protocol, must be \"UnixDomainSocket\".\n\n    io.l7mp.api.v1.JSONSocketClusterSpec:\n      description: >\n        A JSONSocket cluster specification that forwards JSONSocket\n        connections to an upstream cluster over a specified transport.\n      type: object\n      required:\n        - protocol\n        - transport\n      properties:\n        protocol:\n          type: string\n          enum:  # fixed value\n            - JSONSocket\n          description: The protocol, must be \"JSONSocket\".\n        transport:\n          description: >\n            The specification of the cluster that provides the transport\n            service to JSONSocket.\n          type: object\n          oneOf:\n            - $ref: '#/components/schemas/io.l7mp.api.v1.WebSocketClusterSpec'\n            - $ref: '#/components/schemas/io.l7mp.api.v1.UDPClusterSpec'\n            - $ref: '#/components/schemas/io.l7mp.api.v1.TCPClusterSpec'\n            - $ref: '#/components/schemas/io.l7mp.api.v1.UnixDomainSocketClusterSpec'\n            - $ref: '#/components/schemas/io.l7mp.api.v1.StdioClusterSpec'\n            - $ref: '#/components/schemas/io.l7mp.api.v1.EchoClusterSpec'\n            - $ref: '#/components/schemas/io.l7mp.api.v1.DiscardClusterSpec'\n          discriminator:\n            propertyName: protocol\n            mapping:\n              WebSocket: '#/components/schemas/io.l7mp.api.v1.WebSocketClusterSpec'\n              UDP: '#/components/schemas/io.l7mp.api.v1.UDPClusterSpec'\n              TCP: '#/components/schemas/io.l7mp.api.v1.TCPClusterSpec'\n              UnixDomainSocket: '#/components/schemas/io.l7mp.api.v1.UnixDomainSocketClusterSpec'\n              Stdio: '#/components/schemas/io.l7mp.api.v1.StdioClusterSpec'\n              Echo: '#/components/schemas/io.l7mp.api.v1.EchoClusterSpec'\n              Discard: '#/components/schemas/io.l7mp.api.v1.DiscardClusterSpec'\n        header:\n          type: array\n          items:\n            type: object\n            properties:\n              path:\n                description: >\n                  Deepcopy the session metadata into the JSONSocket header\n                  under the specified path.\n                type: object\n                required:\n                  - from\n                  - to\n                properties:\n                  from:\n                    type: string\n                    description: >\n                      JSONPointer to the key to be deepcopied from the\n                      metadata into the JSONSocket header.\n                  to:\n                    type: string\n                    description: >\n                      Target path as a JSONPointer where the specified values\n                      are copied to.\n              set:\n                description: >\n                  Set a key in the JSONSocket header to the specified constant value. \n                type: object\n                required:\n                  - key\n                  - value\n                properties:\n                  key:\n                    type: string\n                    description: JSONPointer to the key in the JSONSocket header.\n                  value:\n                    type: string\n                    description: Value to be set for the specified key.\n\n    io.l7mp.api.v1.L7mpControllerSpec:\n      description: >\n        A virtual cluster that accepts L7mp controller REST API calls.\n      type: object\n      required:\n        - protocol\n      properties:\n        protocol:\n          description: The protocol, must be \"L7mpController\".\n          type: string\n          enum:  # fixed value\n            - L7mpController\n\n    io.l7mp.api.v1.StdioClusterSpec:\n      description: >\n        A virtual cluster that writes the stream routed to it to the proxy\n        standard output and pipes back standard input into the stream. Useful\n        for debugging.\n      type: object\n      required:\n        - protocol\n      properties:\n        protocol:\n          description: The protocol, must be \"Stdio\".\n          type: string\n          enum:  # fixed value\n            - Stdio\n\n    io.l7mp.api.v1.EchoClusterSpec:\n      description: A virtual cluster that echoes back everything it receives.\n      type: object\n      required:\n        - protocol\n      properties:\n        protocol:\n          description: The protocol, must be \"Echo\".\n          type: string\n          enum:  # fixed value\n            - Echo\n\n    io.l7mp.api.v1.DiscardClusterSpec:\n      description: A virtual cluster that discards everything it receives.\n      type: object\n      required:\n        - protocol\n      properties:\n        protocol:\n          description: The protocol, must be \"Discard\".\n          type: string\n          enum:  # fixed value\n            - Discard\n\n    io.l7mp.api.v1.LoggerClusterSpec:\n      description: >\n        A virtual cluster that logs everything that passes through it to a log\n        file.\n      type: object\n      required:\n        - protocol\n      properties:\n        protocol:\n          description: The protocol, must be \"Logger\".\n          type: string\n          enum:  # fixed value\n            - Logger\n        log_file:\n          description: >\n            The file to log to. Opened it mode \"w\" (create or truncate if\n            exists). Default is '-' (stdout).\n          type: string\n        log_prefix:\n          description: Prefix log messages. Default is no prefix.\n          type: string\n\n    io.l7mp.api.v1.SyncClusterSpec:\n      description: >\n        A virtual cluster that allows multiple streams to synchronize and\n        exchange data. The Sync cluster acts as a rendezvous point for streams\n        whose metadata query evaluates to the same value (like e.g., multiple\n        WebSocket streams with the same HTTP cookie); these streams will be\n        connected into a single broadcast domain, whereby any data sent by any\n        of the streams will be boradcast to all the other streams. Useful for\n        connecting two ingress streams into a single end-to-end stream.\n      type: object\n      required:\n        - protocol\n        - query\n      properties:\n        protocol:\n          description: The protocol, must be \"Sync\".\n          type: string\n          enum:  # fixed value\n            - Sync\n        query:\n          description: >\n            A JSONPredicate query to the stream metadata. All streams for\n            which the query evaluates to the same value will be connected into\n            a single broadcast domain.\n          type: string\n\n    io.l7mp.api.v1.JSONEncapClusterSpec:\n      description: >\n        A virtual cluster to encapsulate data in JSON. Session metadata is\n        copied under the \"/metadata\" JSON path and content is copied under\n        \"/payload\".\n      type: object\n      required:\n        - protocol\n      properties:\n        protocol:\n          description: The protocol, must be \"JSONEncap\".\n          type: string\n          enum:  # fixed value\n            - JSONEncap\n\n    io.l7mp.api.v1.JSONDecapClusterSpec:\n      description: >\n        A virtual cluster to decapsulates data from JSON. In particular,\n        content from under \"/payload\" JSON path is decapsulated and returned\n        and everything else is dropped.\n      type: object\n      required:\n        - protocol\n      properties:\n        protocol:\n          description: The protocol, must be \"JSONDecap\".\n          type: string\n          enum:  # fixed value\n            - JSONDecap\n\n    io.l7mp.api.v1.EndPoint:\n      description: >\n        A particular upstream backend that accepts connects through a Cluster.\n      type: object\n      required:\n        - spec\n      properties:\n        name:\n          description: >\n            Name (optional, a unique endpoint name will be assigned\n            automatically if not specified.)\n          type: string\n        spec:\n          $ref: '#/components/schemas/io.l7mp.api.v1.EndPointSpec'\n\n    # TODO: specialize for different endpoint types\n    io.l7mp.api.v1.EndPointSpec:\n      description: A generic endpoint specification.\n      type: object\n      required:\n        - address\n      properties:\n        address:\n          anyOf:\n            - type: string  # Unix Domain Socket filename\n            - $ref: '#/components/schemas/io.l7mp.api.v1.Parameter.Address'\n        weight:\n          description: Weight of the endpoint used in load-balancing.\n          type: integer\n\n    io.l7mp.api.v1.LoadBalancer:\n      description: Load-balancer specification.\n      type: object\n      required:\n        - policy\n      properties:\n        policy:\n          type: string\n          description: >\n            Load-balancing policy. The \"Trivial\" load-balancer always chooses\n            the first endpoint. The \"ConsistentHash\" (alias for \"HashRing\")\n            chooses an endpoint based on hashing the \"LoadBalancer.key\" field\n            (or randomly if no key is specified). It provides soft session\n            affinity (map sessions to the same endpoint with high probability\n            even when adding/removing endpoints) and takes endpoint weights\n            into account (so \"HashRing\" with no key specified will implement a\n            somewhat expensive form of weighted random load-balancing).\n        key:\n          description: >\n            The JSON path to the metadata field to hash on (optional).\n          type: string\n\n    io.l7mp.api.v1.RouteRequest:\n      description: >\n        Wrapper for addRoute calls. Contains only a single Routet object.\n      type: object\n      required:\n        - route\n      properties:\n        route:\n          $ref: '#/components/schemas/io.l7mp.api.v1.Route'\n\n    io.l7mp.api.v1.Route:\n      description: The route to be assigned to a session in a math-action rule.\n      type: object\n      required:\n        - destination\n      properties:\n        name:\n          description: >\n            Name (optional, a unique name name will be assigned automatically\n            if not specified.)\n          type: string\n        destination:\n          description: >\n            The target cluster of the route (required). Can be a string in\n            which case it is the name of an existing cluster with the name\n            given, or it can be an inline cluster definition in which case a\n            new cluster will be added.\n          anyOf:\n            - type: string\n            - $ref: '#/components/schemas/io.l7mp.api.v1.Cluster'\n        ingress:\n          description: >\n            The set of transforms to be applied in the \"ingress\" (upstream,\n            from the listener to the cluster) direction (optional).\n          type: array\n          items:\n            description: >\n              An uplink transformer cluster. Can be a string in which case it\n              is the name of an existing cluster with the name given, or it\n              can be an inline cluster definition in which case a new cluster\n              will be added.\n            anyOf:\n              - type: string\n              - $ref: '#/components/schemas/io.l7mp.api.v1.Cluster'\n        egress:\n          description: >\n            The set of transforms to be applied in the \"eress\" (downstream,\n            from the cluster to the listener) direction (optional).\n          type: array\n          items:\n            description: >\n              A downlink transformer cluster. Can be a string in which case it\n              is the name of an existing cluster with the name given, or it\n              can be an inline cluster definition in which case a new cluster\n              will be added.\n            anyOf:\n              - type: string\n              - $ref: '#/components/schemas/io.l7mp.api.v1.Cluster'\n        retry:\n          description: Connection retry/timeout policy.\n          type: object\n          required:\n            - retry_on\n          properties:\n            retry_on:\n              description: >\n                One of \"never\" (never retry, default), \"connect-failure\"\n                (retry only on a failure in the connection setup phase),\n                \"disconnect\" (retry only when an already connected stream\n                disconnects), or \"always\" (\"connect-failure\" & \"disconnect\").\n              type: string\n            num_retries:\n              description: >\n                If \"retry_on\" is \"never\" then this is meaningless.  If\n                \"retry_on\" is \"connect-failure\" or \"disconnect\" then\n                \"num_retries\" means the number of times to attempt a reconnect\n                each cluster separately, so if there are two clusters in the\n                route and \"num_retries\" is 3, then retry connecting both\n                clusters 3 times. If a stream is reconnected after a\n                disconnect event, try again this many times from zero.\n              type: integer\n            timeout:\n              description: >\n                On \"connect-failure\", wait \"timeout\" msecs and then reconnect,\n                otherwise wait \"timeout\" msecs between each re-connect\n                attempts.\n              type: integer\n\n    # io.l7mp.api.v1.Match:\n    #   description: The \"filter\" part of a math-action rule that filters on session metadata.\n    #   type: object\n    #   oneOf:\n    #     - $ref: '#/components/schemas/io.l7mp.api.v1.WildcardMatch'\n    #     - $ref: '#/components/schemas/io.l7mp.api.v1.JSONPredicate'\n\n    # io.l7mp.api.v1.WildcardMatch:\n    #   description: A wildcard filter, matches everything.\n    #   type: string\n\n    io.l7mp.api.v1.JSONPredicate:\n      description: >\n        A complex filter specified as a JSON predicate, see\n        https://tools.ietf.org/html/draft-snell-json-test-07\n      type: object\n\n    io.l7mp.api.v1.Rewrite:\n      description: >\n        Metadata rewrite rule. Find or create metadata at the specified path\n        and set it to the specified value.\n      type: object\n      required:\n        - path\n        - value\n      properties:\n        path:\n          description: >\n            The JSON path (as a JSON Pointer) to the metadata field to\n            rewrite. Will be created if path does not exist.\n          type: string\n        value:\n          description: >\n            The value to rewrite the metadata field at the specified path. Can\n            be a simple string or a JSON/YAML snippet.\n\n    io.l7mp.api.v1.Action:\n      description: >\n        The \"action\" part of a math-action rule that assigns a route to the\n        matched sessions.\n      type: object\n      properties:\n        rewrite:\n          description: A list of rewrite rules.\n          type: array\n          items:\n            $ref: '#/components/schemas/io.l7mp.api.v1.Rewrite'\n        route:\n          description: A named Route or an inline Route specification.\n          anyOf:\n            - type: string  # reference to a named Route\n            - $ref: '#/components/schemas/io.l7mp.api.v1.Route'\n        apply:\n          description: A named RuleList to defer match-action processing to.\n          type: string  # reference to a named Route\n\n    io.l7mp.api.v1.RuleRequest:\n      description: >\n        Wrapper for addRule calls. Contains only a single Rule object.\n      type: object\n      required:\n        - rule\n      properties:\n        rule:\n          $ref: '#/components/schemas/io.l7mp.api.v1.Rule'\n\n    io.l7mp.api.v1.RuleRequestUnchecked:\n      description: >\n        Wrapper for addRule calls. Contains only a single Rule object or a\n        name of a Rule.\n      type: object\n      required:\n        - rule\n\n    io.l7mp.api.v1.Rule:\n      description: >\n        A math-action rule that defines the route of a connection through the\n        L7mp pipeline. May contain a match and an action. If no match is\n        specified, a wildcard match is automatically installed.\n      type: object\n      required:\n        - action\n      properties:\n        name:\n          description: Name (optional).\n          type: string\n        match:\n          # $ref: '#/components/schemas/io.l7mp.api.v1.Match'\n          $ref: '#/components/schemas/io.l7mp.api.v1.JSONPredicate'\n        action:\n          $ref: '#/components/schemas/io.l7mp.api.v1.Action'\n\n    io.l7mp.api.v1.RuleListRequest:\n      description: >\n        Wrapper for addRuleList calls. Contains only a single RuleList object.\n      type: object\n      required:\n        - rulelist\n      properties:\n        rulelist:\n          $ref: '#/components/schemas/io.l7mp.api.v1.RuleList'\n\n    io.l7mp.api.v1.RuleList:\n      description: >\n        An abstraction for a math-action table, i.e., an ordered list of\n        match-action rules with each rule specifying a matching condition on\n        metadata and an action to execute if the corresponding rule\n        matches. Rules are searched sequentially until a matching one is\n        found; if no match is found the request is dropped.\n      type: object\n      required:\n        - rules\n      properties:\n        name:\n          description: Name (optional).\n          type: string\n        rules:\n          description: A list of Rule objects.\n          type: array\n          items:\n            anyOf:\n              - type: string  # reference to a named Rule\n              - $ref: '#/components/schemas/io.l7mp.api.v1.Rule'\n\n    io.l7mp.api.v1.Metadata:\n      description: >\n        Metadata that describes all known parameters of a session, like ports\n        and IP addresses, status, HTTP headers (if relevant), etc. In general,\n        metadata are created by the listener and they can be\n        modified/queried/matched in rules/actions.\n      type: object\n\n    io.l7mp.api.v1.Stage:\n      description: \"A Stage along the ingress/egress pipeline for a session.\"\n      type: object\n      required:\n        - origin\n        - endpoint\n        - status\n      properties:\n        origin:\n          description: Name of the Cluster associated with the stage.\n          type: string\n        endpoint:\n          description: The EndPoint currently associated with the stage.\n          type: object\n        status:\n          description: Status.\n          type: string\n\n    io.l7mp.api.v1.Session:\n      description: >\n        An ongoing connection that is known by the proxy. A session is created\n        by a listener receiving a new connection request and it is processed\n        according to the match-action rules associated by the creating\n        listener.\n      type: object\n      required:\n        - name\n        - metadata\n        - source\n        - destination\n        - status\n      properties:\n        name:\n          description: Name.\n          type: string\n        metadata:\n          description: Metadata describing the state of the session.\n          type: object\n        source:\n          description: \"The spec of the Listener that emitted the session.\"\n          type: object\n        destination:\n          # description: \"The spec of the destination Cluster of the session.\"\n          $ref: '#/components/schemas/io.l7mp.api.v1.Metadata'\n        ingress:\n          description: >\n            The stages of the ingress pipeline, from the source to the\n            destination.\n          type: array\n          items:\n            $ref: '#/components/schemas/io.l7mp.api.v1.Stage'\n        egress:\n          description: >\n            The stages of the egress pipeline, from the destination to the\n            source.\n          type: array\n          items:\n            $ref: '#/components/schemas/io.l7mp.api.v1.Stage'\n        status:\n          description: Status.\n          type: string\n        events:\n          description: The last events for the session.\n          type: array\n          items:\n            type: object\n            properties:\n              event:\n                description: Name of the event.\n                type: string\n              timestamp:\n                description: Timestamp.\n                type: string\n              message:\n                description: Test description.\n                type: string\n\n    io.l7mp.api.v1.Status:\n      description: General status info.\n      type: object\n      required:\n        - message\n      properties:\n        status:\n          description: HTTP Status code.\n          type: integer\n        message:\n          description: Message.\n          type: string\n        # content:\n        #   description: Error (optional).\n\n    io.l7mp.api.v1.Parameter.Address:\n      description: A network layer (IP/IPv6) address or domain name.\n      type: string\n\n    io.l7mp.api.v1.Parameter.Port:\n      description: The valid transport protocol port.\n      type: integer\n      minimum: 1\n      maximum: 65535\n\n    io.l7mp.api.v1.Parameter.AddressPortPair:\n      description: >\n        A network layer (IP/IPv6) address/domain name and/or a transport layer\n        port.\n      type: object\n      properties:\n        address:\n          $ref: '#/components/schemas/io.l7mp.api.v1.Parameter.Address'\n        port:\n          $ref: '#/components/schemas/io.l7mp.api.v1.Parameter.Port'\n\n    io.l7mp.api.v1.JSONFormat:\n      description: Format JSON output, see \"https://www.npmjs.com/package/format-json\" for the accepted options.\n      type: string\n      enum: [ plain, terse, space, lines, diffy ]\n\n\npaths:\n  # Full config API\n  /api/v1/config:\n    get:\n      description: Get the full configuration\n      operationId: getConf\n      parameters:\n        - name: format\n          in: query\n          schema:\n            $ref: '#/components/schemas/io.l7mp.api.v1.JSONFormat'\n      responses:\n        '200':\n          description: Full configuration\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/io.l7mp.api.v1.Config'\n    post:\n      description: Reload configuration\n      operationId: setConf\n      requestBody:\n        required: true\n        content:\n          'application/json':\n            schema:\n              $ref: '#/components/schemas/io.l7mp.api.v1.Config'\n      responses:\n        '200':\n          description: Status.\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/io.l7mp.api.v1.Status'\n        '400':\n          description: Invalid configuration.\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/io.l7mp.api.v1.Status'\n  # Static config API\n  /api/v1/admin:\n    get:\n      description: Get the static configuration\n      operationId: getAdmin\n      parameters:\n        - name: format\n          in: query\n          schema:\n            $ref: '#/components/schemas/io.l7mp.api.v1.JSONFormat'\n      responses:\n        '200':\n          description: Static configuration\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/io.l7mp.api.v1.Admin'\n    post:\n      description: Apply static configuration\n      operationId: applyAdmin\n      requestBody:\n        required: true\n        content:\n          'application/json':\n            schema:\n              $ref: '#/components/schemas/io.l7mp.api.v1.AdminRequest'\n      responses:\n        '200':\n          description: Status.\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/io.l7mp.api.v1.Status'\n        '400':\n          description: Invalid configuration.\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/io.l7mp.api.v1.Status'\n  # Listener API\n  /api/v1/listeners:\n    get:\n      description: Get a list of Listeners\n      operationId: getListeners\n      parameters:\n        - name: recursive\n          in: query\n          schema:\n            type: boolean\n          description: >\n            Recursively list all sub-objects (rulelists, rules, routes,\n            clusters, etc.) of the Listener (regardless of whether the\n            sub-objects were implicitly defined in the Listener).\n        - name: format\n          in: query\n          schema:\n            $ref: '#/components/schemas/io.l7mp.api.v1.JSONFormat'\n      responses:\n        '200':\n          description: OK\n          content:\n            'application/json':\n              schema:\n                description: A list of Listeners.\n                type: array\n                items:\n                  $ref: '#/components/schemas/io.l7mp.api.v1.Listener'\n    post:\n      description: >\n        Create a Listener. Note that a Listener specification may either\n        contain a set of implicitly defined sub-objects (rulelists, rules,\n        routes, clusters, etc.) or it may refer to other named objects. In the\n        former case the corresponding objects are automatically generated (and\n        possibly automatically named too), while in the latter case the named\n        sub-objects referred to the Listener are assumed to be explicitly\n        defined using the corresponding APIs (the RuleList API, the Route API,\n        the Cluster API, etc.).\n      operationId: addListener\n      requestBody:\n        required: true\n        content:\n          'application/json':\n            schema:\n              $ref: '#/components/schemas/io.l7mp.api.v1.ListenerRequest'\n      responses:\n        '200':\n          description: Status.\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/io.l7mp.api.v1.Status'\n        '400':\n          description: Invalid configuration.\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/io.l7mp.api.v1.Status'\n  /api/v1/listeners/{name}:\n    get:\n      description: Get a named Listener\n      operationId: getListener\n      parameters:\n        - name: name\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Name of the Listener.\n        - name: recursive\n          in: query\n          schema:\n            type: boolean\n          description: >\n            Recursively list all sub-objects (rulelists, rules, routes,\n            clusters, etc.) of the Listener (regardless of whether the\n            sub-objects were implicitly defined in the Listener).\n        - name: format\n          in: query\n          schema:\n            $ref: '#/components/schemas/io.l7mp.api.v1.JSONFormat'\n      responses:\n        '200':\n          description: Status.\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/io.l7mp.api.v1.Listener'\n        '400':\n          description: Invalid configuration.\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/io.l7mp.api.v1.Status'\n    delete:\n      description: Delete a named Listener\n      operationId: deleteListener\n      parameters:\n        - name: name\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Name of the Listener.\n        - name: recursive\n          in: query\n          schema:\n            type: boolean\n          description: >\n            Recursively delete all sub-objects (rulelists, rules, routes,\n            clusters, etc.) that were implicitly defined (auto-generated) in\n            the Listener, as well as all the Sessions emitted by the Listener.\n      responses:\n        '200':\n          description: Status.\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/io.l7mp.api.v1.Status'\n        '400':\n          description: Invalid configuration.\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/io.l7mp.api.v1.Status'\n  # Cluster API\n  /api/v1/clusters:\n    get:\n      description: >\n        Get a list of Clusters. If called with the recursive flag on, it will also list the\n        endpoints of each Cluster, otherwise, only the number of endpoints is returned.\n      operationId: getClusters\n      parameters:\n        - name: recursive\n          in: query\n          schema:\n            type: boolean\n          description: Recursively list all the endpoints of the Cluster.\n        - name: format\n          in: query\n          schema:\n            $ref: '#/components/schemas/io.l7mp.api.v1.JSONFormat'\n      responses:\n        '200':\n          description: OK\n          content:\n            'application/json':\n              schema:\n                description: A list of Clusters.\n                type: array\n                items:\n                  $ref: '#/components/schemas/io.l7mp.api.v1.Cluster'\n    post:\n      description: >\n        Create a Cluster. Note that a Cluster specification may either contain\n        a set of implicitly defined endpoints, in which case endpoints are\n        automatically generated, named, and added to the cluster, or endpoints\n        may later be added/deleted explicitly using the EndPoint API.\n      operationId: addCluster\n      requestBody:\n        required: true\n        content:\n          'application/json':\n            schema:\n              $ref: '#/components/schemas/io.l7mp.api.v1.ClusterRequest'\n      responses:\n        '200':\n          description: Status.\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/io.l7mp.api.v1.Status'\n        '400':\n          description: Invalid configuration.\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/io.l7mp.api.v1.Status'\n  /api/v1/clusters/{name}:\n    get:\n      description: >\n        Get a named Cluster. If called with the recursive flag on, it will also\n        list the endpoints of the Cluster, otherwise, only the number of \n        endpoints is returned.\n      operationId: getCluster\n      parameters:\n        - name: name\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Name of the Cluster.\n        - name: recursive\n          in: query\n          schema:\n            type: boolean\n          description: Recursively list all the endpoints of the Cluster.\n        - name: format\n          in: query\n          schema:\n            $ref: '#/components/schemas/io.l7mp.api.v1.JSONFormat'\n      responses:\n        '200':\n          description: Status.\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/io.l7mp.api.v1.Cluster'\n        '400':\n          description: Invalid cluster name.\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/io.l7mp.api.v1.Status'\n    delete:\n      description: >\n        Delete the named Cluster. Note that deleting a cluster will delete the\n        corresponding endpoints as well, and it may also delete the Sessions\n        as well whose Route traverse the cluster depending on the \"recursive\"\n        query flag.\n      operationId: deleteCluster\n      parameters:\n        - name: name\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Name of the Cluster.\n        - name: recursive\n          in: query\n          schema:\n            type: boolean\n          description: >\n            Delete the Sessions whose Route traverses the Cluster, either as a\n            destination or along the ingress or the egress chain.\n      responses:\n        '200':\n          description: Status.\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/io.l7mp.api.v1.Status'\n        '400':\n          description: Invalid configuration.\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/io.l7mp.api.v1.Status'\n  # EndPoint API\n  /api/v1/clusters/{name}/endpoints:\n    get:\n      summary: Get the EndPoints of a Cluster\n      description: Get a list of EndPoints associated with a Cluster.\n      operationId: getEndPoints\n      parameters:\n        - name: name\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Name of the Cluster.\n        - name: format\n          in: query\n          schema:\n            $ref: '#/components/schemas/io.l7mp.api.v1.JSONFormat'\n      responses:\n        '200':\n          description: Status.\n          content:\n            'application/json':\n              schema:\n                description: A list of EndPoints.\n                type: array\n                items:\n                  $ref: '#/components/schemas/io.l7mp.api.v1.EndPoint'\n        '400':\n          description: Invalid configuration.\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/io.l7mp.api.v1.Status'\n    post:\n      description: Create an EndPoint in a Cluster\n      operationId: addEndPoint\n      parameters:\n        - name: name\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Name of the Cluster.\n      requestBody:\n        required: true\n        content:\n          'application/json':\n            schema:\n              $ref: '#/components/schemas/io.l7mp.api.v1.EndPointRequest'\n      responses:\n        '200':\n          description: Status.\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/io.l7mp.api.v1.Status'\n        '400':\n          description: Invalid configuration.\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/io.l7mp.api.v1.Status'\n  /api/v1/endpoints/{name}:\n    get:\n      description: Get a named EndPoint\n      operationId: getEndPoint\n      parameters:\n        - name: name\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Name of the EndPoint.\n        - name: format\n          in: query\n          schema:\n            $ref: '#/components/schemas/io.l7mp.api.v1.JSONFormat'\n      responses:\n        '200':\n          description: Status.\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/io.l7mp.api.v1.EndPoint'\n        '400':\n          description: Invalid Cluster or EndPoint name.\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/io.l7mp.api.v1.Status'\n    delete:\n      description: >\n        Delete a named EndPoint. Note that the operation will also remove the\n        EndPoint from the corresponding Cluster.\n      operationId: deleteEndPoint\n      parameters:\n        - name: name\n          in: path\n          required: true\n          schema:\n            type: string\n          description: The name of the EndPoint to delete.\n        - name: recursive\n          in: query\n          schema:\n            type: boolean\n          description: >\n            With recursive mode enabled, deleting the endpoint will disconnect\n            all sessions routed through the endpoint. This allows room for the\n            sessions whose retry policy allows it (\"retry_on=disconnect\" or\n            \"retry_on=always\") to reconnect if the cluster still has\n            functional endpoints. Otherwise, the session will fail.\n      responses:\n        '200':\n          description: Status\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/io.l7mp.api.v1.Status'\n        '400':\n          description: Invalid EndPoint name.\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/io.l7mp.api.v1.Status'\n  # RuleList API\n  /api/v1/rulelists/{name}/rules/{position}:\n    get:\n      summary: Get a Rule from a RuleList\n      description: >\n        Get the Rule from a RuleList at a particular position (the Rule itself\n        is returned).\n      operationId: getRuleFromRuleList\n      parameters:\n        - name: name\n          in: path\n          required: true\n          schema:\n            type: string\n          description: The name of the RuleList.\n        - name: position\n          in: path\n          required: true\n          schema:\n            type: integer\n          description: Position.\n        - name: recursive\n          in: query\n          schema:\n            type: boolean\n          description: >\n            Recursively list all sub-objects (routes, clusters, etc.) of the\n            Rule (regardless of whether the sub-objects were implicitly\n            defined in the Rule).\n        - name: format\n          in: query\n          schema:\n            $ref: '#/components/schemas/io.l7mp.api.v1.JSONFormat'\n      responses:\n        '200':\n          description: Status.\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/io.l7mp.api.v1.Rule'\n        '400':\n          description: Invalid rulelist name or position.\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/io.l7mp.api.v1.Status'\n    post:\n      description: >\n        Add a Rule to a RuleList. The Rule itself may be given as a string in\n        which case it is considered as the name of an existing Rule and a\n        reference to this Rule (by name) is inserted into the\n        RuleList. Otherwise, a complete Rule specification must be given; in\n        this case the Rule is created as new.  Note that a Rule specification\n        may either contain a set of implicitly defined sub-objects (routes,\n        clusters, etc.) or it may refer to other named objects. In the former\n        case the corresponding objects are automatically generated (and\n        possibly automatically named too), while in the latter case the named\n        sub-objects referred to the Rule are assumed to be explicitly defined\n        using the corresponding APIs (the Route API, the Cluster API, etc.).\n      operationId: addRuleToRuleList\n      parameters:\n        - name: name\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Name of the RuleList.\n        - name: position\n          in: path\n          required: true\n          schema:\n            type: integer\n          description: Position.\n      requestBody:\n        required: true\n        content:\n          'application/json':\n            schema:\n              $ref: '#/components/schemas/io.l7mp.api.v1.RuleRequestUnchecked'\n      responses:\n        '200':\n          description: Status.\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/io.l7mp.api.v1.Status'\n        '400':\n          description: Invalid configuration.\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/io.l7mp.api.v1.Status'\n    delete:\n      summary: Remove a Rule from a RuleList\n      description: >\n        Remove a Rule from a RuleList either by position (if the \"position\"\n        parameter is an integer) or by name (if the \"position\" parameter is a\n        string and it refers to the name of a rule existing in the\n        rulelist). Unless recursive mode is switched on (recursive=false) the\n        Rule itself will not be deleted, just removed from this rulelist; to\n        actually delete the Rule use the delete operation of the Rule API\n        (deleteRule). In recursive mode (recursive=true), deletes the Rule as\n        well (also in recursive mode); note that this will make the rule\n        unavailable to all rulelists that refer to it.\n      operationId: deleteRuleFromRuleList\n      parameters:\n        - name: name\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Name of the RuleList.\n        - name: position\n          in: path\n          required: true\n          schema:\n            anyOf:\n              - type: integer\n              - type: string\n          description: Position or name of the Rule to delete.\n        - name: recursive\n          in: query\n          schema:\n            type: boolean\n          description: >\n            Also delete the Rule recursively.\n      responses:\n        '200':\n          description: Status.\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/io.l7mp.api.v1.Status'\n        '400':\n          description: Invalid configuration.\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/io.l7mp.api.v1.Status'\n  /api/v1/rulelists:\n    get:\n      summary: Get a list of RuleLists\n      description: Get a list of RuleLists (aka match-action tables).\n      operationId: getRuleLists\n      parameters:\n        - name: recursive\n          in: query\n          schema:\n            type: boolean\n          description: >\n            Recursively list all sub-objects (rules, routes, clusters, etc.)\n            of the Rule (regardless of whether the sub-objects were implicitly\n            defined in the RuleList).\n        - name: format\n          in: query\n          schema:\n            $ref: '#/components/schemas/io.l7mp.api.v1.JSONFormat'\n      responses:\n        '200':\n          description: OK\n          content:\n            'application/json':\n              schema:\n                description: A list of RuleLists.\n                type: array\n                items:\n                  $ref: '#/components/schemas/io.l7mp.api.v1.RuleList'\n    post:\n      description: >\n        Create a RuleList. Note that a RuleList specification may either\n        contain a set of implicitly defined sub-objects (rules, routes,\n        clusters, etc.) or it may refer to other named objects. In the former\n        case the corresponding objects are automatically generated (and\n        possibly automatically named too), while in the latter case the named\n        sub-objects referred to the RuleList are assumed to be explicitly\n        defined using the corresponding APIs (the Rule API, Route API, the\n        Cluster API, etc.).\n      operationId: addRuleList\n      requestBody:\n        required: true\n        content:\n          'application/json':\n            schema:\n              $ref: '#/components/schemas/io.l7mp.api.v1.RuleListRequest'\n      responses:\n        '200':\n          description: Status.\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/io.l7mp.api.v1.Status'\n        '400':\n          description: Invalid configuration.\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/io.l7mp.api.v1.Status'\n  /api/v1/rulelists/{name}:\n    get:\n      description: Get a named RuleList\n      operationId: getRuleList\n      parameters:\n        - name: name\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Name of the RuleList.\n        - name: recursive\n          in: query\n          schema:\n            type: boolean\n          description: >\n            Recursively list all sub-objects (routes, clusters, etc.) of the\n            RuleList (regardless of whether the sub-objects were implicitly\n            defined in the RuleList).\n        - name: format\n          in: query\n          schema:\n            $ref: '#/components/schemas/io.l7mp.api.v1.JSONFormat'\n      responses:\n        '200':\n          description: Status.\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/io.l7mp.api.v1.RuleList'\n        '400':\n          description: Invalid rulelist name.\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/io.l7mp.api.v1.Status'\n    delete:\n      description: Delete a named RuleList\n      operationId: deleteRuleList\n      parameters:\n        - name: name\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Name of the RuleList.\n        - name: recursive\n          in: query\n          schema:\n            type: boolean\n          description: >\n            Recursively delete all sub-objects (rules, routes, clusters, etc.)\n            that were implicitly defined (auto-generated) in the RuleList.\n      responses:\n        '200':\n          description: Status.\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/io.l7mp.api.v1.Status'\n        '400':\n          description: Invalid configuration.\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/io.l7mp.api.v1.Status'\n  # Rule API\n  /api/v1/rules:\n    get:\n      description: Get a list of Rules\n      operationId: getRules\n      parameters:\n        - name: recursive\n          in: query\n          schema:\n            type: boolean\n          description: >\n            Recursively list all sub-objects (routes, clusters, etc.) of each\n            Rule (regardless of whether the sub-objects were implicitly\n            defined in the Rule).\n        - name: format\n          in: query\n          schema:\n            $ref: '#/components/schemas/io.l7mp.api.v1.JSONFormat'\n      responses:\n        '200':\n          description: OK\n          content:\n            'application/json':\n              schema:\n                description: A list of Rules.\n                type: array\n                items:\n                  $ref: '#/components/schemas/io.l7mp.api.v1.Rule'\n    post:\n      description: >\n        Create a Rule. Note that a Rule specification may either contain a set\n        of implicitly defined sub-objects (routes, clusters, etc.) or it may\n        refer to other named objects. In the former case the corresponding\n        objects are automatically generated (and possibly automatically named\n        too), while in the latter case the named sub-objects referred to the\n        Rule are assumed to be explicitly defined using the corresponding APIs\n        (the Route API, the Cluster API, etc.).\n      operationId: addRule\n      requestBody:\n        required: true\n        content:\n          'application/json':\n            schema:\n              $ref: '#/components/schemas/io.l7mp.api.v1.RuleRequest'\n      responses:\n        '200':\n          description: Status.\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/io.l7mp.api.v1.Status'\n        '400':\n          description: Invalid configuration.\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/io.l7mp.api.v1.Status'\n  /api/v1/rules/{name}:\n    get:\n      description: Get a named Rule\n      operationId: getRule\n      parameters:\n        - name: name\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Name of the Rule.\n        - name: recursive\n          in: query\n          schema:\n            type: boolean\n          description: >\n            Recursively list all sub-objects (routes, clusters, etc.) of the\n            Rule (regardless of whether the sub-objects were implicitly\n            defined in the Rule).\n        - name: format\n          in: query\n          schema:\n            $ref: '#/components/schemas/io.l7mp.api.v1.JSONFormat'\n      responses:\n        '200':\n          description: Status.\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/io.l7mp.api.v1.Rule'\n        '400':\n          description: Invalid rule name.\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/io.l7mp.api.v1.Status'\n    delete:\n      description: Delete a named Rule\n      operationId: deleteRule\n      parameters:\n        - name: name\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Name of the Rule.\n        - name: recursive\n          in: query\n          schema:\n            type: boolean\n          description: >\n            Recursively delete all sub-objects (routes, clusters, etc.) that\n            were implicitly defined (auto-generated) in the Rule.\n      responses:\n        '200':\n          description: Status.\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/io.l7mp.api.v1.Status'\n        '400':\n          description: Invalid configuration.\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/io.l7mp.api.v1.Status'\n  # Route API\n  /api/v1/routes:\n    get:\n      description: Get a list of Routes\n      operationId: getRoutes\n      parameters:\n        - name: recursive\n          in: query\n          schema:\n            type: boolean\n          description: >\n            Recursively list all sub-objects (i.e., the destination cluster or\n            clusters on the ingress and the egress chain) of each Route\n            (regardless of whether the sub-objects were implicitly defined in\n            the Route).\n        - name: format\n          in: query\n          schema:\n            $ref: '#/components/schemas/io.l7mp.api.v1.JSONFormat'\n      responses:\n        '200':\n          description: OK\n          content:\n            'application/json':\n              schema:\n                description: A list of Routes.\n                type: array\n                items:\n                  $ref: '#/components/schemas/io.l7mp.api.v1.Route'\n    post:\n      description: >\n        Create a Route. Note that a Route specification may either contain a\n        set of implicitly defined sub-objects (i.e., the destination cluster\n        or clusters on the ingress and the egress chain) or it may refer to\n        other named objects. In the former case the corresponding objects are\n        automatically generated (and possibly automatically named too), while\n        in the latter case the named sub-objects referred to the Route are\n        assumed to be explicitly defined using the Cluster API.\n      operationId: addRoute\n      requestBody:\n        required: true\n        content:\n          'application/json':\n            schema:\n              $ref: '#/components/schemas/io.l7mp.api.v1.RouteRequest'\n      responses:\n        '200':\n          description: Status.\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/io.l7mp.api.v1.Status'\n        '400':\n          description: Invalid configuration.\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/io.l7mp.api.v1.Status'\n  /api/v1/routes/{name}:\n    get:\n      description: Get a named Route\n      operationId: getRoute\n      parameters:\n        - name: name\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Name of the Route.\n        - name: recursive\n          in: query\n          schema:\n            type: boolean\n          description: >\n            Recursively list all sub-objects (i.e., the destination cluster or\n            clusters on the ingress and the egress chain) of the Route\n            (regardless of whether the sub-objects were implicitly defined in\n            the Route).\n        - name: format\n          in: query\n          schema:\n            $ref: '#/components/schemas/io.l7mp.api.v1.JSONFormat'\n      responses:\n        '200':\n          description: Status.\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/io.l7mp.api.v1.Route'\n        '400':\n          description: Invalid rulelist name.\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/io.l7mp.api.v1.Status'\n    delete:\n      description: Delete a named Route\n      operationId: deleteRoute\n      parameters:\n        - name: name\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: recursive\n          in: query\n          schema:\n            type: boolean\n          description: >\n            Recursively delete all sub-objects (i.e., clusters) that were\n            implicitly defined (auto-generated) in the Route.\n      responses:\n        '200':\n          description: Status.\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/io.l7mp.api.v1.Status'\n        '400':\n          description: Invalid configuration.\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/io.l7mp.api.v1.Status'\n  # Session API\n  /api/v1/sessions:\n    get:\n      description: Get a list of Sessions\n      operationId: getSessions\n      parameters:\n        - name: format\n          in: query\n          schema:\n            $ref: '#/components/schemas/io.l7mp.api.v1.JSONFormat'\n      responses:\n        '200':\n          description: OK\n          content:\n            'application/json':\n              schema:\n                description: A list of Sessions.\n                type: array\n                items:\n                  $ref: '#/components/schemas/io.l7mp.api.v1.Session'\n  /api/v1/sessions/{name}:\n    get:\n      description: Get a named Session\n      operationId: getSession\n      parameters:\n        - name: name\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: format\n          in: query\n          schema:\n            $ref: '#/components/schemas/io.l7mp.api.v1.JSONFormat'\n      responses:\n        '200':\n          description: Status.\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/io.l7mp.api.v1.Session'\n        '400':\n          description: Invalid configuration.\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/io.l7mp.api.v1.Status'\n    delete:\n      description: >\n        Delete a named Session. Note that recursively deleting a Listener that\n        emitted the session or a Cluster that the Route of the Session\n        traverses will delete the Session.\n      operationId: deleteSession\n      parameters:\n        - name: name\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Status.\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/io.l7mp.api.v1.Status'\n        '400':\n          description: Invalid configuration.\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/io.l7mp.api.v1.Status'\n\n\n# Local Variables:\n# fill-column: 78\n# End:\n",
			"canonicalURL": "/github.com/l7mp/l7mp@0b16fe8424e3029dcfac7a9ecfa02c00a6f28c9a/-/blob/openapi/l7mp-openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/l7mp/l7mp/blob/0b16fe8424e3029dcfac7a9ecfa02c00a6f28c9a/openapi/l7mp-openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/api/v1/rulelists/{name}/rules/{position}\": at 1:48405: delete: operation \"deleteRuleFromRuleList\": at 1:48415: parameters: parse parameter \"position\": at 1:49184: invalid schema:style:explode combination: (\"\":\"simple\":false)"
}