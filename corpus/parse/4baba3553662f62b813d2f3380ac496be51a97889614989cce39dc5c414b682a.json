{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/RWTH-ACS/clonemap"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "api/logger/openapi.yaml",
			"byteSize": 8790,
			"content": "# Copyright 2020 Institute for Automation of Complex Power Systems,\n# E.ON Energy Research Center, RWTH Aachen University\n#\n# This project is licensed under either of\n# - Apache License, Version 2.0\n# - MIT License\n# at your option.\n#\n# Apache License, Version 2.0:\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# MIT License:\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n# THE SOFTWARE.\n\nopenapi: \"3.0.0\"\ninfo:\n  version: \"1.0\"\n  title: Logger\n  description: API of the logger for state saving and logging\npaths:\n  /api/alive:\n    get:\n      description: indicates if ams is alive\n      responses:\n        '200':\n          description: OK - clonemap information\n          content:\n            text/plain:\n              schema:\n                type: string\n  /api/logging/{masid}/{agentid}/{topic}:\n    parameters:\n    - $ref: '#/components/parameters/masID'\n    - $ref: '#/components/parameters/agentID'\n    - $ref: '#/components/parameters/topic'\n    post:\n      description: create a new logging entry with specified log type\n      requestBody:\n        description: logging message\n        content:\n          applications/json:\n            schema:\n              $ref: '#/components/schemas/LogMessage'\n        required: true\n      responses:\n        '201':\n          description: Created\n  /api/logging/{masid}/list:\n    parameters:\n    - $ref: '#/components/parameters/masID'\n    post:\n        description: create new logging entries\n        requestBody:\n          description: logging messages\n          content:\n            applications/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/LogMessage'\n          required: true\n        responses:\n          '201':\n            description: Created\n  /api/logging/{masid}/{agentid}/{topic}/latest/{num}:\n    parameters:\n    - $ref: '#/components/parameters/masID'\n    - $ref: '#/components/parameters/agentID'\n    - $ref: '#/components/parameters/topic'\n    - name: num\n      in: path\n      description: number of log messages\n      required: true\n      schema:\n        type: integer\n    get:\n      description: get num latest logging messages\n      responses:\n        '200':\n          description: OK - logging messages\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/LogMessage'\n  /api/logging/{masid}/{agentid}/{topic}/time/{start}/{end}:\n    parameters:\n    - $ref: '#/components/parameters/masID'\n    - $ref: '#/components/parameters/agentID'\n    - $ref: '#/components/parameters/topic'\n    - name: start\n      in: path\n      description: start time of query\n      required: true\n      schema:\n        type: string\n    - name: end\n      in: path\n      description: end time of query\n      required: true\n      schema:\n        type: string\n    get:\n      description: get logging messages within specified time range\n      responses:\n        '200':\n          description: OK - logging messages\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/LogMessage'\n#   /api/logging/{mas-id}/{agent-id}/comm:\n#     parameters:\n#     - $ref: '#/components/parameters/masID'\n#     - $ref: '#/components/parameters/agentID'\n#     put:\n#       description: update communication data\n#       requestBody:\n#         description: communication data\n#         content:\n#           applications/json:\n#             schema:\n#               type: array\n#               items:\n#                 $ref: '#/components/schemas/Communication'\n#         required: true\n#       responses:\n#         '201':\n#           description: Created\n#     get:\n#       description: get communication data\n#       responses:\n#         '200':\n#           description: OK - communication\n#           content:\n#             application/json:\n#               schema:\n#                 type: array\n#                 items:\n#                   $ref: '#/components/schemas/Communication'\n  /api/state/{masid}/{agentid}:\n    parameters:\n    - $ref: '#/components/parameters/masID'\n    - $ref: '#/components/parameters/agentID'\n    get:\n      description: get state of agent\n      responses:\n        '200':\n          description: OK - agent state\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/State'\n    put:\n      description: update agent state\n      requestBody:\n        description: new state\n        content:\n          applications/json:\n            schema:\n              $ref: '#/components/schemas/State'\n        required: true\n      responses:\n        '200':\n          description: OK - updated\n  /api/state/{masid}/list:\n    parameters:\n    - $ref: '#/components/parameters/masID'\n    put:\n      description: update agent states\n      requestBody:\n        description: new states\n        content:\n          applications/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/State'\n        required: true\n      responses:\n        '200':\n          description: OK - updated\ncomponents:\n  parameters:\n    masID:\n      name: masid\n      in: path\n      description: ID of MAS\n      required: true\n      schema:\n        type: integer\n    agentID:\n      name: agentid\n      in: path\n      description: ID of agent\n      required: true\n      schema:\n        type: integer\n    topic:\n      name: log-type\n      in: path\n      description: type of logging\n      required: true\n      schema:\n        type: string\n        enum: \n          - error\n          - debug\n          - msg\n          - status\n          - app\n  schemas:\n    LogMessage:\n      description: information to be logged\n      properties:\n        masid: \n          description: ID of MAS\n          type: integer\n        agentid:\n          description: ID of Agent\n          type: integer\n        topic:\n          description: type of logging\n          type: string\n        timestamp:\n          description: time at which message was generated\n          type: string\n        msg:\n          description: message to be logged\n          type: string\n        data:\n          description: additional data\n          type: string\n      required:\n      - masid\n      - agentid\n      - topic\n      - timestamp\n      - msg\n    State:\n      description: state of agent\n      properties:\n        masid:\n          description: ID of MAS\n          type: integer\n        agentid:\n          description: ID of agent\n          type: integer\n        timestamp:\n          description: latest update time\n          type: string\n        state:\n          description: state of agent\n          type: string\n      required:\n      - masid\n      - agentid\n      - timestamp\n      - state\n    Communication:\n      description: communication data\n      properties:\n        id:\n          description: id of other agent\n          type: integer\n        numsent:\n          description: number of messages sent to this agent\n          type: integer\n        numrecv:\n          description: number of messages recived from this agent\n          type: integer\n      required:\n      - id\n      - numsent\n      - numrecv",
			"canonicalURL": "/github.com/RWTH-ACS/clonemap@baee2c72b39adc0c2d086e61c49912130d2ddb66/-/blob/api/logger/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/RWTH-ACS/clonemap/blob/baee2c72b39adc0c2d086e61c49912130d2ddb66/api/logger/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/api/logging/{masid}/{agentid}/{topic}\": post: at 1:2459: parse path \"/api/logging/{masid}/{agentid}/{topic}\": path parameter not specified: \"topic\""
}