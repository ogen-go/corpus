{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/aehrc/COVID-sBeacon"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "modules/api/openapi.yaml",
			"byteSize": 24447,
			"content": "openapi: 3.0.0\nservers: []\ninfo:\n  title: Serverless Beacon API\n  version: 0.3.0\n  description:\n    Provides an API for contributing to and querying a serverless ga4gh beacon\n    instance.\n  contact:\n    email: brendan.hosking@csiro.au\nexternalDocs:\n  description: Beacon Project\n  url: 'http://beacon-project.io/'\npaths:\n  /:\n    summary: Get information about the beacon\n    get:\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Beacon'\n    options:\n      responses:\n        200:\n          description: OK\n  /query:\n    get:\n      description: Get response to a beacon query for allele information.\n      operationId: getBeaconAlleleResponse\n      parameters:\n        - name: referenceName\n          description: 'Reference name (chromosome). Accepting values 1-22, X, Y, M.'\n          in: query\n          required: true\n          schema:\n            $ref: '#/components/schemas/Chromosome'\n        - name: start\n          description: |\n            Precise start coordinate position, allele locus (0-based).\n            * start only:\n              - for single positions, e.g. the start of a specified sequence alteration where the size is given through the specified alternateBases\n              - typical use are queries for SNV and small InDels\n              - the use of \"start\" without an \"end\" parameter requires the use of \"referenceBases\"\n            * start and end:\n              - special use case for exactly determined structural changes\n          in: query\n          required: false\n          schema:\n            type: integer\n            format: int64\n            minimum: 0\n        - name: startMin\n          description: |\n            Minimum start coordinate\n            * startMin + startMax + endMin + endMax\n              - for querying imprecise positions (e.g. identifying all structural variants starting anywhere between startMin \u003c-\u003e startMax, and ending anywhere between endMin \u003c-\u003e endMax\n              - single or douple sided precise matches can be achieved by setting startMin = startMax XOR endMin = endMax\n          in: query\n          schema:\n            type: integer\n            format: int64\n            minimum: 0\n        - name: startMax\n          description: |\n            Maximum start coordinate. See startMin.\n          in: query\n          schema:\n            type: integer\n            format: int64\n            minimum: 0\n        - name: end\n          description: |\n            Precise end coordinate. See start.\n          in: query\n          schema:\n            type: integer\n            format: int64\n            minimum: 0\n        - name: endMin\n          description: |\n            Minimum end coordinate. See startMin.\n          in: query\n          schema:\n            type: integer\n            format: int64\n            minimum: 0\n        - name: endMax\n          description: |\n            Maximum end coordinate. See startMin.\n          in: query\n          schema:\n            type: integer\n            format: int64\n            minimum: 0\n        - name: referenceBases\n          description: \u003e\n            Reference bases for this variant (starting from `start`). Accepted\n            values: [ACGT]*\n\n            When querying for variants without specific base alterations (e.g.\n            imprecise structural variants with separate variant_type as well as\n            start_min \u0026 end_min ... parameters), the use of a single \"N\" value\n            is required.\n          in: query\n          required: true\n          schema:\n            type: string\n            pattern: '^([ACGT]+|N)$'\n        - name: alternateBases\n          description: \u003e\n            The bases that appear instead of the reference bases. Accepted\n            values: [ACGT]* or N.\n\n            Symbolic ALT alleles (DEL, INS, DUP, INV, CNV, DUP:TANDEM, DEL:ME,\n            INS:ME) will be represented in `variantType`.\n\n            Optional: either `alternateBases` or `variantType` is required.\n          in: query\n          required: false\n          schema:\n            type: string\n            pattern: '^([ACGT]+|N)$'\n        - name: variantType\n          description: \u003e\n            The `variantType` is used to denote e.g. structural variants.\n\n            Examples:\n\n            * DUP: duplication of sequence following `start`; not necessarily in\n            situ\n\n            * DEL: deletion of sequence following `start`\n\n\n            Optional: either `alternateBases` or `variantType` is required.\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: assemblyId\n          description: 'Assembly identifier (GRC notation, e.g. GRCh37).'\n          in: query\n          required: true\n          schema:\n            type: string\n        - name: datasetIds\n          description: \u003e-\n            Identifiers of datasets, as defined in \"BeaconDataset\". If this\n            field is null/not specified, all datasets should be queried.\n          in: query\n          required: false\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n        - name: includeDatasetResponses\n          description: \u003e\n            Indicator of whether responses for individual datasets\n            (datasetAlleleResponses) should be included in the response\n            (BeaconAlleleResponse) to this request or not.\n\n            If null (not specified), the default value of NONE is assumed.\n          in: query\n          required: false\n          schema:\n            type: string\n            enum:\n              - ALL\n              - HIT\n              - MISS\n              - NONE\n        - name: page\n          description: |\n            Which page of variant-specific annotations to return.\n            Default is 1.\n          in: query\n          required: false\n          schema:\n            type: integer\n            format: int64\n            minimum: 1\n        - name: pageSize\n          description: |\n            Maximum number of variants to include in a page of variant-specific annotations.\n            If unspecified, no limit is applied.\n          in: query\n          required: false\n          schema:\n            type: integer\n            format: int64\n            minimum: 0\n        - name: variantsSortby\n          description: |\n            Metadata field by which to sort the variant-sepcific annotations.\n            If unspecified, pos is used.\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: variantsDescending\n          description: |\n            0 if variant-specific annotations should be sorted in ascending order, or 1 for descending.\n            Default is 0\n          in: query\n          required: false\n          schema:\n            type: integer\n            enum:\n              - 0\n              - 1\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/BeaconAlleleResponse'\n        '400':\n          description: Bad request (e.g. missing mandatory parameter)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BeaconAlleleResponse'\n    post:\n      description: Gets response to a beacon query for allele information.\n      operationId: postBeaconAlleleResponse\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/BeaconAlleleResponse'\n        '400':\n          description: Bad request (e.g. missing mandatory parameter)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BeaconAlleleResponse'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BeaconAlleleRequest'\n        required: true\n    options:\n      responses:\n        200:\n          description: OK\n  /submit:\n    options:\n      responses:\n        200:\n          description: OK\n    patch:\n      summary: Update a dataset\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DatasetUpdate'\n      responses:\n        200:\n          description: OK\n        400:\n          description: Bad Request (e.g. missing mandatory parameter)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BeaconError'\n      security:\n        - sigv4: []\n    post:\n      summary: Create a dataset\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DatasetSubmit'\n      responses:\n        200:\n          description: OK\n        400:\n          description: Bad Request (e.g. missing mandatory parameter)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BeaconError'\n      security:\n        - sigv4: []\ncomponents:\n  schemas:\n    Beacon:\n      type: object\n      required:\n        - id\n        - name\n        - apiVersion\n        - organization\n        - datasets\n      properties:\n        id:\n          type: string\n          description: Unique identifier of the beacon. Use reverse domain name\n            notation.\n          example: org.ga4gh.beacon\n        apiVersion:\n          type: string\n          description: Version of the API provided by the beacon.\n          example: v1.0.0\n        organization:\n          $ref: '#/components/schemas/BeaconOrganization'\n        datasets:\n          description: Dataset(s) served by the beacon.\n          type: array\n          items:\n            $ref: '#/components/schemas/BeaconDataset'\n    BeaconAlleleRequest:\n      description: Allele request as interpreted by the beacon.\n      type: object\n      required:\n        - referenceName\n        - referenceBases\n        - assemblyId\n      properties:\n        referenceName:\n          $ref: '#/components/schemas/Chromosome'\n        start:\n          description: |\n            Precise start coordinate position, allele locus (0-based).\n            * start only:\n              - for single positions, e.g. the start of a specified sequence alteration where the size is given through the specified alternateBases\n              - typical use are queries for SNV and small InDels\n              - the use of \"start\" without an \"end\" parameter requires the use of \"referenceBases\"\n            * start and end:\n              - special use case for exactly determined structural changes\n          type: integer\n          format: int64\n          minimum: 0\n        end:\n          description: Precise end coordinate. See start.\n          type: integer\n        startMin:\n          description: |\n            Minimum start coordinate\n            * startMin + startMax + endMin + endMax\n              - for querying imprecise positions (e.g. identifying all structural variants starting anywhere between startMin \u003c-\u003e startMax, and ending anywhere between endMin \u003c-\u003e endMax\n              - single or douple sided precise matches can be achieved by setting startMin = startMax XOR endMin = endMax\n          type: integer\n        startMax:\n          description: Maximum start coordinate. See startMin.\n          type: integer\n        endMin:\n          description: Minimum end coordinate. See startMin.\n          type: integer\n        endMax:\n          description: Maximum end coordinate. See startMin.\n          type: integer\n        referenceBases:\n          description: \u003e\n            Reference bases for this variant (starting from `start`). Accepted\n            values: [ACGTUMRWSYKVHDBN]*\n              When querying for variants without specific base alterations (e.g. imprecise structural variants with separate variant_type as well as start_min \u0026 end_min ... parameters), the use of a single \"N\" value is required.\n          type: string\n          pattern: '^[ACGTUMRWSYKVHDBN]+$'\n        alternateBases:\n          description: \u003e\n            The bases that appear instead of the reference bases. Accepted\n            values: [ACGTUMRWSYKVHDBN]*.\n\n            Symbolic ALT alleles (DEL, INS, DUP, INV, CNV, DUP:TANDEM, DEL:ME,\n            INS:ME) will be represented in `variantType`.\n\n            Optional: either `alternateBases` or `variantType` is required.\n          type: string\n          pattern: '^[ACGTUMRWSYKVHDBN]+$'\n        variantType:\n          description: \u003e\n            The `variantType` is used to denote e.g. structural variants.\n\n            Examples:\n\n            * DUP: duplication of sequence following `start`; not necessarily in\n            situ\n\n            * DEL: deletion of sequence following `start`\n\n\n            Optional: either `alternateBases` or `variantType` is required.\n          type: string\n        assemblyId:\n          description: 'Assembly identifier (GRC notation, e.g. `GRCh37`).'\n          type: string\n          example: GRCh38\n        datasetIds:\n          description: \u003e-\n            Identifiers of datasets, as defined in `BeaconDataset`. If this\n            field is null/not specified, all datasets should be queried.\n          type: array\n          nullable: true\n          items:\n            type: string\n        includeDatasetResponses:\n          description: \u003e-\n            Indicator of whether responses for individual datasets\n            (datasetAlleleResponses) should be included in the response\n            (BeaconAlleleResponse) to this request or not. If null (not\n            specified), the default value of NONE is assumed.\n          type: string\n          enum:\n            - ALL\n            - HIT\n            - MISS\n            - NONE\n        page:\n          description: |\n            Which page of variant-specific annotations to return.\n            Default is 1.\n          type: integer\n          format: int64\n          minimum: 1\n        pageSize:\n          description: |\n            Maximum number of variants to include in a page of variant-specific annotations.\n            If unspecified, no limit is applied.\n          type: integer\n          format: int64\n          minimum: 0\n        variantsSortby:\n          description: |\n            Metadata field by which to sort the variant-sepcific annotations.\n            If unspecified, pos is used.\n            type: string\n        variantsDescending:\n          description: |\n            0 if variant-specific annotations should be sorted in ascending order, or 1 for descending.\n            Default is 0\n          type: integer\n          enum:\n            - 0\n            - 1\n    BeaconAlleleResponse:\n      type: object\n      required:\n        - beaconId\n      properties:\n        beaconId:\n          description: 'Identifier of the beacon, as defined in `Beacon`.'\n          type: string\n        apiVersion:\n          description: \u003e-\n            Version of the API. If specified, the value must match `apiVersion`\n            in Beacon\n          type: string\n        exists:\n          nullable: true\n          description: \u003e-\n            Indicator of whether the given allele was observed in any of the\n            datasets queried. This should be non-null, unless there was an\n            error, in which case `error` has to be non-null.\n          type: boolean\n        alleleRequest:\n          $ref: '#/components/schemas/BeaconAlleleRequest'\n        datasetAlleleResponses:\n          description: \u003e-\n            Indicator of whether the given allele was  observed in individual\n            datasets. This should be non-null if `includeDatasetResponses` in\n            the corresponding `BeaconAlleleRequest` is true, and null otherwise.\n          type: array\n          items:\n            $ref: '#/components/schemas/BeaconDatasetAlleleResponse'\n        error:\n          $ref: '#/components/schemas/BeaconError'\n    BeaconDataset:\n      type: object\n      required:\n        - id\n        - name\n        - assemblyId\n        - createDateTime\n        - updateDateTime\n      properties:\n        id:\n          type: string\n          description: Unique identifier of the dataset.\n        name:\n          type: string\n          description: Name of the dataset.\n        description:\n          type: string\n          nullable: true\n          description: Description of the dataset.\n        assemblyId:\n          description: 'Assembly identifier (GRC notation, e.g. `GRCh37`).'\n          type: string\n          example: GRCh38\n        createDateTime:\n          type: string\n          description: The time the dataset was created (ISO 8601 format).\n          example: '2012-07-29 or 2017-01-17T20:33:40'\n        updateDateTime:\n          type: string\n          description: The time the dataset was updated in (ISO 8601 format).\n          example: '2012-07-19 or 2017-01-17T20:33:40'\n        version:\n          type: string\n          nullable: true\n          description: Version of the dataset.\n        variantCount:\n          type: integer\n          nullable: true\n          format: int64\n          description: Total number of variants in the dataset.\n          minimum: 0\n        callCount:\n          type: integer\n          nullable: true\n          format: int64\n          description: Total number of calls in the dataset.\n          minimum: 0\n        sampleCount:\n          type: integer\n          nullable: true\n          format: int64\n          description: Total number of samples in the dataset.\n          minimum: 0\n        externalUrl:\n          type: string\n          nullable: true\n          description:\n            URL to an external system providing more dataset information (RFC\n            3986 format).\n          example: 'http://example.org/wiki/Main_Page'\n        info:\n          $ref: '#/components/schemas/Info'\n        dataUseConditions:\n          $ref: '#/components/schemas/DataUseConditions'\n    BeaconDatasetAlleleResponse:\n      type: object\n      required:\n        - datasetId\n      properties:\n        datasetId:\n          type: string\n          description: not provided\n        exists:\n          description: \u003e-\n            Indicator of whether the given allele was observed in the dataset.\n            This should be non-null, unless there was an error, in which case\n            `error` has to be non-null.\n          type: boolean\n          nullable: true\n        error:\n          $ref: '#/components/schemas/BeaconError'\n        frequency:\n          type: number\n          nullable: true\n          description: Frequency of this allele in the dataset. Between 0 and 1,\n            inclusive.\n          minimum: 0\n          maximum: 1\n        variantCount:\n          type: integer\n          nullable: true\n          description: Number of variants matching the allele request in the dataset.\n          minimum: 0\n        callCount:\n          type: integer\n          nullable: true\n          description: Number of calls matching the allele request in the dataset.\n          minimum: 0\n        sampleCount:\n          type: integer\n          nullable: true\n          description: Number of samples matching the allele request in the dataset\n          minimum: 0\n        note:\n          type: string\n          nullable: true\n          description: Additional note or description of the response.\n        externalUrl:\n          type: string\n          nullable: true\n          description: \u003e-\n            URL to an external system, such as a secured beacon or a system\n            providing more information about a given allele (RFC 3986 format).\n        info:\n          $ref: '#/components/schemas/Info'\n    BeaconError:\n      description: \u003e-\n        Beacon-specific error. This should be non-null in exceptional situations\n        only, in which case `exists` has to be null.\n      type: object\n      nullable: true\n      required:\n        - errorCode\n      properties:\n        errorCode:\n          type: integer\n          format: int32\n        errorMessage:\n          type: string\n    BeaconOrganization:\n      description: Organization owning the beacon.\n      type: object\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: string\n          description: Unique identifier of the organization.\n        name:\n          type: string\n          description: Name of the organization.\n    Chromosome:\n      description: 'Reference name (chromosome). Accepting values 1-22, X, Y, M.'\n      type: string\n      enum:\n        - '1'\n        - '2'\n        - '3'\n        - '4'\n        - '5'\n        - '6'\n        - '7'\n        - '8'\n        - '9'\n        - '10'\n        - '11'\n        - '12'\n        - '13'\n        - '14'\n        - '15'\n        - '16'\n        - '17'\n        - '18'\n        - '19'\n        - '20'\n        - '21'\n        - '22'\n        - 'X'\n        - 'Y'\n        - 'M'\n    DatasetSubmit:\n      description: fields to create a new dataset.\n      type: object\n      required:\n        - id\n        - name\n        - assemblyId\n        - vcfLocations\n      properties:\n        id:\n          type: string\n          description: Unique identifier of the dataset.\n        name:\n          type: string\n          description: Name of the dataset.\n        assemblyId:\n          description: 'Assembly identifier (GRC notation, e.g. `GRCh37`).'\n          type: string\n          example: GRCh38\n        vcfLocations:\n          type: array\n          description: Location of each VCF file.\n          minItems: 1\n          items:\n            type: string\n        description:\n          type: string\n          description: Description of the dataset.\n          nullable: true\n        version:\n          type: string\n          nullable: true\n          description: Version of the dataset.\n        externalUrl:\n          nullable: true\n          type: string\n          description:\n            URL to an external system providing more dataset information (RFC\n            3986 format).\n          example: 'http://example.org/wiki/Main_Page'\n        info:\n          $ref: '#/components/schemas/Info'\n        dataUseConditions:\n          $ref: '#/components/schemas/DataUseConditions'\n\n    DatasetUpdate:\n      description: fields to update in a dataset.\n      type: object\n      required:\n        - id\n      properties:\n        id:\n          type: string\n          description: Unique identifier of the dataset.\n        name:\n          type: string\n          description: Name of the dataset.\n        assemblyId:\n          description: 'Assembly identifier (GRC notation, e.g. `GRCh37`).'\n          type: string\n          example: GRCh38\n        vcfLocations:\n          type: array\n          description: Location of each VCF file to add.\n          minItems: 1\n          items:\n            type: string\n        description:\n          type: string\n          nullable: true\n          description: Description of the dataset.\n        version:\n          type: string\n          nullable: true\n          description: Version of the dataset.\n        externalUrl:\n          type: string\n          nullable: true\n          description:\n            URL to an external system providing more dataset information (RFC\n            3986 format).\n          example: 'http://example.org/wiki/Main_Page'\n        info:\n          $ref: '#/components/schemas/Info'\n        dataUseConditions:\n          $ref: '#/components/schemas/DataUseConditions'\n    DataUseConditions:\n      type: object\n      nullable: true\n      required:\n        - consentCodeDataUse\n        - adamDataUse\n      description: Data use conditions ruling this dataset.\n      properties:\n        consentCodeDataUse:\n          $ref: \u003e-\n            https://raw.githubusercontent.com/ga4gh/ga4gh-consent-policy/806ea53cffacb2055c3639f0fc9783f0dcd8cb02/consent_code.yaml#/components/schemas/ConsentCodeDataUse\n        adamDataUse:\n          $ref: \u003e-\n            https://raw.githubusercontent.com/ga4gh/ADA-M/b16a72f9987ae20f433e97d6a3247ecddd8dde23/adam.yaml#/components/schemas/Adam\n    Info:\n      description: Additional structured metadata, key-value pairs.\n      nullable: true\n      type: array\n      items:\n        type: object\n        required:\n          - key\n          - value\n        properties:\n          key:\n            type: string\n          value:\n            type: string\n",
			"canonicalURL": "/github.com/aehrc/COVID-sBeacon@12191d99774008028a7fbbd1f4384a18c32f4cdd/-/blob/modules/api/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/aehrc/COVID-sBeacon/blob/12191d99774008028a7fbbd1f4384a18c32f4cdd/modules/api/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/submit\": post: security: at modules/api/openapi.yaml:296:11: unknown security scheme \"sigv4\""
}