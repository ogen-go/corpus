{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/JHUAPL/PINE"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "backend/pine/backend/auth/openapi.yaml",
			"byteSize": 13143,
			"content": "# (C) 2021 The Johns Hopkins University Applied Physics Laboratory LLC.\n\nopenapi: \"3.0.2\"\n\ntags:\n  - name: auth\n    description: Operations in the \"auth\" blueprint.\n  - name: auth_eve\n    description: These operations are only available if using \"eve\" auth module.\n  - name: auth_vegas\n    description: These operations are only available if using \"vegas\" auth module.\n\ncomponents:\n\n  schemas:\n\n    LoginForm:\n      description: Information needed to display a login form.\n      type: object\n      properties:\n        button_text:\n          description: Text to set in the login button.\n          type: string\n        fields:\n          description: Form fields to use.\n          type: array\n          items:\n            type: object\n            properties:\n              display:\n                description: Display name.\n                type: string\n              name:\n                description: Form name.\n                type: string\n              type:\n                description: Form type.\n                type: string\n      example:\n        button_text: Login\n        fields:\n          - display: Username or email\n            name: username\n            type: text\n          - display: Password\n            name: password\n            type: password\n\n    EveLogin:\n      description: Only for eve login.\n      type: object\n      properties:\n        username:\n          type: string\n        password:\n          type: string\n\n    EvePasswordChange:\n      type: object\n      properties:\n        current_password:\n          type: string\n        new_password:\n          type: string\n\n    VegasAuthToken:\n      description: An auth token obtained by Vegas out-of-band from PINE.\n      type: object\n      properties:\n        access_token:\n          type: string\n        token_type:\n          type: string\n          example: bearer\n      additionalProperties: {}\n\npaths:\n\n  # Endpoints available for all auth modules.\n\n  /auth/module:\n    get:\n      summary: Get Auth Module\n      description: |\n        Get the current auth module being used (vegas or eve).\n        \n        Example: `curl -X GET http://localhost:5000/auth/module`\n      operationId: auth_get_module\n      tags: [auth]\n      responses:\n        \"200\":\n          description: Successfully got the auth module.\n          content:\n            application/json:\n              schema:\n                type: string\n                enum: [eve, vegas]\n\n  /auth/flat:\n    get:\n      summary: Get Auth Is Flat\n      description: |\n        Return true if the current auth module is flat.\n        \n        \"Flat\" auth means, generally, there are no administrators and permissions are generally on\n        the same \"level\".  Collection-level permissions for viewing/annotating still apply, however.\n        \n        Example: `curl -X GET http://localhost:5000/auth/flat`\n      operationId: auth_get_flat\n      tags: [auth]\n      responses:\n        \"200\":\n          description: Successfully return a boolean if the auth module was flat.\n          content:\n            application/json:\n              schema:\n                type: boolean\n\n  /auth/can_manage_users:\n    get:\n      summary: Get Auth Can Manage Users\n      description: |\n        Return true if the current auth module supports managing users.\n        \n        If `true`, the auth module can change, add, and delete users.  If `false`, users are managed\n        by an external system.\n        \n        Example: `curl -X GET http://localhost:5000/auth/flat`\n      operationId: auth_get_manage\n      tags: [auth]\n      responses:\n        \"200\":\n          description: Successfully return a boolean if the auth module supports managing users.\n          content:\n            application/json:\n              schema:\n                type: boolean\n\n  /auth/logged_in_user:\n    get:\n      summary: Get Logged In User\n      description: |\n        Get the currently logged in user (checks based on the session - need the session cookie sent).\n        If there is no user logged, in `null` is returned.\n        \n        Example: `curl -X GET http://localhost:5000/auth/logged_in_user --cookie session.cookie`\n        \n        Note that this operation does not REQUIRE the user to be logged in, but it is marked as\n        requiring security so that the Swagger UI will send in whatever you have configured.\n      operationId: auth_logged_in_user\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n        - vegasBearerAuth: []\n      tags: [auth]\n      responses:\n        \"200\":\n          description: Successfully returned the logged in user (or null if no session cookie).\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - type: string\n                    nullable: true\n                    default: null\n                  - $ref: \"../api/components.yaml#/schemas/AuthUser\"\n\n  /auth/logged_in_user_details:\n    get:\n      summary: Get Logged In User Details\n      description: |\n        Get the currently logged in user's details.\n        \n        Example: `curl -X GET http://localhost:5000/auth/logged_in_user_details --cookie session.cookie`\n      operationId: auth_user_details\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n        - vegasBearerAuth: []\n      tags: [auth]\n      responses:\n        \"200\":\n          description: Successfully returned the logged in user details.\n          content:\n            application/json:\n              schema:\n                $ref: \"../api/components.yaml#/schemas/AuthUserDetails\"\n        \"401\":\n          $ref: \"../api/components.yaml#/responses/NotAuthorized\"\n\n    # Eve-specific post.\n    post:\n      summary: Update Logged In User Details with Eve\n      description: |\n        Updates the user details for the logged in user.\n        \n        _Note_: this endpoint is only exposed if using \"eve\" auth module.\n      operationId: auth_eve_update_user_details\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n      tags: [auth_eve]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"../api/components.yaml#/schemas/AuthUserDetails\"\n      responses:\n        \"200\":\n          description: Successfully updated user details.\n          content:\n            application/json:\n              schema:\n                type: boolean\n        \"400\":\n          $ref: \"../api/components.yaml#/responses/InvalidInputParameters\"\n        \"401\":\n          $ref: \"../api/components.yaml#/responses/NotAuthorized\"\n\n  /auth/login_form:\n    get:\n      summary: Get the login form.\n      description: |\n        For auth modules that use a form to login, this endpoint will return the information needed\n        to present that form to the user and send back the necessary info in a subsequent login\n        call.\n        \n        Example: `curl -X GET http://localhost:5000/auth/login_form`\n      operationId: auth_login_form\n      tags: [auth]\n      responses:\n        \"200\":\n          description: Successfully returned the login form.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LoginForm\"\n\n  /auth/logout:\n    post:\n      summary: Logout\n      description: |\n        Logout of the current session.\n        \n        Example: `curl -X POST http://localhost:5000/auth/logout --cookie session.cookie`\n      operationId: auth_logout\n      tags: [auth]\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n        - vegasBearerAuth: []\n      responses:\n        \"200\":\n          description: Successfully logged out.\n        \"401\":\n          $ref: \"../api/components.yaml#/responses/NotAuthorized\"\n  \n  /auth/login:\n    post:\n      summary: Login User\n      description: |\n        Logs in user.  How this works depends on the auth module used.\n        \n        For eve: this takes a request body consisting of the login form data.\n        \n        For vegas: this takes in no parameters and returns the URL the caller should redirect to.\n      operationId: auth_login\n      tags: [auth_eve, auth_vegas]\n      parameters:\n        - name: return_to\n          in: query\n          required: false\n          description: For vegas auth only, a URL to return to after auth flow.\n          schema:\n            type: string\n            format: url\n      requestBody:\n        required: false\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/EveLogin\"\n      responses:\n        \"200\":\n          description: |\n            For eve: successfully logged in, returns user information.\n            \n            For vegas: starts auth flow and returns the URL that the caller should redirect to.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                - $ref: \"../api/components.yaml#/schemas/AuthUser\"\n                - type: string\n                  format: url\n        \"400\":\n          $ref: \"../api/components.yaml#/responses/InvalidInputParameters\"\n        \"401\":\n          description: Given user doesn't exist, password isn't set, or password doesn't match.\n          content:\n            application/json:\n              schema:\n                $ref: \"../api/components.yaml#/schemas/ErrorResponse\"\n\n  # Eve-specific endpoints.\n\n  /auth/users:\n    get:\n      summary: Get Eve Users\n      description: |\n        Gets all users that are registered with eve.\n        \n        _Note_: this endpoint is only exposed if using \"eve\" auth module.\n      operationId: auth_eve_users\n      tags: [auth_eve]\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n      responses:\n        \"200\":\n          description: Returns all users.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"../api/components.yaml#/schemas/AuthUser\"\n        \"401\":\n          $ref: \"../api/components.yaml#/responses/NotAuthorized\"\n\n  /auth/logged_in_user_password:\n    post:\n      summary: Update Eve User Password\n      description: |\n        Updates the password of the currently logged in eve user.\n        \n        _Note_: this endpoint is only exposed if using \"eve\" auth module.\n      operationId: auth_eve_update_password\n      tags: [auth_eve]\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/EvePasswordChange\"\n      responses:\n        \"200\":\n          description: Successfully changed password.\n          content:\n            application/json:\n              schema:\n                type: boolean\n        \"400\":\n          $ref: \"../api/components.yaml#/responses/InvalidInputParameters\"\n        \"401\":\n          description: Not logged in, or current password doesn't match.\n          content:\n            application/json:\n              schema:\n                $ref: \"../api/components.yaml#/schemas/ErrorResponse\"\n\n  # Vegas-specific endpoints.\n\n  /auth/authorize:\n    get:\n      summary: Authorize From Fragment\n      description: |\n        Part of the OAuth flow, this will authorize based on passed-in query parameters.\n        \n        _Note_: this endpoint is only exposed if using \"vegas\" auth module.\n      operationId: auth_vegas_authorize_get\n      tags: [auth_vegas]\n      parameters:\n        - name: fragment\n          in: query\n          required: true\n          description: OAuth flow fragment.\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successfully logged in, returns user information.\n          content:\n            application/json:\n              schema:\n                $ref: \"../api/components.yaml#/schemas/AuthUser\"\n        \"400\":\n          description: Fragment is not valid, or parsed token is not valid.\n          content:\n            application/json:\n              schema:\n                $ref: \"../api/components.yaml#/schemas/ErrorResponse\"\n    \n    post:\n      summary: Authorize From Token\n      description: |\n        Authorize diretly based on an obtained vegas token, outside the normal OAuth flow.\n        This is meant to make it easy to authenticate using vegas and then use this API outside of\n        the web UI.\n        \n        _Note_: this endpoint is only exposed if using \"vegas\" auth module.\n      operationId: auth_vegas_authorize_post\n      tags: [auth_vegas]\n      requestBody:\n        description: Token obtained from Vegas.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/VegasAuthToken\"\n      responses:\n        \"200\":\n          description: Successfully logged in, returns user information.\n          content:\n            application/json:\n              schema:\n                $ref: \"../api/components.yaml#/schemas/AuthUser\"\n        \"400\":\n          description: Token is not valid.\n          content:\n            application/json:\n              schema:\n                $ref: \"../api/components.yaml#/schemas/ErrorResponse\"\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /auth/users: get: operation \"auth_eve_users\": responses: 200: content: application/json: schema: parse schema: item: parse schema: resolve \"../api/components.yaml#/schemas/AuthUser\": external \"../api/components.yaml\": file: local file reference is not allowed"
}