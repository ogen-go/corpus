{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/yonaskolb/SwagGen"
		},
		"file": {
			"name": "spec.yml",
			"path": "Specs/TestSpec/spec.yml",
			"content": "openapi: 3.0.0\ninfo:\n  version: \"1.0\"\n  title: Test Spec\n  license:\n    name: MIT\nsecurity:\n  - test_auth:\n      - read\nservers:\n  - x-name: Test\n    description: Test environment\n    url: https://test.petstore.com/{version}/{space}\n    variables:\n      version:\n        default: v1\n        enum:\n          - v1\n          - v2\n      space:\n        default: main\n  - x-name: Prod\n    description: Prod environment\n    url: http://petstore.swagger.io/v1\npaths:\n  /default-response:\n    get:\n      description: operation with no responses\n      responses:\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /post-form:\n    post:\n      description: \"Posts a form\"\n      operationId: updateWithForm\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                name:\n                  description: Updated name of the pet\n                  type: string\n                status:\n                  description: Updated status of the pet\n                  type: string\n      responses:\n        \"405\":\n          description: Invalid input\n  /multiple-path-params{petID}:\n    parameters:\n      - name: petId\n        in: path\n        required: true\n        description: The id of the pet\n        schema:\n          type: string\n    get:\n      description: Has path and operation parameters\n      operationId: getMultipleParams\n      parameters:\n        - name: userId\n          in: path\n          required: true\n          description: The id of the pet\n          schema:\n            type: string\n      responses:\n        \"405\":\n          description: Invalid input\n  /all-params:\n    post:\n      description: Has all sorts of parameters\n      parameters:\n        - name: userId\n          in: path\n          required: true\n          description: The id of the user\n          schema:\n            type: string\n        - name: petId\n          in: query\n          required: true\n          description: The id of the pet\n          schema:\n            type: string\n        - name: apiKey\n          in: header\n          required: true\n          description: The api key\n          schema:\n            type: string\n        - name: hasPets\n          in: cookie\n          required: true\n          description: Cookie that tracks pets\n          schema:\n            type: boolean\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  description: Updated name of the pet\n                  type: string\n                status:\n                  description: Updated status of the pet\n                  type: string\n      responses:\n        \"405\":\n          description: Invalid input\n  /tagged:\n    get:\n      description: operation with a tag\n      operationId: Pets\n      responses:\n        \"201\":\n          description: Success\n  /inlinebody:\n    post:\n      description: operation with an inline body\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                id:\n                  type: integer\n                name:\n                  type: string\n        description: An inline item\n        required: true\n      responses:\n        \"201\":\n          description: Empty response\n      security:\n        - test_auth:\n            - write\n  /multiple-success:\n    get:\n      description: operation with multiple success responses\n      responses:\n        \"200\":\n          description: User response\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        \"201\":\n          description: Empty response\n      security:\n        - test_auth:\n            - write\n  /inlineEnumResponse:\n    get:\n      description: operation with an enum response\n      responses:\n        \"200\":\n          description: enum response\n          content:\n            \"*/*\":\n              schema:\n                type: object\n                additionalProperties:\n                  type: integer\n                  x-enum-names:\n                    - one\n                    - two\n                  enum:\n                    - 1\n                    - 2\n  /string:\n    post:\n      description: operation with string body\n      requestBody:\n        content:\n          text/plain:\n            schema:\n              type: string\n      responses:\n        default:\n          description: successful operation\n    get:\n      description: operation with string response\n      responses:\n        \"200\":\n          content:\n            text/plain:\n              schema:\n                type: string\n        \"400\":\n          $ref: \"#/components/responses/400\"\n  /file:\n    get:\n      description: Binary response\n      responses:\n        \"200\":\n          content:\n           text/plain:\n            schema:\n              type: string\n              format: binary\ncomponents:\n  responses:\n    \"400\":\n      description: 400 response\n      content:\n        \"*/*\":\n          schema:\n            type: string\n  securitySchemes:\n    test_auth:\n      type: oauth2\n      flows:\n        implicit:\n          authorizationUrl: http://swagger.io/api/oauth/dialog\n          scopes:\n            write: write scope\n            read: read scope\n  schemas:\n    User:\n      type: object\n      properties:\n        name:\n          type: string\n        id:\n          type: integer\n    UserSubclass:\n      allOf:\n        - $ref: \"#/components/schemas/User\"\n        - type: object\n          properties:\n            age:\n              type: integer\n            last_error:\n              allOf:\n                - $ref: \"#/components/schemas/Error\"\n              nullable: true\n              description: last error reported to user object, or null if they have not seen an error.\n    UserReference:\n      $ref: \"#/components/schemas/User\"\n    ModelWithAdditionalProperties:\n      description: definition with additional properties\n      type: object\n      additionalProperties: true\n      properties:\n        name:\n          type: string\n    ModelWithBooleanAdditionalProperties:\n      description: definition with bool additional properties\n      type: object\n      additionalProperties:\n        type: boolean\n      properties:\n        name:\n          type: string\n    ModelWithDefinitionAdditionalProperties:\n      description: definition with a Definition as additional properties\n      type: object\n      additionalProperties:\n        $ref: \"#/components/schemas/User\"\n      properties:\n        name:\n          type: string\n    ModelWithOnlyAdditionalProperties:\n      description: definition with only additional properties\n      type: object\n      additionalProperties: true\n    ModelWithInlineSpec:\n      type: object\n      properties:\n        myModel:\n          type: object\n          description: an inline model\n          properties:\n            name:\n              description: name of the model\n              type: string\n    ModelWithNullableProperties:\n      type: object\n      required:\n        - requiredNotNullable\n        - requiredNullable\n        - requiredImplicitNotNullable\n      properties:\n        notRequiredNotNullable:\n          type: string\n          description: \"a not required and not nullable property\"\n          nullable: false\n        notRequiredNullable:\n          type: string\n          description: \"a not required and nullable property\"\n          nullable: true\n        requiredNotNullable:\n          type: string\n          description: \"a required and not nullable property\"\n          nullable: false\n        requiredNullable:\n          type: string\n          description: \"a required and nullable property\"\n          nullable: true\n        requiredImplicitNotNullable:\n          type: string\n          description: \"a required and not nullable property with nullable false implicitly declared\"\n    Zoo:\n      type: object\n      properties:\n        schemaAnimals:\n          type: array\n          items:\n            - $ref: \"#/components/schemas/SingleAnimal\"\n        inlineAnimals:\n          type: array\n          items:\n            oneOf:\n              - $ref: \"#/components/schemas/Cat\"\n              - $ref: \"#/components/schemas/Dog\"\n            discriminator:\n              propertyName: type\n        inlineAnimal:\n            allOf:\n                - $ref: '#/components/schemas/Animal'\n        oneOfDog:\n            oneOf:\n                - $ref: '#/components/schemas/Dog'\n        anyOfDog:\n            anyOf:\n                - $ref: '#/components/schemas/Dog'\n        allOfDog:\n            allOf:\n                - $ref: '#/components/schemas/Dog'\n        manager:\n          allOf:\n            - $ref: \"#/components/schemas/User\"\n            - properties:\n                value:\n                  type: object\n                  required:\n                    - id\n                  properties:\n                    id:\n                      type: string\n    SingleAnimal:\n      oneOf:\n        - $ref: \"#/components/schemas/Cat\"\n        - $ref: \"#/components/schemas/Dog\"\n      discriminator:\n        propertyName: type\n        mapping:\n          woof: \"#/components/schemas/Dog\"\n          dog: \"#/components/schemas/Dog\"\n          cat: \"#/components/schemas/Cat\"\n    Animal:\n      type: object\n      properties:\n        animal:\n          type: string\n    Cat:\n      allOf:\n        - $ref: \"#/components/schemas/Animal\"\n        - type: object\n          properties:\n            meows:\n              type: boolean\n    Dog:\n      allOf:\n        - $ref: \"#/components/schemas/Animal\"\n        - type: object\n          properties:\n            barks:\n              type: boolean\n    Puppi:\n      allOf:\n        - $ref: \"#/components/schemas/Dog\"\n        - type: object\n          properties:\n            play:\n              type: boolean\n    Error:\n      required:\n        - code\n        - message\n      properties:\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string\n    ChildWithNestedObject:\n      allOf:\n        - $ref: \"#/components/schemas/User\"\n        - type: object\n          properties:\n            data:\n              type: object\n              properties:\n                value:\n                  type: string\n    ObjectHoldingNullableReference:\n      type: object\n      properties:\n        this_property_should_be_optional:\n          $ref: \"#/components/schemas/SomeNullableObject\"\n      required:\n        - this_property_should_be_optional\n    SomeNullableObject:\n      type: object\n      required:\n        - value\n      properties:\n        value:\n          type: string\n      nullable: true\n    PropertyTypes:\n      properties:\n        decimal:\n          type: number\n          format: decimal\n        float:\n          type: number\n          format: float\n        double:\n          type: number\n          format: double\n"
		}
	},
	"Error": "callback: json: cannot unmarshal array into Go struct field Schema.items of type ogen.Schema"
}