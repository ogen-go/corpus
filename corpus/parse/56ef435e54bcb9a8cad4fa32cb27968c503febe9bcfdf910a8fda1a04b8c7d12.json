{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/nuts-foundation/nuts-node"
		},
		"file": {
			"name": "v1.yaml",
			"size": 0,
			"path": "docs/_static/vdr/v1.yaml",
			"byteSize": 14994,
			"content": "openapi: \"3.0.0\"\ninfo:\n  title: Nuts Verifiable Data Registry API spec\n  description: API specification for the Verifiable Data Registry\n  version: 1.0.0\n  license:\n    name: GPLv3\nservers:\n  - url: http://localhost:1323\npaths:\n  /internal/vdr/v1/did:\n    post:\n      summary: Creates a new Nuts DID\n      description: |\n        The DID Document will be created according to the given request. If a combination of options is not allowed, a 400 is returned.\n        The default values for selfControl, assertionMethod and capabilityInvocation are true. The default for controllers is an empty list. All other options default to false.\n        Only a single keypair will be generated. All enabled methods will reuse the same key pair. A seperate keypair will be generated to generate the DID if SelfControl is false.\n\n        error returns:\n        * 400 - Invalid (combination of) options\n        * 500 - An error occurred while processing the request\n      operationId: \"createDID\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DIDCreateRequest'\n      tags:\n        - DID\n      responses:\n        \"200\":\n          description: \"New DID has been created successfully. Returns the DID document.\"\n          content:\n            application/json+did-document:\n              schema:\n                $ref: '#/components/schemas/DIDDocument'\n        default:\n          $ref: '../common/error_response.yaml'\n  /internal/vdr/v1/did/{did}:\n    parameters:\n      - name: did\n        in: path\n        description: URL encoded DID.\n        required: true\n        example: \"did:nuts:1234\"\n        schema:\n          type: string\n    get:\n      parameters:\n        - name: versionId\n          in: query\n          description: |\n            If a versionId parameter is provided, the DID resolution algorithm returns a specific version of the DID document.\n            The version is the Sha256 hash of the document.\n            The DID parameters versionId and versionTime are mutually exclusive.\n\n            See [the did resolution spec about versioning](https://w3c-ccg.github.io/did-resolution/#versioning)\n          required: false\n          example: \"4960afbdf21280ef248081e6e52317735bbb929a204351291b773c252afeebf4\"\n          schema:\n            type: string\n        - name: versionTime\n          in: query\n          description: |\n            If a versionTime parameter is provided, the DID resolution algorithm returns a specific version of the DID document.\n            The DID parameters versionId and versionTime are mutually exclusive.\n\n            See [the did resolution spec about versioning](https://w3c-ccg.github.io/did-resolution/#versioning)\n          required: false\n          example: \"2021-11-03T08:25:13Z\"\n          schema:\n            type: string\n      summary: \"Resolves a Nuts DID document\"\n      description: |\n        Resolves a Nuts DID document. It also resolves deactivated documents.\n\n        error returns:\n          * 400 - Returned in case of malformed DID\n          * 404 - Corresponding DID document could not be found\n          * 500 - An error occurred while processing the request\n      operationId: \"getDID\"\n      tags:\n        - DID\n      responses:\n        \"200\":\n          description: DID has been found and returned.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DIDResolutionResult'\n        default:\n          $ref: '../common/error_response.yaml'\n    put:\n      summary: Updates a Nuts DID document.\n      description: |\n        Updates a Nuts DID document.\n\n        error returns:\n          * 400 - DID document could not be updated because the DID param was malformed or the DID document is invalid\n          * 403 - DID document could not be updated because the DID is not managed by this node\n          * 404 - Corresponding DID document could not be found\n          * 409 - DID document could not be updated because the document is deactivated or its controllers are deactivated\n          * 500 - An error occurred while processing the request\n      operationId: \"updateDID\"\n      tags:\n        - DID\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DIDUpdateRequest'\n      responses:\n        \"200\":\n          description: DID document has been updated.\n          content:\n            application/json+did-document:\n              schema:\n                $ref: '#/components/schemas/DIDDocument'\n        default:\n          $ref: '../common/error_response.yaml'\n    delete:\n      summary: Deactivates a Nuts DID document according to the specification.\n      description: |\n        Updates a Nuts DID document.\n\n        error returns:\n          * 400 - DID document could not be deleted because the DID param was malformed\n          * 403 - DID document could not be deleted because the DID is not managed by this node\n          * 404 - Corresponding DID document could not be found\n          * 409 - DID document could not be deactivated because the the document was already deactivated\n          * 500 - An error occurred while processing the request\n      operationId: \"deactivateDID\"\n      tags:\n        - DID\n      responses:\n        \"200\":\n          description: DID document has been deactivated.\n        default:\n          $ref: '../common/error_response.yaml'\n  /internal/vdr/v1/did/conflicted:\n    get:\n      summary: \"Retrieve the list of conflicted DID documents\"\n      description: |\n        Resolves DID documents with a conflict. It returns both the DID Document and metadata of the DID Document.\n\n        error returns:\n          * 500 - An error occurred while processing the request\n      operationId: \"conflictedDIDs\"\n      tags:\n        - DID\n      responses:\n        \"200\":\n          description: List of conflicting DID Documents. Empty list if there are none.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DIDResolutionResult'\n        default:\n          $ref: '../common/error_response.yaml'\n  /internal/vdr/v1/did/{did}/verificationmethod:\n    parameters:\n      - name: did\n        in: path\n        description: URL encoded DID.\n        required: true\n        example: \"did:nuts:1234\"\n        schema:\n          type: string\n    post:\n      summary: Creates and adds a new verificationMethod to the DID document.\n      description: |\n        It create a new private public keypair. The public key is wrapped in  verificationMethod. This method is added to the DID Document.\n\n        error returns:\n        * 403 - Verification method could not be added because the DID is not managed by this node\n        * 404 - Corresponding DID document could not be found\n        * 500 - An error occurred while processing the request\n      operationId: addNewVerificationMethod\n      tags:\n        - DID\n      responses:\n        \"200\":\n          description: \"New verification method has been created and added successfully. Returns the DID document.\"\n          content:\n            application/json+did-document:\n              schema:\n                $ref: '#/components/schemas/VerificationMethod'\n        default:\n          $ref: '../common/error_response.yaml'\n  /internal/vdr/v1/did/{did}/verificationmethod/{kid}:\n    parameters:\n      - name: did\n        in: path\n        description: URL encoded DID.\n        required: true\n        example: \"did:nuts:1234\"\n        schema:\n          type: string\n      - name: kid\n        in: path\n        description: URL encoded DID identifying the verification method.\n        required: true\n        example: \"did:nuts:1234#abc\"\n        schema:\n          type: string\n    delete:\n      summary: Delete a specific verification method\n      description: |\n        Removes the verification method from the DID Document.\n        Revokes the public key with the corresponding key-id.\n        Note: Other verification methods with different key-ids with the same private key will still be valid.\n\n        error returns:\n        * 403 - Verification method could not be deleted because the DID is not managed by this node\n        * 404 - Corresponding DID document or verification method could not be found\n        * 500 - An error occurred while processing the request\n      tags:\n        - DID\n      operationId: deleteVerificationMethod\n      responses:\n        \"204\":\n          description: Verification Method was successfully deleted\n        default:\n          $ref: '../common/error_response.yaml'\ncomponents:\n  schemas:\n    DIDDocument:\n      type: object\n      description: A DID document according to the W3C spec following the Nuts Method rules as defined in [Nuts RFC006]\n      required:\n        - id\n        - '@context'\n      properties:\n        '@context':\n          description: The JSON-LD contexts that define the types used in this document. Can be a single string, or a list of strings.\n        controller:\n          description: Single DID (as string) or List of DIDs that have control over the DID document\n        id:\n          description: DID according to Nuts specification\n          example: \"did:nuts:1\"\n          type: string\n        keyAgreement:\n          description: List of KIDs that can be used for encryption\n          type: array\n          items:\n            type: string\n        service:\n          description: List of supported services by the DID subject\n          type: array\n          items:\n            $ref: '#/components/schemas/Service'\n        verificationMethod:\n          description: list of keys\n          type: array\n          items:\n            $ref: '#/components/schemas/VerificationMethod'\n        assertionMethod:\n          description: List of KIDs that may sign JWTs, JWSs and VCs\n          type: array\n          items:\n            type: string\n        authentication:\n          description: List of KIDs that may alter DID documents that they control\n          type: array\n          items:\n            type: string\n        capabilityDelegation:\n          description: List of KIDs that can be used to delegate capabilities that can be invoked using the DID document.\n          type: array\n          items:\n            type: string\n        capabilityInvocation:\n          description: List of KIDs that can be used for signing\n          type: array\n          items:\n            type: string\n    DIDDocumentMetadata:\n      type: object\n      description: The DID document metadata.\n      required:\n        - created\n        - hash\n        - deactivated\n        - txs\n      properties:\n        created:\n          description: Time when DID document was created in rfc3339 form.\n          type: string\n        updated:\n          description: Time when DID document was updated in rfc3339 form.\n          type: string\n        hash:\n          description: Sha256 in hex form of the DID document contents.\n          type: string\n        previousHash:\n          description: Sha256 in hex form of the previous version of this DID document.\n          type: string\n        txs:\n          description: |\n            txs lists the transaction(s) that created the current version of this DID Document.\n            If multiple transactions are listed, the DID Document is conflicted\n          type: array\n          items:\n            type: string\n            description: Sha256 in hex form of the transaction\n            example: \"24af55bd08bfe42c603b87565c31ae8f2770e820c4b32e1e928244775ab3ed19\"\n        deactivated:\n          description: Whether the DID document has been deactivated.\n          type: boolean\n    DIDResolutionResult:\n      required:\n        - document\n        - documentMetadata\n      properties:\n        document:\n          $ref: '#/components/schemas/DIDDocument'\n        documentMetadata:\n          $ref: '#/components/schemas/DIDDocumentMetadata'\n    Service:\n      type: object\n      description: A service supported by a DID subject.\n      required:\n        - id\n        - type\n        - serviceEndpoint\n      properties:\n        id:\n          description: ID of the service.\n          type: string\n        type:\n          description: The type of the endpoint.\n          type: string\n        serviceEndpoint:\n          description: Either a URI or a complex object.\n    DIDUpdateRequest:\n      required:\n        - document\n        - currentHash\n      properties:\n        document:\n          $ref: '#/components/schemas/DIDDocument'\n        currentHash:\n          type: string\n          description: The hash of the document in hex format.\n    VerificationMethod:\n      description: A public key in JWK form.\n      required:\n        - id\n        - type\n        - controller\n        - publicKeyJwk\n      properties:\n        controller:\n          description: The DID subject this key belongs to.\n          example: \"did:nuts:1\"\n          type: string\n        id:\n          description: The ID of the key, used as KID in various JWX technologies.\n          type: string\n        publicKeyJwk:\n          description: The public key formatted according rfc7517.\n          type: object\n        type:\n          description: The type of the key.\n          example: \"JsonWebKey2020\"\n          type: string\n    DIDCreateRequest:\n      properties:\n        controllers:\n          description: |\n            List of DIDs that can control the new DID Document. If selfControl = true and controllers is not empty,\n            the newly generated DID will be added to the list of controllers.\n          type: array\n          items:\n            type: string\n            description: DID according to Nuts specification\n            example: \"did:nuts:128903fjgfslcnmgpe84\"\n        assertionMethod:\n          type: boolean\n          description: indicates if the generated key pair can be used for assertions.\n          default: true\n        authentication:\n          type: boolean\n          description: indicates if the generated key pair can be used for authentication.\n          default: false\n        capabilityInvocation:\n          type: boolean\n          description: |\n            indicates if the generated key pair can be used for altering DID Documents.\n            In combination with selfControl = true, the key can be used to alter the new DID Document.\n            Defaults to true when not given.\n            default: true\n        capabilityDelegation:\n          type: boolean\n          description: indicates if the generated key pair can be used for capability delegations.\n          default: true\n        keyAgreement:\n          type: boolean\n          description: indicates if the generated key pair can be used for Key agreements.\n          default: false\n        selfControl:\n          type: boolean\n          description: whether the generated DID Document can be altered with its own capabilityInvocation key.\n          default: true\n\n\n",
			"canonicalURL": "/github.com/nuts-foundation/nuts-node@596c91cab04b00c7b9fb5fc997a6877b572f916f/-/blob/docs/_static/vdr/v1.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/nuts-foundation/nuts-node/blob/596c91cab04b00c7b9fb5fc997a6877b572f916f/docs/_static/vdr/v1.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/internal/vdr/v1/did\": post: operation \"createDID\": responses: default: at 1:6341: resolve \"../common/error_response.yaml\" reference: external \"../common/error_response.yaml\": get: file: local file reference is not allowed"
}