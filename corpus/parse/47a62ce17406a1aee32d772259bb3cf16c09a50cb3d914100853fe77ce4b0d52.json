{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/theotw/natssync"
		},
		"file": {
			"name": "bridge_server_v1.yaml",
			"size": 0,
			"path": "openapi/bridge_server_v1.yaml",
			"byteSize": 11307,
			"content": "openapi: 3.0.0\ninfo:\n  title: On Prem cloud side REST APIBridge REST API\n  description: Cloud side service to move messages between on prem and cloud\n  version: 1.0.0\n  license:\n    name: Apache\n\nservers:\n  - url: /bridge-server/1\n\npaths:\n  /about:\n    get:\n      summary: Get information about this API\n      operationId: getAbout\n      x-operationAlias: getAbout\n\n      tags:\n        - about\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AboutResponse'\n  /register:\n    get:\n      summary: This endpoint allow the called to find a client ID/location ID based on the meta data assigned to it.\n      description: This endpoint allow the called to find a client ID/location ID based on the meta data assigned to it.  The query string of key and value is how you search.  It is possible to get more than 1 value back based on how the meta data was applied\n      parameters:\n        - in: header\n          name: x-Authorization\n          description: Auth token used to authorized request\n          schema:\n            type: string\n        - in: query\n          name: filter\n          description: a comma seperated list of metadata key=values to filter on\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: List of known clients\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetRegisterOnPremResponse'\n        '401':\n          description: Unauthorized\n\n        '500':\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n\n\n    post:\n      summary: Registers an On Prem region\n      description: Registers an On Prem region\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RegisterOnPremReq'\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                authToken:\n                  type: string\n                metaData:\n                  type: object\n                  additionalProperties:\n                    type: string\n\n                publicKey:\n                  type: string\n                  format: binary\n      responses:\n        '201':\n          description: registration accepted\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterOnPremResponse'\n        '400':\n          description: Client input error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '500':\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /unregister:\n    post:\n      summary: Unregisters an On Prem region\n      description: Unregisters an On Prem region\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UnRegisterOnPremReq'\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                authToken:\n                  type: string\n                metaData:\n                  type: string\n      responses:\n        '204':\n          description: Unregistration OK\n        '400':\n          description: Client input error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '500':\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n\n  /messages:\n    post:\n      summary: Posts a message to the NATS queue system as if it had come from services in the cloud.  Handy for mobile apps\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NatsMessageReq'\n      responses:\n        '202':\n          description: Messages accepted\n        '400':\n          description: Bad juju happened\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponseList'\n        '401':\n          description: Unauthorized, Invalid Auth Challenge\n\n        '500':\n          description: Bad juju happened\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n\n  /message-queue/{premid}:\n    post:\n      summary: Pushes pending messages to the bridge.\n      parameters:\n        - in: path\n          name: premid\n          required: true\n          description: the premise ID\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BridgeMessagePostReq'\n      responses:\n        '202':\n          description: Messages accepted\n        '400':\n          description: Bad juju happened\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponseList'\n        '401':\n          description: Unauthorized, Invalid Auth Challenge\n\n        '500':\n          description: Bad juju happened\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n\n    get:\n      summary: Grabs messages from the cloud side for the given prem ID.\n      description: This call will block for some timeout period (tbd, multiple seconds) waiting for messages.  If none are avilable, it will return an empty array\n      parameters:\n        - in: path\n          name: premid\n          required: true\n          description: the premise ID\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AuthChallenge'\n      responses:\n        '200':\n          description: Messages for the prem ID.  If not messages were available in the timeout period then an empty array is returned\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BridgeMessages'\n        '400':\n          description: Bad juju happened\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '401':\n          description: Unauthorized, Invalid Auth Challenge\n\n        '500':\n          description: Bad juju happened\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n\ncomponents:\n\n  schemas:\n    AuthChallenge:\n      type: object\n      properties:\n        version:\n          type: number\n        authChallengeA:\n          type: string\n        authChellengeB:\n          type: string\n\n    NatsMessageReq:\n      type: object\n      description: This object represents a message to be added to the NATs queue as if the caller was inside the cluster\n      properties:\n        authToken:\n          type: string\n          description: An authorization token for a user that has permissions to post a message to NATS\n        timeout:\n          type: integer\n          description: if a reply subject is provided, it will wait for this number of seconds for the reply, defaults to 30\n          default: 30\n        subject:\n          type: string\n          description: subject for the NATS messages\n        reply:\n          type: string\n          description: optional reply message for nats.  If a reply is provided, the call will block for up to timeout seconds waiting for the reply\n        data:\n          type: string\n          description: data for the message\n\n\n    BridgeMessagePostReq:\n      type: object\n      properties:\n        authChallenge:\n          $ref: '#/components/schemas/AuthChallenge'\n        messages:\n          $ref: '#/components/schemas/BridgeMessages'\n\n    BridgeMessages:\n      type: array\n      items:\n        $ref: '#/components/schemas/BridgeMessage'\n\n    UnRegisterOnPremReq:\n      type: object\n      properties:\n        authToken:\n          type: string\n          description: the format of the auth token can be what ever is needed for authentication.  The auth service used on the back end will determine that.  In its simpliest form it is userID:Password\n        metaData:\n          type: string\n          description: the meta data used to visually identify the user/on prem instance.  this string must be unique to the server but can be anything and be changed\n\n    RegisterOnPremReq:\n      type: object\n      properties:\n        authToken:\n          type: string\n          description: the format of the auth token can be what ever is needed for authentication.  The auth service used on the back end will determine that.  In its simpliest form it is userID:Password\n        metaData:\n          type: object\n          additionalProperties:\n            type: string\n          description: the meta data used to visually identify the user/on prem instance.  this string must be unique to the server but can be anything and be changed\n        publicKey:\n          type: string\n          description: Public key for the On Prem region\n        keyID:\n          type: string\n          description: Public keyID for the On Prem region\n\n    RegisterOnPremResponse:\n      type: object\n      properties:\n        cloudPublicKey:\n          type: string\n        metaData:\n          type: object\n          additionalProperties:\n            type: string\n        premID:\n          type: string\n          description: An ID to use for all other calls of post and get messages\n\n    GetRegisterOnPremResponse:\n      type: array\n      items:\n        $ref: '#/components/schemas/RegisteredClientLocation'\n\n    RegisteredClientLocation:\n      type: object\n      properties:\n        premID:\n          type: string\n          description: An ID to use for all other calls of post and get messages\n        metaData:\n          type: object\n          additionalProperties:\n            type: string\n\n\n\n    BridgeMessage:\n      type: object\n      properties:\n        formatVersion:\n          description: Format version of this message.  This indicates how the message is encrypted\n          example: v1\n          type: string\n        clientID:\n          type: string\n        messageData:\n          description: Encrypted message data.\n          type: string\n\n    ErrorResponseList:\n      type: array\n      items:\n        $ref: '#/components/schemas/ErrorResponse'\n\n    ErrorResponse:\n      type: object\n      required:\n        - code\n        - message\n      properties:\n        code:\n          type: string\n        message:\n          description: An I18N string\n          type: string\n        parameters:\n          type: object\n          additionalProperties:\n            type: string\n\n    AboutResponse:\n      type: object\n      properties:\n        appVersion:\n          type: string\n        apiVersions:\n          type: array\n          items:\n            type: string\n\n",
			"canonicalURL": "/github.com/theotw/natssync@d853b57beb53b7e99a5639a55fb961f525b62e4a/-/blob/openapi/bridge_server_v1.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/theotw/natssync/blob/d853b57beb53b7e99a5639a55fb961f525b62e4a/openapi/bridge_server_v1.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/message-queue/{premid}\": get: parameters: parse parameter \"premid\": at openapi/bridge_server_v1.yaml:199:11: parameter MUST contain either a schema property, or a content property"
}