{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/stefanotorresi/frameworkless-php-boilerplate"
		},
		"file": {
			"name": "todos.openapi.yml",
			"size": 0,
			"path": "docs/todos.openapi.yml",
			"byteSize": 5854,
			"content": "openapi: 3.0.2\ninfo:\n  title: ToDos API\n  description: A simple CRUD API\n  version: 0.0.1\n\ntags:\n  - name: ToDos\n    description: the ToDo resource\n\npaths:\n  /todos:\n    get:\n      tags: [ ToDos ]\n      summary: List all ToDos\n      operationId: listToDos\n      parameters:\n        - $ref: '#/components/parameters/search'\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/pageSize'\n      responses:\n        '200':\n          $ref: '#/components/responses/ToDoList'\n    post:\n      tags: [ ToDos ]\n      summary: Add a new ToDo\n      operationId: createToDo\n      requestBody:\n        $ref: '#/components/requestBodies/ToDo'\n      responses:\n        '201':\n          $ref: '#/components/responses/ToDo'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n      security:\n        - basicAuth: []\n  /todos/{id}:\n    parameters:\n      - $ref: '#/components/parameters/id'\n    get:\n      tags: [ ToDos ]\n      summary: Get a ToDo\n      operationId: getToDo\n      responses:\n        '200':\n          $ref: '#/components/responses/ToDo'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n    patch:\n      tags: [ ToDos ]\n      summary: Update a ToDo\n      operationId: patchToDo\n      requestBody:\n        $ref: '#/components/requestBodies/ToDo'\n      responses:\n        '200':\n          $ref: '#/components/responses/ToDo'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n      security:\n        - basicAuth: []\n    delete:\n      tags: [ ToDos ]\n      summary: Delete a ToDo\n      operationId: deleteToDo\n      responses:\n        '204':\n          description: Empty response\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n      security:\n        - basicAuth: []\n\ncomponents:\n  schemas:\n    ToDo:\n      properties:\n        id:\n          type: string\n          readOnly: true\n          example: \"fd1a8610-8aa2-485c-880a-90e43ec189c3\"\n        createdAt:\n          type: string\n          readOnly: true\n          example: \"4020-04-20T16:20:00.000000+0000\"\n          format: date-time\n        name:\n          type: string\n          example: \"Pay the bills\"\n        dueFor:\n          type: string\n          example: \"4020-04-20T16:20:00.000000+0000\"\n          format: date-time\n        doneAt:\n          type: string\n          example: \"4020-04-20T16:20:00.000000+0000\"\n          format: date-time\n        isDone:\n          type: bool\n          readOnly: true\n      required:\n        - id\n        - name\n    GenericError:\n      properties:\n        error:\n          type: object\n          properties:\n            message:\n              type: string\n            code:\n              type: integer\n          required:\n            - message\n            - code\n    InvalidDataError:\n      properties:\n        error:\n          type: object\n          properties:\n            message:\n              type: string\n            code:\n              type: integer\n            details:\n              type: object\n              example:\n                messageIdentifier: detailed message\n          required:\n            - message\n            - code\n\n  requestBodies:\n    ToDo:\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ToDo'\n    ToDoRating:\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ToDoRating'\n\n  responses:\n    ToDo:\n      description: A single ToDo\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ToDo'\n    ToDoList:\n      description: A list of ToDos\n      content:\n        application/json:\n          schema:\n            properties:\n              items:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ToDo'\n              nextPage:\n                type: integer\n                example: 2\n              prevPage:\n                type: integer\n                example: null\n              totalPages:\n                type: integer\n                example: 2\n    NotFound:\n      description: Resource not found\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/GenericError'\n    BadRequest:\n      description: Invalid request\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/InvalidDataError'\n    Unauthorized:\n      description: Authentication failed\n      content: {}\n      headers:\n        WWW-Authenticate:\n          schema:\n            type: string\n          description: Supported authentication schema\n\n  parameters:\n    id:\n      in: path\n      name: id\n      description: A string representation of a UUID\n      required: true\n      schema:\n        type: string\n        format: uuid\n        example: 'fd1a8610-8aa2-485c-880a-90e43ec189c3'\n    search:\n      name: search\n      in: query\n      schema:\n        type: string\n        example: 'pay'\n      description: Full text search phrase\n    page:\n      name: page\n      in: query\n      schema:\n        type: integer\n        default: 1\n        example: 1\n      description: The page number\n    pageSize:\n      name: pageSize\n      in: query\n      schema:\n        type: integer\n        default: 20\n        example: 20\n      description: The maximum page size\n  securitySchemes:\n    basicAuth:\n      type: http\n      scheme: basic\n\nsecurity:\n  - basicAuth: []\n"
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"ToDo\": parse schema: property \"isDone\": parse schema: unexpected schema type: \"bool\""
}