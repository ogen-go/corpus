{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/outstack/enveloper"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "docs/api/openapi.yaml",
			"byteSize": 5122,
			"content": "openapi: 3.0.0\ninfo:\n  description: |\n\n    # Introduction\n    Enveloper is a small service intended to be run in your infrastucture to speed up developing and testing\n    transactional emails in your application.\n\n    This document describes the API, its endpoints and their structure. For information on getting started,\n    take a look at the [project on github](https://github.com/outstack/enveloper) or the\n    [getting started guide](https://github.com/outstack/enveloper/blob/master/docs/01-getting-started.md).\n\n    # Authentication\n    There is currently no authentication mechanism for Enveloper. You should either avoid exposing it publicly over\n    the internet or place it behind an API gateway such as Tyk, Kong or Amazon API Gateway.\n\n  version: 1.0.0\n  title: Enveloper API\n  contact:\n    email: adamquaile@gmail.com\n    url: https://enveloper.io\n  license:\n    name: No Licence\n    url: 'https://github.com/outstack/enveloper/blob/master/LICENSE.md'\nexternalDocs:\n  description: View the Enveloper Github repository\n  url: 'https://github.com/outstack/enveloper'\ntags:\n  - name: Messages\n    description: |\n      A message is the result of a template and a set of parameters combined.\npaths:\n  /outbox/preview:\n    post:\n      tags:\n        - Messages\n      summary: Preview message\n      description: |\n        Useful for testing how certain parameters will affect the layout of an email, or how changes to an email\n        template will appear visually.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: './build/endpoints/outbox/preview/post.requestBody.schema.openapi'\n      responses:\n        '200':\n          description: 'Preview successfully rendered'\n          content:\n            text/plain:\n              schema:\n                type: string\n              example: |\n                Your order has shipped\n                ----------------------\n\n                Thanks for your order - it's on its way!\n            text/html:\n              schema:\n                type: string\n              example: |\n                \u003ch1\u003eYour order has shipped\u003c/h1\u003e\n                \u003cp\u003eThanks for your order - it's on its way!\u003c/p\u003e\n            application/json:\n              schema:\n                $ref: './build/endpoints/outbox/preview/post.responseBody.schema.openapi'\n        '400':\n          description: 'Bad Request'\n          content:\n            application/problem+json:\n              schema:\n                type: object\n                discriminator:\n                  propertyName: title\n                  mapping:\n                    'Syntax Error': '#/Components/schemas/syntax-error'\n                    'Parameters failed JSON schema validation': '#/Components/schemas/failed-json-schema-validation'\n                properties:\n                  title:\n                    description: Brief title for the error\n                    type: string\n        '406':\n          description: Not acceptable\n          content:\n            application/problem+json:\n              schema:\n                $ref: './build/resources/errors/not-acceptable.schema.openapi'\n        '500':\n          description: Server Error\n          content:\n            application/problem+json:\n              schema:\n                $ref: './build/resources/errors/server-error.schema.openapi'\n  /outbox:\n    post:\n      tags:\n        - Messages\n      summary: Send message\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: './build/endpoints/outbox/post.requestBody.schema.openapi'\n      responses:\n        '204':\n          description: 'Message Sent'\n        '400':\n          description: Parameters failed JSON schema validation\n          content:\n            application/problem+json:\n              schema:\n                $ref: './build/resources/errors/failed-json-schema-validation.schema.openapi'\n        '500':\n          description: Server Error\n          content:\n            application/problem+json:\n              schema:\n                $ref: './build/resources/errors/server-error.schema.openapi'\n    get:\n      summary: List sent messages\n      tags:\n        - Messages\n      responses:\n        '200':\n          description: 'List loaded successfully'\n          content:\n            application/json:\n              schema:\n                $ref: './build/endpoints/outbox/get.responseBody.schema.openapi'\n  /outbox/{id}:\n    get:\n      operationId: getSentMessageById\n      summary: Get message details\n      tags:\n        - Messages\n      responses:\n        '200':\n          description: 'Message Found'\n          content:\n            application/json:\n              schema:\n                $ref: './build/endpoints/outbox/getSentMessageById.responseBody.schema.openapi'\n        '404':\n          description: 'No such message'\nservers:\n  - url: 'https://enveloper.example.com'\nComponents:\n  schemas:\n    syntax-error: { $ref: './build/resources/errors/syntax-error.schema.openapi' }\n    failed-json-schema-validation: { $ref: './build/resources/errors/failed-json-schema-validation.schema.openapi' }\n"
		}
	},
	"Error": "parse: parse spec: paths: /outbox/preview: post: operation \"\": requestBody: content: \"application/json\": parse schema: parse schema: resolve \"./build/endpoints/outbox/preview/post.requestBody.schema.openapi\": find schema: external base \"./build/endpoints/outbox/preview/post.requestBody.schema.openapi\" is not supported"
}