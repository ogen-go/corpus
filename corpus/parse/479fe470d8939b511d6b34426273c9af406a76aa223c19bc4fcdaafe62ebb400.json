{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/aws-samples/aws-serverless-saas-workshop"
		},
		"file": {
			"name": "apigateway.yaml",
			"size": 0,
			"path": "Solution/Lab4/server/nested_templates/apigateway.yaml",
			"byteSize": 30185,
			"content": "# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: MIT-0\n\nAWSTemplateFormatVersion: \"2010-09-09\"\nTransform: AWS::Serverless-2016-10-31\nDescription: \u003e\n  Template to setup api gateway, apis, api keys and usage plan as part of bootstrap\nParameters:\n  StageName:\n    Type: String\n  RegisterTenantLambdaExecutionRoleArn:\n    Type: String\n  TenantManagementLambdaExecutionRoleArn:\n    Type: String\n  RegisterTenantFunctionArn:\n    Type: String\n  ActivateTenantFunctionArn:\n    Type: String\n  GetTenantsFunctionArn:\n    Type: String\n  CreateTenantFunctionArn:\n    Type: String\n  GetTenantFunctionArn:\n    Type: String\n  DeactivateTenantFunctionArn:\n    Type: String\n  UpdateTenantFunctionArn:\n    Type: String\n  GetUsersFunctionArn:\n    Type: String    \n  GetUserFunctionArn:\n    Type: String\n  UpdateUserFunctionArn:\n    Type: String\n  DisableUserFunctionArn:\n    Type: String\n  CreateTenantAdminUserFunctionArn:\n    Type: String\n  CreateUserFunctionArn:\n    Type: String\n  DisableUsersByTenantFunctionArn:\n    Type: String\n  EnableUsersByTenantFunctionArn:\n    Type: String\n  AuthorizerFunctionArn:\n    Type: String\n  \nResources:\n  ApiGatewayCloudWatchLogRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: !Sub apigateway-cloudwatch-publish-role-${AWS::Region}\n      Path: \"/\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - apigateway.amazonaws.com\n            Action:\n              - sts:AssumeRole\n  ApiGatewayAttachCloudwatchLogArn:\n    Type: AWS::ApiGateway::Account\n    Properties:\n      CloudWatchRoleArn: !GetAtt ApiGatewayCloudWatchLogRole.Arn\n\n  AdminApiGatewayAccessLogs:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: !Sub /aws/api-gateway/access-logs-serverless-saas-admin-api\n      RetentionInDays: 30\n  AdminApiGatewayApi:\n    Type: AWS::Serverless::Api\n    Properties:\n      MethodSettings:\n        - DataTraceEnabled: False\n          LoggingLevel: INFO\n          MetricsEnabled: True\n          ResourcePath: \"/*\"\n          HttpMethod: \"*\"\n      Auth:\n        ResourcePolicy:\n          CustomStatements:\n            - Effect: Allow\n              Principal: \"*\"\n              Action: \"execute-api:Invoke\"\n              Resource: [\"execute-api:/*/*/*\"]\n            - Effect: Deny\n              Principal: \"*\"\n              Action: \"execute-api:Invoke\"\n              Resource: \n                - !Join [\n                   \"\",\n                   [\n                     \"execute-api:/\", !Ref StageName, \"/POST/tenant\"\n                   ]\n                  ] \n                - !Join [ \"\", [\n                     \"execute-api:/\", !Ref StageName, \"/POST/user/tenant-admin\"\n                   ]\n                 ]                \n              Condition:\n                StringNotEquals:\n                  aws:PrincipalArn:\n                    - !Ref RegisterTenantLambdaExecutionRoleArn \n                    - !Ref TenantManagementLambdaExecutionRoleArn \n            - Effect: Deny\n              Principal: \"*\"\n              Action: \"execute-api:Invoke\"\n              Resource: \n                - !Join [ \"\", [\n                     \"execute-api:/\", !Ref StageName, \"/PUT/users/disable\"\n                   ]\n                 ]                \n              Condition:\n                StringNotEquals:\n                  aws:PrincipalArn:\n                    - !Ref TenantManagementLambdaExecutionRoleArn\n            - Effect: Deny\n              Principal: \"*\"\n              Action: \"execute-api:Invoke\"\n              Resource: \n                - !Join [ \"\", [\n                     \"execute-api:/\", !Ref StageName, \"/PUT/users/enable\"\n                   ]\n                 ]                \n              Condition:\n                StringNotEquals:\n                  aws:PrincipalArn:\n                    - !Ref TenantManagementLambdaExecutionRoleArn            \n      AccessLogSetting:\n        DestinationArn: !GetAtt AdminApiGatewayAccessLogs.Arn\n        Format: '{ \"requestId\":\"$context.requestId\", \"ip\": \"$context.identity.sourceIp\", \"caller\":\"$context.identity.caller\", \"user\":\"$context.identity.user\",\"requestTime\":\"$context.requestTime\", \"httpMethod\":\"$context.httpMethod\",\"resourcePath\":\"$context.resourcePath\", \"status\":\"$context.status\",\"protocol\":\"$context.protocol\", \"responseLength\":\"$context.responseLength\" }'\n      TracingEnabled: True\n      DefinitionBody:\n        openapi: 3.0.1\n        info:\n          title: !Join [\"\", [\"serverless-saas-admin-api-\", !Ref \"AWS::Region\"]]\n        basePath: !Join [\"\", [\"/\", !Ref StageName]]\n        schemes:\n          - https\n        paths:\n          /registration:\n            post:\n              summary: Register a new tenant\n              description: Register a new tenant\n              produces:\n                - application/json\n              responses: {}\n              x-amazon-apigateway-integration:\n                uri: !Join\n                  - \"\"\n                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/\n                    - !Ref RegisterTenantFunctionArn\n                    - /invocations\n                httpMethod: POST\n                type: aws_proxy\n            options:\n              consumes:\n                - application/json\n              produces:\n                - application/json\n              responses:\n                \"200\":\n                  description: 200 response\n                  schema:\n                    $ref: \"#/definitions/Empty\"\n                  headers:\n                    Access-Control-Allow-Origin:\n                      type: string\n                    Access-Control-Allow-Methods:\n                      type: string\n                    Access-Control-Allow-Headers:\n                      type: string\n              x-amazon-apigateway-integration:\n                responses:\n                  default:\n                    statusCode: 200\n                    responseParameters:\n                      method.response.header.Access-Control-Allow-Methods: \"'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'\"\n                      method.response.header.Access-Control-Allow-Headers: \"'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'\"\n                      method.response.header.Access-Control-Allow-Origin: \"'*'\"\n                passthroughBehavior: when_no_match\n                requestTemplates:\n                  application/json: '{\"statusCode\": 200}'\n                type: mock                   \n          \n          /tenant/activation/{tenantid}:\n            put:\n              security:\n                - api_key: []\n                - Authorizer: []\n              summary: Activate an existing tenant\n              description: Activate an existing tenant\n              produces:\n                - application/json\n              responses: {}\n              x-amazon-apigateway-integration:\n                uri: !Join\n                  - \"\"\n                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/\n                    - !Ref ActivateTenantFunctionArn\n                    - /invocations\n                httpMethod: POST\n                type: aws_proxy\n            options:\n              consumes:\n                - application/json\n              produces:\n                - application/json\n              responses:\n                \"200\":\n                  description: 200 response\n                  schema:\n                    $ref: \"#/definitions/Empty\"\n                  headers:\n                    Access-Control-Allow-Origin:\n                      type: string\n                    Access-Control-Allow-Methods:\n                      type: string\n                    Access-Control-Allow-Headers:\n                      type: string\n              x-amazon-apigateway-integration:\n                responses:\n                  default:\n                    statusCode: 200\n                    responseParameters:\n                      method.response.header.Access-Control-Allow-Methods: \"'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'\"\n                      method.response.header.Access-Control-Allow-Headers: \"'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'\"\n                      method.response.header.Access-Control-Allow-Origin: \"'*'\"\n                passthroughBehavior: when_no_match\n                requestTemplates:\n                  application/json: '{\"statusCode\": 200}'\n                type: mock\n          /tenants:\n            get:\n              summary: Returns all tenants\n              description: Returns all tenants\n              produces:\n                - application/json\n              responses: {}\n              security:\n                - api_key: []\n                - Authorizer: []\n              x-amazon-apigateway-integration:\n                uri: !Join\n                  - ''\n                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/\n                    -  !Ref GetTenantsFunctionArn\n                    - /invocations\n                httpMethod: POST\n                type: aws_proxy\n            options:\n              consumes:\n                - application/json\n              produces:\n                - application/json\n              responses:\n                \"200\":\n                  description: 200 response\n                  schema:\n                    $ref: \"#/definitions/Empty\"\n                  headers:\n                    Access-Control-Allow-Origin:\n                      type: string\n                    Access-Control-Allow-Methods:\n                      type: string\n                    Access-Control-Allow-Headers:\n                      type: string\n              x-amazon-apigateway-integration:\n                responses:\n                  default:\n                    statusCode: 200\n                    responseParameters:\n                      method.response.header.Access-Control-Allow-Methods: \"'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'\"\n                      method.response.header.Access-Control-Allow-Headers: \"'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'\"\n                      method.response.header.Access-Control-Allow-Origin: \"'*'\"\n                passthroughBehavior: when_no_match\n                requestTemplates:\n                  application/json: '{\"statusCode\": 200}'\n                type: mock                 \n          /tenant:\n            post:\n              summary: Creates a tenant\n              description: Creates a tenant\n              produces:\n                - application/json\n              responses: {}\n              security:\n                - sigv4Reference: []\n              x-amazon-apigateway-integration:\n                uri: !Join\n                  - ''\n                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/\n                    -  !Ref CreateTenantFunctionArn\n                    - /invocations\n                httpMethod: POST\n                type: aws_proxy                \n            options:\n              consumes:\n                - application/json\n              produces:\n                - application/json\n              responses:\n                '200':\n                  description: 200 response\n                  schema:\n                    $ref: \"#/definitions/Empty\"\n                  headers:\n                    Access-Control-Allow-Origin:\n                      type: string\n                    Access-Control-Allow-Methods:\n                      type: string\n                    Access-Control-Allow-Headers:\n                      type: string\n              x-amazon-apigateway-integration:\n                responses:\n                  default:\n                    statusCode: 200\n                    responseParameters:\n                      method.response.header.Access-Control-Allow-Methods: \"'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'\"\n                      method.response.header.Access-Control-Allow-Headers: \"'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'\"\n                      method.response.header.Access-Control-Allow-Origin:  \"'*'\"\n                passthroughBehavior: when_no_match\n                requestTemplates:\n                  application/json: \"{\\\"statusCode\\\": 200}\"\n                type: mock \n          \n          /tenant/{tenantid}:\n            get:\n              summary: Returns a tenant\n              description: Return a tenant by a tenant id\n              produces:\n                - application/json\n              responses: {}\n              security:   \n                - Authorizer: []\n              x-amazon-apigateway-integration:\n                uri: !Join\n                  - ''\n                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/\n                    -  !Ref GetTenantFunctionArn\n                    - /invocations\n                httpMethod: POST\n                type: aws_proxy        \n            delete:              \n              summary: Disables a tenant\n              description: Disables a tenant by a tenant id\n              produces:\n                - application/json\n              responses: {}\n              security:   \n                - Authorizer: []\n              x-amazon-apigateway-integration:\n                uri: !Join\n                  - ''\n                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/\n                    -  !Ref DeactivateTenantFunctionArn\n                    - /invocations\n                httpMethod: POST\n                type: aws_proxy\n            put:  \n              summary: Updates a tenant\n              description: Updates a tenant\n              produces:\n                - application/json\n              responses: {}\n              security:        \n                - Authorizer: []\n              x-amazon-apigateway-integration:\n                uri: !Join\n                  - ''\n                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/\n                    -  !Ref UpdateTenantFunctionArn\n                    - /invocations\n                httpMethod: POST\n                type: aws_proxy            \n            options:\n              consumes:\n                - application/json\n              produces:\n                - application/json\n              responses:\n                '200':\n                  description: 200 response\n                  schema:\n                    $ref: \"#/definitions/Empty\"\n                  headers:\n                    Access-Control-Allow-Origin:\n                      type: string\n                    Access-Control-Allow-Methods:\n                      type: string\n                    Access-Control-Allow-Headers:\n                      type: string\n              x-amazon-apigateway-integration:\n                responses:\n                  default:\n                    statusCode: 200\n                    responseParameters:\n                      method.response.header.Access-Control-Allow-Methods: \"'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'\"\n                      method.response.header.Access-Control-Allow-Headers: \"'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'\"\n                      method.response.header.Access-Control-Allow-Origin:  \"'*'\"\n                passthroughBehavior: when_no_match\n                requestTemplates:\n                  application/json: \"{\\\"statusCode\\\": 200}\"\n                type: mock     \n            \n          /user/{username}:\n            get:\n              summary: Returns a user\n              description: Return a user by a user id\n              produces:\n                - application/json\n              responses: {}\n              security:     \n                - Authorizer: []\n              x-amazon-apigateway-integration:\n                uri: !Join\n                  - ''\n                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/\n                    -  !Ref GetUserFunctionArn\n                    - /invocations\n                httpMethod: POST\n                type: aws_proxy    \n            put:              \n              produces:\n                - application/json\n              responses: {}\n              security:                \n                - Authorizer: []\n              x-amazon-apigateway-integration:\n                uri: !Join\n                  - ''\n                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/\n                    -  !Ref UpdateUserFunctionArn\n                    - /invocations\n                httpMethod: POST\n                type: aws_proxy\n            delete:          \n              summary: Diables a user\n              description: Disable a user by a user id    \n              produces:\n                - application/json\n              responses: {}\n              security: \n                - Authorizer: []\n              x-amazon-apigateway-integration:\n                uri: !Join\n                  - ''\n                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/\n                    -  !Ref DisableUserFunctionArn\n                    - /invocations\n                httpMethod: POST\n                type: aws_proxy\n          /user/tenant-admin:\n            post:\n              summary: Creates a tenant admin user\n              description: Creates a tenant admin user\n              produces:\n                - application/json\n              responses: {}\n              security:\n                - sigv4Reference: []\n              x-amazon-apigateway-integration:\n                uri: !Join\n                  - ''\n                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/\n                    -  !Ref CreateTenantAdminUserFunctionArn\n                    - /invocations\n                httpMethod: POST\n                type: aws_proxy          \n            options:\n              consumes:\n                - application/json\n              produces:\n                - application/json\n              responses:\n                '200':\n                  description: 200 response\n                  schema:\n                    $ref: \"#/definitions/Empty\"\n                  headers:\n                    Access-Control-Allow-Origin:\n                      type: string\n                    Access-Control-Allow-Methods:\n                      type: string\n                    Access-Control-Allow-Headers:\n                      type: string\n              x-amazon-apigateway-integration:\n                responses:\n                  default:\n                    statusCode: 200\n                    responseParameters:\n                      method.response.header.Access-Control-Allow-Methods: \"'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'\"\n                      method.response.header.Access-Control-Allow-Headers: \"'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'\"\n                      method.response.header.Access-Control-Allow-Origin:  \"'*'\"\n                passthroughBehavior: when_no_match\n                requestTemplates:\n                  application/json: \"{\\\"statusCode\\\": 200}\"\n                type: mock       \n          /user:\n            post:\n              summary: Create a user\n              description: Create a user by a user id\n              produces:\n                - application/json\n              responses: {}\n              security:            \n                - Authorizer: []\n              x-amazon-apigateway-integration:\n                uri: !Join\n                  - ''\n                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/\n                    -  !Ref CreateUserFunctionArn\n                    - /invocations\n                httpMethod: POST\n                type: aws_proxy\n                        \n            options:\n              consumes:\n                - application/json\n              produces:\n                - application/json\n              responses:\n                '200':\n                  description: 200 response\n                  schema:\n                    $ref: \"#/definitions/Empty\"\n                  headers:\n                    Access-Control-Allow-Origin:\n                      type: string\n                    Access-Control-Allow-Methods:\n                      type: string\n                    Access-Control-Allow-Headers:\n                      type: string\n              x-amazon-apigateway-integration:\n                responses:\n                  default:\n                    statusCode: 200\n                    responseParameters:\n                      method.response.header.Access-Control-Allow-Methods: \"'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'\"\n                      method.response.header.Access-Control-Allow-Headers: \"'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'\"\n                      method.response.header.Access-Control-Allow-Origin:  \"'*'\"\n                passthroughBehavior: when_no_match\n                requestTemplates:\n                  application/json: \"{\\\"statusCode\\\": 200}\"\n                type: mock \n          /users:\n            get:\n              summary: Get all users by tenantId\n              description: Get all users by tenantId\n              produces:\n                - application/json\n              responses: {}\n              security:   \n                - Authorizer: []\n              x-amazon-apigateway-integration:\n                uri: !Join\n                  - ''\n                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/\n                    -  !Ref GetUsersFunctionArn\n                    - /invocations\n                httpMethod: POST\n                type: aws_proxy\n                        \n            options:\n              consumes:\n                - application/json\n              produces:\n                - application/json\n              responses:\n                '200':\n                  description: 200 response\n                  schema:\n                    $ref: \"#/definitions/Empty\"\n                  headers:\n                    Access-Control-Allow-Origin:\n                      type: string\n                    Access-Control-Allow-Methods:\n                      type: string\n                    Access-Control-Allow-Headers:\n                      type: string\n              x-amazon-apigateway-integration:\n                responses:\n                  default:\n                    statusCode: 200\n                    responseParameters:\n                      method.response.header.Access-Control-Allow-Methods: \"'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'\"\n                      method.response.header.Access-Control-Allow-Headers: \"'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'\"\n                      method.response.header.Access-Control-Allow-Origin:  \"'*'\"\n                passthroughBehavior: when_no_match\n                requestTemplates:\n                  application/json: \"{\\\"statusCode\\\": 200}\"\n                type: mock         \n          /users/disable:\n            put:\n              summary: disable users by tenant id\n              description: disable users by tenant id\n              produces:\n                - application/json\n              responses:\n                '200':\n                  description: 200 response\n                  schema:\n                    $ref: \"#/definitions/Empty\"\n                  headers:\n                    Access-Control-Allow-Origin:\n                      type: string\n                    Access-Control-Allow-Methods:\n                      type: string\n                    Access-Control-Allow-Headers:\n                      type: string\n              security:     \n                - sigv4Reference: []\n              x-amazon-apigateway-integration:\n                responses:\n                  default:\n                    statusCode: 200\n                    responseParameters:\n                      method.response.header.Access-Control-Allow-Methods: \"'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'\"\n                      method.response.header.Access-Control-Allow-Headers: \"'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'\"\n                      method.response.header.Access-Control-Allow-Origin:  \"'*'\"\n                passthroughBehavior: when_no_match                \n                uri: !Join\n                  - ''\n                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/\n                    -  !Ref DisableUsersByTenantFunctionArn\n                    - /invocations\n                httpMethod: POST\n                type: AWS\n                requestParameters:\n                  integration.request.header.X-Amz-Invocation-Type: '''Event'''\n            options:\n              consumes:\n                - application/json\n              produces:\n                - application/json\n              responses:\n                '200':\n                  description: 200 response\n                  schema:\n                    $ref: \"#/definitions/Empty\"\n                  headers:\n                    Access-Control-Allow-Origin:\n                      type: string\n                    Access-Control-Allow-Methods:\n                      type: string\n                    Access-Control-Allow-Headers:\n                      type: string\n              x-amazon-apigateway-integration:\n                responses:\n                  default:\n                    statusCode: 200\n                    responseParameters:\n                      method.response.header.Access-Control-Allow-Methods: \"'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'\"\n                      method.response.header.Access-Control-Allow-Headers: \"'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'\"\n                      method.response.header.Access-Control-Allow-Origin:  \"'*'\"\n                passthroughBehavior: when_no_match\n                requestTemplates:\n                  application/json: \"{\\\"statusCode\\\": 200}\"\n                type: mock  \n          /users/enable:\n            put:\n              summary: enable users by tenant id\n              description: enable users by tenant id\n              produces:\n                - application/json\n              responses:\n                '200':\n                  description: 200 response\n                  schema:\n                    $ref: \"#/definitions/Empty\"\n                  headers:\n                    Access-Control-Allow-Origin:\n                      type: string\n                    Access-Control-Allow-Methods:\n                      type: string\n                    Access-Control-Allow-Headers:\n                      type: string\n              security:     \n                - sigv4Reference: []\n              x-amazon-apigateway-integration:\n                responses:\n                  default:\n                    statusCode: 200\n                    responseParameters:\n                      method.response.header.Access-Control-Allow-Methods: \"'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'\"\n                      method.response.header.Access-Control-Allow-Headers: \"'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'\"\n                      method.response.header.Access-Control-Allow-Origin:  \"'*'\"\n                passthroughBehavior: when_no_match                \n                uri: !Join\n                  - ''\n                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/\n                    -  !Ref EnableUsersByTenantFunctionArn\n                    - /invocations\n                httpMethod: POST\n                type: AWS\n                requestParameters:\n                  integration.request.header.X-Amz-Invocation-Type: '''Event'''\n                        \n            options:\n              consumes:\n                - application/json\n              produces:\n                - application/json\n              responses:\n                '200':\n                  description: 200 response\n                  schema:\n                    $ref: \"#/definitions/Empty\"\n                  headers:\n                    Access-Control-Allow-Origin:\n                      type: string\n                    Access-Control-Allow-Methods:\n                      type: string\n                    Access-Control-Allow-Headers:\n                      type: string\n              x-amazon-apigateway-integration:\n                responses:\n                  default:\n                    statusCode: 200\n                    responseParameters:\n                      method.response.header.Access-Control-Allow-Methods: \"'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'\"\n                      method.response.header.Access-Control-Allow-Headers: \"'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'\"\n                      method.response.header.Access-Control-Allow-Origin:  \"'*'\"\n                passthroughBehavior: when_no_match\n                requestTemplates:\n                  application/json: \"{\\\"statusCode\\\": 200}\"\n                type: mock  \n        components:\n          securitySchemes:      \n            sigv4Reference:\n              type: \"apiKey\"\n              name: \"Authorization\"\n              in: \"header\"\n              x-amazon-apigateway-authtype: \"awsSigv4\"  \n            Authorizer:\n              type: \"apiKey\"\n              name: \"Authorization\"\n              in: \"header\"\n              x-amazon-apigateway-authtype: \"custom\"\n              x-amazon-apigateway-authorizer:\n                authorizerUri: !Join\n                  - ''\n                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/\n                    -  !Ref AuthorizerFunctionArn\n                    - /invocations\n                authorizerResultTtlInSeconds: 60\n                type: \"token\"\n      StageName: prod\n  \n  \nOutputs:  \n  AdminApiGatewayApi:\n    Value: !Ref AdminApiGatewayApi",
			"canonicalURL": "/github.com/aws-samples/aws-serverless-saas-workshop@760968b1de5901e15b55bae18d4a47f6b5e87f61/-/blob/Solution/Lab4/server/nested_templates/apigateway.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/aws-samples/aws-serverless-saas-workshop/blob/760968b1de5901e15b55bae18d4a47f6b5e87f61/Solution/Lab4/server/nested_templates/apigateway.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse version: at Solution/Lab4/server/nested_templates/apigateway.yaml:4:1: invalid version: invalid major version: strconv.Atoi: parsing \"\": invalid syntax"
}