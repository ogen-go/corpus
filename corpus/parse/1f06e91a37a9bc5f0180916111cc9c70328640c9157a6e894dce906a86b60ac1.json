{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/blockchain/lib-exchange-client"
		},
		"file": {
			"name": "specification.yaml",
			"size": 0,
			"path": "specification.yaml",
			"byteSize": 31623,
			"content": "openapi: 3.0.0\ninfo:\n  title: Blockchain.com Exchange REST API\n  description: |\n    ## Introduction\n    Welcome to Blockchain.com's Exchange API and developer documentation. \\\n    These documents detail and give examples of various functionality offered by the API such as receiving real time market data, requesting balance information and performing trades.\n    ## To Get Started\n    Create or log into your existing Blockchain.com Exchange account \\\n    Select API from the drop down menu \\\n    Fill out form and click “Create New API Key Now” \\\n    Once generated you can view your keys under API Settings. \\\n    Please be aware that the API key can only be used once it was verified via email.\n\n    The API key must be set via the \\\n    `X-API-Token`\\\n    header.\n\n    The base URL to be used for all calls is \\\n    `https://api.blockchain.com/v3/exchange`\n\n    Autogenerated clients for this API can be found [here](https://github.com/blockchain/lib-exchange-client).\n\n  version: 1.0.0\nservers:\n  - url: 'https://api.blockchain.com/v3/exchange'\n\nsecurity:\n  - ApiKeyAuth: []\n\ntags:\n  - name: unauthenticated\n    description: \"Retrieve current prices and markets\"\n  - name: trading\n    description: \"Post orders and get information about historical trades\"\n  - name: payments\n    description: \"Get account status and initiate deposits and withdrawals\"\n\npaths:\n  ############################################# Unauthenticated channels\n  /l2/{symbol}:\n    get:\n      summary: \"L2 Order Book\"\n      description: \"Level 2 Order Book data is available through the l2 channel. Each entry in bids and asks arrays is a price level, along with its price (px), quantity (qty) and number of orders (num) attributes.\"\n      operationId: getL2OrderBook\n      tags:\n        - unauthenticated\n      security:\n        - ApiKeyAuth: []\n        - {}\n      parameters:\n        - $ref: '#/components/parameters/symbolParam'\n      responses:\n        '200':\n          description: \"Success\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OrderBook'\n\n  /l3/{symbol}:\n    get:\n      summary: \"L3 Order Book\"\n      description: \"Level 3 Order Book data is available through the l3 channel. Each entry in bids and asks arrays is an order, along with its id (id), price (px) and quantity (qty) attributes. In contrast to the L2 order book, the L3 order book contains all individual orders without aggregation.\"\n      operationId: getL3OrderBook\n      tags:\n        - unauthenticated\n      security:\n        - ApiKeyAuth: []\n        - {}\n      parameters:\n        - $ref: '#/components/parameters/symbolParam'\n      responses:\n        '200':\n          description: \"Success\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OrderBook'\n\n  /tickers:\n    get:\n      summary: \"Price\"\n      description: \"\" #TODO\n      operationId: getTickers\n      tags:\n        - unauthenticated\n      security:\n        - ApiKeyAuth: []\n        - {}\n      responses:\n        '200':\n          description: \"Success\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/PriceEvent'\n  /tickers/{symbol}:\n    get:\n      summary: \"Price\"\n      description: \"\" #TODO\n      operationId: getTickerBySymbol\n      tags:\n        - unauthenticated\n      security:\n        - ApiKeyAuth: []\n        - {}\n      parameters:\n        - $ref: '#/components/parameters/symbolParam'\n      responses:\n        '200':\n          description: \"Success\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PriceEvent'\n\n  /symbols:\n    get:\n      summary: \"Symbols\"\n      description: \"When the symbol is not halted the auction data in the message may be blank.\n\n                    When a symbol is in a halt state the auction data will populate as the book builds. When an opening time has been chosen, the auction-time field will show the opening time. Subsequent updates will be sent only if the symbol status changes in any way.\"\n      operationId: getSymbols\n      tags:\n        - unauthenticated\n      security:\n        - ApiKeyAuth: []\n        - {}\n      responses:\n        '200':\n          description: \"Success\"\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  $ref: '#/components/schemas/SymbolStatus'\n  /symbols/{symbol}:\n    get:\n      summary: \"Symbols\"\n      description: \"When the symbol is not halted the auction data in the message may be blank.\n\n                    When a symbol is in a halt state the auction data will populate as the book builds. When an opening time has been chosen, the auction-time field will show the opening time. Subsequent updates will be sent only if the symbol status changes in any way.\"\n      operationId: getSymbolByName\n      tags:\n        - unauthenticated\n      security:\n        - ApiKeyAuth: []\n        - {}\n      parameters:\n        - $ref: '#/components/parameters/symbolParam'\n      responses:\n        '200':\n          description: \"Success\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SymbolStatus'\n\n ############################################# Authenticated channels\n  /accounts:\n    get:\n      summary: \"Receive current account balances\"\n      description: \"\" #TODO\n      operationId: getAccounts\n      tags:\n        - payments\n      responses:\n        '200':\n          description: \"Success\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BalanceMap'\n  /accounts/{account}/{currency}:\n    get:\n      summary: \"Receive current account balances\"\n      description: \"\" #TODO\n      operationId: getAccountByTypeAndCurrency\n      tags:\n        - payments\n      parameters:\n        - in: path\n          name: account\n          description: \"Account\"\n          required: true\n          schema:\n            type: string\n          example: \"primary\"\n        - $ref: '#/components/parameters/currencyParam'\n      responses:\n        '200':\n          description: \"Success\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Balance'\n\n  /fees:\n    get:\n      summary: \"Get current fee level\"\n      description: \"\"\n      operationId: getFees\n      tags:\n        - trading\n      responses:\n        '200':\n          description: \"Success\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Fees'\n\n  /orders:\n    get:\n      summary: \"Get a list orders\"\n      description: \"Returns live and historic orders, defaulting to live orders. Returns at most 100 results, use timestamp to paginate for further results\"\n      operationId: getOrders\n      tags:\n        - trading\n      parameters:\n        - $ref: '#/components/parameters/symbolFilter'\n        - $ref: '#/components/parameters/timeFromFilter'\n        - $ref: '#/components/parameters/timeToFilter'\n        - $ref: '#/components/parameters/orderStatusFilter'\n        - $ref: '#/components/parameters/limitFilter'\n      responses:\n        '200':\n          description: \"Success\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                 $ref: '#/components/schemas/OrderSummary'\n    post:\n      summary: \"Add an order\"\n      description: \"\" # TODO add table\n      operationId: createOrder\n      tags:\n        - trading\n      requestBody:\n        description: \"Trade\"\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BaseOrder'\n      responses:\n        '200':\n          description: \"Success\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OrderSummary'\n    delete:\n      summary: \"Delete all open orders (of a symbol, if specified)\"\n      description: \"\"\n      operationId: deleteAllOrders\n      tags:\n        - trading\n      parameters:\n        - in: query\n          name: symbol\n          required: false\n          schema:\n            $ref: '#/components/schemas/symbol'\n      responses:\n        '200':\n          description: \"Success\"\n          # TODO is there any good response we should give?\n\n  /orders/{orderId}:\n    get:\n      summary: \"Get a specific order\"\n      description: \"\"\n      operationId: getOrderById\n      tags:\n        - trading\n      parameters:\n        - $ref: '#/components/parameters/orderIdParam'\n      responses:\n        '200':\n          description: \"Success\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OrderSummary'\n        '404':\n          description: \"Not found\"\n    delete:\n      summary: \"Cancel a trade\"\n      description: \"\"\n      operationId: deleteOrder\n      tags:\n        - trading\n      parameters:\n        - $ref: '#/components/parameters/orderIdParam'\n      responses:\n        '200':\n          description: \"Success\"\n          # TODO is there any good response we should give?\n  /trades:\n    get:\n      summary: \"Get a list of filled orders\"\n      description: \"Returns filled orders, including partial fills. Returns at most 100 results, use timestamp to paginate for further results\"\n      operationId: getFills\n      tags:\n        - trading\n      parameters:\n        - $ref: '#/components/parameters/symbolFilter'\n        - $ref: '#/components/parameters/timeFromFilter'\n        - $ref: '#/components/parameters/timeToFilter'\n        - $ref: '#/components/parameters/limitFilter'\n      responses:\n        '200':\n          description: \"Success\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/OrderSummary'\n  /deposits/{currency}:\n    post:\n      summary: \"Get a deposit address. Currently only crypto currencies are supported\"\n      description: \"\"\n      operationId: getDepositAddress\n      tags:\n        - payments\n      parameters:\n        - $ref: '#/components/parameters/currencyParam'\n      responses:\n        '200':\n          description: \"Success\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DepositAddressCrypto'\n  /deposits:\n    get:\n      summary: \"Get a list of deposits\"\n      description: \"\"\n      operationId: getDeposits\n      tags:\n        - payments\n      parameters:\n        - $ref: '#/components/parameters/timeFromFilter'\n        - $ref: '#/components/parameters/timeToFilter'\n      responses:\n        '200':\n          description: \"Success\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DepositInfo'\n  /deposits/{depositId}:\n    get:\n      summary: \"Get status about a deposit\"\n      description: \"\"\n      operationId: getDepositById\n      tags:\n        - payments\n      parameters:\n        - name: depositId\n          in: path\n          description: \"Deposit ID\"\n          required: true\n          schema:\n            type: string\n            # TODO uuid pattern\n      responses:\n        '200':\n          description: \"Success\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DepositInfo'\n        '404':\n          description: \"Not found\"\n\n  /whitelist:\n    get:\n      summary: \"Get a list of all whitelisted withdrawal accounts\"\n      description: \"\"\n      operationId: getWhitelist\n      tags:\n        - payments\n      responses:\n        '200':\n          description: \"Success\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/WhitelistEntry'\n  /whitelist/{currency}:\n    get:\n      summary: \"Get a list of all whitelisted withdrawal accounts\"\n      description: \"\"\n      operationId: getWhitelistByCurrency\n      tags:\n        - payments\n      parameters:\n        - $ref: '#/components/parameters/currencyParam'\n      responses:\n        '200':\n          description: \"Success\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/WhitelistEntry'\n\n  /withdrawals:\n    get:\n      summary: \"Get a list of withdrawals\"\n      description: \"\"\n      operationId: getWithdrawals\n      tags:\n        - payments\n      parameters:\n        - $ref: '#/components/parameters/timeFromFilter'\n        - $ref: '#/components/parameters/timeToFilter'\n      responses:\n        '200':\n          description: \"Success\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                 $ref: '#/components/schemas/WithdrawalInfo'\n    post:\n      summary: \"Request a withdrawal\"\n      description: \"Call `GET /whitelist` first to retrieve the ID of the beneficiary. To add a beneficiary to the whitelist, please visit the profile page in the Exchange. This call only works if 2FA is enabled on the account.\"\n      operationId: createWithdrawal\n      tags:\n        - payments\n      requestBody:\n        description: \"\"\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateWithdrawalRequest'\n      responses:\n        '200':\n          description: \"Success\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WithdrawalInfo'\n  /withdrawals/{withdrawalId}:\n    get:\n      summary: \"Get status about a withdrawal\"\n      description: \"\"\n      operationId: getWithdrawalById\n      tags:\n        - payments\n      parameters:\n        - name: withdrawalId\n          in: path\n          description: \"Withdrawal ID\"\n          required: true\n          schema:\n            type: string\n            # TODO uuid pattern\n      responses:\n        '200':\n          description: \"Success\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WithdrawalInfo'\n        '404':\n          description: \"Not found\"\n\n\ncomponents:\n  schemas:\n    # Basic Types\n    TimestampEpoch:\n      type: integer\n      format: int64\n      description: \"Time in ms since 01/01/1970 (epoch)\"\n      example: \"1592830770594\"\n    symbol:\n      type: string\n      pattern: \"^[A-Z]{3,5}-[A-Z]{3,5}$\"\n      description: \"Blockchain symbol identifier\"\n      example: \"BTC-USD\"\n    currency:\n      type: string\n      pattern: \"^[A-Z]{3,5}$\"\n      description: \"\" #TODO\n      example: \"BTC\"\n    ExchangeOrderId:\n      type: integer\n      format: int64\n      description: \"The unique order id assigned by the exchange\"\n      example: \"11111111\"\n    ClientOrderId:\n      type: string\n      maxLength: 20\n      pattern: \"^[a-zA-Z0-9]{1,20}$\"\n      description: \"Reference field provided by client. Cannot exceed 20 characters, only alphanumeric characters are allowed.\"\n      example: \"ABC\"\n\n    WithdrawalId:\n      type: string\n      # TODO pattern for uuid\n      description: \"Unique ID for this withdrawal\"\n\n    WithdrawalStatus:\n      type: string\n      enum:\n        - \"REJECTED\"\n        - \"PENDING\"\n        - \"REFUNDED\"\n        - \"FAILED\"\n        - \"COMPLETED\"\n\n    WithdrawalAmount:\n      type: number\n      format: double\n      example: \"12.23\"\n      description: \"The amount to withdraw in the currency specified\"\n\n    WithdrawalFee:\n      type: number\n      format: double\n      example: \"0.0005\"\n      description: \"The amount charged in fees for this withdrawal\"\n\n    WithdrawalBeneficiary:\n      type: string\n\n    WithdrawalInfo:\n      type: object\n      required:\n        - amount\n        - currency\n        - beneficiary\n      properties:\n        withdrawalId:\n          $ref: '#/components/schemas/WithdrawalId'\n        amount:\n          $ref: '#/components/schemas/WithdrawalAmount'\n        fee:\n          $ref: '#/components/schemas/WithdrawalFee'\n        currency:\n          $ref: '#/components/schemas/currency'\n        beneficiary:\n          $ref: '#/components/schemas/WithdrawalBeneficiary'\n        state:\n          $ref: '#/components/schemas/WithdrawalStatus'\n        timestamp:\n          $ref: '#/components/schemas/TimestampEpoch'\n\n    DepositId:\n      type: string\n      # TODO pattern for uuid\n      description: \"Unique ID for this withdrawal\"\n\n    CryptoAddress:\n      type: string\n      description: \"Address to deposit to. If a tag or memo must be used, it is separated by a colon.\"\n\n    DepositAmount:\n      type: number\n      format: double\n      example: \"12.23\"\n      description: \"The amount that is credited in the currency specified\"\n\n    DepositInfo:\n      type: object\n      required:\n        - depositId\n        - amount\n        - currency\n        - address\n        - state\n      properties:\n        depositId:\n          $ref: '#/components/schemas/DepositId'\n        amount:\n          type: number\n          format: double\n          example: \"12.23\"\n          description: \"The amount that is credited in the currency specified\"\n        currency:\n          $ref: '#/components/schemas/currency'\n        address:\n          $ref: '#/components/schemas/CryptoAddress'\n        txHash:\n          type: string\n          description: \"The transaction hash of the transaction that deposited funds\"\n        state:\n          type: string\n          enum:\n            - \"REJECTED\"\n            - \"UNCONFIRMED\"\n            - \"COMPLETED\"\n        timestamp:\n          $ref: '#/components/schemas/TimestampEpoch'\n\n    OrderStatus:\n      type: string\n      example: \"FILLED\"\n      enum:\n        - \"OPEN\"\n        - \"REJECTED\"\n        - \"CANCELED\"\n        - \"FILLED\"\n        - \"PART_FILLED\"\n        - \"EXPIRED\"\n    # Basic Order Creation Types\n    TimeInForce:\n      type: string\n      enum:\n        - \"GTC\"\n        - \"IOC\"\n        - \"FOK\"\n        - \"GTD\"\n      description: \"\\\"GTC\\\" for Good Till Cancel, \\\"IOC\\\" for Immediate or Cancel, \\\"FOK\\\" for Fill or Kill, \\\"GTD\\\" Good Till Date\"\n      example: \"GTC\"\n    timeInForceStop:\n      type: string\n      enum:\n        - \"GTC\"\n        - \"GTD\"\n      description: \"\\\"GTC\\\" for Good Till Cancel, \\\"GTD\\\" Good Till Date\"\n      example: \"GTC\"\n    side:\n      type: string\n      enum:\n        - \"BUY\"\n        - \"SELL\"\n      description: \"\\\"buy\\\" for Buy, \\\"sell\\\" for Sell\"\n      example: \"BUY\"\n    orderQty:\n      type: number\n      format: double\n      description: \"The order size in the terms of the base currency\"\n      example: \"10.23\"\n    price:\n      type: number\n      format: double\n      description: \"The limit price for the order\"\n      example: 0.12345\n    expireDate:\n      type: integer\n      minimum: 20200101\n      maximum: 20501231\n      description: \"expiry date in the format YYYYMMDD\"\n      example: \"20200103\"\n    stopPx:\n      type: number\n      format: double\n      description: \"Price to trigger the stop order\"\n      example: \"3500.12\"\n    minQty:\n      type: number\n      format: double\n      description: \"The minimum quantity required for an IOC fill\"\n      example: \"10.0\"\n    execInst:\n      type: string\n      # TODO enum with allowed values\n      description: \"The order is placed with Add Liquidity Only (aka Post Only): it will not match liquidity immediately. It will be rejected instead of matching liquidity in the market.\"\n      example: \"ALO\"\n    ordType:\n      type: string\n      title: \"Order type\"\n      enum:\n        - \"MARKET\"\n        - \"LIMIT\"\n        - \"STOP\"\n        - \"STOPLIMIT\"\n\n\n    # Different Order types\n    BaseOrder:\n      type: object\n      required:\n        - clOrdId\n        - ordType\n        - symbol\n        - side\n        - orderQty\n      properties:\n        clOrdId:\n          $ref: '#/components/schemas/ClientOrderId'\n        ordType:\n          $ref: '#/components/schemas/ordType'\n        symbol:\n          $ref: '#/components/schemas/symbol'\n        side:\n          $ref: '#/components/schemas/side'\n        orderQty:\n          $ref: '#/components/schemas/orderQty'\n        timeInForce:\n          $ref: '#/components/schemas/TimeInForce'\n        price:\n          $ref: '#/components/schemas/price'\n        expireDate:\n          $ref: '#/components/schemas/expireDate'\n        minQty:\n          $ref: '#/components/schemas/minQty'\n        stopPx:\n          $ref: '#/components/schemas/price'\n      example:\n        clOrdId: '123456'\n        ordType: 'LIMIT'\n        symbol: 'BTC-USD'\n        side: 'BUY'\n        orderQty: '0.1'\n        price: '100'\n\n    OrderSummary:\n      type: object\n      required:\n        - clOrdId\n        - ordType\n        - ordStatus\n        - side\n        - symbol\n      properties:\n        exOrdId:\n          $ref: '#/components/schemas/ExchangeOrderId'\n        clOrdId:\n          $ref: '#/components/schemas/ClientOrderId'\n        ordType:\n          $ref: '#/components/schemas/ordType'\n        ordStatus:\n          $ref: '#/components/schemas/OrderStatus'\n        side:\n          $ref: '#/components/schemas/side'\n        price:\n          $ref: '#/components/schemas/price'\n        text:\n          type: string\n          description: \"The reason for rejecting the order, if applicable\"\n        symbol:\n          $ref: '#/components/schemas/symbol'\n        lastShares:\n          type: number\n          format: double\n          description: \"The executed quantity for the order's last fill\"\n          example: \"0.5678\"\n        lastPx:\n          type: number\n          format: double\n          description: \"The executed price for the last fill\"\n          example: \"3500.12\"\n        leavesQty:\n          # TODO documentation says this should be a string?\n          type: number\n          format: double\n          description: \"For Open and Partially Filled orders this is the remaining quantity open for execution. For Canceled and Expired orders this is the quantity than was still open before cancellation/expiration. For Rejected order this is equal to orderQty. For other states this is always zero.\"\n          example: \"10.0\"\n        cumQty:\n          type: number\n          format: double\n          description: \"The quantity of the order which has been filled\"\n          example: \"0.123345\"\n        avgPx:\n          type: number\n          format: double\n          description: \"Calculated the Volume Weighted Average Price of all fills for this order\"\n          example: \"345.33\"\n        timestamp:\n          $ref: '#/components/schemas/TimestampEpoch'\n\n\n    CancelOrderRequest:\n      type: object\n      required:\n        - action\n        - orderID\n      properties:\n        action:\n          type: string\n          enum:\n            - \"CancelOrderRequest\"\n        orderID:\n          $ref: '#/components/schemas/ExchangeOrderId'\n\n    BalanceMap:\n      type: object\n      properties:\n        primary:\n          $ref: '#/components/schemas/BalanceList'\n      required:\n        - primary\n      additionalProperties:\n        $ref: '#/components/schemas/BalanceList'\n\n    BalanceList:\n      type: array\n      items:\n        $ref: '#/components/schemas/Balance'\n\n    Balance:\n      type: object\n      required:\n        - currency\n        - balance\n        - available\n        - balance_local\n        - available_local\n        - rate\n      properties:\n        currency:\n          $ref: '#/components/schemas/currency'\n        balance:\n          type: number\n          format: double\n          example: \"0.00366963\"\n        available:\n          type: number\n          format: double\n          example: \"0.00266963\"\n        balance_local:\n          type: number\n          format: double\n          example: \"38.746779155\"\n        available_local:\n          type: number\n          format: double\n          example: \"28.188009155\"\n        rate:\n          type: number\n          format: double\n          example: \"10558.77\"\n\n    Fees:\n      type: object\n      required:\n        - makerRate\n        - takerRate\n        - volumeInUSD\n      properties:\n        makerRate:\n          type: number\n          format: double\n          example: \"0.0014\"\n          description: \"\" #TODO\n        takerRate:\n          type: number\n          format: double\n          example: \"0.0024\"\n          description: \"\" #TODO\n        volumeInUSD:\n          type: number\n          format: double\n          example: \"1500.00\"\n          description: \"\" #TODO\n\n\n    WhitelistEntry:\n      type: object\n      properties:\n        whitelistId:\n          type: string\n          description: \"Unique ID for each whitelist entry\"\n        name:\n          type: string\n          description: \"User specified name for this entry\"\n        currency:\n          $ref: '#/components/schemas/currency'\n\n    CreateWithdrawalRequest:\n      type: object\n      required:\n        - currency\n        - beneficiary\n      properties:\n        amount:\n          $ref: '#/components/schemas/WithdrawalAmount'\n        currency:\n          $ref: '#/components/schemas/currency'\n        beneficiary:\n          $ref: '#/components/schemas/WithdrawalBeneficiary'\n        sendMax:\n          type: boolean\n          description: \"If set, sends the full available amount, minus fees. Amount may not be specified in that case. \"\n\n    DepositAddressCrypto:\n      type: object\n      required:\n        - type\n        - address\n      properties:\n        type:\n          type: string\n        address:\n          type: string\n          description: \"Address to deposit to. If a tag or memo must be used, it is separated by a colon.\"\n\n    PriceEvent:\n      type: object\n      properties:\n        symbol:\n          $ref: '#/components/schemas/symbol'\n        price_24h:\n          type: number\n          format: double\n          example: \"4998.0\"\n        volume_24h:\n          type: number\n          format: double\n          example: \"0.3015\"\n        last_trade_price:\n          type: number\n          format: double\n          example: \"5000.0\"\n    PriceEventList:\n      type: object\n      properties:\n        orders:\n          type: array\n          items:\n            $ref: '#/components/schemas/PriceEvent'\n\n    SymbolStatus:\n      type: object\n      properties:\n        base_currency:\n          $ref: '#/components/schemas/symbol'\n        base_currency_scale:\n          type: integer\n          description: \"The number of decimals the currency can be split in\"\n          example: 8\n        counter_currency:\n          $ref: '#/components/schemas/symbol'\n        counter_currency_scale:\n          type: integer\n          description: \"The number of decimals the currency can be split in\"\n          example: 2\n        min_price_increment:\n          type: integer\n          format: int64\n          description: \"The price of the instrument must be a multiple of min_price_increment * (10^-min_price_increment_scale)\"\n          example: 10\n        min_price_increment_scale:\n          type: integer\n          example: 0\n        min_order_size:\n          type: integer\n          format: int64\n          description: \"The minimum quantity for an order for this instrument must be min_order_size*(10^-min_order_size_scale)\"\n          example: 10\n        min_order_size_scale:\n          type: integer\n          example: 2\n        max_order_size:\n          type: integer\n          format: int64\n          description: \"The maximum quantity for an order for this instrument is max_order_size*(10^-max_order_size_scale). If this equal to zero, there is no limit\"\n          example: 0\n        max_order_size_scale:\n          type: integer\n          example: 8\n        lot_size:\n          type: integer\n          format: int64\n          example: 5\n        lot_size_scale:\n          type: integer\n          example: 2\n        status:\n          type: string\n          enum:\n            - \"open\"\n            - \"close\"\n            - \"suspend\"\n            - \"halt\"\n            - \"halt-freeze\"\n          description: \"Symbol status; open, close, suspend, halt, halt-freeze.\"\n        id:\n          type: integer\n          format: int64\n          example: 1\n        auction_price:\n          type: number\n          format: double\n          description: \"If the symbol is halted and will open on an auction, this will be the opening price.\"\n          example: 0.0\n        auction_size:\n          type: number\n          format: double\n          description: \"Opening size\"\n          example: 0.0\n        auction_time:\n          type: string\n          description: \"Opening time in HHMM format\"\n          example: \"1530\"\n        imbalance:\n          type: number\n          format: double\n          description: \"Auction imbalance. If \u003e 0 then there will be buy orders left over at the auction price. If \u003c 0 then there will be sell orders left over at the auction price.\"\n          example: 0.0\n\n\n    OrderBookEntry:\n      type: object\n      properties:\n        px:\n          type: number\n          format: double\n          example: \"8723.45\"\n        qty:\n          type: number\n          format: double\n          example: \"1.45\"\n        num:\n          type: integer\n          format: int64\n          description: \"Either the quantity of orders on this price level for L2, or the individual order id for L3\"\n          example: \"1\"\n\n    OrderBook:\n      type: object\n      properties:\n        symbol:\n          $ref: '#/components/schemas/symbol'\n        bids:\n          type: array\n          items:\n            $ref: '#/components/schemas/OrderBookEntry'\n        asks:\n          type: array\n          items:\n            $ref: '#/components/schemas/OrderBookEntry'\n\n    UnauthorizedError:\n      description: API key is missing or invalid\n      properties:\n        error:\n          type: string\n\n\n\n  parameters:\n    symbolParam:\n      name: symbol\n      in: path\n      description: \"Symbol\"\n      required: true\n      schema:\n        $ref: '#/components/schemas/symbol'\n    currencyParam:\n      name: currency\n      in: path\n      description: \"Currency\"\n      required: true\n      schema:\n        $ref: '#/components/schemas/currency'\n    orderIdParam:\n      name: orderId\n      in: path\n      description: \"Order ID\"\n      required: true\n      schema:\n        $ref: '#/components/schemas/ExchangeOrderId'\n    orderStatusFilter:\n      name: status\n      in: query\n      description: \"Order Status\"\n      required: false\n      schema:\n        $ref: '#/components/schemas/OrderStatus'\n    symbolFilter:\n      name: symbol\n      in: query\n      description: \"Only return results for this symbol\"\n      required: false\n      schema:\n        $ref: '#/components/schemas/symbol'\n    timeFromFilter:\n      name: from\n      in: query\n      description: \"Epoch timestamp in ms\"\n      required: false\n      schema:\n        $ref: '#/components/schemas/TimestampEpoch'\n    timeToFilter:\n      name: to\n      in: query\n      description: \"Epoch timestamp in ms\"\n      required: false\n      schema:\n        $ref: '#/components/schemas/TimestampEpoch'\n    limitFilter:\n      name: limit\n      in: query\n      description: \"Maximum amount of results to return in a single call. If omitted, 100 results are returned by default. \"\n      required: false\n      schema:\n        type: integer\n        format: int32\n        minimum: 1\n        maximum: 1000\n        example: 100\n\n  securitySchemes:\n    ApiKeyAuth:\n      type: apiKey\n      in: header\n      name: X-API-Token",
			"canonicalURL": "/github.com/blockchain/lib-exchange-client@c6a2ef0f4ed8b37af91ad716c1b6c71b9269284c/-/blob/specification.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/blockchain/lib-exchange-client/blob/c6a2ef0f4ed8b37af91ad716c1b6c71b9269284c/specification.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: at 1:15851: duplicate path: \"/deposits/{depositId}\""
}