{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/clouditor/clouditor"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi/orchestrator/openapi.yaml",
			"byteSize": 68073,
			"content": "# Generated with protoc-gen-openapi\n# https://github.com/google/gnostic/tree/master/cmd/protoc-gen-openapi\n\nopenapi: 3.0.3\ninfo:\n    title: Orchestrator API\n    description: Manages the orchestration of components within the Clouditor architecture\n    version: 0.0.1\npaths:\n    /v1/orchestrator/assessment_results:\n        get:\n            tags:\n                - Orchestrator\n            description: List all assessment results. Part of the public API, also exposed as REST.\n            operationId: Orchestrator_ListAssessmentResults\n            parameters:\n                - name: filteredCloudServiceId\n                  in: query\n                  description: Optional. List only assessment results of a specific cloud service.\n                  schema:\n                    type: string\n                - name: filteredCompliant\n                  in: query\n                  description: Optional. List only compliant assessment results.\n                  schema:\n                    type: boolean\n                - name: filteredMetricId\n                  in: query\n                  description: Optional. List only assessment results of a specific metric id.\n                  schema:\n                    type: array\n                    items:\n                        type: string\n                - name: pageSize\n                  in: query\n                  schema:\n                    type: integer\n                    format: int32\n                - name: pageToken\n                  in: query\n                  schema:\n                    type: string\n                - name: orderBy\n                  in: query\n                  schema:\n                    type: string\n                - name: asc\n                  in: query\n                  schema:\n                    type: boolean\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ListAssessmentResultsResponse'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n        post:\n            tags:\n                - Orchestrator\n            description: Stores the assessment result provided by an assessment tool\n            operationId: Orchestrator_StoreAssessmentResult\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/AssessmentResult'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/StoreAssessmentResultResponse'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /v1/orchestrator/assessment_tools:\n        get:\n            tags:\n                - Orchestrator\n            description: |-\n                Lists all assessment tools assessing evidences for the metric given by the\n                 passed metric id\n            operationId: Orchestrator_ListAssessmentTools\n            parameters:\n                - name: filterMetricId\n                  in: query\n                  description: Optional. Filter tools by metric id.\n                  schema:\n                    type: string\n                - name: pageSize\n                  in: query\n                  schema:\n                    type: integer\n                    format: int32\n                - name: pageToken\n                  in: query\n                  schema:\n                    type: string\n                - name: orderBy\n                  in: query\n                  schema:\n                    type: string\n                - name: asc\n                  in: query\n                  schema:\n                    type: boolean\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ListAssessmentToolsResponse'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n        post:\n            tags:\n                - Orchestrator\n            description: Registers the passed assessment tool\n            operationId: Orchestrator_RegisterAssessmentTool\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/AssessmentTool'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/AssessmentTool'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /v1/orchestrator/assessment_tools/{tool.id}:\n        put:\n            tags:\n                - Orchestrator\n            description: Updates the assessment tool given by the passed id\n            operationId: Orchestrator_UpdateAssessmentTool\n            parameters:\n                - name: tool.id\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/AssessmentTool'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/AssessmentTool'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /v1/orchestrator/assessment_tools/{toolId}:\n        get:\n            tags:\n                - Orchestrator\n            description: Returns assessment tool given by the passed tool id\n            operationId: Orchestrator_GetAssessmentTool\n            parameters:\n                - name: toolId\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/AssessmentTool'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n        delete:\n            tags:\n                - Orchestrator\n            description: |-\n                Remove assessment tool with passed id from the list of active assessment\n                 tools\n            operationId: Orchestrator_DeregisterAssessmentTool\n            parameters:\n                - name: toolId\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n            responses:\n                \"200\":\n                    description: OK\n                    content: {}\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /v1/orchestrator/catalogs:\n        get:\n            tags:\n                - Orchestrator\n            description: |-\n                Lists all security controls catalogs. Each catalog includes a list of its\n                 categories but no additional sub-resources.\n            operationId: Orchestrator_ListCatalogs\n            parameters:\n                - name: pageSize\n                  in: query\n                  schema:\n                    type: integer\n                    format: int32\n                - name: pageToken\n                  in: query\n                  schema:\n                    type: string\n                - name: orderBy\n                  in: query\n                  schema:\n                    type: string\n                - name: asc\n                  in: query\n                  schema:\n                    type: boolean\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ListCatalogsResponse'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n        post:\n            tags:\n                - Orchestrator\n            description: Creates a new security controls catalog\n            operationId: Orchestrator_CreateCatalog\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Catalog'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Catalog'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /v1/orchestrator/catalogs/{catalog.id}:\n        put:\n            tags:\n                - Orchestrator\n            description: Updates an existing certificate\n            operationId: Orchestrator_UpdateCatalog\n            parameters:\n                - name: catalog.id\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Catalog'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Catalog'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /v1/orchestrator/catalogs/{catalogId}:\n        get:\n            tags:\n                - Orchestrator\n            description: |-\n                Retrieves a specific catalog by it's ID. The catalog includes a list of all\n                 of it categories as well as the first level of controls in each category.\n            operationId: Orchestrator_GetCatalog\n            parameters:\n                - name: catalogId\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Catalog'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n        delete:\n            tags:\n                - Orchestrator\n            description: Removes a catalog\n            operationId: Orchestrator_RemoveCatalog\n            parameters:\n                - name: catalogId\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n            responses:\n                \"200\":\n                    description: OK\n                    content: {}\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /v1/orchestrator/catalogs/{catalogId}/categories/{categoryName}/controls/{controlId}:\n        get:\n            tags:\n                - Orchestrator\n            description: |-\n                Retrieves a control specified by the catalog ID, the control's category\n                 name and the control ID. If present, it also includes a list of\n                 sub-controls if present or a list of metrics if no sub-controls but metrics\n                 are present.\n            operationId: Orchestrator_GetControl\n            parameters:\n                - name: catalogId\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n                - name: categoryName\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n                - name: controlId\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Control'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /v1/orchestrator/catalogs/{catalogId}/category/{categoryName}:\n        get:\n            tags:\n                - Orchestrator\n            description: |-\n                Retrieves a category of a catalog specified by the catalog ID and the\n                 category name. It includes the first level of controls within each\n                 category.\n            operationId: Orchestrator_GetCategory\n            parameters:\n                - name: catalogId\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n                - name: categoryName\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Category'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /v1/orchestrator/certificates:\n        get:\n            tags:\n                - Orchestrator\n            description: Lists all target certificates\n            operationId: Orchestrator_ListCertificates\n            parameters:\n                - name: pageSize\n                  in: query\n                  schema:\n                    type: integer\n                    format: int32\n                - name: pageToken\n                  in: query\n                  schema:\n                    type: string\n                - name: orderBy\n                  in: query\n                  schema:\n                    type: string\n                - name: asc\n                  in: query\n                  schema:\n                    type: boolean\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ListCertificatesResponse'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n        post:\n            tags:\n                - Orchestrator\n            description: Creates a new certificate\n            operationId: Orchestrator_CreateCertificate\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Certificate'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Certificate'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /v1/orchestrator/certificates/{certificate.id}:\n        put:\n            tags:\n                - Orchestrator\n            description: Updates an existing certificate\n            operationId: Orchestrator_UpdateCertificate\n            parameters:\n                - name: certificate.id\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Certificate'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Certificate'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /v1/orchestrator/certificates/{certificateId}:\n        get:\n            tags:\n                - Orchestrator\n            description: Retrieves a certificate\n            operationId: Orchestrator_GetCertificate\n            parameters:\n                - name: certificateId\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Certificate'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n        delete:\n            tags:\n                - Orchestrator\n            description: Removes a certificate\n            operationId: Orchestrator_RemoveCertificate\n            parameters:\n                - name: certificateId\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n            responses:\n                \"200\":\n                    description: OK\n                    content: {}\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /v1/orchestrator/cloud_services:\n        get:\n            tags:\n                - Orchestrator\n            description: Lists all target cloud services\n            operationId: Orchestrator_ListCloudServices\n            parameters:\n                - name: pageSize\n                  in: query\n                  schema:\n                    type: integer\n                    format: int32\n                - name: pageToken\n                  in: query\n                  schema:\n                    type: string\n                - name: orderBy\n                  in: query\n                  schema:\n                    type: string\n                - name: asc\n                  in: query\n                  schema:\n                    type: boolean\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ListCloudServicesResponse'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n        post:\n            tags:\n                - Orchestrator\n            description: Registers a new target cloud service\n            operationId: Orchestrator_RegisterCloudService\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/CloudService'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/CloudService'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /v1/orchestrator/cloud_services/{cloudServiceId}:\n        get:\n            tags:\n                - Orchestrator\n            description: Retrieves a target cloud service\n            operationId: Orchestrator_GetCloudService\n            parameters:\n                - name: cloudServiceId\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/CloudService'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n        delete:\n            tags:\n                - Orchestrator\n            description: Removes a target cloud service\n            operationId: Orchestrator_RemoveCloudService\n            parameters:\n                - name: cloudServiceId\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n            responses:\n                \"200\":\n                    description: OK\n                    content: {}\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /v1/orchestrator/cloud_services/{cloudServiceId}/metric_configurations:\n        get:\n            tags:\n                - Orchestrator\n            description: |-\n                Lists all a metric configurations (target value and operator) for a\n                 specific service ID\n            operationId: Orchestrator_ListMetricConfigurations\n            parameters:\n                - name: cloudServiceId\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ListMetricConfigurationResponse'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /v1/orchestrator/cloud_services/{cloudServiceId}/metric_configurations/{metricId}:\n        get:\n            tags:\n                - Orchestrator\n            description: |-\n                Retrieves a metric configuration (target value and operator) for a specific\n                 service and metric ID.\n            operationId: Orchestrator_GetMetricConfiguration\n            parameters:\n                - name: cloudServiceId\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n                - name: metricId\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/MetricConfiguration'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n        put:\n            tags:\n                - Orchestrator\n            description: |-\n                Updates a metric configuration (target value and operator) for a specific\n                 service and metric ID\n            operationId: Orchestrator_UpdateMetricConfiguration\n            parameters:\n                - name: cloudServiceId\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n                - name: metricId\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/MetricConfiguration'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/MetricConfiguration'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /v1/orchestrator/cloud_services/{cloudServiceId}/toes/{catalogId}:\n        get:\n            tags:\n                - Orchestrator\n            description: Retrieves a Target of Evaluation\n            operationId: Orchestrator_GetTargetOfEvaluation\n            parameters:\n                - name: cloudServiceId\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n                - name: catalogId\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/TargetOfEvaluation'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n        delete:\n            tags:\n                - Orchestrator\n            description: Removes a Target of Evaluation\n            operationId: Orchestrator_RemoveTargetOfEvaluation\n            parameters:\n                - name: cloudServiceId\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n                - name: catalogId\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n            responses:\n                \"200\":\n                    description: OK\n                    content: {}\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /v1/orchestrator/cloud_services/{cloudServiceId}/toes/{catalogId}/monitoring_status:\n        get:\n            tags:\n                - Orchestrator\n            description: Lists all control monitoring statuses\n            operationId: Orchestrator_ListControlMonitoringStatus\n            parameters:\n                - name: cloudServiceId\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n                - name: catalogId\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n                - name: pageSize\n                  in: query\n                  schema:\n                    type: integer\n                    format: int32\n                - name: pageToken\n                  in: query\n                  schema:\n                    type: string\n                - name: orderBy\n                  in: query\n                  schema:\n                    type: string\n                - name: asc\n                  in: query\n                  schema:\n                    type: boolean\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ListControlMonitoringStatusResponse'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /v1/orchestrator/cloud_services/{cloud_service.id}:\n        put:\n            tags:\n                - Orchestrator\n            description: Registers a new target cloud service\n            operationId: Orchestrator_UpdateCloudService\n            parameters:\n                - name: cloud_service.id\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/CloudService'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/CloudService'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    ? /v1/orchestrator/cloud_services/{status.target_of_evaluation_cloud_service_id}/toes/{status.target_of_evaluation_catalog_id}/monitoring_status/categories/{status.control_category_name}/controls/{status.control_id}\n    :   get:\n            tags:\n                - Orchestrator\n            description: Updates a particular control monitoring status\n            operationId: Orchestrator_UpdateControlMonitoringStatus\n            parameters:\n                - name: status.target_of_evaluation_cloud_service_id\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n                - name: status.target_of_evaluation_catalog_id\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n                - name: status.control_category_name\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n                - name: status.control_id\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n                - name: status.targetOfEvaluationCloudServiceId\n                  in: query\n                  schema:\n                    type: string\n                - name: status.targetOfEvaluationCatalogId\n                  in: query\n                  schema:\n                    type: string\n                - name: status.controlId\n                  in: query\n                  schema:\n                    type: string\n                - name: status.controlCategoryName\n                  in: query\n                  schema:\n                    type: string\n                - name: status.controlCategoryCatalogId\n                  in: query\n                  schema:\n                    type: string\n                - name: status.status\n                  in: query\n                  schema:\n                    enum:\n                        - STATUS_UNSPECIFIED\n                        - STATUS_CONTINUOUSLY_MONITORED\n                        - STATUS_MANUALLY_MONITORED\n                        - STATUS_DELEGATED\n                    type: string\n                    format: enum\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ControlMonitoringStatus'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /v1/orchestrator/cloud_services/{target_of_evaluation.cloud_service_id}/toes/{target_of_evaluation.catalog_id}:\n        put:\n            tags:\n                - Orchestrator\n            description: Updates an existing Target of Evaluation\n            operationId: Orchestrator_UpdateTargetOfEvaluation\n            parameters:\n                - name: target_of_evaluation.cloud_service_id\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n                - name: target_of_evaluation.catalog_id\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/TargetOfEvaluation'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/TargetOfEvaluation'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /v1/orchestrator/controls:\n        get:\n            tags:\n                - Orchestrator\n            description: |-\n                If no additional parameters are specified, this lists all controls. If a\n                 catalog ID and a category name is specified, then only controls containing\n                 in this category are returned.\n            operationId: Orchestrator_ListControls\n            parameters:\n                - name: pageSize\n                  in: query\n                  schema:\n                    type: integer\n                    format: int32\n                - name: pageToken\n                  in: query\n                  schema:\n                    type: string\n                - name: orderBy\n                  in: query\n                  schema:\n                    type: string\n                - name: asc\n                  in: query\n                  schema:\n                    type: boolean\n                - name: catalogId\n                  in: query\n                  description: return either all controls or only the controls of the specified category\n                  schema:\n                    type: string\n                - name: categoryName\n                  in: query\n                  schema:\n                    type: string\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ListControlsResponse'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /v1/orchestrator/metrics:\n        get:\n            tags:\n                - Orchestrator\n            description: List all metrics provided by the metric catalog\n            operationId: Orchestrator_ListMetrics\n            parameters:\n                - name: pageSize\n                  in: query\n                  schema:\n                    type: integer\n                    format: int32\n                - name: pageToken\n                  in: query\n                  schema:\n                    type: string\n                - name: orderBy\n                  in: query\n                  schema:\n                    type: string\n                - name: asc\n                  in: query\n                  schema:\n                    type: boolean\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ListMetricsResponse'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n        post:\n            tags:\n                - Orchestrator\n            description: Creates a new metric\n            operationId: Orchestrator_CreateMetric\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Metric'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Metric'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /v1/orchestrator/metrics/{implementation.metric_id}/implementation:\n        put:\n            tags:\n                - Orchestrator\n            description: Updates an existing metric implementation\n            operationId: Orchestrator_UpdateMetricImplementation\n            parameters:\n                - name: implementation.metric_id\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/MetricImplementation'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/MetricImplementation'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /v1/orchestrator/metrics/{metric.id}:\n        put:\n            tags:\n                - Orchestrator\n            description: Updates an existing metric\n            operationId: Orchestrator_UpdateMetric\n            parameters:\n                - name: metric.id\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Metric'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Metric'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /v1/orchestrator/metrics/{metricId}:\n        get:\n            tags:\n                - Orchestrator\n            description: Returns the metric with the passed metric id\n            operationId: Orchestrator_GetMetric\n            parameters:\n                - name: metricId\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Metric'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /v1/orchestrator/metrics/{metricId}/implementation:\n        get:\n            tags:\n                - Orchestrator\n            description: Returns the metric implementation of the passed metric id\n            operationId: Orchestrator_GetMetricImplementation\n            parameters:\n                - name: metricId\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/MetricImplementation'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /v1/orchestrator/toes:\n        get:\n            tags:\n                - Orchestrator\n            description: Lists all Targets of Evaluation\n            operationId: Orchestrator_ListTargetsOfEvaluation\n            parameters:\n                - name: pageSize\n                  in: query\n                  schema:\n                    type: integer\n                    format: int32\n                - name: pageToken\n                  in: query\n                  schema:\n                    type: string\n                - name: orderBy\n                  in: query\n                  schema:\n                    type: string\n                - name: asc\n                  in: query\n                  schema:\n                    type: boolean\n                - name: cloudServiceId\n                  in: query\n                  description: We cannot create additional bindings when the parameter is optional so we check for != \"\" in the method to see if it is set when the service is specified, return all Targets of Evaluation that evaluate the given service for any catalog\n                  schema:\n                    type: string\n                - name: catalogId\n                  in: query\n                  description: when the catalog is specified, return all Targets of Evaluation that evaluate the given catalog for any service\n                  schema:\n                    type: string\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ListTargetsOfEvaluationResponse'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n        post:\n            tags:\n                - Orchestrator\n            description: Creates a new Target of Evaluation\n            operationId: Orchestrator_CreateTargetOfEvaluation\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/TargetOfEvaluation'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/TargetOfEvaluation'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\ncomponents:\n    schemas:\n        AllowedValues:\n            type: object\n            properties:\n                values:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/GoogleProtobufValue'\n            description: Defines a range\n        AssessmentResult:\n            type: object\n            properties:\n                id:\n                    type: string\n                    description: Assessment result id\n                timestamp:\n                    type: string\n                    description: Time of assessment\n                    format: date-time\n                metricId:\n                    type: string\n                    description: Reference to the metric the assessment was based on\n                metricConfiguration:\n                    $ref: '#/components/schemas/MetricConfiguration'\n                compliant:\n                    type: boolean\n                    description: 'Compliant case: true or false'\n                evidenceId:\n                    type: string\n                    description: Reference to the assessed evidence\n                resourceId:\n                    type: string\n                    description: Reference to the resource of the assessed evidence\n                resourceTypes:\n                    type: array\n                    items:\n                        type: string\n                    description: Resource types\n                nonComplianceComments:\n                    type: string\n                    description: Some comments on the reason for non-compliance\n                cloudServiceId:\n                    type: string\n                    description: The cloud service which this assessment result belongs to\n            description: A result resource, representing the result after assessing the cloud resource with id resource_id.\n        AssessmentTool:\n            type: object\n            properties:\n                id:\n                    type: string\n                name:\n                    type: string\n                description:\n                    type: string\n                availableMetrics:\n                    type: array\n                    items:\n                        type: string\n                    description: a list of metrics that this tool can assess, referred by their ids\n            description: Represents an external tool or service that offers assessments according to certain metrics.\n        Catalog:\n            type: object\n            properties:\n                id:\n                    type: string\n                name:\n                    type: string\n                description:\n                    type: string\n                categories:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/Category'\n                allInScope:\n                    type: boolean\n                    description: Certain security catalogs do not allow to select the scope of the controls, but all controls are automatically \"in scope\", however they can be set to a DELEGATED status.\n        Category:\n            type: object\n            properties:\n                name:\n                    type: string\n                catalogId:\n                    type: string\n                    description: Reference to the catalog this category belongs to.\n                description:\n                    type: string\n                controls:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/Control'\n        Certificate:\n            type: object\n            properties:\n                id:\n                    type: string\n                name:\n                    type: string\n                cloudServiceId:\n                    type: string\n                issueDate:\n                    type: string\n                expirationDate:\n                    type: string\n                standard:\n                    type: string\n                assuranceLevel:\n                    type: string\n                cab:\n                    type: string\n                description:\n                    type: string\n                states:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/State'\n                    description: A list of states at specific times\n            description: An ISO17021-based certificate\n        CloudService:\n            type: object\n            properties:\n                id:\n                    type: string\n                name:\n                    type: string\n                description:\n                    type: string\n                catalogsInScope:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/Catalog'\n                configuredMetrics:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/Metric'\n        Control:\n            type: object\n            properties:\n                id:\n                    type: string\n                    description: A short name of the control, e.g. OPS-01, as used in OSCAL; it is not a unique ID!\n                categoryName:\n                    type: string\n                categoryCatalogId:\n                    type: string\n                name:\n                    type: string\n                    description: Human-readable name of the control\n                description:\n                    type: string\n                    description: Description of the control\n                controls:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/Control'\n                    description: List of sub - controls -     this is in accordance with the OSCAL model.\n                metrics:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/Metric'\n                    description: metrics contains either a list of reference to metrics - in this case only the id field of the metric is populated - or a list of populated metric meta-data, most likely returned by the database.\n                parentControlId:\n                    type: string\n                parentControlCategoryName:\n                    type: string\n                parentControlCategoryCatalogId:\n                    type: string\n            description: Control represents a certain Control that needs to be fulfilled. It could be a Control in a certification catalog. It follows the OSCAL model. A requirement in the EUCS terminology, e.g., is represented as the lowest sub-control.\n        ControlMonitoringStatus:\n            type: object\n            properties:\n                targetOfEvaluationCloudServiceId:\n                    type: string\n                targetOfEvaluationCatalogId:\n                    type: string\n                controlId:\n                    type: string\n                controlCategoryName:\n                    type: string\n                controlCategoryCatalogId:\n                    type: string\n                status:\n                    enum:\n                        - STATUS_UNSPECIFIED\n                        - STATUS_CONTINUOUSLY_MONITORED\n                        - STATUS_MANUALLY_MONITORED\n                        - STATUS_DELEGATED\n                    type: string\n                    format: enum\n        GoogleProtobufAny:\n            type: object\n            properties:\n                '@type':\n                    type: string\n                    description: The type of the serialized message.\n            additionalProperties: true\n            description: Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.\n        GoogleProtobufValue:\n            description: Represents a dynamically typed value which can be either null, a number, a string, a boolean, a recursive struct value, or a list of values.\n        ListAssessmentResultsResponse:\n            type: object\n            properties:\n                results:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/AssessmentResult'\n                nextPageToken:\n                    type: string\n        ListAssessmentToolsResponse:\n            type: object\n            properties:\n                tools:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/AssessmentTool'\n                nextPageToken:\n                    type: string\n        ListCatalogsResponse:\n            type: object\n            properties:\n                catalogs:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/Catalog'\n                nextPageToken:\n                    type: string\n        ListCertificatesResponse:\n            type: object\n            properties:\n                certificates:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/Certificate'\n                nextPageToken:\n                    type: string\n        ListCloudServicesResponse:\n            type: object\n            properties:\n                services:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/CloudService'\n                nextPageToken:\n                    type: string\n        ListControlMonitoringStatusResponse:\n            type: object\n            properties:\n                status:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/ControlMonitoringStatus'\n                nextPageToken:\n                    type: string\n        ListControlsResponse:\n            type: object\n            properties:\n                controls:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/Control'\n                nextPageToken:\n                    type: string\n        ListMetricConfigurationResponse:\n            type: object\n            properties:\n                configurations:\n                    type: object\n                    additionalProperties:\n                        $ref: '#/components/schemas/MetricConfiguration'\n                    description: A map of metric configurations associated by their metric ID\n        ListMetricsResponse:\n            type: object\n            properties:\n                metrics:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/Metric'\n                nextPageToken:\n                    type: string\n        ListTargetsOfEvaluationResponse:\n            type: object\n            properties:\n                targetOfEvaluation:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/TargetOfEvaluation'\n                nextPageToken:\n                    type: string\n        Metric:\n            type: object\n            properties:\n                id:\n                    type: string\n                    description: Required. The unique identifier of the metric.\n                name:\n                    type: string\n                    description: Required. The human readable name of the metric.\n                description:\n                    type: string\n                    description: The description of the metric\n                category:\n                    type: string\n                    description: The reference to control catalog category or domain\n                scale:\n                    enum:\n                        - SCALE_UNSPECIFIED\n                        - NOMINAL\n                        - ORDINAL\n                        - METRIC\n                    type: string\n                    description: The scale of this metric, e.g. categories, ranked data or metric values.\n                    format: enum\n                range:\n                    $ref: '#/components/schemas/Range'\n                interval:\n                    type: integer\n                    description: The interval in seconds the evidences must be collected for the respective metric. For now, we are not able to use google.protobuf.Duration because it is converted to a custom object in OpenAPI (https://github.com/google/gnostic/issues/351)\n                    format: int64\n                implementation:\n                    $ref: '#/components/schemas/MetricImplementation'\n            description: A metric resource\n        MetricConfiguration:\n            type: object\n            properties:\n                operator:\n                    type: string\n                    description: The operator to compare the metric, such as == or \u003e\n                targetValue:\n                    $ref: '#/components/schemas/GoogleProtobufValue'\n                isDefault:\n                    type: boolean\n                    description: Whether this configuration is a default configuration\n                updatedAt:\n                    type: string\n                    description: The last time of update\n                    format: date-time\n                metricId:\n                    type: string\n                    description: The metric this configuration belongs to\n                cloudServiceId:\n                    type: string\n                    description: The service this configuration belongs to\n            description: Defines the operator and a target value for an individual metric\n        MetricImplementation:\n            type: object\n            properties:\n                metricId:\n                    type: string\n                    description: The metric which is implemented\n                lang:\n                    enum:\n                        - LANGUAGE_UNSPECIFIED\n                        - LANGUAGE_REGO\n                    type: string\n                    description: The language this metric is implemented in\n                    format: enum\n                code:\n                    type: string\n                    description: The actual implementation\n                updatedAt:\n                    type: string\n                    description: The last time of update\n                    format: date-time\n            description: MetricImplementation defines the implementation of an individual metric.\n        MinMax:\n            type: object\n            properties:\n                min:\n                    type: integer\n                    description: Required.\n                    format: int64\n                max:\n                    type: integer\n                    description: Required.\n                    format: int64\n            description: Defines a range of values through a (inclusive) minimum and a maximum\n        Order:\n            type: object\n            properties:\n                values:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/GoogleProtobufValue'\n            description: Defines a range of values in a pre-defined order from the lowest to the highest.\n        Range:\n            type: object\n            properties:\n                allowedValues:\n                    $ref: '#/components/schemas/AllowedValues'\n                order:\n                    $ref: '#/components/schemas/Order'\n                minMax:\n                    $ref: '#/components/schemas/MinMax'\n            description: A range resource representing the range of values\n        State:\n            type: object\n            properties:\n                id:\n                    type: string\n                state:\n                    type: string\n                    description: An EUCS-defined state, e.g. `new`, `suspended` or `withdrawn`\n                treeId:\n                    type: string\n                timestamp:\n                    type: string\n                certificateId:\n                    type: string\n                    description: Reference to the certificate\n            description: A state of a certificate at a given time\n        Status:\n            type: object\n            properties:\n                code:\n                    type: integer\n                    description: The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].\n                    format: int32\n                message:\n                    type: string\n                    description: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.\n                details:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/GoogleProtobufAny'\n                    description: A list of messages that carry the error details.  There is a common set of message types for APIs to use.\n            description: 'The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).'\n        StoreAssessmentResultResponse:\n            type: object\n            properties:\n                status:\n                    type: boolean\n                statusMessage:\n                    type: string\n        TargetOfEvaluation:\n            type: object\n            properties:\n                cloudServiceId:\n                    type: string\n                catalogId:\n                    type: string\n                assuranceLevel:\n                    type: string\n                    description: an assurance level is not offered by every catalog, therefore it is optional\n                controlsInScope:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/Control'\n                    description: 'the controls that are in scope of this ToE. Note: For some security catalogs, e.g., the EUCS, a specific set of controls (in the \"worst case\": all) are automatically in scope. In this case, this list needs auto-filled at an appropriate time, e.g,. in CreateTargetOfEvaluation.'\n            description: A Target of Evaluation binds a cloud service to a catalog, so the service is evaluated regarding this catalog's controls\ntags:\n    - name: Orchestrator\n",
			"canonicalURL": "/github.com/clouditor/clouditor@6d68b7347e5c7b15f8dd7655c23a3f154655fb10/-/blob/openapi/orchestrator/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/clouditor/clouditor/blob/6d68b7347e5c7b15f8dd7655c23a3f154655fb10/openapi/orchestrator/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: at openapi/orchestrator/openapi.yaml:187:5: duplicate path: \"/v1/orchestrator/assessment_tools/{toolId}\""
}