{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ns1labs/orb"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "fleet/api/http/openapi.yaml",
			"byteSize": 28374,
			"content": "openapi: 3.0.0\ninfo:\n  version: 1.0.0\n  title: orb-fleet\nservers:\n  - url: 'http://localhost:8203'\npaths:\n  /agent_groups:\n    parameters:\n      - $ref: \"#/components/parameters/Authorization\"\n    get:\n      summary: 'List current Agent Groups'\n      operationId: listAgentGroups\n      tags:\n        - agent_groups\n      parameters:\n        - $ref: \"#/components/parameters/Limit\"\n        - $ref: \"#/components/parameters/Offset\"\n        - $ref: \"#/components/parameters/Name\"\n        - $ref: \"#/components/parameters/Order\"\n        - $ref: \"#/components/parameters/Direction\"\n        - $ref: \"#/components/parameters/Tags\"\n      responses:\n        '200':\n          $ref: \"#/components/responses/AgentGroupsPageRes\"\n        '400':\n          description: Failed due to malformed query parameters.\n        '401':\n          description: Missing or invalid access token provided.\n        '404':\n          description: A non-existent entity request.\n        '500':\n          $ref: \"#/components/responses/ServiceErrorRes\"\n    post:\n      summary: 'Create a new Agent Group'\n      operationId: createAgentGroup\n      tags:\n        - agent_groups\n      requestBody:\n        $ref: \"#/components/requestBodies/AgentGroupCreateReq\"\n      responses:\n        '201':\n          $ref: \"#/components/responses/AgentGroupObjRes\"\n        '400':\n          description: Failed due to malformed JSON.\n        '401':\n          description: Missing or invalid access token provided.\n        '409':\n          description: Entity already exist.\n        '415':\n          description: Missing or invalid content type.\n        '422':\n          description: Database can't process request.\n        '500':\n          $ref: \"#/components/responses/ServiceErrorRes\"\n  /agent_groups/{id}:\n    parameters:\n      - $ref: \"#/components/parameters/Authorization\"\n      - $ref: \"#/components/parameters/AgentGroupId\"\n    get:\n      summary: 'Get an existing Agent Group'\n      operationId: readAgentGroup\n      tags:\n        - agent_groups\n      responses:\n        '200':\n          $ref: \"#/components/responses/AgentGroupObjRes\"\n        '400':\n          description: Failed due to malformed JSON.\n        '404':\n          description: A non-existent entity request.\n        '500':\n          $ref: \"#/components/responses/ServiceErrorRes\"\n    put:\n      summary: 'Update an existing Agent Group'\n      operationId: updateAgentGroup\n      tags:\n        - agent_groups\n      requestBody:\n        required: true\n        $ref: \"#/components/requestBodies/AgentGroupUpdateReq\"\n      responses:\n        '200':\n          $ref: \"#/components/responses/AgentGroupObjRes\"\n        '400':\n          description: Failed due to malformed JSON.\n        '401':\n          description: Missing or invalid access token provided.\n        '422':\n          description: Database can't process request.\n        '500':\n          $ref: \"#/components/responses/ServiceErrorRes\"\n    delete:\n      summary: 'Delete an existing Agent Group'\n      operationId: deleteAgentGroup\n      tags:\n        - agent_groups\n      responses:\n        '204':\n          description: AgentGroup removed.\n        '400':\n          description: Failed due to malformed AgentGroup ID.\n        '401':\n          description: Missing or invalid access token provided.\n        '500':\n          $ref: \"#/components/responses/ServiceErrorRes\"\n  /agent_groups/validate:\n    parameters:\n      - $ref: \"#/components/parameters/Authorization\"\n    post:\n      summary: 'Validate an Agent Group configuration without saving it'\n      operationId: validateAgentGroup\n      tags:\n        - agent_groups\n      requestBody:\n        $ref: \"#/components/requestBodies/AgentGroupCreateReq\"\n      responses:\n        '200':\n          $ref: \"#/components/responses/AgentGroupValidateObjRes\"\n        '400':\n          description: Failed due to malformed JSON.\n        '401':\n          description: Missing or invalid access token provided.\n        '415':\n          description: Missing or invalid content type.\n        '500':\n          $ref: \"#/components/responses/ServiceErrorRes\"\n\n  /agents:\n    parameters:\n      - $ref: \"#/components/parameters/Authorization\"\n    get:\n      summary: 'List current Agents'\n      operationId: listAgents\n      tags:\n        - agents\n      parameters:\n        - $ref: \"#/components/parameters/Limit\"\n        - $ref: \"#/components/parameters/Offset\"\n        - $ref: \"#/components/parameters/Name\"\n        - $ref: \"#/components/parameters/Order\"\n        - $ref: \"#/components/parameters/Direction\"\n        - $ref: \"#/components/parameters/Tags\"\n      responses:\n        '200':\n          $ref: \"#/components/responses/AgentPageRes\"\n        '400':\n          description: Failed due to malformed query parameters.\n        '401':\n          description: Missing or invalid access token provided.\n        '404':\n          description: A non-existent entity request.\n        '500':\n          $ref: \"#/components/responses/ServiceErrorRes\"\n    post:\n      parameters:\n        - $ref: \"#/components/parameters/Authorization\"\n      summary: 'Create a new Agent'\n      operationId: createAgent\n      tags:\n        - agents\n      requestBody:\n        $ref: \"#/components/requestBodies/AgentCreateReq\"\n      responses:\n        '201':\n          $ref: \"#/components/responses/AgentObjRes\"\n        '400':\n          description: Failed due to malformed JSON.\n        '401':\n          description: Missing or invalid access token provided.\n        '409':\n          description: Entity already exist.\n        '415':\n          description: Missing or invalid content type.\n        '422':\n          description: Database can't process request.\n        '500':\n          $ref: \"#/components/responses/ServiceErrorRes\"\n  /agents/{id}:\n    parameters:\n      - $ref: \"#/components/parameters/Authorization\"\n      - $ref: \"#/components/parameters/AgentId\"\n    get:\n      summary: 'Get an existing Agent'\n      operationId: readAgent\n      tags:\n        - agents\n      responses:\n        '200':\n          $ref: \"#/components/responses/AgentObjRes\"\n        '400':\n          description: Failed due to malformed JSON.\n        '404':\n          description: A non-existent entity request.\n        '500':\n          $ref: \"#/components/responses/ServiceErrorRes\"\n    put:\n      parameters:\n        - $ref: \"#/components/parameters/Authorization\"\n      summary: 'Update an existing Agent'\n      operationId: updateAgent\n      tags:\n        - agents\n      requestBody:\n        required: true\n        $ref: \"#/components/requestBodies/AgentUpdateReq\"\n      responses:\n        '200':\n          $ref: \"#/components/responses/AgentObjRes\"\n        '400':\n          description: Failed due to malformed JSON.\n        '401':\n          description: Missing or invalid access token provided.\n        '422':\n          description: Database can't process request.\n        '500':\n          $ref: \"#/components/responses/ServiceErrorRes\"\n    delete:\n      parameters:\n        - $ref: \"#/components/parameters/Authorization\"\n      summary: 'Delete an existing Agent'\n      operationId: deleteAgent\n      tags:\n        - agents\n      responses:\n        '204':\n          description: Agent removed.\n        '400':\n          description: Failed due to malformed Agent ID.\n        '401':\n          description: Missing or invalid access token provided.\n        '500':\n          $ref: \"#/components/responses/ServiceErrorRes\"\n  /agents/{id}/matching_groups:\n    parameters:\n      - $ref: \"#/components/parameters/Authorization\"\n      - $ref: \"#/components/parameters/AgentId\"\n    get:\n      summary: 'Get matching groups for an existing Agent'\n      operationId: matchingGroups\n      tags:\n        - agents\n      responses:\n        '200':\n          $ref: \"#/components/responses/AgentMatchingGroupsObjRes\"\n        '400':\n          description: Failed due to malformed JSON.\n        '404':\n          description: A non-existent entity request.\n        '500':\n          $ref: \"#/components/responses/ServiceErrorRes\"\n  /agents/validate:\n    parameters:\n      - $ref: \"#/components/parameters/Authorization\"\n    post:\n      summary: 'Validate an Agent configuration without saving it'\n      operationId: validateAgent\n      tags:\n        - agents\n      requestBody:\n        $ref: \"#/components/requestBodies/AgentCreateReq\"\n      responses:\n        '200':\n          $ref: \"#/components/responses/AgentValidateObjRes\"\n        '400':\n          description: Failed due to malformed JSON.\n        '401':\n          description: Missing or invalid access token provided.\n        '415':\n          description: Missing or invalid content type.\n        '500':\n          $ref: \"#/components/responses/ServiceErrorRes\"\n  /agents/backends:\n    parameters:\n      - $ref: \"#/components/parameters/Authorization\"\n    get:\n      summary: 'List of Agent backends'\n      operationId: listAgentsBackends\n      tags:\n        - agents\n      responses:\n        '200':\n          $ref: \"#/components/responses/AgentBackendsObjRes\"\n        '400':\n          description: Failed due to malformed query parameters.\n        '401':\n          description: Missing or invalid access token provided.\n        '404':\n          description: A non-existent entity request.\n        '500':\n          $ref: \"#/components/responses/ServiceErrorRes\"\n  /agents/backends/pktvisor/taps:\n    parameters:\n      - $ref: \"#/components/parameters/Authorization\"\n    get:\n      summary: 'List of pktvisor Taps available from current agents'\n      operationId: listTaps\n      tags:\n        - agents\n      responses:\n        '200':\n          $ref: \"#/components/responses/pktvisorTapsObjRes\"\n        '400':\n          description: Failed due to malformed query parameters.\n        '401':\n          description: Missing or invalid access token provided.\n        '404':\n          description: A non-existent entity request.\n        '500':\n          $ref: \"#/components/responses/ServiceErrorRes\"\n  /agents/backends/pktvisor/inputs:\n    parameters:\n      - $ref: \"#/components/parameters/Authorization\"\n    get:\n      summary: 'List of pktvisor Inputs available across current agents'\n      operationId: listInputs\n      tags:\n        - agents\n      responses:\n        '200':\n          $ref: \"#/components/responses/pktvisorInputsObjRes\"\n        '400':\n          description: Failed due to malformed query parameters.\n        '401':\n          description: Missing or invalid access token provided.\n        '404':\n          description: A non-existent entity request.\n        '500':\n          $ref: \"#/components/responses/ServiceErrorRes\"\n  /agents/backends/pktvisor/handlers:\n    parameters:\n      - $ref: \"#/components/parameters/Authorization\"\n    get:\n      summary: 'List of pktvisor Handlers available across current agents'\n      operationId: listHandlers\n      tags:\n        - agents\n      responses:\n        '200':\n          $ref: \"#/components/responses/pktvisorHandlersObjRes\"\n        '400':\n          description: Failed due to malformed query parameters.\n        '401':\n          description: Missing or invalid access token provided.\n        '404':\n          description: A non-existent entity request.\n        '500':\n          $ref: \"#/components/responses/ServiceErrorRes\"\n  /agent/{id}/rpc/reset:\n    parameters:\n      - $ref: \"#/components/parameters/Authorization\"\n      - $ref: \"#/components/parameters/AgentId\"\n    post:\n      summary: 'Request for reset agent remotely'\n      operationId: resetAgent\n      tags:\n        - agents\n      responses:\n        '200':\n          description: Agent was successful resquested to reset\n        '400':\n          description: Failed due to malformed JSON.\n        '401':\n          description: Missing or invalid access token provided.\n        '404':\n          description: A non-existent entity request.\n        '500':\n          $ref: \"#/components/responses/ServiceErrorRes\"\n\ncomponents:\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n  requestBodies:\n    AgentGroupCreateReq:\n      description: JSON-formatted document describing the new Agent Group configuration\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/AgentGroupCreateReqSchema\"\n    AgentGroupUpdateReq:\n      description: JSON-formatted document describing the updated Agent Group configuration\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/AgentGroupUpdateReqSchema\"\n    AgentCreateReq:\n      description: JSON-formatted document describing the new Agent configuration\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/AgentCreateReqSchema\"\n    AgentUpdateReq:\n      description: JSON-formatted document describing the updated Agent configuration\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/AgentUpdateReqSchema\"\n  parameters:\n    Name:\n      name: name\n      description: Name filter. Filtering is performed as a case-insensitive partial match.\n      in: query\n      schema:\n        type: string\n      required: false\n    Order:\n      name: order\n      description: Order type.\n      in: query\n      schema:\n        type: string\n        default: id\n        enum:\n          - name\n          - id\n      required: false\n    Direction:\n      name: dir\n      description: Order direction.\n      in: query\n      schema:\n        type: string\n        default: desc\n        enum:\n          - asc\n          - desc\n      required: false\n    Limit:\n      name: limit\n      description: Size of the subset to retrieve.\n      in: query\n      schema:\n        type: integer\n        default: 10\n        maximum: 100\n        minimum: 1\n      required: false\n    Offset:\n      name: offset\n      description: Number of items to skip during retrieval.\n      in: query\n      schema:\n        type: integer\n        default: 0\n        minimum: 0\n      required: false\n    Tags:\n      name: tags\n      description: Tags filter. Filtering is performed as a case-insensitive partial key value match.\n      in: query\n      schema:\n        type: object\n        example: \"{\\\"key\\\":\\\"value\\\"}\"\n      required: false\n    Authorization:\n      name: Authorization\n      description: User's access token (bearer auth)\n      in: header\n      bearerAuth:\n        scheme: bearer\n        type: http\n        format: JWT\n      required: true\n    AgentGroupId:\n      name: id\n      description: Unique Agent Group identifier.\n      in: path\n      schema:\n        type: string\n        format: uuid\n      required: true\n    AgentId:\n      name: id\n      description: Unique Agent identifier.\n      in: path\n      schema:\n        type: string\n        format: uuid\n      required: true\n  responses:\n    AgentGroupObjRes:\n      description: Agent Group object\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/AgentGroupsObjSchema\"\n    AgentGroupValidateObjRes:\n      description: Agent Group object\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/AgentGroupsValidateObjSchema\"\n    AgentGroupsPageRes:\n      description: Data retrieved.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/AgentGroupPageSchema\"\n    AgentObjRes:\n      description: Agent object\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/AgentObjSchema\"\n    AgentMatchingGroupsObjRes:\n      description: Agent Matching Groups object\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/AgentMatchingGroupsObjSchema\"\n    AgentValidateObjRes:\n      description: Agent validation object\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/AgentValidateObjSchema\"\n    AgentPageRes:\n      description: Data retrieved.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/AgentPageSchema\"\n    AgentBackendsObjRes:\n      description: List of Agent backends object\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/AgentBackendsObjSchema\"\n    pktvisorTapsObjRes:\n      description: list of pktvisor Taps available from current agents\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/PktvisorTapsObjSchema\"\n    pktvisorInputsObjRes:\n      description: list of pktvisor Inputs available from current agents\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/PktvisorInputsObjSchema\"\n    pktvisorHandlersObjRes:\n      description: list of pktvisor Handlers available across current agents\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/PktvisorHandlersObjSchema\"\n    ServiceErrorRes:\n      description: Unexpected server-side error occurred.\n      content:\n        application/json:\n          schema:\n            type: string\n            format: byte\n  schemas:\n    AgentGroupUpdateReqSchema:\n      type: object\n      properties:\n        name:\n          type: string\n          description: A unique name label\n          example: eu-agents\n        description:\n          type: string\n          description: User description of this Agent Group\n          example: An example agent group representing european dns nodes\n        tags:\n          type: object\n          description: User defined key/values that will define the members of the group by matching against Agent tags\n          example:\n            region: eu\n            node_type: dns\n    AgentGroupCreateReqSchema:\n      type: object\n      required:\n        - name\n        - tags\n      properties:\n        name:\n          type: string\n          description: A unique name label\n          example: eu-agents\n        description:\n          type: string\n          description: User description of this Agent Group\n          example: An example agent group representing european dns nodes\n        tags:\n          type: object\n          description: User defined key/values that will define the members of the group by matching against Agent tags\n          example:\n            region: eu\n            node_type: dns\n    AgentGroupPageSchema:\n      type: object\n      properties:\n        agent_groups:\n          type: array\n          minItems: 0\n          uniqueItems: true\n          items:\n            $ref: \"#/components/schemas/AgentGroupsObjSchema\"\n        total:\n          type: integer\n          description: Total number of items.\n        offset:\n          type: integer\n          description: Number of items to skip during retrieval.\n        limit:\n          type: integer\n          description: Maximum number of items to return in one page.\n      required:\n        - agent_groups\n    AgentUpdateReqSchema:\n      type: object\n      properties:\n        name:\n          type: string\n          description: A unique name label\n          example: my-agent1\n        orb_tags:\n          type: object\n          description: User defined key/values that will define the members of the group by matching against Agent tags\n          example:\n            region: eu\n            node_type: dns\n    AgentCreateReqSchema:\n      type: object\n      required:\n        - name\n        - tags\n      properties:\n        name:\n          type: string\n          description: A unique name label\n          example: my-agent1\n        orb_tags:\n          type: object\n          description: User defined key/values that will define the members of the group by matching against Agent tags\n          example:\n            region: eu\n            node_type: dns\n    AgentPageSchema:\n      type: object\n      properties:\n        agents:\n          type: array\n          minItems: 0\n          uniqueItems: true\n          items:\n            $ref: \"#/components/schemas/AgentObjSchema\"\n        total:\n          type: integer\n          description: Total number of items.\n        offset:\n          type: integer\n          description: Number of items to skip during retrieval.\n        limit:\n          type: integer\n          description: Maximum number of items to return in one page.\n      required:\n        - agents\n    ConfigEntrySchema:\n      type: object\n      properties:\n        title:\n          type: string\n          description: Visual title of the config item shown in UI\n        type:\n          type: string\n          description: \"Data field type\"\n          enum:\n            - string\n            - password\n            - int\n        name:\n          type: string\n          description: The field label used in the JSON config object for this field\n        description:\n          type: string\n          description: A description of the use of this configuration field\n      example:\n        title: Remote Host\n        type: string\n        name: remote_host\n        description: The remote host to send Prometheus metrics too\n    AgentGroupsObjSchema:\n      type: object\n      required:\n        - id\n      properties:\n        id:\n          type: string\n          format: uuid\n          description: Unique identifier (UUID)\n        name:\n          type: string\n          description: A unique name label\n          example: eu-agents\n        description:\n          type: string\n          description: User description of this Agent Group\n          example: An example agent group representing european dns nodes\n        tags:\n          type: object\n          description: User defined key/values that will define the members of the group by matching against Agent tags\n          example:\n            region: eu\n            node_type: dns\n        ts_created:\n          type: string\n          format: date-time\n          description: Timestamp of creation\n        matching_agents:\n          type: object\n          description: Counts of agents currently matching this group\n          properties:\n            total:\n              type: integer\n              description: total agents matching\n            online:\n              type: integer\n              description: total agents matching which are currently online\n    AgentGroupsValidateObjSchema:\n      type: object\n      properties:\n        name:\n          type: string\n          description: A unique name label\n          example: eu-agents\n        tags:\n          type: object\n          description: User defined key/values that will define the members of the group by matching against Agent tags\n          example:\n            region: eu\n            node_type: dns\n        matching_agents:\n          type: object\n          description: Counts of agents currently matching this group\n          properties:\n            total:\n              type: integer\n              description: total agents matching\n            online:\n              type: integer\n              description: total agents matching which are currently online\n    AgentObjSchema:\n      type: object\n      required:\n        - id\n      properties:\n        id:\n          type: string\n          format: uuid\n          description: Unique identifier (UUID)\n        name:\n          type: string\n          description: A unique name label\n          example: my-agent1\n        agent_tags:\n          type: object\n          description: Orb tags field sent in by the agent when it connects group by matching against Agent tags\n          example:\n            region: eu\n            node_type: dns\n        orb_tags:\n          type: object\n          description: Orb tags field defined through the API or UI\n          example:\n            region: eu\n            node_type: dns\n        ts_created:\n          type: string\n          format: date-time\n          description: Timestamp of creation\n        agent_metadata:\n          type: object\n          description: JSON object sent in by the agent representing its Capabilities\n          example:\n            region: eu\n            node_type: dns\n        state:\n          type: string\n          description: Current connection status of the agent, one of 'new', 'online', 'offline', 'stale', 'removed'\n          example: 'online'\n        last_hb_data:\n          type: object\n          description: JSON object sent in by the agent as its last heartbeat\n        ts_last_hb:\n          type: string\n          format: date-time\n          description: A time stamp of the last heartbeat that was received\n        key:\n          type: string\n          format: uuid\n          description: Agent key is a secret key that is generated at agent creation for authentication purposes\n        channel_id:\n          type: string\n          format: uuid\n          description: Communication channel ID (UUIDv4), unique to this agent and created at agent creation\n    AgentMatchingGroupsObjSchema:\n      type: array\n      items:\n        type: object\n        properties:\n          group_id:\n            type: string\n            format: uuid\n            description: group id\n          name:\n            type: string\n            description: group name\n            example: 'group-1'\n    AgentValidateObjSchema:\n      type: object\n      required:\n        - id\n      properties:\n        name:\n          type: string\n          description: A unique name label\n          example: my-agent1\n        orb_tags:\n          type: object\n          description: Orb tags field sent in by the agent when it connects group by matching against Agent tags\n          example:\n            region: eu\n            node_type: dns\n    AgentBackendsObjSchema:\n      type: array\n      items:\n        type: object\n        properties:\n          backend:\n            type: string\n            description: avaliable backend name\n            example: pktvisor\n          description:\n            type: string\n            description: Description of this backend\n            example: pktvisor observability agent from pktvisor.dev\n          schema_version:\n            type: string\n            description: Version of the schema for this Backend\n            example: '1.0'\n    PktvisorTapsObjSchema:\n      type: array\n      items:\n        type: object\n        properties:\n          name:\n            type: string\n            description: avaliable tap name\n            example: anycast_dns\n          input_type:\n            type: string\n            example: pcap\n          config_predefined:\n            type: array\n            items:\n              type: string\n              example: iface\n          agents:\n            type: object\n            properties:\n              total:\n                type: integer\n    PktvisorInputsObjSchema:\n      required:\n        - iface\n      type: object\n      properties:\n        pcap:\n          type: object\n          description: input type\n          properties:\n            filter:\n              type: object\n              properties:\n                bpf:\n                  type: string\n                  description: tcpdump compatible filter expression for limiting the traffic examined (with BPF)\n            config:\n              type: object\n              properties:\n                iface:\n                  type: string\n                  description: The network interface to capture traffic from\n                  example: eth0\n            host_spec:\n              type: string\n              description: Subnets (comma separated) which should be considered belonging to this host, in CIDR form. Used for ingress/egress determination, defaults to host attached to the network interface\n              example: 10.0.1.0/24,10.0.2.1/32,2001:db8::/64\n            pcap_source:\n              type: string\n              description: Packet capture engine to use. Defaults to best for platform\n              example: libpcap\n          additionalProperties:\n            type: string\n            description: Input version\n      example:\n        pcap:\n          \"1.0\":\n            filter:\n              bpf: udp port 53 and host 127.0.0.1\n            config:\n              iface: eth0\n            host_spec: 10.0.1.0/24,10.0.2.1/32,2001:db8::/64\n            pcap_source: libpcap\n\n    PktvisorHandlersObjSchema:\n      type: object\n      properties:\n        additionalProperties:\n          type: object\n          properties:\n            version:\n              type: integer\n",
			"canonicalURL": "/github.com/ns1labs/orb@0854eac4dc85cc848c990075d19a526e2a82bda2/-/blob/fleet/api/http/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ns1labs/orb/blob/0854eac4dc85cc848c990075d19a526e2a82bda2/fleet/api/http/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: parameters: \"Authorization\": at fleet/api/http/openapi.yaml:463:7: parameter MUST contain either a schema property, or a content property"
}