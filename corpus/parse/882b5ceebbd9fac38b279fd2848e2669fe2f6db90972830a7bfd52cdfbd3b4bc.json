{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/nteract/bookstore"
		},
		"file": {
			"name": "bookstore_api.yaml",
			"size": 0,
			"path": "docs/source/bookstore_api.yaml",
			"byteSize": 8328,
			"content": "openapi: 3.0.1\nservers:\n  - url: http://localhost:8888\n    description: Local Server\ninfo:\n  title: Bookstore public API \n  description: Bookstore API docs\n  termsOfService: http://swagger.io/terms/\n  license:\n    name: BSD 3-clause\n    url: https://github.com/nteract/bookstore/blob/master/LICENSE \n  version: 2.5.2\nexternalDocs:\n  description: Find out more about Bookstore\n  url: https://bookstore.readthedocs.io/en/latest/ \npaths:\n  /api/bookstore:\n    get:\n      tags:\n      - info\n      summary: Info about bookstore\n      responses:\n        200:\n          description: Successfully requested\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VersionInfo'\n  /bookstore/clone:\n    get:\n      tags:\n      - clone\n      summary: Landing page for initiating cloning.\n      description: This serves a simple html page that allows avoiding xsrf issues on a jupyter server.\n      parameters:\n      - name: s3_bucket\n        in: query\n        description: S3_bucket being targeted\n        required: true\n        style: form\n        schema:\n          type: string\n      - name: s3_key\n        in: query\n        description: S3 object key being requested\n        required: true\n        style: form\n        schema:\n          type: string\n      - name: s3_version_id\n        in: query\n        description: S3 object key being requested\n        required: false\n        style: form\n        schema:\n          type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            text/html:\n              schema:\n                type: string\n        400:\n          description: Must have a key to clone from\n          content: {}\n  /api/bookstore/clone:\n    post:\n      tags:\n      - clone\n      summary: Trigger clone from s3\n      requestBody:\n        description: Information about which notebook to clone from s3 \n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/S3CloneFileRequest'\n        required: true\n      responses:\n        200:\n          description: Successfully cloned\n          content:\n            application/json: \n              schema:\n                $ref: '#/components/schemas/Contents'\n        400:\n          description: Must have a key to clone from\n          content: {}\n  /bookstore/fs-clone:\n    get:\n      tags:\n      - clone\n      summary: Landing page for initiating file-system cloning.\n      description: This serves a simple html page that allows avoiding xsrf issues on a jupyter server.\n      parameters:\n      - name: relpath\n        in: query\n        description: relative path being targeted\n        required: true\n        style: form\n        schema:\n          type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            text/html:\n              schema:\n                type: string\n        400:\n          description: Request malformed, must provide a relative path.\n          content: {}\n        404:\n          description: Request to clone from a path outside of base directory\n          content: {}\n  /api/bookstore/fs-clone:\n    post:\n      tags:\n      - clone\n      summary: Trigger clone from file system\n      requestBody:\n        description: Information about what to clone from the accessible file system\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FSCloneFileRequest'\n        required: true\n      responses:\n        200:\n          description: Successfully cloned\n          content:\n            application/json: \n              schema:\n                $ref: '#/components/schemas/Contents'\n        400:\n          description: Malformed request. Provide a valid relative path.\n          content: {}\n        404:\n          description: Invalid request. Cloning from a path outside of the base directory is not allowed.\n          content: {}\n  /api/bookstore/publish/{path}:\n    put: \n      tags:\n      - publish\n      parameters:\n        - in: path\n          name: path\n          required: true\n          schema:\n            type: string\n          description: Path to publish to, it will be prefixed by the preconfigured published bucket.\n      summary: Publish a notebook to s3\n      requestBody:\n        description: Information about the notebook contents to publish to s3 \n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PublishableContents'\n        required: true\n      \n      responses:\n        200:\n          description: Successfully published.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/S3PublishFileResponse'\n\ncomponents:\n  schemas:\n    S3CloneFileRequest:\n      type: object\n      required: \n        - s3_bucket\n        - s3_key\n      properties:\n        s3_bucket: \n          type: string\n        s3_key:\n          type: string\n        s3_version_id:\n          type: string\n        target_path:\n          type: string\n    FSCloneFileRequest:\n      type: object\n      required: \n        - relpath\n      properties:\n        relpath:\n          type: string\n        target_path:\n          type: string\n    S3PublishFileResponse:\n      type: object\n      required:\n        - s3_path\n      properties:\n        s3_path:\n          type: string\n        versionID:\n          type: string\n    PublishableContents: \n      description: \"A object representing contents that can be published. This is currently a subset of the fields required for the Contents API.\"\n      type: object\n      required:\n        - type\n        - content\n      properties:\n        type:\n          type: string\n          description: Type of content\n          enum:\n            - notebook\n        content:\n          $ref: https://raw.githubusercontent.com/jupyter/nbformat/master/nbformat/v4/nbformat.v4.schema.json\n    Contents:\n      description: \"A contents object.  The content and format keys may be null if content is not contained.  If type is 'file', then the mimetype will be null.\"\n      type: object\n      required:\n        - type\n        - name\n        - path\n        - writable\n        - created\n        - last_modified\n        - mimetype\n        - format\n        - content\n      properties:\n        name:\n          type: string\n          description: \"Name of file or directory, equivalent to the last part of the path\"\n        path:\n          type: string\n          description: Full path for file or directory\n        type:\n          type: string\n          description: Type of content\n          enum:\n            - directory\n            - file\n            - notebook\n        writable:\n          type: boolean\n          description: indicates whether the requester has permission to edit the file\n        created:\n          type: string\n          description: Creation timestamp\n          format: date-time\n        last_modified:\n          type: string\n          description: Last modified timestamp\n          format: date-time\n        size:\n          type: integer\n          description: \"The size of the file or notebook in bytes. If no size is provided, defaults to null.\"\n        mimetype:\n          type: string\n          description: \"The mimetype of a file.  If content is not null, and type is 'file', this will contain the mimetype of the file, otherwise this will be null.\"\n        content:\n          type: string\n          description: \"The content, if requested (otherwise null).  Will be an array if type is 'directory'\"\n        format:\n          type: string\n          description: Format of content (one of null, 'text', 'base64', 'json')\n    FeatureValidationInfo:\n      type: object\n      required:\n        - bookstore_valid\n        - archive_valid\n        - publish_valid\n        - s3_clone_valid\n        - fs_clone_valid\n      properties:\n        bookstore_valid:\n          type: boolean\n        archive_valid:\n          type: boolean\n        publish_valid: \n          type: boolean\n        s3_clone_valid: \n          type: boolean\n        fs_clone_valid: \n          type: boolean\n    VersionInfo:\n      type: object\n      properties:\n        release:\n          type: string\n        features: \n          $ref: '#/components/schemas/FeatureValidationInfo'\n"
		}
	},
	"Error": "parse: parse spec: paths: /api/bookstore/publish/{path}: put: operation \"\": requestBody: content: \"application/json\": parse schema: parse schema: resolve \"#/components/schemas/PublishableContents\": parse schema: property \"content\": parse schema: resolve \"https://raw.githubusercontent.com/jupyter/nbformat/master/nbformat/v4/nbformat.v4.schema.json\": find schema: external base \"https://raw.githubusercontent.com/jupyter/nbformat/master/nbformat/v4/nbformat.v4.schema.json\" is not supported"
}