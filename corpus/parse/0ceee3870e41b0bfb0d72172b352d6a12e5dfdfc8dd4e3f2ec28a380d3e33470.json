{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/camptocamp/oapi-poc"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi.yaml",
			"byteSize": 63557,
			"content": "openapi: 3.0.3\ninfo:\n  title: OpenAPI for OAPI POC - MeteoSwiss\n  description: Sample OpenAPI definition of OGC API \u0026 STAC API for MeteoSuiss\n  termsOfService: https://github.com/camptocamp/oapi-poc#terms-of-service\n  version: 0.1.0\nservers:\n  - url: \"http://localhost:8484/root/\"\n    description: \"Local development server\"\n  - url: \"https://poc.meteoschweiz-poc.swisstopo.cloud/root/\"\n    description: \"Public test server\"\ntags:\n  - name: Capabilities\n    description: Essential characteristics of the information available from the API.\n  - name: Collections\n    description: Description of the information available from the collections\n  - name: Collection data queries\n    description: Data queries available.\n  - name: Item Search\n    description: essential characteristics of a STAC API\npaths:\n  /:\n    get:\n      tags:\n        - Capabilities\n      summary: landing page of this API\n      description: \"The landing page provides links to the API definition, the Conformance statements and the metadata about the feature data in this dataset.\"\n      operationId: getLandingPage\n      responses:\n        \"200\":\n          description: links to the API capabilities\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/landingPage\"\n            text/html:\n              schema:\n                type: string\n      parameters:\n        - $ref: \"#/components/parameters/f\"\n  /conformance:\n    get:\n      tags:\n        - Capabilities\n      summary: information about standards that this API conforms to\n      description: list all requirements classes specified in a standard that the server conforms to\n      operationId: getRequirementsClasses\n      responses:\n        \"200\":\n          description: the URIs of all requirements classes supported by the server\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/confClasses\"\n            text/html:\n              schema:\n                type: string\n      parameters:\n        - $ref: \"#/components/parameters/f\"\n  /collections:\n    get:\n      tags:\n        - Collections\n      summary: List the avialable collections from the service\n      operationId: listCollections\n      responses:\n        \"200\":\n          description: Metdata about the Environmental data collections shared by this API.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/collections\"\n            text/html:\n              schema:\n                type: string\n        default:\n          $ref: \"#/components/responses/exception\"\n    parameters:\n      - $ref: \"#/components/parameters/bbox\"\n      - $ref: \"#/components/parameters/datetime\"\n      - $ref: \"#/components/parameters/f\"\n  /collections/{collectionId}:\n    get:\n      tags:\n        - Collections\n      summary: List query types supported by the collection\n      description: This will provide information about the query types that are supported by the chosen collection Use content negotiation to request HTML or JSON.\n      operationId: getQueries\n      responses:\n        \"200\":\n          description: \"Metadata about the {collectionId} collection shared by this API.\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/collection\"\n            text/html:\n              schema:\n                type: string\n        default:\n          description: An error occured.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/exception\"\n            text/html:\n              schema:\n                type: string\n    parameters:\n      - $ref: \"#/components/parameters/collectionId\"\n      - $ref: \"#/components/parameters/f\"\n  # /collections/{collectionId}/position:\n  #   get:\n  #     tags:\n  #       - Collection data queries\n  #     summary: \"Query end point for position queries  of collection {collectionId}\"\n  #     description: Query end point for position queries\n  #     operationId: getDataForPoint\n  #     parameters:\n  #       - $ref: \"#/components/parameters/collectionId\"\n  #       - $ref: \"#/components/parameters/positionCoords\"\n  #       - $ref: \"#/components/parameters/z\"\n  #       - $ref: \"#/components/parameters/datetime\"\n  #       - $ref: \"#/components/parameters/parameter-name\"\n  #       - $ref: \"#/components/parameters/crs\"\n  #       - $ref: \"#/components/parameters/f\"\n  #     responses:\n  #       \"200\":\n  #         description: Data ranges required to construct valid queries for the choosen data collection\n  #         content:\n  #           application/geo+json:\n  #             schema:\n  #               $ref: \"#/components/schemas/featureCollectionGeoJSON\"\n  #           application/x-netcdf: {}\n  #           text/xml: {}\n  #       default:\n  #         $ref: \"#/components/responses/exception\"\n  /collections/{collectionId}/items:\n    get:\n      tags:\n        - Collection data queries\n      summary: List available items\n      description: List the items available in the collection accessible via a unique identifier\n      operationId: ListDataItems\n      parameters:\n        - $ref: \"#/components/parameters/collectionId\"\n        - $ref: \"#/components/parameters/limit\"\n        - $ref: \"#/components/parameters/bbox\"\n        - $ref: \"#/components/parameters/datetime\"\n      responses:\n        \"200\":\n          description: List of pre-existing items available for retrieval\n          content:\n            application/geo+json:\n              schema:\n                $ref: \"#/components/schemas/featureCollectionGeoJSON\"\n        default:\n          description: An error occured.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/exception\"\n            text/html:\n              schema:\n                type: string\n  /collections/{collectionId}/items/{itemId}:\n    get:\n      tags:\n        - Collection data queries\n      summary: Return item {itemId} from collection {collectionId}\n      description: \"Query end point to retrieve data from collection {collectionId} using a unique identifier\"\n      operationId: GetDataForItem\n      parameters:\n        - $ref: \"#/components/parameters/collectionId\"\n        - $ref: \"#/components/parameters/itemId\"\n      responses:\n        \"200\":\n          description: Data ranges required to construct valid queries for the choosen data collection\n          content:\n            application/json: {}\n            text/xml: {}\n        default:\n          description: An error occured.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/exception\"\n            text/html:\n              schema:\n                type: string\n  /search:\n    get:\n      summary: Search STAC items with simple filtering.\n      operationId: getItemSearch\n      description: |-\n        Retrieve Items matching filters. Intended as a shorthand API for simple\n        queries.\n        This method is required to implement.\n        If this endpoint is implemented on a server, it is required to add a\n        link referring to this endpoint with `rel` set to `search` to the\n        `links` array in `GET /`. As `GET` is the default method, the `method`\n        may not be set explicitly in the link.\n      tags:\n        - Item Search\n      parameters:\n        - $ref: \"#/components/parameters/bbox\"\n        - $ref: \"#/components/parameters/intersects\"\n        - $ref: \"#/components/parameters/datetime\"\n        - $ref: \"#/components/parameters/limit\"\n        - $ref: \"#/components/parameters/ids\"\n        - $ref: \"#/components/parameters/collectionsArray\"\n      responses:\n        \"200\":\n          description: A feature collection.\n          content:\n            application/geo+json:\n              schema:\n                $ref: \"#/components/schemas/featureCollectionGeoJSON\"\n        default:\n          description: An error occured.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/exception\"\n            text/html:\n              schema:\n                type: string\n    post:\n      summary: Search STAC items with full-featured filtering.\n      operationId: postItemSearch\n      description: |-\n        Retrieve items matching filters. Intended as the standard, full-featured\n        query API.\n        This method is optional to implement, but recommended.\n        If this endpoint is implemented on a server, it is required to add a\n        link referring to this endpoint with `rel` set to `search` and `method`\n        set to `POST` to the `links` array in `GET /`.\n      tags:\n        - Item Search\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/searchBody\"\n      responses:\n        \"200\":\n          description: A feature collection.\n          content:\n            application/geo+json:\n              schema:\n                $ref: \"#/components/schemas/featureCollectionGeoJSON\"\n        default:\n          description: An error occured.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/exception\"\n            text/html:\n              schema:\n                type: string\ncomponents:\n  headers:\n    Content-Crs:\n      description: a URI, in angular brackets, identifying the coordinate reference system used in the content / payload\n      schema:\n        type: string\n      example: \"\u003chttp://www.opengis.net/def/crs/EPSG/0/3395\u003e\"\n  parameters:\n    areaCoords:\n      name: coords\n      in: query\n      description: |-\n        Only data that has a geometry that intersects the area defined by the polygon\n        are selected. \n        The polygon is defined using a Well Known Text string following \n        coords=POLYGON((x y,x1 y1,x2 y2,...,xn yn x y))\n        which are values in the coordinate system defined by the crs query parameter \n        (if crs is not defined the values will be assumed to be WGS84 longitude/latitude coordinates).  \n        For instance a polygon that roughly describes an area that contains \n        South West England in WGS84 would look like: \n        coords=POLYGON((-6.1 50.3,-4.35 51.4,-2.6 51.6,-2.8 50.6,-5.3 49.9,-6.1,50.3))\n        see http://portal.opengeospatial.org/files/?artifact_id=25355 and \n        https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry\n        The coords parameter will only support 2D POLYGON definitions\n      required: true\n      schema:\n        type: string\n    bbox:\n      name: bbox\n      in: query\n      description: \u003e-\n        Only resources that have a geometry that intersects the bounding box are selected.\n        The bounding box is provided as four or six numbers, depending on whether the\n        coordinate reference system includes a vertical axis (elevation or depth):\n\n        * Lower left corner, coordinate axis 1\n        * Lower left corner, coordinate axis 2\n        * Lower left corner, coordinate axis 3 (optional)\n        * Upper right corner, coordinate axis 1\n        * Upper right corner, coordinate axis 2\n        * Upper right corner, coordinate axis 3 (optional)\n\n        If the value consists of four numbers, the coordinate reference system is\n        WGS84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84) \n        unless a different coordinate reference system is specified in the parameter `bbox-crs`.\n\n        If the value consists of six numbers, the coordinate reference system is WGS 84 \n        longitude/latitude/ellipsoidal height (http://www.opengis.net/def/crs/OGC/0/CRS84h)\n        unless a different coordinate reference system is specified in a parameter `bbox-crs`.\n\n        For WGS84 longitude/latitude the values are in most cases the sequence of\n        minimum longitude, minimum latitude, maximum longitude and maximum latitude.\n        However, in cases where the box spans the antimeridian the first value\n        (west-most box edge) is larger than the third value (east-most box edge).\n\n        If the vertical axis is included, the third and the sixth number are the\n        bottom and the top of the 3-dimensional bounding box.\n\n        If a resource has multiple spatial geometry properties, it is the decision of the server \n        whether only a single spatial geometry property is used to determine\n        the extent or all relevant geometries.\n      required: false\n      schema:\n        type: array\n        minItems: 4\n        maxItems: 6\n        items:\n          type: number\n      style: form\n      explode: false\n    bbox-crs:\n      name: bbox-crs\n      description: |-\n        Asserts the CRS used for the coordinate values of the bbox parameter.\n        The default is WGS 84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84)\n        for a value with 4 numbers and WGS 84 longitude/latitude/ellipsoidal\n        height (http://www.opengis.net/def/crs/OGC/0/CRS84h) for a value with 6 numbers.\n      in: query\n      required: false\n      schema:\n        type: string\n        format: uri\n      style: form\n      explode: false\n    collectionId:\n      name: collectionId\n      in: path\n      description: local identifier of a collection\n      required: true\n      schema:\n        type: string\n    collectionsArray:\n      name: collections\n      in: query\n      description: |\n        Array of Collection IDs to include in the search for items.\n        Only Item objects in one of the provided collections will be searched\n      required: false\n      schema:\n        $ref: \"#/components/schemas/collectionsArray\"\n      explode: false\n    corridor-height:\n      name: corridor-height\n      in: query\n      description: |+\n        height of the corridor\n        The height value represents the whole height of the corridor where\n        the trajectory supplied in the `coords` query parameter is the centre\n        point of the corridor\n        `corridor-height={height}`\n        e.g.  corridor-height=100\n        Would be a request for a corridor 100 units high with the coords parameter values being the centre point of the requested corridor, \n        the request would be for data values 50 units either side of the trajectory coordinates defined in the coords parameter. \n        The height units supported by the collection will be provided in the API metadata responses\n      required: true\n      schema:\n        type: string\n    corridor-width:\n      name: corridor-width\n      in: query\n      description: |+\n        width of the corridor\n        The width value represents the whole width of the corridor where\n        the trajectory supplied in the `coords` query parameter is the centre\n        point of the corridor\n        `corridor-width={width}`\n        e.g.  corridor-width=100\n        Would be a request for a corridor 100 units wide with the coords parameter values being the centre point of the requested corridor, \n        the request would be for data values 50 units either side of the trajectory coordinates defined in the coords parameter. \n        The width units supported by the collection will be provided in the API metadata responses\n      required: true\n      schema:\n        type: string\n    crs:\n      name: crs\n      description: |-\n        If the parameter is specified, then the coordinates of all geometry-valued\n        properties in the response document are in the requested CRS. Otherwise\n        the coordinates are in the default CRS, that is http://www.opengis.net/def/crs/OGC/1.3/CRS84\n        for coordinates without height and http://www.opengis.net/def/crs/OGC/0/CRS84h\n        for coordinates with ellipsoidal height.\n      in: query\n      required: false\n      schema:\n        type: string\n        format: uri\n      style: form\n      explode: false\n    cube-z:\n      name: z\n      in: query\n      description: |+\n        Define the vertical levels to return data from \n\n        The value will override any vertical values defined in the BBOX query parameter \n\n        A range to return data for all levels between and including 2 defined levels\n        i.e. z=minimum value/maximum value\n        for instance if all values between and including 10m and 100m\n        z=10/100\n        A list of height values can be specified\n        i.e. z=value1,value2,value3\n        for instance if values at 2m, 10m and 80m are required\n        z=2,10,80\n        An Arithmetic sequence using Recurring height intervals, the difference is the number of recurrences is defined at the start \n        and the amount to increment the height by is defined at the end\n        i.e. z=Rn/min height/height interval\n        so if the request was for 20 height levels 50m apart starting at 100m:\n        z=R20/100/50\n        When not specified data from all available heights SHOULD be returned\n      required: false\n      schema:\n        type: string\n    datetime:\n      name: datetime\n      in: query\n      description: \u003e-\n        Either a date-time or an interval, open or closed. Date and time expressions\n        adhere to RFC 3339. Open intervals are expressed using double-dots.\n\n        Examples:\n\n        * A date-time: \"2018-02-12T23:20:50Z\"\n        * A closed interval: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\"\n        * Open intervals: \"2018-02-12T00:00:00Z/..\" or \"../2018-03-18T12:31:12Z\"\n\n        Only features that have a temporal property that intersects the value of\n        `datetime` are selected.\n\n        If a feature has multiple temporal properties, it is the decision of the\n        server whether only a single temporal property is used to determine\n        the extent or all relevant temporal properties.\n      required: false\n      schema:\n        type: string\n      style: form\n      explode: false\n    f:\n      name: f\n      in: query\n      description: format to return the data response in\n      required: false\n      schema:\n        type: string\n    featureId:\n      name: featureId\n      in: path\n      description: local identifier of a feature\n      required: true\n      schema:\n        type: string\n    height-units:\n      name: height-units\n      in: query\n      description: Distance units for the corridor-height parameter\n      required: true\n      example: KM\n      schema:\n        type: string\n    ids:\n      name: ids\n      in: query\n      description: |-\n        Array of Item ids to return.\n      required: false\n      schema:\n        $ref: \"#/components/schemas/ids\"\n      explode: false\n    intersects:\n      name: intersects\n      in: query\n      description: |-\n        The optional intersects parameter filters the result Items in the same was as bbox, only with\n        a GeoJSON Geometry rather than a bbox.\n      required: false\n      schema:\n        $ref: \"#/components/schemas/geometryGeoJSON\"\n      style: form\n      explode: false\n    itemId:\n      name: itemId\n      in: path\n      required: true\n      description: \"Retrieve data from the collection using a unique identifier.\"\n      schema:\n        type: string\n    limit:\n      name: limit\n      in: query\n      description: |-\n        The optional limit parameter limits the number of items that are presented in the response document.\n\n        Only items are counted that are on the first level of the collection in the response document.\n        Nested objects contained within the explicitly requested items shall not be counted.\n\n        Minimum = 1. Maximum = 10000. Default = 10.\n      required: false\n      schema:\n        type: integer\n        minimum: 1\n        maximum: 10000\n        default: 10\n      style: form\n      explode: false\n    locId:\n      name: locId\n      in: path\n      required: true\n      description: Retreive data for the location defined by locId (i.e. London_Heathrow, EGLL, 03772 etc)\n      schema:\n        type: string\n    parameter-name:\n      name: parameter-name\n      in: query\n      description: comma delimited list of parameters to retrieve data for.  Valid parameters are listed in the collections metadata\n      schema:\n        type: string\n      style: form\n      explode: false\n      required: false\n    positionCoords:\n      name: coords\n      in: query\n      description: |+\n        location(s) to return data for, the coordinates are defined by a Well Known Text\n        (wkt) string. to retrieve a single location :\n        POINT(x y) i.e. POINT(0 51.48) for Greenwich, London\n        And for a list of locations\n        MULTIPOINT((x y),(x1 y1),(x2 y2),(x3 y3))\n        i.e.\n        MULTIPOINT((38.9 -77),(48.85 2.35),(39.92 116.38),(-35.29 149.1),(51.5 -0.1))\n        see http://portal.opengeospatial.org/files/?artifact_id=25355 and \n        https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry\n        the coordinate values will depend on the CRS parameter, if this is not defined\n        the values will be assumed to WGS84 values (i.e x=longitude and y=latitude)\n      required: true\n      schema:\n        type: string\n    radiusCoords:\n      name: coords\n      in: query\n      description: |\n        location(s) to return data for, the coordinates are defined by a Well Known Text\n        (wkt) string. to retrieve a single location :\n        POINT(x y) i.e. POINT(0 51.48) for Greenwich, London\n        see http://portal.opengeospatial.org/files/?artifact_id=25355 and \n        https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry\n        the coordinate values will depend on the CRS parameter, if this is not defined\n        the values will be assumed to WGS84 values (i.e x=longitude and y=latitude)\n      required: true\n      schema:\n        type: string\n    resolution-x:\n      name: resolution-x\n      in: query\n      description: |+\n        Defined it the user requires data at a different resolution from the native resolution of the data along the x-axis\n        If this is a single value it denotes the number of intervals to retrieve data for along the x-axis\n          \n          i.e. resolution-x=10 \n          \n        would retrieve 10 values along the x-axis from the minimum x coordinate to maximum x coordinate (i.e. a value at both the minimum x and maximum x coordinates and 8 values between).\n      required: false\n      schema:\n        items:\n          type: string\n    resolution-y:\n      name: resolution-y\n      in: query\n      description: |+\n        Defined it the user requires data at a different resolution from the native resolution of the data along the y-axis\n        If this is a single value it denotes the number of intervals to retrieve data for along the y-axis\n          \n          i.e. resolution-y=10 \n          \n        would retrieve 10 values along the y-axis from the minimum y coordinate to maximum y coordinate (i.e. a value at both the minimum y and maximum y coordinates and 8 values between).\n      required: false\n      schema:\n        items:\n          type: string\n    resolution-z:\n      name: resolution-z\n      in: query\n      description: |+\n        Defined it the user requires data at a different resolution from the native resolution of the data along the z-axis\n        If this is a single value it denotes the number of intervals to retrieve data for along the z-axis\n          \n          i.e. resolution-z=10 \n          \n        would retrieve 10 values along the z-axis from the minimum z coordinate to maximum z  coordinate (i.e. a value at both the minimum z and maximum z coordinates and 8 values between).\n      required: false\n      schema:\n        items:\n          type: string\n    trajectoryCoords:\n      name: coords\n      in: query\n      description: |-\n        Only data that has a geometry that intersects the area defined by the linestring\n        are selected. \n        The trajectory is defined using a Well Known Text string following \n        A 2D trajectory, on the surface of earth with no time or height dimensions: \n            coords=LINESTRING(-2.87 51.14 , -2.98 51.36,-3.15 51.03 ,-3.48 50.74 ,-3.36 50.9 )\n        A 2D trajectory, on the surface of earth with all for the same time and no height dimension, time value defined in ISO8601 format by the `datetime` query parameter : \n            coords=LINESTRING(-2.87 51.14 , -2.98 51.36 ,-3.15 51.03 ,-3.48 50.74 ,-3.36 50.9 )\u0026time=2018-02-12T23:00:00Z\n        A 2D trajectory, on the surface of earth with no time value but at a fixed height level, height defined in the collection height units by the `z` query parameter : \n            coords=LINESTRING(-2.87 51.14 , -2.98 51.36 ,-3.15 51.03 ,-3.48 50.74 ,-3.36 50.9 )\u0026z=850 \n        A 2D trajectory, on the surface of earth with all for the same time and at a fixed height level, time value defined in ISO8601 format by the `datetime` query parameter and height defined in the collection height units by the `z` query parameter : \n            coords=LINESTRING(-2.87 51.14 , -2.98 51.36 ,-3.15 51.03 ,-3.48 50.74 ,-3.36 50.9 )\u0026time=2018-02-12T23:00:00Z\u0026z=850 \n        A 3D trajectory, on the surface of the earth but over a time range with no height values:\n        coords=LINESTRINGM(-2.87 51.14  1560507000,-2.98 51.36  1560507600,-3.15 51.03  1560508200,-3.48 50.74  1560508500,-3.36 50.9  1560510240)\n        A 3D trajectory, on the surface of the earth but over a time range with a fixed height value, height defined in the collection height units by the `z` query parameter : \n        coords=LINESTRINGM(-2.87 51.14  1560507000,-2.98 51.36  1560507600,-3.15 51.03  1560508200,-3.48 50.74  1560508500,-3.36 50.9  1560510240)\u0026z=200\n        A 3D trajectory, through a 3D volume with height or depth, but no defined time:\n        coords=LINESTRINGZ(-2.87 51.14  0.1,-2.98 51.36  0.2,-3.15 51.03  0.3,-3.48 50.74  0.4,-3.36 50.9  0.5)\n        A 3D trajectory, through a 3D volume with height or depth, but a fixed time time value defined in ISO8601 format by the `datetime` query parameter:\n        coords=LINESTRINGZ(-2.87 51.14  0.1,-2.98 51.36  0.2,-3.15 51.03  0.3,-3.48 50.74  0.4,-3.36 50.9  0.5)\u0026time=2018-02-12T23:00:00Z\n        A 4D trajectory, through a 3D volume but over a time range:\n        coords=LINESTRINGZM(-2.87 51.14 0.1 1560507000,-2.98 51.36 0.2 1560507600,-3.15 51.03 0.3 1560508200, -3.48 50.74 0.4 1560508500, -3.36 50.9 0.5 1560510240)\n        (using either the `time` or `z` parameters with a 4D trajectory wil generate an error response)\n        where Z in `LINESTRINGZ` and `LINESTRINGZM` refers to the height value.  \n        `If the specified CRS does not define the height units, the heights units will default to metres above mean sea level`\n        and the M in `LINESTRINGM` and `LINESTRINGZM` refers to the number of seconds that have elapsed since the Unix epoch, that is the time 00:00:00 UTC on 1 January 1970. See\n        https://en.wikipedia.org/wiki/Unix_time\n      required: true\n      schema:\n        type: string\n    width-units:\n      name: width-units\n      in: query\n      description: Distance units for the corridor-width parameter\n      required: true\n      example: KM\n      schema:\n        type: string\n    within:\n      name: within\n      in: query\n      description: Defines radius of area around defined coordinates to include in the data selection\n      required: true\n      example: 10\n      schema:\n        type: number\n    within-units:\n      name: within-units\n      in: query\n      description: Distance units for the within parameter\n      required: true\n      example: KM\n      schema:\n        type: string\n    z:\n      name: z\n      in: query\n      description: |+\n        Define the vertical level to return data from \n        i.e. z=level\n        for instance if the 850hPa pressure level is being queried\n        z=850\n        or a range to return data for all levels between and including 2 defined levels\n        i.e. z=minimum value/maximum value\n        for instance if all values between and including 10m and 100m\n        z=10/100\n        finally a list of height values can be specified\n        i.e. z=value1,value2,value3\n        for instance if values at 2m, 10m and 80m are required\n        z=2,10,80\n        An Arithmetic sequence using Recurring height intervals, the difference is the number of recurrences is defined at the start \n        and the amount to increment the height by is defined at the end\n        i.e. z=Rn/min height/height interval\n        so if the request was for 20 height levels 50m apart starting at 100m:\n        z=R20/100/50\n        When not specified data from all available heights SHOULD be returned\n      required: false\n      schema:\n        type: string\n      style: form\n      explode: false\n  responses:\n    ConformanceDeclaration:\n      description: |-\n        The URIs of all conformance classes supported by the server.\n        To support \"generic\" clients that want to access multiple\n        OGC API Features implementations - and not \"just\" a specific\n        API / server, the server declares the conformance\n        classes it implements and conforms to.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/confClasses\"\n          example:\n            conformsTo:\n              - \"http://www.opengis.net/spec/ogcapi-common-1/1.0/conf/core\"\n              - \"http://www.opengis.net/spec/ogcapi-common-1/1.0/conf/landingPage\"\n              - \"http://www.opengis.net/spec/ogcapi-common-1/1.0/conf/oas30\"\n              - \"http://www.opengis.net/spec/ogcapi-common-1/1.0/conf/html\"\n              - \"http://www.opengis.net/spec/ogcapi-common-1/1.0/conf/json\"\n        text/html:\n          schema:\n            type: string\n    FeatureCollection:\n      description: Paginated GeoJSON feature collection\n      headers:\n        Content-Crs:\n          $ref: \"#/components/headers/Content-Crs\"\n      content:\n        application/geo+json:\n          schema:\n            $ref: \"#/components/schemas/featureCollectionGeoJSON\"\n    Feature:\n      description: GeoJSON feature of a collection\n      headers:\n        Content-Crs:\n          $ref: \"#/components/headers/Content-Crs\"\n      content:\n        application/geo+json:\n          schema:\n            $ref: \"#/components/schemas/featureGeoJSON\"\n    LandingPage:\n      description: |-\n        The landing page provides links to the API definition\n        (link relations `service-desc` and `service-doc`),\n        and the Conformance declaration (path `/conformance`,\n        link relation `conformance`).\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/landingPage\"\n        text/html:\n          schema:\n            type: string\n    exception:\n      description: An error occurred.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/exception\"\n        text/html:\n          schema:\n            type: string\n    200:\n      description: |-\n        General Success response.\n    400:\n      description: |-\n        General HTTP error response.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/exception\"\n        text/html:\n          schema:\n            type: string\n    500:\n      description: |-\n        A server error occurred.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/exception\"\n        text/html:\n          schema:\n            type: string\n  schemas:\n    collectionsArray:\n      type: array\n      description: |-\n        Array of Collection IDs to include in the search for items.\n        Only Item objects in one of the provided collections will be searched.\n      items:\n        type: string\n    collectionsFilter:\n      type: object\n      description: Only returns the collections specified\n      properties:\n        collections:\n          $ref: \"#/components/schemas/collectionsArray\"\n    collectionDesc:\n      type: object\n      required:\n        - id\n        - links\n      properties:\n        id:\n          description: identifier of the collection used, for example, in URIs\n          type: string\n          example: address\n        title:\n          description: human readable title of the collection\n          type: string\n          example: address\n        description:\n          description: a description of the features in the collection\n          type: string\n          example: An address\n        attribution:\n          type: string\n          title: attribution for the collection\n        links:\n          type: array\n          items:\n            $ref: \"#/components/schemas/link\"\n        extent:\n          $ref: \"#/components/schemas/extent\"\n        itemType:\n          description: An indicator about the type of the items in the collection\n          type: string\n        crs:\n          description: |-\n            the list of coordinate reference systems supported by the API; the\n            first item is the default coordinate reference system\n          type: array\n          items:\n            type: string\n          default:\n            - http://www.opengis.net/def/crs/OGC/1.3/CRS84\n          example:\n            - http://www.opengis.net/def/crs/OGC/1.3/CRS84\n            - http://www.opengis.net/def/crs/EPSG/0/4326\n        storageCrs:\n          description: |-\n            the CRS identifier, from the list of supported CRS identifiers, \n            that may be used to retrieve features from a collection without the\n            need to apply a CRS transformation\n          type: string\n          format: uri\n        storageCrsCoordinateEpoch:\n          description: |-\n            point in time at which coordinates in the spatial feature \n            collection are referenced to the dynamic coordinate reference \n            system in `storageCrs`, that may be used to retrieve features from \n            a collection without the need to apply a change of coordinate \n            epoch. It is expressed as a decimal year in the Gregorian calendar\n          type: number\n          example: \"2017-03-25 in the Gregorian calendar is epoch 2017.23\"\n    bbox:\n      description: |-\n        One or more bounding boxes that describe the spatial extent of the dataset.\n        In the Core only a single bounding box is supported.\n\n        Extensions may support additional areas.\n        The first bounding box describes the overall spatial\n        extent of the data. All subsequent bounding boxes describe \n        more precise bounding boxes, e.g., to identify clusters of data.\n        Clients only interested in the overall spatial extent will\n        only need to access the first bounding box in the array.\n      type: array\n      minItems: 1\n      items:\n        description: |-\n          Each bounding box is provided as four or six numbers, depending on\n          whether the coordinate reference system includes a vertical axis\n          (height or depth):\n\n          * Lower left corner, coordinate axis 1\n          * Lower left corner, coordinate axis 2\n          * Minimum value, coordinate axis 3 (optional)\n          * Upper right corner, coordinate axis 1\n          * Upper right corner, coordinate axis 2\n          * Maximum value, coordinate axis 3 (optional)\n\n          If the value consists of four numbers, the coordinate reference system is\n          WGS 84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84)\n          unless a different coordinate reference system is specified in `crs`.\n\n          If the value consists of six numbers, the coordinate reference system is WGS 84 \n          longitude/latitude/ellipsoidal height (http://www.opengis.net/def/crs/OGC/0/CRS84h)\n          unless a different coordinate reference system is specified in `crs`.\n\n          For WGS 84 longitude/latitude the values are in most cases the sequence of\n          minimum longitude, minimum latitude, maximum longitude and maximum latitude.\n          However, in cases where the box spans the antimeridian the first value\n          (west-most box edge) is larger than the third value (east-most box edge).\n\n          If the vertical axis is included, the third and the sixth number are\n          the bottom and the top of the 3-dimensional bounding box.\n\n          If a feature has multiple spatial geometry properties, it is the decision of the\n          server whether only a single spatial geometry property is used to determine\n          the extent or all relevant geometries.\n        type: array\n        oneOf:\n          - minItems: 4\n            maxItems: 4\n          - minItems: 6\n            maxItems: 6\n        items:\n          type: number\n        example:\n          - -180\n          - -90\n          - 180\n          - 90\n    bboxFilter:\n      type: object\n      description: Only return items that intersect the provided bounding box.\n      properties:\n        bbox:\n          $ref: \"#/components/schemas/bbox\"\n    collection:\n      type: object\n      required:\n        - links\n        - id\n        - extent\n        - parameter_names\n      properties:\n        links:\n          type: array\n          items:\n            $ref: \"#/components/schemas/link\"\n        id:\n          description: id of the collection\n          type: string\n          example: Metar data\n        title:\n          description: title of the collection\n          type: string\n          example: Metar observations\n        description:\n          description: description of the collection\n          type: string\n          example: Last 24 hours Metar observations\n        keywords:\n          description: List of keywords which help to describe the collection\n          type: array\n          items:\n            type: string\n        extent:\n          $ref: \"#/components/schemas/extent\"\n        # data_queries:\n        #   description: Detailed information relevant to individual query types\n        #   type: object\n        #   properties:\n        #     position:\n        #       type: object\n        #       properties:\n        #         link:\n        #           $ref: \"#/components/schemas/positionLink\"\n        #     radius:\n        #       type: object\n        #       properties:\n        #         link:\n        #           $ref: \"#/components/schemas/radiusLink\"\n        #     area:\n        #       type: object\n        #       properties:\n        #         link:\n        #           $ref: \"#/components/schemas/areaLink\"\n        #     cube:\n        #       type: object\n        #       properties:\n        #         link:\n        #           $ref: \"#/components/schemas/cubeLink\"\n        #     trajectory:\n        #       type: object\n        #       properties:\n        #         link:\n        #           $ref: \"#/components/schemas/trajectoryLink\"\n        #     corridor:\n        #       type: object\n        #       properties:\n        #         link:\n        #           $ref: \"#/components/schemas/corridorLink\"\n        #     locations:\n        #       type: object\n        #       properties:\n        #         link:\n        #           $ref: \"#/components/schemas/locationsLink\"\n        #     items:\n        #       type: object\n        #       properties:\n        #         link:\n        #           $ref: \"#/components/schemas/itemsLink\"\n        crs:\n          description: list of the coordinate reference systems the collection results can support\n          type: array\n          items:\n            type: string\n        # output_formats:\n        #   description: list of formats the results can be presented in\n        #   type: array\n        #   items:\n        #     type: string\n        #   example:\n        #     - CoverageJSON\n        #     - GeoJSON\n        #     - IWXXM\n        #     - GRIB\n        # parameter_names:\n        #   description: list of the data parameters available in the collection\n        #   type: object\n        #   additionalProperties:\n        #     items:\n        #       $ref: \"#/components/schemas/parameterNames\"\n    collections:\n      type: object\n      required:\n        - links\n        - collections\n      properties:\n        links:\n          type: array\n          items:\n            $ref: \"#/components/schemas/link\"\n        timeStamp:\n          type: string\n          format: date-time\n        numberMatched:\n          type: integer\n          minimum: 0\n        numberReturned:\n          type: integer\n          minimum: 0\n        crs:\n          description: |-\n            a global list of CRS identifiers that are supported by spatial feature \n            collections offered by the service\n          type: array\n          items:\n            type: string\n            format: uri\n        collections:\n          type: array\n          items:\n            $ref: \"#/components/schemas/collectionDesc\"\n    confClasses:\n      type: object\n      required:\n        - conformsTo\n      properties:\n        conformsTo:\n          type: array\n          items:\n            type: string\n            example: http://www.opengis.net/spec/ogcapi-common-1/1.0/conf/core\n    # crsObject:\n    #   type: object\n    #   required:\n    #     - crs\n    #     - wkt\n    #   properties:\n    #     crs:\n    #       description: name of the coordinate reference system, used as the value in the crs query parameter to define the required output CRS\n    #       type: string\n    #       example: native\n    #     wkt:\n    #       description: Well Known text description of the coordinate reference system\n    #       type: string\n    #       example: 'GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.01745329251994328,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]]'\n    datetime_interval:\n      type: string\n      description: |-\n        Either a date-time or an interval, open or closed. Date and time expressions\n        adhere to RFC 3339. Open intervals are expressed using double-dots.\n        Examples:\n\n        * A date-time: \"2018-02-12T23:20:50Z\"\n        * A closed interval: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\"\n        * Open intervals: \"2018-02-12T00:00:00Z/..\" or \"../2018-03-18T12:31:12Z\"\n\n        Only features that have a temporal property that intersects the value of\n        `datetime` are selected.\n\n        If a feature has multiple temporal properties, it is the decision of the\n        server whether only a single temporal property is used to determine\n        the extent or all relevant temporal properties.\n      example: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\"\n    datetimeFilter:\n      description: An object representing a date+time based filter.\n      type: object\n      properties:\n        datetime:\n          $ref: \"#/components/schemas/datetime_interval\"\n    exception:\n      title: Exception Schema\n      description: JSON schema for exceptions based on RFC 7807\n      type: object\n      required:\n        - type\n      properties:\n        type:\n          type: string\n        title:\n          type: string\n        status:\n          type: integer\n        detail:\n          type: string\n        instance:\n          type: string\n    extent:\n      description: |-\n        The extent of the features in the collection. In the Core only spatial and temporal\n        extents are specified. Extensions may add additional members to represent other\n        extents, for example, thermal or pressure ranges.\n\n        The first item in the array describes the overall extent of\n        the data. All subsequent items describe more precise extents, \n        e.g., to identify clusters of data.\n        Clients only interested in the overall extent will only need to\n        access the first item in each array.\n      type: object\n      properties:\n        spatial:\n          description: |-\n            The spatial extent of the features in the collection.\n          type: object\n          properties:\n            bbox:\n              $ref: \"#/components/schemas/bbox\"\n            crs:\n              description: |-\n                Coordinate reference system of the coordinates in the spatial extent\n                (property `bbox`). The default reference system is WGS 84 longitude/latitude.\n                In the Core the only other supported coordinate reference system is\n                WGS 84 longitude/latitude/height for coordinates with height.\n                Extensions may support additional coordinate reference systems and add\n                additional enum values.\n              type: string\n              enum:\n                - \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"\n                - \"http://www.opengis.net/def/crs/OGC/0/CRS84h\"\n              default: \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"\n        temporal:\n          description: |-\n            The temporal extent of the features in the collection.\n          type: object\n          properties:\n            interval:\n              description: |-\n                One or more time intervals that describe the temporal extent of the dataset.\n                In the Core only a single time interval is supported.\n\n                Extensions may support multiple intervals.\n                The first time interval describes the overall\n                temporal extent of the data. All subsequent time intervals describe \n                more precise time intervals, e.g., to identify clusters of data.\n                Clients only interested in the overall extent will only need\n                to access the first item in each array.\n              type: array\n              minItems: 1\n              items:\n                description: |-\n                  Begin and end times of the time interval. The timestamps are in the\n                  temporal coordinate reference system specified in `trs`. By default\n                  this is the Gregorian calendar.\n\n                  The value `null` is supported and indicates an open time interval.\n                type: array\n                minItems: 2\n                maxItems: 2\n                items:\n                  type: string\n                  format: date-time\n                  nullable: true\n                example:\n                  - \"2011-11-11T12:22:11Z\"\n                  - null\n            trs:\n              description: |-\n                Coordinate reference system of the coordinates in the temporal extent\n                (property `interval`). The default reference system is the Gregorian calendar.\n                In the Core this is the only supported temporal coordinate reference system.\n                Extensions may support additional temporal coordinate reference systems and add\n                additional enum values.\n              type: string\n              enum:\n                - \"http://www.opengis.net/def/uom/ISO-8601/0/Gregorian\"\n              default: \"http://www.opengis.net/def/uom/ISO-8601/0/Gregorian\"\n    featureCollectionGeoJSON:\n      type: object\n      required:\n        - type\n        - features\n      properties:\n        type:\n          type: string\n          enum:\n            - FeatureCollection\n        features:\n          type: array\n          items:\n            $ref: \"#/components/schemas/featureGeoJSON\"\n        links:\n          type: array\n          items:\n            $ref: \"#/components/schemas/link\"\n        timeStamp:\n          type: string\n          format: date-time\n        numberMatched:\n          type: integer\n          minimum: 0\n        numberReturned:\n          type: integer\n          minimum: 0\n    featureGeoJSON:\n      type: object\n      required:\n        - type\n        - geometry\n        - properties\n      properties:\n        type:\n          type: string\n          enum:\n            - Feature\n        geometry:\n          $ref: \"#/components/schemas/geometryGeoJSON\"\n        properties:\n          type: object\n          nullable: true\n        id:\n          oneOf:\n            - type: string\n            - type: integer\n        links:\n          type: array\n          items:\n            $ref: \"#/components/schemas/link\"\n    geometryGeoJSON:\n      oneOf:\n        - $ref: \"#/components/schemas/pointGeoJSON\"\n        - $ref: \"#/components/schemas/multipointGeoJSON\"\n        - $ref: \"#/components/schemas/linestringGeoJSON\"\n        - $ref: \"#/components/schemas/multilinestringGeoJSON\"\n        - $ref: \"#/components/schemas/polygonGeoJSON\"\n        - $ref: \"#/components/schemas/multipolygonGeoJSON\"\n        - $ref: \"#/components/schemas/geometrycollectionGeoJSON\"\n    geometrycollectionGeoJSON:\n      type: object\n      required:\n        - type\n        - geometries\n      properties:\n        type:\n          type: string\n          enum:\n            - GeometryCollection\n        geometries:\n          type: array\n          items:\n            $ref: \"#/components/schemas/geometryGeoJSON\"\n    ids:\n      type: array\n      description: |-\n        Array of Item ids to return.\n      items:\n        type: string\n    idsFilter:\n      type: object\n      description: Only returns items that match the array of given ids\n      properties:\n        ids:\n          $ref: \"#/components/schemas/ids\"\n    intersectsFilter:\n      type: object\n      description: Only returns items that intersect with the provided polygon.\n      properties:\n        intersects:\n          $ref: \"#/components/schemas/geometryGeoJSON\"\n    # itemsDataQuery:\n    #   description:\n    #     Property to contain any extra metadata information that is specific\n    #     to an individual data queries\n    #   type: object\n    #   properties:\n    #     title:\n    #       description: title of the query\n    #       type: string\n    #       example: Items query\n    #     description:\n    #       description: description of the query\n    #       type: string\n    #       example: Query to return data for a defined well known text point\n    #     query_type:\n    #       description: Type of EDR query\n    #       type: string\n    #       enum: [items]\n    #       example: items\n    # itemsLink:\n    #   allOf:\n    #     - $ref: \"#/components/schemas/link\"\n    #   properties:\n    #     href:\n    #       type: string\n    #       example: http://data.example.com/collections/monitoringsites/items\n    #     variables:\n    #       $ref: \"#/components/schemas/itemsDataQuery\"\n    landingPage:\n      type: object\n      required:\n        - links\n      properties:\n        title:\n          type: string\n          title: The title of the API.\n          description: While a title is not required, implementers are strongly advised to include one.\n          example: Buildings in Bonn\n        description:\n          type: string\n          example: Access to data about buildings in the city of Bonn via a Web API that conforms to the OGC API Common specification.\n        attribution:\n          type: string\n          title: attribution for the API\n          description: The `attribution` should be short and intended for presentation to a user, for example, in a corner of a map. Parts of the text can be links to other resources if additional information is needed. The string can include HTML markup.\n        links:\n          type: array\n          items:\n            $ref: \"#/components/schemas/link\"\n    limit:\n      type: integer\n      minimum: 1\n      example: 10\n      default: 10\n      maximum: 10000\n      description: |-\n        The optional limit parameter limits the number of items that are presented in the response document.\n        If the limit parameter value is greater than advertised limit maximum, the server must return the\n        maximum possible number of items, rather than responding with an error.\n        Only items are counted that are on the first level of the collection in the response document.\n        Nested objects contained within the explicitly requested items must not be counted.\n        Minimum = 1. Maximum = 10000. Default = 10.\n    limitFilter:\n      type: object\n      description: Only returns maximum number of results (page size)\n      properties:\n        limit:\n          $ref: \"#/components/schemas/limit\"\n    linestringGeoJSON:\n      type: object\n      required:\n        - type\n        - coordinates\n      properties:\n        type:\n          type: string\n          enum:\n            - LineString\n        coordinates:\n          type: array\n          minItems: 2\n          items:\n            type: array\n            minItems: 2\n            items:\n              type: number\n    link:\n      type: object\n      required:\n        - href\n        - rel\n      properties:\n        href:\n          type: string\n          description: Supplies the URI to a remote resource (or resource fragment).\n          example: http://data.example.com/buildings/123\n        rel:\n          type: string\n          description: The type or semantics of the relation.\n          example: alternate\n        type:\n          type: string\n          description: A hint indicating what the media type of the result of dereferencing the link should be.\n          example: application/geo+json\n        hreflang:\n          type: string\n          description: A hint indicating what the language of the result of dereferencing the link should be.\n          example: en\n        title:\n          type: string\n          description: Used to label the destination of a link such that it can be used as a human-readable identifier.\n          example: Trierer Strasse 70, 53115 Bonn\n        length:\n          type: integer\n    multilinestringGeoJSON:\n      type: object\n      required:\n        - type\n        - coordinates\n      properties:\n        type:\n          type: string\n          enum:\n            - MultiLineString\n        coordinates:\n          type: array\n          items:\n            type: array\n            minItems: 2\n            items:\n              type: array\n              minItems: 2\n              items:\n                type: number\n    multipointGeoJSON:\n      type: object\n      required:\n        - type\n        - coordinates\n      properties:\n        type:\n          type: string\n          enum:\n            - MultiPoint\n        coordinates:\n          type: array\n          items:\n            type: array\n            minItems: 2\n            items:\n              type: number\n    multipolygonGeoJSON:\n      type: object\n      required:\n        - type\n        - coordinates\n      properties:\n        type:\n          type: string\n          enum:\n            - MultiPolygon\n        coordinates:\n          type: array\n          items:\n            type: array\n            items:\n              type: array\n              minItems: 4\n              items:\n                type: array\n                minItems: 2\n                items:\n                  type: number\n    numberMatched:\n      description: |-\n        The number of features of the feature type that match the selection\n        parameters like `bbox`.\n      type: integer\n      minimum: 0\n      example: 127\n    numberReturned:\n      description: |-\n        The number of features in the feature collection.\n\n        A server may omit this information in a response, if the information\n        about the number of features is not known or difficult to compute.\n\n        If the value is provided, the value shall be identical to the number\n        of items in the \"features\" array.\n      type: integer\n      minimum: 0\n      example: 10\n    # observedPropertyCollection:\n    #   type: object\n    #   title: name of property\n    #   description: Description of the property\n    #   required:\n    #     - label\n    #   properties:\n    #     id:\n    #       description: \u003e-\n    #         URI linking to an external registry which contains the definitive\n    #         definition of\n    #         the observed property\n    #       type: string\n    #     label:\n    #       oneOf:\n    #         - type: string\n    #         - type: object\n    #           required:\n    #             - en\n    #           # patternProperties:\n    #           #   \".+\":\n    #           #     type: string\n    #     description:\n    #       type: string\n    #     categories:\n    #       type: array\n    #       items:\n    #         minItems: 1\n    #         type: object\n    #         required:\n    #           - id\n    #           - label\n    #         properties:\n    #           id:\n    #             description: \u003e-\n    #               URI linking to an external registry which contains the definitive\n    #               definition of\n    #               the observed property\n    #             type: string\n    #           label:\n    #             oneOf:\n    #               - type: string\n    #               - type: object\n    #                 required:\n    #                   - en\n    #                 # patternProperties:\n    #                 #   \".+\":\n    #                 #     type: string\n    #           description:\n    #             oneOf:\n    #               - type: string\n    #               - type: object\n    #                 required:\n    #                   - en\n    #                 properties:\n    #                   en:\n    #                     type: string\n    #   example:\n    #     id: http://vocab.nerc.ac.uk/standard_name/sea_ice_area_fraction/\n    #     label: Sea Ice Concentration\n    # parameterNames:\n    #   type: object\n    #   title: Parameter name\n    #   description: Definition of data parameter\n    #   required:\n    #     - type\n    #     - observedProperty\n    #   properties:\n    #     type:\n    #       description: type\n    #       enum:\n    #         - Parameter\n    #     description:\n    #       oneOf:\n    #         - type: string\n    #         - type: object\n    #           # patternProperties:\n    #           #   \".+\":\n    #           #     type: string\n    #     label:\n    #       type: string\n    #     data-type:\n    #       description: Data type of returned parameter\n    #       enum:\n    #         - integer\n    #         - float\n    #         - string\n    #     unit:\n    #       $ref: \"#/components/schemas/units\"\n    #     observedProperty:\n    #       $ref: \"#/components/schemas/observedPropertyCollection\"\n    #     categoryEncoding:\n    #       type: object\n    #       additionalProperties:\n    #         oneOf:\n    #           - type: integer\n    #           - type: array\n    #             items:\n    #               type: integer\n    #             minItems: 1\n    #             uniqueItems: true\n    #     extent:\n    #       $ref: \"#/components/schemas/extent\"\n    #     id:\n    #       description: Unique ID of the parameter, this is the value used for querying the data\n    #       type: string\n    #     measurementType:\n    #       type: object\n    #       title: Parameter measurement approach\n    #       description: Approach to calculating the data values\n    #       required:\n    #         - method\n    #       properties:\n    #         method:\n    #           type: string\n    #           example: mean\n    #         duration:\n    #           type: string\n    #           title: Measurement time duration\n    #           description:\n    #             The time duration that the value was calculated for as an RFC3339\n    #             duration value.  If the method value is instantaneous this value is\n    #             not required.\n    #           example: PT10M\n    #   example:\n    #     type: Parameter\n    #     id: sea_ice\n    #     description: Sea Ice concentration (ice=1;no ice=0)\n    #     unit:\n    #       label: Ratio\n    #       symbol:\n    #         value: \"1\"\n    #         type: http://www.opengis.net/def/uom/UCUM/\n    #     observedProperty:\n    #       id: http://vocab.nerc.ac.uk/standard_name/sea_ice_area_fraction/\n    #       label: Sea Ice Concentration\n    pointGeoJSON:\n      type: object\n      required:\n        - type\n        - coordinates\n      properties:\n        type:\n          type: string\n          enum:\n            - Point\n        coordinates:\n          type: array\n          minItems: 2\n          items:\n            type: number\n    polygonGeoJSON:\n      type: object\n      required:\n        - type\n        - coordinates\n      properties:\n        type:\n          type: string\n          enum:\n            - Polygon\n        coordinates:\n          type: array\n          items:\n            type: array\n            minItems: 4\n            items:\n              type: array\n              minItems: 2\n              items:\n                type: number\n    # positionDataQuery:\n    #   description:\n    #     Property to contain any extra metadata information that is specific\n    #     to an individual data queries\n    #   type: object\n    #   properties:\n    #     title:\n    #       description: title of the query\n    #       type: string\n    #       example: Position query\n    #     description:\n    #       description: description of the query\n    #       type: string\n    #       example: Query to return data for a defined well known text point\n    #     query_type:\n    #       description: Type of EDR query\n    #       type: string\n    #       enum: [position]\n    #       example: position\n    #     output_formats:\n    #       description: list of output formats supported by the Position query\n    #       type: array\n    #       items:\n    #         type: string\n    #       example:\n    #         - CoverageJSON\n    #         - GeoJSON\n    #         - IWXXM\n    #         - GRIB\n    #     default_output_format:\n    #       description: default output format for the Position query\n    #       type: string\n    #     crs_details:\n    #       description: List of key/value definitions for the CRS's supported by the Position query.  The key is the query parameter and the value is the Well Known Text description\n    #       type: array\n    #       items:\n    #         $ref: \"#/components/schemas/crsObject\"\n    # positionLink:\n    #   allOf:\n    #     - $ref: \"#/components/schemas/link\"\n    #   properties:\n    #     href:\n    #       type: string\n    #       example: http://data.example.com/collections/monitoringsites/position\n    #     variables:\n    #       $ref: \"#/components/schemas/positionDataQuery\"\n    searchBody:\n      description: The search criteria\n      type: object\n      allOf:\n        - $ref: \"#/components/schemas/bboxFilter\"\n        - $ref: \"#/components/schemas/datetimeFilter\"\n        - $ref: \"#/components/schemas/intersectsFilter\"\n        - $ref: \"#/components/schemas/collectionsFilter\"\n        - $ref: \"#/components/schemas/idsFilter\"\n        - $ref: \"#/components/schemas/limitFilter\"\n    # units:\n    #   type: object\n    #   title: unit name\n    #   description: definition of data units\n    #   anyOf:\n    #     - required:\n    #         - label\n    #     - required:\n    #         - symbol\n    #     - required:\n    #         - label\n    #         - symbol\n    #   properties:\n    #     label:\n    #       oneOf:\n    #         - type: object\n    #           additionalProperties:\n    #             type: string\n    #         - type: string\n    #     symbol:\n    #       title: Describe unit symbol\n    #       oneOf:\n    #         - type: object\n    #           description: Information about the symbol used to describe the units\n    #           required:\n    #             - value\n    #             - type\n    #           properties:\n    #             value:\n    #               description: representation of the units symbol\n    #               type: string\n    #             type:\n    #               description: uri to detailed desxcription of the units\n    #               type: string\n    #         - type: string\n    #       example:\n    #         value: hPa\n    #         type: http://www.opengis.net/def/uom/UCUM/\n    #     id:\n    #       type: string\n    #   example:\n    #     label:\n    #       en: Kelvin\n    #     symbol:\n    #       value: K\n    #       type: http://www.opengis.net/def/uom/UCUM/\n",
			"canonicalURL": "/github.com/camptocamp/oapi-poc@30527046b1d52711b831a40a393b90d20657f0c7/-/blob/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/camptocamp/oapi-poc/blob/30527046b1d52711b831a40a393b90d20657f0c7/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: parameters: \"intersects\": at 1:8076: all oneOf schemas must be simple types"
}