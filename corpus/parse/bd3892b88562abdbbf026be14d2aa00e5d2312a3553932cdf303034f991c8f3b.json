{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/PaloAltoNetworks/gaia"
		},
		"file": {
			"name": "processingunit.json",
			"size": 0,
			"path": "openapi3_autogen/processingunit.json",
			"byteSize": 22162,
			"content": "{\n  \"openapi\": \"3.0.3\",\n  \"components\": {\n    \"schemas\": {\n      \"processingunit\": {\n        \"description\": \"A processing unit represents anything that can compute. It can be a Docker\\ncontainer or a simple UNIX process. Processing units are created, updated, and\\ndeleted by\\nthe system as they come and go. You can only modify their tags. Processing units\\nuse network policies to define which other processing units or external\\nnetworks they can communicate with and file access policies to define what file\\npaths they can use.\",\n        \"properties\": {\n          \"ID\": {\n            \"description\": \"Identifier of the object.\",\n            \"readOnly\": true,\n            \"type\": \"string\"\n          },\n          \"annotations\": {\n            \"additionalProperties\": {\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"type\": \"array\"\n            },\n            \"description\": \"Stores additional information about an entity.\",\n            \"type\": \"object\"\n          },\n          \"associatedTags\": {\n            \"description\": \"List of tags attached to an entity.\",\n            \"items\": {\n              \"type\": \"string\"\n            },\n            \"type\": \"array\"\n          },\n          \"clientLocalID\": {\n            \"description\": \"The local PUID set by enforcer. Enforcer may create a local PU if it cannot\\ncommunicate with the Microsegmentation Console. When eventually the\\nMicrosegmentation Console is able to create the PU, the `clientLocalID` will be\\nused to convert a CachedFlowReport containing a local PUID to a real FlowReport.\",\n            \"type\": \"string\"\n          },\n          \"collectInfo\": {\n            \"description\": \"A value of `true` indicates to the enforcer that it needs to collect information\\nfor this processing unit.\",\n            \"type\": \"boolean\"\n          },\n          \"collectedInfo\": {\n            \"additionalProperties\": {\n              \"type\": \"string\"\n            },\n            \"description\": \"Represents the latest information collected by the enforcer for this processing\\nunit.\",\n            \"type\": \"object\"\n          },\n          \"controller\": {\n            \"description\": \"The Microsegmentation Console identifier managing this object. This property is\\nmostly\\nuseful when federating multiple Microsegmentation Consoles.\",\n            \"readOnly\": true,\n            \"type\": \"string\"\n          },\n          \"createTime\": {\n            \"description\": \"Creation date of the object.\",\n            \"format\": \"date-time\",\n            \"readOnly\": true,\n            \"type\": \"string\"\n          },\n          \"datapathType\": {\n            \"default\": \"Aporeto\",\n            \"description\": \"The datapath type that processing units are implementing:\\n- `Aporeto`: The enforcer is managing and handling the datapath.\\n- `EnvoyAuthorizer`: The enforcer is serving Envoy-compatible gRPC APIs\\nthat for example can be used by an Envoy proxy to use the Microsegmentation PKI\\nand implement Microsegmentation network policies. NOTE: The enforcer is not\\nowning the datapath in this case. It is merely providing an authorizer API.\",\n            \"enum\": [\n              \"Aporeto\",\n              \"EnvoyAuthorizer\"\n            ]\n          },\n          \"description\": {\n            \"description\": \"Description of the object.\",\n            \"type\": \"string\"\n          },\n          \"enforcementStatus\": {\n            \"default\": \"Inactive\",\n            \"description\": \"Contains the state of the enforcer for the processing unit. `Inactive`\\n(default): the enforcer is not enforcing any host service. `Active`: the\\nenforcer is enforcing a host service. `Failed`: an error occurred during the\\nenforcement attempt.\",\n            \"enum\": [\n              \"Active\",\n              \"Failed\",\n              \"Inactive\"\n            ]\n          },\n          \"enforcerID\": {\n            \"description\": \"The ID of the enforcer associated with the processing unit.\",\n            \"type\": \"string\"\n          },\n          \"enforcerNamespace\": {\n            \"description\": \"The namespace of the enforcer associated with the processing unit.\",\n            \"type\": \"string\"\n          },\n          \"image\": {\n            \"deprecated\": true,\n            \"description\": \"This field is deprecated and it is there for backward compatibility. Use\\n`images` instead.\",\n            \"type\": \"string\"\n          },\n          \"images\": {\n            \"description\": \"List of images or executable paths used by the processing unit.\",\n            \"items\": {\n              \"type\": \"string\"\n            },\n            \"type\": \"array\"\n          },\n          \"lastCollectionTime\": {\n            \"description\": \"The date and time when the information was collected.\",\n            \"format\": \"date-time\",\n            \"type\": \"string\"\n          },\n          \"lastLocalTimestamp\": {\n            \"description\": \"Time and date of the processing unit set by the enforcer.\",\n            \"format\": \"date-time\",\n            \"type\": \"string\"\n          },\n          \"lastSyncTime\": {\n            \"description\": \"The date and time of the last policy resolution.\",\n            \"format\": \"date-time\",\n            \"type\": \"string\"\n          },\n          \"metadata\": {\n            \"description\": \"Contains tags that can only be set during creation, must all start\\nwith the '@' prefix, and should only be used by external systems.\",\n            \"items\": {\n              \"type\": \"string\"\n            },\n            \"type\": \"array\"\n          },\n          \"name\": {\n            \"description\": \"Name of the entity.\",\n            \"example\": \"the name\",\n            \"type\": \"string\"\n          },\n          \"namespace\": {\n            \"description\": \"Namespace tag attached to an entity.\",\n            \"readOnly\": true,\n            \"type\": \"string\"\n          },\n          \"nativeContextID\": {\n            \"description\": \"The Docker UUID or service PID.\",\n            \"type\": \"string\"\n          },\n          \"networkServices\": {\n            \"description\": \"The list of services that this processing unit has declared that it will be\\nlistening to,\\neither in its activation command or by exposing the ports in a container\\nmanifest.\",\n            \"items\": {\n              \"$ref\": \"./processingunitservice#/components/schemas/processingunitservice\"\n            },\n            \"type\": \"array\"\n          },\n          \"normalizedTags\": {\n            \"description\": \"Contains the list of normalized tags of the entities.\",\n            \"items\": {\n              \"type\": \"string\"\n            },\n            \"readOnly\": true,\n            \"type\": \"array\"\n          },\n          \"operationalStatus\": {\n            \"default\": \"Initialized\",\n            \"description\": \"Operational status of the processing unit: `Initialized` (default), `Paused`,\\n`Running`,\\n`Stopped`, or `Terminated`.\",\n            \"enum\": [\n              \"Initialized\",\n              \"Paused\",\n              \"Running\",\n              \"Stopped\",\n              \"Terminated\"\n            ]\n          },\n          \"previousOperationalStatus\": {\n            \"description\": \"Holds the previous operational status if it has changed.\",\n            \"enum\": [\n              \"Initialized\",\n              \"Paused\",\n              \"Running\",\n              \"Stopped\",\n              \"Terminated\"\n            ],\n            \"readOnly\": true\n          },\n          \"protected\": {\n            \"description\": \"Defines if the object is protected.\",\n            \"type\": \"boolean\"\n          },\n          \"tracing\": {\n            \"$ref\": \"./tracemode#/components/schemas/tracemode\"\n          },\n          \"type\": {\n            \"description\": \"Type of processing unit: `APIGateway`, `Docker`, `Host`, `HostService`,\\n`LinuxService`, `WindowsService`, `RKT`, `User`, or `SSHSession`.\",\n            \"enum\": [\n              \"APIGateway\",\n              \"Docker\",\n              \"Host\",\n              \"HostService\",\n              \"LinuxService\",\n              \"WindowsService\",\n              \"RKT\",\n              \"User\",\n              \"SSHSession\",\n              \"ECS\"\n            ],\n            \"example\": \"Docker\"\n          },\n          \"updateTime\": {\n            \"description\": \"Last update date of the object.\",\n            \"format\": \"date-time\",\n            \"readOnly\": true,\n            \"type\": \"string\"\n          },\n          \"vulnerabilityLevel\": {\n            \"deprecated\": true,\n            \"description\": \"List of vulnerabilities affecting this processing unit.\",\n            \"readOnly\": true,\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"name\"\n        ],\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"info\": {\n    \"contact\": {\n      \"email\": \"dev@aporeto.com\",\n      \"name\": \"Aporeto Inc.\",\n      \"url\": \"go.aporeto.io/api\"\n    },\n    \"license\": {\n      \"name\": \"TODO\"\n    },\n    \"termsOfService\": \"https://localhost/TODO\",\n    \"title\": \"processingunit\",\n    \"version\": \"1.0\"\n  },\n  \"paths\": {\n    \"/processingunits\": {\n      \"get\": {\n        \"description\": \"Retrieves the list of processing units.\",\n        \"operationId\": \"get-all-processingunits\",\n        \"parameters\": [\n          {\n            \"description\": \"Also retrieve the objects that have been archived.\",\n            \"in\": \"query\",\n            \"name\": \"archived\",\n            \"schema\": {\n              \"type\": \"boolean\"\n            }\n          },\n          {\n            \"description\": \"Filtering query. Consequent `q` parameters will form an or.\",\n            \"example\": \"associatedTags contains ['$name=hello'] or type == 'Docker'\",\n            \"in\": \"query\",\n            \"name\": \"q\",\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/processingunit\"\n                  },\n                  \"type\": \"array\"\n                }\n              }\n            },\n            \"description\": \"n/a\"\n          }\n        },\n        \"tags\": [\n          \"core/processingunit\",\n          \"squall\"\n        ]\n      },\n      \"post\": {\n        \"description\": \"Creates a new processing unit.\",\n        \"operationId\": \"create-a-new-processingunit\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/processingunit\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/processingunit\"\n                }\n              }\n            },\n            \"description\": \"n/a\"\n          }\n        },\n        \"tags\": [\n          \"core/processingunit\",\n          \"squall\"\n        ]\n      }\n    },\n    \"/processingunits/{id}\": {\n      \"delete\": {\n        \"description\": \"Deletes the processing unit with the given ID.\",\n        \"operationId\": \"delete-processingunit-by-ID\",\n        \"parameters\": [\n          {\n            \"description\": \"Filtering query. Consequent `q` parameters will form an or.\",\n            \"example\": \"associatedTags contains ['$name=hello'] or type == 'Docker'\",\n            \"in\": \"query\",\n            \"name\": \"q\",\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/processingunit\"\n                }\n              }\n            },\n            \"description\": \"n/a\"\n          }\n        },\n        \"tags\": [\n          \"core/processingunit\",\n          \"squall\"\n        ]\n      },\n      \"get\": {\n        \"description\": \"Retrieves the processing unit with the given ID.\",\n        \"operationId\": \"get-processingunit-by-ID\",\n        \"parameters\": [\n          {\n            \"description\": \"Also retrieve the objects that have been archived.\",\n            \"in\": \"query\",\n            \"name\": \"archived\",\n            \"schema\": {\n              \"type\": \"boolean\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/processingunit\"\n                }\n              }\n            },\n            \"description\": \"n/a\"\n          }\n        },\n        \"tags\": [\n          \"core/processingunit\",\n          \"squall\"\n        ]\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        }\n      ],\n      \"put\": {\n        \"description\": \"Updates the processing unit with the given ID.\",\n        \"operationId\": \"update-processingunit-by-ID\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/processingunit\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/processingunit\"\n                }\n              }\n            },\n            \"description\": \"n/a\"\n          }\n        },\n        \"tags\": [\n          \"core/processingunit\",\n          \"squall\"\n        ]\n      }\n    },\n    \"/processingunits/{id}/pingprobes\": {\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        }\n      ],\n      \"post\": {\n        \"description\": \"Create a ping probe.\",\n        \"operationId\": \"create-a-new-pingprobe-for-a-given-processingunit\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"./pingprobe#/components/schemas/pingprobe\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"./pingprobe#/components/schemas/pingprobe\"\n                }\n              }\n            },\n            \"description\": \"n/a\"\n          }\n        },\n        \"tags\": [\n          \"core/enforcer\",\n          \"guy\"\n        ]\n      }\n    },\n    \"/processingunits/{id}/poke\": {\n      \"get\": {\n        \"description\": \"Sends a poke empty object. This will send a snapshot of the processing unit to\\nthe time series database.\",\n        \"operationId\": \"get-all-poke-for-a-given-processingunit\",\n        \"parameters\": [\n          {\n            \"description\": \"If set, changes the enforcement status of the processing unit alongside with the poke.\",\n            \"in\": \"query\",\n            \"name\": \"enforcementStatus\",\n            \"schema\": {\n              \"enum\": [\n                \"Failed\",\n                \"Inactive\",\n                \"Active\"\n              ]\n            }\n          },\n          {\n            \"description\": \"If set, it will trigger a full poke (slower).\",\n            \"in\": \"query\",\n            \"name\": \"forceFullPoke\",\n            \"schema\": {\n              \"type\": \"boolean\"\n            }\n          },\n          {\n            \"description\": \"Can be sent to trigger a `ProcessingUnitRefresh` event that will be handled by the enforcer. If this is set, all other additional parameters will be ignored.\",\n            \"in\": \"query\",\n            \"name\": \"notify\",\n            \"schema\": {\n              \"type\": \"boolean\"\n            }\n          },\n          {\n            \"description\": \"If set, changes the status of the processing unit alongside with the poke.\",\n            \"example\": \"Running\",\n            \"in\": \"query\",\n            \"name\": \"status\",\n            \"schema\": {\n              \"enum\": [\n                \"Initialized\",\n                \"Paused\",\n                \"Running\",\n                \"Stopped\"\n              ]\n            }\n          },\n          {\n            \"description\": \"time of report. If not set, local server time will be used.\",\n            \"in\": \"query\",\n            \"name\": \"ts\",\n            \"schema\": {\n              \"format\": \"date-time\",\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"description\": \"Can be set to help backend target the correct shard where the processing unit is stored.\",\n            \"in\": \"query\",\n            \"name\": \"zhash\",\n            \"schema\": {\n              \"type\": \"integer\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"items\": {\n                    \"$ref\": \"./poke#/components/schemas/poke\"\n                  },\n                  \"type\": \"array\"\n                }\n              }\n            },\n            \"description\": \"n/a\"\n          }\n        },\n        \"tags\": [\n          \"core\",\n          \"squall\"\n        ]\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        }\n      ]\n    },\n    \"/processingunits/{id}/processingunitrefreshes\": {\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        }\n      ],\n      \"post\": {\n        \"description\": \"Sends a Processing Unit Refresh command.\",\n        \"operationId\": \"create-a-new-processingunitrefresh-for-a-given-processingunit\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"./processingunitrefresh#/components/schemas/processingunitrefresh\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"./processingunitrefresh#/components/schemas/processingunitrefresh\"\n                }\n              }\n            },\n            \"description\": \"n/a\"\n          }\n        },\n        \"tags\": [\n          \"core/policy\",\n          \"gaga\"\n        ]\n      }\n    },\n    \"/processingunits/{id}/renderedpolicies\": {\n      \"get\": {\n        \"description\": \"Retrieves the policies for the processing unit.\",\n        \"operationId\": \"get-all-renderedpolicies-for-a-given-processingunit\",\n        \"parameters\": [\n          {\n            \"description\": \"Select the network policy renderer to use.\",\n            \"in\": \"query\",\n            \"name\": \"renderer\",\n            \"schema\": {\n              \"enum\": [\n                \"v1\",\n                \"v2\"\n              ]\n            }\n          },\n          {\n            \"description\": \"If set to true, the entries field of all network rules will be stripped.\",\n            \"in\": \"query\",\n            \"name\": \"stripNetworkEntries\",\n            \"schema\": {\n              \"type\": \"boolean\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"items\": {\n                    \"$ref\": \"./renderedpolicy#/components/schemas/renderedpolicy\"\n                  },\n                  \"type\": \"array\"\n                }\n              }\n            },\n            \"description\": \"n/a\"\n          }\n        },\n        \"tags\": [\n          \"core/policy\",\n          \"squall\"\n        ]\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        }\n      ]\n    },\n    \"/processingunits/{id}/services\": {\n      \"get\": {\n        \"description\": \"Retrieves the services used by a processing unit.\",\n        \"operationId\": \"get-all-services-for-a-given-processingunit\",\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"items\": {\n                    \"$ref\": \"./service#/components/schemas/service\"\n                  },\n                  \"type\": \"array\"\n                }\n              }\n            },\n            \"description\": \"n/a\"\n          }\n        },\n        \"tags\": [\n          \"policy/services\",\n          \"squall\"\n        ]\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        }\n      ]\n    },\n    \"/processingunits/{id}/vulnerabilities\": {\n      \"get\": {\n        \"description\": \"Retrieves the vulnerabilities affecting the processing unit.\",\n        \"operationId\": \"get-all-vulnerabilities-for-a-given-processingunit\",\n        \"parameters\": [\n          {\n            \"description\": \"Also retrieve the objects that propagate down.\",\n            \"in\": \"query\",\n            \"name\": \"propagated\",\n            \"schema\": {\n              \"type\": \"boolean\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"items\": {\n                    \"$ref\": \"./vulnerability#/components/schemas/vulnerability\"\n                  },\n                  \"type\": \"array\"\n                }\n              }\n            },\n            \"description\": \"n/a\"\n          }\n        },\n        \"tags\": [\n          \"core/processingunit\",\n          \"squall\"\n        ]\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        }\n      ]\n    }\n  },\n  \"tags\": [\n    {\n      \"description\": \"This tag is for group 'core/processingunit'\",\n      \"name\": \"core/processingunit\"\n    },\n    {\n      \"description\": \"This tag is for package 'squall'\",\n      \"name\": \"squall\"\n    }\n  ]\n}\n",
			"canonicalURL": "/github.com/PaloAltoNetworks/gaia@99a3e24f867c657c6c790ff5eb7ff5dc377dbad4/-/blob/openapi3_autogen/processingunit.json",
			"externalURLs": [
				{
					"url": "https://github.com/PaloAltoNetworks/gaia/blob/99a3e24f867c657c6c790ff5eb7ff5dc377dbad4/openapi3_autogen/processingunit.json",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"processingunit\": parse schema: property \"networkServices\": parse schema: item: at 135:22: parse schema: resolve \"./processingunitservice#/components/schemas/processingunitservice\": external \"./processingunitservice\": get: file: local file reference is not allowed"
}