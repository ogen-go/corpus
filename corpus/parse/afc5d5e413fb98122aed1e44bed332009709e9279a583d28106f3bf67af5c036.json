{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/uc-cdis/metadata-service"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "docs/openapi.yaml",
			"byteSize": 22935,
			"content": "components:\n  schemas:\n    AliasObjInput:\n      description: \"Alias object\\n\\naliases (list, optional): unique names to allow\\\n        \\ using in place of whatever GUID\\n    specified\"\n      properties:\n        aliases:\n          items: {}\n          title: Aliases\n          type: array\n      title: AliasObjInput\n      type: object\n    CreateObjForIdInput:\n      description: \"Create object.\\n\\nfile_name (str): Name for the file being uploaded\\n\\\n        aliases (list, optional): unique name to allow using in place of whatever\\\n        \\ GUID gets\\n    created for this upload\\nmetadata (dict, optional): any additional\\\n        \\ metadata to attach to the upload\"\n      properties:\n        aliases:\n          items: {}\n          title: Aliases\n          type: array\n        file_name:\n          title: File Name\n          type: string\n        metadata:\n          title: Metadata\n          type: object\n      required:\n      - file_name\n      title: CreateObjForIdInput\n      type: object\n    CreateObjInput:\n      description: \"Create object.\\n\\nfile_name (str): Name for the file being uploaded\\n\\\n        authz (dict): authorization block with requirements for what's being uploaded\\n\\\n        aliases (list, optional): unique name to allow using in place of whatever\\\n        \\ GUID gets\\n    created for this upload\\nmetadata (dict, optional): any additional\\\n        \\ metadata to attach to the upload\"\n      properties:\n        aliases:\n          items: {}\n          title: Aliases\n          type: array\n        authz:\n          title: Authz\n          type: object\n        file_name:\n          title: File Name\n          type: string\n        metadata:\n          title: Metadata\n          type: object\n      required:\n      - file_name\n      - authz\n      title: CreateObjInput\n      type: object\n    HTTPValidationError:\n      properties:\n        detail:\n          items:\n            $ref: '#/components/schemas/ValidationError'\n          title: Detail\n          type: array\n      title: HTTPValidationError\n      type: object\n    ValidationError:\n      properties:\n        loc:\n          items:\n            type: string\n          title: Location\n          type: array\n        msg:\n          title: Message\n          type: string\n        type:\n          title: Error Type\n          type: string\n      required:\n      - loc\n      - msg\n      - type\n      title: ValidationError\n      type: object\n  securitySchemes:\n    HTTPBasic:\n      scheme: basic\n      type: http\n    HTTPBearer:\n      scheme: bearer\n      type: http\ninfo:\n  title: Framework Services Object Management Service\n  version: 1.9.0\nopenapi: 3.0.2\npaths:\n  /_status:\n    get:\n      description: \"Returns the status of the MDS:\\n * error: if there was no error\\\n        \\ this will be \\\"none\\\"\\n * last_update: timestamp of the last data pull from\\\n        \\ the commons\\n * count: number of entries\"\n      operationId: get_status__status_get\n      responses:\n        '200':\n          content:\n            application/json:\n              schema: {}\n          description: Successful Response\n      summary: Get Status\n  /metadata:\n    get:\n      description: \"Search the metadata.\\n\\nWithout filters, this will return all\\\n        \\ data. Add filters as query strings like this:\\n\\n    GET /metadata?a=1\u0026b=2\\n\\\n        \\nThis will match all records that have metadata containing all of:\\n\\n  \\\n        \\  {\\\"a\\\": 1, \\\"b\\\": 2}\\n\\nThe values are always treated as strings for filtering.\\\n        \\ Nesting is supported:\\n\\n    GET /metadata?a.b.c=3\\n\\nMatching records containing:\\n\\\n        \\n    {\\\"a\\\": {\\\"b\\\": {\\\"c\\\": 3}}}\\n\\nProviding the same key with more than\\\n        \\ one value filters records whose value of the\\ngiven key matches any of the\\\n        \\ given values. But values of different keys must all\\nmatch. For example:\\n\\\n        \\n    GET /metadata?a.b.c=3\u0026a.b.c=33\u0026a.b.d=4\\n\\nMatches these:\\n\\n    {\\\"\\\n        a\\\": {\\\"b\\\": {\\\"c\\\": 3, \\\"d\\\": 4}}}\\n    {\\\"a\\\": {\\\"b\\\": {\\\"c\\\": 33, \\\"d\\\"\\\n        : 4}}}\\n    {\\\"a\\\": {\\\"b\\\": {\\\"c\\\": \\\"3\\\", \\\"d\\\": 4, \\\"e\\\": 5}}}\\n\\nBut won't\\\n        \\ match these:\\n\\n    {\\\"a\\\": {\\\"b\\\": {\\\"c\\\": 3}}}\\n    {\\\"a\\\": {\\\"b\\\": {\\\"\\\n        c\\\": 3, \\\"d\\\": 5}}}\\n    {\\\"a\\\": {\\\"b\\\": {\\\"d\\\": 5}}}\\n    {\\\"a\\\": {\\\"b\\\"\\\n        : {\\\"c\\\": \\\"333\\\", \\\"d\\\": 4}}}\\n\\nTo query all rows with a given key, regardless\\\n        \\ of value, use the \\\"*\\\" wildcard. For example:\\n\\n    GET /metadata?a=*\\\n        \\ or GET /metadata?a.b=*\\n\\nNote that only a single asterisk is supported,\\\n        \\ not true wildcarding. For\\nexample: `?a=1.*` will only match the exact string\\\n        \\ `\\\"1.*\\\"`.\\n\\nTo query rows with a value of `\\\"*\\\"` exactly, escape the\\\n        \\ asterisk. For example: `?a=\\\\*`.\"\n      operationId: search_metadata_metadata_get\n      parameters:\n      - description: Switch to returning a list of GUIDs (false), or GUIDs mapping\n          to their metadata (true).\n        in: query\n        name: data\n        required: false\n        schema:\n          default: false\n          description: Switch to returning a list of GUIDs (false), or GUIDs mapping\n            to their metadata (true).\n          title: Data\n          type: boolean\n      - description: 'Maximum number of records returned. (max: 2000)'\n        in: query\n        name: limit\n        required: false\n        schema:\n          default: 10\n          description: 'Maximum number of records returned. (max: 2000)'\n          title: Limit\n          type: integer\n      - description: Return results at this given offset.\n        in: query\n        name: offset\n        required: false\n        schema:\n          default: 0\n          description: Return results at this given offset.\n          title: Offset\n          type: integer\n      responses:\n        '200':\n          content:\n            application/json:\n              schema: {}\n          description: Successful Response\n        '422':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n          description: Validation Error\n      summary: Search Metadata\n      tags:\n      - Query\n    post:\n      description: Create metadata in batch.\n      operationId: batch_create_metadata_metadata_post\n      parameters:\n      - in: query\n        name: overwrite\n        required: false\n        schema:\n          default: true\n          title: Overwrite\n          type: boolean\n      requestBody:\n        content:\n          application/json:\n            schema:\n              items: {}\n              title: Data List\n              type: array\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema: {}\n          description: Successful Response\n        '422':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n          description: Validation Error\n      security:\n      - HTTPBasic: []\n      - HTTPBearer: []\n      summary: Batch Create Metadata\n      tags:\n      - Maintain\n  /metadata/{guid}:\n    delete:\n      description: Delete the metadata of the GUID.\n      operationId: delete_metadata_metadata__guid__delete\n      parameters:\n      - in: path\n        name: guid\n        required: true\n        schema:\n          title: Guid\n      responses:\n        '200':\n          content:\n            application/json:\n              schema: {}\n          description: Successful Response\n        '422':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n          description: Validation Error\n      security:\n      - HTTPBasic: []\n      - HTTPBearer: []\n      summary: Delete Metadata\n      tags:\n      - Maintain\n    get:\n      description: Get the metadata of the GUID.\n      operationId: get_metadata_metadata__guid__get\n      parameters:\n      - in: path\n        name: guid\n        required: true\n        schema:\n          title: Guid\n      responses:\n        '200':\n          content:\n            application/json:\n              schema: {}\n          description: Successful Response\n        '422':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n          description: Validation Error\n      summary: Get Metadata\n      tags:\n      - Query\n    post:\n      description: Create metadata for the GUID.\n      operationId: create_metadata_metadata__guid__post\n      parameters:\n      - in: path\n        name: guid\n        required: true\n        schema:\n          title: Guid\n      - in: query\n        name: overwrite\n        required: false\n        schema:\n          default: false\n          title: Overwrite\n          type: boolean\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: Data\n              type: object\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema: {}\n          description: Successful Response\n        '422':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n          description: Validation Error\n      security:\n      - HTTPBasic: []\n      - HTTPBearer: []\n      summary: Create Metadata\n      tags:\n      - Maintain\n    put:\n      description: 'Update the metadata of the GUID.\n\n\n        If `merge` is True, then any top-level keys that are not in the new data will\n        be\n\n        kept, and those that also exist in the new data will be replaced completely.\n        This\n\n        is also known as the shallow merge. The metadata service currently doesn''t\n        support\n\n        deep merge.'\n      operationId: update_metadata_metadata__guid__put\n      parameters:\n      - in: path\n        name: guid\n        required: true\n        schema:\n          title: Guid\n      - in: query\n        name: merge\n        required: false\n        schema:\n          default: false\n          title: Merge\n          type: boolean\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: Data\n              type: object\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema: {}\n          description: Successful Response\n        '422':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n          description: Validation Error\n      security:\n      - HTTPBasic: []\n      - HTTPBearer: []\n      summary: Update Metadata\n      tags:\n      - Maintain\n  /metadata/{guid}/aliases:\n    delete:\n      description: Delete all metadata_aliases of the GUID.\n      operationId: delete_all_metadata_aliases_metadata__guid__aliases_delete\n      parameters:\n      - in: path\n        name: guid\n        required: true\n        schema:\n          title: Guid\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema: {}\n          description: Successful Response\n        '422':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n          description: Validation Error\n      security:\n      - HTTPBasic: []\n      - HTTPBearer: []\n      summary: Delete All Metadata Aliases\n      tags:\n      - Aliases\n    get:\n      description: Get the aliases for the provided GUID\n      operationId: get_metadata_aliases_metadata__guid__aliases_get\n      parameters:\n      - in: path\n        name: guid\n        required: true\n        schema:\n          title: Guid\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema: {}\n          description: Successful Response\n        '422':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n          description: Validation Error\n      summary: Get Metadata Aliases\n      tags:\n      - Query\n    post:\n      description: Create metadata aliases for the GUID.\n      operationId: create_metadata_aliases_metadata__guid__aliases_post\n      parameters:\n      - in: path\n        name: guid\n        required: true\n        schema:\n          title: Guid\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AliasObjInput'\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema: {}\n          description: Successful Response\n        '422':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n          description: Validation Error\n      security:\n      - HTTPBasic: []\n      - HTTPBearer: []\n      summary: Create Metadata Aliases\n      tags:\n      - Aliases\n    put:\n      description: 'Update the metadata aliases of the GUID.\n\n\n        If `merge` is True, then any aliases that are not in the new data will be\n\n        kept.'\n      operationId: update_metadata_alias_metadata__guid__aliases_put\n      parameters:\n      - in: path\n        name: guid\n        required: true\n        schema:\n          title: Guid\n          type: string\n      - in: query\n        name: merge\n        required: false\n        schema:\n          default: false\n          title: Merge\n          type: boolean\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AliasObjInput'\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema: {}\n          description: Successful Response\n        '422':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n          description: Validation Error\n      security:\n      - HTTPBasic: []\n      - HTTPBearer: []\n      summary: Update Metadata Alias\n      tags:\n      - Aliases\n  /metadata/{guid}/aliases/{alias}:\n    delete:\n      description: Delete the specified metadata_alias of the GUID.\n      operationId: delete_metadata_alias_metadata__guid__aliases__alias__delete\n      parameters:\n      - in: path\n        name: guid\n        required: true\n        schema:\n          title: Guid\n          type: string\n      - in: path\n        name: alias\n        required: true\n        schema:\n          title: Alias\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema: {}\n          description: Successful Response\n        '422':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n          description: Validation Error\n      security:\n      - HTTPBasic: []\n      - HTTPBearer: []\n      summary: Delete Metadata Alias\n      tags:\n      - Aliases\n  /metadata_index:\n    get:\n      description: List all the metadata key paths indexed in the database.\n      operationId: list_metadata_indexes_metadata_index_get\n      responses:\n        '200':\n          content:\n            application/json:\n              schema: {}\n          description: Successful Response\n      security:\n      - HTTPBasic: []\n      - HTTPBearer: []\n      summary: List Metadata Indexes\n      tags:\n      - Index\n  /metadata_index/{path}:\n    delete:\n      description: Drop the database index on the given metadata key path.\n      operationId: drop_metadata_indexes_metadata_index__path__delete\n      parameters:\n      - in: path\n        name: path\n        required: true\n        schema:\n          title: Path\n      responses:\n        '204':\n          description: Successful Response\n        '422':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n          description: Validation Error\n      security:\n      - HTTPBasic: []\n      - HTTPBearer: []\n      summary: Drop Metadata Indexes\n      tags:\n      - Index\n    post:\n      description: Create a database index on the given metadata key path.\n      operationId: create_metadata_indexes_metadata_index__path__post\n      parameters:\n      - in: path\n        name: path\n        required: true\n        schema:\n          title: Path\n      responses:\n        '201':\n          content:\n            application/json:\n              schema: {}\n          description: Successful Response\n        '422':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n          description: Validation Error\n      security:\n      - HTTPBasic: []\n      - HTTPBearer: []\n      summary: Create Metadata Indexes\n      tags:\n      - Index\n  /objects/upload:\n    post:\n      description: Create object placeholder and attach metadata, return Upload url\n        to the user.\n      operationId: create_object_objects_upload_post\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateObjInput'\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema: {}\n          description: Successful Response\n        '422':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n          description: Validation Error\n      security:\n      - HTTPBearer: []\n      summary: Create Object\n      tags:\n      - Object\n  /objects/{guid}:\n    delete:\n      description: 'Delete the metadata for the specified object and also delete the\n        record from indexd.\n\n        [Optional] Remove the object from existing bucket location(s) by proxying\n        to\n\n        fence DELETE /data/file_id by using an additional query parameter `delete_file_locations`.\n\n        Uses the response status code from fence/indexd to determine whether user\n        has\n\n        permission to delete metadata.'\n      operationId: delete_object_objects__guid__delete\n      parameters:\n      - in: path\n        name: guid\n        required: true\n        schema:\n          title: Guid\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema: {}\n          description: Successful Response\n        '422':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n          description: Validation Error\n      security:\n      - HTTPBearer: []\n      summary: Delete Object\n      tags:\n      - Object\n    get:\n      description: 'Get the metadata associated with the provided key. If the key\n        is an\n\n        indexd GUID or alias, also returns the indexd record.'\n      operationId: get_object_objects__guid__get\n      parameters:\n      - in: path\n        name: guid\n        required: true\n        schema:\n          title: Guid\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema: {}\n          description: Successful Response\n        '422':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n          description: Validation Error\n      summary: Get Object\n      tags:\n      - Object\n    post:\n      description: 'Create object placeholder and attach metadata, return Upload url\n        to the\n\n        user. A new GUID (new version of the provided GUID) will be created for\n\n        this object. The new record will have the same authz as the original one.'\n      operationId: create_object_for_id_objects__guid__post\n      parameters:\n      - in: path\n        name: guid\n        required: true\n        schema:\n          title: Guid\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateObjForIdInput'\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema: {}\n          description: Successful Response\n        '422':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n          description: Validation Error\n      security:\n      - HTTPBearer: []\n      summary: Create Object For Id\n      tags:\n      - Object\n  /objects/{guid}/download:\n    get:\n      description: 'Send a GET request to the data access service to generate a signed\n        download\n\n        url for the given GUID or alias. Returns the generated signed download url\n\n        to the user.'\n      operationId: get_object_signed_download_url_objects__guid__download_get\n      parameters:\n      - in: path\n        name: guid\n        required: true\n        schema:\n          title: Guid\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema: {}\n          description: Successful Response\n        '422':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n          description: Validation Error\n      summary: Get Object Signed Download Url\n      tags:\n      - Object\n  /objects/{guid}/latest:\n    get:\n      description: 'Attempt to fetch the latest version of the provided guid/key from\n        indexd.\n\n        If the provided guid/key is found in indexd, return the indexd record and\n\n        metadata object associated with the latest guid fetched from indexd. If the\n\n        provided guid/key is not found in indexd, return the metadata object\n\n        associated with the provided guid/key.'\n      operationId: get_object_latest_objects__guid__latest_get\n      parameters:\n      - in: path\n        name: guid\n        required: true\n        schema:\n          title: Guid\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema: {}\n          description: Successful Response\n        '422':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n          description: Validation Error\n      summary: Get Object Latest\n      tags:\n      - Object\n  /version:\n    get:\n      description: ''\n      operationId: get_version_version_get\n      responses:\n        '200':\n          content:\n            application/json:\n              schema: {}\n          description: Successful Response\n      summary: Get Version\n",
			"canonicalURL": "/github.com/uc-cdis/metadata-service@d9350db4b76ca6b4ae2dc6f33ec4c2e5c2951c27/-/blob/docs/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/uc-cdis/metadata-service/blob/d9350db4b76ca6b4ae2dc6f33ec4c2e5c2951c27/docs/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/metadata/{guid}\": get: operation \"get_metadata_metadata__guid__get\": parameters: parse parameter \"guid\": at 1:6431: invalid schema:style:explode combination: (\"\":\"simple\":false)"
}