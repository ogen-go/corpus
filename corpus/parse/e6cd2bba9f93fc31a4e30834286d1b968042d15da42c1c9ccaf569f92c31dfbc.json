{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/JSJitsu/ai-battle-website"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "public/openapi.yaml",
			"byteSize": 10040,
			"content": "openapi: \"3.0.0\"\ninfo:\n  title: Javascript Fight Club\n  version: 1.0.0\npaths:\n  /api/game/:\n    get:\n      summary: Retrieves the lastst game\n      responses:\n        '200':\n          $ref: '#/components/responses/GameResponse'\n\n  /api/game/{id}:\n    get:\n      summary: Retrieves a game with the given id.\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          $ref: '#/components/schemas/GameId'\n      responses:\n        '200':\n          $ref: '#/components/responses/GameResponse'\n\n  /api/games/latest:\n    get:\n      summary: Retruns the `latest` game\n      responses:\n        '200':\n          $ref: '#/components/responses/LatestGameResponse'\n\n  /api/leaderboard/{timePeriod}/{stat}:\n    get:\n      parameters:\n      - in: path\n        name: timePeriod\n        required: true\n        schema:\n          type: string\n          default: lifetime\n      - $ref: '#/components/parameters/Stat'\n\n      responses:\n        '200':\n          $ref: '#/components/responses/LeaderboardResponses'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n\n  /api/users/{githubLogin}/games:\n    get:\n      description: Fetch the games for the github user\n      parameters:\n      - $ref: '#/components/parameters/GitHubLogin'\n      responses:\n        '200':\n          $ref: '#/components/responses/GameResponse'\n\n  /api/users/{githubLogin}/stats/{stat}:\n    get:\n      description: get the Stat for a github user name\n      parameters:\n      - $ref: '#/components/parameters/GitHubLogin'\n      - $ref: '#/components/parameters/Stat'\n      responses:\n        '200':\n          $ref: '#/components/responses/GameResponse'\n\ncomponents:\n  parameters:\n    GitHubLogin:\n      in: path\n      name: githubLogin\n      required: true\n    Stat:\n      in: path\n      name: stat\n      required: true\n      schema:\n        $ref: '#/components/schemas/Stats'\n  \n  responses:\n    VersionResponse:\n      description: Version response object\n      headers:\n        X-Request-Id:\n          $ref: '#/components/headers/X-Request-Id'\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Version\"\n    LatestGameResponse:\n      description: Latest Game response object\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/LatestGame\"\n    GameResponse:\n      description: Game Response object\n      content:\n        application/json:\n          schema:\n            oneOf:\n              - $ref: \"#/components/schemas/Game\"\n              - type: object\n                properties:\n                  noData:\n                    type: boolean\n                    default: true\n\n    LeaderboardResponses:\n      description: Variations for leaderboard responses\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Leaderboards\"\n\n    400BadRequestResponse:\n      description: 400 Response\n      content:\n        application/json:\n          schema:\n            type: string\n\n    500InternalServerErrorResponse:\n      description: 500 Response\n      content:\n        application/json:\n          schema:\n            type: string\n\n  headers:\n    X-Request-Id:\n      required: true\n      description: unique ID for the request\n      schema:\n        $ref: '#/components/schemas/XRequestId'\n\n  schemas:\n    GameId:\n      oneOf:\n        - type: number\n        - type: string\n          pattern: \\d\n\n    Leaderboards:\n      description: Pick one of the possible leaderboard types to return\n      type: array\n      items:\n        $ref: \"#/components/schemas/LeaderboardItem\"\n\n    LeaderboardItem:\n      type: object\n      properties:\n        id:\n          type: number\n        github_login:\n          type: string\n        kills:\n          type: string\n          example: '5'\n        deaths:\n          type: string\n          example: '0'\n        damage_given:\n          type: string # why not a number?\n          example: '80'\n        damage_taken:\n          type: string # again, and for these all, why not a number?\n          example: '0'\n        mines_taken:\n          type: 'string'\n        diamonds_earned:\n          type: string\n        health_given:\n          type: string\n        health_recovered:\n          type: string\n        graves_taken:\n          type: string\n        games_won:\n          type: string\n        games_lost:\n          type: string\n\n    LatestGame:\n      type: array\n      items:\n        type: object\n        properties:\n          id:\n            $ref: \"#/components/schemas/GameId\"\n          players:\n            type: array\n            items:\n              $ref: \"#/components/schemas/Name\"\n\n    Game:\n      type: object\n      properties:\n        events:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Event\"\n        heros:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Hero\"\n        id:\n          $ref: \"#/components/schemas/GameId\"\n        initial_map:\n          description: This is an array of arrays, to define the 13x13 grid of the game. Each cell is a MapObject.\n          type: array\n          items:\n            type: array\n            minItems: 13\n            maxItems: 13\n            items:\n              $ref: \"#/components/schemas/MapObjectRow\"\n        latest:\n          type: boolean\n          description: Is the latest game? #todo - clarify what this should be for the description\n        played_at:\n            type: string\n            format: datetime\n        players:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Name\"\n        total_turns:\n          type: number\n          minimum: 0\n          nullable: false\n    Hero:\n      type: object\n      description: The Hero's in a game\n      required:\n        - id\n        - name\n        - team\n      properties:\n        id:\n          type: number\n          description: ID of the Hero\n          minimum: 1\n          nullable: false\n        name:\n          $ref: \"#/components/schemas/Name\"\n        team:\n          type: number\n          enum:\n            - 0\n            - 1\n\n    Name:\n      type: string\n      description: Name of the Player or Hero\n      nullable: false\n      minLength: 1\n\n    Event:\n      description: An event in the game\n      type: object\n      required:\n        - turn\n        - actor\n        - action\n      properties:\n        turn:\n          type: number\n        actor:\n          type: number\n        action:\n          $ref: \"#/components/schemas/Action\"\n\n    Action:\n      description: An action in an event\n      type: string\n      enum:\n        - North\n        - East\n        - South\n        - West\n        - Stay\n\n    MapObjectRow:\n      description: Row array of Map Objects\n      type: array\n      minItems: 13\n      maxItems: 13\n      items:\n        $ref: \"#/components/schemas/MapObject\"\n\n    MapObject:\n      type: object\n      oneOf:\n        - $ref: \"#/components/schemas/SimpleMapObject\"\n        - $ref: \"#/components/schemas/HeroMapObject\"\n\n    SimpleMapObject:\n      type: object\n      required:\n        - type\n        - subType\n        - distanceFromLeft\n        - distanceFromTop\n      properties:\n        id:\n          type: number\n          nullable: false\n        type:\n          $ref: \"#/components/schemas/Type\"\n        subType:\n          $ref: \"#/components/schemas/SubType\"\n        distanceFromLeft:\n          $ref: \"#/components/schemas/DistanceFromLeft\"\n        distanceFromRight:\n          $ref: \"#/components/schemas/DistanceFromTop\"\n\n    HeroMapObject:\n      type: object\n      properties:\n        id:\n          type: number\n        team:\n          type: number\n        type:\n          $ref: \"#/components/schemas/Type\"\n        subType:\n          $ref: \"#/components/schemas/SubType\"\n        name:\n          $ref: \"#/components/schemas/Name\"\n        damageDone:\n          type: number\n          minimum: 0\n          nullable: false\n        dead:\n          type: boolean\n          default: false\n        diamondsEarned:\n          type: number\n          minimum: 0\n        distanceFromLef:\n          $ref: \"#/components/schemas/DistanceFromLeft\"\n        distanceFromTop:\n          $ref: \"#/components/schemas/DistanceFromTop\"\n        gravesRobbed:\n          type: number\n        health:\n          type: number\n        healthGiven:\n          type: number\n        healthRecovered:\n          type: number\n        heroesKilled:\n          type: array\n          items:\n            type: number\n            description: Id of the hero killed\n        lastActiveTurn:\n          type: number\n        mineCount:\n          type: number\n        minesCaptured:\n          type: number\n        minesOwned:\n          type: object # How do you define { 1: 1, 3, 3 } in openapi? #todo: work that out\n        won:\n          type: boolean\n          default: false\n\n    DistanceFromLeft:\n      type: number\n      description: How far the object is from the left\n      minimum: 0\n    DistanceFromTop:\n      type: number\n      description: How far the object is from the top\n      minimum: 0\n\n    Type:\n      type: string\n      enum:\n        - Unoccupied\n        - SpawnPoint\n        - Impassable\n        - Hero\n        - HealthWell\n        - DiamondMine\n    SubType:\n      type: string\n      enum:\n        - Unoccupied\n        - SpawnPoint-0\n        - SpawnPoint-1 // #todo: check this is right\n        - Tree\n        - BlackKnight\n        - Adventurer\n        - HealthWell\n        - RedFainted\n        - BlueFainted\n        - Fainted\n        - DiamondMine\n\n    Stats:\n      type: string\n      enum:\n      - games_won\n      - kills\n      - graves_taken\n      - diamonds_earned\n      - health_given\n    Version:\n      type: object\n      required:\n      - id\n      - name\n      properties:\n        version:\n          type: string\n          example: 1.23.45\n          pattern: \\d\\.\\d\\.\\d\n\n    XRequestId:\n      description: unique ID for the request\n      type: string\n      format: uuid"
		}
	},
	"Error": "parse: parse spec: parse components: parameters: \"GitHubLogin\": parameter MUST contain either a schema property, or a content property"
}