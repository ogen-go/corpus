{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/camaraproject/QualityOnDemand"
		},
		"file": {
			"name": "qod-api.yaml",
			"size": 0,
			"path": "code/API_definitions/qod-api.yaml",
			"byteSize": 15037,
			"content": "openapi: 3.0.3\ninfo:\n  title: QoD for enhanced communication\n  description: Service Enabling Network Function API for QoS control\n  termsOfService: http://swagger.io/terms/\n  contact:\n    email: project-email@sample.com\n  license:\n    name: Apache 2.0\n    url: https://www.apache.org/licenses/LICENSE-2.0.html\n  version: 0.8.0\nexternalDocs:\n  description: Product documentation at Camara\n  url: https://github.com/camaraproject/\nsecurity:\n  - oAuth2ClientCredentials: []\nservers:\n  - url: \"{apiRoot}/{basePath}\"\n    variables:\n      apiRoot:\n        default: http://localhost:9091\n        description: API root\n      basePath:\n        default: qod/v0\n        description: Base path for the QoD API\npaths:\n  /sessions:\n    post:\n      tags:\n        - QoS sessions\n      summary: Creates a new session\n      description: Creates a new QoS session on demand\n      operationId: createSession\n      requestBody:\n        description: Creates a new session\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CreateSession\"\n        required: true\n      callbacks:\n        notifications:\n          \"{$request.body#/notificationUrl}/notifications\":\n            $ref: \"#/paths/~1notifications\"\n      responses:\n        \"201\":\n          description: Session created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SessionInfo\"\n        \"400\":\n          description: Invalid input\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorInfo\"\n              examples:\n                Generic400:\n                  summary: Schema validation failed\n                  value: \n                    code: INVALID_INPUT\n                    message: \"Schema validation failed at  ...\"\n                MsisdnRequired:\n                  summary: msisdn is required as part of ueId\n                  value: \n                    code: INVALID_INPUT\n                    message: \"Expected property is missing: ueId.msisdn\"\n                IPv4Required:\n                  summary: ipv4addr is required as part of ueId\n                  value: \n                    code: INVALID_INPUT\n                    message: \"Expected property is missing: ueId.ipv4addr\"\n                IPRequired:\n                  summary: Some IP address is required as part of ueId\n                  value: \n                    code: INVALID_INPUT\n                    message: \"Expected property is missing: ueId.ipv4addr or ueId.ipv6addr\"\n                UePortsRequired:\n                  summary: uePorts is required\n                  value: \n                    code: INVALID_INPUT\n                    message: \"Expected property is missing: uePorts\"\n                QoSRequired:\n                  summary: qos is required\n                  value: \n                    code: INVALID_INPUT\n                    message: \"Expected property is missing: qos\"\n                UePortsRangesNotAllowed:\n                  summary: Ranges at uePorts are not allowed\n                  value: \n                    code: INVALID_INPUT\n                    message: \"Ranges not allowed: uePorts\"\n        \"401\":\n          $ref: \"#/components/responses/Generic401\"\n        \"403\":\n          $ref: \"#/components/responses/Generic403\"\n        \"409\":\n          description: Conflict\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorInfo\"\n              example:\n                code: CONFLICT\n                message: \"Another session is created for the same UE\"\n        \"500\":\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorInfo\"\n              example:\n                code: INTERNAL\n                message: \"Session could not be created\"\n        \"503\":\n          $ref: \"#/components/responses/Generic503\"\n  /sessions/{sessionId}:\n    get:\n      tags:\n        - QoS sessions\n      summary: \"Get session information\"\n      operationId: getSession\n      parameters:\n        - name: sessionId\n          in: path\n          description: Session ID that was obtained from the createSession operation\n          required: true\n          schema:\n            $ref: \"#/components/schemas/SessionId\"\n      responses:\n        \"200\":\n          description: Contains information about active session\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SessionInfo\"\n        \"401\":\n          $ref: \"#/components/responses/Generic401\"\n        \"403\":\n          $ref: \"#/components/responses/Generic403\"\n        \"404\":\n          $ref: \"#/components/responses/SessionNotFound404\"\n        \"503\":\n          $ref: \"#/components/responses/Generic503\"\n    delete:\n      tags:\n        - QoS sessions\n      summary: \"Free resources related to QoS session\"\n      operationId: deleteSession\n      parameters:\n        - name: sessionId\n          in: path\n          description: Session ID that was obtained from the createSession operation\n          required: true\n          schema:\n            $ref: \"#/components/schemas/SessionId\"\n      responses:\n        \"204\":\n          description: Session deleted\n        \"401\":\n          $ref: \"#/components/responses/Generic401\"\n        \"403\":\n          $ref: \"#/components/responses/Generic403\"\n        \"404\":\n          $ref: \"#/components/responses/SessionNotFound404\"\n        \"503\":\n          $ref: \"#/components/responses/Generic503\"\n  /notifications:\n    post:\n      tags:\n        - Session notifications callback\n      summary: \"Session notifications callback\"\n      description: |\n        Important: this endpoint is to be implemented by the API consumer.\n        The QoD server will call this endpoint whenever any network related event occurs.\n        Currently only SESSION_TERMINATED event is implemented. Any other network events are ignored.\n      operationId: postNotification\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Notification\"\n      responses:\n        \"204\":\n          description: Successful notification\n        \"400\":\n          $ref: \"#/components/responses/Generic400\"\n        \"401\":\n          $ref: \"#/components/responses/Generic401\"\n        \"403\":\n          $ref: \"#/components/responses/Generic403\"\n        \"503\":\n          $ref: \"#/components/responses/Generic503\"\n      security:\n        - apiKey: []\ncomponents:\n  securitySchemes:\n    oAuth2ClientCredentials:\n      type: oauth2\n      description: This API uses OAuth 2 with the client credentials grant flow.\n      flows:\n        clientCredentials:\n          tokenUrl: \"{tokenUrl}\"\n          scopes: {}\n    apiKey:\n      type: apiKey\n      description: API key to authorize requests\n      name: apikey\n      in: query\n  schemas:\n    SessionId:\n      type: string\n      format: uuid\n      description: Session ID in UUID format\n    SessionInfo:\n      description: Session related information.\n      allOf:\n        - $ref: \"#/components/schemas/CreateSession\"\n        - type: object\n          required:\n            - id\n            - duration\n            - startedAt\n            - expiresAt\n          properties:\n            id:\n              $ref: \"#/components/schemas/SessionId\"\n            startedAt:\n              type: integer\n              example: 1639479600\n              description: Timestamp of session start in seconds since unix epoch\n              format: int64\n            expiresAt:\n              type: integer\n              example: 1639566000\n              description: Timestamp of session expiration if the session was not deleted, in seconds since unix epoch\n              format: int64\n            messages:\n              type: array\n              items:\n                $ref: \"#/components/schemas/Message\"\n    CreateSession:\n      description: Data type with attributes required for creating a session\n      type: object\n      properties:\n        duration:\n          type: integer\n          example: 86400\n          description: |\n            Session duration in seconds. Maximal value of 24 hours is used if not set.\n            After session has expired the client will receive SESSION_TERMINATED event. See notification callback.\n          format: int32\n          minimum: 1\n          maximum: 86400\n          default: 86400\n        ueId:\n          $ref: \"#/components/schemas/UeId\"\n        asId:\n          $ref: \"#/components/schemas/AsId\"\n        uePorts:\n          $ref: \"#/components/schemas/PortsSpec\"\n        asPorts:\n          $ref: \"#/components/schemas/PortsSpec\"\n        qos:\n          $ref: \"#/components/schemas/QosProfile\"\n        notificationUri:\n          type: string\n          format: uri\n          example: \"https://application-server.com/notifications\"\n          description: Allows asynchronous delivery of session related events\n        notificationAuthToken:\n          type: string\n          example: \"c8974e592c2fa383d4a3960714\"\n          description: Authentification token for callback API\n      required:\n        - ueId\n        - asId\n        - qos\n    Port:\n      type: integer\n      minimum: 0\n      maximum: 65535\n    PortsSpec:\n      type: object\n      minProperties: 1\n      properties:\n        ranges:\n          type: array\n          minItems: 1\n          items:\n            type: object\n            required:\n              - from\n              - to\n            properties:\n              from:\n                $ref: \"#/components/schemas/Port\"\n              to:\n                $ref: \"#/components/schemas/Port\"\n        ports:\n          type: array\n          minItems: 1\n          items:\n            $ref: \"#/components/schemas/Port\"\n      example:\n        ranges:\n          - from: 5010\n            to: 5020\n        ports:\n          - 5060\n          - 5070\n      description: |\n        Ports may be specified as a list of ranges or single ports.\n    QosProfile:\n      type: string\n      enum:\n        - QOS_E\n        - QOS_S\n        - QOS_M\n        - QOS_L\n      description: |\n        * `QOS_E` - Qualifier for enhanced communication profile\n        * `QOS_S` - Qualifier for the requested QoS profile _S_\n        * `QOS_M` - Qualifier for the requested QoS profile _M_\n        * `QOS_L` - Qualifier for the requested QoS profile _L_\n    Notification:\n      type: object\n      required:\n        - sessionId\n        - event\n      properties:\n        sessionId:\n          $ref: \"#/components/schemas/SessionId\"\n        event:\n          $ref: \"#/components/schemas/SessionEvent\"\n    SessionEvent:\n      type: string\n      enum:\n        - SESSION_TERMINATED\n    ErrorInfo:\n      type: object\n      required:\n        - code\n        - message\n      properties:\n        code:\n          type: string\n          description: Code given to this error\n        message:\n          type: string\n          description: Detailed error description\n    UeId:\n      type: object\n      minProperties: 1\n      properties:\n        externalId:\n          $ref: \"#/components/schemas/ExternalId\"\n        msisdn:\n          $ref: \"#/components/schemas/MSISDN\"\n        ipv4addr:\n          $ref: \"#/components/schemas/Ipv4Addr\"\n        ipv6addr:\n          $ref: \"#/components/schemas/Ipv6Addr\"\n      description: User equipment identifier\n    AsId:\n      type: object\n      minProperties: 1\n      properties:\n        ipv4addr:\n          $ref: \"#/components/schemas/Ipv4Addr\"\n        ipv6addr:\n          $ref: \"#/components/schemas/Ipv6Addr\"\n      description: Application server identifier\n    ExternalId:\n      type: string\n      example: \"123456789@domain.com\"\n    MSISDN:\n      type: string\n      pattern: '^\\+?[0-9]{5,15}$'\n      example: \"123456789\"\n      description: Subscriber number in E.164 format (starting with country code). Optionally prefixed with '+'.\n    Ipv4Addr:\n      type: string\n      format: ipv4\n      pattern: '^([01]?\\d\\d?|2[0-4]\\d|25[0-5])(?:\\.(?:[01]?\\d\\d?|2[0-4]\\d|25[0-5])){3}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$'\n      example: \"192.168.0.1/24\"\n      description: |\n        IPv4 address may be specified in form \u003caddress/mask\u003e as:\n          - address - an IPv4 number in dotted-quad form 1.2.3.4. Only this exact IP number will match the flow control rule.\n          - address/mask - an IP number as above with a mask width of the form 1.2.3.4/24.\n            In this case, all IP numbers from 1.2.3.0 to 1.2.3.255 will match. The bit width MUST be valid for the IP version.\n    Ipv6Addr:\n      type: string\n      format: ipv6\n      allOf:\n        - pattern: '^((:|(0?|([1-9a-f][0-9a-f]{0,3}))):)((0?|([1-9a-f][0-9a-f]{0,3})):){0,6}(:|(0?|([1-9a-f][0-9a-f]{0,3})))(\\/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))?$'\n        - pattern: '^((([^:]+:){7}([^:]+))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?))(\\/.+)?$'\n      example: \"2001:db8:85a3:8d3:1319:8a2e:370:7344\"\n      description: |\n        IPv6 address, following IETF 5952 format, may be specified in form \u003caddress/mask\u003e as:\n          - address - The /128 subnet is optional for single addresses:\n            - 2001:db8:85a3:8d3:1319:8a2e:370:7344\n            - 2001:db8:85a3:8d3:1319:8a2e:370:7344/128\n          - address/mask - an IP v6 number with a mask:\n            - 2001:db8:85a3:8d3::0/64\n            - 2001:db8:85a3:8d3::/64\n    Message:\n      type: object\n      properties:\n        severity:\n          type: string\n          enum: [\"INFO\", \"WARNING\"]\n          description: Message severity\n        description:\n          type: string\n          description: Detailed message text\n      required:\n        - severity\n        - description\n  responses:\n    Generic400:\n      description: Invalid input\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ErrorInfo\"\n          example:\n            code: INVALID_INPUT\n            message: \"Schema validation failed at  ...\"\n    Generic401:\n      description: Unauthorized\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ErrorInfo\"\n          example:\n            code: UNAUTHORIZED\n            message: \"Authorization failed: ...\"\n    Generic403:\n      description: Forbidden\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ErrorInfo\"\n          example:\n            code: FORBIDDEN\n            message: \"Operation not allowed: ...\"\n    SessionNotFound404:\n      description: Session not found\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ErrorInfo\"\n          example:\n            code: NOT_FOUND\n            message: \"Session Id does not exist\"\n    Generic503:\n      description: Service unavailable\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ErrorInfo\"\n          example:\n            code: SERVICE_UNAVALIBLE\n            message: \"Service unavailable\"\n",
			"canonicalURL": "/github.com/camaraproject/QualityOnDemand@b44695d4e6af991d9346138c744ded58b3d2c3a1/-/blob/code/API_definitions/qod-api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/camaraproject/QualityOnDemand/blob/b44695d4e6af991d9346138c744ded58b3d2c3a1/code/API_definitions/qod-api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/sessions\": post: operation \"createSession\": security: parse security scheme \"oAuth2ClientCredentials\": oauth2: flow \"clientCredentials\": at code/API_definitions/qod-api.yaml:205:21: \"tokenUrl\" MUST be in the form of a URL: parse \"{tokenUrl}\": invalid URI for request"
}