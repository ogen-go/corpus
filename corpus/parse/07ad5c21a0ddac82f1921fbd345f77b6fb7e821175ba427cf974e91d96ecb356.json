{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/geoserver/geoserver"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "src/community/ogcapi/ogcapi-features/src/main/resources/org/geoserver/ogcapi/features/openapi.yaml",
			"byteSize": 41133,
			"content": "openapi: 3.0.2\ninfo:\n  title: \"A sample API conforming to the draft standard OGC API - Features - Part 1: Core\"\n  version: '1.0.0'\n  description: |-\n    This is a sample OpenAPI definition that conforms to the conformance\n    classes \"Core\", \"GeoJSON\", \"HTML\" and \"OpenAPI 3.0\" of the draft\n    standard \"OGC API - Features - Part 1: Core\".\n\n    This example is a generic OGC API Features definition that uses path\n    parameters to describe all feature collections and all features.\n    The generic OpenAPI definition does not provide any details on the\n    collections or the feature content. This information is only available\n    from accessing the feature collection resources.\n\n    There is [another example](ogcapi-features-1-example2.yaml)\n    that specifies each collection explicitly.\n  contact:\n    name: Acme Corporation\n    email: info@example.org\n    url: 'http://example.org/'\n  license:\n    name: CC-BY 4.0 license\n    url: 'https://creativecommons.org/licenses/by/4.0/'\nservers:\n  - url: 'https://data.example.org/'\n    description: Production server\n  - url: 'https://dev.example.org/'\n    description: Development server\ntags:\n  - name: Capabilities\n    description: |-\n      essential characteristics of this API\n  - name: Data\n    description: |-\n      access to data (features)\npaths:\n  '/':\n    get:\n      tags:\n        - Capabilities\n      summary: landing page\n      description: |-\n        The landing page provides links to the API definition, the conformance\n        statements and to the feature collections in this dataset.\n      operationId: getLandingPage\n      parameters:\n        - $ref: '#/components/parameters/otherParameters'\n      responses:\n        '200':\n          $ref: '#/components/responses/LandingPage'\n        '500':\n          $ref: '#/components/responses/ServerError'\n  '/conformance':\n    get:\n      tags:\n        - Capabilities\n      summary: information about specifications that this API conforms to\n      description: |-\n        A list of all conformance classes specified in a standard that the\n        server conforms to.\n      operationId: getConformanceDeclaration\n      parameters:\n        - $ref: '#/components/parameters/otherParameters'\n      responses:\n        '200':\n          $ref: '#/components/responses/ConformanceDeclaration'\n        '500':\n          $ref: '#/components/responses/ServerError'\n  '/functions':\n    get:\n      tags:\n        - Capabilities\n      summary: information about functions supported in the CQL filter extension\n      description: |-\n        A list of supported filters and functions.\n      operationId: getCQLFunctions\n      parameters:\n         - $ref: '#/components/parameters/otherParameters'\n      responses:\n        '200':\n          $ref: '#/components/responses/Functions'\n        '500':\n          $ref: '#/components/responses/ServerError'\n  '/collections':\n    get:\n      tags:\n        - Capabilities\n      summary: the feature collections in the dataset\n      operationId: getCollections\n      parameters:\n        - $ref: '#/components/parameters/otherParameters'\n      responses:\n        '200':\n          $ref: '#/components/responses/Collections'\n        '500':\n          $ref: '#/components/responses/ServerError'\n  '/collections/{collectionId}':\n    get:\n      tags:\n        - Capabilities\n      summary: |-\n        describe the feature collection with id `collectionId`\n      operationId: describeCollection\n      parameters:\n        - $ref: '#/components/parameters/collectionId'\n        - $ref: '#/components/parameters/otherParameters'\n      responses:\n        '200':\n          $ref: '#/components/responses/Collection'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/ServerError'\n  '/collections/{collectionId}/queryables':\n    get:\n      tags:\n        - Capabilities\n      summary: |-\n        lists the queryable attributes for the feature collection with id `collectionId`\n      operationId: getQueryables\n      parameters:\n        - $ref: '#/components/parameters/collectionId'\n        - $ref: '#/components/parameters/otherParameters'\n      responses:\n        '200':\n          $ref: '#/components/responses/Queryables'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/ServerError'\n  '/collections/{collectionId}/items':\n    get:\n      tags:\n        - Data\n      summary: fetch features\n      description: |-\n        Fetch features of the feature collection with id `collectionId`.\n\n        Every feature in a dataset belongs to a collection. A dataset may\n        consist of multiple feature collections. A feature collection is often a\n        collection of features of a similar type, based on a common schema.\n\n        Use content negotiation to request HTML or GeoJSON.\n      operationId: getFeatures\n      parameters:\n        - $ref: '#/components/parameters/collectionId'\n        - $ref: '#/components/parameters/limit'\n        - $ref: '#/components/parameters/bbox'\n        - $ref: '#/components/parameters/datetime'\n        - $ref: '#/components/parameters/filter'\n        - $ref: '#/components/parameters/filter-lang'\n        - $ref: '#/components/parameters/filter-crs'\n        - $ref: '#/components/parameters/crs'\n        - $ref: '#/components/parameters/bbox-crs'\n        - $ref: '#/components/parameters/otherParameters'\n      responses:\n        '200':\n          $ref: '#/components/responses/Features'\n        '400':\n          $ref: '#/components/responses/InvalidParameter'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/ServerError'\n  '/collections/{collectionId}/items/{featureId}':\n    get:\n      tags:\n        - Data\n      summary: fetch a single feature\n      description: |-\n        Fetch the feature with id `featureId` in the feature collection\n        with id `collectionId`.\n\n        Use content negotiation to request HTML or GeoJSON.\n      operationId: getFeature\n      parameters:\n        - $ref: '#/components/parameters/collectionId'\n        - $ref: '#/components/parameters/featureId'\n        - $ref: '#/components/parameters/crs'\n        - $ref: '#/components/parameters/otherParameters'\n      responses:\n        '200':\n          $ref: '#/components/responses/Feature'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/ServerError'\ncomponents:\n  parameters:\n    bbox:\n      name: bbox\n      in: query\n      description: |-\n        Only features that have a geometry that intersects the bounding box are selected.\n        The bounding box is provided as four or six numbers, depending on whether the\n        coordinate reference system includes a vertical axis (height or depth):\n\n        * Lower left corner, coordinate axis 1\n        * Lower left corner, coordinate axis 2\n        * Minimum value, coordinate axis 3 (optional)\n        * Upper right corner, coordinate axis 1\n        * Upper right corner, coordinate axis 2\n        * Maximum value, coordinate axis 3 (optional)\n\n        The coordinate reference system of the values is WGS 84 longitude/latitude\n        (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless a different coordinate\n        reference system is specified in the parameter `bbox-crs`.\n\n        For WGS 84 longitude/latitude the values are in most cases the sequence of\n        minimum longitude, minimum latitude, maximum longitude and maximum latitude.\n        However, in cases where the box spans the antimeridian the first value\n        (west-most box edge) is larger than the third value (east-most box edge).\n\n        If the vertical axis is included, the third and the sixth number are\n        the bottom and the top of the 3-dimensional bounding box.\n\n        If a feature has multiple spatial geometry properties, it is the decision of the\n        server whether only a single spatial geometry property is used to determine\n        the extent or all relevant geometries.\n      required: false\n      schema:\n        type: array\n        minItems: 4\n        maxItems: 6\n        items:\n          type: number\n      style: form\n      explode: false\n    collectionId:\n      name: collectionId\n      in: path\n      description: local identifier of a collection\n      required: true\n      schema:\n        type: string\n    datetime:\n      name: datetime\n      in: query\n      description: |-\n        Either a date-time or an interval, open or closed. Date and time expressions\n        adhere to RFC 3339. Open intervals are expressed using double-dots.\n\n        Examples:\n\n        * A date-time: \"2018-02-12T23:20:50Z\"\n        * A closed interval: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\"\n        * Open intervals: \"2018-02-12T00:00:00Z/..\" or \"../2018-03-18T12:31:12Z\"\n\n        Only features that have a temporal property that intersects the value of\n        `datetime` are selected.\n\n        If a feature has multiple temporal properties, it is the decision of the\n        server whether only a single temporal property is used to determine\n        the extent or all relevant temporal properties.\n      required: false\n      schema:\n        type: string\n      style: form\n      explode: false\n    featureId:\n      name: featureId\n      in: path\n      description: local identifier of a feature\n      required: true\n      schema:\n        type: string\n    limit:\n      name: limit\n      in: query\n      description: |-\n        The optional limit parameter limits the number of items that are presented in the response document.\n\n        Only items are counted that are on the first level of the collection in the response document.\n        Nested objects contained within the explicitly requested items shall not be counted.\n\n        Minimum = 1. Maximum = 10000. Default = 10.\n      required: false\n      schema:\n        type: integer\n        minimum: 1\n        maximum: 10000\n        default: 10\n      style: form\n      explode: false\n    filter:\n      name: filter\n      in: query\n      description: Defines a filter that will be applied on items, only items matching the filter will be returned\n      schema:\n        type: string\n    filter-lang:\n      name: filter-lang\n      in: query\n      description: Filter encoding used in the filter parameter\n      schema:\n        type: string\n        enum:\n          - cql-text\n        default: cql-text\n    filter-crs:\n      name: filter-crs\n      in: query\n      required: false\n      schema:\n        type: string\n        format: uri-reference\n      style: form\n      explode: false\n    otherParameters:\n      style: form\n      in: query\n      name: otherParameters\n      description: Allows unrecognized parameters to be added in the query string without getting a 400 back (e.g., cache busters)\n      schema:\n        type: object\n        additionalProperties: true\n    crs:\n      name: crs\n      in: query\n      required: false\n      schema:\n        type: string\n        format: uri\n      style: form\n      explode: false\n    bbox-crs:\n      name: bbox-crs\n      in: query\n      required: false\n      schema:\n        type: string\n        format: uri\n      style: form\n      explode: false\n  schemas:\n    queryables:\n      type: object\n      required:\n        - queryables\n      properties:\n        queryables:\n          description: list of queryable properties\n          type: array\n          items:\n            $ref: \"#/components/schemas/queryable\"\n    queryable:\n      type:  object\n      required:\n        - name\n        - type\n      properties:\n        id:\n          description: identifier of the attribute that can be used in CQL filters\n          type: string\n          example: address\n        type:\n          description: the property type\n          type: string\n          enum:\n            - string\n            - uri\n            - number\n            - integer\n            - date\n            - dateTime\n            - boolean\n            - geometry\n    collection:\n      type: object\n      required:\n        - id\n        - links\n      properties:\n        id:\n          description: identifier of the collection used, for example, in URIs\n          type: string\n          example: address\n        title:\n          description: human readable title of the collection\n          type: string\n          example: address\n        description:\n          description: a description of the features in the collection\n          type: string\n          example: An address.\n        links:\n          type: array\n          items:\n            $ref: \"#/components/schemas/link\"\n          example:\n            - href: http://data.example.com/buildings\n              rel: item\n            - href: http://example.com/concepts/buildings.html\n              rel: describedBy\n              type: text/html\n        extent:\n          $ref: \"#/components/schemas/extent\"\n        itemType:\n          description: indicator about the type of the items in the collection (the default value is 'feature').\n          type: string\n          default: feature\n        crs:\n          description: the list of coordinate reference systems supported by the service\n          type: array\n          items:\n            type: string\n            format: uri;\n          default:\n            - http://www.opengis.net/def/crs/OGC/1.3/CRS84\n          example:\n            - http://www.opengis.net/def/crs/OGC/1.3/CRS84\n            - http://www.opengis.net/def/crs/EPSG/0/4326\n    collections:\n      type: object\n      required:\n        - links\n        - collections\n      properties:\n        links:\n          type: array\n          items:\n            $ref: \"#/components/schemas/link\"\n        collections:\n          type: array\n          items:\n            $ref: \"#/components/schemas/collection\"\n        crs:\n          description: a list of CRS identifiers that are supported for more that one feature collection offered by the service\n          type: array\n          items:\n            type: string\n            format: uri\n          default:\n            - http://www.opengis.net/def/crs/OGC/1.3/CRS84\n          example:\n            - http://www.opengis.net/def/crs/OGC/1.3/CRS84\n            - http://www.opengis.net/def/crs/EPSG/0/4326\n    confClasses:\n      type: object\n      required:\n        - conformsTo\n      properties:\n        conformsTo:\n          type: array\n          items:\n            type: string\n    exception:\n      type: object\n      description: |-\n        Information about the exception: an error code plus an optional description.\n      required:\n        - code\n      properties:\n        code:\n          type: string\n        description:\n          type: string\n    extent:\n      type: object\n      description: |-\n        The extent of the features in the collection. In the Core only spatial and temporal\n        extents are specified. Extensions may add additional members to represent other\n        extents, for example, thermal or pressure ranges.\n      properties:\n        spatial:\n          description: |-\n            The spatial extent of the features in the collection.\n          type: object\n          properties:\n            bbox:\n              description: |-\n                One or more bounding boxes that describe the spatial extent of the dataset.\n                In the Core only a single bounding box is supported. Extensions may support\n                additional areas. If multiple areas are provided, the union of the bounding\n                boxes describes the spatial extent.\n              type: array\n              minItems: 1\n              items:\n                description: |-\n                  Each bounding box is provided as four or six numbers, depending on\n                  whether the coordinate reference system includes a vertical axis\n                  (height or depth):\n\n                  * Lower left corner, coordinate axis 1\n                  * Lower left corner, coordinate axis 2\n                  * Minimum value, coordinate axis 3 (optional)\n                  * Upper right corner, coordinate axis 1\n                  * Upper right corner, coordinate axis 2\n                  * Maximum value, coordinate axis 3 (optional)\n\n                  The coordinate reference system of the values is WGS 84 longitude/latitude\n                  (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless a different coordinate\n                  reference system is specified in `crs`.\n\n                  For WGS 84 longitude/latitude the values are in most cases the sequence of\n                  minimum longitude, minimum latitude, maximum longitude and maximum latitude.\n                  However, in cases where the box spans the antimeridian the first value\n                  (west-most box edge) is larger than the third value (east-most box edge).\n\n                  If the vertical axis is included, the third and the sixth number are\n                  the bottom and the top of the 3-dimensional bounding box.\n\n                  If a feature has multiple spatial geometry properties, it is the decision of the\n                  server whether only a single spatial geometry property is used to determine\n                  the extent or all relevant geometries.\n                type: array\n                minItems: 4\n                maxItems: 6\n                items:\n                  type: number\n                example:\n                  - -180\n                  - -90\n                  - 180\n                  - 90\n            crs:\n              description: |-\n                Coordinate reference system of the coordinates in the spatial extent\n                (property `bbox`). The default reference system is WGS 84 longitude/latitude.\n                In the Core this is the only supported coordinate reference system.\n                Extensions may support additional coordinate reference systems and add\n                additional enum values.\n              type: string\n              enum:\n                - 'http://www.opengis.net/def/crs/OGC/1.3/CRS84'\n              default: 'http://www.opengis.net/def/crs/OGC/1.3/CRS84'\n        temporal:\n          description: |-\n            The temporal extent of the features in the collection.\n          type: object\n          properties:\n            interval:\n              description: |-\n                One or more time intervals that describe the temporal extent of the dataset.\n                The value `null` is supported and indicates an open time intervall.\n                In the Core only a single time interval is supported. Extensions may support\n                multiple intervals. If multiple intervals are provided, the union of the\n                intervals describes the temporal extent.\n              type: array\n              minItems: 1\n              items:\n                description: |-\n                  Begin and end times of the time interval. The timestamps\n                  are in the coordinate reference system specified in `trs`. By default\n                  this is the Gregorian calendar.\n                type: array\n                minItems: 2\n                maxItems: 2\n                items:\n                  type: string\n                  format: date-time\n                  nullable: true\n                example:\n                  - '2011-11-11T12:22:11Z'\n                  - null\n            trs:\n              description: |-\n                Coordinate reference system of the coordinates in the temporal extent\n                (property `interval`). The default reference system is the Gregorian calendar.\n                In the Core this is the only supported temporal reference system.\n                Extensions may support additional temporal reference systems and add\n                additional enum values.\n              type: string\n              enum:\n                - 'http://www.opengis.net/def/uom/ISO-8601/0/Gregorian'\n              default: 'http://www.opengis.net/def/uom/ISO-8601/0/Gregorian'\n    featureCollectionGeoJSON:\n      type: object\n      required:\n        - type\n        - features\n      properties:\n        type:\n          type: string\n          enum:\n            - FeatureCollection\n        features:\n          type: array\n          items:\n            $ref: \"#/components/schemas/featureGeoJSON\"\n        links:\n          type: array\n          items:\n            $ref: \"#/components/schemas/link\"\n        timeStamp:\n          $ref: \"#/components/schemas/timeStamp\"\n        numberMatched:\n          $ref: \"#/components/schemas/numberMatched\"\n        numberReturned:\n          $ref: \"#/components/schemas/numberReturned\"\n    featureGeoJSON:\n      type: object\n      required:\n        - type\n        - geometry\n        - properties\n      properties:\n        type:\n          type: string\n          enum:\n            - Feature\n        geometry:\n          $ref: \"#/components/schemas/geometryGeoJSON\"\n        properties:\n          type: object\n          nullable: true\n        id:\n          oneOf:\n            - type: string\n            - type: integer\n        links:\n          type: array\n          items:\n            $ref: \"#/components/schemas/link\"\n    geometryGeoJSON:\n      oneOf:\n        - $ref: \"#/components/schemas/pointGeoJSON\"\n        - $ref: \"#/components/schemas/multipointGeoJSON\"\n        - $ref: \"#/components/schemas/linestringGeoJSON\"\n        - $ref: \"#/components/schemas/multilinestringGeoJSON\"\n        - $ref: \"#/components/schemas/polygonGeoJSON\"\n        - $ref: \"#/components/schemas/multipolygonGeoJSON\"\n        - $ref: \"#/components/schemas/geometrycollectionGeoJSON\"\n    geometrycollectionGeoJSON:\n      type: object\n      required:\n        - type\n        - geometries\n      properties:\n        type:\n          type: string\n          enum:\n            - GeometryCollection\n        geometries:\n          type: array\n          items:\n            $ref: \"#/components/schemas/geometryGeoJSON\"\n    landingPage:\n      type: object\n      required:\n        - links\n      properties:\n        title:\n          type: string\n          example: Buildings in Bonn\n        description:\n          type: string\n          example: Access to data about buildings in the city of Bonn via a Web API that conforms to the OGC API Features specification.\n        links:\n          type: array\n          items:\n            $ref: \"#/components/schemas/link\"\n    linestringGeoJSON:\n      type: object\n      required:\n        - type\n        - coordinates\n      properties:\n        type:\n          type: string\n          enum:\n            - LineString\n        coordinates:\n          type: array\n          minItems: 2\n          items:\n            type: array\n            minItems: 2\n            items:\n              type: number\n    link:\n      type: object\n      required:\n        - href\n      properties:\n        href:\n          type: string\n          example: http://data.example.com/buildings/123\n        rel:\n          type: string\n          example: alternate\n        type:\n          type: string\n          example: application/geo+json\n        hreflang:\n          type: string\n          example: en\n        title:\n          type: string\n          example: Trierer Strasse 70, 53115 Bonn\n        length:\n          type: integer\n    multilinestringGeoJSON:\n      type: object\n      required:\n        - type\n        - coordinates\n      properties:\n        type:\n          type: string\n          enum:\n            - MultiLineString\n        coordinates:\n          type: array\n          items:\n            type: array\n            minItems: 2\n            items:\n              type: array\n              minItems: 2\n              items:\n                type: number\n    multipointGeoJSON:\n      type: object\n      required:\n        - type\n        - coordinates\n      properties:\n        type:\n          type: string\n          enum:\n            - MultiPoint\n        coordinates:\n          type: array\n          items:\n            type: array\n            minItems: 2\n            items:\n              type: number\n    multipolygonGeoJSON:\n      type: object\n      required:\n        - type\n        - coordinates\n      properties:\n        type:\n          type: string\n          enum:\n            - MultiPolygon\n        coordinates:\n          type: array\n          items:\n            type: array\n            items:\n              type: array\n              minItems: 4\n              items:\n                type: array\n                minItems: 2\n                items:\n                  type: number\n    numberMatched:\n      description: |-\n        The number of features of the feature type that match the selection\n        parameters like `bbox`.\n      type: integer\n      minimum: 0\n      example: 127\n    numberReturned:\n      description: |-\n        The number of features in the feature collection.\n\n        A server may omit this information in a response, if the information\n        about the number of features is not known or difficult to compute.\n\n        If the value is provided, the value shall be identical to the number\n        of items in the \"features\" array.\n      type: integer\n      minimum: 0\n      example: 10\n    pointGeoJSON:\n      type: object\n      required:\n        - type\n        - coordinates\n      properties:\n        type:\n          type: string\n          enum:\n            - Point\n        coordinates:\n          type: array\n          minItems: 2\n          items:\n            type: number\n    polygonGeoJSON:\n      type: object\n      required:\n        - type\n        - coordinates\n      properties:\n        type:\n          type: string\n          enum:\n            - Polygon\n        coordinates:\n          type: array\n          items:\n            type: array\n            minItems: 4\n            items:\n              type: array\n              minItems: 2\n              items:\n                type: number\n    timeStamp:\n      description: This property indicates the time and date when the response was generated.\n      type: string\n      format: date-time\n      example: '2017-08-17T08:05:32Z'\n\n    functions:\n      type: object\n      required:\n        - functions\n      properties:\n        functions:\n          type: array\n          items:\n            type: object\n            required:\n              - name\n              - returns\n            properties:\n              name:\n                type: string\n              description:\n                type: string\n              metadataUrl:\n                type: string\n                format: uri-reference\n              arguments:\n                type: array\n                items:\n                  type: object\n                  required:\n                    - type\n                  properties:\n                    title:\n                      type: string\n                    description:\n                      type: string\n                    type:\n                      type: array\n                      items:\n                        type: string\n                        enum:\n                          - string\n                          - number\n                          - integer\n                          - datetime\n                          - geometry\n                          - boolean\n              returns:\n                type: array\n                items:\n                  type: string\n                  enum:\n                    - string\n                    - number\n                    - integer\n                    - datetime\n                    - geometry\n                    - boolean\n  responses:\n    LandingPage:\n      description: |-\n        The landing page provides links to the API definition\n        (link relations `service-desc` and `service-doc`),\n        the Conformance declaration (path `/conformance`,\n        link relation `conformance`), and the Feature\n        Collections (path `/collections`, link relation\n        `data`).\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/landingPage'\n          example:\n            title: Buildings in Bonn\n            description: Access to data about buildings in the city of Bonn via a Web API that conforms to the OGC API Features specification.\n            links:\n              - href: 'http://data.example.org/'\n                rel: self\n                type: application/json\n                title: this document\n              - href: 'http://data.example.org/api'\n                rel: service-desc\n                type: application/vnd.oai.openapi+json;version=3.0\n                title: the API definition\n              - href: 'http://data.example.org/api.html'\n                rel: service-doc\n                type: text/html\n                title: the API documentation\n              - href: 'http://data.example.org/conformance'\n                rel: conformance\n                type: application/json\n                title: OGC API conformance classes implemented by this server\n              - href: 'http://data.example.org/collections'\n                rel: data\n                type: application/json\n                title: Information about the feature collections\n        text/html:\n          schema:\n            type: string\n    ConformanceDeclaration:\n      description: |-\n        The URIs of all conformance classes supported by the server.\n\n        To support \"generic\" clients that want to access multiple\n        OGC API Features implementations - and not \"just\" a specific\n        API / server, the server declares the conformance\n        classes it implements and conforms to.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/confClasses'\n          example:\n            conformsTo:\n              - 'http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/core'\n              - 'http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/oas30'\n              - 'http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/html'\n              - 'http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/geojson'\n        text/html:\n          schema:\n            type: string\n    Collections:\n      description: |-\n        The feature collections shared by this API.\n\n        The dataset is organized as one or more feature collections. This resource\n        provides information about and access to the collections.\n\n        The response contains the list of collections. For each collection, a link\n        to the items in the collection (path `/collections/{collectionId}/items`,\n        link relation `items`) as well as key information about the collection.\n        This information includes:\n\n        * A local identifier for the collection that is unique for the dataset;\n        * A list of coordinate reference systems (CRS) in which geometries may be returned by the server. The first CRS is the default coordinate reference system (the default is always WGS 84 with axis order longitude/latitude);\n        * An optional title and description for the collection;\n        * An optional extent that can be used to provide an indication of the spatial and temporal extent of the collection - typically derived from the data;\n        * An optional indicator about the type of the items in the collection (the default value, if the indicator is not provided, is 'feature').\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/collections'\n          example:\n            links:\n              - href: 'http://data.example.org/collections.json'\n                rel: self\n                type: application/json\n                title: this document\n              - href: 'http://data.example.org/collections.html'\n                rel: alternate\n                type: text/html\n                title: this document as HTML\n              - href: 'http://schemas.example.org/1.0/buildings.xsd'\n                rel: describedBy\n                type: application/xml\n                title: GML application schema for Acme Corporation building data\n              - href: 'http://download.example.org/buildings.gpkg'\n                rel: enclosure\n                type: application/geopackage+sqlite3\n                title: Bulk download (GeoPackage)\n                length: 472546\n            collections:\n              - id: buildings\n                title: Buildings\n                description: Buildings in the city of Bonn.\n                extent:\n                  spatial:\n                    bbox:\n                      - - 7.01\n                        - 50.63\n                        - 7.22\n                        - 50.78\n                  temporal:\n                    interval:\n                      - - '2010-02-15T12:34:56Z'\n                        - null\n                links:\n                  - href: 'http://data.example.org/collections/buildings/items'\n                    rel: items\n                    type: application/geo+json\n                    title: Buildings\n                  - href: 'http://data.example.org/collections/buildings/items.html'\n                    rel: items\n                    type: text/html\n                    title: Buildings\n                  - href: 'https://creativecommons.org/publicdomain/zero/1.0/'\n                    rel: license\n                    type: text/html\n                    title: CC0-1.0\n                  - href: 'https://creativecommons.org/publicdomain/zero/1.0/rdf'\n                    rel: license\n                    type: application/rdf+xml\n                    title: CC0-1.0\n        text/html:\n          schema:\n            type: string\n    Queryables:\n      description: |-\n        Information about the feature collection queryable properties\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/queryables'\n    Collection:\n      description: |-\n        Information about the feature collection with id `collectionId`.\n\n        The response contains a link to the items in the collection\n        (path `/collections/{collectionId}/items`, link relation `items`)\n        as well as key information about the collection. This information\n        includes:\n\n        * A local identifier for the collection that is unique for the dataset;\n        * A list of coordinate reference systems (CRS) in which geometries may be returned by the server. The first CRS is the default coordinate reference system (the default is always WGS 84 with axis order longitude/latitude);\n        * An optional title and description for the collection;\n        * An optional extent that can be used to provide an indication of the spatial and temporal extent of the collection - typically derived from the data;\n        * An optional indicator about the type of the items in the collection (the default value, if the indicator is not provided, is 'feature').\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/collection'\n          example:\n            id: buildings\n            title: Buildings\n            description: Buildings in the city of Bonn.\n            extent:\n              spatial:\n                bbox:\n                  - - 7.01\n                    - 50.63\n                    - 7.22\n                    - 50.78\n              temporal:\n                interval:\n                  - - '2010-02-15T12:34:56Z'\n                    - null\n            links:\n              - href: 'http://data.example.org/collections/buildings/items'\n                rel: items\n                type: application/geo+json\n                title: Buildings\n              - href: 'http://data.example.org/collections/buildings/items.html'\n                rel: items\n                type: text/html\n                title: Buildings\n              - href: 'https://creativecommons.org/publicdomain/zero/1.0/'\n                rel: license\n                type: text/html\n                title: CC0-1.0\n              - href: 'https://creativecommons.org/publicdomain/zero/1.0/rdf'\n                rel: license\n                type: application/rdf+xml\n                title: CC0-1.0\n        text/html:\n          schema:\n            type: string\n    Features:\n      description: |-\n        The response is a document consisting of features in the collection.\n        The features included in the response are determined by the server\n        based on the query parameters of the request. To support access to\n        larger collections without overloading the client, the API supports\n        paged access with links to the next page, if more features are selected\n        that the page size.\n\n        The `bbox` and `datetime` parameter can be used to select only a\n        subset of the features in the collection (the features that are in the\n        bounding box or time interval). The `bbox` parameter matches all features\n        in the collection that are not associated with a location, too. The\n        `datetime` parameter matches all features in the collection that are\n        not associated with a time stamp or interval, too.\n\n        The `limit` parameter may be used to control the subset of the\n        selected features that should be returned in the response, the page size.\n        Each page may include information about the number of selected and\n        returned features (`numberMatched` and `numberReturned`) as well as\n        links to support paging (link relation `next`).\n      content:\n        application/geo+json:\n          schema:\n            $ref: '#/components/schemas/featureCollectionGeoJSON'\n          example:\n            type: FeatureCollection\n            links:\n              - href: 'http://data.example.com/collections/buildings/items.json'\n                rel: self\n                type: application/geo+json\n                title: this document\n              - href: 'http://data.example.com/collections/buildings/items.html'\n                rel: alternate\n                type: text/html\n                title: this document as HTML\n              - href: 'http://data.example.com/collections/buildings/items.json\u0026offset=10\u0026limit=2'\n                rel: next\n                type: application/geo+json\n                title: next page\n            timeStamp: '2018-04-03T14:52:23Z'\n            numberMatched: 123\n            numberReturned: 2\n            features:\n              - type: Feature\n                id: '123'\n                geometry:\n                  type: Polygon\n                  coordinates:\n                    - ...\n                properties:\n                  function: residential\n                  floors: '2'\n                  lastUpdate: '2015-08-01T12:34:56Z'\n              - type: Feature\n                id: '132'\n                geometry:\n                  type: Polygon\n                  coordinates:\n                    - ...\n                properties:\n                  function: public use\n                  floors: '10'\n                  lastUpdate: '2013-12-03T10:15:37Z'\n        text/html:\n          schema:\n            type: string\n    Feature:\n      description: |-\n        fetch the feature with id `featureId` in the feature collection\n        with id `collectionId`\n      content:\n        application/geo+json:\n          schema:\n            $ref: '#/components/schemas/featureGeoJSON'\n          example:\n            type: Feature\n            links:\n              - href: 'http://data.example.com/id/building/123'\n                rel: canonical\n                title: canonical URI of the building\n              - href: 'http://data.example.com/collections/buildings/items/123.json'\n                rel: self\n                type: application/geo+json\n                title: this document\n              - href: 'http://data.example.com/collections/buildings/items/123.html'\n                rel: alternate\n                type: text/html\n                title: this document as HTML\n              - href: 'http://data.example.com/collections/buildings'\n                rel: collection\n                type: application/geo+json\n                title: the collection document\n            id: '123'\n            geometry:\n              type: Polygon\n              coordinates:\n                - ...\n            properties:\n              function: residential\n              floors: '2'\n              lastUpdate: '2015-08-01T12:34:56Z'\n        text/html:\n          schema:\n            type: string\n    InvalidParameter:\n      description: |-\n        A query parameter has an invalid value.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/exception'\n        text/html:\n          schema:\n            type: string\n    NotFound:\n      description: |-\n        The requested URI was not found.\n    ServerError:\n      description: |-\n        A server error occurred.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/exception'\n        text/html:\n          schema:\n            type: string\n    Functions:\n      description: |-\n        A document listing the server filtering capabilities\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/functions'\n        text/html:\n          schema:\n            type: string\n"
		}
	},
	"Error": "parse: parse spec: paths: /collections/{collectionId}/items/{featureId}: get: operation \"getFeature\": responses: 200: resolve \"#/components/responses/Feature\" reference: content: \"application/geo+json\": schema: parse schema: resolve \"#/components/schemas/featureGeoJSON\": parse schema: property \"geometry\": parse schema: resolve \"#/components/schemas/geometryGeoJSON\": parse schema: oneOf: [6]: parse schema: resolve \"#/components/schemas/geometrycollectionGeoJSON\": parse schema: property \"geometries\": parse schema: item: parse schema: resolve \"#/components/schemas/geometryGeoJSON\": infinite recursion"
}