{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/aws-samples/amazon-api-gateway-url-shortener"
		},
		"file": {
			"name": "api.yaml",
			"size": 0,
			"path": "api.yaml",
			"byteSize": 16166,
			"content": "# Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: MIT-0\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy of this\n# software and associated documentation files (the \"Software\"), to deal in the Software\n# without restriction, including without limitation the rights to use, copy, modify,\n# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n# permit persons to whom the Software is furnished to do so.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nopenapi: \"3.0.1\"\ninfo:\n  title: \"URL Shortener API\"\n  version: \"1.0.0\"\n\nx-amazon-apigateway-request-validators:\n  all:\n    validateRequestBody: true\n    validateRequestParameters: true\n  params:\n    validateRequestBody: false\n    validateRequestParameters: true\n  body:\n    validateRequestBody: true\n    validateRequestParameters: false\n\npaths:\n  /{linkId}:\n    ## URL redirector\n    get:\n      summary: Get a url by ID and redirect\n      x-amazon-apigateway-request-validator: params\n      parameters:\n        - in: path\n          name: linkId\n          schema:\n            type: string\n          required: true\n          description: Short link ID for full URL\n      responses:\n        \"301\":\n          description: \"301 redirect\"\n          headers:\n            Location:\n              type: \"string\"\n            Cache-Control:\n              type: \"string\"\n      \n      ## API Gateway Integration\n      x-amazon-apigateway-integration:\n        credentials:\n          Fn::GetAtt: [ DDBReadRole, Arn ]\n        uri: {\"Fn::Sub\":\"arn:aws:apigateway:${AWS::Region}:dynamodb:action/GetItem\"}\n        httpMethod: \"POST\"\n        requestTemplates:\n          application/json: {\"Fn::Sub\": \"{\\\"Key\\\": {\\\"id\\\": {\\\"S\\\": \\\"$input.params().path.linkId\\\"}}, \\\"TableName\\\": \\\"${LinkTable}\\\"}\"}\n        passthroughBehavior: \"when_no_templates\"\n        responses:\n          \"200\":\n            statusCode: \"301\"\n            responseParameters:\n              method.response.header.Location: {\"Fn::Sub\": [\"'master.${ampDomain}?error=url_not_found'\", { \"ampDomain\": {\"Fn::GetAtt\":[\"AmplifyApp\", \"DefaultDomain\"]} }]}\n              method.response.header.Cache-Control: \"'max-age=300'\"\n            responseTemplates:\n              application/json: \"#set($inputRoot = $input.path('$')) \\\n                #if($inputRoot.toString().contains(\\\"Item\\\")) \\\n                #set($context.responseOverride.header.Location = $inputRoot.Item.url.S) \\\n                #end\"\n        type: \"aws\"\n\n  /app:\n    ## Get all links for user\n    get:\n      summary: Fetch all links for authenticated user\n      security:\n      - UserAuthorizer: []\n      parameters:\n        - $ref: '#/components/parameters/authHeader'\n      responses:\n        \"200\":\n          description: \"200 response\"\n          headers:\n            Access-Control-Allow-Origin:\n              type: \"string\"\n            Cache-Control:\n              type: \"string\"\n            \n\n      ## API Gateway Integration\n      x-amazon-apigateway-integration:\n        credentials:\n          Fn::GetAtt: [ DDBReadRole, Arn ]\n        uri: {\"Fn::Sub\":\"arn:aws:apigateway:${AWS::Region}:dynamodb:action/Query\"}\n        httpMethod: \"POST\"\n        requestTemplates:\n          application/json: { \"Fn::Sub\": \"{\\\"TableName\\\": \\\"${LinkTable}\\\", \\\n            \\\"IndexName\\\":\\\"OwnerIndex\\\",\\\"KeyConditionExpression\\\": \\\"#n_owner = :v_owner\\\", \\\n            \\\"ExpressionAttributeValues\\\": \\\n            {\\\":v_owner\\\": {\\\"S\\\": \\\"$context.authorizer.claims.email\\\"}},\\\"ExpressionAttributeNames\\\": {\\\"#n_owner\\\": \\\"owner\\\"}}\"}\n        passthroughBehavior: \"when_no_templates\"\n        responses:\n          \"200\":\n            statusCode: \"200\"\n            responseParameters:\n              method.response.header.Cache-Control: \"'no-cache, no-store'\"\n              method.response.header.Access-Control-Allow-Origin: {\"Fn::If\": [\"IsLocal\", \"'*'\", {\"Fn::Sub\": [\"'https://master.${ampDomain}'\", { \"ampDomain\": {\"Fn::GetAtt\":[\"AmplifyApp\", \"DefaultDomain\"]} }]}]}\n            responseTemplates:\n              application/json: \"#set($inputRoot = $input.path('$'))[ \\\n                #foreach($elem in $inputRoot.Items) { \\\n                  \\\"id\\\":\\\"$elem.id.S\\\", \\\n                  \\\"url\\\": \\\"$elem.url.S\\\", \\\n                  \\\"timestamp\\\": \\\"$elem.timestamp.S\\\", \\\n                  \\\"owner\\\": \\\"$elem.owner.S\\\"} \\\n                #if($foreach.hasNext),#end \\\n                #end]\"\n        type: \"AWS\"\n\n    ## Create a new link\n    post:\n      summary: Create new url\n      security:\n      - UserAuthorizer: []\n      x-amazon-apigateway-request-validator: body\n      parameters:\n        - $ref: '#/components/parameters/authHeader'\n      requestBody:\n        description: Optional description in *Markdown*\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostBody'\n      responses:\n        \"200\":\n          description: \"200 response\"\n          headers:\n            Access-Control-Allow-Origin:\n              type: \"string\"\n        \"400\":\n          description: \"400 response\"\n          headers:\n            Access-Control-Allow-Origin:\n              type: \"string\"\n\n      ## API Gateway integration\n      x-amazon-apigateway-integration:\n        credentials:\n          Fn::GetAtt: [ DDBCrudRole, Arn ]\n        uri: { \"Fn::Sub\": \"arn:aws:apigateway:${AWS::Region}:dynamodb:action/UpdateItem\" }\n        httpMethod: \"POST\"\n        requestTemplates:\n          application/json: { \"Fn::Sub\": \"{\\\"TableName\\\": \\\"${LinkTable}\\\",\\\n            \\\"ConditionExpression\\\":\\\"attribute_not_exists(id)\\\", \\\n            \\\"Key\\\": {\\\"id\\\": {\\\"S\\\": $input.json('$.id')}}, \\\n            \\\"ExpressionAttributeNames\\\": {\\\"#u\\\": \\\"url\\\",\\\"#o\\\": \\\"owner\\\",\\\"#ts\\\": \\\"timestamp\\\"}, \\\n            \\\"ExpressionAttributeValues\\\":{\\\":u\\\": {\\\"S\\\": $input.json('$.url')},\\\":o\\\": {\\\"S\\\": \\\"$context.authorizer.claims.email\\\"},\\\":ts\\\": {\\\"S\\\": \\\"$context.requestTime\\\"}}, \\\n            \\\"UpdateExpression\\\": \\\"SET #u = :u, #o = :o, #ts = :ts\\\", \\\n            \\\"ReturnValues\\\": \\\"ALL_NEW\\\"}\" }\n        passthroughBehavior: \"when_no_templates\"\n        responses:\n          \"200\":\n            statusCode: \"200\"\n            responseParameters:\n              method.response.header.Access-Control-Allow-Origin: {\"Fn::If\": [\"IsLocal\", \"'*'\", {\"Fn::Sub\": [\"'https://master.${ampDomain}'\", { \"ampDomain\": {\"Fn::GetAtt\":[\"AmplifyApp\", \"DefaultDomain\"]} }]}]}\n            responseTemplates:\n              application/json: \"#set($inputRoot = $input.path('$')) \\\n                {\\\"id\\\":\\\"$inputRoot.Attributes.id.S\\\", \\\n                \\\"url\\\":\\\"$inputRoot.Attributes.url.S\\\",\n                \\\"timestamp\\\":\\\"$inputRoot.Attributes.timestamp.S\\\", \\\n                \\\"owner\\\":\\\"$inputRoot.Attributes.owner.S\\\"}\"\n          \"400\":\n            statusCode: \"400\"\n            responseParameters:\n              method.response.header.Access-Control-Allow-Origin: {\"Fn::If\": [\"IsLocal\", \"'*'\", {\"Fn::Sub\": [\"'https://master.${ampDomain}'\", { \"ampDomain\": {\"Fn::GetAtt\":[\"AmplifyApp\", \"DefaultDomain\"]} }]}]}\n            responseTemplates:\n              application/json: \"#set($inputRoot = $input.path('$')) \\\n                #if($inputRoot.toString().contains(\\\"ConditionalCheckFailedException\\\")) \\\n                #set($context.responseOverride.status = 200)\n                {\\\"error\\\": true,\\\"message\\\": \\\"URL link already exists\\\"} \\\n                #end\"\n        type: \"aws\"\n\n    ## Options for get and post that do not have a linkId\n    options:\n      responses:\n        \"200\":\n          description: \"200 response\"\n          headers:\n            Access-Control-Allow-Origin:\n              schema:\n                type: \"string\"\n            Access-Control-Allow-Methods:\n              schema:\n                type: \"string\"\n            Access-Control-Allow-Headers:\n              schema:\n                type: \"string\"\n      x-amazon-apigateway-integration:\n        requestTemplates:\n          application/json: \"{\\\"statusCode\\\": 200}\"\n        passthroughBehavior: \"when_no_match\"\n        responses:\n          default:\n            statusCode: \"200\"\n            responseParameters:\n              method.response.header.Access-Control-Allow-Methods: \"'POST, GET, OPTIONS'\"\n              method.response.header.Access-Control-Allow-Headers: \"'authorization, content-type'\"\n              method.response.header.Access-Control-Allow-Origin: {\"Fn::If\": [\"IsLocal\", \"'*'\", {\"Fn::Sub\": [\"'https://master.${ampDomain}'\", { \"ampDomain\": {\"Fn::GetAtt\":[\"AmplifyApp\", \"DefaultDomain\"]} }]}]}\n        type: \"mock\"\n\n  /app/{linkId}:\n    ## Delete link\n    delete:\n      summary: Delete url\n      security:\n      - UserAuthorizer: []\n      x-amazon-apigateway-request-validator: params\n      parameters:\n        - $ref: '#/components/parameters/authHeader'\n        - $ref: '#/components/parameters/linkIdHeader'\n      responses:\n        \"200\":\n          description: \"200 response\"\n          headers:\n            Access-Control-Allow-Origin:\n              type: \"string\"\n        \"400\":\n          description: \"400 response\"\n      \n      ## AOI gateway integration\n      x-amazon-apigateway-integration:\n        credentials:\n          Fn::GetAtt: [ DDBCrudRole, Arn ]\n        uri: { \"Fn::Sub\": \"arn:aws:apigateway:${AWS::Region}:dynamodb:action/DeleteItem\" }\n        httpMethod: \"POST\"\n        requestTemplates:\n          application/json: { \"Fn::Sub\":  \"{\\\"Key\\\": {\\\"id\\\": {\\\"S\\\": \\\"$input.params().path.linkId\\\"}}, \\\n            \\\"TableName\\\": \\\"${LinkTable}\\\", \\\n            \\\"ConditionExpression\\\": \\\"#owner = :owner\\\", \\\n            \\\"ExpressionAttributeValues\\\":{\\\":owner\\\": {\\\"S\\\": \\\"$context.authorizer.claims.email\\\"}}, \\\n            \\\"ExpressionAttributeNames\\\": {\\\"#owner\\\": \\\"owner\\\"}}\" }\n        passthroughBehavior: \"when_no_templates\"\n        responses:\n          \"200\":\n            statusCode: \"200\"\n            responseParameters:\n              method.response.header.Access-Control-Allow-Origin: {\"Fn::If\": [\"IsLocal\", \"'*'\", {\"Fn::Sub\": [\"'https://master.${ampDomain}'\", { \"ampDomain\": {\"Fn::GetAtt\":[\"AmplifyApp\", \"DefaultDomain\"]} }]}]}\n          \"400\":\n            statusCode: \"400\"\n            responseTemplates:\n              application/json: \"{\\\"error\\\": {\\\"message\\\":\\\"Either you do not have permission to do this operation or a parameter is missing\\\"}}\"\n        type: \"aws\"\n    ## Update links\n    put:\n      summary: Update specific URL\n      security:\n      - UserAuthorizer: []\n      x-amazon-apigateway-request-validator: body\n      requestBody:\n        description: Optional description in *Markdown*\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PutBody'\n      parameters:\n        - $ref: '#/components/parameters/authHeader'\n        - $ref: '#/components/parameters/linkIdHeader'\n      responses:\n        \"200\":\n          description: \"301 response\"\n          headers:\n            Access-Control-Allow-Origin:\n              type: \"string\"\n        \"400\":\n          description: \"400 response\"\n          headers:\n            Access-Control-Allow-Origin:\n              type: \"string\"\n      \n      ## API gateway integration\n      x-amazon-apigateway-integration:\n        credentials:\n          Fn::GetAtt: [ DDBCrudRole, Arn ]\n        uri: { \"Fn::Sub\": \"arn:aws:apigateway:${AWS::Region}:dynamodb:action/UpdateItem\" }\n        httpMethod: \"POST\"\n        requestTemplates:\n          application/json: { \"Fn::Sub\": \"{\\\"TableName\\\": \\\"${LinkTable}\\\",\\\n            \\\"Key\\\": {\\\"id\\\": {\\\"S\\\": $input.json('$.id')}}, \\\n            \\\"ExpressionAttributeNames\\\": {\\\"#u\\\": \\\"url\\\", \\\"#owner\\\": \\\"owner\\\", \\\"#id\\\":\\\"id\\\"}, \\\n            \\\"ExpressionAttributeValues\\\":{\\\":u\\\": {\\\"S\\\": $input.json('$.url')}, \\\":owner\\\": {\\\"S\\\": \\\"$context.authorizer.claims.email\\\"}, \\\":linkId\\\":{\\\"S\\\":\\\"$input.params().path.linkId\\\"}}, \\\n            \\\"UpdateExpression\\\": \\\"SET #u = :u\\\", \\\n            \\\"ReturnValues\\\": \\\"ALL_NEW\\\", \\\n            \\\"ConditionExpression\\\": \\\"#owner = :owner AND #id = :linkId\\\"}\" }\n        passthroughBehavior: \"when_no_templates\"\n        responses:\n          \"200\":\n            statusCode: \"200\"\n            responseParameters:\n              method.response.header.Access-Control-Allow-Origin: {\"Fn::If\": [\"IsLocal\", \"'*'\", {\"Fn::Sub\": [\"'https://master.${ampDomain}'\", { \"ampDomain\": {\"Fn::GetAtt\":[\"AmplifyApp\", \"DefaultDomain\"]} }]}]}\n            responseTemplates:\n              application/json: \"#set($inputRoot = $input.path('$')) \\\n                {\\\"id\\\":\\\"$inputRoot.Attributes.id.S\\\", \\\n                \\\"url\\\":\\\"$inputRoot.Attributes.url.S\\\",\n                \\\"timestamp\\\":\\\"$inputRoot.Attributes.timestamp.S\\\", \\\n                \\\"owner\\\":\\\"$inputRoot.Attributes.owner.S\\\"}\"\n          \"400\":\n            statusCode: \"400\"\n            responseParameters:\n              method.response.header.Access-Control-Allow-Origin: {\"Fn::If\": [\"IsLocal\", \"'*'\", {\"Fn::Sub\": [\"'https://master.${ampDomain}'\", { \"ampDomain\": {\"Fn::GetAtt\":[\"AmplifyApp\", \"DefaultDomain\"]} }]}]}\n            application/json: \"{\\\"error\\\": {\\\"message\\\":\\\"Either you do not have permission to do this operation or a parameter is missing\\\"}}\"\n        type: \"aws\"\n    options:\n      responses:\n        \"200\":\n          description: \"200 response\"\n          headers:\n            Access-Control-Allow-Origin:\n              schema:\n                type: \"string\"\n            Access-Control-Allow-Methods:\n              schema:\n                type: \"string\"\n            Access-Control-Allow-Headers:\n              schema:\n                type: \"string\"\n      x-amazon-apigateway-integration:\n        requestTemplates:\n          application/json: \"{\\\"statusCode\\\" : 200}\"\n        passthroughBehavior: \"when_no_match\"\n        responses:\n          default:\n            statusCode: \"200\"\n            responseParameters:\n              method.response.header.Access-Control-Allow-Methods: \"'PUT, DELETE, OPTIONS'\"\n              method.response.header.Access-Control-Allow-Headers: \"'authorization, content-type'\"\n              method.response.header.Access-Control-Allow-Origin: {\"Fn::If\": [\"IsLocal\", \"'*'\", {\"Fn::Sub\": [\"'https://master.${ampDomain}'\", { \"ampDomain\": {\"Fn::GetAtt\":[\"AmplifyApp\", \"DefaultDomain\"]} }]}]}\n        type: \"mock\"\n\n## Validation models\ncomponents:\n  schemas:\n    PostBody:\n      type: object\n      properties:\n        id:\n          type: string\n        url:\n          type: string\n          pattern: ^https?://[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)\n      required:\n        - id\n        - url\n    PutBody:\n      type: object\n      properties:\n        id:\n          type: string\n        url:\n          type: string\n          pattern: /((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=\\+\\$,\\w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=\\+\\$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[\\+~%\\/.\\w-_]*)?\\??(?:[-\\+=&;%@.\\w_]*)#?(?:[\\w]*))?)/\n        timestamp:\n          type: string\n        owner:\n          type: string\n      required:\n        - id\n        - url\n        - timestamp\n        - owner\n  parameters:\n    authHeader:\n      in: header\n      name: Authorization\n      required: true\n      description: Contains authorization token\n      schema:\n        type: string\n    linkIdHeader:\n      in: path\n      name: linkId\n      required: true\n      description: Short link ID for full URL\n      schema:\n        type: string\n\n## Authorizer definition\nsecurityDefinitions:\n  UserAuthorizer:\n    type: \"apiKey\"\n    name: \"Authorization\"\n    in: \"header\"\n    x-amazon-apigateway-authtype: \"cognito_user_pools\"\n    x-amazon-apigateway-authorizer:\n      providerARNs:\n      - Fn::GetAtt: [ UserPool, Arn ]\n      type: \"cognito_user_pools\"\n",
			"canonicalURL": "/github.com/aws-samples/amazon-api-gateway-url-shortener@1b0577c6841aa8369787c92b2af5e85a986ef716/-/blob/api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/aws-samples/amazon-api-gateway-url-shortener/blob/1b0577c6841aa8369787c92b2af5e85a986ef716/api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/app\": at 1:1020: get: at 1:1027: responses: 200: at 1:1108: headers: header \"Access-Control-Allow-Origin\": at 1:1179: parameter MUST contain either a schema property, or a content property"
}