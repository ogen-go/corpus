{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/nilscodes/hazelnet"
		},
		"file": {
			"name": "hazelnet-connect-openapi.yml",
			"size": 0,
			"path": "hazelnet-cardano-connect/src/main/resources/hazelnet-connect-openapi.yml",
			"byteSize": 17623,
			"content": "openapi: 3.0.0\ninfo:\n  version: '0.0.1'\n  title: 'HazelNet Cardano Connect'\nservers:\n  - url: 'localhost:8086'\npaths:\n  /wallets/{walletAddress}:\n    get:\n      summary: 'Returns address details for a given wallet address'\n      operationId: walletInfo\n      tags:\n        - wallets\n      parameters:\n        - name: walletAddress\n          in: path\n          description: The wallet address (Byron or Shelley era) to retrieve details for\n          required: true\n          style: simple\n          schema:\n            type: string\n            example: 1\n      responses:\n        '200':\n          description: 'Address details'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AddressDetails'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /handles/{handleName}:\n    get:\n      summary: 'Resolve a an ADA handle to an address, if possible'\n      operationId: resolveHandle\n      tags:\n        - handles\n        - addresses\n      parameters:\n        - name: handleName\n          in: path\n          description: The handle name to details retrieve for\n          required: true\n          style: simple\n          schema:\n            type: string\n            example: hazelnet\n      responses:\n        '200':\n          description: 'Handle details'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Handle'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /verification/{walletAddress}:\n    get:\n      summary: 'Verify if a transaction with a given amount has been done to this address from the same wallet'\n      operationId: verifyWalletAddress\n      tags:\n        - verification\n      parameters:\n        - name: walletAddress\n          in: path\n          description: The wallet address (Byron or Shelley era) to verify\n          required: true\n          style: simple\n          schema:\n            type: string\n            example: 1\n        - name: verificationAmount\n          in: query\n          description: The amount that has to have been sent to the address to verify\n          required: true\n          schema:\n            type: number\n            format: int64\n            example: 1\n        - name: earliestBlockTime\n          in: query\n          description: The earliest block time to consider for transaction with this amount\n          required: true\n          schema:\n            type: string\n            format: date-time\n            example: 2021-11-10T13:20:57Z\n      responses:\n        '200':\n          description: 'Sample response: Details about a user by ID'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /stakepools:\n    get:\n      summary: Get a list of stakepools, optionally filtered by parameters\n      operationId: listStakepools\n      tags:\n        - stakepools\n      parameters:\n        - name: poolView\n          in: query\n          description: The pool view string to resolve search the pool by\n          required: false\n          schema:\n            $ref: '#/components/schemas/StakepoolView'\n        - name: poolHash\n          in: query\n          description: The pool hash string to resolve search the pool by\n          required: false\n          schema:\n            $ref: '#/components/schemas/StakepoolHash'\n      responses:\n        '200':\n          description: 'A list of pools'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/StakepoolInfo'\n  /stakepools/{poolHash}/delegation:\n    get:\n      summary: Get the active delegation (i.e. current delegation) of a pool for a given epoch\n      operationId: getActiveDelegation\n      tags:\n        - stakepools\n      parameters:\n        - $ref: '#/components/parameters/PoolHashPathParameter'\n      responses:\n        '200':\n          description: 'A list of all active delegations'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DelegationInfo'\n  /stakepools/{poolHash}/delegation/{epochNo}:\n    get:\n      summary: Get the delegation (i.e. delegation snapshot) of a pool for a given epoch\n      operationId: getDelegationInEpoch\n      tags:\n        - stakepools\n      parameters:\n        - $ref: '#/components/parameters/PoolHashPathParameter'\n        - $ref: '#/components/parameters/EpochNumberPathParameter'\n      responses:\n        '200':\n          description: 'A list of delegations at the snapshot time'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DelegationInfo'\n  /token/stake:\n    post:\n      summary: Get the policy IDs and token counts that currently reside in all stake addresses, for the policy IDs/fingerprint combinations in the body\n      operationId: getMultiAssetCountStakeSnapshot\n      tags:\n        - token\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/TokenPolicyIdWithOptionalAssetFingerprint'\n      responses:\n        '200':\n          description: 'A filtered list of token policies and associated counts currently owned by the stake address'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/TokenOwnershipInfoWithAssetCount'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /token/stake/{stakeAddress}:\n    post:\n      summary: Get the policy IDs and token counts that currently reside in a stake address, filtered by the policy IDs in the body (or all, if empty list)\n      operationId: getMultiAssetCountsForStakeAddress\n      tags:\n        - token\n      parameters:\n        - $ref: '#/components/parameters/StakeAddressPathParameter'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/TokenPolicyIdWithOptionalAssetFingerprint'\n      responses:\n        '200':\n          description: 'A filtered list of token policies and associated counts currently owned by the stake address'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/TokenOwnershipInfoWithAssetCount'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /token/stake/{stakeAddress}/besthandle:\n    get:\n      summary: 'Find the most distinctive handle belonging to a stake address'\n      operationId: findBestHandleForStakeAddress\n      tags:\n        - handles\n        - addresses\n        - token\n      parameters:\n        - $ref: '#/components/parameters/StakeAddressPathParameter'\n      responses:\n        '200':\n          description: 'Handle details'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Handle'\n  /token/stake/{stakeAddress}/handles:\n    get:\n      summary: 'Find all handles belonging to a stake address. Does not resolve the handles for the list!'\n      operationId: findHandlesForStakeAddress\n      tags:\n        - handles\n        - addresses\n        - token\n      parameters:\n        - $ref: '#/components/parameters/StakeAddressPathParameter'\n      responses:\n        '200':\n          description: 'Handle details'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Handle'\n  /token/stake/{stakeAddress}/assets:\n    post:\n      summary: Get the policy IDs and token names that currently reside in a stake address, filtered by the policy IDs in the body (or all, if empty list)\n      operationId: getMultiAssetListForStakeAddress\n      tags:\n        - token\n      parameters:\n        - $ref: '#/components/parameters/StakeAddressPathParameter'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/TokenPolicyIdWithOptionalAssetFingerprint'\n      responses:\n        '200':\n          description: 'A filtered list of token policies and associated asset names currently owned by the stake address'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/TokenOwnershipInfoWithAssetList'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /token/assets/{policyId}/{assetNameHex}:\n    get:\n      summary: Get the information and metadata for a multi asset\n      operationId: getMultiAssetInfo\n      tags:\n        - token\n      parameters:\n        - $ref: '#/components/parameters/PolicyIdPathParameter'\n        - $ref: '#/components/parameters/AssetNameHexPathParameter'\n      responses:\n        '200':\n          description: 'The data and metadata for this asset'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MultiAssetInfo'\n  /token/fingerprints/{assetFingerprint}:\n    get:\n      summary: Get the wallet this multi asset resides in\n      operationId: getWalletForAsset\n      tags:\n        - token\n        - wallets\n      parameters:\n        - $ref: '#/components/parameters/AssetFingerprintPathParameter'\n      responses:\n        '200':\n          description: 'The wallet info associated with this asset'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WalletAddress'\n  /info/syncstatus:\n    get:\n      summary: 'Get Synchronization details for Cardano-DB-Sync connected to this HazelNet'\n      operationId: syncStatus\n      tags:\n        - info\n      responses:\n        '200':\n          description: 'Sample response: Details about a user by ID'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SyncStatus'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\ncomponents:\n  parameters:\n    PoolHashPathParameter:\n      name: poolHash\n      in: path\n      description: The Stakepool hash\n      required: true\n      style: simple\n      example: be80794a946cf5e578846fc81e3c62ac13f4ab3335e0f5dc046edad4\n      schema:\n        $ref: '#/components/schemas/StakepoolHash'\n    PolicyIdPathParameter:\n      name: policyId\n      in: path\n      description: The policy ID\n      required: true\n      style: simple\n      example: ceb5dedd6cda3f0b4a98919b5d3827e15e324771642b57e0e6aabd57\n      schema:\n        $ref: '#/components/schemas/TokenPolicyId'\n    AssetFingerprintPathParameter:\n      name: assetFingerprint\n      in: path\n      description: The bech32 encoded asset fingerprint\n      required: true\n      style: simple\n      schema:\n        $ref: '#/components/schemas/AssetFingerprint'\n    AssetNameHexPathParameter:\n      name: assetNameHex\n      in: path\n      description: The hex-encoded name of the asset\n      required: true\n      style: simple\n      example: 4d616368696e65486561647a373536\n      schema:\n        $ref: '#/components/schemas/TokenAssetName'\n    StakeAddressPathParameter:\n      name: stakeAddress\n      in: path\n      description: The staking address of a wallet in view format\n      required: true\n      style: simple\n      schema:\n        $ref: '#/components/schemas/StakeAddressView'\n    EpochNumberPathParameter:\n      name: epochNo\n      in: path\n      description: The epoch number\n      required: true\n      style: simple\n      example: 309\n      schema:\n        $ref: '#/components/schemas/EpochNumber'\n  schemas:\n    AddressDetails:\n      type: object\n      properties:\n        stakeAddress:\n          $ref: '#/components/schemas/StakeAddressView'\n    Handle:\n      type: object\n      properties:\n        handle:\n          $ref: '#/components/schemas/HandleName'\n        address:\n          $ref: '#/components/schemas/WalletAddress'\n        resolved:\n          type: boolean\n    StakepoolInfo:\n      type: object\n      required:\n        - hash\n        - view\n        - ticker\n        - name\n      properties:\n        hash:\n          type: string\n          pattern: '^[_A-Z0-9]{56}$'\n        view:\n          type: string\n        ticker:\n          type: string\n        name:\n          type: string\n        website:\n          type: string\n        description:\n          type: string\n    DelegationInfo:\n      type: object\n      required:\n        - poolHash\n        - amount\n        - stakeAddress\n      properties:\n        poolHash:\n          $ref: '#/components/schemas/StakepoolHash'\n        amount:\n          type: integer\n          format: int64\n        stakeAddress:\n          $ref: '#/components/schemas/StakeAddressView'\n    TokenOwnershipInfoWithAssetCount:\n      type: object\n      required:\n        - stakeAddress\n        - policyId\n        - assetCount\n      properties:\n        stakeAddress:\n          $ref: '#/components/schemas/StakeAddressView'\n        policyId:\n          $ref: '#/components/schemas/TokenPolicyId'\n        assetCount:\n          type: integer\n          format: int64\n    TokenOwnershipInfoWithAssetList:\n      type: object\n      required:\n        - stakeAddress\n        - policyId\n        - assetCount\n      properties:\n        stakeAddress:\n          $ref: '#/components/schemas/StakeAddressView'\n        policyId:\n          $ref: '#/components/schemas/TokenPolicyId'\n        assetList:\n          type: array\n          items:\n            $ref: '#/components/schemas/AssetName'\n    MultiAssetInfo:\n      type: object\n      required:\n        - policyId\n        - assetName\n        - assetFingerprint\n        - metadata\n        - mintTransaction\n        - quantity\n      properties:\n        policyId:\n          $ref: '#/components/schemas/TokenPolicyId'\n        assetName:\n          type: string\n        assetFingerprint:\n          $ref: '#/components/schemas/AssetFingerprint'\n        metadata:\n          type: object\n        mintTransaction:\n          type: string\n        quantity:\n          type: integer\n          format: int64\n    SyncStatus:\n      type: object\n      required:\n        - currentEpoch\n        - lastSyncSeconds\n        - name\n      properties:\n        currentEpoch:\n          type: integer\n          format: int32\n        lastSyncSeconds:\n          type: integer\n          format: int64\n        syncPercentage:\n          type: number\n          format: double\n    HandleName:\n      type: string\n      example: hazelnet\n      pattern: '^[-._a-zA-Z0-9]{1,15}$'\n    WalletAddress:\n      type: string\n    StakepoolHash:\n      type: string\n      description: The Stakepool hash\n      example: be80794a946cf5e578846fc81e3c62ac13f4ab3335e0f5dc046edad4\n      pattern: '^[_A-Za-z0-9]{56}$'\n    StakeAddressView:\n      type: string\n      description: The staking address of a wallet, in viewable format\n      example: stake1uyhvepgdsd7s07q5cdx9vdemnar4axpe0e9edw2chyd8dpgqnsffq\n      pattern: '^stake1[a-zA-Z0-9]{53}$'\n    StakepoolView:\n      type: string\n      description: The pool ID, in viewable format\n      example: pool1h5jtxde8j86qrnqzj32ugn480u7gw5xw8wqy5d227rl3vfg58qz\n      pattern: '^pool1[a-zA-Z0-9]{51}$'\n    TokenPolicyId:\n      type: string\n      description: The Policy ID\n      example: ceb5dedd6cda3f0b4a98919b5d3827e15e324771642b57e0e6aabd57\n      pattern: '^[A-Za-z0-9]{56}$'\n    TokenAssetName:\n      type: string\n      description: The hex-encoded asset name\n      example: 4d616368696e65486561647a373536\n      pattern: '^[A-Za-z0-9]*$'\n    TokenPolicyIdWithOptionalAssetFingerprint:\n      type: string\n      description: The Policy ID with an optional asset fingerprint appended\n      example: ceb5dedd6cda3f0b4a98919b5d3827e15e324771642b57e0e6aabd57asset1ls9tt8s03x2gcqjyppx346ct64jts7fnwsmequ\n      pattern: '^[A-Za-z0-9]{56}(asset1[A-Za-z-0-9]{38})?$'\n    AssetFingerprint:\n      type: string\n      description: The fingerprint of an asset\n      example: asset1ls9tt8s03x2gcqjyppx346ct64jts7fnwsmequ\n      pattern: '^asset1[A-Za-z-0-9]{38}$'\n    AssetName:\n      type: string\n      description: The name of an asset\n      example: PXL500\n    EpochNumber:\n      type: integer\n      format: int32\n    Error:\n      type: object\n      required:\n        - code\n        - message\n      properties:\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string",
			"canonicalURL": "/github.com/nilscodes/hazelnet@e0ee5594c43a90de945614b21adb0a0bc9c1d0a9/-/blob/hazelnet-cardano-connect/src/main/resources/hazelnet-connect-openapi.yml",
			"externalURLs": [
				{
					"url": "https://github.com/nilscodes/hazelnet/blob/e0ee5594c43a90de945614b21adb0a0bc9c1d0a9/hazelnet-cardano-connect/src/main/resources/hazelnet-connect-openapi.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/verification/{walletAddress}\": get: operation \"verifyWalletAddress\": responses: 200: content: application/json: schema: parse schema: at 1:13160: find schema: resolve: can't find value for \"components/schemas/User\""
}