{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/moov-io/imagecashletter"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi.yaml",
			"byteSize": 122598,
			"content": "openapi: 3.0.2\ninfo:\n  description: Moov Image Cash Letter (ICL) implements an HTTP API for creating, parsing, and validating ImageCashLetter files.\n  version: v1\n  title: ImageCashLetter API\n  contact:\n    url: https://github.com/moov-io/imagecashletter\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\nservers:\n  - url: http://localhost:8083\n    description: Local development\n\ntags:\n  - name: 'Image Cash Letter Files'\n    description: |\n      Files contain ImageCashLetter Cash Letters and Bundles.\npaths:\n  /ping:\n    get:\n      tags: ['Image Cash Letter Files']\n      summary: Ping ImageCashLetter service\n      operationId: ping\n      responses:\n        '200':\n          description: Service is running properly\n  /files:\n    get:\n      tags: ['Image Cash Letter Files']\n      summary: List files\n      operationId: getICLFiles\n      security:\n        - bearerAuth: []\n        - cookieAuth: []\n      parameters:\n        - name: X-Request-ID\n          in: header\n          description: Optional Request ID allows application developer to trace requests through the system's logs\n          example: rs4f9915\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A list of File objects\n          headers:\n            X-Total-Count:\n              description: The total number of Originators\n              schema:\n                type: integer\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ICLFiles'\n  /files/create:\n    post:\n      tags: ['Image Cash Letter Files']\n      summary: Create file\n      operationId: createICLFile\n      security:\n        - bearerAuth: []\n        - cookieAuth: []\n      parameters:\n        - name: X-Request-ID\n          in: header\n          description: Optional Request ID allows application developer to trace requests through the system's logs\n          example: rs4f9915\n          schema:\n            type: string\n        - name: X-Idempotency-Key\n          in: header\n          description: Idempotent key in the header which expires after 24 hours. These strings should contain enough entropy to not collide with each other in your requests.\n          example: a4f88150\n          required: false\n          schema:\n            type: string\n      requestBody:\n        description: Content of the ImageCashLetter file (in json or raw text)\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateICLFile'\n          text/plain:\n            schema:\n              $ref: '#/components/schemas/RawICLFile'\n      responses:\n        '201':\n          description: A JSON object containing a new File\n          headers:\n            Location:\n              description: The location of the new resource\n              schema:\n                type: string\n                format: uri\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ICLFile'\n        '400':\n          description: \"Invalid File Header Object\"\n          content:\n            application/json:\n              schema:\n                $ref: 'https://raw.githubusercontent.com/moov-io/base/master/api/common.yaml#/components/schemas/Error'\n  /files/{fileID}:\n    get:\n      tags: ['Image Cash Letter Files']\n      summary: Retrieve file\n      description: Retrieves the details of an existing File. You need only supply the unique File identifier that was returned upon creation.\n      operationId: getICLFileByID\n      security:\n        - bearerAuth: []\n        - cookieAuth: []\n      parameters:\n        - name: X-Request-ID\n          in: header\n          description: Optional Request ID allows application developer to trace requests through the system's logs\n          example: rs4f9915\n          schema:\n            type: string\n        - name: fileID\n          in: path\n          description: File ID\n          required: true\n          schema:\n            type: string\n            example: 3f2d23ee214\n      responses:\n        '200':\n          description: A File object for the supplied ID\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ICLFile'\n        '404':\n          description: A resource with the specified ID was not found\n    post:\n      tags: ['Image Cash Letter Files']\n      summary: Update file header\n      description: Updates the specified File Header by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n      operationId: updateICLFile\n      security:\n        - bearerAuth: []\n        - cookieAuth: []\n      parameters:\n        - name: X-Request-ID\n          in: header\n          description: Optional Request ID allows application developer to trace requests through the system's logs\n          example: rs4f9915\n          schema:\n            type: string\n        - name: X-Idempotency-Key\n          in: header\n          description: Idempotent key in the header which expires after 24 hours. These strings should contain enough entropy to not collide with each other in your requests.\n          example: a4f88150\n          required: false\n          schema:\n            type: string\n        - name: fileID\n          in: path\n          description: File ID\n          required: true\n          schema:\n            type: string\n            example: 3f2d23ee214\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ICLFileHeader'\n      responses:\n        '201':\n          description: A JSON object containing a new File\n          headers:\n            Location:\n              description: The location of the new resource\n              schema:\n                type: string\n                format: uri\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ICLFile'\n        '400':\n          description: \"Invalid File Header Object\"\n          content:\n            application/json:\n              schema:\n                $ref: 'https://raw.githubusercontent.com/moov-io/base/master/api/common.yaml#/components/schemas/Error'\n    delete:\n      tags: ['Image Cash Letter Files']\n      summary: Delete file\n      description: Permanently deletes a File and associated CashLetters and Bundles. It cannot be undone.\n      operationId: deleteICLFile\n      security:\n        - bearerAuth: []\n        - cookieAuth: []\n      parameters:\n        - name: fileID\n          in: path\n          description: File ID\n          required: true\n          schema:\n            type: string\n            example: 3f2d23ee214\n        - name: X-Request-ID\n          in: header\n          description: Optional Request ID allows application developer to trace requests through the system's logs\n          example: rs4f9915\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Permanently deleted File.\n        '400':\n          description: A problem was encountered deleting the file, check errors.\n  /files/{fileID}/contents:\n    get:\n      tags: ['Image Cash Letter Files']\n      summary: Get file contents\n      description: Assembles the existing file records (Cash Letters, Bundles, and Controls), computes sequence numbers and totals. Returns plaintext file.\n      operationId: getICLFileContents\n      security:\n        - bearerAuth: []\n        - cookieAuth: []\n      parameters:\n        - name: X-Request-ID\n          in: header\n          description: Optional Request ID allows application developer to trace requests through the system's logs\n          example: rs4f9915\n          schema:\n            type: string\n        - name: fileID\n          in: path\n          description: File ID\n          required: true\n          schema:\n            type: string\n            example: 3f2d23ee214\n      responses:\n        '200':\n          description: File built successfully without errors.\n          content:\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/RawICLFile'\n        '400':\n          description: A problem was encountered getting the file, check errors.\n  /files/{fileID}/validate:\n    get:\n      tags: ['Image Cash Letter Files']\n      summary: Validate file\n      description: Validates the existing file. You need only supply the unique File identifier that was returned upon creation.\n      operationId: validateICLFile\n      security:\n        - bearerAuth: []\n        - cookieAuth: []\n      parameters:\n        - name: X-Request-ID\n          in: header\n          description: Optional Request ID allows application developer to trace requests through the system's logs\n          example: rs4f9915\n          schema:\n            type: string\n        - name: fileID\n          in: path\n          description: File ID\n          required: true\n          schema:\n            type: string\n            example: 3f2d23ee214\n      responses:\n        '200':\n          description: File validated successfully without errors.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ICLFile'\n        '400':\n          description: Validation failed. Check response for errors\n  /files/{fileID}/cashLetters:\n    post:\n      tags: ['Image Cash Letter Files']\n      summary: Add cash letter to file\n      operationId: addICLToFile\n      security:\n        - bearerAuth: []\n        - cookieAuth: []\n      parameters:\n        - name: X-Request-ID\n          in: header\n          description: Optional Request ID allows application developer to trace requests through the system's logs\n          example: rs4f9915\n          schema:\n            type: string\n        - name: X-Idempotency-Key\n          in: header\n          description: Idempotent key in the header which expires after 24 hours. These strings should contain enough entropy to not collide with each other in your requests.\n          example: a4f88150\n          required: false\n          schema:\n            type: string\n        - name: fileID\n          in: path\n          description: File ID\n          required: true\n          schema:\n            type: string\n            example: 3f2d23ee214\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CashLetter'\n      responses:\n        '200':\n          description: CashLetter added to File\n  /files/{fileID}/cashLetters/{cashLetterID}:\n    delete:\n      tags: ['Image Cash Letter Files']\n      summary: Delete cash letter from file\n      operationId: deleteICLFromFile\n      security:\n        - bearerAuth: []\n        - cookieAuth: []\n      parameters:\n        - name: X-Request-ID\n          in: header\n          description: Optional Request ID allows application developer to trace requests through the system's logs\n          example: rs4f9915\n          schema:\n            type: string\n        - name: fileID\n          in: path\n          description: File ID\n          required: true\n          schema:\n            type: string\n            example: 3f2d23ee214\n        - name: cashLetterID\n          in: path\n          description: CashLetter ID\n          required: true\n          schema:\n            type: string\n            example: 45758063\n      responses:\n        '200':\n          description: CashLetter deleted\n        '404':\n          description: CashLetter or File not found\n\ncomponents:\n  schemas:\n    CreateICLFile:\n      properties:\n        ID:\n          type: string\n          description: File ID\n          example: 3f2d23ee214\n        fileHeader:\n          $ref: '#/components/schemas/ICLFileHeader'\n        cashLetters:\n          type: array\n          items:\n            $ref: '#/components/schemas/CashLetter'\n        bundles:\n          type: array\n          items:\n            $ref: '#/components/schemas/Bundle'\n        fileControl:\n          $ref: '#/components/schemas/ICLFileControl'\n      required:\n        - fileHeader\n    ICLFile:\n      properties:\n        ID:\n          type: string\n          description: File ID\n          example: 3f2d23ee214\n        fileHeader:\n          $ref: '#/components/schemas/ICLFileHeader'\n        cashLetters:\n          type: array\n          items:\n            $ref: '#/components/schemas/CashLetter'\n        bundles:\n          type: array\n          items:\n            $ref: '#/components/schemas/Bundle'\n        fileControl:\n          $ref: '#/components/schemas/ICLFileControl'\n    ICLFileHeader:\n      properties:\n        ID:\n          description: FileHeader ID\n          type: string\n          example: d1e26288\n        standardLevel:\n          type: string\n          maxLength: 2\n          enum:\n            - '03'\n            - '30'\n            - '35'\n          description: |\n            StandardLevel identifies the standard level of the file.\n\n            * `03` - DSTU X9.37-2003\n            * `30` - X9.100-187-2008\n            * `35` - X9.100-187-2013 and X9.100-187-2016\n          example: '35'\n        testIndicator:\n          type: string\n          maxLength: 1\n          enum:\n            - 'T'\n            - 'P'\n          description: |\n            TestIndicator identifies whether the file is a test or production file.\n\n            * `T` - Test File\n            * `P` - Production File\n          example: 'P'\n        immediateDestination:\n          type: string\n          maxLength: 9\n          description: |\n            ImmediateDestination is the routing and transit number of the Federal Reserve Bank (FRB)\n            or receiver to which the file is being sent.\n          example: '231380102'\n        immediateOrigin:\n          type: string\n          maxLength: 9\n          description: |\n            ImmediateOrigin is the routing and transit number of the Federal Reserve Bank (FRB)\n            or originator from which the file is being sent.\n          example: '201982859'\n        fileCreationDate:\n          type: string\n          format: 'date-time'\n          description: FileCreationDate is the date the immediate origin institution creates the file.\n          example: '2020-10-23T00:00:00Z'\n        fileCreationTime:\n          type: string\n          format: 'date-time'\n          description: FileCreationTime is the time the immediate origin institution creates the file.\n          example: '0000-01-01T09:11:00Z'\n        resendIndicator:\n          type: string\n          maxLength: 1\n          description: ResendIndicator indicates whether the file has been previously transmitted. (Y - Yes, N - No)\n          example: 'Y'\n        immediateDestinationName:\n          type: string\n          maxLength: 18\n          description: ImmediateDestinationName identifies the short name of the institution that receives the file.\n          example: 'ABC Bank'\n        immediateOriginName:\n          type: string\n          maxLength: 18\n          description: immediateOriginName identifies the short name of the institution that sends the file.\n          example: 'Bank One'\n        fileIDModifier:\n          type: string\n          maxLength: 1\n          description: |\n            FileIDModifier is a code that permits multiple files, created on the same date, at the same time, and sent between the\n            same institutions, to be distinguished from one another. If FileHeader ImmediateDestination, ImmediateOrigin, FileCreationDate, and\n            FileCreationTime in a previous file are equal to the same fields in this file, FileIDModifier must be defined.\n          example: 'A'\n        countryCode:\n          type: string\n          maxLength: 2\n          description: |\n            CountryCode is a 2-character code as approved by the International Organization for Standardization (ISO) used\n            to identify the country in which the payer bank is located.\n          example: 'US'\n        userField:\n          type: string\n          maxLength: 4\n          description: UserField identifies a field used at the discretion of users of the standard.\n          example: 'ZZZZ'\n        companionDocumentIndicator:\n          type: string\n          maxLength: 1\n          description: |\n            CompanionDocumentIndicator indicates the Companion Document being used.\n            It shall be present only under clearing arrangements, where Companion Document usage and values are\n            defined.\n            Values:\n            * 0–9 - Reserved for United States use\n            * A–J - Reserved for Canadian use\n            * Other - Defined by clearing arrangements\n          example: '1'\n      required:\n        - standardLevel\n        - testFileIndicator\n        - resendIndicator\n        - immediateDestination\n        - immediateOrigin\n        - fileCreationDate\n        - fileCreationTime\n    ICLFileControl:\n      properties:\n        ID:\n          type: string\n          description: FileControl ID\n          example: 'd1e26288'\n        cashLetterCount:\n          type: integer\n          description: CashLetterCount identifies the total number of cash letters within the file.\n          example: 1\n        totalRecordCount:\n          type: integer\n          description: TotalRecordCount identifies the total number of records of all types sent in the file, including the FileControl.\n          example: 1\n        totalItemCount:\n          type: integer\n          description: totalItemCount identifies the total number of Items sent within the file.\n          example: 5\n        fileTotalAmount:\n          type: integer\n          description: FileTotalAmount identifies the total Item amount of the complete file.\n          example: 100\n        immediateOriginContactName:\n          type: string\n          maxLength: 14\n          description: immediateOriginContactName identifies a contact at the institution that creates the file.\n          example: 'John Smith'\n        immediateOriginContactPhoneNumber:\n          type: string\n          maxLength: 10\n          description: ImmediateOriginContactPhoneNumber identifies the phone number of the contact at the institution that creates the file.\n          example: '555-555-1212'\n        creditTotalIndicator:\n          type: integer\n          enum:\n            - 0\n            - 1\n          description: |\n            CreditTotalIndicator is a code that indicates whether Credit Items are included in this record’s totals. If so, they will be included in TotalItemCount and FileTotalAmount.\n            TotalRecordCount includes all records of all types regardless of the value of this field.\n            * ` ` - No Credit Items\n            * `0` - Credit Items are not included in totals\n            * `1` - Credit Items are included in totals\n          example: 1\n      required:\n        - cashLetterCount\n        - totalRecordCount\n        - totalItemCount\n        - fileTotalAmount\n    RawICLFile:\n      type: string\n      description: A plaintext ImageCashLetter file. See our test files or examples for a complete ICL/X9 file.\n      example: |\n        0135T061000146026073150202010230911NWave Money        Wave Money        1      1\n        9900000100000012000000010000000000010000                        0\n    ICLFiles:\n      type: array\n      items:\n        $ref: '#/components/schemas/ICLFile'\n    CashLetter:\n      properties:\n        cashLetterHeader:\n          $ref: '#/components/schemas/CashLetterHeader'\n        # Current Implementation: CreditItem(s) Precede Check(s) - CreditItem(s) outside the leading Bundle\n        # and Within the First Cash Letter.  Please adjust reader and writer, and openAPI for your specific clearing arrangement\n        # implementation or contact MOOV for your particular implementation.\n        creditItems:\n          type: array\n          items:\n            $ref: '#/components/schemas/CreditItem'\n        bundles:\n          type: array\n          items:\n            $ref: '#/components/schemas/Bundle'\n        routingNumberSummary:\n          type: array\n          items:\n            $ref: '#/components/schemas/RoutingNumberSummary'\n        cashLetterControl:\n          $ref: '#/components/schemas/CashLetterControl'\n    CashLetterHeader:\n      properties:\n        ID:\n          description: CashLetterHeader ID\n          type: string\n          example: 'd1e26288'\n        collectionTypeIndicator:\n          type: string\n          maxLength: 2\n          enum:\n            - '00'\n            - '01'\n            - '02'\n            - '03'\n            - '04'\n            - '05'\n            - '06'\n            - '20'\n            - '99'\n          description: |\n            CollectionTypeIndicator is a code that identifies the type of cash letter.\n\n            * `00` - Preliminary Forward Information\n            * `01` - Forward Presentment\n            * `02` - Forward Presentment - Same-Day Settlement\n            * `03` - Return\n            * `04` - Return Notification\n            * `05` - Preliminary Return Notification\n            * `06` - Final Return Notification\n            * `20` - No Detail\n            * `99` - Bundles not the same collection type. Use of the value is only allowed by clearing arrangement.\n          example:\n            '00'\n        destinationRoutingNumber:\n          type: string\n          maxLength: 9\n          description: DestinationRoutingNumber is the routing and transit number of the institution that receives and processes the cash letter or the bundle.\n          example: '999282654'\n        eCEInstitutionRoutingNumber:\n          type: string\n          maxLength: 9\n          description: ECEInstitutionRoutingNumber is the routing and transit number of the institution that creates the Cash Letter Header record.\n          example : '217876527'\n        cashLetterBusinessDate:\n          type: string\n          format: 'date-time'\n          description: cashLetterBusinessDate is the business date of the cash letter.\n          example: '2020-10-23T00:00:00Z'\n        cashLetterCreationDate:\n          type: string\n          format: 'date-time'\n          description: cashLetterCreationDate is the date that the cash letter is created.\n          example: '2020-10-23T00:00:00Z'\n        cashLetterCreationTime:\n          type: string\n          format: 'date-time'\n          description: CashLetterCreationTime is the time that the cash letter is created.\n          example: '0000-01-01T09:11:00Z'\n        recordTypeIndicator:\n          type: string\n          maxLength: 1\n          enum:\n            - 'N'\n            - 'E'\n            - 'I'\n            - 'F'\n          description: |\n            RecordTypeIndicator is a code that indicates the presence of records or the type of records contained in the cash letter.\n            If an image is associated with any Check or Return, the cash letter must have a RecordTypeIndicator of I or F.\n\n            * `N` - No electronic check records or image records (Type 2x’s, 3x’s, 5x’s); e.g., an empty cash letter.\n            * `E` - Cash letter contains electronic check records with no images (Type 2x’s and 3x’s only).\n            * `I` - Cash letter contains electronic check records (Type 2x’s, 3x’s) and image records (Type 5x’s).\n            * `F` - Cash letter contains electronic check records (Type 2x’s and 3x’s) and image records (Type 5x’s)\n            that correspond to a previously sent cash letter (i.e., E file).\n          example: 'I'\n        documentationTypeIndicator:\n          type: string\n          maxLength: 1\n          enum:\n            - 'A'\n            - 'B'\n            - 'C'\n            - 'D'\n            - 'E'\n            - 'F'\n            - 'G'\n            - 'H'\n            - 'I'\n            - 'J'\n            - 'K'\n            - 'L'\n            - 'M'\n            - 'Z'\n          description: |\n            DocumentationTypeIndicator is a code that indicates the type of documentation that supports all check records in the cash letter.\n\n            * `A` - No image provided, paper provided separately\n            * `B` - No image provided, paper provided separately, image upon request\n            * `C` - Image provided separately, no paper provided\n            * `D` - Image provided separately, no paper provided, image upon request\n            * `E` - Image and paper provided separately\n            * `F` - Image and paper provided separately, image upon request\n            * `G` - Image included, no paper provided\n            * `H` - Image included, no paper provided, image upon request\n            * `I` - Image included, paper provided separately\n            * `J` - Image included, paper provided separately, image upon request\n            * `K` - No image provided, no paper provided\n            * `L` - No image provided, no paper provided, image upon request\n            * `M` - No image provided, Electronic Check provided separately\n            * `Z` - Not Same Type–Documentation associated with each item in Cash Letter will be different.\n          example: 'A'\n        cashLetterID:\n          type: string\n          maxLength: 8\n          description: CashLetterID uniquely identifies the cash letter. It is assigned by the institution that creates the cash\n            letter and must be unique within a Cash Letter Business Date.\n          example: '1'\n        originatorContactName:\n          type: string\n          maxLength: 14\n          description: OriginatorContactName is the name of a contact at the institution that creates the cash letter.\n          example: \"John Smith\"\n        originatorContactPhoneNumber:\n          type: string\n          maxLength: 10\n          description: OriginatorContactPhoneNumber is the phone number of the contact at the institution that creates the cash letter.\n          example: '5685551212'\n        fedWorkType:\n          type: string\n          maxLength: 1\n          description: fedWorkType is any valid code specified by the Federal Reserve Bank.\n          example: 'V'\n        returnsIndicator:\n          type: string\n          maxLength: 1\n          enum:\n            - 'E'\n            - 'R'\n            - 'J'\n          description: |\n            ReturnsIndicator identifies type of returns.\n\n            * ` ` - Original Message\n            * `E` - Administrative - items being returned that are handled by the bank and usually do not directly\n            affect the customer or its account.\n            * `R` - Customer–items being returned that directly affect a customer’s account.\n            * `J` - Reject Return\n        userField:\n          type: string\n          maxLength: 1\n          description: UserField is a field used at the discretion of users of the standard\n          example: 'V'\n    CashLetterControl:\n      properties:\n        ID:\n          type: string\n          description: CashLetterControl ID\n          example: 'd1e26288'\n        cashLetterBundleCount:\n          type: integer\n          description: CashLetterBundleCount identifies the total number of bundles within the cash letter.\n          example: 1\n        cashLetterItemsCount:\n          type: integer\n          description: CashLetterItemsCount identifies the total number of items within the cash letter.\n          example: 1\n        cashLetterTotalAmount:\n          type: integer\n          description: CashLetterTotalAmount identifies the total dollar value of all item amounts within the cash letter.\n          example: 100\n        cashLetterImagesCount:\n          type: integer\n          description: CashLetterImagesCount identifies the total number of ImageViewDetail(s) within the CashLetter.\n          example: 1\n        eCEInstitutionName:\n          type: string\n          maxLength: 18\n          description: ECEInstitutionName identifies the short name of the institution that creates the CashLetterControl.\n          example: \"Citadel\"\n        settlementDate:\n          type: string\n          format: 'date-time'\n          description: SettlementDate identifies the date that the institution that creates the cash letter expects settlement.\n          example: '2018-10-03T00:00:00Z'\n        creditTotalIndicator:\n          type: integer\n          enum:\n            - 0\n            - 1\n          description: |\n            CreditTotalIndicator is a code that indicates whether Credit Items are included in this record’s totals.\n            If so, they will be included in TotalItemCount and FileTotalAmount. TotalRecordCount includes all records of\n            all types regardless of the value of this field.\n            * ` ` - No Credit Items\n            * `0` - Credit Items are not included in totals\n            * `1` - Credit Items are included in totals\n          example: 1\n      required:\n        - cashLetterItemsCount\n        - cashLetterTotalAmount\n        - settlementDate\n    CashLetters:\n      type: array\n      items:\n        $ref: '#/components/schemas/CashLetter'\n    Bundle:\n      properties:\n        bundleHeader:\n          $ref: '#/components/schemas/BundleHeader'\n        checks:\n          type: array\n          items:\n            $ref: '#/components/schemas/Checks'\n        returns:\n          type: array\n          items:\n            $ref: '#/components/schemas/Returns'\n        bundleControl:\n          $ref: '#/components/schemas/BundleControl'\n    BundleHeader:\n      properties:\n        ID:\n          type: string\n          description: BundleHeader ID\n          example: 'd1e26288'\n        collectionTypeIndicator:\n          type: string\n          maxLength: 2\n          enum:\n            - '00'\n            - '01'\n            - '02'\n            - '03'\n            - '04'\n            - '05'\n            - '06'\n          description: |\n            A code that identifies the type of bundle. It is the same value as the CollectionTypeIndicator\n            in the CashLetterHeader within which the bundle is contained, unless the CollectionTypeIndicator\n            in the CashLetterHeader is 99.\n\n            * `00` - Preliminary Forward Information\n            * `01` - Forward Presentment\n            * `02` - Forward Presentment - Same-Day Settlement\n            * `03` - Return\n            * `04` - Return Notification\n            * `05` - Preliminary Return Notification\n            * `06` - Final Return Notification\n          example:\n            '00'\n        destinationRoutingNumber:\n          type: string\n          maxLength: 9\n          description: DestinationRoutingNumber contains the routing and transit number of the institution that\n            receives and processes the cash letter or the bundle.\n          example: '231987654'\n        eCEInstitutionRoutingNumber:\n          type: string\n          maxLength: 9\n          description: ECEInstitutionRoutingNumber contains the routing and transit number of the institution that\n            that creates the bundle header.\n          example: '233431587'\n        bundleBusinessDate:\n          type: string\n          format: 'date-time'\n          description: BundleBusinessDate is the business date of the bundle.\n          example: '2018-10-03T00:00:00Z'\n        bundleCreationDate:\n          type: string\n          format: 'date-time'\n          description: BundleCreationDate is the date that the bundle is created.\n          example: '2018-10-03T00:00:00Z'\n        bundleID:\n          type: string\n          maxLength: 10\n          description: BundleID is a number that identifies the bundle, assigned by the institution that creates the bundle.\n          example:  '9999'\n        bundleSequenceNumber:\n          type: string\n          maxLength: 4\n          description: BundleSequenceNumber is a number assigned by the institution that creates the bundle. Usually denotes\n            the relative position of the bundle within the cash letter.\n          example:  '1'\n        cycleNumber:\n          type: string\n          maxLength: 2\n          description: CycleNumber is a code assigned by the institution that creates the bundle.  Denotes the cycle under which\n            the bundle is created.\n          example: \"01\"\n        returnLocationRoutingNumber:\n          type: string\n          maxLength: 9\n          description: ReturnLocationRoutingNumber is a bank routing number used by some processors. This will be blank in the resulting file if it is empty.\n          example: \"987654320\"\n        userField:\n          type: string\n          maxLength: 5\n          description: UserField identifies a field used at the discretion of users of the standard.\n          example: \"B1234\"\n    BundleControl:\n      properties:\n        ID:\n          type: string\n          description: BundleControl ID\n          example: 'd1e26288'\n        bundleItemsCount:\n          type: integer\n          description: BundleItemsCount identifies the total number of items within the bundle.\n          example: 1\n        bundleTotalAmount:\n          type: integer\n          description: BundleTotalAmount identifies the total amount of item amounts within the bundle.\n          example: 100\n        micrValidTotalAmount:\n          type: integer\n          description: MICRValidTotalAmount identifies the total amount of all Check Records within the bundle which\n            contain 1 in the MICRValidIndicator.\n          example: 100\n        bundleImagesCount:\n          type: integer\n          description: BundleImagesCount identifies the total number of ImageViewDetail Records  within the bundle.\n          example: 1\n        userField:\n          type: string\n          maxLength: 20\n          description: UserField identifies a field used at the discretion of users of the standard.\n          example: \"B12345678\"\n        creditTotalIndicator:\n          type: integer\n          maxLength: 1\n          enum:\n            - 0\n            - 1\n          description: |\n            CreditTotalIndicator is a code that indicates whether Credit Items are included in the totals.\n            If so, they will be included in this record’s BundleItemsCount, BundleTotalAmount, and BundleImagesCount.\n            * ` ` - No Credit Items\n            * `0` - Credit Items are not included in totals\n            * `1` - Credit Items are included in totals\n          example: 1\n      required:\n        - bundleItemsCount\n        - bundleTotalAmount\n    Checks:\n      properties:\n        ID:\n          type: string\n          description: Check ID\n          example: d1e26288\n        auxiliaryOnUs:\n          type: string\n          maxLength: 15\n          description: AuxiliaryOnUs identifies a code used on commercial checks at the discretion of the payor bank.\n          example: '1001'\n        externalProcessingCode:\n          type: string\n          maxLength: 1\n          description: ExternalProcessingCode identifies a code used for special purposes as authorized by the Accredited\n            Standards Committee X9. Also known as Position 44.\n          example: '1'\n        payorBankRoutingNumber:\n          type: string\n          maxLength: 8\n          description: |\n            PayorBankRoutingNumber identifies the institution by or through which the item is\n            payable. Must be a valid routing and transit number issued by the ABA’s Routing Number Registrar. Shall\n            represent the first 8 digits of a 9-digit routing number or 8 numeric digits of a 4 dash 4 routing number.\n            A valid routing number consists of 2 fields: the eight-digit Payor Bank Routing Number and the\n            one-digit Payor Bank Routing Number Check Digit.\n          example: '01120036'\n        payorBankCheckDigit:\n          type: string\n          maxLength: 1\n          description: |\n            PayorBankCheckDigit identifies the routing number check digit.  The\n            combination of Payor Bank Routing Number and Payor Bank Routing Number Check Digit must be a mod-checked\n            routing number with a valid check digit.\n          example: '5'\n        onUs:\n          type: string\n          maxLength: 20\n          description: OnUs identifies data specified by the payor bank. On-Us data usually consists of the payor’s account number,\n            a serial number or transaction code, or both.\n          example: '5558881'\n        itemAmount:\n          type: integer\n          description: Amount identifies the amount of the check.  All amounts fields have two implied decimal points.\n              e.g., 100000 is $1,000.00.\n          example: 100000\n        eCEInstitutionItemSequenceNumber:\n          type: string\n          maxLength: 15\n          description: ECEInstitutionItemSequenceNumber identifies a number assigned by the institution that creates the Check.\n            Field must contain a numeric value. It cannot be all blanks.\n          example: '24531'\n        documentationTypeIndicator:\n          type: string\n          maxLength: 1\n          enum:\n            - 'A'\n            - 'B'\n            - 'C'\n            - 'D'\n            - 'E'\n            - 'F'\n            - 'G'\n            - 'H'\n            - 'I'\n            - 'J'\n            - 'K'\n            - 'L'\n            - 'M'\n          description: |\n            DocumentationTypeIndicator identifies a code that indicates the type of documentation that supports the check\n            record.  This field is superseded by the Cash Letter Documentation Type Indicator in the Cash Letter Header\n            Record for all Defined Values except ‘Z’ Not Same Type. In the case of Defined Value of ‘Z’, the\n            Documentation Type Indicator in this record takes precedent.\n\n            Shall be present when Cash Letter Documentation Type Indicator in the Cash Letter Header Record\n            is Defined Value of ‘Z’.\n\n            * `A` - No image provided, paper provided separately\n            * `B` - No image provided, paper provided separately, image upon request\n            * `C` - Image provided separately, no paper provided\n            * `D` - Image provided separately, no paper provided, image upon request\n            * `E` - Image and paper provided separately\n            * `F` - Image and paper provided separately, image upon request\n            * `G` - Image included, no paper provided\n            * `H` - Image included, no paper provided, image upon request\n            * `I` - Image included, paper provided separately\n            * `J` - Image included, paper provided separately, image upon request\n            * `K` - No image provided, no paper provided\n            * `L` - No image provided, no paper provided, image upon request\n            * `M` - No image provided, Electronic Check provided separately\n          example: 'A'\n        returnAcceptanceIndicator:\n          type: string\n          maxLength: 1\n          enum:\n            - '0'\n            - '1'\n            - '2'\n            - '3'\n            - '4'\n            - '5'\n            - '6'\n            - '7'\n            - '8'\n            - '9'\n            - 'A'\n            - 'B'\n            - 'C'\n            - 'D'\n            - 'E'\n            - 'F'\n          description: |\n            ReturnAcceptanceIndicator is a code that indicates whether the institution that creates the Check\n            will or will not support electronic return processing.\n\n            * `0` -\tWill not accept any electronic information\n            * `1` -\tWill accept preliminary return notifications, returns, and final return notifications\n            * `2` -\tWill accept preliminary return notifications and returns\n            * `3` -\tWill accept preliminary return notifications and final return notifications\n            * `4` -\tWill accept returns and final return notifications\n            * `5` -\tWill accept preliminary return notifications only\n            * `6` -\tWill accept returns only\n            * `7` -\tWill accept final return notifications only\n            * `8` -\tWill accept preliminary return notifications, returns, final return notifications, and image returns\n            * `9` -\tWill accept preliminary return notifications, returns and image returns\n            * `A` -\tWill accept preliminary return notifications, final return notifications and image returns\n            * `B` -\tWill accept returns, final return notifications and image returns\n            * `C` -\tWill accept preliminary return notifications and image returns\n            * `D` -\tWill accept returns and image returns\n            * `E` -\tWill accept final return notifications and image returns\n            * `F` -\tWill accept image returns only\n          example: '1'\n        mICRValidIndicator:\n          type: integer\n          enum:\n            - 1\n            - 2\n            - 3\n            - 4\n          description: |\n            MICRValidIndicator is a code that indicates whether any character in the Magnetic Ink Character Recognition\n            (MICR) property is unreadable, or the OnUs property is missing from the Check.\n            * `1` - Good read\n            * `2` - Good read, missing field\n            * `3` - Read error encountered\n            * `4` - Missing field and read error encountered\n          example: 1\n        bOFDIndicator:\n          type: string\n          maxLength: 1\n          enum:\n            - 'Y'\n            - 'N'\n            - 'U'\n          description: |\n            BOFDIndicator is a code that indicates whether the ECE institution indicated on the Bundle Header Record (Type 20)\n            is the Bank of First Deposit (BOFD). This field shall be consistent with values contained in the Check Detail\n            Addendum A Record (Type 26) and Check Detail Addendum C Record (Type 28).\n            * `Y` - ECE institution is BOFD\n            * `N` - ECE institution is not BOFD\n            * `U` - ECE institution relationship to BOFD is undetermined\n          example: 'Y'\n        addendumCount:\n          type: integer\n          minimum: 0\n          maximum: 99\n          description: AddendumCount is a number of Check Detail Record Addenda to follow. This represents the number of\n            CheckDetailAddendumA, CheckDetailAddendumB, and CheckDetailAddendumC types. It matches the total number\n            of addendum records associated with this item. The standard supports up to 99 addendum records.\n          example: 3\n        correctionIndicator:\n          type: integer\n          enum:\n            - 0\n            - 1\n            - 2\n            - 3\n            - 4\n          description: |\n            CorrectionIndicator identifies whether and how the MICR line was repaired, for fields other than Payor Bank\n            Routing Number and Amount.\n            * `0` - No Repair\n            * `1` - Repaired (form of repair unknown)\n            * `2` - Repaired without Operator intervention\n            * `3` - Repaired with Operator intervention\n            * `4` - Undetermined if repair has been done or not\n          example: 0\n        archiveTypeIndicator:\n          type: string\n          enum:\n            - 'A'\n            - 'B'\n            - 'C'\n            - 'D'\n            - 'E'\n            - 'F'\n            - 'G'\n            - 'H'\n            - 'I'\n          description: |\n            ArchiveTypeIndicator is a code that indicates the type of archive that supports this Check.\n            Access method, availability, and time frames shall be defined by clearing arrangements.\n\n            * `A` - Microfilm\n            * `B` - Image\n            * `C` - Paper\n            * `D` - Microfilm and image\n            * `E` - Microfilm and paper\n            * `F` - Image and paper\n            * `G` - Microfilm, image and paper\n            * `H` - Electronic Check Instrument\n            * `I` - None\n          example: 'A'\n        checkDetailAddendumA:\n          type: array\n          items:\n            $ref: '#/components/schemas/CheckDetailAddendumA'\n        checkDetailAddendumB:\n          type: array\n          items:\n            $ref: '#/components/schemas/CheckDetailAddendumB'\n        checkDetailAddendumC:\n          type: array\n          items:\n            $ref: '#/components/schemas/CheckDetailAddendumC'\n        imageViewDetail:\n          type: array\n          items:\n            $ref: '#/components/schemas/ImageViewDetail'\n        imageViewData:\n          type: array\n          items:\n            $ref: '#/components/schemas/ImageViewData'\n        imageViewAnalysis:\n          type: array\n          items:\n            $ref: '#/components/schemas/ImageViewAnalysis'\n    Returns:\n      properties:\n        ID:\n          type: string\n          description: Return ID\n          example: d1e26288\n        payorBankRoutingNumber:\n          type: string\n          maxLength: 8\n          description: |\n            PayorBankRoutingNumber identifies the institution by or through which the item is\n            payable. Must be a valid routing and transit number issued by the ABA’s Routing Number Registrar. Shall\n            represent the first 8 digits of a 9-digit routing number or 8 numeric digits of a 4 dash 4 routing number.\n            A valid routing number consists of 2 fields: the eight-digit Payor Bank Routing Number and the\n            one-digit Payor Bank Routing Number Check Digit.\n          example: '01120036'\n        payorBankCheckDigit:\n          type: string\n          maxLength: 1\n          description: |\n            PayorBankCheckDigit identifies the routing number check digit.  The\n            combination of Payor Bank Routing Number and Payor Bank Routing Number Check Digit must be a mod-checked\n            routing number with a valid check digit.\n          example: 5\n        onUs:\n          type: string\n          maxLength: 20\n          description: OnUs identifies data specified by the payor bank. On-Us data usually consists of the payor’s account number,\n            a serial number or transaction code, or both.\n          example: '5558881'\n        itemAmount:\n          type: integer\n          description: Amount identifies the amount of the check.  All amounts fields have two implied decimal points.\n            e.g., 100000 is $1,000.00.\n          example: 100000\n        returnReason:\n          type: string\n          description: ReturnReason is a code that indicates the reason for non-payment.\n        addendumCount:\n          type: integer\n          minimum: 0\n          maximum: 99\n          description: AddendumCount is a number of Check Detail Record Addenda to follow. This represents the number of\n            CheckDetailAddendumA, CheckDetailAddendumB, and CheckDetailAddendumC types. It matches the total number\n            of addendum records associated with this item. The standard supports up to 99 addendum records.\n          example: 4\n        documentationTypeIndicator:\n          type: string\n          maxLength: 1\n          enum:\n            - 'A'\n            - 'B'\n            - 'C'\n            - 'D'\n            - 'E'\n            - 'F'\n            - 'G'\n            - 'H'\n            - 'I'\n            - 'J'\n            - 'K'\n            - 'L'\n            - 'M'\n          description: |\n            DocumentationTypeIndicator identifies a code that indicates the type of documentation that supports the check\n            record.  This field is superseded by the Cash Letter Documentation Type Indicator in the Cash Letter Header\n            Record for all Defined Values except ‘Z’ Not Same Type. In the case of Defined Value of ‘Z’, the\n            Documentation Type Indicator in this record takes precedent.\n\n            Shall be present when Cash Letter Documentation Type Indicator in the Cash Letter Header Record\n            is Defined Value of ‘Z’.\n\n            * `A` - No image provided, paper provided separately\n            * `B` - No image provided, paper provided separately, image upon request\n            * `C` - Image provided separately, no paper provided\n            * `D` - Image provided separately, no paper provided, image upon request\n            * `E` - Image and paper provided separately\n            * `F` - Image and paper provided separately, image upon request\n            * `G` - Image included, no paper provided\n            * `H` - Image included, no paper provided, image upon request\n            * `I` - Image included, paper provided separately\n            * `J` - Image included, paper provided separately, image upon request\n            * `K` - No image provided, no paper provided\n            * `L` - No image provided, no paper provided, image upon request\n            * `M` - No image provided, Electronic Check provided separately\n          example: 'A'\n        forwardBundleDate:\n          type: string\n          format: 'date-time'\n          description: ForwardBundleDate represents for electronic check exchange items, the year, month, and day that\n            designate the business date of the original forward bundle. This data is transferred from the BundleHeader\n            BundleBusinessDate.  For items presented in paper cash letters, the year, month, and day that the cash\n            letter was created.\n          example: '2018-10-03T00:00:00Z'\n        eCEInstitutionItemSequenceNumber:\n          type: string\n          maxLength: 15\n          description: ECEInstitutionItemSequenceNumber identifies a number assigned by the institution that creates the CheckDetail.\n            Field must contain a numeric value. It cannot be all blanks.\n          example: '24531'\n        externalProcessingCode:\n          type: string\n          maxLength: 1\n          description: ExternalProcessingCode identifies a code used for special purposes as authorized by the Accredited\n            Standards Committee X9. Also known as Position 44.\n          example: '9'\n        returnNotificationIndicator:\n          type: string\n          maxLength: 1\n          enum:\n            - '1'\n            - '2'\n          description: |\n            ReturnNotificationIndicator is a code that identifies the type of notification. The\n            CashLetterHeader.CollectionTypeIndicator and BundleHeader.CollectionTypeIndicator equalling `05` or `06`\n            takes precedence over this field.\n\n            * `1` - Preliminary notification\n            * `2` - Final notification\n        archiveTypeIndicator:\n          type: string\n          maxLength: 1\n          enum:\n            - 'A'\n            - 'B'\n            - 'C'\n            - 'D'\n            - 'E'\n            - 'F'\n            - 'G'\n            - 'H'\n            - 'I'\n          description: |\n            ArchiveTypeIndicator is a code that indicates the type of archive that supports this Check.\n            Access method, availability, and time frames shall be defined by clearing arrangements.\n            * `A` - Microfilm\n            * `B` - Image\n            * `C` - Paper\n            * `D` - Microfilm and image\n            * `E` - Microfilm and paper\n            * `F` - Image and paper\n            * `G` - Microfilm, image, and paper\n            * `H` - Electronic Check Instrument\n            * `I` - None\n        timesReturned:\n          type: integer\n          enum:\n            - 0\n            - 1\n            - 2\n            - 3\n          description: |\n            TimesReturned is a code used to indicate the number of times the paying bank has returned this item.\n\n            * `0` - The item has been returned an unknown number of times\n            * `1` - The item has been returned once\n            * `2` - The item has been returned twice\n            * `3` - The item has been returned three times\n        returnDetailAddendumA:\n          type: array\n          items:\n            $ref: '#/components/schemas/ReturnDetailAddendumA'\n        returnDetailAddendumB:\n          type: array\n          items:\n            $ref: '#/components/schemas/ReturnDetailAddendumB'\n        returnDetailAddendumC:\n          type: array\n          items:\n            $ref: '#/components/schemas/ReturnDetailAddendumC'\n        returnDetailAddendumD:\n          type: array\n          items:\n            $ref: '#/components/schemas/ReturnDetailAddendumD'\n        imageViewDetail:\n          type: array\n          items:\n            $ref: '#/components/schemas/ImageViewDetail'\n        imageViewData:\n          type: array\n          items:\n            $ref: '#/components/schemas/ImageViewData'\n        imageViewAnalysis:\n          type: array\n          items:\n            $ref: '#/components/schemas/ImageViewAnalysis'\n    CreditItem:\n      properties:\n        ID:\n          type: string\n          description: CreditItem ID\n          example: d1e26288\n        auxiliaryOnUs:\n          type: string\n          maxLength: 15\n          description: AuxiliaryOnUs identifies a code used at the discretion of the creating bank. The handling of\n            dashes and spaces shall be determined between the exchange partners.\n          example: '1001'\n        externalProcessingCode:\n          type: string\n          maxLength: 1\n          description: ExternalProcessingCode identifies a code used for special purposes as authorized by the Accredited\n            Standards Committee X9. Also known as Position 44.\n          example: '9'\n        postingBankRoutingNumber:\n          type: string\n          maxLength: 9\n          description: PostingBankRoutingNumber is a routing number assigned by the posting bank to identify this credit.\n          example: '231986436'\n        onUs:\n          type: string\n          maxLength: 20\n          description: OnUs identifies data specified by the payor bank. On-Us data usually consists of the payor’s\n            account number, a serial number or transaction code, or both.\n          example: '5558881'\n        itemAmount:\n          type: integer\n          description: Amount identifies the amount of the check.  All amounts fields have two implied decimal points.\n            e.g., 100000 is $1,000.00.\n          example: 100000\n        creditItemSequenceNumber:\n          type: string\n          description: CreditItemSequenceNumber identifies a number assigned by the institution that creates the CreditItem.\n          example: '1'\n        documentationTypeIndicator:\n          type: string\n          maxLength: 1\n          enum:\n            - 'A'\n            - 'B'\n            - 'C'\n            - 'D'\n            - 'E'\n            - 'F'\n            - 'G'\n            - 'H'\n            - 'I'\n            - 'J'\n            - 'K'\n            - 'L'\n          description: |\n            DocumentationTypeIndicator is a code used to indicate the type of documentation that supports this record.\n            Shall be present when Cash Letter Documentation Type Indicator in the Cash Letter Header Record is Defined\n            Value of ‘Z’.\n\n            * `A` - No image provided, paper provided separately\n            * `B` - No image provided, paper provided separately, image upon request\n            * `C` - Image provided separately, no paper provided\n            * `D` - Image provided separately, no paper provided, image upon request\n            * `E` - Image and paper provided separately\n            * `F` - Image and paper provided separately, image upon request\n            * `G` - Image included, no paper provided\n            * `H` - Image included, no paper provided, image upon request\n            * `I` - Image included, paper provided separately\n            * `J` - Image included, paper provided separately, image upon request\n            * `K` - No image provided, no paper provided\n            * `L` - No image provided, no paper provided, image upon request\n          example: 'A'\n        acccountTypeCode:\n          type: string\n          maxLength: 1\n          enum:\n            - '0'\n            - '1'\n            - '2'\n            - '3'\n            - '4'\n            - '5'\n          description: |\n            AccountTypeCode is a code that indicates the type of account to which this CreditItem is associated.\n\n            * `0` - Unknown\n            * `1` - DDA account\n            * `2` - General Ledger account\n            * `3` - Savings account\n            * `4` - Money Market account\n            * `5` - Other Account\n          example: '1'\n        sourceWorkCode:\n          type: string\n          maxLength: 2\n          description: |\n            SourceWorkCode is a code used to identify the source of the work associated with this CreditItem.\n\n            * `00` - Unknown\n            * `01` - Internal–ATM\n            * `02` - Internal–Branch\n            * `03` - Internal–Other\n            * `04` - External–Bank to Bank (Correspondent)\n            * `05` - External–Business to Bank (Customer)\n            * `06` - External–Business to Bank Remote Capture\n            * `07` - External–Processor to Bank\n            * `08` - External–Bank to Processor\n            * `09` - Lockbox\n            * `10` - International–Internal\n            * `11` - International–External\n            * `21–50` - User Defined\n          example: '01'\n        userField:\n          type: string\n          maxLength: 16\n          description: UserField identifies a field used at the discretion of users of the standard.\n          example: \"B12345678\"\n      required:\n        - PostingBankRoutingNumber\n        - CreditItemSequenceNumbe\n    RoutingNumberSummary:\n      properties:\n        ID:\n          type: string\n          description: RoutingNumberSummary ID\n          example: d1e26288\n        cashLetterRoutingNumber:\n          type: string\n          maxLength: 9\n          description: CashLetterRoutingNumber is a number that identifies a given payor bank within a cash letter\n            containing one or more payor banks.\n          example: '231380104'\n        routingNumberTotalAmount:\n          type: integer\n          description: RoutingNumberTotalAmount is the total amount for all Check Records associated with the\n            payor bank routing number designated in the Routing Number within the Cash Letter.\n          example: 10000\n        routingNumberItemCount:\n          type: integer\n          description: RoutingNumberItemCount is the the total number of all Check Records associated with the\n            payor bank routing number designated in the Routing Number within the Cash Letter.\n          example: 10\n        userField:\n          type: string\n          maxLength: 24\n          description: UserField identifies a field used at the discretion of users of the standard.\n          example: \"B1234567891012345\"\n      required:\n        - cashLetterRoutingNumber\n    CheckDetailAddendumA:\n      properties:\n        ID:\n          type: string\n          description: CheckDetailAddendumA ID\n          example: d1e26288\n        recordNumber:\n          type: integer\n          minimum: 1\n          maximum: 99\n          description: RecordNumber is a number representing the order in which each CheckDetailAddendumA was created.\n            CheckDetailAddendumA shall be in sequential order starting with 1.\n          example: 1\n        returnLocationRoutingNumber:\n          type: string\n          maxLength: 9\n          description: ReturnLocationRoutingNumber is a valid routing and transit number indicating where returns,\n            final return notifications, and preliminary return notifications are sent, usually the BOFD.\n          example: '231486745'\n        bOFDEndorsementDate:\n          type: string\n          format: 'date-time'\n          description: BOFDEndorsementDate is the date of endorsement.\n          example: '2018-10-03T00:00:00Z'\n        bOFDItemSequenceNumber:\n          type: string\n          maxLength: 15\n          description: BOFDItemSequenceNumber is a number that identifies the item in the CheckDetailAddendumA.\n          example: '1'\n        bOFDAccountNumber:\n          type: string\n          maxLength: 18\n          description: BOFDAccountNumber is a number that identifies the depository account at the Bank of First Deposit.\n          example: '938383'\n        bOFDBranchCode:\n          type: string\n          maxLength: 5\n          description: BOFDBranchCode is a code that identifies the branch at the Bank of First Deposit.\n          example: '01'\n        payeeName:\n          type: string\n          maxLength: 15\n          description: PayeeName is the name of the payee from the check.\n          example: 'Payee Name'\n        truncationIndicator:\n          type: string\n          maxLength: 1\n          enum:\n            - 'Y'\n            - 'N'\n          description: TruncationIndicator identifies if the institution truncated the original check item.\n          example: 'Y'\n        bOFDConversionIndicator:\n          type: string\n          maxLength: 1\n          enum:\n            - '0'\n            - '1'\n            - '2'\n            - '3'\n            - '4'\n            - '5'\n            - '6'\n            - '7'\n            - '8'\n          description: |\n            BOFDConversionIndicator is a code that indicates the conversion within the processing institution\n            between original paper check, image, and IRD. The indicator is specific to the action of the institution that created\n            this record.\n\n            * `0` - Did not convert physical document\n            * `1` - Original paper converted to IRD\n            * `2` - Original paper converted to image\n            * `3` - IRD converted to another IRD\n            * `4` - IRD converted to image of IRD\n            * `5` - Image converted to an IRD\n            * `6` - Image converted to another image (e.g., transcoded)\n            * `7` - Did not convert image (e.g., same as source)\n            * `8` - Undetermined\n          example: '1'\n        BOFDCorrectionIndicator:\n          type: integer\n          enum:\n            - 0\n            - 1\n            - 2\n            - 3\n            - 4\n          description: |\n            BOFDCorrectionIndicator identifies whether and how the MICR line of this item was repaired by the\n            creator of this CheckDetailAddendumA Record for fields other than Payor Bank Routing Number and Amount.\n            * `0` - No Repair\n            * `1` - Repaired (form of repair unknown)\n            * `2` - Repaired without Operator intervention\n            * `3` - Repaired with Operator intervention\n            * `4` - Undetermined if repair has been done or not\n          example: 1\n        userField:\n          type: string\n          maxLength: 4\n          description: UserField identifies a field used at the discretion of users of the standard.\n          example: 'Z'\n      required:\n        - recordNumber\n        - returnLocationRoutingNumber\n        - bofdEndorsementDate\n        - bofdItemSequenceNumber\n        - truncationIndicator\n    CheckDetailAddendumB:\n      properties:\n        ID:\n          type: string\n          description: CheckDetailAddendumB ID\n          example: d1e26288\n        imageReferenceKeyIndicator:\n          type: integer\n          enum:\n            - 0\n            - 1\n          description: |\n            ImageReferenceKeyIndicator identifies whether ImageReferenceKeyLength contains a variable value within the\n            allowable range, or contains a defined value and the content is ItemReferenceKey.\n\n            * `0` - ImageReferenceKeyIndicator has a Defined Value of 0034 and ImageReferenceKey contains the Image\n            Reference Key.\n            * `1`- ImageReferenceKeyIndicator contains a value other than 0034; or ImageReferenceKeyIndicator\n            contains Value 0034, which is not a Defined Value, and the content of ImageReferenceKey has no special\n            significance with regards to an Image Reference Key; or ImageReferenceKeyIndicator is 0000, meaning the\n            ImageReferenceKey is not present.\n          example: 1\n        microfilmArchiveSequenceNumber:\n          type: string\n          maxLength: 15\n          description: microfilmArchiveSequenceNumber is a number that identifies the item in the microfilm archive system;\n            it may be different than the Check.ECEInstitutionItemSequenceNumber and from the ImageReferenceKey.\n          example: '1'\n        lengthImageReferenceKey:\n          type: string\n          description: |\n            ImageReferenceKeyLength is the number of characters in the ImageReferenceKey.\n\n            * `0034` - ImageReferenceKey contains the ImageReferenceKey (ImageReferenceKeyIndicator is 0).\n            * `0000` - ImageReferenceKey not present (ImageReferenceKeyIndicator is 1).\n            * `0001` - 9999: May include Value 0034, and ImageReferenceKey has no special significance to Image Reference\n            Key (ImageReferenceKey is 1).\n          example: \"0000\"\n        imageReferenceKey:\n          type: string\n          description: |\n            ImageReferenceKey is used to find the image of the item in the image data system.  Size is variable based on lengthImageReferenceKey.\n            The position within the file is variable based on the lengthImageReferenceKey.\n          example: '0'\n        descript:\n          type: string\n          maxLength: 15\n          description: Descript describes the transaction.  The position within the file is variable based on the lengthImageReferenceKey.\n          example: 'Payment'\n        userField:\n          type: string\n          maxLength: 4\n          description: UserField identifies a field used at the discretion of users of the standard.\n          example: 'ZZZZ'\n      required:\n        - microfilmArchiveSequenceNumber\n    CheckDetailAddendumC:\n      properties:\n        ID:\n          type: string\n          description:  CheckDetailAddendumC ID\n          example: d1e26288\n        recordNumber:\n          type: integer\n          minimum: 1\n          maximum: 99\n          description: RecordNumber is a number representing the order in which each CheckDetailAddendumC was created.\n            CheckDetailAddendumC shall be in sequential order starting with 1.\n          example: 1\n        endorsingBankRoutingNumber:\n          type: string\n          maxLength: 9\n          description: EndorsingBankRoutingNumber is a valid routing and transit number indicating the bank that\n            endorsed the check.\n          example: '231486745'\n        bOFDEndorsementBusinessDate:\n          type: string\n          format: 'date-time'\n          description: BOFDEndorsementBusinessDate is the date of endorsement.\n          example: '2018-10-03T00:00:00Z'\n        endorsingBankSequenceNumber:\n          type: string\n          maxLength: 15\n          description: EndorsingItemSequenceNumber is a number that identifies the item at the endorsing bank.\n          example: '1'\n        truncationIndicator:\n          type: string\n          maxLength: 1\n          enum:\n            - 'Y'\n            - 'N'\n          description: TruncationIndicator identifies if the institution truncated the original check item.\n          example: 'Y'\n        endorsingBankConversionIndicator:\n          type: string\n          maxLength: 1\n          enum:\n            - '0'\n            - '1'\n            - '2'\n            - '3'\n            - '4'\n            - '5'\n            - '6'\n            - '7'\n            - '8'\n          description: |\n            EndorsingBankConversionIndicator is a code that indicates the conversion within the processing institution\n            between original paper check, image, and IRD. The indicator is specific to the action of the institution identified in the\n            EndorsingBankRoutingNumber.\n\n            * `0` - Did not convert physical document\n            * `1` - Original paper converted to IRD\n            * `2` - Original paper converted to image\n            * `3` - IRD converted to another IRD\n            * `4` - IRD converted to image of IRD\n            * `5` - Image converted to an IRD\n            * `6` - Image converted to another image (e.g., transcoded)\n            * `7` - Did not convert image (e.g., same as source)\n            * `8` - Undetermined\n          example: '1'\n        endorsingBankCorrectionIndicator:\n          type: integer\n          enum:\n            - 0\n            - 1\n            - 2\n            - 3\n            - 4\n          description: |\n            EndorsingBankCorrectionIndicator identifies whether and how the MICR line of this item was repaired by the\n            creator of this CheckDetailAddendumC Record for fields other than Payor Bank Routing Number and Amount.\n\n            * `0` - No Repair\n            * `1` - Repaired (form of repair unknown)\n            * `2` - Repaired without Operator intervention\n            * `3` - Repaired with Operator intervention\n            * `4` - Undetermined if repair has been done or not\n          example: 1\n        returnReason:\n          type: string\n          description: ReturnReason is a code that indicates the reason for non-payment.\n        userField:\n          type: string\n          maxLength: 19\n          description: UserField identifies a field used at the discretion of users of the standard.\n          example: 'Z'\n        endorsingBankIdentifier:\n          type: integer\n          enum:\n            - 0\n            - 1\n            - 2\n            - 3\n          description: |\n           * `0` - Depository Bank (BOFD) - this value is used when the CheckDetailAddendumC Record reflects the Return\n           * `Processing Bank in lieu of BOFD.\n           * `1` - Other Collecting Bank\n           * `2` - Other Returning Bank\n           * `3` - Payor Bank\n          example: 0\n      required:\n        - recordNumber\n        - endorsingBankRoutingNumber\n        - bofdEndorsementBusinessDate\n        - endorsingBankItemSequenceNumber\n        - truncationIndicator\n    ImageViewDetail:\n      properties:\n        ID:\n          type: string\n          description: ImageViewDetail ID\n          example: d1e26288\n        imageIndicator:\n          type: integer\n          minimum: 0\n          maximum: 3\n          enum:\n            - 0\n            - 1\n            - 2\n            - 3\n          description: |\n            ImageIndicator is a code that indicates the presence and disposition of an image view conveyed in the related\n            ImageViewData.  When an image view is not present (0) then certain conditional fields in this ImageViewDetail and\n            the related ImageViewData shall not be present and will be filled with blank space.\n\n            * `0` - Image view not present\n            * `1` - Image view present, actual check\n            * `2` - Image view present, not actual check\n            * `3` - Image view present, unable to determine if value is 1 or 2\n          example: 1\n        imageCreatorRoutingNumber:\n          type: string\n          maxLength: 9\n          description: ImageCreatorRoutingNumber identifies the financial institution that created the image view.\n          example: '2139876354'\n        imageCreatorDate:\n          type: string\n          format: 'date-time'\n          description: |\n            ImageCreatorDate is the date assigned by the image creator for the image view conveyed in the related ImageData.\n          example: '2018-10-03T00:00:00Z'\n        imageViewFormatIndicator:\n          type: string\n          maxLength: 2\n          enum:\n            - '00'\n            - '01'\n            - '20'\n            - '22'\n            - '23'\n          description: |\n            ImageViewFormatIndicator is a code that identifies the type of image format used in the related\n            ImageViewData.ImageData. The image format type is also commonly specified by reference to the file extension\n            used when image data is saved as an image file.\n\n            Agreement not required:\n            * `00` - TIFF 6; Extension: TIF\n\n            Agreement required:\n            * `01` - IOCA FS 11; Extension: ICA\n            * `20` - PNG (Portable Network Graphics); Extension: PNG ‘21’\tJFIF (JPEG File Interchange Format); Extension: JPG\n            * `22` - SPIFF (Still Picture Interchange File Format) (ITU-T Rec. T.84 Annex F); Extension: SPF\n            * `23` - JBIG data stream (ITU-T Rec. T.82/ISO/IEC 11544:1993); Extension: JBG ‘24’\tJPEG 2000 (ISO/IEC 15444-1:2000); Extension: JP2\n          example: '00'\n        imageViewCompressionAlgorithm:\n          type: string\n          maxLength: 2\n          enum:\n            - '00'\n            - '01'\n            - '02'\n            - '21'\n            - '22'\n            - '23'\n          description: |\n            ImageViewCompressionAlgorithm is a code that identifies the algorithm or method used to compress the Image Data\n            in the related ImageViewData.ImageData.\n\n            Agreement not required:\n            * `00` - Group 4 facsimile compression (ITU-T Rec. T.563/CCITT Rec. T.6)\n            \n            Agreement required:\n            * `01` - JPEG Baseline (JPEG Interchange Format) (ITU-T Rec. T.81/ISO/IEC 10918)\n            * `02` - ABIC\n            * `21` - PNG (Portable Network Graphics)\n            * `22` - JBIG (ITU-T Rec. T.82/ISO/IEC 11544:1993)\n            * `23` - JPEG 2000 (ISO/IEC 15444–1:2000)\n          example: '02'\n        imageViewDataSize:\n          type: string\n          description: |\n              ImageViewDataSize is the total number of bytes in ImageViewData.ImageData.  Use of this field is NOT recommended. If data is present it shall be ignored, and ImageViewData.ImageDataLength shall take precedence.\n          example: \"1024\"\n        viewSideIndicator:\n          type: integer\n          enum:\n            - 0\n            - 1\n          description: |\n            ViewSideIndicator is a code that indicates the image view conveyed in the related ImageViewData.\n            An image view may be a full view of the item (i.e., the entire full face of the document)\n            or may be a partial view (snippet) as determined by viewDescriptor.\n\n            * `0` - Front image view\n            * `1` - Rear image view\n          example: 0\n        viewDescriptor:\n          type: string\n          maxLength: 2\n          description: |\n            ViewDescriptor is a code that indicates the nature of the image view based on ImageViewData.ImageData.\n\n            * `00` -  Full view\n            * `01` -  Partial view–unspecified Area of Interest\n            * `02` -  Partial view–date Area of Interest\n            * `03` -  Partial view–payee Area of Interest\n            * `04` -  Partial view–convenience amount Area of Interest\n            * `05` -  Partial view–amount in words (legal amount) Area of Interest\n            * `06` -  Partial view–signature Area(s) of Interest\n            * `07` -  Partial view–payor name and address Area of Interest\n            * `08` -  Partial view–MICR line Area of Interest\n            * `09` -  Partial view–memo line Area of Interest\n            * `10` -  Partial view–payor bank name and address Area of Interest\n            * `11` -  Partial view–payee endorsement Area of Interest\n            * `12` -  Partial view–Bank Of First Deposit (BOFD) endorsement Area of Interest\n            * `13` -  Partial view–transit endorsement Area of Interest\n            * `14 - 99` -  Reserved for X9\n          example: '00'\n        digitalSignatureIndicator:\n          type: integer\n          enum:\n            - 0\n            - 1\n          description: |\n            DigitalSignatureIndicator is a code that indicates the presence or absence of a digital signature for the image\n            view contained in ImageViewData.ImageData. If present, the Digital Signature is conveyed in the related DigitalSignature.\n\n            * `0` - Digital Signature is not present\n            * `1` - Digital Signature is present\n          example:  0\n        digitalSignatureMethod:\n          type: string\n          maxLength: 2\n          description: |\n            DigitalSignatureMethod is a code that identifies the cryptographic algorithm used to generate and validate the\n            Digital Signature in ImageViewData.DigitalSignature.\n            * `00` - Digital Signature Algorithm (DSA) with SHA1 (ANSI X9.30)\n            * `01` - RSA with MD5 (ANSI X9.31)\n            * `02` - RSA with MDC2 (ANSI X9.31)\n            * `03` - RSA with SHA1 (ANSI X9.31)\n            * `04` - Elliptic Curve DSA (ECDSA) with SHA1 (ANSI X9.62)\n            * `05 - 99` - Reserved for emerging cryptographic algorithms.\n          example: '00'\n        securityKeySize:\n          type: integer\n          minimum: 0\n          maximum: 99999\n          description: SecurityKeySize is the length in bits of the cryptographic algorithm key used to create the Digital Signature.\n            Valid values 0–99999\n          example: 1\n        protectedDataStart:\n          type: integer\n          minimum: 0\n          maximum: 9999999\n          description: |\n            ProtectedDataStart is a number that represents the offset in bytes from the first byte (counted as byte 1)\n            of the image data in ImageViewData.ImageData to the first byte of the image data protected by the\n            digital signature.\n\n            * 0000000 - Digital Signature is applied to entire image data\n            * 000001–9999999 - Valid offset values\n          example: 0\n        protectedDataLength:\n          type: integer\n          minimum: 0\n          maximum: 9999999\n          description: |\n            ProtectedDataLength is a number of contiguous bytes of image data in the related ImageViewData.ImageData\n            protected by the digital signature starting with the byte indicated by the value of the ProtectedDataStart in\n            this ImageViewDetail. The ProtectedDataLength value shall not exceed the ImageViewData.ImageDataLength.\n\n            * 0000000 - Digital Signature is applied to entire image data\n            * 000001–9999999 - Valid length values\n          example: 0\n        imageRecreateIndicator:\n          type: integer\n          enum:\n            - 0\n            - 1\n          description: |\n            ImageRecreateIndicator is a code that indicates whether the sender has the ability to recreate the image view\n            conveyed in the related ImageViewData.ImageData.\n\n            * `0` - Sender can recreate the image view for the duration of the agreed upon retention time frames.\n            * `1` - Sender cannot recreate image view.\n          example: 0\n        userField:\n          type: string\n          maxLength: 8\n          description: UserField identifies a field used at the discretion of users of the standard.\n          example: 'Z'\n        overrideIndicator:\n          type: string\n          maxLength: 1\n          enum:\n            - '0'\n            - '1'\n            - 'A'\n            - 'B'\n            - 'C'\n            - 'D'\n            - 'E'\n            - 'F'\n            - 'G'\n            - 'H'\n            - 'I'\n            - 'J'\n            - 'K'\n            - 'L'\n            - 'M'\n            - 'N'\n            - 'O'\n          description: |\n            OverrideIndicator is a code that indicates to a receiving exchange partner that this image view has a detected\n            image test failure that cannot be corrected and that this view shall be accepted regardless of any image test\n            failures.\n\n            * ` ` -  blank/space indicates no observed image test failure present\n            * `0` -  No override information for this view or not applicable\n            * `1` -  Imperfect image\n            * `A` -  IQA Fail–Image view reviewed and deemed usable—no alternate format\n            * `B` -  IQA Fail–Image view reviewed and deemed usable—alternate format included in this file\n            * `C` -  IQA Fail–Image view reviewed and deemed usable–alternate format included in this file and original document available\n            * `D` -  IQA Fail–Image view reviewed and deemed usable–alternate format available\n            * `E` -  IQA Fail–Image view reviewed and deemed usable–original document available\n            * `F` -  IQA Fail–Image view reviewed and deemed usable–original document and alternate format available\n            * `G` -  IQA Fail–Image view reviewed and deemed unusable–no alternate format\n            * `H` -  IQA Fail–Image view reviewed and deemed unusable–alternate format included in this file\n            * `I` -  IQA Fail–Image view reviewed and deemed unusable–alternate format included in this file and original document available\n            * `J` -  IQA Fail–Image view reviewed and deemed unusable–alternate format available\n            * `K` -  IQA Fail–Image view reviewed and deemed unusable–original document available\n            * `L` -  IQA Fail–Image view reviewed and deemed unusable–original document and alternate format available\n            * `M` -  IQA Fail–Image view not reviewed–no alternate format\n            * `N` -  IQA Fail–Image view not reviewed–alternate format included in this file\n            * `O` -  IQA Fail–Image view not reviewed–alternate format included in this file and original\n          example: '0'\n    ImageViewData:\n      properties:\n        ID:\n          type: string\n          description: ImageViewData ID\n          example: 'd1e26288'\n        eCEInstitutionRoutingNumber:\n          type: string\n          maxLength: 9\n          description: ECEInstitutionRoutingNumber contains the routing and transit number of the institution that creates the\n            bundle header.  This number is imported from the Bundle Header Record (Clause 9.4) associated with the image view conveyed\n            in this Image View Data Property.\n          example: '2318769876'\n        bundleBusinessDate:\n          type: string\n          format: 'date-time'\n          description: BundleBusinessDate is the business date of the bundle.\n          example: '2018-10-03T00:00:00Z'\n        cycleNumber:\n          type: string\n          maxLength: 2\n          description: CycleNumber is a code assigned by the institution that creates the bundle.  Denotes the cycle under which\n            the bundle is created.\n          example: '1'\n        ivData.ECEInstitutionItemSequenceNumber:\n          type: string\n          maxLength: 15\n          description: ECEInstitutionItemSequenceNumber is a number assigned by the institution that creates the\n            Check or Return.  This number is imported from the Check.ECEInstitutionItemSequenceNumber or\n            Return.ECEInstitutionItemSequenceNumber associated with the image view conveyed in this Image View Data Record.\n            The ECE institution must construct the sequence number to guarantee uniqueness for a given routing number,\n            business day, and cycle number. Must contain a numeric value.\n          example: '1'\n        ivData.SecurityOriginatorName:\n          type: string\n          maxLength: 16\n          description: SecurityOriginatorName is a unique name that creates the Digital Signature for data to be exchanged.\n            Shall be present only under clearing arrangements and when ImageViewDetail.DigitalSignatureIndicator is 1\n            Shall not be present when ImageViewDetail.ImageIndicator is 0.\n          example: 'Name'\n        ivData.SecurityAuthenticatorName:\n          type: string\n          maxLength: 16\n          description: SecurityAuthenticatorName is the unique name that performs authentication on received data.\n            Shall be present only under clearing arrangements and when ImageViewDetail.DigitalSignatureIndicator is 1\n            Shall not be present when ImageViewDetail.ImageIndicator is 0.\n          example: 'Name'\n        ivData.SecurityKeyName:\n          type: string\n          maxLength: 16\n          description: SecurityKeyName is a name or character sequence used by the signer (originator) to communicate a\n            key identifierto the recipient (authenticator) so the recipient can obtain the key needed to validate the\n            signature. The name is typically used as an identifier related to the key pair used to sign the image. The\n            name is mutually known to the security originator and the security authenticator and is unique to this\n            relationship.\n            Shall be present only under clearing arrangements and when ImageViewDetail.DigitalSignatureIndicator is 1\n            Shall not be present when ImageViewDetail.ImageIndicator is 0.\n          example: 'SECURE'\n        ivData.ClippingOrigin:\n          type: integer\n          enum:\n            - 0\n            - 1\n            - 2\n            - 3\n            - 4\n          description: |\n            ClippingOrigin is a code that defines the corner of the conveyed image view that is taken as the\n            reference point for the clipping coordinates. Top, bottom, left, and right references apply to a view that\n            presents a visually correct orientation. When clipping information is present, the nature of the Area of\n            Interest defined by the clipping rectangle is determined by the value of the ImageViewDetail.ViewDescriptor.\n            Primary front and rear views shall only have a Defined Value of 0.  Can be blank.\n\n            * `0` - Clipping information is not present–full view present\n            * `1` - Clipping origin is top left corner of image view\n            * `2` - Clipping origin is top right corner of image view\n            * `3` - Clipping origin is bottom right corner of image view\n            * `4` - Clipping origin is bottom left corner of image view\n          example: 1\n        ivData.ClippingCoordinateH1:\n          type: string\n          maxLength: 4\n          description: ClippingCoordinateH1 is a number that represents the horizontal offset in pixels from the\n            clipping origin to the nearest vertical side of the clipping rectangle. The clipping coordinates\n            (h1, h2, v1, v2) convey the clipping rectangle’s offsets in both horizontal (h) and vertical (v)\n            directions. The offset values collectively establish the boundary sides of the clipping rectangle. Pixels\n            on the boundary of the clipping rectangle are included in the selected array of pixels. That is, the first\n            pixel of the selected array is at offset (h1, v1) and the last pixel of the selected array is at offset\n            (h2, v2). The corner pixel at the origin of the image view is assumed to have the offset value (0, 0).\n            Shall be present if Image View Data.ClippingOrigin is present and non-zero.\n            Shall not be present when ImageViewDetail.ImageIndicator is 0.\n            Valid values - 0000–9999\n          example: '0001'\n        ivData.ClippingCoordinateH2:\n          type: string\n          maxLength: 4\n          description: ClippingCoordinateH2 is a number that represents the horizontal offset in pixels from the\n            clipping origin to the furthermost vertical side of the clipping rectangle.\n            Shall be present if Image View Data.ClippingOrigin is present and non-zero.\n            Shall not be present when ImageViewDetail.ImageIndicator is 0.\n            Valid values - 0000–9999\n          example: '0001'\n        ivData.ClippingCoordinateV1:\n          type: string\n          maxLength: 4\n          description: ClippingCoordinateV1 is a number that represents the vertical offset in pixels from the\n           clipping origin to the nearest horizontal side of the clipping rectangle.\n           Shall be present if Image View Data.ClippingOrigin is present and non-zero.\n           Shall not be present when ImageViewDetail.ImageIndicator is 0.\n           Valid values - 0000–9999\n          example: '0001'\n        ivData.ClippingCoordinateV2:\n          type: string\n          maxLength: 4\n          description: ClippingCoordinateV2 is a number that represents the vertical offset in pixels from the\n            clipping origin to the furthermost horizontal side of the clipping rectangle.\n            Shall be present if Image View Data.ClippingOrigin is present and non-zero.\n            Shall not be present when ImageViewDetail.ImageIndicator is 0.\n            Valid values - 0000–9999\n          example: '0001'\n        ivData.LengthImageReferenceKey:\n          type: string\n          maxLength: 4\n          description: LengthImageReferenceKey is the number of characters in the ImageViewData.ImageReferenceKey.\n            Shall not be present when ImageViewDetail.ImageIndicator is 0.\n            Valid values -\n            0000\tImageReferenceKey is not present\n            0001–9999  Valid when ImageReferenceKey is present\n          example: '0001'\n        ivData.ImageReferenceKey:\n          type: string\n          maxLength: 4\n          description: ImageReferenceKey is assigned by the ECE institution that creates the CheckDetail or Return, and the related\n           Image View Records. This designator, when used, shall uniquely identify the item image to the ECE institution.\n           This designator is a special key with significance to the creating institution. It is intended to be used to\n           locate within an archive the unique image associated with the item. The designator could be a full access path\n           and name that would allow direct look up and access to the image, for example a URL. This shall match\n           CheckDetailAddendumB.ImageReferenceKey, or ReturnAddendumCImageReferenceKey Record, if used.\n           Valid size - 0 – 9999\n          example: '0'\n        ivData.LengthDigitalSignature:\n          type: string\n          maxLength: 4\n          description: LengthDigitalSignature is the number of bytes in the Image View Data.DigitalSignature.\n            Shall not be present when ImageViewDetail.ImageIndicator is 0.\n          example: '0    '\n        ivData.DigitalSignature:\n          type: string\n          maxLength: 5\n          description: DigitalSignature is created by applying the cryptographic algorithm and private/secret key\n            against the data to be protected. The Digital Signature provides user authentication and data integrity.\n            Shall be present only under clearing arrangements and when ImageViewDetail.DigitalSignatureIndicator is 1\n            Shall not be present when ImageViewDetail.ImageIndicator is 0.\n            Valid size - 0-99999\n          example: '0101'\n        ivData.LengthImageData:\n          type: string\n          maxLength: 8\n          description: LengthImageData is the number of bytes in the ImageViewData.ImageData.\n           Shall be present when ImageViewDetail.ImageIndicator is NOT 0\n           Valid values - 0000001–99999999\n          example: '0000001'\n        ivData.ImageData:\n          type: string\n          maxLength: 7\n          description: ImageData contains the image view. The Image Data generally consists of an image header and the\n            image raster data. The image header provides information that is required to interpret the image raster\n            data. The image raster data contains the scanned image of the physical item in raster (line by line) format.\n            Each scan line comprises a set of concatenated pixels. The image comprises a set of scan lines. The image\n            raster data is typically compressed to reduce the number of bytes needed to transmit and store the image.\n            The header/image format type is defined by the ImageViewDetail.ImageViewFormatIndicator. The syntax and\n            semantics of the image header/image format are understood by referring to the appropriate image format\n            specification. The compression scheme used to compress the image raster data is specified in the\n            ImageViewCompressionAlgorithmIdentifier and in the image header portion of the Image Data or by\n            association with the selected image format.\n            The data may be provided in standard Base64 encoding and will be decoded on file generation.\n            Shall be present when ImageViewDetail.ImageIndicator Record is NOT 0.\n            Valid size - 0-9999999\n          example: '0101'\n    ImageViewAnalysis:\n      properties:\n        ID:\n          type: string\n          description: ImageViewAnalysis ID\n          example: 'd1e26288'\n        globalImageQuality:\n          type: integer\n          enum:\n            - 0\n            - 1\n            - 2\n          description: |\n            GlobalImageQuality is a code that indicates whether the image view was tested for any of the conditions related\n            to image quality defined in the Image Quality Information.\n\n            * `0` -  The image was not tested for any of the image quality conditions\n            * `1` -  The image was tested and one or more image quality conditions were reported\n            * `2` -  The image was tested and no image quality conditions were reported\n          example: 0\n        globalImageUsability:\n          type: integer\n          enum:\n            - 0\n            - 1\n            - 2\n          description: |\n            GlobalImageUsability is a code that indicates whether the image view was tested for any of the conditions\n            related to image usability defined in the Image Usability Information.\n\n            * `0` -  The image was not tested for any of the image quality conditions\n            * `1` -  The image was tested and one or more image quality conditions were reported\n            * `2` -  The image was tested and no image quality conditions were reported\n          example: 0\n        imagingBankSpecificTest:\n          type: integer\n          enum:\n            - 0\n            - 1\n            - 2\n          description: |\n            ImagingBankSpecificTest designates the capture institution may be able to perform specific tests that can\n            indicate a potentially problematic image view caused by conditions other than those listed in the Image Quality\n            and Image Usability Information fields. By mutual agreement, clearing partners can use the UserField to report\n            the presence or absence of additional image conditions found through tests that are particular to the specific\n            imaging institution. The meaning and interpretation of the User Field data must be understood and agreed upon\n            between participants.\n\n\n            * `0` -  The image was not tested for any of the image quality conditions\n            * `1` -  The image was tested and one or more image quality conditions were reported\n            * `2` -  The image was tested and no image quality conditions were reported\n          example: 0\n        partialImage:\n          type: integer\n          enum:\n            - 0\n            - 1\n            - 2\n          description: |\n            PartialImage is a code that indicates if only a portion of the image view is represented digitally while the\n            other portion is suspected to be missing or corrupt.\n\n            * `0` -  The image was not tested for any of the image quality conditions\n            * `1` -  The image was tested and one or more image quality conditions were reported\n            * `2` -  The image was tested and no image quality conditions were reported\n          example: 0\n        excessiveImageSkew:\n          type: integer\n          enum:\n            - 0\n            - 1\n            - 2\n          description: |\n            ExcessiveImageSkew is a code that indicates if the image view skew exceeds an acceptable value. This value is\n            specific to the imaging institution’s own defined requirements and/or constraints.\n\n            * `0` -  The image was not tested for any of the image quality conditions\n            * `1` -  The image was tested and one or more image quality conditions were reported\n            * `2` -  The image was tested and no image quality conditions were reported\n          example: 0\n        piggybackImage:\n          type: integer\n          enum:\n            - 0\n            - 1\n            - 2\n          description: |\n            PiggybackImage is a code that indicates if a “piggyback” condition has been detected. With a “piggyback”\n            condition, the intended image view may be extended, obscured, or replaced by image(s) of additional document(s).\n            A piggyback occurs when two or more documents are fed together and captured as one document when only a single\n            document should have been fed and captured.\n\n            * `0` -  The image was not tested for any of the image quality conditions\n            * `1` -  The image was tested and one or more image quality conditions were reported\n            * `2` -  The image was tested and no image quality conditions were reported\n          example: 0\n        tooLightOrTooDark:\n          type: integer\n          enum:\n            - 0\n            - 1\n            - 2\n          description: |\n            TooLightOrTooDark is a code that indicates if the image view is too light or too dark. The value is specific to\n            the imaging institution’s own defined requirements and/or constraints.\n\n            * `0` -  The image was not tested for any of the image quality conditions\n            * `1` -  The image was tested and one or more image quality conditions were reported\n            * `2` -  The image was tested and no image quality conditions were reported\n          example: 0\n        streaksAndOrBands:\n            type: integer\n            enum:\n              - 0\n              - 1\n              - 2\n            description: |\n              StreaksAndOrBands is a A code that indicates if the image view is likely corrupted due to streaks and/or bands.\n              Streaks and bands can be caused by such problems as dirt, dust, ink, or debris on a lens or in the optical path,\n              and failures in the imaging equipment scanner.\n\n              * `0` -  The image was not tested for any of the image quality conditions\n              * `1` -  The image was tested and one or more image quality conditions were reported\n              * `2` -  The image was tested and no image quality conditions were reported\n            example: 0\n        belowMinimumImageSize:\n            type: integer\n            enum:\n              - 0\n              - 1\n              - 2\n            description: |\n              BelowMinimumImageSize is a code that indicates if the size of the compressed image view is below an acceptable\n              value. The value is specific to the imaging institution’s own defined requirements and/or constraints.\n\n              * `0` -  The image was not tested for any of the image quality conditions\n              * `1` -  The image was tested and one or more image quality conditions were reported\n              * `2` -  The image was tested and no image quality conditions were reported\n            example: 0\n        exceedsMaximumImageSize:\n            type: integer\n            enum:\n              - 0\n              - 1\n              - 2\n            description: |\n              ExceedsMaximumImageSize is a code that indicates if the size of the compressed image view is above an\n              acceptable value. The value is specific to the imaging institution’s own defined requirements and/or\n              constraints.\n\n              * `0` -  The image was not tested for any of the image quality conditions\n              * `1` -  The image was tested and one or more image quality conditions were reported\n              * `2` -  The image was tested and no image quality conditions were reported\n            example: 0\n        imageEnabledPOD:\n            type: integer\n            enum:\n              - 0\n              - 1\n              - 2\n            description: |\n              ImageEnabledPOD is a code that indicates if the image view was used within an image-enabled POD\n              (Proof of Deposit) application.\n\n              * `0` -  The image was not tested for any of the image quality conditions\n              * `1` -  The image was tested and one or more image quality conditions were reported\n              * `2` -  The image was tested and no image quality conditions were reported\n            example: 0\n        sourceDocumentBad:\n            type: integer\n            enum:\n              - 0\n              - 1\n              - 2\n            description: |\n              SourceDocumentBad is a code that indicates if it is possible to obtain a better image from the source document\n              when it is known that the current image of the document is unusable.\n\n              * `0` -  The image was not tested for any of the image quality conditions\n              * `1` -  The image was tested and one or more image quality conditions were reported\n              * `2` -  The image was tested and no image quality conditions were reported\n            example: 0\n        dateUsability:\n            type: integer\n            enum:\n              - 0\n              - 1\n              - 2\n            description: |\n              DateUsability is a code that indicates if the date Area of Interest is usable and readable from the image. The\n              definition of the Area of Interest for image usability testing purposes is specific to the imaging institution's\n              own defined requirements and/or constraint\n\n              * `0` -  The image was not tested for any of the image quality conditions\n              * `1` -  The image was tested and one or more image quality conditions were reported\n              * `2` -  The image was tested and no image quality conditions were reported\n            example: 0\n        payeeUsability:\n            type: integer\n            enum:\n              - 0\n              - 1\n              - 2\n            description: |\n              PayeeUsability is a code that indicates if the payee name Area of Interest is usable and readable from the\n              image. The definition of the Area of Interest for image usability testing purposes is specific to the imaging\n              institution's own defined requirements and/or constraints.\n\n              * `0` -  The image was not tested for any of the image quality conditions\n              * `1` -  The image was tested and one or more image quality conditions were reported\n              * `2` -  The image was tested and no image quality conditions were reported\n            example: 0\n        convenienceAmountUsability:\n            type: integer\n            enum:\n              - 0\n              - 1\n              - 2\n            description: |\n              ConvenienceAmountUsability is a code that indicates if the convenience amount Area of Interest is usable and\n              readable from the image. The definition of the Area of Interest for image usability testing purposes is\n              specific to the imaging institution's own defined requirements and/or constraints.\n\n              * `0` -  The image was not tested for any of the image quality conditions\n              * `1` -  The image was tested and one or more image quality conditions were reported\n              * `2` -  The image was tested and no image quality conditions were reported\n            example: 0\n        amountInWordsUsability:\n            type: integer\n            enum:\n              - 0\n              - 1\n              - 2\n            description: |\n              AmountInWordsUsability is a code that indicates if the amount in words (legal amount) Area of Interest is usable\n              and readable from the image. The definition of the Area of Interest for image usability testing purposes is\n              specific to the imaging institution's own defined requirements and/or constraints.\n\n              * `0` -  The image was not tested for any of the image quality conditions\n              * `1` -  The image was tested and one or more image quality conditions were reported\n              * `2` -  The image was tested and no image quality conditions were reported\n            example: 0\n        signatureUsability:\n            type: integer\n            enum:\n              - 0\n              - 1\n              - 2\n            description: |\n              SignatureUsability is a code that indicates if the signature Area of Interest is usable and readable from the\n              image. The definition of the Area of Interest for image usability testing purposes is specific to the imaging\n              institution's own defined requirements and/or constraints.\n\n              * `0` -  The image was not tested for any of the image quality conditions\n              * `1` -  The image was tested and one or more image quality conditions were reported\n              * `2` -  The image was tested and no image quality conditions were reported\n            example: 0\n        payorNameAddressUsability:\n            type: integer\n            enum:\n              - 0\n              - 1\n              - 2\n            description: |\n              PayorNameAddressUsability is a code that indicates if the payor name and address Area of Interest is usable and\n              readable from the image. The definition of the Area of Interest for image usability testing purposes is specific\n              to the imaging institution's own defined requirements and/or constraints.\n\n              * `0` -  The image was not tested for any of the image quality conditions\n              * `1` -  The image was tested and one or more image quality conditions were reported\n              * `2` -  The image was tested and no image quality conditions were reported\n            example: 0\n        mICRLineUsability:\n            type: integer\n            enum:\n              - 0\n              - 1\n              - 2\n            description: |\n              MICRLineUsability is a code that indicates if the MICR line Area of Interest is usable and readable from the\n              image. The definition of the Area of Interest for image usability testing purposes is specific to the imaging\n              institution's own defined requirements and/or constraints.\n\n              * `0` -  The image was not tested for any of the image quality conditions\n              * `1` -  The image was tested and one or more image quality conditions were reported\n              * `2` -  The image was tested and no image quality conditions were reported\n            example: 0\n        memoLineUsability:\n            type: integer\n            enum:\n              - 0\n              - 1\n              - 2\n            description: |\n              MemoLineUsability is a code that indicates if the memo line Area of Interest is usable and readable from the\n              image. The definition of the Area of Interest for image usability testing purposes is specific to the imaging\n              institution's own defined requirements and/or constraints.\n\n              * `0` -  The image was not tested for any of the image quality conditions\n              * `1` -  The image was tested and one or more image quality conditions were reported\n              * `2` -  The image was tested and no image quality conditions were reported\n            example: 0\n        payorBankNameAddressUsability:\n            type: integer\n            enum:\n              - 0\n              - 1\n              - 2\n            description: |\n              PayorBankNameAddressUsability is a code that indicates if the payor bank name and address Area of Interest is\n              usable and readable from the image. The definition of the Area of Interest for image usability testing purposes\n              is specific to the imaging institution's own defined requirements and/or constraints.\n\n              * `0` -  The image was not tested for any of the image quality conditions\n              * `1` -  The image was tested and one or more image quality conditions were reported\n              * `2` -  The image was tested and no image quality conditions were reported\n            example: 0\n        payeeEndorsementUsability:\n            type: integer\n            enum:\n              - 0\n              - 1\n              - 2\n            description: |\n              PayeeEndorsementUsability is a code that indicates if the payee endorsement Area of Interest is usable and\n              readable from the image. The definition of the Area of Interest for image usability testing purposes is specific\n              to the imaging institution's own defined requirements and/or constraints.\n\n              * `0` -  The image was not tested for any of the image quality conditions\n              * `1` -  The image was tested and one or more image quality conditions were reported\n              * `2` -  The image was tested and no image quality conditions were reported\n            example: 0\n        bOFDEndorsementUsability:\n            type: integer\n            enum:\n              - 0\n              - 1\n              - 2\n            description: |\n              BOFDEndorsementUsability is a code that indicates if the Bank of First Deposit (BOFD) endorsement Area of\n              Interest is usable and readable from the image. The definition of the Area of Interest for image usability\n              testing purposes is specific to the imaging institution's own defined requirements and/or constraints.\n\n              * `0` -  The image was not tested for any of the image quality conditions\n              * `1` -  The image was tested and one or more image quality conditions were reported\n              * `2` -  The image was tested and no image quality conditions were reported\n            example: 0\n        transitEndorsementUsability:\n            type: integer\n            enum:\n              - 0\n              - 1\n              - 2\n            description: |\n              TransitEndorsementUsability is a code that indicates if the transit endorsement Area of Interest is usable and\n              readable from the image. The definition of the Area of Interest for image usability testing purposes is specific\n              to the imaging institution's own defined requirements and/or constraints.\n\n              * `0` -  The image was not tested for any of the image quality conditions\n              * `1` -  The image was tested and one or more image quality conditions were reported\n              * `2` -  The image was tested and no image quality conditions were reported\n            example: 0\n        userField:\n            type: string\n            maxLength: 20\n            description: UserField identifies a field used at the discretion of users of the standard.\n            example: 'ZZZZZ'\n    ReturnDetailAddendumA:\n      properties:\n        ID:\n          type: string\n          description: ReturnDetailAddendumA ID\n          example: d1e26288\n        recordNumber:\n          type: integer\n          minimum: 1\n          maximum: 9\n          description: RecordNumber is a number representing the order in which each ReturnDetailAddendumA was created.\n            ReturnDetailAddendumA shall be in sequential order starting with 1.\n          example: 1\n        returnLocationRoutingNumber:\n          type: string\n          maxLength: 9\n          description: ReturnLocationRoutingNumber is a valid routing and transit number indicating where returns,\n            final return notifications, and preliminary return notifications are sent, usually the BOFD.\n          example: '231486745'\n        bOFDEndorsementDate:\n          type: string\n          format: 'date-time'\n          description: BOFDEndorsementDate is the date of endorsement.\n          example: '2018-10-03T00:00:00Z'\n        bOFDItemSequenceNumber:\n          type: string\n          maxLength: 15\n          description: BOFDItemSequenceNumber is a number that identifies the item in the CheckDetailAddendumA.\n          example: '1'\n        bOFDAccountNumber:\n          type: string\n          maxLength: 18\n          description: BOFDAccountNumber is a number that identifies the depository account at the Bank of First Deposit.\n          example: '938383'\n        bOFDBranchCode:\n          type: string\n          maxLength: 5\n          description: BOFDBranchCode is a code that identifies the branch at the Bank of First Deposit.\n          example: '01'\n        payeeName:\n          type: string\n          maxLength: 15\n          description: PayeeName is the name of the payee from the check.\n          example: 'Payee Name'\n        truncationIndicator:\n          type: string\n          maxLength: 1\n          enum:\n            - 'Y'\n            - 'N'\n          description: TruncationIndicator identifies if the institution truncated the original check item.\n          example: 'Y'\n        bOFDConversionIndicator:\n          type: string\n          maxLength: 1\n          enum:\n            - '0'\n            - '1'\n            - '2'\n            - '3'\n            - '4'\n            - '5'\n            - '6'\n            - '7'\n            - '8'\n          description: |\n            BOFDConversionIndicator is a code that indicates the conversion within the processing institution\n            between original paper check, image, and IRD. The indicator is specific to the action of the institution that created\n            this record.\n\n            * `0` - Did not convert physical document\n            * `1` - Original paper converted to IRD\n            * `2` - Original paper converted to image\n            * `3` - IRD converted to another IRD\n            * `4` - IRD converted to image of IRD\n            * `5` - Image converted to an IRD\n            * `6` - Image converted to another image (e.g., transcoded)\n            * `7` - Did not convert image (e.g., same as source)\n            * `8` - Undetermined\n          example: '1'\n        BOFDCorrectionIndicator:\n          type: integer\n          enum:\n            - 0\n            - 1\n            - 2\n            - 3\n            - 4\n          description: |\n            BOFDCorrectionIndicator identifies whether and how the MICR line of this item was repaired by the\n            creator of this CheckDetailAddendumA Record for fields other than Payor Bank Routing Number and Amount.\n            * `0` - No Repair\n            * `1` - Repaired (form of repair unknown)\n            * `2` - Repaired without Operator intervention\n            * `3` - Repaired with Operator intervention\n            * `4` - Undetermined if repair has been done or not\n          example: 1\n        userField:\n          type: string\n          maxLength: 1\n          description: UserField identifies a field used at the discretion of users of the standard.\n          example: 'Z'\n      required:\n        - recordNumber\n        - returnLocationRoutingNumber\n        - bofdEndorsementDate\n        - bofdItemSequenceNumber\n        - truncationIndicator\n    ReturnDetailAddendumB:\n      properties:\n        ID:\n          type: string\n          description: ReturnDetailAddendumB ID\n          example: d1e26288\n        payorBankName:\n          type: string\n          maxLength: 18\n          description: PayorBankName is short name of the institution by or through which the item is payable.\n          example: 'Bank Short Name'\n        auxiliaryOnUs:\n          type: string\n          maxLength: 15\n          description: AuxiliaryOnUs identifies a code used on commercial checks at the discretion of the payor bank.\n          example: '012349'\n        payorBankSequenceNumber:\n          type: string\n          maxLength: 15\n          description: PayorBankSequenceNumber is a number that identifies the item at the payor bank.\n          example: '1'\n        payorBankBusinessDate:\n          type: string\n          format: 'date-time'\n          description: PayorBankBusinessDate is the year, month, and day the payor bank processed the Return Record.\n          example: '2018-10-03T00:00:00Z'\n        payorAccountName:\n          type: string\n          maxLength: 22\n          description: PayorAccountName is the account name from payor bank records.\n          example: 'Account Name'\n      required:\n        - PayorBankSequenceNumber\n        - PayorBankBusinessDate\n    ReturnDetailAddendumC:\n      properties:\n        ID:\n          type: string\n          description:  ReturnDetailAddendumC ID\n          example: d1e26288\n        imageReferenceKeyIndicator:\n          type: integer\n          enum:\n            - 0\n            - 1\n          description: |\n            ImageReferenceKeyIndicator identifies whether ImageReferenceKeyLength contains a variable value within the\n            allowable range, or contains a defined value and the content is ItemReferenceKey.\n\n            * `0` - ImageReferenceKeyIndicator has a Defined Value of 0034 and ImageReferenceKey contains the Image\n            Reference Key.\n            * `1`- ImageReferenceKeyIndicator contains a value other than 0034; or ImageReferenceKeyIndicator\n            contains Value 0034, which is not a Defined Value, and the content of ImageReferenceKey has no special\n            significance with regards to an Image Reference Key; or ImageReferenceKeyIndicator is 0000, meaning the\n            ImageReferenceKey is not present.\n          example: 1\n        microfilmArchiveSequenceNumber:\n          type: string\n          maxLength: 15\n          description: microfilmArchiveSequenceNumber is a number that identifies the item in the microfilm archive system;\n            it may be different than the Check.ECEInstitutionItemSequenceNumber and from the ImageReferenceKey.\n          example: '1'\n        lengthImageReferenceKey:\n          type: string\n          description: |\n            ImageReferenceKeyLength is the number of characters in the ImageReferenceKey.\n\n            * `0034` - ImageReferenceKey contains the ImageReferenceKey (ImageReferenceKeyIndicator is 0).\n            * `0000` - ImageReferenceKey not present (ImageReferenceKeyIndicator is 1).\n            * `0001` - 9999: May include Value 0034, and ImageReferenceKey has no special significance to Image Reference\n            Key (ImageReferenceKey is 1).\n          example: \"0000\"\n        imageReferenceKey:\n          type: string\n          description: |\n            ImageReferenceKey is used to find the image of the item in the image data system.  Size is variable based on lengthImageReferenceKey.\n            The position within the file is variable based on the lengthImageReferenceKey.\n          example: '0'\n        descript:\n          type: string\n          maxLength: 15\n          description: Descript describes the transaction.  The position within the file is variable based on the lengthImageReferenceKey.\n          example: 'Payment'\n        userField:\n          type: string\n          maxLength: 4\n          description: UserField identifies a field used at the discretion of users of the standard.\n          example: 'ZZZZ'\n    ReturnDetailAddendumD:\n      properties:\n        ID:\n          type: string\n          description:  ReturnDetailAddendumD ID\n          example: d1e26288\n        recordNumber:\n          type: integer\n          minimum: 1\n          maximum: 99\n          description: |\n            RecordNumber is a number representing the order in which each ReturnDetailAddendumD was created.\n            ReturnDetailAddendumD shall be in sequential order starting with 1.  Maximum 99.\n          example: 1\n        endorsingBankRoutingNumber:\n          type: string\n          maxLength: 9\n          description: EndorsingBankRoutingNumber is a valid routing and transit number indicating the bank that\n            endorsed the check.\n          example: '231486745'\n        bOFDEndorsementBusinessDate:\n          type: string\n          format: 'date-time'\n          description: BOFDEndorsementBusinessDate is the date of endorsement.\n          example: '2018-10-03T00:00:00Z'\n        endorsingBankSequenceNumber:\n          type: string\n          maxLength: 15\n          description: EndorsingItemSequenceNumber is a number that identifies the item at the endorsing bank.\n          example: '1'\n        truncationIndicator:\n          type: string\n          maxLength: 1\n          enum:\n            - 'Y'\n            - 'N'\n          description: TruncationIndicator identifies if the institution truncated the original check item.\n          example: 'Y'\n        endorsingBankConversionIndicator:\n          type: string\n          maxLength: 1\n          enum:\n            - '0'\n            - '1'\n            - '2'\n            - '3'\n            - '4'\n            - '5'\n            - '6'\n            - '7'\n            - '8'\n          description: |\n            EndorsingBankConversionIndicator is a code that indicates the conversion within the processing institution\n            between original paper check, image, and IRD. The indicator is specific to the action of the institution identified in the\n            EndorsingBankRoutingNumber.\n\n            * `0` - Did not convert physical document\n            * `1` - Original paper converted to IRD\n            * `2` - Original paper converted to image\n            * `3` - IRD converted to another IRD\n            * `4` - IRD converted to image of IRD\n            * `5` - Image converted to an IRD\n            * `6` - Image converted to another image (e.g., transcoded)\n            * `7` - Did not convert image (e.g., same as source)\n            * `8` - Undetermined\n          example: '1'\n        endorsingBankCorrectionIndicator:\n          type: integer\n          enum:\n            - 0\n            - 1\n            - 2\n            - 3\n            - 4\n          description: |\n            EndorsingBankCorrectionIndicator identifies whether and how the MICR line of this item was repaired by the\n            creator of this CheckDetailAddendumC Record for fields other than Payor Bank Routing Number and Amount.\n\n            * `0` - No Repair\n            * `1` - Repaired (form of repair unknown)\n            * `2` - Repaired without Operator intervention\n            * `3` - Repaired with Operator intervention\n            * `4` - Undetermined if repair has been done or not\n          example: 1\n        returnReason:\n          type: string\n          description: ReturnReason is a code that indicates the reason for non-payment.\n          example: \"A\"\n        userField:\n          type: string\n          maxLength: 19\n          description: UserField identifies a field used at the discretion of users of the standard.\n          example: 'Z'\n        endorsingBankIdentifier:\n          type: integer\n          enum:\n            - 0\n            - 1\n            - 2\n            - 3\n          description: |\n            * `0` - Depository Bank (BOFD) - this value is used when the CheckDetailAddendumC Record reflects the Return\n            * `Processing Bank in lieu of BOFD.\n            * `1` - Other Collecting Bank\n            * `2` - Other Returning Bank\n            * `3` - Payor Bank\n          example: 0\n      required:\n        - endorsingBankRoutingNumber\n        - bOFDEndorsementBusinessDate\n        - endorsingBankItemSequenceNumber\n        - truncationIndicator\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /files/create: post: operation \"createICLFile\": security: unknown security schema \"bearerAuth\""
}