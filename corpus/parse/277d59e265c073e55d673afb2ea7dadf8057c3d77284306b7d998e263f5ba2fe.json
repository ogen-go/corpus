{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/DevCycleHQ/go-mgmt-sdk"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "api/swagger.yaml",
			"byteSize": 85963,
			"content": "openapi: 3.0.0\ninfo:\n  title: DevCycle Management API\n  description: \"\"\n  contact: {}\n  version: 1.0.0\nservers:\n- url: /\npaths:\n  /v1/projects:\n    get:\n      tags:\n      - Projects\n      summary: List Projects\n      description: List Projects\n      operationId: ProjectsController_findAll\n      parameters:\n      - name: page\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          minimum: 1\n          type: number\n          format: int32\n          default: 1\n      - name: perPage\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          maximum: 1000\n          minimum: 1\n          type: number\n          format: int32\n          default: 100\n      - name: sortBy\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n          default: createdAt\n      - name: sortOrder\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n          enum:\n          - asc\n          - desc\n          default: desc\n      - name: search\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n      - name: createdBy\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Project'\n                x-content-type: application/json\n        \"400\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n    post:\n      tags:\n      - Projects\n      summary: Create Project\n      description: Create a new Project\n      operationId: ProjectsController_create\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateProjectDto'\n        required: true\n      responses:\n        \"201\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Project'\n        \"400\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n        \"409\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConflictErrorResponse'\n  /v1/projects/{key}:\n    get:\n      tags:\n      - Projects\n      summary: Get a Project\n      description: Get a Project by ID or key\n      operationId: ProjectsController_findOne\n      parameters:\n      - name: key\n        in: path\n        description: A Project key or ID\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Project'\n        \"404\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n    delete:\n      tags:\n      - Projects\n      summary: Delete a Project\n      description: Delete a Project by ID or key\n      operationId: ProjectsController_remove\n      parameters:\n      - name: key\n        in: path\n        description: A Project key or ID\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: \"\"\n        \"404\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n        \"405\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CannotDeleteLastItemErrorResponse'\n    patch:\n      tags:\n      - Projects\n      summary: Update a Project\n      description: Update a Project by ID or key\n      operationId: ProjectsController_update\n      parameters:\n      - name: key\n        in: path\n        description: A Project key or ID\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateProjectDto'\n        required: true\n      responses:\n        \"200\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Project'\n        \"400\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n        \"404\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n        \"409\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConflictErrorResponse'\n  /v1/projects/{project}/environments:\n    get:\n      tags:\n      - Environments\n      summary: List Environments\n      description: List Environments\n      operationId: EnvironmentsController_findAll\n      parameters:\n      - name: page\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          minimum: 1\n          type: number\n          format: int32\n          default: 1\n      - name: perPage\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          maximum: 1000\n          minimum: 1\n          type: number\n          format: int32\n          default: 100\n      - name: sortBy\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n          default: createdAt\n      - name: sortOrder\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n          enum:\n          - asc\n          - desc\n          default: desc\n      - name: search\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n      - name: createdBy\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n      - name: project\n        in: path\n        description: A Project key or ID\n        required: true\n        style: simple\n        explode: false\n        schema: {}\n      responses:\n        \"200\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Environment'\n                x-content-type: application/json\n        \"400\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n        \"401\":\n          description: \"\"\n        \"404\":\n          description: \"\"\n    post:\n      tags:\n      - Environments\n      summary: Create Environment\n      description: Create a new Environment\n      operationId: EnvironmentsController_create\n      parameters:\n      - name: project\n        in: path\n        description: A Project key or ID\n        required: true\n        style: simple\n        explode: false\n        schema: {}\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateEnvironmentDto'\n        required: true\n      responses:\n        \"201\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Environment'\n        \"400\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n        \"401\":\n          description: \"\"\n        \"404\":\n          description: \"\"\n        \"409\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConflictErrorResponse'\n  /v1/projects/{project}/environments/{key}:\n    get:\n      tags:\n      - Environments\n      summary: Get an Environment\n      description: Get an Environment by ID or key\n      operationId: EnvironmentsController_findOne\n      parameters:\n      - name: key\n        in: path\n        description: A Environment key or ID\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      - name: project\n        in: path\n        description: A Project key or ID\n        required: true\n        style: simple\n        explode: false\n        schema: {}\n      responses:\n        \"200\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Environment'\n        \"401\":\n          description: \"\"\n        \"404\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n    delete:\n      tags:\n      - Environments\n      summary: Delete an Environment\n      description: Delete an Environment by ID or key\n      operationId: EnvironmentsController_remove\n      parameters:\n      - name: key\n        in: path\n        description: A Environment key or ID\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      - name: project\n        in: path\n        description: A Project key or ID\n        required: true\n        style: simple\n        explode: false\n        schema: {}\n      responses:\n        \"200\":\n          description: \"\"\n        \"401\":\n          description: \"\"\n        \"404\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n        \"405\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CannotDeleteLastItemErrorResponse'\n    patch:\n      tags:\n      - Environments\n      summary: Update an Environment\n      description: Update an Environment by ID or key\n      operationId: EnvironmentsController_update\n      parameters:\n      - name: key\n        in: path\n        description: A Environment key or ID\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      - name: project\n        in: path\n        description: A Project key or ID\n        required: true\n        style: simple\n        explode: false\n        schema: {}\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateEnvironmentDto'\n        required: true\n      responses:\n        \"200\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Environment'\n        \"400\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n        \"401\":\n          description: \"\"\n        \"404\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n        \"409\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConflictErrorResponse'\n  /v1/projects/{project}/variables:\n    get:\n      tags:\n      - Variables\n      summary: List Variables\n      operationId: VariablesController_findAll\n      parameters:\n      - name: page\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          minimum: 1\n          type: number\n          format: int32\n          default: 1\n      - name: perPage\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          maximum: 1000\n          minimum: 1\n          type: number\n          format: int32\n          default: 100\n      - name: sortBy\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n          default: createdAt\n      - name: sortOrder\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n          enum:\n          - asc\n          - desc\n          default: desc\n      - name: search\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n      - name: feature\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n      - name: type\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n          enum:\n          - String\n          - Boolean\n          - Number\n          - JSON\n      - name: project\n        in: path\n        description: A Project key or ID\n        required: true\n        style: simple\n        explode: false\n        schema: {}\n      responses:\n        \"200\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Variable'\n                x-content-type: application/json\n        \"400\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n        \"401\":\n          description: \"\"\n        \"404\":\n          description: \"\"\n    post:\n      tags:\n      - Variables\n      summary: Create a Variable\n      operationId: VariablesController_create\n      parameters:\n      - name: project\n        in: path\n        description: A Project key or ID\n        required: true\n        style: simple\n        explode: false\n        schema: {}\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateVariableDto'\n        required: true\n      responses:\n        \"201\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Variable'\n        \"400\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n        \"401\":\n          description: \"\"\n        \"404\":\n          description: \"\"\n        \"409\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConflictErrorResponse'\n  /v1/projects/{project}/variables/{key}:\n    get:\n      tags:\n      - Variables\n      summary: Get a Variable\n      operationId: VariablesController_findOne\n      parameters:\n      - name: key\n        in: path\n        description: A Variable key or ID\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      - name: project\n        in: path\n        description: A Project key or ID\n        required: true\n        style: simple\n        explode: false\n        schema: {}\n      responses:\n        \"200\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Variable'\n        \"401\":\n          description: \"\"\n        \"404\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n    delete:\n      tags:\n      - Variables\n      summary: Delete a Variable\n      operationId: VariablesController_remove\n      parameters:\n      - name: key\n        in: path\n        description: A Variable key or ID\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      - name: project\n        in: path\n        description: A Project key or ID\n        required: true\n        style: simple\n        explode: false\n        schema: {}\n      responses:\n        \"200\":\n          description: \"\"\n        \"401\":\n          description: \"\"\n        \"404\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n    patch:\n      tags:\n      - Variables\n      summary: Update a Variable\n      operationId: VariablesController_update\n      parameters:\n      - name: key\n        in: path\n        description: A Variable key or ID\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      - name: project\n        in: path\n        description: A Project key or ID\n        required: true\n        style: simple\n        explode: false\n        schema: {}\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateVariableDto'\n        required: true\n      responses:\n        \"200\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Variable'\n        \"400\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n        \"401\":\n          description: \"\"\n        \"404\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n        \"409\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConflictErrorResponse'\n  /v1/projects/{project}/features:\n    get:\n      tags:\n      - Features\n      summary: List Features\n      description: List Features\n      operationId: FeaturesController_findAll\n      parameters:\n      - name: page\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          minimum: 1\n          type: number\n          format: int32\n          default: 1\n      - name: perPage\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          maximum: 1000\n          minimum: 1\n          type: number\n          format: int32\n          default: 100\n      - name: sortBy\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n          default: createdAt\n      - name: sortOrder\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n          enum:\n          - asc\n          - desc\n          default: desc\n      - name: search\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n      - name: createdBy\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n      - name: type\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n          enum:\n          - release\n          - experiment\n          - permission\n          - ops\n      - name: project\n        in: path\n        description: A Project key or ID\n        required: true\n        style: simple\n        explode: false\n        schema: {}\n      responses:\n        \"200\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Feature'\n                x-content-type: application/json\n        \"400\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n        \"401\":\n          description: \"\"\n        \"404\":\n          description: \"\"\n    post:\n      tags:\n      - Features\n      summary: Create Feature\n      description: Create a new Feature\n      operationId: FeaturesController_create\n      parameters:\n      - name: project\n        in: path\n        description: A Project key or ID\n        required: true\n        style: simple\n        explode: false\n        schema: {}\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateFeatureDto'\n        required: true\n      responses:\n        \"201\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Feature'\n        \"400\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n        \"401\":\n          description: \"\"\n        \"404\":\n          description: \"\"\n        \"409\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConflictErrorResponse'\n        \"412\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PreconditionFailedErrorResponse'\n  /v1/projects/{project}/features/{key}:\n    get:\n      tags:\n      - Features\n      summary: Get a Feature\n      description: Get a Feature by ID or key\n      operationId: FeaturesController_findOne\n      parameters:\n      - name: key\n        in: path\n        description: A Feature key or ID\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      - name: project\n        in: path\n        description: A Project key or ID\n        required: true\n        style: simple\n        explode: false\n        schema: {}\n      responses:\n        \"200\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Feature'\n        \"401\":\n          description: \"\"\n        \"404\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n    delete:\n      tags:\n      - Features\n      summary: Delete a Feature\n      description: Delete a Feature by ID or key\n      operationId: FeaturesController_remove\n      parameters:\n      - name: key\n        in: path\n        description: A Feature key or ID\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      - name: project\n        in: path\n        description: A Project key or ID\n        required: true\n        style: simple\n        explode: false\n        schema: {}\n      responses:\n        \"200\":\n          description: \"\"\n        \"401\":\n          description: \"\"\n        \"404\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n    patch:\n      tags:\n      - Features\n      summary: Update a Feature\n      description: Update a Feature by ID or key\n      operationId: FeaturesController_update\n      parameters:\n      - name: key\n        in: path\n        description: A Feature key or ID\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      - name: project\n        in: path\n        description: A Project key or ID\n        required: true\n        style: simple\n        explode: false\n        schema: {}\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateFeatureDto'\n        required: true\n      responses:\n        \"200\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Feature'\n        \"400\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n        \"401\":\n          description: \"\"\n        \"404\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n        \"409\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConflictErrorResponse'\n        \"412\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PreconditionFailedErrorResponse'\n  /v1/projects/{project}/features/{key}/integrations/jira/issues:\n    get:\n      tags:\n      - Features\n      - Jira Integration\n      summary: List linked Jira Issues\n      operationId: JiraFeaturesController_findAll\n      parameters:\n      - name: key\n        in: path\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      - name: project\n        in: path\n        description: A Project key or ID\n        required: true\n        style: simple\n        explode: false\n        schema: {}\n      responses:\n        \"200\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/JiraIssueLink'\n                x-content-type: application/json\n        \"400\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n        \"401\":\n          description: \"\"\n        \"404\":\n          description: \"\"\n    post:\n      tags:\n      - Features\n      - Jira Integration\n      summary: Link feature to Jira issue\n      operationId: JiraFeaturesController_create\n      parameters:\n      - name: key\n        in: path\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      - name: project\n        in: path\n        description: A Project key or ID\n        required: true\n        style: simple\n        explode: false\n        schema: {}\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LinkJiraIssueDto'\n        required: true\n      responses:\n        \"201\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JiraIssueLink'\n        \"400\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n        \"401\":\n          description: \"\"\n        \"404\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n        \"409\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConflictErrorResponse'\n        \"412\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PreconditionFailedErrorResponse'\n  /v1/projects/{project}/features/{key}/integrations/jira/issues/{issue_id}:\n    delete:\n      tags:\n      - Features\n      - Jira Integration\n      summary: Unlink feature from Jira issue\n      operationId: JiraFeaturesController_remove\n      parameters:\n      - name: key\n        in: path\n        description: A Feature key or ID\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      - name: issue_id\n        in: path\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      - name: project\n        in: path\n        description: A Project key or ID\n        required: true\n        style: simple\n        explode: false\n        schema: {}\n      responses:\n        \"200\":\n          description: \"\"\n        \"401\":\n          description: \"\"\n        \"404\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n  /v1/projects/{project}/features/{feature}/configurations:\n    get:\n      tags:\n      - Features\n      summary: List Feature configurations\n      description: List Feature configurations for all environments or by environment\n        key or ID\n      operationId: FeatureConfigsController_findAll\n      parameters:\n      - name: environment\n        in: query\n        description: A Environment key or ID\n        required: false\n        style: form\n        explode: true\n        schema: {}\n      - name: feature\n        in: path\n        description: A Feature key or ID\n        required: true\n        style: simple\n        explode: false\n        schema: {}\n      - name: project\n        in: path\n        description: A Project key or ID\n        required: true\n        style: simple\n        explode: false\n        schema: {}\n      responses:\n        \"200\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/FeatureConfig'\n                x-content-type: application/json\n        \"401\":\n          description: \"\"\n        \"404\":\n          description: \"\"\n    patch:\n      tags:\n      - Features\n      summary: Update a Feature configuration\n      description: Update a Feature configuration by environment key or ID\n      operationId: FeatureConfigsController_update\n      parameters:\n      - name: environment\n        in: query\n        description: A Environment key or ID\n        required: true\n        style: form\n        explode: true\n        schema: {}\n      - name: feature\n        in: path\n        description: A Feature key or ID\n        required: true\n        style: simple\n        explode: false\n        schema: {}\n      - name: project\n        in: path\n        description: A Project key or ID\n        required: true\n        style: simple\n        explode: false\n        schema: {}\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateFeatureConfigDto'\n        required: true\n      responses:\n        \"200\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FeatureConfig'\n        \"400\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n        \"401\":\n          description: \"\"\n        \"404\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n  /v1/projects/{project}/features/{feature}/results/summary:\n    get:\n      tags:\n      - Results\n      operationId: ResultsController_getResultsSummary\n      parameters:\n      - name: startDate\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: number\n      - name: endDate\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: number\n      - name: platform\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n      - name: variable\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n      - name: environment\n        in: query\n        description: A Environment key or ID\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n      - name: period\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n          enum:\n          - day\n          - hour\n          - month\n      - name: feature\n        in: path\n        description: A Feature key or ID\n        required: true\n        style: simple\n        explode: false\n        schema: {}\n      - name: project\n        in: path\n        description: A Project key or ID\n        required: true\n        style: simple\n        explode: false\n        schema: {}\n      responses:\n        \"200\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResultSummaryDto'\n        \"400\":\n          description: \"\"\n        \"401\":\n          description: \"\"\n        \"404\":\n          description: \"\"\n  /v1/projects/{project}/features/{feature}/results/evaluations:\n    get:\n      tags:\n      - Results\n      operationId: ResultsController_getEvaluationsPerHourByFeature\n      parameters:\n      - name: startDate\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: number\n      - name: endDate\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: number\n      - name: platform\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n      - name: variable\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n      - name: environment\n        in: query\n        description: A Environment key or ID\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n      - name: period\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n          enum:\n          - day\n          - hour\n          - month\n      - name: feature\n        in: path\n        description: A Feature key or ID\n        required: true\n        style: simple\n        explode: false\n        schema: {}\n      - name: project\n        in: path\n        description: A Project key or ID\n        required: true\n        style: simple\n        explode: false\n        schema: {}\n      responses:\n        \"200\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResultEvaluationsByHourDto'\n        \"400\":\n          description: \"\"\n        \"401\":\n          description: \"\"\n        \"404\":\n          description: \"\"\n  /v1/projects/{project}/results/evaluations:\n    get:\n      tags:\n      - Results\n      operationId: ResultsController_getEvaluationsPerHourByProject\n      parameters:\n      - name: startDate\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: number\n      - name: endDate\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: number\n      - name: environment\n        in: query\n        description: A Environment key or ID\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n      - name: period\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n          enum:\n          - day\n          - hour\n          - month\n      - name: project\n        in: path\n        description: A Project key or ID\n        required: true\n        style: simple\n        explode: false\n        schema: {}\n      responses:\n        \"200\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResultProjectEvaluationsByHourDto'\n        \"400\":\n          description: \"\"\n        \"401\":\n          description: \"\"\n        \"404\":\n          description: \"\"\n  /v1/projects/{project}/customProperties:\n    get:\n      tags:\n      - Custom Properties\n      summary: List Custom Properties\n      description: List Custom Properties\n      operationId: CustomPropertiesController_findAll\n      parameters:\n      - name: page\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          minimum: 1\n          type: number\n          format: int32\n          default: 1\n      - name: perPage\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          maximum: 1000\n          minimum: 1\n          type: number\n          format: int32\n          default: 100\n      - name: sortBy\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n          default: createdAt\n      - name: sortOrder\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n          enum:\n          - asc\n          - desc\n          default: desc\n      - name: search\n        in: query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n      - name: project\n        in: path\n        description: A Project key or ID\n        required: true\n        style: simple\n        explode: false\n        schema: {}\n      responses:\n        \"200\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/CustomProperty'\n                x-content-type: application/json\n        \"400\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n        \"401\":\n          description: \"\"\n        \"404\":\n          description: \"\"\n    post:\n      tags:\n      - Custom Properties\n      summary: Create Custom Property\n      description: Create a new Custom Property\n      operationId: CustomPropertiesController_create\n      parameters:\n      - name: project\n        in: path\n        description: A Project key or ID\n        required: true\n        style: simple\n        explode: false\n        schema: {}\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateCustomPropertyDto'\n        required: true\n      responses:\n        \"201\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CustomProperty'\n        \"400\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n        \"401\":\n          description: \"\"\n        \"404\":\n          description: \"\"\n        \"409\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConflictErrorResponse'\ncomponents:\n  schemas:\n    CreateProjectDto:\n      required:\n      - key\n      - name\n      type: object\n      properties:\n        name:\n          maxLength: 100\n          type: string\n          description: Project name\n          example: Delivery App\n        key:\n          maxLength: 100\n          pattern: \"^[a-zA-Z0-9-_]+$\"\n          type: string\n          description: A unique key to identify the Project\n          example: delivery-app\n        description:\n          maxLength: 1000\n          type: string\n          description: A description of the Project\n          example: A web app to manage outbound deliveries\n    Project:\n      required:\n      - _createdBy\n      - _id\n      - _organization\n      - createdAt\n      - key\n      - name\n      - updatedAt\n      type: object\n      properties:\n        name:\n          maxLength: 100\n          type: string\n          description: Project name\n          example: Delivery App\n        key:\n          maxLength: 100\n          pattern: \"^[a-zA-Z0-9-_]+$\"\n          type: string\n          description: A unique key to identify the Project\n          example: delivery-app\n        description:\n          maxLength: 1000\n          type: string\n          description: A description of the Project\n          example: A web app to manage outbound deliveries\n        _id:\n          type: string\n          description: A unique Project ID\n          example: 61450f3daec96f5cf4a49946\n        _organization:\n          type: string\n          description: ID of the Organization owning the Project\n        _createdBy:\n          type: string\n          description: ID of the User who created the project\n        createdAt:\n          type: string\n          description: The date the Project was created\n          format: date-time\n        updatedAt:\n          type: string\n          description: The date the Project was last updated\n          format: date-time\n      example:\n        createdAt: 2000-01-23T04:56:07.000+00:00\n        _organization: _organization\n        name: Delivery App\n        description: A web app to manage outbound deliveries\n        _id: 61450f3daec96f5cf4a49946\n        _createdBy: _createdBy\n        key: delivery-app\n        updatedAt: 2000-01-23T04:56:07.000+00:00\n    BadRequestErrorResponse:\n      required:\n      - error\n      - message\n      - statusCode\n      type: object\n      properties:\n        statusCode:\n          type: number\n          description: Response status code\n          example: 400\n        message:\n          type: object\n          description: Error details\n          example:\n          - key should not be empty\n        error:\n          type: string\n          description: Error type\n          example: Bad Request\n    ConflictErrorResponse:\n      required:\n      - error\n      - message\n      - statusCode\n      type: object\n      properties:\n        statusCode:\n          type: number\n          description: Response status code\n          example: 409\n        message:\n          type: object\n          description: Error details\n          example: Duplicate key 'delivery-app'\n        error:\n          type: string\n          description: Error type\n          example: Conflict\n    NotFoundErrorResponse:\n      required:\n      - error\n      - message\n      - statusCode\n      type: object\n      properties:\n        statusCode:\n          type: number\n          description: Response status code\n          example: 404\n        message:\n          type: object\n          description: Error details\n          example: Item with key 'delivery-app' not found\n        error:\n          type: string\n          description: Error type\n          example: Not Found\n    UpdateProjectDto:\n      type: object\n      properties:\n        name:\n          maxLength: 100\n          type: string\n          description: Project name\n          example: Delivery App\n        key:\n          maxLength: 100\n          pattern: \"^[a-zA-Z0-9-_]+$\"\n          type: string\n          description: A unique key to identify the Project\n          example: delivery-app\n        description:\n          maxLength: 1000\n          type: string\n          description: A description of the Project\n          example: A web app to manage outbound deliveries\n    CannotDeleteLastItemErrorResponse:\n      required:\n      - error\n      - message\n      - statusCode\n      type: object\n      properties:\n        statusCode:\n          type: number\n          description: Response status code\n          example: 405\n        message:\n          type: object\n          description: Error details\n          example: Cannot DELETE last item\n        error:\n          type: string\n          description: Error type\n          example: Method Not Allowed\n    EnvironmentSettings:\n      type: object\n      properties:\n        appIconURI:\n          maxLength: 2048\n          type: string\n          description: A unique App Icon URI for a given environment\n    CreateEnvironmentDto:\n      required:\n      - key\n      - name\n      - type\n      type: object\n      properties:\n        name:\n          maxLength: 100\n          type: string\n          description: A unique display name\n          example: Staging Upcoming\n        key:\n          maxLength: 100\n          pattern: \"^[a-zA-Z0-9-_]+$\"\n          type: string\n          description: \"Unique Environment identifier, can be used in the SDK / API\\\n            \\ to reference by key rather than ID.\\nMust only contain lower-case characters\\\n            \\ and `_` or `-`.\"\n          example: staging-upcoming\n        description:\n          maxLength: 1000\n          type: string\n          description: Environment description.\n          example: Pre-production changes\n        color:\n          maxLength: 9\n          pattern: \"/^#([0-9A-F]{3}|[0-9A-F]{4}|[0-9A-F]{6}|[0-9A-F]{8})$/i\"\n          type: string\n          description: \"Environment display color, used to highlight different environments\\\n            \\ on the dashboard.\\nMust use Hex color code.\"\n          example: '#4073FF'\n        type:\n          type: string\n          description: The environment type\n          example: staging\n          enum:\n          - development\n          - staging\n          - production\n          - disaster_recovery\n        settings:\n          description: Environment based settings\n          allOf:\n          - $ref: '#/components/schemas/EnvironmentSettings'\n    APIKey:\n      required:\n      - createdAt\n      - key\n      type: object\n      properties:\n        key:\n          type: string\n          description: A unique API key\n        createdAt:\n          type: string\n          description: Date the key was generated\n          format: date-time\n    SDKKeys:\n      required:\n      - client\n      - mobile\n      - server\n      type: object\n      properties:\n        mobile:\n          type: array\n          items:\n            $ref: '#/components/schemas/APIKey'\n        client:\n          type: array\n          items:\n            $ref: '#/components/schemas/APIKey'\n        server:\n          type: array\n          items:\n            $ref: '#/components/schemas/APIKey'\n    Environment:\n      required:\n      - _createdBy\n      - _id\n      - _project\n      - createdAt\n      - key\n      - name\n      - sdkKeys\n      - type\n      - updatedAt\n      type: object\n      properties:\n        name:\n          maxLength: 100\n          type: string\n          description: A unique display name\n          example: Staging Upcoming\n        key:\n          maxLength: 100\n          pattern: \"^[a-zA-Z0-9-_]+$\"\n          type: string\n          description: \"Unique Environment identifier, can be used in the SDK / API\\\n            \\ to reference by key rather than ID.\\nMust only contain lower-case characters\\\n            \\ and `_` or `-`.\"\n          example: staging-upcoming\n        description:\n          maxLength: 1000\n          type: string\n          description: Environment description.\n          example: Pre-production changes\n        color:\n          maxLength: 9\n          pattern: \"/^#([0-9A-F]{3}|[0-9A-F]{4}|[0-9A-F]{6}|[0-9A-F]{8})$/i\"\n          type: string\n          description: \"Environment display color, used to highlight different environments\\\n            \\ on the dashboard.\\nMust use Hex color code.\"\n          example: '#4073FF'\n        _id:\n          type: string\n          description: A unique Environment ID\n          example: 61450f3daec96f5cf4a49946\n        _project:\n          type: string\n          description: The Project owning the Environment\n        type:\n          type: string\n          description: The environment type\n          example: staging\n          enum:\n          - development\n          - staging\n          - production\n          - disaster_recovery\n        _createdBy:\n          type: string\n          description: ID of the User who created the Environment.\n        createdAt:\n          type: string\n          description: The date the Environment was created\n          format: date-time\n        updatedAt:\n          type: string\n          description: The date the Environment was last updated\n          format: date-time\n        sdkKeys:\n          description: |-\n            SDK Keys for mobile SDKs / client SDKs / server SDKs.\n            Multiple keys can be created to allow for key rotation.\n          allOf:\n          - $ref: '#/components/schemas/SDKKeys'\n        settings:\n          description: Environment based settings\n          allOf:\n          - $ref: '#/components/schemas/EnvironmentSettings'\n      example:\n        createdAt: 2000-01-23T04:56:07.000+00:00\n        settings: \"\"\n        color: '#4073FF'\n        _project: _project\n        sdkKeys: \"\"\n        name: Staging Upcoming\n        description: Pre-production changes\n        _id: 61450f3daec96f5cf4a49946\n        _createdBy: _createdBy\n        type: staging\n        key: staging-upcoming\n        updatedAt: 2000-01-23T04:56:07.000+00:00\n    UpdateEnvironmentDto:\n      type: object\n      properties:\n        name:\n          maxLength: 100\n          type: string\n          description: A unique display name\n          example: Staging Upcoming\n        key:\n          maxLength: 100\n          pattern: \"^[a-zA-Z0-9-_]+$\"\n          type: string\n          description: \"Unique Environment identifier, can be used in the SDK / API\\\n            \\ to reference by key rather than ID.\\nMust only contain lower-case characters\\\n            \\ and `_` or `-`.\"\n          example: staging-upcoming\n        description:\n          maxLength: 1000\n          type: string\n          description: Environment description.\n          example: Pre-production changes\n        color:\n          maxLength: 9\n          pattern: \"/^#([0-9A-F]{3}|[0-9A-F]{4}|[0-9A-F]{6}|[0-9A-F]{8})$/i\"\n          type: string\n          description: \"Environment display color, used to highlight different environments\\\n            \\ on the dashboard.\\nMust use Hex color code.\"\n          example: '#4073FF'\n        type:\n          type: string\n          description: The environment type\n          example: staging\n          enum:\n          - development\n          - staging\n          - production\n          - disaster_recovery\n        settings:\n          description: Environment based settings\n          allOf:\n          - $ref: '#/components/schemas/EnvironmentSettings'\n    CreateVariableDto:\n      required:\n      - key\n      - type\n      type: object\n      properties:\n        name:\n          maxLength: 100\n          type: string\n          description: Variable name\n          example: Show New Dashboard\n        description:\n          maxLength: 1000\n          type: string\n          description: A description of the Variable\n          example: A boolean variable that will toggle the new dashboard feature\n        key:\n          maxLength: 100\n          pattern: \"^[a-zA-Z0-9-_]+$\"\n          type: string\n          description: \"Unique Variable identifier, can be used in the SDK / API to\\\n            \\ reference by key rather then ID.\\nMust only contain lower-case characters\\\n            \\ and `_` or `-`.\"\n          example: show-new-dashboard\n        _feature:\n          type: string\n          description: The key or ID of the Feature this Variable is associated with\n          example: new-dashboard\n        type:\n          type: string\n          description: \"The type of Variable. Must be one of [String | Boolean | Number\\\n            \\ | JSON]\"\n          example: Boolean\n          enum:\n          - String\n          - Boolean\n          - Number\n          - JSON\n        defaultValue:\n          type: object\n          description: A default value for the Variable\n          example: false\n    Variable:\n      required:\n      - _id\n      - _project\n      - createdAt\n      - key\n      - source\n      - type\n      - updatedAt\n      type: object\n      properties:\n        name:\n          maxLength: 100\n          type: string\n          description: Variable name\n          example: Show New Dashboard\n        description:\n          maxLength: 1000\n          type: string\n          description: A description of the Variable\n          example: A boolean variable that will toggle the new dashboard feature\n        key:\n          maxLength: 100\n          pattern: \"^[a-zA-Z0-9-_]+$\"\n          type: string\n          description: \"Unique Variable identifier, can be used in the SDK / API to\\\n            \\ reference by key rather then ID.\\nMust only contain lower-case characters\\\n            \\ and `_` or `-`.\"\n          example: show-new-dashboard\n        _id:\n          type: string\n          description: A unique Variable ID\n          example: 61450f3daec96f5cf4a49946\n        _project:\n          type: string\n          description: The ID of the Project this Variable belongs to\n        _feature:\n          type: string\n          description: The ID of the Feature this Variable belongs to\n          example: 61450f3daec96f5cf4a49947\n        type:\n          type: string\n          description: \"The type of Variable. Must be one of [String | Boolean | Number\\\n            \\ | JSON]\"\n          example: Boolean\n          enum:\n          - String\n          - Boolean\n          - Number\n          - JSON\n        defaultValue:\n          type: object\n          description: A default value for the Variable\n          example: false\n        source:\n          type: string\n          description: The system that was used for the creation of the Variable.\n          example: api\n          enum:\n          - api\n          - dashboard\n          - clientSDK\n          - serverSDK\n        _createdBy:\n          type: string\n          description: ID of the User who created the Variable.\n        createdAt:\n          type: string\n          description: The date the Variable was created\n          format: date-time\n        updatedAt:\n          type: string\n          description: The date the Variable was last updated\n          format: date-time\n      example:\n        createdAt: 2000-01-23T04:56:07.000+00:00\n        _project: _project\n        _feature: 61450f3daec96f5cf4a49947\n        defaultValue: false\n        name: Show New Dashboard\n        description: A boolean variable that will toggle the new dashboard feature\n        _id: 61450f3daec96f5cf4a49946\n        source: api\n        _createdBy: _createdBy\n        type: Boolean\n        key: show-new-dashboard\n        updatedAt: 2000-01-23T04:56:07.000+00:00\n    UpdateVariableDto:\n      type: object\n      properties:\n        name:\n          maxLength: 100\n          type: string\n          description: Variable name\n          example: Show New Dashboard\n        description:\n          maxLength: 1000\n          type: string\n          description: A description of the Variable\n          example: A boolean variable that will toggle the new dashboard feature\n        key:\n          maxLength: 100\n          pattern: \"^[a-zA-Z0-9-_]+$\"\n          type: string\n          description: \"Unique Variable identifier, can be used in the SDK / API to\\\n            \\ reference by key rather then ID.\\nMust only contain lower-case characters\\\n            \\ and `_` or `-`.\"\n          example: show-new-dashboard\n        _feature:\n          type: string\n          description: The key or ID of the Feature this Variable is associated with\n          example: new-dashboard\n    FeatureVariationDto:\n      required:\n      - key\n      - name\n      type: object\n      properties:\n        key:\n          maxLength: 100\n          pattern: \"^[a-zA-Z0-9-_]+$\"\n          type: string\n          description: \"Unique key by Feature, can be used in the SDK / API to reference\\\n            \\ by 'key' rather than _id.\\nMust only contain lower-case characters and\\\n            \\ `_` or `-`.\"\n          example: variation-1\n        name:\n          maxLength: 100\n          type: string\n          description: Variation display name.\n          example: User's with dashboard access\n        variables:\n          type: object\n          additionalProperties:\n            anyOf:\n            - type: string\n            - type: number\n            - type: boolean\n            - type: array\n            - type: object\n          description: A key-value map of variables to their value for this variation\n          example:\n            show-new-dashboard: true\n            string-var: hello world\n            bool-var: true\n            num-var: 99\n            json-var:\n              foo: bar\n    CreateFeatureDto:\n      required:\n      - key\n      - name\n      type: object\n      properties:\n        name:\n          maxLength: 100\n          type: string\n          description: Name of the Feature\n          example: New Dashboard\n        key:\n          maxLength: 100\n          pattern: \"^[a-zA-Z0-9-_]+$\"\n          type: string\n          description: \"Unique key by Project, can be used in the SDK / API to reference\\\n            \\ by 'key' rather than _id.\\nMust only contain lower-case characters and\\\n            \\ `_` or `-`.\"\n          example: new-dash\n        description:\n          maxLength: 1000\n          type: string\n          description: Feature description.\n          example: New client-facing dashboard.\n        variations:\n          type: array\n          description: Variation configurations to be used by feature configurations.\n          items:\n            $ref: '#/components/schemas/FeatureVariationDto'\n        variables:\n          type: array\n          description: Variable definitions to be referenced in variations\n          items:\n            $ref: '#/components/schemas/CreateVariableDto'\n        type:\n          type: string\n          description: The Feature type\n          enum:\n          - release\n          - experiment\n          - permission\n          - ops\n        tags:\n          type: array\n          description: Tags to organize Features on the dashboard\n          example:\n          - Dashboard\n          - QA\n          items:\n            type: string\n    Variation:\n      required:\n      - _id\n      - key\n      - name\n      type: object\n      properties:\n        key:\n          maxLength: 100\n          pattern: \"^[a-zA-Z0-9-_]+$\"\n          type: string\n          description: \"Unique key by Feature, can be used in the SDK / API to reference\\\n            \\ by 'key' rather than _id.\\nMust only contain lower-case characters and\\\n            \\ `_` or `-`.\"\n          example: variation-1\n        name:\n          maxLength: 100\n          type: string\n          description: Variation display name.\n          example: User's with dashboard access\n        variables:\n          type: object\n          additionalProperties:\n            anyOf:\n            - type: string\n            - type: number\n            - type: boolean\n            - type: array\n            - type: object\n          description: A key-value map of variables to their value for this variation\n          example:\n            show-new-dashboard: true\n            string-var: hello world\n            bool-var: true\n            num-var: 99\n            json-var:\n              foo: bar\n        _id:\n          type: string\n          description: A unique Variation ID\n          example: 61450f3daec96f5cf4a49946\n      example:\n        variables:\n          show-new-dashboard: true\n          string-var: hello world\n          bool-var: true\n          num-var: 99\n          json-var:\n            foo: bar\n        name: User's with dashboard access\n        _id: 61450f3daec96f5cf4a49946\n        key: variation-1\n    Feature:\n      required:\n      - _id\n      - _project\n      - createdAt\n      - key\n      - name\n      - source\n      - updatedAt\n      type: object\n      properties:\n        name:\n          maxLength: 100\n          type: string\n          description: Name of the Feature\n          example: New Dashboard\n        key:\n          maxLength: 100\n          pattern: \"^[a-zA-Z0-9-_]+$\"\n          type: string\n          description: \"Unique key by Project, can be used in the SDK / API to reference\\\n            \\ by 'key' rather than _id.\\nMust only contain lower-case characters and\\\n            \\ `_` or `-`.\"\n          example: new-dash\n        description:\n          maxLength: 1000\n          type: string\n          description: Feature description.\n          example: New client-facing dashboard.\n        _id:\n          type: string\n          description: A unique Feature ID\n          example: 61450f3daec96f5cf4a49946\n        _project:\n          type: string\n          description: The Project owning the Feature\n        source:\n          type: string\n          description: Source that created the Feature\n          enum:\n          - api\n          - dashboard\n        type:\n          type: string\n          description: The Feature type\n          enum:\n          - release\n          - experiment\n          - permission\n          - ops\n        _createdBy:\n          type: string\n          description: ID of the User who created the Feature\n        createdAt:\n          type: string\n          description: The date the Feature was created\n          format: date-time\n        updatedAt:\n          type: string\n          description: The date the Feature was last updated\n          format: date-time\n        variations:\n          type: array\n          description: Variation configurations to be used by feature configurations.\n          items:\n            $ref: '#/components/schemas/Variation'\n        variables:\n          type: array\n          description: Variable definitions to be referenced in variations\n          items:\n            $ref: '#/components/schemas/Variable'\n        tags:\n          type: array\n          description: Tags to organize Features on the dashboard\n          example:\n          - Dashboard\n          - QA\n          items:\n            type: string\n      example:\n        variables:\n        - createdAt: 2000-01-23T04:56:07.000+00:00\n          _project: _project\n          _feature: 61450f3daec96f5cf4a49947\n          defaultValue: false\n          name: Show New Dashboard\n          description: A boolean variable that will toggle the new dashboard feature\n          _id: 61450f3daec96f5cf4a49946\n          source: api\n          _createdBy: _createdBy\n          type: Boolean\n          key: show-new-dashboard\n          updatedAt: 2000-01-23T04:56:07.000+00:00\n        - createdAt: 2000-01-23T04:56:07.000+00:00\n          _project: _project\n          _feature: 61450f3daec96f5cf4a49947\n          defaultValue: false\n          name: Show New Dashboard\n          description: A boolean variable that will toggle the new dashboard feature\n          _id: 61450f3daec96f5cf4a49946\n          source: api\n          _createdBy: _createdBy\n          type: Boolean\n          key: show-new-dashboard\n          updatedAt: 2000-01-23T04:56:07.000+00:00\n        _project: _project\n        description: New client-facing dashboard.\n        source: api\n        _createdBy: _createdBy\n        type: release\n        tags:\n        - Dashboard\n        - QA\n        createdAt: 2000-01-23T04:56:07.000+00:00\n        variations:\n        - variables:\n            show-new-dashboard: true\n            string-var: hello world\n            bool-var: true\n            num-var: 99\n            json-var:\n              foo: bar\n          name: User's with dashboard access\n          _id: 61450f3daec96f5cf4a49946\n          key: variation-1\n        - variables:\n            show-new-dashboard: true\n            string-var: hello world\n            bool-var: true\n            num-var: 99\n            json-var:\n              foo: bar\n          name: User's with dashboard access\n          _id: 61450f3daec96f5cf4a49946\n          key: variation-1\n        name: New Dashboard\n        _id: 61450f3daec96f5cf4a49946\n        key: new-dash\n        updatedAt: 2000-01-23T04:56:07.000+00:00\n    PreconditionFailedErrorResponse:\n      required:\n      - error\n      - message\n      - statusCode\n      type: object\n      properties:\n        statusCode:\n          type: number\n          description: Response status code\n          example: 412\n        message:\n          type: object\n          description: Error details\n          example: Variable does not belong to Feature\n        error:\n          type: string\n          description: Error type\n          example: Precondition Failed\n    UpdateFeatureDto:\n      type: object\n      properties:\n        name:\n          maxLength: 100\n          type: string\n          description: Name of the Feature\n          example: New Dashboard\n        key:\n          maxLength: 100\n          pattern: \"^[a-zA-Z0-9-_]+$\"\n          type: string\n          description: \"Unique key by Project, can be used in the SDK / API to reference\\\n            \\ by 'key' rather than _id.\\nMust only contain lower-case characters and\\\n            \\ `_` or `-`.\"\n          example: new-dash\n        description:\n          maxLength: 1000\n          type: string\n          description: Feature description.\n          example: New client-facing dashboard.\n        variations:\n          type: array\n          description: Variation configurations to be used by feature configurations.\n          items:\n            $ref: '#/components/schemas/FeatureVariationDto'\n        variables:\n          type: array\n          description: Variable definitions to be referenced in variations\n          items:\n            $ref: '#/components/schemas/CreateVariableDto'\n        type:\n          type: string\n          description: The Feature type\n          enum:\n          - release\n          - experiment\n          - permission\n          - ops\n        tags:\n          type: array\n          description: Tags to organize Features on the dashboard\n          example:\n          - Dashboard\n          - QA\n          items:\n            type: string\n    LinkJiraIssueDto:\n      required:\n      - issueId\n      type: object\n      properties:\n        issueId:\n          type: string\n    JiraIssueLink:\n      required:\n      - issueId\n      type: object\n      properties:\n        issueId:\n          type: string\n      example:\n        issueId: issueId\n    AllFilter:\n      required:\n      - type\n      type: object\n      properties:\n        type:\n          type: string\n          description: Filter type of this audience\n          enum:\n          - all\n          - user\n          default: all\n    UserFilter:\n      required:\n      - comparator\n      - subType\n      - type\n      type: object\n      properties:\n        subType:\n          type: string\n          description: Sub type of this filter\n          example: email\n          enum:\n          - user_id\n          - email\n          - country\n          - platform\n          - platformVersion\n          - appVersion\n          - deviceModel\n          - customData\n        comparator:\n          type: string\n          description: Comparator to use\n          example: '!='\n          enum:\n          - =\n          - '!='\n          - exist\n          - '!exist'\n          - contain\n          - '!contain'\n        values:\n          type: array\n          description: An array of values is required for all filters except when\n            the comparator is 'exist' or '!exist'\n          example:\n          - baduser@email.com\n          items:\n            type: string\n        type:\n          type: string\n          description: Filter type of this audience\n          enum:\n          - all\n          - user\n          default: user\n    UserCountryFilter:\n      required:\n      - comparator\n      - subType\n      - type\n      - values\n      type: object\n      properties:\n        subType:\n          type: string\n          description: Sub type of this filter\n          example: email\n          enum:\n          - user_id\n          - email\n          - country\n          - platform\n          - platformVersion\n          - appVersion\n          - deviceModel\n          - customData\n          default: country\n        comparator:\n          type: string\n          description: Comparator to use\n          example: '!='\n          enum:\n          - =\n          - '!='\n          - exist\n          - '!exist'\n          - contain\n          - '!contain'\n        values:\n          type: array\n          description: An array of values is required for all filters except when\n            the comparator is 'exist' or '!exist'\n          example:\n          - CA\n          - US\n          items:\n            type: string\n        type:\n          type: string\n          description: Filter type of this audience\n          enum:\n          - all\n          - user\n          default: user\n    UserCustomFilter:\n      required:\n      - comparator\n      - dataKey\n      - dataKeyType\n      - subType\n      - type\n      type: object\n      properties:\n        comparator:\n          type: string\n          description: Comparator to use\n          example: '\u003e='\n          enum:\n          - =\n          - '!='\n          - '\u003e'\n          - '\u003e='\n          - \u003c\n          - \u003c=\n          - exist\n          - '!exist'\n          - contain\n          - '!contain'\n        dataKey:\n          minLength: 1\n          type: string\n          description: Data Key used for custom data\n          example: my_custom_prop\n        dataKeyType:\n          type: string\n          description: Data Key Type used for custom data\n          example: Number\n          enum:\n          - String\n          - Boolean\n          - Number\n          - Semver\n        values:\n          type: object\n          description: An array of values is required for all filters except when\n            the comparator is 'exist' or '!exist'\n          example:\n          - 0\n        type:\n          type: string\n          description: Filter type of this audience\n          enum:\n          - all\n          - user\n          default: user\n        subType:\n          type: string\n          description: Sub type of this filter\n          enum:\n          - user_id\n          - email\n          - ip\n          - country\n          - platform\n          - platformVersion\n          - appVersion\n          - deviceModel\n          - customData\n          default: customData\n    AudienceOperator:\n      required:\n      - filters\n      - operator\n      type: object\n      properties:\n        filters:\n          type: array\n          description: Filters to apply using the \"operator\" operation\n          items:\n            anyOf:\n            - $ref: '#/components/schemas/AllFilter'\n            - $ref: '#/components/schemas/UserFilter'\n            - $ref: '#/components/schemas/UserCountryFilter'\n            - $ref: '#/components/schemas/UserCustomFilter'\n        operator:\n          type: string\n          description: \"Operator type if this object represents an operator, and not\\\n            \\ a filter\"\n          enum:\n          - and\n          - or\n    TargetAudience:\n      required:\n      - filters\n      type: object\n      properties:\n        name:\n          maxLength: 100\n          type: string\n          description: \"Audience display name, must be set for project-level audiences.\"\n          example: Android Users\n        filters:\n          description: \"Audience filters, describing logic for segmenting users\"\n          allOf:\n          - $ref: '#/components/schemas/AudienceOperator'\n    RolloutStage:\n      required:\n      - date\n      - percentage\n      - type\n      type: object\n      properties:\n        percentage:\n          maximum: 1\n          minimum: 0\n          type: number\n          description: Target percentage to reach by the step date\n        type:\n          type: object\n          description: Defines the transition into this percentage level\n        date:\n          type: string\n          description: Date the target percentage should be fully applied\n          format: date-time\n    Rollout:\n      required:\n      - startDate\n      - type\n      type: object\n      properties:\n        startPercentage:\n          maximum: 1\n          minimum: 0\n          type: number\n          description: Rollout start percentage\n        type:\n          type: object\n          description: Type of rollout\n        startDate:\n          type: string\n          description: Date to start rollout\n          format: date-time\n        stages:\n          type: array\n          description: Stages of rollout\n          items:\n            $ref: '#/components/schemas/RolloutStage'\n    TargetDistribution:\n      required:\n      - _variation\n      - percentage\n      type: object\n      properties:\n        percentage:\n          maximum: 1\n          minimum: 0\n          type: number\n          description: Distribution percentage for the variation\n          example: 0.5\n        _variation:\n          type: string\n          description: Variation ID or key from `feature.variations`\n          example: variation-1\n      example:\n        percentage: 0.5\n        _variation: variation-1\n    Target:\n      required:\n      - audience\n      - distribution\n      type: object\n      properties:\n        name:\n          type: string\n          description: Target name\n          example: Feature Enabled\n        audience:\n          description: Audience model describing target segmentation.\n          allOf:\n          - $ref: '#/components/schemas/TargetAudience'\n        rollout:\n          description: Rollout sub-document describing how a Target's audience is\n            rolled out\n          allOf:\n          - $ref: '#/components/schemas/Rollout'\n        distribution:\n          type: array\n          description: Specifies variation distribution percentages for features\n          items:\n            $ref: '#/components/schemas/TargetDistribution'\n      example:\n        audience: \"\"\n        rollout: \"\"\n        name: Feature Enabled\n        distribution:\n        - percentage: 0.5\n          _variation: variation-1\n        - percentage: 0.5\n          _variation: variation-1\n    FeatureConfig:\n      required:\n      - _createdBy\n      - _environment\n      - _feature\n      - status\n      - targets\n      - updatedAt\n      type: object\n      properties:\n        _feature:\n          type: string\n          description: ID of the Feature owning the Configuration\n          example: 61450f3daec96f5cf4a49946\n        _environment:\n          type: string\n          description: ID of the Environment owning the Configuration\n          example: 61450f3daec96f5cf4a49946\n        _createdBy:\n          type: string\n          description: User who created the Feature Configuration\n        status:\n          type: string\n          description: Status of the Feature Configuration\n          enum:\n          - active\n          - inactive\n          - archived\n        startedAt:\n          type: string\n          description: Date the Feature Configuration was started\n          format: date-time\n        updatedAt:\n          type: string\n          description: The date the Feature Configuration was last updated\n          format: date-time\n        targets:\n          type: array\n          description: The targets to evaluate what variation a user should be delivered\n          items:\n            $ref: '#/components/schemas/Target'\n      example:\n        _feature: 61450f3daec96f5cf4a49946\n        _environment: 61450f3daec96f5cf4a49946\n        startedAt: 2000-01-23T04:56:07.000+00:00\n        _createdBy: _createdBy\n        targets:\n        - audience: \"\"\n          rollout: \"\"\n          name: Feature Enabled\n          distribution:\n          - percentage: 0.5\n            _variation: variation-1\n          - percentage: 0.5\n            _variation: variation-1\n        - audience: \"\"\n          rollout: \"\"\n          name: Feature Enabled\n          distribution:\n          - percentage: 0.5\n            _variation: variation-1\n          - percentage: 0.5\n            _variation: variation-1\n        status: active\n        updatedAt: 2000-01-23T04:56:07.000+00:00\n    UpdateTargetDto:\n      required:\n      - audience\n      - distribution\n      type: object\n      properties:\n        audience:\n          description: Audience object describing target segmentation.\n          allOf:\n          - $ref: '#/components/schemas/TargetAudience'\n        name:\n          type: string\n          description: Target name\n          example: Feature Enabled\n        rollout:\n          description: Rollout sub-document describing how a Target's audience is\n            rolled out\n          allOf:\n          - $ref: '#/components/schemas/Rollout'\n        distribution:\n          type: array\n          description: Specifies variation distribution percentages for features\n          items:\n            $ref: '#/components/schemas/TargetDistribution'\n    UpdateFeatureConfigDto:\n      required:\n      - targets\n      type: object\n      properties:\n        targets:\n          type: array\n          description: The targets to evaluate what variation a user should be delivered\n          items:\n            $ref: '#/components/schemas/UpdateTargetDto'\n        status:\n          type: string\n          description: Status of the Feature Configuration\n          enum:\n          - active\n          - inactive\n          - archived\n    ResultSummaryDto:\n      required:\n      - cached\n      - result\n      - updatedAt\n      type: object\n      properties:\n        result:\n          $ref: '#/components/schemas/ResultSummaryDto_result'\n        cached:\n          type: boolean\n          description: Whether this result came from a cache or a live result\n        updatedAt:\n          type: string\n          description: Date which these results are up-to-date with\n          format: date-time\n      example:\n        result:\n          counts:\n            total: 0.8008281904610115\n            withFeature: 6.027456183070403\n            accessedFeature: 1.4658129805029452\n        cached: true\n        updatedAt: 2000-01-23T04:56:07.000+00:00\n    FeatureDataPoint:\n      required:\n      - date\n      - values\n      type: object\n      properties:\n        date:\n          type: string\n          description: Date of this data point\n          format: date-time\n        values:\n          type: object\n          description: \"Mapping of evaluation variation (variation1, variation2 etc.)\\\n            \\ to number of evaluations in that variation\"\n      example:\n        date: 2000-01-23T04:56:07.000+00:00\n        values: {}\n    ResultEvaluationsByHourDto:\n      required:\n      - cached\n      - result\n      - updatedAt\n      type: object\n      properties:\n        result:\n          $ref: '#/components/schemas/ResultEvaluationsByHourDto_result'\n        cached:\n          type: boolean\n          description: Whether this result came from a cache or a live result\n        updatedAt:\n          type: string\n          description: Date which these results are up-to-date with\n          format: date-time\n      example:\n        result:\n          evaluations:\n          - date: 2000-01-23T04:56:07.000+00:00\n            values: {}\n          - date: 2000-01-23T04:56:07.000+00:00\n            values: {}\n        cached: true\n        updatedAt: 2000-01-23T04:56:07.000+00:00\n    ProjectDataPoint:\n      required:\n      - date\n      - value\n      type: object\n      properties:\n        date:\n          type: string\n          description: Date of this datapoint\n          format: date-time\n        value:\n          type: number\n          description: \"Number of variable evaluations across the whole project for\\\n            \\ this data point, grouped by user\"\n      example:\n        date: 2000-01-23T04:56:07.000+00:00\n        value: 0.8008281904610115\n    ResultProjectEvaluationsByHourDto:\n      required:\n      - cached\n      - result\n      - updatedAt\n      type: object\n      properties:\n        result:\n          $ref: '#/components/schemas/ResultProjectEvaluationsByHourDto_result'\n        cached:\n          type: boolean\n          description: Whether this result came from a cache or a live result\n        updatedAt:\n          type: string\n          description: Date which these results are up-to-date with\n          format: date-time\n      example:\n        result:\n          evaluations:\n          - date: 2000-01-23T04:56:07.000+00:00\n            value: 0.8008281904610115\n          - date: 2000-01-23T04:56:07.000+00:00\n            value: 0.8008281904610115\n        cached: true\n        updatedAt: 2000-01-23T04:56:07.000+00:00\n    CreateCustomPropertyDto:\n      required:\n      - key\n      - name\n      - propertyKey\n      - type\n      type: object\n      properties:\n        name:\n          maxLength: 100\n          type: string\n          description: Display name for Custom Property.\n          example: Delivery App\n        key:\n          maxLength: 100\n          pattern: \"^[a-zA-Z0-9-_]+$\"\n          type: string\n          description: |-\n            Auto generated key to be used by the API to reference by 'key' rather then _id for CRUD operations.\n            Must only contain lower-case characters and `_` or `-`.\n          example: delivery-app\n        type:\n          type: string\n          description: \"Type of the Custom Propety. Must be one of: \\\"Boolean\\\", \\\"\\\n            Number\\\", \\\"Semver\\\" or \\\"String\\\"\"\n          example: String\n          enum:\n          - String\n          - Boolean\n          - Number\n          - Semver\n        propertyKey:\n          type: string\n          description: \"Custom Property key, must be unique by Project. Only to be\\\n            \\ used by the SDKs to reference the Custom Property..\"\n          example: Delivery App Secret Agent Code\n    CustomProperty:\n      required:\n      - _createdBy\n      - _id\n      - _project\n      - createdAt\n      - key\n      - name\n      - propertyKey\n      - type\n      - updatedAt\n      type: object\n      properties:\n        name:\n          maxLength: 100\n          type: string\n          description: Display name for Custom Property.\n          example: Delivery App\n        key:\n          maxLength: 100\n          pattern: \"^[a-zA-Z0-9-_]+$\"\n          type: string\n          description: |-\n            Auto generated key to be used by the API to reference by 'key' rather then _id for CRUD operations.\n            Must only contain lower-case characters and `_` or `-`.\n          example: delivery-app\n        _id:\n          type: string\n          description: A unique CustomProperty ID\n          example: 61450f3daec96f5cf4a49946\n        _project:\n          type: string\n          description: The Project owning the Custom Property\n        _createdBy:\n          type: string\n          description: ID of the User who created the project\n        propertyKey:\n          type: string\n          description: \"Custom Property key, must be unique by Project. Only to be\\\n            \\ used by the SDKs to reference the Custom Property..\"\n          example: Delivery App Secret Agent Code\n        type:\n          type: string\n          description: The Custom Property type\n          example: String\n          enum:\n          - String\n          - Boolean\n          - Number\n          - Semver\n        createdAt:\n          type: string\n          description: The date the Project was created\n          format: date-time\n        updatedAt:\n          type: string\n          description: The date the Project was last updated\n          format: date-time\n      example:\n        propertyKey: Delivery App Secret Agent Code\n        createdAt: 2000-01-23T04:56:07.000+00:00\n        _project: _project\n        name: Delivery App\n        _id: 61450f3daec96f5cf4a49946\n        _createdBy: _createdBy\n        type: String\n        key: delivery-app\n        updatedAt: 2000-01-23T04:56:07.000+00:00\n    ResultSummaryDto_result_counts:\n      type: object\n      properties:\n        total:\n          type: number\n        withFeature:\n          type: number\n        accessedFeature:\n          type: number\n      example:\n        total: 0.8008281904610115\n        withFeature: 6.027456183070403\n        accessedFeature: 1.4658129805029452\n    ResultSummaryDto_result:\n      type: object\n      properties:\n        counts:\n          $ref: '#/components/schemas/ResultSummaryDto_result_counts'\n      example:\n        counts:\n          total: 0.8008281904610115\n          withFeature: 6.027456183070403\n          accessedFeature: 1.4658129805029452\n    ResultEvaluationsByHourDto_result:\n      type: object\n      properties:\n        evaluations:\n          type: array\n          items:\n            $ref: '#/components/schemas/FeatureDataPoint'\n      example:\n        evaluations:\n        - date: 2000-01-23T04:56:07.000+00:00\n          values: {}\n        - date: 2000-01-23T04:56:07.000+00:00\n          values: {}\n    ResultProjectEvaluationsByHourDto_result:\n      type: object\n      properties:\n        evaluations:\n          type: array\n          items:\n            $ref: '#/components/schemas/ProjectDataPoint'\n      example:\n        evaluations:\n        - date: 2000-01-23T04:56:07.000+00:00\n          value: 0.8008281904610115\n        - date: 2000-01-23T04:56:07.000+00:00\n          value: 0.8008281904610115\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /v1/projects/{project}/features: get: operation \"FeaturesController_findAll\": parameters: parse parameter \"project\": invalid schema:style:explode combination: (\"\":\"simple\":false)"
}