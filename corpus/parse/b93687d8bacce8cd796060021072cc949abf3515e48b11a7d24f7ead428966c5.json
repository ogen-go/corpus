{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/tsimbalar/gha-build-monitor"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "docs/swagger.yaml",
			"byteSize": 19861,
			"content": "components:\n    examples: {}\n    headers: {}\n    parameters: {}\n    requestBodies: {}\n    responses: {}\n    schemas:\n        BuildDefinitionMetadata:\n            properties:\n                id:\n                    type: string\n                    description: 'Id should be unique in parent space.'\n                name:\n                    type: string\n                    description: 'Display name'\n                webUrl:\n                    type: string\n                    description: 'Webpage that provides user with detailed information about this build definition.'\n                folder:\n                    type: string\n                    description: 'Path to the build definition, e.g. \"my folder/sub-folder\".'\n            required:\n                - id\n                - name\n            type: object\n            additionalProperties: false\n        SpaceMetadata:\n            description: \"Space is a logical container of build definitions. For most servers, space will map to a project or source control repository.\\n\\nCatLight apps exchange information about build investigations on space level. If your server has thousands of build definitions, put them into separate spaces to avoid performance problems.\"\n            properties:\n                id:\n                    type: string\n                    description: 'Space id should be unique on the server.'\n                name:\n                    type: string\n                    description: 'Display name'\n                buildDefinitions:\n                    items:\n                        $ref: '#/components/schemas/BuildDefinitionMetadata'\n                    type: array\n                webUrl:\n                    type: string\n                    description: 'Url of the space page.'\n            required:\n                - id\n                - name\n                - buildDefinitions\n            type: object\n            additionalProperties: false\n        User:\n            properties:\n                name:\n                    type: string\n                    description: 'Display name'\n                id:\n                    type: string\n                    description: 'Id should be unique within the server'\n            required:\n                - name\n                - id\n            type: object\n            additionalProperties: false\n        ServerMetadata:\n            properties:\n                protocol:\n                    type: string\n                    enum:\n                        - 'https://catlight.io/protocol/v1.0/dynamic'\n                    nullable: false\n                    description: 'Constant string that defines the version and mode of CatLight protocol.'\n                id:\n                    type: string\n                    description: \"Globally unique server id.\\n\\nServer id must be globally unique and should not change.\\n\\n# How to choose server id?\\nFor online services, you can use your domain name, e.g. \\\"myserver.com\\\"\\nFor installed servers, use your domain or product name + unique installation id. For example, \\\"myserver.com/3A5126E7-EE74-48E4-9997-1C1DE52BA711\\\". If your server does not have unique id, you can generate a GUID during installation and save it to configuration file.\\n\\nTry to keep the id shorter than 100 symbols. If your server has a built-in unique id that is very long, you can use a hash sum of it that should be shorter.\"\n                name:\n                    type: string\n                    description: 'Display name of the server that is shown to the user.'\n                spaces:\n                    items:\n                        $ref: '#/components/schemas/SpaceMetadata'\n                    type: array\n                webUrl:\n                    type: string\n                    description: 'Url of the main server page.'\n                serverVersion:\n                    type: string\n                currentUser:\n                    $ref: '#/components/schemas/User'\n                    description: 'Currently logged-in user. If it is absent, build investigation feature will not be available.'\n            required:\n                - protocol\n                - id\n                - name\n                - spaces\n            type: object\n            additionalProperties: false\n        DynamicBuildInfoMetadataResponse:\n            $ref: '#/components/schemas/ServerMetadata'\n        Build:\n            properties:\n                id:\n                    type: string\n                    description: 'Id should be unique within the parent build definition.'\n                name:\n                    type: string\n                status:\n                    type: string\n                    enum:\n                        - Queued\n                        - Running\n                        - Succeeded\n                        - PartiallySucceeded\n                        - Failed\n                        - Canceled\n                    description: 'Build status'\n                startTime:\n                    type: string\n                    format: date-time\n                    description: 'Date and time when this build was started.'\n                finishTime:\n                    type: string\n                    format: date-time\n                    description: 'Should be present for completed builds, but can be absent for running builds.'\n                triggeredByUser:\n                    $ref: '#/components/schemas/User'\n                    description: 'User that requested the build. If the build started automatically after new commit, this should be the user that committed the code.'\n                contributors:\n                    items:\n                        $ref: '#/components/schemas/User'\n                    type: array\n                    description: 'When the build contains changes from multiple user, additional contributors can be placed here.'\n                webUrl:\n                    type: string\n                    description: 'Web page with build details'\n            required:\n                - id\n                - status\n                - startTime\n            type: object\n            additionalProperties: false\n        BuildBranch:\n            properties:\n                id:\n                    type: string\n                    description: \"Id should be unique within the parent build definition.\\n\\nBranch id can be taken from source control. Examples:\\n- refs/heads/features/test-feature-branch\\n- refs/heads/master\\n- refs/pull/2/merge\\n- refs/remotes/origin/features/test-feature-branch\\n\\nCatLight will cleanup branch id and use it as a display name for the branch. For example, \\\"refs/heads/master\\\" will be transformed into \\\"master\\\".\\n\\nNote: if you don't see the branch in CatLight app UI, make sure that it has recent builds.\"\n                builds:\n                    items:\n                        $ref: '#/components/schemas/Build'\n                    type: array\n                    description: 'Sorted array of builds. Last build in the array should be the newest. Return 5-10 builds for each branch.'\n                webUrl:\n                    type: string\n            required:\n                - id\n                - builds\n            type: object\n            additionalProperties: false\n        BuildDefinitionStateResponse:\n            properties:\n                id:\n                    type: string\n                    description: 'Id should be unique in parent space.'\n                branches:\n                    items:\n                        $ref: '#/components/schemas/BuildBranch'\n                    type: array\n                    description: \"Branches array should include:\\n\\nPrimary branches (master, develop, etc.)\\nActive feature branches that had builds in the past 30 days.\\n\\nIf your system cannot separate builds into branches, add a single branch to this array with id = \\\"~all\\\"\"\n                folder:\n                    type: string\n                    description: 'Path to the build definition, e.g. \"my folder/sub-folder\".'\n            required:\n                - id\n                - branches\n            type: object\n            additionalProperties: false\n        SpaceStateResponse:\n            properties:\n                id:\n                    type: string\n                    description: 'Space id should be unique on the server.'\n                buildDefinitions:\n                    items:\n                        $ref: '#/components/schemas/BuildDefinitionStateResponse'\n                    type: array\n            required:\n                - id\n                - buildDefinitions\n            type: object\n            additionalProperties: false\n        ServerStateResponse:\n            properties:\n                protocol:\n                    type: string\n                    enum:\n                        - 'https://catlight.io/protocol/v1.0/dynamic'\n                    nullable: false\n                    description: 'Constant string that defines the version and mode of CatLight protocol.'\n                id:\n                    type: string\n                    description: \"Globally unique server id.\\n\\nServer id must be globally unique and should not change.\\n\\n# How to choose server id?\\nFor online services, you can use your domain name, e.g. \\\"myserver.com\\\"\\nFor installed servers, use your domain or product name + unique installation id. For example, \\\"myserver.com/3A5126E7-EE74-48E4-9997-1C1DE52BA711\\\". If your server does not have unique id, you can generate a GUID during installation and save it to configuration file.\\n\\nTry to keep the id shorter than 100 symbols. If your server has a built-in unique id that is very long, you can use a hash sum of it that should be shorter.\"\n                spaces:\n                    items:\n                        $ref: '#/components/schemas/SpaceStateResponse'\n                    type: array\n            required:\n                - protocol\n                - id\n                - spaces\n            type: object\n            additionalProperties: false\n        DynamicFilteredBuildInfoResponse:\n            $ref: '#/components/schemas/ServerStateResponse'\n        ValidationErrorJson:\n            properties:\n                msg:\n                    type: string\n                technicalDetails:\n                    properties:\n                        errors:\n                            items:\n                                type: string\n                            type: array\n                        msg:\n                            type: string\n                    required:\n                        - errors\n                        - msg\n                    type: object\n            required:\n                - msg\n                - technicalDetails\n            type: object\n            additionalProperties: false\n        BuildDefinitionStateRequest:\n            properties:\n                id:\n                    type: string\n                    description: 'Id should be unique in parent space.'\n            required:\n                - id\n            type: object\n            additionalProperties: false\n        SpaceStateRequest:\n            properties:\n                id:\n                    type: string\n                    description: 'Space id should be unique on the server.'\n                    example: owner/repo\n                    minLength: 1\n                    pattern: '^[^/]+/[^/]+$'\n                buildDefinitions:\n                    items:\n                        $ref: '#/components/schemas/BuildDefinitionStateRequest'\n                    type: array\n            required:\n                - id\n                - buildDefinitions\n            type: object\n            additionalProperties: false\n        ServerStateRequest:\n            properties:\n                id:\n                    type: string\n                    description: \"Globally unique server id.\\n\\nServer id must be globally unique and should not change.\\n\\n# How to choose server id?\\nFor online services, you can use your domain name, e.g. \\\"myserver.com\\\"\\nFor installed servers, use your domain or product name + unique installation id. For example, \\\"myserver.com/3A5126E7-EE74-48E4-9997-1C1DE52BA711\\\". If your server does not have unique id, you can generate a GUID during installation and save it to configuration file.\\n\\nTry to keep the id shorter than 100 symbols. If your server has a built-in unique id that is very long, you can use a hash sum of it that should be shorter.\"\n                spaces:\n                    items:\n                        $ref: '#/components/schemas/SpaceStateRequest'\n                    type: array\n            required:\n                - id\n                - spaces\n            type: object\n            additionalProperties: false\n        DynamicFilteredBuildInfoRequest:\n            $ref: '#/components/schemas/ServerStateRequest'\n        HealthCheckResponse:\n            properties:\n                version:\n                    type: string\n                buildInfo:\n                    properties: {}\n                    additionalProperties:\n                        type: string\n                    type: object\n            required:\n                - version\n                - buildInfo\n            type: object\n            additionalProperties: false\n        WhoAmIResponse:\n            properties:\n                login:\n                    type: string\n                name:\n                    type: string\n                    nullable: true\n                scopes:\n                    items:\n                        type: string\n                    type: array\n            required:\n                - login\n                - name\n                - scopes\n            type: object\n            additionalProperties: false\n    securitySchemes:\n        bearerAuth:\n            type: http\n            description: 'Bearer authentication - give access to the bearer of this token'\n            scheme: bearer\n            bearerFormat: JWT\ninfo:\n    title: gha-build-monitor\n    version: 0.13.0\n    description: 'Adapter to give access to GitHub Actions status via the CatLight Protocol'\n    license:\n        name: MIT\n    contact:\n        name: tsimbalar\nopenapi: 3.0.0\npaths:\n    /builds:\n        get:\n            operationId: GetMetadata\n            responses:\n                '200':\n                    description: Ok\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/DynamicBuildInfoMetadataResponse'\n            security:\n                -\n                    bearerAuth:\n                        - repo\n            parameters: []\n        post:\n            operationId: GetServerState\n            responses:\n                '200':\n                    description: Ok\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/DynamicFilteredBuildInfoResponse'\n                '422':\n                    description: 'Validation error'\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ValidationErrorJson'\n            security:\n                -\n                    bearerAuth:\n                        - repo\n            parameters: []\n            requestBody:\n                required: true\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/DynamicFilteredBuildInfoRequest'\n    /_/healthcheck:\n        get:\n            operationId: GetHealthCheck\n            responses:\n                '200':\n                    description: Ok\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/HealthCheckResponse'\n            description: 'Gets an indication of the current health of the system'\n            security: []\n            parameters: []\n    /_/whoami:\n        get:\n            operationId: GetMe\n            responses:\n                '200':\n                    description: Ok\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/WhoAmIResponse'\n            description: 'Gets an indication of the current health of the system'\n            security:\n                -\n                    bearerAuth: []\n            parameters: []\n    /dynamic:\n        get:\n            operationId: GetMetadata\n            responses:\n                '200':\n                    description: Ok\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/DynamicBuildInfoMetadataResponse'\n            deprecated: true\n            security:\n                -\n                    bearerAuth:\n                        - repo\n            parameters: []\n        post:\n            operationId: GetServerState\n            responses:\n                '200':\n                    description: Ok\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/DynamicFilteredBuildInfoResponse'\n                '422':\n                    description: 'Validation error'\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ValidationErrorJson'\n            deprecated: true\n            security:\n                -\n                    bearerAuth:\n                        - repo\n            parameters: []\n            requestBody:\n                required: true\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/DynamicFilteredBuildInfoRequest'\n    /examples/dynamic:\n        get:\n            operationId: GetServerMetadata\n            responses:\n                '200':\n                    description: Ok\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/DynamicBuildInfoMetadataResponse'\n            security: []\n            parameters: []\n        post:\n            operationId: GetServerState\n            responses:\n                '200':\n                    description: Ok\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/DynamicBuildInfoMetadataResponse'\n                '422':\n                    description: 'Validation error'\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ValidationErrorJson'\n            security: []\n            parameters: []\n            requestBody:\n                required: true\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/DynamicFilteredBuildInfoRequest'\n    /:\n        get:\n            operationId: GetHomePage\n            responses:\n                '200':\n                    description: Ok\n                    content:\n                        application/json:\n                            schema:\n                                type: string\n                                nullable: true\n            security: []\n            parameters: []\nservers:\n    -\n        url: /\n",
			"canonicalURL": "/github.com/tsimbalar/gha-build-monitor@682bcebc36f330580a6ad65bca5975219e03aee3/-/blob/docs/swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/tsimbalar/gha-build-monitor/blob/682bcebc36f330580a6ad65bca5975219e03aee3/docs/swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/builds\": get: operation \"GetMetadata\": security: at 1:10759: list of scopes MUST be empty for \"type\" \"http\""
}