{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/APIs-guru/openapi-directory"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "APIs/digitalnz.org/3/openapi.yaml",
			"byteSize": 29039,
			"content": "openapi: 3.0.1\nservers:\n  - description: Production API\n    url: https://api.digitalnz.org\ninfo:\n  contact:\n    email: develop@digitalnz.org\n    name: DigitalNZ\n  description: |\n    OpenAPI specification of DigitalNZ's Record API.  \n    For more information about the API see [digitalnz.org/developers](https://digitalnz.org/developers).  \n    To learn more about the metadata/fields used in the API see the [Metadata Dictionary](https://docs.google.com/document/pub?id=1Z3I_ckQWjnQQ4SzpORbClcIXUheO-Jd4jt-oZFuMcoQ).  \n    To get a sense of what content is available via the API take a look at the search feature on the [DigitalNZ website](https://digitalnz.org/records?text=all%20sorts\u0026tab=Images).  \n    The [terms of use](https://digitalnz.org/about/terms-of-use/developer-api-terms-of-use) specify how developers can use the DigitalNZ API.\n  title: DigitalNZ API\n  version: \"3\"\n  x-apisguru-categories:\n    - open_data\n  x-origin:\n    - format: openapi\n      url: https://api.swaggerhub.com/apis/DigitalNZ/Records/3\n      version: \"3.0\"\n  x-providerName: digitalnz.org\nsecurity:\n  - ApiKeyAuth: []\ntags:\n  - name: API calls\npaths:\n  \"/records.{format}\":\n    get:\n      description: This is the main search endpoint allowing queries against the records database.\n      parameters:\n        - $ref: \"#/components/parameters/format\"\n        - $ref: \"#/components/parameters/api_key\"\n        - description: |\n            This field enables queries based on one or more search terms and provides the functionality of the main search box on [digitalnz.org](https://digitalnz.org). Search terms can be combined with boolean operators (AND, OR).  \n            A minus sign excludes certain terms, eg. \"-horse\".  \n            An asterisk (\\*) acts as a wildcard, eg. \"ted*\".  \n            Multiple search terms are combined with an AND by default.  \n            Examples: `\"moustache\"`, `\"Wanganui OR Whanganui\"`,  `\"-paperspast\"`, `\"ted*\"`\n          in: query\n          name: text\n          schema:\n            type: string\n        - description: These are the same categories that are used across the tabs in [digitalnz.org](https://digitalnz.org/records?text=\u0026tab=Videos)\n          explode: true\n          in: query\n          name: and[category][]\n          schema:\n            enum:\n              - Newspapers\n              - Images\n              - Books\n              - Articles\n              - Journals\n              - Archives\n              - Audio\n              - Other\n              - Manuscripts\n              - Reference sources\n              - Research papers\n              - Videos\n              - Music Score\n              - Groups\n              - Data\n              - Websites\n              - Sets\n            type: string\n        - description: |\n            Allows filtering for records from a particular Content Partner.  \n            Examples: `\"Ministry for Culture and Heritage\"` `\"Trove\"` `\"V.C. Browne \u0026 Son\"`\n              \n            *Tip* - To see a list of Content Partners available for filtering use the *facets* parameter, eg. *\"\u0026facets=content_partner\"*.  \n          in: query\n          name: and[content_partner][]\n          schema:\n            type: string\n        - description: |\n            Allows filtering for records from a particular *primary_collection*.  \n            Examples: `\"Puke Ariki\"` `\"NZHistory\"` `\"TAPUHI\"`  \n              \n            *Tip* - To see a list of Primary_Collections available for filtering use the *facets* parameter, eg. *\"\u0026facets=primary_collection\"*.   \n          in: query\n          name: and[primary_collection][]\n          schema:\n            type: string\n        - description: |\n            Allows filtering for records from a particular Collection. Collections can be thought of as sub-collections or groupings under Primary_Collections.  \n            Examples: `\"Music 101\"` `\"Mollusks\"` `\"Wairarapa Daily Times\"`\n              \n            *Tip* - To see a list of Collections available for filtering use the *facets* parameter, eg. *\"\u0026facets=collection\"*. \n          in: query\n          name: and[collection][]\n          schema:\n            type: string\n        - in: query\n          name: and[usage][]\n          schema:\n            enum:\n              - Share\n              - Modify\n              - Use commercially\n              - All rights reserved\n              - Unknown\n            type: string\n        - description: |\n            Examples: `\"Cats\"` `\"Weddings\"` `\"climb*\"`\n          in: query\n          name: and[subject][]\n          schema:\n            type: string\n        - description: |\n            Examples: `\"Conference item\"` `\"Magazines\"`\n          in: query\n          name: and[dc_type][]\n          schema:\n            type: string\n        - description: |\n            Examples: `\"Photolithographs\"` `\"Glass*\"`\n          in: query\n          name: and[format][]\n          schema:\n            type: string\n        - description: |\n            This field can be used for text-based location search. For a more advanced coordinate-based search, see the \"geo_bbox\" field below.  \n            Examples: `\"Scott Base\"` `\"Wainuiomata\"` `\"castle*\"`\n          in: query\n          name: and[placename][]\n          schema:\n            type: string\n        - description: |\n            Examples: `\"Revelle Jackson\"` `\"Nicholas Chevalier\"` `\"Rita Angus\"`\n          in: query\n          name: and[creator][]\n          schema:\n            type: string\n        - description: |\n            Examples: `\"Pukeko\"` `\"Club\"` `\"Break*\"`\"\n          in: query\n          name: and[title][]\n          schema:\n            type: string\n        - description: |\n            This field can be useful for querying and sorting (see the 'sort' param further down). But it should be noted that, as with some other fields, **not all records have date metadata associated**. There is good coverage of date metadata within certain collections, but there are plenty with no date information at all. So, if you query for records from a specific date you may get some matching results, but might also be missing other potentially relevant records that don't have date metadata available.  \n            Example: `\"1970-12-25\"`\n\n            *Tip* - There is a related (but not searchable) field that is returned on each record (where available), that often has a more human readable version of the date information, called 'display_date'.\n          in: query\n          name: and[date]\n          schema:\n            type: string\n        - description: |\n            This field allows searching specifically by year. The metadata is derived from the same date information that is searchable and returned in the date field. It is possible to search across a range using syntax the following syntax `[{start year} TO {end year}]`.  \n            Example: `\"1893\"` `\"[1982 TO 1987]\"`\n          in: query\n          name: and[year]\n          schema:\n            type: string\n        - description: |\n            This field allows searching specifically by decade. The metadata is derived from the same date information that is searchable and returned in the date field.  \n            Example: `\"1850\"` `\"1990\"`\n          in: query\n          name: and[decade]\n          schema:\n            type: string\n        - description: |\n            This field allows searching specifically by century. The metadata is derived from the same date information that is searchable and returned in the date field.  \n            Example: `\"1900\"` `\"2000\"`\n          in: query\n          name: and[century]\n          schema:\n            type: string\n        - description: |\n            All of the above `and[___][]` filters in this document are also able to be used with this syntax to exclude specific matches. For example to exclude Papers Past content `\u0026without[primary_collection]=Papers+Past`\n          in: query\n          name: without[{filter_field}]\n          schema:\n            type: string\n        - description: |\n            All of the above `and[___][]` filters in this document are also able to be used with the `and[or][___][]` syntax to allow multi-select *OR* queries within one field.  \n            Basic example: \n            - To filter your results to only those with a category or Audio or Videos:   \n            `\u0026and[or][category][]=Audio\u0026and[or][category][]=Videos` \n              \n            In order to combine *OR* filters across multiple fields the syntax needs to be nested as follows  \n            Nested examples: \n             - To search for *(year is 2014 OR 2015) AND (primary_collection is TAPUHI OR Public Address)*  \n             `\u0026and[or][year][]=2015\u0026and[or][year][]=2014\u0026and[and][or][primary_collection][]=TAPUHI\u0026and[and][or][primary_collection][]=Public+Address`  \n             - To search for *(category is Images OR Video) AND (subject is cat OR cats)*  \n             `\u0026and[or][category][]=Images\u0026and[or][category][]=Videos\u0026and[and][or][subject][]=cat\u0026and[and][or][subject][]=cats`  \n          in: query\n          name: and[or][{filter_field}][]\n          schema:\n            type: string\n        - description: |\n            Some DigitalNZ partners offer their metadata for use in commercial applications. This content can be identified through the *is_commercial_use* flag. Only API results where the *is_commercial_use* field set to True can be used for commercial purposes. Check out the [terms of use](https://digitalnz.org/about/terms-of-use/developer-api-terms-of-use#commercial_use_terms) for more information.\n          in: query\n          name: and[is_commercial_use]\n          schema:\n            type: boolean\n        - description: |\n            Filters results to only those records that have an image available in the *large_thumbnail_url* field.  \n            **Note:** There is an issue with this field where, in order to get results, it needs to be specified with \"Y\" or not specified at all.\n          in: query\n          name: and[has_large_thumbnail_url]\n          schema:\n            enum:\n              - Y\n            type: string\n        - description: |\n            Filters results to only those records that have latitude and longitude coordinates present in the metadata.\n              \n            *Tip* - To see the location metadata you'll need to specifically request that field using the *fields* parameter - *\"\u0026fields=verbose,locations\"*  as it is not part of the default, or verbose field sets.\n          in: query\n          name: and[has_lat_lng]\n          schema:\n            enum:\n              - true\n              - false\n            type: boolean\n        - description: |\n            A geographic bounding box scoping a search to a geographic region. Order of latitude-longitude coordinates is north, west, south, east.   For example, filtering the Wellington region would be *\"\u0026geo_bbox=-41,174,-42,175\"*\n          in: query\n          name: geo_bbox\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/fields\"\n        - description: |\n            Used to control the order of the results in conjunction with the *direction* field.\n              - *syndication_date* - is the creation date of the record within DigitalNZ, ie. when DigitalNZ first harvested the record.\n              - *date* - is the date metadata (if present) associated with the record.  \n                \n            To sort the search results with newest records at the top use: \"\u0026sort=syndication_date\u0026direction=desc\"\n          in: query\n          name: sort\n          schema:\n            enum:\n              - syndication_date\n              - date\n            type: string\n        - description: |\n            Used in conjunction with *sort* to order the results\n             - *asc* - Ascending, oldest first.\n             - *desc* - Descending, newest first.\n          in: query\n          name: direction\n          schema:\n            default: asc\n            enum:\n              - asc\n              - desc\n            type: string\n        - description: Specify which page of results to return.\n          in: query\n          name: page\n          schema:\n            default: 1\n            minimum: 1\n            type: integer\n        - description: The number of records to return per page of search results.\n          in: query\n          name: per_page\n          schema:\n            default: 20\n            maximum: 100\n            minimum: 0\n            type: integer\n        - description: |\n            Shows a breakdown of record counts for the specified facets based on the current result set. In the [DigitalNZ search interface](https://digitalnz.org/records) these facets are used to list the values filterable for each field. A comma-separated list will return multiple facets in one call.\n          explode: false\n          in: query\n          name: facets\n          schema:\n            items:\n              enum:\n                - category\n                - content_partner\n                - display_collection\n                - collection\n                - creator\n                - placename\n                - date\n                - year\n                - decade\n                - century\n                - language\n                - rights\n                - usage\n                - copyright\n                - subject\n                - format\n                - dc_type\n              type: string\n            type: array\n          style: form\n        - description: This value specifies which page of facet results to return. Allowing pagination through large lists of facet values.\n          in: query\n          name: facets_page\n          schema:\n            default: null\n            minimum: 1\n            type: integer\n        - description: The number of facets to return per page of facet results.\n          in: query\n          name: facets_per_page\n          schema:\n            default: 10\n            maximum: 350\n            type: integer\n        - description: |\n            This field can be used when filtering into some facets, to maintain the context of the wider facet values. A common use case is to allow the results of a search to be filtered down into a specific category (eg Audio), while still showing the other possible filter options as facet counts (eg. Images, Audio, Video, etc). Setting this to 'true' will not effect the search results returned but will ignore all search filters (eg. \"and[category]=Audio\") when calculating the facet counts. \n          in: query\n          name: exclude_filters_from_facets\n          schema:\n            default: false\n            type: boolean\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  facets:\n                    additionalProperties:\n                      additionalProperties:\n                        type: integer\n                      type: object\n                    description: |\n                      Each field you request from the list of facetable fields will be returned as separate elements. Each of those will contain a sorted list of elements that are made up of a value (eg collection name, subject, date) and the number of results associated with that value.  \n                    example:\n                      display_collection:\n                        Canterbury Museum: 39109\n                        Figure.NZ: 40185\n                        Napier Public Libraries: 39343\n                      year:\n                        \"1997\": 4\n                        \"1998\": 10\n                        \"1999\": 16\n                    type: object\n                  page:\n                    description: Current page.\n                    example: 3\n                    type: integer\n                  per_page:\n                    description: Requested amount of records shown per page of results.\n                    example: 20\n                    type: integer\n                    xml:\n                      name: per-page\n                  records:\n                    items:\n                      $ref: \"#/components/schemas/record\"\n                    type: array\n                  request_url:\n                    description: The URL of current page of results.\n                    example: https://api.digitalnz.org/v3/records.json?api_key=********\u0026per_page=10\u0026facets_per_page=100\u0026facets=category\u0026text=Wainuiomata\n                    type: string\n                    xml:\n                      name: request-url\n                  result_count:\n                    description: Total number of matching search results.\n                    example: 8190\n                    type: integer\n                    xml:\n                      name: result-count\n                type: object\n          description: search results matching criteria\n        \"400\":\n          $ref: \"#/components/responses/FieldError\"\n        \"403\":\n          $ref: \"#/components/responses/KeyError\"\n      summary: Run queries against DigitalNZ metadata search service.\n      tags:\n        - API calls\n  \"/records/{record_id}.json\":\n    get:\n      description: |\n        If you know its `record_id` you can use this endpoint to view all metadata associated with that specific record.\n      parameters:\n        - description: Every record has a unique, persistent *record_id*.\n          example: 189089\n          in: path\n          name: record_id\n          required: true\n          schema:\n            type: integer\n        - description: |\n            Note - There is a small difference with some field names in the response between JSON and XML.  \n            When a field name has more than one word, JSON format will separate the words with an underscore, eg. \"content_partner\", whereas XML uses a hyphenated naming convention, eg. \"content-partner\".\n          in: query\n          name: format\n          required: true\n          schema:\n            enum:\n              - json\n              - xml\n            type: string\n        - $ref: \"#/components/parameters/api_key\"\n        - $ref: \"#/components/parameters/fields\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/record\"\n          description: ok\n        \"403\":\n          $ref: \"#/components/responses/KeyError\"\n        \"404\":\n          content:\n            application/json:\n              schema:\n                example:\n                  errors: Record with ID *record_id* was not found\n                type: object\n            application/xml:\n              example: \u003chash\u003e\u003cerrors\u003eRecord with ID *record_id* was not found\u003c/errors\u003e\u003c/hash\u003e\n              schema:\n                type: object\n          description: Resource not found\n      summary: View metadata associated with a single record.\n      tags:\n        - API calls\ncomponents:\n  parameters:\n    api_key:\n      description: To access the API you will need your own DigitalNZ account and [API key](https://digitalnz.org/api_keys/edit).\n      in: query\n      name: api_key\n      required: true\n      schema:\n        type: string\n    fields:\n      description: |\n        Comma-separated whitelist of fields to be returned. The syntax *\"\u0026fields=verbose\"* can be used to return the bulk of the fields, or you can customise which fields you are interested in, eg. *\"\u0026fields=id,title,subject,collection,landing_url,locations\"*.\n      explode: false\n      in: query\n      name: fields\n      schema:\n        type: string\n    format:\n      description: |\n        Note - There is a small difference with some field names in the response between JSON and XML.  \n        When a field name has more than one word, JSON format will separate the words with an underscore, eg. \"content_partner\", whereas XML uses a hyphenated naming convention, eg. \"content-partner\".\n      in: path\n      name: format\n      required: true\n      schema:\n        enum:\n          - json\n          - xml\n        type: string\n  responses:\n    FieldError:\n      content:\n        application/json:\n          example:\n            errors:\n              - No field configured for Record with name *field_name*\n          schema:\n            type: object\n        application/xml:\n          example: \u003chash\u003e\u003cerrors\u003e\u003cerror\u003eNo field configured for Record with name *field_name*\u003c/error\u003e\u003c/errors\u003e\u003c/hash\u003e\n          schema:\n            type: object\n      description: Incorrect field specified in the request.\n    KeyError:\n      content:\n        application/json:\n          example:\n            errors: Invalid API Key\n          schema:\n            type: object\n        application/xml:\n          example: \u003chash\u003e\u003cerrors\u003eInvalid API Key\u003c/errors\u003e\u003c/hash\u003e\n          schema:\n            type: object\n      description: API Key is missing or invalid.\n  schemas:\n    record:\n      description: |\n        *NOTE:* There are a lot of fields that are very rarely used in DigitalNZ. For instance there are custom built fields that are only relevant, and only found on specific collections. The schema below focuses on the most common / well populated fields and does not show every possible field available for a single record. \n      properties:\n        category:\n          description: There will always be at least 1 human-readable category label in this field.\n          items:\n            enum:\n              - Newspapers\n              - Images\n              - Books\n              - Articles\n              - Journals\n              - Archives\n              - Audio\n              - Other\n              - Manuscripts\n              - Reference sources\n              - Research papers\n              - Videos\n              - Music Score\n              - Groups\n              - Data\n              - Websites\n              - Sets\n            type: string\n          type: array\n        collection:\n          description: |\n            In addition to the top level *\"display_collection\"* above, this field can also contain sub-collections or groupings within the main collection. \n          items:\n            type: string\n          type: array\n        collection_title:\n          description: For historic reasons this is a duplicate of the previous field (\"collection\").\n          items:\n            type: string\n          type: array\n          xml:\n            name: collection-title\n        content_partner:\n          description: Name of the organisation(s), institution(s), or individual(s) making content available through DigitalNZ. This metadata will be present on all records and is usually the name of the organisation that has agreed to the DigitalNZ Metadata Contribution Terms.\n          items:\n            type: string\n          type: array\n          xml:\n            name: content-partner\n        copyright:\n          description: A copyright statement applying to the object referenced by this record. This field may be empty.\n          items:\n            enum:\n              - All rights reserved\n              - Some rights reserved\n              - No known copyright restrictions\n              - Unknown\n            type: string\n          type: array\n        created_at:\n          description: The date the record was initially harvested into DigitalNZ.\n          example: 2012-04-21T05:32:02.000+13:00\n          format: date-time\n          type: string\n          xml:\n            name: created-at\n        creator:\n          description: The name's of the people, organisations, institutions, services etc. who created the content (eg. the photographer, artist, writer or author).\n          items:\n            type: string\n          type: array\n        date:\n          description: Date information associated with this record (e.g. 1996-01-01T00:00:00.000Z). This field may be empty.\n          example: 1996-01-01T00:00:00.000Z\n          items:\n            type: string\n          type: array\n        dc_identifier:\n          description: Identifiers relating to the content from the content partner's system.\n          items:\n            type: string\n          type: array\n          xml:\n            name: dc-identifier\n        description:\n          description: Description of the record. Most records have a description.\n          type: string\n        display_collection:\n          description: The single main collection or website that the item belongs to. This metadata will be present on all records.\n          type: string\n          xml:\n            name: display-collection\n        display_content_partner:\n          description: The main Content Partner, for cases when there are more than one. This metadata will be present on all records.\n          type: string\n          xml:\n            name: dispay-content-partner\n        display_date:\n          description: Where provided, this field contains a human readable version of the date information.\n          example: Circa 1996\n          type: string\n          xml:\n            name: display-date\n        id:\n          description: All records have a unique identifier used within the DigitalNZ system.\n          example: 1788754\n          type: integer\n        landing_url:\n          description: |\n            This field will always contain a URL of the item on the content partner's website.  \n            *Note:* Please use the source_url when providing HTML links.\n          type: string\n        large_thumbnail_url:\n          description: URL for a larger thumbnail image with a width of up to 800px. NOTE - the API Terms do not extend rights to the use of images accessable throught the *large_thumbnail_url* field.\n          type: string\n          xml:\n            name: large-thumbnail-url\n        locations:\n          description: |\n            Geographical location information including latitude and longitude co-ordinates, text based location information, and details about where the location information comes from (eg. \"Location provided by Museum of New Zealand Te Papa Tongarewa\")\n          items:\n            properties:\n              comment:\n                description: Describes who provided this location metadata.\n                example: Location provided by the Alexander Turnbull Library\n                type: string\n              lat:\n                example: -37.508219086\n                type: number\n              lng:\n                example: 177.1802173\n                type: number\n              placename:\n                example: White Island\n                type: string\n            type: object\n          type: array\n        primary_collection:\n          description: In most cases this is the same as *display_collection*, but will occasionally a second value.\n          items:\n            type: string\n          type: array\n          xml:\n            name: primary-collection\n        rights:\n          description: Rights information. Can be a rights statement explaining the rights of the record or a link to a webpage with more detailed rights information.\n          type: string\n        rights_url:\n          description: An array of HTTP URLs resolving to a rights statement or terms of use information for the resource.\n          items:\n            type: string\n          type: array\n          xml:\n            name: rights-url\n        source_url:\n          description: This URL will always be present and provides a redirect to the landing_url. This link should be used as the main click-through to the content. Passing users through this link allows DNZ to count the number of click-throughs, as well as trigger link-checking activities that help clean up stale links in DigitalNZ.\n          example: https://api.digitalnz.org/records/1788754/source\n          type: string\n          xml:\n            name: source-url\n        subject:\n          description: Keywords about the content.\n          items:\n            type: string\n          type: array\n        thumbnail_url:\n          description: |\n            URL for a thumbnail image of the content. The size varies depending on what is available but we aim for a width of 250px. This field is mostly populated on records with a 'category' of 'Images', but is also sometimes found on others (eg. \"Videos\").\n          type: string\n          xml:\n            name: thumbnail-url\n        title:\n          description: Title of the record. All records should have a title.\n          example: Election night crowd, Wellington, 1931\n          type: string\n        updated_at:\n          description: The date the record was last updated/re-harvested into DigitalNZ.\n          example: 2020-12-06T01:36:37.359+13:00\n          format: date-time\n          type: string\n          xml:\n            name: updated-at\n        usage:\n          description: This field is always present and contains human-understandable information about how the item may be used based on its copyright/license.\n          items:\n            enum:\n              - All rights reserved\n              - Share\n              - Modify\n              - Use commercially\n              - Unknown\n            type: string\n          type: array\n      type: object\n  securitySchemes:\n    ApiKeyAuth:\n      in: query\n      name: api_key\n      type: apiKey\n",
			"canonicalURL": "/github.com/APIs-guru/openapi-directory@57168637e057c3e5ebe933717019f6f25bc1886e/-/blob/APIs/digitalnz.org/3/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/APIs-guru/openapi-directory/blob/57168637e057c3e5ebe933717019f6f25bc1886e/APIs/digitalnz.org/3/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/records.{format}\": get: parameters: parse parameter \"and[has_large_thumbnail_url]\": parse schema: at APIs/digitalnz.org/3/openapi.yaml:208:15: parse enum values: parse value \"true\": expected type \"string\", got \"bool\""
}