{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/gojek/turing"
		},
		"file": {
			"name": "ensemblers.yaml",
			"size": 0,
			"path": "api/api/specs/ensemblers.yaml",
			"byteSize": 5137,
			"content": "openapi: 3.0.3\ninfo:\n  title: Endpoints and schemas of Turing ensemblers\n  version: 0.0.1\n\n.tags: \u0026tags\n  - \"Ensembler\"\n\n.id: \u0026id\n  type: \"integer\"\n  format: \"int32\"\n\npaths:\n  \"/projects/{project_id}/ensemblers\":\n    get:\n      tags: *tags\n      operationId: \"ListEnsemblers\"\n      summary: Returns a list of ensemblers that belong to the project\n      parameters:\n        - in: path\n          name: project_id\n          schema:\n            \u003c\u003c: *id\n          required: true\n        - in: query\n          name: page\n          schema:\n            type: integer\n            default: 1\n        - in: query\n          name: page_size\n          schema:\n            type: integer\n            default: 10\n        - in: query\n          name: search\n          description: Searches ensembler name for a partial match of the search text\n          schema:\n            type: string\n        - in: query\n          name: type\n          schema:\n            $ref: \"#/components/schemas/EnsemblerType\"\n      responses:\n        \"200\":\n          description: A JSON object, that represents paginated results response\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/EnsemblersPaginatedResults\"\n    post:\n      tags: *tags\n      operationId: \"CreateEnsembler\"\n      summary: Saves a user-defined ensembler into the project\n      parameters:\n        - in: path\n          name: project_id\n          schema:\n            \u003c\u003c: *id\n          required: true\n      requestBody:\n        description: A JSON object containing information about the ensembler\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Ensembler\"\n      responses:\n        \"201\":\n          description: A JSON representation of a successfully saved ensembler\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Ensembler\"\n\n  \"/projects/{project_id}/ensemblers/{ensembler_id}\":\n    get:\n      tags: *tags\n      operationId: \"GetEnsemblerDetails\"\n      summary: Returns Ensembler's details by its ID\n      parameters:\n        - in: path\n          name: project_id\n          schema:\n            \u003c\u003c: *id\n          required: true\n        - in: path\n          name: ensembler_id\n          schema:\n            \u003c\u003c: *id\n          required: true\n      responses:\n        \"200\":\n          description: A JSON object representing an instance of the specific type of Ensembler\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Ensembler\"\n    put:\n      tags: *tags\n      operationId: \"UpdateEnsembler\"\n      summary: Updates existing Ensembler with the data provided in the payload\n      parameters:\n        - in: path\n          name: project_id\n          schema:\n            \u003c\u003c: *id\n          required: true\n        - in: path\n          name: ensembler_id\n          schema:\n            \u003c\u003c: *id\n          required: true\n      requestBody:\n        description: A JSON object, representing an update to the ensembler\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Ensembler\"\n      responses:\n        \"200\":\n          description: A JSON object representing an instance of updated Ensembler\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Ensembler\"\n\ncomponents:\n  schemas:\n    EnsemblerType:\n      type: \"string\"\n      enum:\n        - pyfunc\n\n    Ensembler:\n      type: object\n      oneOf:\n        - $ref: \"#/components/schemas/PyFuncEnsembler\"\n      discriminator:\n        propertyName: \"type\"\n        mapping:\n          pyfunc: '#/components/schemas/PyFuncEnsembler'\n\n    GenericEnsembler:\n      required:\n        - \"type\"\n      properties:\n        id:\n          $ref: \"common.yaml#/components/schemas/Id\"\n        project_id:\n          $ref: \"common.yaml#/components/schemas/Id\"\n        type:\n          $ref: \"#/components/schemas/EnsemblerType\"\n        name:\n          type: \"string\"\n          minLength: 3\n          maxLength: 20\n        created_at:\n          type: \"string\"\n          format: \"date-time\"\n        updated_at:\n          type: \"string\"\n          format: \"date-time\"\n\n    PyFuncEnsembler:\n      allOf:\n        - $ref: \"#/components/schemas/GenericEnsembler\"\n        - type: \"object\"\n          properties:\n            mlflow_url:\n              type: \"string\"\n              format: \"uri\"\n            mlflow_experiment_id:\n              $ref: \"common.yaml#/components/schemas/Id\"\n            mlflow_run_id:\n              type: \"string\"\n            artifact_uri:\n              type: \"string\"\n              format: \"uri\"\n\n    EnsemblersPaginatedResults:\n      allOf:\n        - type: object\n          properties:\n            paging:\n              $ref: \"common.yaml#/components/schemas/pagination.Paging\"\n        - type: object\n          properties:\n            results:\n              type: array\n              items:\n                $ref: \"#/components/schemas/GenericEnsembler\"\n"
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"EnsemblersPaginatedResults\": parse schema: allOf: [0]: parse schema: property \"paging\": parse schema: resolve \"common.yaml#/components/schemas/pagination.Paging\": find schema: external base \"common.yaml\" is not supported"
}