{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/public-park/summer-camp"
		},
		"file": {
			"name": "api-summer-camp.yaml",
			"size": 0,
			"path": "api-summer-camp.yaml",
			"byteSize": 17162,
			"content": "---\nopenapi: 3.0.2\ninfo:\n  title: Summer Camp\n  version: '0.9'\n  license:\n    name: GNU General Public License v3.0 or later\n    url: https://github.com/public-park/summer-camp/LICENSE\n  contact:\n    name: Summer Camp\n    url: https://github.com/public-park/summer-camp\nservers:\n  - url: https://\u003cyour-domain\u003e.com\npaths:\n  /login:\n    post:\n      description: login a user\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                password:\n                  type: string\n      responses:\n        '200':\n          description: OK\n          $ref: '#/components/responses/LoginResponse'\n        '400':\n          description: the server did not understand the request\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/NotAuthorized'\n        5XX:\n          description: Unexpected error.\n          $ref: '#/components/responses/ServerError'\n  /register:\n    post:\n      description: register a user\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                password:\n                  type: string\n      responses:\n        '200':\n          description: OK\n          $ref: '#/components/responses/RegisterResponse'\n        '400':\n          description: the server did not understand the request\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/NotAuthorized'\n        5XX:\n          description: Unexpected error.\n          $ref: '#/components/responses/ServerError'\n  /validate-token:\n    post:\n      description: validate a token\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                token:\n                  type: string\n      responses:\n        '200':\n          description: OK\n          $ref: '#/components/responses/ValidateTokenResponse'\n        '400':\n          description: the server did not understand the request\n          $ref: '#/components/responses/BadRequest'\n        5XX:\n          description: Unexpected error.\n          $ref: '#/components/responses/ServerError'\n  /users:\n    post:\n      security:\n        - AuthenticationToken: []\n      description: create a new user\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                password:\n                  type: string\n                tags:\n                  type: array\n                  items:\n                    type: string\n                activity:\n                  $ref: '#/components/schemas/Activity'\n                role:\n                  $ref: '#/components/schemas/Role'\n              required:\n                - name\n                - password\n      responses:\n        '200':\n          description: OK\n          $ref: '#/components/responses/UserResponse'\n        '400':\n          description: the server did not understand the request\n          $ref: '#/components/responses/BadRequest'\n        5XX:\n          description: Unexpected error.\n          $ref: '#/components/responses/ServerError'\n  /users/{userId}:\n    get:\n      security:\n        - AuthenticationToken: []\n      description: get a user by id\n      parameters:\n        - $ref: '#/components/parameters/userId'\n      responses:\n        '200':\n          $ref: '#/components/responses/UserResponse'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '400':\n          description: Bad request. User ID must be an valid UUID\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/NotAuthorized'\n        '5XX':\n          description: Unexpected error.\n          $ref: '#/components/responses/ServerError'\n    post:\n      security:\n        - AuthenticationToken: []\n      description: update a user\n      parameters:\n        - $ref: '#/components/parameters/userId'\n      requestBody:\n        required: true\n        description: updated user\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        '200':\n          description: the updated user\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '400':\n          description: Bad request. User ID must be an valid UUID\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/NotAuthorized'\n        '5XX':\n          description: Unexpected error.\n          $ref: '#/components/responses/ServerError'\n    delete:\n      security:\n        - AuthenticationToken: []\n      description: delete a user\n      parameters:\n        - $ref: '#/components/parameters/userId'\n      responses:\n        '204':\n          description: The user was deleted\n        '400':\n          description: Bad request. User ID must be an valid UUID\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/NotAuthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '5XX':\n          description: Unexpected error.\n          $ref: '#/components/responses/ServerError'\n  '/users/{userid}/presence':\n    get:\n      security:\n        - AuthenticationToken: []\n      description: get the presence details of a user\n      parameters:\n        - $ref: '#/components/parameters/userId'\n      responses:\n        '200':\n          $ref: '#/components/responses/UserPresenceResponse'\n        '400':\n          description: Bad request. User ID must be an valid UUID\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/NotAuthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '5XX':\n          description: Unexpected error.\n          $ref: '#/components/responses/ServerError'\n  '/accounts/{accountId}':\n    get:\n      security:\n        - AuthenticationToken: []\n      description: get an accountId\n      parameters:\n        - $ref: '#/components/parameters/accountId'\n      responses:\n        '200':\n          $ref: '#/components/responses/AccountResponse'\n        '400':\n          description: Bad request. accountid must be an valid UUID\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/NotAuthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '5XX':\n          description: Unexpected error.\n          $ref: '#/components/responses/ServerError'\n  '/accounts/{accountId}/configuration':\n    get:\n      security:\n        - AuthenticationToken: []\n      description: get an accountId configuration\n      parameters:\n        - $ref: '#/components/parameters/accountId'\n      responses:\n        '200':\n          $ref: '#/components/schemas/AccountConfiguration'\n        '400':\n          description: Bad request. accountid must be an valid UUID\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/NotAuthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '5XX':\n          description: Unexpected error.\n          $ref: '#/components/responses/ServerError'\n    post:\n      security:\n        - AuthenticationToken: []\n      description: update an accountId configuration\n      parameters:\n        - $ref: '#/components/parameters/accountId'\n      requestBody:\n        required: true\n        description: updated configuration\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AccountConfiguration'\n      responses:\n        '200':\n          $ref: '#/components/responses/AccountConfigurationResponse'\n        '400':\n          description: Bad request. accountid must be an valid UUID\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/NotAuthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '5XX':\n          description: Unexpected error.\n          $ref: '#/components/responses/ServerError'\n  '/accounts/{accountId}/configuration/validate':\n    post:\n      security:\n        - AuthenticationToken: []\n      description: validate an accountId configuration\n      parameters:\n        - $ref: '#/components/parameters/accountId'\n      requestBody:\n        required: true\n        description: configuration payload to check\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AccountConfiguration'\n      responses:\n        '200':\n          $ref: '#/components/responses/AccountConfigurationResponse'\n        '400':\n          description: Bad request. accountid must be an valid UUID\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/NotAuthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '5XX':\n          description: Unexpected error.\n          $ref: '#/components/responses/ServerError'\n  '/accounts/{accountId}/phone-numbers':\n    post:\n      security:\n        - AuthenticationToken: []\n      description: returns available phone numbers\n      parameters:\n        - $ref: '#/components/parameters/accountId'\n      responses:\n        '200':\n          description: list of phone numbers\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  $ref: '#/components/schemas/PhoneNumber'\n        '400':\n          description: Bad request. accountid must be an valid UUID\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/NotAuthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '5XX':\n          description: Unexpected error.\n          $ref: '#/components/responses/ServerError'\ncomponents:\n  securitySchemes:\n    AuthenticationToken:\n      type: apiKey\n      in: header\n      name: Token\n  schemas:\n    User:\n      type: object\n      properties:\n        id:\n          type: string\n          format: UUID\n          readOnly: true\n        name:\n          type: string\n          readOnly: true\n        tags:\n          type: array\n          items:\n            type: string\n        activity:\n          $ref: '#/components/schemas/Activity'\n        accountId:\n          type: string\n          readOnly: true\n        role:\n          type: string\n        configuration:\n          type: object\n          properties:\n            phone:\n              type: object\n              properties:\n                constraints:\n                  type: object\n                  properties:\n                    autoGainControl:\n                      type: boolean\n                    noiseSuppression:\n                      type: boolean\n                    echoCancellation:\n                      type: boolean\n        createdAt:\n          type: string\n          format: date-time\n          readOnly: true\n    UserAuthentication:\n      type: object\n      properties:\n        provider:\n          type: string\n      additionalProperties: true\n      readOnly: true\n    UserPresence:\n      type: object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        tags:\n          type: array\n          items:\n            type: string\n        accountId:\n          type: string\n        isOnline:\n          type: boolean\n        isAvailable:\n          type: boolean\n        activity:\n          $ref: '#/components/schemas/Activity'\n        role:\n          $ref: '#/components/schemas/Role'\n    PhoneConfiguration:\n      type: object\n      properties:\n        inbound:\n          type: object\n          properties:\n            isEnabled:\n              type: boolean\n            phoneNumber:\n              type: string\n        outbound:\n          type: object\n          properties:\n            isEnabled:\n              type: boolean\n            mode:\n              type: string\n              enum:\n                - internal-caller-id\n                - external-caller-id\n    Activity:\n      type: string\n      enum:\n        - away\n        - do-not-disturb\n        - waiting-for-work\n    Role:\n      type: string\n      enum:\n        - owner\n        - agent\n    Account:\n      type: object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        createdAt:\n          type: string\n          format: date-time\n    AccountConfiguration:\n      type: object\n      properties:\n        key:\n          type: string\n        secret:\n          type: string\n          writeOnly: true\n        accountSid:\n          type: string\n        inbound:\n          type: object\n          properties:\n            isEnabled:\n              type: boolean\n            phoneNumber:\n              type: string\n        outbound:\n          type: object\n          properties:\n            isEnabled:\n              type: boolean\n            mode:\n              type: string\n              enum:\n                - internal-caller-id\n                - external-caller-id\n    PhoneNumber:\n      type: object\n      properties:\n        phoneNumber:\n          type: string\n        friendlyName:\n          type: string\n    Error:\n      type: object\n      properties:\n        id:\n          type: string\n        description:\n          type: string\n  parameters:\n    userId:\n      in: path\n      description: 'The unique identifier of the user.'\n      name: userId\n      required: true\n      schema:\n        type: string\n        format: UUID\n    accountId:\n      in: path\n      name: accountId\n      description: 'The unique identifier of the account.'\n      required: true\n      schema:\n        type: string\n        format: UUID\n    offset:\n      in: query\n      name: offset\n      required: false\n      schema:\n        type: integer\n        minimum: 0\n      description: The number of items to skip before starting to collect the result set.\n    limit:\n      in: query\n      name: limit\n      required: false\n      schema:\n        type: integer\n        minimum: 1\n        maximum: 50\n        default: 20\n      description: The numbers of items to return.\n  responses:\n    NotAuthorized:\n      description: The request is unauthorized.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    NotFound:\n      description: The resource was not found\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    ServerError:\n      description: A server error occured\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    BadRequest:\n      description: The request was invalid\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    AccountResponse:\n      description: an account\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Account'\n    AccountConfigurationResponse:\n      description: an account configuration\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/AccountConfiguration'\n    UserResponse:\n      description: a user\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/User'\n    UserPresenceResponse:\n      description: a user's presence details\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/UserPresence'\n    UserConfigurationResponse:\n      description: a user's configuration details\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/UserConfiguration'\n    ValidateTokenResponse:\n      description: response to a token validation request\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              isValid:\n                type: boolean\n    LoginResponse:\n      description: response to a valid login request\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              token:\n                type: string\n              userId:\n                type: string\n              accountId:\n                type: string\n    RegisterResponse:\n      description: response to a valid register request\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              token:\n                type: string\n              userId:\n                type: string\n"
		}
	},
	"Error": "parse: parse spec: parse components: responses: \"UserConfigurationResponse\": content: application/json: schema: parse schema: resolve \"#/components/schemas/UserConfiguration\": find schema: resolve \"#/components/schemas/UserConfiguration\": can't find value for \"components/schemas/UserConfiguration\""
}