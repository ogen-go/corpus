{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/SecConNet/mahiru"
		},
		"file": {
			"name": "site_external_api.yaml",
			"size": 0,
			"path": "mahiru/rest/site_external_api.yaml",
			"byteSize": 6933,
			"content": "openapi: \"3.0.0\"\n\ninfo:\n    version: 0.1.0\n    title: Mahiru Site external API\n\npaths:\n  /rules/updates:\n    get:\n      summary: Get rule updates\n      operationId: getUpdates\n      parameters:\n        - name: from_version\n          in: query\n          description: \u003e-\n            Current version of the replica the update is for. If zero,\n            returns an update from the beginning.\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: A replica update starting from the given version\n          context:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/RulesUpdate\"\n        \"400\":\n          description: The request was not formatted correctly\n          content:\n            text/plain:\n              schema:\n                description: An error message\n                type: string\n        default:\n          description: A technical problem was encountered\n          content:\n            text/plain:\n              schema:\n                type: string\n\n  /assets/{assetId}:\n    get:\n      summary: Download an asset\n      operationId: downloadAsset\n      parameters:\n        - name: assetId\n          in: path\n          required: true\n          description: The id of the asset to retrieve\n          schema:\n            type: string\n        # TODO: The below will be replaced with an HTTPS client-side\n        # certificate eventually, but we'll just pass it insecurely for now.\n        - name: requester\n          in: query\n          description: Name of the requesting site\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: The requested asset\n          context:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/Asset\"\n        \"404\":\n          description: The asset does not exist or is not available to you.\n          content:\n            text/plain:\n              schema:\n                description: An error message\n                type: string\n        default:\n          description: A technical problem was encountered\n          content:\n            text/plain:\n              schema:\n                type: string\n\n  /assets/{assetId}/image:\n    get:\n      summary: Download an asset container image\n      operationId: downloadAssetImage\n      parameters:\n        - name: assetId\n          in: path\n          required: true\n          type: string\n          description: The id of the asset whose image to retrieve\n        # TODO: The below will be replaced with an HTTPS client-side\n        # certificate eventually, but we'll just pass it insecurely for now.\n        - name: requester\n          in: query\n          description: Name of the requesting site\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: The requested image\n          content:\n            application/x-tar:\n              schema:\n                type: string\n                format: binary\n        \"404\":\n          description: The asset does not exist or is not available to you.\n          content:\n            text/plain:\n              schema:\n                description: An error message\n                type: string\n        default:\n          description: A technical problem was encountered\n          content:\n            text/plain:\n              schema:\n                type: string\n\n  /assets/{assetId}/connect:\n    post:\n      summary: Connect to an instance of an asset container image\n      operationId: connectToAsset\n      requestBody:\n        description: Description of how to connect\n        content:\n          application/json:\n            schema:\n              \"$ref\": \"#/components/schemas/WireGuardConnectionRequest\"\n        required: true\n      parameters:\n        - name: assetId\n          description: The id of the asset to connect to\n          required: true\n          in: path\n          type: string\n        # TODO: The below will be replaced with an HTTPS client-side\n        # certificate eventually, but we'll just pass it insecurely for now.\n        - name: requester\n          in: query\n          description: Name of the requesting site\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: WireGuard connection information\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/WireGuardConnectionInfo\"\n        \"400\":\n          description: An invalid request was made\n          content:\n            text/plain:\n              schema:\n                description: An error message\n                type: string\n        \"404\":\n          description: The asset does not exist or is not available to you.\n          content:\n            text/plain:\n              schema:\n                description: An error message\n                type: string\n        \"503\":\n          description: \u003e\n            No connection could be made. Either the server does not support\n            them, or it is overloaded.\n          content:\n            text/plain:\n              schema:\n                description: An error message\n                type: string\n        default:\n          description: A technical problem was encountered\n          content:\n            text/plain:\n              schema:\n                type: string\n\n  /connections/{connId}:\n    delete:\n      summary: Disconnect from a currently connected-to asset\n      operationId: disconnectFromAsset\n    parameters:\n      - name: assetId\n        description: The id of the asset to disconnect from\n        required: true\n        in: path\n        type: string\n      - name: connId\n        description: The id of the connection to disconnect\n        required: true\n        in: path\n        type: string\n\n  /jobs:\n    post:\n      summary: Submit a job for the site to run\n      operatiorId: submitJob\n      requestBody:\n        description: Description of the site to register\n        content:\n          application/json:\n            schema:\n              \"$ref\": \"#/components/schemas/ExecutionRequest\"\n        required: true\n      responses:\n        \"201\":\n          description: Successfully submitted the job\n          # TODO: return job id and let submitter check status/progress\n          content:\n            text/plain:\n              schema:\n                description: A message signalling success\n                type: string\n        \"400\":\n          description: The request was not formatted correctly\n          content:\n            text/plain:\n              schema:\n                description: An error message\n                type: string\n        default:\n          description: A technical problem was encountered\n          content:\n            text/plain:\n              schema:\n                type: string\n\n$ref: \"./schemas.yaml/\"\n\n",
			"canonicalURL": "/github.com/SecConNet/mahiru@78c74852a1f8b49556cf2715bcb6b6c773738540/-/blob/mahiru/rest/site_external_api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/SecConNet/mahiru/blob/78c74852a1f8b49556cf2715bcb6b6c773738540/mahiru/rest/site_external_api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/assets/{assetId}/connect\": post: operation \"connectToAsset\": parameters: parse parameter \"assetId\": at 1:966: parameter MUST contain either a schema property, or a content property"
}