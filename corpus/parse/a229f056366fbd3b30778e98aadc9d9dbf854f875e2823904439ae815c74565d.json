{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/drakkan/sftpgo"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi/openapi.yaml",
			"byteSize": 209653,
			"content": "openapi: 3.0.3\ntags:\n  - name: healthcheck\n  - name: token\n  - name: maintenance\n  - name: admins\n  - name: API keys\n  - name: connections\n  - name: defender\n  - name: quota\n  - name: folders\n  - name: groups\n  - name: users\n  - name: data retention\n  - name: events\n  - name: metadata\n  - name: user APIs\n  - name: public shares\ninfo:\n  title: SFTPGo\n  description: |\n    SFTPGo allows you to securely share your files over SFTP and optionally over HTTP/S, FTP/S and WebDAV as well.\n    Several storage backends are supported and they are configurable per-user, so you can serve a local directory for a user and an S3 bucket (or part of it) for another one.\n    SFTPGo also supports virtual folders, a virtual folder can use any of the supported storage backends. So you can have, for example, an S3 user that exposes a Google Cloud Storage bucket (or part of it) on a specified path and an encrypted local filesystem on another one.\n    Virtual folders can be private or shared among multiple users, for shared virtual folders you can define different quota limits for each user.\n    SFTPGo supports groups to simplify the administration of multiple accounts by letting you assign settings once to a group, instead of multiple times to each individual user.\n    The SFTPGo WebClient allows end users to change their credentials, browse and manage their files in the browser and setup two-factor authentication which works with Authy, Google Authenticator and other compatible apps.\n    From the WebClient each authorized user can also create HTTP/S links to externally share files and folders securely, by setting limits to the number of downloads/uploads, protecting the share with a password, limiting access by source IP address, setting an automatic expiration date.\n  version: 2.2.3-dev\n  contact:\n    name: API support\n    url: 'https://github.com/drakkan/sftpgo'\n  license:\n    name: AGPLv3\n    url: 'https://www.gnu.org/licenses/agpl-3.0.en.html'\nservers:\n  - url: /api/v2\nsecurity:\n  - BearerAuth: []\n  - APIKeyAuth: []\npaths:\n  /healthz:\n    get:\n      security: []\n      servers:\n        - url: /\n      tags:\n        - healthcheck\n      summary: health check\n      description: This endpoint can be used to check if the application is running and responding to requests\n      operationId: healthz\n      responses:\n        '200':\n          description: successful operation\n          content:\n            text/plain:\n              schema:\n                type: string\n                example: ok\n  /shares/{id}:\n    parameters:\n      - name: id\n        in: path\n        description: the share id\n        required: true\n        schema:\n          type: string\n    get:\n      security:\n        - BasicAuth: []\n      tags:\n        - public shares\n      summary: Download shared files and folders as a single zip file\n      description: A zip file, containing the shared files and folders, will be generated on the fly and returned as response body. Only folders and regular files will be included in the zip. The share must be defined with the read scope and the associated user must have list and download permissions\n      operationId: get_share\n      parameters:\n        - in: query\n          name: compress\n          schema:\n            type: boolean\n            default: true\n          required: false\n      responses:\n        '200':\n          description: successful operation\n          content:\n            '*/*':\n              schema:\n                type: string\n                format: binary\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n    post:\n      security:\n        - BasicAuth: []\n      tags:\n        - public shares\n      summary: Upload one or more files to the shared path\n      description: The share must be defined with the write scope and the associated user must have the upload permission\n      operationId: upload_to_share\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                filenames:\n                  type: array\n                  items:\n                    type: string\n                    format: binary\n                  minItems: 1\n                  uniqueItems: true\n        required: true\n      responses:\n        '201':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '413':\n          $ref: '#/components/responses/RequestEntityTooLarge'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /shares/{id}/files:\n    parameters:\n      - name: id\n        in: path\n        description: the share id\n        required: true\n        schema:\n          type: string\n    get:\n      security:\n        - BasicAuth: []\n      tags:\n        - public shares\n      summary: Download a single file\n      description: Returns the file contents as response body. The share must have exactly one path defined and it must be a directory for this to work\n      operationId: download_share_file\n      parameters:\n        - in: query\n          name: path\n          required: true\n          description: Path to the file to download. It must be URL encoded, for example the path \"my dir/àdir/file.txt\" must be sent as \"my%20dir%2F%C3%A0dir%2Ffile.txt\"\n          schema:\n            type: string\n        - in: query\n          name: inline\n          required: false\n          description: 'If set, the response will not have the Content-Disposition header set to `attachment`'\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            '*/*':\n              schema:\n                type: string\n                format: binary\n        '206':\n          description: successful operation\n          content:\n            '*/*':\n              schema:\n                type: string\n                format: binary\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /shares/{id}/dirs:\n    parameters:\n      - name: id\n        in: path\n        description: the share id\n        required: true\n        schema:\n          type: string\n    get:\n      security:\n        - BasicAuth: []\n      tags:\n        - public shares\n      summary: Read directory contents\n      description: Returns the contents of the specified directory for the specified share. The share must have exactly one path defined and it must be a directory for this to work\n      operationId: get_share_dir_contents\n      parameters:\n        - in: query\n          name: path\n          description: Path to the folder to read. It must be URL encoded, for example the path \"my dir/àdir\" must be sent as \"my%20dir%2F%C3%A0dir\". If empty or missing the user's start directory is assumed. If relative, the user's start directory is used as the base\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DirEntry'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /shares/{id}/{fileName}:\n    parameters:\n      - name: id\n        in: path\n        description: the share id\n        required: true\n        schema:\n          type: string\n      - name: fileName\n        in: path\n        description: the name of the new file. It must be path encoded. Sub directories are not accepted\n        required: true\n        schema:\n          type: string\n      - name: X-SFTPGO-MTIME\n        in: header\n        schema:\n          type: integer\n        description: File modification time as unix timestamp in milliseconds\n    post:\n      security:\n        - BasicAuth: []\n      tags:\n        - public shares\n      summary: Upload a single file to the shared path\n      description: The share must be defined with the write scope and the associated user must have the upload/overwrite permissions\n      operationId: upload_single_to_share\n      requestBody:\n        content:\n          application/*:\n            schema:\n              type: string\n              format: binary\n          text/*:\n            schema:\n              type: string\n              format: binary\n          image/*:\n            schema:\n              type: string\n              format: binary\n          audio/*:\n            schema:\n              type: string\n              format: binary\n          video/*:\n            schema:\n              type: string\n              format: binary\n        required: true\n      responses:\n        '201':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '413':\n          $ref: '#/components/responses/RequestEntityTooLarge'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /token:\n    get:\n      security:\n        - BasicAuth: []\n      tags:\n        - token\n      summary: Get a new admin access token\n      description: Returns an access token and its expiration\n      operationId: get_token\n      parameters:\n        - in: header\n          name: X-SFTPGO-OTP\n          schema:\n            type: string\n          required: false\n          description: 'If you have 2FA configured for the admin attempting to log in you need to set the authentication code using this header parameter'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Token'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /logout:\n    get:\n      security:\n        - BearerAuth: []\n      tags:\n        - token\n      summary: Invalidate an admin access token\n      description: Allows to invalidate an admin token before its expiration\n      operationId: logout\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /user/token:\n    get:\n      security:\n        - BasicAuth: []\n      tags:\n        - token\n      summary: Get a new user access token\n      description: Returns an access token and its expiration\n      operationId: get_user_token\n      parameters:\n        - in: header\n          name: X-SFTPGO-OTP\n          schema:\n            type: string\n          required: false\n          description: 'If you have 2FA configured, for the HTTP protocol, for the user attempting to log in you need to set the authentication code using this header parameter'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Token'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /user/logout:\n    get:\n      security:\n        - BearerAuth: []\n      tags:\n        - token\n      summary: Invalidate a user access token\n      description: Allows to invalidate a client token before its expiration\n      operationId: client_logout\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /version:\n    get:\n      tags:\n        - maintenance\n      summary: Get version details\n      description: 'Returns version details such as the version number, build date, commit hash and enabled features'\n      operationId: get_version\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VersionInfo'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /changepwd/admin:\n    put:\n      security:\n        - BearerAuth: []\n      tags:\n        - admins\n      summary: Change admin password\n      description: Changes the password for the logged in admin. Please use '/admin/changepwd' instead\n      operationId: change_admin_password_deprecated\n      deprecated: true\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PwdChange'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /admin/changepwd:\n    put:\n      security:\n        - BearerAuth: []\n      tags:\n        - admins\n      summary: Change admin password\n      description: Changes the password for the logged in admin\n      operationId: change_admin_password\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PwdChange'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /admin/profile:\n    get:\n      security:\n        - BearerAuth: []\n      tags:\n        - admins\n      summary: Get admin profile\n      description: 'Returns the profile for the logged in admin'\n      operationId: get_admin_profile\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdminProfile'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n    put:\n      security:\n        - BearerAuth: []\n      tags:\n        - admins\n      summary: Update admin profile\n      description: 'Allows to update the profile for the logged in admin'\n      operationId: update_admin_profile\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AdminProfile'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /admin/2fa/recoverycodes:\n    get:\n      security:\n        - BearerAuth: []\n      tags:\n        - admins\n      summary: Get recovery codes\n      description: 'Returns the recovery codes for the logged in admin. Recovery codes can be used if the admin loses access to their second factor auth device. Recovery codes are returned unencrypted'\n      operationId: get_admin_recovery_codes\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RecoveryCode'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n    post:\n      security:\n        - BearerAuth: []\n      tags:\n        - admins\n      summary: Generate recovery codes\n      description: 'Generates new recovery codes for the logged in admin. Generating new recovery codes you automatically invalidate old ones'\n      operationId: generate_admin_recovery_codes\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /admin/totp/configs:\n    get:\n      security:\n        - BearerAuth: []\n      tags:\n        - admins\n      summary: Get available TOTP configuration\n      description: Returns the available TOTP configurations for the logged in admin\n      operationId: get_admin_totp_configs\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/TOTPConfig'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /admin/totp/generate:\n    post:\n      security:\n        - BearerAuth: []\n      tags:\n        - admins\n      summary: Generate a new TOTP secret\n      description: 'Generates a new TOTP secret, including the QR code as png, using the specified configuration for the logged in admin'\n      operationId: generate_admin_totp_secret\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                config_name:\n                  type: string\n                  description: 'name of the configuration to use to generate the secret'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  config_name:\n                    type: string\n                  issuer:\n                    type: string\n                  secret:\n                    type: string\n                  qr_code:\n                    type: string\n                    format: byte\n                    description: 'QR code png encoded as BASE64'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /admin/totp/validate:\n    post:\n      security:\n        - BearerAuth: []\n      tags:\n        - admins\n      summary: Validate a one time authentication code\n      description: 'Checks if the given authentication code can be validated using the specified secret and config name'\n      operationId: validate_admin_totp_secret\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                config_name:\n                  type: string\n                  description: 'name of the configuration to use to validate the passcode'\n                passcode:\n                  type: string\n                  description: 'passcode to validate'\n                secret:\n                  type: string\n                  description: 'secret to use to validate the passcode'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n              example:\n                message: Passcode successfully validated\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /admin/totp/save:\n    post:\n      security:\n        - BearerAuth: []\n      tags:\n        - admins\n      summary: Save a TOTP config\n      description: 'Saves the specified TOTP config for the logged in admin'\n      operationId: save_admin_totp_config\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AdminTOTPConfig'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n              example:\n                message: TOTP configuration saved\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /connections:\n    get:\n      tags:\n        - connections\n      summary: Get connections details\n      description: Returns the active users and info about their current uploads/downloads\n      operationId: get_connections\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ConnectionStatus'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  '/connections/{connectionID}':\n    delete:\n      tags:\n        - connections\n      summary: Close connection\n      description: Terminates an active connection\n      operationId: close_connection\n      parameters:\n        - name: connectionID\n          in: path\n          description: ID of the connection to close\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n              example:\n                message: Connection closed\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /defender/hosts:\n    get:\n      tags:\n        - defender\n      summary: Get hosts\n      description: Returns hosts that are banned or for which some violations have been detected\n      operationId: get_defender_hosts\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DefenderEntry'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /defender/hosts/{id}:\n    parameters:\n      - name: id\n        in: path\n        description: host id\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - defender\n      summary: Get host by id\n      description: Returns the host with the given id, if it exists\n      operationId: get_defender_host_by_id\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DefenderEntry'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n    delete:\n      tags:\n        - defender\n      summary: Removes a host from the defender lists\n      description: Unbans the specified host or clears its violations\n      operationId: delete_defender_host_by_id\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /defender/bantime:\n    get:\n      deprecated: true\n      tags:\n        - defender\n      summary: Get ban time\n      description: Deprecated, please use '/defender/hosts', '/defender/hosts/{id}' instead\n      operationId: get_ban_time\n      parameters:\n        - in: query\n          name: ip\n          required: true\n          description: IPv4/IPv6 address\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BanStatus'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /defender/unban:\n    post:\n      deprecated: true\n      tags:\n        - defender\n      summary: Unban\n      description: Deprecated, please use '/defender/hosts/{id}' instead\n      operationId: unban_host\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                ip:\n                  type: string\n                  description: IPv4/IPv6 address to remove\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /defender/score:\n    get:\n      deprecated: true\n      tags:\n        - defender\n      summary: Get score\n      description: Deprecated, please use '/defender/hosts', '/defender/hosts/{id}' instead\n      operationId: get_score\n      parameters:\n        - in: query\n          name: ip\n          required: true\n          description: IPv4/IPv6 address\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ScoreStatus'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /metadata/users/checks:\n    get:\n      tags:\n        - metadata\n      summary: Get metadata checks\n      description: Returns the active metadata checks\n      operationId: get_users_metadata_checks\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/MetadataCheck'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /metadata/users/{username}/check:\n    parameters:\n      - name: username\n        in: path\n        description: the username\n        required: true\n        schema:\n          type: string\n    post:\n      tags:\n        - metadata\n      summary: Start a metadata check\n      description: 'Starts a new metadata check for the given user. A metadata check requires a metadata plugin and removes the metadata associated to missing items (for example objects deleted outside SFTPGo). If a metadata check for this user is already active a 409 status code is returned. Metadata are stored for cloud storage backends. This API does nothing for other backends or if no metadata plugin is configured'\n      operationId: start_user_metadata_check\n      responses:\n        '202':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n              example:\n                message: Check started\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '409':\n          $ref: '#/components/responses/Conflict'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /retention/users/checks:\n    get:\n      tags:\n        - data retention\n      summary: Get retention checks\n      description: Returns the active retention checks\n      operationId: get_users_retention_checks\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RetentionCheck'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /retention/users/{username}/check:\n    parameters:\n      - name: username\n        in: path\n        description: the username\n        required: true\n        schema:\n          type: string\n      - name: notifications\n        in: query\n        description: 'specify how to notify results'\n        explode: false\n        schema:\n          type: array\n          items:\n            $ref: '#/components/schemas/RetentionCheckNotification'\n    post:\n      tags:\n        - data retention\n      summary: Start a retention check\n      description: 'Starts a new retention check for the given user. If a retention check for this user is already active a 409 status code is returned'\n      operationId: start_user_retention_check\n      requestBody:\n        required: true\n        description: 'Defines virtual paths to check and their retention time in hours'\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/FolderRetention'\n      responses:\n        '202':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n              example:\n                message: Check started\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '409':\n          $ref: '#/components/responses/Conflict'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /quotas/users/scans:\n    get:\n      tags:\n        - quota\n      summary: Get active user quota scans\n      description: Returns the active user quota scans\n      operationId: get_users_quota_scans\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/QuotaScan'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /quotas/users/{username}/scan:\n    parameters:\n      - name: username\n        in: path\n        description: the username\n        required: true\n        schema:\n          type: string\n    post:\n      tags:\n        - quota\n      summary: Start a user quota scan\n      description: Starts a new quota scan for the given user. A quota scan updates the number of files and their total size for the specified user and the virtual folders, if any, included in his quota\n      operationId: start_user_quota_scan\n      responses:\n        '202':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n              example:\n                message: Scan started\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '409':\n          $ref: '#/components/responses/Conflict'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /quotas/users/{username}/usage:\n    parameters:\n      - name: username\n        in: path\n        description: the username\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: mode\n        required: false\n        description: the update mode specifies if the given quota usage values should be added or replace the current ones\n        schema:\n          type: string\n          enum:\n            - add\n            - reset\n          description: |\n            Update type:\n                * `add` - add the specified quota limits to the current used ones\n                * `reset` - reset the values to the specified ones. This is the default\n          example: reset\n    put:\n      tags:\n        - quota\n      summary: Update disk quota usage limits\n      description: Sets the current used quota limits for the given user\n      operationId: user_quota_update_usage\n      requestBody:\n        required: true\n        description: 'If used_quota_size and used_quota_files are missing they will default to 0, this means that if mode is \"add\" the current value, for the missing field, will remain unchanged, if mode is \"reset\" the missing field is set to 0'\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/QuotaUsage'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n              example:\n                message: Quota updated\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '409':\n          $ref: '#/components/responses/Conflict'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /quotas/users/{username}/transfer-usage:\n    parameters:\n      - name: username\n        in: path\n        description: the username\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: mode\n        required: false\n        description: the update mode specifies if the given quota usage values should be added or replace the current ones\n        schema:\n          type: string\n          enum:\n            - add\n            - reset\n          description: |\n            Update type:\n                * `add` - add the specified quota limits to the current used ones\n                * `reset` - reset the values to the specified ones. This is the default\n          example: reset\n    put:\n      tags:\n        - quota\n      summary: Update transfer quota usage limits\n      description: Sets the current used transfer quota limits for the given user\n      operationId: user_transfer_quota_update_usage\n      requestBody:\n        required: true\n        description: 'If used_upload_data_transfer and used_download_data_transfer are missing they will default to 0, this means that if mode is \"add\" the current value, for the missing field, will remain unchanged, if mode is \"reset\" the missing field is set to 0'\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TransferQuotaUsage'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n              example:\n                message: Quota updated\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '409':\n          $ref: '#/components/responses/Conflict'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /quotas/folders/scans:\n    get:\n      tags:\n        - quota\n      summary: Get active folder quota scans\n      description: Returns the active folder quota scans\n      operationId: get_folders_quota_scans\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/FolderQuotaScan'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /quotas/folders/{name}/scan:\n    parameters:\n      - name: name\n        in: path\n        description: folder name\n        required: true\n        schema:\n          type: string\n    post:\n      tags:\n        - quota\n      summary: Start a folder quota scan\n      description: Starts a new quota scan for the given folder. A quota scan update the number of files and their total size for the specified folder\n      operationId: start_folder_quota_scan\n      responses:\n        '202':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n              example:\n                message: Scan started\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '409':\n          $ref: '#/components/responses/Conflict'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /quotas/folders/{name}/usage:\n    parameters:\n      - name: name\n        in: path\n        description: folder name\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: mode\n        required: false\n        description: the update mode specifies if the given quota usage values should be added or replace the current ones\n        schema:\n          type: string\n          enum:\n            - add\n            - reset\n          description: |\n            Update type:\n                * `add` - add the specified quota limits to the current used ones\n                * `reset` - reset the values to the specified ones. This is the default\n          example: reset\n    put:\n      tags:\n        - quota\n      summary: Update folder quota usage limits\n      description: Sets the current used quota limits for the given folder\n      operationId: folder_quota_update_usage\n      parameters:\n        - in: query\n          name: mode\n          required: false\n          description: the update mode specifies if the given quota usage values should be added or replace the current ones\n          schema:\n            type: string\n            enum:\n              - add\n              - reset\n            description: |\n              Update type:\n                * `add` - add the specified quota limits to the current used ones\n                * `reset` - reset the values to the specified ones. This is the default\n            example: reset\n      requestBody:\n        required: true\n        description: 'If used_quota_size and used_quota_files are missing they will default to 0, this means that if mode is \"add\" the current value, for the missing field, will remain unchanged, if mode is \"reset\" the missing field is set to 0'\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/QuotaUsage'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n              example:\n                message: Quota updated\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '409':\n          $ref: '#/components/responses/Conflict'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /quota-scans:\n    get:\n      deprecated: true\n      tags:\n        - quota\n      summary: Get quota scans\n      description: Deprecated, please use '/quotas/users/scans' instead\n      operationId: get_users_quota_scans_deprecated\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/QuotaScan'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n    post:\n      deprecated: true\n      tags:\n        - quota\n      summary: Start user quota scan\n      description: Deprecated, please use '/quotas/users/{username}/scan' instead\n      operationId: start_user_quota_scan_deprecated\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        '202':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n              example:\n                message: Scan started\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '409':\n          $ref: '#/components/responses/Conflict'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /quota-update:\n    put:\n      deprecated: true\n      tags:\n        - quota\n      summary: Update quota usage limits\n      description: Deprecated, please use '/quotas/users/{username}/usage' instead\n      operationId: user_quota_update_usage_deprecated\n      parameters:\n        - in: query\n          name: mode\n          required: false\n          description: the update mode specifies if the given quota usage values should be added or replace the current ones\n          schema:\n            type: string\n            enum:\n              - add\n              - reset\n            description: |\n              Update type:\n                * `add` - add the specified quota limits to the current used ones\n                * `reset` - reset the values to the specified ones. This is the default\n            example: reset\n      requestBody:\n        required: true\n        description: 'The only user mandatory fields are username, used_quota_size and used_quota_files. Please note that if the quota fields are missing they will default to 0, this means that if mode is \"add\" the current value will remain unchanged, if mode is \"reset\" the missing field is set to 0'\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n              example:\n                message: Quota updated\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /folder-quota-update:\n    put:\n      deprecated: true\n      tags:\n        - quota\n      summary: Update folder quota limits\n      description: Deprecated, please use '/quotas/folders/{name}/usage' instead\n      operationId: folder_quota_update_usage_deprecated\n      parameters:\n        - in: query\n          name: mode\n          required: false\n          description: the update mode specifies if the given quota usage values should be added or replace the current ones\n          schema:\n            type: string\n            enum:\n              - add\n              - reset\n            description: |\n              Update type:\n                * `add` - add the specified quota limits to the current used ones\n                * `reset` - reset the values to the specified ones. This is the default\n            example: reset\n      requestBody:\n        required: true\n        description: 'The only folder mandatory fields are mapped_path,used_quota_size and used_quota_files. Please note that if the used quota fields are missing they will default to 0, this means that if mode is \"add\" the current value will remain unchanged, if mode is \"reset\" the missing field is set to 0'\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BaseVirtualFolder'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n              example:\n                message: Quota updated\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /folder-quota-scans:\n    get:\n      deprecated: true\n      tags:\n        - quota\n      summary: Get folders quota scans\n      description: Deprecated, please use '/quotas/folders/scans' instead\n      operationId: get_folders_quota_scans_deprecated\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/FolderQuotaScan'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n    post:\n      deprecated: true\n      tags:\n        - quota\n      summary: Start a folder quota scan\n      description: Deprecated, please use '/quotas/folders/{name}/scan' instead\n      operationId: start_folder_quota_scan_deprecated\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BaseVirtualFolder'\n      responses:\n        '202':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n              example:\n                message: Scan started\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '409':\n          $ref: '#/components/responses/Conflict'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /folders:\n    get:\n      tags:\n        - folders\n      summary: Get folders\n      description: Returns an array with one or more folders\n      operationId: get_folders\n      parameters:\n        - in: query\n          name: offset\n          schema:\n            type: integer\n            minimum: 0\n            default: 0\n          required: false\n        - in: query\n          name: limit\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 500\n            default: 100\n          required: false\n          description: 'The maximum number of items to return. Max value is 500, default is 100'\n        - in: query\n          name: order\n          required: false\n          description: Ordering folders by name. Default ASC\n          schema:\n            type: string\n            enum:\n              - ASC\n              - DESC\n            example: ASC\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/BaseVirtualFolder'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n    post:\n      tags:\n        - folders\n      summary: Add folder\n      operationId: add_folder\n      description: Adds a new folder. A quota scan is required to update the used files/size\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BaseVirtualFolder'\n      responses:\n        '201':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BaseVirtualFolder'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  '/folders/{name}':\n    parameters:\n      - name: name\n        in: path\n        description: folder name\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - folders\n      summary: Find folders by name\n      description: Returns the folder with the given name if it exists.\n      operationId: get_folder_by_name\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BaseVirtualFolder'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n    put:\n      tags:\n        - folders\n      summary: Update folder\n      description: Updates an existing folder\n      operationId: update_folder\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BaseVirtualFolder'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n              example:\n                message: User updated\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n    delete:\n      tags:\n        - folders\n      summary: Delete folder\n      description: Deletes an existing folder\n      operationId: delete_folder\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n              example:\n                message: User deleted\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /groups:\n    get:\n      tags:\n        - groups\n      summary: Get groups\n      description: Returns an array with one or more groups\n      operationId: get_groups\n      parameters:\n        - in: query\n          name: offset\n          schema:\n            type: integer\n            minimum: 0\n            default: 0\n          required: false\n        - in: query\n          name: limit\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 500\n            default: 100\n          required: false\n          description: 'The maximum number of items to return. Max value is 500, default is 100'\n        - in: query\n          name: order\n          required: false\n          description: Ordering groups by name. Default ASC\n          schema:\n            type: string\n            enum:\n              - ASC\n              - DESC\n            example: ASC\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Group'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n    post:\n      tags:\n        - groups\n      summary: Add group\n      operationId: add_group\n      description: Adds a new group\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Group'\n      responses:\n        '201':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Group'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  '/groups/{name}':\n    parameters:\n      - name: name\n        in: path\n        description: group name\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - groups\n      summary: Find groups by name\n      description: Returns the group with the given name if it exists.\n      operationId: get_group_by_name\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Group'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n    put:\n      tags:\n        - groups\n      summary: Update group\n      description: Updates an existing group\n      operationId: update_group\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Group'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n              example:\n                message: User updated\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n    delete:\n      tags:\n        - groups\n      summary: Delete\n      description: Deletes an existing group\n      operationId: delete_group\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n              example:\n                message: User deleted\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /events/fs:\n    get:\n      tags:\n        - events\n      summary: Get filesystem events\n      description: 'Returns an array with one or more filesystem events applying the specified filters. This API is only available if you configure an \"eventsearcher\" plugin'\n      operationId: get_fs_events\n      parameters:\n        - in: query\n          name: start_timestamp\n          schema:\n            type: integer\n            format: int64\n            minimum: 0\n            default: 0\n          required: false\n          description: 'the event timestamp, unix timestamp in nanoseconds, must be greater than or equal to the specified one. 0 or missing means omit this filter'\n        - in: query\n          name: end_timestamp\n          schema:\n            type: integer\n            format: int64\n            minimum: 0\n            default: 0\n          required: false\n          description: 'the event timestamp, unix timestamp in nanoseconds, must be less than or equal to the specified one. 0 or missing means omit this filter'\n        - in: query\n          name: actions\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/FsEventAction'\n          description: 'the event action must be included among those specified. Empty or missing means omit this filter. Actions must be specified comma separated'\n          explode: false\n          required: false\n        - in: query\n          name: username\n          schema:\n            type: string\n          description: 'the event username must be the same as the one specified. Empty or missing means omit this filter'\n          required: false\n        - in: query\n          name: ip\n          schema:\n            type: string\n          description: 'the event IP must be the same as the one specified. Empty or missing means omit this filter'\n          required: false\n        - in: query\n          name: ssh_cmd\n          schema:\n            type: string\n          description: 'the event SSH command must be the same as the one specified. Empty or missing means omit this filter'\n          required: false\n        - in: query\n          name: fs_provider\n          schema:\n            $ref: '#/components/schemas/FsProviders'\n          description: 'the event filesystem provider must be the same as the one specified. Empty or missing means omit this filter'\n          required: false\n        - in: query\n          name: bucket\n          schema:\n            type: string\n          description: 'the bucket must be the same as the one specified. Empty or missing means omit this filter'\n          required: false\n        - in: query\n          name: endpoint\n          schema:\n            type: string\n          description: 'the endpoint must be the same as the one specified. Empty or missing means omit this filter'\n          required: false\n        - in: query\n          name: protocols\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/EventProtocols'\n          description: 'the event protocol must be included among those specified. Empty or missing means omit this filter. Values must be specified comma separated'\n          explode: false\n          required: false\n        - in: query\n          name: statuses\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/FsEventStatus'\n          description: 'the event status must be included among those specified. Empty or missing means omit this filter. Values must be specified comma separated'\n          explode: false\n          required: false\n        - in: query\n          name: instance_ids\n          schema:\n            type: array\n            items:\n              type: string\n          description: 'the event instance id must be included among those specified. Empty or missing means omit this filter. Values must be specified comma separated'\n          explode: false\n          required: false\n        - in: query\n          name: exclude_ids\n          schema:\n            type: array\n            items:\n              type: string\n          description: 'the event id must not be included among those specified. This is useful for cursor based pagination. Empty or missing means omit this filter. Values must be specified comma separated'\n          explode: false\n          required: false\n        - in: query\n          name: limit\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 1000\n            default: 100\n          required: false\n          description: 'The maximum number of items to return. Max value is 500, default is 100'\n        - in: query\n          name: order\n          required: false\n          description: Ordering events by timestamp. Default DESC\n          schema:\n            type: string\n            enum:\n              - ASC\n              - DESC\n            example: DESC\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/FsEvent'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /events/provider:\n    get:\n      tags:\n        - events\n      summary: Get provider events\n      description: 'Returns an array with one or more provider events applying the specified filters. This API is only available if you configure an \"eventsearcher\" plugin'\n      operationId: get_provider_events\n      parameters:\n        - in: query\n          name: start_timestamp\n          schema:\n            type: integer\n            format: int64\n            minimum: 0\n            default: 0\n          required: false\n          description: 'the event timestamp, unix timestamp in nanoseconds, must be greater than or equal to the specified one. 0 or missing means omit this filter'\n        - in: query\n          name: end_timestamp\n          schema:\n            type: integer\n            format: int64\n            minimum: 0\n            default: 0\n          required: false\n          description: 'the event timestamp, unix timestamp in nanoseconds, must be less than or equal to the specified one. 0 or missing means omit this filter'\n        - in: query\n          name: actions\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/ProviderEventAction'\n          description: 'the event action must be included among those specified. Empty or missing means omit this filter. Actions must be specified comma separated'\n          explode: false\n          required: false\n        - in: query\n          name: username\n          schema:\n            type: string\n          description: 'the event username must be the same as the one specified. Empty or missing means omit this filter'\n          required: false\n        - in: query\n          name: ip\n          schema:\n            type: string\n          description: 'the event IP must be the same as the one specified. Empty or missing means omit this filter'\n          required: false\n        - in: query\n          name: object_name\n          schema:\n            type: string\n          description: 'the event object name must be the same as the one specified. Empty or missing means omit this filter'\n          required: false\n        - in: query\n          name: object_types\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/ProviderEventObjectType'\n          description: 'the event object type must be included among those specified. Empty or missing means omit this filter. Values must be specified comma separated'\n          explode: false\n          required: false\n        - in: query\n          name: instance_ids\n          schema:\n            type: array\n            items:\n              type: string\n          description: 'the event instance id must be included among those specified. Empty or missing means omit this filter. Values must be specified comma separated'\n          explode: false\n          required: false\n        - in: query\n          name: exclude_ids\n          schema:\n            type: array\n            items:\n              type: string\n          description: 'the event id must not be included among those specified. This is useful for cursor based pagination. Empty or missing means omit this filter. Values must be specified comma separated'\n          explode: false\n          required: false\n        - in: query\n          name: limit\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 1000\n            default: 100\n          required: false\n          description: 'The maximum number of items to return. Max value is 500, default is 100'\n        - in: query\n          name: order\n          required: false\n          description: Ordering events by timestamp. Default DESC\n          schema:\n            type: string\n            enum:\n              - ASC\n              - DESC\n            example: DESC\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ProviderEvent'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /apikeys:\n    get:\n      security:\n        - BearerAuth: []\n      tags:\n        - API keys\n      summary: Get API keys\n      description: Returns an array with one or more API keys. For security reasons hashed keys are omitted in the response\n      operationId: get_api_keys\n      parameters:\n        - in: query\n          name: offset\n          schema:\n            type: integer\n            minimum: 0\n            default: 0\n          required: false\n        - in: query\n          name: limit\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 500\n            default: 100\n          required: false\n          description: 'The maximum number of items to return. Max value is 500, default is 100'\n        - in: query\n          name: order\n          required: false\n          description: Ordering API keys by id. Default ASC\n          schema:\n            type: string\n            enum:\n              - ASC\n              - DESC\n            example: ASC\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/APIKey'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n    post:\n      security:\n        - BearerAuth: []\n      tags:\n        - API keys\n      summary: Add API key\n      description: Adds a new API key\n      operationId: add_api_key\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/APIKey'\n      responses:\n        '201':\n          description: successful operation\n          headers:\n            X-Object-ID:\n              schema:\n                type: string\n              description: ID for the new created API key\n            Location:\n              schema:\n                type: string\n              description: URL to retrieve the details for the new created API key\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  mesage:\n                    type: string\n                    example: 'API key created. This is the only time the API key is visible, please save it.'\n                  key:\n                    type: string\n                    description: 'generated API key'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  '/apikeys/{id}':\n    parameters:\n      - name: id\n        in: path\n        description: the key id\n        required: true\n        schema:\n          type: string\n    get:\n      security:\n        - BearerAuth: []\n      tags:\n        - API keys\n      summary: Find API key by id\n      description: Returns the API key with the given id, if it exists. For security reasons the hashed key is omitted in the response\n      operationId: get_api_key_by_id\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/APIKey'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n    put:\n      security:\n        - BearerAuth: []\n      tags:\n        - API keys\n      summary: Update API key\n      description: Updates an existing API key. You cannot update the key itself, the creation date and the last use\n      operationId: update_api_key\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/APIKey'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n              example:\n                message: API key updated\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n    delete:\n      security:\n        - BearerAuth: []\n      tags:\n        - API keys\n      summary: Delete API key\n      description: Deletes an existing API key\n      operationId: delete_api_key\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n              example:\n                message: Admin deleted\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /admins:\n    get:\n      tags:\n        - admins\n      summary: Get admins\n      description: Returns an array with one or more admins. For security reasons hashed passwords are omitted in the response\n      operationId: get_admins\n      parameters:\n        - in: query\n          name: offset\n          schema:\n            type: integer\n            minimum: 0\n            default: 0\n          required: false\n        - in: query\n          name: limit\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 500\n            default: 100\n          required: false\n          description: 'The maximum number of items to return. Max value is 500, default is 100'\n        - in: query\n          name: order\n          required: false\n          description: Ordering admins by username. Default ASC\n          schema:\n            type: string\n            enum:\n              - ASC\n              - DESC\n            example: ASC\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Admin'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n    post:\n      tags:\n        - admins\n      summary: Add admin\n      description: 'Adds a new admin. Recovery codes and TOTP configuration cannot be set using this API: each admin must use the specific APIs'\n      operationId: add_admin\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Admin'\n            examples:\n              example-1:\n                value:\n                  id: 1\n                  status: 0\n                  username: string\n                  description: string\n                  password: pa$$word\n                  email: user@example.com\n                  permissions:\n                    - '*'\n                  filters:\n                    allow_list:\n                      - 192.0.2.0/24\n                      - '2001:db8::/32'\n                  additional_info: string\n      responses:\n        '201':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Admin'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  '/admins/{username}':\n    parameters:\n      - name: username\n        in: path\n        description: the admin username\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - admins\n      summary: Find admins by username\n      description: 'Returns the admin with the given username, if it exists. For security reasons the hashed password is omitted in the response'\n      operationId: get_admin_by_username\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Admin'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n    put:\n      tags:\n        - admins\n      summary: Update admin\n      description: 'Updates an existing admin. Recovery codes and TOTP configuration cannot be set/updated using this API: each admin must use the specific APIs. You are not allowed to update the admin impersonated using an API key'\n      operationId: update_admin\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Admin'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n              example:\n                message: Admin updated\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n    delete:\n      tags:\n        - admins\n      summary: Delete admin\n      description: Deletes an existing admin\n      operationId: delete_admin\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n              example:\n                message: Admin deleted\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  '/admins/{username}/2fa/disable':\n    parameters:\n      - name: username\n        in: path\n        description: the admin username\n        required: true\n        schema:\n          type: string\n    put:\n      tags:\n        - admins\n      summary: Disable second factor authentication\n      description: 'Disables second factor authentication for the given admin. This API must be used if the admin loses access to their second factor auth device and has no recovery codes'\n      operationId: disable_admin_2fa\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n              example:\n                message: 2FA disabled\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  '/admins/{username}/forgot-password':\n    parameters:\n      - name: username\n        in: path\n        description: the admin username\n        required: true\n        schema:\n          type: string\n    post:\n      security: []\n      tags:\n        - admins\n      summary: Send a password reset code by email\n      description: 'You must set up an SMTP server and the account must have a valid email address, in which case SFTPGo will send a code via email to reset the password. If the specified admin does not exist, the request will be silently ignored (a success response will be returned) to avoid disclosing existing admins'\n      operationId: admin_forgot_password\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  '/admins/{username}/reset-password':\n    parameters:\n      - name: username\n        in: path\n        description: the admin username\n        required: true\n        schema:\n          type: string\n    post:\n      security: []\n      tags:\n        - admins\n      summary: Reset the password\n      description: 'Set a new password using the code received via email'\n      operationId: admin_reset_password\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                code:\n                  type: string\n                password:\n                  type: string\n        required: true\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /users:\n    get:\n      tags:\n        - users\n      summary: Get users\n      description: Returns an array with one or more users. For security reasons hashed passwords are omitted in the response\n      operationId: get_users\n      parameters:\n        - in: query\n          name: offset\n          schema:\n            type: integer\n            minimum: 0\n            default: 0\n          required: false\n        - in: query\n          name: limit\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 500\n            default: 100\n          required: false\n          description: 'The maximum number of items to return. Max value is 500, default is 100'\n        - in: query\n          name: order\n          required: false\n          description: Ordering users by username. Default ASC\n          schema:\n            type: string\n            enum:\n              - ASC\n              - DESC\n            example: ASC\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n    post:\n      tags:\n        - users\n      summary: Add user\n      description: 'Adds a new user.Recovery codes and TOTP configuration cannot be set using this API: each user must use the specific APIs'\n      operationId: add_user\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        '201':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  '/users/{username}':\n    parameters:\n      - name: username\n        in: path\n        description: the username\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - users\n      summary: Find users by username\n      description: Returns the user with the given username if it exists. For security reasons the hashed password is omitted in the response\n      operationId: get_user_by_username\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n    put:\n      tags:\n        - users\n      summary: Update user\n      description: 'Updates an existing user and optionally disconnects it, if connected, to apply the new settings. Recovery codes and TOTP configuration cannot be set/updated using this API: each user must use the specific APIs'\n      operationId: update_user\n      parameters:\n        - in: query\n          name: disconnect\n          schema:\n            type: integer\n            enum:\n              - 0\n              - 1\n          description: |\n            Disconnect:\n              * `0` The user will not be disconnected and it will continue to use the old configuration until connected. This is the default\n              * `1` The user will be disconnected after a successful update. It must login again and so it will be forced to use the new configuration\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n              example:\n                message: User updated\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n    delete:\n      tags:\n        - users\n      summary: Delete user\n      description: Deletes an existing user\n      operationId: delete_user\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n              example:\n                message: User deleted\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  '/users/{username}/2fa/disable':\n    parameters:\n      - name: username\n        in: path\n        description: the username\n        required: true\n        schema:\n          type: string\n    put:\n      tags:\n        - users\n      summary: Disable second factor authentication\n      description: 'Disables second factor authentication for the given user. This API must be used if the user loses access to their second factor auth device and has no recovery codes'\n      operationId: disable_user_2fa\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n              example:\n                message: 2FA disabled\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  '/users/{username}/forgot-password':\n    parameters:\n      - name: username\n        in: path\n        description: the username\n        required: true\n        schema:\n          type: string\n    post:\n      security: []\n      tags:\n        - users\n      summary: Send a password reset code by email\n      description: 'You must configure an SMTP server, the account must have a valid email address and must not have the \"reset-password-disabled\" restriction, in which case SFTPGo will send a code via email to reset the password. If the specified user does not exist, the request will be silently ignored (a success response will be returned) to avoid disclosing existing users'\n      operationId: user_forgot_password\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  '/users/{username}/reset-password':\n    parameters:\n      - name: username\n        in: path\n        description: the username\n        required: true\n        schema:\n          type: string\n    post:\n      security: []\n      tags:\n        - users\n      summary: Reset the password\n      description: 'Set a new password using the code received via email'\n      operationId: user_reset_password\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                code:\n                  type: string\n                password:\n                  type: string\n        required: true\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /status:\n    get:\n      tags:\n        - maintenance\n      summary: Get status\n      description: Retrieves the status of the active services\n      operationId: get_status\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServicesStatus'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /dumpdata:\n    get:\n      tags:\n        - maintenance\n      summary: Dump data\n      description: 'Backups data as data provider independent JSON. The backup can be saved in a local file on the server, to avoid exposing sensitive data over the network, or returned as response body. The output of dumpdata can be used as input for loaddata'\n      operationId: dumpdata\n      parameters:\n        - in: query\n          name: output-file\n          schema:\n            type: string\n          description: Path for the file to write the JSON serialized data to. This path is relative to the configured \"backups_path\". If this file already exists it will be overwritten. To return the backup as response body set `output_data` to true instead.\n        - in: query\n          name: output-data\n          schema:\n            type: integer\n            enum:\n              - 0\n              - 1\n          description: |\n            output data:\n              * `0` or any other value != 1, the backup will be saved to a file on the server, `output_file` is required\n              * `1` the backup will be returned as response body\n        - in: query\n          name: indent\n          schema:\n            type: integer\n            enum:\n              - 0\n              - 1\n          description: |\n            indent:\n              * `0` no indentation. This is the default\n              * `1` format the output JSON\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/ApiResponse'\n                  - $ref: '#/components/schemas/BackupData'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /loaddata:\n    parameters:\n      - in: query\n        name: scan-quota\n        schema:\n          type: integer\n          enum:\n            - 0\n            - 1\n            - 2\n        description: |\n          Quota scan:\n            * `0` no quota scan is done, the imported users/folders will have used_quota_size and used_quota_files = 0 or the existing values if they already exists. This is the default\n            * `1` scan quota\n            * `2` scan quota if the user has quota restrictions\n          required: false\n      - in: query\n        name: mode\n        schema:\n          type: integer\n          enum:\n            - 0\n            - 1\n            - 2\n        description: |\n          Mode:\n            * `0` New objects are added, existing ones are updated. This is the default\n            * `1` New objects are added, existing ones are not modified\n            * `2` New objects are added, existing ones are updated and connected users are disconnected and so forced to use the new configuration\n    get:\n      tags:\n        - maintenance\n      summary: Load data from path\n      description: 'Restores SFTPGo data from a JSON backup file on the server. Objects will be restored one by one and the restore is stopped if a object cannot be added or updated, so it could happen a partial restore'\n      operationId: loaddata_from_file\n      parameters:\n        - in: query\n          name: input-file\n          schema:\n            type: string\n          required: true\n          description: Path for the file to read the JSON serialized data from. This can be an absolute path or a path relative to the configured \"backups_path\". The max allowed file size is 10MB\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n              example:\n                message: Data restored\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n    post:\n      tags:\n        - maintenance\n      summary: Load data\n      description: 'Restores SFTPGo data from a JSON backup. Objects will be restored one by one and the restore is stopped if a object cannot be added or updated, so it could happen a partial restore'\n      operationId: loaddata_from_request_body\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BackupData'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n              example:\n                message: Data restored\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /user/changepwd:\n    put:\n      security:\n        - BearerAuth: []\n      tags:\n        - user APIs\n      summary: Change user password\n      description: Changes the password for the logged in user\n      operationId: change_user_password\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PwdChange'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /user/publickeys:\n    get:\n      security:\n        - BearerAuth: []\n      tags:\n        - user APIs\n      deprecated: true\n      summary: Get the user's public keys\n      description: 'Returns the public keys for the logged in user. Deprecated please use \"/user/profile\" instead'\n      operationId: get_user_public_keys\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n    put:\n      security:\n        - BearerAuth: []\n      tags:\n        - user APIs\n      deprecated: true\n      summary: Set the user's public keys\n      description: 'Sets the public keys for the logged in user. Public keys must be in OpenSSH format. Deprecated please use \"/user/profile\" instead'\n      operationId: set_user_public_keys\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                type: string\n                description: Public key in OpenSSH format\n                example: ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIPVILdH2u3yV5SAeE6XksD1z1vXRg0E4hJUov8ITDAZ2 user@host\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /user/profile:\n    get:\n      security:\n        - BearerAuth: []\n      tags:\n        - user APIs\n      summary: Get user profile\n      description: 'Returns the profile for the logged in user'\n      operationId: get_user_profile\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserProfile'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n    put:\n      security:\n        - BearerAuth: []\n      tags:\n        - user APIs\n      summary: Update user profile\n      description: 'Allows to update the profile for the logged in user'\n      operationId: update_user_profile\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserProfile'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /user/2fa/recoverycodes:\n    get:\n      security:\n        - BearerAuth: []\n      tags:\n        - user APIs\n      summary: Get recovery codes\n      description: 'Returns the recovery codes for the logged in user. Recovery codes can be used if the user loses access to their second factor auth device. Recovery codes are returned unencrypted'\n      operationId: get_user_recovery_codes\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RecoveryCode'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n    post:\n      security:\n        - BearerAuth: []\n      tags:\n        - user APIs\n      summary: Generate recovery codes\n      description: 'Generates new recovery codes for the logged in user. Generating new recovery codes you automatically invalidate old ones'\n      operationId: generate_user_recovery_codes\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /user/totp/configs:\n    get:\n      security:\n        - BearerAuth: []\n      tags:\n        - user APIs\n      summary: Get available TOTP configuration\n      description: Returns the available TOTP configurations for the logged in user\n      operationId: get_user_totp_configs\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/TOTPConfig'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /user/totp/generate:\n    post:\n      security:\n        - BearerAuth: []\n      tags:\n        - user APIs\n      summary: Generate a new TOTP secret\n      description: 'Generates a new TOTP secret, including the QR code as png, using the specified configuration for the logged in user'\n      operationId: generate_user_totp_secret\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                config_name:\n                  type: string\n                  description: 'name of the configuration to use to generate the secret'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  config_name:\n                    type: string\n                  issuer:\n                    type: string\n                  secret:\n                    type: string\n                  qr_code:\n                    type: string\n                    format: byte\n                    description: 'QR code png encoded as BASE64'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /user/totp/validate:\n    post:\n      security:\n        - BearerAuth: []\n      tags:\n        - user APIs\n      summary: Validate a one time authentication code\n      description: 'Checks if the given authentication code can be validated using the specified secret and config name'\n      operationId: validate_user_totp_secret\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                config_name:\n                  type: string\n                  description: 'name of the configuration to use to validate the passcode'\n                passcode:\n                  type: string\n                  description: 'passcode to validate'\n                secret:\n                  type: string\n                  description: 'secret to use to validate the passcode'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n              example:\n                message: Passcode successfully validated\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /user/totp/save:\n    post:\n      security:\n        - BearerAuth: []\n      tags:\n        - user APIs\n      summary: Save a TOTP config\n      description: 'Saves the specified TOTP config for the logged in user'\n      operationId: save_user_totp_config\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserTOTPConfig'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n              example:\n                message: TOTP configuration saved\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /user/shares:\n    get:\n      tags:\n        - user APIs\n      summary: List user shares\n      description: Returns the share for the logged in user\n      operationId: get_user_shares\n      parameters:\n        - in: query\n          name: offset\n          schema:\n            type: integer\n            minimum: 0\n            default: 0\n          required: false\n        - in: query\n          name: limit\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 500\n            default: 100\n          required: false\n          description: 'The maximum number of items to return. Max value is 500, default is 100'\n        - in: query\n          name: order\n          required: false\n          description: Ordering shares by ID. Default ASC\n          schema:\n            type: string\n            enum:\n              - ASC\n              - DESC\n            example: ASC\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Share'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n    post:\n      tags:\n        - user APIs\n      summary: Add a share\n      operationId: add_share\n      description: 'Adds a new share. The share id will be auto-generated'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Share'\n      responses:\n        '201':\n          description: successful operation\n          headers:\n            X-Object-ID:\n              schema:\n                type: string\n              description: ID for the new created share\n            Location:\n              schema:\n                type: string\n              description: URL to retrieve the details for the new created share\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  '/user/shares/{id}':\n    parameters:\n      - name: id\n        in: path\n        description: the share id\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - user APIs\n      summary: Get share by id\n      description: Returns a share by id for the logged in user\n      operationId: get_user_share_by_id\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Share'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n    put:\n      tags:\n        - user APIs\n      summary: Update share\n      description: 'Updates an existing share belonging to the logged in user'\n      operationId: update_user_share\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Share'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n              example:\n                message: Share updated\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n    delete:\n      tags:\n        - user APIs\n      summary: Delete share\n      description: 'Deletes an existing share belonging to the logged in user'\n      operationId: delete_user_share\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n              example:\n                message: Share deleted\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /user/folder:\n    get:\n      tags:\n        - user APIs\n      summary: Read folders contents\n      description: Returns the contents of the specified folder for the logged in user. Please use '/user/dirs' instead\n      operationId: get_user_folder_contents\n      deprecated: true\n      parameters:\n        - in: query\n          name: path\n          description: Path to the folder to read. It must be URL encoded, for example the path \"my dir/àdir\" must be sent as \"my%20dir%2F%C3%A0dir\". If empty or missing the user's start directory is assumed. If relative, the user's start directory is used as the base\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DirEntry'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /user/dirs:\n    get:\n      tags:\n        - user APIs\n      summary: Read directory contents\n      description: Returns the contents of the specified directory for the logged in user\n      operationId: get_user_dir_contents\n      parameters:\n        - in: query\n          name: path\n          description: Path to the folder to read. It must be URL encoded, for example the path \"my dir/àdir\" must be sent as \"my%20dir%2F%C3%A0dir\". If empty or missing the user's start directory is assumed. If relative, the user's start directory is used as the base\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DirEntry'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n    post:\n      tags:\n        - user APIs\n      summary: Create a directory\n      description: Create a directory for the logged in user\n      operationId: create_user_dir\n      parameters:\n        - in: query\n          name: path\n          description: Path to the folder to create. It must be URL encoded, for example the path \"my dir/àdir\" must be sent as \"my%20dir%2F%C3%A0dir\"\n          schema:\n            type: string\n          required: true\n        - in: query\n          name: mkdir_parents\n          description: Create parent directories if they do not exist?\n          schema:\n            type: boolean\n          required: false\n      responses:\n        '201':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n    patch:\n      tags:\n        - user APIs\n      summary: Rename a directory\n      description: Rename a directory for the logged in user. The rename is allowed for empty directory or for non empty local directories, with no virtual folders inside\n      operationId: rename_user_dir\n      parameters:\n        - in: query\n          name: path\n          description: Path to the folder to rename. It must be URL encoded, for example the path \"my dir/àdir\" must be sent as \"my%20dir%2F%C3%A0dir\"\n          schema:\n            type: string\n          required: true\n        - in: query\n          name: target\n          description: New name. It must be URL encoded, for example the path \"my dir/àdir\" must be sent as \"my%20dir%2F%C3%A0dir\"\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n    delete:\n      tags:\n        - user APIs\n      summary: Delete a directory\n      description: Delete a directory for the logged in user. Only empty directories can be deleted\n      operationId: delete_user_dir\n      parameters:\n        - in: query\n          name: path\n          description: Path to the folder to delete. It must be URL encoded, for example the path \"my dir/àdir\" must be sent as \"my%20dir%2F%C3%A0dir\"\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /user/file:\n    get:\n      tags:\n        - user APIs\n      summary: Download a single file\n      description: Returns the file contents as response body. Please use '/user/files' instead\n      operationId: get_user_file\n      deprecated: true\n      parameters:\n        - in: query\n          name: path\n          required: true\n          description: Path to the file to download. It must be URL encoded, for example the path \"my dir/àdir/file.txt\" must be sent as \"my%20dir%2F%C3%A0dir%2Ffile.txt\"\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            '*/*':\n              schema:\n                type: string\n                format: binary\n        '206':\n          description: successful operation\n          content:\n            '*/*':\n              schema:\n                type: string\n                format: binary\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /user/files:\n    get:\n      tags:\n        - user APIs\n      summary: Download a single file\n      description: Returns the file contents as response body\n      operationId: download_user_file\n      parameters:\n        - in: query\n          name: path\n          required: true\n          description: Path to the file to download. It must be URL encoded, for example the path \"my dir/àdir/file.txt\" must be sent as \"my%20dir%2F%C3%A0dir%2Ffile.txt\"\n          schema:\n            type: string\n        - in: query\n          name: inline\n          required: false\n          description: 'If set, the response will not have the Content-Disposition header set to `attachment`'\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            '*/*':\n              schema:\n                type: string\n                format: binary\n        '206':\n          description: successful operation\n          content:\n            '*/*':\n              schema:\n                type: string\n                format: binary\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n    post:\n      tags:\n        - user APIs\n      summary: Upload files\n      description: Upload one or more files for the logged in user\n      operationId: create_user_files\n      parameters:\n        - in: query\n          name: path\n          description: Parent directory for the uploaded files. It must be URL encoded, for example the path \"my dir/àdir\" must be sent as \"my%20dir%2F%C3%A0dir\". If empty or missing the root path is assumed. If a file with the same name already exists, it will be overwritten\n          schema:\n            type: string\n        - in: query\n          name: mkdir_parents\n          description: Create parent directories if they do not exist?\n          schema:\n            type: boolean\n          required: false\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                filenames:\n                  type: array\n                  items:\n                    type: string\n                    format: binary\n                  minItems: 1\n                  uniqueItems: true\n        required: true\n      responses:\n        '201':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '413':\n          $ref: '#/components/responses/RequestEntityTooLarge'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n    patch:\n      tags:\n        - user APIs\n      summary: Rename a file\n      description: Rename a file for the logged in user\n      operationId: rename_user_file\n      parameters:\n        - in: query\n          name: path\n          description: Path to the file to rename. It must be URL encoded\n          schema:\n            type: string\n          required: true\n        - in: query\n          name: target\n          description: New name. It must be URL encoded\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n    delete:\n      tags:\n        - user APIs\n      summary: Delete a file\n      description: Delete a file for the logged in user.\n      operationId: delete_user_file\n      parameters:\n        - in: query\n          name: path\n          description: Path to the file to delete. It must be URL encoded\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /user/files/upload:\n    post:\n      tags:\n        - user APIs\n      summary: Upload a single file\n      description: 'Upload a single file for the logged in user to an existing directory. This API does not use multipart/form-data and so no temporary files are created server side but only a single file can be uploaded as POST body'\n      operationId: create_user_file\n      parameters:\n        - in: query\n          name: path\n          description: Full file path. It must be path encoded, for example the path \"my dir/àdir/file.txt\" must be sent as \"my%20dir%2F%C3%A0dir%2Ffile.txt\". The parent directory must exist. If a file with the same name already exists, it will be overwritten\n          schema:\n            type: string\n          required: true\n        - in: query\n          name: mkdir_parents\n          description: Create parent directories if they do not exist?\n          schema:\n            type: boolean\n          required: false\n        - in: header\n          name: X-SFTPGO-MTIME\n          schema:\n            type: integer\n          description: File modification time as unix timestamp in milliseconds\n      requestBody:\n        content:\n          application/*:\n            schema:\n              type: string\n              format: binary\n          text/*:\n            schema:\n              type: string\n              format: binary\n          image/*:\n            schema:\n              type: string\n              format: binary\n          audio/*:\n            schema:\n              type: string\n              format: binary\n          video/*:\n            schema:\n              type: string\n              format: binary\n        required: true\n      responses:\n        '201':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '413':\n          $ref: '#/components/responses/RequestEntityTooLarge'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /user/files/metadata:\n    patch:\n      tags:\n        - user APIs\n      summary: Set metadata for a file/directory\n      description: 'Set supported metadata attributes for the specified file or directory'\n      operationId: setprops_user_file\n      parameters:\n        - in: query\n          name: path\n          description: Full file/directory path. It must be URL encoded, for example the path \"my dir/àdir/file.txt\" must be sent as \"my%20dir%2F%C3%A0dir%2Ffile.txt\"\n          schema:\n            type: string\n          required: true\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                modification_time:\n                  type: integer\n                  description: File modification time as unix timestamp in milliseconds\n        required: true\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '413':\n          $ref: '#/components/responses/RequestEntityTooLarge'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /user/streamzip:\n    post:\n      tags:\n        - user APIs\n      summary: Download multiple files and folders as a single zip file\n      description: A zip file, containing the specified files and folders, will be generated on the fly and returned as response body. Only folders and regular files will be included in the zip\n      operationId: streamzip\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                type: string\n                description: Absolute file or folder path\n      responses:\n        '200':\n          description: successful operation\n          content:\n            'application/zip':\n              schema:\n                type: string\n                format: binary\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\ncomponents:\n  responses:\n    BadRequest:\n      description: Bad Request\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ApiResponse'\n    Unauthorized:\n      description: Unauthorized\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ApiResponse'\n    Forbidden:\n      description: Forbidden\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ApiResponse'\n    NotFound:\n      description: Not Found\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ApiResponse'\n    Conflict:\n      description: Conflict\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ApiResponse'\n    RequestEntityTooLarge:\n      description: Request Entity Too Large, max allowed size exceeded\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ApiResponse'\n    InternalServerError:\n      description: Internal Server Error\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ApiResponse'\n    DefaultResponse:\n      description: Unexpected Error\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ApiResponse'\n  schemas:\n    Permission:\n      type: string\n      enum:\n        - '*'\n        - list\n        - download\n        - upload\n        - overwrite\n        - delete\n        - delete_files\n        - delete_dirs\n        - rename\n        - rename_files\n        - rename_dirs\n        - create_dirs\n        - create_symlinks\n        - chmod\n        - chown\n        - chtimes\n      description: |\n        Permissions:\n          * `*` - all permissions are granted\n          * `list` - list items is allowed\n          * `download` - download files is allowed\n          * `upload` - upload files is allowed\n          * `overwrite` - overwrite an existing file, while uploading, is allowed. upload permission is required to allow file overwrite\n          * `delete` - delete files or directories is allowed\n          * `delete_files` - delete files is allowed\n          * `delete_dirs` - delete directories is allowed\n          * `rename` - rename files or directories is allowed\n          * `rename_files` - rename files is allowed\n          * `rename_dirs` - rename directories is allowed\n          * `create_dirs` - create directories is allowed\n          * `create_symlinks` - create links is allowed\n          * `chmod` changing file or directory permissions is allowed\n          * `chown` changing file or directory owner and group is allowed\n          * `chtimes` changing file or directory access and modification time is allowed\n    DirPermissions:\n      type: object\n      additionalProperties:\n        type: array\n        items:\n          $ref: '#/components/schemas/Permission'\n        minItems: 1\n      minProperties: 1\n      description: 'hash map with directory as key and an array of permissions as value. Directories must be absolute paths, permissions for root directory (\"/\") are required'\n    AdminPermissions:\n      type: string\n      enum:\n        - '*'\n        - add_users\n        - edit_users\n        - del_users\n        - view_users\n        - view_conns\n        - close_conns\n        - view_status\n        - manage_admins\n        - manage_apikeys\n        - quota_scans\n        - manage_system\n        - manage_defender\n        - view_defender\n        - retention_checks\n        - metadata_checks\n        - view_events\n      description: |\n        Admin permissions:\n          * `*` - all permissions are granted\n          * `add_users` - add new users is allowed\n          * `edit_users` - change existing users is allowed\n          * `del_users` - remove users is allowed\n          * `view_users` - list users is allowed\n          * `view_conns` - list active connections is allowed\n          * `close_conns` - close active connections is allowed\n          * `view_status` - view the server status is allowed\n          * `manage_admins` - manage other admins is allowed\n          * `manage_apikeys` - manage API keys is allowed\n          * `quota_scans` - view and start quota scans is allowed\n          * `manage_system` - backups and restores are allowed\n          * `manage_defender` - remove ip from the dynamic blocklist is allowed\n          * `view_defender` - list the dynamic blocklist is allowed\n          * `retention_checks` - view and start retention checks is allowed\n          * `metadata_checks` - view and start metadata checks is allowed\n          * `view_events` - view and search filesystem and provider events is allowed\n    FsProviders:\n      type: integer\n      enum:\n        - 0\n        - 1\n        - 2\n        - 3\n        - 4\n        - 5\n      description: |\n        Filesystem providers:\n          * `0` - Local filesystem\n          * `1` - S3 Compatible Object Storage\n          * `2` - Google Cloud Storage\n          * `3` - Azure Blob Storage\n          * `4` - Local filesystem encrypted\n          * `5` - SFTP\n    LoginMethods:\n      type: string\n      enum:\n        - publickey\n        - password\n        - password-over-SSH\n        - keyboard-interactive\n        - publickey+password\n        - publickey+keyboard-interactive\n        - TLSCertificate\n        - TLSCertificate+password\n      description: |\n        Available login methods. To enable multi-step authentication you have to allow only multi-step login methods\n          * `publickey`\n          * `password`, password for all the supported protocols\n          * `password-over-SSH`, password over SSH protocol (SSH/SFTP/SCP)\n          * `keyboard-interactive`\n          * `publickey+password` - multi-step auth: public key and password\n          * `publickey+keyboard-interactive` - multi-step auth: public key and keyboard interactive\n          * `TLSCertificate`\n          * `TLSCertificate+password` - multi-step auth: TLS client certificate and password\n    SupportedProtocols:\n      type: string\n      enum:\n        - SSH\n        - FTP\n        - DAV\n        - HTTP\n      description: |\n        Protocols:\n          * `SSH` - includes both SFTP and SSH commands\n          * `FTP` - plain FTP and FTPES/FTPS\n          * `DAV` - WebDAV over HTTP/HTTPS\n          * `HTTP` - WebClient/REST API\n    MFAProtocols:\n      type: string\n      enum:\n        - SSH\n        - FTP\n        - HTTP\n      description: |\n        Protocols:\n          * `SSH` - includes both SFTP and SSH commands\n          * `FTP` - plain FTP and FTPES/FTPS\n          * `HTTP` - WebClient/REST API\n    EventProtocols:\n      type: string\n      enum:\n        - SSH\n        - SFTP\n        - SCP\n        - FTP\n        - DAV\n        - HTTP\n        - HTTPShare\n        - DataRetention\n        - OIDC\n      description: |\n        Protocols:\n          * `SSH` - SSH commands\n          * `SFTP` - SFTP protocol\n          * `FTP` - plain FTP and FTPES/FTPS\n          * `DAV` - WebDAV\n          * `HTTP` - WebClient/REST API\n          * `HTTPShare` - the event is generated in a public share\n          * `DataRetention` - the event is generated by a data retention check\n          * `OIDC` - OpenID Connect\n    WebClientOptions:\n      type: string\n      enum:\n        - publickey-change-disabled\n        - write-disabled\n        - mfa-disabled\n        - password-change-disabled\n        - api-key-auth-change-disabled\n        - info-change-disabled\n        - shares-disabled\n        - password-reset-disabled\n        - shares-without-password-disabled\n      description: |\n        Options:\n          * `publickey-change-disabled` - changing SSH public keys is not allowed\n          * `write-disabled` - upload, rename, delete are not allowed even if the user has permissions for these actions\n          * `mfa-disabled` - enabling multi-factor authentication is not allowed. This option cannot be set if the user has MFA already enabled\n          * `password-change-disabled` - changing password is not allowed\n          * `api-key-auth-change-disabled` - enabling/disabling API key authentication is not allowed\n          * `info-change-disabled` - changing info such as email and description is not allowed\n          * `shares-disabled` - sharing files and directories with external users is not allowed\n          * `password-reset-disabled` - resetting the password is not allowed\n          * `shares-without-password-disabled` - creating shares without password protection is not allowed\n    RetentionCheckNotification:\n      type: string\n      enum:\n        - Hook\n        - Email\n      description: |\n        Options:\n          * `Hook` - notify result using the defined hook. A \"data_retention_hook\" must be defined in your configuration file for this to work\n          * `Email` - notify results by email. The admin starting the retention check must have an associated email address and the SMTP server must be configured for this to work\n    APIKeyScope:\n      type: integer\n      enum:\n        - 1\n        - 2\n      description: |\n        Options:\n          * `1` - admin scope. The API key will be used to impersonate an SFTPGo admin\n          * `2` - user scope. The API key will be used to impersonate an SFTPGo user\n    ShareScope:\n      type: integer\n      enum:\n        - 1\n        - 2\n      description: |\n        Options:\n          * `1` - read scope\n          * `2` - write scope\n    TOTPHMacAlgo:\n      type: string\n      enum:\n        - sha1\n        - sha256\n        - sha512\n      description: 'Supported HMAC algorithms for Time-based one time passwords'\n    UserType:\n      type: string\n      enum:\n        - ''\n        - LDAPUser\n        - OSUser\n      description: This is an hint for authentication plugins. It is ignored when using SFTPGo internal authentication\n    FsEventStatus:\n      type: integer\n      enum:\n        - 1\n        - 2\n        - 3\n      description: \u003e\n        Event status:\n          * `1` - no error\n          * `2` - generic error\n          * `3` - quota exceeded error\n    FsEventAction:\n      type: string\n      enum:\n        - download\n        - pre-upload\n        - upload\n        - delete\n        - rename\n        - mkdir\n        - rmdir\n        - ssh_cmd\n    ProviderEventAction:\n      type: string\n      enum:\n        - add\n        - update\n        - delete\n    ProviderEventObjectType:\n      type: string\n      enum:\n        - user\n        - admin\n        - api_key\n        - share\n    SSHAuthentications:\n      type: string\n      enum:\n        - publickey\n        - password\n        - keyboard-interactive\n        - publickey+password\n        - publickey+keyboard-interactive\n    TLSVersions:\n      type: integer\n      enum:\n        - 12\n        - 13\n      description: \u003e\n        TLS version:\n          * `12` - TLS 1.2\n          * `13` - TLS 1.3\n    TOTPConfig:\n      type: object\n      properties:\n        name:\n          type: string\n        issuer:\n          type: string\n        algo:\n          $ref: '#/components/schemas/TOTPHMacAlgo'\n    RecoveryCode:\n      type: object\n      properties:\n        secret:\n          $ref: '#/components/schemas/Secret'\n        used:\n          type: boolean\n      description: 'Recovery codes to use if the user loses access to their second factor auth device. Each code can only be used once, you should use these codes to login and disable or reset 2FA for your account'\n    BaseTOTPConfig:\n      type: object\n      properties:\n        enabled:\n          type: boolean\n        config_name:\n          type: string\n          description: 'This name must be defined within the \"totp\" section of the SFTPGo configuration file. You will be unable to save a user/admin referencing a missing config_name'\n        secret:\n          $ref: '#/components/schemas/Secret'\n    AdminTOTPConfig:\n      allOf:\n        - $ref: '#/components/schemas/BaseTOTPConfig'\n    UserTOTPConfig:\n      allOf:\n        - $ref: '#/components/schemas/BaseTOTPConfig'\n        - type: object\n          properties:\n            protocols:\n              type: array\n              items:\n                $ref: '#/components/schemas/MFAProtocols'\n              description: 'TOTP will be required for the specified protocols. SSH protocol (SFTP/SCP/SSH commands) will ask for the TOTP passcode if the client uses keyboard interactive authentication. FTP has no standard way to support two factor authentication, if you enable the FTP support, you have to add the TOTP passcode after the password. For example if your password is \"password\" and your one time passcode is \"123456\" you have to use \"password123456\" as password. WebDAV is not supported since each single request must be authenticated and a passcode cannot be reused.'\n    PatternsFilter:\n      type: object\n      properties:\n        path:\n          type: string\n          description: 'exposed virtual path, if no other specific filter is defined, the filter applies for sub directories too. For example if filters are defined for the paths \"/\" and \"/sub\" then the filters for \"/\" are applied for any file outside the \"/sub\" directory'\n        allowed_patterns:\n          type: array\n          items:\n            type: string\n          description: 'list of, case insensitive, allowed shell like patterns.'\n          example:\n            - '*.jpg'\n            - a*b?.png\n        denied_patterns:\n          type: array\n          items:\n            type: string\n          description: 'list of, case insensitive, denied shell like patterns. Denied patterns are evaluated before the allowed ones'\n          example:\n            - '*.zip'\n        deny_policy:\n          type: integer\n          enum:\n            - 0\n            - 1\n          description: |\n            Deny policies\n              * `0` - default policy. Denied files/directories matching the filters are visible in directory listing but cannot be uploaded/downloaded/overwritten/renamed\n              * `1` - deny policy hide. This policy applies the same restrictions as the default one and denied files/directories matching the filters will also be hidden in directory listing. This mode may cause performance issues for large directories\n    HooksFilter:\n      type: object\n      properties:\n        external_auth_disabled:\n          type: boolean\n          example: false\n          description: If true, the external auth hook, if defined, will not be executed\n        pre_login_disabled:\n          type: boolean\n          example: false\n          description: If true, the pre-login hook, if defined, will not be executed\n        check_password_disabled:\n          type: boolean\n          example: false\n          description: If true, the check password hook, if defined, will not be executed\n      description: User specific hook overrides\n    BandwidthLimit:\n      type: object\n      properties:\n        sources:\n          type: array\n          items:\n            type: string\n          description: 'Source networks in CIDR notation as defined in RFC 4632 and RFC 4291 for example `192.0.2.0/24` or `2001:db8::/32`. The limit applies if the defined networks contain the client IP'\n        upload_bandwidth:\n          type: integer\n          format: int32\n          description: 'Maximum upload bandwidth as KB/s, 0 means unlimited'\n        download_bandwidth:\n          type: integer\n          format: int32\n          description: 'Maximum download bandwidth as KB/s, 0 means unlimited'\n    DataTransferLimit:\n      type: object\n      properties:\n        sources:\n          type: array\n          items:\n            type: string\n          description: 'Source networks in CIDR notation as defined in RFC 4632 and RFC 4291 for example `192.0.2.0/24` or `2001:db8::/32`. The limit applies if the defined networks contain the client IP'\n        upload_data_transfer:\n          type: integer\n          description: 'Maximum data transfer allowed for uploads as MB. 0 means no limit'\n        download_data_transfer:\n          type: integer\n          description: 'Maximum data transfer allowed for downloads as MB. 0 means no limit'\n        total_data_transfer:\n          type: integer\n          description: 'Maximum total data transfer as MB. 0 means unlimited. You can set a total data transfer instead of the individual values for uploads and downloads'\n    BaseUserFilters:\n      type: object\n      properties:\n        allowed_ip:\n          type: array\n          items:\n            type: string\n          description: 'only clients connecting from these IP/Mask are allowed. IP/Mask must be in CIDR notation as defined in RFC 4632 and RFC 4291, for example \"192.0.2.0/24\" or \"2001:db8::/32\"'\n          example:\n            - 192.0.2.0/24\n            - '2001:db8::/32'\n        denied_ip:\n          type: array\n          items:\n            type: string\n          description: clients connecting from these IP/Mask are not allowed. Denied rules are evaluated before allowed ones\n          example:\n            - 172.16.0.0/16\n        denied_login_methods:\n          type: array\n          items:\n            $ref: '#/components/schemas/LoginMethods'\n          description: if null or empty any available login method is allowed\n        denied_protocols:\n          type: array\n          items:\n            $ref: '#/components/schemas/SupportedProtocols'\n          description: if null or empty any available protocol is allowed\n        file_patterns:\n          type: array\n          items:\n            $ref: '#/components/schemas/PatternsFilter'\n          description: 'filters based on shell like file patterns. These restrictions do not apply to files listing for performance reasons, so a denied file cannot be downloaded/overwritten/renamed but it will still be in the list of files. Please note that these restrictions can be easily bypassed'\n        max_upload_file_size:\n          type: integer\n          format: int64\n          description: 'maximum allowed size, as bytes, for a single file upload. The upload will be aborted if/when the size of the file being sent exceeds this limit. 0 means unlimited. This restriction does not apply for SSH system commands such as `git` and `rsync`'\n        tls_username:\n          type: string\n          enum:\n            - None\n            - CommonName\n          description: 'defines the TLS certificate field to use as username. For FTP clients it must match the name provided using the \"USER\" command. For WebDAV, if no username is provided, the CN will be used as username. For WebDAV clients it must match the implicit or provided username. Ignored if mutual TLS is disabled'\n        hooks:\n          $ref: '#/components/schemas/HooksFilter'\n        disable_fs_checks:\n          type: boolean\n          example: false\n          description: Disable checks for existence and automatic creation of home directory and virtual folders. SFTPGo requires that the user's home directory, virtual folder root, and intermediate paths to virtual folders exist to work properly. If you already know that the required directories exist, disabling these checks will speed up login. You could, for example, disable these checks after the first login\n        web_client:\n          type: array\n          items:\n            $ref: '#/components/schemas/WebClientOptions'\n          description: WebClient/user REST API related configuration options\n        allow_api_key_auth:\n          type: boolean\n          description: 'API key authentication allows to impersonate this user with an API key'\n        user_type:\n          $ref: '#/components/schemas/UserType'\n        bandwidth_limits:\n          type: array\n          items:\n            $ref: '#/components/schemas/BandwidthLimit'\n        data_transfer_limits:\n          type: array\n          items:\n            $ref: '#/components/schemas/DataTransferLimit'\n        external_auth_cache_time:\n          type: integer\n          description: 'Defines the cache time, in seconds, for users authenticated using an external auth hook. 0 means no cache'\n        start_directory:\n          type: string\n          description: 'Specifies an alternate starting directory. If not set, the default is \"/\". This option is supported for SFTP/SCP, FTP and HTTP (WebClient/REST API) protocols. Relative paths will use this directory as base.'\n        2fa_protocols:\n          type: array\n          items:\n            $ref: '#/components/schemas/MFAProtocols'\n          description: 'Defines protocols that require two factor authentication'\n      description: Additional user options\n    UserFilters:\n      allOf:\n        - $ref: '#/components/schemas/BaseUserFilters'\n        - type: object\n          properties:\n            totp_config:\n              $ref: '#/components/schemas/UserTOTPConfig'\n            recovery_codes:\n              type: array\n              items:\n                $ref: '#/components/schemas/RecoveryCode'\n    Secret:\n      type: object\n      properties:\n        status:\n          type: string\n          enum:\n            - Plain\n            - AES-256-GCM\n            - Secretbox\n            - GCP\n            - AWS\n            - VaultTransit\n            - AzureKeyVault\n            - Redacted\n          description: 'Set to \"Plain\" to add or update an existing secret, set to \"Redacted\" to preserve the existing value'\n        payload:\n          type: string\n        key:\n          type: string\n        additional_data:\n          type: string\n        mode:\n          type: integer\n          description: 1 means encrypted using a master key\n      description: The secret is encrypted before saving, so to set a new secret you must provide a payload and set the status to \"Plain\". The encryption key and additional data will be generated automatically. If you set the status to \"Redacted\" the existing secret will be preserved\n    S3Config:\n      type: object\n      properties:\n        bucket:\n          type: string\n          minLength: 1\n        region:\n          type: string\n          minLength: 1\n        access_key:\n          type: string\n        access_secret:\n          $ref: '#/components/schemas/Secret'\n        role_arn:\n          type: string\n          description: 'Optional IAM Role ARN to assume'\n        endpoint:\n          type: string\n          description: optional endpoint\n        storage_class:\n          type: string\n        acl:\n          type: string\n          description: 'The canned ACL to apply to uploaded objects. Leave empty to use the default ACL. For more information and available ACLs, see here: https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl'\n        upload_part_size:\n          type: integer\n          description: 'the buffer size (in MB) to use for multipart uploads. The minimum allowed part size is 5MB, and if this value is set to zero, the default value (5MB) for the AWS SDK will be used. The minimum allowed value is 5.'\n        upload_concurrency:\n          type: integer\n          description: 'the number of parts to upload in parallel. If this value is set to zero, the default value (5) will be used'\n        upload_part_max_time:\n          type: integer\n          description: 'the maximum time allowed, in seconds, to upload a single chunk (the chunk size is defined via \"upload_part_size\"). 0 means no timeout'\n        download_part_size:\n          type: integer\n          description: 'the buffer size (in MB) to use for multipart downloads. The minimum allowed part size is 5MB, and if this value is set to zero, the default value (5MB) for the AWS SDK will be used. The minimum allowed value is 5. Ignored for partial downloads'\n        download_concurrency:\n          type: integer\n          description: 'the number of parts to download in parallel. If this value is set to zero, the default value (5) will be used. Ignored for partial downloads'\n        download_part_max_time:\n          type: integer\n          description: 'the maximum time allowed, in seconds, to download a single chunk (the chunk size is defined via \"download_part_size\"). 0 means no timeout. Ignored for partial downloads.'\n        force_path_style:\n          type: boolean\n          description: 'Set this to \"true\" to force the request to use path-style addressing, i.e., \"http://s3.amazonaws.com/BUCKET/KEY\". By default, the S3 client will use virtual hosted bucket addressing when possible (\"http://BUCKET.s3.amazonaws.com/KEY\")'\n        key_prefix:\n          type: string\n          description: 'key_prefix is similar to a chroot directory for a local filesystem. If specified the user will only see contents that starts with this prefix and so you can restrict access to a specific virtual folder. The prefix, if not empty, must not start with \"/\" and must end with \"/\". If empty the whole bucket contents will be available'\n          example: folder/subfolder/\n      description: S3 Compatible Object Storage configuration details\n    GCSConfig:\n      type: object\n      properties:\n        bucket:\n          type: string\n          minLength: 1\n        credentials:\n          $ref: '#/components/schemas/Secret'\n        automatic_credentials:\n          type: integer\n          enum:\n            - 0\n            - 1\n          description: |\n            Automatic credentials:\n              * `0` - disabled, explicit credentials, using a JSON credentials file, must be provided. This is the default value if the field is null\n              * `1` - enabled, we try to use the Application Default Credentials (ADC) strategy to find your application's credentials\n        storage_class:\n          type: string\n        acl:\n          type: string\n          description: 'The ACL to apply to uploaded objects. Leave empty to use the default ACL. For more information and available ACLs, refer to the JSON API here: https://cloud.google.com/storage/docs/access-control/lists#predefined-acl'\n        key_prefix:\n          type: string\n          description: 'key_prefix is similar to a chroot directory for a local filesystem. If specified the user will only see contents that starts with this prefix and so you can restrict access to a specific virtual folder. The prefix, if not empty, must not start with \"/\" and must end with \"/\". If empty the whole bucket contents will be available'\n          example: folder/subfolder/\n      description: 'Google Cloud Storage configuration details. The \"credentials\" field must be populated only when adding/updating a user. It will be always omitted, since there are sensitive data, when you search/get users'\n    AzureBlobFsConfig:\n      type: object\n      properties:\n        container:\n          type: string\n        account_name:\n          type: string\n          description: 'Storage Account Name, leave blank to use SAS URL'\n        account_key:\n          $ref: '#/components/schemas/Secret'\n        sas_url:\n          $ref: '#/components/schemas/Secret'\n        endpoint:\n          type: string\n          description: 'optional endpoint. Default is \"blob.core.windows.net\". If you use the emulator the endpoint must include the protocol, for example \"http://127.0.0.1:10000\"'\n        upload_part_size:\n          type: integer\n          description: 'the buffer size (in MB) to use for multipart uploads. If this value is set to zero, the default value (5MB) will be used.'\n        upload_concurrency:\n          type: integer\n          description: 'the number of parts to upload in parallel. If this value is set to zero, the default value (5) will be used'\n        download_part_size:\n          type: integer\n          description: 'the buffer size (in MB) to use for multipart downloads. If this value is set to zero, the default value (5MB) will be used.'\n        download_concurrency:\n          type: integer\n          description: 'the number of parts to download in parallel. If this value is set to zero, the default value (5) will be used'\n        access_tier:\n          type: string\n          enum:\n            - ''\n            - Archive\n            - Hot\n            - Cool\n        key_prefix:\n          type: string\n          description: 'key_prefix is similar to a chroot directory for a local filesystem. If specified the user will only see contents that starts with this prefix and so you can restrict access to a specific virtual folder. The prefix, if not empty, must not start with \"/\" and must end with \"/\". If empty the whole container contents will be available'\n          example: folder/subfolder/\n        use_emulator:\n          type: boolean\n      description: Azure Blob Storage configuration details\n    CryptFsConfig:\n      type: object\n      properties:\n        passphrase:\n          $ref: '#/components/schemas/Secret'\n      description: Crypt filesystem configuration details\n    SFTPFsConfig:\n      type: object\n      properties:\n        endpoint:\n          type: string\n          description: 'remote SFTP endpoint as host:port'\n        username:\n          type: string\n          description: you can specify a password or private key or both. In the latter case the private key will be tried first.\n        password:\n          $ref: '#/components/schemas/Secret'\n        private_key:\n          $ref: '#/components/schemas/Secret'\n        key_passphrase:\n          $ref: '#/components/schemas/Secret'\n        fingerprints:\n          type: array\n          items:\n            type: string\n          description: 'SHA256 fingerprints to use for host key verification. If you don''t provide any fingerprint the remote host key will not be verified, this is a security risk'\n        prefix:\n          type: string\n          description: Specifying a prefix you can restrict all operations to a given path within the remote SFTP server.\n        disable_concurrent_reads:\n          type: boolean\n          description: Concurrent reads are safe to use and disabling them will degrade performance. Some servers automatically delete files once they are downloaded. Using concurrent reads is problematic with such servers.\n        buffer_size:\n          type: integer\n          minimum: 0\n          maximum: 16\n          example: 2\n          description: The size of the buffer (in MB) to use for transfers. By enabling buffering, the reads and writes, from/to the remote SFTP server, are split in multiple concurrent requests and this allows data to be transferred at a faster rate, over high latency networks, by overlapping round-trip times. With buffering enabled, resuming uploads is not supported and a file cannot be opened for both reading and writing at the same time. 0 means disabled.\n    FilesystemConfig:\n      type: object\n      properties:\n        provider:\n          $ref: '#/components/schemas/FsProviders'\n        s3config:\n          $ref: '#/components/schemas/S3Config'\n        gcsconfig:\n          $ref: '#/components/schemas/GCSConfig'\n        azblobconfig:\n          $ref: '#/components/schemas/AzureBlobFsConfig'\n        cryptconfig:\n          $ref: '#/components/schemas/CryptFsConfig'\n        sftpconfig:\n          $ref: '#/components/schemas/SFTPFsConfig'\n      description: Storage filesystem details\n    BaseVirtualFolder:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int32\n          minimum: 1\n        name:\n          type: string\n          description: unique name for this virtual folder\n        mapped_path:\n          type: string\n          description: absolute filesystem path to use as virtual folder\n        description:\n          type: string\n          description: optional description\n        used_quota_size:\n          type: integer\n          format: int64\n        used_quota_files:\n          type: integer\n          format: int32\n        last_quota_update:\n          type: integer\n          format: int64\n          description: Last quota update as unix timestamp in milliseconds\n        users:\n          type: array\n          items:\n            type: string\n          description: list of usernames associated with this virtual folder\n        filesystem:\n          $ref: '#/components/schemas/FilesystemConfig'\n      description: 'Defines the filesystem for the virtual folder and the used quota limits. The same folder can be shared among multiple users and each user can have different quota limits or a different virtual path.'\n    VirtualFolder:\n      allOf:\n        - $ref: '#/components/schemas/BaseVirtualFolder'\n        - type: object\n          properties:\n            virtual_path:\n              type: string\n            quota_size:\n              type: integer\n              format: int64\n              description: 'Quota as size in bytes. 0 means unlimited, -1 means included in user quota. Please note that quota is updated if files are added/removed via SFTPGo otherwise a quota scan or a manual quota update is needed'\n            quota_files:\n              type: integer\n              format: int32\n              description: 'Quota as number of files. 0 means unlimited, , -1 means included in user quota. Please note that quota is updated if files are added/removed via SFTPGo otherwise a quota scan or a manual quota update is needed'\n          required:\n            - virtual_path\n      description: 'A virtual folder is a mapping between a SFTPGo virtual path and a filesystem path outside the user home directory. The specified paths must be absolute and the virtual path cannot be \"/\", it must be a sub directory. The parent directory for the specified virtual path must exist. SFTPGo will try to automatically create any missing parent directory for the configured virtual folders at user login.'\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int32\n          minimum: 1\n        status:\n          type: integer\n          enum:\n            - 0\n            - 1\n          description: |\n            status:\n              * `0` user is disabled, login is not allowed\n              * `1` user is enabled\n        username:\n          type: string\n          description: username is unique\n        email:\n          type: string\n          format: email\n        description:\n          type: string\n          description: 'optional description, for example the user full name'\n        expiration_date:\n          type: integer\n          format: int64\n          description: expiration date as unix timestamp in milliseconds. An expired account cannot login. 0 means no expiration\n        password:\n          type: string\n          format: password\n          description: password or public key/SSH user certificate are mandatory. If the password has no known hashing algo prefix it will be stored, by default, using bcrypt, argon2id is supported too. You can send a password hashed as bcrypt ($2a$ prefix), argon2id, pbkdf2 or unix crypt and it will be stored as is. For security reasons this field is omitted when you search/get users\n        public_keys:\n          type: array\n          items:\n            type: string\n            example: ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEUWwDwEWhTbF0MqAsp/oXK1HR2cElhM8oo1uVmL3ZeDKDiTm4ljMr92wfTgIGDqIoxmVqgYIkAOAhuykAVWBzc= user@host\n          description: Public keys in OpenSSH format. A password or at least one public key/SSH user certificate are mandatory.\n        home_dir:\n          type: string\n          description: path to the user home directory. The user cannot upload or download files outside this directory. SFTPGo tries to automatically create this folder if missing. Must be an absolute path\n        virtual_folders:\n          type: array\n          items:\n            $ref: '#/components/schemas/VirtualFolder'\n          description: mapping between virtual SFTPGo paths and virtual folders. If one or more of the specified folders are not inside the dataprovider they will be automatically created. You have to create the folder on the filesystem yourself\n        uid:\n          type: integer\n          format: int32\n          minimum: 0\n          maximum: 2147483647\n          description: 'if you run SFTPGo as root user, the created files and directories will be assigned to this uid. 0 means no change, the owner will be the user that runs SFTPGo. Ignored on windows'\n        gid:\n          type: integer\n          format: int32\n          minimum: 0\n          maximum: 2147483647\n          description: 'if you run SFTPGo as root user, the created files and directories will be assigned to this gid. 0 means no change, the group will be the one of the user that runs SFTPGo. Ignored on windows'\n        max_sessions:\n          type: integer\n          format: int32\n          description: Limit the sessions that a user can open. 0 means unlimited\n        quota_size:\n          type: integer\n          format: int64\n          description: Quota as size in bytes. 0 means unlimited. Please note that quota is updated if files are added/removed via SFTPGo otherwise a quota scan or a manual quota update is needed\n        quota_files:\n          type: integer\n          format: int32\n          description: Quota as number of files. 0 means unlimited. Please note that quota is updated if files are added/removed via SFTPGo otherwise a quota scan or a manual quota update is needed\n        permissions:\n          type: object\n          items:\n            $ref: '#/components/schemas/DirPermissions'\n          minItems: 1\n          example:\n            /:\n              - '*'\n            /somedir:\n              - list\n              - download\n        used_quota_size:\n          type: integer\n          format: int64\n        used_quota_files:\n          type: integer\n          format: int32\n        last_quota_update:\n          type: integer\n          format: int64\n          description: Last quota update as unix timestamp in milliseconds\n        upload_bandwidth:\n          type: integer\n          description: 'Maximum upload bandwidth as KB/s, 0 means unlimited'\n        download_bandwidth:\n          type: integer\n          description: 'Maximum download bandwidth as KB/s, 0 means unlimited'\n        upload_data_transfer:\n          type: integer\n          description: 'Maximum data transfer allowed for uploads as MB. 0 means no limit'\n        download_data_transfer:\n          type: integer\n          description: 'Maximum data transfer allowed for downloads as MB. 0 means no limit'\n        total_data_transfer:\n          type: integer\n          description: 'Maximum total data transfer as MB. 0 means unlimited. You can set a total data transfer instead of the individual values for uploads and downloads'\n        used_upload_data_transfer:\n          type: integer\n          description: 'Uploaded size, as bytes, since the last reset'\n        used_download_data_transfer:\n          type: integer\n          description: 'Downloaded size, as bytes, since the last reset'\n        created_at:\n          type: integer\n          format: int64\n          description: 'creation time as unix timestamp in milliseconds. It will be 0 for users created before v2.2.0'\n        updated_at:\n          type: integer\n          format: int64\n          description: last update time as unix timestamp in milliseconds\n        last_login:\n          type: integer\n          format: int64\n          description: Last user login as unix timestamp in milliseconds. It is saved at most once every 10 minutes\n        filters:\n          $ref: '#/components/schemas/UserFilters'\n        filesystem:\n          $ref: '#/components/schemas/FilesystemConfig'\n        additional_info:\n          type: string\n          description: Free form text field for external systems\n        groups:\n          type: array\n          items:\n            $ref: '#/components/schemas/GroupMapping'\n        oidc_custom_fields:\n          type: object\n          additionalProperties: true\n          description: 'This field is passed to the pre-login hook if custom OIDC token fields have been configured. Field values can be of any type (this is a free form object) and depend on the type of the configured OIDC token fields'\n    AdminFilters:\n      type: object\n      properties:\n        allow_list:\n          type: array\n          items:\n            type: string\n          description: 'only clients connecting from these IP/Mask are allowed. IP/Mask must be in CIDR notation as defined in RFC 4632 and RFC 4291, for example \"192.0.2.0/24\" or \"2001:db8::/32\"'\n          example:\n            - 192.0.2.0/24\n            - '2001:db8::/32'\n        allow_api_key_auth:\n          type: boolean\n          description: 'API key auth allows to impersonate this administrator with an API key'\n        totp_config:\n          $ref: '#/components/schemas/AdminTOTPConfig'\n        recovery_codes:\n          type: array\n          items:\n            $ref: '#/components/schemas/RecoveryCode'\n    Admin:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int32\n          minimum: 1\n        status:\n          type: integer\n          enum:\n            - 0\n            - 1\n          description: |\n            status:\n              * `0` user is disabled, login is not allowed\n              * `1` user is enabled\n        username:\n          type: string\n          description: username is unique\n        description:\n          type: string\n          description: 'optional description, for example the admin full name'\n        password:\n          type: string\n          format: password\n          description: Admin password. For security reasons this field is omitted when you search/get admins\n        email:\n          type: string\n          format: email\n        permissions:\n          type: array\n          items:\n            $ref: '#/components/schemas/AdminPermissions'\n        filters:\n          $ref: '#/components/schemas/AdminFilters'\n        additional_info:\n          type: string\n          description: Free form text field\n        created_at:\n          type: integer\n          format: int64\n          description: 'creation time as unix timestamp in milliseconds. It will be 0 for admins created before v2.2.0'\n        updated_at:\n          type: integer\n          format: int64\n          description: last update time as unix timestamp in milliseconds\n        last_login:\n          type: integer\n          format: int64\n          description: Last user login as unix timestamp in milliseconds. It is saved at most once every 10 minutes\n    AdminProfile:\n      type: object\n      properties:\n        email:\n          type: string\n          format: email\n        description:\n          type: string\n        allow_api_key_auth:\n          type: boolean\n          description: 'If enabled, you can impersonate this admin, in REST API, using an API key. If disabled admin credentials are required for impersonation'\n    UserProfile:\n      type: object\n      properties:\n        email:\n          type: string\n          format: email\n        description:\n          type: string\n        allow_api_key_auth:\n          type: boolean\n          description: 'If enabled, you can impersonate this user, in REST API, using an API key. If disabled user credentials are required for impersonation'\n        public_keys:\n          type: array\n          items:\n            type: string\n            example: ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEUWwDwEWhTbF0MqAsp/oXK1HR2cElhM8oo1uVmL3ZeDKDiTm4ljMr92wfTgIGDqIoxmVqgYIkAOAhuykAVWBzc= user@host\n            description: Public keys in OpenSSH format\n    APIKey:\n      type: object\n      properties:\n        id:\n          type: string\n          description: unique key identifier\n        name:\n          type: string\n          description: User friendly key name\n        key:\n          type: string\n          format: password\n          description: We store the hash of the key. This is just like a password. For security reasons this field is omitted when you search/get API keys\n        scope:\n          $ref: '#/components/schemas/APIKeyScope'\n        created_at:\n          type: integer\n          format: int64\n          description: creation time as unix timestamp in milliseconds\n        updated_at:\n          type: integer\n          format: int64\n          description: last update time as unix timestamp in milliseconds\n        last_use_at:\n          type: integer\n          format: int64\n          description: last use time as unix timestamp in milliseconds. It is saved at most once every 10 minutes\n        expires_at:\n          type: integer\n          format: int64\n          description: expiration time as unix timestamp in milliseconds\n        description:\n          type: string\n          description: optional description\n        user:\n          type: string\n          description: username associated with this API key. If empty and the scope is \"user scope\" the key can impersonate any user\n        admin:\n          type: string\n          description: admin associated with this API key. If empty and the scope is \"admin scope\" the key can impersonate any admin\n    QuotaUsage:\n      type: object\n      properties:\n        used_quota_size:\n          type: integer\n          format: int64\n        used_quota_files:\n          type: integer\n          format: int32\n    TransferQuotaUsage:\n      type: object\n      properties:\n        used_upload_data_transfer:\n          type: integer\n          format: int64\n          description: 'The value must be specified as bytes'\n        used_download_data_transfer:\n          type: integer\n          format: int64\n          description: 'The value must be specified as bytes'\n    Transfer:\n      type: object\n      properties:\n        operation_type:\n          type: string\n          enum:\n            - upload\n            - download\n          description: |\n            Operations:\n              * `upload`\n              * `download`\n        path:\n          type: string\n          description: file path for the upload/download\n        start_time:\n          type: integer\n          format: int64\n          description: start time as unix timestamp in milliseconds\n        size:\n          type: integer\n          format: int64\n          description: bytes transferred\n    ConnectionStatus:\n      type: object\n      properties:\n        username:\n          type: string\n          description: connected username\n        connection_id:\n          type: string\n          description: unique connection identifier\n        client_version:\n          type: string\n          description: client version\n        remote_address:\n          type: string\n          description: Remote address for the connected client\n        connection_time:\n          type: integer\n          format: int64\n          description: connection time as unix timestamp in milliseconds\n        command:\n          type: string\n          description: Last SSH/FTP command or WebDAV method\n        last_activity:\n          type: integer\n          format: int64\n          description: last client activity as unix timestamp in milliseconds\n        protocol:\n          type: string\n          enum:\n            - SFTP\n            - SCP\n            - SSH\n            - FTP\n            - DAV\n        active_transfers:\n          type: array\n          items:\n            $ref: '#/components/schemas/Transfer'\n    FolderRetention:\n      type: object\n      properties:\n        path:\n          type: string\n          description: 'exposed virtual directory path, if no other specific retention is defined, the retention applies for sub directories too. For example if retention is defined for the paths \"/\" and \"/sub\" then the retention for \"/\" is applied for any file outside the \"/sub\" directory'\n          example: '/'\n        retention:\n          type: integer\n          description: retention time in hours. All the files with a modification time older than the defined value will be deleted. 0 means exclude this path\n          example: 24\n        delete_empty_dirs:\n          type: boolean\n          description: if enabled, empty directories will be deleted\n        ignore_user_permissions:\n          type: boolean\n          description: 'if enabled, files will be deleted even if the user does not have the delete permission. The default is \"false\" which means that files will be skipped if the user does not have permission to delete them. File patterns filters will always be silently ignored'\n    RetentionCheck:\n      type: object\n      properties:\n        username:\n          type: string\n          description: username to which the retention check refers\n        folders:\n          type: array\n          items:\n            $ref: '#/components/schemas/FolderRetention'\n        start_time:\n          type: integer\n          format: int64\n          description: check start time as unix timestamp in milliseconds\n        notifications:\n          type: array\n          items:\n            $ref: '#/components/schemas/RetentionCheckNotification'\n        email:\n          type: string\n          format: email\n          description: 'if the notification method is set to \"Email\", this is the e-mail address that receives the retention check report. This field is automatically set to the email address associated with the administrator starting the check'\n    MetadataCheck:\n      type: object\n      properties:\n        username:\n          type: string\n          description: username to which the check refers\n        start_time:\n          type: integer\n          format: int64\n          description: check start time as unix timestamp in milliseconds\n    QuotaScan:\n      type: object\n      properties:\n        username:\n          type: string\n          description: username to which the quota scan refers\n        start_time:\n          type: integer\n          format: int64\n          description: scan start time as unix timestamp in milliseconds\n    FolderQuotaScan:\n      type: object\n      properties:\n        name:\n          type: string\n          description: folder name to which the quota scan refers\n        start_time:\n          type: integer\n          format: int64\n          description: scan start time as unix timestamp in milliseconds\n    DefenderEntry:\n      type: object\n      properties:\n        id:\n          type: string\n        ip:\n          type: string\n        score:\n          type: integer\n          description: the score increases whenever a violation is detected, such as an attempt to log in using an incorrect password or invalid username. If the score exceeds the configured threshold, the IP is banned. Omitted for banned IPs\n        ban_time:\n          type: string\n          format: date-time\n          description: date time until the IP is banned. For already banned hosts, the ban time is increased each time a new violation is detected. Omitted if the IP is not banned\n    SSHHostKey:\n      type: object\n      properties:\n        path:\n          type: string\n        fingerprint:\n          type: string\n    SSHBinding:\n      type: object\n      properties:\n        address:\n          type: string\n          description: TCP address the server listen on\n        port:\n          type: integer\n          description: the port used for serving requests\n        apply_proxy_config:\n          type: boolean\n          description: 'apply the proxy configuration, if any'\n    WebDAVBinding:\n      type: object\n      properties:\n        address:\n          type: string\n          description: TCP address the server listen on\n        port:\n          type: integer\n          description: the port used for serving requests\n        enable_https:\n          type: boolean\n        min_tls_version:\n          $ref: '#/components/schemas/TLSVersions'\n        client_auth_type:\n          type: integer\n          description: 1 means that client certificate authentication is required in addition to HTTP basic authentication\n        tls_cipher_suites:\n          type: array\n          items:\n            type: string\n          description: 'List of supported cipher suites for TLS version 1.2. If empty  a default list of secure cipher suites is used, with a preference order based on hardware performance'\n        prefix:\n          type: string\n          description: 'Prefix for WebDAV resources, if empty WebDAV resources will be available at the `/` URI'\n        proxy_allowed:\n          type: array\n          items:\n            type: string\n          description: 'List of IP addresses and IP ranges allowed to set proxy headers'\n    PassiveIPOverride:\n      type: object\n      properties:\n        networks:\n          type: array\n          items:\n            type: string\n        ip:\n          type: string\n    FTPDBinding:\n      type: object\n      properties:\n        address:\n          type: string\n          description: TCP address the server listen on\n        port:\n          type: integer\n          description: the port used for serving requests\n        apply_proxy_config:\n          type: boolean\n          description: 'apply the proxy configuration, if any'\n        tls_mode:\n          type: integer\n          enum:\n            - 0\n            - 1\n            - 2\n          description: |\n            TLS mode:\n              * `0` - clear or explicit TLS\n              * `1` - explicit TLS required\n              * `2` - implicit TLS\n        min_tls_version:\n          $ref: '#/components/schemas/TLSVersions'\n        force_passive_ip:\n          type: string\n          description: External IP address to expose for passive connections\n        passive_ip_overrides:\n          type: array\n          items:\n            $ref: '#/components/schemas/PassiveIPOverride'\n        client_auth_type:\n          type: integer\n          description: 1 means that client certificate authentication is required in addition to FTP authentication\n        tls_cipher_suites:\n          type: array\n          items:\n            type: string\n          description: 'List of supported cipher suites for TLS version 1.2. If empty  a default list of secure cipher suites is used, with a preference order based on hardware performance'\n        passive_connections_security:\n          type: integer\n          enum:\n            - 0\n            - 1\n          description: |\n            Active connections security:\n              * `0` - require matching peer IP addresses of control and data connection\n              * `1` - disable any checks\n        active_connections_security:\n          type: integer\n          enum:\n            - 0\n            - 1\n          description: |\n            Active connections security:\n              * `0` - require matching peer IP addresses of control and data connection\n              * `1` - disable any checks\n        debug:\n          type: boolean\n          description: 'If enabled any FTP command will be logged'\n    SSHServiceStatus:\n      type: object\n      properties:\n        is_active:\n          type: boolean\n        bindings:\n          type: array\n          items:\n            $ref: '#/components/schemas/SSHBinding'\n          nullable: true\n        host_keys:\n          type: array\n          items:\n            $ref: '#/components/schemas/SSHHostKey'\n          nullable: true\n        ssh_commands:\n          type: array\n          items:\n            type: string\n        authentications:\n          type: array\n          items:\n            $ref: '#/components/schemas/SSHAuthentications'\n    FTPPassivePortRange:\n      type: object\n      properties:\n        start:\n          type: integer\n        end:\n          type: integer\n    FTPServiceStatus:\n      type: object\n      properties:\n        is_active:\n          type: boolean\n        bindings:\n          type: array\n          items:\n            $ref: '#/components/schemas/FTPDBinding'\n          nullable: true\n        passive_port_range:\n          $ref: '#/components/schemas/FTPPassivePortRange'\n    WebDAVServiceStatus:\n      type: object\n      properties:\n        is_active:\n          type: boolean\n        bindings:\n          type: array\n          items:\n            $ref: '#/components/schemas/WebDAVBinding'\n          nullable: true\n    DataProviderStatus:\n      type: object\n      properties:\n        is_active:\n          type: boolean\n        driver:\n          type: string\n        error:\n          type: string\n    MFAStatus:\n      type: object\n      properties:\n        is_active:\n          type: boolean\n        totp_configs:\n          type: array\n          items:\n            $ref: '#/components/schemas/TOTPConfig'\n    ServicesStatus:\n      type: object\n      properties:\n        ssh:\n          $ref: '#/components/schemas/SSHServiceStatus'\n        ftp:\n          $ref: '#/components/schemas/FTPServiceStatus'\n        webdav:\n          $ref: '#/components/schemas/WebDAVServiceStatus'\n        data_provider:\n          $ref: '#/components/schemas/DataProviderStatus'\n        defender:\n          type: object\n          properties:\n            is_active:\n              type: boolean\n        mfa:\n          $ref: '#/components/schemas/MFAStatus'\n    BanStatus:\n      type: object\n      properties:\n        date_time:\n          type: string\n          format: date-time\n          nullable: true\n          description: if null the host is not banned\n    ScoreStatus:\n      type: object\n      properties:\n        score:\n          type: integer\n          description: if 0 the host is not listed\n    Share:\n      type: object\n      properties:\n        id:\n          type: string\n          description: auto-generated unique share identifier\n        name:\n          type: string\n        description:\n          type: string\n          description: optional description\n        scope:\n          $ref: '#/components/schemas/ShareScope'\n        paths:\n          type: array\n          items:\n            type: string\n          description: 'paths to files or directories, for share scope write this array must contain exactly one directory. Paths will not be validated on save so you can also create them after creating the share'\n          example:\n            - '/dir1'\n            - '/dir2/file.txt'\n            - '/dir3/subdir'\n        username:\n          type: string\n        created_at:\n          type: integer\n          format: int64\n          description: 'creation time as unix timestamp in milliseconds'\n        updated_at:\n          type: integer\n          format: int64\n          description: 'last update time as unix timestamp in milliseconds'\n        last_use_at:\n          type: integer\n          format: int64\n          description: last use time as unix timestamp in milliseconds\n        expires_at:\n          type: integer\n          format: int64\n          description: 'optional share expiration, as unix timestamp in milliseconds. 0 means no expiration'\n        password:\n          type: string\n          description: 'optional password to protect the share. The special value \"[**redacted**]\" means that a password has been set, you can use this value if you want to preserve the current password when you update a share'\n        max_tokens:\n          type: integer\n          description: 'maximum allowed access tokens. 0 means no limit'\n        used_tokens:\n          type: integer\n        allow_from:\n          type: array\n          items:\n            type: string\n          description: 'Limit the share availability to these IP/Mask. IP/Mask must be in CIDR notation as defined in RFC 4632 and RFC 4291, for example \"192.0.2.0/24\" or \"2001:db8::/32\". An empty list means no restrictions'\n          example:\n            - 192.0.2.0/24\n            - '2001:db8::/32'\n    GroupUserSettings:\n      type: object\n      properties:\n        home_dir:\n          type: string\n        max_sessions:\n          type: integer\n          format: int32\n        quota_size:\n          type: integer\n          format: int64\n        quota_files:\n          type: integer\n          format: int32\n        permissions:\n          type: object\n          items:\n            $ref: '#/components/schemas/DirPermissions'\n          minItems: 1\n          example:\n            /:\n              - '*'\n            /somedir:\n              - list\n              - download\n        upload_bandwidth:\n          type: integer\n          description: 'Maximum upload bandwidth as KB/s'\n        download_bandwidth:\n          type: integer\n          description: 'Maximum download bandwidth as KB/s'\n        upload_data_transfer:\n          type: integer\n          description: 'Maximum data transfer allowed for uploads as MB'\n        download_data_transfer:\n          type: integer\n          description: 'Maximum data transfer allowed for downloads as MB'\n        total_data_transfer:\n          type: integer\n          description: 'Maximum total data transfer as MB'\n        filters:\n          $ref: '#/components/schemas/BaseUserFilters'\n    Group:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int32\n          minimum: 1\n        name:\n          type: string\n          description: name is unique\n        description:\n          type: string\n          description: 'optional description'\n        created_at:\n          type: integer\n          format: int64\n          description: creation time as unix timestamp in milliseconds\n        updated_at:\n          type: integer\n          format: int64\n          description: last update time as unix timestamp in milliseconds\n        user_settings:\n          $ref: '#/components/schemas/GroupUserSettings'\n        virtual_folders:\n          type: array\n          items:\n            $ref: '#/components/schemas/VirtualFolder'\n          description: mapping between virtual SFTPGo paths and folders\n        users:\n          type: array\n          items:\n            type: string\n          description: list of usernames associated with this group\n    GroupMapping:\n      type: object\n      properties:\n        name:\n          type: string\n          description: group name\n        type:\n          enum:\n            - 1\n            - 2\n          description: |\n            Group type:\n              * `1` - Primary group\n              * `2` - Secondaru group\n    BackupData:\n      type: object\n      properties:\n        users:\n          type: array\n          items:\n            $ref: '#/components/schemas/User'\n        folders:\n          type: array\n          items:\n            $ref: '#/components/schemas/BaseVirtualFolder'\n        groups:\n          type: array\n          items:\n            $ref: '#/components/schemas/Group'\n        admins:\n          type: array\n          items:\n            $ref: '#/components/schemas/Admin'\n        api_keys:\n          type: array\n          items:\n            $ref: '#/components/schemas/APIKey'\n        shares:\n          type: array\n          items:\n            $ref: '#/components/schemas/Share'\n        version:\n          type: integer\n    PwdChange:\n      type: object\n      properties:\n        current_password:\n          type: string\n        new_password:\n          type: string\n    DirEntry:\n      type: object\n      properties:\n        name:\n          type: string\n          description: name of the file (or subdirectory) described by the entry. This name is the final element of the path (the base name), not the entire path\n        size:\n          type: integer\n          format: int64\n          description: file size, omitted for folders and non regular files\n        mode:\n          type: integer\n          description: |\n            File mode and permission bits. More details here: https://golang.org/pkg/io/fs/#FileMode.\n            Let's see some examples:\n            - for a directory mode\u00262147483648 != 0\n            - for a symlink mode\u0026134217728 != 0\n            - for a regular file mode\u00262401763328 == 0\n        last_modified:\n          type: string\n          format: date-time\n    FsEvent:\n      type: object\n      properties:\n        id:\n          type: string\n        timestamp:\n          type: integer\n          format: int64\n          description: 'unix timestamp in nanoseconds'\n        action:\n          $ref: '#/components/schemas/FsEventAction'\n        username:\n          type: string\n        fs_path:\n          type: string\n        fs_target_path:\n          type: string\n        virtual_path:\n          type: string\n        virtual_target_path:\n          type: string\n        ssh_cmd:\n          type: string\n        file_size:\n          type: integer\n          format: int64\n        status:\n          $ref: '#/components/schemas/FsEventStatus'\n        protocol:\n          $ref: '#/components/schemas/EventProtocols'\n        ip:\n          type: string\n        session_id:\n          type: string\n        fs_provider:\n          $ref: '#/components/schemas/FsProviders'\n        bucket:\n          type: string\n        endpoint:\n          type: string\n        open_flags:\n          type: string\n        instance_id:\n          type: string\n    ProviderEvent:\n      type: object\n      properties:\n        id:\n          type: string\n        timestamp:\n          type: integer\n          format: int64\n          description: 'unix timestamp in nanoseconds'\n        action:\n          $ref: '#/components/schemas/ProviderEventAction'\n        username:\n          type: string\n        ip:\n          type: string\n        object_type:\n          $ref: '#/components/schemas/ProviderEventObjectType'\n        object_name:\n          type: string\n        instance_id:\n          type: string\n    ApiResponse:\n      type: object\n      properties:\n        message:\n          type: string\n          description: 'message, can be empty'\n        error:\n          type: string\n          description: error description if any\n    VersionInfo:\n      type: object\n      properties:\n        version:\n          type: string\n        build_date:\n          type: string\n        commit_hash:\n          type: string\n        features:\n          type: array\n          items:\n            type: string\n          description: 'Features for the current build. Available features are `portable`, `bolt`, `mysql`, `sqlite`, `pgsql`, `s3`, `gcs`, `metrics`. If a feature is available it has a `+` prefix, otherwise a `-` prefix'\n    Token:\n      type: object\n      properties:\n        access_token:\n          type: string\n        expires_at:\n          type: string\n          format: date-time\n  securitySchemes:\n    BasicAuth:\n      type: http\n      scheme: basic\n    BearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n    APIKeyAuth:\n      type: apiKey\n      in: header\n      name: X-SFTPGO-API-KEY\n      description: 'API key to use for authentication. API key authentication is intrinsically less secure than using a short lived JWT token. You should prefer API key authentication only for machine-to-machine communications in trusted environments. If no admin/user is associated to the provided key you need to add \".username\" at the end of the key. For example if your API key is \"6ajKLwswLccVBGpZGv596G.ySAXc8vtp9hMiwAuaLtzof\" and you want to impersonate the admin with username \"myadmin\" you have to use \"6ajKLwswLccVBGpZGv596G.ySAXc8vtp9hMiwAuaLtzof.myadmin\" as API key. When using API key authentication you cannot manage API keys, update the impersonated admin, change password or public keys for the impersonated user.'\n"
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"Group\": parse schema: property \"user_settings\": parse schema: resolve \"#/components/schemas/GroupUserSettings\": parse schema: property \"permissions\": parse schema: object cannot contain 'items' field"
}