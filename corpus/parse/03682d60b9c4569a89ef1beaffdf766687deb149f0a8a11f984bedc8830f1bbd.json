{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/bean-pod/switchboard"
		},
		"file": {
			"name": "api-spec.yaml",
			"size": 0,
			"path": "contracts/api-spec.yaml",
			"byteSize": 25409,
			"content": "openapi: 3.0.2\n\ninfo:\n  version: 1.0.0\n  title: 'Switchboard API'\n  description: 'API for the switchboard service'\n\nservers:\n  - url: http://localhost:8080/v1\n    description: Local Enviorment\n\npaths:\n  /log/{serialNumber}:\n    get:\n      operationId: retrieveDeviceLogs\n      description: Get a list of logs for a specific device\n      parameters:\n        - $ref: '#/components/parameters/DeviceSerialNumber'\n      responses:\n        '200':\n          description: Succesful retrieval of the device logs\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LogsModel'\n\n  /log/stream/{streamId}:\n    get:\n      operationId: retrieveStreamLogs\n      description: Get a list of logs for a specific stream\n      parameters:\n        - $ref: '#/components/parameters/StreamId'\n      responses:\n        '200':\n          description: Succesful retrieval of the stream logs\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StreamLogsModel'\n  /log/stream:\n    post:\n      operationId: createStreamLog\n      description: Create a stream log\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/createStreamLogRequest'\n      responses:\n        '200':\n          description: Successful creation of a stream log\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StreamLogModel'\n  /user/sign-up:\n    post:\n      operationId: sign-up\n      description: sign up a user\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserModel'\n      responses:\n        '200':\n          description: succesful persistance of user\n          content:\n            application/json:\n              schema:\n                type: string\n                example: 'User moh has been created successfully'\n\n  /log:\n    get:\n      operationId: retrieveAllLogs\n      description: Get a list of logs\n      responses:\n        '200':\n          description: Successful retrival of logs\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LogsModel'\n    post:\n      operationId: createLog\n      description: Create a log\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateLogRequest'\n      responses:\n        '200':\n          description: Successful creation of a log\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LogModel'\n  /device:\n    get:\n      operationId: retrieveAllDevices\n      description: Get a list of available devices\n      tags:\n        - Devices\n      responses:\n        '200':\n          description: Successful retrival of device list\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DevicesModel'\n    post:\n      operationId: createDevice\n      description: Create a new device\n      tags:\n        - Devices\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateDeviceRequest'\n      responses:\n        '200':\n          description: Successful creation of device\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DeviceModel'\n    put:\n      operationId: updateDevice\n      description: Update the properties of a device\n      tags:\n        - Devices\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DeviceModel'\n      responses:\n        '200':\n          description: Succesful update of the device\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DeviceModel'\n\n  /device/{serialNumber}:\n    get:\n      operationId: retrieveDevice\n      description: Retrieve a single device\n      parameters:\n        - $ref: '#/components/parameters/DeviceSerialNumber'\n      tags:\n        - Devices\n      responses:\n        '200':\n          description: Succesful retrieval of the device\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DeviceModel'\n    delete:\n      operationId: deleteDevice\n      description: Deletes a device from the database\n      parameters:\n        - $ref: '#/components/parameters/DeviceSerialNumber'\n      tags:\n        - Devices\n      responses:\n        '200':\n          description: Succesful deletion of the device\n          content:\n            application/json:\n              schema:\n                type: string\n                example: 'Device with serial number BtmC8ckj deleted'\n\n  /device/config/{serialNumber}:\n    put:\n      operationId: upload configuration\n      description: uploads a configuration file\n      parameters:\n        - $ref: '#/components/parameters/DeviceSerialNumber'\n      tags:\n        - Devices\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                configuration:\n                  type: string\n                  format: binary\n      responses:\n        '200':\n          description: successful upload of config file\n          content:\n            text/plain:\n              schema:\n                type: string\n                example: config file successfully uploaded\n\n  /encoder:\n    get:\n      operationId: retrieveAllEncoders\n      description: Get a list of available encoders\n      tags:\n        - Encoders\n      responses:\n        '200':\n          description: Successful retrieval of encoder list\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EncodersModel'\n    post:\n      operationId: createEncoder\n      description: Create a new encoder device\n      tags:\n        - Encoders\n      requestBody:\n        description: The serial number of the device which should be registered as an encoder\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/EncoderModel'\n      responses:\n        '200':\n          description: Successful creation the encoder\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EncoderModel'\n    put:\n      operationId: updateEncoder\n      description: Update a encoder's definition\n      tags:\n        - Encoders\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/EncoderModel'\n      responses:\n        '200':\n          description: Successful update of the Encoder\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EncoderModel'\n\n\n  /encoder/{serialNumber}:\n    get:\n      operationId: retrieveEncoder\n      description: Retrieve a specific encoder\n      tags:\n        - Encoders\n      parameters:\n        - $ref: '#/components/parameters/EncoderSerialNumber'\n      responses:\n        '200':\n          description: Successful retrieval of the encoder\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EncoderModel'\n    delete:\n      operationId: deleteEncoder\n      description: Delete a encoder\n      tags:\n        - Encoders\n      parameters:\n        - $ref: '#/components/parameters/EncoderSerialNumber'\n      responses:\n        '200':\n          description: Successful deletion of the encoder\n          content:\n            application/json:\n              schema:\n                type: string\n                example: 'Encoder with serial number BtmC8ckj deleted'\n\n  /encoder/{serialNumber}/stream:\n    get:\n      operationId: getEncoderStreams\n      description: Retrieve the sending streams for the encoder\n      tags:\n        - Encoders\n        - Streams\n      parameters:\n        - $ref: '#/components/parameters/EncoderSerialNumber'\n      responses:\n        '200':\n          description: Successful retrieval of video streams for an encoder\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/StreamModel'\n\n  /decoder:\n    get:\n      operationId: retrieveAllDecoders\n      description: Get a list of available decoders serial numbers\n      tags:\n        - Decoders\n      responses:\n        '200':\n          description: Successful retrieval of decoder list\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DecodersModel'\n    post:\n      operationId: createDecoder\n      description: Create a new decoder client\n      tags:\n        - Decoders\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DecoderModel'\n      responses:\n        '200':\n          description: Successful creation of the decoder\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DecoderModel'\n    put:\n      operationId: updateDecoder\n      description: Update a decoder's definition\n      tags:\n        - Decoders\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DecoderModel'\n      responses:\n        '200':\n          description: Successful update of the decoder\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DecoderModel'\n\n  /decoder/{serialNumber}:\n    get:\n      operationId: retrieveDecoder\n      description: Retrieve a specific decoder\n      tags:\n        - Decoders\n      parameters:\n        - $ref: '#/components/parameters/DecoderSerialNumber'\n      responses:\n        '200':\n          description: Successful retrieval of the decoder\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DecoderModel'\n    delete:\n      operationId: deleteDecoder\n      description: Delete a decoder\n      tags:\n        - Decoders\n      parameters:\n        - $ref: '#/components/parameters/DecoderSerialNumber'\n      responses:\n        '200':\n          description: Successful deletion of the decoder\n          content:\n            application/json:\n              schema:\n                type: string\n                example: 'Decoder with serial number BtmC8ckj deleted'\n\n  /decoder/{serialNumber}/stream:\n    get:\n      operationId: getDecoderStreams\n      description: Retrieve the sending streams for the decoder\n      tags:\n        - Decoders\n        - Streams\n      parameters:\n        - $ref: '#/components/parameters/DecoderSerialNumber'\n      responses:\n        '200':\n          description: Successful retrieval of video streams for a decoder\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/StreamModel'\n\n  /stream:\n    get:\n      operationId: getStreams\n      description: Retrieve all the existing streams\n      tags:\n        - Streams\n      responses:\n        '200':\n          description: Successful retrieval of video streams\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StreamsModel'\n    post:\n      operationId: createStream\n      description: Create a new stream between an input and output channel\n      tags:\n        - Streams\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateStreamRequest'\n      responses:\n        '200':\n          description: Successful creation of the stream\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StreamModel'\n    put:\n      operationId: updateStream\n      description: update a stream's definition\n      tags:\n        - Streams\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/StreamModel'\n      responses:\n        '200':\n          description: Successful update of the stream\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StreamModel'\n\n  /stream/{id}:\n    get:\n      operationId: getStreamById\n      description: Retrieve a stream's definition\n      tags:\n        - Streams\n      parameters:\n        - $ref: '#/components/parameters/StreamId'\n      responses:\n        '200':\n          description: Succesful retrieval of a stream\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StreamModel'\n    delete:\n      operationId: deleteStream\n      description: Delete a stream\n      tags:\n        - Streams\n      parameters:\n        - $ref: '#/components/parameters/StreamId'\n      responses:\n        '200':\n          description: Successful deletion of the stream\n\n  /stream/statistics/{id}:\n    get:\n      operationId: getStreamStatById\n      description: Retrieve a stream stat by id\n      tags:\n        - Streams\n      parameters:\n        - $ref: '#/components/parameters/StreamId'\n      responses:\n        '200':\n          description: Succesful retrievel of a stream stat\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StreamStatModel'\n\n  /stream/statistics:\n    get:\n      operationId: retrieveStreamStats\n      description: Retrieve all the existing stream statistics\n      tags:\n        - Streams\n      responses:\n        '200':\n          description: Successful retrieval of stream statistics\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StreamStatsModel'\n    put:\n      operationId: updateStreamStat\n      description: update a stream's stat\n      tags:\n        - Streams\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/StreamStatModel'\n      responses:\n        '200':\n          description: successful update of a stream stat\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StreamStatModel'\ncomponents:\n  schemas:\n    UserModel:\n      description: A user object\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: '123'\n        username:\n          type: string\n          example: 'moh@gmail.com'\n        password:\n          type: string\n          example: '123#rt.'\n        userRole:\n          type: string\n          enum:\n            - ADMIN\n            - USER\n            - SUPERUSER\n          example: 'ADMIN'\n\n    LogsModel:\n      description: A list of all logs\n      type: array\n      items:\n        $ref: '#/components/schemas/LogModel'\n\n    LogModel:\n      description: a log object\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: '123'\n        dateTime:\n          type: string\n          format: date-time\n        message:\n          type: string\n          example: 'A log message'\n        level:\n          type: string\n          example: 'info'\n        serialNumber:\n          type: string\n          example: '1,2'\n\n    CreateLogRequest:\n      description: A request to create a new log\n      properties:\n        dateTime:\n          type: string\n          pattern: '^\\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T(0[0-9]|1[0-9]|2[0-4])(\\+00:00)$'\n          example: '2021-02-04T08:21:23+00:00'\n        message:\n          type: string\n          example: 'A log message'\n        level:\n          type: string\n          example: 'info'\n        serialNumber:\n          type: string\n          example: '1xw1'\n\n    createStreamLogRequest:\n      description: A request to create a new stream log\n      properties:\n        streamId:\n          type: integer\n          example: '123'\n        message:\n          type: string\n          example: 'A log message'\n        dateTime:\n          type: string\n          pattern: '^\\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T(0[0-9]|1[0-9]|2[0-4])(\\+00:00)$'\n          example: '2021-02-04T08:21:23+00:00'\n        level:\n          type: string\n          example: 'info'\n\n    StreamLogModel:\n      description: stream log object\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: '123'\n        serialNumber:\n          type: string\n          example: '1rw1'\n        streamId:\n          type: integer\n          example: '123'\n        logEntity:\n          $ref: '#/components/schemas/LogModel'\n\n    StreamLogsModel:\n      description: A list of SteamLog objects\n      type: array\n      items:\n        $ref: '#/components/schemas/StreamLogModel'\n\n    DevicesModel:\n      description: A list of device serial numbers\n      type: array\n      items:\n        $ref: '#/components/schemas/DeviceModel'\n\n    DeviceModel:\n      description: A device thats either an  encoder or decoder\n      properties:\n        serialNumber:\n          type: string\n          example: 'BtmC8ckj'\n        publicIpAddress:\n          type: string\n          example: '178.156.52.3'\n        privateIpAddress:\n          type: string\n          example: '192.168.0.129'\n        displayName:\n          type: string\n          example: 'Device 1'\n        status:\n          type: string\n          example: 'running'\n        configurationInstance:\n          type: string\n          format: byte\n        configurationLastModified:\n          type: string\n          format: date-time\n\n    CreateDeviceRequest:\n      description: A request to create a new device\n      properties:\n        serialNumber:\n          type: string\n          example: 'BtmC8ckj'\n        privateIpAddress:\n          type: string\n          example: '192.168.0.129'\n        displayName:\n          type: string\n          example: 'Device 1'\n        status:\n          type: string\n          example: 'running'\n\n    EncodersModel:\n      description: A list of encoders registered to the service\n      type: array\n      items:\n        $ref: '#/components/schemas/EncoderModel'\n\n    EncoderModel:\n      description: A client that sends a video stream\n      properties:\n        serialNumber:\n          type: string\n          example: 'BtmC8ckj'\n        lastCommunication:\n          type: string\n          format: date-time\n          example: \"2017-07-21T17:32:28Z\"\n        device:\n          $ref: '#/components/schemas/DeviceModel'\n        output:\n          type: array\n          items:\n            $ref: '#/components/schemas/OutputChannelModel'\n\n    DecodersModel:\n      description: A list of decoder UUIDs\n      type: array\n      items:\n        $ref: '#/components/schemas/DecoderModel'\n\n    DecoderModel:\n      description: A client that receives a video stream\n      properties:\n        serialNumber:\n          type: string\n          example: 'v7BM3ejS'\n        lastCommunication:\n          type: string\n          format: date-time\n          example: \"2017-07-21T17:32:28Z\"\n        device:\n          $ref: '#/components/schemas/DeviceModel'\n        input:\n          type: array\n          items:\n            $ref: '#/components/schemas/InputChannelModel'\n\n    ChannelModel:\n      description: Parent for input and output channels\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: '123'\n        name:\n          type: string\n          example: 'box 2'\n        port:\n          type: integer\n          example: '2'\n\n    OutputChannelModel:\n      description: A channel through which an encoder outputs a video stream\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: '123'\n        channel:\n          $ref: '#/components/schemas/ChannelModel'\n        encoder:\n          $ref: '#/components/schemas/EncoderModel'\n\n    InputChannelModel:\n      description: A channel through which a decoder receives a video stream\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: '123'\n        channel:\n          $ref: '#/components/schemas/ChannelModel'\n        decoder:\n          $ref: '#/components/schemas/DecoderModel'\n\n    StreamModel:\n      description: A video stream connecting an input and output channel\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: '1234'\n        inputChannel:\n          $ref: '#/components/schemas/InputChannelModel'\n        outputChannel:\n          $ref: '#/components/schemas/OutputChannelModel'\n        isRendezvous:\n          description: Flag that indicates that the clients should use SRT's Rendezvous mode\n          type: boolean\n          example: true\n        startDate:\n          type: string\n          format: date-time\n\n    StreamsModel:\n      description: A list of stream IDs\n      type: array\n      items:\n        type: integer\n        format: int64\n      example: [ '1234' ]\n\n    StreamStatsModel:\n      description: A list of stream stats\n      type: array\n      items:\n        $ref: '#/components/schemas/StreamStatModel'\n\n    CreateStreamRequest:\n      description: An object to request the creation of a stream between an input and output channel\n      properties:\n        inputChannelId:\n          type: integer\n          format: int64\n          example: '1'\n        outputChannelId:\n          type: integer\n          format: int64\n          example: '2'\n\n    StreamStatModel:\n      description: A stat that is related to a specific stream\n      properties:\n        id:\n          type: integer\n          format: int64\n        time:\n          type: integer\n          format: int64\n        window:\n          $ref: '#/components/schemas/WindowStatModel'\n        link:\n          $ref: '#/components/schemas/LinkStatModel'\n        send:\n          $ref: '#/components/schemas/SendStatModel'\n        recv:\n          $ref: '#/components/schemas/RecvStatModel'\n\n    WindowStatModel:\n      description: A statistic related to a stream\n      properties:\n        flow:\n          type: integer\n          format: int64\n        congestion:\n          type: integer\n          format: int64\n        flight:\n          type: integer\n          format: int64\n\n    LinkStatModel:\n      description: A statistic related to a stream\n      properties:\n        rtt:\n          type: number\n        bandwidth:\n          type: number\n        maxBandwidth:\n          type: integer\n          format: int64\n\n    SendStatModel:\n      description: A statistic related to a stream\n      properties:\n        packets:\n          type: integer\n          format: int64\n        packetsLost:\n          type: integer\n          format: int64\n        packetsDropped:\n          type: integer\n          format: int64\n        packetsRetransmitted:\n          type: integer\n          format: int64\n        bytes:\n          type: integer\n          format: int64\n        bytesDropped:\n          type: integer\n          format: int64\n        mbitRate:\n          type: number\n\n    RecvStatModel:\n      description: A statistic related to a stream\n      properties:\n        packets:\n          type: integer\n          format: int64\n        packetsLost:\n          type: integer\n          format: int64\n        packetsDropped:\n          type: integer\n          format: int64\n        packetsRetransmitted:\n          type: integer\n          format: int64\n        packetsBelated:\n          type: integer\n          format: int64\n        bytes:\n          type: integer\n          format: int64\n        bytesLost:\n          type: integer\n          format: int64\n        bytesDropped:\n          type: integer\n          format: int64\n        mbitRate:\n          type: number\n\n  parameters:\n    DeviceSerialNumber:\n      in: path\n      name: serialNumber\n      required: true\n      description: The serial number of the device\n      schema:\n        type: string\n        example: 'BtmC8ckj'\n    EncoderSerialNumber:\n      in: path\n      name: serialNumber\n      required: true\n      description: The serial number of an encoder\n      schema:\n        type: string\n        example: 'BtmC8ckj'\n    DecoderSerialNumber:\n      in: path\n      name: serialNumber\n      required: true\n      description: The serial number of a decoder\n      schema:\n        type: string\n        example: 'v7BM3ejS'\n    StreamId:\n      in: path\n      name: id\n      required: true\n      description: The ID of a stream\n      schema:\n        type: integer\n        format: int64\n        example: '1234'\n\ntags:\n  - name: Devices\n    description: Devices endpoints\n  - name: Encoders\n    description: Encoders endpoints\n  - name: Decoders\n    description: Decoders endpoints\n  - name: Stream\n    description: Streams endpoints\n",
			"canonicalURL": "/github.com/bean-pod/switchboard@8600b8cb2548ecd7ed3c2e89f9b40ace74af73ed/-/blob/contracts/api-spec.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/bean-pod/switchboard/blob/8600b8cb2548ecd7ed3c2e89f9b40ace74af73ed/contracts/api-spec.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/log/stream/{streamId}\": get: operation \"retrieveStreamLogs\": at 1:15985: parse path \"/log/stream/{streamId}\": path parameter not specified: \"streamId\""
}