{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/plantbreeding/BrAPI"
		},
		"file": {
			"name": "Observations_GET_POST_PUT.yaml",
			"size": 0,
			"path": "Specification/BrAPI-Phenotyping/Observations/Observations_GET_POST_PUT.yaml",
			"byteSize": 8371,
			"content": "info:\n  title: BrAPI\n  version: ''\nopenapi: 3.0.0\npaths:\n  /observations:\n    get:\n      summary: Get a filtered set of Observations \n      description: |-\n        Retrieve all observations where there are measurements for the given observation variables.\n\n        observationTimestamp should be ISO8601 format with timezone -\u003e YYYY-MM-DDThh:mm:ss+hhmm\n      parameters:\n      - description: The unique ID of an Observation\n        in: query\n        name: observationDbId\n        required: false\n        schema:\n          type: string\n      - description: The unique ID of an Observation Unit\n        in: query\n        name: observationUnitDbId\n        required: false\n        schema:\n          type: string\n      - description: The unique ID of a germplasm (accession) to filter on\n        in: query\n        name: germplasmDbId\n        required: false\n        schema:\n          type: string\n      - description: The unique ID of an observation variable\n        in: query\n        name: observationVariableDbId\n        required: false\n        schema:\n          type: string\n      - description: The unique ID of a studies to filter on\n        in: query\n        name: studyDbId\n        required: false\n        schema:\n          type: string\n      - description: The unique ID of a location where these observations were collected\n        in: query\n        name: locationDbId\n        required: false\n        schema:\n          type: string\n      - description: The unique ID of a trial to filter on\n        in: query\n        name: trialDbId\n        required: false\n        schema:\n          type: string\n      - description: The unique ID of a program to filter on\n        in: query\n        name: programDbId\n        required: false\n        schema:\n          type: string\n      - description: The year or Phenotyping campaign of a multi-annual study (trees, grape, ...)\n        in: query\n        name: seasonDbId\n        required: false\n        schema:\n          type: string\n      - description: The Observation Unit Level. Returns only the observation unit of the specified Level. References ObservationUnit-\u003eobservationUnitPosition-\u003eobservationLevel-\u003elevelName\n        in: query\n        name: observationUnitLevelName\n        required: false\n        schema:\n          type: string\n      - description: The Observation Unit Level Order Number. Returns only the observation unit of the specified Level. References ObservationUnit-\u003eobservationUnitPosition-\u003eobservationLevel-\u003elevelOrder\n        in: query\n        name: observationUnitLevelOrder\n        required: false\n        schema:\n          type: string\n      - description: The Observation Unit Level Code. This parameter should be used together with `observationUnitLevelName` or `observationUnitLevelOrder`. References ObservationUnit-\u003eobservationUnitPosition-\u003eobservationLevel-\u003elevelCode\n        in: query\n        name: observationUnitLevelCode\n        required: false\n        schema:\n          type: string\n      - description: Timestamp range start\n        in: query\n        name: observationTimeStampRangeStart\n        required: false\n        schema:\n          format: date-time\n          type: string\n      - description: Timestamp range end\n        in: query\n        name: observationTimeStampRangeEnd\n        required: false\n        schema:\n          format: date-time\n          type: string\n      - $ref: '#/components/parameters/externalReferenceID'\n      - $ref: '#/components/parameters/externalReferenceSource'\n      - $ref: '#/components/parameters/page'\n      - $ref: '#/components/parameters/pageSize'\n      - $ref: '#/components/parameters/authorizationHeader'\n      responses:\n        '200':\n          $ref: '#/components/responses/ObservationListResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequest'\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n      tags:\n      - Observations\n    post:\n      summary: Add new Observation entities\n      description: |-\n        Add new Observation entities\n      parameters:\n      - $ref: '#/components/parameters/authorizationHeader'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/ObservationNewRequest'\n      responses:\n        '200':\n          $ref: '#/components/responses/ObservationListResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequest'\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n      tags:\n      - Observations\n    put:\n      summary: Update multiple Observation entities \n      description: |-\n        Update multiple Observation entities simultaneously with a single call\n        \n        Include as many `observationDbIds` in the request as needed.\n        \n        Note - In strictly typed languages, this structure can be represented as a Map or Dictionary of objects and parsed directly from JSON.\n      parameters:\n      - $ref: '#/components/parameters/authorizationHeader'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              additionalProperties:\n                  $ref: '#/components/schemas/ObservationNewRequest'\n              example:\n                '\u003cobservationDbId_1\u003e':\n                  additionalInfo: {}\n                  collector: 917d3ae0\n                  externalReferences:\n                  - referenceID: 75a50e76\n                    referenceSource: Remote Data Collection Upload Tool\n                  germplasmDbId: 2408ab11\n                  germplasmName: A0000003\n                  observationTimeStamp: '2020-08-12T18:10:40.413Z'\n                  observationUnitDbId: 598111d4\n                  observationUnitName: Plot 1\n                  observationVariableDbId: c403d107\n                  observationVariableName: Plant Height in meters\n                  season:\n                    season: Spring\n                    seasonDbId: Spring_2018\n                    year: 2018\n                  studyDbId: ef2829db\n                  uploadedBy: a2f7f60b\n                  value: '2.3'\n                '\u003cobservationDbId_2\u003e':\n                  additionalInfo: {}\n                  collector: 03ba8c2c\n                  externalReferences:\n                  - referenceID: 75a50e76\n                    referenceSource: Remote Data Collection Upload Tool\n                  germplasmDbId: 69310ca4\n                  germplasmName: A0000438\n                  observationTimeStamp: '2020-08-12T18:10:40.413Z'\n                  observationUnitDbId: 1177a714\n                  observationUnitName: Plot 13\n                  observationVariableDbId: e4f8ba8c\n                  observationVariableName: Carotenoid\n                  season:\n                    season: Spring\n                    seasonDbId: Spring_2018\n                    year: 2018\n                  studyDbId: 6f9e267d\n                  uploadedBy: 182c72ad\n                  value: '2.5'\n      responses:\n        '200':\n          $ref: '#/components/responses/ObservationListResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequest'\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n      tags:\n      - Observations\ncomponents:\n  responses:\n    ObservationListResponse:\n      content:\n        application/json:\n          schema:\n            title: ObservationListResponse\n            type: object\n            properties:\n              '@context':\n                $ref: '#/components/schemas/Context'\n              metadata:\n                $ref: '#/components/schemas/metadata'\n              result:\n                properties:\n                  data:\n                    items:\n                      $ref: '#/components/schemas/Observation'\n                    type: array\n                required:\n                - data\n                type: object\n            required:\n            - metadata\n            - result\n      description: OK\n      headers: {}\n      \n"
		}
	},
	"Error": "parse: parse spec: paths: /observations: get: operation \"\": parameters: parse parameter \"\": resolve \"#/components/parameters/externalReferenceID\" reference: component by reference \"#/components/parameters/externalReferenceID\" not found"
}