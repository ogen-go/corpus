{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/gristlabs/grist-help"
		},
		"file": {
			"name": "grist.yml",
			"size": 0,
			"path": "api/grist.yml",
			"byteSize": 43562,
			"content": "info:\n  description: |\n    An API for manipulating Grist sites, workspaces, and documents.\n\n    # Authentication\n    \u003cSecurityDefinitions /\u003e\n  version: \"1.0.1\"\n  title: \"Grist API\"\nopenapi: 3.0.0\nsecurity:\n  - API Key: []   \nservers:\n  - url: https://docs.getgrist.com/api\n  - url: https://\u003cTEAM\u003e.getgrist.com/api\npaths:\n  /orgs:\n    get:\n      tags:\n        - /orgs\n      summary: \"List the orgs you have access to\"\n      description: \"This enumerates all the team sites or personal areas available.\"\n      responses:\n        200:\n          description: An array of organizations\n          content:\n            application/json:    \n              schema:\n                $ref: \"#/components/schemas/Orgs\"\n  /orgs/{orgId}:\n    get:\n      tags:\n        - /orgs\n      summary: \"Describe an org\"\n      parameters:\n        - in: path\n          name: orgId\n          schema:\n            $ref: \"#/components/schemas/OrgKey\"\n          required: true\n      responses:\n        200:\n          description: An organization\n          content:\n            application/json:    \n              schema:\n                $ref: \"#/components/schemas/Org\"\n    patch:\n      tags:\n        - /orgs\n      summary: \"Modify an org\"\n      parameters:\n        - in: path\n          name: orgId\n          schema:\n            $ref: \"#/components/schemas/OrgKey\"\n          required: true\n      requestBody:\n        description: \"the changes to make\"\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/OrgParameters\"\n        required: true\n      responses:\n        200:\n          description: Success\n\n  /orgs/{orgId}/access:\n    get:\n      tags:\n        - /orgs\n      summary: \"List users with access to org\"\n      parameters:\n        - in: path\n          name: orgId\n          schema:\n            $ref: \"#/components/schemas/OrgKey\"\n          required: true\n      responses:\n        200:\n          description: \"Users with access to org\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/OrgAccessRead\"\n    patch:\n      tags:\n        - /orgs\n      summary: \"Change who has access to org\"\n      parameters:\n        - in: path\n          name: orgId\n          schema:\n            $ref: \"#/components/schemas/OrgKey\"\n          required: true\n      requestBody:\n        description: \"the changes to make\"\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - delta\n              properties:\n                delta:\n                  $ref: \"#/components/schemas/OrgAccessWrite\"\n        required: true\n  /orgs/{orgId}/workspaces:\n    get:\n      tags:\n        - /orgs\n      summary: \"List workspaces and documents within an org\"\n      parameters:\n        - in: path\n          name: orgId\n          schema:\n            $ref: \"#/components/schemas/OrgKey\"\n          required: true\n      responses:\n        200:\n          description: An org's workspaces and documents\n          content:\n            application/json:    \n              schema:\n                $ref: \"#/components/schemas/OrgWithWorkspaces\"\n    post:\n      tags:\n        - /workspaces\n      summary: \"Create an empty workspace\"\n      parameters:\n        - in: path\n          name: orgId\n          schema:\n            $ref: \"#/components/schemas/OrgKey\"\n          required: true\n      requestBody:\n        description: \"settings for the workspace\"\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/WorkspaceParameters\"\n        required: true\n      responses:\n        200:\n          description: The workspace id\n          content:\n            application/json:\n              schema:\n                type: integer\n                description: an identifier for the workspace\n                example: 155\n\n\n\n  /workspaces/{workspaceId}:\n    get:\n      tags:\n        - /workspaces\n      summary: \"Describe a workspace\"\n      parameters:\n        - in: path\n          name: workspaceId\n          schema:\n            $ref: \"#/components/schemas/WorkspaceKey\"\n          required: true\n      responses:\n        200:\n          description: A workspace\n          content:\n            application/json:    \n              schema:\n                $ref: \"#/components/schemas/WorkspaceWithOrg\"\n    patch:\n      tags:\n        - /workspaces\n      summary: \"Modify a workspace\"\n      parameters:\n        - in: path\n          name: workspaceId\n          schema:\n            $ref: \"#/components/schemas/WorkspaceKey\"\n          required: true\n      requestBody:\n        description: \"the changes to make\"\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/WorkspaceParameters\"\n        required: true\n      responses:\n        200:\n          description: Success\n    delete:\n      tags:\n        - /workspaces\n      summary: \"Delete a workspace\"\n      parameters:\n        - in: path\n          name: workspaceId\n          schema:\n            $ref: \"#/components/schemas/WorkspaceKey\"\n          required: true\n      responses:\n        200:\n          description: Success\n  /workspaces/{workspaceId}/docs:\n    post:\n      tags:\n        - /docs\n      summary: \"Create an empty document\"\n      parameters:\n        - in: path\n          name: workspaceId\n          schema:\n            $ref: \"#/components/schemas/WorkspaceKey\"\n          required: true\n      requestBody:\n        description: \"settings for the document\"\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/DocParameters\"\n        required: true\n      responses:\n        200:\n          description: The document id\n          content:\n            application/json:\n              schema:\n                type: string\n                description: a unique identifier for the document\n                example: \"8b97c8db-b4df-4b34-b72c-17459e70140a\"\n\n  /workspaces/{workspaceId}/access:\n    get:\n      tags:\n        - /workspaces\n      summary: \"List users with access to workspace\"\n      parameters:\n        - in: path\n          name: workspaceId\n          schema:\n            $ref: \"#/components/schemas/WorkspaceKey\"\n          required: true\n      responses:\n        200:\n          description: \"Users with access to workspace\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/WorkspaceAccessRead\"\n    patch:\n      tags:\n        - /workspaces\n      summary: \"Change who has access to workspace\"\n      parameters:\n        - in: path\n          name: workspaceId\n          schema:\n            $ref: \"#/components/schemas/WorkspaceKey\"\n          required: true\n      requestBody:\n        description: \"the changes to make\"\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - delta\n              properties:\n                delta:\n                  $ref: \"#/components/schemas/WorkspaceAccessWrite\"\n        required: true\n\n\n\n  /docs/{docId}:\n    get:\n      tags:\n        - /docs\n      summary: \"Describe a document\"\n      parameters:\n        - in: path\n          name: docId\n          schema:\n            $ref: \"#/components/schemas/DocKey\"\n          required: true\n      responses:\n        200:\n          description: A document's metadata\n          content:\n            application/json:    \n              schema:\n                $ref: \"#/components/schemas/DocWithWorkspace\"\n    patch:\n      tags:\n        - /docs\n      summary: \"Modify document metadata (but not its contents)\"\n      parameters:\n        - in: path\n          name: docId\n          schema:\n            $ref: \"#/components/schemas/DocKey\"\n          required: true\n      requestBody:\n        description: \"the changes to make\"\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/DocParameters\"\n        required: true\n      responses:\n        200:\n          description: Success\n    delete:\n      tags:\n        - /docs\n      summary: \"Delete a document\"\n      parameters:\n        - in: path\n          name: docId\n          schema:\n            $ref: \"#/components/schemas/DocKey\"\n          required: true\n      responses:\n        200:\n          description: Success\n  /docs/{docId}/move:\n    patch:\n      tags:\n        - /docs\n      summary: \"Move document to another workspace in the same org.\"\n      parameters:\n        - in: path\n          name: docId\n          schema:\n            $ref: \"#/components/schemas/DocKey\"\n          required: true\n      requestBody:\n        description: \"the target workspace\"\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - workspace\n              properties:\n                workspace:\n                  type: integer\n                  example: 597\n      responses:\n        200:\n          description: \"Success\"\n\n  /docs/{docId}/access:\n    get:\n      tags:\n        - /docs\n      summary: \"List users with access to document\"\n      parameters:\n        - in: path\n          name: docId\n          schema:\n            $ref: \"#/components/schemas/DocKey\"\n          required: true\n      responses:\n        200:\n          description: \"Users with access to document\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DocAccessRead\"\n    patch:\n      tags:\n        - /docs\n      summary: \"Change who has access to document\"\n      parameters:\n        - in: path\n          name: docId\n          schema:\n            $ref: \"#/components/schemas/DocKey\"\n          required: true\n      requestBody:\n        description: \"the changes to make\"\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - delta\n              properties:\n                delta:\n                  $ref: \"#/components/schemas/DocAccessWrite\"\n        required: true\n  /docs/{docId}/download:\n    get:\n      tags:\n        - /docs\n      summary: \"Content of document, as an Sqlite file\"\n      parameters:\n        - in: path\n          name: docId\n          schema:\n            $ref: \"#/components/schemas/DocKey\"\n          required: true\n      responses:\n        200:\n          description: A document's content in Sqlite form\n          content:\n            application/x-sqlite3:\n              schema:\n                type: string\n                format: binary\n  /docs/{docId}/download/xlsx:\n    get:\n      tags:\n        - /docs\n      summary: \"Content of document, as an Excel file\"\n      parameters:\n        - in: path\n          name: docId\n          schema:\n            $ref: \"#/components/schemas/DocKey\"\n          required: true\n      responses:\n        200:\n          description: A documents's content in Excel form\n          content:\n            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:\n              schema:\n                type: string\n                format: binary\n  /docs/{docId}/download/csv:\n    get:\n      tags:\n        - /docs\n      summary: \"Content of table, as a CSV file\"\n      parameters:\n        - in: path\n          name: docId\n          schema:\n            $ref: \"#/components/schemas/DocKey\"\n          required: true\n        - in: query\n          name: tableId\n          schema:\n            type: string\n            description: \"Name of a table (normalized).\"\n          required: true\n      responses:\n        200:\n          description: A table's content in CSV form\n          content:\n            text/csv:\n              schema:\n                type: string\n  /docs/{docId}/tables/{tableId}/data:\n    get:\n      tags:\n        - /data\n      summary: \"Fetch data from a table\"\n      deprecated: true\n      description: \"Deprecated in favor of `records` endpoints. We have no immediate plans to remove these endpoints, but consider `records` a better starting point for new projects.\"\n      parameters:\n        - $ref: '#/components/parameters/docIdPathParam'\n        - $ref: '#/components/parameters/tableIdPathParam'\n        - $ref: '#/components/parameters/filterQueryParam'\n        - $ref: '#/components/parameters/sortQueryParam'\n        - $ref: '#/components/parameters/limitQueryParam'\n        - $ref: '#/components/parameters/sortHeaderParam'\n        - $ref: '#/components/parameters/limitHeaderParam'\n      responses:\n        200:\n          description: Cells from the table\n          content:\n            application/json:    \n              schema:\n                $ref: \"#/components/schemas/Data\"\n    post:\n      tags:\n        - /data\n      summary: \"Add rows to a table\"\n      deprecated: true\n      description: \"Deprecated in favor of `records` endpoints. We have no immediate plans to remove these endpoints, but consider `records` a better starting point for new projects.\"\n      parameters:\n        - $ref: '#/components/parameters/docIdPathParam'\n        - $ref: '#/components/parameters/tableIdPathParam'\n        - $ref: '#/components/parameters/noparseQueryParam'\n      requestBody:\n        description: \"the data to add\"\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/DataWithoutId\"\n        required: true\n      responses:\n        200:\n          description: IDs of rows added\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RowIds\"\n    patch:\n      tags:\n        - /data\n      summary: \"Modify rows of a table\"\n      deprecated: true\n      description: \"Deprecated in favor of `records` endpoints. We have no immediate plans to remove these endpoints, but consider `records` a better starting point for new projects.\"\n      parameters:\n        - $ref: '#/components/parameters/docIdPathParam'\n        - $ref: '#/components/parameters/tableIdPathParam'\n        - $ref: '#/components/parameters/noparseQueryParam'\n      requestBody:\n        description: \"the data to change, with ids\"\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Data\"\n        required: true\n      responses:\n        200:\n          description: IDs of rows modified\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RowIds\"\n  /docs/{docId}/tables/{tableId}/data/delete:\n    post:\n      tags:\n        - /data\n      summary: \"Delete rows of a table\"\n      parameters:\n        - $ref: '#/components/parameters/docIdPathParam'\n        - $ref: '#/components/parameters/tableIdPathParam'\n      requestBody:\n        description: \"the IDs of rows to remove\"\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/RowIds\"\n        required: true\n      responses:\n        200:\n          description: Nothing returned\n          content:\n            application/json:\n              schema:\n                type: null\n  /docs/{docId}/attachments:\n    get:\n      tags:\n        - /attachments\n      summary: \"List metadata of all attachments in a doc\"\n      parameters:\n        - $ref: '#/components/parameters/docIdPathParam'\n        - $ref: '#/components/parameters/filterQueryParam'\n        - $ref: '#/components/parameters/sortQueryParam'\n        - $ref: '#/components/parameters/limitQueryParam'\n        - $ref: '#/components/parameters/sortHeaderParam'\n        - $ref: '#/components/parameters/limitHeaderParam'\n      responses:\n        200:\n          description: List of attachment metadata records. Note that the list may temporarily include records for attachments that are stored in the document but not referenced by any Attachments type cell.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AttachmentMetadataList\"\n    post:\n      tags:\n        - /attachments\n      summary: \"Upload attachments to a doc\"\n      parameters:\n        - in: path\n          name: docId\n          schema:\n            $ref: \"#/components/schemas/DocKey\"\n          required: true\n      requestBody:\n        description: \"the files to add to the doc\"\n        content:\n          multipart/form-data:\n            schema:\n              $ref: \"#/components/schemas/AttachmentUpload\"\n        required: true\n      responses:\n        200:\n          description: IDs of attachments added, one per file.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RowIds\"\n  /docs/{docId}/attachments/{attachmentId}:\n    get:\n      tags:\n        - /attachments\n      summary: \"Get the metadata for an attachment\"\n      parameters:\n        - in: path\n          name: docId\n          schema:\n            $ref: \"#/components/schemas/DocKey\"\n          required: true\n        - in: path\n          name: attachmentId\n          schema:\n            $ref: '#/components/schemas/AttachmentId'\n          required: true\n      responses:\n        200:\n          description: Attachment metadata\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AttachmentMetadata\"\n  /docs/{docId}/attachments/{attachmentId}/download:\n    get:\n      tags:\n        - /attachments\n      summary: \"Download the contents of an attachment\"\n      parameters:\n        - in: path\n          name: docId\n          schema:\n            $ref: \"#/components/schemas/DocKey\"\n          required: true\n        - in: path\n          name: attachmentId\n          schema:\n            $ref: '#/components/schemas/AttachmentId'\n          required: true\n      responses:\n        200:\n          description: Attachment contents, with suitable Content-Type.\n\n  /docs/{docId}/tables/{tableId}/records:\n    get:\n      tags:\n        - /records\n      summary: \"Fetch records from a table\"\n      parameters:\n        - $ref: '#/components/parameters/docIdPathParam'\n        - $ref: '#/components/parameters/tableIdPathParam'\n        - $ref: '#/components/parameters/filterQueryParam'\n        - $ref: '#/components/parameters/sortQueryParam'\n        - $ref: '#/components/parameters/limitQueryParam'\n        - $ref: '#/components/parameters/sortHeaderParam'\n        - $ref: '#/components/parameters/limitHeaderParam'\n      responses:\n        200:\n          description: Records from the table\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Records\"\n    post:\n      tags:\n        - /records\n      summary: \"Add records to a table\"\n      parameters:\n        - $ref: '#/components/parameters/docIdPathParam'\n        - $ref: '#/components/parameters/tableIdPathParam'\n        - $ref: '#/components/parameters/noparseQueryParam'\n      requestBody:\n        description: \"the records to add\"\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/RecordsWithoutId\"\n        required: true\n      responses:\n        200:\n          description: IDs of records added\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RecordsWithoutFields\"\n    patch:\n      tags:\n        - /records\n      summary: \"Modify records of a table\"\n      parameters:\n        - $ref: '#/components/parameters/docIdPathParam'\n        - $ref: '#/components/parameters/tableIdPathParam'\n        - $ref: '#/components/parameters/noparseQueryParam'\n      requestBody:\n        description: \"the records to change, with ids\"\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Records\"\n        required: true\n      responses:\n        200:\n          description: Success\n    put:\n      tags:\n        - /records\n      summary: \"Add or update records of a table\"\n      parameters:\n        - $ref: '#/components/parameters/docIdPathParam'\n        - $ref: '#/components/parameters/tableIdPathParam'\n        - $ref: '#/components/parameters/noparseQueryParam'\n        - in: query\n          name: onmany\n          schema:\n            type: string\n            enum:\n              - first\n              - none\n              - all\n            description: \u003e\n              Which records to update if multiple records are found to match `require`.\n                * `first` - the first matching record (default)\n                * `none` - do not update anything\n                * `all` - update all matches\n        - in: query\n          name: noadd\n          schema:\n            type: boolean\n            description: \"Set to true to prohibit adding records.\"\n        - in: query\n          name: noupdate\n          schema:\n            type: boolean\n            description: \"Set to true to prohibit updating records.\"\n        - in: query\n          name: allow_empty_require\n          schema:\n            type: boolean\n            description: \"Set to true to allow `require` in the body to be empty, which will match and update all records in the table.\"\n      requestBody:\n        description: \u003e\n          The records to add or update. Instead of an id,\n          a `require` object is provided, with the same structure as\n          `fields`. If no query parameter options are set, then the operation\n          is as follows. First, we check if a record exists matching\n          the values specified for columns in `require`. If so, we update\n          it by setting the values specified for columns in `fields`. If\n          not, we create a new record with a combination of the values\n          in `require` and `fields`, with `fields` taking priority if\n          the same column is specified in both.\n          The query parameters allow for variations on this behavior.\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/RecordsWithRequire\"\n        required: true\n      responses:\n        200:\n          description: Success\n\n  /docs/{docId}/tables:\n    get:\n      tags:\n        - /tables\n      summary: \"List tables in a document\"\n      parameters:\n        - $ref: '#/components/parameters/docIdPathParam'\n      responses:\n        200:\n          description: The tables in a document\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Tables\"\n    post:\n      tags:\n        - /tables\n      summary: \"Add tables to a document\"\n      parameters:\n        - $ref: '#/components/parameters/docIdPathParam'\n      requestBody:\n        description: \"the tables to add\"\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CreateTables\"\n        required: true\n      responses:\n        200:\n          description: The table created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TablesWithoutFields\"\n    patch:\n      tags:\n        - /tables\n      summary: \"Modify tables of a document\"\n      parameters:\n        - $ref: '#/components/parameters/docIdPathParam'\n      requestBody:\n        description: \"the tables to change, with ids\"\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Tables\"\n        required: true\n      responses:\n        200:\n          description: Success\n\n  /docs/{docId}/tables/{tableId}/columns:\n    get:\n      tags:\n        - /columns\n      summary: \"List columns in a table\"\n      parameters:\n        - $ref: '#/components/parameters/docIdPathParam'\n        - $ref: '#/components/parameters/tableIdPathParam'\n      responses:\n        200:\n          description: The columns in a table\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Columns\"\n    post:\n      tags:\n        - /columns\n      summary: \"Add columns to a table\"\n      parameters:\n        - $ref: '#/components/parameters/docIdPathParam'\n        - $ref: '#/components/parameters/tableIdPathParam'\n      requestBody:\n        description: \"the columns to add\"\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CreateColumns\"\n        required: true\n      responses:\n        200:\n          description: The columns created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ColumnsWithoutFields\"\n    patch:\n      tags:\n        - /columns\n      summary: \"Modify columns of a table\"\n      parameters:\n        - $ref: '#/components/parameters/docIdPathParam'\n        - $ref: '#/components/parameters/tableIdPathParam'\n      requestBody:\n        description: \"the columns to change, with ids\"\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Columns\"\n        required: true\n      responses:\n        200:\n          description: Success\n\ntags:\n  - name: /orgs\n    description: \"Team sites and personal spaces are called 'orgs' in the API.\"\n  - name: /workspaces\n    description: \"Sites can be organized into groups of documents called workspaces.\"\n  - name: /docs\n    description: \"Workspaces contain collections of Grist documents.\"\n  - name: /records\n    description: \"Tables contain collections of records (also called rows).\"\n  - name: /tables\n    description: \"Documents are structured as a collection of tables.\"\n  - name: /columns\n    description: \"Tables are structured as a collection of columns.\"\n  - name: /data\n    description: \"Work with table data, using a (now deprecated) columnar format. We now recommend the `records` endpoints.\"\n  - name: /attachments\n    description: \"Documents may include attached files. Data records can refer to these using a column of type `Attachments`.\"\ncomponents:\n  securitySchemes:\n    API Key:\n      type: http\n      scheme: bearer\n      bearerFormat: \"Authorization: Bearer XXXXXXXXXXX\"\n      description: \"Access to the Grist API is controlled by an Authorization header, which should contain the word 'Bearer', followed by a space, followed by your API key.\"\n  schemas:\n    OrgKey:\n      oneof:\n        - integer\n        - string\n      description: This can be an integer id, or a string subdomain (e.g. `gristlabs`), or `current` if the org is implied by the domain in the url\n    WorkspaceKey:\n      type: integer\n      description: An integer id\n    DocKey:\n      type: string\n      description: A string id (UUID)\n    Org:\n      type: object\n      required:\n        - id\n        - name\n        - domain\n        - owner\n        - createdAt\n        - updatedAt\n        - access\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 42\n        name:\n          type: string\n          example: \"Grist Labs\"\n        domain:\n          type: string\n          nullable: true\n          example: \"gristlabs\"\n        owner:\n          type: object\n          $ref: \"#/components/schemas/User\"\n          nullable: true\n        access:\n          type: string\n          $ref: \"#/components/schemas/Access\"\n        createdAt:\n          type: string\n          example: \"2019-09-13T15:42:35.000Z\"\n        updatedAt:\n          type: string\n          example: \"2019-09-13T15:42:35.000Z\"\n    Orgs:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Org\"\n    Workspace:\n      type: object\n      required:\n        - id\n        - name\n        - access\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 97\n        name:\n          type: string\n          example: Secret Plans\n        access:\n          type: string\n          $ref: \"#/components/schemas/Access\"\n    Doc:\n      type: object\n      required:\n        - id\n        - name\n        - isPinned\n        - urlId\n        - access\n      properties:\n        id:\n          type: string\n          example: 145\n        name:\n          type: string\n          example: Project Lollipop\n        access:\n          type: string\n          $ref: \"#/components/schemas/Access\"\n        isPinned:\n          type: boolean\n          example: true\n        urlId:\n          type: string\n          nullable: true\n          example: null\n    Workspaces:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Workspace\"\n    WorkspaceWithDocs:\n      allOf:\n        - $ref: \"#/components/schemas/Workspace\"\n        - type: object\n          required:\n          - docs\n          properties:\n            docs:\n              type: array\n              items:\n                $ref: \"#/components/schemas/Doc\"\n    WorkspaceWithOrg:\n      allOf:\n        - $ref: \"#/components/schemas/Workspace\"\n        - type: object\n          required:\n          - org\n          properties:\n            org:\n              $ref: \"#/components/schemas/Org\"\n    OrgWithWorkspaces:\n      allOf:\n        - $ref: \"#/components/schemas/Org\"\n        - type: object\n          required:\n          - workspaces\n          properties:\n            workspaces:\n              type: array\n              items:\n                $ref: \"#/components/schemas/WorkspaceWithDocs\"\n    DocWithWorkspace:\n      allOf:\n        - $ref: \"#/components/schemas/Doc\"\n        - type: object\n          required:\n          - workspace\n          properties:\n            workspace:\n              $ref: \"#/components/schemas/WorkspaceWithOrg\"\n    User:\n      type: object\n      required:\n        - id\n        - name\n        - picture\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 101\n        name:\n          type: string\n          example: \"Helga Hufflepuff\"\n        picture:\n          type: string\n          nullable: true\n          example: null\n    Access:\n      type: string\n      enum:\n        - owners\n        - editors\n        - viewers\n    Data:\n      type: object\n      required:\n        - id\n      properties:\n        id:\n          type: array\n          items:\n            type: integer\n      additionalProperties:\n        type: array\n        items: {}\n      example:\n        id: [1, 2]\n        pet: [\"cat\", \"dog\"]\n        popularity: [67, 95]\n    DataWithoutId:\n      type: object\n      additionalProperties:\n        type: array\n        items: {}\n      example:\n        pet: [\"cat\", \"dog\"]\n        popularity: [67, 95]\n    Records:\n      type: object\n      required:\n        - records\n      properties:\n        records:\n          type: array\n          items:\n            type: object\n            required:\n              - id\n              - fields\n            properties:\n              id:\n                type: number\n                example: 1\n              fields:\n                type: object\n                description: \"A JSON object mapping column names to [cell values](https://support.getgrist.com/code/interfaces/grist_plugin_api.rowrecord/#cellvalues).\"\n      example:\n        records:\n          -\n            id: 1\n            fields:\n              pet: cat\n              popularity: 67\n          -\n            id: 2\n            fields:\n              pet: dog\n              popularity: 95\n    RecordsWithoutId:\n      type: object\n      required:\n        - records\n      properties:\n        records:\n          type: array\n          items:\n            type: object\n            required:\n              - fields\n            properties:\n              fields:\n                type: object\n                description: \"A JSON object mapping column names to [cell values](https://support.getgrist.com/code/interfaces/grist_plugin_api.rowrecord/#cellvalues).\"\n      example:\n        records:\n          -\n            fields:\n              pet: cat\n              popularity: 67\n          -\n            fields:\n              pet: dog\n              popularity: 95\n    RecordsWithoutFields:\n      type: object\n      required:\n        - records\n      properties:\n        records:\n          type: array\n          items:\n            type: object\n            required:\n              - id\n            properties:\n              id:\n                type: number\n                example: 1\n      example:\n        records:\n          -\n            id: 1\n          -\n            id: 2\n    RecordsWithRequire:\n      type: object\n      required:\n        - records\n      properties:\n        records:\n          type: array\n          items:\n            type: object\n            required:\n              - require\n            properties:\n              require:\n                type: object\n                description: \u003e\n                  keys are column identifiers, and values are\n                  [cell values](https://support.getgrist.com/code/interfaces/grist_plugin_api.rowrecord/#cellvalues)\n                  we want to have in those columns (either by matching\n                  with an existing record, or creating a new record)\n              fields:\n                type: object\n                description: \u003e\n                  keys are column identifiers, and values are\n                  [cell values](https://support.getgrist.com/code/interfaces/grist_plugin_api.rowrecord/#cellvalues)\n                  to place in those columns (either overwriting values in an existing\n                  record, or in a new record)\n      example:\n        records:\n          - require:\n              pet: cat\n            fields:\n              popularity: 67\n          - require:\n              pet: dog\n            fields:\n              popularity: 95\n\n    Tables:\n      type: object\n      required:\n        - tables\n      properties:\n        tables:\n          type: array\n          items:\n            type: object\n            required:\n              - id\n              - fields\n            properties:\n              id:\n                type: string\n                example: Table1\n              fields:\n                type: object\n      example:\n        tables:\n          - id: People\n            fields:\n              tableRef: 1\n              onDemand: true\n          - id: Places\n            fields:\n              tableRef: 2\n              onDemand: false\n    TablesWithoutFields:\n      type: object\n      required:\n        - tables\n      properties:\n        tables:\n          type: array\n          items:\n            type: object\n            required:\n              - id\n            properties:\n              id:\n                type: string\n                example: Table1\n      example:\n        tables:\n          - id: People\n          - id: Places\n    CreateTables:\n      type: object\n      required:\n        - tables\n      properties:\n        tables:\n          type: array\n          items:\n            type: object\n            required:\n              - columns\n            properties:\n              id:\n                type: string\n                example: Table1\n              columns:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    id:\n                      type: string\n                      example: ColumnName\n                    fields:\n                      type: object\n      example:\n        tables:\n          - id: People\n            columns:\n              - id: pet\n                fields:\n                  label: \"Pet\"\n              - id: popularity\n                fields:\n                  label: \"Popularity ❤\"\n\n    Columns:\n      type: object\n      required:\n        - columns\n      properties:\n        columns:\n          type: array\n          items:\n            type: object\n            required:\n              - id\n              - fields\n            properties:\n              id:\n                type: string\n                example: ColumnName\n              fields:\n                type: object\n      example:\n        columns:\n          - id: pet\n            fields:\n              label: \"Pet\"\n          - id: popularity\n            fields:\n              label: \"Popularity ❤\"\n    CreateColumns:\n      type: object\n      required:\n        - columns\n      properties:\n        columns:\n          type: array\n          items:\n            type: object\n            properties:\n              id:\n                type: string\n                example: ColumnName\n              fields:\n                type: object\n      example:\n        columns:\n          - id: pet\n            fields:\n              label: \"Pet\"\n          - id: popularity\n            fields:\n              label: \"Popularity ❤\"\n    ColumnsWithoutFields:\n      type: object\n      required:\n        - columns\n      properties:\n        columns:\n          type: array\n          items:\n            type: object\n            required:\n              - id\n            properties:\n              id:\n                type: string\n                example: ColumnName\n      example:\n        columns:\n          - id: pet\n          - id: popularity\n\n    RowIds:\n      type: array\n      example: [101, 102, 103]\n      items:\n        type: integer\n    DocParameters:\n      type: object\n      properties:\n        name:\n          type: string\n          example: \"Competitive Analysis\"\n        isPinned:\n          type: boolean\n          example: false\n    WorkspaceParameters:\n      type: object\n      properties:\n        name:\n          type: string\n          example: \"Retreat Docs\"\n    OrgParameters:\n      type: object\n      properties:\n        name:\n          type: string\n          example: \"ACME Unlimited\"\n    OrgAccessRead:\n      type: object\n      required:\n        - users\n      properties:\n        users:\n          type: array\n          items:\n            type: object\n            required:\n              - id\n              - name\n            properties:\n              id:\n                type: integer\n                example: 1\n              name:\n                type: string\n                example: \"Andrea\"\n              email:\n                type: string\n                example: \"andrea@getgrist.com\"\n              access:\n                $ref: \"#/components/schemas/Access\"\n    OrgAccessWrite:\n      type: object\n      required:\n        - users\n      properties:\n        users:\n          type: object\n          additionalProperties:\n            type: string\n            enum:\n              - owners\n              - editors\n              - viewers\n              - members\n              - null\n          example:\n            \"foo@getgrist.com\": \"owners\"\n            \"bar@getgrist.com\": null\n    WorkspaceAccessRead:\n      type: object\n      required:\n        - maxInheritedRole\n        - users\n      properties:\n        maxInheritedRole:\n          $ref: \"#/components/schemas/Access\"\n        users:\n          type: array\n          items:\n            type: object\n            required:\n              - id\n              - name\n            properties:\n              id:\n                type: integer\n                example: 1\n              name:\n                type: string\n                example: \"Andrea\"\n              email:\n                type: string\n                example: \"andrea@getgrist.com\"\n              access:\n                $ref: \"#/components/schemas/Access\"\n              parentAccess:\n                $ref: \"#/components/schemas/Access\"\n    WorkspaceAccessWrite:\n      type: object\n      properties:\n        maxInheritedRole:\n          $ref: \"#/components/schemas/Access\"\n        users:\n          type: object\n          additionalProperties:\n            type: string\n            enum:\n              - owners\n              - editors\n              - viewers\n              - members\n              - null\n          example:\n            \"foo@getgrist.com\": \"owners\"\n            \"bar@getgrist.com\": null\n    DocAccessWrite:\n      $ref: \"#/components/schemas/WorkspaceAccessWrite\"\n    DocAccessRead:\n      $ref: \"#/components/schemas/WorkspaceAccessRead\"\n    AttachmentUpload:\n      type: object\n      properties:\n        upload:\n          type: array\n          items:\n            type: File\n    AttachmentId:\n      type: number\n      description: An integer ID\n    AttachmentMetadata:\n      type: object\n      properties:\n        fileName:\n          type: string\n          example: \"logo.png\"\n        fileSize:\n          type: number\n          example: 12345\n        timeUploaded:\n          type: string\n          example: \"2020-02-13T12:17:19.000Z\"\n    AttachmentMetadataList:\n      type: object\n      required:\n        - records\n      properties:\n        records:\n          type: array\n          items:\n            type: object\n            required:\n              - id\n              - fields\n            properties:\n              id:\n                type: number\n                example: 1\n              fields:\n                $ref: \"#/components/schemas/AttachmentMetadata\"\n  parameters:\n    filterQueryParam:\n      in: query\n      name: filter\n      schema:\n        type: string\n        description: \"This is a JSON object mapping column names to arrays of allowed values.  For example, to filter column `pet` for values `cat` and `dog`, the filter would be `{\\\"pet\\\": [\\\"cat\\\", \\\"dog\\\"]}`. JSON contains characters that are not safe to place in a URL, so it is important to url-encode them.  For this example, the url-encoding is `%7B%22pet%22%3A%20%5B%22cat%22%2C%20%22dog%22%5D%7D`. See https://rosettacode.org/wiki/URL_encoding for how to url-encode a string, or https://www.urlencoder.org/ to try some examples. Multiple columns can be filtered. For example the filter for `pet` being either `cat` or `dog`, AND `size` being either `tiny` or `outrageously small`, would be `{\\\"pet\\\": [\\\"cat\\\", \\\"dog\\\"], \\\"size\\\": [\\\"tiny\\\", \\\"outrageously small\\\"]}`.\"\n        example: \"{\\\"pet\\\": [\\\"cat\\\", \\\"dog\\\"]}\"\n      required: false\n    sortQueryParam:\n      in: query\n      name: sort\n      schema:\n        type: string\n        description: \"Order in which to return results. If a single column name is given (e.g. `pet`), results are placed in ascending order of values in that column. To get results in an order that was previously prepared manually in Grist, use the special `manualSort` column name. Multiple columns can be specified, separated by commas (e.g. `pet,age`). For descending order, prefix a column name with a `-` character (e.g. `pet,-age`). To include additional sorting options append them after a colon (e.g. `pet,-age:naturalSort;emptyFirst,owner`). Available options are: `choiceOrder`, `naturalSort`, `emptyFirst`. Without the `sort` parameter, the order of results is unspecified.\"\n        example: \"pet,-age\"\n      required: false\n    limitQueryParam:\n      in: query\n      name: limit\n      schema:\n        type: number\n        description: \"Return at most this number of rows.  A value of 0 is equivalent to having no limit.\"\n        example: \"5\"\n      required: false\n    sortHeaderParam:\n      in: header\n      name: X-Sort\n      schema:\n        type: string\n        description: \"Same as `sort` query parameter.\"\n        example: \"pet,-age\"\n      required: false\n    limitHeaderParam:\n      in: header\n      name: X-Limit\n      schema:\n        type: number\n        description: \"Same as `limit` query parameter.\"\n        example: \"5\"\n      required: false\n    tableIdPathParam:\n      in: path\n      name: tableId\n      schema:\n        type: string\n        description: name of a table (normalized)\n      required: true\n    docIdPathParam:\n      in: path\n      name: docId\n      schema:\n        $ref: \"#/components/schemas/DocKey\"\n      required: true\n    noparseQueryParam:\n      in: query\n      name: noparse\n      schema:\n        type: boolean\n        description: \"Set to true to prohibit parsing strings according to the column type.\"\n",
			"canonicalURL": "/github.com/gristlabs/grist-help@da30ab2696ada5b01639fffaf88e253d60b1f7aa/-/blob/api/grist.yml",
			"externalURLs": [
				{
					"url": "https://github.com/gristlabs/grist-help/blob/da30ab2696ada5b01639fffaf88e253d60b1f7aa/api/grist.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: securitySchemes: at api/grist.yml:876:5: invalid name: \"API Key\" doesn't match \"^[a-zA-Z0-9.\\\\-_]+$\""
}