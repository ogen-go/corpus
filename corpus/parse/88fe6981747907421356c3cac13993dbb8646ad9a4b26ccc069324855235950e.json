{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/aws/serverless-application-model"
		},
		"file": {
			"name": "error_http_api_invalid_auth.yaml",
			"size": 0,
			"path": "tests/translator/input/error_http_api_invalid_auth.yaml",
			"byteSize": 4705,
			"content": "Resources:\n  Function:\n    Type: AWS::Serverless::Function\n    Properties:\n      Runtime: python3.7\n      Handler: index.handler\n      CodeUri: s3://bucket/key\n      Events:\n        Api:\n          Type: HttpApi\n          Properties:\n            ApiId: !Ref MyApi\n            Auth:\n              Authorizer: myAuth\n  Function2:\n    Type: AWS::Serverless::Function\n    Properties:\n      Runtime: python3.7\n      Handler: index.handler\n      CodeUri: s3://bucket/key\n      Events:\n        Api2:\n          Type: HttpApi\n          Properties:\n            ApiId: !Ref MyApi2\n            Auth:\n              Authorizer: myAuth\n  Function3:\n    Type: AWS::Serverless::Function\n    Properties:\n      Runtime: python3.7\n      Handler: index.handler\n      CodeUri: s3://bucket/key\n      Events:\n        Api3:\n          Type: HttpApi\n          Properties:\n            ApiId: !Ref MyApi3\n            Auth:\n              Authorizer: NONE\n  Function4:\n    Type: AWS::Serverless::Function\n    Properties:\n      Runtime: python3.7\n      Handler: index.handler\n      CodeUri: s3://bucket/key\n      Events:\n        Api4:\n          Type: HttpApi\n          Properties:\n            ApiId: !Ref MyApi4\n            Auth:\n              Authorizer: OAuth2\n              AuthorizationScopes: scope\n\n  Function5:\n    Type: AWS::Serverless::Function\n    Properties:\n      Runtime: python3.7\n      Handler: index.handler\n      CodeUri: s3://bucket/key\n      Events:\n        Api4:\n          Type: HttpApi\n          Properties:\n            ApiId: !Ref MyApi5\n            Auth:\n              Authorizer: OIDC\n\n  NonStringAuthFunction:\n    Type: AWS::Serverless::Function\n    Properties:\n      CodeUri: s3://bucket/key\n      Handler: index.handler\n      Runtime: nodejs12.x\n      Events:\n        GetRoot:\n          Type: HttpApi\n          Properties:\n            ApiId: NonStringAuthFunctionApi\n            Path: /\n            Method: get\n            Auth:\n              # Correct usage: Authorizer: MyAuth\n              Authorizer: !Ref MyAuth\n              InvokeRole: CALLER_CREDENTIALS\n\n  MyApi:\n    Type: AWS::Serverless::HttpApi\n    Properties:\n      DefinitionBody:\n        info:\n          version: '1.0'\n          title:\n            Ref: AWS::StackName\n        paths: {}\n        openapi: 3.0.1\n\n  MyApi2:\n    Type: AWS::Serverless::HttpApi\n    Properties:\n      Auth:\n        Authorizers:\n          OAuth2:\n            AuthorizationScopes:\n            - scope4\n            JwtConfiguration:\n              issuer: https://www.example.com/v1/connect/oidc\n              audience:\n              - MyApi\n            IdentitySource: $request.querystring.param\n        DefaultAuthorizer: OAuth2\n      DefinitionBody:\n        info:\n          version: '1.0'\n          title:\n            Ref: AWS::StackName\n        paths: {}\n        openapi: 3.0.1\n\n  MyApi3:\n    Type: AWS::Serverless::HttpApi\n    Properties:\n      Auth:\n        Authorizers:\n          OAuth2:\n            AuthorizationScopes:\n            - scope4\n            JwtConfiguration:\n              issuer: https://www.example.com/v1/connect/oidc\n              audience:\n              - MyApi\n            IdentitySource: $request.querystring.param\n      DefinitionBody:\n        info:\n          version: '1.0'\n          title:\n            Ref: AWS::StackName\n        paths: {}\n        openapi: 3.0.1\n\n  MyApi4:\n    Type: AWS::Serverless::HttpApi\n    Properties:\n      Auth:\n        Authorizers:\n          OAuth2:\n            AuthorizationScopes:\n            - scope4\n            JwtConfiguration:\n              issuer: https://www.example.com/v1/connect/oidc\n              audience:\n              - MyApi\n            IdentitySource: $request.querystring.param\n      DefinitionBody:\n        info:\n          version: '1.0'\n          title:\n            Ref: AWS::StackName\n        paths: {}\n        openapi: 3.0.1\n\n  MyApi5:\n    Type: AWS::Serverless::HttpApi\n    Properties:\n      Auth:\n        Authorizers:\n          OIDC:\n            OpenIdConnectUrl: https://example.com/url\n            AuthorizationScopes:\n            - scope4\n            JwtConfiguration:\n              issuer: https://www.example.com/v1/connect/oidc\n              audience:\n              - MyApi\n            IdentitySource: $request.querystring.param\n      DefinitionBody:\n        info:\n          version: '1.0'\n          title:\n            Ref: AWS::StackName\n        paths: {}\n        openapi: 3.0.1\n\n  NonStringAuthFunctionApi:\n    Type: AWS::Serverless::HttpApi\n    Properties:\n      Auth:\n        Authorizers:\n          MyAuth:\n            JwtConfiguration:\n              audience: https://test-sam.com\n              issuer: https://test-sam.com\n            IdentitySource: $request.header.Authorization\n",
			"canonicalURL": "/github.com/aws/serverless-application-model@2f53aebdcf9b322a395eaa872e5368ddc3c76c95/-/blob/tests/translator/input/error_http_api_invalid_auth.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/aws/serverless-application-model/blob/2f53aebdcf9b322a395eaa872e5368ddc3c76c95/tests/translator/input/error_http_api_invalid_auth.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse version: at tests/translator/input/error_http_api_invalid_auth.yaml:1:1: invalid version: invalid major version: strconv.Atoi: parsing \"\": invalid syntax"
}