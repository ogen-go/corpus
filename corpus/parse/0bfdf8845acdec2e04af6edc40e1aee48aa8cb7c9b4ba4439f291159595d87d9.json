{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/imfht/flaskapps"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "flask-security-master/docs/openapi.yaml",
			"byteSize": 56152,
			"content": "openapi: 3.0.0\ninfo:\n  description: |\n    Default API for Flask-Security.\n\n    __N.B. This is preliminary.__\n\n    Since Flask-Security is middleware, with many possible configurations this is a\n    guide to how the APIs will behave using standard defaults.\n\n    By default, all POST requests require a CSRF token. This is handled automatically\n    if you render the form from your Flask application. If you send JSON, then you must include a request header (configured via __SECURITY_CSRF_HEADER__).\n    Please read the online documentation to find out details on how CSRF can be configured.\n\n    You can download the latest spec from: https://github.com/Flask-Middleware/flask-security/blob/master/docs/openapi.yaml\n  version: 1.0.0\n  title: \"Flask-Security External API\"\n  contact:\n    name: Flask-Security-Too\n    url: https://github.com/Flask-Middleware/flask-security\n  license:\n    name: MIT\n    url: https://github.com/Flask-Middleware/flask-security/blob/master/LICENSE\npaths:\n  /login:\n    get:\n      summary: Retrieve login form and/or user information\n      responses:\n        200:\n          description: \u003e\n            Login form or user information. The JSON response will always\n            carry the csrf_token information. If the caller is logged in, then\n            additional information is returned. This can be very useful for single-page applications where during a force refresh, all state is lost.\n            By performing this GET, the session cookie will authenticate the user and the response will contain user information.\n          content:\n            text/html:\n              schema:\n                example: render_template(SECURITY_LOGIN_USER_TEMPLATE)\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DefaultJsonResponse\"\n        302:\n          description: Response when already logged in (non-JSON request)\n          headers:\n            Location:\n              description: Redirect to ``SECURITY_POST_LOGIN_VIEW``\n              schema:\n                type: string\n                format: uri\n    post:\n      summary: Login to application\n      description: Supports both json and form request types. If the caller is already logged in, then in the form case, they are redirected to SECURITY_POST_LOGIN_VIEW, for a json request, a 400 is returned.\n      parameters:\n        - name: next\n          in: query\n          description: \u003e\n            URL to redirect to on successful login. Ignored for json request.\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/include_auth_token\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Login\"\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: \"#/components/schemas/Login\"\n      responses:\n        200:\n          description: Login response\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LoginJsonResponse\"\n            text/html:\n              schema:\n                description: Unsuccessful login\n                type: string\n                example: render_template(SECURITY_LOGIN_USER_TEMPLATE) with error values\n        302:\n          description: \u003e\n            If the caller already authenticated, the form contents is ignored and a\n            redirect is done: redirect(next) or redirect(SECURITY_POST_LOGIN_VIEW).\n\n            If the caller is NOT already authenticated, and the form contents are\n            validated the caller will be redirected to:\n            redirect(next) or redirect(SECURITY_POST_LOGIN_VIEW)\n          headers:\n            Location:\n              description: Redirect to ``SECURITY_POST_LOGIN_VIEW``\n              schema:\n                type: string\n        400:\n          description: Errors while validating login, or caller already authenticated/logged in.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DefaultJsonErrorResponse\"\n  /login(passwordless):\n    get:\n      summary: Return passwordless login form\n      responses:\n        200:\n          description: Passwordless login form\n          content:\n            text/html:\n              schema:\n                type: string\n                example: render_template(SECURITY_SEND_LOGIN_TEMPLATE)\n    post:\n      summary: Send passwordless login instructions email\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/EmailLink\"\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: \"#/components/schemas/EmailLink\"\n      responses:\n        200:\n          description: \u003e\n            Passwordless login response. For forms both success and validation errors.\n          content:\n            text/html:\n              schema:\n                description: Passwordless login form - with errors.\n                type: string\n                example: render_template(SECURITY_SEND_LOGIN_TEMPLATE)\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DefaultJsonResponse\"\n        400:\n          description: Errors while validating form\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DefaultJsonErrorResponse\"\n  /login(passwordless)/{token}:\n    parameters:\n      - name: token\n        in: path\n        required: true\n        schema:\n          type: string\n    get:\n      summary: Login via token\n      description: \u003e\n        This is the result of getting a passwordless login token and is usually\n        the result of clicking the link from a passwordless email.\n        This ALWAYS results in a 302 redirect.\n      responses:\n        302:\n          description: \u003e\n            Redirects depending on success/error and whether\n            __SECURITY_REDIRECT_BEHAVIOR__ == 'spa'.\n          headers:\n            Location:\n              description: |\n                On spa-success: SECURITY_POST_LOGIN_VIEW?identity={identity}\u0026email={email}\n\n                On spa-error-expired: SECURITY_LOGIN_ERROR_VIEW?error={msg}\u0026identity={identity}\u0026email={email}\n\n                On spa-error-invalid-token: SECURITY_LOGIN_ERROR_VIEW?error={msg}\n\n                On form-success: SECURITY_POST_LOGIN_VIEW\n\n                On form-error-expired: SECURITY_LOGIN_VIEW\n\n                On form-error-invalid-token: SECURITY_LOGIN_VIEW\n              schema:\n                type: string\n  /logout:\n    get:\n      summary: Log out current user\n      responses:\n        302:\n          description: Successful logout\n          headers:\n            Location:\n              description: Redirect to ``SECURITY_POST_LOGOUT_VIEW``\n              schema:\n                type: string\n    post:\n      summary: Log out current user\n      responses:\n        200:\n          description: Successful logout\n          content:\n            application/json:\n              schema:\n                type: object\n                required: [meta]\n                properties:\n                  meta:\n                    type: object\n                    required: [code]\n                    properties:\n                      code:\n                        type: integer\n                        example: 200\n                        description: Http status code\n  /register:\n    get:\n      summary: Return register form\n      responses:\n        200:\n          description: Register form\n          content:\n            text/html:\n              schema:\n                type: string\n                example: render_template(SECURITY_REGISTER_USER_TEMPLATE)\n        302:\n          description: Response when already logged in\n          headers:\n            Location:\n              description: Redirect to ``SECURITY_POST_LOGIN_VIEW``\n              schema:\n                type: string\n    post:\n      summary: Register new user with application\n      parameters:\n        - name: next\n          in: query\n          description: \u003e\n            URL to redirect to on successful registration. Ignored for json request.\n          schema:\n            type: string\n\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Register\"\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: \"#/components/schemas/RegisterForm\"\n      responses:\n        200:\n          description: Register response\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DefaultJsonResponse\"\n            text/html:\n              schema:\n                description: Unsuccessful registration\n                type: string\n                example: render_template(SECURITY_REGISTER_USER_TEMPLATE) with error values\n        302:\n          description: \u003e\n            Successful registration with form data body.\n          headers:\n            Location:\n              description: redirect to ``next`` or ``SECURITY_POST_REGISTER_VIEW``\n              schema:\n                type: string\n        400:\n          description: Errors while validating registration form\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DefaultJsonErrorResponse\"\n  /change:\n    get:\n      summary: Return change password form\n      responses:\n        200:\n          description: change password form\n          content:\n            text/html:\n              schema:\n                example: render_template(SECURITY_CHANGE_PASSWORD_TEMPLATE)\n    post:\n      summary: Change password\n      parameters:\n        - name: X-XSRF-Token\n          in: header\n          schema:\n            $ref: \"#/components/headers/X-CSRF-Token\"\n        - $ref: \"#/components/parameters/include_auth_token\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ChangePassword\"\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: \"#/components/schemas/ChangePassword\"\n      responses:\n        200:\n          description: Change password response.\n          content:\n            text/html:\n              schema:\n                description: Change form validation error.\n                type: string\n                example: render_template(SECURITY_CHANGE_PASSWORD_TEMPLATE) with error values\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/JsonResponseWithToken\"\n        302:\n          description: Password has been changed (non-json)\n          headers:\n            Location:\n              description: |\n                On success: Redirect to ``SECURITY_POST_CHANGE_VIEW`` or\n                            ``SECURITY_POST_LOGIN_VIEW``\n              schema:\n                type: string\n        400:\n          description: Errors while validating form\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DefaultJsonErrorResponse\"\n  /reset:\n    get:\n      summary: Return reset password form\n      responses:\n        200:\n          description: Reset password form\n          content:\n            text/html:\n              schema:\n                type: string\n                example: render_template(SECURITY_FORGOT_PASSWORD_TEMPLATE)\n        302:\n          description: Response when already logged in\n          headers:\n            Location:\n              description: Redirect to ``SECURITY_POST_LOGIN_VIEW``\n              schema:\n                type: string\n    post:\n      summary: Send reset password instructions email\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/EmailLink\"\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: \"#/components/schemas/EmailLink\"\n      responses:\n        200:\n          description: \u003e\n            Reset password response. For forms both success and validation errors.\n          content:\n            text/html:\n              schema:\n                description: Forgot password form - with errors.\n                type: string\n                example: render_template(SECURITY_FORGOT_PASSWORD_TEMPLATE)\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DefaultJsonResponseNoUser\"\n        400:\n          description: Errors while validating form\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DefaultJsonErrorResponse\"\n  /reset/{token}:\n    parameters:\n      - name: token\n        in: path\n        required: true\n        schema:\n          type: string\n    get:\n      summary: Request to reset password\n      description: \u003e\n        This is the result of getting a reset-password token and is usually\n        the result of clicking the link from a reset-password email.\n        If __SECURITY_REDIRECT_BEHAVIOR__ == 'spa' then a 302 is always returned.\n      responses:\n        200:\n          description: Reset password form\n          content:\n            text/html:\n              schema:\n                type: string\n                example: render_template(SECURITY_RESET_PASSWORD_TEMPLATE)\n        302:\n          description: \u003e\n            Redirects depending on success/error and whether\n            __SECURITY_REDIRECT_BEHAVIOR__ == 'spa'.\n          headers:\n            Location:\n              description: |\n                On spa-success: SECURITY_RESET_VIEW?token={token}\u0026identity={identity}\u0026email={email}\n\n                On spa-error-expired: SECURITY_RESET_ERROR_VIEW?error={msg}\u0026identity={identity}\u0026email={email}\n\n                On spa-error-invalid-token: SECURITY_RESET_ERROR_VIEW?error={msg}\n\n                On default-error: redirect(SECURITY_FORGOT_PASSWORD)\n              schema:\n                type: string\n    post:\n      summary: Reset password\n      parameters:\n        - $ref: \"#/components/parameters/include_auth_token\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ResetPassword\"\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: \"#/components/schemas/ResetPassword\"\n      responses:\n        200:\n          description: Reset response\n          content:\n            text/html:\n              schema:\n                description: Reset form validation error.\n                type: string\n                example: render_template(SECURITY_RESET_PASSWORD_TEMPLATE) with error values\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/JsonResponseWithToken\"\n        302:\n          description: Password has been reset or validation error (non-json)\n          headers:\n            Location:\n              description: |\n                On success: redirect(SECURITY_POST_RESET_VIEW) or\n                    redirect(SECURITY_POST_LOGIN_VIEW)\n\n                On invalid/expired token: redirect(SECURITY_FORGOT_PASSWORD)\n              schema:\n                type: string\n        400:\n          description: Errors while validating form\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DefaultJsonErrorResponse\"\n  /confirm:\n    get:\n      summary: Return send confirmation form\n      responses:\n        200:\n          description: Confirmation form\n          content:\n            text/html:\n              schema:\n                example: render_template(SECURITY_SEND_CONFIRMATION_TEMPLATE)\n    post:\n      summary: Send confirmation email\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/EmailLink\"\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: \"#/components/schemas/EmailLink\"\n      responses:\n        200:\n          description: \u003e\n            Confirmation response. For forms both success and validation errors.\n          content:\n            text/html:\n              schema:\n                description: Confirmation form - with errors.\n                type: string\n                example: render_template(SECURITY_SEND_CONFIRMATION_TEMPLATE)\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DefaultJsonResponse\"\n        400:\n          description: Errors while validating form\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DefaultJsonErrorResponse\"\n  /confirm/{token}:\n    parameters:\n      - name: token\n        in: path\n        required: true\n        schema:\n          type: string\n    get:\n      summary: Request to confirm account\n      description: \u003e\n        This is the result of getting a confirmation token and is usually\n        the result of clicking the link from a confirmation email.\n        This ALWAYS results in a 302 redirect.\n        By default (unless __SECURITY_AUTO_LOGIN_AFTER_CONFIRM__ == False), the user\n        denoted by the token is logged in as a side-effect.\n      responses:\n        302:\n          description: \u003e\n            Redirects depending on success/error and whether\n            __SECURITY_REDIRECT_BEHAVIOR__ == 'spa'.\n          headers:\n            Location:\n              description: |\n                On spa-success: SECURITY_POST_CONFIRM_VIEW?identity={identity}\u0026email={email}\u0026{level}={msg}\n\n                On spa-error-expired: SECURITY_CONFIRM_ERROR_VIEW?error={msg}\u0026identity={identity}\u0026email={email}\n\n                On spa-error-invalid-token: SECURITY_CONFIRM_ERROR_VIEW?error={msg}\n\n                On form-success: SECURITY_POST_CONFIRM_VIEW or\n                                 SECURITY_POST_LOGIN_VIEW\n\n                On form-success (no auto-login): SECURITY_POST_CONFIRM_VIEW or\n                                 SECURITY_LOGIN_URL\n\n                On form-error-expired: SECURITY_CONFIRM_ERROR_VIEW or\n                                       SECURITY_CONFIRM_URL\n\n                On form-error-invalid-token: SECURITY_CONFIRM_ERROR_VIEW or\n                                             SECURITY_CONFIRM_URL\n              schema:\n                type: string\n  /us-signin:\n    get:\n      summary: Unified Sign In.\n      responses:\n        200:\n          description: Sign in form\n          content:\n            text/html:\n              schema:\n                example: render_template(SECURITY_US_SIGNIN_TEMPLATE)\n            application/json:\n              schema:\n                type: object\n                properties:\n                  available_methods:\n                    type: string\n                    description: Config setting SECURITY_US_ENABLED_METHODS\n                  code_methods:\n                    type: string\n                    description: All SECURITY_US_ENABLED_METHODS that require a code to be generated and sent.\n                  identity_attributes:\n                    type: string\n                    description: Configuration setting SECURITY_USER_IDENTITY_ATTRIBUTES\n    post:\n      summary: Unified Sign In.\n      parameters:\n        - $ref: \"#/components/parameters/include_auth_token\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UsSignin\"\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: \"#/components/schemas/UsSignin\"\n      responses:\n        200:\n          description: Unified Sign In response\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UsSigninJsonResponse\"\n            text/html:\n              schema:\n                description: Unsuccessful sign in\n                type: string\n                example: render_template(SECURITY_US_SIGNIN_TEMPLATE) with error values\n        302:\n          description: \u003e\n            If the caller already authenticated, the form contents is ignored and a\n            redirect is done: redirect(next) or redirect(SECURITY_POST_LOGIN_VIEW).\n\n            If the caller is NOT already authenticated, and the form contents are\n            validated the caller will be redirected to:\n            redirect(next) or redirect(SECURITY_POST_LOGIN_VIEW)\n          headers:\n            Location:\n              description: Redirect to ``SECURITY_POST_LOGIN_VIEW``\n              schema:\n                type: string\n        400:\n          description: Errors while validating attributes, or caller already authenticated/logged in.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DefaultJsonErrorResponse\"\n  /us-signin/send-code:\n    get:\n      summary: Unified Sign In send authentication code\n      responses:\n        200:\n          description: Send Code form\n          content:\n            text/html:\n              schema:\n                example: render_template(SECURITY_US_SIGNIN_TEMPLATE)\n            application/json:\n              schema:\n                type: object\n                properties:\n                  methods:\n                    type: string\n                    description: Config setting SECURITY_US_ENABLED_METHODS\n                  code_methods:\n                    type: string\n                    description: All SECURITY_US_ENABLED_METHODS that require a code to be generated and sent.\n                  identity_attributes:\n                    type: string\n                    description: Configuration setting SECURITY_USER_IDENTITY_ATTRIBUTES\n    post:\n      summary: Send Code for unified sign in.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UsSigninSendCode\"\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: \"#/components/schemas/UsSigninSendCode\"\n      responses:\n        200:\n          description: Send code response\n          content:\n            application/json:\n              schema:\n                description: Code successfully sent\n            text/html:\n              schema:\n                description: Validation error, code send error, or code successfully sent\n                type: string\n                example: render_template(SECURITY_US_SIGNIN_TEMPLATE) with error values\n        400:\n          description: Errors while validating attributes.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DefaultJsonErrorResponse\"\n        500:\n          description: Error when trying to send code.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DefaultJsonErrorResponse\"\n\n  /us-verify:\n    get:\n      summary: Unified sign in re-authentication.\n      description: \u003e\n        If an endpoint is protected with @auth_required() with a freshness declaration\n        this endpoint will be called to request an already signed in user to re-authenticate.\n      responses:\n        200:\n          description: Verify/re-authenticate form\n          content:\n            text/html:\n              schema:\n                example: render_template(SECURITY_US_VERIFY_TEMPLATE)\n            application/json:\n              schema:\n                type: object\n                properties:\n                  available_methods:\n                    type: string\n                    description: Config setting SECURITY_US_ENABLED_METHODS\n                  code_methods:\n                    type: string\n                    description: All SECURITY_US_ENABLED_METHODS that require a code to be generated and sent.\n    post:\n      summary: Unified sign in re-authentication\n      parameters:\n        - $ref: \"#/components/parameters/include_auth_token\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UsSigninVerify\"\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: \"#/components/schemas/UsSigninVerify\"\n      responses:\n        200:\n          description: Verify/re-authenticate response.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - description: \u003e\n                      The user successfully re-authenticated.\n                  - $ref: \"#/components/schemas/JsonResponseWithToken\"\n            text/html:\n              schema:\n                description: Unsuccessful re-authentication.\n                type: string\n                example: render_template(SECURITY_US_VERIFY_TEMPLATE) with error values\n        302:\n          description: User successfully re-authenticated when using form based request.\n          headers:\n            Location:\n              description: Redirect to ``next`` or ``SECURITY_POST_VERIFY_VIEW``\n              schema:\n                type: string\n        400:\n          description: Errors while validating attributes.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DefaultJsonErrorResponse\"\n  /us-verify/send-code:\n    get:\n      summary: Unified sign in verify/re-authenticate send authentication code\n      responses:\n        200:\n          description: Send Code form\n          content:\n            text/html:\n              schema:\n                example: render_template(SECURITY_US_VERIFY_TEMPLATE)\n            application/json:\n              schema:\n                type: object\n                properties:\n                  methods:\n                    type: string\n                    description: Config setting SECURITY_US_ENABLED_METHODS\n                  code_methods:\n                    type: string\n                    description: All SECURITY_US_ENABLED_METHODS that require a code to be generated and sent.\n    post:\n      summary: Send Code for unified sign in verify.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UsSigninVerifySendCode\"\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: \"#/components/schemas/UsSigninVerifySendCode\"\n      responses:\n        200:\n          description: Send code response\n          content:\n            application/json:\n              schema:\n                description: Code successfully sent\n            text/html:\n              schema:\n                description: Validation error, code send error, or code successfully sent\n                type: string\n                example: render_template(SECURITY_US_VERIFY_TEMPLATE) with error values\n        400:\n          description: Errors while validating attributes.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DefaultJsonErrorResponse\"\n        500:\n          description: Error when trying to send code.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DefaultJsonErrorResponse\"\n  /us-setup:\n    get:\n      summary: Unified sign in setup passcode options.\n      responses:\n        200:\n          description: Setup form\n          content:\n            text/html:\n              schema:\n                example: render_template(SECURITY_US_SETUP_TEMPLATE)\n            application/json:\n              schema:\n                type: object\n                properties:\n                  available_methods:\n                    type: string\n                    description: Config setting SECURITY_US_ENABLED_METHODS\n                  active_methods:\n                    type: string\n                    description: Methods that have already been setup.\n                  setup_methods:\n                    type: string\n                    description: All SECURITY_US_ENABLED_METHODS that require setup.\n                  identity_attributes:\n                    type: string\n                    description: Configuration setting SECURITY_USER_IDENTITY_ATTRIBUTES\n                  phone:\n                    type: string\n                    description: existing configured phone number\n    post:\n      summary: Unified sign in setup.\n      description: \u003e\n        An authenticated user can call this endpoint to update or add additional methods for authenticating (e.g. sms, authenticator app). This is controlled by application configuration settings SECURITY_US_ENABLED_METHODS. This endpoint is protected by a 'freshness' check - meaning the caller will be required to have authenticated recently. In addition, to ensure correctness, the newly setup method must be verified by sending and entering a code prior to it being permanently stored. This verification process is also time-limited.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UsSetup\"\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: \"#/components/schemas/UsSetup\"\n      responses:\n        200:\n          description: Unified sign in setup response.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UsSetupJsonResponse\"\n            text/html:\n              schema:\n                description: Invalid form values or verification code sent successfully and should be entered into the form.\n                type: string\n                example: render_template(SECURITY_US_SETUP_TEMPLATE) with error values\n        400:\n          description: Errors while validating attributes.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DefaultJsonErrorResponse\"\n        500:\n          description: Error when trying to send code.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DefaultJsonErrorResponse\"\n  /us-setup/{token}:\n    parameters:\n      - name: token\n        in: path\n        required: true\n        schema:\n          type: string\n    get:\n      summary: Validate unified sign in setup request.\n      description: \u003e\n        This does nothing but redirect back to the setup form.\n      responses:\n        200:\n          description: Get form.\n          content:\n            text/html:\n              schema:\n                example: render_template(SECURITY_US_SETUP_TEMPLATE)\n\n    post:\n      summary: Validate passcode sent and store setup method.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UsSetupValidateRequest\"\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: \"#/components/schemas/UsSetupValidateRequest\"\n      responses:\n        200:\n          description: Successfully validated and persisted sign in method.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UsSetupValidateJsonResponse\"\n        302:\n          description: Successfuly validated and persisted sign in method.\n          headers:\n            Location:\n              description: |\n                On form-success: SECURITY_POST_SETUP_VIEW or\n                                 SECURITY_POST_LOGIN_VIEW\n              schema:\n                type: string\n        400:\n          description: Validation failed.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DefaultJsonErrorResponse\"\n  /us-verify-link:\n    parameters:\n      - name: email\n        in: query\n        required: true\n        schema:\n          type: string\n      - name: code\n        in: query\n        required: true\n        schema:\n          type: string\n    get:\n      summary: A magic link to authenticate (instead of manually entering a code).\n      description: \u003e\n        This is the result of getting a passcode link and is usually\n        the result of clicking the link from an email.\n        This ALWAYS results in a 302 redirect.\n        N.B. Magic link with 2FA enabled does not work and the SPA will get a redirect to the login error page with tf_required. Must use code option instead.\n      responses:\n        302:\n          description: \u003e\n            Redirects depending on success/error and whether\n            __SECURITY_REDIRECT_BEHAVIOR__ == 'spa'. Also, if Two-Factor authentication has been enabled, further authentication/redirects might be required.\n          headers:\n            Location:\n              description: |\n                On spa-success: SECURITY_POST_LOGIN_VIEW?identity={identity}\u0026email={email}\n\n                On spa-error-expired: SECURITY_LOGIN_ERROR_VIEW?error={msg}\n\n                On spa-error-invalid-token: SECURITY_LOGIN_ERROR_VIEW?error={msg}\n\n                On spa-two-factor-required: SECURITY_LOGIN_ERROR_VIEW?tf_required=1\n\n                On form-success: SECURITY_POST_LOGIN_VIEW\n\n                On form-error-expired: SECURITY_US_SIGNIN_URL\n\n                On form-error-invalid-token: SECURITY_US_SIGNIN_URL\n\n                On form-success and two-factor: SECURITY_TWO_FACTOR_TOKEN_VALIDATION_URL or SECURITY_TWO_FACTOR_SETUP_URL\n              schema:\n                type: string\n\n  /tf-setup:\n    get:\n      summary: Two-factor authentication setup.\n      responses:\n        200:\n          description: Setup form\n          content:\n            text/html:\n              schema:\n                example: render_template(SECURITY_TWO_FACTOR_SETUP_TEMPLATE)\n            application/json:\n              schema:\n                type: object\n                properties:\n                  tf_required:\n                    type: string\n                    description: Config setting SECURITY_TWO_FACTOR_REQUIRED.\n                  tf_primary_method:\n                    type: string\n                    description: Current (if any) setup method.\n                  tf_available_methods:\n                    type: string\n                    description: Config setting SECURITY_TWO_FACTOR_ENABLED_METHODS. If SECURITY_TWO_FACTOR_REQUIRED is false then 'disable' will be part of the set.\n                  tf_phone_number:\n                    type: string\n                    description: Currently configured (if any) phone number.\n    post:\n      summary: Two factor setup.\n      description: \u003e\n        Two-factor setup can be used in three cases:\n\n        1) Initial login and application requires 2FA\n\n        2) An authenticated user wishing to change their 2FA configuration\n\n        3) An authenticated user wishes to enable or disable 2FA (assuming SECURITY_TWO_FACTOR_REQUIRED is False).\n\n\n        Allowed 2FA methods are controlled via the configuration SECURITY_TWO_FACTOR_ENABLED_METHODS.\n\n\n        This endpoint is protected by a 'freshness' check - meaning the caller will be required to have authenticated recently. In addition, to ensure correctness, the newly setup method must be verified by sending and entering a code prior to it being permanently stored.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/TfSetup\"\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: \"#/components/schemas/TfSetup\"\n      responses:\n        200:\n          description: \u003e\n            Two factor setup response. Please note that the newly setup method must be validated PRIOR to it being stored permanently.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TfSetupJsonResponse\"\n            text/html:\n              schema:\n                description: Invalid form values or verification code sent successfully and should be entered into the form.\n                type: string\n                example: render_template(SECURITY_TWO_FACTOR_SETUP_TEMPLATE) with error values\n        400:\n          description: Errors while validating attributes.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DefaultJsonErrorResponse\"\n        500:\n          description: Error when trying to send code.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DefaultJsonErrorResponse\"\n  /tf-validate:\n    get:\n      summary: Retrieve form based on current two-factor state.\n      responses:\n        200:\n          description: Code validation\n          content:\n            text/html:\n              schema:\n                description: \u003e\n                  If this is a normal, already setup method, then render_template(SECURITY_TWO_FACTOR_VERIFY_CODE_TEMPLATE) is returned;\n                  if this is validating a new method then render_template(SECURITY_TWO_FACTOR_SETUP_TEMPLATE) is returned.\n                type: string\n    post:\n      summary: Send two-factor code.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                code:\n                  description: The code sent via the configured method (e.g. SMS, email, authenticator).\n                  type: string\n                  example: 12345\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                code:\n                  description: The code sent via the configured method (e.g. SMS, email, authenticator).\n                  type: string\n                  example: 12345\n      responses:\n        200:\n          description: Two factor code validation response.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - description: \u003e\n                      The code was correct, the caller is now signed in.\n                  - $ref: \"#/components/schemas/TfValidateJsonResponse\"\n            text/html:\n              schema:\n                description:\n                  Unsuccessfully processed code. As above, which form is\n                  rendered depends on the state of the user's two factor configuration.\n                type: string\n        302:\n          description: User successfully sent code when using form based request. The caller is not logged in.\n          headers:\n            Location:\n              description: Redirect to either ``next`` or ``SECURITY_POST_LOGIN_VIEW``\n              schema:\n                type: string\n        400:\n          description: Errors while validating attributes.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DefaultJsonErrorResponse\"\n\n  /tf-rescue:\n    get:\n      summary: Help user that has lost authenticator or SMS device.\n      responses:\n        200:\n          description: Return form.\n          content:\n            text/html:\n              schema:\n                description: \u003e\n                  render_template(SECURITY_TWO_FACTOR_VERIFY_CODE_TEMPLATE).\n                type: string\n    post:\n      summary: Request help.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                help-setup:\n                  description: Either 'lost_device' or 'no_mail_access'.\n                  type: string\n                  example: \"lost_device\"\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                help_setup:\n                  description: Either 'lost_device' or 'no_mail_access'.\n                  type: string\n                  example: \"lost_device\"\n      responses:\n        200:\n          description: \u003e\n            If 'lost_device' was specified, then an authentication code was sent to the email\n            on record for the user. If 'no_mail_access' then an email was sent to administrator address\n            specified by SECURITY_TWO_FACTOR_RESCUE_MAIL.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DefaultJsonResponseNoUser\"\n            text/html:\n              schema:\n                description: Invalid form values or verification code sent successfully and should be entered into the form.\n                type: string\n                example: render_template(SECURITY_TWO_FACTOR_VERIFY_CODE_TEMPLATE) with error values\n        400:\n          description: Failed to send code\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DefaultJsonErrorResponse\"\n\ncomponents:\n  schemas:\n    Login:\n      type: object\n      required: [email, password]\n      properties:\n        email:\n          type: string\n          description: |\n            user identifier. This is by default an email address, but can be any (unique)\n            field that is part of the User model and is defined in the __SECURITY_USER_IDENTITY_ATTRIBUTES__ configuration variable. It will also match against numeric User model fields.\n        password:\n          type: string\n          description: Password\n        remember_me:\n          type: boolean\n          description: \u003e\n            If true, will remember userid as part of cookie. There is a configuration variable DEFAULT_REMEMBER_ME that can be set. This field will override that.\n        tf_validity_token:\n          type: string\n          description: Code verifying the user has successfully verfied 2FA in the past. If verified, the user is able to skip validation of the second factor. Only used when SECURITY_TWO_FACTOR_ALWAYS_VALIDATE is False.\n    LoginJsonResponse:\n      type: object\n      description: \u003e\n        The user successfully signed in. Note that depending on SECURITY_TWO_FACTOR configuration variables, a second form of authentication might be required.\n        Note that if 2FA is not configured, none of the ``tf_`` properties will be returned.\n      required: [meta, response]\n      properties:\n        meta:\n          type: object\n          required: [code]\n          properties:\n            code:\n              type: integer\n              example: 200\n              description: Http status code\n        response:\n          type: object\n          properties:\n            authentication_token:\n              type: string\n              description: \u003e\n                Token to be used in future token-based API calls. Only returned if \"include_auth_token\" parameter is set.\n            tf_required:\n              type: boolean\n              description: If two-factor authentication is required for caller.\n            tf_state:\n              type: string\n              description: if \"setup_from_login\" then the caller must go through two-factor setup endpoint. If \"ready\" then a code has been sent and should be supplied to SECURITY_TWO_FACTOR_TOKEN_VALIDATION_URL.\n            tf_primary_method:\n              type: string\n              description: Which method was used to send code.\n    DefaultJsonResponse:\n      type: object\n      properties:\n        user:\n          type: object\n          description: \u003e\n            By default an empty dictionary is returned. However by overriding _User::get_security_payload()_ any attributes of the User model can be returned.\n        csrf_token:\n          type: string\n          description: Session CSRF token\n    DefaultJsonResponseNoUser:\n      type: object\n      properties:\n        csrf_token:\n          type: string\n          description: Session CSRF token\n    JsonResponseWithToken:\n      type: object\n      properties:\n        user:\n          type: object\n          description: \u003e\n            By default an empty dictionary is returned. However by overriding _User::get_security_payload()_ any attributes of the User model can be returned.\n          properties:\n            authentication_token:\n              type: string\n              description: \u003e\n                Token to be used in future token-based API calls.\n                Note this only returned from those APIs that accept a\n                'include_auth_token' query param.\n        csrf_token:\n          type: string\n          description: Session CSRF token\n    DefaultJsonErrorResponse:\n      type: object\n      required: [meta, response]\n      properties:\n        meta:\n          type: object\n          required: [code]\n          properties:\n            code:\n              type: integer\n              example: 400\n              description: Http status code\n        response:\n          type: object\n          description: \u003e\n            For form validation errors, the 'errors' key will be set with a list of errors per\n            invalid form input field. For non-form related errors, the 'error' key will be set\n            with a single (localized) error string.\n          properties:\n            errors:\n              type: object\n              description: \u003e\n                Errors per input/form field ('email' below is just an example)\n              properties:\n                email:\n                  type: array\n                  items:\n                    type: string\n                    example: Email issues.\n                    description: Error message (localized)\n            error:\n              type: string\n              example: \"Unauthenticated\"\n              description: Error message (localized)\n    Register:\n      type: object\n      required: [email, password]\n      properties:\n        email:\n          type: string\n          description: \u003e\n            user identifier. This is by default an email address, but can be any (unique)\n            field that is part of the User model and is defined in the __SECURITY_USER_IDENTITY_ATTRIBUTES__ configuration variable. It will also match against numeric User model fields.\n        password:\n          type: string\n          description: Password\n    RegisterForm:\n      type: object\n      required: [email, password]\n      properties:\n        email:\n          type: string\n          description: \u003e\n            user identifier. This is by default an email address, but can be any (unique)\n            field that is part of the User model and is defined in the __SECURITY_USER_IDENTITY_ATTRIBUTES__ configuration variable. It will also match against numeric User model fields.\n        password:\n          type: string\n          description: Password\n        password_confirm:\n          type: string\n          description: \u003e\n            If present, must re-type in password. This will not be present if the __SECURITY_CONFIRM__ configuration is true.\n        next:\n          type: string\n          description: \u003e\n            Redirect URL. Overrides __SECURITY_POST_REGISTER_VIEW__.\n    ResetPassword:\n      type: object\n      required: [password, password_confirm]\n      properties:\n        password:\n          type: string\n          description: Password\n        password_confirm:\n          type: string\n          description: Password - again\n    ChangePassword:\n      type: object\n      required: [password, new_password, new_password_confirm]\n      properties:\n        password:\n          type: string\n          description: Password\n        new_password:\n          type: string\n          description: New password\n        new_password_confirm:\n          type: string\n          description: New password - again\n    EmailLink:\n      type: object\n      required: [email]\n      properties:\n        email:\n          type: string\n          description: \u003e\n            Email address to send link email to.\n    UsSignin:\n      type: object\n      required: [identity, passcode]\n      properties:\n        identity:\n          type: string\n          description: Configured by SECURITY_USER_IDENTITY_ATTRIBUTES\n          example: me@you.com, +16505551212\n        passcode:\n          type: string\n          description: password or code\n        remember_me:\n          type: boolean\n        tf_validity_token:\n          type: string\n          description: Code verifying the user has successfully verfied 2FA in the past. If verified, the user is able to skip validation of the second factor. Only used when SECURITY_TWO_FACTOR_ALWAYS_VALIDATE is False.\n    UsSigninJsonResponse:\n      type: object\n      description: \u003e\n        The user successfully signed in. Note that depending on SECURITY_TWO_FACTOR and SECURITY_US_MFA_REQUIRED configuration variables, a second form of authentication might be required.\n      required: [meta, response]\n      properties:\n        meta:\n          type: object\n          required: [code]\n          properties:\n            code:\n              type: integer\n              example: 200\n              description: Http status code\n        response:\n          type: object\n          properties:\n            authentication_token:\n              type: string\n              description: \u003e\n                Token to be used in future token-based API calls. Only returned if \"include_auth_token\" parameter is set.\n            tf_required:\n              type: boolean\n              description: If two-factor authentication is required for caller.\n            tf_state:\n              type: string\n              description: if \"setup_from_login\" then the caller must go through two-factor setup endpoint. If \"ready\" then a code has been sent and should be supplied to SECURITY_TWO_FACTOR_TOKEN_VALIDATION_URL.\n            tf_primary_method:\n              type: string\n              description: Which method was used to send code.\n    UsSigninSendCode:\n      type: object\n      required: [identity, chosen_method]\n      properties:\n        identity:\n          type: string\n          description: Configured by SECURITY_USER_IDENTITY_ATTRIBUTES\n          example: me@you.com, +16505551212\n        chosen_method:\n          type: string\n          description: which method should be used to send the code, as configured with SECURITY_US_ENABLED_METHODS\n    UsSigninVerify:\n      type: object\n      required: [passcode]\n      properties:\n        passcode:\n          type: string\n          description: password or code\n    UsSigninVerifySendCode:\n      type: object\n      required: [chosen_method]\n      properties:\n        chosen_method:\n          type: string\n          description: which method should be used to send the code, as configured with SECURITY_US_ENABLED_METHODS\n    UsSetup:\n      type: object\n      required: [chosen_method]\n      properties:\n        chosen_method:\n          type: string\n          description: which method should be used to send the code, as configured with SECURITY_US_ENABLED_METHODS\n        phone:\n          type: string\n          description: phone number (this will be normalized). Required if chosen_method == \"sms\".\n    UsSetupJsonResponse:\n      type: object\n      required: [meta, response]\n      properties:\n        meta:\n          type: object\n          required: [code]\n          properties:\n            code:\n              type: integer\n              example: 200\n              description: Http status code\n        response:\n          type: object\n          properties:\n            chosen_method:\n              type: string\n              description: The chosen_method as passed into API.\n            phone:\n              type: string\n              description: The canonicalized phone number if setting up SMS\n            authr_key:\n              type: string\n              description: TOTP key for setting up authenticator (if chosen_method == 'authenticator')\n            authr_issuer:\n              type: string\n              description: Issuer as configured with TOTP_ISSUER (same as used in QRcode) (if chosen_method == 'authenticator')\n            authr_username:\n              type: string\n              description: Username (same as used in QRcode) (if chosen_method == 'authenticator')\n            state:\n              type: string\n              description: Opaque blob that must be pass to /us-setup/\u003cstate\u003e. This is a signed, timed token.\n    UsSetupValidateRequest:\n      type: object\n      required: [passcode]\n      properties:\n        passcode:\n          type: string\n          description: Code/Passcode as received from method being setup.\n    UsSetupValidateJsonResponse:\n      type: object\n      required: [meta, response]\n      properties:\n        meta:\n          type: object\n          required: [code]\n          properties:\n            code:\n              type: integer\n              example: 200\n              description: Http status code\n        response:\n          type: object\n          properties:\n            chosen_method:\n              type: string\n              description: The chosen_method as passed into API.\n            phone:\n              type: string\n              description: Phone number if set.\n    TfSetup:\n      type: object\n      required: [setup]\n      properties:\n        setup:\n          type: string\n          description: \u003e\n            Which method should be used to send the code, as configured with SECURITY_TWO_FACTOR_ENABLED_METHODS.\n            If SECURITY_TWO_FACTOR_REQUIRED is False, the additional method 'disable' is available.\n          example: sms\n        phone:\n          type: string\n          description: phone number (this will be validated for format). Required if setup == \"sms\".\n          example: 650-555-1212\n    TfSetupJsonResponse:\n      type: object\n      required: [meta, response]\n      properties:\n        meta:\n          type: object\n          required: [code]\n          properties:\n            code:\n              type: integer\n              example: 200\n              description: Http status code\n        response:\n          type: object\n          properties:\n            tf_state:\n              type: string\n              description: \u003e\n                Current state of Two Factor configuration. Not present when disabling 2FA. This will be set to 'validating_profile'\n                indicating the caller needs to call '/tf-validate' with the correct code.\n              example: validating_profile\n            tf_primary_method:\n              type: string\n              description: Current method being congfigured.\n              example: sms\n            tf_authr_key:\n              type: string\n              description: TOTP key for setting up authenticator (if tf_primary_method == 'authenticator')\n            tf_authr_issuer:\n              type: string\n              description: Issuer as configured with TOTP_ISSUER (same as used in QRcode) (if tf_primary_method == 'authenticator')\n            tf_authr_username:\n              type: string\n              description: Username (same as used in QRcode) (if tf_primary_method == 'authenticator')\n    TfValidateJsonResponse:\n      type: object\n      properties:\n        user:\n          type: object\n          description: \u003e\n            By default an empty dictionary is returned. However by overriding _User::get_security_payload()_ any attributes of the User model can be returned.\n        csrf_token:\n          type: string\n          description: Session CSRF token\n        tf_validity_token:\n          type: string\n          description: A timed token that verifies that the user has successfully completed 2FA. Only sent if SECURITY_TWO_FACTOR_ALWAYS_VALIDATE is False and remember_me (from /login POST) is True\n\n  headers:\n    X-CSRF-Token:\n      description: CSRF token\n      schema:\n        type: string\n  parameters:\n    include_auth_token:\n      name: include_auth_token\n      description: If set/sent, will return an Authentication Token for user\n      in: query\n      schema:\n        type: string\n",
			"canonicalURL": "/github.com/imfht/flaskapps@d6fc9b7e32d7dc6b493c269b8ccbaa6ee2d690c1/-/blob/flask-security-master/docs/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/imfht/flaskapps/blob/d6fc9b7e32d7dc6b493c269b8ccbaa6ee2d690c1/flask-security-master/docs/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /change: post: parameters: parse parameter \"X-XSRF-Token\": invalid schema:style:explode combination: (\"\":\"simple\":false)"
}