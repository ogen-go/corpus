{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/apigovau/national-api-design-standards"
		},
		"file": {
			"name": "api-example-openapi-v1.4.yml",
			"size": 0,
			"path": "open-api-templates/v3.0/api-example-openapi-v1.4.yml",
			"byteSize": 20951,
			"content": "openapi: 3.0.0\ninfo:\n  description: \u003e\n    This is an **example** API to demonstrate features of The API Factory.\n\n\n    # Introduction\n\n    This specification is intended to to be a good starting point for describing\n\n    how users can interact with the various retrieval methods of your API. As\n\n    part of Team API design guidelines we recommend informing the user about\n\n    various aspects of your api such as:\n\n\n\n    # Getting Started\n\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\n\n    tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\n\n    quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n\n    consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse\n\n    cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat\n\n    non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\n\n      ## **Using The API**\n      This API provides data in the following formats:\n        - API format XXXX                 # Describe your exposed API format\n        - API format XXXX                 # Describe your exposed API format\n\n      The following sections describe how to use these formats:\n\n\n      ## API Endpoint `/xxxx`:\n      The `/xxxx` Endpoint is available at the `/xxxx` endpoint. This endpoint can\n      provide information in the following formats by using the `outputformat`\n      query parameter.\n\n       - application/json               # Replace with your output format\n       - application/atom+xml           # Replace with your output format\n\n\n     ## Extra Developer Documentation:\n      If you have more developer documentation or tutorials specific to helping\n      developers interact with this endpoint.\n      **url:** 'https://example.com/documentation/link'\n\n    # Uptime \u0026 Planned Outages\n\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\n\n    tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\n\n    quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n\n    consequat.\n\n\n\n    # Authentication \u0026 Rate Limits\n\n    No authentication is currently required to use the retrieval methods\n\n    published in this API. It is at the discretion of the XXXXX team whether the\n\n    authentication and rate limiting changes in the future.\n\n\n    There is also no current rate limits being enforced, however it is advised\n\n    that users keep their queries to ~2-3 calls per second to avoid overloading\n\n    the service.\n\n\n\n    # Terms of Use, Copyright and Attribution\n\n    Please ensure you comply with the following policies prior to using any data\n\n    within this API.\n\n\n    - [Terms of Use](https://www.XXXX.vic.gov.au/terms-use)\n\n    - [Privacy Policy](https://www.XXXX.vic.gov.au/privacy)\n\n    - [Copyright and Attribution](https://www.XXXX.vic.gov.au/copyright-and-attribution)\n\n    - [Department/Information Website](http://XXXX.vic.gov.au/digital)\n\n\n    To the maximum extent possible, the datasets provided via this site and their contents, to the extent they are protected by copyright, are provided under a [XXXX What type of Licence Agreement XXXX\n\n    eg: Creative Commons Attribution Version 4.0 (international licence)](https://creativecommons.org/licenses/by/4.0/).\n\n\n    # Contact Us\n\n    If you have a suggestion please contact us at .....\n  contact:\n    email: youremail@dpc.vic.gov.au\n    url: https://example.com/contact\n  version: 1.4.0\n  title: Example.com\ntags:\n  - name: Echo\n    description: Example echo operations\n  - name: User\n    description: Example operations about user\npaths:\n  /echo:\n    post:\n      tags:\n        - Echo\n      summary: Echo test\n      description: |\n        Receive the exact message you've sent\n        \n        ***You can use keep using `markdown` here to write out your description in more detail.***\n      operationId: echo\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: string\n              example: Hello world!\n          application/xml:\n            schema:\n              type: string\n              example: Hello world!\n          multipart/form-data:\n            schema:\n              type: string\n              example: Hello world!\n          text/html:\n            schema:\n              type: string\n              example: Hello world!\n        description: Echo payload\n        required: true\n      security:\n        - api_key: []\n      responses:\n        \"200\":\n          description: |\n            OK. \n            The request was successfully processed.\n          headers:\n            X-Rate-Limit:\n              description: calls per hour allowed by the user\n              schema:\n                type: integer\n                format: int32\n            X-Expires-After:\n              description: date in UTC when token expires\n              schema:\n                type: string\n                format: date-time\n          content:\n            application/json:\n              schema:\n                type: string\n              examples:\n                response:\n                  value: Hello world!\n            application/xml:\n              schema:\n                type: string\n            multipart/form-data:\n              schema:\n                type: string\n            application/x-www-form-urlencoded:\n              schema:\n                type: string\n        \"201\":\n          $ref: \"#/components/responses/201_error_response\"\n        \"202\":\n          $ref: \"#/components/responses/202_error_response\"\n        \"400\":\n          $ref: \"#/components/responses/400_error_response\"\n        \"401\":\n          $ref: \"#/components/responses/401_error_response\"\n        \"403\":\n          $ref: \"#/components/responses/403_error_response\"\n        \"404\":\n          $ref: \"#/components/responses/404_error_response\"\n        \"405\":\n          $ref: \"#/components/responses/405_error_response\"\n        \"415\":\n          $ref: \"#/components/responses/415_error_response\"\n        \"422\":\n          $ref: \"#/components/responses/422_error_response\"\n        \"500\":\n          $ref: \"#/components/responses/500_error_response\"\n  /users:\n    get:\n      tags:\n        - User\n      summary: Get a full list of users\n      description: |\n        Some description of the operation.\n\n        ***You can use keep using `markdown` here to write out your description in more detail.***\n      operationId: getAllUsers\n      parameters:\n        - name: username\n          in: path\n          description: The name that needs to be fetched\n          required: true\n          schema:\n            type: string\n        - name: with_email\n          in: query\n          description: Filter users without email\n          schema:\n            type: boolean\n      security:\n        - main_auth:\n            - read:users\n        - api_key: []\n      responses:\n        \"200\":\n          description: |\n            OK. \n            \n            The request was successfully processed.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserCollectionResponse\"\n        \"400\":\n          $ref: \"#/components/responses/400_error_response\"\n        \"401\":\n          $ref: \"#/components/responses/401_error_response\"\n        \"403\":\n          $ref: \"#/components/responses/403_error_response\"\n        \"404\":\n          $ref: \"#/components/responses/404_error_response\"\n        \"405\":\n          $ref: \"#/components/responses/405_error_response\"\n        \"415\":\n          $ref: \"#/components/responses/415_error_response\"\n        \"500\":\n          $ref: \"#/components/responses/500_error_response\"\n  \"/users/{username}\":\n    parameters:\n      - name: pretty_print\n        in: query\n        description: Pretty print response\n        schema:\n          type: boolean\n    get:\n      tags:\n        - User\n      summary: Get user by user name\n      description: \u003e\n        Some description of the operation.\n\n        ***You can use keep using `markdown` here to write out your description in more detail.***\n      operationId: getUserByName\n      parameters:\n        - name: username\n          in: path\n          description: The name that needs to be fetched\n          required: true\n          schema:\n            type: string\n        - name: with_email\n          in: query\n          description: Filter users without email\n          schema:\n            type: boolean\n      security:\n        - main_auth:\n            - read:users\n        - api_key: []\n      responses:\n        \"200\":\n          description: |\n            OK.\n            \n            The request was successfully processed.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserEmbeddedResponse\"\n        \"400\":\n          $ref: \"#/components/responses/400_error_response\"\n        \"401\":\n          $ref: \"#/components/responses/401_error_response\"\n        \"403\":\n          $ref: \"#/components/responses/403_error_response\"\n        \"404\":\n          $ref: \"#/components/responses/404_error_response\"\n        \"405\":\n          $ref: \"#/components/responses/405_error_response\"\n        \"415\":\n          $ref: \"#/components/responses/415_error_response\"\n        \"500\":\n          $ref: \"#/components/responses/500_error_response\"\n    put:\n      tags:\n        - User\n      summary: Update the user\n      description: |\n        This can only be done by the logged in user.\n      operationId: updateUser\n      parameters:\n        - name: username\n          in: path\n          description: The name that needs to be updated\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UserRequest\"\n          application/xml:\n            schema:\n              $ref: \"#/components/schemas/UserRequest\"\n          multipart/form-data:\n            schema:\n              $ref: \"#/components/schemas/UserRequest\"\n          text/html:\n            schema:\n              $ref: \"#/components/schemas/UserRequest\"\n        description: Updated user object\n        required: true\n      security:\n        - main_auth:\n            - write:users\n        - api_key: []\n      responses:\n        \"200\":\n          $ref: \"#/components/schemas/UserResponse\"\n        \"202\":\n          $ref: \"#/components/schemas/UserResponse\"\n        \"204\":\n          $ref: \"#/components/responses/204_error_response\"\n        \"400\":\n          $ref: \"#/components/responses/400_error_response\"\n        \"401\":\n          $ref: \"#/components/responses/401_error_response\"\n        \"403\":\n          $ref: \"#/components/responses/403_error_response\"\n        \"404\":\n          $ref: \"#/components/responses/404_error_response\"\n        \"405\":\n          $ref: \"#/components/responses/405_error_response\"\n        \"415\":\n          $ref: \"#/components/responses/415_error_response\"\n        \"422\":\n          $ref: \"#/components/responses/422_error_response\"\n        \"500\":\n          $ref: \"#/components/responses/500_error_response\"\n    delete:\n      tags:\n        - User\n      summary: Delete user\n      description: |\n        This can only be done by the logged in user.\n      operationId: deleteUser\n      parameters:\n        - name: username\n          in: path\n          description: The name that needs to be deleted\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/200_error_response\"\n        \"202\":\n          $ref: \"#/components/responses/202_error_response\"\n        \"204\":\n          $ref: \"#/components/responses/204_error_response\"\n        \"400\":\n          $ref: \"#/components/responses/400_error_response\"\n        \"401\":\n          $ref: \"#/components/responses/401_error_response\"\n        \"403\":\n          $ref: \"#/components/responses/403_error_response\"\n        \"404\":\n          $ref: \"#/components/responses/404_error_response\"\n        \"405\":\n          $ref: \"#/components/responses/405_error_response\"\n        \"415\":\n          $ref: \"#/components/responses/415_error_response\"\n        \"500\":\n          $ref: \"#/components/responses/500_error_response\"\ncomponents:\n  responses:\n    200_error_response:\n      description: OK.\n      content:\n        application/json:\n          examples:\n            response:\n              value: |\n                {\n                  \"status\": \"200\",\n                  \"description\": \"The request was successfully processed.\",\n                  \"more_info\": \"\"\n                }    \n    201_error_response:\n      description: Created.\n      content:\n        application/json:\n          examples:\n            response:\n              value: \u003e\n                {\n                  \"status\": \"201\",\n                  \"description\": \"The resource was created. The Response Location HTTP header should be returned to indicate where the newly created resource is accessible.\",\n                  \"more_info\": \"\"\n                } \n    202_error_response:\n      description: Accepted.\n      content:\n        application/json:\n          examples:\n            response:\n              value: \u003e\n                {\n                  \"status\": \"202\",\n                  \"description\": \"Used for asynchronous processing - The server has accepted the request but the result is not available yet. The Response Location HTTP header may be returned to indicate where the created resource will be accessible.\",\n                  \"more_info\": \"\"\n                } \n    204_error_response:\n      description: No content.\n      content:\n        application/json:\n          examples:\n            response:\n              value: \u003e\n                {\n                  \"status\": \"204\",\n                  \"description\": \"The server successfully processed the request and is not returning any content. \",\n                  \"more_info\": \"\"\n                } \n    400_error_response:\n      description: Bad Request.\n      content:\n        application/json:\n          examples:\n            response:\n              value: \u003e\n                {\n                  \"status\": \"400\",\n                  \"description\": \"The server cannot process the request.'The specified resource was not found.\",\n                  \"more_info\": \"\"\n                } \n    401_error_response:\n      description: Unauthorised.\n      content:\n        application/json:\n          examples:\n            response:\n              value: |\n                {\n                  \"status\": \"401\",\n                  \"description\": \"The request could not be authenticated.\",\n                  \"more_info\": \"\"\n                }\n    403_error_response:\n      description: Forbidden.\n      content:\n        application/json:\n          examples:\n            response:\n              value: \u003e\n                {\n                  \"status\": \"403\",\n                  \"description\": \"The request was authenticated but is not authorised to access the resource.\",\n                  \"more_info\": \"\"\n                }\n    404_error_response:\n      description: Not found.\n      content:\n        application/json:\n          examples:\n            response:\n              value: |\n                {\n                  \"status\": \"404\",\n                  \"description\": \"The resource was not found.\",\n                  \"more_info\": \"\"\n                }\n    405_error_response:\n      description: Not Allowed.\n      content:\n        application/json:\n          examples:\n            response:\n              value: \u003e+\n                {\n                  \"status\": \"405\",\n                  \"description\": \"The method is not implemented for this resource. The response may include an Allow header containing a list of valid methods for the resource.\",\n                  \"more_info\": \"\"\n                }\n                 \n    408_error_response:\n      description: Request Timeout.\n      content:\n        application/json:\n          examples:\n            response:\n              value: \u003e\n                {\n                  \"status\": \"408\",\n                  \"description\": \"The request timed out before a response was received.\",\n                  \"more_info\": \"\"\n                }\n    415_error_response:\n      description: Unsupported Media Type.\n      content:\n        application/json:\n          examples:\n            response:\n              value: \u003e\n                {\n                  \"status\": \"415\",\n                  \"description\": \"This status code indicates that the server refuses to accept the request because the content type specified in the request is not supported by the server.\",\n                  \"more_info\": \"\"\n                }\n    422_error_response:\n      description: Unprocessable Entity.\n      content:\n        application/json:\n          examples:\n            response:\n              value: \u003e\n                {\n                  \"status\": \"422\",\n                  \"description\": \"This status code indicates that the server received the request but it did not fulfil the requirements of the back end. An example is a mandatory field was not provided in the payload.\",\n                  \"more_info\": \"\"\n                }\n    500_error_response:\n      description: Internal Server Error.\n      content:\n        application/json:\n          examples:\n            response:\n              value: \u003e+\n                {\n                  \"status\": \"500\",\n                  \"description\": \"An internal server error. The response body may contain error messages.\",\n                  \"more_info\": \"\"\n                }\n                 \n    501_error_response:\n      description: Method Not Implemented.\n      content:\n        application/json:\n          examples:\n            response:\n              value: \u003e-\n                {\n                  \"status\": \"501\",\n                  \"description\": \"It indicates that the request method is not supported by the server and cannot be handled for any resourceFor example, the server supports GET, POST, PUT, DELETE, and PATCH but not OPTIONS methods.\",\n                  \"more_info\": \"\"\n                }\n  securitySchemes:\n    main_auth:\n      type: oauth2\n      flows:\n        implicit:\n          authorizationUrl: http://example.com/api/oauth/dialog\n          scopes:\n            read:users: read users info\n            write:users: modify or remove users\n    api_key:\n      type: apiKey\n      name: api_key\n      in: header\n    basic_auth:\n      type: http\n      scheme: basic\n  schemas:\n    UserCollectionResponse:\n      description: The standard list response that should be used\n      properties:\n        totalRecords:\n          type: number\n          format: int32\n          example: 50\n        _links:\n          type: array\n          items:\n            $ref: \"#/components/schemas/HateoasResponse\"\n        _embedded:\n          $ref: \"#/components/schemas/UserEmbeddedResponse\"\n    UserEmbeddedResponse:\n      type: object\n      properties:\n        count:\n          type: number\n          format: int32\n          example: 1\n        users:\n          type: array\n          items:\n            $ref: \"#/components/schemas/UserResponse\"\n    HateoasResponse:\n      type: object\n      properties:\n        href:\n          type: string\n          example: /users\n          description: The URL to the referenced resource\n        rel:\n          type: string\n          example: self\n          description: The description of the relationship between the resources\n        method:\n          type: string\n          example: GET\n          description: The HTTP method that should be used when referencing this resource\n          enum:\n            - GET\n            - POST\n            - PUT\n            - DELETE\n            - PATCH\n    Email:\n      description: User email address\n      type: string\n      format: email\n      example: john.smith@example.com\n    UserRequest:\n      type: object\n      properties:\n        username:\n          description: User supplied username\n          type: string\n          minLength: 4\n          example: John78\n        firstName:\n          description: User first name\n          type: string\n          minLength: 1\n          example: John\n        lastName:\n          description: User last name\n          type: string\n          minLength: 1\n          example: Smith\n        email:\n          $ref: \"#/components/schemas/Email\"\n    UserResponse:\n      type: object\n      example:\n        username: John78\n        firstName: John\n        lastName: Smith\n        email: john.smith78@gmail.com\n        _links:\n          - href: /users/John78\n            rel: self\n            method: GET\n          - href: /users/John78\n            rel: updateUser\n            method: PUT\n          - href: /users/John78\n            rel: deleteUser\n            method: DELETE\n      allOf:\n        - $ref: \"#/components/schemas/UserRequest\"\n        - type: object\n          properties:\n            _links:\n              type: array\n              items:\n                $ref: \"#/components/schemas/HateoasResponse\""
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /users/{username}: put: operation \"updateUser\": responses: 202: resolve \"#/components/schemas/UserResponse\" reference: invalid response reference"
}