{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/quentinguidee/cloud-sh-server"
		},
		"file": {
			"name": "api.yaml",
			"size": 0,
			"path": "docs/api.yaml",
			"byteSize": 17233,
			"content": "openapi: 3.0.3\n\ninfo:\n  title: cloud.sh API specs\n  description: cloud.sh API specs\n  version: 0.0.0\n\ncomponents:\n  schemas:\n\n    Bucket:\n      properties:\n        uuid:\n          type: string\n          example: \"edd91c7b-efa4-4473-aba4-d205cf6007b7\"\n        name:\n          type: string\n          example: \"Bucket name\"\n        type:\n          type: string\n          enum:\n            - \"user_bucket\"\n          example: \"user_bucket\"\n        root_node_uuid:\n          type: string\n          example: \"edd91c7b-efa4-4473-aba4-d205cf6007b7\"\n        size:\n          type: integer\n          description: In bytes\n          example: 3000\n        max_size:\n          type: integer\n          description: In bytes. Undefined if infinite.\n          example: 9800\n\n    DemoMode:\n      properties:\n        enabled:\n          type: boolean\n          example: true\n        reset_interval:\n          type: string\n          example: \"0 0 0 * * *\"\n\n    Error:\n      properties:\n        message:\n          type: string\n          example: \"error message\"\n\n    Node:\n      properties:\n        uuid:\n          type: string\n          example: \"edd91c7b-efa4-4473-aba4-d205cf6007b7\"\n        name:\n          type: string\n          example: \"Node name\"\n        type:\n          type: string\n          example: \"json\"\n        mime:\n          type: string\n          nullable: true\n          example: \"application/json\"\n        size:\n          type: integer\n          nullable: true\n          example: 1806\n        bucket_uuid:\n          type: string\n          example: \"d205cf60-aba4-1285-efa4-07b7edd91c7b\"\n\n    Nodes:\n      properties:\n        nodes:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Node\"\n\n    Session:\n      properties:\n        id:\n          type: integer\n          example: 1\n        user_id:\n          type: string\n          example: \"jean.dupont\"\n        token:\n          type: string\n          example: \"AD0EZ92B6ECD1EF95C46C813C3757D58D364D6BB2DF3BD50760CEF620C85EAD9\"\n\n    User:\n      properties:\n        id:\n          type: integer\n          example: 1\n        username:\n          type: string\n          example: jean.dupont\n        name:\n          type: string\n          example: Jean Dupont\n        profile_picture:\n          type: string\n          nullable: true\n          example: \"https://...\"\n        role:\n          type: string\n          enum:\n            - \"user\"\n            - \"admin\"\n          nullable: true\n          example: \"user\"\n        creation_date:\n          type: string\n          nullable: true\n\n  parameters:\n\n    AuthorizationHeader:\n      in: header\n      name: Authorization\n      required: true\n      description: The session token\n      example: \"AD0EZ92B6ECD1EF95C46C813C3757D58D364D6BB2DF3BD50760CEF620C85EAD9\"\n\n    BucketUUID:\n      in: path\n      name: bucket_uuid\n      required: true\n      description: The bucket UUID.\n      example: \"2f30d554-ca13-40d7-zc3e-8f4918e5a745\"\n\npaths:\n\n  /admin/demo:\n    get:\n      summary: Get the state of the demo mode\n      tags:\n        - \"Admin\"\n      parameters:\n        - $ref: \"#/components/parameters/AuthorizationHeader\"\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DemoMode\"\n        500:\n          description: Failed to retrieve the demo mode state\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n    post:\n      summary: Enable demo mode\n      tags:\n        - \"Admin\"\n      parameters:\n        - $ref: \"#/components/parameters/AuthorizationHeader\"\n      responses:\n        200:\n          description: OK\n\n  /admin/reset:\n    post:\n      summary: Reset the server\n      tags:\n        - \"Admin\"\n      parameters:\n        - $ref: \"#/components/parameters/AuthorizationHeader\"\n      responses:\n        200:\n          description: OK\n        500:\n          description: Failed to reset the server\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /auth/github/callback:\n    post:\n      summary: Callback to login with GitHub\n      tags:\n        - \"Auth\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                code:\n                  description: The code given by GitHub\n                  example: \"832kx16pa033j90fq6an5c4ds23oa\"\n                state:\n                  description: The app state\n                  example: \"CLOUD_SH\"\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  user:\n                    $ref: \"#/components/schemas/User\"\n                  session:\n                    $ref: \"#/components/schemas/Session\"\n        400:\n          description: Failed to parse body\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /auth/github/login:\n    get:\n      summary: Get the login with github link\n      tags:\n        - \"Auth\"\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  url:\n                    type: string\n                    example: \"https://github.com/...\"\n\n  /auth/logout:\n    post:\n      summary: Logout\n      tags:\n        - \"Auth\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                token:\n                  type: integer\n                  example: \"AD0EZ92B6ECD1EF95C46C813C3757D58D364D6BB2DF3BD50760CEF620C85EAD9\"\n                user_id:\n                  type: string\n                  example: \"jean.dupont\"\n      responses:\n        200:\n          description: OK\n        400:\n          description: Bad request, cannot decode the session object\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        500:\n          description: Failed to logout\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /storage/:bucket_uuid:\n    get:\n      summary: Get nodes contained in a directory\n      tags:\n        - \"Storage\"\n      parameters:\n        - $ref: \"#/components/parameters/AuthorizationHeader\"\n        - $ref: \"#/components/parameters/BucketUUID\"\n        - in: query\n          name: parent_uuid\n          schema:\n            type: string\n          required: true\n          example: \"edd91c7b-efa4-4473-aba4-d205cf6007b7\"\n          description: The directory node UUID\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Nodes\"\n        401:\n          description: Unauthorized access to this bucket\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        500:\n          description: Failed to retrieve nodes\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n    put:\n      summary: Create a node in a directory\n      tags:\n        - \"Storage\"\n      parameters:\n        - $ref: \"#/components/parameters/AuthorizationHeader\"\n        - $ref: \"#/components/parameters/BucketUUID\"\n        - in: header\n          name: Body\n          required: true\n          schema:\n            type: object\n            required: [name, type]\n            properties:\n              name:\n                type: string\n                description: The node name\n                example: \"Node name\"\n              type:\n                type: string\n                description: The node type\n                example: \"json\"\n        - in: query\n          name: parent_uuid\n          schema:\n            type: string\n          required: true\n          example: \"edd91c7b-efa4-4473-aba4-d205cf6007b7\"\n          description: The directory node UUID\n      responses:\n        200:\n          description: OK\n        400:\n          description: Failed to parse request parameters\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        401:\n          description: Unauthorized access to this bucket\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        403:\n          description: The bucket is full\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        500:\n          description: Failed to create nodes\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n    delete:\n      summary: Delete a node\n      tags:\n        - \"Storage\"\n      parameters:\n        - $ref: \"#/components/parameters/AuthorizationHeader\"\n        - $ref: \"#/components/parameters/BucketUUID\"\n        - in: query\n          name: node_uuid\n          schema:\n            type: string\n          required: true\n          example: \"edd91c7b-efa4-4473-aba4-d205cf6007b7\"\n          description: The node UUID to delete. It can be a folder.\n        - in: query\n          name: soft_delete\n          schema:\n            type: boolean\n          required: false\n          example: true\n          description: If defined, the node is not deleted but moved to the bin.\n      responses:\n        200:\n          description: OK\n        401:\n          description: Unauthorized access to this bucket\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        500:\n          description: Failed to delete this node\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n    patch:\n      summary: Rename node\n      tags:\n        - \"Storage\"\n      parameters:\n        - $ref: \"#/components/parameters/AuthorizationHeader\"\n        - $ref: \"#/components/parameters/BucketUUID\"\n        - in: query\n          name: node_uuid\n          description: The UUID of the node to rename\n          schema:\n            type: string\n          required: true\n          example: \"edd91c7b-efa4-4473-aba4-d205cf6007b7\"\n        - in: query\n          name: new_name\n          description: The new node name\n          schema:\n            type: string\n          required: true\n          example: \"New node name\"\n      responses:\n        200:\n          description: OK\n        401:\n          description: Unauthorized access to this bucket\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        500:\n          description: Failed to rename this node\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /storage/bucket:\n    get:\n      summary: Get the user bucket\n      tags:\n        - \"Storage\"\n      parameters:\n        - $ref: \"#/components/parameters/AuthorizationHeader\"\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Bucket\"\n        500:\n          description: Failed to retrieve the user bucket\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /storage/:bucket_uuid/download:\n    get:\n      summary: Download a node\n      tags:\n        - \"Storage\"\n      parameters:\n        - $ref: \"#/components/parameters/AuthorizationHeader\"\n        - $ref: \"#/components/parameters/BucketUUID\"\n        - in: query\n          name: node_uuid\n          description: The UUID of the node to download\n          schema:\n            type: string\n          required: true\n          example: \"edd91c7b-efa4-4473-aba4-d205cf6007b7\"\n      responses:\n        200:\n          description: OK. This will serve the file.\n        401:\n          description: Unauthorized access to this node\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        500:\n          description: Failed to download this node\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /storage/:bucket_uuid/upload:\n    post:\n      summary: Upload a node\n      tags:\n        - \"Storage\"\n      parameters:\n        - $ref: \"#/components/parameters/AuthorizationHeader\"\n        - $ref: \"#/components/parameters/BucketUUID\"\n        - in: query\n          name: parent_uuid\n          description: The parent directory\n          schema:\n            type: string\n          required: true\n          example: \"edd91c7b-efa4-4473-aba4-d205cf6007b7\"\n      requestBody:\n        content:\n          multipart/form:\n            schema:\n              type: object\n              properties:\n                file:\n                  type: string\n                  format: binary\n      responses:\n        200:\n          description: OK\n        401:\n          description: Unauthorized access to this bucket\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        403:\n          description: The bucket is full\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        500:\n          description: Failed to retrieve the user bucket\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /storage/:bucket_uuid/recent:\n    get:\n      summary: Get the user's recently accessed nodes\n      tags:\n        - \"Storage\"\n      parameters:\n        - $ref: \"#/components/parameters/AuthorizationHeader\"\n        - $ref: \"#/components/parameters/BucketUUID\"\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Nodes\"\n        401:\n          description: Unauthorized access to this bucket\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        500:\n          description: Failed to retrieve the user\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /storage/:bucket_uuid/bin:\n    get:\n      summary: Get the user's bin\n      tags:\n        - \"Storage\"\n      parameters:\n        - $ref: \"#/components/parameters/AuthorizationHeader\"\n        - $ref: \"#/components/parameters/BucketUUID\"\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Nodes\"\n        401:\n          description: Unauthorized access to this bucket\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        500:\n          description: Failed to retrieve the user\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /user:\n    get:\n      summary: Gets the logged in user\n      tags:\n        - \"Users\"\n      parameters:\n        - $ref: \"#/components/parameters/AuthorizationHeader\"\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        404:\n          description: The user was not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        500:\n          description: Failed to retrieve the user\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /user/{username}:\n    get:\n      summary: Gets an user by its username\n      tags:\n        - \"Users\"\n      parameters:\n        - in: path\n          name: username\n          required: true\n          schema:\n            type: string\n            example: jean.dupont\n          description: The user's username\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        404:\n          description: The user was not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        500:\n          description: Failed to retrieve the user\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n",
			"canonicalURL": "/github.com/quentinguidee/cloud-sh-server@b70e9277162c14a1a2e66ed5ec6ae508c1bf5afb/-/blob/docs/api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/quentinguidee/cloud-sh-server/blob/b70e9277162c14a1a2e66ed5ec6ae508c1bf5afb/docs/api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"AuthorizationHeader\": at 1:52: parameter MUST contain either a schema property, or a content property"
}