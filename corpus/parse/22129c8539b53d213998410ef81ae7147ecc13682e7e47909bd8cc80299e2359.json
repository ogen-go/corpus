{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/scionproto/scion"
		},
		"file": {
			"name": "spec.yml",
			"size": 0,
			"path": "spec/cppki/spec.yml",
			"byteSize": 9429,
			"content": "openapi: \"3.0.2\"\ninfo:\n  description: SCION CPPKI API\n  title: API to retrieve SCION control plane PKI (CPPKI) information.\n  version: \"0.1.0\"\npaths:\n  /trcs:\n   get:\n      tags:\n      - cppki\n      summary: List the TRCs\n      description: List the latest SCION Trust Root Configurations for each ISD that are\n        known to the control service. The result can be filtered by ISD.\n        Optionally, all TRCs can be requested instead of only the latest ones.\n      operationId: get-trcs\n      parameters:\n        - in: query\n          name: isd\n          schema:\n            type: array\n            items:\n              type: integer\n          style: form\n          explode: false\n        - in: query\n          name: all\n          schema:\n            type: boolean\n      responses:\n        \"200\":\n          description: List of applicable TRCs.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/TRCBrief\"\n        \"400\":\n          $ref: \"../common/base.yml#/components/responses/BadRequest\"\n  /trcs/isd{isd}-b{base}-s{serial}:\n    get:\n      tags:\n        - cppki\n      summary: Get the TRC\n      description: |\n        Get the SCION Trust Root Configuration.\n      operationId: get-trc\n      parameters:\n      - in: path\n        name: isd\n        required: true\n        schema:\n          type: integer\n          example: 42\n      - in: path\n        name: base\n        required: true\n        schema:\n          type: integer\n          example: 1\n      - in: path\n        name: serial\n        required: true\n        schema:\n          type: integer\n          example: 3\n      responses:\n        \"200\":\n          description: TRC.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TRC\"\n        \"400\":\n          $ref: \"../common/base.yml#/components/responses/BadRequest\"\n  /trcs/isd{isd}-b{base}-s{serial}/blob:\n    get:\n      tags:\n        - cppki\n      summary: Get the TRC blob\n      description: |\n        Get the SCION Trust Root Configuration as PEM encoded byte blob.\n      operationId: get-trc-blob\n      parameters:\n      - in: path\n        name: isd\n        required: true\n        schema:\n          type: integer\n          example: 42\n      - in: path\n        name: base\n        required: true\n        schema:\n          type: integer\n          example: 1\n      - in: path\n        name: serial\n        required: true\n        schema:\n          type: integer\n          example: 3\n      responses:\n        \"200\":\n          description: TRC blob\n          content:\n            application/x-pem-file:\n              example: |\n                -----BEGIN TRC-----\n                ZjAwOjA6MTEwI ...\n                -----END TRC-----\n        \"400\":\n          $ref: \"../common/base.yml#/components/responses/BadRequest\"\n  /certificates:\n    get:\n      tags:\n       - cppki\n      summary: List the certificate chains\n      description: |\n        List the currently active certificate chains that are known to the\n        control service. The result can be filtered by ISD-AS. Furthermore,\n        one can pass a particular point in time at which the certificate\n        chains are valid as input. A boolean can be provided to return all\n        certificates, regardless of their period of vailidity.\n      operationId: get-certificates\n      parameters:\n      - in: query\n        name: isd_as\n        schema:\n          $ref: \"../common/process.yml#/components/schemas/IsdAs\"\n      - in: query\n        name: valid_at\n        schema:\n          type: string\n          format: date-time\n      - in: query\n        name: all\n        schema:\n          type: boolean\n      responses:\n        \"200\":\n          description: List of certificate chains\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ChainBrief\"\n        \"400\":\n          description: Invalid request\n          content:\n            application/problem+json:\n              schema:\n                $ref: \"../common/base.yml#/components/schemas/Problem\"\n  /certificates/{chain-id}:\n    get:\n      tags:\n        - cppki\n      summary: Get the certificate chain\n      description: |\n        Get the certificate chain for a given ChainID.\n      operationId: get-certificate\n      parameters:\n      - in: path\n        name: chain-id\n        required: true\n        schema:\n          $ref: \"#/components/schemas/ChainID\"\n      responses:\n        \"200\":\n          description: Certificate chain\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Chain\"\n        \"400\":\n          description: Invalid request\n          content:\n            application/problem+json:\n              schema:\n                $ref: \"../common/base.yml#/components/schemas/Problem\"\n  /certificates/{chain-id}/blob:\n    get:\n      tags:\n        - cppki\n      summary: Get the certificate chain blob\n      description: |\n        Get the certificate chain encoded as PEM bytes blob for a given ChainID.\n      operationId: get-certificate-blob\n      parameters:\n      - in: path\n        name: chain-id\n        required: true\n        schema:\n          $ref: \"#/components/schemas/ChainID\"\n      responses:\n        \"200\":\n          description: Certificate chain blob\n          content:\n            application/x-pem-file:\n              example: |\n                -----BEGIN CERTIFICATE-----\n                ASCertificate ...\n                -----END CERTIFICATE-----\n                -----BEGIN CERTIFICATE-----\n                CACertificate ...\n                -----END CERTIFICATE-----\n        \"400\":\n          description: Invalid request\n          content:\n            application/problem+json:\n              schema:\n                $ref: \"../common/base.yml#/components/schemas/Problem\"\ncomponents:\n  schemas:\n    TRCBrief:\n      title: Brief TRC description\n      type: object\n      required:\n        - id\n      properties:\n        id:\n          $ref: \"#/components/schemas/TRCID\"\n    TRCID:\n      title: TRC Identifier\n      type: object\n      required:\n          - isd\n          - base_number\n          - serial_number\n      properties:\n        isd:\n          type: integer\n          example: 42\n        base_number:\n          type: integer\n          example: 1\n        serial_number:\n          type: integer\n          example: 3\n    TRC:\n      title: TRC description\n      type: object\n      required:\n        - id\n        - validity\n        - core_ases\n        - authoritative_ases\n        - description\n      properties:\n        id:\n          $ref: \"#/components/schemas/TRCID\"\n        validity:\n          $ref:  \"#/components/schemas/Validity\"\n        core_ases:\n          type: array\n          items:\n            $ref:  \"../common/process.yml#/components/schemas/IsdAs\"\n        authoritative_ases:\n          type: array\n          items:\n            $ref:  \"../common/process.yml#/components/schemas/IsdAs\"\n        description:\n          type: string\n    ChainID:\n      title: Certificate chain Identifier\n      type: string\n      example: fa53a04a\n      format: hex-string\n    ChainBrief:\n      title: Brief certificate chain description\n      type: object\n      required:\n        - id\n        - subject\n        - issuer\n        - validity\n      properties:\n        id:\n          $ref:  \"#/components/schemas/ChainID\"\n        subject:\n          $ref:  \"../common/process.yml#/components/schemas/IsdAs\"\n        issuer:\n          $ref:  \"../common/process.yml#/components/schemas/IsdAs\"\n        validity:\n          $ref:  \"#/components/schemas/Validity\"\n    Certificate:\n      title: Certificate description\n      type: object\n      required:\n        - distinguished_name\n        - isd_as\n        - validity\n        - subject_key_algo\n        - subject_key_id\n      properties:\n        distinguished_name:\n          type: string\n        isd_as:\n          $ref:  \"../common/process.yml#/components/schemas/IsdAs\"\n        validity:\n          $ref: \"#/components/schemas/Validity\"\n        subject_key_algo:\n          type: string\n          example: ECDSA\n        subject_key_id:\n          $ref: \"#/components/schemas/SubjectKeyID\"\n    Validity:\n      title: Validity period\n      type: object\n      required:\n        - not_before\n        - not_after\n      properties:\n        not_before:\n          type: string\n          format: date-time\n          example: 2021-01-04T09:59:33Z\n        not_after:\n          type: string\n          format: date-time\n          example: 2022-01-04T09:59:33Z\n    Chain:\n      title: Certificate chain description\n      type: object\n      required:\n        - subject\n        - issuer\n      properties:\n        subject:\n          $ref: \"#/components/schemas/Certificate\"\n        issuer:\n          $ref: \"#/components/schemas/Certificate\"\n    SubjectKeyID:\n      type: string\n      format: spaced-hex-string\n      example: \"89 B9 49 C2 2F 2F 9C DD 0D 2A 57 A9 DE 8E 2F 95 F3 09 10 D1\"\n    Subject:\n      type: object\n      required:\n        - isd_as\n      properties:\n        isd_as:\n          $ref:  \"../common/process.yml#/components/schemas/IsdAs\"\n    Policy:\n      type: object\n      required:\n        - chain_lifetime\n      properties:\n        chain_lifetime:\n          type: string\n          example: 72h0m0s\n\n"
		}
	},
	"Error": "parse: parse spec: paths: /certificates: get: operation \"get-certificates\": parameters: parse parameter \"isd_as\": schema: parse schema: reference \"../common/process.yml#/components/schemas/IsdAs\": resolve reference \"../common/process.yml#/components/schemas/IsdAs\": invalid schema reference \"../common/process.yml#/components/schemas/IsdAs\""
}