{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ergoplatform/board-new"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "src/main/resources/swagger/swagger.yaml",
			"byteSize": 9530,
			"content": "openapi: 3.0.0\ninfo:\n  description: This is a sample Ergo-Board server.\n  version: \"0.0.1\"\n  title: Ergo Board Backend\ntags:\n  - name: Elections\n  - name: Voters\n  - name: Votes\npaths:\n  /elections:\n    post:\n      tags:\n        - Elections\n      summary: Create election\n      operationId: createElection\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ElectionCreate'\n        description: Create election object\n        required: true\n      responses:\n        '201':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Election'\n  '/elections/{electionId}':\n    get:\n      tags:\n        - Elections\n      summary: Get election by id\n      operationId: getElection\n      parameters:\n        - name: electionId\n          in: path\n          description: ID of election to return\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Election'\n        '404':\n          description: Election not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiErrorResponse'\n    put:\n      tags:\n        - Elections\n      summary: Prolong election\n      operationId: prolongElection\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ElectionProlong'\n        description: Create election object\n        required: true\n      responses:\n        '200':\n          description: Adjusted election\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Election'\n  '/elections/{electionId}/exist':\n    get:\n      tags:\n        - Elections\n      summary: Check election by id\n      operationId: checkElection\n      parameters:\n        - name: electionId\n          in: path\n          description: ID of election to return\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BooleanResultResponse'\n  '/elections/{electionId}/currentHash':\n    get:\n      tags:\n        - Elections\n      summary: Get election current hash\n      operationId: currentHash\n      parameters:\n        - name: electionId\n          in: path\n          description: ID of election which hash to return\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StringResultResponse'\n        '404':\n          description: Election not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiErrorResponse'\n  /voters:\n    post:\n      tags:\n        - Voters\n      summary: Create voter record for corresponding election\n      operationId: createVoter\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/VoterCreate'\n        description: Create election object\n        required: true\n      responses:\n        '201':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Election'\n  '/voters/{voterId}':\n    get:\n      tags:\n        - Voters\n      summary: Find voter\n      operationId: findVoter\n      parameters:\n        - name: voterId\n          in: path\n          description: ID of voter to return\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Election'\n        '404':\n          description: Voter with such id not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiErrorResponse'\n  /vote:\n    post:\n      tags:\n        - Votes\n      summary: Make a vote\n      operationId: createVote\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/VoteCreate'\n        description: Create vote object\n        required: true\n      responses:\n        '201':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Vote'\n  '/vote/{voteId}':\n    get:\n      tags:\n        - Votes\n      summary: Find a vote\n      operationId: findVote\n      parameters:\n        - name: voteId\n          in: path\n          description: ID of vote to return\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Vote'\n        '404':\n          description: Voter with such id not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiErrorResponse'\n\ncomponents:\n  schemas:\n\n    Election:\n      type: object\n      properties:\n        id:\n          type: string\n          description: String representantion of UUID\n        start:\n          type: integer\n          format: int64\n          description: Timestamp when this election starts\n        end:\n          type: integer\n          format: int64\n          description: Timestamp when this election stops\n        description:\n          type: string\n\n    ElectionCreate:\n      type: object\n      required:\n        - start\n        - end\n      properties:\n        start:\n          type: integer\n          format: int64\n          description: Timestamp when this election starts\n        end:\n          type: integer\n          format: int64\n          description: Timestamp when this election stops\n        description:\n          type: string\n\n    ElectionProlong:\n      type: object\n      required:\n        - prolongDuration\n      properties:\n        prolongDuration:\n          type: integer\n          format: int64\n          description: Value of milliseconds to prolong this election for\n\n    Voter:\n      type: object\n      properties:\n        id:\n          type: string\n          description: Unique voter id for current election\n        electionId:\n          type: string\n          description: String representantion of UUID\n        publicKey:\n          type: string\n          description: Public key that will be used to verify message by board\n\n    VoterCreate:\n      type: object\n      required:\n        - electionId\n        - publicKey\n      properties:\n        electionId:\n          type: string\n          description: String representantion of UUID\n        publicKey:\n          type: string\n          description: Public key that will be used to verify message by board\n\n    Vote:\n      type: object\n      required:\n        - electionId\n        - index\n        - m\n        - timestamp\n      properties:\n        electionId:\n          type: string\n          description: Id of election\n        index:\n          type: integer\n          description: Index number of vote sind election start\n        m:\n          type: string\n          description: Vote message\n        timestamp:\n          type: integer\n          format: int64\n          description: Timestamp of moment when vote has been processed\n        proof:\n          $ref: '#/components/schemas/Proof'\n\n    VoteCreate:\n      type: object\n      required:\n        - electionId\n        - m\n        - signedData\n      properties:\n        electionId:\n          type: string\n          description: Id of elections\n        m:\n          type: string\n          description: Vote to be voted\n        signedData:\n          $ref: '#/components/schemas/SignedData'\n\n    SignedData:\n      type: object\n      required:\n        - publicKey\n        - sign\n      properties:\n        publicKey:\n          type: string\n          description: Public key of voter\n        sign:\n          type: string\n          description: Signed by voter message to verify his public key and message\n\n    Proof:\n      type: object\n      required:\n        - digest\n        - proof\n        - postDigest\n      properties:\n        digest:\n          type: string\n          description: Digest before vote\n        proof:\n          type: string\n          description: Proof generated by tree after vote has been applied\n        postDigest:\n          type: string\n          description: Digest after vote\n\n    BooleanResultResponse:\n      type: object\n      properties:\n        result:\n          type: boolean\n          description: Result of a performed operation\n\n    StringResultResponse:\n          type: object\n          properties:\n            result:\n              type: string\n              description: Result of a performed operation\n\n    ApiErrorResponse:\n      type: object\n      properties:\n        msg:\n          type: string\n          description: Error description\n        statusCode:\n          type: integer\n          description: Status code of error"
		}
	},
	"Error": "parse: parse spec: paths: /elections/{electionId}: put: operation \"prolongElection\": parse path: path parameter not specified: \"electionId\""
}