{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/teamdigitale/api-openapi-samples"
		},
		"file": {
			"name": "observations.yaml",
			"size": 0,
			"path": "openapi-v3/observations.yaml",
			"byteSize": 20113,
			"content": "openapi: 3.0.0\ninfo:\n  version: 0.0.1beta\n  title: Bozza API esposizione osservazioni\n  x-summary: Osservazioni covid-19 per Unità Amministrativa\n  x-api-id: 6bd55174-6b64-4112-9d47-ed610b304cbf\n  termsOfService: https://null.example\n  contact:\n    name: Roberto Polli -\n    url: https://twitter.com/ioggstream\n    email: roberto@teamdigitale.governo.it\n  description: |-\n    Questa API permette di pubblicare delle collezioni di osservazioni di determinati parametri\n    associati a diverse unità amministrative con granularità griornaliera.\n\n    Le tipologie di unità amministrative supportate sono:\n    - comune, provinica (unità territoriale sovracomunale) regione.\n\n    Le osservazioni sono modellate utilizzanod l'ontologia italiana che permette di utilizzare\n    dei parametri univocamente determinati e dal significato ben definito.\n    Nella versione in beta attuale non è stato ancora definito il vocabolario dei parametri (observation parameter).\n    Gli erogatori possono col tempo aggiungere o rimuovere i parametri pubblicati.\n    La definizione dei parametri può essere recuperata tramite un apposito endpoint.\n    E' anche possibile ritornare insieme ad ogni singola osservazione dei metadati utili ad indicarne\n    il corretto significato.\n\n    Tramite la content-negotiation  ed i relativi header (Accept, Accept-Language) è possibile supportare:\n    - più lingue differenti (Eg. italiano e inglese);\n    - più media-type: application/json, application/geo+json e text/csv.\n    In particolare le response in geojson ritornano delle FeatureCollection dove ogni singola\n    collezione di dati è acclusa nelle properties di ogni feature.\n\n    Nota: una possibile semplificazione potrebbe permettere di ritornare un link al file geojson di riferimento.\n\n    La possibilità di fare ricerche è opzionale e supporta solo query limitate.\n\n    I path sono separati perché non è detto che la somma (eg. dei dati delle\n    province) corrisponda col totale\n\n    dei dati regionali a causa di possibili difficoltà nel campionamento o di\n    problematiche amministrative\n\n    (eg. trasferimenti, disallineamenti dovuti alla durata temporale dei\n    campionamenti, errori umani, ...).\nservers:\n- url: https://localhost/covid-19/v1\n  description: |-\n    development server\n  x-sandbox: true\ntags:\n  - name: data\n    description: Returns data.\n  - name: metadata\n    description: Returns metadata.\nx-commons:\n  common-responses: \u0026common-responses\n    default:\n      $ref: '#/components/responses/default'\n    \"429\":\n      $ref: '#/components/responses/429'\n    \"503\":\n      $ref: '#/components/responses/503'\n\n\npaths:\n  /observations/administrative-units/{administrative_unit}/{administrative_unit_id}:\n    get:\n      tags:\n        - data\n      description: |-\n        Recupera una serie di osservazioni associate ad una unità amministrativa,\n        identificata dal codice istat.\n\n        Per recuperare osservazioni relative ad altre fonti possiamo definire\n        ulteriori endpoint.\n\n        Utilizzando questo modello di interfaccia, si limita l'esposizione\n        dei dati a dei profili ben specifici dove sono individuate\n        le unità amministrative di riferimento, i parametri di osservazione\n        esposti e gli intervalli temporali.\n        Questa scelta permette agli erogatori di individuare il perimetro\n        di esposizione desiderato.\n\n        E' possibile estendere questo modello ad altre fonti di dato (eg. le ASL)\n        o ad altre tipologie di dato aggiungendo nuovi endpoint,\n        o profilando tramite schemi autorizzativi (eg. openid connect) l'accessso\n        ai path.\n\n        Se i dati recuperabili da questo endpoint sono tutti pubblici, è possibile fare\n        caching sulle ricerche includendo anche i query-parameter. Se una parte dei dati deve essere\n        erogata tramite schemi autorizzativi il caching andrebbe o disabilitato o delegato a degli\n        endpoint destinati a profili pubblici.\n      operationId: observations.get_administrative_unit_data\n      parameters:\n      - $ref: '#/components/parameters/AcceptLanguage'\n      - name: administrative_unit\n        description: |-\n          The type of administrative unit, related to the\n          https://github.com/italia/daf-ontologie-vocabolari-controllati/tree/master/VocabolariControllati/territorial-classifications\n          vocabulary, in italian.\n        schema:\n          type: string\n          enum:\n          - regioni\n          - comuni\n          - province\n          example: regioni\n        in: path\n        required: true\n      - name: administrative_unit_id\n        description: |-\n          Administrative units use the Istat identifier.\n        schema:\n          type: string\n        examples:\n          Umbria:\n            summary: Umbria\n            value: 10\n        in: path\n        required: true\n      - name: metadata\n        in: query\n        description: |-\n          Include Observations metadata in the `_meta` property. This includes\n          administrative_unit information.\n        schema:\n          type: boolean\n          default: false\n      - name: recurse\n        in: query\n        description: |-\n          Returns observations from sub-administration units, eg. provinces and cities.\n          This feature can be disabled or delegated to another endpoint.\n          Json responses are enveloped in an object supporting the return of multiple datasets.\n        schema:\n          type: boolean\n          default: false\n      - name: embed\n        schema:\n          type: string\n        in: query\n      - name: phenomenon_time_start\n        in: query\n        schema:\n          $ref: '#/components/schemas/Temporal'\n      - name: phenomenon_time_end\n        in: query\n        schema:\n          $ref: '#/components/schemas/Temporal'\n      - name: parameter_ids\n        in: query\n        schema:\n          type: array\n          items:\n            $ref: '#/components/schemas/ObservationParameterId'\n      responses:\n        \u003c\u003c: *common-responses\n        '200':\n          $ref: '#/components/responses/AdministrativeUnitDatasets'\n\n  /observation-parameters/{parameter_id}:\n    get:\n      description: |-\n        This endpoint helps to identify the semantic definition of an observation parameter.\n      operationId: observations.get_parameter\n      tags:\n        - metadata\n      parameters:\n      - $ref: '#/components/parameters/AcceptLanguage'\n      - name: parameter_id\n        schema:\n          $ref: '#/components/schemas/ObservationParameterId'\n        in: path\n        required: true\n      responses:\n        \u003c\u003c: *common-responses\n        \"200\":\n           description: Returns the information on a parameter.\n           content:\n             application/json:\n               schema:\n                 $ref: '#/components/schemas/ObservationParameter'\n\n\ncomponents:\n\n  examples:\n    AdministrativeUnit:\n      summary: Una unità amministrativa\n      value: \u0026AdministrativeUnitPerugia\n        country_id: ITA\n        country_name: Italia\n        region_id: '10'\n        region_name: Umbria\n        province_id: '054'\n        province_name: Perugia\n        province_acronym: PG\n        city_id: '054039'\n        city_name: Perugia\n    # CSV\n    OsservazioniComuneAllCSV:\n      summary: CSV Comune short\n      description: Dati di un comune con tutti i campi possibili\n      value: \"\n        phenomenon_time,administrative_unit,administrative_unit_id,\\\n          positive_cases_with_date,in_intensive_care,cumulative_hospitalized,cumulative_positives,isolamento_domiciliare,variazione_totale_positivi,nuovi_positivi,dimessi_guariti,deceduti,totale_casi,tamponi,casi_testati\\n\n        2020-05-26,comune,054039,231,9,240,1369,1609,-62,4,1132,366,3107,48903,34428\\n\n        \"\n    ObservationsRegionCSV:\n      summary: Dati di una regione\n      description: Non ci sono  dati relativi a comune e provincia\n      value: |-\n        phenomenon_time,administrative_unit,administrative_unit_id,positive_cases_with_date,in_intensive_care,region_id,region_name\n        2020-05-20,regione,10, 10, 4,10,Umbria\n        2020-05-21,regione,10, 11, 3,10,Umbria\n        2020-05-22,regione,10,  8, 5,10,Umbria\n    ObservationsCityCSV:\n      summary: Dati di un comune\n      value: \"\\n\n        phenomenon_time,administrative_unit,administrative_unit_id,positive_cases_with_date,in_intensive_care,\\\n          region_id,region_name,\\\n          province_id,province_name,\\\n          city_id,city_name\\n\n        2020-05-20,comune,054039, 10, 4,10,Umbria,054,Perugia,054039,Perugia\\n\n        2020-05-21,comune,054039, 11, 3,10,Umbria,054,Perugia,054039,Perugia\\n\n        2020-05-22,comune,054039,  8, 5,10,Umbria,054,Perugia,054039,Perugia\\n\n        \"\n    ObservationShort:\n      summary: a single, short observation\n      value: \u0026ObservationShort\n        phenomenon_time: 2020-05-26\n        parameter_id: positive_cases_with_date\n        value: 10\n    ObservationLong:\n      summary: an Observation with _embed fields\n      value: \u0026ObservationLong\n        \u003c\u003c: *ObservationShort\n        generation_time: \"2020-05-22\"\n        feature_of_interest_id: patient\n        value_measurement_unit: people\n        _embedded:\n          parameter:\n              '@id': https://w3id.org/italia/data/observation-parameter/positive_cases_with_date\n              name: casi sintomatici con data inizio sintomi\n          feature_of_interest:\n            name: Paziente\n            '@id': https://w3id.org/italia/data/feature-of-interest/patient\n    ObservationsRegion:\n      summary: Osservazioni su una singola unità amministrativa.\n      value: \u0026ObservationsRegion\n        _meta:\n          administrative_unit:\n            \u003c\u003c: *AdministrativeUnitPerugia\n          source:\n            IPA_code: r_umbria\n            description: Regione Umbria\n            url: https://www.indicepa.gov.it/ricerca/n-dettaglioservfe.php?cod_amm=r_umbria\n        items:\n        - value: 4\n          parameter_id: in_intensive_care\n          phenomenon_time: \"2020-05-20\"\n        - value: 3\n          parameter_id: in_intensive_care\n          phenomenon_time: \"2020-05-21\"\n          modified: \"2020-05-21\"\n        - value: 5\n          parameter_id: in_intensive_care\n          phenomenon_time: \"2020-05-20\"\n        - value: 11\n          parameter_id: positive_cases_with_date\n          phenomenon_time: \"2020-05-21\"\n          modified: \"2020-05-21\"\n        - value: 8\n          parameter: positive_cases_with_date\n          generation_time: \"2020-05-22\"\n          phenomenon_time: \"2020-05-22\"\n          modified: \"2020-05-22\"\n        - \u003c\u003c: *ObservationLong\n    DatasetRegion:\n      summary: Il dataset di una regione.\n      value: \u0026DatasetRegion\n        items:\n          - \u003c\u003c: *ObservationsRegion\n    # GeoJson\n    GeoUmbria: \u0026GeoUmbria\n      description:  https://ioggstream.github.io/api-confini-amministrativi/2020-01-01/generalizzata/comune/002082.geojson\n      summary: A geojson region\n      value:\n        type: \"Feature\"\n        geometry:\n          type: \"Polygon\"\n          coordinates: []\n        properties: {}\n    ObservationGeo:\n      summary: embedded geojson\n      value:\n        \u003c\u003c: *GeoUmbria\n        properties:\n          $ref: '#/components/examples/ObservationsRegion/value'\n    ObservationsRegionGeo:\n      summary: geojson embedded\n      value: \u0026ObservationsRegionGeo\n        type: Feature\n        geometry: {}\n        properties:\n          \u003c\u003c: *ObservationsRegion\n    FeatureCollection:\n      summary: A geojson collection with observation-parameter data\n      value:\n        type: FeatureCollection\n        features:\n          - \u003c\u003c: *ObservationsRegionGeo\n  responses:\n    \"429\":\n      $ref: 'https://teamdigitale.github.io/openapi/0.0.6/definitions.yaml#/responses/429TooManyRequests'\n    \"503\":\n      $ref: 'https://teamdigitale.github.io/openapi/0.0.6/definitions.yaml#/responses/503ServiceUnavailable'\n    default:\n      $ref: 'https://teamdigitale.github.io/openapi/0.0.6/definitions.yaml#/responses/default'\n    AdministrativeUnitDatasets:\n      description: |-\n        Elenca delle collezioni di osservazioni\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ObservationDataset'\n          examples:\n            Regione:\n              $ref: '#/components/examples/DatasetRegion'\n        text/csv:\n          examples:\n            ComuneCSV:\n              $ref: '#/components/examples/ObservationsCityCSV'\n            RegioneCSV:\n              $ref: '#/components/examples/ObservationsRegionCSV'\n        application/geo+json:\n          schema:\n            $ref: '#/components/schemas/GeoJsonData'\n          examples:\n            FeatureCollection:\n              $ref: '#/components/examples/FeatureCollection'\n  parameters:\n    AcceptLanguage:\n      description: |-\n        Language selection is based on content-negotiation.\n        The adopted schema shows the subset of all the values\n        that are allowed.\n      in: header\n      schema:\n        $ref: '#/components/schemas/Language'\n      name: Accept-Language\n      example: \"it\"\n  schemas:\n    GeoJsonFeature:\n      $ref: 'https://geojson.org/schema/Feature.json'\n    GeoJsonData:\n      allOf:\n        - $ref: '#/components/schemas/GeoJsonFeature'\n        - properties:\n            properties:\n              $ref: '#/components/schemas/Observations'\n      example:\n        $ref: '#/components/examples/ObservationGeo'\n    Observations:\n      description: |-\n        This is a collection of observations, together with metadata useful\n        to define a set of common properties for all the observations.\n\n        For the AdministrativeUnit, metadata include locality information\n      properties:\n        _meta:\n          $ref: '#/components/schemas/Metadata'\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/Observation'\n    ObservationDataset:\n      description: |-\n        An ObservationDataset contains a list of Observations: one for\n        each AdministrativeUnit.\n      properties:\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/Observations'\n    Metadata:\n      description: |-\n        Metadata associated to a given observation collection.\n      properties:\n        administrative_unit:\n          $ref: '#/components/schemas/AdministrativeUnit'\n        phenomenon_time_start:\n          $ref: '#/components/schemas/Temporal'\n        phenomenon_time_end:\n          $ref: '#/components/schemas/Temporal'\n        source:\n          type: string\n          format: uri\n          description: |-\n            The information source.\n    Temporal:\n      description: A temporal data that can be a date or a date-time\n      oneOf:\n        - type: string\n          format: date\n        - type: string\n          format: date-time\n    ObservationParameterId:\n      type: string\n      description: A short string representing the parameter in a given namespace\n      enum: [positive_cases_with_date, hospitalized-with-symptoms,in_intensive_care,totale_ospedalizzati,\n             isolamento_domiciliare,totale_positivi,variazione_totale_positivi,nuovi_positivi,dimessi_guariti,\n             deceduti,totale_casi,tamponi,casi_testati]\n    ObservationParameter:\n      x-describedby: https://w3id.org/italia/onto/IoT/ObservationParameter\n      description: |-\n        Rappresenta un parametro (proprietà) dell'osservazione\n        di una caratteristica di interesse. Per esempio, se diciamo che\n        la temperatura della cucina è di 28 gradi celsius, la temperatura rappresenta l'attributo osservato.\n      properties:\n        \"@id\":\n          type: string\n          format: url\n        id:\n          $ref: '#/components/schemas/ObservationParameterId'\n        name:\n          type: string\n          description: |-\n            A long description of the parameter.\n        description:\n          type: string\n          description: |-\n            A very long and detailed description of the parameter.\n      example:\n        \"@id\": https://w3id.org/italia/data/observation-parameter/positive_cases_with_date\n        id: positive_cases_with_date\n        name: \u003e-\n          casi sintomatici con data inizio sintomi\n    Language:\n      default: it\n      description: \u003e-\n        Allowed language codes.\n      enum:\n      - it\n      - en\n      type: string\n    Observation:\n      type: object\n      additionalProperties: true\n      description: |-\n        An Observation. This scheme is extensible and supports both a minimum set of information,\n        eg\n\n        ```\n        value: 4\n        parameter_id: in_intensive_care\n        phenomenon_time: \"2020-05-20\"\n        ```\n\n        and extensive data and metadata via the `_embed` property, together with a wide range of\n        time-related data, allowing to annotate the modification time of the value or the measurement_unit.\n\n        ```\n        generation_time: \"2020-05-22\"\n        modified: 2020-05-30\n        feature_of_interest_id: patient\n        value_measurement_unit: people\n        _embedded:\n          parameter:\n             '@id': https://w3id.org/italia/data/observation-parameter/positive_cases_with_date\n             name: symptomatic cases with start date of symptoms.\n         feature_of_interest:\n           name: Patient\n           '@id': https://w3id.org/italia/data/feature-of-interest/patient\n        ```\n      required:\n      - parameter_id\n      - value\n      - phenomenon_time\n      properties:\n        uuid:\n          type: string\n          format: url\n        phenomenon_time:\n          $ref: '#/components/schemas/Temporal'\n        modified:\n          $ref: '#/components/schemas/Temporal'\n        generation_time:\n          $ref: '#/components/schemas/Temporal'\n        feature_of_interest_id:\n          type: string\n          description: |-\n            The observed feature, eg: a patient.\n        parameter_id:\n          type: string\n        value:\n          type: number\n          format: int64\n          example: 10\n        value_measurement_unit:\n          $ref: '#/components/schemas/MeasurementUnit'\n      example:\n        phenomenon_time: 2020-05-26\n        parameter_id: positive_cases_with_date\n        feature_of_interest_id: patient\n        value: 10\n        value_measurement_unit: units\n        _embedded:\n          parameter:\n              '@id': https://w3id.org/italia/data/observation-parameter/positive_cases_with_date\n              name: casi sintomatici con data inizio sintomi\n          feature_of_interest:\n              '@id': https://w3id.org/italia/data/observation-parameter/positive_cases_with_date\n              name: casi sintomatici con data inizio sintomi\n    MeasurementUnit:\n      x-describedby: https://w3id.org/italia/data/measurement-unit\n      type: string\n      enum:\n      - meter\n      - units\n      - people\n      description: |-\n        See https://w3id.org/italia/data/measurement-unit for a vocabulary\n        This is work-in-progress!\n    AdministrativeUnit:\n      type: object\n      description: |-\n        Una unità amministrativa con la sua descrizione.\n      example: \u0026AdministrativeUnitExample\n        country_id: ITA\n        country_name: Italia\n        region_id: '10'\n        region_name: Umbria\n        province_id: '054'\n        province_name: Perugia\n        province_acronym: PG\n        city_id: '054039'\n        city_name: Perugia\n      required:\n        - country_id\n        - region_id\n      additionalProperties: true\n      properties:\n        country_id:\n          type: string\n          description: \u003e-\n            vedi\n            https://github.com/italia/daf-ontologie-vocabolari-controllati/blob/master/VocabolariControllati/administrative-units/countries/italy/italy.ttl\n        country_name:\n          type: string\n          example: Italia\n        region_id:\n          type: string\n        region_name:\n          type: string\n        province_id:\n          type: string\n        province_name:\n          type: string\n        province_acronym:\n          type: string\n        city_name:\n          type: string\n        city_id:\n          type: string\n          description: |-\n            Codice Istat alfanumerico del comune.\n"
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"GeoJsonData\": parse schema: allOf: [0]: parse schema: resolve \"#/components/schemas/GeoJsonFeature\": parse schema: resolve \"https://geojson.org/schema/Feature.json\": find schema: external base \"https://geojson.org/schema/Feature.json\" is not supported"
}