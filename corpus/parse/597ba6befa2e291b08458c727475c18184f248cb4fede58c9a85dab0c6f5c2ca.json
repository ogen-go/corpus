{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/LiteFarmOrg/LiteFarm"
		},
		"file": {
			"name": "doc.api.yaml",
			"size": 0,
			"path": "packages/api/doc.api.yaml",
			"byteSize": 100641,
			"content": "openapi: 3.0.1\ninfo:\n  title: Litefarm\n  description: 'REST documentation for Litefarm API. (last update March 4th)'\n  contact:\n    email: support@litefarm.org\n  version: 1.0.1\nservers:\n  - url: http://beta.litefarm.org/\n  - url: http://app.litefarm.org/\ntags:\n  - name: contact\n    description: .\n  - name: crop\n    description: Crop reading and creation for your farm\n  - name: farm\n    description: Operations related to a farm\n  - name: users\n    description: User related operations\n  - name: userFarm\n    description: Operations related to the userFarm relationship\n  - name: disease\n    description: Operations related to disease\n  - name: expense\n    description: Operations related to expenses\n  - name: TBR\n    description: Operations we might need to review\n  - name: fertilizer\n    description: Operations related to fertilizer\n  - name: fieldCrop\n    description: Operations related to field crops\n  - name: field\n    description: Operations related to fields\n  - name: insight\n    description: Insights and statistis related to a farm\n  - name: log\n    description: Operations related to logs\n  - name: pesticide\n    description: Operations related to pesticides\n#  - name: plan\n#    description: Operations related to plan relation.\n  - name: price\n    description: Operations related to price relation.\n  - name: roles\n  - name: sale\n    description: Operations related to sales\n  - name: shift\n    description: Operations related to shifts\n  - name: signup\n    description: Signup related operations\n  - name: taskType\n    description: Task type related operations\n  - name: userFarmData\n    description: userFarm data relation operations\n  - name: yield\n    description: yield related operations\n  - name: location\n    description: Locations on your farm\npaths:\n  /user:\n    post:\n      tags:\n        - users\n      summary: Create a new user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateUser'\n      responses:\n        201:\n          description: successfully created user\n        400:\n          description: Bad Request\n  /user/invite:\n    post:\n      tags:\n        - users\n      summary: Invite a new user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        201:\n          description: successfully created user\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        400:\n          description: Bad Request\n  /user/accept_invitation:\n    post:\n      tags:\n        - users\n      summary: Accept invitation and create user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateUser'\n      responses:\n        201:\n          description: successfully created user\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InviteUserResponse'\n        400:\n          description: Bad Request\n    put:\n      tags:\n        - users\n      summary: Accept invitation using google sso, this changes the user id previously created.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateUser'\n      responses:\n        201:\n          description: successfully created user\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InviteUserResponse'\n        400:\n          description: Bad Request\n\n  /user/pseudo:\n    post:\n      tags:\n        - users\n      summary: Creates a pseudo user, frontend sends @pseudo email\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        201:\n          description: successfully created user\n        400:\n          description: Bad Request\n  /user/deactivate/{userId} :\n    patch:\n      tags:\n        - users\n      summary: Sets user status to INACTIVE\n      operationId: deactivateUser\n      parameters:\n        - name: userId\n          in: path\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        404:\n          description: User not found\n        200:\n          description: Deactivated User\n        400:\n          description: bad request\n  /user/consent/{userId}:\n    patch:\n      tags:\n        - users\n      summary: Change consent acceptance boolean to user\n      operationId: consentUser\n      parameters:\n        - name: userId\n          in: path\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        409:\n          description: Update failed\n        200:\n          description: Consent patch successful\n        400:\n          description: bad request\n  /user/{userId}:\n    get:\n      tags:\n        - users\n      parameters:\n        - name: userId\n          in: path\n          required: true\n          schema:\n            type: string\n            format: uid\n      responses:\n        400:\n          description: Bad Request.\n        200:\n          description: Successfully retrieved\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n    put:\n      tags:\n        - users\n      parameters:\n        - name: userId\n          in: path\n          required: true\n          schema:\n            type: string\n            format: uid\n      summary: Update an existing user. (Only accessible if on the users session)\n      requestBody:\n        description: User object to be updated\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateUserRequest'\n        required: true\n      responses:\n        400:\n          description: Bad request, missing or invalid data.\n        200:\n          description: Successfully updated user\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UpdateUserRequest'\n    delete:\n      tags:\n        - users\n      parameters:\n        - name: userId\n          in: path\n          required: true\n          schema:\n            type: string\n            format: uid\n      summary: Soft delete user from DB\n      responses:\n        403:\n          description: Not authorized to delete user\n        201:\n          description: Successfully deleted user\n        404:\n          description: User not found\n  /user/farm/{farmId}:\n    get:\n      tags:\n        - users\n        - farm\n      parameters:\n        - name: farmId\n          in: path\n          required: true\n          schema:\n            type: string\n            format: uid\n      summary: Get all users on a particular farm\n      description: Will return all users for a farm.\n      responses:\n        200:\n          description: users successfully retrieved\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n        400:\n          description: Bad request\n        403:\n          description: Unauthorized to access this farm\n        404:\n          description: no users found for this farm\n  /user/active/farm/{farmId}:\n    get:\n      tags:\n        - users\n        - farm\n      parameters:\n        - name: farmId\n          in: path\n          required: true\n          schema:\n            type: string\n            format: uid\n      summary: Get all ACTIVE users on a particular farm\n      description: Will return all Active users for a farm.\n      responses:\n        200:\n          description: users successfully retrieved\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n        400:\n          description: Bad request\n        403:\n          description: Unauthorized to access this farm\n        404:\n          description: no users found for this farm\n  /farm:\n    post:\n      tags:\n        - farm\n      summary: Creates a farm\n      operationId: postFarm\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Farm'\n      responses:\n        400:\n          description: Bad Request or invalid data\n        201:\n          description: successfully created a farm\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Farm'\n  /farm/{farmId}:\n    get:\n      tags:\n        - farm\n      summary: Get a farm by its Id\n      description: Gets farm info by Id if the user is part of it\n      operationId: getFarmById\n      parameters:\n        - name: farmId\n          in: path\n          description: Farm Id\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        200:\n          description: successfully got farm\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Farm'\n        400:\n          description: Bad Request or invalid data\n    put:\n      tags:\n        - farm\n      summary: Update a particular farm\n      operationId: updateFarmById\n      parameters:\n        - name: farmId\n          in: path\n          required: true\n          description: Farm id\n          schema:\n            type: string\n            format: uuid\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Farm'\n      responses:\n        200:\n          description: Successfully update a farm\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Farm'\n        400:\n          description: Bad request.\n        404:\n          description: Farm not found\n        403:\n          description: User not authorized to access farm, or does not hold permission to update farm info.\n    delete:\n      tags:\n        - farm\n      summary: Delete a particular farm (soft)\n      operationId: deleteFarmById\n      parameters:\n        - name: farmId\n          in: path\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        200:\n          description: Successfully deleted farm\n        400:\n          description: Bad request.\n        404:\n          description: Farm not found\n        403:\n          description: User not authorized to access farm, or does not hold permission to delete farm.\n  /user_farm/user/{userId}:\n    get:\n      tags:\n        - users\n        - userFarm\n      summary: Gets all userFarms a user is in\n      operationId: getUserFarmByUserId\n      parameters:\n        - name: userId\n          in: path\n          description: user id thats part of one or more user farms\n          required: true\n          schema:\n            type: string\n      responses:\n        404:\n          description: This user has no userfarms.\n        400:\n          description: Bad Request\n        200:\n          description: Successfully retrieved UserFarms for this user\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  allOf:\n                    - $ref: '#/components/schemas/Farm'\n                    - $ref:  '#/components/schemas/User'\n                    - $ref: '#/components/schemas/UserFarm'\n  /user_farm/farm/{farmId}:\n    get:\n      tags:\n        - farm\n        - userFarm\n      summary: Gets all userFarms for a specific farm (response filtered in the case of worker)\n      operationId: getUserFarmByFarmId\n      parameters:\n        - name: farmId\n          in: path\n          description: farm id thats part of one or more userfarms\n          required: true\n          schema:\n            type: string\n      responses:\n        400:\n          description: Bad Request\n        200:\n          description: Successfully retrieved UserFarms for this user\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  allOf:\n                    - $ref: '#/components/schemas/Farm'\n                    - $ref: '#/components/schemas/User'\n                    - $ref: '#/components/schemas/UserFarm'\n  /user_farm/active/farm/{farmId}:\n    get:\n      tags:\n        - farm\n        - userFarm\n      summary: Gets all userFarms for a specific farm (response filtered in the case of worker) with status active\n      operationId: getUserFarmByFarmId\n      parameters:\n        - name: farmId\n          in: path\n          description: farm id thats part of one or more active userfarms\n          required: true\n          schema:\n            type: string\n      responses:\n        400:\n          description: Bad Request\n        200:\n          description: Successfully retrieved UserFarms for this farm (only active)\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  allOf:\n                    - $ref: '#/components/schemas/Farm'\n                    - $ref: '#/components/schemas/User'\n                    - $ref: '#/components/schemas/UserFarm'\n  /user_farm/role/permissions:\n    get:\n      tags:\n        - userFarm\n      summary: Gets all role permissions From Auth0????....\n      operationId: Auth0RolePermission\n      responses:\n        200:\n          description: role permissions retrieved\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    role_id:\n                      type: number\n                    name:\n                      type: string\n                    description:\n                      type: string\n                    permissions:\n                      type: array\n                      items:\n                        type: number\n  /user_farm:\n    post:\n      tags:\n        - userFarm\n      summary: Create a relationship between a user and a farm\n      operationId: postUserFarm\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserFarm'\n      responses:\n        201:\n          description: User farm created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserFarm'\n        400:\n          description: Bad Request\n  /user_farm/consent/farm/{farmId}/user/{userId}:\n    patch:\n      tags:\n        - userFarm\n      summary: Update consent and/or consent version, send email to user confirming consent update (positive or negative)\n      operationId: patchUserFarmConsent\n      parameters:\n        - name: farmId\n          in: path\n          description: farm associated with userFarm\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - name: userId\n          in: path\n          description: user associated with userFarm\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Consent boolean and version\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                has_consent:\n                  type: boolean\n                consent_version:\n                  type: string\n      responses:\n        200:\n          description: successfuly updated consent and or consent version, sent email to user\n        404:\n          description: a userFarm with that user and farm was not found\n        400:\n          description: bad request.\n  /user_farm/role/farm/{farmId}/user/{userId}:\n    patch:\n      tags:\n        - userFarm\n      summary: Update user role\n      operationId: patchUserFarmRole\n      parameters:\n        - name: farmId\n          in: path\n          description: farm associated with userFarm\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - name: userId\n          in: path\n          description: user associated with userFarm\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: successfuly updated role for userId\n        404:\n          description: a userFarm with that user and farm was not found\n        400:\n          description: bad request. Role_id not found\n  /user_farm/status/farm/{farmId}/user/{userId}:\n    patch:\n      tags:\n        - userFarm\n      summary: Update user status\n      operationId: patchUserFarmStatus\n      parameters:\n        - name: farmId\n          in: path\n          description: farm associated with userFarm\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - name: userId\n          in: path\n          description: user associated with userFarm\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: successfuly updated Status for userId\n        404:\n          description: a userFarm with that user and farm was not found\n        400:\n          description: bad request.\n  /user_farm/onboarding/farm/{farmId}/user/{userId}:\n    patch:\n      tags:\n        - userFarm\n      summary: Update onboarding flags for userFarm\n      operationId: patchUserFarmOnboarding\n      parameters:\n        - name: farmId\n          in: path\n          description: farm associated with userFarm\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - name: userId\n          in: path\n          description: user associated with userFarm\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserFarmFlags'\n      responses:\n        200:\n          description: successfuly updated Status for userId\n        404:\n          description: a userFarm with that user and farm was not found\n        400:\n          description: bad request.\n  /user_farm/wage/farm/{farmId}/user/{userId}:\n    patch:\n      tags:\n        - userFarm\n      summary: Update user wage\n      operationId: patchUserFarmWage\n      parameters:\n        - name: farmId\n          in: path\n          description: farm associated with userFarm\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - name: userId\n          in: path\n          description: user associated with userFarm\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: successfuly updated wage for userId\n        404:\n          description: a userFarm with that user and farm was not found\n        400:\n          description: bad request.\n  /user_farm/accept_invitation:\n    patch:\n      tags:\n        - userFarm\n      summary: Update user status in the farm to active on invitation acceptance\n      operationId: acceptUserFarmINvitation\n      responses:\n        200:\n          description: successfuly updated Status for userId\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InviteUserResponse'\n        404:\n          description: a userFarm with that user and farm was not found\n        400:\n          description: bad request.\n  /user_farm/farm/{farmId}/user/{userId}:\n    get:\n      tags:\n        - userFarm\n      summary: Get a particular userFarm given user and farm ids\n      operationId: getUserFarmByFarmIdUserId\n      parameters:\n        - name: farmId\n          in: path\n          description: farm associated with userFarm\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - name: userId\n          in: path\n          description: user associated with userFarm\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Successfully retrieved userFarm\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/Farm'\n                  - $ref: '#/components/schemas/User'\n                  - $ref: '#/components/schemas/UserFarm'\n  /crop/{cropId}:\n    parameters:\n      - name: cropId\n        in: path\n        required: true\n        schema:\n          type: number\n    get:\n      tags:\n        - crop\n      summary: Get a particular crop\n      operationId: getCropById\n      responses:\n        200:\n          description: returned the crop with the id sent\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Crop'\n        400:\n          description: Bad request\n        403:\n          description: cant access this crop, (crop belongs to a farm you are not part of)\n        404:\n          description: Crop with that id was not found\n    put:\n      tags:\n        - crop\n      summary: Update a particular crop (related to your farm)\n      operationId: updateCropById\n      requestBody:\n        description: crop updated data\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Crop'\n      responses:\n        200:\n          description: Updated crop\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Crop'\n        400:\n          description: Bad Request\n        403:\n          description: unauthorized to update this particular crop\n    delete:\n      tags:\n        - crop\n      summary: Delete a particular crop (that belongs to a farm you are part of)\n      operationId: deleteCropById\n      responses:\n        200:\n          description: (soft) deleted the crop with the id sent\n        400:\n          description: Bad request\n        403:\n          description: cant access this crop, (crop belongs to a farm you are not part of), or you are not allowed to delete it\n        404:\n          description: Crop with that id was not found\n  /crop:\n    post:\n      tags:\n        - crop\n      summary: Create a crop to be linked to your farm\n      operationId: postCrop\n      requestBody:\n        description: crop to create\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Crop'\n      responses:\n        201:\n          description: created crop.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Crop'\n        400:\n          description: bad request.\n        403:\n          description: not allowed to access this farm or to create a crop\n  /crop/farm/{farmId}:\n    get:\n      tags:\n        - farm\n        - crop\n      summary: Get all crops with no farm relation AND the ones related to my farm\n      operationId: getCropByFarmId\n      parameters:\n        - name: farmId\n          in: path\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        200:\n          description: Returning all crops related to your farm and with no relation.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Crop'\n        400:\n          description: Bad Request.\n        403:\n          description: Unauthorized to get crops from this farm.\n  /disease/farm/{farmId}:\n    get:\n      tags:\n        - farm\n        - disease\n      summary: Get All diseases, including the ones related to your farm\n      operationId: getDiseaseByFarm\n      parameters:\n        - name: farmId\n          in: path\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        200:\n          description: returns diseases on the system and created by your farm\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Disease'\n        403:\n          description: you have no permission to see diseases on this farm\n  /disease:\n    post:\n      tags:\n        - disease\n      summary: Disease to be created\n      operationId: postDisease\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Disease'\n      responses:\n        201:\n          description: Created the sent diasease\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Disease'\n        400:\n          description: Bad Request\n        403:\n          description: you have no permission to see diseases on this farm\n  /expense:\n    post:\n      tags:\n        - expense\n      summary: Create a new farm expense\n      operationId: postFarmExpense\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FarmExpense'\n      responses:\n        201:\n          description: Created farm expense\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FarmExpense'\n        400:\n          description: Bad Request\n    put:\n      tags:\n        - expense\n      summary: Update an existing farm expense. (Its actually deleting, also, no id provided in params? )\n      operationId: putFarmExpense\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FarmExpense'\n      responses:\n        200:\n          description: successfully deleted\n        400:\n          description: Bad request\n  /expense/{expenseId}:\n    delete:\n      tags:\n        - expense\n      summary: Delete a specific expense on my farm\n      operationId: deleteExpenseByExpenseId\n      parameters:\n        - name: expenseId\n          in: path\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        403:\n          description: You have no permission to delete expenses on this farm\n        400:\n          description: Bad request\n        200:\n          description: Successfully deleted the expense\n  /expense/farm/{farmId}:\n    get:\n      tags:\n        - expense\n      summary: Get expenses on my farm\n      operationId: getExpenseByFarmId\n      parameters:\n        - name: farmId\n          in: path\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        403:\n          description: You have no permission to check expenses on this farm\n        400:\n          description: Bad request\n        200:\n          description: retrieved expenses on your farm\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/FarmExpense'\n  /expense_type:\n    post:\n      tags:\n        - expense_type\n      summary: Create an expense type linked to you farm\n      operationId: postExpenseType\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FarmExpenseType'\n      responses:\n        201:\n          description: returns the recently created expense\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FarmExpenseType'\n        400:\n          description: Bad Request\n        403:\n          description: No permission to add farm expenses\n    get:\n      tags:\n        - expense_type\n      summary: Gets the default expense types\n      operationId: getExpenseTypeDefault\n      responses:\n        200:\n          description: returns the default expense types\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/FarmExpenseType'\n        400:\n          description: Bad request\n        403:\n          description: No permission to get farm expenses\n  /expense_type/{expenseTypeId}:\n    delete:\n      tags:\n        - expense_type\n      summary: Deletes expense type by id. (Cant be Default one)\n      operationId: deleteExpenseTypeById\n      parameters:\n        - name: expenseTypeId\n          in: path\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        200:\n          description: successfully deleted expense type\n        404:\n          description: Expense Type not found\n        400:\n          description: Bad Request\n  /expense_type/farm/{farmId} :\n    get:\n      tags:\n        - expense_type\n      summary: Get expense types linked to your farm and default ones\n      operationId: getExpenseTypeByFarmId\n      parameters:\n        - name: farmId\n          in: path\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        200:\n          description: returns the expense types linked to your farm\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/FarmExpenseType'\n        400:\n          description: Bad request\n        403:\n          description: No permission to get farm expenses\n  /export/map/farm/{farmId}:\n    post:\n      summary: Send the current snapshot of your farm\n      operationId: exportMapByFarmId\n      parameters:\n        - name: farmId\n          in: path\n          required: true\n          schema:\n            type: string\n            format: uuid\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                file:\n                  type: binary\n      responses:\n        200:\n          description: successfuly sent email with farm image\n        400:\n          description: Bad request\n  /fertilizer/farm/{farmId}:\n    parameters:\n      - name: farmId\n        in: path\n        required: true\n        schema:\n          type: string\n          format: uuid\n    get:\n      tags:\n        - fertilizer\n      summary: Get all fertilizers linked to your farm and default ones\n      operationId: getFertilizersByFarmId\n      responses:\n        200:\n          description: retrieved list of fertilizers\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Fertilizer'\n        400:\n          description: Bad request\n        403:\n          description: Can't access fertilizers or you are not allowed to see fertilizers on this farm.\n    post:\n      tags:\n        - fertilizer\n      summary: Create a fertilizer to link to your farm\n      operationId: postFertilizer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Fertilizer'\n      responses:\n        201:\n          description: Retrieves the recently created fertilizer\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Fertilizer'\n        400:\n          description: Bad Request\n        403:\n          description: Not allowed to add fertilizer, or you cant add fertilizers to this farm\n  /fertilizer/{fertilizerId}:\n    delete:\n      tags:\n        - fertilizer\n      summary: Deletes a specific fertilizer\n      operationId: deleteFertilizer\n      parameters:\n        - name: fertilizerId\n          in: path\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        200:\n          description: deleted fertilizer\n        400:\n          description: bad request\n        404:\n          description: fertilizer with that id was not found\n        403:\n          description: not allowed to delete fertilizer.\n  /field_crop/{fieldCropId}:\n    parameters:\n      - name: fieldCropId\n        in: path\n        required: true\n        schema:\n          type: string\n          format: uuid\n    get:\n      tags:\n        - fieldCrop\n      summary: get a specific field crop relation\n      operationId: getFieldCropById\n      responses:\n        200:\n          description: retrieve the specific field crop\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FieldCrop'\n        400:\n          description: Bad Request\n        403:\n          description: No access to this farm, or permission to get field crops.\n    put:\n      tags:\n        - fieldCrop\n      summary: modify a specific field crop relation\n      operationId: updateFieldCropById\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FieldCrop'\n      responses:\n        200:\n          description: Modified field crop with id\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FieldCrop'\n        400:\n          description: Bad request\n        404:\n          description: no field crop found with that id\n        403:\n          description: No access to this farm, or permission to update field crops.\n    delete:\n      tags:\n        - fieldCrop\n      summary: (soft) Delete a specific field crop\n      operationId: deleteFieldCropById\n      responses:\n        200:\n          description: success deleting field crop\n        400:\n          description: Bad request\n        404:\n          description: No fieldCrop found with that id\n        403:\n          description: No access to this farm, or permission to delete field crops.\n  /field_crop:\n    post:\n      tags:\n        - fieldCrop\n      summary: Create a field crop\n      operationId: postFieldCrop\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FieldCrop'\n      responses:\n        201:\n          description: retrieves created fieldCrop\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FieldCrop'\n        400:\n          description: Bad Request\n        403:\n          description: No access to this farm, or permission to create field crops.\n  /field_crop/farm/{farmId}:\n    get:\n      tags:\n        - fieldCrop\n      summary: Get all fieldCrops related to a farm\n      operationId: getFieldCropByFarmId\n      parameters:\n        - name: farmId\n          in: path\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        200:\n          description: retrieve an array with the field crops related to the farm\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/FieldCrop'\n        400:\n          description: Bad Request\n        403:\n          description: No access to this farm, or permission to get field crops.\n  /field_crop/farm/date/{farmId}/{date}:\n    get:\n      tags:\n        - fieldCrop\n        - farm\n      summary: Gets Field crops in which end date is greater than the provided date.\n      operationId: getFieldCropByDateAndFarm\n      parameters:\n        - name: farmId\n          in: path\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - name: date\n          in: path\n          required: true\n          schema:\n            type: string\n            format: date\n      responses:\n        200:\n          description: retrieve a fieldCrop  array that meets criteria\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/FieldCrop'\n        400:\n          description: Bad Request\n        403:\n          description: No access to this farm, or permission to get field crops.\n  /field_crop/expired/farm/{farmId}:\n    get:\n      tags:\n        - fieldCrop\n        - farm\n      summary: Gets field crops that are expired in a particular farm\n      operationId: getExpiredFieldCrop\n      parameters:\n        - name: farmId\n          in: path\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        200:\n          description: retrieve a field crop array that meets the criteria\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/FieldCrop'\n        400:\n          description: Bad Request\n        403:\n          description: No access to this farm, or permission to get field crops.\n  /field/{fieldId}:\n    parameters:\n      - name: fieldId\n        in: path\n        required: true\n        schema:\n          type: string\n          format: uuid\n    put:\n      tags:\n        - field\n      summary: Update a field given its id\n      operationId: updateFieldById\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Field'\n      responses:\n        200:\n          description: retrieves updated field\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Field'\n        400:\n          description: Bad Request\n        403:\n          description: No access to this farm, or permission to update fields.\n        404:\n          description: No field with that id found\n    delete:\n      tags:\n        - field\n      summary: (soft) delete a field given its id\n      operationId: deleteFieldById\n      responses:\n        200:\n          description: Success deleting a field.\n        400:\n          description: Bad Request.\n        403:\n          description: No access to this farm, or permission to delete fields.\n        404:\n          description: No field with that id found.\n  /field:\n    post:\n      tags:\n        - field\n      summary: Creates a field\n      operationId: postField\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Field'\n      responses:\n        201:\n          description: Retrieves created field\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Field'\n        400:\n          description: Bad Request.\n        403:\n          description: No access to this farm, or permission to create fields.\n  /field/farm/{farmId}:\n    get:\n      tags:\n        - farm\n        - field\n      summary: Get all fields within a farm\n      operationId: getFieldsByFarmId\n      parameters:\n        - name: farmId\n          required: true\n          in: path\n          schema:\n            type: string\n            format: uuid\n      responses:\n        200:\n          description: retrieves a list of fields linked to the corresponding farm\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Field'\n        403:\n          description: No access to this farm, or permission to get fields.\n        400:\n          description: Bad Request.\n  /insight/people_fed/{farmId}:\n    get:\n      tags:\n        - insight\n        - farm\n      summary: Gets People fed by farmId\n      operationId: getPeopleFedByFarmId\n      parameters:\n        - name: farmId\n          in: path\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        200:\n          description: retrieves people fed object\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  preview:\n                    type: number\n                  data:\n                    type: array\n                    items:\n                      type: number\n        400:\n          description: Bad Request\n  /insight/soil_om/{farmId}:\n    get:\n      tags:\n        - insight\n        - farm\n      summary: Gets Soil data by farmId\n      operationId: getSoilDataByFarmId\n      parameters:\n        - name: farmId\n          in: path\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        200:\n          description: retrieves insight object\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  preview:\n                    type: number\n                  data:\n                    type: array\n                    items:\n                      type: number\n        400:\n          description: Bad Request\n  /insight/labour_happiness/{farmId}:\n    get:\n      tags:\n        - insight\n        - farm\n      summary: Gets Labour happines data by farmId\n      operationId: getLabourHappinessByFarmId\n      parameters:\n        - name: farmId\n          in: path\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        200:\n          description: retrieves insight object\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  preview:\n                    type: number\n                  data:\n                    type: array\n                    items:\n                      type: number\n        400:\n          description: Bad Request\n  /insight/biodiversity/{farmId}:\n    get:\n      tags:\n        - insight\n        - farm\n      summary: Gets Biodiversity data by farmId\n      operationId: getBioDiversityByFarmId\n      parameters:\n        - name: farmId\n          in: path\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        200:\n          description: retrieves insight object\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  preview:\n                    type: number\n                  data:\n                    type: array\n                    items:\n                      type: number\n        400:\n          description: Bad Request\n  /insight/prices/distance/{farmId}:\n    get:\n      tags:\n        - insight\n        - farm\n      summary: Gets Nearby farm prices data by farmId\n      operationId: getPriceDistanceByFarmId\n      parameters:\n        - name: farmId\n          in: path\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        200:\n          description: retrieves insight object\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  preview:\n                    type: number\n                  data:\n                    type: array\n                    items:\n                      type: number\n        400:\n          description: Bad Request\n  /insight/waterbalance/{farmId}:\n    get:\n      tags:\n        - insight\n        - farm\n      summary: Gets water balance data by farmId\n      operationId: getWaterBalanceByFarmId\n      parameters:\n        - name: farmId\n          in: path\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        200:\n          description: retrieves insight object\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  preview:\n                    type: number\n                  data:\n                    type: array\n                    items:\n                      type: number\n        400:\n          description: Bad Request\n  /insight/waterbalance/schedule/{farmId}:\n    get:\n      tags:\n        - insight\n        - farm\n      summary: Gets water balance schedule by farmId\n      operationId: getWaterBalanceScheduleByFarmId\n      parameters:\n        - name: farmId\n          in: path\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        200:\n          description: retrieves water balance object (no relevant info displayed right now)\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  water_balance_schedule_id:\n                    type: number\n                  farm_id:\n                    type: string\n                    format: uuid\n                  created_at:\n                    type: string\n                    format: date\n        400:\n          description: Bad Request\n  /insight/nitrogenbalance/{farmId}:\n    get:\n      tags:\n        - insight\n        - farm\n      summary: Gets Nitrogen balance data by farmId\n      operationId: getNitrogenBalanceByFarmId\n      parameters:\n        - name: farmId\n          in: path\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        200:\n          description: retrieves insight object\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  preview:\n                    type: number\n                  data:\n                    type: array\n                    items:\n                      type: number\n        400:\n          description: Bad Request\n  /insight/nitrogenbalance/schedule/{farmId}:\n    get:\n      tags:\n        - insight\n        - farm\n      summary: Gets Nitrogen balance schedule by farmId\n      operationId: getNitrogenBalanceScheduleByFarmId\n      parameters:\n        - name: farmId\n          in: path\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        200:\n          description: retrieves Nitrogen Balance Schedule object\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  nitrogen_schedule_id:\n                    type: number\n                  created_at:\n                    type: string\n                    format: date\n                  scheduled_at:\n                    type: string\n                    format: date\n                  farm_id:\n                    type: string\n                    format: uuid\n                  frequency:\n                    type: number\n        400:\n          description: Bad Request\n  /insight/waterbalance:\n    post:\n      tags:\n        - insight\n      summary: Create water balance\n      operationId: postWaterBalance\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/WaterBalance'\n      responses:\n        201:\n          description: created water balance\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WaterBalance'\n        400:\n          description: Bad request\n        403:\n          description: No access to this farm, or permission to create water balance.\n  /insight/waterbalance/schedule:\n    post:\n      tags:\n        - insight\n      summary: Create water balance schedule\n      operationId: postWaterBalanceSchedule\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                water_balance_schedule_id:\n                  type: number\n                created_at:\n                  type: string\n                  format: date\n                farm_id:\n                  type: string\n                  format: uuid\n      responses:\n        201:\n          description: retrieves Insight Object\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  preview:\n                    type: number\n                  data:\n                    type: array\n                    items:\n                      type: number\n        400:\n          description: Bad request\n        403:\n          description: No access to this farm, or permission to create water balance schedule.\n  /insight/nitrogenbalance/schedule:\n    post:\n      tags:\n        - insight\n      summary: Create nitrogen balance schedule\n      operationId: postNitrogenBalanceSchedule\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                nitrogen_schedule_id:\n                  type: number\n                created_at:\n                  type: string\n                  format: date\n                scheduled_at:\n                  type: string\n                  format: date\n                farm_id:\n                  type: string\n                  format: uuid\n                frequency:\n                  type: number\n      responses:\n        201:\n          description: created nitrogen balance schedule\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  nitrogen_schedule_id:\n                    type: number\n                  created_at:\n                    type: string\n                    format: date\n                  scheduled_at:\n                    type: string\n                    format: date\n                  farm_id:\n                    type: string\n                    format: uuid\n                  frequency:\n                    type: number\n        400:\n          description: Bad request\n        403:\n          description: No access to this farm, or permission to create nitrogen balance schedule.\n  /insight/nitrogenbalance/schedule/{scheduleId}:\n    delete:\n      tags:\n        - insight\n      summary: Delete nitrogen schedule\n      operationId: deleteNitrogenScheduleById\n      parameters:\n        - name: scheduleId\n          in: path\n          required: true\n          schema:\n            type: number\n      responses:\n        200:\n          description: Success deleting nitrogen schedule\n        400:\n          description: Bad Request.\n        403:\n          description: No access to this farm, or permission to delete nitrogen schedule.\n  /location/farm/{farmId}:\n    get:\n      tags:\n        - farm\n        - location\n      summary: Get all locations  within a farm\n      operationId: getLocationsByFarmId\n      parameters:\n        - name: farmId\n          required: true\n          in: path\n          schema:\n            type: string\n            format: uuid\n      responses:\n        200:\n          description: retrieves a list of locations linked to the corresponding farm\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/GetLocation'\n        403:\n          description: No access to this farm, or permission to get locations.\n        400:\n          description: Bad Request.\n  /location/gate:\n    post:\n      tags:\n        - location\n      summary: Create a gate\n      operationId: postGate\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Location'\n      responses:\n        200:\n          description: Created the gate\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Location'\n        403:\n          description: No permission to create assets on the map\n  /location/water_valve:\n    post:\n      tags:\n        - location\n      summary: Create a water valve\n      operationId: postWaterValve\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Location'\n      responses:\n        200:\n          description: Created the water valve\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Location'\n        403:\n          description: No permission to create assets on the map\n  /location/buffer_zone:\n    post:\n      tags:\n        - location\n      summary: Created the buffer zone\n      operationId: postBufferZone\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Location'\n      responses:\n        200:\n          description: Created the buffer zone\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Location'\n        403:\n          description: No permission to create assets on the map\n  /location/water_course:\n    post:\n      tags:\n        - location\n      summary: Create a water course\n      operationId: postWaterCourse\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Location'\n      responses:\n        200:\n          description: Created the water course\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Location'\n        403:\n          description: No permission to create assets on the map\n  /location/fence:\n    post:\n      tags:\n        - location\n      summary: Create a fence\n      operationId: postFence\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Location'\n      responses:\n        200:\n          description: Created the fence\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Location'\n        403:\n          description: No permission to create assets on the map\n  /location/ceremonial_area:\n    post:\n      tags:\n        - location\n      summary: Create a Ceremonial Area\n      operationId: postCeremonial\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Location'\n      responses:\n        200:\n          description: Created the ceremonial area\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Location'\n        403:\n          description: No permission to create assets on the map\n  /location/residence:\n    post:\n      tags:\n        - location\n      summary: Create a residence\n      operationId: postResidence\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Location'\n      responses:\n        200:\n          description: Created the residence\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Location'\n        403:\n          description: No permission to create assets on the map\n  /location/ground_water:\n    post:\n      tags:\n        - location\n      summary: Create a ground water area\n      operationId: postGroundWater\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Location'\n      responses:\n        200:\n          description: Created the ground water area\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Location'\n        403:\n          description: No permission to create assets on the map\n  /location/natural_area:\n    post:\n      tags:\n        - location\n      summary: Create a natural area\n      operationId: postNaturalArea\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Location'\n      responses:\n        200:\n          description: Created the natural area\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Location'\n        403:\n          description: No permission to create assets on the map\n  /location/greenhouse:\n    post:\n      tags:\n        - location\n      summary: Create a greenhouse\n      operationId: postGreenhouse\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Location'\n      responses:\n        200:\n          description: Created the greenhouse\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Location'\n        403:\n          description: No permission to create assets on the map\n  /location/barn:\n    post:\n      tags:\n        - location\n      summary: Create a barn\n      operationId: postBarn\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Location'\n      responses:\n        200:\n          description: Created the barn\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Location'\n        403:\n          description: No permission to create assets on the map\n  /location/field:\n    post:\n      tags:\n        - location\n      summary: Create a field\n      operationId: postFieldLocation\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Location'\n      responses:\n        200:\n          description: Created the field\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Location'\n        403:\n          description: No permission to create assets on the map\n  /location/farm_site_boundary:\n    post:\n      tags:\n        - location\n      summary: Create a farm site boundary\n      operationId: postFarmSiteBoundary\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Location'\n      responses:\n        200:\n          description: Created the farm site boundary\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Location'\n        403:\n          description: No permission to create assets on the map\n  /log:\n    post:\n      tags:\n        - log\n      summary: Create a log\n      operationId: postLog\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Log'\n      responses:\n        201:\n          description: Retrieves created log\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Log'\n        400:\n          description: Bad Request\n        403:\n          description: no permission to create logs\n  /log/{activityId}:\n    parameters:\n      - name: activityId\n        in: path\n        required: true\n        schema:\n          type: number\n\n    get:\n      tags:\n        - log\n      summary: Gets a log by activity Id\n      operationId: getLogByActivityId\n      responses:\n        200:\n          description: Retrieves a specific log\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Log'\n        400:\n          description: Bad Request\n    put:\n      tags:\n        - log\n      summary: Update a specific log\n      operationId: putLogById\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Log'\n      responses:\n        200:\n          description: retrieves updated log\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Log'\n        400:\n          description: Bad Request\n        403:\n          description: No permission to update logs\n    delete:\n      tags:\n        - log\n      summary: Delete a specific log\n      operationId: deleteLogById\n      responses:\n        200:\n          description: success deleting crop by id\n        403:\n          description: No permission to delete logs\n        400:\n          description: Bad Request.\n  /log/farm/{farmId}:\n    get:\n      tags:\n        - log\n      summary: Gets all logs on a particular farm\n      operationId: getLogByFarmId\n      parameters:\n        - name: farmId\n          in: path\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        200:\n          description: Logs on that farm\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Log'\n  /log/harvest_use_type/farm/{farmId}:\n    parameters:\n      - name: farmId\n        in: path\n        required: true\n        schema:\n          type: string\n          format: uuid\n    get:\n      tags:\n        - log\n      summary: Gets all harvest log use types on a particular farm (and default ones)\n      operationId: getHarvestUseTypesByFarmId\n      responses:\n        200:\n          description: Harvest use types on the farm\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/HarvestUseType'\n    post:\n      summary: Create a specific harvest use type\n      operationId: postHarvestUseTypeByFarmId\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/HarvestUseType'\n      responses:\n        201:\n          description: Succesfully created a harvest use type\n        400:\n          description: Bad request\n  /notification/user/user_id:\n    get:\n      tags:\n      summary: Currently Not operative\n      responses:\n        404:\n          description: method not operative\n  /notification/{notificationId}:\n    put:\n      parameters:\n        - name: notificationId\n          in: path\n          required: true\n          schema:\n            type: number\n      tags:\n      summary: Currently Not operative\n      responses:\n        404:\n          description: method not operative\n  /notification_setting/{notificationId}:\n    put:\n      tags:\n      parameters:\n        - name: notificationId\n          in: path\n          required: true\n          schema:\n            type: number\n      summary: Currently Not operative\n      responses:\n        404:\n          description: method not operative\n  /organic_certifier_survey:\n    post:\n      summary: Create a new organic certifier entry in the user farm table\n      operationId: postOrganicCertifier\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/OrganicCertifierSurvey'\n      responses:\n        201:\n          description: created and associated organic certifier\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OrganicCertifierSurvey'\n  /organic_certifier_survey/{surveyId}:\n    delete:\n      summary: Delete organic certifier survey\n      operationId: deleteOrganicCertifier\n      parameters:\n      - name: surveyId\n        in: path\n        required: true\n        schema:\n          type: string\n          format: uuid\n      responses:\n        200:\n          description: Succesfully deleted organic certifier\n  /organic_certifier_survey/{surveyId}/ceritfiers:\n    patch:\n      summary: Patch the current certifiers\n      operationId: patchOrganicCertifierCertifiers\n      parameters:\n        - name: surveyId\n          in: path\n          required: true\n          schema:\n            type: string\n            format: uuid\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                certifiers:\n                  type: array\n                  items:\n                    type: string\n      responses:\n        200:\n          description: Succesfully patched organic certifier certifiers\n  /organic_certifier_survey/{surveyId}/interested:\n    patch:\n      summary: Patch the current interest\n      operationId: patchOrganicCertifierCertifiers\n      parameters:\n        - name: surveyId\n          in: path\n          required: true\n          schema:\n            type: string\n            format: uuid\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                interested:\n                  type: boolean\n      responses:\n        200:\n          description: Succesfully patched organic certifier interest\n  /password_reset:\n    post:\n      summary: Send password reset email\n      operationId: passwordResetEmail\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                email:\n                  type: string\n      responses:\n        200:\n          description: email sent\n    put:\n      summary: Update the psasword\n      operationId: resetPassword\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                password_hash:\n                  type: string\n                reset_token_version:\n                  type: string\n                created_at:\n                  type: string\n      responses:\n        200:\n          description: Password changed\n  /password_reset/validate:\n    get:\n      summary: validate the current token is valid\n      operationId: passwordResetValidation\n      responses:\n        200:\n          description: Valid token\n\n  /pesticide/farm/{farmId}:\n    get:\n      tags:\n        - pesticide\n        - farm\n      summary: Get default Pesticides and pesticides from your farm\n      operationId: getPesticideByFarmId\n      parameters:\n        - name: farmId\n          in: path\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        200:\n          description: Gets all default pesticides and the ones in your farm\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pesticide'\n        403:\n          description: No access to this farm, or permission to get pesticides.\n        400:\n          description: Bad Request.\n  /pesticide :\n    post:\n      tags:\n        - pesticide\n      summary: Create a new pesticide linked to your farm\n      operationId: postPesticide\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Pesticide'\n      responses:\n        201:\n          description: retrieves created pesticide\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pesticide'\n        400:\n          description: Bad Request\n        403:\n          description: No access to this farm, or permission to post pesticides.\n  /pesticide/{pesticideId}:\n    delete:\n      tags:\n        - pesticide\n      summary: Delete pesticide with given id\n      operationId: deletePesticideById\n      parameters:\n        - name: pesticideId\n          in: path\n          required: true\n          schema:\n            type: number\n      responses:\n        200:\n          description: success deleting pesticide with given id\n        400:\n          description: Bad Request\n        403:\n          description: No access to this farm, or permission to delete pesticide.\n  /price/farm/{farmId}:\n    get:\n      tags:\n        - price\n      summary: Get price by farm id\n      operationId: getPriceByFarmId\n      parameters:\n        - name: farmId\n          in: path\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        200:\n          description: All prices related to farm id given\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Price'\n        400:\n          description: Bad Request.\n        403:\n          description: No access to this farm, or permission to get prices.\n  /price:\n    post:\n      tags:\n        - price\n      summary: Create a price\n      operationId: postPrice\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Price'\n      responses:\n        201:\n          description: retrieves created price\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Price'\n        400:\n          description: Bad Request\n        403:\n          description: No access to this farm, or permission to create prices.\n  /price/{priceId}:\n    parameters:\n      - name: priceId\n        in: path\n        required: true\n        schema:\n          type: number\n    delete:\n      tags:\n        - price\n      summary: Delete a price by its id\n      operationId: deletePriceId\n      responses:\n        200:\n          description: success deleting a price\n        400:\n          description: Bad Request\n        403:\n          description: No access to this farm, or permission to delete prices.\n    put:\n      tags:\n        - price\n      summary: Update a price\n      operationId: putPriceById\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Price'\n      responses:\n        200:\n          description: retrieves created price\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Price'\n        400:\n          description: Bad Request\n        403:\n          description: No access to this farm, or permission to update prices.\n  /roles:\n    get:\n      tags:\n        - roles\n      summary: Get all roles and permissions\n      operationId: getRoles\n      responses:\n        200:\n          description: all roles\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  role_id:\n                    type: number\n                  role:\n                    type: string\n  /sale:\n    post:\n      tags:\n        - sale\n      summary: Create a sale\n      operationId: postSale\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Sale'\n      responses:\n        201:\n          description: Retrieves created sale\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Sale'\n        400:\n          description: Bad Request.\n        403:\n          description: No access to this farm, or permission to create sales.\n  /sale/{farmId}:\n    get:\n      tags:\n        - sale\n      summary: Get all sales from a farm\n      operationId: getSalesByFarmId\n      parameters:\n        - name: farmId\n          in: path\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        200:\n          description: List of sales related to a farm\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Sale'\n        400:\n          description: Bad Request.\n        403:\n          description: No access to this farm, or permission to get sales.\n  /sale/{saleId}:\n    parameters:\n      - name: saleId\n        in: path\n        required: true\n        schema:\n          type: number\n    delete:\n      tags:\n        - sale\n      summary: delete a particular sale by its id\n      operationId: deleteSaleById\n      responses:\n        200:\n          description: Success deleting sale by given id\n        400:\n          description: Bad Request.\n        403:\n          description: No access to this farm, or permission to delete  a sale.\n    patch:\n      tags:\n        - sale\n      summary: Update a sale\n      operationId: patchSaleById\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Sale'\n      responses:\n        204:\n          description: retrieves updated sale successfuly\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Sale'\n        400:\n          description: Bad Request\n        403:\n          description: No access to this farm, or permission update a sale.\n  /shift/{shiftId}:\n    parameters:\n      - name: shiftId\n        in: path\n        required: true\n        schema:\n          type: string\n          format: uuid\n    get:\n      tags:\n        - shift\n      summary: Get a shift by its id\n      operationId: getShiftById\n      responses:\n        200:\n          description: retrieved Shift by given id\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Shift'\n        400:\n          description: Bad Request\n        403:\n          description: No access to this farm, or permission to get shift by id\n    delete:\n      tags:\n        - shift\n      summary: Delete a shift by a given id\n      operationId: deleteShiftById\n      responses:\n        200:\n          description: success deleting a shift by id.\n        400:\n          description: Bad Request.\n        403:\n          description: No access to this farm, or permission to delete shift by id.\n  /shift:\n    post:\n      tags:\n        - shift\n      summary: Create a shift\n      operationId: postShift\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Shift'\n      responses:\n        201:\n          description: retrieve created shift\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Shift'\n        400:\n          description: Bad request.\n        403:\n          description: No access to this farm, or permission to create a shift.\n  /shift/user/{userId}:\n    get:\n      tags:\n        - users\n        - shift\n      summary: Get all shifts from a particular user\n      operationId: getShiftByUserId\n      parameters:\n        - name: userId\n          in: path\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        200:\n          description: All users shifts\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Shift'\n        400:\n          description: Bad Request.\n        403:\n          description: No permission to get user shifts.\n  /shift/farm/{farmId}:\n    get:\n      tags:\n        - shift\n      parameters:\n        - name: farmId\n          in: path\n          required: true\n          schema:\n            type: string\n            format: uuid\n      summary: Get all shifts on a particular farm. (no clear return structure)\n      operationId: getShiftsByFarmId\n      responses:\n        400:\n          description: Bad request.\n  /shift/userfarm/{farmId}:\n    get:\n      tags:\n        - shift\n      parameters:\n        - name: farmId\n          in: path\n          required: true\n          schema:\n            type: string\n            format: uuid\n      summary: Get all shifts on a particular farm for a particular user\n      operationId: getShiftsInUserFarmByFarmId\n      responses:\n        400:\n          description: Bad request.\n  /sign_up/verify_token/{token}/farm/{farmId}/user/{userId}:\n    parameters:\n      - name: token\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: farmId\n        in: path\n        required: true\n        schema:\n          type: string\n          format: uuid\n      - name: userId\n        in: path\n        required: true\n        schema:\n          type: string\n          format: uuid\n    get:\n      tags:\n        - signup\n      summary: Validate the token sent through an email to the user for signup\n      operationId: validateToken\n      responses:\n        401:\n          description: Invalid Token\n        202:\n          description: token used\n        200:\n          description: Valid token\n  /sign_up/{userId}:\n    patch:\n      tags:\n        - signup\n      parameters:\n        - name: userId\n          in: path\n          required: true\n          schema:\n            type: string\n            format: uuid\n      summary: Used to signup an  invited user to the system\n      operationId: inviteUserSignup\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                token:\n                  type: string\n                farm_id:\n                  type: string\n                first_name:\n                  type: string\n                last_name:\n                  type: string\n                password:\n                  type: string\n      responses:\n        200:\n          description: signed up successfully\n        500:\n          description: failed to signup.\n  /support_ticket:\n    post:\n      summary: Send inquiry to litefarm team\n      operationId: supportTicketPost\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                file:\n                  type: binary\n                data:\n                  type: object\n                  properties:\n                    first_name:\n                      type: string\n                    support_type:\n                      type: string\n                    message:\n                      type: string\n                    contact_method:\n                      type: string\n                    contact:\n                      type: string\n      responses:\n        200:\n          description: successfuly sent email with farm image\n        400:\n          description: Bad request\n  /stats/farm:\n    get:\n      tags:\n        - farm\n      summary: Get all farm stats?  Open to anyone?\n      operationId: getFarmStats\n      responses:\n        200:\n          description: all farm stats...\n  /task_type/farm/{farmId}:\n    get:\n      tags:\n        - taskType\n      summary: Get task types by farm id and default ones\n      operationId: getTaskTypesById\n      parameters:\n        - name: farmId\n          in: path\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        200:\n          description: All task types related to farm id given and default ones\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/TaskType'\n        400:\n          description: Bad Request.\n        403:\n          description: No access to this farm, or permission to get task types.\n  /task_type/{taskTypeId}:\n    parameters:\n      - name: taskTypeId\n        in: path\n        required: true\n        schema:\n          type: number\n    get:\n      tags:\n        - taskType\n      summary: get a specific task type\n      operationId: getTaskTypeById\n      responses:\n        200:\n          description: retrieves specific task typew\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TaskType'\n        400:\n          description: Bad Request.\n        403:\n          description: No access to this farm, or permission to get task types.\n    delete:\n      tags:\n        - taskType\n      summary: delete a specific task type\n      operationId: deleteTaskType\n      responses:\n        200:\n          description: success deleting task type\n        400:\n          description: Bad Request\n        403:\n          description: No access to this farm, or permission to delete task types.\n  /task_type:\n    post:\n      tags:\n        - taskType\n      summary: Create a task type\n      operationId: postTaskType\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TaskType'\n      responses:\n        201:\n          description: Retrieve created task type\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TaskType'\n        400:\n          description: Bad Request\n        403:\n          description: No access to this farm, or permission to create task types\n  /yield/farm/{farmId}:\n    get:\n      tags:\n        - yield\n      summary: Get crop yields by farm\n      operationId: getYieldByFarmId\n      parameters:\n        - name: farmId\n          required: true\n          in: path\n          schema:\n            type: string\n            format: uuid\n      responses:\n        200:\n          description: retrieved yields by the given farm id\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Yield'\n        400:\n          description: Bad Request.\n        403:\n          description: No access to this farm, or permission to get yields.\n  /yield:\n    post:\n      tags:\n        - yield\n      summary: Create a yield\n      operationId: postYield\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Yield'\n      responses:\n        201:\n          description: retrieve created yield\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Yield'\n        400:\n          description: Bad Request.\n        403:\n          description: No access to this farm, or permission to create yields.\n  /yield/{yieldId}:\n    parameters:\n      - name: yieldId\n        required: true\n        in: path\n        schema:\n          type: number\n    put:\n      tags:\n        - yield\n      summary: Update a particular yield\n      operationId: putYieldById\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Yield'\n      responses:\n        200:\n          description: Retrieve updated yield\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Yield'\n        400:\n          description: Bad request.\n        403:\n          description: No access to this farm, or permission to update yields.\n    delete:\n      tags:\n        - yield\n      summary: Delete a particular yield\n      operationId: deleteYieldById\n      responses:\n        200:\n          description: success deleting yield\n        400:\n          description: Bad request.\n        404:\n          description: Yield with that id was not found\n        403:\n          description: No access to this farm, or permission to delete yields.\ncomponents:\n  schemas:\n    CreateUser:\n      type: object\n      properties:\n        email:\n          type: string\n        first_name:\n          type: string\n        last_name:\n          type: string\n        password:\n          type: string\n        gender:\n          type: string\n        birth_year:\n          type: number\n        language_preference:\n          type: string\n    InviteUserResponse:\n      allOf:\n        - $ref: '#/components/schemas/CreateUser'\n        - type: object\n          properties:\n            id_token:\n              type: string\n    User:\n      type: object\n      properties:\n        user_id:\n          type: string\n        role_id:\n          type: integer\n        has_consent:\n          type: boolean\n        created_at:\n          type: string\n        first_name:\n          type: string\n        last_name:\n          type: string\n        profile_picture:\n          type: string\n        email:\n          type: string\n          format: email\n        phone_number:\n          type: string\n        status:\n          type: string\n        consent_version:\n          type: string\n        wage:\n          type: integer\n    UpdateUserRequest:\n      type: object\n      properties:\n        user_id:\n          type: string\n        first_name:\n          type: string\n        last_name:\n          type: string\n        profile_picture:\n          type: string\n        phone_number:\n          type: string\n        address:\n          type: string\n        email:\n          type: string\n          format: email\n        farm_id:\n          type: string\n          format: nullable\n        notification_setting:\n          type: object\n          properties:\n            alert_weather:\n              type: boolean\n            alert_worker_finish:\n              type: boolean\n            alert_action_after_scouting:\n              type: boolean\n            alert_before_planned_date:\n              type: boolean\n            alert_pest:\n              type: boolean\n        created_at:\n          type: string\n          format: 'date-time'\n        updated_at:\n          type: string\n          format: 'date-time'\n    Farm:\n      type: object\n      properties:\n        farm_id:\n          type: string\n          format: uuid\n        deleted:\n          type: boolean\n        farm_name:\n          type: string\n        address:\n          type: string\n        grid_points:\n          $ref: '#/components/schemas/LatLong'\n        phone_number:\n          type: object\n          properties:\n            number:\n              type: string\n            country:\n              type: string\n        units:\n          type: object\n          properties:\n            measurement:\n              type: string\n              enum:\n                - imperial\n                - metric\n            currency:\n              type: string\n            date_format:\n              type: string\n              format: date\n        sandbox_bool:\n          type: boolean\n    Figure:\n      type: object\n      properties:\n        type:\n          type: string\n        figure_type:\n          type: object\n          description: Object schema being sent will be the property name, so if you send area properties, property name should be area\n          oneOf:\n            - $ref: '#/components/schemas/Area'\n            - $ref: '#/components/schemas/Point'\n            - $ref: '#/components/schemas/Line'\n    GetFigure:\n      type: object\n      properties:\n        type:\n          type: string\n        figure_type:\n          type: object\n          description: Object schema being sent will be the property name, so if you receive area properties, property name will be area\n          anyOf:\n            - $ref: '#/components/schemas/Area'\n            - $ref: '#/components/schemas/Point'\n            - $ref: '#/components/schemas/Line'\n    GetLocation:\n      type: object\n      properties:\n        figure_type:\n          $ref: '#/components/schemas/GetFigure'\n        location_type:\n          type: object\n          anyOf:\n            - $ref: '#/components/schemas/FarmSiteBoundary'\n            - $ref: '#/components/schemas/Residence'\n            - $ref: '#/components/schemas/FieldLocation'\n            - $ref: '#/components/schemas/Barn'\n            - $ref: '#/components/schemas/Greenhouse'\n            - $ref: '#/components/schemas/CeremonialArea'\n            - $ref: '#/components/schemas/NaturalArea'\n            - $ref: '#/components/schemas/GroundWater'\n            - $ref: '#/components/schemas/WaterCourse'\n            - $ref: '#/components/schemas/Fence'\n            - $ref: '#/components/schemas/BufferZone'\n            - $ref: '#/components/schemas/Gate'\n            - $ref: '#/components/schemas/WaterValve'\n    LatLong:\n      type: object\n      properties:\n        lat:\n          type: number\n        lng:\n          type: number\n    Location:\n      type: object\n      properties:\n        name:\n          type: string\n        notes:\n          type: string\n        farm_id:\n          type: string\n          format: uuid\n        figure:\n          $ref: '#/components/schemas/Figure'\n        location_type:\n          type: object\n          description: Object schema being sent will be the property name, so if you send a field, \"location_type\" should be replaced with \"field\"\n          oneOf:\n            - $ref: '#/components/schemas/FarmSiteBoundary'\n            - $ref: '#/components/schemas/Residence'\n            - $ref: '#/components/schemas/FieldLocation'\n            - $ref: '#/components/schemas/Barn'\n            - $ref: '#/components/schemas/Greenhouse'\n            - $ref: '#/components/schemas/CeremonialArea'\n            - $ref: '#/components/schemas/NaturalArea'\n            - $ref: '#/components/schemas/GroundWater'\n            - $ref: '#/components/schemas/WaterCourse'\n            - $ref: '#/components/schemas/Fence'\n            - $ref: '#/components/schemas/BufferZone'\n            - $ref: '#/components/schemas/Gate'\n            - $ref: '#/components/schemas/WaterValve'\n    FarmSiteBoundary:\n      type: object\n    Residence:\n      type: object\n    FieldLocation:\n      type: object\n      properties:\n        organic_status:\n          type: string\n          enum: [Non-Organic, Transitioning, Organic]\n        transition_date:\n          type: date\n          description: will only be filled out in the case of a transitioning field\n    Barn:\n      type: object\n      properties:\n        wash_and_pack:\n          type: boolean\n        cold_storage:\n          type: boolean\n    Greenhouse:\n      type: object\n      properties:\n        organic_status:\n          type: string\n          enum: [ Non-Organic, Transitioning, Organic ]\n    CeremonialArea:\n      type: object\n    NaturalArea:\n      type: object\n    GroundWater:\n      type: object\n      properties:\n        used_for_irrigation:\n          type: boolean\n    WaterCourse:\n      type: object\n      properties:\n        used_for_irrigation:\n          type: boolean\n        includes_riparian_buffer:\n          type: boolean\n        buffer_width:\n          type: number\n    Fence:\n       type: object\n       properties:\n         pressure_treated:\n           type: boolean\n    BufferZone:\n      type: object\n    Gate:\n      type: object\n    WaterValve:\n      type: object\n      properties:\n        source:\n          type: string\n          enum: ['Municipal water', 'Surface water', 'Groundwater', 'Rain water']\n    Area:\n      type: object\n      properties:\n        grid_points:\n          type: array\n          items:\n            type: object\n            properties:\n              lat:\n                type: number\n              lng:\n                type: number\n        total_area:\n          type: number\n        perimeter:\n          type: number\n    Line:\n      type: object\n      properties:\n        grid_points:\n          type: array\n          items:\n            type: object\n            properties:\n              lat:\n                type: number\n              lng:\n                type: number\n        lenght:\n          type: number\n        width:\n          type: number\n    Point:\n      type: object\n      properties:\n        point:\n          type: object\n          properties:\n            lat:\n              type: number\n            lng:\n              type: number\n    UserFarm:\n      type: object\n      properties:\n        user_id:\n          type: string\n        farm_id:\n          type: string\n        role_id:\n          type: number\n        has_consent:\n          type: boolean\n        status:\n          type: string\n        created_at:\n          type: string\n        consent_version:\n          type: string\n        wage:\n          type: object\n          properties:\n            type:\n              type: string\n            amount:\n              type: number\n    UserFarmFlags:\n      type: object\n      properties:\n        step_one:\n          type: boolean\n        step_one_end:\n          type: datetime\n        step_two:\n          type: boolean\n        step_two_end:\n          type: datetime\n        step_three:\n          type: boolean\n        step_three_end:\n          type: datetime\n        step_four:\n          type: boolean\n        step_four_end:\n          type: datetime\n        step_five:\n          type: boolean\n        step_five_end:\n          type: datetime\n    Crop:\n      type: object\n      properties:\n        farm_id:\n          type: string\n          format: uuid\n        crop_common_name:\n          type: string\n        crop_genus:\n          type: string\n        crop_specie:\n          type: string\n        crop_group:\n          type: string\n        crop_subgroup:\n          type: string\n        is_avg_depth:\n          type: boolean\n        is_avg_nutrient:\n          type: boolean\n        is_avg_kc:\n          type: boolean\n        user_added:\n          type: boolean\n        deleted:\n          type: boolean\n        max_rooting_depth:\n          type: number\n        depletion_fraction:\n          type: number\n        initial_kc:\n          type: number\n        mid_kc:\n          type: number\n        end_kc:\n          type: number\n        max_height:\n          type: number\n        percentrefuse:\n          type: number\n        protein:\n          type: number\n        lipid:\n          type: number\n        energy:\n          type: number\n        ca:\n          type: number\n        fe:\n          type: number\n        mg:\n          type: number\n        ph:\n          type: number\n        k:\n          type: number\n        na:\n          type: number\n        zn:\n          type: number\n        cu:\n          type: number\n        fl:\n          type: number\n        mn:\n          type: number\n        se:\n          type: number\n        vita_rae:\n          type: number\n        vite:\n          type: number\n        vitc:\n          type: number\n        thiamin:\n          type: number\n        riboflavin:\n          type: number\n        niacin:\n          type: number\n        pantothenic:\n          type: number\n        vitb6:\n          type: number\n        folate:\n          type: number\n        vitb12:\n          type: number\n        vitk:\n          type: number\n        nutrient_notes:\n          type: string\n        refuse:\n          type: string\n        nutrient_credits:\n          type: number\n    Disease:\n      type: object\n      properties:\n        disease_scientific_name:\n          type: string\n        disease_common_name:\n          type: string\n        disease_group:\n          type: string\n        farm_id:\n          type: string\n        deleted:\n          type: boolean\n    FarmExpense:\n      type: object\n      properties:\n        farm_expense_id:\n          type: string\n        farm_id:\n          type: string\n        expense_date:\n          type: string\n          format: date\n        value:\n          type: number\n        picture:\n          type: string\n        note:\n          type: string\n        expense_type_id:\n          type: string\n    FarmExpenseType:\n      type: object\n      properties:\n        expense_type_id:\n          type: string\n          format: uuid\n        expense_name:\n          type: string\n        farm_id:\n          type: string\n          format: uuid\n    HarvestUseType:\n      type: object\n      properties:\n        harvest_use_type_id:\n          type: string\n          format: uuid\n        harvest_use_type_name:\n          type: string\n        farm_id:\n          type: string\n          format: uuid\n    FieldCrop:\n      type: object\n      properties:\n        field_crop_id:\n          type: number\n        crop_id:\n          type: number\n        field_id:\n          type: string\n          format: uuid\n        deleted:\n          type: boolean\n        variety:\n          type: string\n        start_date:\n          type: string\n          format: date\n        end_date:\n          type: string\n          format: date\n        area_used:\n          type: number\n        estimated_production:\n          type: number\n        estimated_revenue:\n          type: number\n        is_by_bed:\n          type: boolean\n        bed_config:\n          type: object\n    Fertilizer:\n      type: object\n      properties:\n        fertilizer_id:\n          type: string\n        deleted:\n          type: boolean\n        fertilizer_type:\n          type: string\n        moisture_percentage:\n          type: number\n        n_percentage:\n          type: number\n        nh4_n_ppm:\n          type: number\n        p_percentage:\n          type: number\n        k_percentage:\n          type: number\n        farm_id:\n          type: string\n    Field:\n      type: object\n      properties:\n        field_id:\n          type: string\n          format: uuid\n        farm_id:\n          type: string\n          format: uuid\n        deleted:\n          type: boolean\n        field_name:\n          type: string\n        area:\n          type: number\n        station_id:\n          type: number\n        grid_points:\n          type: array\n          items:\n            $ref: '#/components/schemas/LatLong'\n    WaterBalance:\n      type: object\n      properties:\n        water_balance_id:\n          type: number\n        crop_id:\n          type: number\n        field_id:\n          type: string\n          format: uuid\n        created_at:\n          type: string\n          format: date\n        soil_water:\n          type: number\n        plant_available_water:\n          type: number\n    Pesticide:\n      type: object\n      properties:\n        pesticide_name:\n          type: string\n        farm_id:\n          type: string\n          format: uuid\n        deleted:\n          type: boolean\n        active_ingredients:\n          type: string\n        concentration:\n          type: number\n        entry_interval:\n          type: number\n        harvest_interval:\n          type: number\n    Log:\n      type: object\n      properties:\n        activity_id:\n          type: number\n        activity_kind:\n          type: string\n          enum:\n            - fertilizing\n            - pestControl\n            - scouting\n            - irrigation\n            - harvest\n            - seeding\n            - fieldWork\n            - weatherData\n            - soilData\n            - other\n        date:\n          type: string\n          format: date\n        notes:\n          type: string\n        action_needed:\n          type: boolean\n        user_id:\n          type: string\n          format: uuid\n    OrganicCertifierSurvey:\n      type: object\n      properties:\n        farm_id:\n          type: string\n          format: uuid\n        interested:\n          type: boolean\n        certifiers:\n          type: array\n          items:\n            type: string\n    Plan:\n      type: object\n      properties:\n        plan_id:\n          type: number\n        plan_config:\n          type: object\n        farm_id:\n          type: string\n          format: uuid\n    Price:\n      type: object\n      properties:\n        price_id:\n          type: number\n        crop_id:\n          type: number\n        value_$/kg:\n          type: number\n        date:\n          type: string\n          format: date\n        farm_id:\n          type: string\n          format: uuid\n    Sale:\n      type: object\n      properties:\n        sale_id:\n          type: number\n        customer_name:\n          type: string\n        sale_date:\n          type: string\n          format: date\n        farm_id:\n          type: string\n          format: uuid\n    Shift:\n      type: object\n      properties:\n        shift_id:\n          type: string\n          format: uuid\n        start_time:\n          type: string\n          format: 'date-time'\n        end_time:\n          type: string\n          format: 'date-time'\n        user_id:\n          type: string\n          format: uuid\n        mood:\n          type: string\n        break_duration:\n          type: number\n        wage_at_moment:\n          type: number\n    TaskType:\n      type: object\n      properties:\n        task_id:\n          type: number\n        task_name:\n          type: string\n        farm_id:\n          type: string\n          format: uuid\n        deleted:\n          type: boolean\n    Yield:\n      type: object\n      properties:\n        yield_id:\n          type: number\n        crop_id:\n          type: number\n        'quantity_kg/m2':\n          type: number\n        date:\n          type: string\n          format: date\n        farm_id:\n          type: string\n          format: uuid\n"
		}
	},
	"Error": "parse: parse spec: paths: /location/ceremonial_area: post: operation \"postCeremonial\": requestBody: content: \"application/json\": parse schema: parse schema: reference \"#/components/schemas/Location\": parse schema: location_type: parse schema: oneOf: [2]: parse schema: reference \"#/components/schemas/FieldLocation\": parse schema: transition_date: parse schema: unexpected schema type: \"date\""
}