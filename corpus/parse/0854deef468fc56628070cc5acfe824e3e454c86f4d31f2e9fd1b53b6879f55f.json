{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/stevehouel/serverless-todo-api"
		},
		"file": {
			"name": "specs.yaml",
			"size": 0,
			"path": "lib/todo-api/specs/specs.yaml",
			"byteSize": 10130,
			"content": "openapi: 3.0.1\ninfo:\n  version: 1.0.0\n  title: Serverless TODO Api\n  description: Serverless TODO Api\n  license:\n    name: Apache 2.0\n    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'\npaths:\n  /todos:\n    options:\n      tags:\n        - Todos\n      responses:\n        '200':\n          description: 200 response\n          headers:\n            Access-Control-Allow-Origin:\n              schema:\n                type: string\n            Access-Control-Allow-Methods:\n              schema:\n                type: string\n            Access-Control-Allow-Headers:\n              schema:\n                type: string\n          content: {}\n      x-amazon-apigateway-integration:\n        passthroughBehavior: when_no_match\n        requestTemplates:\n          application/json: |\n            { \"statusCode\": 200 }\n        responses:\n          default:\n            statusCode: '200'\n            responseParameters:\n              method.response.header.Access-Control-Allow-Methods: '''OPTIONS, GET, POST'''\n              method.response.header.Access-Control-Allow-Headers: \u003e-\n                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            responseTemplates:\n              application/json: |\n                {}\n        type: mock\n    get:\n      summary: Get all Todo items\n      description: Get all Todo items\n      operationId: GetAllTodos\n      security:\n        - default: []\n      responses:\n        '200':\n          description: Get all Todo items\n          headers:\n            Access-Control-Allow-Origin:\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TodoItem'\n        default:\n          description: unexpected error\n          headers:\n            Access-Control-Allow-Origin:\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Message'\n      x-amazon-apigateway-integration:\n        responses:\n          default:\n            statusCode: '200'\n            responseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n        uri:\n          'Fn::Sub': \u003e-\n            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetAllTodosFunction.Arn}:live/invocations\n        passthroughBehavior: when_no_match\n        httpMethod: POST\n        type: aws_proxy\n    post:\n      x-amazon-apigateway-request-validator : all\n      parameters:\n        - in: body\n          name: item\n          schema:\n            $ref: '#/components/schemas/TodoItem'\n          required: true\n          description: a new Todo item\n      summary: Create a new Todo item\n      description: Create a new Todo item\n      operationId: CreateTodo\n      security:\n        - default: []\n      responses:\n        '201':\n          description: Create a new Todo item\n          headers:\n            Access-Control-Allow-Origin:\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: string\n        default:\n          description: unexpected error\n          headers:\n            Access-Control-Allow-Origin:\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Message'\n      x-amazon-apigateway-integration:\n        responses:\n          default:\n            statusCode: '200'\n            responseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n        uri:\n          'Fn::Sub': \u003e-\n            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateTodoFunction.Arn}:live/invocations\n        passthroughBehavior: when_no_match\n        httpMethod: POST\n        type: aws_proxy\n  '/todos/{todoId}':\n    parameters:\n      - in: path\n        name: todoId\n        schema:\n          type: string\n        required: true\n        description: Idenfier of a Todo item\n    options:\n      tags:\n        - Todos\n      responses:\n        '200':\n          description: 200 response\n          headers:\n            Access-Control-Allow-Origin:\n              schema:\n                type: string\n            Access-Control-Allow-Methods:\n              schema:\n                type: string\n            Access-Control-Allow-Headers:\n              schema:\n                type: string\n          content: {}\n      x-amazon-apigateway-integration:\n        passthroughBehavior: when_no_match\n        requestTemplates:\n          application/json: |\n            { \"statusCode\": 200 }\n        responses:\n          default:\n            statusCode: '200'\n            responseParameters:\n              method.response.header.Access-Control-Allow-Methods: '''OPTIONS, GET, PUT, DELETE'''\n              method.response.header.Access-Control-Allow-Headers: \u003e-\n                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            responseTemplates:\n              application/json: |\n                {}\n        type: mock\n    get:\n      x-amazon-apigateway-request-validator : params-only\n      summary: Get a todo item by it's identifier\n      description: Get a todo item by it's identifier\n      operationId: GetTodo\n      security:\n        - default: []\n      responses:\n        '200':\n          description: Get a todo item by it's identifier\n          headers:\n            Access-Control-Allow-Origin:\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TodoItem'\n        default:\n          description: unexpected error\n          headers:\n            Access-Control-Allow-Origin:\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Message'\n      x-amazon-apigateway-integration:\n        responses:\n          default:\n            statusCode: '200'\n            responseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n        uri:\n          'Fn::Sub': \u003e-\n            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetTodoFunction.Arn}:live/invocations\n        passthroughBehavior: when_no_match\n        httpMethod: POST\n        type: aws_proxy\n    put:\n      x-amazon-apigateway-request-validator : all\n      parameters:\n        - in: body\n          name: item\n          schema:\n            $ref: '#/components/schemas/TodoItem'\n          required: true\n          description: a Todo item\n      summary: Update a Todo item\n      description: Update a Todo item\n      operationId: UpdateTodo\n      security:\n        - default: []\n      responses:\n        '200':\n          description: Update a Todo item\n          headers:\n            Access-Control-Allow-Origin:\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TodoItem'\n        default:\n          description: unexpected error\n          headers:\n            Access-Control-Allow-Origin:\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Message'\n      x-amazon-apigateway-integration:\n        responses:\n          default:\n            statusCode: '200'\n            responseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n        uri:\n          'Fn::Sub': \u003e-\n            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateTodoFunction.Arn}:live/invocations\n        passthroughBehavior: when_no_match\n        httpMethod: POST\n        type: aws_proxy\n    delete:\n      x-amazon-apigateway-request-validator : params-only\n      summary: Delete a Todo item\n      description: Delete a Todo item\n      operationId: DeleteTodo\n      security:\n        - default: []\n      responses:\n        '200':\n          description: Delete a Todo item\n          headers:\n            Access-Control-Allow-Origin:\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Message'\n        default:\n          description: unexpected error\n          headers:\n            Access-Control-Allow-Origin:\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Message'\n      x-amazon-apigateway-integration:\n        responses:\n          default:\n            statusCode: '200'\n            responseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n        uri:\n          'Fn::Sub': \u003e-\n            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteTodoFunction.Arn}:live/invocations\n        passthroughBehavior: when_no_match\n        httpMethod: POST\n        type: aws_proxy\ncomponents:\n  schemas:\n    Message:\n      type: object\n      required:\n        - code\n        - message\n      properties:\n        code:\n          type: integer\n        message:\n          type: string\n    TodoItem:\n      type: object\n      required:\n        - title\n      properties:\n        todoId:\n          type: string\n        updatedAt:\n          type: string\n        title:\n          type: string\n        content:\n          type: string\n  securitySchemes:\n    default:\n      type: apiKey\n      name: Authorization\n      in: header\n      x-amazon-apigateway-authtype: awsSigv4\nx-amazon-apigateway-request-validators:\n  basic:\n    validateRequestParameters: true\n    validateRequestBody: true\n  params-only:\n    validateRequestParameters: true\n    validateRequestBody: false",
			"canonicalURL": "/github.com/stevehouel/serverless-todo-api@9317b78dca214de7e9afe3a57aa5f31de941260f/-/blob/lib/todo-api/specs/specs.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/stevehouel/serverless-todo-api/blob/9317b78dca214de7e9afe3a57aa5f31de941260f/lib/todo-api/specs/specs.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /todos: post: operation \"CreateTodo\": parameters: parse parameter \"item\": unsupported parameter type \"body\""
}