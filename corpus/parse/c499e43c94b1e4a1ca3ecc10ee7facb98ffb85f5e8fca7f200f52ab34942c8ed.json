{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/hermeznetwork/hermez-node"
		},
		"file": {
			"name": "swagger.yml",
			"size": 0,
			"path": "api/swagger.yml",
			"byteSize": 140617,
			"content": "openapi: 3.0.0\ninfo:\n  description: |\n    This Hermez node API is the layer that allows 3rd party apps and services to interface with the node to use the layer two features of the Hermez rollup.\n    Example of these apps are:\n    * Wallet: send L2 transactions, check balance, ...\n    * Explorer: List transactions, slots, batches, ...\n    * Exchange integrations\n\n    Note that some of the interactions with the rollup must be done using the Ethereum network directly.\n    Another way to integrate with the rollup is to [deploy a node](github.com/hermeznetwork/hermez-node/) and connect directly to its PostgreSQL database.\n    \n    ### Pagination\n    \n    #### Usage\n\n    All the endpoints that return a list of undefined size use pagination. Unless the opposite is explicitly said.\n    In order to use pagination, three query parameters are used:\n    * `fromItem`: indicates the first item to be returned. In general, this parameter shouldn't be provided in the first call to the endpoint, and use the `itemId` of the last returned item (+/-) 1, if the order is (ascending/descending).\n    * `order`: all paginated items are ordered chronologically. However, the specific fields to guarantee this order depend on each endpoint. For this purpose, `itemId` is used (itemId follows ascending chronological order except for unforged L1 user transactions). If the parameter is not provided, ascending order will be used by default. \n    * `limit`: maximum amount of items to include in each response. Default is 20, maximum is 2049.\n    \n    Responses for those endpoints will always include a `pendingItems` property. This property includes the amount of items that are not fetched yet. This can be used to:\n    * Calculate the amount of items that match the filters: `totalItems = length(alreadyFetchedItems) + pendingItems`\n    * Know when all items have been fetched: `if pendingItems == 0 {/* all items have been fetched */}`\n\n    #### Reorgs and Safety\n\n    Since all the items are ordered chronologically, there are no safety problems when fetching items in ascending order, except for reorgs (more on this later).\n    On the other hand, when iterating in descending order, new items will be added at the beginning. This doesn't cause any safety problem, but to get those new items, it's necessary to start querying without the `fromItem` set to `pagination.lastItem`.\n    To handle reorgs, the `itemId` can be used since it will change. This is important since other identifiers may be the same but with different content. As an example, if batch 424 gets reorged, it will be deleted, but eventually, a new batch 424 will appear with potentially different content. However, these two batches number 424, will have different `itemId`.\n\n    ### Signatures\n\n    There are three endpoints that require signatures:\n    * POST /account-creation-authorization: signed using an Ethereum key.\n    * POST /transactions-pool: signed using BJJ key.\n    * PUT /transactions-pool: signed using BJJ key.\n\n    It's recommended to use the official SDKs for [Go](https://github.com/hermeznetwork/hermez-go-sdk), [JS](https://github.com/hermeznetwork/hermezjs) and [Flutter](https://github.com/hermeznetwork/hermez_flutter_sdk).\n    If for some reason the previous options doesn't suit your usecase, you can implement the signatures following the spec for [account creation authorizations](https://docs.hermez.io/#/developers/protocol/hermez-protocol/protocol?id=regular-rollup-account) and [L2 transactions](https://docs.hermez.io/#/developers/protocol/hermez-protocol/protocol?id=l2)\n\n    More details on how to sign will be provided soon.\n\n    ### Contact\n\n    If you have any doubt or suggestion, please contact us at:\n    * [GitHub](https://github.com/hermeznetwork/hermez-node/)\n    * [Telegram](https://t.me/hermez_network)\n    * [Discord](https://bit.ly/3nohULM)\n    * Email: hello@hermez.network \n    * [Twitter](https://twitter.com/hermez_network)\n\n  version: \"0.0.1\"\n  title: Hermez Network API\n  license:\n    name: license AGPLv3\n    url: 'https://www.gnu.org/licenses/agpl-3.0.html'\nexternalDocs:\n  description: Find out more about Hermez network.\n  url: 'https://hermez.io'\nservers:\n  - description: Hermez node on Rinkeby\n    url: https://api.testnet.hermez.io/v1\n  - description: Hermez node on Mainnet\n    url: https://api.hermez.io/v1\n  - description: Localhost, usefull for testing changes locally and required for unit tests\n    url: http://localhost:4010/v1\ntags:\n  - name: Coordinator\n    description: Endpoints used by the nodes running in coordinator mode. They are used to interact with the network.\n  - name: Explorer\n    description: Endpoints used by the nodes running in explorer mode. They are used to get information of the netwrok.\npaths:\n  '/account-creation-authorization':\n    post:\n      tags:\n        - Coordinator\n      summary: Send an authorization that will allow the coordinator to register accounts associated to an Ethereum address on behalf of the user.\n      description: \u003e-\n        Send an authorization to create rollup accounts associated with an Ethereum address. Each account creation (an account can only hold a specific token) is effective once the coordinator forges the corresponding L1CoordinatorTx (which is always of type *account creation*).\n      operationId: postRegister\n      requestBody:\n        description: Account creation authorization.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AccountCreationAuthorizationPost'\n      responses:\n        '200':\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccountCreationAuthorizationPostSuccessResponse'\n        '400':\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error400'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500'\n  '/account-creation-authorization/{hezEthereumAddress}':\n    get:\n      tags:\n        - Coordinator\n      summary: Find out if the coordinator has the ability to create accounts associated with an Ethereum address.\n      description: \u003e-\n        Returns the authorization to perform an account creation with the given Ethereum address on behalf of the Ethereum address holder.\n      operationId: getAccountCreationAuthorization\n      parameters:\n        - name: hezEthereumAddress\n          in: path\n          description: Ethereum address.\n          required: true\n          schema:\n            $ref: '#/components/schemas/HezEthereumAddress'\n      responses:\n        '200':\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccountCreationAuthorization'\n        '400':\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error400'\n        '404':\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error404'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500'\n  '/accounts':\n    get:\n      tags:\n        - Explorer\n      summary: Get accounts balances and other associated information.\n      description: Get account balances and other associated information.\n      operationId: getAccounts\n      parameters:\n        - name: hezEthereumAddress\n          in: query\n          description: Only get accounts associated to an Ethereum address. Incompatible with the query `BJJ`.\n          required: false\n          schema:\n            $ref: '#/components/schemas/HezEthereumAddress'\n        - name: BJJ\n          in: query\n          description: Only get accounts associated to a BabyJubJub compressed public key.  Incompatible with the query `hezEthereumAddress`.\n          required: false\n          schema:\n            $ref: '#/components/schemas/BJJ'\n        - name: tokenIds\n          in: query\n          required: false\n          description: Only get accounts of specific tokens. This is represented by a comma separated list of token identifiers.\n          schema:\n            type: string\n            description: Comma separated list of token identifiers.\n            example: \"3,87,91\"\n        - name: fromItem\n          in: query\n          required: false\n          description: Indicates the desired first item (using the itemId property) to be included in the response.\n          schema:\n            type: number\n        - name: order\n          in: query\n          required: false\n          description: Order of the returned items. Accounts will be ordered by increasing account index.\n          schema:\n            type: string\n            default: ASC\n            enum:\n                - ASC\n                - DESC\n        - name: limit\n          in: query\n          required: false\n          description: Maximum number of items to be returned.\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 2049\n      responses:\n        '200':\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Accounts'\n        '400':\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error400'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500'\n  '/accounts/{accountIndex}':\n    get:\n      tags:\n        - Explorer\n      summary: Get an account by its index.\n      description: Get an account by its index.\n      operationId: getAccount\n      parameters:\n        - name: accountIndex\n          in: path\n          description: Identifier of an account.\n          required: true\n          schema:\n            $ref: '#/components/schemas/AccountIndex'\n      responses:\n        '200':\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Account'\n        '400':\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error400'\n        '404':\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error404'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500'\n  '/exits':\n    get:\n      tags:\n        - Explorer\n      summary: Get exit information. This information is required to perform a withdraw.\n      description: Get exit information. This information is required to perform a withdraw.\n      operationId: getExits\n      parameters:\n        - name: tokenId\n          in: query\n          required: false\n          description: Only get exits of specific token\n          schema:\n            $ref: '#/components/schemas/TokenId'\n        - name: hezEthereumAddress\n          in: query\n          description: Get exits associated to an Ethereum address. Incompatible with query `BJJ` and `accountIndex`.\n          required: false\n          schema:\n            $ref: '#/components/schemas/HezEthereumAddress'\n        - name: BJJ\n          in: query\n          description: Get exits associated to a BabyJubJub compressed public key. Incompatible with query `hezEthereumAddress` and `accountIndex`.\n          required: false\n          schema:\n            $ref: '#/components/schemas/BJJ'\n        - name: accountIndex\n          in: query\n          description: Get exits associated to a specific account. Incompatible with queries `tokenId`, `hezEthereumAddress` and `BJJ`.\n          required: false\n          schema:\n            $ref: '#/components/schemas/AccountIndex'\n        - name: batchNum\n          in: query\n          description: Get exits from the exit tree of a specific batch.\n          required: false\n          schema:\n            $ref: '#/components/schemas/BatchNum'\n        - name: onlyPendingWithdraws\n          in: query\n          description: Get exits with pending withdrawals.\n          required: false\n          schema:\n            type: boolean\n        - name: fromItem\n          in: query\n          required: false\n          description: Indicates the desired first item (using the itemId property) to be included in the response.\n          schema:\n            type: number\n        - name: order\n          in: query\n          required: false\n          description: Order of the returned items. Exits will be ordered by increasing (batchNum, accountIndex).\n          schema:\n            type: string\n            default: ASC\n            enum:\n                - ASC\n                - DESC\n        - name: limit\n          in: query\n          required: false\n          description: Maximum number of items to be returned.\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 2049\n      responses:\n        '200':\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Exits'\n        '400':\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error400'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500'\n  '/exits/{batchNum}/{accountIndex}':\n    get:\n      tags:\n        - Explorer\n      summary: Get specific exit information.\n      description: Get exit information form a specific exit tree and account. This information is required to perform a withdraw. Exits are identified with accounIndex and batchNum since every batch that has exits has a different exit tree.\n      operationId: getExit\n      parameters:\n        - name: batchNum\n          in: path\n          description: Batch of the exit tree.\n          required: true\n          schema:\n            $ref: '#/components/schemas/BatchNum'\n        - name: accountIndex\n          in: path\n          description: Account identifier.\n          required: true\n          schema:\n            $ref: '#/components/schemas/AccountIndex'\n      responses:\n        '200':\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Exit'\n        '400':\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error400'\n        '404':\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error404'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500'\n  '/atomic-pool':\n    post:\n      tags:\n        - Coordinator\n      summary: Add a collection of L2 transactions to the coordinator's pool.\n      description: \u003e-\n        Send L2 transactions. The transactions will be stored in the transaction pool of the coordinator and eventually forged.\n        The main goal of sending transactions in groups is to use the atomic feature, where transactions are binded by the `request` fields,\n        and forced to be forged together. Transactions will be rejected unless all of them conform a single atomic group, in other words, they only\n        will be accepted if it's mandatory to forge all of them in a single batch.\n      operationId: postTx\n      requestBody:\n        description: Signed transactions.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostPoolL2Transactions'\n      responses:\n        '200':\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionIds'\n        '400':\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error400'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500'\n  '/atomic-pool/{id}':\n    get:\n      tags:\n        - Coordinator\n      summary: Get details and status of transactions that conform an atomic group and are on the coordinators pool.\n      description: \u003e-\n        Get transactions from the pool by its atomic group ID. This endpoint is specially useful for tracking the status of atomic transactions that may not be forged yet.\n        Only transactions from the pool will be returned.\n        Note that the transaction pool is different for each coordinator and therefore only a coordinator that has received a specific atomic group\n        will be able to provide information about that set of transactions.\n      operationId: getAtomicPool\n      parameters:\n        - name: id\n          in: path\n          description: Atomic group identifier.\n          required: true\n          schema:\n            $ref: '#/components/schemas/AtomicGroupID'\n      responses:\n        '200':\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AtomicGroup'\n        '400':\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error400'\n        '404':\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error404'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500'\n  \n  '/transactions-pool':\n    post:\n      tags:\n        - Coordinator\n      summary: Add an L2 transaction to the coordinator's pool.\n      description: \u003e-\n        Send L2 transaction. The transaction will be stored in the transaction pool of the coordinator and eventually forged.\n      operationId: postTx\n      requestBody:\n        description: Signed transaction.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostPoolL2Transaction'\n      responses:\n        '200':\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionId'\n        '400':\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error400'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500'\n    get:\n      tags:\n        - Coordinator\n      summary: Get transactions that are in the pool.\n      operationId: getPoolTxs\n      parameters:\n        - name: state\n          in: query\n          required: false\n          description: State of the transactions, e.g. \"pend\"\n          schema:\n            $ref: '#/components/schemas/PoolL2TransactionState'\n        - name: tokenId\n          in: query\n          required: false\n          description: Only get transactions of specific token\n          schema:\n            $ref: '#/components/schemas/TokenId'\n        - name: accountIndex\n          in: query\n          required: false\n          description: Only get transactions sent from and to a specific account. Incompatible with the queries `fromAccountIndex`, `toAccountIndex`, `hezEthereumAddress`, `fromHezEthereumAddress`, `toHezEthereumAddress`, `BJJ`, `toBJJ`, `fromBJJ`.\n          schema:\n            $ref: '#/components/schemas/AccountIndex'\n        - name: fromAccountIndex\n          in: query\n          required: false\n          description: Only get transactions sent from a specific account. Incompatible with the queries `accountIndex`, `hezEthereumAddress`, `fromHezEthereumAddress`, `toHezEthereumAddress`, `BJJ`, `toBJJ`, `fromBJJ`.\n          schema:\n            $ref: '#/components/schemas/AccountIndex'\n        - name: toAccountIndex\n          in: query\n          required: false\n          description: Only get transactions sent to a specific account. Incompatible with the queries `accountIndex`, `hezEthereumAddress`, `fromHezEthereumAddress`, `toHezEthereumAddress`, `BJJ`, `toBJJ`, `fromBJJ`.\n          schema:\n            $ref: '#/components/schemas/AccountIndex'\n        - name: type\n          in: query\n          required: false\n          description: Only get transactions of a specific type\n          schema:\n            $ref: '#/components/schemas/TransactionType'\n        - name: hezEthereumAddress\n          in: query\n          required: false\n          description: Only get transactions sent from or to an account associated with an Ethereum address. Incompatible with the queries `BJJ`, `fromBJJ`, `toBJJ` and `accountIndex`, `fromAccountIndex`, `toAccountIndex`, `toHezEthereumAddress`, `fromHezEthereumAddress`.\n          schema:\n            $ref: '#/components/schemas/HezEthereumAddress'\n        - name: fromHezEthereumAddress\n          in: query\n          required: false\n          description: Only get transactions sent from an account associated with an Ethereum address. Incompatible with the queries `BJJ`, `fromBJJ`, `toBJJ` and `accountIndex`, `fromAccountIndex`, `toAccountIndex`, `hezEthereumAddress`.\n          schema:\n            $ref: '#/components/schemas/HezEthereumAddress'\n        - name: toHezEthereumAddress\n          in: query\n          required: false\n          description: Only get transactions sent to an account associated with an Ethereum address. Incompatible with the queries `BJJ`, `fromBJJ`, `toBJJ` and `accountIndex`, `fromAccountIndex`, `toAccountIndex`, `hezEthereumAddress`.\n          schema:\n            $ref: '#/components/schemas/HezEthereumAddress'\n        - name: BJJ\n          in: query\n          description: Only get transactions associated with a BabyJubJub compressed public key. The BJJ is in base 64. Incompatible with the queries `hezEthereumAddress` and `accountIndex`.\n          required: false\n          schema:\n            $ref: '#/components/schemas/BJJ'\n        - name: fromBJJ\n          in: query\n          description: Only get transactions sent from a BabyJubJub compressed public key. Incompatible with the queries `hezEthereumAddress`, `fromHezEthereumAddress`, `toHezEthereumAddress` and `accountIndex`, `fromAccountIndex`, `toAccountIndex`, `BJJ`.\n          required: false\n          schema:\n            $ref: '#/components/schemas/BJJ'\n        - name: toBJJ\n          in: query\n          description: Only get transactions sent to a BabyJubJub compressed public key. Incompatible with the queries `hezEthereumAddress`, `fromHezEthereumAddress`, `toHezEthereumAddress` and `accountIndex`, `fromAccountIndex`, `toAccountIndex`, `BJJ`.\n          required: false\n          schema:\n            $ref: '#/components/schemas/BJJ'\n        - name: fromItem\n          in: query\n          required: false\n          description: Indicates the desired first item (using the itemId property) to be included in the response.\n          schema:\n            type: number\n        - name: order\n          in: query\n          required: false\n          description: Order of the returned items. Transactions will be ordered by item_id.\n          schema:\n            type: string\n            default: ASC\n            enum:\n              - ASC\n              - DESC\n        - name: limit\n          in: query\n          required: false\n          description: Maximum number of items to be returned.\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 2049\n      responses:\n        '200':\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PoolL2Transactions'\n        '400':\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error400'\n        '404':\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error404'\n        '500':\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500'\n  '/transactions-pool/{id}':\n    put:\n      tags:\n        - Coordinator\n      summary: Update an L2 transaction in the coordinator's pool. Only regular transactions can be updated. Fields, that can be updated - toAccountIndex, toHezEthereumAddress, toBjj, maxNumBatch, signature, type\n      description: \u003e-\n        Update L2 transaction\n      operationId: putTx\n      parameters:\n        - name: id\n          in: path\n          description: Transaction identifier.\n          required: true\n          schema:\n            $ref: '#/components/schemas/TransactionId'\n      requestBody:\n        description: Signed transaction\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostPoolL2Transaction'\n      responses:\n        '200':\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionId'\n        '400':\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error400'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500'\n    get:\n      tags:\n        - Coordinator\n      summary: Get details and status of a transaction that is in the pool.\n      description: \u003e-\n        Get transaction from the pool by its ID. This endpoint is specially useful for tracking the status of a transaction that may not be forged yet.\n        Only transactions from the pool will be returned.\n        There are other options to filter transactions using query string parameters. Please check for more details below.\n        Note that the transaction pool is different for each coordinator and therefore only a coordinator that has received a specific transaction\n        will be able to provide information about that transaction.\n      operationId: getPoolTx\n      parameters:\n        - name: id\n          in: path\n          description: Transaction identifier.\n          required: true\n          schema:\n            $ref: '#/components/schemas/TransactionId'\n      responses:\n        '200':\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PoolL2Transaction'\n        '400':\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error400'\n        '404':\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error404'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500'\n  '/transactions-pool/accounts/{idx}/nonces/{nonce}':\n    put:\n      tags:\n        - Coordinator\n      summary: Update transaction by from account idx and nonce.\n      description: \u003e-\n        Updates regular transactions by account idx and nonce. This endpoint is useful, when user want to update fee or amount, that was sent in the transaction,\n        but user can't use regular update transaction request, bcs transaction id is also changing. Delete previous transaction and inserts new one\n      operationId: updateTxByIdxAndNonce\n      parameters:\n        - name: idx\n          in: path\n          description: From account idx\n          required: true\n          schema:\n            $ref: '#/components/schemas/AccountIndex'\n        - name: nonce\n          in: path\n          description: trasnaction nonce\n          required: true\n          schema:\n            $ref: '#/components/schemas/Nonce'\n      requestBody:\n        description: Signed transaction\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostPoolL2Transaction'\n      responses:\n        '200':\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionId'\n        '400':\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error400'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500'\n  '/transactions-history':\n    get:\n      tags:\n        - Explorer\n      summary: Get details and status of transactions that have been forged.\n      description: \u003e-\n        Get historical transactions. This endpoint will return all the different types of **forged** transactions, this means that:\n          * Transactions that are still in the transaction pool of any coordinator are not included. These transactions can be fetched using `GET /transactions-pool/{id}`.\n          * L1 transactions sent by users that have not been forged yet are not included. These transactions can be fetched using `GET /transactions-history/{id}`.\n      operationId: getHistoryTxs\n      parameters:\n        - name: tokenId\n          in: query\n          required: false\n          description: Only get transactions of specific token\n          schema:\n            $ref: '#/components/schemas/TokenId'\n        - name: hezEthereumAddress\n          in: query\n          required: false\n          description: Only get transactions sent from or to an account associated with an Ethereum address. Incompatible with the queries `BJJ`, `fromBJJ`, `toBJJ` and `accountIndex`, `fromAccountIndex`, `toAccountIndex`, `toHezEthereumAddress`, `fromHezEthereumAddress`.\n          schema:\n            $ref: '#/components/schemas/HezEthereumAddress'\n        - name: fromHezEthereumAddress\n          in: query\n          required: false\n          description: Only get transactions sent from an account associated with an Ethereum address. Incompatible with the queries `BJJ`, `fromBJJ`, `toBJJ` and `accountIndex`, `fromAccountIndex`, `toAccountIndex`, `hezEthereumAddress`.\n          schema:\n            $ref: '#/components/schemas/HezEthereumAddress'\n        - name: toHezEthereumAddress\n          in: query\n          required: false\n          description: Only get transactions sent to an account associated with an Ethereum address. Incompatible with the queries `BJJ`, `fromBJJ`, `toBJJ` and `accountIndex`, `fromAccountIndex`, `toAccountIndex`, `hezEthereumAddress`.\n          schema:\n            $ref: '#/components/schemas/HezEthereumAddress'\n        - name: BJJ\n          in: query\n          description: Only get transactions associated with a BabyJubJub compressed public key. Incompatible with the queries `hezEthereumAddress` and `accountIndex`.\n          required: false\n          schema:\n            $ref: '#/components/schemas/BJJ'\n        - name: fromBJJ\n          in: query\n          description: Only get transactions from a BabyJubJub compressed public key. Incompatible with the queries `hezEthereumAddress`, `fromHezEthereumAddress`, `toHezEthereumAddress` and `accountIndex`, `fromAccountIndex`, `toAccountIndex`, `BJJ`.\n          required: false\n          schema:\n            $ref: '#/components/schemas/BJJ'\n        - name: toBJJ\n          in: query\n          description: Only get transactions to a BabyJubJub compressed public key. Incompatible with the queries `hezEthereumAddress`, `fromHezEthereumAddress`, `toHezEthereumAddress` and `accountIndex`, `fromAccountIndex`, `toAccountIndex`, `BJJ`.\n          required: false\n          schema:\n            $ref: '#/components/schemas/BJJ'\n        - name: accountIndex\n          in: query\n          required: false\n          description: Only get transactions sent from and to a specific account. Incompatible with the queries `tokenId`, `fromAccountIndex`, `toAccountIndex`, `hezEthereumAddress`, `fromHezEthereumAddress`, `toHezEthereumAddress`, `BJJ`, `toBJJ`, `fromBJJ`.\n          schema:\n            $ref: '#/components/schemas/AccountIndex'\n        - name: fromAccountIndex\n          in: query\n          required: false\n          description: Only get transactions sent from a specific account. Incompatible with the queries `tokenId`, `accountIndex`, `hezEthereumAddress`, `fromHezEthereumAddress`, `toHezEthereumAddress`, `BJJ`, `toBJJ`, `fromBJJ`.\n          schema:\n            $ref: '#/components/schemas/AccountIndex'\n        - name: toAccountIndex\n          in: query\n          required: false\n          description: Only get transactions sent to a specific account. Incompatible with the queries `tokenId`, `accountIndex`, `hezEthereumAddress`, `fromHezEthereumAddress`, `toHezEthereumAddress`, `BJJ`, `toBJJ`, `fromBJJ`.\n          schema:\n            $ref: '#/components/schemas/AccountIndex'\n        - name: batchNum\n          in: query\n          required: false\n          description: Only get transactions forged in a specific batch.\n          schema:\n            $ref: '#/components/schemas/BatchNum'\n        - name: type\n          in: query\n          required: false\n          description: Only get transactions of a specific type.\n          schema:\n            $ref: '#/components/schemas/TransactionType'\n        - name: fromItem\n          in: query\n          required: false\n          description: Indicates the desired first item (using the itemId property) to be included in the response.\n          schema:\n            type: number\n        - name: order\n          in: query\n          required: false\n          description: Order of the returned items. History transactions will be ordered by (batchNum, position).\n          schema:\n            type: string\n            default: ASC\n            enum:\n                - ASC\n                - DESC\n        - name: limit\n          in: query\n          required: false\n          description: Maximum number of items to be returned.\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 2049\n        - name: includePendingL1s\n          in: query\n          required: false\n          description: |\n            If set to true L1 transactions that have been added to the smart contract queue but haven't been forged yet are returned.\n            Warning: the correctness of the order is not guaranteed when using this filter, as the unforged transactions may change their position\n            once they are forged. \n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HistoryTransactions'\n        '400':\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error400'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500'\n  '/transactions-history/{id}':\n    get:\n      tags:\n        - Explorer\n      summary: Get details and status of a specific historical transaction.\n      description: \u003e-\n        Get transaction by its ID. There are other options to filter transactions using query string parameters. Please check for more details below.\n        This endpoint will return all the different types of transactions except those that are still in the pool of any coordinator.\n      operationId: getHistoryTx\n      parameters:\n        - name: id\n          in: path\n          description: Transaction identifier.\n          required: true\n          schema:\n            $ref: '#/components/schemas/TransactionId'\n      responses:\n        '200':\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HistoryTransaction'\n        '400':\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error400'\n        '404':\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error404'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500'\n  '/batches':\n    get:\n      tags:\n        - Explorer\n      summary: Get information about forged batches.\n      description: \u003e-\n        Get information about forged batches.\n      operationId: getBatches\n      parameters:\n        - name: minBatchNum\n          in: query\n          required: false\n          description: Include only `batchNum \u003e minBatchNum` batches.\n          schema:\n            $ref: '#/components/schemas/BatchNum'\n        - name: maxBatchNum\n          in: query\n          required: false\n          description: Include only `batchNum \u003c maxBatchNum` batches.\n          schema:\n            type: number\n        - name: slotNum\n          in: query\n          required: false\n          description: Include only batches that were forged within the specified slot.\n          schema:\n            $ref: '#/components/schemas/SlotNum'\n        - name: forgerAddr\n          in: query\n          required: false\n          description: Include only batches forged by `forgerAddr`\n          schema:\n            $ref: '#/components/schemas/EthereumAddress'\n        - name: fromItem\n          in: query\n          required: false\n          description: Indicates the desired first item (using the itemId property) to be included in the response.\n          schema:\n            type: number\n        - name: order\n          in: query\n          required: false\n          description: Order of the returned items. Batches will be ordered by increasing `batchNum`.\n          schema:\n            type: string\n            default: ASC\n            enum:\n                - ASC\n                - DESC\n        - name: limit\n          in: query\n          required: false\n          description: Maximum number of items to be returned.\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 2049\n      responses:\n        '200':\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Batches'\n        '400':\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error400'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500'                \n  '/batches/{batchNum}':\n    get:\n      tags:\n        - Explorer\n      summary: Get a specific batch.\n      description: \u003e-\n        Get a specific batch.\n      operationId: getBatch\n      parameters:\n        - name: batchNum\n          in: path\n          description: Batch identifier.\n          required: true\n          schema:\n            $ref: '#/components/schemas/BatchNum'\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Batch'\n        '400':\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error400'\n        '404':\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error404'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500'\n  '/full-batches/{batchNum}':\n    get:\n      tags:\n        - Explorer\n      summary: Get a full batch.\n      description: \u003e-\n        Get a specific batch, including the associated transactions. The object returned in this method can be a bit heavy. \n        If you're devloping a front end, you may consider using a combinaton of `GET /batches/{batchnum}` and `GET /history-transactions?batchNum={batchNum}`.\n      operationId: getFullBatch\n      parameters:\n        - name: batchNum\n          in: path\n          description: Batch identifier\n          required: true\n          schema:\n            $ref: '#/components/schemas/BatchNum'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FullBatch'\n        '400':\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error400'\n        '404':\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error404'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500'\n  '/slots':\n    get:\n      tags:\n        - Explorer\n      summary: Get information about slots.\n      description: \u003e-\n        Get information about slots.\n      operationId: getSlots\n      parameters:\n        - name: minSlotNum\n          in: query\n          required: false\n          description: Only include slots with `slotNum \u003e= minSlotNum`. By default, `minSlotNum = 0`.\n          schema:\n            $ref: '#/components/schemas/SlotNum'\n        - name: maxSlotNum\n          in: query\n          required: false\n          description: Only include slots with `slotNum \u003c= maxSlotNum`.\n          schema:\n            $ref: '#/components/schemas/SlotNum'\n        - name: wonByEthereumAddress\n          in: query\n          required: false\n          description: Only include slots won by a coordinator whose `bidderAddr == wonByEthereumAddress`.\n          schema:\n            $ref: '#/components/schemas/EthereumAddress'\n        - name: finishedAuction\n          in: query\n          required: false\n          description: If set to true, only include slots whose auction has finished.\n          schema:\n            type: boolean\n        - name: fromItem\n          in: query\n          required: false\n          description: Indicates the desired first item (using the itemId property) to be included in the response.\n          schema:\n            type: number\n        - name: order\n          in: query\n          required: false\n          description: Order of the returned items. Slots will be ordered by increasing `slotNum`.\n          schema:\n            type: string\n            default: ASC\n            enum:\n                - ASC\n                - DESC\n        - name: limit\n          in: query\n          required: false\n          description: Maximum number of items to be returned.\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 2049\n      responses:\n        '200':\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Slots'\n        '400':\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error400'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500'\n  '/slots/{slotNum}':\n    get:\n      tags:\n        - Explorer\n      summary: Get information about a specific slot.\n      description: \u003e-\n        Get information about a specific slot.\n      operationId: getSlot\n      parameters:\n        - name: slotNum\n          in: path\n          required: true\n          description: Identifier of the slot.\n          schema:\n            $ref: '#/components/schemas/SlotNum'\n      responses:\n        '200':\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Slot'\n        '400':\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error400'\n        '404':\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error404'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500'\n  '/bids':\n    get:\n      tags:\n        - Explorer\n      summary: Get a list of bids.\n      description: \u003e- \n        Get a list of bids. It's necessary to provide at least one of the following filters: `slotNum`, `bidderAddr`.\n      operationId: getSlotBids\n      parameters:\n        - name: slotNum\n          in: query\n          description: Slot identifier. Specify the auction where the returned bids were made.\n          required: false\n          schema:\n            $ref: '#/components/schemas/SlotNum'\n        - name: bidderAddr\n          in: query\n          description: Get only bids made by a coordinator identified by its bidder address. In this case, the bids will be returned in the order that the coordinator made them.\n          required: false\n          schema:\n            $ref: '#/components/schemas/EthereumAddress'\n        - name: fromItem\n          in: query\n          required: false\n          description: Indicates the desired first item (using the itemId property) to be included in the response.\n          schema:\n            type: number\n        - name: order\n          in: query\n          required: false\n          description: Order of the returned items. Bids will be ordered by increasing (slotNum, bidValue)`.\n          schema:\n            type: string\n            default: ASC\n            enum:\n                - ASC\n                - DESC\n        - name: limit\n          in: query\n          required: false\n          description: Maximum number of items to be returned.\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 2049\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Bids'\n        '400':\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error400'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500'\n  '/state':\n    get:\n      tags:\n        - Explorer\n      summary: Return information that represents the current state of the network.\n      description: Return information that represents the current state of the network. It also includes metrics and statistics.\n      operationId: getState\n      responses:\n        '200':\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/State'\n        '400':\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error400'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500'\n  '/config':\n    get:\n      tags:\n        - Explorer\n      summary: Return constant configuration of the network.\n      description: Return constant configuration of the network.\n      operationId: getConfig\n      responses:\n        '200':\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Config'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500'\n  '/health':\n    get:\n      tags:\n        - Explorer\n      summary: Return health status of the hermez node.\n      description: Return health status of the hermez node.\n      operationId: getHealth\n      responses:\n        '200':\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Health'\n        '503':\n          description: Service unavailable.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error503'\n  '/tokens':\n    get:\n      tags:\n        - Explorer\n      summary: Get information of the supported tokens in the Hermez Network.\n      description: Get information of the supported tokens in the Hermez Network.\n      operationId: getTokens\n      parameters:\n        - name: ids\n          in: query\n          required: false\n          description: Include only specific tokens by their Hermez identifiers.\n          schema:\n            type: string\n            description: Pipeline \"|\" separated list of token identifiers\n            example: \"2|44|689\"\n        - name: symbols\n          in: query\n          required: false\n          description: Include only specific tokens by their symbols.\n          schema:\n            type: string\n            description: Pipeline \"|\" separated list of token symbols.\n            example: \"DAI|NEC|UMA\"\n        - name: name\n          in: query\n          required: false\n          description: Include token(s) by their names (or a substring of the name).\n          schema:\n            type: string\n        - name: addresses\n          in: query\n          required: false\n          description: Include only specific tokens by their SC addresses.\n          schema:\n            type: string\n            description: Pipeline \"|\" separated list of token identifiers\n            example: \"0xdac17f959d2ee523a2206207994597c13d831ec8|0xdac17f958e2ee523a2207206994597c12d831ec7|0xfac17f058d2ee527a2206206994597d13d831ec7\"\n        - name: fromItem\n          in: query\n          required: false\n          description: Indicates the desired first item (using the itemId property) to be included in the response.\n          schema:\n            type: number\n        - name: order\n          in: query\n          required: false\n          description: Order of the returned items. Tokens will be ordered by increasing tokenID.\n          schema:\n            type: string\n            default: ASC\n            enum:\n                - ASC\n                - DESC\n        - name: limit\n          in: query\n          required: false\n          description: Maximum number of items to be returned.\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 2049\n      responses:\n        '200':\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Tokens'\n        '400':\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error400'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500'\n  '/tokens/{id}':\n    get:\n      tags:\n        - Explorer\n      summary: Get information of a token supported by Hermez Network.\n      description: Get information of a token supported by Hermez Network.\n      operationId: getToken\n      parameters:\n        - name: id\n          in: path\n          description: Token identifier\n          required: true\n          schema:\n            $ref: '#/components/schemas/TokenId'\n      responses:\n        '200':\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Token'\n        '400':\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error400'\n        '404':\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error404'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500'\n  '/coordinators':\n    get:\n      tags:\n        - Explorer\n      summary: Get information about coordinators.\n      description: Get information about coordinators.\n      operationId: getCoordinators\n      parameters:\n        - name: forgerAddr\n          in: query\n          required: false\n          description: Get coordinators by it's forger address.\n          schema:\n            $ref: '#/components/schemas/EthereumAddress'\n        - name: bidderAddr\n          in: query\n          required: false\n          description: Get coordinators by it's bidder address.\n          schema:\n            $ref: '#/components/schemas/EthereumAddress'\n        - name: fromItem\n          in: query\n          required: false\n          description: Indicates the desired first item (using the itemId property) to be included in the response.\n          schema:\n            type: number\n        - name: order\n          in: query\n          required: false\n          description: Order of the returned items. Coordinators will be ordered by increasing (ethereumBlock, forgerAddr).\n          schema:\n            type: string\n            default: ASC\n            enum:\n                - ASC\n                - DESC\n        - name: limit\n          in: query\n          required: false\n          description: Maximum number of items to be returned.\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 2049\n      responses:\n        '200':\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Coordinators'\n        '400':\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error400'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500'\ncomponents:\n  schemas:\n    ItemId:\n      type: integer\n      description: Position of the item in the DB. This is useful for pagination, but has  nothing to do with the protocol.\n    PostPoolL2Transaction:\n      type: object\n      description: L2 transaction to be posted.\n      properties:\n        id:\n          $ref: '#/components/schemas/TransactionId'\n        type:\n          $ref: '#/components/schemas/TransactionTypeL2'\n        tokenId:\n          $ref: '#/components/schemas/TokenId'\n        fromAccountIndex:\n          $ref: '#/components/schemas/AccountIndex'\n        toAccountIndex:\n          type: string\n          description: \u003e-\n            Identifier of the destination account. It references the position where the account is inside the state Merkle tree.\n            The identifier is built using: `hez:` + `token symbol:` + `index`. If this is provided, toHezEthereumAddress and toBjj\n            must be null. To perform an exit the value hez:EXIT:1 must be used.\n          example: null\n          nullable: true\n        toHezEthereumAddress:\n          type: string\n          description: \"Address of an Ethereum account linked to the Hermez Network. If this is provided, toAccountIndex and toBjj must be null.\"\n          pattern: \"^hez:0x[a-fA-F0-9]{40}$\"\n          example: \"hez:0xaa942cfcd25ad4d90a62358b0dd84f33b398262a\"\n          nullable: true\n        toBjj:\n          type: string\n          description: \u003e-\n            BabyJubJub compressed public key, encoded as base64 URL (RFC 4648), which result in 33 bytes. The padding byte is replaced by a sum of the encoded bytes.\n            If this is provided, toAccountIndex must be null and toHezEthereumAddress must be hez:0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF.\n          pattern: \"^hez:[A-Za-z0-9_-]{44}$\"\n          example: null\n          nullable: true\n        amount:\n          allOf:\n            - $ref: '#/components/schemas/BigInt'\n            - description: Amount of tokens to be sent.\n              example: \"6300000000000000000\"\n        fee:\n          $ref: '#/components/schemas/FeeSelector'\n        nonce:\n          $ref: '#/components/schemas/Nonce'\n        signature:\n          allOf:\n            - $ref: '#/components/schemas/BJJSignature'\n            - description: Signature of the transaction. More info [here](https://docs.hermez.io/#/developers/protocol/hermez-protocol/protocol?id=l2).\n            - example: \"72024a43f546b0e1d9d5d7c4c30c259102a9726363adcc4ec7b6aea686bcb5116f485c5542d27c4092ae0ceaf38e3bb44417639bd2070a58ba1aa1aab9d92c03\"\n        maxNumBatch:\n          type: integer\n          description: Batch until the transaction can be forged. If the transaction isn't forged before batch `maxNumBatch`, it will never be forged. 0 means no restriction.\n          example: 0  \n        requestOffset:\n          type: integer\n          description: |\n            Identifier of the relative index of the transaction that would be linked. 0 means no linked transaction.\n            More info on how the identifiers are built [here](https://docs.hermez.io/#/developers/protocol/hermez-protocol/circuits/circuits?id=rq-tx-verifier)\n          example: 0\n          nullable: true\n      example:\n        id: '0x020000000001000000000006'\n        type: Transfer\n        tokenId: 6\n        fromAccountIndex: hez:DAI:256\n        toAccountIndex: hez:DAI:257\n        toHezEthereumAddress: \n        toBjj: \n        amount: '100000000000000'\n        fee: 0\n        nonce: 6\n        signature: 1a79dd5e661d58266901a0de8afb046b466c4c1af937100f627a421771f2911fa3fde8ea2e272b4802a8b1f1229689292acd6f7e8ab4cadc4ab37b6b9e13a101\n        maxNumBatch: 0\n        requestOffset: 0\n      additionalProperties: false\n      required:\n      - id\n      - type\n      - tokenId\n      - fromAccountIndex\n      - amount\n      - fee\n      - nonce\n      - signature\n    AtomicGroupID:\n      type: string\n      description: |\n        Identifier for atomic groups (set of transactions that have to be forged in the same batch, constrained by the request fields of the transactions on the group).\n        This identifier is calculated by hashing the concatenation of the transaction id bytes that conform the group).\n      example:  '0x02b0c3d2fe18df3cd192d862804641190f99b79df3f1d6449b65fe246412120af0'\n    PostPoolL2Transactions:\n      type: object\n      properties:\n        atomicGroupId:\n          $ref: '#/components/schemas/AtomicGroupID'\n        transactions:\n          type: array\n          items:\n            $ref: '#/components/schemas/PostPoolL2Transaction'\n      required:\n        - atomicGroupId\n        - transactions\n      additionalProperties: false\n      example:\n        atomicGroupId: '0x0cd3d5c747145f70055156c565446441b60b8ca0dd7c8ddbb913529ed39773a7'\n        transactions:\n        - id: '0x02d4cbab2c32a7afb59c923cbf54a5f82d6ea1b1c553599a8a301c7109ea1eff17'\n          type: Transfer\n          tokenId: 0\n          fromAccountIndex: hez:ETH:5000\n          toAccountIndex: hez:ETH:5001\n          toHezEthereumAddress:\n          toBjj:\n          amount: '10000000000'\n          fee: 200\n          nonce: 0\n          maxNumBatch: 0\n          signature: dd4c93adedd4ee678819c89f45150fa098265d38a81042d72d5d8040ce64a500b40f2f7acb190620eb537bd22ec26310b660b76bba0697276173e2331e62b204\n          requestOffset: 1\n        - id: '0x0200d87a0e641fb84bb76a013cc3db1b423203f7dfc3f07afdbe3e7b78b6a527de'\n          type: Transfer\n          tokenId: 0\n          fromAccountIndex: hez:ETH:5001\n          toAccountIndex: hez:ETH:5002\n          toHezEthereumAddress:\n          toBjj:\n          amount: '10000000000'\n          fee: 200\n          nonce: 0\n          maxNumBatch: 0\n          signature: f20a2b83227e10b5e46b215c3b27f2bf1b39fb05ce3bb70bb1504ca9e700e49a99b023e15ddfbdc262be3996dbea255445c850f366f954ee352b665c0b648403\n          requestOffset: 1\n        - id: '0x0219ffcb5d99b25614ca81f94fd3947095b07aaf5bf4ba7d1078aa85d06c8a0fc2'\n          type: Transfer\n          tokenId: 0\n          fromAccountIndex: hez:ETH:5002\n          toAccountIndex: hez:ETH:5003\n          toHezEthereumAddress:\n          toBjj:\n          amount: '10000000000'\n          fee: 200\n          nonce: 0\n          maxNumBatch: 0\n          signature: d39134d192a63d0529d0575b5d7c0e1f3e9115c53186194b27e1c29c701442848206ee52e8b477a9804fb5cbff91f5e99ee04e4f1e22909bb6962df8464c0900\n          requestOffset: 1\n        - id: '0x02814c29cf2bbdaa024920fdd71c6d976a0bed2de6d91c61c38daee74bf6a08cba'\n          type: Transfer\n          tokenId: 0\n          fromAccountIndex: hez:ETH:5003\n          toAccountIndex: hez:ETH:5000\n          toHezEthereumAddress:\n          toBjj:\n          amount: '10000000000'\n          fee: 200\n          nonce: 0\n          maxNumBatch: 0\n          signature: 7b9e3e4e8148ccf22532148576118f1212ba2a9ed8ee50022d65bb5c2af5df0307894e739af9fdbc2ebb8a1accd2396144a4937c735bc38658fcf6a1caf4eb03\n          requestOffset: 5\n\n    PoolL2Transaction:\n      type: object\n      properties:\n        id:\n          $ref: '#/components/schemas/TransactionId'\n        itemId:\n          $ref: '#/components/schemas/ItemId'\n        type:\n          $ref: '#/components/schemas/TransactionTypeL2'\n        fromAccountIndex:\n          $ref: '#/components/schemas/AccountIndex'\n        fromHezEthereumAddress:\n          type: string\n          description: \"Address of an Ethereum account linked to the Hermez Network.\"\n          pattern: \"^hez:0x[a-fA-F0-9]{40}$\"\n          example: \"hez:0xaa942cfcd25ad4d90a62358b0dd84f33b398262a\"\n          nullable: true\n        fromBJJ:\n          type: string\n          description: \"BabyJubJub compressed public key, encoded as base64 URL (RFC 4648), which result in 33 bytes. The padding byte is replaced by a sum of the encoded bytes.\"\n          pattern: \"^hez:[A-Za-z0-9_-]{44}$\"\n          example: \"hez:9CK9fjQdMUTGm8KDvGLy3MB-vnP0NCcGX7Uh7OO6KRJm\"\n          nullable: true\n        toAccountIndex:\n          type: string\n          description: \u003e-\n            Identifier of the destination account. It references the position where the account is inside the state Merkle tree.\n            The identifier is built using: `hez:` + `token symbol:` + `index`\n          example: \"hez:DAI:309\"\n          nullable: true\n        toHezEthereumAddress:\n          type: string\n          description: \"Address of an Ethereum account linked to the Hermez Network.\"\n          pattern: \"^hez:0x[a-fA-F0-9]{40}$\"\n          example: null\n          nullable: true\n        toBJJ:\n          type: string\n          description: \"BabyJubJub compressed public key, encoded as base64 URL (RFC 4648), which result in 33 bytes. The padding byte is replaced by a sum of the encoded bytes.\"\n          pattern: \"^hez:[A-Za-z0-9_-]{44}$\"\n          example: null\n          nullable: true\n        amount:\n          allOf:\n            - $ref: '#/components/schemas/BigInt'\n            - description: Amount of tokens to be sent.\n              example: \"6303020000000000000\"\n        fee:\n          $ref: '#/components/schemas/FeeSelector'\n        nonce:\n          $ref: '#/components/schemas/Nonce'\n        state:\n          $ref: '#/components/schemas/PoolL2TransactionState'\n        batchNum:\n          type: integer\n          description: Batch num for transaction.\n          example: 0\n          nullable: true\n        maxNumBatch:\n          type: integer\n          description: Batch until the transaction can be forged. If the transaction isn't forged before batch `maxNumBatch`, it will never be forged. 0 means no restriction.\n          example: 0 \n        info:\n          type: string\n          description: \"Info contains information about the status \u0026 State of the transaction. As for example, if the Tx has not been selected in the last batch due not enough Balance at the Sender account, this reason would appear at this parameter.\"\n          pattern: \".*\"\n          example: \"Tx not selected due not enough Balance at the sender.\"\n          nullable: true\n        signature:\n          allOf:\n            - $ref: '#/components/schemas/BJJSignature'\n            - description: Signature of the transaction. More info [here](https://docs.hermez.io/#/developers/protocol/hermez-protocol/protocol?id=l2).\n            - example: \"72024a43f546b0e1d9d5d7c4c30c259102a9726363adcc4ec7b6aea686bcb5116f485c5542d27c4092ae0ceaf38e3bb44417639bd2070a58ba1aa1aab9d92c03\"\n        errorType:\n          type: string\n          nullable: true\n        errorCode:\n          type: integer\n          nullable: true\n        timestamp:\n          type: string\n          description: Moment in which the transaction was added to the pool.\n          format: date-time\n        requestFromAccountIndex:\n          type: string\n          description: \u003e-\n            Identifier of an account. It references the position where the account is inside the state Merkle tree.\n            The identifier is built using: `hez:` + `token symbol:` + `index`\n          nullable: true\n          example: null\n        requestToAccountIndex:\n          type: string\n          description: \u003e-\n            Identifier of an account. It references the position where the account is inside the state Merkle tree.\n            The identifier is built using: `hez:` + `token symbol:` + `index`\n          nullable: true\n          example: null\n        requestToHezEthereumAddress:\n          type: string\n          description: \"Address of an Ethereum account linked to the Hermez Network.\"\n          pattern: \"^hez:0x[a-fA-F0-9]{40}$\"\n          nullable: true\n          example: null\n        requestToBJJ:\n          type: string\n          description: \"BabyJubJub compressed public key, encoded as base64 URL (RFC 4648), which result in 33 bytes. The padding byte is replaced by a sum of the encoded bytes.\"\n          pattern: \"^hez:[A-Za-z0-9_-]{44}$\"\n          nullable: true\n          example: null\n        requestTokenId:\n          type: integer\n          description: References the `tokenId` of the requested transaction.\n          example: null\n          nullable: true\n        requestAmount:\n          type: string\n          description: BigInt is an integer encoded as a string for numbers that are very large.\n          nullable: true\n          example: null\n        requestFee:\n          type: integer\n          description: Index of the fee type to select, more info [here](https://docs.hermez.io/#/developers/protocol/hermez-protocol/protocol?id=user).\n          minimum: 0\n          maximum: 256\n          nullable: true\n          example: null\n        requestNonce:\n          type: integer\n          description: Number that can only be used once per account. Increments by one with each transaction.\n          minimum: 0\n          maximum: 1.84467440737096e+19\n          nullable: true\n          example: null\n        token:\n          $ref: '#/components/schemas/Token'\n      example:\n        amount: '100000000000000'\n        fee: 0\n        fromAccountIndex: hez:SCC:256\n        fromBJJ: hez:r_trOasVEk0zNaalOoS9aLedu6mO7jI5XTIPu_zGXoyn\n        fromHezEthereumAddress: hez:0x00000000000000000000000000000000004Ab84F\n        id: '0x020000000001000000000006'\n        nonce: 6\n        requestAmount: \n        requestFee: 0\n        requestFromAccountIndex: \n        requestNonce: 0\n        requestToAccountIndex: \n        requestToBJJ: \n        requestToHezEthereumAddress: \n        requestTokenId: \n        signature: 5ee9c7b5baa243ba282d18596a55cc357b01513eaed75165365f802102cce4a7a1dd35e3ab31cf9039e2b8a9f570d935115be9379a3dd47813dfc014031ab201\n        state: pend\n        timestamp: '2020-11-17T13:58:54.422232Z'\n        toAccountIndex: hez:SCC:257\n        toBJJ: hez:r_trOasVEk0zNaalOoS9aLedu6mO7jI5XTIPu_zGXoyn\n        toHezEthereumAddress: hez:0x00000000000000000000000000000000004Ab84F\n        maxNumBatch: 0\n        token:\n          USD: 23.74\n          decimals: 7\n          ethereumAddress: '0x0000000000000000000000000000000000000006'\n          ethereumBlockNum: 2\n          fiatUpdate: \n          id: 6\n          itemId: 7\n          name: Some Cool Coin\n          symbol: 'SCC'\n        type: Transfer\n      required:\n        - id\n        - type\n        - fromAccountIndex\n        - fromHezEthereumAddress\n        - fromBJJ\n        - toAccountIndex\n        - toHezEthereumAddress\n        - toBJJ\n        - amount\n        - fee\n        - nonce\n        - state\n        - info\n        - signature\n        - timestamp\n        - requestFromAccountIndex\n        - requestToAccountIndex\n        - requestToHezEthereumAddress\n        - requestToBJJ\n        - requestTokenId\n        - requestAmount\n        - requestFee\n        - requestNonce\n        - token\n      additionalProperties: false\n    PoolL2Transactions:\n      type: object\n      properties:\n        transactions:\n          type: array\n          description: List of pool l2 transactions\n          items:\n            $ref: '#/components/schemas/PoolL2Transaction'\n        pendingItems:\n          $ref: '#/components/schemas/PendingItems'\n      required:\n        - transactions\n        - pendingItems\n      additionalProperties: false\n    AtomicGroup:\n      type: array\n      items:\n        $ref: '#/components/schemas/PoolL2Transaction'\n    TransactionId:\n      type: string\n      description: Identifier for transactions. Used for any kind of transaction (both L1 and L2). More info on how the identifiers are built [here](https://docs.hermez.io/#/developers/dev-guide?id=transaction-id)\n      example: \"0x00000000000001e240004700\" \n    TransactionIds:\n      type: array\n      items:\n          $ref: '#/components/schemas/TransactionId'\n    EthereumAddress:\n      type: string\n      description: \"Address of an Ethereum account.\"\n      pattern: \"^0x[a-fA-F0-9]{40}$\"\n      example: \"0xaa942cfcd25ad4d90a62358b0dd84f33b398262a\" \n    HezEthereumAddress:\n      type: string\n      description: \"Address of an Ethereum account linked to the Hermez Network.\"\n      pattern: \"^hez:0x[a-fA-F0-9]{40}$\"\n      example: \"hez:0xaa942cfcd25ad4d90a62358b0dd84f33b398262a\" \n    BJJ:\n      type: string\n      description: \"BabyJubJub compressed public key, encoded as base64 URL (RFC 4648), which result in 33 bytes. The padding byte is replaced by a sum of the encoded bytes.\"\n      pattern: \"^hez:[A-Za-z0-9_-]{44}$\"\n      example: \"hez:rR7LXKal-av7I56Y0dEBCVmwc9zpoLY5ERhy5w7G-xwe\"\n    AccountIndex:\n      type: string\n      description: \u003e-\n        Identifier of an account. It references the position where the account is inside the state Merkle tree.\n        The identifier is built using: `hez:` + `token symbol:` + `index`\n      example: \"hez:DAI:4444\"\n    TransactionType:\n      type: string\n      description: Type of transaction.\n      enum:\n      - Exit\n      - Transfer\n      - Deposit\n      - CreateAccountDeposit\n      - CreateAccountDepositTransfer\n      - DepositTransfer\n      - ForceTransfer\n      - ForceExit\n      - TransferToEthAddr\n      - TransferToBJJ\n    TransactionTypeL2:\n      type: string\n      description: Type of transaction.\n      enum:\n      - Exit\n      - Transfer\n      - TransferToEthAddr\n      - TransferToBJJ\n    TokenId:\n      type: integer\n      description: Identifier of a token registered in the network.\n      minimum: 0\n      maximum: 4294967295\n      example: 98765\n    BigInt:\n      type: string\n      description: BigInt is an integer encoded as a string for numbers that are very large.\n      example: \"8708856933496328593\"\n      pattern: \"^\\\\d+$\"\n    FeeSelector:\n      type: integer\n      description: Index of the fee type to select, more info [here](https://docs.hermez.io/#/developers/protocol/hermez-protocol/protocol?id=user).\n      minimum: 0\n      maximum: 256\n      example: 36\n    Nonce:\n      type: integer\n      description: Number that can only be used once per account, increments by one at each transaction.\n      minimum: 0\n      maximum: 1.84467440737096e+19\n      example: 121\n    PoolL2TransactionState:\n      type: string\n      description: \u003e \n        State of a L2 transaction from the coordinator pool.\n          * pend: Pending\n          * fing: Forging\n          * fged: Forged\n          * invl: Invalid  \n      enum:\n      - pend\n      - fing\n      - fged\n      - invl    \n    ETHSignature:\n      type: string\n      description: Ethereum signature.\n      pattern: \"^0x[a-fA-F0-9]{130}$\"\n      example: \"0xf9161cd688394772d93aa3e7b3f8f9553ca4f94f65b7cece93ed4a239d5c0b4677dca6d1d459e3a5c271a34de735d4664a43e5a8960a9a6e027d12c562dd448e1c\"\n    BJJSignature:\n      type: string\n      description: BabyJubJub compressed signature.\n      pattern: \"^[a-fA-F0-9]{128}$\"\n      example: \"72024a43f546b0e1d9d5d7c4c30c259102a9726363adcc4ec7b6aea686bcb5116f485c5542d27c4092ae0ceaf38e3bb44417639bd2070a58ba1aa1aab9d92c03\"\n    BatchNum:\n      type: integer\n      description: Identifier of a batch. Every new forged batch increments by one the batchNum, starting at 0.\n      minimum: 0\n      maximum: 4294967295\n      example: 5432\n    AccountCreationAuthorizationPost:\n      type: object\n      properties:\n        hezEthereumAddress:\n          $ref: '#/components/schemas/HezEthereumAddress'\n        bjj:\n          $ref: '#/components/schemas/BJJ'\n        signature:\n          $ref: '#/components/schemas/ETHSignature'\n      example:\n        hezEthereumAddress: hez:0xb5270eB4ae11c6fAAff6F5fa0A5202B8d963634C\n        bjj: hez:hg2Ydsb8O66H-steBR3cnHl944ua7E-PkTJ_SbPBBg5r\n        signature: '0xb7cf237c4a2ff3d4df57752e7b9deb236fa384f03a79d39acf17ec5f8d12a3cf00b017c2466611310cb2bacac68460e96778278646842c6d2bcb79979271c28501'\n      required:\n      - hezEthereumAddress\n      - bjj\n      - signature\n    AccountCreationAuthorization:\n      type: object\n      properties:\n        timestamp:\n          type: string\n          format: date-time\n        hezEthereumAddress:\n          $ref: '#/components/schemas/HezEthereumAddress'\n        bjj:\n          $ref: '#/components/schemas/BJJ'\n        signature:\n          $ref: '#/components/schemas/ETHSignature'\n      example:\n        hezEthereumAddress: hez:0x74a549b410d01d9eC56346aE52b8550515B283b2\n        bjj: hez:dEZ-Tj7d5h0TAqbnRTTYURYDEo5KZzB87_2WknUU8gCN\n        signature: '0x8db6db2ad6cbe21297fb8ee01c59b01b52d4df7ea92a0f0dee0be0075a8f224a06b367407c8f402cfe0490c142a1c92da3fc29b51162ae160d35e1577d3071bb01'\n        timestamp: '2020-11-17T13:25:36.784295Z'\n      additionalProperties: false\n      required:\n      - timestamp\n      - hezEthereumAddress\n      - bjj\n      - signature\n    AccountCreationAuthorizationPostSuccessResponse:\n      type: object\n      properties:\n        success:\n          type: string\n      example:\n        success: 'OK'\n      additionalProperties: false\n      required:\n      - success\n    HistoryTransaction:\n      type: object\n      description: Transaction of the Hermez Network\n      properties:\n        L1orL2:\n          type: string\n          enum:\n            - L1\n            - L2\n        id:\n          $ref: '#/components/schemas/TransactionId'\n        itemId:\n          $ref: '#/components/schemas/ItemId'\n        type:\n          $ref: '#/components/schemas/TransactionType'\n        position:\n          $ref: '#/components/schemas/TransactionPosition'\n        fromAccountIndex:\n          type: string\n          description: \u003e-\n            Identifier of an account. It references the position where the account is inside the state Merkle tree.\n            The identifier is built using: `hez:` + `token symbol:` + `index`\n          example: \"hez:DAI:4444\"\n          nullable: true\n        fromHezEthereumAddress:\n          type: string\n          description: \"Address of an Ethereum account linked to the Hermez Network.\"\n          pattern: \"^hez:0x[a-fA-F0-9]{40}$\"\n          example: \"hez:0xaa942cfcd25ad4d90a62358b0dd84f33b398262a\"\n          nullable: true\n        fromBJJ:\n          type: string\n          description: \"BabyJubJub compressed public key, encoded as base64 URL (RFC 4648), which result in 33 bytes. The padding byte is replaced by a sum of the encoded bytes.\"\n          pattern: \"^hez:[A-Za-z0-9_-]{44}$\"\n          example: \"hez:9CK9fjQdMUTGm8KDvGLy3MB-vnP0NCcGX7Uh7OO6KRJm\"\n          nullable: true\n        toAccountIndex:\n          allOf:\n            - $ref: '#/components/schemas/AccountIndex'\n            - example: \"hez:DAI:672\"\n        toHezEthereumAddress:\n          type: string\n          description: \"Address of an Ethereum account linked to the Hermez Network.\"\n          pattern: \"^hez:0x[a-fA-F0-9]{40}$\"\n          example: \"hez:0xaa942cfcd25ad4d90a62358b0dd84f33b398262a\"\n          nullable: true\n        toBJJ:\n          type: string\n          description: \"BabyJubJub compressed public key, encoded as base64 URL (RFC 4648), which result in 33 bytes. The padding byte is replaced by a sum of the encoded bytes.\"\n          pattern: \"^hez:[A-Za-z0-9_-]{44}$\"\n          example: \"hez:f1J78_6uqTyjX6jrVCqN4RFeRBnWQAGl477ZFtOnH6Sm\"\n          nullable: true\n        amount:\n          allOf:\n            - $ref: '#/components/schemas/BigInt'\n            - description: Amount of tokens to be sent.\n            -  example: \"4903020000000000000\"\n        batchNum:\n          type: integer\n          description: Batch in which the transaction was forged. Null indicates not forged yet.\n          minimum: 0\n          maximum: 4294967295\n          example: 5432\n          nullable: true\n        historicUSD:\n          type: number\n          description: Value in USD at the moment the transaction was forged.\n          example: 49.7\n          nullable: true\n        timestamp:\n          type: string\n          format: date-time\n          description: In the case of L1 indicates the moment where the transaction was added in the smart contract. For L2 indicates when the transaction was forged.\n        token:\n          $ref: '#/components/schemas/Token'\n        L1Info:\n          type: object\n          description: Additional information that only applies to L1 transactions.\n          nullable: true\n          properties:\n            toForgeL1TransactionsNum:\n              $ref: '#/components/schemas/ToForgeL1TransactionsNum'\n            userOrigin:\n              type: boolean\n              description: True if the transaction was sent by a user. False if it was sent by a coordinator.\n            depositAmount:\n              allOf:\n                - $ref: '#/components/schemas/BigInt'\n                - description: Tokens transfered from L1 to L2.\n                - example: \"4900000000000000000\"\n            amountSuccess:\n              type: boolean\n              description: \u003e-\n                Indicates if the amount specified by the user has been sent propperly. If false, the amount that actualy has been sent is 0.\n                If the transaction hasn't been forged yet (`batchNum == null`), this value will be false, as it's unknown if it has succeed or not.\n                An example were this value could be false: a user send a `DepositTransfer` transaction, but when the tx is forged there are not\n                enougth founds in the account. In this case the transfer part of the transaction won't be effective making the amount have a real value of 0.\n              example: true\n            depositAmountSuccess:\n              type: boolean\n              description: \u003e-\n                Indicates if the deposit amount specified by the user has been sent propperly. If false, the deposit amount that actualy has been sent is 0.\n                If the transaction hasn't been forged yet (`batchNum == null`), this value will be false, as it's unknown if it has succeed or not.\n                An example were this value could be false: a user send a `Deposit` transaction, but when the tx is forged the token id is not registered on the network.\n                In this case transaction won't be effective making the deposit amount have a real value of 0.\n              example: true\n            historicDepositAmountUSD:\n              type: number\n              description: Deposit amount in USD, at the moment the transaction was made.\n              example: 3.897\n              nullable: true\n            ethereumBlockNum:\n              allOf:\n                - $ref: '#/components/schemas/EthBlockNum'\n                - description: Ethereum block in which the transaction was added to the smart contract forge queue.\n                - example: 258723049\n            ethereumTxHash:\n              type: string\n              description: hash of the Ethereum transaction in which the tx was mined\n              example: \"0xae98c94d860f01a17f961bf4bdfb6e0c6cd10d3fda5cc861e805ca1240c58553\"\n            l1Fee:\n              type: string\n              description: fee spent by the user\n              example: \"50000000\"\n              nullable: true\n          required:\n            - toForgeL1TransactionsNum\n            - userOrigin\n            - depositAmount\n            - amountSuccess\n            - depositAmountSuccess\n            - historicDepositAmountUSD\n            - ethereumBlockNum\n            - ethereumTxHash\n            - l1Fee\n          additionalProperties: false\n        L2Info:\n          type: object\n          description: Additional information that only applies to L2 transactions.\n          nullable: true\n          properties:\n            fee:\n              $ref: '#/components/schemas/FeeSelector'\n            historicFeeUSD:\n              type: number\n              description: Fee in USD, at the moment the transaction was forged.\n              example: 263.89\n              nullable: true\n            nonce:\n              $ref: '#/components/schemas/Nonce'\n          example: null\n          required:\n            - fee\n            - historicFeeUSD\n            - nonce\n          additionalProperties: false\n      example:\n        L1Info:\n          ethereumBlockNum: 1\n          historicDepositAmountUSD: 232.47\n          depositAmount: '261'\n          toForgeL1TransactionsNum: 10\n          userOrigin: true\n          ethereumTxHash: \"0xae98c94d860f01a17f961bf4bdfb6e0c6cd10d3fda5cc861e805ca1240c58553\"\n          l1Fee: \"5000000\"\n        L1orL2: L1\n        L2Info: \n        amount: '261'\n        batchNum: 1\n        fromAccountIndex: hez:ETH:276\n        fromBJJ: hez:p_OohTzjzZnD3Sw93HQlK13DSxfD6lyvbfhh2kBsV6Z4\n        fromHezEthereumAddress: hez:0x0000000000000000000000000000000000000114\n        historicUSD: 3784.19\n        id: '0x00000000000000000a000400'\n        itemId: 2\n        position: 4\n        timestamp: '2020-11-17T14:08:12.197554Z'\n        toAccountIndex: hez:ETH:276\n        toBJJ: hez:p_OohTzjzZnD3Sw93HQlK13DSxfD6lyvbfhh2kBsV6Z4\n        toHezEthereumAddress: hez:0x0000000000000000000000000000000000000114\n        token:\n          USD: 234.56\n          decimals: 18\n          ethereumAddress: '0x0000000000000000000000000000000000000000'\n          ethereumBlockNum: 0\n          fiatUpdate: \n          id: 0\n          itemId: 1\n          name: Ether\n          symbol: ETH\n        type: CreateAccountDeposit\n      required:\n        - L1orL2\n        - id\n        - itemId\n        - type\n        - position\n        - fromAccountIndex\n        - fromHezEthereumAddress\n        - fromBJJ\n        - toAccountIndex\n        - toHezEthereumAddress\n        - toBJJ\n        - amount\n        - batchNum\n        - historicUSD\n        - timestamp\n        - token\n        - L1Info\n        - L2Info\n      additionalProperties: false\n    HistoryTransactions:\n      type: object\n      properties:\n        transactions:\n          type: array\n          description: List of history transactions.\n          items: \n            $ref: '#/components/schemas/HistoryTransaction'\n        pendingItems:\n          $ref: '#/components/schemas/PendingItems'\n      example:\n        transactions:\n          - L1Info:\n              ethereumBlockNum: 3\n              historicDepositAmountUSD: \n              depositAmount: '0'\n              toForgeL1TransactionsNum: 7\n              userOrigin: true\n              ethereumTxHash: \"0xae98c94d860f01a17f961bf4bdfb6e0c6cd10d3fda5cc861e805ca1240c58553\"\n              l1Fee: \"5000000\"\n            L1orL2: L1\n            L2Info: \n            amount: '88888800000000000'\n            batchNum: 9\n            fromAccountIndex: hez:ETH:262\n            fromBJJ: hez:Mj_xDCjfN-y3h_4hbhEdtkqnz6LFF1Cf4AV_8IoQswwh\n            fromHezEthereumAddress: hez:0x2B5AD5c4795c026514f8317c7a215E218DcCD6cF\n            historicUSD: 44.4444\n            id: '0x000000000000000007000300'\n            itemId: 28\n            position: 3\n            timestamp: '2020-11-26T09:18:40.004749Z'\n            toAccountIndex: hez:EXIT:1\n            toBJJ: \n            toHezEthereumAddress: \n            token:\n              USD: 500\n              decimals: 18\n              ethereumAddress: '0x0000000000000000000000000000000000000000'\n              ethereumBlockNum: 0\n              fiatUpdate: '2020-11-26T09:18:27.034866Z'\n              id: 0\n              itemId: 1\n              name: Ether\n              symbol: ETH\n            type: ForceExit\n          - L1Info: \n            L1orL2: L2\n            L2Info:\n              fee: 123\n              historicFeeUSD: 2.15037380962404\n              nonce: 1\n            amount: '55555500000000000'\n            batchNum: 8\n            fromAccountIndex: hez:TKN1:264\n            fromBJJ: hez:Mj_xDCjfN-y3h_4hbhEdtkqnz6LFF1Cf4AV_8IoQswwh\n            fromHezEthereumAddress: hez:0x2B5AD5c4795c026514f8317c7a215E218DcCD6cF\n            historicUSD: 23.4999765\n            id: '0x020000000001080000000001'\n            itemId: 19\n            position: 2\n            timestamp: '2020-11-26T09:18:40.004749Z'\n            toAccountIndex: hez:TKN1:260\n            toBJJ: hez:81h61cx0FKR1RXcLbHW8cZMPY8SR6yKU3ei4pmcLjpaQ\n            toHezEthereumAddress: hez:0x6813Eb9362372EEF6200f3b1dbC3f819671cBA69\n            token:\n              USD: 423\n              decimals: 18\n              ethereumAddress: '0x0000000000000000000000000000000000000064'\n              ethereumBlockNum: 2\n              fiatUpdate: '2020-11-26T09:18:27.04357Z'\n              id: 1\n              itemId: 2\n              name: Test Token 1\n              symbol: TKN1\n            type: Transfer\n          - L1Info: \n            L1orL2: L2\n            L2Info:\n              fee: 44\n              historicFeeUSD: 0.1973587359744\n              nonce: 2\n            amount: '66666600000000000'\n            batchNum: 8\n            fromAccountIndex: hez:ETH:259\n            fromBJJ: hez:W6x4TZOAZ9mAqdOb3Xm_hKDLspaXfEfMMN4tXOkinS-W\n            fromHezEthereumAddress: hez:0x7E5F4552091A69125d5DfCb7b8C2659029395Bdf\n            historicUSD: 33.3333\n            id: '0x020000000001030000000002'\n            itemId: 20\n            position: 3\n            timestamp: '2020-11-26T09:18:40.004749Z'\n            toAccountIndex: hez:EXIT:1\n            toBJJ: \n            toHezEthereumAddress: \n            token:\n              USD: 500\n              decimals: 18\n              ethereumAddress: '0x0000000000000000000000000000000000000000'\n              ethereumBlockNum: 0\n              fiatUpdate: '2020-11-26T09:18:27.034866Z'\n              id: 0\n              itemId: 1\n              name: Ether\n              symbol: ETH\n            type: Exit\n          - L1Info:\n              ethereumBlockNum: 3\n              historicDepositAmountUSD: 14099.9999859\n              depositAmount: '33333333300000000000'\n              toForgeL1TransactionsNum: 2\n              userOrigin: true\n              ethereumTxHash: \"0xae98c94d860f01a17f961bf4bdfb6e0c6cd10d3fda5cc861e805ca1240c58553\"\n              l1Fee: \"5000000\"\n            L1orL2: L1\n            L2Info: \n            amount: '0'\n            batchNum: 4\n            fromAccountIndex: hez:TKN1:0\n            fromBJJ: hez:W6x4TZOAZ9mAqdOb3Xm_hKDLspaXfEfMMN4tXOkinS-W\n            fromHezEthereumAddress: hez:0x7E5F4552091A69125d5DfCb7b8C2659029395Bdf\n            historicUSD: \n            id: '0x000000000000000002000000'\n            itemId: 9\n            position: 0\n            timestamp: '2020-11-26T09:18:40.004749Z'\n            toAccountIndex: hez:TKN1:0\n            toBJJ: \n            toHezEthereumAddress: \n            token:\n              USD: 423\n              decimals: 18\n              ethereumAddress: '0x0000000000000000000000000000000000000064'\n              ethereumBlockNum: 2\n              fiatUpdate: '2020-11-26T09:18:27.04357Z'\n              id: 1\n              itemId: 2\n              name: Test Token 1\n              symbol: TKN1\n            type: CreateAccountDeposit\n          - L1Info: \n            L1orL2: L2\n            L2Info:\n              fee: 2\n              historicFeeUSD: 3.87833366166246e-17\n              nonce: 1\n            amount: '11111100000000000'\n            batchNum: 7\n            fromAccountIndex: hez:TKN1:261\n            fromBJJ: hez:W6x4TZOAZ9mAqdOb3Xm_hKDLspaXfEfMMN4tXOkinS-W\n            fromHezEthereumAddress: hez:0x7E5F4552091A69125d5DfCb7b8C2659029395Bdf\n            historicUSD: 4.6999953\n            id: '0x020000000001050000000001'\n            itemId: 15\n            position: 2\n            timestamp: '2020-11-26T09:18:40.004749Z'\n            toAccountIndex: hez:TKN1:264\n            toBJJ: hez:Mj_xDCjfN-y3h_4hbhEdtkqnz6LFF1Cf4AV_8IoQswwh\n            toHezEthereumAddress: hez:0x2B5AD5c4795c026514f8317c7a215E218DcCD6cF\n            token:\n              USD: 423\n              decimals: 18\n              ethereumAddress: '0x0000000000000000000000000000000000000064'\n              ethereumBlockNum: 2\n              fiatUpdate: '2020-11-26T09:18:27.04357Z'\n              id: 1\n              itemId: 2\n              name: Test Token 1\n              symbol: TKN1\n            type: Transfer\n        pendingItems: 23\n      required:\n        - transactions\n        - pendingItems\n      additionalProperties: false\n    EthBlockNum:\n      type: integer\n      description: Ethereum block number\n      minimum: 0\n      maximum: 1.84467440737096e+19\n      example: 762375478\n    ToForgeL1TransactionsNum:\n      type: integer\n      description: Reference to know in which batch a L1 transaction was forged / will be forged.\n      minimum: 0\n      maximum: 4294967295\n      example: 784\n      nullable: true\n    TransactionPosition:\n      type: integer\n      description: Position that a transaction occupies in a batch.\n      minimum: 0\n      example: 5\n    URL:\n      type: string\n      description: HTTP URL\n      example: \"https://apimock.hermez.network\"\n    TokenSymbol:\n      type: string\n      description: Abreviation of the token name.\n      example: \"DAI\"\n    TokenName:\n      type: string\n      description: Token name.\n      example: \"Dai\"\n    CollectedFees:\n      type: object\n      description: Collected fees by the forger of the batch, represented by a map of tokenId =\u003e amount. A maximum of 64 different tokens can be used.\n      additionalProperties:\n        type: string\n      example:\n        1234: \"425632785672345647\"\n        4321: \"86538967235465432654352\"\n    Batch:\n      type: object\n      description: Group of transactions forged in a coordinator and sent and validated in Ethereum.\n      properties:\n        itemId:\n          $ref: '#/components/schemas/ItemId'\n        batchNum:\n          $ref: '#/components/schemas/BatchNum'\n        ethereumBlockNum:\n          $ref: '#/components/schemas/EthBlockNum'\n        ethereumBlockHash:\n          type: string\n          description: hash of the Ethereum block in which the batch was forged\n          example: \"0xfe88c94d860f01a17f961bf4bdfb6e0c6cd10d3fda5cc861e805ca1240c58553\"\n        ethereumTxHash:\n          type: string\n          description: hash of the Ethereum transaction in which the batch was forged\n          example: \"0xae98c94d860f01a17f961bf4bdfb6e0c6cd10d3fda5cc861e805ca1240c58553\"\n        timestamp:\n          type: string\n          format: date-time\n          description: Time in which the batch was forged.\n        forgerAddr:\n          $ref: '#/components/schemas/EthereumAddress'\n        collectedFees:\n          $ref: '#/components/schemas/CollectedFees'\n        historicTotalCollectedFeesUSD:\n          type: number\n          description: Sum of the all the fees collected, in USD, at the moment the batch was forged.\n          example: 23.3\n        stateRoot:\n          allOf:\n            - $ref: '#/components/schemas/Hash'\n            - description: Root of the accounts Merkle Tree.\n            - example: \"2734657026572a8708d883\"\n        numAccounts:\n          type: integer\n          description: Number of registered accounts in this batch.\n        exitRoot:\n          allOf:\n            - $ref: '#/components/schemas/Hash'\n            - description: Root of the exit Merkle Tree associated to this batch.\n            - example: \"2734657026572a8708d883\"\n        forgeL1TransactionsNum:\n          type: integer\n          description: Identifier that corresponds to the group of L1 transactions forged in the current batch.\n          example: 5\n          nullable: true\n        slotNum:\n          $ref: '#/components/schemas/SlotNum'\n        forgedTransactions:\n          type: integer\n          description: Amount of forged transactions in this batch.\n          example: 318\n      additionalProperties: false\n      required:\n          - itemId\n          - batchNum\n          - ethereumTxHash\n          - ethereumBlockNum\n          - ethereumBlockHash\n          - timestamp\n          - forgerAddr\n          - collectedFees\n          - historicTotalCollectedFeesUSD\n          - stateRoot\n          - numAccounts\n          - exitRoot\n          - forgeL1TransactionsNum\n          - slotNum\n          - forgedTransactions\n    FullBatch:\n      type: object\n      description: Group of transactions forged in a coordinator and sent and validated in Ethereum.\n      properties:\n        batch:\n          $ref: '#/components/schemas/Batch'\n        transactions:\n          type: array\n          description: List of forged transactions in the batch\n          items:\n            $ref: '#/components/schemas/HistoryTransaction'\n          nullable: true\n      additionalProperties: false\n      required:\n        - batch\n        - transactions\n    Hash:\n      type: string\n      description: hashed data\n      example: \"2734657026572a8708d883\"\n    SlotNum:\n      type: integer\n      description: Identifier of a slot.\n      minimum: 0\n      maximum: 4294967295\n      example: 784        \n    Batches:\n      type: object\n      properties:\n        batches:\n          type: array\n          description: List of batches.\n          items:\n            $ref: '#/components/schemas/Batch'\n        pendingItems:\n          $ref: '#/components/schemas/PendingItems'\n      additionalProperties: false\n      required:\n        - batches\n        - pendingItems\n    Coordinator:\n      type: object\n      properties:\n        itemId:\n          $ref: '#/components/schemas/ItemId'\n        forgerAddr:\n          $ref: '#/components/schemas/EthereumAddress'\n        bidderAddr:\n          $ref: '#/components/schemas/EthereumAddress'\n        URL:\n          $ref: '#/components/schemas/URL'\n        ethereumBlock:\n          allOf:\n            - $ref: '#/components/schemas/EthBlockNum'\n            - description: Ethereum block in which the coordinator registered into the network.\n            - example: 5735943738\n      additionalProperties: false\n      required:\n        - itemId\n        - forgerAddr\n        - bidderAddr\n        - URL\n        - ethereumBlock\n    Coordinators:\n      type: object\n      properties:\n        coordinators:\n          type: array\n          description: List of coordinators.\n          items: \n            $ref: '#/components/schemas/Coordinator'\n        pendingItems:\n          $ref: '#/components/schemas/PendingItems'\n      additionalProperties: false\n      required:\n        - coordinators\n        - pendingItems\n    Bid:\n      type: object\n      description: Tokens placed in an auction by a coordinator to gain the right to forge batches during a specific slot.\n      properties:\n        itemId:\n          $ref: '#/components/schemas/ItemId'\n        bidderAddr:\n          $ref: '#/components/schemas/EthereumAddress'\n        forgerAddr:\n          $ref: '#/components/schemas/EthereumAddress'\n        slotNum:\n          $ref: '#/components/schemas/SlotNum'\n        URL:\n          $ref: '#/components/schemas/URL'\n        bidValue:\n          $ref: '#/components/schemas/BigInt'\n        ethereumBlockNum:\n          $ref: '#/components/schemas/EthBlockNum'\n        timestamp:\n          type: string\n          format: date-time\n      additionalProperties: false\n      required:\n        - bidderAddr\n        - forgerAddr\n        - slotNum\n        - URL\n        - bidValue\n        - ethereumBlockNum\n        - timestamp\n    Bids:\n      type: object\n      properties:\n        bids:\n          type: array\n          description: List of bids.\n          items: \n            $ref: '#/components/schemas/Bid'\n        pendingItems:\n          $ref: '#/components/schemas/PendingItems'\n      additionalProperties: false\n      required:\n        - bids\n        - pendingItems\n    RecommendedFee:  \n      type: object\n      description: Fee that the coordinator recommends per transaction in USD.\n      properties:\n        existingAccount:\n          type: number\n          description: Recommended fee if the destination account of the transaction already exists.\n          minimum: 0\n          example: 0.1\n        createAccount:\n          type: number\n          description: Recommended fee if the destination account of the transaction doesn't exist, but the coordinator has an authorization to create a valid account associated to an Ethereum address and a BJJ public key controlled by the receiver.\n          minimum: 0\n          example: 1.3\n        createAccountInternal:\n          type: number\n          description: Recommended fee if the destination account of the transaction doesn't exist, but the coordinator has the ability to create a valid account associated to a BJJ public key controlled by the receiver. Note that these kind of accounts are not associated with an Ethereum address and therefore can only operate in L2. \n          minimum: 0\n          example: 0.5\n      required:\n        - existingAccount\n        - createAccount\n        - createAccountInternal\n      additionalProperties: false\n    Token:\n      type: object\n      description: Hermez Network compatible and registered token.\n      properties:\n        id:\n          $ref: '#/components/schemas/TokenId'\n        ethereumAddress:\n          allOf:\n            - $ref: '#/components/schemas/EthereumAddress'\n            - description: Ethereum address in which the token is deployed.\n            - example: \"0xaa942cfcd25ad4d90a62358b0dd84f33b398262a\"\n        itemId:\n          $ref: '#/components/schemas/ItemId'\n        name:\n          type: string\n          description: full name of the token\n          example: Maker Dai\n        symbol:\n          allOf:\n            - $ref: '#/components/schemas/TokenSymbol'\n            - example: DAI\n        decimals:\n          type: integer\n          description: Number of decimals of the token.\n          example: 18\n        ethereumBlockNum:\n          allOf:\n            - $ref: '#/components/schemas/EthBlockNum'\n            - description: Ethereum block number in which the token was added to the Hermez Network.\n            - example: 539847538\n        USD:\n          type: number\n          description: Value of the token in USD.\n          example: 1.01\n          nullable: true\n        fiatUpdate:\n          type: string\n          format: date-time\n          description: Timestamp of the moment the `USD` value was updated.\n          nullable: true\n      required:\n        - id\n        - ethereumAddress\n        - itemId\n        - name\n        - symbol\n        - decimals\n        - ethereumBlockNum\n        - USD\n        - fiatUpdate\n      additionalProperties: false\n    Tokens:\n      type: object\n      properties:\n        tokens:\n          type: array\n          description: List of tokens.\n          items: \n            $ref: '#/components/schemas/Token'\n        pendingItems:\n          $ref: '#/components/schemas/PendingItems'\n    Exit:\n      type: object\n      description: Exit tree leaf. It Contains the necessary information to perform a withdrawal.\n      properties:\n        batchNum:\n          allOf:\n            - $ref: '#/components/schemas/BatchNum'\n            - description: Batch in which the exit was forged.\n            - example: 7394\n        accountIndex:\n          $ref: '#/components/schemas/AccountIndex'\n        bjj:\n          $ref: '#/components/schemas/BJJ'      \n        hezEthereumAddress:\n          $ref: '#/components/schemas/HezEthereumAddress'\n        itemId:\n          $ref: '#/components/schemas/ItemId'\n        merkleProof:\n          type: object\n          description: Existence proof of a leaf in a given Merkle Root. Encoded as hexadecimal string.\n          properties:\n              root:\n                $ref: '#/components/schemas/BigInt'\n              siblings:\n                type: array\n                items:\n                  $ref: '#/components/schemas/BigInt'\n              oldKey:\n                $ref: '#/components/schemas/BigInt'\n              oldValue:\n                $ref: '#/components/schemas/BigInt'\n              isOld0:\n                type: boolean\n              key:\n                $ref: '#/components/schemas/BigInt'\n              value:\n                $ref: '#/components/schemas/BigInt'\n              fnc:\n                type: integer\n                maximum: 3\n                minimum: 0\n          required:\n            - root\n            - siblings\n            - oldKey\n            - oldValue\n            - isOld0\n            - key\n            - value\n            - fnc\n          additionalProperties: false\n        balance:\n          $ref: '#/components/schemas/BigInt'\n        instantWithdraw:\n          type: integer\n          description: Block in which the exit balance was instantly withdrawn. Null indicates that an instant withdrawn hasn't been performed.\n          minimum: 0\n          maximum: 1.84467440737096e+19\n          example: 74747363\n          nullable: true\n        delayedWithdrawRequest:\n          type: integer\n          description: Block in which the exit balance was requested to delay withdraw. Null indicates that a delay withdraw hasn't been performed.\n          minimum: 0\n          maximum: 1.84467440737096e+19\n          example: null\n          nullable: true\n        delayedWithdraw:\n          type: integer\n          description: Block in which the exit balance was delayed withdrawn after a delay withdraw request. Null indicates that a delay withdraw hasn't been performed.\n          minimum: 0\n          maximum: 1.84467440737096e+19\n          example: null\n          nullable: true\n        token:\n          $ref: '#/components/schemas/Token'\n      required:\n          - batchNum\n          - accountIndex\n          - bjj\n          - hezEthereumAddress\n          - itemId\n          - merkleProof\n          - balance\n          - instantWithdraw\n          - delayedWithdrawRequest\n          - delayedWithdraw\n          - token\n      additionalProperties: false\n    Exits:\n      type: object\n      properties:\n        exits:\n          type: array\n          description: List of exits.\n          items: \n            $ref: '#/components/schemas/Exit'\n        pendingItems:\n          $ref: '#/components/schemas/PendingItems'   \n      required:\n          - exits\n          - pendingItems\n      additionalProperties: false \n    Account:\n      type: object\n      description: State tree leaf. It contains balance and nonce of an account.\n      properties:\n        itemId:\n          $ref: '#/components/schemas/ItemId'\n        accountIndex:\n          $ref: '#/components/schemas/AccountIndex'\n        nonce:\n          $ref: '#/components/schemas/Nonce'      \n        balance:\n          $ref: '#/components/schemas/BigInt'\n        bjj:\n          $ref: '#/components/schemas/BJJ'      \n        hezEthereumAddress:\n          $ref: '#/components/schemas/HezEthereumAddress'\n        token:\n          $ref: '#/components/schemas/Token'\n      example:\n        accountIndex: hez:ETH:259\n        balance: '2590000000000000000'\n        bjj: hez:W6x4TZOAZ9mAqdOb3Xm_hKDLspaXfEfMMN4tXOkinS-W\n        hezEthereumAddress: hez:0x7E5F4552091A69125d5DfCb7b8C2659029395Bdf\n        itemId: 4\n        nonce: 0\n        token:\n          USD: 500\n          decimals: 18\n          ethereumAddress: '0x0000000000000000000000000000000000000000'\n          ethereumBlockNum: 0\n          fiatUpdate: '2020-11-26T09:53:47.444444Z'\n          id: 0\n          itemId: 1\n          name: Ether\n          symbol: ETH\n      additionalProperties: false\n      required:\n        - itemId\n        - accountIndex\n        - nonce\n        - balance\n        - bjj\n        - hezEthereumAddress\n        - token\n    Accounts:\n      type: object\n      properties:\n        accounts:\n          type: array\n          description: List of accounts.\n          items: \n            $ref: '#/components/schemas/Account'\n        pendingItems:\n          $ref: '#/components/schemas/PendingItems'\n      example:\n        accounts:\n        - accountIndex: hez:ETH:259\n          balance: '2590000000000000000'\n          bjj: hez:W6x4TZOAZ9mAqdOb3Xm_hKDLspaXfEfMMN4tXOkinS-W\n          hezEthereumAddress: hez:0x7E5F4552091A69125d5DfCb7b8C2659029395Bdf\n          itemId: 4\n          nonce: 0\n          token:\n            USD: 500\n            decimals: 18\n            ethereumAddress: '0x0000000000000000000000000000000000000000'\n            ethereumBlockNum: 0\n            fiatUpdate: '2020-11-26T09:53:47.444444Z'\n            id: 0\n            itemId: 1\n            name: Ether\n            symbol: ETH\n        - accountIndex: hez:TKN1:261\n          balance: '2610000000'\n          bjj: hez:W6x4TZOAZ9mAqdOb3Xm_hKDLspaXfEfMMN4tXOkinS-W\n          hezEthereumAddress: hez:0x7E5F4552091A69125d5DfCb7b8C2659029395Bdf\n          itemId: 6\n          nonce: 0\n          token:\n            USD: 423\n            decimals: 18\n            ethereumAddress: '0x0000000000000000000000000000000000000064'\n            ethereumBlockNum: 2\n            fiatUpdate: '2020-11-26T09:53:47.456619Z'\n            id: 1\n            itemId: 2\n            name: Test Token 1\n            symbol: TKN1\n        pendingItems: 0\n      additionalProperties: false\n      required:\n        - accounts\n        - pendingItems\n    Slot:\n      type: object\n      description: Slot information.\n      properties:\n        itemId:\n          $ref: '#/components/schemas/ItemId'\n        slotNum:\n          $ref: '#/components/schemas/SlotNum'\n        firstBlock:\n          allOf:\n            - $ref: '#/components/schemas/EthBlockNum'\n            - description: Block in which the slot began or will begin\n            - example: 76238647846\n        lastBlock:\n          allOf:\n            - $ref: '#/components/schemas/EthBlockNum'\n            - description: Block in which the slot ended or will end\n            - example: 4475934\n        openAuction:\n          type: boolean\n          description: Whether the auction of the slot is open or not.\n        bestBid:\n          type: object\n          description: The best bid of the auction. If the bestBid is null, it is because no coordinator has bid for that slot.\n          nullable: true\n          properties:\n            itemId:\n              $ref: '#/components/schemas/ItemId'\n            bidderAddr:\n              $ref: '#/components/schemas/EthereumAddress'\n            forgerAddr:\n              $ref: '#/components/schemas/EthereumAddress'\n            slotNum:\n              $ref: '#/components/schemas/SlotNum'\n            URL:\n              $ref: '#/components/schemas/URL'\n            bidValue:\n              type: string\n              description: BigInt is an integer encoded as a string for numbers that are very large.\n              example: \"8708856933496328593\"\n              pattern: \"^\\\\d+$\"\n            ethereumBlockNum:\n              $ref: '#/components/schemas/EthBlockNum'\n            timestamp:\n              type: string\n              format: date-time\n          additionalProperties: false\n          required:\n            - bidderAddr\n            - forgerAddr\n            - slotNum\n            - URL\n            - bidValue\n            - ethereumBlockNum\n            - timestamp\n      additionalProperties: false\n      required:\n        - slotNum\n        - firstBlock\n        - lastBlock\n        - openAuction\n        - bestBid\n    Slots:\n      type: object\n      properties:\n        slots:\n          type: array\n          description: List of slots.\n          items: \n            allOf:\n                - $ref: '#/components/schemas/Slot'\n                - description: Last synchronized Ethereum block.\n        pendingItems:\n          $ref: '#/components/schemas/PendingItems'\n      additionalProperties: false\n      required:\n        - slots\n        - pendingItems\n    NextForger:\n      type: object\n      description: Coordinator information along with the scheduled forging period\n      properties:\n        coordinator:\n          $ref: '#/components/schemas/Coordinator'\n        period:\n          type: object\n          description: Time period in which the coordinator will have the ability to forge. Specified both in Ethereum blocks and timestamp\n          properties:\n            slotNum:\n              $ref: '#/components/schemas/SlotNum'\n            fromBlock:\n              $ref: '#/components/schemas/EthBlockNum'\n            toBlock:\n              $ref: '#/components/schemas/EthBlockNum'\n            fromTimestamp:\n              type: string\n              format: date-time\n            toTimestamp:\n              type: string\n              format: date-time\n          required:\n            - slotNum\n            - fromBlock\n            - toBlock\n            - fromTimestamp\n            - toTimestamp\n          additionalProperties: false\n      required:\n        - coordinator\n        - period\n      additionalProperties: false\n    NextForgers:\n      type: array\n      description: List of next coordinators to forge.\n      items: \n        $ref: '#/components/schemas/NextForger'\n    Node:\n      type: object\n      description: Configuration and metrics of the coordinator node. Note that this is specific for each coordinator.\n      properties:\n        forgeDelay:\n          type: number\n          description: |\n            Delay in seconds after which a batch is forged if the slot is\n            already committed. If set to 0s, the coordinator will continuously\n            forge at the maximum rate. Note that this is a configuration parameter of a node,\n            so each coordinator may have a different value.\n          example: 193.4\n        poolLoad:\n          type: number\n          description: Number of pending transactions in the pool\n          example: 23201\n      additionalProperties: false\n      required: \n        - forgeDelay\n        - poolLoad\n    State:\n      type: object\n      description: Gobal variables of the network\n      properties:\n        network:\n          $ref: '#/components/schemas/StateNetwork'\n        metrics:\n          $ref: '#/components/schemas/StateMetrics'\n        rollup:\n          $ref: '#/components/schemas/StateRollup'\n        auction:\n          $ref: '#/components/schemas/StateAuction'\n        withdrawalDelayer:\n          $ref: '#/components/schemas/StateWithdrawDelayer'\n        recommendedFee:\n          $ref: '#/components/schemas/RecommendedFee'\n        node:\n          $ref: '#/components/schemas/Node'\n      additionalProperties: false\n      required: \n        - network\n        - metrics\n        - rollup\n        - auction\n        - withdrawalDelayer\n        - recommendedFee\n        - node\n    StateNetwork:\n      type: object\n      description: Gobal statistics of the network\n      properties:\n        lastEthereumBlock:\n          allOf:\n            - $ref: '#/components/schemas/EthBlockNum'\n            - description: Current Ethereum block. Note that this is the actual last block of Ethereum, not the last synchronized block by the node.\n            - example: 3457437\n        lastSynchedBlock:\n          allOf:\n            - $ref: '#/components/schemas/EthBlockNum'\n            - description: Last synchronized Ethereum block. Compare with lastEthereumBlock to check the synchronization status of the node.\n            - example: 3457437\n        lastBatch:\n          $ref: '#/components/schemas/Batch'\n        currentSlot:\n          allOf:\n            - $ref: '#/components/schemas/SlotNum'\n            - description: Slot where batches are currently being forged.\n            - example: 2334\n        nextForgers:\n          $ref: '#/components/schemas/NextForgers'\n        pendingL1Transactions:\n          type: number\n          description: Number of pending L1 transactions (added in the smart contract queue but not forged).\n          example: 22\n      additionalProperties: false\n      required: \n        - lastEthereumBlock\n        - lastSynchedBlock \n        - lastBatch\n        - currentSlot\n        - nextForgers\n    StateAuction:\n      type: object\n      description: Auction parameters.\n      properties:\n        ethereumBlockNum:\n          $ref: '#/components/schemas/EthBlockNum'\n        bootCoordinator:\n          allOf:\n            - $ref: '#/components/schemas/EthereumAddress'\n            - description: Ethereum address of the boot coordinator.\n            - example: \"0x997dc4262BCDbf85190C01c996b4C06a461d2430\"\n        bootCoordinatorUrl:\n          type: string\n          description: Boot Coordinator URL\n          example: \"https://boot.coordinator.io\"\n        slotDeadline:\n          type: integer\n          description: Number of blocks after the beginning of a slot after which any coordinator can forge if the winner has not forged any batch in that slot.\n          example: 3\n        closedAuctionSlots:\n          type: integer\n          description: Amount of slots between the current slot and the slot auction that is closed. Example if the value is 2, when slot 10 begins, the auction of the slot 12 gets closed.\n          example: 2\n        openAuctionSlots:\n          type: integer\n          description: Amount of days in advance are auctions opened.\n        defaultSlotSetBid:\n          type: array\n          description: \"Initial minimal bid for each auction. Expressed as an array of 6 values. To calculate which value corresponds to each slot: `initialMinimalBidding[slotNum%6]`.\"\n          items:\n            type: string\n          example: [\"32\",\"0\",\"68\",\"21\",\"55\",\"99\"]\n        defaultSlotSetBidSlotNum:\n          type: integer\n          description: Slot in which the changes will be applied for the first time.\n        outbidding:\n          type: number\n          description: Minimum outbid over the previous one to consider it valid.\n          example: 3.64\n        donationAddress:\n          allOf:\n            - $ref: '#/components/schemas/EthereumAddress'\n            - description: Ethereum address where the donations will go to.\n            - example: \"0x887dc4262BCDbf85190C01c996b4C06a461d2430\"\n        allocationRatio:\n          type: array\n          description: Percentage in which fees will be split between donations, governance, and burning. The sum of the tree values should be 100.\n          items:\n            type: integer\n          example: [80,10,10]\n      additionalProperties: false\n      required:\n        - ethereumBlockNum\n        - bootCoordinator\n        - bootCoordinatorUrl\n        - slotDeadline\n        - closedAuctionSlots\n        - openAuctionSlots\n        - defaultSlotSetBid\n        - outbidding\n        - donationAddress\n        - allocationRatio\n    StateRollup:\n      type: object\n      description: Rollup parameters\n      properties:\n        ethereumBlockNum:\n          $ref: '#/components/schemas/EthBlockNum'\n        forgeL1L2BatchTimeout:\n          type: integer\n          description: Max Ethereum blocks after the last L1-L2-batch, when exceeds the timeout only L1-L2-batch are allowed.\n          example: 5\n        feeAddToken:\n          type: string\n          description: Fee to pay when registering tokens into the network.\n          example: \"5698\"\n        withdrawalDelay:\n          type: integer\n          description: Withdraw delay in seconds\n          example: 432000\n        buckets:\n          type: array\n          description: List of buckets state\n          items:\n            type: object\n            properties:\n              ceilUSD:\n                type: string\n                description: Max USD value that bucket holds\n                example: \"1000\"\n              blockStamp:\n                type: string\n                description: Block number of the last bucket update\n                example: \"1\"\n              withdrawals:\n                type: string\n                description: Available withdrawals of the bucket\n                example: \"4\"\n              rateBlocks:\n                type: string\n                description: rateBlocks every `rateBlocks` blocks add `rateWithdrawals` withdrawal\n                example: \"2\"\n              rateWithdrawals:\n                type: string\n                description: add `rateWithdrawals` every `rateBlocks`\n                example: \"3\"\n              maxWithdrawals:\n                type: string\n                description: Max withdrawals the bucket can hold\n                example: \"4\"\n            additionalProperties: false\n            required: \n              - ceilUSD\n              - blockStamp\n              - withdrawals\n              - rateBlocks\n              - rateWithdrawals\n              - maxWithdrawals\n          additionalProperties: false\n          required:\n            - ethereumBlockNum\n            - forgeL1L2BatchTimeout\n            - feeAddToken\n            - withdrawalDelay\n            - buckets\n    StateWithdrawDelayer:\n      type: object\n      description: Withdrawal delayer parameters\n      properties:\n        ethereumBlockNum:\n          $ref: '#/components/schemas/EthBlockNum'\n        hermezGovernanceAddress:\n          allOf:\n            - $ref: '#/components/schemas/EthereumAddress'\n            - description: Ethereum address of the governance.\n            - example: \"0x667dc4262BCDbf85190C01c996b4C06a461d2430\"\n        emergencyCouncilAddress:\n          allOf:\n            - $ref: '#/components/schemas/EthereumAddress'\n            - description: Ethereum address that can claim the funds in an emergency when the maximum emergency mode time is exceeded.\n            - example: \"0x557dc4262BCDbf85190C01c996b4C06a461d2430\"\n        withdrawalDelay:\n          allOf:\n            - $ref: '#/components/schemas/EthBlockNum'\n            - description: The time that everyone needs to wait until a withdrawal of the funds is allowed, in seconds.\n            - example: 539573849\n        emergencyModeStartingBlock:\n          type: integer\n          description: Block number in which the emergency mode has been activated.\n          example: 10\n        emergencyMode:\n          type: boolean\n          description: Indicates if emergency mode has been activated.\n          example: false\n      additionalProperties: false\n      required: \n        - ethereumBlockNum\n        - hermezGovernanceAddress\n        - emergencyCouncilAddress\n        - withdrawalDelay\n        - emergencyModeStartingBlock\n        - emergencyMode\n    StateMetrics:\n      type: object\n      description: Metrics of the network\n      properties:\n        transactionsPerBatch:\n          type: number\n          description: Average transactions per batch in the last 24 hours.\n          example: 2002.7\n        batchFrequency:\n          type: number\n          description: Average elapsed time between batches in the last 24 hours, in seconds.\n          example: 8.9\n        transactionsPerSecond:\n          type: number\n          description: Average transactions per second in the last 24 hours.\n          example: 302.3\n        tokenAccounts:\n          type: integer\n          description: Number of created accounts.\n          example: 90473\n        wallets:\n          type: integer\n          description: Number of different registered BJJs.\n          example: 23067\n        avgTransactionFee:\n          type: number\n          description: Average fee percentage paid for L2 transactions in the last 24 hours.\n          example: 1.54\n        estimatedTimeToForgeL1:\n          type: number\n          description: Estimated time needed to forge a L1 transaction, from the time it's added on the smart contract, until it's actualy forged. In seconds.\n          example: 193.4\n      additionalProperties: false\n      required:\n        - transactionsPerBatch\n        - batchFrequency\n        - transactionsPerSecond\n        - tokenAccounts\n        - wallets\n        - avgTransactionFee\n        - estimatedTimeToForgeL1\n    PendingItems:\n      type: integer\n      description: Amount of items that will be returned in subsequent calls to the endpoint, as long as they are done with same filters. When the value is 0 it means that all items have been sent.\n      example: 15\n    Config:\n      type: object\n      description: Configuration parameters of the different smart contracts that power the Hermez Network.\n      properties:\n        hermez:\n          type: object\n          description: Constant configuration of the Hermez smart contract.\n          properties:\n            publicConstants:\n              type: object\n              description: Public Hermez smart contract constants\n              properties: \n                tokenHEZ:\n                  allOf:\n                    - $ref: '#/components/schemas/EthereumAddress'\n                    - description: Ethereum address of the HEZ token.\n                    - example: \"0x444dc4262BCDbf85190C01c996b4C06a461d2430\"\n                absoluteMaxL1L2BatchTimeout:\n                  type: integer\n                  description:  L1L2 Batch Timeout\n                  example: 240\n                verifiers:\n                  type: array\n                  description: List of verifiers struct\n                  items:\n                    type: object\n                    properties:\n                      maxTx:\n                        type: integer\n                        description: Maximum rollup transactions in a batch\n                        example: 512\n                      nlevels:\n                        type: integer\n                        description: Number of levels of the circuit\n                        example: 32\n                    required:\n                      - maxTx\n                      - nlevels\n                    additionalProperties: false\n                hermezAuctionContract:\n                  allOf:\n                    - $ref: '#/components/schemas/EthereumAddress'\n                    - description: Ethereum address of the auction smart contract.\n                    - example: \"0x111dc4262BCDbf85190C01c996b4C06a461d2430\"\n                hermezGovernanceAddress:\n                  allOf:\n                    - $ref: '#/components/schemas/EthereumAddress'\n                    - description: Ethereum address of the governance.\n                    - example: \"0x222dc4262BCDbf85190C01c996b4C06a461d2430\"\n                withdrawDelayerContract:\n                  allOf:\n                    - $ref: '#/components/schemas/EthereumAddress'\n                    - description: Ethereum address of the withdraw delayer contracts.\n                    - example: \"0x444dc4262BCDbf85190C01c996b4C06a461d2430\"\n              required:\n                - tokenHEZ\n                - absoluteMaxL1L2BatchTimeout\n                - verifiers\n                - hermezAuctionContract\n                - hermezGovernanceAddress\n                - withdrawDelayerContract\n              additionalProperties: false\n            maxFeeIdxCoordinator:\n              type: integer\n              description: is the maximum number of tokens the coordinator can use to collect fees.\n              example: 64\n            reservedIdx:\n              type: integer\n              description: First 256 indexes reserved, first user index will be the 256.\n              example: 255\n            exitIdx:\n              type: integer\n              description: Account index used to indicate that a transaction is an `exit` or `force exit`.\n              example: 1\n            limitDepositAmount:\n              type: integer\n              description: Maximum deposit amount (L1 to L2) allowed.\n              example: 321\n            limitL2TransferAmount:\n              type: integer\n              description: Maximum amount (L2 to L2) allowed.\n              example: 837\n            limitTokens:\n              type: integer\n              description: Maximum number of different tokens that can be registered in the network.\n              example: 4294967295\n            l1CoordinatorTotalBytes:\n              type: integer\n              description: Number of bytes that a L1 coordinator transaction has ([4 bytes] token + [32 bytes] babyjub + [65 bytes] compressedSignature).\n              example: 101\n            l1UserTotalBytes:\n              type: integer\n              description: Number of bytes that a L1 user transaction has ([20 bytes] fromEthAddr + [32 bytes] fromBjj-compressed + [6 bytes] fromIdx + [5 bytes] depositAmountFloat40 + [5 bytes] amountFloat40 + [4 bytes] tokenId + [6 bytes] toIdx).\n              example: 72\n            maxL1UserTx:\n              type: integer\n              description: Maximum L1-user transactions allowed to be queued in a batch.\n              example: 128\n            maxL1Tx:\n              type: integer\n              description: Maximum L1 transactions allowed to be queued in a batch.\n              example: 256\n            inputSHAConstantBytes:\n              type: integer\n              description: Input SHA constant bytes \n              example: 18542\n            numBuckets:\n              type: integer\n              description: Number of buckets\n              example: 5\n            maxWithdrawalDelay:\n              type: integer\n              description: Maximum delay to withdraw tokens. Time is measured in seconds.\n              example: 2 * 7 * 24 * 60 * 60\n            exchangeMultiplier:\n              type: integer\n              description: exchange multiplier\n              example: 1e14\n          required:\n            - publicConstants\n            - reservedIdx\n            - exitIdx\n            - limitDepositAmount\n            - limitL2TransferAmount\n            - limitTokens\n            - l1CoordinatorTotalBytes\n            - l1UserTotalBytes\n            - maxL1UserTx\n            - maxL1Tx\n            - inputSHAConstantBytes\n            - numBuckets\n            - maxWithdrawalDelay\n            - exchangeMultiplier\n          additionalProperties: false\n        auction:\n          type: object\n          description: Constant configuration of the auction smart contract.\n          properties:\n            blocksPerSlot:\n              type: integer\n              description: Blocks per slot.\n            initialMinimalBidding:\n              type: integer\n              description: Minimum bid when no one has bid yet.\n            genesisBlockNum:\n              allOf:\n                - $ref: '#/components/schemas/EthBlockNum'\n                - description: Ethereum block number in which the smart contract starts operating.\n            tokenHEZ:\n              allOf:\n                - $ref: '#/components/schemas/EthereumAddress'\n                - description: Ethereum address of the HEZ token.\n                - example: \"0x333dc4262BCDbf85190C01c996b4C06a461d2430\"\n            hermezRollup:\n              allOf:\n                - $ref: '#/components/schemas/EthereumAddress'\n                - description: Ethereum address of the rollup smart contract.\n                - example: \"0x222dc4262BCDbf85190C01c996b4C06a461d2430\"\n            governanceAddress:\n              allOf:\n                - $ref: '#/components/schemas/EthereumAddress'\n                - description: Ethereum address of the governance.\n                - example: \"0x444dc4262BCDbf85190C01c996b4C06a461d2430\"\n          required:\n            - blocksPerSlot\n            - initialMinimalBidding\n            - genesisBlockNum\n            - tokenHEZ\n            - hermezRollup\n            - governanceAddress\n          additionalProperties: false\n        withdrawalDelayer:\n          type: object\n          description: Constant configuration of the withdrawal delayer smart contract.\n          properties:\n            maxWithdrawalDelay:\n              type: integer\n              description: Maximum time delay in which the tokens can be locked in the contract. Time is measured in seconds.\n              example: 200\n            maxEmergencyModeTime:\n              type: integer\n              description: Maximum amount of time in which the contract can be in emergency mode. Time is measured in seconds.\n              example: 2000\n            hermezRollup:\n              allOf:\n                - $ref: '#/components/schemas/EthereumAddress'\n                - description: Ethereum address of the rollup smart contract.\n                - example: \"0x222dc4262BCDbf85190C01c996b4C06a461d2430\"\n          required:\n            - maxWithdrawalDelay\n            - maxEmergencyModeTime\n            - hermezRollup\n          additionalProperties: false\n        chainId:\n          type: integer\n          description: Id of the chain\n          example: 27\n      required:\n        - hermez\n        - auction\n        - withdrawalDelayer\n        - chainId\n      additionalProperties: false\n    Health:\n      type: object\n      description: Return values that can be valuable for the /health endpoint.\n      properties:\n        historyDB:\n          type: object\n          description: History db connection status\n          properties:\n            last_migration:\n              type: string\n              description: Name of the last migration\n              example: 0002.sql\n            status:\n              type: string\n              description: Status of the connection. Possible responses - UP or DOWN\n              example: UP\n            version:\n              type: string\n              description: Version of the database\n              example: PostgreSQL 13.2 (Debian 13.2-1.pgdg100+1) on x86_64-pc-linux-gnu\n          required:\n            - last_migration\n            - status\n            - version\n          additionalProperties: false\n        l2DB:\n          type: object\n          description: L2 db connection status\n          properties:\n            last_migration:\n              type: string\n              description: Name of the last migration\n              example: 0002.sql\n            status:\n              type: string\n              description: Status of the connection. Possible responses - UP or DOWN\n              example: UP\n            version:\n              type: string\n              description: Version of the database\n              example: PostgreSQL 13.2 (Debian 13.2-1.pgdg100+1) on x86_64-pc-linux-gnu\n          required:\n            - last_migration\n            - status\n            - version\n          additionalProperties: false\n        statedb:\n          type: object\n          description: state db connection status\n          properties:\n            status:\n              type: string\n              description: Status of the connection. Possible responses - UP or DOWN\n              example: UP\n            batchNum:\n              type: integer\n              description: current batch num in last checkpoint of the state db\n              example: 24025\n            root:\n              type: integer\n              description: root of the underlying Merkle Tree in the last checkpoint of the state db\n              example: 20723800499378797360494097450413598946834655273323161758167114779532027183222\n        status:\n          type: string\n          description: Status of the hermez node. Possible responses - UP or DOWN\n          example: UP\n        timestamp:\n          type: string\n          format: date-time\n          description: Current time with location set to UTC\n        version:\n          type: string\n          description: Current version of the hermez-node\n          example: v1.2.0\n        coordinatorForgerBalance:\n          type: string\n          description: Coordinator balance in ether. Returned with 18 decimals. Not returned if node not in coord mode\n          example: 48901270356066543960\n      required:\n        - historyDB\n        - l2DB\n        - status\n        - timestamp\n        - version\n      additionalProperties: false\n    Error:\n      type: object\n      description: Error response. \n      properties:\n        message:\n          type: string\n        code:\n          type: integer\n          enum: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]\n          description: \u003e\n            Error codes:\n              * `1` - ErrParamValidationFailed error\n              * `2` - ErrDuplicatedKey error\n              * `3` - ErrSQLTimeout error\n              * `4` - ErrSQLNoRows error\n              * `5` - ErrExitAmount0 error\n              * `6` - ErrInvalidTxTypeOrTxID error\n              * `7` - ErrFeeOverflow error\n              * `8` - ErrGettingSenderAccount error\n              * `9` - ErrGettingSenderAccount error\n              * `10` - ErrInvalidNonce error\n              * `11` - ErrInvalidSignature error\n              * `12` - ErrGettingReceiverAccount error\n              * `13` - ErrCantSendToEthAddr error\n              * `14` - ErrNotAtomicTxsInPostPoolTx error\n              * `15` - ErrFailedToGetCurrentBlock error\n              * `16` - ErrFailedToGetAuctionVars error\n              * `17` - ErrFailedToAddEmptySlot error\n              * `18` - ErrTxsNotAtomic error\n              * `19` - ErrSingleTxInAtomicEndpoint error\n              * `20` - ErrRqOffsetOutOfBounds error\n              * `21` - ErrInvalidAtomicGroupID error\n              * `22` - ErrFailedToFindOffsetToRelativePositionCode error\n        type:\n          type: string\n          enum:\n            - ErrParamValidationFailed\n            - ErrDuplicatedKey\n            - ErrSQLTimeout\n            - ErrSQLNoRows\n            - ErrExitAmount0\n            - ErrInvalidTxTypeOrTxID\n            - ErrFeeOverflow\n            - ErrGettingSenderAccount\n            - ErrAccountTokenNotEqualTxToken\n            - ErrInvalidNonce\n            - ErrInvalidSignature\n            - ErrGettingReceiverAccount\n            - ErrCantSendToEthAddr\n            - ErrNotAtomicTxsInPostPoolTx\n            - ErrFailedToGetCurrentBlock\n            - ErrFailedToGetAuctionVars\n            - ErrFailedToAddEmptySlot\n            - ErrTxsNotAtomic\n            - ErrSingleTxInAtomicEndpoint\n            - ErrInvalidAtomicGroupID\n            - ErrFailedToFindOffsetToRelativePosition\n          description: \u003e\n            Error types:\n              * `ErrParamValidationFailed` - this error appears when user sends wrong info in query|uri|form params\n              * `ErrDuplicatedKey` - record already exists in db\n              * `ErrSQLTimeout` - node is under heavy pressure and sql connection timeout happened\n              * `ErrSQLNoRows` - there is no such item in database\n              * `ErrExitAmount0` - receiving (and rejecting) a tx of type exit with amount 0 in /transactions-pool request\n              * `ErrInvalidTxTypeOrTxID` - tx with invalid type or txID was sent in /transactions-pool request\n              * `ErrFeeOverflow` - tx with fee amount that doesn't fit in 128 bits was sent in /transactions-pool request\n              * `ErrGettingSenderAccount` - sender account for tx was not found in /transactions-pool request\n              * `ErrAccountTokenNotEqualTxToken` - account token is not equal to tx token in /transactions-pool request\n              * `ErrInvalidNonce` - invalid nonce was sent in /transactions-pool request\n              * `ErrInvalidSignature` - invalid signature was sent in /transactions-pool or /account-creation-authorization requests\n              * `ErrGettingReceiverAccount` - receiver account for tx was not fount in /transactions-pool request\n              * `ErrCantSendToEthAddr` - it's not possible to send to Eth address when there is no account index associated to this Eth address and token, or the coordinator hasn't got an authorization to create an account\n              * `ErrNotAtomicTxsInPostPoolTx` - user sending atomic tx to /transactions-pool request\n              * `ErrFailedToGetCurrentBlock` - can't get current block in /slots request\n              * `ErrFailedToGetAuctionVars` - can't get auction vars in /slots request\n              * `ErrFailedToAddEmptySlot` - can't add empty slot in /slots request\n              * `ErrTxsNotAtomic` - there is at least one transaction in the payload that could be forged without the others\n              * `ErrSingleTxInAtomicEndpoint` - to use the atomic-pool endpoint at least two transactions are required\n              * `ErrRqOffsetOutOfBounds` - one of the transactions requested another one outside the bounds of the provided array\n              * `ErrInvalidAtomicGroupID` - invalid atomicGroupId\n              * `ErrFailedToFindOffsetToRelativePosition` - can't find offset to relative position\n    Error400:\n      allOf:\n        - $ref: '#/components/schemas/Error'\n        - example:\n            message: Invalid signature.\n            code: 4\n            type: ErrInvalidSignature\n    Error404:\n      allOf:\n        - $ref: '#/components/schemas/Error'\n        - example:\n            message: Item(s) not found.\n    Error500:\n      allOf:\n        - $ref: '#/components/schemas/Error'\n        - example:\n            message: Database error.\n    Error503:\n      allOf:\n        - $ref: '#/components/schemas/Error'\n        - example:\n            message: Service unavailable.\n",
			"canonicalURL": "/github.com/hermeznetwork/hermez-node@5d8f16ab93a52af50b091c92be3d6afdc3b801ff/-/blob/api/swagger.yml",
			"externalURLs": [
				{
					"url": "https://github.com/hermeznetwork/hermez-node/blob/5d8f16ab93a52af50b091c92be3d6afdc3b801ff/api/swagger.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/transactions-pool\": at 1:101592: post: duplicate operationId: \"postTx\""
}