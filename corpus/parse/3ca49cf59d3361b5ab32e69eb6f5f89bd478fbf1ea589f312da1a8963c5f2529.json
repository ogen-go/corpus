{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ngrok/ngrok-docs"
		},
		"file": {
			"name": "ngrok_openapi.yml",
			"size": 0,
			"path": "openapi/ngrok_openapi.yml",
			"byteSize": 39285,
			"content": "openapi: 3.0.0\ninfo:\n  title: ngrok APIs\n  version: 1.0.0\nservers:\n  - url: https://api.ngrok.com\ncomponents:\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\ntags:\n  - name: API Keys\n  - name: Abuse Reports (Publish?!)\n  - name: Endpoint Configurations\n  - name: Endpoint Configurations \u003e Create Endpoint Configurations\n  - name: IPs\n  - name: IPs \u003e IP Policies\n  - name: IPs \u003e IP Policy Rules\n  - name: IPs \u003e IP Restrictions\n  - name: IPs \u003e IP Restrictions \u003e Display Warning (for testing)\n  - name: IPs \u003e IP Restrictions \u003e Enforce\n  - name: Events (Dev)\n  - name: Events (Dev) \u003e Event Destinations\n  - name: Events (Dev) \u003e Event Subscriptions (Dev)\n  - name: Events (Dev) \u003e Event Streams (Publish?!)\n  - name: Domains (DEV)\n  - name: Domains (DEV) \u003e Reserved Domains\n  - name: Domains (DEV) \u003e Reserved Addresses (TODO)\n  - name: Certificates (DEV)\n  - name: Certificates (DEV) \u003e TLS CAs\n  - name: Certificates (DEV) \u003e TLS Certificates (TODO)\n  - name: SSH (TODO)\n  - name: SSH (TODO) \u003e SSH Certificate Authorities (TODO)\n  - name: SSH (TODO) \u003e SSH Credentials (TODO)\n  - name: SSH (TODO) \u003e SSH Host Certs (TODO)\n  - name: SSH (TODO) \u003e SSH User Certs (TODO)\n  - name: Tunnels (DEV)\n  - name: Tunnels (DEV) \u003e Tunnel Credentials (TODO)\n  - name: Tunnels (DEV) \u003e Tunnel Sessions\npaths:\n  /api_keys:\n    post:\n      tags:\n        - Tunnels (DEV) \u003e Tunnel Credentials (TODO)\n      summary: Create Tunnel Credential\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                description: 'Postman test: test key'\n                metadata: '{\"environment\":\"postman-test\"}'\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: Ngrok-Version\n          in: header\n          schema:\n            type: integer\n          example: '2'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n    get:\n      tags:\n        - API Keys\n      summary: List API Keys\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: Ngrok-Version\n          in: header\n          schema:\n            type: integer\n          example: '2'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /api_keys/{api_key_id}:\n    get:\n      tags:\n        - API Keys\n      summary: Get API Key\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: Ngrok-Version\n          in: header\n          schema:\n            type: integer\n          example: '2'\n        - name: api_key_id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n    patch:\n      tags:\n        - API Keys\n      summary: Update API Key\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                description: 'Postman test: test key changed'\n                metadata: '{\"environment\":\"postman-test\", \"changed\":true}'\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: Ngrok-Version\n          in: header\n          schema:\n            type: integer\n          example: '2'\n        - name: api_key_id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n    delete:\n      tags:\n        - API Keys\n      summary: Delete API Key\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: Ngrok-Version\n          in: header\n          schema:\n            type: integer\n          example: '2'\n        - name: api_key_id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /abuse_reports/{abuse_report_id}:\n    get:\n      tags:\n        - Abuse Reports (Publish?!)\n      summary: Get Abuse Report\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: Ngrok-Version\n          in: header\n          schema:\n            type: integer\n          example: '2'\n        - name: abuse_report_id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /abuse_reports:\n    post:\n      tags:\n        - Abuse Reports (Publish?!)\n      summary: Create Abuse Report\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                description: ad-hoc dev testing\n                metadata: '{\"environment\":\"dev\"}'\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: Ngrok-Version\n          in: header\n          schema:\n            type: integer\n          example: '2'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /endpoint_configurations:\n    post:\n      tags:\n        - Endpoint Configurations \u003e Create Endpoint Configurations\n      summary: 'HTTPS Endpoint: with SAML Auth (Okta)'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                type: https\n                description: 'Postman test: SAML with auth (Okta)'\n                metadata: '{\"environment\":\"postman-test\"}'\n                saml:\n                  enabled: true\n                  idp_metadata_url: \u003e-\n                    https://frederico.oktapreview.com/app/exk12v3q8m8aC2QjV0h8/sso/saml/metadata\n                  allow_idp_initiated: true\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: Ngrok-Version\n          in: header\n          schema:\n            type: integer\n          example: '2'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n    get:\n      tags:\n        - Endpoint Configurations\n      summary: List Endpoint Configurations\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: Ngrok-Version\n          in: header\n          schema:\n            type: integer\n          example: '2'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /endpoint_configurations/{endpoint_configuration_id}:\n    get:\n      tags:\n        - Endpoint Configurations\n      summary: Get Endpoint Configuration\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: Ngrok-Version\n          in: header\n          schema:\n            type: integer\n          example: '2'\n        - name: endpoint_configuration_id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n    patch:\n      tags:\n        - Endpoint Configurations\n      summary: Update Endpoint Configuration\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                metadata: '{\"environment\":\"postman-test\", \"changed\":true}'\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: Ngrok-Version\n          in: header\n          schema:\n            type: integer\n          example: '2'\n        - name: endpoint_configuration_id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n    delete:\n      tags:\n        - Endpoint Configurations\n      summary: Delete Endpoint Configuration\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: Ngrok-Version\n          in: header\n          schema:\n            type: integer\n          example: '2'\n        - name: endpoint_configuration_id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /ip_policies:\n    post:\n      tags:\n        - IPs \u003e IP Policies\n      summary: Create IP Policy (deny)\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                description: 'Postman test: test IP policy (deny)'\n                metadata: '{\"environment\":\"postman-test\"}'\n                action: deny\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: Ngrok-Version\n          in: header\n          schema:\n            type: integer\n          example: '2'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n    get:\n      tags:\n        - IPs \u003e IP Policies\n      summary: List IP Policies\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: Ngrok-Version\n          in: header\n          schema:\n            type: integer\n          example: '2'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /ip_policies/{ip_policy_id}:\n    get:\n      tags:\n        - IPs \u003e IP Policies\n      summary: Get IP Policy\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: Ngrok-Version\n          in: header\n          schema:\n            type: integer\n          example: '2'\n        - name: ip_policy_id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n    patch:\n      tags:\n        - IPs \u003e IP Policies\n      summary: Update IP Policy\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                metadata: '{\"environment\":\"postman-test\", \"changed\":true}'\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: Ngrok-Version\n          in: header\n          schema:\n            type: integer\n          example: '2'\n        - name: ip_policy_id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n    delete:\n      tags:\n        - IPs \u003e IP Policies\n      summary: Delete IP Policy\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: Ngrok-Version\n          in: header\n          schema:\n            type: integer\n          example: '2'\n        - name: ip_policy_id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /ip_policy_rules:\n    post:\n      tags:\n        - IPs \u003e IP Policy Rules\n      summary: Create IP Policy Rule (any cidr IPv6)\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                description: 'Postman test: test IP policy rule (any cidr IPv6)'\n                metadata: '{\"environment\":\"postman-test\"}'\n                cidr: '::/0'\n                ip_policy_id: '{{ip_policy_id}}'\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: Ngrok-Version\n          in: header\n          schema:\n            type: integer\n          example: '2'\n        - name: ''\n          in: header\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n    get:\n      tags:\n        - IPs \u003e IP Policy Rules\n      summary: List IP Policy Rules\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: Ngrok-Version\n          in: header\n          schema:\n            type: integer\n          example: '2'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /ip_policy_rules/{ip_policy_rule}:\n    get:\n      tags:\n        - IPs \u003e IP Policy Rules\n      summary: Get IP Policy Rule\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: Ngrok-Version\n          in: header\n          schema:\n            type: integer\n          example: '2'\n        - name: ip_policy_rule\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n    patch:\n      tags:\n        - IPs \u003e IP Policy Rules\n      summary: Update IP Policy Rule\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                metadata: '{\"environment\":\"postman-test\", \"changed\":true}'\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: Ngrok-Version\n          in: header\n          schema:\n            type: integer\n          example: '2'\n        - name: ip_policy_rule\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n    delete:\n      tags:\n        - IPs \u003e IP Policy Rules\n      summary: Delete IP Policy Rule\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: Ngrok-Version\n          in: header\n          schema:\n            type: integer\n          example: '2'\n        - name: ip_policy_rule\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /ip_restrictions:\n    post:\n      tags:\n        - IPs \u003e IP Restrictions \u003e Enforce\n      summary: Create IP Restriction (endpoints)\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                description: 'Postman test: test IP restriction (endpoints)'\n                metadata: '{\"environment\":\"postman-test\"}'\n                type: endpoints\n                enforced: true\n                ip_policy_ids:\n                  - '{{ip_policy_id}}'\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: Ngrok-Version\n          in: header\n          schema:\n            type: integer\n          example: '2'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n    get:\n      tags:\n        - IPs \u003e IP Restrictions\n      summary: List IP Restrictions\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: Ngrok-Version\n          in: header\n          schema:\n            type: integer\n          example: '2'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /ip_restrictions/{ip_restriction_id}:\n    get:\n      tags:\n        - IPs \u003e IP Restrictions\n      summary: Get IP Restriction\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: Ngrok-Version\n          in: header\n          schema:\n            type: integer\n          example: '2'\n        - name: ip_restriction_id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n    patch:\n      tags:\n        - IPs \u003e IP Restrictions\n      summary: Update IP Restriction\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                metadata: '{\"environment\":\"postman-test\", \"changed\":true}'\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: Ngrok-Version\n          in: header\n          schema:\n            type: integer\n          example: '2'\n        - name: ip_restriction_id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n    delete:\n      tags:\n        - IPs \u003e IP Restrictions\n      summary: Delete IP Restriction\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: Ngrok-Version\n          in: header\n          schema:\n            type: integer\n          example: '2'\n        - name: ip_restriction_id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /event_destinations:\n    post:\n      tags:\n        - Events (Dev) \u003e Event Destinations\n      summary: Create Event Destination\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example: |-\n                {\n                    \"description\":\"Postman test: test key\",\n                    \"metadata\": \"{\\\"environment\\\":\\\"postman-test\\\"}\"\n                    \"format\": \"json\",\n                    \"target\": {\n                        \"firehose\": null,\n                        \"kinesis\": null,\n                        \"cloudwatch_logs\": {\n                            \"auth\": {\n                                \"role\": {\n                                    \"role_arn\": \"{{aws_role_arn}}\"\n                                }\n                            },\n                            \"log_group_arn\": \"{{aws_log_group_arn}}\"\n                        }\n                    }\n                }\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: Ngrok-Version\n          in: header\n          schema:\n            type: integer\n          example: '2'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n    get:\n      tags:\n        - Events (Dev) \u003e Event Destinations\n      summary: List Event Destinations\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: Ngrok-Version\n          in: header\n          schema:\n            type: integer\n          example: '2'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /event_destinations/{event_destination_id}:\n    get:\n      tags:\n        - Events (Dev) \u003e Event Destinations\n      summary: Get Event Destination\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: Ngrok-Version\n          in: header\n          schema:\n            type: integer\n          example: '2'\n        - name: event_destination_id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n    patch:\n      tags:\n        - Events (Dev) \u003e Event Destinations\n      summary: Update Event Destinations\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                description: 'Postman test: event destination changed'\n                metadata: '{\"environment\":\"postman-test\", \"changed\":true}'\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: Ngrok-Version\n          in: header\n          schema:\n            type: integer\n          example: '2'\n        - name: event_destination_id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n    delete:\n      tags:\n        - Events (Dev) \u003e Event Destinations\n      summary: Delete Event Destination\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: Ngrok-Version\n          in: header\n          schema:\n            type: integer\n          example: '2'\n        - name: event_destination_id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /event_subscriptions:\n    post:\n      tags:\n        - Events (Dev) \u003e Event Subscriptions (Dev)\n      summary: Create Event Subscription HTTP Requests\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                description: 'Postman test: event subscription'\n                metadata: '{\"environment\":\"postman-test\"}'\n                sources:\n                  - type: http_request_complete.v0\n                    fields:\n                      - http.request.url.path\n                      - http.request.user_agent\n                      - basic_auth.decision\n                      - circuit_breaker.decision\n                      - ip_policy.decision\n                      - oauth.decision\n                      - webhook_validation.decision\n                destination_ids:\n                  - '{{event_destination_id}}'\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: Ngrok-Version\n          in: header\n          schema:\n            type: integer\n          example: '2'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n    get:\n      tags:\n        - Events (Dev) \u003e Event Subscriptions (Dev)\n      summary: List Event Subscriptions\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: Ngrok-Version\n          in: header\n          schema:\n            type: integer\n          example: '2'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /event_subscriptions/{event_subscription_id}/sources/{event_subscription_source_type}:\n    get:\n      tags:\n        - Events (Dev) \u003e Event Subscriptions (Dev)\n      summary: Get Event Subscription Source Details\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: Ngrok-Version\n          in: header\n          schema:\n            type: integer\n          example: '2'\n        - name: event_subscription_id\n          in: path\n          schema:\n            type: string\n          required: true\n        - name: event_subscription_source_type\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /event_subscriptions/{event_subscription_id}:\n    get:\n      tags:\n        - Events (Dev) \u003e Event Subscriptions (Dev)\n      summary: Get Event Subscription Source Details Copy\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: Ngrok-Version\n          in: header\n          schema:\n            type: integer\n          example: '2'\n        - name: event_subscription_id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n    patch:\n      tags:\n        - Events (Dev) \u003e Event Subscriptions (Dev)\n      summary: Update Event Subscription\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                description: 'Postman test: event subscription changed'\n                metadata: '{\"environment\":\"postman-test\", \"changed\":true}'\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: Ngrok-Version\n          in: header\n          schema:\n            type: integer\n          example: '2'\n        - name: event_subscription_id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n    delete:\n      tags:\n        - Events (Dev) \u003e Event Subscriptions (Dev)\n      summary: Delete Event Subscription\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: Ngrok-Version\n          in: header\n          schema:\n            type: integer\n          example: '2'\n        - name: event_subscription_id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /event_streams:\n    post:\n      tags:\n        - Events (Dev) \u003e Event Streams (Publish?!)\n      summary: Create Event Stream\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example: |-\n                {\n                  \"description\": \"low sampling, basic HTTP logs\",\n                  \"fields\": [\n                    \"http.request.method\",\n                    \"http.response.status_code\",\n                    \"conn.client_ip\"\n                  ],\n                  \"event_type\": \"http_request_complete\",\n                  \"destination_ids\": [ {{event_destination_id}} ],\n                  \"sampling_rate\": 0.1\n                }\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: Ngrok-Version\n          in: header\n          schema:\n            type: integer\n          example: '2'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /reserved_domains:\n    post:\n      tags:\n        - Domains (DEV) \u003e Reserved Domains\n      summary: Create Reserved Domain\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                description: 'Postman test: test reserved domain'\n                metadata: '{\"environment\":\"postman-test\"}'\n                name: '{{$randomDomainWord}}.ngrok.io'\n                https_endpoint_configuration_id: '{{endpoint_configuration_id}}'\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: Ngrok-Version\n          in: header\n          schema:\n            type: integer\n          example: '2'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n    get:\n      tags:\n        - Domains (DEV) \u003e Reserved Domains\n      summary: List Reserved Domains\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: Ngrok-Version\n          in: header\n          schema:\n            type: integer\n          example: '2'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /reserved_domains/{reserved_domain_id}:\n    get:\n      tags:\n        - Domains (DEV) \u003e Reserved Domains\n      summary: Get Reserved Domain\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: Ngrok-Version\n          in: header\n          schema:\n            type: integer\n          example: '2'\n        - name: reserved_domain_id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n    patch:\n      tags:\n        - Domains (DEV) \u003e Reserved Domains\n      summary: Update Reserved Domain\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                description: 'Postman test: test key changed'\n                metadata: '{\"environment\":\"postman-test\", \"changed\":true}'\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: Ngrok-Version\n          in: header\n          schema:\n            type: integer\n          example: '2'\n        - name: reserved_domain_id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n    delete:\n      tags:\n        - Domains (DEV) \u003e Reserved Domains\n      summary: Delete Reserved Domain\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: Ngrok-Version\n          in: header\n          schema:\n            type: integer\n          example: '2'\n        - name: reserved_domain_id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /certificate_authorities:\n    post:\n      tags:\n        - Certificates (DEV) \u003e TLS CAs\n      summary: Create CA\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                description: \u003e-\n                  Postman test: Update Root CA from Let's Encrypt (pem available\n                  at https://letsencrypt.org/certs/isrgrootx1.pem.txt)\n                metadata: '{\"environment\":\"postman-test\"}'\n                ca_pem: \u003e\n                  -----BEGIN CERTIFICATE-----\n\n                  MIIFazCCA1OgAwIBAgIRAIIQz7DSQONZRGPgu2OCiwAwDQYJKoZIhvcNAQELBQAw\n\n                  TzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh\n\n                  cmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMTUwNjA0MTEwNDM4\n\n                  WhcNMzUwNjA0MTEwNDM4WjBPMQswCQYDVQQGEwJVUzEpMCcGA1UEChMgSW50ZXJu\n\n                  ZXQgU2VjdXJpdHkgUmVzZWFyY2ggR3JvdXAxFTATBgNVBAMTDElTUkcgUm9vdCBY\n\n                  MTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAK3oJHP0FDfzm54rVygc\n\n                  h77ct984kIxuPOZXoHj3dcKi/vVqbvYATyjb3miGbESTtrFj/RQSa78f0uoxmyF+\n\n                  0TM8ukj13Xnfs7j/EvEhmkvBioZxaUpmZmyPfjxwv60pIgbz5MDmgK7iS4+3mX6U\n\n                  A5/TR5d8mUgjU+g4rk8Kb4Mu0UlXjIB0ttov0DiNewNwIRt18jA8+o+u3dpjq+sW\n\n                  T8KOEUt+zwvo/7V3LvSye0rgTBIlDHCNAymg4VMk7BPZ7hm/ELNKjD+Jo2FR3qyH\n\n                  B5T0Y3HsLuJvW5iB4YlcNHlsdu87kGJ55tukmi8mxdAQ4Q7e2RCOFvu396j3x+UC\n\n                  B5iPNgiV5+I3lg02dZ77DnKxHZu8A/lJBdiB3QW0KtZB6awBdpUKD9jf1b0SHzUv\n\n                  KBds0pjBqAlkd25HN7rOrFleaJ1/ctaJxQZBKT5ZPt0m9STJEadao0xAH0ahmbWn\n\n                  OlFuhjuefXKnEgV4We0+UXgVCwOPjdAvBbI+e0ocS3MFEvzG6uBQE3xDk3SzynTn\n\n                  jh8BCNAw1FtxNrQHusEwMFxIt4I7mKZ9YIqioymCzLq9gwQbooMDQaHWBfEbwrbw\n\n                  qHyGO0aoSCqI3Haadr8faqU9GY/rOPNk3sgrDQoo//fb4hVC1CLQJ13hef4Y53CI\n\n                  rU7m2Ys6xt0nUW7/vGT1M0NPAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNV\n\n                  HRMBAf8EBTADAQH/MB0GA1UdDgQWBBR5tFnme7bl5AFzgAiIyBpY9umbbjANBgkq\n\n                  hkiG9w0BAQsFAAOCAgEAVR9YqbyyqFDQDLHYGmkgJykIrGF1XIpu+ILlaS/V9lZL\n\n                  ubhzEFnTIZd+50xx+7LSYK05qAvqFyFWhfFQDlnrzuBZ6brJFe+GnY+EgPbk6ZGQ\n\n                  3BebYhtF8GaV0nxvwuo77x/Py9auJ/GpsMiu/X1+mvoiBOv/2X/qkSsisRcOj/KK\n\n                  NFtY2PwByVS5uCbMiogziUwthDyC3+6WVwW6LLv3xLfHTjuCvjHIInNzktHCgKQ5\n\n                  ORAzI4JMPJ+GslWYHb4phowim57iaztXOoJwTdwJx4nLCgdNbOhdjsnvzqvHu7Ur\n\n                  TkXWStAmzOVyyghqpZXjFaH3pO3JLF+l+/+sKAIuvtd7u+Nxe5AW0wdeRlN8NwdC\n\n                  jNPElpzVmbUq4JUagEiuTDkHzsxHpFKVK7q4+63SM1N95R1NbdWhscdCb+ZAJzVc\n\n                  oyi3B43njTOQ5yOf+1CceWxG1bQVs5ZufpsMljq4Ui0/1lvh+wjChP4kqKOJ2qxq\n\n                  4RgqsahDYVvTH9w7jXbyLeiNdd8XM2w9U/t7y0Ff/9yi0GE44Za4rF2LN9d11TPA\n\n                  mRGunUHBcnWEvgJBQl9nJEiU0Zsnvgc/ubhPgXRR4Xq37Z0j4r7g1SgEEzwxA57d\n\n                  emyPxgcYxn/eR44/KJ4EBs+lVDR3veyJm+kXQ99b21/+jh5Xos1AnX5iItreGCc=\n\n                  -----END CERTIFICATE-----\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: Ngrok-Version\n          in: header\n          schema:\n            type: integer\n          example: '2'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n    get:\n      tags:\n        - Certificates (DEV) \u003e TLS CAs\n      summary: List CAs\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: Ngrok-Version\n          in: header\n          schema:\n            type: integer\n          example: '2'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /certificate_authorities/{certificate_authority_id}:\n    get:\n      tags:\n        - Certificates (DEV) \u003e TLS CAs\n      summary: Get CA\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: Ngrok-Version\n          in: header\n          schema:\n            type: integer\n          example: '2'\n        - name: certificate_authority_id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n    patch:\n      tags:\n        - Certificates (DEV) \u003e TLS CAs\n      summary: Update CA\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                description: \u003e-\n                  Postman test: Update Root CA from Let's Encrypt (pem available\n                  at https://letsencrypt.org/certs/isrgrootx1.pem.txt) changed\n                metadata: '{\"environment\":\"postman-test\", \"changed\":true}'\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: Ngrok-Version\n          in: header\n          schema:\n            type: integer\n          example: '2'\n        - name: certificate_authority_id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n    delete:\n      tags:\n        - Certificates (DEV) \u003e TLS CAs\n      summary: Delete CA\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: Ngrok-Version\n          in: header\n          schema:\n            type: integer\n          example: '2'\n        - name: certificate_authority_id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /credentials:\n    get:\n      tags:\n        - Tunnels (DEV) \u003e Tunnel Credentials (TODO)\n      summary: List Tunnels Credentials\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: Ngrok-Version\n          in: header\n          schema:\n            type: integer\n          example: '2'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /tunnel_sessions:\n    get:\n      tags:\n        - Tunnels (DEV) \u003e Tunnel Sessions\n      summary: List Tunnels Sessions\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: Ngrok-Version\n          in: header\n          schema:\n            type: integer\n          example: '2'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /tunnel_sessions/{tunnel_session_id}:\n    get:\n      tags:\n        - Tunnels (DEV) \u003e Tunnel Sessions\n      summary: Get Tunnels Session\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: Ngrok-Version\n          in: header\n          schema:\n            type: integer\n          example: '2'\n        - name: tunnel_session_id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /tunnel_sessions/{tunnel_session_id}/restart:\n    post:\n      tags:\n        - Tunnels (DEV) \u003e Tunnel Sessions\n      summary: Restart Tunnel Agent\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example: {}\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: Ngrok-Version\n          in: header\n          schema:\n            type: integer\n          example: '2'\n        - name: tunnel_session_id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /tunnel_sessions/{tunnel_session_id}/stop:\n    post:\n      tags:\n        - Tunnels (DEV) \u003e Tunnel Sessions\n      summary: Stop Tunnel Agent\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example: {}\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: Ngrok-Version\n          in: header\n          schema:\n            type: integer\n          example: '2'\n        - name: tunnel_session_id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /tunnel_sessions/{tunnel_session_id}/update:\n    post:\n      tags:\n        - Tunnels (DEV) \u003e Tunnel Sessions\n      summary: Update Tunnel Agent\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example: {}\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: Ngrok-Version\n          in: header\n          schema:\n            type: integer\n          example: '2'\n        - name: tunnel_session_id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /tunnels:\n    get:\n      tags:\n        - Tunnels (DEV)\n      summary: List Tunnels\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: Ngrok-Version\n          in: header\n          schema:\n            type: integer\n          example: '2'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n",
			"canonicalURL": "/github.com/ngrok/ngrok-docs@b1abd985704bb7ca3c5747b81c44659addd2f591/-/blob/openapi/ngrok_openapi.yml",
			"externalURLs": [
				{
					"url": "https://github.com/ngrok/ngrok-docs/blob/b1abd985704bb7ca3c5747b81c44659addd2f591/openapi/ngrok_openapi.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/ip_policy_rules\": post: parameters: parse parameter \"\": at openapi/ngrok_openapi.yml:473:17: invalid header name \"\""
}