{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/containerbuildsystem/cachito"
		},
		"file": {
			"name": "api_v1.yaml",
			"size": 0,
			"path": "cachito/web/static/api_v1.yaml",
			"byteSize": 36818,
			"content": "openapi: \"3.0.2\"\ninfo:\n  description: \u003e\n    Cachito is a service that stores application sources and their dependencies.\n  license:\n    name: \"GPL-3.0\"\n  title: Cachito API\n  version: \"1.0\"\nservers:\n  - url: /api/v1\npaths:\n  /status:\n    get:\n      summary: Get Cachito status\n      description: \u003e\n        Return status of Cachito workers and services that Cachito depends on.\n        Includes information about which package managers can currently be processed.\n      responses:\n        \"200\":\n          description: Status information (as JSON)\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  can_process:\n                    type: object\n                    additionalProperties:\n                      type: boolean\n                      description: Requests with this package manager can be processed\n                    example: { \"git-submodule\": false, \"gomod\": false, \"npm\": false, \"pip\": false, \"yarn\": false }\n                  services:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        name:\n                          type: string\n                          description: Name of service\n                          example: nexus\n                        ok:\n                          type: boolean\n                          description: Service seems to be working\n                          example: false\n                        reason:\n                          type: string\n                          description: Reason why service is not working\n                          example: \"503: Service Unavailable\"\n                      required:\n                        - name\n                        - ok\n                  workers:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        name:\n                          type: string\n                          description: Name of worker\n                          example: celery@5ed43ee7bba5\n                        ok:\n                          type: boolean\n                          description: Worker seems to be functional\n                          example: false\n                        reason:\n                          type: string\n                          description: Reason why worker is not functional\n                          example: Node did not respond to ping\n                      required:\n                        - name\n                        - ok\n                required:\n                  - can_process\n                  - services\n                  - workers\n  /status/short:\n    get:\n      summary: Get Cachito status (short)\n      description: \u003e\n        If everything is working correctly (i.e. all package managers can be processed),\n        return 200. Otherwise, return 503.\n      responses:\n        \"200\":\n          description: Everything is working correctly\n          content:\n            application/json:\n              example: { \"ok\": true }\n        \"503\":\n          description: Some issues were found, at least one package manager cannot be processed\n          content:\n            application/json:\n              example: { \"ok\": false, \"reason\": \"no workers are available\" }\n  /requests:\n    get:\n      summary: List Cachito requests\n      description: Return all the Cachito requests\n      parameters:\n        - name: page\n          in: query\n          description: The specific page to view\n          schema:\n            type: integer\n            example: 1\n            default: 1\n        - name: per_page\n          in: query\n          description: The number of requests to show per page\n          schema:\n            type: integer\n            example: 10\n            default: 10\n        - name: state\n          in: query\n          description: The state to filter requests by\n          schema:\n            type: string\n            example: in_progress\n            default: null\n        - name: verbose\n          in: query\n          description: Shows the same view as /requests/{id}\n          schema:\n            type: boolean\n            example: true\n            default: false\n        - name: repo\n          in: query\n          description: A full repository URL to filter request by\n          schema:\n            type: string\n            example: https://github.com/release-engineering/retrodep.git\n            default: null\n        - name: ref\n          in: query\n          description: A git ref to filter request by\n          schema:\n            type: string\n            example: bc9767a71ede6e0084ae4a9e01dcd8b81c30b741\n            default: null\n        - name: pkg_manager\n          in: query\n          description: \u003e\n            Filter requests by the given pkg_manager. This argument\n            can be specified multiple times, that will filter all\n            requests that have the specified pkg_managers.\n          schema:\n            type: string\n            example: gomod\n            default: null\n        - name: created_from\n          in: query\n          description: \u003e\n            Filter requests by the given date or datetime (inclusive).\n            This argument filters all requests created after the\n            specified date or datetime.\n          schema:\n            type: string\n            example: \"2019-09-17T18:52:57.577851\"\n            default: null\n        - name: created_to\n          in: query\n          description: \u003e\n            Filter requests by the given date or datetime (inclusive).\n            This argument filters all requests created before the\n            specified date or datetime.\n          schema:\n            type: string\n            example: \"2019-09-17T18:52:57.577851\"\n            default: null\n        - name: error_origin\n          in: query\n          description: Filter requests by the given request error origin\n          schema:\n            type: string\n            example: \"client\"\n            default: null\n        - name: error_type\n          in: query\n          description: Filter requests by the given request error type\n          schema:\n            type: string\n            example: \"InvalidRequestData\"\n            default: null\n      responses:\n        \"200\":\n          description: A list of requests\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  items:\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/Request\"\n                  meta:\n                    $ref: \"#/components/schemas/Pagination\"\n        \"400\":\n          description: The query parameters are invalid\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    example: \"awesome is not a valid request state. Valid states are: complete, failed, in_progress, stale\"\n        \"404\":\n          description: No requests were found\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    example: The requested resource was not found\n    post:\n      summary: Create a Cachito request\n      description: Create a new Cachito request\n      requestBody:\n        description: The request to create\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequestNew'\n      security:\n      - negotiateAuth: []\n      responses:\n        \"201\":\n          description: The request was initiated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RequestVerbose\"\n        \"400\":\n          description: The input is invalid\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    example: \"The \\\"ref\\\" parameter must be a 40 character hex string\"\n        \"403\":\n          description: The user is not allowed to create a request with this input\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    example: You are not authorized to create a request on behalf of another user\n  \"/requests/{id}\":\n    get:\n      summary: Get a Cachito request\n      description: Return a specific Cachito request\n      parameters:\n      - name: id\n        in: path\n        required: true\n        description: The ID of the Cachito request to retrieve\n        schema:\n          type: integer\n      responses:\n        \"200\":\n          description: The requested Cachito request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RequestVerbose\"\n        \"404\":\n          description: The request wasn't found\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    example: The requested resource was not found\n    patch:\n      summary: Update a Cachito request\n      description: Update a Cachito request (requires special authorization)\n      parameters:\n      - name: id\n        in: path\n        required: true\n        description: The ID of the Cachito request to update\n        schema:\n          type: integer\n      responses:\n        \"200\":\n          description: The request was updated\n        \"403\":\n          description: The requester is not allowed to modify a request\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    example: This API endpoint is restricted to Cachito workers\n        \"404\":\n          description: The request wasn't found\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    example: The requested resource was not found\n        \"400\":\n          description: The input is invalid\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    example: The input data must be a JSON object\n      requestBody:\n        description: The keys to update\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequestUpdate'\n      security:\n      - negotiateAuth: []\n  \"/requests/{id}/configuration-files\":\n    get:\n      summary: List configuration files of a request\n      description: Return the configuration files of a Cachito request\n      parameters:\n      - name: id\n        in: path\n        required: true\n        description: The ID of the Cachito request to retrieve the configuration files for\n        schema:\n          type: integer\n      responses:\n        \"200\":\n          description: The configuration files of the Cachito request\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/RequestConfiguration\"\n        \"403\":\n          description: The requester is not allowed to add configuration files for a request\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    example: This API endpoint is restricted to Cachito workers\n        \"404\":\n          description: The request wasn't found\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    example: The requested resource was not found\n    post:\n      summary: Add configuration files to a request\n      description: Add configuration files to the Cachito request (requires special authorization)\n      parameters:\n      - name: id\n        in: path\n        required: true\n        description: The ID of the Cachito request to update\n        schema:\n          type: integer\n      responses:\n        \"204\":\n          description: The request's configuration files were updated\n        \"404\":\n          description: The request wasn't found\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    example: The requested resource was not found\n        \"400\":\n          description: The input is invalid\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    example: The input data must be a JSON object\n      requestBody:\n        description: The configuration files\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: \"#/components/schemas/RequestConfiguration\"\n      security:\n      - negotiateAuth: []\n  \"/requests/{id}/content-manifest\":\n    get:\n      summary: Get the content manifest of a request\n      description: Return the content manifest of a request\n      parameters:\n      - name: id\n        in: path\n        required: true\n        description: The ID of the Cachito request to retrieve the content manifest for\n        schema:\n          type: integer\n      responses:\n        \"200\":\n          description: The content manifest of the Cachito request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ContentManifest\"\n        \"404\":\n          description: The request wasn't found\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    example: The requested resource was not found\n        \"400\":\n          description: The input is invalid\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    example: \"Content manifests are only available for requests in the \\\"complete\\\" or \\\"stale\\\" states\"\n  \"/requests/{id}/environment-variables\":\n    get:\n      summary: List environment variables of a request\n      description: Return information about the environment variables of a Cachito request\n      parameters:\n      - name: id\n        in: path\n        required: true\n        description: The ID of the Cachito request to retrieve the environment variables for\n        schema:\n          type: integer\n      responses:\n        \"200\":\n          description: The environment variables of the Cachito request\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  NAME:\n                    $ref: \"#/components/schemas/EnvironmentVariableInfo\"\n              example:\n                GOCACHE:\n                  value: deps/gomod\n                  kind: path\n                GOPATH:\n                  value: deps/gomod\n                  kind: path\n                GOSUMDB:\n                  value: off\n                  kind: literal\n        \"404\":\n          description: The request wasn't found\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    example: The requested resource was not found\n  \"/requests/{id}/download\":\n    get:\n      summary: Download a Cachito request bundle\n      description: Download a Cachito request bundle\n      parameters:\n      - name: id\n        in: path\n        required: true\n        description: The ID of the Cachito request\n        schema:\n          type: integer\n      responses:\n        \"200\":\n          description: Downloads the bundle\n          headers:\n            Digest:\n              schema:\n                type: string\n              description: The base64 encoded sha256 digest of the bundle. For example, sha-256=X48E9qOokqqrvdts8nOJRJN3OWDUoyWxBf7kbu9DBPE=\n          content:\n            application/gzip: {}\n        \"404\":\n          description: The request wasn't found\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    example: The requested resource was not found\n        \"400\":\n          description: The input is invalid\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    example: \"The request must be in the \\\"complete\\\" state before downloading the archive\"\n  \"/requests/{id}/logs\":\n    get:\n      summary: Get Cachito request logs\n      description: Return the logs for a specific Cachito request\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The ID of the Cachito request to retrieve the logs for\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: The logs for the Cachito request\n          content:\n            text/plain:\n              schema:\n                type: string\n              example: |-\n                Processing Cachito request 1...\n                Processing request...\n                Done processing Cachito request 1\n        '404':\n          description: Either logs for Cachito requests are not enabled in Cachito, Cachito can't find the request, or the log file is missing\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    example: The requested resource was not found\n        '410':\n          description: The logs for the Cachito request have been removed due to the request being in the stale state\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    example: The logs for the Cachito request 1 no longer exist\n  \"/requests/{id}/packages\":\n    get:\n      summary: List packages and dependencies for a request\n      description: Return the packages and dependencies for a request\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The ID of the Cachito request\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: Lists packages and dependencies\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  dependencies:\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/PackageWithReplaces\"\n                  packages:\n                    type: array\n                    items:\n                      allOf:\n                        - $ref: \"#/components/schemas/Package\"\n                        - type: object\n                          properties:\n                            dependencies:\n                              type: array\n                              items:\n                                $ref: \"#/components/schemas/PackageWithReplaces\"\n        \"404\":\n          description: The request does not exist or the packages file is not present\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    example: \"The packages file is not present for request\"\n        \"500\":\n          description: Request is at invalid state. The packages file is not present.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    example: \"Invalid state: packages file was not found.\"\n  \"/content-manifest\":\n    get:\n      summary: Get the content manifest of multiple requests\n      description: Return the content manifest of the specified Cachito requests\n      parameters:\n      - name: requests\n        in: query\n        required: false\n        description: The comma separated IDs of the Cachito requests to retrieve the content manifest for\n        schema:\n          type: string\n          example: [1,2,3]\n      responses:\n        \"200\":\n          description: The content manifest of the Cachito requests\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ContentManifest\"\n        \"400\":\n          description: Any of the input Cachito request id is invalid.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    example: \"Request 1 is in state in_progress, not complete or stale.\"\n  \"/request-metrics\":\n    get:\n      summary: List requests with a final state information\n      description: Return a list of Cachito requests with a final state information\n      parameters:\n      - name: finished_from\n        description: The earliest possible date/time of request end (date, datetime or timestamp format)\n        in: query\n        required: false\n        schema:\n          type: string\n        examples:\n          date:\n            value: \"2021-12-01\"\n          datetime:\n            value: \"2021-12-01T12:00:00\"\n          timestamp:\n            value: \"1623456789\"\n      - name: finished_to\n        description: The latest possible date/time of request end (date, datetime or timestamp format)\n        in: query\n        required: false\n        schema:\n          type: string\n        examples:\n          date:\n            value: \"2021-12-31\"\n          datetime:\n            value: \"2021-12-31T12:00:00\"\n          timestamp:\n            value: \"1633456789\"\n      - name: error_origin\n        description: The origin of a request error (\"client\" or \"server\")\n        in: query\n        required: false\n        schema:\n          type: string\n      - name: error_type\n        description: The type of a request error\n        in: query\n        required: false\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: List of requests with corresponding metrics\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/RequestMetrics\"\n        \"400\":\n          description: Validation error\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  errors:\n                    type: object\n                    additionalProperties:\n                      type: string\n                    example:\n                      finished_from: invalid date format\n                      finished_to: invalid date format\n\n  \"/request-metrics/summary\":\n    get:\n      summary: Get a summary of requests\n      description: Return a summary about number and duration of Cachito requests\n      parameters:\n      - name: finished_from\n        description: The earliest possible date/time of request end (date, datetime or timestamp format)\n        in: query\n        required: true\n        schema:\n          type: string\n          example: \"2021-12-01\"\n      - name: finished_to\n        description: The latest possible date/time of request end (date, datetime or timestamp format)\n        in: query\n        required: true\n        schema:\n          type: string\n          example: \"2021-12-31\"\n      responses:\n        \"200\":\n          description: Aggregated data about all requests of the given period\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RequestMetricsSummary\"\n        \"400\":\n          description: Validation error\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  errors:\n                    type: object\n                    additionalProperties:\n                      type: string\n                    example:\n                      finished_from: invalid date format\n                      finished_to: invalid date format\n\ncomponents:\n  schemas:\n    Package:\n      type: object\n      example:\n        name: github.com/op/go-logging\n        type: gomod\n        version: \"v0.1.1\"\n      properties:\n        name:\n          type: string\n          example: github.com/op/go-logging\n        type:\n          type: string\n          example: gomod\n        version:\n          type: string\n          nullable: true\n          example: \"v0.1.1\"\n    PackageWithReplaces:\n      allOf:\n      - $ref: \"#/components/schemas/Package\"\n      - type: object\n        properties:\n          replaces:\n            $ref: \"#/components/schemas/Package\"\n        required:\n        - name\n        - type\n        - version\n    PackageReplacement:\n      allOf:\n      - type: object\n        properties:\n          new_name:\n            type: string\n            example: gitlab.com/op/go-logging\n        required:\n        - name\n        - type\n        - version\n      - $ref: \"#/components/schemas/Package\"\n    EnvironmentVariable:\n      type: object\n      additionalProperties:\n        type: string\n      example:\n        GOCACHE: deps/gomod\n        GOPATH: deps/gomod\n    EnvironmentVariableInfo:\n      type: object\n      properties:\n        value:\n          type: string\n          description: The value of the environment variable\n          example: \"deps/gomod\"\n        kind:\n          type: string\n          description: The kind of the environment variable, e.g. \"path\" or \"literal\"\n          example: \"path\"\n      required:\n      - kind\n      - value\n    Pagination:\n      type: object\n      properties:\n        first:\n          type: string\n          example: \"https://cachito.domain.local/api/v1/requests?page=1\u0026per_page=20\u0026verbose=False\"\n        last:\n          type: string\n          example: \"https://cachito.domain.local/api/v1/requests?page=3\u0026per_page=20\u0026verbose=False\"\n        next:\n          type: string\n          example: \"https://cachito.domain.local/api/v1/requests?page=1\u0026per_page=20\u0026verbose=False\"\n        page:\n          type: integer\n          example: 1\n        pages:\n          type: integer\n          example: 3\n        per_page:\n          type: integer\n          example: 20\n        previous:\n          type: string\n          example: null\n        total:\n          type: integer\n          example: 45\n    Purl:\n      type: string\n      example: \"pkg:golang/github.com%2Frelease-engineering%2Fretrodep%2Fv2@v2.0.2\"\n    RequestBase:\n      type: object\n      properties:\n        environment_variables:\n          $ref: \"#/components/schemas/EnvironmentVariable\"\n        flags:\n          type: array\n          items:\n            type: string\n          example:\n            - some_feature\n            - some_other_feature\n        id:\n          type: integer\n          example: 1\n        pkg_managers:\n          type: array\n          items:\n            type: string\n          example:\n            - gomod\n        ref:\n          type: string\n          example: \"a7ac8d4c0b7fe90d51fb911511cbf6939655c877\"\n        repo:\n          type: string\n          example: \"https://github.com/kubernetes/kubernetes.git\"\n        state:\n          type: string\n          example: complete\n        state_reason:\n          type: string\n          example: Completed successfully\n        updated:\n          type: string\n          example: \"2019-09-17T19:42:47.149979\"\n        user:\n          type: string\n          example: tbrady@DOMAIN.LOCAL\n        created:\n          type: string\n          example: \"2019-09-17T18:52:57.577851\"\n    Request:\n      allOf:\n      - type: object\n        properties:\n          dependencies:\n            type: integer\n            example: 309\n          packages:\n            type: integer\n            example: 1\n          submitted_by:\n            type: string\n            example: osbs@DOMAIN.LOCAL\n      - $ref: \"#/components/schemas/RequestBase\"\n    RequestConfiguration:\n      type: object\n      properties:\n        content:\n          type: string\n          description: Configuration file as base64 encoded string\n          example: IlNodXQgdXAgYnJhaW4gb3IgSSdsbCBzdGFiIHlvdSB3aXRoIGEgUS1UaXAiIC0gSG9tZXIgSi4gU2ltcHNvbg==\n        path:\n          type: string\n          description: The relative path in the bundle that the configuration should be created at\n          example: app/.npmrc\n        type:\n          type: string\n          description: The type of the configuration file content (currently only \"base64\" is supported)\n          example: base64\n      required:\n      - content\n      - path\n      - type\n    RequestMetrics:\n      type: object\n      properties:\n        id:\n          type: integer\n          example: 1234\n        final_state:\n          type: string\n          example: \"complete\"\n        final_state_reason:\n          type: string\n          example: \"Completed successfully\"\n        finished:\n          type: string\n          format: date-time\n          example: \"2021-12-31T12:34:56.789012\"\n        duration:\n          type: number\n          format: float\n          example: 4.321\n        time_in_queue:\n          type: number\n          format: float\n          example: 0.234\n    RequestMetricsSummary:\n      type: object\n      properties:\n        duration_avg:\n          type: number\n          format: float\n          example: 2.345\n        duration_50:\n          type: number\n          format: float\n          example: 2.109\n        duration_95:\n          type: number\n          format: float\n          example: 4.321\n        time_in_queue_avg:\n          type: number\n          format: float\n          example: 0.321\n        time_in_queue_95:\n          type: number\n          format: float\n          example: 0.987\n        client_errors:\n          type: number\n          format: integer\n          example: 7\n        server_errors:\n          type: number\n          format: integer\n          example: 2\n        total:\n          type: integer\n    RequestNew:\n      type: object\n      properties:\n        dependency_replacements:\n          type: array\n          items:\n            $ref: \"#/components/schemas/PackageReplacement\"\n        flags:\n          type: array\n          items:\n            type: string\n            example: some_flag\n        packages:\n          type: object\n          items:\n            type: array\n            items:\n              type: object\n          example:\n            npm:\n            - path: client\n            - path: legacy/client\n        pkg_managers:\n          type: array\n          items:\n            type: string\n            example: gomod\n          description: \u003e\n            The list of package managers to use on the request. If this is not set, Cachito will\n            use the configured default package managers. In most deployments, this will be\n            [\"gomod\"]. To explicitly disable the use of any package managers, just provide an\n            empty array.\n          example:\n          - gomod\n        ref:\n          type: string\n          example: \"a7ac8d4c0b7fe90d51fb911511cbf6939655c877\"\n        repo:\n          type: string\n          example: \"https://github.com/kubernetes/kubernetes.git\"\n        user:\n          type: string\n          description: \u003e\n            The user this request is created on behalf of. This is reserved for privileged users\n            that can act as a representative.\n          example: tbrady@DOMAIN.LOCAL\n      required:\n      - ref\n      - repo\n    RequestUpdate:\n      type: object\n      properties:\n        environment_variables:\n          $ref: \"#/components/schemas/EnvironmentVariable\"\n        state:\n          type: string\n          example: complete\n        state_reason:\n          type: string\n          example: Completed successfully\n        packages_count:\n          type: integer\n          example: 1\n        dependencies_count:\n          type: integer\n          example: 100\n        error_origin:\n          type: string\n        error_type:\n          type: string\n    RequestVerbose:\n      allOf:\n      - type: object\n        properties:\n          configuration_files:\n            type: string\n            description: The URL to the API endpoint with the configuration files\n            example: \"https://cachito.domain.local/api/v1/requests/1/configuration-files\"\n          content_manifest:\n            type: string\n            description: The URL to the API endpoint with the content manifest\n            example: \"https://cachito.domain.local/api/v1/requests/1/content-manifest\"\n          environment_variables_info:\n            type: string\n            description: The URL to the API endpoint with the environment variables information\n            example: \"https://cachito.domain.local/api/v1/requests/1/environment-variables\"\n          dependencies:\n            type: array\n            items:\n              $ref: \"#/components/schemas/PackageWithReplaces\"\n          packages:\n            type: array\n            items:\n              allOf:\n              - $ref: \"#/components/schemas/Package\"\n              - type: object\n                properties:\n                  dependencies:\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/PackageWithReplaces\"\n          state_history:\n            type: array\n            items:\n              $ref: \"#/components/schemas/StateHistory\"\n          submitted_by:\n            type: string\n            example: osbs@DOMAIN.LOCAL\n          logs:\n            type: object\n            properties:\n              url:\n                type: string\n                description: URL to fetch the logs for the request\n      - $ref: \"#/components/schemas/RequestBase\"\n    StateHistory:\n      type: object\n      properties:\n        state:\n          type: string\n        state_reason:\n          type: string\n        updated:\n          type: string\n      example:\n        state: complete\n        state_reason: Completed successfully\n        updated: \"2019-09-19T19:35:15.722265\"\n    ContentManifest:\n      type: object\n      properties:\n        metadata:\n          type: object\n          properties:\n            icm_version:\n              type: integer\n              example: 1\n            icm_spec:\n              type: string\n              example: \"https://raw.githubusercontent.com/containerbuildsystem/\\\n                        atomic-reactor/f4abcfdaf8247a6b074f94fa84f3846f82d781c6/\\\n                        atomic_reactor/schemas/content_manifest.json\"\n            image_layer_index:\n              type: integer\n              example: -1\n        image_contents:\n          type: array\n          items:\n            type: object\n            properties:\n              purl:\n                $ref: \"#/components/schemas/Purl\"\n              dependencies:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    purl:\n                      $ref: \"#/components/schemas/Purl\"\n              sources:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    purl:\n                      $ref: \"#/components/schemas/Purl\"\n  securitySchemes:\n    negotiateAuth:  # Kerberos\n      type: http\n      scheme: Negotiate\n",
			"canonicalURL": "/github.com/containerbuildsystem/cachito@ce297cabdb3dc0d951e56772c9d8de7a6beeaff6/-/blob/cachito/web/static/api_v1.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/containerbuildsystem/cachito/blob/ce297cabdb3dc0d951e56772c9d8de7a6beeaff6/cachito/web/static/api_v1.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"RequestNew\": parse schema: property \"packages\": parse schema: at 1:5532: object cannot contain 'items' field"
}