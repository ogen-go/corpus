{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/OCR-D/spec"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "openapi.yml",
			"byteSize": 14512,
			"content": "openapi: 3.0.1\ninfo:\n  title: OCR-D Web API\n  description: \u003e\n    # HTTP API for offering OCR-D processing\n\n    \u003e This document defines the [data model](#/components/schemas) and\n    various HTTP APIs related to OCR-D\n\n    ## OCR-D API compatibility\n\n    An implementation may claim compatibility with a `OCR-D ${N} API v{$V}` iff\n\n      * it implements all the methods tagged `${N}`\n      * at major version `${V}` of this API definition\n\n    ## Media types\n\n    ### `application/json`\n\n    Content serialized as `application/json` is defined by the [data model](#/components/schema)\n\n    ### `application/vnd.ocrd+zip`\n\n    Defined in [https://ocr-d.de/en/spec/ocrd_zip](https://ocr-d.de/en/spec/ocrd_zip)\n\n    ### `text/vnd.ocrd.workflow`\n\n    Workflow format, currently (April 2022) still to be determined.\n\n  contact:\n    email: info@ocr-d.de\n  license:\n    name: Apache 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\n  version: 0.0.1\nexternalDocs:\n  description: OCR-D Website\n  url: 'http://ocr-d.de'\nservers:\n  - url: 'https://example.org/ocrd/v1'\n    description: The URL of your server offering the OCR-D API.\ntags:\n  - name: discovery\n    description: Discovery of capabilities of a server\n  - name: processing\n    description: OCR-D processing and processors\n  - name: workflow\n    description: Processing of workflows\n  - name: workspace\n    description: mets.xml-indexed BagIt container\n  - name: training\n    description: Training of OCR engines\n  - name: acl\n    description: Authorization and authentication\n\npaths:\n\n  '/processor':\n    get:\n      tags: ['processing', 'discovery']\n      operationId: listProcessors\n      responses:\n        '200':\n          description: A list of all processors\n          content:\n            application/json: {schema: {$ref: '#/components/schemas/ProcessorList'}}\n\n  '/processor/{executable}':\n    get:\n      tags: ['processing', 'discovery']\n      operationId: getProcessor\n      parameters:\n        - name: executable\n          in: path\n          description: Name of the executable\n          schema: {$ref: '#/components/schemas/OcrdExecutable'}\n          required: true\n      responses:\n        '200':\n          description: Get this processor\n          content:\n            application/json: {schema: {$ref: '#/components/schemas/Processor'}}\n        '404':\n          description: 'Processor not available'\n    post:\n      tags: ['processing']\n      operationId: runProcessor\n      parameters:\n        - name: executable\n          in: path\n          description: Name of the executable\n          schema: {$ref: '#/components/schemas/OcrdExecutable'}\n          required: true\n      requestBody:\n        description: Execute this ProcessorCall\n        content:\n          application/json: {schema: {$ref: '#/components/schemas/ProcessorArgs'}}\n        required: true\n      responses:\n        '200':\n          description: Return the ProcessorJob running this ProcessorCall\n          content: {application/json: {schema: {$ref: '#/components/schemas/ProcessorJob'}}}\n\n  '/processor/{executable}/{job-id}':\n    get:\n      tags: ['processing']\n      operationId: getProcessorJob\n      parameters:\n        - name: executable\n          in: path\n          description: Name of the executable\n          schema: {$ref: '#/components/schemas/OcrdExecutable'}\n          required: true\n        - name: job-id\n          in: path\n          description: ID of the ProcessorJob\n          schema: {type: string}\n          required: true\n      responses:\n        '200':\n          description: Return ProcessorJob\n          content: {application/json: {schema: {$ref: '#/components/schemas/ProcessorJob'}}}\n        '404':\n          description: 'ProcessorJob not found'\n\n  '/processor/{executable}/{job-id}/log':\n    get:\n      tags: ['processing']\n      operationId: getProcessorJobLog\n      parameters:\n        - name: executable\n          in: path\n          description: Name of the executable\n          schema: {$ref: '#/components/schemas/OcrdExecutable'}\n          required: true\n        - name: job-id\n          in: path\n          description: ID of the ProcessorJob\n          schema: {type: string}\n          required: true\n      responses:\n        '200':\n          description: Return log\n          content:\n            'text/plain': {}\n        '404':\n          description: 'ProcessorJobLog not found'\n    post:\n      tags: ['processing']\n      operationId: postProcessorJobLogEntry\n      parameters:\n        - name: executable\n          in: path\n          description: LogEntry to be logged\n          schema: {$ref: '#/components/schemas/LogEntry'}\n          required: true\n        - name: job-id\n          in: path\n          description: ID of the ProcessorJob\n          schema: {type: string}\n          required: true\n      responses:\n        '200':\n          description: Return Log\n          content:\n            'text/plain': {}\n        '404': \n          description: 'ProcessorJob not found'\n\n  '/workflow':\n    post:\n      tags: ['workflow', 'discovery']\n      operationId: postWorkflow\n      requestBody:\n        description: 'Register a new workflow'\n        content:\n          'text/vnd.ocrd.workflow': {}\n        required: true\n      responses:\n        '200':\n          description: Created a new OCR-D workflow\n          content: {application/json: {schema: {$ref: '#/components/schemas/Workflow'}}}\n        '400':\n          description: Invalid workflow\n\n  '/workflow/{workflow-id}':\n    put:\n      tags: ['workflow']\n      operationId: putWorkflow\n      parameters:\n        - name: workflow-id\n          in: path\n          description: ID of the Workflow\n          schema: {type: string}\n          required: true\n      requestBody:\n        description: 'Replace existing or create new workflow'\n        content:\n          'text/vnd.ocrd.workflow': {}\n        required: true\n      responses:\n        '200':\n          description: Created/updated a new OCR-D workflow\n          content: {application/json: {schema: {$ref: '#/components/schemas/Workflow'}}}\n        '400':\n          description: Invalid workflow\n    get:\n      tags: ['workflow', 'discovery']\n      operationId: getWorkflow\n      parameters:\n        - name: workflow-id\n          in: path\n          description: ID of the Workflow\n          schema: {type: string}\n          required: true\n      responses:\n        '200':\n          description: Return Workflow\n          content:\n            application/json: {schema: {$ref: '#/components/schemas/Workflow'}}\n            application/vnd.ocrd+zip: {}\n        '404':\n          description: 'Workflow not available'\n    post:\n      tags: ['workflow']\n      operationId: runWorkflow\n      parameters:\n        - name: workflow-id\n          in: path\n          description: ID of the Workflow\n          schema: {type: string}\n          required: true\n      responses:\n        '200':\n          description: Return WorkflowJob\n          content:\n            application/json: {schema: {$ref: '#/components/schemas/WorkflowJob'}}\n\n  '/workflow/{workflow-id}/{job-id}':\n    get:\n      tags: ['workflow']\n      operationId: getWorkflowJob\n      parameters:\n        - name: workflow-id\n          in: path\n          description: ID of the Workflow\n          schema: {type: string}\n          required: true\n        - name: job-id\n          in: path\n          description: ID of the ProcessorJob\n          schema: {type: string}\n          required: true\n      responses:\n        '200':\n          description: Return WorkflowJob\n          content:\n            application/json: {schema: {$ref: '#/components/schemas/WorkflowJob'}}\n        '400':\n          description: Workflow failed\n        '404':\n          description: WorkflowJob not found\n\n  '/workspace':\n    get:\n      tags: ['workspace']\n      operationId: getWorkspaces\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Workspace'\n    post:\n      tags: ['workspace']\n      operationId: createWorkspace\n      summary: Post a new workspace\n      requestBody:\n        description: OCRD-ZIP of the new workspace\n        content:\n          'application/vnd.ocrd+zip': {}\n        required: true\n      responses:\n        '201':\n          description: Created Workspace\n          content:\n            application/json: {schema: {$ref: '#/components/schemas/Workspace'}}\n        '400':\n          description: Invalid workspace\n\n  '/workspace/{workspace-id}':\n    put:\n      tags: ['workspace']\n      operationId: replaceWorkspace\n      summary: Replace an existing workspace\n      parameters:\n        - name: workspace-id\n          in: path\n          description: ID of the workspace\n          schema: {type: string}\n          required: true\n      requestBody:\n        description: OCRD-ZIP of the updated workspace\n        content:\n          multipart/form-data:\n            schema: {$ref: '#/components/schemas/WorkspaceRequest'}\n        required: true\n      responses:\n        '200':\n          description: Workspace replaced or created\n          content: \n            application/json: {schema: {$ref: '#/components/schemas/Workspace'}}\n        '400':\n          description: Workspace invalid\n    get:\n      tags: ['workspace']\n      operationId: getWorkspace\n      parameters:\n        - name: workspace-id\n          in: path\n          description: ID of the workspace\n          schema: {type: string}\n          required: true\n      responses:\n        '200':\n          description: Workspace found\n          content:\n            application/json: {schema: {$ref: '#/components/schemas/Workspace'}}\n        '404':\n          description: Workspace not found\n          content: {}\n        '410':\n          description: Workspace deleted before\n          content: {}\n    delete:\n      tags: ['workspace']\n      operationId: deleteWorkspace\n      parameters:\n        - name: workspace-id\n          in: path\n          description: ID of the workspace\n          schema: {type: string}\n          required: true\n      responses:\n        '200':\n          description: Workspace deleted\n          content:\n            application/json: {schema: {$ref: '#/components/schemas/Workspace'}}\n        '404':\n          description: Workspace not found\n          content: {}\n        '410':\n          description: Workspace deleted before\n          content: {}\n\n  '/discovery':\n    get:\n      tags: ['discovery']\n      operationId: discover\n      responses:\n        '200':\n          description: Return DiscoveryResponse\n          content:\n            application/json: {schema: {$ref: '#/components/schemas/DiscoveryResponse'}}\n\ncomponents:\n  schemas:\n    Resource:\n      type: object\n      required: ['@id']\n      properties:\n        '@id':\n          type: string\n          description: URL of this thing\n        description:\n          type: string\n          description: Description of the thing\n    JobState:\n      type: string\n      pattern: '^(QUEUED|RUNNING|STOPPED)'\n    Log:\n      allOf:\n        - {$ref: '#/components/schemas/Resource'}\n    Workspace:\n      allOf:\n        - {$ref: '#/components/schemas/Resource'}\n    WorkspaceRequest:\n      type: object\n      properties:\n        json:\n          $ref: '#/components/schemas/Workspace'\n        workspace:\n          type: string\n          format: binary\n    Job:\n      allOf:\n        - {$ref: '#/components/schemas/Resource'}\n        - type: object\n          properties:\n            state:\n              $ref: '#/components/schemas/JobState'\n    OcrdExecutable:\n      type: string\n      pattern: '^ocrd-.*'\n    Processor:\n      description: The ocrd-tool.json for a specific tool\n      x-$ref: 'https://ocr-d.de/ocrd_tool.schema.json#/properties/tools/patternProperties/ocrd-.*'\n    ProcessorList:\n      description: List all available processors\n      type: array\n      items:\n        type: array\n        items:\n          $ref: '#/components/schemas/Processor'\n    ProcessorArgs:\n      description: The CLI arguments passed to an OCR-D processor\n      type: object\n      properties:\n        workspace: {$ref: '#/components/schemas/Workspace'}\n        input_file_grps: {type: string}\n        output_file_grps: {type: string}\n        page_id: {type: string}\n        parameters:\n          type: object\n          default: {}\n    ProcessorCall:\n      allOf:\n        - {$ref: '#/components/schemas/ProcessorArgs'}\n        - type: object\n          description: Full representation of a CLI call of a processor\n          required: ['executable']\n          properties:\n            executable: {$ref: '#/components/schemas/OcrdExecutable'}\n    ProcessorJob:\n      allOf:\n        - {$ref: '#/components/schemas/Job'}\n        - type: object\n          properties:\n            processor: {$ref: '#/components/schemas/Processor'}\n            workspace: {$ref: '#/components/schemas/Workspace'}\n    Workflow:\n      allOf:\n        - {$ref: '#/components/schemas/Resource'}\n    WorkflowJob:\n      allOf:\n        - {$ref: '#/components/schemas/Job'}\n        - type: object\n          properties:\n            workflow: {$ref: '#/components/schemas/Workflow'}\n            workspace: {$ref: '#/components/schemas/Workspace'}\n    DiscoveryResponse:\n      type: object\n      properties:\n        ram:\n          description: All available RAM in bytes\n          type: integer\n          format: int64\n        cpu_cores:\n          description: Number of available CPU cores\n          type: integer\n          format: int64\n        has_cuda:\n          description: Whether deployment supports NVIDIA's CUDA\n          type: boolean\n        cuda_version:\n          description: Major/minor version of CUDA\n          type: string\n        has_ocrd_all:\n          description: Whether deployment is based on ocrd_all\n          type: boolean\n        ocrd_all_version:\n          description: Git tag of the ocrd_all version implemented\n          type: string\n        has_docker:\n          description: Whether the OCR-D executables run in a Docker container\n          type: boolean\n    LogEntry:\n      type: object\n      required:\n        - level\n        - message\n      properties:\n        level:\n          description: Log level\n          type: string\n          enum: ['debug', 'info', 'warning', 'error']\n        message:\n          description: Log message\n          type: string\n        time:\n          description: Log UTC time\n          type: string\n          format: date-time\n\n"
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"ProcessorCall\": parse schema: allOf: [0]: parse schema: resolve \"#/components/schemas/ProcessorArgs\": parse schema: property \"parameters\": parse default: unexpected type: \"object\""
}