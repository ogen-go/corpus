{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/zircote/swagger-php"
		},
		"file": {
			"name": "basic.yaml",
			"size": 0,
			"path": "tests/Fixtures/Apis/basic.yaml",
			"byteSize": 2766,
			"content": "openapi: 3.1.0\ninfo:\n  title: 'Basic single file API'\n  license:\n    name: MIT\n    identifier: MIT\n  version: 1.0.0\nservers:\n  -\n    url: 'https://localhost/api'\n    description: 'API server'\npaths:\n  '/products/{product_id}':\n    get:\n      tags:\n        - products\n      operationId: getProducts\n      parameters:\n        -\n          name: product_id\n          in: path\n          description: 'The product id.'\n          required: true\n          schema:\n            type: int\n      responses:\n        '200':\n          description: 'successful operation'\n          headers:\n            X-Rate-Limit:\n              description: 'calls per hour allowed by the user'\n              schema:\n                type: integer\n                format: int32\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Product'\n        '401':\n          description: oops\n  /products:\n    get:\n      tags:\n        - products\n        - catalog\n      operationId: getAll\n      responses:\n        '200':\n          description: 'successful operation'\n          content:\n            application/json:\n              schema:\n                required:\n                  - data\n                properties:\n                  data: { type: array, items: { $ref: '#/components/schemas/Product' } }\n                type: object\n        '401':\n          description: oops\n    post:\n      tags:\n        - products\n      summary: 'Add products'\n      operationId: addProducts\n      requestBody:\n        description: 'New product'\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/Product'\n      responses:\n        '200':\n          description: 'successful operation'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Product'\ncomponents:\n  schemas:\n    Colour:\n      type: string\n      enum:\n        - GREEN\n        - BLUE\n        - RED\n    NameTrait:\n      properties:\n        name:\n          description: 'The name.'\n      type: object\n    Product:\n      title: Product\n      description: Product\n      allOf:\n        -\n          $ref: '#/components/schemas/NameTrait'\n        -\n          properties:\n            quantity:\n              type: integer\n            brand:\n              type: string\n            colour:\n              $ref: '#/components/schemas/Colour'\n            id:\n              description: 'The id.'\n              format: int64\n              example: 1\n            releasedAt:\n              type: string\ntags:\n  -\n    name: products\n    description: 'All about products'\n  -\n    name: catalog\n    description: 'Catalog API'\n"
		}
	},
	"Error": "parse: parse spec: paths: /products/{product_id}: get: operation \"getProducts\": parameters: parse parameter \"product_id\": schema: parse schema: unexpected schema type: \"int\""
}