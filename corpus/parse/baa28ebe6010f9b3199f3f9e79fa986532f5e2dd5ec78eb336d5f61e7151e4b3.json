{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/hpi-schul-cloud/schulcloud-server"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "src/services/fileStorage/docs/openapi.yaml",
			"byteSize": 31635,
			"content": "security:\n  - jwtBearer: []\ninfo:\n  title: Schul-Cloud File Storage Service API\n  description:\n    This is the API specification for the Schul-Cloud File Storage service.\n    \n  contact:\n    name: support\n    email: info@dbildungscloud.de\n  license:\n    name: GPL-3.0\n    url: 'https://github.com/hpi-schul-cloud/schulcloud-server/blob/master/LICENSE'\n  version: 1.0.0\ncomponents:\n  securitySchemes:\n    jwtBearer:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n  schemas:\n    directories:\n      description: TODO\n    rename:\n      description: TODO\n    signedUrl:\n      description: TODO\n    permission:\n      description: TODO\n    copy:\n      description: TODO\n    bucket:\n      description: TODO\n    files:\n      description: TODO\n    files_list:\n      description: TODO\n    thumbnail:\n      description: TODO\n    securityCheck:\n      description: TODO\n\npaths:\n  /fileStorage/directories:\n    get:\n      parameters:\n        - description: Optional Subfolder\n          name: parent\n          in: query\n          schema:\n            type: string\n            description: (ObjectID)\n      responses:\n        '200':\n          description: Returns an array of the directory objects\n          example:\n            - name: Lehrertest\n              owner: 0000dcfbfb5c7a3f00bf21ab\n              refOwnerModel: course\n              _id: 5d0f65eed5aa885773d402c4\n              updatedAt: '2019-05-23T11:43:42.206Z'\n              createdAt: '2019-05-23T11:43:42.206Z'\n              permissions:\n                - refId: 0000d231816abba584714c9e\n                  refPermModel: user\n                  delete: true\n                  create: true\n                  read: true\n                  write: true\n                - refId: 0000d186816abba584714c99\n                  refPermModel: role\n                  delete: false\n                  create: true\n                  read: true\n                  write: false\n              isDirectory: true\n            - name: Lehrertest2\n              owner: 0000dcfbfb5c7a3f00bf21ab\n              refOwnerModel: course\n              _id: 5d0f65eed5aa885773d402c3\n              updatedAt: '2019-05-23T11:53:14.206Z'\n              createdAt: '2019-05-23T11:53:14.206Z'\n              permissions:\n                - refId: 0000d231816abba584714c9e\n                  refPermModel: user\n                  delete: true\n                  create: true\n                  read: true\n                  write: true\n                - refId: 0000d186816abba584714c99\n                  refPermModel: role\n                  delete: false\n                  create: true\n                  read: true\n                  write: false\n              isDirectory: true\n        '403':\n          description: File operation is forbidden due to missing permissions\n        '500':\n          description: Error performing operation\n      description: ''\n      summary: Get all directories\n      tags:\n        - fileStorage\n      security: []\n    post:\n      parameters:\n        - description: Directory name\n          name: name\n          type: String\n          required: true\n        - description: ID of either an course or team. For user dirs leave out.\n          type: String (ObjectID)\n          name: owner\n        - description: ID of parent folder\n          type: String (ObjectID)\n          name: parent\n        - description: Override default permissions on creation\n          name: permissions\n          type: Array\n          style: matrix\n          explode: true\n          schema:\n            type: array\n            items:\n              type: object\n      responses:\n        '200':\n          description: Returns the data of the newly created directory\n          example:\n            name: Lehrertest\n            owner: 0000dcfbfb5c7a3f00bf21ab\n            refOwnerModel: course\n            _id: 5d0f65eed5aa885773d402c4\n            updatedAt: '2019-05-23T11:43:42.206Z'\n            createdAt: '2019-05-23T11:43:42.206Z'\n            permissions:\n              - refId: 0000d231816abba584714c9e\n                refPermModel: user\n                delete: true\n                create: true\n                read: true\n                write: true\n              - refId: 0000d186816abba584714c99\n                refPermModel: role\n                delete: false\n                create: true\n                read: true\n                write: false\n            isDirectory: true\n        '403':\n          description: File operation is forbidden due to missing permissions\n        '500':\n          description: Error performing operation\n      description: ''\n      summary: Creates a new directory object\n      tags:\n        - fileStorage\n      security: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/directories'\n  '/fileStorage/directories/{id}':\n    delete:\n      parameters:\n        - description: File ID to be deleted\n          required: true\n          name: _id\n          in: query\n          type: String (ObjectID)\n      responses:\n        '200':\n          description: OK - file deleted\n        '403':\n          description: File operation is forbidden due to missing permissions\n        '404':\n          description: File not found\n        '500':\n          description: Error performing operation\n      description: ''\n      summary: Removes the directory with given Object ID\n      tags:\n        - fileStorage\n      security: []\n  /fileStorage/directories/rename:\n    post:\n      parameters:\n        - description: Object-ID of file object to be renamed\n          required: true\n          name: id\n          type: string\n        - description: The new name for the file object to be renamed\n          required: true\n          name: newName\n          type: string\n      responses:\n        '200':\n          description: OK - file object renamed\n        '403':\n          description: File operation is forbidden due to missing permissions\n        '404':\n          description: File not found\n        '500':\n          description: Error performing operation\n      description: ''\n      summary: Renames a given directory or file\n      tags:\n        - fileStorage\n      security: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/directories'\n  /fileStorage/rename:\n    post:\n      parameters:\n        - description: Object-ID of file object to be renamed\n          required: true\n          name: id\n          type: string\n        - description: The new name for the file object to be renamed\n          required: true\n          name: newName\n          type: string\n      responses:\n        '200':\n          description: OK - file object renamed\n        '403':\n          description: File operation is forbidden due to missing permissions\n        '404':\n          description: File not found\n        '500':\n          description: Error performing operation\n      description: ''\n      summary: Renames a given directory or file\n      tags:\n        - fileStorage\n      security: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/rename'\n  /fileStorage/signedUrl:\n    get:\n      parameters:\n        - description: File ID to get signed url for\n          name: file\n          in: query\n          type: String (ObjectID)\n        - description: \u003e-\n            If true sets the ResponseContentDisposition-Header for the returned\n            signed Url\n          name: download\n          in: query\n          type: Boolean\n      responses:\n        '200':\n          description: Returns the data with the signed url\n          example:\n            signedUrl:\n              url: \u003e-\n                https://dev-storage.schul-cloud.org:9001/bucket-5f2987e020834114b8efd6f8/1561200908775-24-1.gif?Content-Type=image%2Fgif\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=sc-devteam%2F20190622%2Feu-west-1%2Fs3%2Faws4_request\u0026X-Amz-Date=20190622T105509Z\u0026X-Amz-Expires=60\u0026X-Amz-Signature=b098d101dea55fc3a8fa1e9accf4c99807e96ab22a91f3ee162e86c850e6a164\u0026X-Amz-SignedHeaders=host\n        '403':\n          description: File operation is forbidden due to missing permissions\n        '404':\n          description: File not found\n        '500':\n          description: Error performing operation\n      description: ''\n      summary: Request a signed url for downloading a file\n      tags:\n        - fileStorage\n      security: []\n    post:\n      parameters:\n        - description: The path where the file can be found/should be created\n          required: true\n          name: filename\n          type: string\n        - description: the mime type of the file that will be uploaded\n          required: true\n          name: fileType\n          type: string\n        - description: ID of parent folder\n          type: String (ObjectID)\n          name: parent\n      responses:\n        '200':\n          description: Returns the data signed url and meta properties\n          example:\n            signedUrl:\n              url: \u003e-\n                https://dev-storage.schul-cloud.org:9001/bucket-5f2987e020834114b8efd6f8/1561200908775-24-1.gif?Content-Type=image%2Fgif\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=sc-devteam%2F20190622%2Feu-west-1%2Fs3%2Faws4_request\u0026X-Amz-Date=20190622T105509Z\u0026X-Amz-Expires=60\u0026X-Amz-Signature=b098d101dea55fc3a8fa1e9accf4c99807e96ab22a91f3ee162e86c850e6a164\u0026X-Amz-SignedHeaders=host\n              header:\n                Content-Type: image/gif\n                x-amz-meta-name: 24-1.gif\n                x-amz-meta-flat-name: 1561200908775-24-1.gif\n                x-amz-meta-thumbnail: 'https://schulcloud.org/images/login-right.png'\n        '403':\n          description: File operation is forbidden due to missing permissions\n        '500':\n          description: Error performing operation\n      description: ''\n      summary: Creates a new signed url for the given file information\n      tags:\n        - fileStorage\n      security: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/signedUrl'\n  '/fileStorage/signedUrl/{id}':\n    patch:\n      parameters:\n        - description: File ID to be updated\n          name: id\n          in: path\n          type: String (ObjectID)\n      responses:\n        '200':\n          description: Returns the data with the signed url\n          example:\n            signedUrl:\n              url: \u003e-\n                https://dev-storage.schul-cloud.org:9001/bucket-5f2987e020834114b8efd6f8/1561200908775-24-1.gif?Content-Type=image%2Fgif\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=sc-devteam%2F20190622%2Feu-west-1%2Fs3%2Faws4_request\u0026X-Amz-Date=20190622T105509Z\u0026X-Amz-Expires=60\u0026X-Amz-Signature=b098d101dea55fc3a8fa1e9accf4c99807e96ab22a91f3ee162e86c850e6a164\u0026X-Amz-SignedHeaders=host\n        '403':\n          description: File operation is forbidden due to missing permissions\n        '404':\n          description: File not found\n        '500':\n          description: Error performing operation\n      description: ''\n      summary: \u003e-\n        Request a signed url for updating the content of an already existing\n        file\n      tags:\n        - fileStorage\n      security: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/signedUrl'\n  /fileStorage/bucket:\n    post:\n      parameters:\n        - description: ID of school\n          required: true\n          type: string\n          in: body\n          name: parent\n          example: 5f2987e020834114b8efd6f7\n      responses:\n        '200':\n          description: OK - bucket created\n        '500':\n          description: Error performing operation\n      description: ''\n      summary: Create a bucket for given school\n      tags:\n        - fileStorage\n      security: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/bucket'\n  /fileStorage/total:\n    get:\n      parameters: []\n      responses:\n        '200':\n          description: Returns file statistics\n          example:\n            total: 112\n            totalSize: 548000\n        '500':\n          description: Error performing operation\n      description: ''\n      summary: Gets total size of all files\n      tags:\n        - fileStorage\n      security: []\n  /fileStorage/copy:\n    post:\n      parameters:\n        - description: File ID to copy\n          required: true\n          name: file\n          in: body\n          type: string\n          example: 5c6490eeb07d3c7eacedc9aa\n        - description: ID of new parent folder\n          required: true\n          name: parent\n          in: body\n          type: string\n          example: 5d0f65eed5aa885773d402c4\n      responses:\n        '200':\n          description: Returns the data of the copy.\n          example:\n            name: 24-1.gif\n            owner: 0000dcfbfb5c7a3f00bf21ab\n            type: image/gif\n            size: 2545\n            storageFileName: 1560977688023-24-1.gif\n            thumbnail: 'https://schulcloud.org/images/login-right.png'\n            parent: 5d0f65eed5aa885773d402c4\n            refOwnerModel: course\n            _id: 5d0aa11841ff829edda019c8\n            updatedAt: '2019-05-29T10:54:48.987Z'\n            createdAt: '2019-05-29T10:54:48.987Z'\n            permissions:\n              - refId: 0000d231816abba584714c9e\n                refPermModel: user\n                delete: true\n                create: true\n                read: true\n                write: true\n              - refId: 0000d186816abba584714c99\n                refPermModel: role\n                delete: false\n                create: false\n                read: true\n                write: false\n              - refId: 0000d186816abba584714c98\n                refPermModel: role\n                delete: false\n                create: false\n                read: true\n                write: true\n            isDirectory: false\n        '403':\n          description: File operation is forbidden due to missing permissions\n        '404':\n          description: File not found\n        '500':\n          description: Error performing operation\n      description: ''\n      summary: Copy a file to a new destination\n      tags:\n        - fileStorage\n      security: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/copy'\n  /fileStorage/permission:\n    get:\n      parameters:\n        - description: File ID to copy\n          required: true\n          name: file\n          in: query\n          type: string\n          example: 5cf932b42b3ca8c8c87e191d\n      responses:\n        '200':\n          example:\n            - refId: 5bb5c190fb457b1c3c0c7e0f\n              name: teammember\n              read: true\n              write: false\n            - refId: 5bb5c391fb457b1c3c0c7e10\n              name: teamexpert\n              read: true\n              write: false\n            - refId: 5bb5c49efb457b1c3c0c7e11\n              name: teamleader\n              read: true\n              write: true\n            - refId: 5bb5c545fb457b1c3c0c7e13\n              name: teamadministrator\n              read: true\n              write: true\n            - refId: 5bb5c62bfb457b1c3c0c7e14\n              name: teamowner\n              write: true\n        '403':\n          description: File operation is forbidden due to missing permissions\n        '404':\n          description: File not found\n        '500':\n          description: Error performing operation\n      description: ''\n      summary: \u003e-\n        Returns the permissions of a file filtered by owner model and\n        permissions based on the role of the user\n      tags:\n        - fileStorage\n      security: []\n  '/fileStorage/permission/{id}':\n    patch:\n      parameters:\n        - description: Object-ID of file object\n          required: true\n          name: id\n          in: path\n          type: string\n        - description: Permissions for the file/directory\n          required: true\n          name: permissions\n          in: body\n          type: array\n          example:\n            - refId: 5bb5c391fb457b1c3c0c7e10\n              read: 'true'\n              write: 'true'\n            - refId: 5bb5c190fb457b1c3c0c7e0f\n              read: 'true'\n      responses:\n        '200':\n          description: OK - file permissions updated\n        '403':\n          description: File operation is forbidden due to missing permissions\n        '404':\n          description: File not found\n        '500':\n          description: Error performing operation\n      description: ''\n      summary: Update permissions of a single file\n      tags:\n        - fileStorage\n      security: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/permission'\n  /fileStorage/files/new:\n    post:\n      parameters:\n        - description: Filename\n          name: name\n          type: String\n          required: true\n        - description: ID of either an course or team. For user files leave out.\n          type: String (ObjectID)\n          name: owner\n        - description: ID of parent folder\n          type: String (ObjectID)\n          name: parent\n        - description: Determine if students can edit if file is a course file\n          type: Boolean\n          name: studentCanEdit\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: Returns the data of the newly created file\n          example:\n            _id: 5d0aa11841ff829edda019c8\n            name: 1542141103353-praesi.docx\n            owner: 5c1a4fba954956c51f6de53c\n            type: \u003e-\n              application/vnd.openxmlformats-officedocument.wordprocessingml.document\n            size: 0\n            storageFileName: 1554392225392-1542141103353-praesi.docx\n            thumbnail: 'https://schulcloud.org/images/login-right.png'\n            parent: 5c6490eeb07d3c7eacedc9a8\n            refOwnerModel: course\n            updatedAt: '2019-04-04T15:37:06.201Z'\n            createdAt: '2019-04-04T15:37:06.201Z'\n            permissions:\n              - refId: 0000d231816abba584714c9e\n                refPermModel: user\n                delete: true\n                create: true\n                read: true\n                write: true\n              - refId: 0000d186816abba584714c99\n                refPermModel: role\n                delete: false\n                create: false\n                read: true\n                write: false\n              - refId: 0000d186816abba584714c98\n                refPermModel: role\n                delete: false\n                create: false\n                read: true\n                write: true\n            isDirectory: false\n        '403':\n          description: File operation is forbidden due to missing permissions\n        '500':\n          description: Error performing operation\n      description: \u003e-\n        This service lets you create an new empty file. Right now the following\n        file types are supported: .pptx, .xlsx, .docx\n      summary: Creating a new empty file\n      tags:\n        - fileStorage\n      security: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/files'\n  /fileStorage:\n    get:\n      parameters:\n        - in: query\n          description: 'ID of either an user, course or team'\n          type: String (ObjectID)\n          name: owner\n          required: true\n        - in: query\n          description: ID of parent folder\n          type: String (ObjectID)\n          name: parent\n      responses:\n        '200':\n          description: 'Returns an array of all files '\n        '403':\n          description: File operation is forbidden due to missing permissions\n        '500':\n          description: Error performing operation\n      description: ''\n      summary: Retrieve all files and directories of given owner and parent folder\n      tags:\n        - fileStorage\n      security: []\n    post:\n      parameters:\n        - description: Filename\n          name: name\n          type: String\n          required: true\n        - description: ID of either an course or team. For user files leave out.\n          type: String (ObjectID)\n          name: owner\n        - description: ID of parent folder\n          type: String (ObjectID)\n          name: parent\n        - description: Mimetype of file\n          type: String\n          name: type\n        - description: Filesize in Byte\n          name: size\n          type: Number\n          schema:\n            type: integer\n            format: int32\n            minimum: 0\n        - description: Filename aka identifier in storage context\n          name: storageFileName\n          type: String\n          required: true\n          schema:\n            type: string\n        - description: Thumbnail of file\n          type: String\n          name: thumbnail\n        - description: Determine if students can edit if file is a course file\n          type: Boolean\n          name: studentCanEdit\n          schema:\n            type: boolean\n        - description: Override default permissions on creation\n          name: permissions\n          type: Array\n          style: matrix\n          explode: true\n          schema:\n            type: array\n            items:\n              type: object\n      responses:\n        '200':\n          description: Returns the data of the newly created file\n          example:\n            name: 24-1.gif\n            owner: 0000dcfbfb5c7a3f00bf21ab\n            type: image/gif\n            size: 2545\n            storageFileName: 1560977688023-24-1.gif\n            thumbnail: 'https://schulcloud.org/images/login-right.png'\n            parent: 5c6490eeb07d3c7eacedc9a8\n            refOwnerModel: course\n            _id: 5d0aa11841ff829edda019c8\n            updatedAt: '2019-05-29T10:54:48.987Z'\n            createdAt: '2019-05-29T10:54:48.987Z'\n            permissions:\n              - refId: 0000d231816abba584714c9e\n                refPermModel: user\n                delete: true\n                create: true\n                read: true\n                write: true\n              - refId: 0000d186816abba584714c99\n                refPermModel: role\n                delete: false\n                create: false\n                read: true\n                write: false\n              - refId: 0000d186816abba584714c98\n                refPermModel: role\n                delete: false\n                create: false\n                read: true\n                write: true\n            isDirectory: false\n        '403':\n          description: File operation is forbidden due to missing permissions\n        '500':\n          description: Error performing operation\n      description: ''\n      summary: Creates a new file object\n      tags:\n        - fileStorage\n      security: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/fileStorage'\n  '/fileStorage/{id}':\n    patch:\n      parameters:\n        - description: File ID to be moved\n          required: true\n          name: id\n          in: query\n          type: String (ObjectID)\n        - description: File ID to be moved\n          name: id\n          in: path\n          type: String (ObjectID)\n        - description: ID of parent folder or team/course/user\n          type: String (ObjectID)\n          name: parent\n      responses:\n        '200':\n          description: OK - file moved\n        '403':\n          description: File operation is forbidden due to missing permissions\n        '404':\n          description: File not found\n        '500':\n          description: Error performing operation\n      description: ''\n      summary: \u003e-\n        Moves a file with given Object ID either in query or path to a new\n        destination\n      tags:\n        - fileStorage\n      security: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/fileStorage'\n    delete:\n      parameters:\n        - description: File ID to be deleted\n          required: true\n          name: _id\n          in: query\n          type: String (ObjectID)\n        - description: File ID to be deleted\n          name: id\n          in: path\n          type: String (ObjectID)\n      responses:\n        '200':\n          description: OK - file deleted\n        '403':\n          description: File operation is forbidden due to missing permissions\n        '404':\n          description: File not found\n        '500':\n          description: Error performing operation\n      description: ''\n      summary: Removes the file with given Object ID either in query or path\n      tags:\n        - fileStorage\n      security: []\n  /files:\n    get:\n      parameters:\n        - description: Number of results to return\n          in: query\n          name: $limit\n          schema:\n            type: integer\n        - description: Number of results to skip\n          in: query\n          name: $skip\n          schema:\n            type: integer\n        - description: Property to sort results\n          in: query\n          name: $sort\n          style: deepObject\n          schema:\n            type: object\n        - description: Query parameters to filter\n          in: query\n          name: filter\n          style: form\n          explode: true\n          schema:\n            $ref: '#/components/schemas/files'\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/files_list'\n        '401':\n          description: not authenticated\n        '500':\n          description: general error\n      description: Retrieves a list of all resources from the service.\n      summary: ''\n      tags:\n        - files\n      security: []\n    post:\n      parameters: []\n      responses:\n        '201':\n          description: created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/files'\n        '401':\n          description: not authenticated\n        '500':\n          description: general error\n      description: Creates a new resource with data.\n      summary: ''\n      tags:\n        - files\n      security: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/files'\n  '/files/{_id}':\n    get:\n      parameters:\n        - in: path\n          name: _id\n          description: ID of files to return\n          schema:\n            type: integer\n          required: true\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/files'\n        '401':\n          description: not authenticated\n        '404':\n          description: not found\n        '500':\n          description: general error\n      description: Retrieves a single resource with the given id from the service.\n      summary: ''\n      tags:\n        - files\n      security: []\n    put:\n      parameters:\n        - in: path\n          name: _id\n          description: ID of files to update\n          schema:\n            type: integer\n          required: true\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/files'\n        '401':\n          description: not authenticated\n        '404':\n          description: not found\n        '500':\n          description: general error\n      description: Updates the resource identified by id using data.\n      summary: ''\n      tags:\n        - files\n      security: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/files'\n    patch:\n      parameters:\n        - in: path\n          name: _id\n          description: ID of files to update\n          schema:\n            type: integer\n          required: true\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/files'\n        '401':\n          description: not authenticated\n        '404':\n          description: not found\n        '500':\n          description: general error\n      description: Updates the resource identified by id using data.\n      summary: ''\n      tags:\n        - files\n      security: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/files'\n    delete:\n      parameters:\n        - in: path\n          name: _id\n          description: ID of files to remove\n          schema:\n            type: integer\n          required: true\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/files'\n        '401':\n          description: not authenticated\n        '404':\n          description: not found\n        '500':\n          description: general error\n      description: Removes the resource with id.\n      summary: ''\n      tags:\n        - files\n      security: []\n  '/fileStorage/thumbnail/{id}':\n    patch:\n      parameters:\n        - in: path\n          name: id\n          description: ID of thumbnail to update\n          schema:\n            type: integer\n          required: true\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/thumbnail'\n        '401':\n          description: not authenticated\n        '404':\n          description: not found\n        '500':\n          description: general error\n      description: Updates the resource identified by id using data.\n      summary: ''\n      tags:\n        - fileStorage\n      security: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/thumbnail'\n  '/fileStorage/securityCheck/{id}':\n    put:\n      parameters:\n        - in: path\n          name: id\n          description: ID of securityCheck to update\n          schema:\n            type: integer\n          required: true\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/securityCheck'\n        '401':\n          description: not authenticated\n        '404':\n          description: not found\n        '500':\n          description: general error\n      description: Updates the resource identified by id using data.\n      summary: ''\n      tags:\n        - fileStorage\n      security: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/securityCheck'\n  \nopenapi: 3.0.2\ntags:\n  - name: fileStorage\n    description: A fileStorage service.\n  - name: files\n    description: A files service.\n",
			"canonicalURL": "/github.com/hpi-schul-cloud/schulcloud-server@4e31cf4d98cb961a0a1143c57607e2e6fc67d71c/-/blob/src/services/fileStorage/docs/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/hpi-schul-cloud/schulcloud-server/blob/4e31cf4d98cb961a0a1143c57607e2e6fc67d71c/src/services/fileStorage/docs/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /fileStorage/directories/{id}: delete: parameters: parse parameter \"_id\": parameter MUST contain either a schema property, or a content property"
}