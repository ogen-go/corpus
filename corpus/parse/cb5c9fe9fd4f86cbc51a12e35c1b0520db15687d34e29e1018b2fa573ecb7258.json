{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/losol/eventuras"
		},
		"file": {
			"name": "eventuras-api.v3.yaml",
			"size": 0,
			"path": "docs/openapi2/v3/eventuras-api.v3.yaml",
			"byteSize": 124106,
			"content": "openapi: 3.0.0\ninfo:\n  contact:\n    email: contact@email.com\n    name: Contact Name\n    url: https://losol.github.io/eventuras/openapi/v3/eventuras-api.v3.yaml\n  description: Event Management API.\n  license:\n    name: GPL\n  title: Eventuras API\n  version: 3.0.1\nexternalDocs:\n  description: Generated API HTML\n  url: https://losol.github.io/eventuras/openapi/v3/\nservers:\n- url: https://full.path.to/v3/\nsecurity:\n- bearer: []\npaths:\n  /registrations:\n    get:\n      operationId: getRegistrationsList\n      parameters:\n      - description: Page number.\n        in: query\n        name: page\n        required: false\n        schema:\n          default: 1\n          format: int32\n          type: integer\n      - description: Page size.\n        in: query\n        name: count\n        required: false\n        schema:\n          default: 100\n          format: int32\n          type: integer\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/RegistrationPagedList'\n                type: array\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Missing or invalid request parameters.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access token is missing or invalid.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: Get registrations list.\n      tags:\n      - registrations\n    post:\n      operationId: createNewRegistration\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NewRegistrationDto'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegistrationDto'\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Missing or invalid request parameters.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access token is missing or invalid.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access forbidden.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: Create new registration.\n      tags:\n      - registrations\n  /registrations/me/{eventId}:\n    post:\n      description: Alias for POST /registrations.\n      operationId: selfRegistration\n      parameters:\n      - description: |\n          Automatically create order containing all the mandatory products.\n        in: query\n        name: createOrder\n        required: false\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegistrationDto'\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Missing or invalid request parameters.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access token is missing or invalid.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access forbidden.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: Self registration.\n      tags:\n      - registrations\n  /registrations/{id}:\n    delete:\n      operationId: cancelRegistration\n      parameters:\n      - description: Registration ID.\n        in: path\n        name: id\n        required: true\n        schema:\n          format: int32\n          type: integer\n      responses:\n        \"200\":\n          description: Registration cancelled.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access token is missing or invalid.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access forbidden.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The requested resource not found.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: Cancel registration.\n      tags:\n      - registrations\n    put:\n      operationId: updateRegistration\n      parameters:\n      - description: Registration ID.\n        in: path\n        name: id\n        required: true\n        schema:\n          format: int32\n          type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RegistrationFormDto'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegistrationDto'\n          description: Registration updated.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access token is missing or invalid.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access forbidden.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The requested resource not found.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: Update registration.\n      tags:\n      - registrations\n  /registrations/{id}/orders:\n    get:\n      operationId: getRegistrationOrdersList\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/RegistrationOrderDto'\n                type: array\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Missing or invalid request parameters.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: Get registration orders list.\n      tags:\n      - registrations\n    post:\n      operationId: addOrderToRegistration\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NewRegistrationOrderDto'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegistrationOrderDto'\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Missing or invalid request parameters.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access token is missing or invalid.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access forbidden.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The requested resource not found.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: Add order to registration.\n      tags:\n      - registrations\n  /registrations/{id}/certificate/send:\n    post:\n      operationId: sendCertificateForRegistration\n      parameters:\n      - description: Registration ID.\n        in: path\n        name: id\n        required: true\n        schema:\n          format: int32\n          type: integer\n      responses:\n        \"200\":\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Missing or invalid request parameters.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access token is missing or invalid.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access forbidden.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The requested resource not found.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: Send certificate for registration.\n      tags:\n      - registrations\n      - certificates\n  /notifications:\n    get:\n      operationId: getNotificationsList\n      parameters:\n      - description: Page number.\n        in: query\n        name: page\n        required: false\n        schema:\n          default: 1\n          format: int32\n          type: integer\n      - description: Page size.\n        in: query\n        name: count\n        required: false\n        schema:\n          default: 100\n          format: int32\n          type: integer\n      - description: Filter by event ID.\n        in: query\n        name: eventId\n        required: false\n        schema:\n          format: int32\n          type: integer\n      - description: Filter by product ID.\n        in: query\n        name: productId\n        required: false\n        schema:\n          format: int32\n          type: integer\n      - description: Filter by notification status.\n        in: query\n        name: status\n        schema:\n          type: string\n      - description: Filter by notification type (`sms` / `email`).\n        in: query\n        name: type\n        schema:\n          $ref: '#/components/schemas/NotificationType'\n      - description: Filter by recipient ID.\n        in: query\n        name: recipientUserId\n        required: false\n        schema:\n          type: string\n      - description: Notifications list order.\n        in: query\n        name: order\n        required: false\n        schema:\n          enum:\n          - created\n          - statusUpdated\n          type: string\n      - description: Whether to apply descending sorting.\n        in: query\n        name: desc\n        required: false\n        schema:\n          default: true\n          type: boolean\n      - description: |\n          Whether to include notification statistics into the response.\n        in: query\n        name: includeStatistics\n        required: false\n        schema:\n          default: false\n          type: boolean\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/NotificationsPagedList'\n                type: array\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Missing or invalid request parameters.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access token is missing or invalid.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: Get notifications list.\n      tags:\n      - notifications\n  /notifications/email:\n    post:\n      description: |\n        Create and send new email notification using either event registration filter\n        or explicit email addresses.\n      operationId: createNewEmailNotification\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/EmailNotificationFormDto'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotificationDto'\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Missing or invalid request parameters.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access token is missing or invalid.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access forbidden.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: Create new email notification.\n      tags:\n      - notifications\n  /notifications/sms:\n    post:\n      description: |\n        Create and send new SMS notification using either event registration filter\n        or explicit list of phone numbers.\n      operationId: createNewSMSNotification\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SmsNotificationFormDto'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotificationDto'\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Missing or invalid request parameters.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access token is missing or invalid.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access forbidden.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: Create new SMS notification.\n      tags:\n      - notifications\n  /notifications/{id}:\n    get:\n      operationId: getNotificationById\n      parameters:\n      - description: Notification ID.\n        in: path\n        name: id\n        required: true\n        schema:\n          format: int32\n          type: integer\n      - description: |\n          Whether to include notification statistics into the response.\n        in: query\n        name: includeStatistics\n        required: false\n        schema:\n          default: false\n          type: boolean\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotificationDto'\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access token is missing or invalid.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access forbidden.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The requested resource not found.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: Get notification info by id.\n      tags:\n      - notifications\n  /notifications/{id}/recipients:\n    get:\n      operationId: getNotificationRecipientList\n      parameters:\n      - description: Notification ID.\n        in: path\n        name: id\n        required: true\n        schema:\n          format: int32\n          type: integer\n      - description: Page number.\n        in: query\n        name: page\n        required: false\n        schema:\n          default: 1\n          format: int32\n          type: integer\n      - description: Page size.\n        in: query\n        name: count\n        required: false\n        schema:\n          default: 100\n          format: int32\n          type: integer\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/NotificationRecipientsPagedList'\n                type: array\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Missing or invalid request parameters.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The requested resource not found.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: Get notification recipient list.\n      tags:\n      - notifications\n  /users:\n    get:\n      operationId: getUsers\n      parameters:\n      - description: Page number.\n        in: query\n        name: page\n        required: false\n        schema:\n          default: 1\n          format: int32\n          type: integer\n      - description: Page size.\n        in: query\n        name: count\n        required: false\n        schema:\n          default: 100\n          format: int32\n          type: integer\n      - description: |\n          Search users by name, email, or phone.\n        in: query\n        name: query\n        required: false\n        schema:\n          type: string\n      - description: |\n          `name`, `email` or `phone`. Default is `name`.\n        in: query\n        name: order\n        required: false\n        schema:\n          type: string\n      - description: |\n          Whether to apply descending sort.\n          Applicable to `order` param only.\n          Default is `false`.\n        in: query\n        name: descending\n        required: false\n        schema:\n          type: boolean\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/UsersPagedList'\n                type: array\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Missing or invalid request parameters.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access token is missing or invalid.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: Get accessible users list.\n      tags:\n      - users\n    post:\n      description: |\n        Accessible to admins only.\n        Org admin can only create members of the own org.\n      operationId: createNewUser\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NewUserDto'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserDto'\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Missing or invalid request parameters.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access token is missing or invalid.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access forbidden.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: Create new user.\n      tags:\n      - users\n  /users/me:\n    get:\n      operationId: getOwnProfile\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserDto'\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access token is missing or invalid.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The requested resource not found.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: Get own profile.\n      tags:\n      - users\n  /users/{id}:\n    get:\n      operationId: getUserById\n      parameters:\n      - description: User ID.\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserDto'\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access token is missing or invalid.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access forbidden.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The requested resource not found.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: Get user by id.\n      tags:\n      - users\n    put:\n      operationId: updateUser\n      parameters:\n      - description: User ID.\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserFormDto'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserDto'\n          description: User updated.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access token is missing or invalid.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access forbidden.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The requested resource not found.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: Update user profile.\n      tags:\n      - users\n  /events:\n    get:\n      operationId: getEvents\n      parameters:\n      - description: Page number.\n        in: query\n        name: page\n        required: false\n        schema:\n          default: 1\n          format: int32\n          type: integer\n      - description: Page size.\n        in: query\n        name: count\n        required: false\n        schema:\n          default: 100\n          format: int32\n          type: integer\n      - description: Event type.\n        in: query\n        name: type\n        required: false\n        schema:\n          $ref: '#/components/schemas/EventType'\n      - description: Event start date (inclusive).\n        in: query\n        name: start\n        required: false\n        schema:\n          format: date\n          type: string\n      - description: Event end date (inclusive).\n        in: query\n        name: end\n        required: false\n        schema:\n          format: date\n          type: string\n      - description: |\n          Event period matching kind.\n          Applies to `start` and `end` filter params.\n          Use `match` (default) for exact match, `intersect` for partial event dates intersection, and `contain` for the whole event period inclusion check.\n        in: query\n        name: period\n        required: false\n        schema:\n          type: string\n      - description: |\n          Organization id.\n        in: query\n        name: organizationId\n        required: false\n        schema:\n          format: int32\n          type: integer\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/EventsPagedList'\n                type: array\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Missing or invalid request parameters.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access token is missing or invalid.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: List events.\n      tags:\n      - events\n    post:\n      description: Available for admins only.\n      operationId: createNewEvent\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/EventFormDto'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EventDto'\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Missing or invalid request parameters.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access token is missing or invalid.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access forbidden.\n        \"409\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Data conflict.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: Create new event.\n      tags:\n      - events\n  /events/{id}:\n    delete:\n      operationId: deleteEvent\n      parameters:\n      - description: Event ID.\n        in: path\n        name: id\n        required: true\n        schema:\n          format: int32\n          type: integer\n      responses:\n        \"200\":\n          description: Event deleted.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access token is missing or invalid.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access forbidden.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: Delete event.\n      tags:\n      - events\n    get:\n      operationId: getEventById\n      parameters:\n      - description: Event ID.\n        in: path\n        name: id\n        required: true\n        schema:\n          format: int32\n          type: integer\n      responses:\n        \"200\":\n          content:\n            schema: {}\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access token is missing or invalid.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access forbidden.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The requested resource not found.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: Get event by id.\n      tags:\n      - events\n    put:\n      operationId: updateEvent\n      parameters:\n      - description: Event ID.\n        in: path\n        name: id\n        required: true\n        schema:\n          format: int32\n          type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/EventFormDto'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EventDto'\n          description: Event updated.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access token is missing or invalid.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access forbidden.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The requested resource not found.\n        \"409\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Data conflict.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: Update event.\n      tags:\n      - events\n  /events/{id}/products:\n    get:\n      operationId: getEventProductsList\n      parameters:\n      - description: Event ID.\n        in: path\n        name: id\n        required: true\n        schema:\n          format: int32\n          type: integer\n      - description: |\n          Product visibility level.\n          Set to `collection` to include all products which visibility is set to `event` or `collection`,\n          or set to `event` (default) to only return products visible within a single event.\n        in: query\n        name: visibility\n        required: false\n        schema:\n          $ref: '#/components/schemas/ProductVisibility'\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/ProductDto'\n                type: array\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Missing or invalid request parameters.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The requested resource not found.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: Get event products list.\n      tags:\n      - events\n      - products\n    post:\n      operationId: addProductToEvent\n      parameters:\n      - description: Event ID.\n        in: path\n        name: id\n        required: true\n        schema:\n          format: int32\n          type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NewProductDto'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProductDto'\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Missing or invalid request parameters.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access token is missing or invalid.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access forbidden.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The requested resource not found.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: Add product to event.\n      tags:\n      - events\n      - products\n  /events/{id}/products/{productId}:\n    delete:\n      operationId: archiveProduct\n      parameters:\n      - description: Event ID.\n        in: path\n        name: id\n        required: true\n        schema:\n          format: int32\n          type: integer\n      - description: Product ID.\n        in: path\n        name: productId\n        required: true\n        schema:\n          format: int32\n          type: integer\n      responses:\n        \"200\":\n          description: Product archived.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access token is missing or invalid.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access forbidden.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The requested resource not found.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: Archive product.\n      tags:\n      - events\n      - products\n  /events/{id}/products/{productId}/variants:\n    get:\n      operationId: getProductVariantsList\n      parameters:\n      - description: Event ID.\n        in: path\n        name: id\n        required: true\n        schema:\n          format: int32\n          type: integer\n      - description: Product ID.\n        in: path\n        name: productId\n        required: true\n        schema:\n          format: int32\n          type: integer\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/ProductVariantDto'\n                type: array\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Missing or invalid request parameters.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The requested resource not found.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: Get product variants list.\n      tags:\n      - events\n      - products\n    post:\n      operationId: addVariantToProduct\n      parameters:\n      - description: Event ID.\n        in: path\n        name: id\n        required: true\n        schema:\n          format: int32\n          type: integer\n      - description: Product ID.\n        in: path\n        name: productId\n        required: true\n        schema:\n          format: int32\n          type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NewProductVariantDto'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProductVariantDto'\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Missing or invalid request parameters.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access token is missing or invalid.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access forbidden.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The requested resource not found.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: Add variant to product.\n      tags:\n      - events\n      - products\n  /events/{id}/products/{productId}/variants/{variantId}:\n    delete:\n      operationId: archiveProductVariant\n      parameters:\n      - description: Event ID.\n        in: path\n        name: id\n        required: true\n        schema:\n          format: int32\n          type: integer\n      - description: Product ID.\n        in: path\n        name: productId\n        required: true\n        schema:\n          format: int32\n          type: integer\n      - description: Product variant ID.\n        in: path\n        name: variantId\n        required: true\n        schema:\n          format: int32\n          type: integer\n      responses:\n        \"200\":\n          description: Product variant archived.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access token is missing or invalid.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access forbidden.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The requested resource not found.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: Archive product variant.\n      tags:\n      - events\n      - products\n  /events/collections:\n    get:\n      operationId: getEventCollectionsList\n      parameters:\n      - description: Event ID.\n        in: path\n        name: id\n        required: true\n        schema:\n          format: int32\n          type: integer\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/EventCollectionDto'\n                type: array\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Missing or invalid request parameters.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access token is missing or invalid.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access forbidden.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The requested resource not found.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: Get event collections list.\n      tags:\n      - events\n      - collections\n    post:\n      operationId: createNewEventCollection\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/EventCollectionDto'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EventCollectionDto'\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Missing or invalid request parameters.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access token is missing or invalid.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access forbidden.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: Create new event collection.\n      tags:\n      - events\n      - collections\n  /events/collections/{id}:\n    delete:\n      operationId: archiveEventCollection\n      parameters:\n      - description: Event collection ID.\n        in: path\n        name: id\n        required: true\n        schema:\n          format: int32\n          type: integer\n      responses:\n        \"200\":\n          description: Event collection archived.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access token is missing or invalid.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access forbidden.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The requested resource not found.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: Archive event collection.\n      tags:\n      - events\n      - collections\n    get:\n      operationId: getEventCollectionById\n      parameters:\n      - description: Event collection ID.\n        in: path\n        name: id\n        required: true\n        schema:\n          format: int32\n          type: integer\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EventCollectionDto'\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access token is missing or invalid.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access forbidden.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The requested resource not found.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: Get event collection by id.\n      tags:\n      - events\n      - collections\n    put:\n      operationId: updateEventCollection\n      parameters:\n      - description: Event collection ID.\n        in: path\n        name: id\n        required: true\n        schema:\n          format: int32\n          type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/EventCollectionDto'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EventCollectionDto'\n          description: Event collection updated.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access token is missing or invalid.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access forbidden.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The requested resource not found.\n        \"409\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Data conflict.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: Update event collection.\n      tags:\n      - events\n      - collections\n  /events/{id}/collections/{collectionId}:\n    delete:\n      operationId: removeEventFromCollection\n      parameters:\n      - description: Event ID.\n        in: path\n        name: id\n        required: true\n        schema:\n          format: int32\n          type: integer\n      - description: Event collection ID.\n        in: path\n        name: collectionId\n        required: true\n        schema:\n          format: int32\n          type: integer\n      responses:\n        \"200\":\n          description: Event removed from collection.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access token is missing or invalid.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access forbidden.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The requested resource not found.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: Remove event from collection.\n      tags:\n      - events\n      - collections\n    put:\n      operationId: addEventToCollection\n      parameters:\n      - description: Event ID.\n        in: path\n        name: id\n        required: true\n        schema:\n          format: int32\n          type: integer\n      - description: Event collection ID.\n        in: path\n        name: collectionId\n        required: true\n        schema:\n          format: int32\n          type: integer\n      responses:\n        \"200\":\n          description: Added.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access token is missing or invalid.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access forbidden.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The requested resource not found.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: Add event into collection.\n      tags:\n      - events\n      - collections\n  /events/{id}/certificates:\n    get:\n      operationId: getEventCertificates\n      parameters:\n      - description: Event ID.\n        in: path\n        name: id\n        required: true\n        schema:\n          format: int32\n          type: integer\n      - description: Page number.\n        in: query\n        name: page\n        required: false\n        schema:\n          default: 1\n          format: int32\n          type: integer\n      - description: Page size.\n        in: query\n        name: count\n        required: false\n        schema:\n          default: 100\n          format: int32\n          type: integer\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/CertificateDto'\n                type: array\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Missing or invalid request parameters.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access token is missing or invalid.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access forbidden.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The requested resource not found.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: Get event certificates list.\n      tags:\n      - events\n      - certificates\n  /events/{id}/certificates/preview:\n    get:\n      operationId: previewCertificateForEvent\n      parameters:\n      - description: Event ID.\n        in: path\n        name: id\n        required: true\n        schema:\n          format: int32\n          type: integer\n      responses:\n        \"200\":\n          content:\n            text/html:\n              schema:\n                type: string\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access token is missing or invalid.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access forbidden.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The requested resource not found.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: Preview certificate for event.\n      tags:\n      - events\n      - certificates\n  /events/{id}/certificates/issue:\n    post:\n      operationId: issueCertificatesForEvent\n      parameters:\n      - description: Event ID.\n        in: path\n        name: id\n        required: true\n        schema:\n          format: int32\n          type: integer\n      - description: |\n          Whether to send certificates to the recipients.\n        in: query\n        name: send\n        required: false\n        schema:\n          default: true\n          type: boolean\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CertificateStatisticsDto'\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Missing or invalid request parameters.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access token is missing or invalid.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access forbidden.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The requested resource not found.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: Issue certificates for event.\n      tags:\n      - events\n      - certificates\n  /events/{id}/certificates/update:\n    post:\n      operationId: updateCertificatesForEvent\n      parameters:\n      - description: Event ID.\n        in: path\n        name: id\n        required: true\n        schema:\n          format: int32\n          type: integer\n      - description: |\n          Whether to send certificates to the recipients.\n        in: query\n        name: send\n        required: false\n        schema:\n          default: true\n          type: boolean\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CertificateStatisticsDto'\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Missing or invalid request parameters.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access token is missing or invalid.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access forbidden.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The requested resource not found.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: Update certificates for event.\n      tags:\n      - events\n      - certificates\n  /certificates/{id}:\n    get:\n      operationId: getCertificateById\n      parameters:\n      - description: Certificate ID.\n        in: path\n        name: id\n        required: true\n        schema:\n          format: int32\n          type: integer\n      - description: |\n          Force response format (`json` | `pdf` | `html`).\n        in: query\n        name: format\n        required: false\n        schema:\n          default: json\n          enum:\n          - json\n          - pdf\n          - html\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CertificateDto'\n            application/pdf:\n              schema:\n                format: binary\n                type: string\n            text/html:\n              schema:\n                type: string\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access token is missing or invalid.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access forbidden.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The requested resource not found.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: Get certificate info by id.\n      tags:\n      - certificates\n  /orders:\n    get:\n      operationId: getOrders\n      parameters:\n      - description: Page number.\n        in: query\n        name: page\n        required: false\n        schema:\n          default: 1\n          format: int32\n          type: integer\n      - description: Page size.\n        in: query\n        name: count\n        required: false\n        schema:\n          default: 100\n          format: int32\n          type: integer\n      - description: |\n          Search orders by userId.\n        in: query\n        name: userId\n        required: false\n        schema:\n          type: string\n      - description: |\n          Search orders by registrationId.\n        in: query\n        name: registrationId\n        required: false\n        schema:\n          format: int32\n          type: integer\n      - description: |\n          Search orders by eventId.\n        in: query\n        name: eventId\n        required: false\n        schema:\n          format: int32\n          type: integer\n      - in: query\n        name: status\n        required: false\n        schema:\n          $ref: '#/components/schemas/OrderStatus'\n      - description: |\n          Whether to include user information into the response.\n        in: query\n        name: includeUser\n        required: false\n        schema:\n          default: false\n          type: boolean\n      - description: |\n          Whether to include registration information into the response.\n        in: query\n        name: includeRegistration\n        required: false\n        schema:\n          default: false\n          type: boolean\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/OrdersPagedList'\n                type: array\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Missing or invalid request parameters.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access token is missing or invalid.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: Get accessible orders list.\n      tags:\n      - orders\n  /orders/{id}:\n    delete:\n      operationId: cancelOrder\n      parameters:\n      - description: Order ID.\n        in: path\n        name: id\n        required: true\n        schema:\n          format: int32\n          type: integer\n      responses:\n        \"200\":\n          description: Order cancelled\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access token is missing or invalid.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access forbidden.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The requested resource not found.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: Cancel order.\n      tags:\n      - orders\n    get:\n      operationId: getOrderById\n      parameters:\n      - description: Order ID.\n        in: path\n        name: id\n        required: true\n        schema:\n          format: int32\n          type: integer\n      - description: |\n          Whether to include user information into the response.\n        in: query\n        name: includeUser\n        required: false\n        schema:\n          default: false\n          type: boolean\n      - description: |\n          Whether to include registration information into the response.\n        in: query\n        name: includeRegistration\n        required: false\n        schema:\n          default: false\n          type: boolean\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OrderDto'\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access token is missing or invalid.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access forbidden.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The requested resource not found.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: Get order by id.\n      tags:\n      - orders\n    put:\n      operationId: updateOrder\n      parameters:\n      - description: Order ID.\n        in: path\n        name: id\n        required: true\n        schema:\n          format: int32\n          type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/OrderUpdateRequestDto'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OrderDto'\n          description: Order updated.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access token is missing or invalid.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access forbidden.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The requested resource not found.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: Update order.\n      tags:\n      - orders\n  /organizations:\n    get:\n      operationId: getOrganizationsList\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/OrganizationDto'\n                type: array\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Missing or invalid request parameters.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access token is missing or invalid.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: Get organizations list (system admin only).\n      tags:\n      - organizations\n    post:\n      operationId: createNewOrganization\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/OrganizationFormDto'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OrganizationDto'\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Missing or invalid request parameters.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access token is missing or invalid.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access forbidden.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: Create new organization (system admin only).\n      tags:\n      - organizations\n  /organizations/{id}:\n    delete:\n      operationId: deleteOrganization\n      parameters:\n      - description: Organization ID.\n        in: path\n        name: id\n        required: true\n        schema:\n          format: int32\n          type: integer\n      responses:\n        \"200\":\n          description: Organization deleted.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access token is missing or invalid.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access forbidden.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The requested resource not found.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: Delete organization (system admin only).\n      tags:\n      - organizations\n    put:\n      operationId: updateOrganization\n      parameters:\n      - description: Organization ID.\n        in: path\n        name: id\n        required: true\n        schema:\n          format: int32\n          type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/OrganizationFormDto'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OrganizationDto'\n          description: Registration updated.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access token is missing or invalid.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access forbidden.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The requested resource not found.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: Update organization (system admin only).\n      tags:\n      - organizations\n  /organizations/{id}/members:\n    delete:\n      operationId: removeMemberFromOrganization\n      parameters:\n      - description: Organization ID.\n        in: path\n        name: id\n        required: true\n        schema:\n          format: int32\n          type: integer\n      responses:\n        \"200\":\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Missing or invalid request parameters.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access token is missing or invalid.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access forbidden.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: Remove member from organization.\n      tags:\n      - organizations\n    put:\n      operationId: addMemberToOrganization\n      parameters:\n      - description: Organization ID.\n        in: path\n        name: id\n        required: true\n        schema:\n          format: int32\n          type: integer\n      responses:\n        \"200\":\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Missing or invalid request parameters.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access token is missing or invalid.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access forbidden.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: Add member to organization.\n      tags:\n      - organizations\n  /organizations/{id}/members/{memberId}/roles:\n    delete:\n      operationId: removeMemberFromOrganization\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OrganizationMemberRoleList'\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Missing or invalid request parameters.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access token is missing or invalid.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access forbidden.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: Remove org member role.\n      tags:\n      - organizations\n    get:\n      operationId: getOrganizationMemberRoles\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OrganizationMemberRoleList'\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Missing or invalid request parameters.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access token is missing or invalid.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: List org member roles.\n      tags:\n      - organizations\n    post:\n      operationId: addOrganizationMemberRole\n      requestBody:\n        $ref: '#/components/requestBodies/inline_object'\n        content:\n          application/json:\n            schema:\n              properties:\n                role:\n                  type: string\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OrganizationMemberRoleList'\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Missing or invalid request parameters.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access token is missing or invalid.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access forbidden.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: Add org member role.\n      tags:\n      - organizations\n  /organizations/{id}/settings:\n    get:\n      operationId: getOrganizationSettingsList\n      parameters:\n      - description: Organization ID.\n        in: path\n        name: id\n        required: true\n        schema:\n          format: int32\n          type: integer\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/OrganizationSettingDto'\n                type: array\n          description: OK\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access token is missing or invalid.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The requested resource not found.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access forbidden.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: Get organization settings list.\n      tags:\n      - organizations\n      - settings\n    post:\n      operationId: batchUpdateOrganizationSettings\n      parameters:\n      - description: Organization ID.\n        in: path\n        name: id\n        required: true\n        schema:\n          format: int32\n          type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              items:\n                $ref: '#/components/schemas/OrganizationSettingValueDto'\n              type: array\n        description: Array of organization settings key value pairs.\n        required: true\n      responses:\n        \"200\":\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Missing or invalid request parameters.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access token is missing or invalid.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The requested resource not found.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access forbidden.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: Update organization settings in batch.\n      tags:\n      - organizations\n      - settings\n    put:\n      operationId: updateOrganizationSettings\n      parameters:\n      - description: Organization ID.\n        in: path\n        name: id\n        required: true\n        schema:\n          format: int32\n          type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/OrganizationSettingValueDto'\n        required: true\n      responses:\n        \"200\":\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Missing or invalid request parameters.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access token is missing or invalid.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The requested resource not found.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Access forbidden.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected server error.\n      summary: Update organization settings.\n      tags:\n      - organizations\n      - settings\ncomponents:\n  parameters:\n    pageNumber:\n      description: Page number.\n      explode: true\n      in: query\n      name: page\n      required: false\n      schema:\n        default: 1\n        format: int32\n        type: integer\n      style: form\n    pageSize:\n      description: Page size.\n      explode: true\n      in: query\n      name: count\n      required: false\n      schema:\n        default: 100\n        format: int32\n        type: integer\n      style: form\n  requestBodies:\n    inline_object:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/inline_object'\n      required: true\n  responses:\n    NotFound:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n      description: The requested resource not found.\n    InvalidRequestError:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n      description: Missing or invalid request parameters.\n    UnauthorizedError:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n      description: Access token is missing or invalid.\n    ForbiddenError:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n      description: Access forbidden.\n    Conflict:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n      description: Data conflict.\n    InternalServerError:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n      description: Unexpected server error.\n  schemas:\n    Error:\n      example:\n        message: Phone and password don't match\n        code: password-mismatch\n        fields:\n          password:\n          - Invalid password\n      properties:\n        message:\n          description: User-friendly error message.\n          type: string\n        code:\n          description: Machine-friendly error code.\n          type: string\n        fields:\n          items:\n            additionalProperties:\n              items:\n                type: string\n              type: array\n            type: object\n          type: array\n      required:\n      - message\n      title: Common error response structure.\n      type: object\n    RegistrationPagedList:\n      example:\n        page: 1\n        size: 10\n        total: 2\n        pages: 1\n        data:\n        - registrationId: 1099\n          eventId: 45\n          userId: 3fa94776-5fc1-11eb-b353-448a5b42a569\n          status: verified\n          type: participant\n          notes: Test\n        - registrationId: 1346\n          eventId: 674\n          userId: 69056ce6-5fc4-11eb-b474-448a5b42a569\n          status: verified\n          type: lecturer\n          notes: Another test\n      properties:\n        page:\n          description: Page number.\n          format: int32\n          type: integer\n        count:\n          description: Page size.\n          format: int32\n          type: integer\n        total:\n          description: Total items.\n          format: int32\n          type: integer\n        pages:\n          description: Total pages.\n          format: int32\n          type: integer\n        data:\n          items:\n            $ref: '#/components/schemas/RegistrationDto'\n          type: array\n      required:\n      - count\n      - data\n      - page\n      - pages\n      - total\n      title: Registration list with paging.\n      type: object\n    NewRegistrationDto:\n      allOf:\n      - $ref: '#/components/schemas/RegistrationFormDto'\n      - $ref: '#/components/schemas/New_registration_specific_properties'\n      example:\n        userId: 3fa94776-5fc1-11eb-b353-448a5b42a569\n        eventId: 643\n        customer:\n          name: John Doe\n          email: test@email.com\n          vatNumber: 1010\n          invoiceReference: 200\n          zip: 1234\n          city: Oslo\n          country: Norway\n        status: verified\n        type: participant\n        notes: Testing\n      title: New registration info\n    RegistrationDto:\n      example:\n        registrationId: 1099\n        eventId: 45\n        userId: 3fa94776-5fc1-11eb-b353-448a5b42a569\n        status: verified\n        type: participant\n        notes: Test\n      properties:\n        registrationId:\n          description: Registration ID.\n          format: int32\n          type: integer\n        eventId:\n          description: Event ID.\n          format: int32\n          type: integer\n        userId:\n          description: Registered user ID.\n          type: string\n        status:\n          $ref: '#/components/schemas/RegistrationStatus'\n        type:\n          $ref: '#/components/schemas/RegistrationType'\n        notes:\n          type: string\n      required:\n      - eventId\n      - registrationId\n      - status\n      - type\n      - userId\n      title: Registration information.\n      type: object\n    RegistrationFormDto:\n      description: |\n        `customer`, `status`, `type` and `notes` can be set by admin only.\n      example:\n        customer:\n          name: John Doe\n          email: test@email.com\n          vatNumber: 1010\n          invoiceReference: 200\n          zip: 1234\n          city: Oslo\n          country: Norway\n        status: verified\n        type: participant\n        notes: Testing\n      properties:\n        customer:\n          $ref: '#/components/schemas/RegistrationCustomerInfoDto'\n        status:\n          $ref: '#/components/schemas/RegistrationStatus'\n        type:\n          $ref: '#/components/schemas/RegistrationType'\n        notes:\n          description: Additional notes. Can be managed by admin only.\n          type: string\n      title: Registration data.\n      type: object\n    RegistrationOrderDto:\n      example:\n        orderId: 10001\n        items:\n        - product:\n            productId: 1001\n            name: Test Product\n            description: Test\n            more: More on this product...\n            price: 19.99\n            vatPercent: 17\n          productVariant:\n            productVariantId: 34\n            name: Red Coloured Test Product\n            description: Some variant description...\n            price: 21.99\n          quantity: 1\n        - product:\n            productId: 2001\n            name: Test Product 2\n            description: Test 2\n            more: More on this product...\n            price: 29.99\n            vatPercent: 17\n          quantity: 3\n      properties:\n        orderId:\n          description: Order ID.\n          format: int32\n          type: integer\n        items:\n          items:\n            $ref: '#/components/schemas/RegistrationOrderLineDto'\n          type: array\n      required:\n      - items\n      - orderId\n      title: Order information.\n      type: object\n    NewRegistrationOrderDto:\n      example:\n        items:\n        - productId: 1001\n          productVariantId: 34\n          quantity: 1\n        - productId: 3244\n          quantity: 3\n      properties:\n        items:\n          items:\n            $ref: '#/components/schemas/NewRegistrationOrderItemDto'\n          type: array\n      required:\n      - items\n      title: New order data.\n      type: object\n    NotificationType:\n      enum:\n      - email\n      - sms\n      title: Notification type enum (`email` | `sms`).\n      type: string\n    NotificationsPagedList:\n      example:\n        page: 1\n        size: 10\n        total: 2\n        pages: 1\n        data:\n        - notificationId: 101\n          created: 2021-11-01 13:22:00\n          type: sms\n          status: sent\n          message: Hi\n          statusUpdated: 2021-11-01 13:22:10\n        - notificationId: 10002\n          created: 2020-01-01 11:22:33\n          type: email\n          message: Test\n          status: queued\n          statusUpdated: 2020-01-01 22:33:44\n          eventId: 1001\n          productId: 30\n          organizationId: 1\n      properties:\n        page:\n          description: Page number.\n          format: int32\n          type: integer\n        count:\n          description: Page size.\n          format: int32\n          type: integer\n        total:\n          description: Total items.\n          format: int32\n          type: integer\n        pages:\n          description: Total pages.\n          format: int32\n          type: integer\n        data:\n          items:\n            $ref: '#/components/schemas/NotificationDto'\n          type: array\n      required:\n      - count\n      - data\n      - page\n      - pages\n      - total\n      title: Notifications list with paging.\n      type: object\n    EmailNotificationFormDto:\n      example:\n        eventParticipants:\n          eventId: 0\n          productId: 6\n          registrationTypes:\n          - null\n          - null\n          registrationStatuses:\n          - null\n          - null\n        bodyMarkdown: bodyMarkdown\n        subject: subject\n        recipients:\n        - recipients\n        - recipients\n      properties:\n        subject:\n          description: Email subject.\n          type: string\n        bodyMarkdown:\n          description: Email body (will be transformed to HTML before send).\n          type: string\n        recipients:\n          description: List of email addresses.\n          items:\n            description: Email address.\n            type: string\n          type: array\n        eventParticipants:\n          $ref: '#/components/schemas/EventParticipantsFilterDto'\n      required:\n      - bodyMarkdown\n      - subject\n      title: New email notification info\n      type: object\n    NotificationDto:\n      example:\n        organizationId: 6\n        eventId: 1\n        productId: 5\n        created: 2000-01-23T04:56:07.000+00:00\n        notificationId: 0\n        message: message\n        statusUpdated: 2000-01-23T04:56:07.000+00:00\n        statistics:\n          recipients: 5\n          sent: 2\n          errors: 7\n      properties:\n        notificationId:\n          description: Notification identifier.\n          format: int32\n          type: integer\n        organizationId:\n          description: Organization identifier the notification is related to.\n          format: int32\n          type: integer\n        eventId:\n          description: Event identifier the notification is related to.\n          format: int32\n          type: integer\n        productId:\n          description: Product identifier the notification is related to.\n          format: int32\n          type: integer\n        message:\n          description: Notification message text.\n          type: string\n        created:\n          description: Notification creation date and time.\n          format: date-time\n          type: string\n        status:\n          $ref: '#/components/schemas/NotificationStatus'\n        type:\n          $ref: '#/components/schemas/NotificationType'\n        statusUpdated:\n          description: Last status update date and time.\n          format: date-time\n          type: string\n        statistics:\n          $ref: '#/components/schemas/NotificationStatisticsDto'\n      required:\n      - created\n      - message\n      - notificationId\n      - status\n      - statusUpdated\n      - type\n      title: Notification info\n      type: object\n    SmsNotificationFormDto:\n      example:\n        eventParticipants:\n          eventId: 0\n          productId: 6\n          registrationTypes:\n          - null\n          - null\n          registrationStatuses:\n          - null\n          - null\n        recipients:\n        - recipients\n        - recipients\n        message: message\n      properties:\n        message:\n          description: SMS text.\n          type: string\n        recipients:\n          description: List of phone numbers.\n          items:\n            description: Phone number.\n            type: string\n          type: array\n        eventParticipants:\n          $ref: '#/components/schemas/EventParticipantsFilterDto'\n      required:\n      - mssage\n      title: New SMS notification info\n      type: object\n    NotificationRecipientsPagedList:\n      example:\n        page: 1\n        size: 10\n        total: 2\n        pages: 1\n        data:\n        - notificationId: 101\n          created: 2021-11-01 13:22:00\n          type: sms\n          status: sent\n          message: Hi\n          statusUpdated: 2021-11-01 13:22:10\n        - notificationId: 10002\n          created: 2020-01-01 11:22:33\n          type: email\n          message: Test\n          status: queued\n          statusUpdated: 2020-01-01 22:33:44\n          eventId: 1001\n          productId: 30\n          organizationId: 1\n      properties:\n        page:\n          description: Page number.\n          format: int32\n          type: integer\n        count:\n          description: Page size.\n          format: int32\n          type: integer\n        total:\n          description: Total items.\n          format: int32\n          type: integer\n        pages:\n          description: Total pages.\n          format: int32\n          type: integer\n        data:\n          items:\n            $ref: '#/components/schemas/NotificationRecipientDto'\n          type: array\n      required:\n      - count\n      - data\n      - page\n      - pages\n      - total\n      title: Notifications list with paging.\n      type: object\n    UsersPagedList:\n      example:\n        page: 1\n        size: 10\n        total: 2\n        pages: 1\n        data:\n        - id: 3fa94776-5fc1-11eb-b353-448a5b42a569\n          email: test@email.com\n          name: Test User\n          phoneNumber: +11111111111\n        - id: 69056ce6-5fc4-11eb-b474-448a5b42a569\n          email: test2@email.com\n          name: Test User 2\n      properties:\n        page:\n          description: Page number.\n          format: int32\n          type: integer\n        count:\n          description: Page size.\n          format: int32\n          type: integer\n        total:\n          description: Total items.\n          format: int32\n          type: integer\n        pages:\n          description: Total pages.\n          format: int32\n          type: integer\n        data:\n          items:\n            $ref: '#/components/schemas/UserDto'\n          type: array\n      required:\n      - count\n      - data\n      - page\n      - pages\n      - total\n      title: User list with paging.\n      type: object\n    NewUserDto:\n      example:\n        email: test@email.com\n        name: John Doe\n        phoneNumber: +11111111111\n      properties:\n        email:\n          format: email\n          type: string\n        name:\n          type: string\n        phoneNumber:\n          type: string\n      required:\n      - email\n      - name\n      title: New user form.\n      type: object\n    UserDto:\n      example:\n        id: 3fa94776-5fc1-11eb-b353-448a5b42a569\n        email: test@email.com\n        name: John Doe\n        phoneNumber: +11111111111\n      properties:\n        id:\n          description: User ID.\n          type: string\n        email:\n          format: email\n          type: string\n        name:\n          type: string\n        phoneNumber:\n          type: string\n      required:\n      - email\n      - id\n      - name\n      title: User info.\n      type: object\n    UserFormDto:\n      example:\n        email: test@email.com\n        name: John Doe\n        phoneNumber: +11111111111\n      properties:\n        email:\n          format: email\n          type: string\n        name:\n          type: string\n        phoneNumber:\n          type: string\n      required:\n      - email\n      - name\n      title: Update user form.\n      type: object\n    EventType:\n      description: |\n        Course = 0,\n        Conference = 1,\n        OnlineCourse = 2,\n        Social = 3,\n        Other = 9\n      title: Event type enum.\n      type: integer\n    EventsPagedList:\n      example:\n        page: 1\n        size: 10\n        total: 2\n        pages: 1\n        data:\n        - id: 10001\n          slug: evt1\n          name: 'Demo Event #1'\n        - id: 10002\n          slug: evt2\n          name: 'Demo Event #2'\n      properties:\n        page:\n          description: Page number.\n          format: int32\n          type: integer\n        count:\n          description: Page size.\n          format: int32\n          type: integer\n        total:\n          description: Total items.\n          format: int32\n          type: integer\n        pages:\n          description: Total pages.\n          format: int32\n          type: integer\n        data:\n          items:\n            $ref: '#/components/schemas/EventDto'\n          type: array\n      required:\n      - count\n      - data\n      - page\n      - pages\n      - total\n      title: Event list with paging.\n      type: object\n    EventFormDto:\n      example:\n        type: 3\n        name: Demo event\n        slug: demo\n        category: Some category\n        description: Some demo event\n        featured: false\n        program: Some program\n        practicalInformation: Some info\n        onDemand: true\n        location:\n        - name: Some demo locaiton\n          address:\n            addressLocality: Oslo\n        startDate: 2021-01-01\n        endDate: 2021-01-10\n        manageRegistrations: true\n      properties:\n        type:\n          description: |\n            Course = 0,\n            Conference = 1,\n            OnlineCourse = 2,\n            Social = 3,\n            Other = 9\n          title: Event type enum.\n          type: integer\n        name:\n          type: string\n        slug:\n          type: string\n        category:\n          type: string\n        description:\n          type: string\n        featured:\n          type: boolean\n        program:\n          type: string\n        practicalInformation:\n          type: string\n        onDemand:\n          type: boolean\n        location:\n          $ref: '#/components/schemas/LocationDto'\n        startDate:\n          format: date\n          type: string\n        endDate:\n          format: date\n          type: string\n        manageRegistrations:\n          type: boolean\n      required:\n      - slug\n      title: Event form data.\n      type: object\n    EventDto:\n      example:\n        id: 10001\n        type: 3\n        name: Demo event\n        slug: demo\n        category: Some category\n        description: Some demo event\n        featured: false\n        program: Some program\n        practicalInformation: Some info\n        onDemand: true\n        location:\n          name: Some demo locaiton\n          address:\n            addressLocality: Oslo\n        startDate: 2021-01-01\n        endDate: 2021-01-10\n        lastRegistrationDate: 2020-11-12\n      properties:\n        id:\n          description: Event ID.\n          format: int32\n          type: integer\n        type:\n          description: |\n            Course = 0,\n            Conference = 1,\n            OnlineCourse = 2,\n            Social = 3,\n            Other = 9\n          title: Event type enum.\n          type: integer\n        name:\n          type: string\n        slug:\n          type: string\n        category:\n          type: string\n        description:\n          type: string\n        featured:\n          type: boolean\n        program:\n          type: string\n        practicalInformation:\n          type: string\n        onDemand:\n          type: boolean\n        location:\n          $ref: '#/components/schemas/LocationDto'\n        startDate:\n          format: date\n          type: string\n        endDate:\n          format: date\n          type: string\n        lastRegistrationDate:\n          format: date\n          type: string\n      required:\n      - id\n      - slug\n      - type\n      title: Event information.\n      type: object\n    ProductVisibility:\n      default: event\n      description: |\n        `event` or `collection`.\n      enum:\n      - event\n      - collection\n      title: Product visibility level.\n      type: string\n    ProductDto:\n      example:\n        productId: 1001\n        name: Test Product\n        description: Test\n        more: More on this product...\n        price: 19.99\n        vatPercent: 17\n        variants:\n        - productVariantId: 34\n          name: Red Coloured Test Product\n          description: Some variant description...\n          price: 21.99\n        - productVariantId: 35\n          name: Green Coloured Test Product\n          description: Some variant description...\n          price: 22.99\n        visibility: event\n      properties:\n        productId:\n          format: int32\n          type: integer\n        name:\n          description: Product name.\n          type: string\n        description:\n          description: Product description.\n          type: string\n        more:\n          description: More information about the product.\n          type: string\n        price:\n          format: float\n          type: number\n        vatPercent:\n          format: float\n          type: number\n        variants:\n          items:\n            $ref: '#/components/schemas/ProductVariantDto'\n          type: array\n        visibility:\n          $ref: '#/components/schemas/ProductVisibility'\n      required:\n      - description\n      - name\n      - price\n      - productId\n      - variants\n      title: Product data.\n      type: object\n    NewProductDto:\n      example:\n        name: Test Product\n        description: Test\n        more: More on this product...\n        price: 19.99\n        vatPercent: 17\n      properties:\n        name:\n          description: Product name.\n          type: string\n        description:\n          description: Product description.\n          type: string\n        more:\n          description: More information about the product.\n          type: string\n        price:\n          format: float\n          type: number\n        vatPercent:\n          format: float\n          type: number\n        visibility:\n          $ref: '#/components/schemas/ProductVisibility'\n      required:\n      - name\n      title: New product form.\n      type: object\n    ProductVariantDto:\n      example:\n        productVariantId: 34\n        name: Red Coloured Test Product\n        description: Some variant description...\n        price: 21.99\n      properties:\n        productVariantId:\n          format: int32\n          type: integer\n        name:\n          description: Product variant name.\n          type: string\n        description:\n          description: Product variant description.\n          type: string\n        price:\n          format: float\n          type: number\n        vatPercent:\n          format: int32\n          type: number\n      required:\n      - description\n      - name\n      - price\n      - productVariantId\n      title: Product variant data.\n      type: object\n    NewProductVariantDto:\n      example:\n        name: Red Coloured Test Product\n        description: Some variant description...\n        price: 21.99\n      properties:\n        name:\n          description: Product variant name.\n          type: string\n        description:\n          description: Product variant description.\n          type: string\n        price:\n          format: float\n          type: number\n        vatPercent:\n          format: int32\n          type: number\n      title: New product variant form.\n      type: object\n    EventCollectionDto:\n      example:\n        id: 10001\n        organizationId: 91\n        name: Demo event collection\n        slug: demo\n        description: Some demo event collection\n        featured: false\n      properties:\n        id:\n          description: Event collection ID.\n          format: int32\n          type: integer\n        organizationId:\n          description: Organization ID.\n          format: int32\n          type: integer\n        name:\n          type: string\n        slug:\n          type: string\n        description:\n          type: string\n        featured:\n          type: boolean\n        featuredImageUrl:\n          type: string\n        featuredImageCaption:\n          type: string\n      required:\n      - name\n      - organizationId\n      title: Event collection information.\n      type: object\n    CertificateDto:\n      example:\n        certificateId: 12380\n        certificateGuid: 7383cefc-7e52-4e69-a044-38356885dd57\n        title: Demo Event\n        description: Some certificate description.\n        comment: Some certificate comment.\n        recipientName: John Doe\n        evidenceDescription: Some evidence description.\n        issuedInCity: Oslo\n        issuingDate: 2021-01-01\n        issuerOrganizationName: Demo Org\n        issuerPersonName: Demo Issuer\n      properties:\n        certificateId:\n          description: Certificate numeric identifier.\n          format: int32\n          type: integer\n        certificateGuid:\n          description: Certificate string identifier.\n          type: string\n        title:\n          description: Certificate title.\n          type: string\n        description:\n          description: Certificate description.\n          type: string\n        comment:\n          description: Certificate comment.\n          type: string\n        recipientName:\n          description: Certificate recipient name.\n          type: string\n        evidenceDescription:\n          description: Certificate evidence description.\n          type: string\n        issuedInCity:\n          description: City name certificate issued in.\n          type: string\n        issuingDate:\n          description: Date certificate issued on.\n          format: date\n          type: string\n        issuerOrganizationName:\n          description: Certificate issuer organization name.\n          type: string\n        issuerOrganizationLogoBase64:\n          description: Certificate issuer organization logo.\n          format: byte\n          type: string\n        issuerPersonName:\n          description: Date certificate issued on.\n          format: date\n          type: string\n        issuerPersonSignatureImageBase64:\n          description: Certificate issuer person signature image.\n          format: byte\n          type: string\n      required:\n      - certificateGuid\n      - certificateId\n      - description\n      - issuedInCity\n      - issuerPersonName\n      - issuingDate\n      - recipientName\n      - title\n      title: Certificate info\n      type: object\n    CertificateStatisticsDto:\n      example:\n        issued: 0\n        updated: 6\n      properties:\n        issued:\n          description: Number of issued certificates.\n          format: int32\n          type: integer\n        updated:\n          description: Number of updated certificates.\n          format: int32\n          type: integer\n      title: Event certificate issuing statistics.\n      type: object\n    OrderStatus:\n      description: |\n        Search orders by status.\n        Can be either `draft`, `verified`, `invoiced`, `cancelled`, or `refunded`.\n      enum:\n      - draft\n      - verified\n      - invoiced\n      - cancelled\n      - refunded\n      title: Order status enum.\n      type: string\n    OrdersPagedList:\n      example:\n        page: 1\n        size: 10\n        total: 2\n        pages: 1\n        data:\n        - orderId: 10001\n          status: verified\n          time: 2017-07-21T17:32:28Z\n          userId: 3fa94776-5fc1-11eb-b353-448a5b42a569\n          registrationId: 1099\n          user:\n            id: 3fa94776-5fc1-11eb-b353-448a5b42a569\n            email: test@email.com\n            name: John Doe\n            phoneNumber: +11111111111\n          registration:\n            registrationId: 1099\n            eventId: 45\n            userId: 3fa94776-5fc1-11eb-b353-448a5b42a569\n            status: verified\n            type: participant\n            notes: Test\n          items:\n          - orderLineId: 103030\n            product:\n              productId: 1001\n              name: Test Product\n              description: Test\n              more: More on this product...\n              price: 19.99\n              vatPercent: 17\n            productVariant:\n              productVariantId: 34\n              name: Red Coloured Test Product\n              description: Some variant description...\n              price: 21.99\n            quantity: 1\n          - orderLineId: 103030\n            product:\n              productId: 2001\n              name: Test Product 2\n              description: Test 2\n              more: More on this product...\n              price: 29.99\n              vatPercent: 17\n            quantity: 3\n      properties:\n        page:\n          description: Page number.\n          format: int32\n          type: integer\n        count:\n          description: Page size.\n          format: int32\n          type: integer\n        total:\n          description: Total items.\n          format: int32\n          type: integer\n        pages:\n          description: Total pages.\n          format: int32\n          type: integer\n        data:\n          items:\n            $ref: '#/components/schemas/OrderDto'\n          type: array\n      required:\n      - count\n      - data\n      - page\n      - pages\n      - total\n      title: User list with paging.\n      type: object\n    OrderDto:\n      example:\n        orderId: 10001\n        status: verified\n        time: 2017-07-21T17:32:28Z\n        userId: 3fa94776-5fc1-11eb-b353-448a5b42a569\n        registrationId: 1099\n        user:\n          id: 3fa94776-5fc1-11eb-b353-448a5b42a569\n          email: test@email.com\n          name: John Doe\n          phoneNumber: +11111111111\n        registration:\n          registrationId: 1099\n          eventId: 45\n          userId: 3fa94776-5fc1-11eb-b353-448a5b42a569\n          status: verified\n          type: participant\n          notes: Test\n        items:\n        - orderLineId: 103030\n          product:\n            productId: 1001\n            name: Test Product\n            description: Test\n            more: More on this product...\n            price: 19.99\n            vatPercent: 17\n          productVariant:\n            productVariantId: 34\n            name: Red Coloured Test Product\n            description: Some variant description...\n            price: 21.99\n          quantity: 1\n        - orderLineId: 103030\n          product:\n            productId: 2001\n            name: Test Product 2\n            description: Test 2\n            more: More on this product...\n            price: 29.99\n            vatPercent: 17\n          quantity: 3\n      properties:\n        orderId:\n          description: Order ID.\n          format: int32\n          type: integer\n        status:\n          $ref: '#/components/schemas/OrderStatus'\n        time:\n          format: date-time\n          type: string\n        userId:\n          description: User ID.\n          type: string\n        registrationId:\n          description: Registration ID.\n          format: int32\n          type: integer\n        user:\n          $ref: '#/components/schemas/UserDto'\n        registration:\n          $ref: '#/components/schemas/OrderRegistrationDto'\n        items:\n          items:\n            $ref: '#/components/schemas/OrderLineDto'\n          type: array\n      required:\n      - items\n      - orderId\n      - registrationId\n      - status\n      - time\n      - userId\n      title: Order information.\n      type: object\n    OrderUpdateRequestDto:\n      example:\n        lines:\n        - productId: 1001\n        - productVariantId: 34\n        - quantity: 1\n      properties:\n        lines:\n          items:\n            $ref: '#/components/schemas/OrderLineUpdateDto'\n          type: array\n      required:\n      - lines\n      title: Order update form.\n      type: object\n    OrganizationDto:\n      example:\n        name: Test org\n      properties:\n        organizationId:\n          description: Organization ID.\n          format: int32\n          type: integer\n        name:\n          type: string\n        description:\n          type: string\n        url:\n          type: string\n        phone:\n          type: string\n        email:\n          type: string\n        logoUrl:\n          type: string\n        løogoBase64:\n          type: string\n      required:\n      - name\n      title: Organization properties.\n      type: object\n    OrganizationFormDto:\n      example:\n        name: Test org\n      properties:\n        name:\n          type: string\n        description:\n          type: string\n        url:\n          type: string\n        phone:\n          type: string\n        email:\n          type: string\n        logoUrl:\n          type: string\n        løogoBase64:\n          type: string\n      required:\n      - name\n      title: Organization data.\n      type: object\n    OrganizationMemberRoleList:\n      items:\n        type: string\n      type: array\n    OrganizationSettingDto:\n      example:\n        name: ZOOM_API_KEY\n        value: \"12345\"\n      properties:\n        name:\n          description: Unique setting key.\n          type: string\n        section:\n          description: Human-friendly section name, used to group settings together.\n          type: string\n        description:\n          description: Human-friendly setting name.\n          type: string\n        type:\n          description: |\n            String = 1,\n            Number = 2,\n            Url = 3,\n            Email = 4\n          title: Organization setting type enum.\n          type: integer\n        value:\n          description: Current setting value, if set.\n          type: string\n      required:\n      - description\n      - name\n      - section\n      - type\n      title: Organization setting properties.\n      type: object\n    OrganizationSettingValueDto:\n      example:\n        name: ZOOM_API_KEY\n        value: \"12345\"\n      properties:\n        name:\n          description: Unique setting key.\n          type: string\n        value:\n          description: If empty, the setting value will be removed.\n          type: string\n      required:\n      - name\n      - value\n      title: Org setting key value pair.\n      type: object\n    RegistrationStatus:\n      enum:\n      - draft\n      - cancelled\n      - verified\n      - notattended\n      - attended\n      - finished\n      title: Registration status enum.\n      type: string\n    RegistrationType:\n      enum:\n      - participant\n      - student\n      - staff\n      - lecturer\n      - artist\n      title: Registration type enum (`participant` | `student` | `staff` | `lecturer`\n        | `artist`).\n      type: string\n    RegistrationCustomerInfoDto:\n      example:\n        surname: Doe\n        bday: 2010-01-01\n        relation: Son\n      properties:\n        vatNumber:\n          type: string\n        name:\n          type: string\n        email:\n          type: string\n        zip:\n          type: string\n        city:\n          type: string\n        country:\n          type: string\n        invoiceReference:\n          type: string\n      title: Registration customer data.\n      type: object\n    RegistrationOrderLineDto:\n      example:\n        product:\n          productId: 1001\n          name: Test Product\n          description: Test\n          more: More on this product...\n          price: 19.99\n          vatPercent: 17\n        productVariant:\n          productVariantId: 34\n          name: Red Coloured Test Product\n          description: Some variant description...\n          price: 21.99\n        quantity: 1\n      properties:\n        product:\n          $ref: '#/components/schemas/ProductDto'\n        productVariant:\n          $ref: '#/components/schemas/ProductVariantDto'\n        quantity:\n          format: int32\n          type: integer\n      required:\n      - product\n      - quantity\n      title: Order line data.\n      type: object\n    NewRegistrationOrderItemDto:\n      example:\n        productId: 1001\n        productVariantId: 34\n        quantity: 1\n      properties:\n        productId:\n          format: int32\n          type: integer\n        productVariantId:\n          format: int32\n          type: integer\n        quantity:\n          format: int32\n          type: integer\n      required:\n      - productId\n      - quantity\n      title: Order line data.\n      type: object\n    EventParticipantsFilterDto:\n      description: |\n        Used to filter out notification recipients.\n        All properties are optional.\n      example:\n        eventId: 0\n        productId: 6\n        registrationTypes:\n        - null\n        - null\n        registrationStatuses:\n        - null\n        - null\n      properties:\n        eventId:\n          format: int32\n          type: integer\n        productId:\n          format: int32\n          type: integer\n        registrationStatuses:\n          items:\n            $ref: '#/components/schemas/RegistrationStatus'\n          type: array\n        registrationTypes:\n          items:\n            $ref: '#/components/schemas/RegistrationType'\n          type: array\n      title: Notification recipients filter\n      type: object\n    NotificationStatus:\n      enum:\n      - new\n      - queued\n      - started\n      - cancelled\n      - failed\n      - sent\n      title: |\n        Notification status enum (`new` | `queued` | `started` | `cancelled` | `failed` | `sent`).\n      type: string\n    NotificationStatisticsDto:\n      example:\n        recipients: 5\n        sent: 2\n        errors: 7\n      properties:\n        recipients:\n          description: Total number of recipients.\n          format: int32\n          type: integer\n        sent:\n          description: Total number of notifications delivered.\n          format: int32\n          type: integer\n        errors:\n          description: Total number of notifications NOT delivered because of an errors.\n          format: int32\n          type: integer\n      required:\n      - errors\n      - recipients\n      - sent\n      title: Notification statistics info\n      type: object\n    NotificationRecipientDto:\n      properties:\n        recipientId:\n          description: Notification recipient identifier.\n          format: int32\n          type: integer\n        notificationId:\n          description: Notification identifier.\n          format: int32\n          type: integer\n        registrationId:\n          description: Event regisration ID.\n          format: int32\n          type: integer\n        recipientIdentifier:\n          description: Phone numner for SMS, or email address.\n          type: string\n        recipientName:\n          description: Recipient name.\n          type: string\n        recipientUserId:\n          description: Recipient user identifier.\n          type: string\n        created:\n          description: Notification creation date and time.\n          format: date-time\n          type: string\n        sent:\n          description: Notification delivery date and time.\n          format: date-time\n          type: string\n        errors:\n          description: Notification delivery errors.\n          type: string\n      required:\n      - created\n      - notificationId\n      - recipientId\n      - recipientIdentifier\n      title: Notification recipient info\n      type: object\n    LocationDto:\n      properties:\n        name:\n          type: string\n        address:\n          $ref: '#/components/schemas/AddressDto'\n      required:\n      - name\n      title: Location info.\n      type: object\n    OrderRegistrationDto:\n      example:\n        registrationId: 1099\n        eventId: 45\n        userId: 3fa94776-5fc1-11eb-b353-448a5b42a569\n        status: verified\n        type: participant\n        notes: Test\n      properties:\n        registrationId:\n          description: Registration ID.\n          format: int32\n          type: integer\n        eventId:\n          description: Event ID.\n          format: int32\n          type: integer\n        userId:\n          description: Registered user ID.\n          type: string\n        status:\n          $ref: '#/components/schemas/RegistrationStatus'\n        type:\n          $ref: '#/components/schemas/RegistrationType'\n        certificateId:\n          description: Registration certificate ID.\n          format: int32\n          type: integer\n        notes:\n          type: string\n      required:\n      - eventId\n      - registrationId\n      - status\n      - type\n      - userId\n      title: Order registration information.\n      type: object\n    OrderLineDto:\n      example:\n        orderLineId: 100001\n        product:\n          productId: 1001\n          name: Test Product\n          description: Test\n          more: More on this product...\n          price: 19.99\n          vatPercent: 17\n        productVariant:\n          productVariantId: 34\n          name: Red Coloured Test Product\n          description: Some variant description...\n          price: 21.99\n        quantity: 1\n      properties:\n        orderLineId:\n          description: Order line ID.\n          format: int32\n          type: integer\n        product:\n          $ref: '#/components/schemas/ProductDto'\n        productVariant:\n          $ref: '#/components/schemas/ProductVariantDto'\n        quantity:\n          format: int32\n          type: integer\n      required:\n      - orderLineId\n      - product\n      - quantity\n      title: Order line data.\n      type: object\n    OrderLineUpdateDto:\n      example:\n        productId: 1001\n        productVariantId: 34\n        quantity: 1\n      properties:\n        productId:\n          format: int32\n          type: integer\n        productVariantId:\n          format: int32\n          type: integer\n        quantity:\n          format: int32\n          type: integer\n      required:\n      - productId\n      - quantity\n      title: Order line update data.\n      type: object\n    OrganizationSettingType:\n      description: |\n        String = 1,\n        Number = 2,\n        Url = 3,\n        Email = 4\n      title: Organization setting type enum.\n      type: integer\n    AddressDto:\n      properties:\n        streetAddress:\n          type: string\n        addressLocality:\n          type: string\n        postalCode:\n          type: string\n        addressRegion:\n          type: string\n        addressCountry:\n          type: string\n      title: Address info.\n      type: object\n    inline_object:\n      properties:\n        role:\n          type: string\n      type: object\n    New_registration_specific_properties:\n      properties:\n        userId:\n          description: User ID.\n          type: string\n        eventId:\n          description: Event ID.\n          format: int32\n          type: integer\n        createOrder:\n          default: false\n          description: Automatically create order containing all the mandatory products.\n          type: boolean\n      required:\n      - eventId\n      - userId\n      title: New registration specific properties\n      type: object\n  securitySchemes:\n    bearer:\n      bearerFormat: JWT\n      scheme: bearer\n      type: http\n",
			"canonicalURL": "/github.com/losol/eventuras@0886bfcabaa6f1797a6cc00c636ac8455d7530cc/-/blob/docs/openapi2/v3/eventuras-api.v3.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/losol/eventuras/blob/0886bfcabaa6f1797a6cc00c636ac8455d7530cc/docs/openapi2/v3/eventuras-api.v3.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/registrations/{id}/orders\": at 1:86052: get: operation \"getRegistrationOrdersList\": at 1:86059: parse path \"/registrations/{id}/orders\": path parameter not specified: \"id\""
}