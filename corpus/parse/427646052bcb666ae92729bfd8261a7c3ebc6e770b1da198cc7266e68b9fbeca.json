{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/MyMiniFactory/api-documentation"
		},
		"file": {
			"name": "myminifactory-api.yaml",
			"size": 0,
			"path": "myminifactory-api.yaml",
			"byteSize": 63331,
			"content": "openapi: 3.0.0\ninfo:\n  title: MyMiniFactory API\n  description: Official API the 3D printable object platform  www.myminifactory.com\n  version: \"2\"\n  contact:\n    name: MyMiniFactory\n    url: https://www.myminifactory.com/contact_us/\n    email: info@myminifactory.com\nservers:\n  - url: https://www.myminifactory.com/api/v2\n    description: Production server.\n  - url: https://staging.myminifactory.com/api/v2\n    description: Staging server. Regularly snapshotted database.\n  - url: http://mmf.local/api/v2\n    description: Dev server.\n\n################################################################################\n#                                           Paths                              #\n################################################################################\npaths:\n\n  /search:\n    parameters:\n      - $ref: '#/components/parameters/q'\n      - $ref: '#/components/parameters/page'\n      - $ref: '#/components/parameters/per_page'\n      - $ref: '#/components/parameters/sort'\n      - $ref: '#/components/parameters/order'\n      - $ref: '#/components/parameters/cat'\n      - $ref: '#/components/parameters/support'\n      - $ref: '#/components/parameters/tech'\n      - $ref: '#/components/parameters/complexity'\n      - $ref: '#/components/parameters/featured'\n      - $ref: '#/components/parameters/remix'\n      - $ref: '#/components/parameters/commercial_use'\n      - $ref: '#/components/parameters/exclusive'\n    get:\n      operationId: getSearch\n      security:\n       - oauth2:\n         - basic\n       - key: []\n      tags:\n        - Search\n      description: Give search results according the the query. Searches objects by default.\n      responses:\n        200:\n          description: List of requested items\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  total_count:\n                    type: integer\n                  items:\n                    type: array\n                    items:\n                     $ref: '#/components/schemas/Object'\n\n#########################################\n#               Users                   #\n#########################################\n  /user:\n    get:\n      operationId: getMe\n      security:\n       - oauth2:\n         - basic\n      tags:\n        - Users\n      description: Get the current user basic information.\n      responses:\n        200:\n          description: User object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n\n  /users/{username}:\n    parameters:\n      - $ref: '#/components/parameters/username'\n    get:\n      operationId: getUser\n      security:\n       - oauth2:\n         - basic\n       - key: []\n      tags:\n        - Users\n      description: Get basic information about a user.\n      responses:\n        200:\n          description: The user information\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n\n  /users/{username}/following:\n    parameters:\n      - $ref: '#/components/parameters/username'\n      - $ref: '#/components/parameters/page'\n      - $ref: '#/components/parameters/per_page'\n    get:\n      operationId: getUserFollowing\n      security:\n       - oauth2:\n         - basic\n       - key: []\n      tags:\n        - Users\n      description: Get a user's followings.\n      responses:\n        200:\n          description: List of users\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  total_count:\n                    type: integer\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/User'\n\n  /users/{username}/followers:\n    parameters:\n      - $ref: '#/components/parameters/username'\n      - $ref: '#/components/parameters/page'\n      - $ref: '#/components/parameters/per_page'\n    get:\n      operationId: getUserFollowers\n      security:\n       - oauth2:\n         - basic\n       - key: []\n      tags:\n        - Users\n      description: Get a user's followers.\n      responses:\n        200:\n          description: List of users\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  total_count:\n                    type: integer\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/User'\n\n  /users/{username}/objects:\n    parameters:\n      - $ref: '#/components/parameters/username'\n      - $ref: '#/components/parameters/page'\n      - $ref: '#/components/parameters/per_page'\n    get:\n      operationId: getUserObjects\n      security:\n       - oauth2:\n         - basic\n       - key: []\n      tags:\n        - Users\n        - Objects\n      description: Get a user's objects.\n      responses:\n        200:\n          description: List of objects\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Objects'\n\n  /users/{username}/objects_liked:\n    parameters:\n      - $ref: '#/components/parameters/username'\n      - $ref: '#/components/parameters/page'\n      - $ref: '#/components/parameters/per_page'\n    get:\n      operationId: getUserObjectsLiked\n      security:\n       - oauth2:\n         - basic\n       - key: []\n      tags:\n        - Users\n        - Objects\n      description: Get a user's liked objects.\n      responses:\n        200:\n          description: List of objects\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  total_count:\n                    type: integer\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Object'\n\n  /users/{username}/collections:\n    parameters:\n      - $ref: '#/components/parameters/username'\n      - $ref: '#/components/parameters/page'\n      - $ref: '#/components/parameters/per_page'\n    get:\n      operationId: getUserCollections\n      security:\n       - oauth2:\n         - basic\n       - key: []\n      tags:\n        - Users\n        - Collections\n      description: Get a user's collections.\n      responses:\n        200:\n          description: List of collections\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  total_count:\n                    type: integer\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/OneCollection'\n\n  /users/{username}/collections/{collection_slug}:\n    parameters:\n      - $ref: '#/components/parameters/username'\n      - $ref: '#/components/parameters/collection_slug'\n      - $ref: '#/components/parameters/page'\n      - $ref: '#/components/parameters/per_page'\n    get:\n      operationId: getUserCollection\n      security:\n       - oauth2:\n         - basic\n       - key: []\n      tags:\n        - Users\n      description: Get a user's collections.\n      responses:\n        200:\n          description: The collection information and its objects\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Collection'\n\n  /feed:\n    parameters:\n      - $ref: '#/components/parameters/page'\n      - $ref: '#/components/parameters/per_page'\n    get:\n      operationId: getUserFeed\n      security:\n       - oauth2:\n         - basic\n       - key: []\n      tags:\n        - Users\n        - Objects\n      description: \"Get a user's feed: the list lastest objects of his followings\"\n      responses:\n        200:\n          description: List of objects\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  total_count:\n                    type: integer\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Object'\n\n#########################################\n#               Comments                #\n#########################################\n\n\n  /comments/{comment_id}:\n    parameters:\n      - $ref: '#/components/parameters/comment_id'\n    get:\n      operationId: getComment\n      security:\n       - oauth2:\n         - basic\n       - key: []\n      tags:\n        - Comments\n      responses:\n        200:\n          description: Get one comment\n          content:\n            application/json:\n              schema:\n                  $ref: '#/components/schemas/Comment'\n    patch:\n      operationId: patchComment\n      parameters:\n        - $ref: '#/components/parameters/comment_id'\n      security:\n       - oauth2:\n         - basic\n      tags:\n        - Comments\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CommentPayload'\n      description: \"Edit a comment\"\n      responses:\n        201:\n          description: Details about the created print.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Comment'\n    delete:\n      operationId: deleteComment\n      parameters:\n        - $ref: '#/components/parameters/comment_id'\n      security:\n       - oauth2:\n         - basic\n      tags:\n        - Comments\n      description: \"Delete a comment\"\n      responses:\n        200:\n          description: Feedback\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n\n  /comment:\n    post:\n      operationId: postComment\n      security:\n       - oauth2:\n         - basic\n      tags:\n        - Comments\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CommentPayload'\n      description: \"Post a new comment. Possible types: 'object', 'print_job', 'idea'\"\n      responses:\n        201:\n          description: Details about the created print.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Comment'\n\n  /comments/{comment_id}/replies:\n    parameters:\n      - $ref: '#/components/parameters/comment_id'\n    get:\n      operationId: getCommentReplies\n      security:\n       - oauth2:\n         - basic\n       - key: []\n      tags:\n        - Comments\n      responses:\n        200:\n          description: List of comments in replies to a comment\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  total_count:\n                    type: integer\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Comment'\n\n\n  /objects/{object_id}/comments:\n    parameters:\n      - $ref: '#/components/parameters/object_id'\n    get:\n      operationId: getObjectComments\n      security:\n       - oauth2:\n         - basic\n       - key: []\n      tags:\n        - Comments\n      description: Get a object's comments.\n      responses:\n        200:\n          description: List of comments of the object\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  total_count:\n                    type: integer\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Comment'\n\n\n  /print_jobs/{object_id}/comments:\n    parameters:\n      - $ref: '#/components/parameters/object_id'\n    get:\n      operationId: getPrintjobComments\n      security:\n       - oauth2:\n         - basic\n       - key: []\n      tags:\n        - Comments\n      description: Get a print jobs's comments.\n      responses:\n        200:\n          description: List of comments of the object\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  total_count:\n                    type: integer\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Comment'\n\n  /ideas/{idea_id}/comments:\n    parameters:\n      - $ref: '#/components/parameters/idea_id'\n    get:\n      operationId: getIdeaComments\n      security:\n       - oauth2:\n         - basic\n       - key: []\n      tags:\n        - Comments\n      description: Get a ideas's comments.\n      responses:\n        200:\n          description: List of comments of the object\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  total_count:\n                    type: integer\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Comment'\n\n\n#########################################\n#               Objects                 #\n#########################################\n  /objects/{object_id}:\n    parameters:\n      - $ref: '#/components/parameters/object_id'\n    get:\n      operationId: getObject\n      parameters:\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/per_page'\n      security:\n       - oauth2:\n         - basic\n       - key: []\n      tags:\n        - Objects\n      description: Get information about an object.\n      responses:\n        200:\n          description: The 3D object object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Object'\n\n    patch:\n      operationId: patchObject\n      security:\n       - oauth2:\n         - basic\n      parameters:\n        - $ref: '#/components/parameters/object_fields'\n      tags:\n        - Objects\n        - Upload\n      description: Sent object metadata.\n      responses:\n        200:\n          description: The 3D object object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ObjectUpload'\n\n  /object:\n    post:\n      operationId: postObject\n      security:\n       - oauth2:\n         - basic\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ObjectMetadata'\n      tags:\n        - Objects\n        - Upload\n      description: Upload a object and get back upload ids for post-upload files and pictures.\n      responses:\n        200:\n          description: Details about the created 3D object.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ObjectUpload'\n  # /related_objects/{object_id}:\n  #   parameters:\n  #     - $ref: '#/components/parameters/object_id'\n  #     - $ref: '#/components/parameters/page'\n  #     - $ref: '#/components/parameters/per_page'\n  #   get:\n  #     security:\n  #       - oauth_authorization_code:\n  #           - basic\n  #       - oauth_implicit:\n  #           - basic\n  #       - key: []\n  #     tags:\n  #       - Objects\n  #     description: 'Get the related objects to a chosen one, using its id.'\n  #     responses:\n  #       200:\n  #         description: List of objects.\n  #         content:\n  #           application/json:\n  #             schema:\n  #               $ref: '#/components/schemas/Objects'\n  # /related_objects_by_type/{object_id}/{type}:\n  #   parameters:\n  #     - $ref: '#/components/parameters/object_id'\n  #     - $ref: '#/components/parameters/relationship_type'\n  #     - $ref: '#/components/parameters/page'\n  #     - $ref: '#/components/parameters/per_page'\n  #   get:\n  #     security:\n  #       - oauth_authorization_code:\n  #           - basic\n  #       - oauth_implicit:\n  #           - basic\n  #       - key: []\n  #     tags:\n  #       - Objects\n  #     description: \u003e-\n  #       Get the related objects to a chosen one, using its id and the type of\n  #       relationship.\n  #     responses:\n  #       '200':\n  #         description: List of objects.\n  #         content:\n  #           application/json:\n  #             schema:\n  #               $ref: '#/components/schemas/Objects'\n  /objects/{object_id}/files:\n    parameters:\n      - $ref: '#/components/parameters/object_id'\n      - $ref: '#/components/parameters/page'\n      - $ref: '#/components/parameters/per_page'\n    get:\n      operationId: getObjectFiles\n      security:\n       - oauth2:\n         - basic\n       - key: []\n      tags:\n        - Objects\n        - Files\n      description: Get the list of files of the object.\n      responses:\n        200:\n          description: List of files of the object\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  total_count:\n                    type: integer\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/File'\n\n  /objects/{object_id}/prints:\n    parameters:\n      - $ref: '#/components/parameters/object_id'\n      - $ref: '#/components/parameters/page'\n      - $ref: '#/components/parameters/per_page'\n    get:\n      operationId: getObjectPrints\n      security:\n       - oauth2:\n         - basic\n       - key: []\n      tags:\n        - Objects\n        - Prints\n      description: Get the list of prints of the object.\n      responses:\n        200:\n          description: The 3D file information\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  total_count:\n                    type: integer\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Print'\n\n  /objects/{object_id}/print (application/json):\n    parameters:\n      - $ref: '#/components/parameters/object_id'\n    post:\n      operationId: postObjectPrint\n      security:\n       - oauth2:\n         - basic\n      tags:\n        - Objects\n        - Prints\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PrintMetadata'\n          multipart/form-data:\n            schema:\n              properties:\n                description:\n                  type: string\n                material:\n                  type: string\n                printer:\n                  type: string\n                file:\n                  type: array\n                  items:\n                    type: string\n                    format: binary\n      description: Upload a print and get back upload ids for post-upload pictures.\n      responses:\n        201:\n          description: Details about the created print.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PrintWithUploadIds'\n\n  /objects/{object_id}/upload_status:\n    parameters:\n      - $ref: '#/components/parameters/object_id'\n    get:\n      operationId: postObjectUploadstatus\n      security:\n       - oauth2:\n         - basic\n      tags:\n        - Objects\n        - Upload\n      description: Check the status of an object and its files.\n      responses:\n        200:\n          description: Upload status of the specified object.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ObjectUploadStatus'\n\n\n#########################################\n#               Files                   #\n#########################################\n  /objects/{object_id}/file (upload):\n    parameters:\n      - $ref: '#/components/parameters/object_id'\n    post:\n      operationId: postObjectFile\n      security:\n        - oauth_authorization_code:\n          - basic\n        - oauth_implicit:\n          - basic\n      tags:\n        - Files\n        - Upload\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                # The property name 'files' will be used for all files.\n                files:\n                  type: array\n                  items:\n                    type: string\n                    format: binary\n      description: Upload one or several file(s) associated to an object using multipart/form-data\n      responses:\n        201:\n          description: Array of uploaded filenames\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    filename:\n                      type: string\n\n  /objects/{object_id}/image (upload):\n    parameters:\n      - $ref: '#/components/parameters/object_id'\n    post:\n      operationId: postObjectImage\n      security:\n        - oauth_authorization_code:\n          - basic\n        - oauth_implicit:\n          - basic\n      tags:\n        - Files\n        - Upload\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                # The property name 'files' will be used for all files.\n                files:\n                  type: array\n                  items:\n                    type: string\n                    format: binary\n      description: Upload one or several images(s) associated to an object using multipart/form-data\n      responses:\n        201:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    filename:\n                      type: string\n          description: Array of uploaded filenames\n\n  /files/{file_id}:\n    parameters:\n      - $ref: '#/components/parameters/file_id'\n    get:\n      operationId: getObjectFile\n      security:\n        - oauth_authorization_code:\n          - basic\n        - oauth_implicit:\n          - basic\n        - key: []\n      tags:\n        - Objects\n        - Files\n      description: Information of a file including the download link\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/File'\n          description: Information of a file including the download link\n\n  /file (binary/octet-stream):\n    parameters:\n       - $ref: '#/components/parameters/upload_id'\n    post:\n      operationId: postObjectFileBinary\n      security:\n       - oauth2:\n         - basic\n      tags:\n        - Files\n        - Upload\n      requestBody:\n        content:\n            # a file of any of the supported 3d formats or zip\n            # TODO list formats\n          binary:\n            schema:\n              type: string\n              format: binary\n      description: Upload one file associated to an upload id\n      responses:\n        201:\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  filename:\n                    type: string\n          description: \"Uploaded filename\"\n\n  /file (multipart/form-data):\n    post:\n      operationId: postObjectFileMultipart\n      security:\n       - oauth2:\n         - basic\n      tags:\n        - Files\n        - Upload\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                # The property name 'files' will be used for all files.\n                files:\n                  type: array\n                  items:\n                    type: string\n                    format: binary\n      description: Upload one or several file(s) using multipart/form-data\n      responses:\n        201:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/FileUploadId'\n          description: \"Array of upload id/filename pairs\"\n\n  /image (binary/octet-stream):\n    parameters:\n       - $ref: '#/components/parameters/upload_id'\n    post:\n      operationId: postObjectImageBinary\n      security:\n       - oauth2:\n         - basic\n      tags:\n        - Files\n        - Upload\n      requestBody:\n        content:\n            # a binary file of type png or jpeg\n          'image/jpeg':\n            schema:\n              type: string\n              format: binary\n          'image/png':\n            schema:\n              type: string\n              format: binary\n          'image/gif':\n            schema:\n              type: string\n              format: binary\n      description: Upload one image associated to an upload id\n      responses:\n        201:\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  filename:\n                    type: string\n          description: \"Uploaded image name\"\n\n  /image (multipart/form-data):\n    post:\n      operationId: postObjectImageMultipart\n      security:\n       - oauth2:\n         - basic\n      tags:\n        - Files\n        - Upload\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                files:\n                  type: array\n                  items:\n                    type: string\n                    format: binary\n      description: Upload one or several image(s) using multipart/form-data\n      responses:\n        201:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/FileUploadId'\n          description: \"Array of upload id/filename pairs\"\n\n#########################################\n#               Collections             #\n#########################################\n  /collection:\n    post:\n        operationId: postCollection\n        security:\n         - oauth2:\n           - basic\n        tags:\n          - Collections\n        requestBody:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CollectionPayload'\n        description: \"Post a new collection.\"\n        responses:\n          201:\n            description: The collection information\n            content:\n              application/json:\n                schema:\n                  $ref: '#/components/schemas/OneCollection'\n\n  /collections:\n    parameters:\n      - $ref: '#/components/parameters/page'\n      - $ref: '#/components/parameters/per_page'\n    get:\n      operationId: getCollections\n      tags:\n        - Collections\n      description: Get all the public collections\n      responses:\n        200:\n          description: The collection information\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  total_count:\n                    type: integer\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/OneCollection'\n\n\n  /collections/{collection_id}:\n    get:\n      operationId: getCollection\n      parameters:\n        - $ref: '#/components/parameters/collection_id'\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/per_page'\n      tags:\n        - Collections\n      description: Get information about a collection.\n      responses:\n        200:\n          description: The collection information and its objects\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Collection'\n\n    patch:\n      operationId: patchCollection\n      parameters:\n        - $ref: '#/components/parameters/collection_id'\n      security:\n       - oauth2:\n         - basic\n      tags:\n        - Collections\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CollectionPayload'\n      description: \"Edit a collection\"\n      responses:\n        201:\n          description: The collection information.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OneCollection'\n\n    delete:\n      operationId: deleteCollection\n      parameters:\n        - $ref: '#/components/parameters/collection_id'\n      security:\n       - oauth2:\n         - basic\n      tags:\n        - Collections\n      description: \"Delete a collection\"\n      responses:\n        204:\n          description: ''\n\n  /collections/{collection_id}/objects:\n    get:\n      operationId: getCollectionObjects\n      parameters:\n        - $ref: '#/components/parameters/collection_id'\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/per_page'\n      tags:\n        - Collections\n        - Objects\n      description: Get objects inside a collection.\n      responses:\n        200:\n          description: The list of objects\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Objects'\n\n  /collections/{collection_id}/object/{object_id}:\n    delete:\n      operationId: deleteCollectionObject\n      parameters:\n        - $ref: '#/components/parameters/collection_id'\n        - $ref: '#/components/parameters/object_id'\n      security:\n       - oauth2:\n         - basic\n      tags:\n        - Collections\n      description: \"Delete an object in collection\"\n      responses:\n        204:\n          description: ''\n\n\n#########################################\n#               Categories              #\n#########################################\n  /categories:\n    parameters:\n      - $ref: '#/components/parameters/top_category'\n      - $ref: '#/components/parameters/page'\n      - $ref: '#/components/parameters/per_page'\n    get:\n      operationId: getCategories\n      tags:\n        - Categories\n      description: Get information about a category.\n      responses:\n        200:\n          description: The category information and its children\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  total_count:\n                    type: integer\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Category'\n\n  /categories/{category_id}:\n    parameters:\n      - $ref: '#/components/parameters/category_id'\n    get:\n      operationId: getCategorie\n      tags:\n        - Categories\n      description: Get information about a category.\n      responses:\n        200:\n          description: The category information and its children\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Category'\n\n#########################################\n#               Tags                    #\n#########################################\n  /tags/{tag_name}/objects:\n    parameters:\n      - $ref: '#/components/parameters/tag_name'\n    get:\n      operationId: getTagObjects\n      tags:\n        - Objects\n        - Tags\n      description: Get objects having a particular tag\n      responses:\n        '200':\n          description: The list of objects\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Objects'\n  /tags/{tag_name}/ideas:\n    parameters:\n      - $ref: '#/components/parameters/tag_name'\n    get:\n      operationId: getTagIdeas\n      tags:\n        - Ideas\n        - Tags\n      description: Get ideas having a particular tag\n      responses:\n        '200':\n          description: The list of ideas\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Idea'\n\n#########################################\n#               Posts                   #\n#########################################\n  /posts/{post_id}:\n    parameters:\n      - $ref: '#/components/parameters/post_id'\n    get:\n      operationId: getPost\n      security:\n        - oauth2:\n            - basic\n        - key: []\n      tags:\n        - Post\n      description: Get a post\n      responses:\n        '200':\n          description: The requested post\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Post'\n    patch:\n      operationId: patchPost\n      security:\n        - oauth2:\n            - basic\n        - key: []\n      tags:\n        - Post\n      description: \"Edit an existing post and get back the new version of this post.\"\n      requestBody:\n        description: \"Representation of Post. Only the given fields will be patched.\"\n        content:\n          application/json:\n            schema:\n              type: object\n              description: \"Representation of Post. Only the given fields will be patched\"\n              properties:\n                visibility:\n                  type: integer\n                  default: 2\n                  description: \"2: Public, 1: Draft, 0: Private\"\n      responses:\n        '200':\n          description: The edited post\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Post'\n    delete:\n      operationId: deletePost\n      security:\n        - oauth2:\n            - basic\n        - key: []\n      tags:\n        - Post\n      description: Delete a post\n      responses:\n        '200':\n          description: Feedback\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    pattern: \"ok\"\n\n  /post:\n    post:\n      operationId: postPost\n      security:\n        - oauth2:\n            - basic\n        - key: []\n      tags:\n        - Post\n      description: Upload a new post\n      responses:\n        '200':\n          description: The new post\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Post'\n\n  /blog/posts:\n    parameters:\n      - $ref: '#/components/parameters/page'\n      - $ref: '#/components/parameters/per_page'\n    get:\n      operationId: getBlogPosts\n      security:\n        - oauth2:\n          - basic\n        - key: []\n      tags:\n        - Post\n      description: Get the blog posts\n      responses:\n        200:\n          description: List of blog post\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  total_count:\n                    type: integer\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Post'\n\n  /users/{username}/posts:\n    parameters:\n      - $ref: '#/components/parameters/username'\n      - $ref: '#/components/parameters/page'\n      - $ref: '#/components/parameters/per_page'\n    get:\n      operationId: getUserPosts\n      security:\n        - oauth2:\n            - basic\n        - key: []\n      tags:\n        - Post\n      description: Get the user posts\n      responses:\n        200:\n          description: List of user post\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  total_count:\n                    type: integer\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Post'\n\n#########################################\n#             Competitions              #\n#########################################\n  /competitions:\n    parameters:\n      - $ref: '#/components/parameters/page'\n      - $ref: '#/components/parameters/per_page'\n      - $ref: '#/components/parameters/competition_sort'\n      - $ref: '#/components/parameters/order'\n    get:\n      operationId: getCompetitions\n      tags:\n        - Competitions\n      description: List all competitions\n      responses:\n        200:\n          description: Competition object\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  total_count:\n                    type: integer\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Competition'\n\n  /competition:\n    post:\n      operationId: postCompetition\n      tags:\n        - Competitions\n      description: Post a new competition\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CompetitionPayload'\n      responses:\n        '200':\n          description: Competition object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Competition'\n\n  /competitions/{slug}:\n    parameters:\n      - $ref: '#/components/parameters/competition_slug'\n    get:\n      operationId: getCompetition\n      tags:\n        - Competitions\n      description: Get informations about a competition\n      responses:\n        '200':\n          description: Competition object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Competition'\n    patch:\n      operationId: patchCompetition\n      tags:\n        - Competitions\n      description: Modify an existing competition\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CompetitionPayload'\n      responses:\n        '200':\n          description: Competition object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Competition'\n    delete:\n      operationId: deleteCompetition\n      tags:\n        - Competitions\n      description: Delete a competition\n      responses:\n        200:\n          description: Done.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n\n\n\n##########################################################################\n#                                     Paths                              #\n##########################################################################\ncomponents:\n  parameters:\n    q:\n      name: q\n      in: query\n      required: true\n      description: Search query. See the details query syntax document\n      schema:\n        type: string\n    page:\n      name: page\n      in: query\n      required: false\n      description: Page number. Default is 1\n      schema:\n        type: string\n    per_page:\n      name: per_page\n      in: query\n      required: false\n      description: Number of results per page. Default is 30\n      schema:\n        type: string\n    sort:\n      name: sort\n      in: query\n      required: false\n      description: \"Sort results by: 'visits', 'date', 'popularity'.\"\n      schema:\n        type: string\n    order:\n      name: order\n      in: query\n      required: false\n      description: \"Sorting order: 'desc', 'asc' (Defaults to desc).\"\n      schema:\n        type: string\n    featured:\n      name: featured\n      in: query\n      required: false\n      description: \"Filter featured object: 0: Non-featured, 1: featured\"\n      schema:\n        type: string\n    support:\n      name: support\n      in: query\n      required: false\n      description: \"Filter printing support-free objects: 1: support-free\"\n      schema:\n        type: string\n    cat:\n      name: cat\n      in: query\n      required: false\n      description: \"Filter object of a certain category, by the category id. eg. cat={category_id}\"\n      schema:\n        type: string\n    complexity:\n      name: complexity\n      in: query\n      required: false\n      description: \"Filter object difficulty (How hard to build) : 'eas', 'med', 'diff'\"\n      schema:\n        type: string\n    tech:\n      name: tech\n      in: query\n      required: false\n      description: \"Filter printing technology recommanded for the object: eg. 'DLP/SLA'\"\n      schema:\n        type: string\n    remix:\n      name: remix\n      in: query\n      required: false\n      description: \"License filter: the designer accepted his object the remixed.\"\n      schema:\n        type: string\n    commercial_use:\n      name: commercial_use\n      in: query\n      required: false\n      description: \"License filter: the designer accepted commercial use of his object.\"\n      schema:\n        type: string\n    exclusive:\n      name: exclusive\n      in: query\n      required: false\n      description: \"License filter: this object should be shared exclusivly on MyMiniFactory.\"\n      schema:\n        type: string\n    store:\n      name: store\n      in: query\n      required: false\n      description: \"Store License filter: 1: the object has the store license and isn't free. 0: the object hasn't the store license.\"\n      schema:\n        type: string\n    username:\n      name: username\n      in: path\n      description: The user's username\n      schema:\n        type: string\n      required: true\n    object_id:\n      name: object_id\n      in: path\n      description: The object identifier number\n      schema:\n        type: number\n      required: true\n    file_id:\n      name: file_id\n      in: path\n      description: The file identifier number\n      schema:\n        type: string\n      required: true\n    upload_id:\n      name: upload_id\n      in: query\n      description: Temporary identifier to upload a file\n      schema:\n        type: string\n      required: true\n    collection_id:\n      name: collection_id\n      in: path\n      description: The collection identifier number\n      schema:\n        type: string\n      required: true\n    collection_slug:\n      name: collection_slug\n      in: path\n      description: The collection slug name\n      schema:\n        type: string\n      required: true\n    category_id:\n      name: category_id\n      in: path\n      description: The category identifier number\n      schema:\n        type: string\n      required: true\n    top_category:\n      name: top\n      in: query\n      description: Filter top categories\n      schema:\n        type: boolean\n      required: false\n    type:\n      name: type\n      in: path\n      description: The type of object. Default is Object-public\n      schema:\n        type: string\n      required: true\n    comment_id:\n      name : comment_id\n      in: path\n      required: true\n      schema:\n        type: integer\n      description: Unique ID of the comment\n    idea_id:\n      name : idea_id\n      in: path\n      required: true\n      schema:\n        type: integer\n      description: Unique ID of the idea\n    relationship_type:\n      name: type\n      in: path\n      description: The type of relationship between objects.\n      required: true\n      schema:\n        type: string\n    tag_name:\n      name: tag_name\n      in: path\n      description: the name of the tag\n      required: true\n      schema:\n        type: string\n    object_fields:\n      name: fields\n      in: query\n      description: Representation of an Object. Only the given fields will be patched\n      required: true\n      schema:\n        $ref: '#/components/schemas/ObjectPatchMetadata'\n    post_id:\n      name: post_id\n      in: path\n      description: the id of the post\n      required: true\n      schema:\n        type: string\n\n    competition_slug:\n      name: slug\n      in: path\n      description: Slug name of a competition\n      required: true\n      schema:\n        type: string\n    competition_sort:\n      name: sort\n      in: query\n      required: false\n      description: \"Sort results by: 'date', 'status'.\"\n      schema:\n        type: string\n\n##########################################################################\n#                             Security Oauth2                            #\n##########################################################################\n  securitySchemes:\n    ApiKeyAuth:\n      type: apiKey\n      in: query\n      name: key\n    OAuth2:\n      type: oauth2\n      flows:\n        authorizationCode:\n          authorizationUrl: https://auth.myminifactory.com/web/authorize?client_id=example_client\u0026redirect_uri=http://example.com/callback\u0026response_type=code\u0026state=RANDOM_STRING\n          tokenUrl: https://auth.myminifactory.com/v1/oauth/?client_id=example_client\u0026redirect_uri=http://example.com/callback\u0026response_type=code\u0026state=RANDOM_STRING\n          scopes:\n            basic: |\n             to read private data related to a user (e.g. profile info, private objects) and do actions on his behalf.\n\n        implicit:\n          authorizationUrl: https://auth.myminifactory.com/web/authorize?client_id=example_client\u0026redirect_uri=http://example.com/callback\u0026response_type=code\u0026state=RANDOM_STRING\n          scopes:\n            basic: |\n             to read private data related to a user (e.g. profile info, private objects) and do actions on his behalf.\n  schemas:\n##########################################################################\n#                            Schemas                                     #\n##########################################################################\n    User:\n      type: object\n      properties:\n        username:\n          type: string\n        name:\n          type: string\n        profile_url:\n          type: string\n        avatar_url:\n          type: string\n        avatar_thumbnail_url:\n          type: string\n        cover_url:\n          type: string\n        bio:\n          type: string\n        website:\n          type: string\n        followings:\n          type: integer\n          description: Number of following accounts\n        followers:\n          type: integer\n          description: Number of followers accounts\n        objects:\n          type: integer\n          description: Number of published objects\n        total_prints:\n          type: integer\n          description: Number of published pictures of print\n        total_collections:\n          type: integer\n          description: Number of public collections\n        likes:\n          type: integer\n          description: Sum of all object likes\n        following:\n          type: boolean\n          description: Whether the connected account is following the user. Available for oauth2 connected user.\n\n    Objects:\n      type: object\n      properties:\n        total_count:\n          type: integer\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/Object'\n\n    Object:\n      type: object\n      properties:\n        id:\n          type: integer\n        url:\n          type: string\n        archive_download_url:\n          type: string\n          description: Available ONLY with Oauth connected User. Not with API key.\n        parent_id:\n          type: integer\n        name:\n          type: string\n        visibility:\n            type: string\n            description: \"0: Private, 2: Public\"\n        description:\n          type: string\n          description: Plain text description\n        description_html:\n          type: string\n          description: HTML version of the description\n        printing_details:\n          type: string\n          description: Printing instruction from the designer\n        printing_details_html:\n          type: string\n          description: HTML version of the printing_details\n        views:\n          type: integer\n        likes:\n          type: integer\n        published_at:\n          type: string\n          description: The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.\n        featured:\n          type: boolean\n        complexity:\n          type: integer\n        dimensions:\n          type: string\n        material_quantity:\n          type: string\n        designer:\n          $ref: '#/components/schemas/User'\n        images:\n          type: array\n          items:\n            $ref: '#/components/schemas/Image'\n        files:\n          type: array\n          items:\n            $ref: '#/components/schemas/File'\n        prints:\n          type: array\n          items:\n            $ref: '#/components/schemas/Print'\n        categories:\n          type: array\n          items:\n            $ref: '#/components/schemas/OneCategory'\n        tags:\n          type: array\n          items:\n            type: string\n        licenses:\n          type: array\n          items:\n            $ref: '#/components/schemas/License'\n        license:\n          type: string\n          description: Name and description of the license\n        is_liked:\n          type: boolean\n          description: Whether this object has been liked. Available for oauth2 connected user.\n        is_saved:\n          type: boolean\n          description: Whether this has is in the user's save for later collection. Available for oauth2 connected user.\n\n    File:\n      type: object\n      properties:\n        id:\n          type: integer\n        filename:\n          type: string\n        description:\n          type: string\n        download_url:\n          type: string\n          description: Available ONLY with Oauth connected User. Not with API key.\n        viewer_url:\n          type: string\n          description: Reduced version of the 3D file for preview (Format stl of ply).\n        thumbnail_url:\n          type: string\n          description: Render image thumbnail URL\n        size:\n          type: string\n          description: Size of the file in Bytes.\n\n    Print:\n      type: object\n      properties:\n        id:\n          type: integer\n        object_id:\n          type: integer\n        description:\n          type: string\n        material:\n          type: string\n        printer:\n          type: string\n        images:\n          type: array\n          items:\n            $ref: '#/components/schemas/PrintImage'\n\n    PrintPayload:\n      type: object\n\n    PrintWithUploadIds:\n      type: object\n      properties:\n        id:\n          type: integer\n        object_id:\n          type: integer\n        description:\n          type: string\n        material:\n          type: string\n        printer:\n          type: string\n        images:\n          type: array\n          items:\n            $ref: '#/components/schemas/ImageUploadId'\n\n    PrintImage:\n      type: object\n      properties:\n        original:\n          type: object\n          properties:\n            url:\n              type: string\n            width:\n              type: string\n            height:\n              type: string\n        thumbnail:\n          type: object\n          properties:\n            url:\n              type: string\n            width:\n              type: string\n            height:\n              type: string\n        standard:\n          type: object\n          properties:\n            url:\n              type: string\n            width:\n              type: string\n            height:\n              type: string\n        large:\n          type: object\n          properties:\n            url:\n              type: string\n            width:\n              type: string\n            height:\n              type: string\n        is_print_image_selected:\n          type: boolean\n          description: If the print has be selected to appear in the main gallery (Can be null, mean no)\n\n    Image:\n      type: object\n      properties:\n        id:\n          type: integer\n        is_primary:\n          type: boolean\n        original:\n          type: object\n          properties:\n            url:\n              type: string\n            width:\n              type: string\n            height:\n              type: string\n        thumbnail:\n          type: object\n          properties:\n            url:\n              type: string\n            width:\n              type: string\n            height:\n              type: string\n        standard:\n          type: object\n          properties:\n            url:\n              type: string\n            width:\n              type: string\n            height:\n              type: string\n\n    Collection:\n      type: object\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n        slug:\n          type: string\n        url:\n          type: string\n        owner:\n          $ref: '#/components/schemas/User'\n        featured:\n          type: boolean\n        public:\n          type: boolean\n        created_at:\n          type: string\n          description: The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.\n        description:\n          type: string\n        cover_object:\n          $ref: '#/components/schemas/Object'\n        objects:\n          $ref: '#/components/schemas/Objects'\n\n    CollectionPayload:\n      type: object\n      properties:\n        name:\n          type: string\n        public:\n          type: boolean\n        object:\n          type: integer\n      required:\n        - name\n        - public\n\n    OneCollection:\n      type: object\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n        slug:\n          type: string\n        url:\n          type: string\n        owner:\n          $ref: '#/components/schemas/User'\n        featured:\n          type: boolean\n        public:\n          type: boolean\n        created_at:\n          type: string\n          description: The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.\n        description:\n          type: string\n        cover_object:\n          $ref: '#/components/schemas/Object'\n\n    Category:\n      type: object\n      properties:\n        id:\n          type: integer\n        slug:\n          type: string\n        url:\n          type: string\n        name:\n          type: string\n        children:\n          type: object\n          properties:\n            total_count:\n              type: integer\n            items:\n              type: array\n              items:\n                type: object\n                properties:\n                  id:\n                    type: integer\n                  slug:\n                    type: string\n                  name:\n                    type: string\n        parent:\n            type: object\n            properties:\n              id:\n                type: integer\n              slug:\n                type: string\n              name:\n                type: string\n        objects:\n          $ref: '#/components/schemas/Objects'\n\n    OneCategory:\n      type: object\n      properties:\n        id:\n          type: integer\n        slug:\n          type: string\n        url:\n          type: string\n        name:\n          type: string\n        children:\n          type: object\n          properties:\n            total_count:\n              type: integer\n            items:\n              type: array\n              items:\n                type: object\n                properties:\n                  id:\n                    type: integer\n                  slug:\n                    type: string\n                  name:\n                    type: string\n        parent:\n            type: object\n            properties:\n              id:\n                type: integer\n              slug:\n                type: string\n              name:\n                type: string\n\n    ObjectMetadata:\n      type: object\n      properties:\n        name:\n          type: string\n        description:\n          type: string\n        visibility:\n          type: integer\n          default: 2\n          description: \"2: Public, 0: Private\"\n        how_to:\n          type: string\n        dimensions:\n          type: string\n        time_to_do_from:\n          type: integer\n        time_to_do_to:\n          type: integer\n        support_free:\n          type: boolean\n        filament_quantity:\n          type: string\n        client_url:\n          type: string\n        tags:\n          type: string\n        licenses:\n          type: array\n          items:\n            $ref: '#/components/schemas/License'\n        files:\n          type: array\n          items:\n            $ref: '#/components/schemas/FileUploadRequest'\n        images:\n          type: array\n          items:\n            $ref: '#/components/schemas/ImageUploadRequest'\n\n    ObjectPatchMetadata:\n      type: object\n      properties:\n        visibility:\n          type: integer\n          default: 2\n          description: \"2: Public, 0: Private\"\n\n    PrintMetadata:\n      type: object\n      properties:\n        description:\n          type: string\n        material:\n          type: string\n        printer:\n          type: string\n        files:\n          type: array\n          items:\n            $ref: '#/components/schemas/FileUploadRequest'\n\n    ObjectUpload:\n      type: object\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n        object_status_url:\n          type: string\n        object_url:\n          type: string\n        files:\n          type: array\n          items:\n            $ref: '#/components/schemas/FileUploadId'\n        images:\n          type: array\n          items:\n            $ref: '#/components/schemas/ImageUploadId'\n\n    ObjectUploadStatus:\n      type: object\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n        files:\n          type: array\n          items:\n            $ref: '#/components/schemas/FileUploadStatus'\n        images:\n          type: array\n          items:\n            $ref: '#/components/schemas/ImageUploadStatus'\n\n    FileUploadRequest:\n     type: object\n     properties:\n      filename:\n        type: string\n      size:\n        type: integer\n\n    ImageUploadRequest:\n      type: object\n      properties:\n        filename:\n          type: string\n        size:\n          type: integer\n\n    FileUploadStatus:\n      type: object\n      properties:\n        upload_id:\n          type: string\n        filename:\n          type: string\n        status:\n          type: string\n\n    ImageUploadStatus:\n      type: object\n      properties:\n        upload_id:\n          type: string\n        filename:\n          type: string\n        status:\n          type: string\n\n    FileUploadId:\n      type: object\n      properties:\n        upload_id:\n          type: string\n        filename:\n          type: string\n\n    ImageUploadId:\n      type: object\n      properties:\n        upload_id:\n          type: string\n        filename:\n          type: string\n\n    License:\n      type: object\n      properties:\n        type:\n          type: string\n          description: \"Possible values are: 'mention', 'remix', 'commercial-use', 'exclusivity', 'share', 'store'\"\n        value:\n          type: boolean\n\n    Comment:\n      type: object\n      properties:\n        id:\n          type: integer\n        foreign_entity_id:\n          type: integer\n        parent_comment_id:\n          type: integer\n        date_posted:\n          type: string\n          description: The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.\n        is_print:\n          type: boolean\n        status:\n          type: string\n        user:\n          $ref: '#/components/schemas/User'\n        comment:\n          type: string\n        attachments:\n          type: array\n          items:\n            $ref: '#/components/schemas/Image'\n    CommentPayload:\n      type: object\n      properties:\n        entity_type:\n          type: string\n        entity_id:\n          type: integer\n        parent_id:\n          type: integer\n          description: To nest a comment under another.\n        comment:\n          type: string\n        is_print:\n          type: boolean\n        attachments:\n          type: array\n          items:\n            type: object\n            properties:\n              upload_id:\n                type: string\n              filename:\n                type: string\n        machine:\n          type: string\n        material:\n          type: string\n    Idea:\n        type: object\n        properties:\n          id:\n            type: integer\n          url:\n            type: string\n          title:\n            type: string\n          instigator:\n            $ref: '#/components/schemas/User'\n          description:\n            type: string\n          images:\n            $ref: '#/components/schemas/Image'\n          tags:\n            type: array\n            items:\n              type: string\n          votes:\n            type: integer\n          date_created:\n            type: string\n            description: 'The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.'\n          deadline_date:\n            type: string\n            description: 'The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.'\n          status:\n            type: string\n          coolab:\n            type: boolean\n            description: 'The initiator allows collaboration on their project or not'\n    Post:\n      type: object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        body:\n          type: string\n        slug:\n          type: string\n        url:\n          type: string\n        cover_url:\n          type: string\n        published_at:\n          type: string\n        likes:\n          type: integer\n        visibility:\n          type: integer\n        comments_visible:\n          type: boolean\n        user:\n          $ref: '#/components/schemas/User'\n        is_liked:\n          type: boolean\n          default: false\n          description: Whether this object has been liked. Available for oauth2 connected user.\n    Competition:\n        type: object\n        properties:\n          id:\n            type: integer\n          url:\n            type: string\n          title:\n            type: string\n          summary:\n            type: string\n          date_created:\n            type: string\n            description: 'The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.'\n          submission_deadline:\n            type: string\n            description: 'The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.'\n          voting_deadline:\n            type: string\n            description: 'The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.'\n          status:\n            type: string\n          sections:\n            $ref: '#/components/schemas/CompetitionSection'\n    CompetitionPayload:\n        type: object\n        properties:\n          title:\n            type: string\n          summary:\n            type: string\n          submission_deadline:\n            type: string\n            description: 'The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.'\n          voting_deadline:\n            type: string\n            description: 'The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.'\n          status:\n            type: string\n          sections:\n            $ref: '#/components/schemas/CompetitionSection'\n    CompetitionSection:\n        type: object\n        properties:\n          id:\n            type: integer\n          type:\n            type: string\n          body:\n            type: string\n",
			"canonicalURL": "/github.com/MyMiniFactory/api-documentation@36c1b4024c36694af0b954fe3648f159910abda1/-/blob/myminifactory-api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/MyMiniFactory/api-documentation/blob/36c1b4024c36694af0b954fe3648f159910abda1/myminifactory-api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/blog/posts\": get: operation \"getBlogPosts\": security: at 1:19161: unknown security schema \"oauth2\""
}