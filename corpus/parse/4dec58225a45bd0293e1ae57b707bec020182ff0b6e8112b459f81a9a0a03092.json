{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/denoland/apiland"
		},
		"file": {
			"name": "api-2.0.0.yaml",
			"size": 0,
			"path": "specs/api-2.0.0.yaml",
			"byteSize": 68001,
			"content": "---\nopenapi: 3.1.0\ninfo:\n  title: Deno Land APIs\n  description: Describes the API available on api.deno.land.\n  contact:\n    url: https://deno.land/\n  version: 2.0.0\n  license:\n    name: MIT\n    url: https://github.com/denoland/apiland/LICENSE.md\nservers:\n  - url: https://apiland.deno.dev\n    description: The latest deployment of this repository on Deploy.\nsecurity:\n  - bearerAuth: []\ntags:\n- name: registry\n  description: Information about the module registry.\n- name: pages\n  description: Endpoints for rendering pages.\n- name: metrics\n  description: Metric information.\n- name: completions\n  description: Endpoints for intelligent editor completions.\n- name: badges\n  description: Endpoints providing badge information.\n- name: webhooks\n  description: Endpoints used for integration.\n- name: infrastructure\n  description: APIs that relate to internal infrastructure.\npaths:\n  /completions/items/{mod}:\n    get:\n      tags:\n        - completions\n      summary: Get module completion items.\n      description: \u003e\n        Return a list of modules from the registry which can be imported.\n      operationId: getCompletionItemsMod\n      parameters:\n        - name: mod\n          in: path\n          description: The module name or search term\n          required: false\n          schema:\n            $ref: \"#/components/schemas/ModuleName\"\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CompletionItems\"\n        \"404\":\n          description: \u003e\n            Not found - no resources for the given query were found. Try\n            changing the query parameters.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HttpError\"\n            text/html:\n              schema:\n                type: string\n  /completions/items/{mod}/{ver}:\n    get:\n      tags:\n        - completions\n      summary: Get module version completion items.\n      description: \u003e\n        Return a list of module versions from the registry which can be\n        imported.\n      operationId: getCompletionItemsModVer\n      parameters:\n        - name: mod\n          in: path\n          description: The module name\n          required: true\n          schema:\n            $ref: \"#/components/schemas/ModuleName\"\n        - name: ver\n          in: path\n          description: The version or partial version\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CompletionItems\"\n        \"404\":\n          description: \u003e\n            Not found - no resources for the given query were found. Try\n            changing the query parameters.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HttpError\"\n            text/html:\n              schema:\n                type: string\n  /completions/items/{mod}/{ver}/{path}:\n    get:\n      tags:\n        - completions\n      summary: Get path completion items.\n      description: \u003e\n        Return a list of paths from the registry which can be\n        imported or directories which contain paths which can be imported.\n      operationId: getCompletionItemsPath\n      parameters:\n        - name: mod\n          in: path\n          description: The module name\n          required: true\n          schema:\n            $ref: \"#/components/schemas/ModuleName\"\n        - name: ver\n          in: path\n          description: The version or partial version\n          required: true\n          schema:\n            type: string\n        - name: path\n          in: path\n          description: The path or partial path.\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CompletionItems\"\n        \"404\":\n          description: \u003e\n            Not found - no resources for the given query were found. Try\n            changing the query parameters.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HttpError\"\n            text/html:\n              schema:\n                type: string\n  /completions/resolve/{mod}:\n    get:\n      tags:\n        - completions\n      summary: Get module completion docs.\n      description: Return documentation, if any, for a module.\n      operationId: getCompletionItemDocMod\n      parameters:\n        - name: mod\n          in: path\n          required: true\n          schema:\n            $ref: \"#/components/schemas/ModuleName\"\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CompletionItemDoc\"\n        \"404\":\n          description: \u003e\n            Not found - no resources for the given query were found. Try\n            changing the query parameters.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HttpError\"\n            text/html:\n              schema:\n                type: string\n  /completions/resolve/{mod}/{ver}:\n    get:\n      tags:\n        - completions\n      summary: Get module completion docs.\n      description: Return documentation, if any, for a module.\n      operationId: getCompletionItemDocModVer\n      parameters:\n        - name: mod\n          in: path\n          required: true\n          schema:\n            $ref: \"#/components/schemas/ModuleName\"\n        - name: ver\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CompletionItemDoc\"\n        \"404\":\n          description: \u003e\n            Not found - no resources for the given query were found. Try\n            changing the query parameters.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HttpError\"\n            text/html:\n              schema:\n                type: string\n  /completions/resolve/{mod}/{ver}/{path}:\n    get:\n      tags:\n        - completions\n      summary: Get documentation for a path.\n      description: \u003e\n        If found, return any documentation associated with a path for display\n        in a client.\n      operationId: getCompletionItemDocPath\n      parameters:\n        - name: mod\n          in: path\n          description: The module name\n          required: true\n          schema:\n            $ref: \"#/components/schemas/ModuleName\"\n        - name: ver\n          in: path\n          description: The version or partial version\n          required: true\n          schema:\n            type: string\n        - name: path\n          in: path\n          description: The path or partial path.\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CompletionItemDoc\"\n        \"404\":\n          description: \u003e\n            Not found - no resources for the given query were found. Try\n            changing the query parameters.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HttpError\"\n            text/html:\n              schema:\n                type: string\n  /v2/metrics/apis:\n    get:\n      tags:\n        - metrics\n      summary: Get built-in API metrics.\n      description: \u003e\n        Provides a object which contains metrics about the built-in APIs in\n        Deno CLI.\n      operationId: getAPIMetrics\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIMetrics\"\n        \"404\":\n          description: \u003e\n            Not found - no resources for the given query were found. Try\n            changing the query parameters.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HttpError\"\n            text/html:\n              schema:\n                type: string\n  /v2/metrics/dependencies:\n    get:\n      tags:\n        - registry\n        - metrics\n      summary: List dependency metrics.\n      description: \u003e \n        Provides objects by dependency source containing metrics about what\n        deno.land/x modules depend on code at that source.\n      operationId: getDependencyMetrics\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  items:\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/DependencyMetrics\"\n                required:\n                  - \"items\"\n        \"404\":\n          description: \u003e\n            Not found - no resources for the given query were found. Try\n            changing the query parameters.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HttpError\"\n            text/html:\n              schema:\n                type: string\n  /v2/metrics/dependencies/{source}:\n    get:\n      tags:\n        - registry\n        - metrics\n      summary: List dependency metrics for a source.\n      description: \u003e \n        Provides objects by dependency source containing metrics about what\n        deno.land/x modules depend on code at that source.\n      operationId: getDependencyMetricsSource\n      parameters:\n        - name: source\n          in: path\n          description: Source name\n          required: true\n          schema:\n            type: string\n            example: \"deno.land/x\"\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  items:\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/DependencyMetrics\"\n                required:\n                  - \"items\"\n        \"404\":\n          description: \u003e\n            Not found - no resources for the given query were found. Try\n            changing the query parameters.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HttpError\"\n            text/html:\n              schema:\n                type: string\n  /v2/metrics/modules:\n    get:\n      tags:\n      - registry\n      - metrics\n      summary: Lists module metrics.\n      description: Provides a list of metrics for modules.\n      operationId: getModulesMetrics\n      parameters:\n        - name: limit\n          in: query\n          description: The number of items to limit the response to.\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 100\n        - name: page\n          in: query\n          description: \u003e\n            The page number to use as an offset for results. It is a 1 based\n            index. Must be used in conjunction with `limit`.\n          schema:\n            type: integer\n            minimum: 1\n        - name: orderBy\n          in: query\n          description: \u003e\n            The popularity field to order the results by, defaults to `score`.\n          schema:\n            type: string\n            example: \"users_30_day\"\n      responses:\n        \"200\":\n          description: A JSON array of registered modules.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ModuleMetricList\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HttpError\"\n            text/html:\n                schema:\n                  type: string\n        \"404\":\n          description: \u003e\n            Not found - no resources for the given query were found. Try\n            changing the query parameters.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HttpError\"\n            text/html:\n              schema:\n                type: string\n  /v2/metrics/modules/{module}:\n      get:\n        tags:\n          - registry\n          - metrics\n        summary: Get metrics about a module.\n        description: \u003e\n          Returns an object which provides metrics about a module across\n          popularity, quality, and maintenance.\n        operationId: getModuleMetrics\n        parameters:\n          - name: module\n            in: path\n            required: true\n            schema:\n              $ref: \"#/components/schemas/ModuleName\"\n        responses:\n          \"200\":\n            description: successful operation\n            content:\n              application/json:\n                schema:\n                  $ref: \"#/components/schemas/ModuleMetricsInfo\"\n          \"404\":\n            description: Not found - the requested resource was not found\n            content:\n              application/json:\n                schema:\n                  $ref: \"#/components/schemas/HttpError\"\n              text/html:\n                schema:\n                  type: string\n  /v2/metrics/submodules/{submodule}:\n    get:\n      tags:\n      - registry\n      - metrics\n      summary: Lists sub-module metrics.\n      description: Provides a list of metrics for submodules for a module.\n      operationId: getSubModuleMetrics\n      parameters:\n        - name: submodule\n          in: path\n          required: true\n          schema:\n            type: string\n            example: \"oak\"\n        - name: limit\n          in: query\n          description: The number of items to limit the response to.\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 100\n        - name: page\n          in: query\n          description: \u003e\n            The page number to use as an offset for results. It is a 1 based\n            index. Must be used in conjunction with `limit`.\n          schema:\n            type: integer\n            minimum: 1\n      responses:\n        \"200\":\n          description: A JSON array of submodule metrics.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/SubModuleMetricList\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HttpError\"\n            text/html:\n                schema:\n                  type: string\n        \"404\":\n          description: \u003e\n            Not found - no resources for the given query were found. Try\n            changing the query parameters.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HttpError\"\n            text/html:\n              schema:\n                type: string\n  /v2/metrics/usage/{module}:\n    get:\n      tags:\n      - registry\n      - metrics\n      summary: Provides usage metrics.\n      description: For a given module, return the usage metrics for that module.\n      operationId: getUsageMetrics\n      parameters:\n        - name: module\n          in: path\n          required: true\n          schema:\n            $ref: \"#/components/schemas/ModuleName\"\n      responses:\n        \"200\":\n          description: An object containing usage information.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ModuleUsage\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HttpError\"\n            text/html:\n                schema:\n                  type: string\n        \"404\":\n          description: \u003e\n            Not found - no resources for the given query were found. Try\n            changing the query parameters.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HttpError\"\n            text/html:\n              schema:\n                type: string\n  /v2/modules:\n    get:\n      tags:\n      - registry\n      summary: Lists registered modules.\n      description: Provides a list of registered modules.\n      operationId: getModules\n      parameters:\n        - name: limit\n          in: query\n          description: The number of items to limit the response to.\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 100\n        - name: page\n          in: query\n          description: \u003e\n            The page number to use as an offset for results. It is a 1 based\n            index. Must be used in conjunction with `limit`.\n          schema:\n            type: integer\n            minimum: 1\n      responses:\n        \"200\":\n          description: A JSON array of registered modules.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ModuleList\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HttpError\"\n            text/html:\n                schema:\n                  type: string\n        \"404\":\n          description: \u003e\n            Not found - no resources for the given query were found. Try\n            changing the query parameters.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HttpError\"\n            text/html:\n              schema:\n                type: string\n  /v2/modules/{module}:\n    get:\n      tags:\n        - registry\n      summary: Gets information about a module.\n      description: \u003e\n        This resource represents an individual registered module repository.\n      operationId: getModule\n      parameters:\n        - name: module\n          in: path\n          description: Module name\n          required: true\n          schema:\n            $ref: \"#/components/schemas/ModuleName\"\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Module\"\n        \"404\":\n          description: Not found - the requested resource was not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HttpError\"\n            text/html:\n              schema:\n                type: string\n  /v2/modules/{module}/{version}:\n    get:\n      tags:\n        - registry\n      summary: Get information about a module version.\n      description: \u003e\n        Returns information about a specific version of a module available in\n        the registry.\n      operationId: getModuleVersion\n      parameters:\n        - name: module\n          in: path\n          required: true\n          schema:\n            $ref: \"#/components/schemas/ModuleName\"\n        - name: version\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ModuleVersion\"\n        \"302\":\n          description: \u003e\n            Found - The latest version has been found. This is sent when \n            `__latest__` is used as the version.\n          headers:\n            Location:\n              schema:\n                type: string\n            X-Deno-Module:\n              schema:\n                $ref: \"#/components/schemas/ModuleName\"\n            X-Deno-Latest-Version:\n              schema:\n                type: string\n        \"404\":\n          description: Not found - the requested resource was not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HttpError\"\n            text/html:\n              schema:\n                type: string\n  /v2/modules/{module}/{version}/doc:\n    post:\n      tags:\n        - registry\n      summary: Get doc nodes for a module.\n      description: \u003e\n        Get doc nodes for a module filtered by the array of paths provided in\n        the request body.\n      operationId: getModuleVersionDocs\n      parameters:\n        - name: module\n          in: path\n          required: true\n          schema:\n            $ref: \"#/components/schemas/ModuleName\"\n        - name: version\n          in: path\n          required: true\n          schema:\n            type: string\n            example: v10.0.1\n      requestBody:\n        description: An array of paths to lookup.\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                type: string\n              example: [\"/mod.ts\", \"/lib/mod.ts\"]\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/DocNodeByEntry\"\n        \"404\":\n          description: Not found - the requested resource was not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HttpError\"\n            text/html:\n              schema:\n                type: string\n  /v2/modules/{module}/{version}/doc/{path}:\n    get:\n      tags:\n        - registry\n      summary: Get doc nodes for a file.\n      description: \u003e\n        Get doc nodes for a file.\n      operationId: getModuleVersionDocByPath\n      parameters:\n        - name: module\n          in: path\n          required: true\n          schema:\n            $ref: \"#/components/schemas/ModuleName\"\n        - name: version\n          in: path\n          required: true\n          schema:\n            type: string\n            example: v10.0.1\n        - name: path\n          in: path\n          required: true\n          schema:\n            type: string\n            example: mod.ts\n        - name: kind\n          in: query\n          description: \u003e\n            Filter the results based on DocNode kind.\n          schema:\n            $ref: \"#/components/schemas/DocNodeKind\"\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/DocNode\"\n        \"404\":\n          description: Not found - the requested resource was not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HttpError\"\n            text/html:\n              schema:\n                type: string\n  /v2/modules/{module}/{version}/index:\n    get:\n      tags:\n        - registry\n      summary: Get an index map of modules.\n      description: \u003e\n        Responds with an object containing an `index` and `docs` properties. \n        The `index` is a map of folders and the modules inside those folders.\n        Items marked as private or obvious tests are filtered out. The `docs` is\n        any module level JSDoc available for the module.\n      operationId: getModuleVersionIndex\n      parameters:\n        - name: module\n          in: path\n          required: true\n          schema:\n            $ref: \"#/components/schemas/ModuleName\"\n        - name: version\n          in: path\n          required: true\n          schema:\n            type: string\n            example: v10.0.1\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/IndexDoc\"\n        \"404\":\n          description: Not found - the requested resource was not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HttpError\"\n            text/html:\n              schema:\n                type: string\n  /v2/modules/{module}/{version}/index/{path}:\n    get:\n      tags:\n        - registry\n      summary: Get a sub index map of modules.\n      description: \u003e\n        Responds with an object containing an `index` and `docs` properties for\n        a given path. The `index` is a map of folders and the modules inside\n        those folders. Items marked as private or obvious tests are filtered\n        out. The `docs` is any module level JSDoc available for the module.\n      operationId: getModuleVersionIndexByPath\n      parameters:\n        - name: module\n          in: path\n          required: true\n          schema:\n            $ref: \"#/components/schemas/ModuleName\"\n        - name: version\n          in: path\n          required: true\n          schema:\n            type: string\n            example: v10.0.1\n        - name: path\n          in: path\n          required: true\n          schema:\n            type: string\n            example: src\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/IndexDoc\"\n        \"404\":\n          description: Not found - the requested resource was not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HttpError\"\n            text/html:\n              schema:\n                type: string\n  /v2/modules/{module}/{version}/raw/{path}:\n    get:\n      tags:\n        - registry\n      summary: Get raw content for a file.\n      operationId: getModuleVersionPathRaw\n      parameters:\n        - name: module\n          in: path\n          required: true\n          schema:\n            $ref: \"#/components/schemas/ModuleName\"\n        - name: version\n          in: path\n          required: true\n          schema:\n            type: string\n            example: v10.0.1\n        - name: path\n          in: path\n          required: true\n          schema:\n            type: string\n            example: mod.ts\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/*:\n              schema:\n                type: string\n                format: binary\n            text/*:\n              schema:\n                type: string\n                format: binary\n        \"404\":\n          description: Not found - the requested resource was not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HttpError\"\n            text/html:\n              schema:\n                type: string\n  /v2/pages/mod/source/{module}/{version}:\n    get:\n      tags:\n        - pages\n      summary: Get information about a module to render a source view of a root.\n      description: \u003e\n        Responds with all the information needed to render a root source view of\n        a module.\n      operationId: getSourcePageInfo\n      parameters:\n        - name: module\n          in: path\n          required: true\n          schema:\n            $ref: \"#/components/schemas/ModuleName\"\n        - name: version\n          in: path\n          required: true\n          schema:\n            type: string\n            example: \"0.148.0\"\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SourcePage\"\n        \"400\":\n          description: Bad Request - the request was malformed.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HttpError\"\n            text/html:\n              schema:\n                type: string\n        \"301\":\n          description: Moved - This page has a different location\n          headers:\n            Location:\n              schema:\n                type: string\n            X-Deno-Module:\n              schema:\n                $ref: \"#/components/schemas/ModuleName\"\n            X-Deno-Version:\n              schema:\n                type: string\n            X-Deno-Path:\n              schema:\n                type: string\n        \"302\":\n          description: \u003e\n            Found - The latest version has been found. This is sent when \n            `__latest__` is used as the version.\n          headers:\n            Location:\n              schema:\n                type: string\n            X-Deno-Module:\n              schema:\n                $ref: \"#/components/schemas/ModuleName\"\n            X-Deno-Latest-Version:\n              schema:\n                type: string\n        \"404\":\n          description: Not found - the requested resource was not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HttpError\"\n            text/html:\n              schema:\n                type: string\n  /v2/pages/mod/source/{module}/{version}/{path}:\n    get:\n      tags:\n        - pages\n      summary: Get information about a module to render a source view.\n      description: \u003e\n        Responds with all the information needed to render a a source view of an\n        entry of a module.\n      operationId: getSourcePagePathInfo\n      parameters:\n        - name: module\n          in: path\n          required: true\n          schema:\n            $ref: \"#/components/schemas/ModuleName\"\n        - name: version\n          in: path\n          required: true\n          schema:\n            type: string\n            example: \"0.148.0\"\n        - name: path\n          in: path\n          required: true\n          schema:\n            type: string\n            example: \"mod.ts\"\n        - name: symbol\n          in: query\n          description: \u003e\n            The specific symbol to search for. If searching for a symbol on non-\n            module path, a Bad Request will be returned. To search for a\n            namespaced symbol, deliminate using the `.` (e.g.\n            `namespace.Value`).\n          schema:\n            type: string\n            example: \"AClass\"\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SourcePage\"\n        \"400\":\n          description: Bad Request - the request was malformed.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HttpError\"\n            text/html:\n              schema:\n                type: string\n        \"404\":\n          description: Not found - the requested resource was not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HttpError\"\n            text/html:\n              schema:\n                type: string\n  /v2/pages/lib/doc/{library}/{version}:\n    get:\n      tags:\n        - pages\n      summary: Get information about a library to render a doc page.\n      description: \u003e\n        Responds with all the information needed to render a doc page of a\n        library.\n      operationId: getLibDocPageInfo\n      parameters:\n        - name: library\n          in: path\n          required: true\n          schema:\n            $ref: \"#/components/schemas/ModuleName\"\n        - name: version\n          in: path\n          required: true\n          schema:\n            type: string\n            example: \"1.23.0\"\n        - name: symbol\n          in: query\n          description: \u003e\n            The specific symbol to search for. If searching for a symbol on non-\n            module path, a Bad Request will be returned. To search for a\n            namespaced symbol, deliminate using the `.` (e.g.\n            `namespace.Value`).\n          schema:\n            type: string\n            example: \"Deno.errors\"\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LibDocPage\"\n        \"400\":\n          description: Bad Request - the request was malformed.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HttpError\"\n            text/html:\n              schema:\n                type: string\n        \"404\":\n          description: Not found - the requested resource was not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HttpError\"\n            text/html:\n              schema:\n                type: string\n  /v2/pages/mod/doc/{module}/{version}:\n    get:\n      tags:\n        - pages\n      summary: Get information about a module to render the root doc page.\n      description: \u003e\n        Responds with all the information needed to render a root doc page of a\n        module.\n      operationId: getModDocPageInfo\n      parameters:\n        - name: module\n          in: path\n          required: true\n          schema:\n            $ref: \"#/components/schemas/ModuleName\"\n        - name: version\n          in: path\n          required: true\n          schema:\n            type: string\n            example: \"0.148.0\"\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DocPage\"\n        \"400\":\n          description: Bad Request - the request was malformed.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HttpError\"\n            text/html:\n              schema:\n                type: string\n        \"301\":\n          description: Moved - This page has a different location\n          headers:\n            Location:\n              schema:\n                type: string\n            X-Deno-Module:\n              schema:\n                $ref: \"#/components/schemas/ModuleName\"\n            X-Deno-Version:\n              schema:\n                type: string\n            X-Deno-Path:\n              schema:\n                type: string\n        \"302\":\n          description: \u003e\n            Found - The latest version has been found. This is sent when \n            `__latest__` is used as the version.\n          headers:\n            Location:\n              schema:\n                type: string\n            X-Deno-Module:\n              schema:\n                $ref: \"#/components/schemas/ModuleName\"\n            X-Deno-Latest-Version:\n              schema:\n                type: string\n        \"404\":\n          description: Not found - the requested resource was not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HttpError\"\n            text/html:\n              schema:\n                type: string\n  /v2/pages/mod/doc/{module}/{version}/{path}:\n    get:\n      tags:\n        - pages\n      summary: Get information about a module to render a doc page.\n      description: \u003e\n        Responds with all the information needed to render a doc page of a\n        module.\n      operationId: getModDocPagePathInfo\n      parameters:\n        - name: module\n          in: path\n          required: true\n          schema:\n            $ref: \"#/components/schemas/ModuleName\"\n        - name: version\n          in: path\n          required: true\n          schema:\n            type: string\n            example: \"0.148.0\"\n        - name: path\n          in: path\n          required: true\n          schema:\n            type: string\n            example: \"mod.ts\"\n        - name: symbol\n          in: query\n          description: \u003e\n            The specific symbol to search for. If searching for a symbol on non-\n            module path, a Bad Request will be returned. To search for a\n            namespaced symbol, deliminate using the `.` (e.g.\n            `namespace.Value`).\n          schema:\n            type: string\n            example: \"AClass\"\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DocPage\"\n        \"400\":\n          description: Bad Request - the request was malformed.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HttpError\"\n            text/html:\n              schema:\n                type: string\n        \"404\":\n          description: Not found - the requested resource was not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HttpError\"\n            text/html:\n              schema:\n                type: string\n  /v2/pages/mod/info/{module}/{version}:\n    get:\n      tags:\n        - pages\n      summary: Get information about a module to render a doc page.\n      description: \u003e\n        Responds with all the information needed to render a doc page of a\n        module.\n      operationId: getPageModInfo\n      parameters:\n        - name: module\n          in: path\n          required: true\n          schema:\n            $ref: \"#/components/schemas/ModuleName\"\n        - name: version\n          in: path\n          required: true\n          schema:\n            type: string\n            example: \"0.148.0\"\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InfoPage\"\n        \"404\":\n          description: Not found - the requested resource was not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HttpError\"\n            text/html:\n              schema:\n                type: string\n  /v2/symbols/global:\n    get:\n      tags:\n        - symbols\n      summary: Get global symbol information\n      description: \u003e\n        Return an array of global symbol items which can be used to determine\n        what symbols are in the scope of Deno CLI's runtime environment.\n      operationId: getGlobalSymbols\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/GlobalSymbolItem\"\n        \"404\":\n          description: Not found - the requested resource was not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HttpError\"\n            text/html:\n              schema:\n                type: string\n  /shields/{module}/popularity:\n    get:\n      tags:\n        - badges\n      summary: A shield payload for popularity\n      description: \u003e\n        Return a JSON payload which can be used on shields.io to generate a\n        badge representing how popular a package is on deno.land/x.\n      operationId: getBadgeModulePopularity\n      parameters:\n        - name: module\n          in: path\n          required: true\n          schema:\n            $ref: \"#/components/schemas/ModuleName\"\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ShieldsPayload\"\n        \"404\":\n          description: Not found - the requested resource was not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HttpError\"\n            text/html:\n              schema:\n                type: string\n  /shields/{module}/version:\n    get:\n      tags:\n        - badges\n      summary: A shield payload for latest version\n      description: \u003e\n        Return a JSON payload which can be used on shields.io to generate a\n        badge representing the latest version published on deno.land/x.\n      operationId: getBadgeModuleVersion\n      parameters:\n        - name: module\n          in: path\n          required: true\n          schema:\n            $ref: \"#/components/schemas/ModuleName\"\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ShieldsPayload\"\n        \"404\":\n          description: Not found - the requested resource was not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HttpError\"\n            text/html:\n              schema:\n                type: string\n  /webhook/publish:\n    post:\n      tags:\n        - webhooks\n      summary: A module has been published.\n      description: \u003e\n        A module has been published and apiland should add the module to the\n        datastore.\n      operationId: postWebhookPublish\n      requestBody:\n        description: Information about the publish event\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PublishEvent\"\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/WebhookResponse\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HttpError\"\n            text/html:\n              schema:\n                type: string\n  /ping:\n    get:\n      tags:\n        - infrastructure\n      summary: Server heartbeat operation\n      description: \u003e\n        This operation shows how to override the global security defined above,\n        as we want to open it up for all users.\n      operationId: getPing\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/pong\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HttpError\"\ncomponents:\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n  schemas:\n    APIMetrics:\n      type: object\n      additionalProperties:\n        $ref: \"#/components/schemas/APIViews\"\n    APIViews:\n      type: object\n      properties:\n        total:\n          $ref: \"#/components/schemas/Views\"\n        symbols:\n          type: object\n          additionalProperties:\n            $ref: \"#/components/schemas/Views\"\n      required:\n        - \"total\"\n        - \"symbols\"\n    CompletionItemDoc:\n      type: object\n      properties:\n        kind:\n          type: string\n          enum:\n            - \"markdown\"\n            - \"text\"\n        value:\n          type: string\n      required:\n        - \"kind\"\n        - \"value\"\n    CompletionItems:\n      type: object\n      properties:\n        items:\n          type: array\n          items:\n            type: string\n        isIncomplete:\n          type: boolean\n        preselect:\n          type: string\n      required:\n        - items\n        - isIncomplete\n    DeclarationKind:\n      type: string\n      enum:\n        - private\n        - export\n        - declare\n    DependencyError:\n      type: object\n      properties:\n        specifier:\n          type: string\n        error:\n          type: string\n      required:\n        - \"specifier\"\n        - \"error\"\n    DependencyMetrics:\n      type: object\n      properties:\n        source:\n          type: string\n          example: \"deno.land/x\"\n        count:\n          type: integer\n          example: 4521\n        mods:\n          type: object\n          additionalProperties:\n            $ref: \"#/components/schemas/DependencyModuleMetrics\"\n      required:\n        - \"source\"\n        - \"count\"\n        - \"mods\"\n    DependencyModuleMetrics:\n      type: object\n      properties:\n        count:\n          type: integer\n          example: 4251\n        dependents:\n          type: array\n          items:\n            type: string\n        dependent_versions:\n          type: array\n          items:\n            type: string\n        versions:\n          type: object\n          additionalProperties:\n            type: integer\n    DocNode:\n      type: object\n      properties:\n        kind:\n          $ref: \"#/components/schemas/DocNodeKind\"\n        jsDoc:\n          $ref: \"#/components/schemas/JsDoc\"\n    DocNodeArray:\n      type: array\n      items:\n        $ref: \"#/components/schemas/DocNode\"\n    DocNodeByEntry:\n      type: object\n      additionalProperties:\n        $ref: \"#/components/schemas/DocNodeArray\"\n    DocNodeKind:\n      type: string\n      enum:\n        - moduleDoc\n        - function\n        - variable\n        - enum\n        - class\n        - typeAlias\n        - namespace\n        - interface\n        - import\n    DocPage:\n      oneOf:\n        - $ref: \"#/components/schemas/DocPageSymbol\"\n        - $ref: \"#/components/schemas/DocPageModule\"\n        - $ref: \"#/components/schemas/DocPageIndex\"\n        - $ref: \"#/components/schemas/DocPageFile\"\n        - $ref: \"#/components/schemas/PageInvalidVersion\"\n        - $ref: \"#/components/schemas/PagePathNotFound\"\n      discriminator:\n        propertyName: kind\n        mapping:\n          symbol: \"#/components/schemas/DocPageSymbol\"\n          module: \"#/components/schemas/DocPageModule\"\n          index: \"#/components/schemas/DocPageIndex\"\n          file: \"#/components/schemas/DocPageFile\"\n          invalid-version: \"#/components/schemas/PageInvalidVersion\"\n          notfound: \"#/components/schemas/PagePathNotFound\"\n    DocPageDirItem:\n      type: object\n      properties:\n        kind:\n          type: string\n          example: dir\n        path:\n          type: string\n          example: \"/\"\n      required:\n        - \"kind\"\n        - \"path\"\n    DocPageFile:\n      allOf:\n        - $ref: \"#/components/schemas/PageBase\"\n    DocPageIndex:\n      allOf:\n        - $ref: \"#/components/schemas/PageBase\"\n        - type: object\n          properties:\n            items:\n              type: array\n              items:\n                $ref: \"#/components/schemas/IndexItem\"\n          required:\n            - \"items\"\n    DocPageLibrary:\n      allOf:\n        - $ref: \"#/components/schemas/DocPageLibraryBase\"\n        - type: object\n          properties:\n            items:\n              type: array\n              items:\n                $ref: \"#/components/schemas/SymbolItem\"\n          required:\n            - \"items\"\n    DocPageLibraryBase:\n      type: object\n      properties:\n        kind:\n          type: string\n          example: library\n        name:\n          type: string\n          example: deno_stable\n        version:\n          type: string\n          example: \"1.23.0\"\n        versions:\n          type: array\n          items:\n            type: string\n        latest_version:\n          type: string\n          example: \"1.23.0\"\n      required:\n        - \"kind\"\n        - \"name\"\n        - \"version\"\n        - \"versions\"\n        - \"latest_version\"\n    DocPageLibraryInvalidVersion:\n      type: object\n      properties:\n        kind:\n          type: string\n          example: libraryInvalidVersion\n        name:\n          type: string\n          example: deno_stable\n        versions:\n          type: array\n          items:\n            type: string\n        latest_version:\n          type: string\n          example: \"1.23.0\"\n      required:\n        - \"kind\"\n        - \"name\"\n        - \"versions\"\n        - \"latest_version\"\n    DocPageLibrarySymbol:\n      allOf:\n        - $ref: \"#/components/schemas/DocPageLibraryBase\"\n        - type: object\n          properties:\n            items:\n              type: array\n              items:\n                $ref: \"#/components/schemas/SymbolItem\"\n            docNodes:\n              items:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/DocNode\"\n          required:\n            - \"items\"\n            - \"docNodes\"\n    DocPageModule:\n      allOf:\n        - $ref: \"#/components/schemas/PageBase\"\n        - type: object\n          properties:\n            nav:\n              type: array\n              items:\n                $ref: \"#/components/schemas/DocPageNavItem\"\n            docNodes:\n              $ref: \"#/components/schemas/DocNodeArray\"\n            symbols:\n              type: array\n              items:\n                $ref: \"#/components/schemas/SymbolIndexItem\"\n          required:\n            - \"nav\"\n            - \"docNodes\"\n    DocPageModuleItem:\n      type: object\n      properties:\n        kind:\n          type: string\n          example: module\n        path:\n          type: string\n          example: \"/mod.ts\"\n        items:\n          type: array\n          items:\n            $ref: \"#/components/schemas/SymbolItem\"\n      required:\n        - \"kind\"\n        - \"path\"\n        - \"items\"\n    DocPageNavItem:\n      oneOf:\n        - $ref: \"#/components/schemas/DocPageDirItem\"\n        - $ref: \"#/components/schemas/DocPageModuleItem\"\n      discriminator:\n        propertyName: kind\n        mapping:\n          dir: \"#/components/schemas/DocPageDirItem\"\n          module: \"#/components/schemas/DocPageModuleItem\"\n    DocPageSymbol:\n      allOf:\n        - $ref: \"#/components/schemas/PageBase\"\n        - type: object\n          properties:\n            nav:\n              type: array\n              items:\n                $ref: \"#/components/schemas/DocPageNavItem\"\n            name:\n              type: string\n              example: \"AClass\"\n            docNodes:\n              $ref: \"#/components/schemas/DocNodeArray\"\n            symbols:\n              type: array\n              items:\n                $ref: \"#/components/schemas/SymbolIndexItem\"\n          required:\n            - \"nav\"\n            - \"name\"\n            - \"docNodes\"\n    GlobalSymbolItem:\n      type: object\n      properties:\n        name: \n          type: string\n        library:\n          type: string\n          enum:\n            - \"deno\"\n            - \"esnext\"\n        unstable:\n          type: boolean\n      required:\n        - \"name\"\n        - \"library\"\n    HttpError:\n      type: object\n      properties:\n        status:\n          type: number\n          minimum: 400\n          maximum: 599\n          example: 400\n        statusText:\n          type: string\n          example: Bad Request\n        message:\n          type: string\n          example: Parameter \"page\" must be 1 or greater.\n        stack:\n          type: string\n          example: BadRequestError - Parameter \"page\" must be 1 or greater.\n      required:\n        - status\n        - statusText\n        - message\n    IndexItem:\n      type: object\n      properties:\n        kind:\n          type: string\n          enum:\n            - dir\n            - module\n            - file\n        path:\n          type: string\n          example: \"/mod.ts\"\n        size:\n          type: number\n          example: 563245\n        ignored:\n          type: boolean\n        doc:\n          type: string\n          example: \"Some documentation for item\"\n      required:\n        - \"kind\"\n        - \"path\"\n        - \"size\"\n        - \"ignored\"\n    InfoPage:\n      oneOf:\n        - $ref: \"#/components/schemas/ModInfoPage\"\n        - $ref: \"#/components/schemas/PageInvalidVersion\"\n      discriminator:\n        propertyName: kind\n        mapping:\n          modinfo: \"#/components/schemas/ModInfoPage\"\n          invalid-version: \"#/components/schemas/PageInvalidVersion\"\n    JsDoc:\n      type: object\n      properties:\n        doc:\n          type: string\n        tags:\n          type: array\n          items:\n            $ref: \"#/components/schemas/JsDocTag\"\n    JsDocMap:\n      type: object\n      additionalProperties:\n        $ref: \"#/components/schemas/JsDoc\"\n    JsDocTag:\n      type: object\n      properties:\n        kind:\n          type: string\n          enum:\n            - callback\n            - constructor\n            - deprecated\n            - enum\n            - example\n            - extends\n            - module\n            - param\n            - public\n            - private\n            - property\n            - protected\n            - readonly\n            - return\n            - template\n            - this\n            - typedef\n            - type\n            - unsupported\n    ModInfoPage:\n      type: object\n      properties:\n        kind:\n          type: string\n          example: modinfo\n        module:\n          $ref: \"#/components/schemas/ModuleName\"\n        description:\n          type: string\n          example: A module for Deno\n        version:\n          type: string\n          example: \"0.148.0\"\n        path:\n          type: string\n          example: \"/mod.ts\"\n        versions:\n          type: array\n          items:\n            type: string\n          example: [\"0.146.0\", \"0.147.0\", \"0.148.0\"]\n        latest_version:\n          type: string\n          example: \"0.148.0\"\n        dependencies:\n          type: array\n          items:\n            $ref: \"#/components/schemas/ModuleDependency\"\n        dependency_errors:\n          type: array\n          items:\n            $ref: \"#/components/schemas/DependencyError\"\n        defaultModule: \n          $ref: \"#/components/schemas/ModuleEntry\"\n        defaultExport:\n          type: boolean\n        readme:\n          $ref: \"#/components/schemas/ModuleEntry\"\n        config:\n          $ref: \"#/components/schemas/ModuleEntry\"\n        import_map:\n          $ref: \"#/components/schemas/ModuleEntry\"\n        uploaded_at:\n          type: string\n          format: date-time\n          example: 2022-05-06T01:03:14.774Z\n        upload_options:\n          $ref: \"#/components/schemas/UploadOptions\"\n        tags:\n          type: array\n          items:\n            $ref: \"#/components/schemas/ModuleTag\"\n      required:\n        - \"kind\"\n        - \"module\"\n        - \"version\"\n        - \"versions\"\n        - \"latest_version\"\n        - \"uploaded_at\"\n    Module:\n      type: object\n      properties:\n        name:\n          $ref: \"#/components/schemas/ModuleName\"\n        description:\n          type: string\n          example: A middleware framework for Deno\n        latest_version:\n          type: string\n          example: v10.0.1\n        star_count:\n          type: number\n          example: 4567\n        versions:\n          type: array\n          items:\n            type: string\n          example: [\"v10.0.0\", \"v10.0.1\"]\n      required:\n        - name\n        - description\n        - latest_version\n        - versions\n      description: Representation of a module\n    ModuleDependency:\n      type: object\n      properties:\n        src:\n          type: string\n          example: \"deno.land/x\"\n        org:\n          type: string\n        pkg:\n          type: string\n          example: \"oak\"\n        ver:\n          type: string\n          example: \"v11.1.0\"\n      required:\n        - \"src\"\n        - \"pkg\"\n    ModuleMetricList:\n      allOf:\n        - $ref: \"#/components/schemas/ListBase\"\n        - type: object\n          properties:\n            items:\n              type: array\n              items:\n                $ref: \"#/components/schemas/ModuleMetrics\"\n    ModuleEntry:\n      type: object\n      properties:\n        path:\n          type: string\n          example: \"/mod.ts\"\n        type:\n          type: string\n          enum:\n            - \"file\"\n            - \"dir\"\n          example: \"file\"\n        size:\n          type: number\n          example: 4532\n        default:\n          type: string\n          example: \"/mod.ts\"\n        dirs:\n          type: array\n          items:\n            type: string\n        docable:\n          type: boolean\n        index:\n          type: array\n          items:\n            type: string\n      required:\n        - \"path\"\n        - \"type\"\n        - \"size\"\n    ModuleList:\n      allOf:\n        - $ref: \"#/components/schemas/ListBase\"\n        - type: object\n          properties:\n            items:\n              type: array\n              items:\n                $ref: \"#/components/schemas/Module\"\n    ModuleMetrics:\n      type: object\n      properties:\n        name:\n          $ref: \"#/components/schemas/ModuleName\"\n        description:\n          type: string\n        updated:\n          type: string\n          format: date-time\n        maintenance:\n          type: object\n        popularity:\n          type: object\n          properties:\n            sessions_30_day:\n              type: number\n              format: integer\n              example: 4792\n            users_30_day:\n              type: number\n              format: integer\n              example: 5421\n            score:\n              type: number\n              format: integer\n              example: 5042\n            prev_sessions_30_day:\n              type: number\n              format: integer\n              example: 4792\n            prev_users_30_day:\n              type: number\n              format: integer\n              example: 5421\n            prev_score:\n              type: number\n              format: integer\n              example: 5042\n          required:\n            - \"session_30_day\"\n            - \"users_30_day\"\n            - \"score\"\n        quality:\n          type: object\n      required:\n        - \"name\"\n        - \"updated\"\n        - \"maintenance\"\n        - \"popularity\"\n        - \"quality\"\n    ModuleMetricsInfo:\n      type: object\n      properties:\n        metrics:\n          $ref: \"#/components/schemas/ModuleMetrics\"\n        info:\n          $ref: \"#/components/schemas/ModInfoPage\"\n      required:\n        - \"metrics\"\n    ModuleName:\n      type: string\n      pattern: \"^[A-Za-z_]{3,}$\"\n      example: oak\n    ModuleTag:\n      oneOf:\n        - $ref: \"#/components/schemas/PopularityModuleTag\"\n      discriminator:\n        propertyName: kind\n        mapping:\n          popularity: \"#/components/schemas/PopularityModuleTag\"\n    ModuleUsage:\n      type: object\n      properties:\n        total:\n          $ref: \"#/components/schemas/UsageMetric\"\n        daily:\n          type: array\n          items:\n            $ref: \"#/components/schemas/UsageMetric\"\n        versions:\n          type: object\n          additionalProperties:\n            $ref: \"#/components/schemas/UsageMetric\"\n        updated:\n          type: string\n          format: date-time\n      required:\n        - \"total\"\n        - \"daily\"\n        - \"updated\"\n    ModuleVersion:\n      type: object\n      properties:\n        name:\n          $ref: \"#/components/schemas/ModuleName\"\n        description:\n          type: string\n          example: A middleware framework for Deno\n        version:\n          type: string\n          example: v10.0.1\n        uploaded_at:\n          type: string\n          format: date-time\n          example: 2022-05-06T01:03:14.774Z\n        upload_options:\n          $ref: \"#/components/schemas/UploadOptions\"\n    IndexDoc:\n      type: object\n      properties:\n        index:\n          $ref: \"#/components/schemas/IndexMap\"\n        docs:\n          $ref: \"#/components/schemas/JsDocMap\"\n      required:\n        - \"index\"\n        - \"docs\"\n    IndexMap:\n      type: object\n      additionalProperties:\n        type: array\n        items:\n          type: string\n      example:\n        /: [\"/mod.ts\"]\n        /src: [\"/src/lib.ts\", \"/src/util.js\"]\n    LibDocPage:\n      oneOf:\n        - $ref: \"#/components/schemas/DocPageLibrary\"\n        - $ref: \"#/components/schemas/DocPageLibrarySymbol\"\n        - $ref: \"#/components/schemas/DocPageLibraryInvalidVersion\"\n      discriminator:\n        propertyName: kind\n        mapping:\n          library: \"#/components/schemas/DocPageSymbol\"\n          librarySymbol: \"#/components/schemas/DocPageModule\"\n          libraryInvalidVersion: \"#/components/schemas/DocPageIndex\"\n    ListBase:\n      type: object\n      properties:\n        next:\n          type: string\n          example: /modules?limit=100\u0026page=3\n        previous:\n          type: string\n          example: /modules?limit=100\u0026page=1\n    PageBase:\n      type: object\n      properties:\n        kind:\n          type: string\n          example: index\n        module:\n          $ref: \"#/components/schemas/ModuleName\"\n        description:\n          type: string\n          example: A module for Deno\n        version:\n          type: string\n          example: \"0.148.0\"\n        path:\n          type: string\n          example: \"/mod.ts\"\n        versions:\n          type: array\n          items:\n            type: string\n          example: [\"0.146.0\", \"0.147.0\", \"0.148.0\"]\n        latest_version:\n          type: string\n          example: \"0.148.0\"\n        uploaded_at:\n          type: string\n          format: date-time\n          example: 2022-05-06T01:03:14.774Z\n        upload_options:\n          $ref: \"#/components/schemas/UploadOptions\"\n        star_count:\n          type: number\n          example: 2406\n        tags:\n          type: array\n          items:\n            $ref: \"#/components/schemas/ModuleTag\"\n      required:\n        - \"kind\"\n        - \"module\"\n        - \"version\"\n        - \"path\"\n        - \"versions\"\n        - \"latest_version\"\n        - \"uploaded_at\"\n        - \"upload_options\"\n    PageInvalidVersion:\n      type: object\n      properties:\n        kind:\n          type: string\n          example: \"invalid-version\"\n        module:\n          $ref: \"#/components/schemas/ModuleName\"\n        description:\n          type: string\n          example: A module for Deno\n        versions:\n          type: array\n          items:\n            type: string\n          example: [\"0.146.0\", \"0.147.0\", \"0.148.0\"]\n        latest_version:\n          type: string\n          example: \"0.148.0\"\n    PagePathNotFound:\n      allOf:\n        - $ref: \"#/components/schemas/PageBase\"\n    PublishEvent:\n      type: object\n      properties:\n        event:\n          type: string\n          example: create\n        module:\n          type: string\n          example: oak\n        version:\n          type: string\n          example: all\n      required:\n        - event\n        - module\n        - version\n    PopularityModuleTag:\n      type: object\n      properties:\n        kind:\n          type: string\n          example: \"popularity\"\n        value:\n          type: string\n          enum:\n            - \"top_1_percent\"\n            - \"top_5_percent\"\n            - \"top_10_percent\"\n    ShieldsPayload:\n      type: object\n      properties:\n        schemaVersion:\n          type: number\n          example: 1\n        label:\n          type: string\n          example: deno.land/x\n        message:\n          type: string\n          example: v1.0.0\n        namedLogo:\n          type: string\n          example: deno\n        color:\n          type: string\n          example: informational\n        cacheSeconds:\n          type: number\n          example: 300\n      required:\n        - schemaVersion\n        - label\n        - message\n    SourcePage:\n      oneOf:\n        - $ref: \"#/components/schemas/SourcePageDir\"\n        - $ref: \"#/components/schemas/SourcePageFile\"\n        - $ref: \"#/components/schemas/PageInvalidVersion\"\n        - $ref: \"#/components/schemas/PagePathNotFound\"\n      discriminator:\n        propertyName: kind\n        mapping:\n          dir: \"#/components/schemas/SourcePageDir\"\n          file: \"#/components/schemas/SourcePageFile\"\n          invalid-version: \"#/components/schemas/PageInvalidVersion\"\n          notfound: \"#/components/schemas/PagePathNotFound\"\n    SourcePageDir:\n      allOf:\n        - $ref: \"#/components/schemas/PageBase\"\n        - type: object\n          properties:\n            entries:\n              type: array\n              items:\n                $ref: \"#/components/schemas/SourcePageDirEntry\"\n          required:\n            - \"entries\"\n    SourcePageDirEntry:\n      type: object\n      properties:\n        path:\n          type: string\n          example: /mod.ts\n        kind:\n          type: string\n          enum:\n            - file\n            - dir\n        size:\n          type: number\n        docable:\n          type: boolean\n      required:\n        - \"path\"\n        - \"kind\"\n        - \"size\"\n    SourcePageFile:\n      allOf:\n        - $ref: \"#/components/schemas/PageBase\"\n        - type: object\n          properties:\n            size:\n              type: number\n              example: 27234\n            docable:\n              type: boolean\n          required:\n            - \"size\"\n    SubModuleMetricList:\n      allOf:\n        - $ref: \"#/components/schemas/ListBase\"\n        - type: object\n          properties:\n            items:\n              type: array\n              items:\n                $ref: \"#/components/schemas/SubModuleMetrics\"\n    SubModuleMetrics:\n      type: object\n      properties:\n        module:\n          $ref: \"#/components/schemas/ModuleName\"\n        submodule:\n          type: string\n          example: \"std\"\n        updated:\n          type: string\n          format: data-time\n        popularity:\n          type: object\n          properties:\n            sessions_30_day:\n              type: number\n              example: 4792\n            users_30_day:\n              type: number\n              example: 5421\n            score:\n              type: number\n              format: integer\n              example: 5042\n          required:\n            - \"session_30_day\"\n            - \"users_30_day\"\n            - \"score\"\n      required:\n        - \"module\"\n        - \"submodule\"\n        - \"updated\"\n        - \"popularity\"\n    SymbolIndexItem:\n      type: object\n      properties:\n        name:\n          type: string\n        kind:\n          $ref: \"#/components/schemas/DocNodeKind\"\n        declarationKind:\n          $ref: \"#/components/schemas/DeclarationKind\"\n        filename:\n          type: string\n      required:\n        - \"name\"\n        - \"kind\"\n        - \"declarationKind\"\n        - \"filename\"\n    SymbolItem:\n      type: object\n      properties:\n        name:\n          type: string\n          example: Example\n        kind:\n          $ref: \"#/components/schemas/DocNodeKind\"\n        jsDoc:\n          $ref: \"#/components/schemas/JsDoc\"\n      required:\n        - \"name\"\n        - \"kind\"\n    UploadOptions:\n      type: object\n      properties:\n        type:\n          type: string\n          example: github\n        repository:\n          type: string\n          example: oakserver/oak\n        ref:\n          type: string\n          example: v10.0.1\n        subdir:\n          type: string\n          example: /deno\n      required:\n        - type\n        - repository\n        - ref\n    UsageMetric:\n      type: object\n      properties:\n        sessions:\n          type: integer\n          example: 12345\n        users:\n          type: integer\n          example: 4562\n      required:\n        - \"sessions\"\n        - \"users\"\n    Views:\n      type: object\n      properties:\n        pageviews:\n          type: integer\n          example: 12345\n        uniquePageviews:\n          type: integer\n          example: 5423\n        unstable:\n          type: boolean\n      required:\n        - \"pageviews\"\n        - \"uniquePageviews\"\n    WebhookResponse:\n      type: object\n      properties:\n        result:\n          type: string\n          example: enqueued\n        id:\n          type: number\n          example: 1\n    pong:\n      type: object\n      properties:\n        pong:\n          type: boolean\n",
			"canonicalURL": "/github.com/denoland/apiland@878d14585c8c7341d5996e1b92af38bd61fc0a7c/-/blob/specs/api-2.0.0.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/denoland/apiland/blob/878d14585c8c7341d5996e1b92af38bd61fc0a7c/specs/api-2.0.0.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/completions/items/{mod}\": get: operation \"getCompletionItemsMod\": parameters: parse parameter \"mod\": at specs/api-2.0.0.yaml:45:21: path parameters must be required"
}