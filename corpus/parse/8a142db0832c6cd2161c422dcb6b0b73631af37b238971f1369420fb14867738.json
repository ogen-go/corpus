{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ncalandra/wms-serverless"
		},
		"file": {
			"name": "api.yaml",
			"size": 0,
			"path": "terraform/wms_api/api.yaml",
			"byteSize": 7374,
			"content": "openapi: 3.0.2\ninfo:\n  title: ${name}\n  description: WMS API\n  version: 0.0.0\nservers:\n  - url: 'localhost'\n    description: 'tester'\nx-amazon-apigateway-request-validators:\n  all:\n    validateRequestBody: true\n    validateRequestParameters: true\n    validateRequestHeaders: true\n  params-only:\n    validateRequestBody: false\n    validateRequestParameters: true\n    validateRequestHeaders: true\nx-amazon-apigateway-binary-media-types:\n  - image/png\n  - image/jpeg\n  - image/webp\npaths:\n  /layers:\n    get:\n      summary: Get Available Layers\n      description: Returns a list of available layers\n      tags:\n        - Info\n      responses:\n        200:\n          description: OK\n          headers:\n            Access-Control-Allow-Headers:\n              type: string\n            Access-Control-Allow-Methods:\n              type: string\n            Access-Control-Allow-Origin:\n              type: string\n          content:\n            application/json:\n              $ref: '#/components/schemas/layers'\n      x-amazon-apigateway-integration:\n        type: aws_proxy\n        uri: arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${list_layers}/invocations\n        httpMethod: POST\n        credentials: ${credentials}\n        responses:\n          default:\n            statusCode: 200\n    options:\n      summary: Enable CORS\n      description: Enable CORS by returning the correct headers\n      responses:\n        200:\n          description: Default response for CORS method\n          headers:\n            Access-Control-Allow-Headers:\n              type: string\n            Access-Control-Allow-Methods:\n              type: string\n            Access-Control-Allow-Origin:\n              type: string\n      x-amazon-apigateway-integration:\n        type: mock\n        responses:\n          default:\n            statusCode: 200\n            responseParameters:\n              method.response.header.Access-Control-Allow-Headers: \"'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,access-control-allow-origin'\"\n              method.response.header.Access-Control-Allow-Methods: \"'*'\"\n              method.response.header.Access-Control-Allow-Origin: \"'*'\"\n            responseTemplates:\n              application/json: |\n                {}\n        passthroughBehavior: when_no_match\n        requestTemplates:\n          application/json: |\n            {\"statusCode\" : 200}\n  /wms:\n    get:\n      summary: Web Map Service\n      description: OGC compliant WMS feed\n      tags:\n        - Tile\n      x-amazon-apigateway-request-validator: params-only\n      parameters:\n        - name: VERSION\n          description: WMS Version (1.3.0)\n          in: query\n          required: true\n          schema:\n            type: string\n            example: 1.3.0\n        - name: REQUEST\n          description: WMS request type\n          in: query\n          required: true\n          schema:\n            type: string\n            example: GetMap\n        - name: LAYERS\n          description: layer name\n          in: query\n          required: true\n          schema:\n            type: string\n            example: layername\n        - name: STYLES\n          description: style name\n          in: query\n          required: true\n          schema:\n            type: string\n            example: style\n        - name: CRS\n          description: Coordinate Reference System (CRS)\n          in: query\n          required: true\n          schema:\n            type: string\n            example: epsg:4326\n        - name: BBOX\n          description: Boundingbox corners (minx,miny,maxx,maxy)\n          in: query\n          required: true\n          schema:\n            type: array\n            items:\n              type: number\n            example: [0,0,0,0]\n        - name: WIDTH\n          description: Output image width\n          in: query\n          required: true\n          schema:\n            type: integer\n            example: 256\n        - name: HEIGHT\n          description: Output image height\n          in: query\n          required: true\n          schema:\n            type: integer\n            example: 256\n        - name: FORMAT\n          description: Output image format\n          in: query\n          required: true\n          schema:\n            type: string\n            example: image/png\n        - name: TRANSPARENT\n          description: Background map transparency\n          in: query\n          required: false\n          schema:\n            type: boolean\n            default: false\n            example: false\n        - name: BGCOLOR\n          description: Background color\n          in: query\n          required: false\n          schema:\n            type: string\n            default: \"0xFFFFFF\"\n            example: \"0xFFFFFF\"\n        - name: EXCEPTIONS\n          description: exception format\n          in: query\n          required: false\n          schema:\n            type: string\n            default: json\n            example: json\n        - name: TIME\n          description: Time value of the layer\n          in: query\n          required: false\n          schema:\n            type: string\n            example: \"2019-11-01T01:15:07Z\"\n        - name: ELEVATION\n          description: Elevation value of the layer\n          in: query\n          required: false\n          schema:\n            type: string\n            example: \"0\"\n      responses:\n        200:\n          description: OK\n          headers:\n            Access-Control-Allow-Headers:\n              type: string\n            Access-Control-Allow-Methods:\n              type: string\n            Access-Control-Allow-Origin:\n              type: string\n          content:\n            image/png:\n              $ref: '#/components/schemas/binary'\n      x-amazon-apigateway-integration:\n        type: aws_proxy\n        uri: arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${cog_renderer}/invocations\n        httpMethod: POST\n        credentials: ${credentials}\n        requestParameters:\n          # TODO: maybe not needed?\n          integration.request.header.Accept: method.request.querystring.FORMAT\n        responses:\n          default:\n            statusCode: 200\n    options:\n      summary: Enable CORS\n      description: Enable CORS by returning the correct headers\n      responses:\n        200:\n          description: Default response for CORS method\n          headers:\n            Access-Control-Allow-Headers:\n              type: string\n            Access-Control-Allow-Methods:\n              type: string\n            Access-Control-Allow-Origin:\n              type: string\n      x-amazon-apigateway-integration:\n        type: mock\n        responses:\n          default:\n            statusCode: 200\n            responseParameters:\n              method.response.header.Access-Control-Allow-Headers: \"'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,access-control-allow-origin'\"\n              method.response.header.Access-Control-Allow-Methods: \"'*'\"\n              method.response.header.Access-Control-Allow-Origin: \"'*'\"\n            responseTemplates:\n              application/json: |\n                {}\n        passthroughBehavior: when_no_match\n        requestTemplates:\n          application/json: |\n            {\"statusCode\" : 200}\ncomponents:\n  schemas:\n    binary:\n      type: string\n      format: binary\n    layers:\n      type: array\n      items:\n        type: string\n",
			"canonicalURL": "/github.com/ncalandra/wms-serverless@338981babc54e875fe141a7a547ab8e7b4cc5f79/-/blob/terraform/wms_api/api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ncalandra/wms-serverless/blob/338981babc54e875fe141a7a547ab8e7b4cc5f79/terraform/wms_api/api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /layers: get: responses: 200: headers: Access-Control-Allow-Headers: parameter MUST contain either a schema property, or a content property"
}