{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/waarp/Waarp-All"
		},
		"file": {
			"name": "consult.yaml",
			"size": 0,
			"path": "doc/waarp-r66/source/interface/restv2/hosts/consult.yaml",
			"byteSize": 22814,
			"content": "openapi: 3.0.0\ninfo:\n  title: API REST pour WaarpR66\n  version: 2.0.0\n  description: API REST pour la gestion de serveurs WaarpR66.\nservers: []\npaths:\n  '/v2/hosts/{id}':\n    get:\n      responses:\n        '200':\n          description: L'hôte demandé a été trouvé.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ObjectHost'\n        '404':\n          $ref: '#/components/responses/trait_returnsNotFound_404'\n      description: \u003e-\n        S'il existe, renvoie les informations de l'hôte demandé sous forme d'un\n        objet JSON.\n      operationId: Consulter un hôte\ncomponents:\n  schemas:\n    ObjectTransfer:\n      title: Transfert\n      description: \u003e-\n        Un objet regroupant les informations sur un transfert telles qu'elles\n        sont stockées dans la base de données WaarpR66.\n      example:\n        id: 1\n        globalStep: NOTASK\n        globalLastStep: NOTASK\n        step: 0\n        rank: 0\n        status: TOSUBMIT\n        stepStatus: ''\n        originalFilename: out/file_example.txt\n        filename: in/file_example.txt\n        ruleName: default\n        blockSize: 65536\n        fileInfo: '{\"ORIGINALSIZE\":1024}'\n        transferInfo: This is comment example.\n        start: '1970-01-01T01:00:00+00:00'\n        stop: '1970-01-01T02:00:00+00:00'\n        requester: server1\n        requested: server2\n      type: object\n      additionalProperties: false\n      properties:\n        id:\n          title: ID de transfert\n          format: int64\n          description: L'id unique donné au transfert par le serveur interrogé.\n          type: integer\n        globalStep:\n          title: Étape globale\n          description: \u003e-\n            L'étape générale du transfert. Indique l'action que le serveur est\n            en train d'effectuer sur le transfert.\n          enum:\n            - NOTASK\n            - PRETASK\n            - POSTTASK\n            - ALLDONETASK\n            - ERRORTASK\n            - TRANSFERTASK\n          type: string\n        globalLastStep:\n          title: Dernière étape globale\n          description: \u003e-\n            La dernière étape générale du transfert terminée avec succès. Sert\n            notamment à marquer où reprendre un transfert interrompu lors du\n            redémarrage de celui-ci.\n          enum:\n            - NOTASK\n            - PRETASK\n            - POSTTASK\n            - ALLDONETASK\n            - ERRORTASK\n            - TRANSFERTASK\n          type: string\n        step:\n          title: Sous-étape\n          minimum: 0\n          format: int32\n          description: Donne l'état de l'étape générale en cours d'exécution.\n          type: integer\n        rank:\n          title: Rang\n          minimum: 0\n          format: int32\n          description: \u003e-\n            Le numéro du dernier bloc de données transféré. Sert notamment en\n            cas de reprise d'un transfert après interruption pour marquer le\n            bloc à transmettre.\n          type: integer\n        status:\n          title: Statut de transfert\n          description: Donne l'état actuel du transfert.\n          $ref: '#/components/schemas/TransferStatus'\n        stepStatus:\n          title: Code d'erreur\n          description: \u003e-\n            Donne le code d'erreur du transfert (sous forme d'un caractère)\n            lorsque le transfert se termine en erreur.\n          type: string\n        originalFilename:\n          title: Nom de fichier original\n          description: Chemin du fichier à transférer sur le disque de l'envoyeur.\n          type: string\n        filename:\n          title: Nom de fichier\n          description: \u003e-\n            Chemin du fichier sur le disque du destinataire à l'issue du\n            transfert.\n          type: string\n        ruleName:\n          title: Nom de règle\n          description: Nom de la règle utilisée pour le transfert.\n          type: string\n        blockSize:\n          title: Taille de bloc\n          minimum: 0\n          format: int32\n          description: La taille (en octets) d'un bloc de données pour le transfert.\n          type: integer\n        fileInfo:\n          title: Informations fichier\n          description: Métadonnées du fichier traité au format JSON.\n          type: string\n        transferInfo:\n          title: Informations transfert\n          description: \u003e-\n            Informations (commentaires) supplémentaires sur le transfert\n            renseignées par l'utilisateur.\n          type: string\n        start:\n          title: Date de lancement\n          description: Date de lancement du transfert (en format ISO 8601).\n          type: string\n          format: date-time\n        stop:\n          title: Date de fin\n          description: \u003e-\n            Date de fin du transfert lorsque celui-ci est terminé (en format ISO\n            8601).\n          type: string\n          format: date-time\n        requester:\n          title: Émetteur de requête\n          description: Nom de l'hôte ayant émis la demande transfert.\n          type: string\n        requested:\n          title: Receveur de requête\n          description: Nom de l'hôte auquel la demande de transfert a été envoyée.\n          type: string\n      required:\n        - id\n        - globalStep\n        - globalLastStep\n        - step\n        - rank\n        - status\n        - stepStatus\n        - originalFilename\n        - filename\n        - ruleName\n        - blockSize\n        - fileInfo\n        - transferInfo\n        - start\n        - stop\n        - requester\n        - requested\n    ObjectHost:\n      title: Hôte\n      description: \u003e-\n        Un objet regroupant les informations d'un hôte telles qu'elles sont\n        représentées dans la base de données.\n      example:\n        name: server1\n        address: 127.0.0.1\n        port: 8080\n        password: password\n        isSSL: false\n        isAdmin: false\n        isClient: false\n        isActive: true\n        isProxy: false\n      type: object\n      additionalProperties: false\n      properties:\n        name:\n          title: Nom\n          description: 'Le nom de l''hôte, doit être unique.'\n          type: string\n        address:\n          title: Adresse\n          description: \u003e-\n            L'adresse de l'hôte, peut être une adresse IP ou bien une adresse\n            Web résolvable par DNS.\n          type: string\n        port:\n          title: Numéro de port\n          default: 0\n          minimum: 0\n          maximum: 65535\n          format: int32\n          description: \u003e-\n            Le numéro du port TCP de l'hôte pour les connections entrantes. Vaut\n            *0* si l'hôte n'accepte pas de connections entrantes.\n          type: integer\n        password:\n          title: Mot de passe\n          description: Le mot de passe d'authentification du nouvel hôte.\n          type: string\n        isSSL:\n          title: Utilisation de SSL\n          default: false\n          description: Spécifie si l'hôte accepte les transferts sécurisés avec SSL.\n          type: boolean\n        isAdmin:\n          title: Droits administrateur\n          default: false\n          description: Spécifie si l'hôte a les droits administrateur sur le serveur.\n          type: boolean\n        isClient:\n          title: Statut de client\n          default: false\n          description: Spécifie si l'hôte accepte les requêtes de transfert.\n          type: boolean\n        isActive:\n          title: Activation\n          default: false\n          description: Spécifie si l'hôte peut envoyer et recevoir des transferts ou non.\n          type: boolean\n        isProxy:\n          title: Utilisation de proxy\n          default: false\n          description: Spécifie si l'hôte utilise un proxy pour les connections entrantes.\n          type: boolean\n      required:\n        - name\n        - address\n        - password\n    ObjectHostConfig:\n      title: Configuration serveur\n      description: \u003e-\n        Un objet regroupant les informations sur la configuration du serveur\n        telles qu'elles sont stockées dans la base de données WaarpR66.\n      example:\n        business:\n          - server1\n          - server2\n        roles:\n          - hostName: server1\n            roleList:\n              - TRANSFER\n              - RULE\n        aliases:\n          - hostName: server1\n            aliasList:\n              - alias1\n              - alias2\n        others: \u003croot\u003e\u003cversion\u003e3.0.12\u003c/version\u003e\u003c/root\u003e\n      type: object\n      additionalProperties: false\n      properties:\n        business:\n          default: []\n          uniqueItems: true\n          description: \u003e-\n            La liste des hôtes autorisés à émettre une requête de business vers\n            ce serveur.\n          type: array\n          items:\n            type: string\n        roles:\n          default: []\n          uniqueItems: true\n          description: \u003e-\n            La liste associant chaque hôte a l'ensemble de ses droits sur le\n            serveur.\n          type: array\n          items:\n            type: object\n            additionalProperties: false\n            properties:\n              hostName:\n                description: Le nom de l'hôte.\n                type: string\n              roleList:\n                uniqueItems: true\n                minItems: 1\n                description: La liste des droits de l'hôte sur le serveur.\n                type: array\n                items:\n                  title: Rôles utilisateur\n                  description: \u003e-\n                    Une énumération des différents droits qu'un serveur R66 peut\n                    accorder aux autres hôtes.\n                  enum:\n                    - NOACCESS\n                    - READONLY\n                    - TRANSFER\n                    - RULE\n                    - HOST\n                    - LIMIT\n                    - SYSTEM\n                    - LOGCONTROL\n                    - PARTNER\n                    - CONFIGADMIN\n                    - FULLADMIN\n                  type: string\n            required:\n              - hostName\n              - roleList\n        aliases:\n          default: []\n          uniqueItems: true\n          description: La liste associant chaque hôte à l'ensemble de ses alias.\n          type: array\n          items:\n            type: object\n            additionalProperties: false\n            properties:\n              hostName:\n                description: Le nom de l'hôte.\n                type: string\n              aliasList:\n                uniqueItems: true\n                minItems: 1\n                description: La liste des alias de l'hôte.\n                type: array\n                items:\n                  type: string\n            required:\n              - hostName\n              - aliasList\n        others:\n          pattern: \u003croot\u003e\u003cversion\u003e.*\u003c/version\u003e\u003c/root\u003e\n          description: \u003e-\n            La version de la base de données. Permet de comparer la version de\n            la base donnée avec celle du serveur R66.\n          type: string\n    ObjectLimit:\n      title: Limites de bande passante\n      description: \u003e-\n        Un objet regroupant les informations sur les limites de bande passante\n        du serveur telles qu'elles sont stockées dans la base de données\n        WaarpR66.\n      example:\n        upGlobalLimit: 1000000000\n        downGlobalLimit: 50000000\n        upSessionLimit: 1000000\n        downSessionLimit: 500000\n        delayLimit: 1000\n      type: object\n      additionalProperties: false\n      properties:\n        upGlobalLimit:\n          minimum: 0\n          format: int64\n          description: \u003e-\n            La limite globale de bande passante montante du serveur. Une valeur\n            de *0* signifie que aucune limite n'est imposée.\n          type: integer\n        downGlobalLimit:\n          minimum: 0\n          format: int64\n          description: \u003e-\n            La limite globale de bande passante descendante du serveur. Une\n            valeur de *0* signifie que aucune limite n'est imposée.\n          type: integer\n        upSessionLimit:\n          minimum: 0\n          format: int64\n          description: \u003e-\n            La limite de bande passante montante par transfert. Une valeur de\n            *0* signifie que aucune limite n'est imposée.\n          type: integer\n        downSessionLimit:\n          minimum: 0\n          format: int64\n          description: \u003e-\n            La limite de bande passante descendante par transfert. Une valeur de\n            *0* signifie que aucune limite n'est imposée.\n          type: integer\n        delayLimit:\n          minimum: 0\n          format: int64\n          description: \u003e-\n            Le délai (en ms) entre deux vérification du respect des limites de\n            bande passante. Une valeur de *0* signifie que la vérification des\n            limites est désactivée.\n          type: integer\n    ObjectRule:\n      title: Règle de transfert\n      description: \u003e-\n        Un objet regroupant les informations sur une règle de transfert telles\n        qu'elles sont stockées dans la base de données WaarpR66.\n      example:\n        name: example\n        hostIds:\n          - server1\n          - server2\n        modeTrans: send\n        recvPath: in/\n        sendPath: out/\n        archivePath: arch/\n        workPath: work/\n        rPreTasks:\n          - type: ZIP\n            arguments: file.txt work/\n            delay: 1\n        rPostTask:\n          - type: MOVERENAME\n            arguments: arch/file.bak\n        rErrorTasks:\n          - type: RESCHEDULE\n            arguments: \u003e-\n              -delay 3600000 -case\n              ConnectionImpossible,ServerOverloaded,Shutdown\n        sPreTasks: []\n        sPostTasks:\n          - type: ZIP\n            arguments: file.zip work/\n            delay: 0\n        sErrorTasks:\n          - type: DELETE\n      type: object\n      additionalProperties: false\n      properties:\n        name:\n          title: Nom de la règle\n          description: Le nom unique de la nouvelle règle de transfert.\n          type: string\n        hostIds:\n          title: Noms des hôtes autorisés\n          uniqueItems: true\n          description: \u003e-\n            Un tableau listant les noms des hôtes autorisés à utiliser cette\n            règle de transfert. Si ce champ est laissé vide, tous les hôtes\n            seront autorisés à utiliser la règle.\n          type: array\n          items:\n            type: string\n        modeTrans:\n          title: Mode de transfert\n          description: \u003e-\n            Définit le sens de transmission du fichier, ainsi que l'utilisation\n            d'un checksum MD5 du fichier.\n          enum:\n            - send\n            - receive\n            - sendMD5\n            - receiveMD5\n          type: string\n        recvPath:\n          title: Dossier destination\n          description: \u003e\n            Chemin du dossier où les fichiers sont déposés sur l'hôte\n            destinataire une fois le transfert terminé.\n\n            Si aucun chemin n'est défini, le dossier de réception par défaut du\n            serveur sera utilisé.\n\n\n            Peut être un chemin relatif ou absolu.\n          type: string\n        sendPath:\n          title: Dossier source\n          description: \u003e\n            Chemin du dossier racine à partir duquel le chemin du fichier à\n            transférer est appliqué sur l'hôte expéditeur.\n\n            Si aucun chemin n'est défini, le dossier d'envoi par défaut du\n            serveur sera utilisé.\n\n\n            Peut être un chemin relatif ou absolu.\n          type: string\n        archivePath:\n          title: Dossier d'archive\n          description: \u003e\n            Chemin du dossier dans lequel les logs de transfert sont stockés.\n\n            Si aucun chemin n'est défini, le dossier d'archive par défaut du\n            serveur sera utilisé.\n\n\n            Peut être un chemin relatif ou absolu.\n          type: string\n        workPath:\n          title: Dossier de travail\n          description: \u003e\n            Chemin du dossier dans lequel les fichiers sont stockés\n            temporairement sur le serveur destination pendant leur transfert.\n\n            Si aucun chemin n'est défini, le dossier de travail par défaut du\n            serveur sera utilisé.\n\n\n            Peut être un chemin relatif ou absolu.\n          type: string\n        rPreTasks:\n          title: Pré-traitements destinataire\n          description: \u003e-\n            Traitements effectués par le destinataire avant le transfert du\n            fichier.\n          type: array\n          items:\n            $ref: '#/components/schemas/RuleTask'\n        rPostTask:\n          title: Post-traitements destinataire\n          description: \u003e-\n            Traitements effectués par le destinataire après le transfert du\n            fichier.\n          type: array\n          items:\n            $ref: '#/components/schemas/RuleTask'\n        rErrorTasks:\n          title: Traitements d'erreur destinataire\n          description: Traitements effectués par le destinataire en cas d'erreur.\n          type: array\n          items:\n            $ref: '#/components/schemas/RuleTask'\n        sPreTasks:\n          title: Pré-traitements expéditeur\n          description: \u003e-\n            Traitements effectués par l'expéditeur avant le transfert du\n            fichier.\n          type: array\n          items:\n            $ref: '#/components/schemas/RuleTask'\n        sPostTasks:\n          title: Post-traitements expéditeur\n          description: \u003e-\n            Traitements effectués par l'expéditeur après le transfert du\n            fichier.\n          type: array\n          items:\n            $ref: '#/components/schemas/RuleTask'\n        sErrorTasks:\n          title: Traitements d'erreur expéditeur\n          description: Traitements effectués par l'expéditeur en cas d'erreur.\n          type: array\n          items:\n            $ref: '#/components/schemas/RuleTask'\n      required:\n        - name\n        - modeTrans\n    RuleTask:\n      title: Traitement\n      description: Un objet représentant un traitement effectué lors d'un transfert.\n      example:\n        type: ZIP\n        arguments: '#TRUEFULLPATH# unzip/output/'\n        delay: 1\n      type: object\n      additionalProperties: false\n      properties:\n        type:\n          title: Type de traitement\n          description: \u003e-\n            Une énumérarion de tous les types de traitement possibles lors d'un\n            transfert.\n          enum:\n            - LOG\n            - MOVE\n            - MOVERENAME\n            - COPY\n            - COPYRENAME\n            - EXEC\n            - EXECMOVE\n            - EXECOUTPUT\n            - EXECJAVA\n            - TRANSFER\n            - VALIDFILEPATH\n            - DELETE\n            - LINKRENAME\n            - RESCHEDULE\n            - TAR\n            - ZIP\n            - TRANSCODE\n            - SNMP\n          type: string\n        arguments:\n          title: Arguments\n          description: \u003e-\n            Les arguments du traitement (si pertinent). Des substitutions\n            peuvent être effectuées en utilisant les noms de variables\n            appropriés (*#TRUEFULLPATH#*, *#DATE#*, ...).\n          type: string\n        delay:\n          title: Type d'opération\n          default: 0\n          minimum: 0\n          format: int32\n          description: \u003e-\n            Donne le type d'opération à effectuer (quand pertinent) pour le\n            traitement.\n          type: integer\n      required:\n        - type\n    TransferStatus:\n      title: Statut de transfert\n      description: Une énumération des différents états possibles d'un transfert.\n      enum:\n        - TOSUBMIT\n        - NOTUPDATED\n        - RUNNING\n        - INTERRUPTED\n        - DONE\n        - INERROR\n        - UNKNOWN\n      type: string\n    HttpError:\n      title: Erreurs utilisateur\n      description: \u003e-\n        Un objet listant les causes de l'échec d'une requête REST lorsque cet\n        échec est dû à des entrées utilisateur invalides.\n      type: object\n      properties:\n        errors:\n          title: Liste d'erreurs\n          minItems: 1\n          description: \u003e-\n            Un tableau de toutes les erreurs utilisateurs rencontrées lors du\n            traitement de la requête.\n          type: array\n          items:\n            description: Un objet représentant une erreur utilisateur.\n            type: object\n            properties:\n              message:\n                description: Un message décrivant l'erreur rencontrée.\n                type: string\n              errorCode:\n                format: int32\n                description: Le code d'erreur REST correspondant à l'erreur rencontrée.\n                type: integer\n            required:\n              - message\n              - errorCode\n      required:\n        - errors\n  responses:\n    trait_returnsNotFound_404:\n      description: \u003e-\n        Dans le cas d'une requête sur une collection, cela signifie que\n        l'identifiant donné n'existe pas dans la base de données.\n    trait_returnsBadRequest_400:\n      description: \u003e\n        La requête est invalide, soit à cause de paramètres de requête erronés,\n        soit à cause d'un corps de requête invalide.\n\n\n        Les causes de l'échec de la requête sont données dans le corps de la\n        réponse sour forme d'un tableau JSON.\n      content:\n        application/json:\n          example:\n            errors:\n              - message: 'Query parameter ''startTrans'' : illegal value ''not_a_date''.'\n                errorCode: 4\n              - message: 'Query parameter ''status'' : illegal value ''not_a_status''.'\n                errorCode: 4\n          schema:\n            $ref: '#/components/schemas/HttpError'\n    trait_checksContentType_415:\n      description: Le type de contenu de la requête n'est pas valide pour cette requête.\n  parameters: {}\n  examples: {}\n  requestBodies: {}\n  headers: {}\n  securitySchemes:\n    BasicAuthentication:\n      description: Authentification HTTP basique au moyen d'identifiants encodés en base64.\n      type: http\n      scheme: basic\n    BasicAuthentication+Signature:\n      description: \u003e-\n        Authentification HTTP basique au moyen d'identifiants encodés en base64,\n        avec vérification de signature des requêtes.\n      type: http\n      scheme: basic\n    HmacKey:\n      description: Authentification par le biais d'un hash des identifiants utilisateur.\n      type: apiKey\n      in: header\n      name: Authorization\n    HmacKey+Signature:\n      description: \u003e-\n        Authentification par le biais d'un hash des identifiants utilisateur,\n        avec vérification de signature des requêtes.\n      type: apiKey\n      in: header\n      name: Authorization\n  links: {}\n  callbacks: {}\n"
		}
	},
	"Error": "parse: parse spec: paths: /v2/hosts/{id}: get: operation \"Consulter un hôte\": parse path: path parameter not specified: \"id\""
}