{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/OpenEVSE/ESP32_WiFi_V4.x"
		},
		"file": {
			"name": "api.yml",
			"size": 0,
			"path": "api.yml",
			"byteSize": 17948,
			"content": "openapi: 3.0.2\ninfo:\n  title: OpenEVSE WiFi API\n  description: |\n    The API for the OpenEVSE WiFi module\n  version: '1.0'\n  contact:\n    email: jeremy@bigjungle.net\n    name: Jeremy Poulter\n  license:\n    name: Apache 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\nservers:\n  - url: '{server}'\n    variables:\n      server:\n        default: 'http://openevse.local'\n  - url: 'http://localhost:8080'\npaths:\n  /status:\n    get:\n      operationId: getStatus\n      summary: Get the EVSE status\n      description: |\n        The status endpoint can be called to get the status of the EVSE.\n\n        While it is posible to poll this endpoint, the recomendatoin is to retrieve the initial \n        state then use the [/ws](#statusUpdates) \n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: ./models/Status.yaml\n              examples:\n                EVSE Status:\n                  value:\n                    mode: STA\n                    wifi_client_connected: 1\n                    eth_connected: 0\n                    net_connected: 1\n                    srssi: -73\n                    ipaddress: 192.168.1.43\n                    emoncms_connected: 1\n                    packets_sent: 22307\n                    packets_success: 22290\n                    mqtt_connected: 1\n                    ohm_hour: NotConnected\n                    free_heap: 203268\n                    comm_sent: 335139\n                    comm_success: 335139\n                    rapi_connected: 1\n                    amp: 0\n                    pilot: 32\n                    temp1: 282\n                    temp2: -2560\n                    temp3: -2560\n                    state: 254\n                    elapsed: 3473\n                    wattsec: 22493407\n                    watthour: 51536\n                    gfcicount: 0\n                    nogndcount: 0\n                    stuckcount: 0\n                    divertmode: 1\n                    solar: 390\n                    grid_ie: 0\n                    charge_rate: 7\n                    divert_update: 0\n                    ota_update: 0\n                    time: '2020-05-12T17:53:48Z'\n                    offset: '+0000'\n      tags:\n        - Status\n  /ws:\n    get:\n      operationId: statusUpdates\n      summary: EVSE status updates\n      description: |\n        As the state changes on the EVSE a websocket frame will be sent over the socket. \n        The frame will contain a JSON document conntaining only the updated state.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: ./models/Status.yaml\n      tags:\n        - Status\n  /config:\n    get:\n      operationId: getConfig\n      summary: Get the EVSE configuration\n      description: ''\n      tags:\n        - Config\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: ./models/Config.yaml\n              examples: {}\n    post:\n      operationId: updateConfig\n      responses:\n        '200':\n          $ref: '#/components/responses/UpdateSuccessful'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: ./models/Config.yaml\n            examples:\n              Update EmonCMS setting:\n                value:\n                  emoncms_enabled: true\n                  emoncms_server: 'http://emoncms.org'\n                  emoncms_node: openevse-a7d4\n                  emoncms_apikey: emoncmskey\n                  emoncms_fingerprint: ''\n              Configure Solar divert:\n                value:\n                  divert_enabled: true\n                  divert_attack_smoothing_factor: 0.4\n                  divert_decay_smoothing_factor: 0.05\n                  divert_min_charge_time: 60\n              Set normal charging mode:\n                value:\n                  charge_mode: fast\n              Set Eco mode:\n                value:\n                  charge_mode: eco\n              Configure Tesla credentials:\n                value:\n                  tesla_enabled: true\n                  tesla_access_token: qts-1234.......\n                  tesla_refresh_token: abcd.......\n                  tesla_created_at: 1623358948\n                  tesla_expires_in: 3888000\n              Select Tesla vehicle:\n                value:\n                  tesla_vehicle_id: '2238974987235987'\n      summary: Update the EVSE configuration\n      tags:\n        - Config\n  /override:\n    description: Manual override can be used to override a charging timer or to immediately start a charge if the EVSE is in sleeping state.\n    get:\n      responses:\n        '200':\n          description: Manual overide is active\n          content:\n            application/json:\n              schema:\n                $ref: ./models/Properties.yaml\n        '404':\n          $ref: '#/components/responses/NotFound'\n      operationId: getManualOverride\n      tags:\n        - Manual Override\n      summary: Get the Manual Override status\n      description: Returns the current state of the manual override.\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: ./models/Properties.yaml\n            examples:\n              Force stop of charging:\n                value:\n                  state: disabled\n              example-1:\n                value:\n                  state: active\n                  charge_current: 0\n                  max_current: 0\n                  energy_limit: 0\n                  time_limit: 0\n                  auto_release: true\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Message'\n      operationId: setManualOverride\n      tags:\n        - Manual Override\n      summary: Set the manual override\n    patch:\n      description: Toggle the manual override\n      responses:\n        '200':\n          description: OK\n      operationId: toggleManualOverride\n      tags:\n        - Manual Override\n      summary: Toggle the manual Override\n    delete:\n      description: Clears the manual override\n      responses:\n        '200':\n          description: OK\n      operationId: clearManualOverride\n      tags:\n        - Manual Override\n      summary: Clear the manual override\n  /claims:\n    get:\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: ./models/Claim.yaml\n      operationId: listClaims\n      tags:\n        - Claims\n      summary: List EVSE claims\n  '/claims/{client}':\n    get:\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: ./models/Properties.yaml\n        '404':\n          $ref: '#/components/responses/NotFound'\n      parameters: []\n      operationId: getClaim\n      tags:\n        - Claims\n      summary: Get EVSE claim information\n    post:\n      description: Make/Update a claim\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: ./models/Properties.yaml\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Message'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n      operationId: setClaim\n      summary: Make/Update an EVSE claim\n      tags:\n        - Claims\n    delete:\n      description: Release a claim\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Message'\n        '404':\n          $ref: '#/components/responses/NotFound'\n      operationId: releaseClaim\n      summary: Release an EVSE claim\n      tags:\n        - Claims\n    parameters:\n      - schema:\n          type: integer\n        name: client\n        in: path\n        required: true\n        description: 'The client ID, defined by [OpenEVSE](https://github.com/OpenEVSE/ESP32_WiFi_V4.x/blob/master/src/evse_man.h#L25)'\n  /schedule:\n    get:\n      summary: List schedule events\n      description: This will get a complete list of events in the schedule\n      responses:\n        '200':\n          description: List of the schedule events\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ScheduleEvent'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n      operationId: listSchedule\n      tags:\n        - Schedule\n    post:\n      operationId: updateSchedule\n      description: Perform multiple event updates\n      responses:\n        '201':\n          description: item created\n        '400':\n          description: 'invalid input, object invalid'\n        '409':\n          description: an existing item already exists\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/ScheduleEvent'\n            examples:\n              Single event:\n                value:\n                  - id: 1\n                    state: active\n                    time: '14:15:22Z'\n                    days:\n                      - monday\n              Daily Timer:\n                value:\n                  - id: 1\n                    state: active\n                    days:\n                      - monday\n                      - tuesday\n                      - wednesday\n                      - thursday\n                      - friday\n                      - saturday\n                      - sunday\n                    time: '07:00:00'\n                  - id: 2\n                    state: disabled\n                    days:\n                      - monday\n                      - tuesday\n                      - wednesday\n                      - thursday\n                      - friday\n                      - saturday\n                      - sunday\n                    time: '10:00:00'\n        description: Inventory item to add\n      tags:\n        - Schedule\n      summary: Batch update schedule\n  '/schedule/{id}':\n    parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n        description: Numeric ID of the event\n    get:\n      summary: Get event details\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: ./models/EvseState.yaml\n      operationId: getScheduleEvent\n      tags:\n        - Schedule\n    post:\n      responses:\n        '200':\n          $ref: '#/components/responses/UpdateSuccessful'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: ./models/EvseState.yaml\n        description: ''\n      operationId: setScheduleEvent\n      tags:\n        - Schedule\n      summary: Update event details\n    delete:\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Message'\n              examples: {}\n      operationId: removeScheduleEvent\n      tags:\n        - Schedule\n      summary: Remove event\n  /logs:\n    get:\n      summary: Get event block information\n      tags:\n        - Event Log\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  min:\n                    type: integer\n                  max:\n                    type: integer\n      operationId: getEventBlockInfo\n      description: 'Retrieve the start and end indexes of the log event blocks. Each log event block contains '\n      parameters: []\n    parameters: []\n  '/logs/{index}':\n    get:\n      summary: Get log block events\n      tags:\n        - Event Log\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/LogEvent'\n        '404':\n          $ref: '#/components/responses/NotFound'\n      operationId: getEventBlock\n      description: ''\n    parameters:\n      - schema:\n          type: integer\n        name: index\n        in: path\n        required: true\n  /tesla/vehicles:\n    get:\n      summary: Get Tesla vehicle list\n      tags:\n        - Tesla\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                description: ''\n                type: object\n                x-examples:\n                  example-1:\n                    count: 3\n                    vehicles:\n                      - id: '1492932278133304'\n                        name: AwesomeSAUCE\n                      - id: '1492931610165415'\n                        name: Herbie\n                      - id: '1492930973960452'\n                        name: 'Life, the Universe, and Everything'\n                properties:\n                  count:\n                    type: number\n                  vehicles:\n                    type: array\n                    uniqueItems: true\n                    items:\n                      type: object\n                      additionalProperties: false\n                      properties:\n                        id:\n                          type: string\n                          minLength: 1\n                        name:\n                          type: string\n                          minLength: 1\n                      required:\n                        - id\n                        - name\n                required:\n                  - count\n                  - vehicles\n              examples:\n                example-1:\n                  value:\n                    count: 1\n                    vehicles:\n                      - id: '2238974987235987'\n                        name: My Tesla\n      operationId: get-tesla-vehicles\n      description: Once the Tesla account credentials have been configured via the `/config` API this endpoint will return a list of vehicles associated with the account. The ID of the vehicle to use for SoC/Range can then be set using `tesla_vehicle_id` on the `/config` endpoint.\ncomponents:\n  schemas:\n    Message:\n      title: Informational message\n      type: object\n      properties:\n        msg:\n          type: string\n          description: The message\n    ScheduleEvent:\n      type: object\n      properties:\n        id:\n          type: integer\n          example: 1\n        state:\n          $ref: ./models/EvseState.yaml\n        time:\n          type: string\n          format: time\n        days:\n          type: array\n          uniqueItems: true\n          items:\n            type: string\n            enum:\n              - monday\n              - tuesday\n              - wednesday\n              - thursday\n              - friday\n              - saturday\n              - sunday\n      required:\n        - state\n        - time\n        - days\n      title: ''\n    LogEvent:\n      title: LogEvent\n      type: object\n      x-examples:\n        example-1:\n          value:\n            time: '2021-08-24T14:15:22Z'\n            type: information\n            managerState: active\n            evseState: 1\n            evseFlags: 123\n            pilot: 32\n            energy: 1234.5\n            elapsed: 123456\n            temperature: 35.4\n            tempuratureMax: 50.4\n            divertMode: 1\n      properties:\n        time:\n          type: string\n          format: date-time\n          readOnly: true\n        type:\n          type: string\n          enum:\n            - information\n            - notification\n            - warning\n        managerState:\n          $ref: ./models/EvseState.yaml\n        evseState:\n          type: integer\n          minimum: 0\n          maximum: 255\n        evseFlags:\n          type: integer\n          format: int32\n        pilot:\n          type: integer\n          format: int32\n          minimum: 0\n        energy:\n          type: number\n          format: double\n          minimum: 0\n        elapsed:\n          type: integer\n          format: int32\n          minimum: 0\n        temperature:\n          type: number\n          format: double\n        tempuratureMax:\n          type: number\n          format: double\n        divertMode:\n          type: integer\n          format: int32\n          minimum: 1\n          maximum: 2\n          exclusiveMaximum: false\n  responses:\n    UpdateSuccessful:\n      description: Update successful\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Message'\n          examples:\n            Success message:\n              value:\n                msg: done\n    NotFound:\n      description: Example response\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Message'\n          examples:\n            Not found:\n              value:\n                msg: Not found\n    BadRequest:\n      description: Example response\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Message'\n          examples:\n            Bad JSON:\n              value:\n                msg: Could not parse JSON\n  parameters: {}\ntags:\n  - name: Claims\n  - name: Config\n  - name: Event Log\n  - name: Manual Override\n  - name: Schedule\n  - name: Status\n  - name: Tesla\n"
		}
	},
	"Error": "parse: parse spec: paths: /claims: get: operation \"listClaims\": responses: 200: content: \"application/json\": schema: parse schema: item: parse schema: reference \"./models/Claim.yaml\": resolve reference \"./models/Claim.yaml\": invalid schema reference \"./models/Claim.yaml\""
}