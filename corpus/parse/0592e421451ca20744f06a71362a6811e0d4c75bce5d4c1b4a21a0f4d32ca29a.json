{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/paritytech/substrate-api-sidecar"
		},
		"file": {
			"name": "openapi-v1.yaml",
			"size": 0,
			"path": "docs/src/openapi-v1.yaml",
			"byteSize": 98189,
			"content": "openapi: 3.0.0\ninfo:\n  title: Substrate API Sidecar\n  description: Substrate API Sidecar is a REST service that makes it easy to\n    interact with blockchain nodes built using Substrate's FRAME framework.\n  contact:\n    url: https://github.com/paritytech/substrate-api-sidecar\n  license:\n    name: GPL-3.0-or-later\n    url: https://github.com/paritytech/substrate-api-sidecar/blob/master/LICENSE\n  version: 11.3.19\ntags:\n- name: accounts\n- name: blocks\n- name: node\n  description: node connected to sidecar\n- name: pallets\n  description: pallets employed in the runtime\n- name: runtime\n- name: transaction\n- name: paras\n- name: trace\npaths:\n  /accounts/{accountId}/asset-balances:\n    get:\n      tags:\n      - accounts\n      summary: Get an array of asset-balances for an account.\n      description: Returns information about an account's asset-balances. This is\n        specific to the assets pallet for parachains. If no `assets` query parameter\n        is provided, all asset-balances for the given account will be returned.\n      operationId: getAssetBalances\n      parameters:\n      - name: accountId\n        in: path\n        description: SS58 address of the account.\n        required: true\n        schema:\n          type: string\n          format: SS58\n      - name: at\n        in: query\n        description: Block at which to query asset-balance info for the\n          specified account.\n        required: false\n        schema:\n          type: string\n          description: Block height (as a positive integer) or hash\n            (as a hex string).\n          format: unsignedInteger or $hex\n      - name: assets\n        in: query\n        description: An array of AssetId's to be queried. If not supplied, defaults to providing\n          all asset balances associated with the `accountId` will be returned. The array query param\n          format follows Express 4.x API. ex:`?assets[]=1\u0026assets[]=2\u0026assets[]=3`.\n        required: false\n        schema:\n          type: array\n          items:\n            type: string\n          description: An array of assetId numbers represented as strings\n          format: Array of unsignedInteger's\n      responses:\n        \"200\":\n          description: successfull operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccountAssetsBalances'\n        \"400\":\n          description: Invalid Address\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /accounts/{accountId}/asset-approvals:\n    get:\n      tags:\n      - accounts\n      summary: Get an asset approval for an account.\n      description: Returns information about an account's asset approval transaction.\n        It is required to pass in a delegate and an assetId as query parameters.\n      operationId: getAssetApprovals\n      parameters:\n      - name: accountId\n        in: path\n        description: SS58 address of the account.\n        required: true\n        schema:\n          type: string\n          format: SS58\n      - name: at\n        in: query\n        description: Block at which to query asset approval info for the\n          specified account.\n        required: false\n        schema:\n          type: string\n          description: Block height (as a non-negative integer) or hash\n            (as a hex string).\n          format: unsignedInteger or $hex\n      - name: assetId\n        in: query\n        description: The `assetId` associated with the asset-approval.\n        required: true\n        schema:\n          type: string\n          description: An assetId represented as an unsignedInteger.\n          format: unsignedInteger\n      - name: delegate\n        in: query\n        description: The delegate's `accountId` associated with an asset-approval.\n        required: true\n        schema:\n          type: string\n          format: SS58\n      responses:\n        \"200\":\n          description: successfull operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccountAssetsApproval'\n        \"400\":\n          description: Invalid Address\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /accounts/{accountId}/balance-info:\n    get:\n      tags:\n      - accounts\n      summary: Get balance information for an account.\n      description: Returns information about an account's balance.\n        Replaces `/balance/{address}` from versions \u003c v1.0.0.\n      operationId: getAccountBalanceInfo\n      parameters:\n      - name: accountId\n        in: path\n        description: SS58 address of the account.\n        required: true\n        schema:\n          type: string\n          format: SS58\n      - name: at\n        in: query\n        description: Block at which to query balance info for the\n          specified account.\n        required: false\n        schema:\n          type: string\n          description: Block height (as a non-negative integer) or hash\n            (as a hex string).\n          format: unsignedInteger or $hex\n      - name: token\n        in: query\n        description: 'Token to query the balance of. If not specified it will query\n          the chains native token (e.g. DOT for Polkadot). Note: this is only relevant\n          for chains that support multiple tokens through the ORML tokens pallet.'\n        required: false\n        schema:\n          type: string\n          description: Token symbol\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccountBalanceInfo'\n        \"400\":\n          description: Invalid Address\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"404\":\n          description: account not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /accounts/{accountId}/staking-info:\n    get:\n      tags:\n      - staking\n      summary: Get staking information for a _Stash_ account.\n      description: Returns information about a _Stash_ account's staking activity.\n        Replaces `/staking/{address}` from versions \u003c v1.0.0.\n      operationId: getStakingSummaryByAccountId\n      parameters:\n      - name: accountId\n        in: path\n        description: SS58 address of the account. Must be a _Stash_ account.\n        required: true\n        schema:\n          format: SS58\n          type: string\n      - name: at\n        in: query\n        description: Block at which to query the staking info for the\n          specified account.\n        required: false\n        schema:\n          type: string\n          description: Block identifier, as the block height or block hash.\n          format: unsignedInteger or $hex\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccountStakingInfo'\n        \"400\":\n          description: invalid blockId supplied for at query param\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"404\":\n          description: account not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /accounts/{accountId}/staking-payouts:\n    get:\n      tags:\n      - staking\n      summary: Get payout information for a _Stash_ account.\n      description: Returns payout information for the last specified eras. If\n        specifying both the depth and era query params, this endpoint will\n        return information for (era - depth) through era. (i.e. if depth=5 and\n        era=20 information will be returned for eras 16 through 20). N.B. You\n        cannot query eras less then `current_era - HISTORY_DEPTH`. N.B. The\n        `nominator*` fields correspond to the address being queried, even if it\n        is a validator's _Stash_ address. This is because a validator is technically\n        nominating itself.\n      operationId: getStakingPayoutsByAccountId\n      parameters:\n      - name: accountId\n        in: path\n        description: SS58 address of the account. Must be a _Stash_ account.\n        required: true\n        schema:\n          format: SS58\n          type: string\n      - name: depth\n        in: query\n        description: The number of eras to query for payouts of. Must be less\n          than or equal to `HISTORY_DEPTH`. In cases where `era - (depth -1)` is\n          less than 0, the first era queried will be 0.\n        required: false\n        schema:\n          type: string\n          format: unsignedInteger\n          default: 1\n      - name: era\n        in: query\n        description: The era to query at.\n        required: false\n        schema:\n          type: string\n          format: unsignedInteger\n          default: '`active_era - 1`'\n      - name: unclaimedOnly\n        in: query\n        description: Only return unclaimed rewards.\n        required: false\n        schema:\n          type: string\n          format: boolean\n          default: true\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccountStakingPayouts'\n        \"400\":\n          description: invalid blockId supplied for at query param\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"404\":\n          description: account not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /accounts/{accountId}/vesting-info:\n    get:\n      tags:\n      - accounts\n      summary: Get vesting information for an account.\n      description: Returns the vesting schedule for an account.\n        Replaces `/vesting/{address}` from versions \u003c v1.0.0.\n      operationId: getVestingSummaryByAccountId\n      parameters:\n      - name: accountId\n        in: path\n        description: SS58 address of the account.\n        required: true\n        schema:\n          format: SS58\n          type: string\n      - name: at\n        in: query\n        description: Block at which to query the vesting info for the\n          specified account.\n        required: false\n        schema:\n          type: string\n          description: Block identifier, as the block height or block hash.\n          format: unsignedInteger or $hex\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccountVestingInfo'\n        \"400\":\n          description: Invalid Address\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"404\":\n          description: account not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /accounts/{accountId}/validate:\n    get:\n      tags:\n      - accounts\n      summary: Validate a given address.\n      description: Returns whether the given address is valid ss58 format and the ss58 prefix if the address has one.\n      operationId: getValidationByAccountId\n      parameters:\n      - name: accountId\n        in: path\n        description: SS58 or Hex address of the account.\n        required: true\n        schema:\n          format: SS58 or Hex\n          type: string\n      responses:\n        \"200\":\n          description: successfully retrieved address info\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccountValidation'\n  /blocks/{blockId}:\n    get:\n      tags:\n      - blocks\n      summary: Get a block by its height or hash.\n      description: Returns a single block. BlockId can either be a block hash or a\n        block height. Replaces `/block/{number}` from versions \u003c v1.0.0.\n      operationId: getBlockById\n      parameters:\n      - name: blockId\n        in: path\n        description: Block identifier, as the block height or block hash.\n        required: true\n        schema:\n          pattern: 'a-km-zA-HJ-NP-Z1-9{8,64}'\n          type: string\n      - name: eventDocs\n        in: query\n        description: When set to `true`, every event will have an extra `docs`\n          property with a string of the events documentation.\n        required: false\n        schema:\n          type: boolean\n          default: false\n      - name: extrinsicDocs\n        in: query\n        description: When set to `true`, every extrinsic will have an extra `docs`\n          property with a string of the extrinsics documentation.\n        required: false\n        schema:\n          type: boolean\n          default: false\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Block'\n        \"400\":\n          description: invalid Block identifier supplied\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /blocks/{blockId}/header:\n    get:\n      tags:\n      - blocks\n      summary: Get a block's header by its height or hash.\n      description: Returns a single block's header. BlockId can either be a block hash or a\n        block height.\n      operationId: getBlockHeaderById\n      parameters:\n      - name: blockId\n        in: path\n        description: Block identifier, as the block height or block hash.\n        required: true\n        schema:\n          pattern: 'a-km-zA-HJ-NP-Z1-9{8,64}'\n          type: string\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BlockHeader'\n        \"400\":\n          description: invalid Block identifier supplied\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /blocks/{blockId}/extrinsics/{extrinsicIndex}:\n    get:\n      tags:\n      - blocks\n      summary: Get an extrinsic by its extrinsicIndex and block height or hash.\n        The pair blockId, extrinsicIndex is sometimes referred to as a Timepoint.\n      description: Returns a single extrinsic.\n      operationId: getExtrinsicByTimepoint\n      parameters:\n      - name: blockId\n        in: path\n        description: Block identifier, as the block height or block hash.\n        required: true\n        schema:\n          pattern: a-km-zA-HJ-NP-Z1-9{8,64}\n          type: string\n      - name: extrinsicIndex\n        in: path\n        description: The extrinsic's index within the block's body.\n        required: true\n        schema:\n          type: string\n      - name: eventDocs\n        in: query\n        description: When set to `true`, every event will have an extra `docs`\n          property with a string of the events documentation.\n        required: false\n        schema:\n          type: boolean\n          default: false\n      - name: extrinsicDocs\n        in: query\n        description: When set to `true`, every extrinsic will have an extra `docs`\n          property with a string of the extrinsics documentation.\n        required: false\n        schema:\n          type: boolean\n          default: false\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExtrinsicIndex'\n        \"400\":\n          description: Requested `extrinsicIndex` does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /blocks/head:\n    get:\n      tags:\n      - blocks\n      summary: Get the most recently finalized block.\n      description: Returns the most recently finalized block. Replaces `/block`\n        from versions \u003c v1.0.0.\n      operationId: getHeadBlock\n      parameters:\n      - name: finalized\n        in: query\n        description: Boolean representing whether or not to get the finalized head.\n          If it is not set the value defaults to true. When set to false it will attempt\n          to get the newest known block, which may not be finalized.\n        required: false\n        schema:\n          type: boolean\n          default: true\n      - name: eventDocs\n        in: query\n        description: When set to `true`, every event will have an extra `docs`\n          property with a string of the events documentation.\n        required: false\n        schema:\n          type: boolean\n          default: false\n      - name: extrinsicDocs\n        in: query\n        description: When set to `true`, every extrinsic will have an extra `docs`\n          property with a string of the extrinsics documentation.\n        required: false\n        schema:\n          type: boolean\n          default: false\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Block'\n  /blocks/head/header:\n    get:\n      tags:\n      - blocks\n      summary: Get information about the header of the most recent finalized block.\n      description: Returns the most recently finalized block's header.\n      operationId: getLatestBlockHeader\n      parameters:\n      - name: finalized\n        in: query\n        description: Boolean representing whether or not to get the finalized head.\n          If it is not set the value defaults to true. When set to false it will attempt\n          to get the newest known block, which may not be finalized.\n        required: false\n        schema:\n          type: boolean\n          default: true\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BlockHeader'\n        \"400\":\n          description: invalid Block identifier supplied\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /node/network:\n    get:\n      tags:\n      - node\n      summary: Get information about the Substrate node's activity in the peer-to-peer network.\n      description: Returns network related information of the node.\n      operationId: getNodeNetworking\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NodeNetwork'\n  /node/transaction-pool:\n    get:\n      tags:\n      - node\n      summary: Get pending extrinsics from the Substrate node.\n      description: Returns the extrinsics that the node knows of that have not\n        been included in a block.\n      operationId: getNodeTransactionPool\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionPool'\n  /node/version:\n    get:\n      tags:\n      - node\n      summary: Get information about the Substrates node's implementation and versioning.\n      description: Returns versioning information of the node.\n      operationId: getNodeVersion\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NodeVersion'\n  /transaction:\n    post:\n      tags:\n      - transaction\n      summary: Submit a transaction to the node's transaction pool.\n      description: Accepts a valid signed extrinsic. Replaces `/tx` from versions\n        \u003c v1.0.0.\n      operationId: submitTransaction\n      requestBody:\n        $ref: '#/components/requestBodies/Transaction'\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionSuccess'\n        \"400\":\n            description: failed to parse or submit transaction\n            content:\n              application/json:\n                schema:\n                  $ref: '#/components/schemas/TransactionFailure'\n  /transaction/dry-run:\n    post:\n      tags:\n      - transaction\n      summary: Dry run an extrinsic.\n      description: Use the dryrun call to practice submission of a transaction.\n      operationId: dryrunTransaction\n      requestBody:\n        $ref: '#/components/requestBodies/Transaction'\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionDryRun'\n        \"500\":\n          description: failed to dry-run transaction\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionFailure'\n  /transaction/fee-estimate:\n    post:\n      tags:\n      - transaction\n      summary: Receive a fee estimate for a transaction.\n      description: \u003e-\n        Send a serialized transaction and receive back a naive fee estimate.\n        Note: `partialFee` does not include any tips that you may add to increase\n        a transaction's priority. See the reference on `compute_fee`.\n        Replaces `/tx/fee-estimate` from versions \u003c v1.0.0.\n        Substrate Reference:\n        - `RuntimeDispatchInfo`: https://crates.parity.io/pallet_transaction_payment_rpc_runtime_api/struct.RuntimeDispatchInfo.html\n        - `query_info`: https://crates.parity.io/pallet_transaction_payment/struct.Module.html#method.query_info\n        - `compute_fee`: https://crates.parity.io/pallet_transaction_payment/struct.Module.html#method.compute_fee\n      operationId: feeEstimateTransaction\n      requestBody:\n        $ref: '#/components/requestBodies/Transaction'\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionFeeEstimate'\n        \"500\":\n          description: fee estimation failure\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionFeeEstimateFailure'\n  /transaction/material:\n    get:\n      tags:\n      - transaction\n      summary: Get all the network information needed to construct a transaction offline.\n      description: Returns the material that is universal to constructing any\n        signed transaction offline. Replaces `/tx/artifacts` from versions \u003c v1.0.0.\n      operationId: getTransactionMaterial\n      parameters:\n      - name: at\n        in: query\n        description: Block at which to retrieve the transaction construction\n          material.\n        required: false\n        schema:\n          type: string\n          description: Block identifier, as the block height or block hash.\n          format: unsignedInteger or $hex\n      - name: noMeta\n        in: query\n        schema:\n          type: boolean\n          description: If true, does not return metadata hex. This is useful when\n            metadata is not needed and response time is a concern. Defaults to false.\n            This is due for deprecation in future releases. Please migrate to using the\n            `metadata` query param.\n          default: false\n      - name: metadata\n        in: query\n        schema:\n          type: string\n          description: Specifies the format of the metadata to be returned. Accepted values are\n            'json', and 'scale'. 'json' being the decoded metadata, and 'scale' being the SCALE encoded metadata.\n            When inputted it will override the `noMeta` query parameter.\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionMaterial'\n        \"400\":\n          description: invalid blockId supplied for at query param\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /pallets/assets/{assetId}/asset-info:\n    get:\n      tags:\n        - pallets\n      summary: Get information and metadata associated with an asset.\n      description: Returns information associated with an asset which includes\n        the assets `AssetDetails` and `AssetMetadata`.\n      operationId: getAssetById\n      parameters:\n      - name: assetId\n        in: path\n        description: The unsignedInteger Id of an asset.\n        required: true\n        schema:\n          type: string\n          format: unsignedInteger\n      - name: at\n        in: query\n        description: Block at which to retrieve the assetInfo.\n        required: false\n        schema:\n          type: string\n          description: Block identifier, as the block height or block hash.\n          format: unsignedInteger or $hex\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PalletsAssetsInfo'\n  /pallets/staking/progress:\n    get:\n      tags:\n      - staking\n      - pallets\n      summary: Get progress on the general Staking pallet system.\n      description: Returns information on the progress of key components of the\n        staking system and estimates of future points of interest. Replaces\n        `/staking-info` from versions \u003c v1.0.0.\n      operationId: getStakingProgress\n      parameters:\n      - name: at\n        in: query\n        description: Block at which to retrieve a staking progress report.\n        required: false\n        schema:\n          type: string\n          description: Block identifier, as the block height or block hash.\n          format: unsignedInteger or $hex\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StakingProgress'\n        \"400\":\n          description: invalid blockId supplied for at query param\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /runtime/metadata:\n    get:\n      tags:\n      - runtime\n      summary: Get the runtime metadata in decoded, JSON form.\n      description: \u003e-\n       Returns the runtime metadata as a JSON object.\n       Substrate Reference:\n       - FRAME Support: https://crates.parity.io/frame_support/metadata/index.html\n       - Knowledge Base: https://substrate.dev/docs/en/knowledgebase/runtime/metadata\n      parameters:\n      - name: at\n        in: query\n        description: Block at which to retrieve the metadata at.\n        required: false\n        schema:\n          type: string\n          description: Block identifier, as the block height or block hash.\n          format: unsignedInteger or $hex\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                description: Response is dependent on the runtime metadata contents.\n  /runtime/code:\n    get:\n      tags:\n      - runtime\n      summary: Get the runtime wasm blob.\n      description: Returns the runtime Wasm blob in hex format.\n      parameters:\n      - name: at\n        in: query\n        description: Block at which to retrieve the runtime wasm blob at.\n        required: false\n        schema:\n          type: string\n          description: Block identifier, as the block height or block hash.\n          format: unsignedInteger or $hex\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RuntimeCode'\n  /runtime/spec:\n    get:\n      tags:\n      - runtime\n      summary: Get version information of the Substrate runtime.\n      description: Returns version information related to the runtime.\n      parameters:\n      - name: at\n        in: query\n        description: Block at which to retrieve runtime version information at.\n        required: false\n        schema:\n          type: string\n          description: Block identifier, as the block height or block hash.\n          format: unsignedInteger or $hex\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RuntimeSpec'\n  /pallets/{palletId}/storage:\n    get:\n      tags:\n      - pallets\n      summary: Get a list of storage items for a pallet.\n      description: Returns a list of storage item metadata for storage items of the\n        specified palletId.\n      parameters:\n      - name: palletId\n        in: path\n        description: 'Name or index of the pallet to query the storage of. Note: the pallet name must match what is\n          specified in the runtime metadata.'\n        required: true\n        schema:\n          type: string\n      - name: adjustMetadataV13\n        in: query\n        description: Instruct sidecar to return `StorageEntryType` in the V13 metadata\n          format rather than V14. This is a **temporary** flag to allow existing systems to migrate.\n          It will be deprecated and then removed in the future.\n        required: false\n        schema:\n          type: boolean\n      - name: onlyIds\n        in: query\n        description: Only return the names (IDs) of the storage items instead of all of each storage\n          item's metadata.\n        required: false\n        schema:\n          type: boolean\n      - name: at\n        in: query\n        description: Block at which to retrieve a list of\n          the pallet's storage items.\n        required: false\n        schema:\n          type: string\n          description: Block identifier, as the block height or block hash.\n          format: unsignedInteger or $hex\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                description: Pallet info and Array of storageItemIds.\n                items:\n                  $ref: '#/components/schemas/PalletStorage'\n        \"400\":\n          description: invalid blockId supplied for at query param\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"404\":\n          description: could not find pallet with palletId\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /pallets/{palletId}/storage/{storageItemId}:\n    get:\n      tags:\n      - pallets\n      summary: Get the value of a storage item.\n      description: Returns the value stored under the storageItemId. If it is a\n        map, query param key1 is required. If the storage item is double map\n        query params key1 and key2 are required.\n      parameters:\n      - name: palletId\n        in: path\n        description: 'Name or index of the pallet to query the storage of. Note: pallet name aligns with\n          pallet name as specified in runtime metadata.'\n        required: true\n        schema:\n          type: string\n      - name: storageItemId\n        in: path\n        description: Id of the storage item to query for.\n        required: true\n        schema:\n          type: string\n      - name: adjustMetadataV13\n        in: query\n        description: Instruct sidecar to return `StorageEntryType` in the V13 metadata\n          format rather than V14. This is a **temporary** flag to allow existing systems to migrate.\n          It will be deprecated and then removed in the future.\n        required: false\n        schema:\n          type: boolean\n      - name: key1\n        in: query\n        description: Key for a map, or first key for a double map. Required for querying\n          a map.\n        required: false\n        schema:\n          type: string\n      - name: key2\n        in: query\n        description: Second key for a double map. Required for querying a double map.\n        required: false\n        schema:\n          type: string\n      - name: at\n        in: query\n        description: Block at which to query the storage item at.\n        required: false\n        schema:\n          type: string\n          description: Block identifier, as the block height or block hash.\n          format: unsignedInteger or $hex\n      - name: metadata\n        in: query\n        description: Include the storage items metadata (including documentation)\n          if set to true.\n        required: false\n        schema:\n          default: false\n          type: boolean\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PalletStorageItem'\n        \"400\":\n          description: invalid blockId supplied for at query param\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"404\":\n          description: could not find resource with with id\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /paras:\n    get:\n      tags:\n      - paras\n      summary: |\n        List all registered paras (parathreads \u0026 parachains).\n      description: Returns all registered parachains and parathreads with lifecycle info.\n      parameters:\n      - name: at\n        in: query\n        description: Block at which to retrieve paras list at.\n        required: false\n        schema:\n          type: string\n          description: Block identifier, as the block height or block hash.\n          format: unsignedInteger or $hex\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Paras'\n  /paras/leases/current:\n    get:\n      tags:\n      - paras\n      summary: |\n        Get general information about the current lease period.\n      description: |\n        Returns an overview of the current lease period, including lease holders.\n      parameters:\n      - name: at\n        in: query\n        description: Block at which to retrieve current lease period info at.\n        required: false\n        schema:\n          type: string\n          description: Block identifier, as the block height or block hash.\n          format: unsignedInteger or $hex\n      - name: currentLeaseHolders\n        in: query\n        description: |\n          Wether or not to include the `currentLeaseHolders` property. Inclusion\n          of the property will likely result in a larger payload and increased\n          response time.\n        required: false\n        schema:\n          type: boolean\n          default: true\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ParasLeasesCurrent'\n  /paras/auctions/current:\n    get:\n      tags:\n      - paras\n      summary: |\n        Get the status of the current auction.\n      description: |\n        Returns an overview of the current auction. There is only one auction\n        at a time. If there is no auction most fields will be `null`. If the current\n        auction phase is in `vrfDelay` and you are looking to retrieve the latest winning\n        bids, it is advised to query one block before `finishEnd` in the `endingPeriod` phase\n        for that auction as there technically are no winners during the `vrfDelay` and thus \n        the field is `null`.\n      parameters:\n      - name: at\n        in: query\n        description: Block at which to retrieve auction progress at.\n        required: false\n        schema:\n          type: string\n          description: Block identifier, as the block height or block hash.\n          format: unsignedInteger or $hex\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ParasAuctionsCurrent'\n  /paras/crowdloans:\n    get:\n      tags:\n      - paras\n      summary: |\n        List all stored crowdloans.\n      description: |\n        Returns a list of all the crowdloans and their associated paraIds.\n      parameters:\n      - name: at\n        in: query\n        description: Block at which to retrieve the list of paraIds that have crowdloans at.\n        required: false\n        schema:\n          type: string\n          description: Block identifier, as the block height or block hash.\n          format: unsignedInteger or $hex\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ParasCrowdloans'\n  /paras/{paraId}/crowdloan-info:\n    get:\n      tags:\n      - paras\n      summary: |\n        Get crowdloan information for a `paraId`.\n      description: |\n        Returns crowdloan's `fundInfo` and the set of `leasePeriods` the crowdloan`\n        covers.\n      parameters:\n      - name: paraId\n        in: path\n        description: paraId to query the crowdloan information of.\n        required: true\n        schema:\n          type: number\n      - name: at\n        in: query\n        description: Block at which to retrieve info at.\n        required: false\n        schema:\n          type: string\n          description: Block identifier, as the block height or block hash.\n          format: unsignedInteger or $hex\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ParasCrowdloanInfo'\n  /paras/{paraId}/lease-info:\n    get:\n      tags:\n      - paras\n      summary: |\n        Get current and future leases as well as the lifecycle stage for a given `paraId`.\n      description: |\n        Returns a list of leases that belong to the `paraId` as well as the\n        `paraId`'s current lifecycle stage.\n      parameters:\n      - name: paraId\n        in: path\n        description: paraId to query the crowdloan information of.\n        required: true\n        schema:\n          type: number\n      - name: at\n        in: query\n        description: Block at which to retrieve para's leases at.\n        required: false\n        schema:\n          type: string\n          description: Block identifier, as the block height or block hash.\n          format: unsignedInteger or $hex\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ParasLeaseInfo'\n  /experimental/blocks/head/traces:\n    get:\n      tags:\n      - trace\n      summary: |\n        [Experimental - subject to breaking change.] Get traces for the most\n        recently finalized block.\n      description: |\n        Returns traces (spans and events) of the most recently finalized block from\n        RPC `state_straceBlock`. Consult the [RPC docs](https://github.com/paritytech/substrate/blob/aba876001651506f85c14baf26e006b36092e1a0/client/rpc-api/src/state/mod.rs#L140)\n        for conceptual info.\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BlocksTrace'\n  /experimental/blocks/{blockId}/traces:\n    get:\n      tags:\n      - trace\n      summary: |\n        [Experimental - subject to breaking change.] Get traces for the given `blockId`.\n      description: |\n        Returns traces (spans and events) of the specified block from\n        RPC `state_straceBlock`. Consult the [RPC docs](https://github.com/paritytech/substrate/blob/aba876001651506f85c14baf26e006b36092e1a0/client/rpc-api/src/state/mod.rs#L140) for conceptual info.\n      parameters:\n      - name: blockId\n        in: path\n        description: Block identifier, as the block height or block hash.\n        required: true\n        schema:\n          pattern: 'a-km-zA-HJ-NP-Z1-9{8,64}'\n          type: string\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BlocksTrace'\n  /experimental/blocks/head/traces/operations:\n    get:\n      tags:\n      - trace\n      summary: |\n        [Experimental - subject to breaking change.] Get the operations from the\n        most recently finalized block.\n      description: |\n        Returns the operations from the most recently finalized block. Operations\n        represent one side of a balance change. For example if Alice transfers\n        100unit to Bob there will be two operations; 1) Alice - 100 2) Bob + 100.\n\n        Given account A and A's balance at block k0 (Ak0), if we sum all the\n        operations for A from block k1 through kn against Ak0, we will end up\n        with A's balance at block kn (Akn). Thus, operations can be used to audit\n        that balances change as expected.\n\n        This is useful for Substrate based chains because the advanced business\n        logic can make it difficult to ensure auditable balance reconciliation\n        based purely on events. Instead of using events one can use the\n        operations given from this endpoint.\n\n        Note - each operation corresponds to a delta of a single field of the\n        `system::AccountData` storage item (i.e `free`, `reserved`, `misc_frozen`\n        and `fee_frozen`).\n        Note - operations are assigned a block execution phase (and extrinsic index\n        for those in the apply extrinsic phase) based on an \"action group\". For\n        example all the operations for 1 extrinsic will be in the same action group.\n        The action groups can optionally be fetched with the `action` query param\n        for closer auditing.\n        Note - There are no 0 value operations (e.g. a transfer of 0, or a\n        transfer to itself)\n\n        To learn more about operation and action group creation please consult\n        [this diagram](https://docs.google.com/drawings/d/1vZoJo9jaXlz0LmrdTOgHck9_1LsfuQPRmTr-5g1tOis/edit?usp=sharing)\n      parameters:\n      - name: actions\n        in: query\n        description: Whether or not to include action groups.\n        required: false\n        schema:\n          type: boolean\n          default: false\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BlocksTraceOperations'\n  /experimental/blocks/{blockId}/traces/operations:\n    get:\n      tags:\n      - trace\n      summary: |\n        [Experimental - subject to breaking change.] Get the operations from the\n        specified block.\n      description: |\n        Returns the operations from the most recently finalized block. Operations\n        represent one side of a balance change. For example if Alice transfers\n        100unit to Bob there will be two operations; 1) Alice - 100 2) Bob + 100.\n\n        Given account A and A's balance at block k0 (Ak0), if we sum all the\n        operations for A from block k1 through kn against Ak0, we will end up\n        with A's balance at block kn (Akn). Thus, operations can be used to audit\n        that balances change as expected.\n\n        This is useful for Substrate based chains because the advanced business\n        logic can make it difficult to ensure auditable balance reconciliation\n        based purely on events. Instead of using events one can use the\n        operations given from this endpoint.\n\n        Note - each operation corresponds to a delta of a single field of the\n        `system::AccountData` storage item (i.e `free`, `reserved`, `misc_frozen`\n        and `fee_frozen`).\n        Note - operations are assigned a block execution phase (and extrinsic index\n        for those in the apply extrinsic phase) based on an \"action group\". For\n        example all the operations for 1 extrinsic will be in the same action group.\n        The action groups can optionally be fetched with the `action` query param\n        for closer auditing.\n        Note - There are no 0 value operations (e.g. a transfer of 0, or a\n        transfer to itself)\n\n        To learn more about operation and action group creation please consult\n        [this diagram](https://docs.google.com/drawings/d/1vZoJo9jaXlz0LmrdTOgHck9_1LsfuQPRmTr-5g1tOis/edit?usp=sharing)\n      parameters:\n      - name: blockId\n        in: path\n        description: Block identifier, as the block height or block hash.\n        required: true\n        schema:\n          pattern: 'a-km-zA-HJ-NP-Z1-9{8,64}'\n          type: string\n      - name: actions\n        in: query\n        description: Whether or not to include action groups.\n        required: false\n        schema:\n          type: boolean\n          default: false\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BlocksTraceOperations'\ncomponents:\n  schemas:\n    AccountAssetsApproval:\n      type: object\n      properties:\n        at:\n          $ref: '#/components/schemas/BlockIdentifiers'\n        amount:\n          type: string\n          description: The amount of funds approved for the balance transfer from the owner\n            to some delegated target.\n          format: unsignedInteger\n        deposit:\n          type: string\n          description: The amount reserved on the owner's account to hold this item in storage.\n          format: unsignedInteger\n    AccountAssetsBalances:\n      type: object\n      properties:\n        at:\n          $ref: '#/components/schemas/BlockIdentifiers'\n        assets:\n          type: array\n          description: An array of queried assets.\n          items:\n            $ref: '#/components/schemas/AssetsBalance'\n    AccountBalanceInfo:\n      type: object\n      properties:\n        at:\n          $ref: '#/components/schemas/BlockIdentifiers'\n        nonce:\n          type: string\n          description: Account nonce.\n          format: unsignedInteger\n        tokenSymbol:\n          type: string\n          description: Token symbol of the balances displayed in this response.\n          format: unsignedInteger\n        free:\n          type: string\n          description: Free balance of the account. Not equivalent to _spendable_\n            balance. This is the only balance that matters in terms of most operations\n            on tokens.\n          format: unsignedInteger\n        reserved:\n          type: string\n          description: Reserved balance of the account.\n          format: unsignedInteger\n        miscFrozen:\n          type: string\n          description: The amount that `free` may not drop below when withdrawing\n            for anything except transaction fee payment.\n          format: unsignedInteger\n        feeFrozen:\n          type: string\n          description: The amount that `free` may not drop below when withdrawing\n            specifically for transaction fee payment.\n          format: unsignedInteger\n        locks:\n          type: array\n          description: Array of locks on a balance. There can be many of these on\n            an account and they \"overlap\", so the same balance is frozen by multiple\n            locks\n          items:\n            $ref: '#/components/schemas/BalanceLock'\n    AccountStakingInfo:\n      type: object\n      properties:\n        at:\n          $ref: '#/components/schemas/BlockIdentifiers'\n        rewardDestination:\n          type: string\n          description: The account to which rewards will be paid. Can be 'Staked' (Stash\n            account, adding to the amount at stake), 'Stash' (Stash address, not\n            adding to the amount at stake), or 'Controller' (Controller address).\n          format: ss58\n          enum:\n          - Staked\n          - Stash\n          - Controller\n        controller:\n          type: string\n          description: Controller address for the given Stash.\n          format: ss58\n        numSlashingSpans:\n          type: string\n          description: Number of slashing spans on Stash account; `null` if provided address\n            is not a Controller.\n          format: unsignedInteger\n        nominations:\n          $ref: '#/components/schemas/Nominations'\n        stakingLedger:\n          $ref: '#/components/schemas/StakingLedger'\n      description: \u003e-\n        Note: Runtime versions of Kusama less than 1062 will either have `lastReward` in place of\n        `claimedRewards`, or no field at all. This is related to changes in reward distribution. See: [Lazy Payouts](https://github.com/paritytech/substrate/pull/4474), [Simple Payouts](https://github.com/paritytech/substrate/pull/5406)\n    AccountStakingPayouts:\n      type: object\n      properties:\n        at:\n          $ref: '#/components/schemas/BlockIdentifiers'\n        erasPayouts:\n          type: array\n          items:\n            type: object\n            properties:\n              era:\n                type: string\n                format: unsignedInteger\n                description: Era this information is associated with.\n              totalEraRewardPoints:\n                type: string\n                format: unsignedInteger\n                description: Total reward points for the era. Equals the sum of\n                  reward points for all the validators in the set.\n              totalEraPayout:\n                type: string\n                format: unsignedInteger\n                description: Total payout for the era. Validators split the payout\n                  based on the portion of `totalEraRewardPoints` they have.\n              payouts:\n                $ref: '#/components/schemas/Payouts'\n    AccountValidation:\n      type: object\n      properties:\n        isValid:\n          type: boolean\n          description: Whether the given address is valid ss58 formatted.\n        ss58Prefix:\n          type: string\n          description: SS58 prefix of the given address. If the address is a valid\n            base58 format, but incorrect ss58, a prefix for the given address will still be returned.\n          format: unsignedInteger\n    AccountVestingInfo:\n      type: object\n      description: Sidecar version's \u003c= v10.0.0 have a`vesting` return value that defaults to an object for\n        when there is no available vesting-info data. It also returns a `VestingInfo` as an object.\n        For Sidecar \u003e=11.0.0, that value will now default as an array when there is no value, and `Vec\u003cPalletsPalletVestingInfo\u003e`\n        is returned when there is.\n      properties:\n        at:\n          $ref: '#/components/schemas/BlockIdentifiers'\n        vesting:\n          type: array\n          items:\n            $ref: '#/components/schemas/VestingSchedule'\n    AssetsBalance:\n      type: object\n      properties:\n        assetId:\n          type: string\n          description: The identifier of the asset.\n          format: unsignedInteger\n        balance:\n          type: string\n          description: The balance of the asset.\n          format: unsignedInteger\n        isFrozen:\n          type: boolean\n          description: Whether the asset is frozen for non-admin transfers.\n        isSufficient:\n          type: boolean\n          description: Whether a non-zero balance of this asset is a deposit of sufficient\n            value to account for the state bloat associated with its balance storage. If set to\n            `true`, then non-zero balances may be stored without a `consumer` reference (and thus\n            an ED in the Balances pallet or whatever else is used to control user-account state\n            growth).\n    AssetInfo:\n      type: object\n      properties:\n        owner:\n          type: string\n          description: Owner of the assets privileges.\n          format: SS58\n        issuer:\n          type: string\n          description: The `AccountId` able to mint tokens.\n          format: SS58\n        admin:\n          type: string\n          description: The `AccountId` that can thaw tokens, force transfers and burn token from\n            any account.\n          format: SS58\n        freezer:\n          type: string\n          description: The `AccountId` that can freeze tokens.\n          format: SS58\n        supply:\n          type: string\n          description: The total supply across accounts.\n          format: unsignedInteger\n        deposit:\n          type: string\n          description: The balance deposited for this. This pays for the data stored.\n          format: unsignedInteger\n        minBalance:\n          type: string\n          description: The ED for virtual accounts.\n          format: unsignedInteger\n        isSufficient:\n          type: boolean\n          description: If `true`, then any account with this asset is given a provider reference. Otherwise, it\n            requires a consumer reference.\n        accounts:\n          type: string\n          description: The total number of accounts.\n          format: unsignedInteger\n        sufficients:\n          type: string\n          description: The total number of accounts for which is placed a self-sufficient reference.\n        approvals:\n          type: string\n          description: The total number of approvals.\n          format: unsignedInteger\n        isFrozen:\n          type: boolean\n          description: Whether the asset is frozen for non-admin transfers.\n    AssetMetadata:\n      type: object\n      properties:\n        deposit:\n          type: string\n          description: The balance deposited for this metadata. This pays for the data\n            stored in this struct.\n          format: unsignedInteger\n        name:\n          type: string\n          description: The user friendly name of this asset.\n          format: $hex\n        symbol:\n          type: string\n          description: The ticker symbol for this asset.\n          format: $hex\n        decimals:\n          type: string\n          description: The number of decimals this asset uses to represent one unit.\n          format: unsignedInteger\n        isFrozen:\n          type: boolean\n          description: Whether the asset metadata may be changed by a non Force origin.\n    BalanceLock:\n      type: object\n      properties:\n        id:\n          type: string\n          description: An identifier for this lock. Only one lock may be in existence\n            for each identifier.\n        amount:\n          type: string\n          description: The amount below which the free balance may not drop with this\n            lock in effect.\n          format: unsignedInteger\n        reasons:\n          type: string\n          description: Reasons for withdrawing balance.\n          enum:\n          - Fee = 0\n          - Misc = 1\n          - All = 2\n    Block:\n      type: object\n      properties:\n        hash:\n          type: string\n          description: The block's hash.\n          format: hex\n        number:\n          type: string\n          description: The block's height.\n          format: unsignedInteger\n        parentHash:\n          type: string\n          description: The hash of the parent block.\n          format: hex\n        stateRoot:\n          type: string\n          description: The state root after executing this block.\n          format: hex\n        extrinsicRoot:\n          type: string\n          description: The Merkle root of the extrinsics.\n          format: hex\n        authorId:\n          type: string\n          description: The account ID of the block author (may be undefined for some\n            chains).\n          format: ss58\n        logs:\n          type: array\n          items:\n            $ref: '#/components/schemas/DigestItem'\n          description: Array of `DigestItem`s associated with the block.\n        onInitialize:\n          $ref: '#/components/schemas/BlockInitialize'\n        extrinsics:\n          type: array\n          description: Array of extrinsics (inherents and transactions) within the\n            block.\n          items:\n            $ref: '#/components/schemas/Extrinsic'\n        onFinalize:\n          $ref: '#/components/schemas/BlockFinalize'\n        finalized:\n          type: boolean\n          description: \u003e-\n            A boolean identifying whether the block is finalized or not.\n            Note: on chains that do not have deterministic finality this field is omitted.\n      description: \u003e-\n        Note: Block finalization does not correspond to consensus, i.e. whether\n        the block is in the canonical chain. It denotes the finalization of block\n        _construction._\n    BlockFinalize:\n      type: object\n      properties:\n        events:\n          type: array\n          items:\n            $ref: '#/components/schemas/SanitizedEvent'\n      description: Object with an array of `SanitizedEvent`s that occurred during\n        block construction finalization with the `method` and `data` for each.\n    BlockHeader:\n      type: object\n      properties:\n        parentHash:\n          type: string\n          description: The hash of the parent block.\n          format: hex\n        number:\n          type: string\n          description: The block's height.\n          format: unsignedInteger\n        stateRoot:\n          type: string\n          description: The state root after executing this block.\n          format: hex\n        extrinsicRoot:\n          type: string\n          description: The Merkle root of the extrinsics.\n          format: hex\n        digest:\n          type: object\n          properties:\n            logs:\n              type: array\n              items:\n                $ref: '#/components/schemas/DigestItem'\n              description: Array of `DigestItem`s associated with the block.\n    BlockIdentifiers:\n      type: object\n      properties:\n        hash:\n          type: string\n          description: The block's hash.\n          format: hex\n        height:\n          type: string\n          description: The block's height.\n          format: unsignedInteger\n      description: Block number and hash at which the call was made.\n    BlockInitialize:\n      type: object\n      properties:\n        events:\n          type: array\n          items:\n            $ref: '#/components/schemas/SanitizedEvent'\n      description: Object with an array of `SanitizedEvent`s that occurred during\n        block initialization with the `method` and `data` for each.\n    BlocksTrace:\n      type: object\n      properties:\n        at:\n          $ref: '#/components/schemas/BlockIdentifiers'\n        blockHash:\n          type: string\n        events:\n          type: array\n          items:\n            $ref: '#/components/schemas/TraceEvent'\n        parentHash:\n          type: string\n        spans:\n          type: array\n          items:\n            $ref: '#/components/schemas/TraceSpan'\n        storageKeys:\n          type: string\n          description: Hex encoded storage keys used to filter events.\n        tracingTargets:\n          type: string\n          description: Targets used to filter spans and events.\n    BlocksTraceOperations:\n      type: object\n      properties:\n        at:\n          $ref: '#/components/schemas/BlockIdentifiers'\n        operations:\n          type: array\n          items:\n            $ref: '#/components/schemas/Operation'\n    ChainType:\n      type: object\n      description: Type of the chain. It will return one of the following enum variants as a key. Live, Development, Local, or Custom. Each variant will have a value as null except when the ChainType is Custom, it will return a string.\n      properties:\n        live:\n          type: string\n          nullable: true\n          default: null\n        development:\n          type: string\n          nullable: true\n          default: null\n        local:\n          type: string\n          nullable: true\n          default: null\n        custom:\n          type: string\n      example: \"{\\\"live\\\": null}\"\n    DigestItem:\n      type: object\n      properties:\n        type:\n          type: string\n        index:\n          type: string\n          format: unsignedInteger\n        value:\n          type: array\n          items:\n            type: string\n    ElectionStatus:\n      type: object\n      properties:\n        status:\n          type: object\n          description: \u003e-\n            [Deprecated](Works for polkadot runtimes before v0.8.30).\n\n            Era election status: either `Close: null` or `Open: \u003cBlockNumber\u003e`.\n            A status of `Close` indicates that the submission window for solutions\n            from off-chain Phragmen is not open. A status of `Open` indicates that the\n            submission window for off-chain Phragmen solutions has been open since\n            BlockNumber. N.B. when the submission window is open, certain\n            extrinsics are not allowed because they would mutate the state that the\n            off-chain Phragmen calculation relies on for calculating results.\n        toggleEstimate:\n          type: string\n          description: Upper bound estimate of the block height at which the `status`\n            will switch.\n          format: unsignedInteger\n      description: Information about the off-chain election. Not included in response when\n        `forceEra.isForceNone`.\n    Error:\n      type: object\n      properties:\n        code:\n          type: number\n        message:\n          type: string\n        stack:\n          type: string\n    ExtrinsicMethod:\n      type: object\n      properties:\n        pallet:\n          type: string\n        method:\n          type: string\n      description: Extrinsic method\n    Extrinsic:\n      type: object\n      properties:\n        method:\n          $ref: '#/components/schemas/ExtrinsicMethod'\n        signature:\n          $ref: '#/components/schemas/Signature'\n        nonce:\n          type: string\n          description: Account nonce, if applicable.\n          format: unsignedInteger\n        args:\n          type: object\n          description: \u003e-\n            Object of arguments keyed by parameter name. Note: if you are expecting an [`OpaqueCall`](https://substrate.dev/rustdocs/v2.0.0/pallet_multisig/type.OpaqueCall.html)\n            and it is not decoded in the response (i.e. it is just a hex string), then Sidecar was\n            not able to decode it and likely that it is not a valid call for the runtime.\n        tip:\n          type: string\n          description: Any tip added to the transaction.\n          format: unsignedInteger\n        hash:\n          type: string\n          description: The transaction's hash.\n          format: hex\n        info:\n          $ref: '#/components/schemas/RuntimeDispatchInfo'\n        era:\n          $ref: '#/components/schemas/GenericExtrinsicEra'\n        events:\n          type: array\n          description: An array of `SanitizedEvent`s that occurred during extrinsic\n            execution.\n          items:\n            $ref: '#/components/schemas/SanitizedEvent'\n        success:\n          type: boolean\n          description: Whether or not the extrinsic succeeded.\n        paysFee:\n          type: boolean\n          description: Whether the extrinsic requires a fee. Careful! This field relates\n            to whether or not the extrinsic requires a fee if called as a transaction.\n            Block authors could insert the extrinsic as an inherent in the block\n            and not pay a fee. Always check that `paysFee` is `true` and that the\n            extrinsic is signed when reconciling old blocks.\n    ExtrinsicIndex:\n      type: object\n      properties:\n        at:\n          $ref: '#/components/schemas/BlockIdentifiers'\n        extrinsic:\n          $ref: '#/components/schemas/Extrinsic'\n      description: A single extrinsic at a given block.\n    FundInfo:\n      type: object\n      properties:\n        depositor:\n          type: string\n        verifier:\n          type: string\n        deposit:\n          type: string\n          format: unsignedInteger\n        raised:\n          type: string\n          format: unsignedInteger\n        end:\n          type: string\n          format: unsignedInteger\n        cap:\n          type: string\n          format: unsignedInteger\n        lastConstribution:\n          type: string\n          enum:\n          - preEnding\n          - ending\n        firstPeriod:\n          type: string\n          format: unsignedInteger\n        lastPeriod:\n          type: string\n          format: unsignedInteger\n        trieIndex:\n          type: string\n          format: unsignedInteger\n    GenericExtrinsicEra:\n      type: object\n      description: |\n        The return value for era can either be `mortalEra`, or `immortalEra` and is represented as an enum in substrate. `immortalEra` meaning\n        the transaction is valid forever. `mortalEra` consists of a tuple containing a period and phase.\n        ex: `\"{\"mortalEra\": [\"64\", \"11\"]}\"`. The Period is the period of validity from the block hash found in the signing material.\n        The Phase is the period that this transaction's lifetime begins (and, importantly,\n        implies which block hash is included in the signature material).\n      properties:\n        mortalEra:\n          type: array\n          items:\n            type: string\n          description: Tuple of a Phase, and Period. Each item in the array will be a string formatted as an integer.\n        immortalEra:\n          type: string\n          description: Hardcoded constant '0x00'.\n          format: hex\n      example: \"{\\\"mortalEra\\\":[\\\"64\\\", \\\"11\\\"]}\"\n    NodeNetwork:\n      type: object\n      properties:\n        nodeRoles:\n          $ref: '#/components/schemas/NodeRole'\n        numPeers:\n          type: string\n          description: Number of peers the node is connected to.\n          format: unsignedInteger\n        isSyncing:\n          type: boolean\n          description: Whether or not the node is syncing. `False` indicates that the node is in sync.\n        shouldHavePeers:\n          type: boolean\n          description: Whether or not the node should be connected to peers. Might be false\n            for local chains or when running without discovery.\n        localPeerId:\n          type: string\n          description: Local copy of the `PeerId`.\n        localListenAddresses:\n          type: array\n          description: Multiaddresses that the local node is listening on. The addresses\n            include a trailing `/p2p/` with the local PeerId, and are thus suitable\n            to be passed to `system_addReservedPeer` or as a bootnode address for\n            example.\n          items:\n            type: string\n        peersInfo:\n          type: array\n          items:\n            $ref: '#/components/schemas/PeerInfo'\n    NodeRole:\n      type: string\n      description: Role of this node. (N.B. Sentry nodes are being deprecated.)\n      enum:\n      - Full\n      - LightClient\n      - Authority\n      - Sentry\n    NodeVersion:\n      type: object\n      properties:\n        clientVersion:\n          type: string\n          description: Node's binary version.\n        clientImplName:\n          type: string\n          description: Node's implementation name.\n        chain:\n          type: string\n          description: Node's chain name.\n      description: Version information of the node.\n    Nominations:\n      type: object\n      properties:\n        targets:\n          type: array\n          items:\n            type: string\n          description: The targets of the nomination.\n        submittedIn:\n          type: string\n          format: unsignedInteger\n          description: \u003e-\n             The era the nominations were submitted. (Except for initial\n             nominations which are considered submitted at era 0.)\n        suppressed:\n          type: boolean\n          description: Whether the nominations have been suppressed.\n    OnboardingAs:\n      type: string\n      enum:\n      - parachain\n      - parathread\n      description: |\n        This property only shows up when `paraLifecycle=onboarding`. It\n        describes if a particular para is onboarding as a `parachain` or a\n        `parathread`.\n    Operation:\n      type: object\n      properties:\n        phase:\n          $ref: '#/components/schemas/OperationPhase'\n        parentSpanId:\n          $ref: '#/components/schemas/SpanId'\n        primarySpanId:\n          $ref: '#/components/schemas/SpanId'\n        eventIndex:\n          type: string\n          format: unsignedInteger\n          description: Index of the underlying trace event.\n        address:\n          type: string\n          description: |\n           Account this operation affects. Note - this will be an object like\n           `{ id: address }` if the network uses `MultiAddress`\n        storage:\n          type: object\n          properties:\n            pallet:\n              type: string\n            item:\n              type: string\n            field1:\n              type: string\n              description: |\n                A field of the storage item. (i.e `system::Account::get(address).data`)\n            field2:\n              type: string\n              description: |\n                A field of the struct described by field1 (i.e\n                `system::Account::get(address).data.free`)\n        amount:\n          $ref: '#/components/schemas/OperationAmount'\n    OperationAmount:\n      type: object\n      properties:\n        values:\n          type: string\n          format: unsignedInteger\n        currency:\n          $ref: '#/components/schemas/OperationAmountCurrency'\n    OperationAmountCurrency:\n      type: object\n      properties:\n        symbol:\n          type: string\n          example: KSM\n    OperationPhase:\n      type: object\n      properties:\n        variant:\n          type: string\n          enum:\n          - onInitialize\n          - initialChecks\n          - applyExtrinsic\n          - onFinalize\n          - finalChecks\n          description: Phase of block execution pipeline.\n        extrinsicIndex:\n          type: string\n          format: unsignedInteger\n          description: |\n            If phase variant is `applyExtrinsic` this will be the index of\n            the extrinsic. Otherwise this field will not be present.\n    PalletsAssetsInfo:\n      type: object\n      properties:\n        at:\n          $ref: '#/components/schemas/BlockIdentifiers'\n        assetInfo:\n          $ref: '#/components/schemas/AssetInfo'\n        assetMetadata:\n          $ref: '#/components/schemas/AssetMetadata'\n    PalletStorage:\n      type: object\n      properties:\n        pallet:\n          type: string\n          description: Name of the pallet.\n          example: \"democracy\"\n        palletIndex:\n          type: string\n          description: Index of the pallet for looking up storage.\n          example: \"15\"\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/PalletStorageItemMetadata'\n          description: Array containing metadata for each storage entry of the pallet.\n    PalletStorageItem:\n      type: object\n      properties:\n        at:\n          $ref: '#/components/schemas/BlockIdentifiers'\n        pallet:\n          type: string\n          description: Name of the pallet.\n          example: \"democracy\"\n        palletIndex:\n          type: string\n          description: Index of the pallet for looking up storage.\n          example: \"15\"\n        storageItem:\n          type: string\n          description: Name of the storage item.\n          example: \"referendumInfoOf\"\n        key1:\n          type: string\n          description: Key1 query param. Will not show up in response unless it was passed as part of the URI.\n          example: \"2\"\n        key2:\n          type: string\n          description: Key2 query param. Will not show up in response if not defined in URI.\n          example: \"\"\n        value:\n          type: object\n          description: Value returned by this storage query.\n          example:\n            Ongoing:\n              end: \"1612800\"\n              proposalHash: \"0x7de70fc8be782076d0b5772be77153d172a5381c72dd56d3385e25f62abf507e\"\n              threshold: \"Supermajorityapproval\"\n              delay: \"403200\"\n              tally:\n                ayes: \"41925212461400000\"\n                nays: \"214535586500000\"\n                turnout: \"34485320658000000\"\n        metadata:\n          $ref: '#/components/schemas/PalletStorageItemMetadata'\n    PalletStorageItemMetadata:\n      type: object\n      properties:\n        name:\n          type: string\n          example: \"ReferendumInfoOf\"\n          description: The storage item's name (which is the same as the storage item's ID).\n        modifier:\n          type: string\n          example: \"Optional\"\n        type:\n          $ref: '#/components/schemas/PalletStorageType'\n        fallback:\n          type: string\n          example: \"0x00\"\n        docs:\n          type: string\n          example: \" Information concerning any given referendum.\\n\\n TWOX-NOTE: SAFE as indexes are not under an attacker’s control.\"\n      description: Metadata of a storage item from a FRAME pallet.\n    PalletStorageType:\n      type: object\n      description: If the query parameter 'adjustMetadataV13' is set to true, all historic blocks that are\n        pre v9110 will have the return type `StorageEntryTypeV13`, and all present and post v9110 blocks will\n        have a return type of `StorageEntryTypeV14`. Please check those types to see potential responses. This\n        will be deprecated and removed in the future, and will only live as `StorageEntryTypeV14`.\n    Para:\n      type: object\n      properties:\n        paraId:\n          type: string\n          format: unsignedInteger\n        paraLifecycle:\n          $ref: '#/components/schemas/ParaLifecycle'\n        onboardingAs:\n          $ref: '#/components/schemas/OnboardingAs'\n    Paras:\n      type: object\n      properties:\n        at:\n          $ref: '#/components/schemas/BlockIdentifiers'\n        paras:\n          type: array\n          items:\n            $ref: '#/components/schemas/Para'\n    ParasAuctionsCurrent:\n      type: object\n      properties:\n        at:\n          $ref: '#/components/schemas/BlockIdentifiers'\n        beginEnd:\n          type: string\n          format: unisgnedInteger or $null\n          description: |\n            Fist block (number) of the auction ending phase. `null` if there is no ongoing\n            auction.\n        finishEnd:\n          type: string\n          format: unisgnedInteger or $null\n          description: |\n            Last block (number) of the auction ending phase. `null` if there is no ongoing\n            auction.\n        phase:\n          type: string\n          enum:\n          - startPeriod\n          - endPeriod\n          - vrfDelay\n          description: |\n            An auction can be in one of 4 phases. Both `startingPeriod` () and `endingPeriod` indicate\n            an ongoing auction, while `vrfDelay` lines up with the `AuctionStatus::VrfDelay` . Finally, a value of `null`\n            indicates there is no ongoing auction. Keep in mind the that the `finishEnd` field is the block number the\n            `endingPeriod` finishes and the `vrfDelay` period begins. The `vrfDelay` period is typically about an\n            epoch long and no crowdloan contributions are accepted.\n        auctionIndex:\n          type: string\n          format: unsignedInteger\n          description: |\n            The auction number. If there is no current auction this will be the number\n            of the previous auction.\n        leasePeriods:\n          type: array\n          items:\n            type: string\n            format: unsignedInteger\n          description: |\n            Lease period indexes that may be bid on in this auction. `null` if\n            there is no ongoing auction.\n        winning:\n          type: array\n          items:\n            $ref: '#/components/schemas/WinningData'\n    ParasCrowdloans:\n      type: object\n      properties:\n        at:\n          $ref: '#/components/schemas/BlockIdentifiers'\n        funds:\n          type: array\n          items:\n            type: object\n            properties:\n              paraId:\n                type: string\n                format: unsignedInteger\n              fundInfo:\n                $ref: '#/components/schemas/FundInfo'\n          description: |\n            List of paras that have crowdloans.\n    ParasCrowdloanInfo:\n      type: object\n      properties:\n        at:\n          $ref: '#/components/schemas/BlockIdentifiers'\n        fundInfo:\n          $ref: '#/components/schemas/FundInfo'\n        leasePeriods:\n          type: array\n          items:\n            type: string\n            format: unsignedInteger\n          description: Lease periods the crowdloan can bid on.\n    ParasLeasesCurrent:\n      type: object\n      properties:\n        at:\n          $ref: '#/components/schemas/BlockIdentifiers'\n        leasePeriodIndex:\n          type: string\n          format: unsignedInteger\n          description: Current lease period index. This value may be null when the current block now,\n            substracted by the leaseOffset is less then zero.\n        endOfLeasePeriod:\n          type: string\n          format: unsignedInteger\n          description: Last block (number) of the current lease period. This value may be null when\n            `leasePeriodIndex` is null.\n        currentLeaseHolders:\n          type: array\n          items:\n            type: string\n            format: unsignedInteger\n          description: List of `paraId`s that currently hold a lease.\n    ParasLeaseInfo:\n      type: object\n      properties:\n        at:\n          $ref: '#/components/schemas/BlockIdentifiers'\n        paraLifecycle:\n          $ref: '#/components/schemas/ParaLifecycle'\n        onboardingAs:\n          $ref: '#/components/schemas/OnboardingAs'\n        leases:\n          type: array\n          items:\n            type: object\n            properties:\n              leasePeriodIndex:\n                type: string\n                format: unsignedInteger\n              account:\n                type: string\n              deposit:\n                type: string\n                format: unsignedInteger\n          description: |\n            List of lease periods for which the `paraId` holds a lease along with\n            the deposit held and the associated `accountId`.\n    ParaLifecycle:\n      type: string\n      enum:\n      - onboarding\n      - parathread\n      - parachain\n      - upgradingParathread\n      - downgradingParachain\n      - offboardingParathread\n      - offboardingParachain\n      description: |\n        The possible states of a para, to take into account delayed lifecycle\n        changes.\n    Payouts:\n      type: array\n      items:\n        type: object\n        properties:\n          validatorId:\n            type: string\n            description: AccountId of the validator the payout is coming from.\n          nominatorStakingPayout:\n            type: string\n            format: unsignedInteger\n            description: Payout for the reward destination associated with the\n              accountId the query was made for.\n          claimed:\n            type: boolean\n            description: Whether or not the reward has been claimed.\n          totalValidatorRewardPoints:\n            type: string\n            format: unsignedInteger\n            description: Number of reward points earned by the validator.\n          validatorCommission:\n            type: string\n            format: unsignedInteger\n            description: The percentage of the total payout that the validator takes as commission,\n              expressed as a Perbill.\n          totalValidatorExposure:\n            type: string\n            format: unsignedInteger\n            description: The sum of the validator's and its nominators' stake.\n          nominatorExposure:\n            type: string\n            format: unsignedInteger\n            description: The amount of stake the nominator has behind the validator.\n        description: Payout for a nominating _Stash_ address and\n          information about the validator they were nominating.\n    PeerInfo:\n      type: object\n      properties:\n        peerId:\n          type: string\n          description: Peer ID.\n        roles:\n          type: string\n          description: Roles the peer is running\n        protocolVersion:\n          type: string\n          description: Peer's protocol version.\n          format: unsignedInteger\n        bestHash:\n          type: string\n          description: Hash of the best block on the peer's canon chain.\n          format: hex\n        bestNumber:\n          type: string\n          description: Height of the best block on the peer's canon chain.\n          format: unsignedInteger\n    RuntimeCode:\n      type: object\n      properties:\n        at:\n          $ref: '#/components/schemas/BlockIdentifiers'\n        code:\n          type: string\n          format: hex\n    RuntimeDispatchInfo:\n      type: object\n      properties:\n        weight:\n          type: string\n          description: Extrinsic weight.\n        class:\n          type: string\n          description: Extrinsic class.\n          enum:\n          - Normal\n          - Operational\n          - Mandatory\n        partialFee:\n          type: string\n          description: The _inclusion fee_ of a transaction, i.e. the minimum fee required for a transaction. Includes weight and encoded length fees, but does not have access to any signed extensions, e.g. the `tip`.\n          format: unsignedInteger\n      description: RuntimeDispatchInfo for the transaction. Includes the `partialFee`.\n    RuntimeSpec:\n      type: object\n      properties:\n        at:\n          $ref: '#/components/schemas/BlockIdentifiers'\n        authoringVersion:\n          type: string\n          description: The version of the authorship interface. An authoring node\n            will not attempt to author blocks unless this is equal to its native runtime.\n        chainType:\n          $ref: '#/components/schemas/ChainType'\n        implVersion:\n          type: string\n          description: Version of the implementation specification. Non-consensus-breaking\n            optimizations are about the only changes that could be made which would\n            result in only the `impl_version` changing. The `impl_version` is set to 0\n            when `spec_version` is incremented.\n        specName:\n          type: string\n          description: Identifies the different Substrate runtimes.\n        specVersion:\n          type: string\n          description: Version of the runtime specification.\n        transactionVersion:\n          type: string\n          description: All existing dispatches are fully compatible when this number\n            doesn't change. This number must change when an existing dispatchable\n            (module ID, dispatch ID) is changed, either through an alteration in its\n            user-level semantics, a parameter added/removed/changed, a dispatchable\n            being removed, a module being removed, or a dispatchable/module changing\n            its index.\n        properties:\n          type: object\n          description: Arbitrary properties defined in the chain spec.\n      description: Version information related to the runtime.\n    SanitizedEvent:\n      type: object\n      properties:\n        method:\n          type: string\n        data:\n          type: array\n          items:\n            type: string\n    Signature:\n      type: object\n      properties:\n        signature:\n          type: string\n          format: hex\n        signer:\n          type: string\n          format: ss58\n      description: Object with `signature` and `signer`, or `null` if unsigned.\n    SpanId:\n      type: object\n      properties:\n        name:\n          type: string\n        target:\n          type: string\n        id:\n          type: string\n          format: unsignedInteger\n    StakingLedger:\n      type: object\n      properties:\n        stash:\n          type: string\n          description: The _Stash_ account whose balance is actually locked and at stake.\n          format: ss58\n        total:\n          type: string\n          description: The total amount of the _Stash_'s balance that we are currently accounting\n            for. Simply `active + unlocking`.\n          format: unsignedInteger\n        active:\n          type: string\n          description: The total amount of the _Stash_'s balance that will be at stake\n            in any forthcoming eras.\n          format: unsignedInteger\n        unlocking:\n          type: string\n          description: Any balance that is becoming free, which may eventually be\n            transferred out of the _Stash_ (assuming it doesn't get slashed first).\n            Represented as an array of objects, each with an `era` at which `value`\n            will be unlocked.\n          format: unsignedInteger\n        claimedRewards:\n          type: array\n          description: Array of eras for which the stakers behind a validator have\n            claimed rewards. Only updated for _validators._\n          items:\n            type: string\n            format: unsignedInteger\n      description: The staking ledger.\n    StakingProgress:\n      type: object\n      properties:\n        at:\n          $ref: '#/components/schemas/BlockIdentifiers'\n        activeEra:\n          type: string\n          description: |\n            `EraIndex` of the era being rewarded.\n          format: unsignedInteger\n        forceEra:\n          type: string\n          description: Current status of era forcing.\n          enum:\n          - ForceNone\n          - NotForcing\n          - ForceAlways\n          - ForceNew\n        nextActiveEraEstimate:\n          type: string\n          description: Upper bound estimate of the block height at which the next\n            active era will start. Not included in response when `forceEra.isForceNone`.\n          format: unsignedInteger\n        nextSessionEstimate:\n          type: string\n          description: Upper bound estimate of the block height at which the next\n            session will start.\n          format: unsignedInteger\n        unappliedSlashes:\n          type: array\n          items:\n            $ref: '#/components/schemas/UnappliedSlash'\n          description: Array of upcoming `UnappliedSlash` indexed by era.\n        electionStatus:\n          $ref: '#/components/schemas/ElectionStatus'\n        idealValidatorCount:\n          type: string\n          description: Upper bound of validator set size; considered the ideal size.\n            Not included in response when `forceEra.isForceNone`.\n          format: unsignedInteger\n        validatorSet:\n          type: array\n          description: Stash account IDs of the validators for the current session.\n            Not included in response when `forceEra.isForceNone`.\n          items:\n            type: string\n            format: ss58\n    StorageEntryTypeV13:\n      type: object\n      properties:\n        hasher:\n          type: string\n          description: Returns a string deonting the storage hasher.\n        key:\n          type: string\n          description: Key of the queried pallet storageId.\n        value:\n          type: string\n          description: Value of the queried pallet storageId.\n        linked:\n          type: boolean\n    StorageEntryTypeV14:\n      type: object\n      properties:\n        hasher:\n          type: array\n          items:\n            type: string\n          description: Returns a string denoting the storage\n            hasher inside of an array.\n        key:\n          type: string\n          description: The SiLookupTypeId to identify the type.\n        value:\n          type: string\n          description: The SiLookupTypeId to identify the type.\n    TraceEvent:\n      type: object\n      properties:\n        data:\n          type: object\n          properties:\n              stringValues:\n                $ref: '#/components/schemas/TraceEventDataStringValues'\n        parentId:\n          type: string\n          format: unsignedInteger\n        target:\n          type: string\n    TraceEventDataStringValues:\n      type: object\n      properties:\n        key:\n          type: string\n          format: hex\n          description: The complete storage key for the entry.\n        method:\n          type: string\n          description: Normally one of Put or Get.\n        result:\n          type: string\n          format: hex\n          description: Hex scale encoded storage value.\n      description: Note these exact values will only be present for storage events.\n    TraceSpan:\n      type: object\n      properties:\n        id:\n          type: string\n          format: unsignedInteger\n        name:\n          type: string\n        parentId:\n          type: string\n          format: unsignedInteger\n        target:\n            type: string\n        wasm:\n          type: boolean\n    Transaction:\n      type: object\n      properties:\n        tx:\n          type: string\n          format: hex\n    TransactionDryRun:\n      type: object\n      properties:\n        resultType:\n          type: string\n          enum:\n          - DispatchOutcome\n          - TransactionValidityError\n          description: Either `DispatchOutcome` if the transaction is valid or `TransactionValidityError` if the result is invalid.\n        result:\n          type: string\n          enum:\n          - Ok\n          - CannotLookup\n          - NoUnsignedValidator\n          - Custom(u8)\n          - Call\n          - Payment\n          - Future\n          - Stale\n          - BadProof\n          - AncientBirthBlock\n          - ExhaustsResources\n          - BadMandatory\n          - MandatoryDispatch\n          description: 'If there was an error it will be the cause of the error. If the\n            transaction executed correctly it will be `Ok: []`'\n        validityErrorType:\n          type: string\n          enum:\n          - InvalidTransaction\n          - UnknownTransaction\n      description: \u003e-\n        References:\n        - `UnknownTransaction`: https://crates.parity.io/sp_runtime/transaction_validity/enum.UnknownTransaction.html\n        - `InvalidTransaction`: https://crates.parity.io/sp_runtime/transaction_validity/enum.InvalidTransaction.html\n    TransactionFailedToParse:\n      type: object\n      properties:\n        code:\n          type: number\n        error:\n          type: string\n          description: \u003e-\n            `Failed to parse a tx.`\n        transaction:\n          type: string\n          format: hex\n        cause:\n          type: string\n        stack:\n          type: string\n      description: Error message when Sidecar fails to parse the transaction.\n    TransactionFailedToSubmit:\n      type: object\n      properties:\n        code:\n          type: number\n        error:\n          type: string\n          description: Failed to submit transaction.\n        transaction:\n          type: string\n          format: hex\n        cause:\n          type: string\n        stack:\n          type: string\n      description: \u003e-\n        Error message when the node rejects the submitted transaction.\n    TransactionFailure:\n      oneOf:\n        - $ref: '#/components/schemas/TransactionFailedToSubmit'\n        - $ref: '#/components/schemas/TransactionFailedToParse'\n    TransactionFeeEstimate:\n      type: object\n      properties:\n        weight:\n          type: string\n          description: Extrinsic weight.\n        class:\n          type: string\n          description: Extrinsic class.\n          enum:\n          - Normal\n          - Operational\n          - Mandatory\n        partialFee:\n          type: string\n          description: Expected inclusion fee for the transaction. Note that the fee\n            rate changes up to 30% in a 24 hour period and this will not be the exact\n            fee.\n          format: unsignedInteger\n      description: \u003e-\n        Note: `partialFee` does not include any tips that you may add to increase a transaction's\n        priority. See [compute_fee](https://crates.parity.io/pallet_transaction_payment/struct.Module.html#method.compute_fee).\n    TransactionFeeEstimateFailure:\n      type: object\n      properties:\n        code:\n          type: number\n        at:\n            type: object\n            properties:\n              hash:\n                type: string\n        error:\n          type: string\n          description:  Error description.\n        transaction:\n          type: string\n          format: hex\n        block:\n          type: string\n          description: Block hash of the block fee estimation was attempted at.\n        cause:\n          type: string\n          description: Error message from the client.\n        stack:\n          type: string\n    TransactionMaterial:\n      type: object\n      properties:\n        at:\n          $ref: '#/components/schemas/BlockIdentifiers'\n        genesisHash:\n          type: string\n          description: The hash of the chain's genesis block.\n          format: blockHash\n        chainName:\n          type: string\n          description: The chain's name.\n        specName:\n          type: string\n          description: The chain's spec.\n        specVersion:\n          type: string\n          description: The spec version. Always increased in a runtime upgrade.\n        txVersion:\n          type: string\n          description: The transaction version. Common `txVersion` numbers indicate\n            that the transaction encoding format and method indices are the same.\n            Needed for decoding in an offline environment. Adding new transactions\n            does not change `txVersion`.\n        metadata:\n          type: string\n          description: The chain's metadata. It's default return value is hex, but may be returned in\n            decoded json format.\n          format: hex\n      description: \u003e-\n        Note: `chainName`, `specName`, and `specVersion` are used to define a type registry with a set\n        of signed extensions and types. For Polkadot and Kusama, `chainName` is not used in defining\n        this registry, but in other Substrate-based chains that re-launch their network without\n        changing the `specName`, the `chainName` would be needed to create the correct registry.\n        Substrate Reference:\n        - `RuntimeVersion`: https://crates.parity.io/sp_version/struct.RuntimeVersion.html\n        - `SignedExtension`: https://crates.parity.io/sp_runtime/traits/trait.SignedExtension.html\n        -  FRAME Support: https://crates.parity.io/frame_support/metadata/index.html\n    TransactionPool:\n      type: object\n      properties:\n        pool:\n          type: array\n          items:\n            type: object\n            properties:\n                hash:\n                  type: string\n                  format: hex\n                  description: H256 hash of the extrinsic.\n                encodedExtrinsic:\n                  type: string\n                  format: hex\n                  description: Scale encoded extrinsic.\n    TransactionSuccess:\n      type: object\n      properties:\n        hash:\n          type: string\n          description: The hash of the encoded transaction.\n    UnappliedSlash:\n      type: object\n      properties:\n        validator:\n          type: string\n          description: Stash account ID of the offending validator.\n          format: ss58\n        own:\n          type: string\n          description: The amount the validator will be slashed.\n          format: unsignedInteger\n        others:\n          type: array\n          description: Array of tuples(`[accountId, amount]`) representing all the\n            stashes of other slashed stakers and the amount they will be slashed.\n          items:\n            type: string\n            format: tuple[ss58, unsignedInteger]\n        reporters:\n          type: array\n          description: Array of account IDs of the reporters of the offense.\n          items:\n            type: string\n            format: ss58\n        payout:\n          type: string\n          description: Amount of bounty payout to reporters.\n          format: unsignedInteger\n    VestingSchedule:\n      type: object\n      properties:\n        locked:\n          type: string\n          description: Number of tokens locked at start.\n          format: unsignedInteger\n        perBlock:\n          type: string\n          description: Number of tokens that gets unlocked every block after `startingBlock`.\n          format: unsignedInteger\n        startingBlock:\n          type: string\n          description: Starting block for unlocking (vesting).\n          format: unsignedInteger\n      description: Vesting schedule for an account.\n    WinningData:\n      type: object\n      properties:\n        bid:\n          type: object\n          properties:\n            accountId:\n              type: string\n            paraId:\n              type: string\n              format: unsignedInteger\n            amount:\n              type: string\n              format: unsignedInteger\n        leaseSet:\n          type: array\n          items:\n            type: string\n            format: unsignedInteger\n      description: |\n        A currently winning bid and the set of lease periods the bid is for. The\n        `amount` of the bid is per lease period. The `bid` property will be `null`\n        if no bid has been made for the corresponding `leaseSet`.\n  requestBodies:\n    Transaction:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Transaction'\n      required: true\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /accounts/{accountId}/staking-payouts: get: operation \"getStakingPayoutsByAccountId\": parameters: parse parameter \"depth\": schema: parse default: expected type \"string\", got \"number\""
}