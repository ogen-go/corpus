{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/restful-ma/thresholds"
		},
		"file": {
			"name": "amazonaws.com-acm-pca-2017-08-22-swagger.yaml",
			"size": 0,
			"path": "benchmark-repository/openapi/amazonaws.com-acm-pca-2017-08-22-swagger.yaml",
			"byteSize": 84809,
			"content": "openapi: 3.0.0\ninfo:\n  version: 2017-08-22\n  x-release: v4\n  title: AWS Certificate Manager Private Certificate Authority\n  description: \u003cp\u003eThis is the \u003ci\u003eACM Private CA API Reference\u003c/i\u003e. It provides\n    descriptions, syntax, and usage examples for each of the actions and data\n    types involved in creating and managing private certificate authorities (CA)\n    for your organization.\u003c/p\u003e \u003cp\u003eThe documentation for each action shows the\n    Query API request parameters and the XML response. Alternatively, you can\n    use one of the AWS SDKs to access an API that's tailored to the programming\n    language or platform that you're using. For more information, see \u003ca\n    href=\"https://aws.amazon.com/tools/#SDKs\"\u003eAWS SDKs\u003c/a\u003e.\u003c/p\u003e \u003cnote\u003e \u003cp\u003eEach\n    ACM Private CA API action has a throttling limit which determines the number\n    of times the action can be called per second. For more information, see \u003ca\n    href=\"https://docs.aws.amazon.com/acm-pca/latest/userguide/PcaLimits.html#PcaLimits-api\"\u003eAPI\n    Rate Limits in ACM Private CA\u003c/a\u003e in the ACM Private CA user guide.\u003c/p\u003e\n    \u003c/note\u003e\n  x-logo:\n    url: https://twitter.com/awscloud/profile_image?size=original\n    backgroundColor: \"#FFFFFF\"\n  termsOfService: https://aws.amazon.com/service-terms/\n  contact:\n    name: Mike Ralphson\n    email: mike.ralphson@gmail.com\n    url: https://github.com/mermade/aws2openapi\n    x-twitter: PermittedSoc\n  license:\n    name: Apache 2.0 License\n    url: http://www.apache.org/licenses/\n  x-providerName: amazonaws.com\n  x-serviceName: acm-pca\n  x-origin:\n    - contentType: application/json\n      url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/acm-pca-2017-08-22.normal.json\n      converter:\n        url: https://github.com/mermade/aws2openapi\n        version: 1.0.0\n      x-apisguru-direct: true\n  x-apiClientRegistration:\n    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct\n  x-apisguru-categories:\n    - cloud\n  x-preferred: true\nexternalDocs:\n  description: Amazon Web Services documentation\n  url: https://docs.aws.amazon.com/acm-pca/\nx-hasEquivalentPaths: true\nsecurity:\n  - hmac: []\npaths:\n  /#X-Amz-Target=ACMPrivateCA.CreateCertificateAuthority:\n    post:\n      operationId: CreateCertificateAuthority\n      description: Creates a root or subordinate private certificate authority (CA). You\n        must specify the CA configuration, the certificate revocation list (CRL)\n        configuration, the CA type, and an optional idempotency token to avoid\n        accidental creation of multiple CAs. The CA configuration specifies the\n        name of the algorithm and key size to be used to create the CA private\n        key, the type of signing algorithm that the CA uses, and X.500 subject\n        information. The CRL configuration specifies the CRL expiration period\n        in days (the validity period of the CRL), the Amazon S3 bucket that will\n        contain the CRL, and a CNAME alias for the S3 bucket that is included in\n        certificates issued by the CA. If successful, this action returns the\n        Amazon Resource Name (ARN) of the CA.\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CreateCertificateAuthorityResponse\"\n        \"480\":\n          description: InvalidArgsException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidArgsException\"\n        \"481\":\n          description: InvalidPolicyException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidPolicyException\"\n        \"482\":\n          description: InvalidTagException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidTagException\"\n        \"483\":\n          description: LimitExceededException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LimitExceededException\"\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - ACMPrivateCA.CreateCertificateAuthority\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CreateCertificateAuthorityRequest\"\n        required: true\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\n  /#X-Amz-Target=ACMPrivateCA.CreateCertificateAuthorityAuditReport:\n    post:\n      operationId: CreateCertificateAuthorityAuditReport\n      description: Creates an audit report that lists every time that your CA private key\n        is used. The report is saved in the Amazon S3 bucket that you specify on\n        input. The \u003ca\u003eIssueCertificate\u003c/a\u003e and \u003ca\u003eRevokeCertificate\u003c/a\u003e actions\n        use the private key.\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CreateCertificateAuthorityAuditReportRe\\\n                  sponse\"\n        \"480\":\n          description: RequestInProgressException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RequestInProgressException\"\n        \"481\":\n          description: RequestFailedException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RequestFailedException\"\n        \"482\":\n          description: ResourceNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResourceNotFoundException\"\n        \"483\":\n          description: InvalidArnException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidArnException\"\n        \"484\":\n          description: InvalidArgsException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidArgsException\"\n        \"485\":\n          description: InvalidStateException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidStateException\"\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - ACMPrivateCA.CreateCertificateAuthorityAuditReport\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CreateCertificateAuthorityAuditReportRequ\\\n                est\"\n        required: true\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\n  /#X-Amz-Target=ACMPrivateCA.CreatePermission:\n    post:\n      operationId: CreatePermission\n      description: \u003cp\u003eAssigns permissions from a private CA to a designated AWS service.\n        Services are specified by their service principals and can be given\n        permission to create and retrieve certificates on a private CA. Services\n        can also be given permission to list the active permissions that the\n        private CA has granted. For ACM to automatically renew your private CA's\n        certificates, you must assign all possible permissions from the CA to\n        the ACM service principal.\u003c/p\u003e \u003cp\u003eAt this time, you can only assign\n        permissions to ACM (\u003ccode\u003eacm.amazonaws.com\u003c/code\u003e). Permissions can be\n        revoked with the \u003ca\u003eDeletePermission\u003c/a\u003e action and listed with the\n        \u003ca\u003eListPermissions\u003c/a\u003e action.\u003c/p\u003e\n      responses:\n        \"200\":\n          description: Success\n        \"480\":\n          description: ResourceNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResourceNotFoundException\"\n        \"481\":\n          description: InvalidArnException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidArnException\"\n        \"482\":\n          description: PermissionAlreadyExistsException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PermissionAlreadyExistsException\"\n        \"483\":\n          description: LimitExceededException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LimitExceededException\"\n        \"484\":\n          description: InvalidStateException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidStateException\"\n        \"485\":\n          description: RequestFailedException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RequestFailedException\"\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - ACMPrivateCA.CreatePermission\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CreatePermissionRequest\"\n        required: true\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\n  /#X-Amz-Target=ACMPrivateCA.DeleteCertificateAuthority:\n    post:\n      operationId: DeleteCertificateAuthority\n      description: \u003cp\u003eDeletes a private certificate authority (CA). You must provide the\n        Amazon Resource Name (ARN) of the private CA that you want to delete.\n        You can find the ARN by calling the \u003ca\u003eListCertificateAuthorities\u003c/a\u003e\n        action. \u003c/p\u003e \u003cnote\u003e \u003cp\u003eDeleting a CA will invalidate other CAs and\n        certificates below it in your CA hierarchy.\u003c/p\u003e \u003c/note\u003e \u003cp\u003eBefore you\n        can delete a CA that you have created and activated, you must disable\n        it. To do this, call the \u003ca\u003eUpdateCertificateAuthority\u003c/a\u003e action and\n        set the \u003cb\u003eCertificateAuthorityStatus\u003c/b\u003e parameter to\n        \u003ccode\u003eDISABLED\u003c/code\u003e. \u003c/p\u003e \u003cp\u003eAdditionally, you can delete a CA if you\n        are waiting for it to be created (that is, the status of the CA is\n        \u003ccode\u003eCREATING\u003c/code\u003e). You can also delete it if the CA has been\n        created but you haven't yet imported the signed certificate into ACM\n        Private CA (that is, the status of the CA is\n        \u003ccode\u003ePENDING_CERTIFICATE\u003c/code\u003e). \u003c/p\u003e \u003cp\u003eWhen you successfully call\n        \u003ca\u003eDeleteCertificateAuthority\u003c/a\u003e, the CA's status changes to\n        \u003ccode\u003eDELETED\u003c/code\u003e. However, the CA won't be permanently deleted until\n        the restoration period has passed. By default, if you do not set the\n        \u003ccode\u003ePermanentDeletionTimeInDays\u003c/code\u003e parameter, the CA remains\n        restorable for 30 days. You can set the parameter from 7 to 30 days. The\n        \u003ca\u003eDescribeCertificateAuthority\u003c/a\u003e action returns the time remaining in\n        the restoration window of a private CA in the \u003ccode\u003eDELETED\u003c/code\u003e\n        state. To restore an eligible CA, call the\n        \u003ca\u003eRestoreCertificateAuthority\u003c/a\u003e action.\u003c/p\u003e\n      responses:\n        \"200\":\n          description: Success\n        \"480\":\n          description: ConcurrentModificationException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ConcurrentModificationException\"\n        \"481\":\n          description: ResourceNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResourceNotFoundException\"\n        \"482\":\n          description: InvalidArnException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidArnException\"\n        \"483\":\n          description: InvalidStateException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidStateException\"\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - ACMPrivateCA.DeleteCertificateAuthority\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/DeleteCertificateAuthorityRequest\"\n        required: true\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\n  /#X-Amz-Target=ACMPrivateCA.DeletePermission:\n    post:\n      operationId: DeletePermission\n      description: \"Revokes permissions that a private CA assigned to a designated AWS\n        service. Permissions can be created with the \u003ca\u003eCreatePermission\u003c/a\u003e\n        action and listed with the \u003ca\u003eListPermissions\u003c/a\u003e action. \"\n      responses:\n        \"200\":\n          description: Success\n        \"480\":\n          description: ResourceNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResourceNotFoundException\"\n        \"481\":\n          description: InvalidArnException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidArnException\"\n        \"482\":\n          description: InvalidStateException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidStateException\"\n        \"483\":\n          description: RequestFailedException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RequestFailedException\"\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - ACMPrivateCA.DeletePermission\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/DeletePermissionRequest\"\n        required: true\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\n  /#X-Amz-Target=ACMPrivateCA.DescribeCertificateAuthority:\n    post:\n      operationId: DescribeCertificateAuthority\n      description: \"\u003cp\u003eLists information about your private certificate authority (CA). You\n        specify the private CA on input by its ARN (Amazon Resource Name). The\n        output contains the status of your CA. This can be any of the following:\n        \u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eCREATING\u003c/code\u003e - ACM Private CA is creating\n        your private certificate authority.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\n        \u003ccode\u003ePENDING_CERTIFICATE\u003c/code\u003e - The certificate is pending. You must\n        use your ACM Private CA-hosted or on-premises root or subordinate CA to\n        sign your private CA CSR and then import it into PCA. \u003c/p\u003e \u003c/li\u003e \u003cli\u003e\n        \u003cp\u003e \u003ccode\u003eACTIVE\u003c/code\u003e - Your private CA is active.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\n        \u003ccode\u003eDISABLED\u003c/code\u003e - Your private CA has been disabled.\u003c/p\u003e \u003c/li\u003e\n        \u003cli\u003e \u003cp\u003e \u003ccode\u003eEXPIRED\u003c/code\u003e - Your private CA certificate has\n        expired.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eFAILED\u003c/code\u003e - Your private CA has\n        failed. Your CA can fail because of problems such a network outage or\n        backend AWS failure or other errors. A failed CA can never return to the\n        pending state. You must create a new CA. \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\n        \u003ccode\u003eDELETED\u003c/code\u003e - Your private CA is within the restoration period,\n        after which it is permanently deleted. The length of time remaining in\n        the CA's restoration period is also included in this action's\n        output.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e\"\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DescribeCertificateAuthorityResponse\"\n        \"480\":\n          description: ResourceNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResourceNotFoundException\"\n        \"481\":\n          description: InvalidArnException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidArnException\"\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - ACMPrivateCA.DescribeCertificateAuthority\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/DescribeCertificateAuthorityRequest\"\n        required: true\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\n  /#X-Amz-Target=ACMPrivateCA.DescribeCertificateAuthorityAuditReport:\n    post:\n      operationId: DescribeCertificateAuthorityAuditReport\n      description: \"Lists information about a specific audit report created by calling the\n        \u003ca\u003eCreateCertificateAuthorityAuditReport\u003c/a\u003e action. Audit information\n        is created every time the certificate authority (CA) private key is\n        used. The private key is used when you call the \u003ca\u003eIssueCertificate\u003c/a\u003e\n        action or the \u003ca\u003eRevokeCertificate\u003c/a\u003e action. \"\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DescribeCertificateAuthorityAuditReport\\\n                  Response\"\n        \"480\":\n          description: ResourceNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResourceNotFoundException\"\n        \"481\":\n          description: InvalidArnException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidArnException\"\n        \"482\":\n          description: InvalidArgsException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidArgsException\"\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - ACMPrivateCA.DescribeCertificateAuthorityAuditReport\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/DescribeCertificateAuthorityAuditReportRe\\\n                quest\"\n        required: true\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\n  /#X-Amz-Target=ACMPrivateCA.GetCertificate:\n    post:\n      operationId: GetCertificate\n      description: \"Retrieves a certificate from your private CA. The ARN of the\n        certificate is returned when you call the \u003ca\u003eIssueCertificate\u003c/a\u003e\n        action. You must specify both the ARN of your private CA and the ARN of\n        the issued certificate when calling the \u003cb\u003eGetCertificate\u003c/b\u003e action.\n        You can retrieve the certificate if it is in the \u003cb\u003eISSUED\u003c/b\u003e state.\n        You can call the \u003ca\u003eCreateCertificateAuthorityAuditReport\u003c/a\u003e action to\n        create a report that contains information about all of the certificates\n        issued and revoked by your private CA. \"\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GetCertificateResponse\"\n        \"480\":\n          description: RequestInProgressException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RequestInProgressException\"\n        \"481\":\n          description: RequestFailedException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RequestFailedException\"\n        \"482\":\n          description: ResourceNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResourceNotFoundException\"\n        \"483\":\n          description: InvalidArnException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidArnException\"\n        \"484\":\n          description: InvalidStateException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidStateException\"\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - ACMPrivateCA.GetCertificate\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/GetCertificateRequest\"\n        required: true\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\n  /#X-Amz-Target=ACMPrivateCA.GetCertificateAuthorityCertificate:\n    post:\n      operationId: GetCertificateAuthorityCertificate\n      description: \"Retrieves the certificate and certificate chain for your private\n        certificate authority (CA). Both the certificate and the chain are\n        base64 PEM-encoded. The chain does not include the CA certificate. Each\n        certificate in the chain signs the one before it. \"\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GetCertificateAuthorityCertificateRespo\\\n                  nse\"\n        \"480\":\n          description: ResourceNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResourceNotFoundException\"\n        \"481\":\n          description: InvalidStateException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidStateException\"\n        \"482\":\n          description: InvalidArnException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidArnException\"\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - ACMPrivateCA.GetCertificateAuthorityCertificate\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/GetCertificateAuthorityCertificateRequest\"\n        required: true\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\n  /#X-Amz-Target=ACMPrivateCA.GetCertificateAuthorityCsr:\n    post:\n      operationId: GetCertificateAuthorityCsr\n      description: \"Retrieves the certificate signing request (CSR) for your private\n        certificate authority (CA). The CSR is created when you call the\n        \u003ca\u003eCreateCertificateAuthority\u003c/a\u003e action. Sign the CSR with your ACM\n        Private CA-hosted or on-premises root or subordinate CA. Then import the\n        signed certificate back into ACM Private CA by calling the\n        \u003ca\u003eImportCertificateAuthorityCertificate\u003c/a\u003e action. The CSR is returned\n        as a base64 PEM-encoded string. \"\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GetCertificateAuthorityCsrResponse\"\n        \"480\":\n          description: RequestInProgressException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RequestInProgressException\"\n        \"481\":\n          description: RequestFailedException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RequestFailedException\"\n        \"482\":\n          description: ResourceNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResourceNotFoundException\"\n        \"483\":\n          description: InvalidArnException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidArnException\"\n        \"484\":\n          description: InvalidStateException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidStateException\"\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - ACMPrivateCA.GetCertificateAuthorityCsr\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/GetCertificateAuthorityCsrRequest\"\n        required: true\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\n  /#X-Amz-Target=ACMPrivateCA.ImportCertificateAuthorityCertificate:\n    post:\n      operationId: ImportCertificateAuthorityCertificate\n      description: \u003cp\u003eImports a signed private CA certificate into ACM Private CA. This\n        action is used when you are using a chain of trust whose root is located\n        outside ACM Private CA. Before you can call this action, the following\n        preparations must in place:\u003c/p\u003e \u003col\u003e \u003cli\u003e \u003cp\u003eIn ACM Private CA, call the\n        \u003ca\u003eCreateCertificateAuthority\u003c/a\u003e action to create the private CA that\n        that you plan to back with the imported certificate.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e\n        \u003cp\u003eCall the \u003ca\u003eGetCertificateAuthorityCsr\u003c/a\u003e action to generate a\n        certificate signing request (CSR).\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eSign the CSR using\n        a root or intermediate CA hosted either by an on-premises PKI hierarchy\n        or a commercial CA..\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eCreate a certificate chain and\n        copy the signed certificate and the certificate chain to your working\n        directory.\u003c/p\u003e \u003c/li\u003e \u003c/ol\u003e \u003cp\u003eThe following requirements apply when you\n        import a CA certificate.\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eYou cannot import a\n        non-self-signed certificate for use as a root CA.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eYou\n        cannot import a self-signed certificate for use as a subordinate CA.\u003c/p\u003e\n        \u003c/li\u003e \u003cli\u003e \u003cp\u003eYour certificate chain must not include the private CA\n        certificate that you are importing.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eYour ACM Private\n        CA-hosted or on-premises CA certificate must be the last certificate in\n        your chain. The subordinate certificate, if any, that your root CA\n        signed must be next to last. The subordinate certificate signed by the\n        preceding subordinate CA must come next, and so on until your chain is\n        built. \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eThe chain must be PEM-encoded.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e\n      responses:\n        \"200\":\n          description: Success\n        \"480\":\n          description: ConcurrentModificationException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ConcurrentModificationException\"\n        \"481\":\n          description: RequestInProgressException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RequestInProgressException\"\n        \"482\":\n          description: RequestFailedException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RequestFailedException\"\n        \"483\":\n          description: ResourceNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResourceNotFoundException\"\n        \"484\":\n          description: InvalidArnException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidArnException\"\n        \"485\":\n          description: InvalidRequestException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidRequestException\"\n        \"486\":\n          description: InvalidStateException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidStateException\"\n        \"487\":\n          description: MalformedCertificateException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/MalformedCertificateException\"\n        \"488\":\n          description: CertificateMismatchException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CertificateMismatchException\"\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - ACMPrivateCA.ImportCertificateAuthorityCertificate\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ImportCertificateAuthorityCertificateRequ\\\n                est\"\n        required: true\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\n  /#X-Amz-Target=ACMPrivateCA.IssueCertificate:\n    post:\n      operationId: IssueCertificate\n      description: \u003cp\u003eUses your private certificate authority (CA) to issue a client\n        certificate. This action returns the Amazon Resource Name (ARN) of the\n        certificate. You can retrieve the certificate by calling the\n        \u003ca\u003eGetCertificate\u003c/a\u003e action and specifying the ARN. \u003c/p\u003e \u003cnote\u003e \u003cp\u003eYou\n        cannot use the ACM \u003cb\u003eListCertificateAuthorities\u003c/b\u003e action to retrieve\n        the ARNs of the certificates that you issue by using ACM Private CA.\u003c/p\u003e\n        \u003c/note\u003e\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/IssueCertificateResponse\"\n        \"480\":\n          description: LimitExceededException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LimitExceededException\"\n        \"481\":\n          description: ResourceNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResourceNotFoundException\"\n        \"482\":\n          description: InvalidStateException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidStateException\"\n        \"483\":\n          description: InvalidArnException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidArnException\"\n        \"484\":\n          description: InvalidArgsException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidArgsException\"\n        \"485\":\n          description: MalformedCSRException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/MalformedCSRException\"\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - ACMPrivateCA.IssueCertificate\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/IssueCertificateRequest\"\n        required: true\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\n  /#X-Amz-Target=ACMPrivateCA.ListCertificateAuthorities:\n    post:\n      operationId: ListCertificateAuthorities\n      description: Lists the private certificate authorities that you created by using the\n        \u003ca\u003eCreateCertificateAuthority\u003c/a\u003e action.\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ListCertificateAuthoritiesResponse\"\n        \"480\":\n          description: InvalidNextTokenException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidNextTokenException\"\n      parameters:\n        - name: MaxResults\n          in: query\n          description: Pagination limit\n          required: false\n          schema:\n            type: string\n        - name: NextToken\n          in: query\n          description: Pagination token\n          required: false\n          schema:\n            type: string\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - ACMPrivateCA.ListCertificateAuthorities\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ListCertificateAuthoritiesRequest\"\n        required: true\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\n  /#X-Amz-Target=ACMPrivateCA.ListPermissions:\n    post:\n      operationId: ListPermissions\n      description: Lists all the permissions, if any, that have been assigned by a private\n        CA. Permissions can be granted with the \u003ca\u003eCreatePermission\u003c/a\u003e action\n        and revoked with the \u003ca\u003eDeletePermission\u003c/a\u003e action.\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ListPermissionsResponse\"\n        \"480\":\n          description: ResourceNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResourceNotFoundException\"\n        \"481\":\n          description: InvalidArnException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidArnException\"\n        \"482\":\n          description: InvalidNextTokenException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidNextTokenException\"\n        \"483\":\n          description: InvalidStateException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidStateException\"\n        \"484\":\n          description: RequestFailedException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RequestFailedException\"\n      parameters:\n        - name: MaxResults\n          in: query\n          description: Pagination limit\n          required: false\n          schema:\n            type: string\n        - name: NextToken\n          in: query\n          description: Pagination token\n          required: false\n          schema:\n            type: string\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - ACMPrivateCA.ListPermissions\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ListPermissionsRequest\"\n        required: true\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\n  /#X-Amz-Target=ACMPrivateCA.ListTags:\n    post:\n      operationId: ListTags\n      description: \"Lists the tags, if any, that are associated with your private CA. Tags\n        are labels that you can use to identify and organize your CAs. Each tag\n        consists of a key and an optional value. Call the\n        \u003ca\u003eTagCertificateAuthority\u003c/a\u003e action to add one or more tags to your\n        CA. Call the \u003ca\u003eUntagCertificateAuthority\u003c/a\u003e action to remove tags. \"\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ListTagsResponse\"\n        \"480\":\n          description: ResourceNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResourceNotFoundException\"\n        \"481\":\n          description: InvalidArnException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidArnException\"\n        \"482\":\n          description: InvalidStateException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidStateException\"\n      parameters:\n        - name: MaxResults\n          in: query\n          description: Pagination limit\n          required: false\n          schema:\n            type: string\n        - name: NextToken\n          in: query\n          description: Pagination token\n          required: false\n          schema:\n            type: string\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - ACMPrivateCA.ListTags\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ListTagsRequest\"\n        required: true\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\n  /#X-Amz-Target=ACMPrivateCA.RestoreCertificateAuthority:\n    post:\n      operationId: RestoreCertificateAuthority\n      description: Restores a certificate authority (CA) that is in the\n        \u003ccode\u003eDELETED\u003c/code\u003e state. You can restore a CA during the period that\n        you defined in the \u003cb\u003ePermanentDeletionTimeInDays\u003c/b\u003e parameter of the\n        \u003ca\u003eDeleteCertificateAuthority\u003c/a\u003e action. Currently, you can specify 7\n        to 30 days. If you did not specify a \u003cb\u003ePermanentDeletionTimeInDays\u003c/b\u003e\n        value, by default you can restore the CA at any time in a 30 day period.\n        You can check the time remaining in the restoration period of a private\n        CA in the \u003ccode\u003eDELETED\u003c/code\u003e state by calling the\n        \u003ca\u003eDescribeCertificateAuthority\u003c/a\u003e or \u003ca\u003eListCertificateAuthorities\u003c/a\u003e\n        actions. The status of a restored CA is set to its pre-deletion status\n        when the \u003cb\u003eRestoreCertificateAuthority\u003c/b\u003e action returns. To change\n        its status to \u003ccode\u003eACTIVE\u003c/code\u003e, call the\n        \u003ca\u003eUpdateCertificateAuthority\u003c/a\u003e action. If the private CA was in the\n        \u003ccode\u003ePENDING_CERTIFICATE\u003c/code\u003e state at deletion, you must use the\n        \u003ca\u003eImportCertificateAuthorityCertificate\u003c/a\u003e action to import a\n        certificate authority into the private CA before it can be activated.\n        You cannot restore a CA after the restoration period has ended.\n      responses:\n        \"200\":\n          description: Success\n        \"480\":\n          description: ResourceNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResourceNotFoundException\"\n        \"481\":\n          description: InvalidStateException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidStateException\"\n        \"482\":\n          description: InvalidArnException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidArnException\"\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - ACMPrivateCA.RestoreCertificateAuthority\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/RestoreCertificateAuthorityRequest\"\n        required: true\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\n  /#X-Amz-Target=ACMPrivateCA.RevokeCertificate:\n    post:\n      operationId: RevokeCertificate\n      description: \u003cp\u003eRevokes a certificate that was issued inside ACM Private CA. If you\n        enable a certificate revocation list (CRL) when you create or update\n        your private CA, information about the revoked certificates will be\n        included in the CRL. ACM Private CA writes the CRL to an S3 bucket that\n        you specify. For more information about revocation, see the\n        \u003ca\u003eCrlConfiguration\u003c/a\u003e structure. ACM Private CA also writes revocation\n        information to the audit report. For more information, see\n        \u003ca\u003eCreateCertificateAuthorityAuditReport\u003c/a\u003e. \u003c/p\u003e \u003cnote\u003e \u003cp\u003eYou cannot\n        revoke a root CA self-signed certificate.\u003c/p\u003e \u003c/note\u003e\n      responses:\n        \"200\":\n          description: Success\n        \"480\":\n          description: ConcurrentModificationException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ConcurrentModificationException\"\n        \"481\":\n          description: InvalidArnException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidArnException\"\n        \"482\":\n          description: InvalidRequestException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidRequestException\"\n        \"483\":\n          description: InvalidStateException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidStateException\"\n        \"484\":\n          description: LimitExceededException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LimitExceededException\"\n        \"485\":\n          description: ResourceNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResourceNotFoundException\"\n        \"486\":\n          description: RequestAlreadyProcessedException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RequestAlreadyProcessedException\"\n        \"487\":\n          description: RequestInProgressException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RequestInProgressException\"\n        \"488\":\n          description: RequestFailedException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RequestFailedException\"\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - ACMPrivateCA.RevokeCertificate\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/RevokeCertificateRequest\"\n        required: true\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\n  /#X-Amz-Target=ACMPrivateCA.TagCertificateAuthority:\n    post:\n      operationId: TagCertificateAuthority\n      description: \"Adds one or more tags to your private CA. Tags are labels that you can\n        use to identify and organize your AWS resources. Each tag consists of a\n        key and an optional value. You specify the private CA on input by its\n        Amazon Resource Name (ARN). You specify the tag by using a key-value\n        pair. You can apply a tag to just one private CA if you want to identify\n        a specific characteristic of that CA, or you can apply the same tag to\n        multiple private CAs if you want to filter for a common relationship\n        among those CAs. To remove one or more tags, use the\n        \u003ca\u003eUntagCertificateAuthority\u003c/a\u003e action. Call the \u003ca\u003eListTags\u003c/a\u003e action\n        to see what tags are associated with your CA. \"\n      responses:\n        \"200\":\n          description: Success\n        \"480\":\n          description: ResourceNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResourceNotFoundException\"\n        \"481\":\n          description: InvalidArnException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidArnException\"\n        \"482\":\n          description: InvalidStateException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidStateException\"\n        \"483\":\n          description: InvalidTagException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidTagException\"\n        \"484\":\n          description: TooManyTagsException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TooManyTagsException\"\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - ACMPrivateCA.TagCertificateAuthority\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/TagCertificateAuthorityRequest\"\n        required: true\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\n  /#X-Amz-Target=ACMPrivateCA.UntagCertificateAuthority:\n    post:\n      operationId: UntagCertificateAuthority\n      description: \"Remove one or more tags from your private CA. A tag consists of a\n        key-value pair. If you do not specify the value portion of the tag when\n        calling this action, the tag will be removed regardless of value. If you\n        specify a value, the tag is removed only if it is associated with the\n        specified value. To add tags to a private CA, use the\n        \u003ca\u003eTagCertificateAuthority\u003c/a\u003e. Call the \u003ca\u003eListTags\u003c/a\u003e action to see\n        what tags are associated with your CA. \"\n      responses:\n        \"200\":\n          description: Success\n        \"480\":\n          description: ResourceNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResourceNotFoundException\"\n        \"481\":\n          description: InvalidArnException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidArnException\"\n        \"482\":\n          description: InvalidStateException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidStateException\"\n        \"483\":\n          description: InvalidTagException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidTagException\"\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - ACMPrivateCA.UntagCertificateAuthority\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UntagCertificateAuthorityRequest\"\n        required: true\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\n  /#X-Amz-Target=ACMPrivateCA.UpdateCertificateAuthority:\n    post:\n      operationId: UpdateCertificateAuthority\n      description: Updates the status or configuration of a private certificate authority\n        (CA). Your private CA must be in the \u003ccode\u003eACTIVE\u003c/code\u003e or\n        \u003ccode\u003eDISABLED\u003c/code\u003e state before you can update it. You can disable a\n        private CA that is in the \u003ccode\u003eACTIVE\u003c/code\u003e state or make a CA that is\n        in the \u003ccode\u003eDISABLED\u003c/code\u003e state active again.\n      responses:\n        \"200\":\n          description: Success\n        \"480\":\n          description: ConcurrentModificationException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ConcurrentModificationException\"\n        \"481\":\n          description: ResourceNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResourceNotFoundException\"\n        \"482\":\n          description: InvalidArgsException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidArgsException\"\n        \"483\":\n          description: InvalidArnException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidArnException\"\n        \"484\":\n          description: InvalidStateException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidStateException\"\n        \"485\":\n          description: InvalidPolicyException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidPolicyException\"\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - ACMPrivateCA.UpdateCertificateAuthority\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UpdateCertificateAuthorityRequest\"\n        required: true\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\nservers:\n  - url: http://acm-pca.{region}.amazonaws.com\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - us-east-1\n          - us-east-2\n          - us-west-1\n          - us-west-2\n          - us-gov-west-1\n          - us-gov-east-1\n          - ca-central-1\n          - eu-north-1\n          - eu-west-1\n          - eu-west-2\n          - eu-west-3\n          - eu-central-1\n          - ap-northeast-1\n          - ap-northeast-2\n          - ap-northeast-3\n          - ap-southeast-1\n          - ap-southeast-2\n          - ap-south-1\n          - sa-east-1\n        default: us-east-1\n    description: The ACM-PCA multi-region endpoint\n  - url: https://acm-pca.{region}.amazonaws.com\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - us-east-1\n          - us-east-2\n          - us-west-1\n          - us-west-2\n          - us-gov-west-1\n          - us-gov-east-1\n          - ca-central-1\n          - eu-north-1\n          - eu-west-1\n          - eu-west-2\n          - eu-west-3\n          - eu-central-1\n          - ap-northeast-1\n          - ap-northeast-2\n          - ap-northeast-3\n          - ap-southeast-1\n          - ap-southeast-2\n          - ap-south-1\n          - sa-east-1\n        default: us-east-1\n    description: The ACM-PCA multi-region endpoint\n  - url: http://acm-pca.{region}.amazonaws.com.cn\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - cn-north-1\n          - cn-northwest-1\n        default: cn-north-1\n    description: The ACM-PCA endpoint for China (Beijing) and China (Ningxia)\n  - url: https://acm-pca.{region}.amazonaws.com.cn\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - cn-north-1\n          - cn-northwest-1\n        default: cn-north-1\n    description: The ACM-PCA endpoint for China (Beijing) and China (Ningxia)\ncomponents:\n  parameters:\n    X-Amz-Content-Sha256:\n      name: X-Amz-Content-Sha256\n      in: header\n      required: false\n      schema:\n        type: string\n    X-Amz-Date:\n      name: X-Amz-Date\n      in: header\n      required: false\n      schema:\n        type: string\n    X-Amz-Algorithm:\n      name: X-Amz-Algorithm\n      in: header\n      required: false\n      schema:\n        type: string\n    X-Amz-Credential:\n      name: X-Amz-Credential\n      in: header\n      required: false\n      schema:\n        type: string\n    X-Amz-Security-Token:\n      name: X-Amz-Security-Token\n      in: header\n      required: false\n      schema:\n        type: string\n    X-Amz-Signature:\n      name: X-Amz-Signature\n      in: header\n      required: false\n      schema:\n        type: string\n    X-Amz-SignedHeaders:\n      name: X-Amz-SignedHeaders\n      in: header\n      required: false\n      schema:\n        type: string\n  securitySchemes:\n    hmac:\n      type: apiKey\n      name: Authorization\n      in: header\n      description: Amazon Signature authorization v4\n      x-amazon-apigateway-authtype: awsSigv4\n  schemas:\n    CreateCertificateAuthorityResponse:\n      type: object\n      properties:\n        CertificateAuthorityArn:\n          $ref: \"#/components/schemas/Arn\"\n    CreateCertificateAuthorityRequest:\n      type: object\n      required:\n        - CertificateAuthorityConfiguration\n        - CertificateAuthorityType\n      properties:\n        CertificateAuthorityConfiguration:\n          $ref: \"#/components/schemas/CertificateAuthorityConfiguration\"\n        RevocationConfiguration:\n          $ref: \"#/components/schemas/RevocationConfiguration\"\n        CertificateAuthorityType:\n          $ref: \"#/components/schemas/CertificateAuthorityType\"\n        IdempotencyToken:\n          $ref: \"#/components/schemas/IdempotencyToken\"\n        Tags:\n          $ref: \"#/components/schemas/TagList\"\n    InvalidArgsException: {}\n    InvalidPolicyException: {}\n    InvalidTagException: {}\n    LimitExceededException: {}\n    CreateCertificateAuthorityAuditReportResponse:\n      type: object\n      properties:\n        AuditReportId:\n          $ref: \"#/components/schemas/AuditReportId\"\n        S3Key:\n          $ref: \"#/components/schemas/String\"\n    CreateCertificateAuthorityAuditReportRequest:\n      type: object\n      required:\n        - CertificateAuthorityArn\n        - S3BucketName\n        - AuditReportResponseFormat\n      properties:\n        CertificateAuthorityArn:\n          $ref: \"#/components/schemas/Arn\"\n        S3BucketName:\n          $ref: \"#/components/schemas/String\"\n        AuditReportResponseFormat:\n          $ref: \"#/components/schemas/AuditReportResponseFormat\"\n    RequestInProgressException: {}\n    RequestFailedException: {}\n    ResourceNotFoundException: {}\n    InvalidArnException: {}\n    InvalidStateException: {}\n    CreatePermissionRequest:\n      type: object\n      required:\n        - CertificateAuthorityArn\n        - Principal\n        - Actions\n      properties:\n        CertificateAuthorityArn:\n          $ref: \"#/components/schemas/Arn\"\n        Principal:\n          $ref: \"#/components/schemas/Principal\"\n        SourceAccount:\n          $ref: \"#/components/schemas/AccountId\"\n        Actions:\n          $ref: \"#/components/schemas/ActionList\"\n    PermissionAlreadyExistsException: {}\n    DeleteCertificateAuthorityRequest:\n      type: object\n      required:\n        - CertificateAuthorityArn\n      properties:\n        CertificateAuthorityArn:\n          $ref: \"#/components/schemas/Arn\"\n        PermanentDeletionTimeInDays:\n          $ref: \"#/components/schemas/PermanentDeletionTimeInDays\"\n    ConcurrentModificationException: {}\n    DeletePermissionRequest:\n      type: object\n      required:\n        - CertificateAuthorityArn\n        - Principal\n      properties:\n        CertificateAuthorityArn:\n          $ref: \"#/components/schemas/Arn\"\n        Principal:\n          $ref: \"#/components/schemas/Principal\"\n        SourceAccount:\n          $ref: \"#/components/schemas/AccountId\"\n    DescribeCertificateAuthorityResponse:\n      type: object\n      properties:\n        CertificateAuthority:\n          $ref: \"#/components/schemas/CertificateAuthority\"\n    DescribeCertificateAuthorityRequest:\n      type: object\n      required:\n        - CertificateAuthorityArn\n      properties:\n        CertificateAuthorityArn:\n          $ref: \"#/components/schemas/Arn\"\n    DescribeCertificateAuthorityAuditReportResponse:\n      type: object\n      properties:\n        AuditReportStatus:\n          $ref: \"#/components/schemas/AuditReportStatus\"\n        S3BucketName:\n          $ref: \"#/components/schemas/String\"\n        S3Key:\n          $ref: \"#/components/schemas/String\"\n        CreatedAt:\n          $ref: \"#/components/schemas/TStamp\"\n    DescribeCertificateAuthorityAuditReportRequest:\n      type: object\n      required:\n        - CertificateAuthorityArn\n        - AuditReportId\n      properties:\n        CertificateAuthorityArn:\n          $ref: \"#/components/schemas/Arn\"\n        AuditReportId:\n          $ref: \"#/components/schemas/AuditReportId\"\n    GetCertificateResponse:\n      type: object\n      properties:\n        Certificate:\n          $ref: \"#/components/schemas/CertificateBody\"\n        CertificateChain:\n          $ref: \"#/components/schemas/CertificateChain\"\n    GetCertificateRequest:\n      type: object\n      required:\n        - CertificateAuthorityArn\n        - CertificateArn\n      properties:\n        CertificateAuthorityArn:\n          $ref: \"#/components/schemas/Arn\"\n        CertificateArn:\n          $ref: \"#/components/schemas/Arn\"\n    GetCertificateAuthorityCertificateResponse:\n      type: object\n      properties:\n        Certificate:\n          $ref: \"#/components/schemas/CertificateBody\"\n        CertificateChain:\n          $ref: \"#/components/schemas/CertificateChain\"\n    GetCertificateAuthorityCertificateRequest:\n      type: object\n      required:\n        - CertificateAuthorityArn\n      properties:\n        CertificateAuthorityArn:\n          $ref: \"#/components/schemas/Arn\"\n    GetCertificateAuthorityCsrResponse:\n      type: object\n      properties:\n        Csr:\n          $ref: \"#/components/schemas/CsrBody\"\n    GetCertificateAuthorityCsrRequest:\n      type: object\n      required:\n        - CertificateAuthorityArn\n      properties:\n        CertificateAuthorityArn:\n          $ref: \"#/components/schemas/Arn\"\n    ImportCertificateAuthorityCertificateRequest:\n      type: object\n      required:\n        - CertificateAuthorityArn\n        - Certificate\n      properties:\n        CertificateAuthorityArn:\n          $ref: \"#/components/schemas/Arn\"\n        Certificate:\n          $ref: \"#/components/schemas/CertificateBodyBlob\"\n        CertificateChain:\n          $ref: \"#/components/schemas/CertificateChainBlob\"\n    InvalidRequestException: {}\n    MalformedCertificateException: {}\n    CertificateMismatchException: {}\n    IssueCertificateResponse:\n      type: object\n      properties:\n        CertificateArn:\n          $ref: \"#/components/schemas/Arn\"\n    IssueCertificateRequest:\n      type: object\n      required:\n        - CertificateAuthorityArn\n        - Csr\n        - SigningAlgorithm\n        - Validity\n      properties:\n        CertificateAuthorityArn:\n          $ref: \"#/components/schemas/Arn\"\n        Csr:\n          $ref: \"#/components/schemas/CsrBlob\"\n        SigningAlgorithm:\n          $ref: \"#/components/schemas/SigningAlgorithm\"\n        TemplateArn:\n          $ref: \"#/components/schemas/Arn\"\n        Validity:\n          $ref: \"#/components/schemas/Validity\"\n        IdempotencyToken:\n          $ref: \"#/components/schemas/IdempotencyToken\"\n    MalformedCSRException: {}\n    ListCertificateAuthoritiesResponse:\n      type: object\n      properties:\n        CertificateAuthorities:\n          $ref: \"#/components/schemas/CertificateAuthorities\"\n        NextToken:\n          $ref: \"#/components/schemas/NextToken\"\n    ListCertificateAuthoritiesRequest:\n      type: object\n      properties:\n        NextToken:\n          $ref: \"#/components/schemas/NextToken\"\n        MaxResults:\n          $ref: \"#/components/schemas/MaxResults\"\n    InvalidNextTokenException: {}\n    ListPermissionsResponse:\n      type: object\n      properties:\n        Permissions:\n          $ref: \"#/components/schemas/PermissionList\"\n        NextToken:\n          $ref: \"#/components/schemas/NextToken\"\n    ListPermissionsRequest:\n      type: object\n      required:\n        - CertificateAuthorityArn\n      properties:\n        CertificateAuthorityArn:\n          $ref: \"#/components/schemas/Arn\"\n        NextToken:\n          $ref: \"#/components/schemas/NextToken\"\n        MaxResults:\n          $ref: \"#/components/schemas/MaxResults\"\n    ListTagsResponse:\n      type: object\n      properties:\n        Tags:\n          $ref: \"#/components/schemas/TagList\"\n        NextToken:\n          $ref: \"#/components/schemas/NextToken\"\n    ListTagsRequest:\n      type: object\n      required:\n        - CertificateAuthorityArn\n      properties:\n        CertificateAuthorityArn:\n          $ref: \"#/components/schemas/Arn\"\n        NextToken:\n          $ref: \"#/components/schemas/NextToken\"\n        MaxResults:\n          $ref: \"#/components/schemas/MaxResults\"\n    RestoreCertificateAuthorityRequest:\n      type: object\n      required:\n        - CertificateAuthorityArn\n      properties:\n        CertificateAuthorityArn:\n          $ref: \"#/components/schemas/Arn\"\n    RevokeCertificateRequest:\n      type: object\n      required:\n        - CertificateAuthorityArn\n        - CertificateSerial\n        - RevocationReason\n      properties:\n        CertificateAuthorityArn:\n          $ref: \"#/components/schemas/Arn\"\n        CertificateSerial:\n          $ref: \"#/components/schemas/String128\"\n        RevocationReason:\n          $ref: \"#/components/schemas/RevocationReason\"\n    RequestAlreadyProcessedException: {}\n    TagCertificateAuthorityRequest:\n      type: object\n      required:\n        - CertificateAuthorityArn\n        - Tags\n      properties:\n        CertificateAuthorityArn:\n          $ref: \"#/components/schemas/Arn\"\n        Tags:\n          $ref: \"#/components/schemas/TagList\"\n    TooManyTagsException: {}\n    UntagCertificateAuthorityRequest:\n      type: object\n      required:\n        - CertificateAuthorityArn\n        - Tags\n      properties:\n        CertificateAuthorityArn:\n          $ref: \"#/components/schemas/Arn\"\n        Tags:\n          $ref: \"#/components/schemas/TagList\"\n    UpdateCertificateAuthorityRequest:\n      type: object\n      required:\n        - CertificateAuthorityArn\n      properties:\n        CertificateAuthorityArn:\n          $ref: \"#/components/schemas/Arn\"\n        RevocationConfiguration:\n          $ref: \"#/components/schemas/RevocationConfiguration\"\n        Status:\n          $ref: \"#/components/schemas/CertificateAuthorityStatus\"\n    CountryCodeString:\n      type: string\n      pattern: \"[A-Za-z]{2}\"\n    String64:\n      type: string\n      minLength: 0\n      maxLength: 64\n    DistinguishedNameQualifierString:\n      type: string\n      pattern: \"[a-zA-Z0-9'()+-.?:/= ]*\"\n      minLength: 0\n      maxLength: 64\n    String128:\n      type: string\n      minLength: 0\n      maxLength: 128\n    String40:\n      type: string\n      minLength: 0\n      maxLength: 40\n    String16:\n      type: string\n      minLength: 0\n      maxLength: 16\n    String5:\n      type: string\n      minLength: 0\n      maxLength: 5\n    String3:\n      type: string\n      minLength: 0\n      maxLength: 3\n    ASN1Subject:\n      type: object\n      properties:\n        Country:\n          $ref: \"#/components/schemas/CountryCodeString\"\n        Organization:\n          $ref: \"#/components/schemas/String64\"\n        OrganizationalUnit:\n          $ref: \"#/components/schemas/String64\"\n        DistinguishedNameQualifier:\n          $ref: \"#/components/schemas/DistinguishedNameQualifierString\"\n        State:\n          $ref: \"#/components/schemas/String128\"\n        CommonName:\n          $ref: \"#/components/schemas/String64\"\n        SerialNumber:\n          $ref: \"#/components/schemas/String64\"\n        Locality:\n          $ref: \"#/components/schemas/String128\"\n        Title:\n          $ref: \"#/components/schemas/String64\"\n        Surname:\n          $ref: \"#/components/schemas/String40\"\n        GivenName:\n          $ref: \"#/components/schemas/String16\"\n        Initials:\n          $ref: \"#/components/schemas/String5\"\n        Pseudonym:\n          $ref: \"#/components/schemas/String128\"\n        GenerationQualifier:\n          $ref: \"#/components/schemas/String3\"\n      description: \"Contains information about the certificate subject. The certificate can\n        be one issued by your private certificate authority (CA) or it can be\n        your private CA certificate. The \u003cb\u003eSubject\u003c/b\u003e field in the certificate\n        identifies the entity that owns or controls the public key in the\n        certificate. The entity can be a user, computer, device, or service. The\n        \u003cb\u003eSubject\u003c/b\u003e must contain an X.500 distinguished name (DN). A DN is a\n        sequence of relative distinguished names (RDNs). The RDNs are separated\n        by commas in the certificate. The DN must be unique for each entity, but\n        your private CA can issue more than one certificate with the same DN to\n        the same entity. \"\n    AccountId:\n      type: string\n      pattern: \"[0-9]+\"\n      minLength: 12\n      maxLength: 12\n    ActionType:\n      type: string\n      enum:\n        - IssueCertificate\n        - GetCertificate\n        - ListPermissions\n    ActionList:\n      type: array\n      items:\n        $ref: \"#/components/schemas/ActionType\"\n      minItems: 1\n      maxItems: 3\n    Arn:\n      type: string\n      pattern: arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:[\\w+=/,.@-]*:[0-9]*:[\\w+=,.@-]+(/[\\w+=/,.@-]+)*\n      minLength: 5\n      maxLength: 200\n    AuditReportId:\n      type: string\n      pattern: \"[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}\"\n      minLength: 36\n      maxLength: 36\n    AuditReportResponseFormat:\n      type: string\n      enum:\n        - JSON\n        - CSV\n    AuditReportStatus:\n      type: string\n      enum:\n        - CREATING\n        - SUCCESS\n        - FAILED\n    Boolean:\n      type: boolean\n    CertificateAuthority:\n      type: object\n      properties:\n        Arn:\n          $ref: \"#/components/schemas/Arn\"\n        CreatedAt:\n          $ref: \"#/components/schemas/TStamp\"\n        LastStateChangeAt:\n          $ref: \"#/components/schemas/TStamp\"\n        Type:\n          $ref: \"#/components/schemas/CertificateAuthorityType\"\n        Serial:\n          $ref: \"#/components/schemas/String\"\n        Status:\n          $ref: \"#/components/schemas/CertificateAuthorityStatus\"\n        NotBefore:\n          $ref: \"#/components/schemas/TStamp\"\n        NotAfter:\n          $ref: \"#/components/schemas/TStamp\"\n        FailureReason:\n          $ref: \"#/components/schemas/FailureReason\"\n        CertificateAuthorityConfiguration:\n          $ref: \"#/components/schemas/CertificateAuthorityConfiguration\"\n        RevocationConfiguration:\n          $ref: \"#/components/schemas/RevocationConfiguration\"\n        RestorableUntil:\n          $ref: \"#/components/schemas/TStamp\"\n      description: \"Contains information about your private certificate authority (CA).\n        Your private CA can issue and revoke X.509 digital certificates. Digital\n        certificates verify that the entity named in the certificate\n        \u003cb\u003eSubject\u003c/b\u003e field owns or controls the public key contained in the\n        \u003cb\u003eSubject Public Key Info\u003c/b\u003e field. Call the\n        \u003ca\u003eCreateCertificateAuthority\u003c/a\u003e action to create your private CA. You\n        must then call the \u003ca\u003eGetCertificateAuthorityCertificate\u003c/a\u003e action to\n        retrieve a private CA certificate signing request (CSR). Sign the CSR\n        with your ACM Private CA-hosted or on-premises root or subordinate CA\n        certificate. Call the \u003ca\u003eImportCertificateAuthorityCertificate\u003c/a\u003e\n        action to import the signed certificate into AWS Certificate Manager\n        (ACM). \"\n    CertificateAuthorities:\n      type: array\n      items:\n        $ref: \"#/components/schemas/CertificateAuthority\"\n    TStamp:\n      type: string\n      format: date-time\n    CertificateAuthorityType:\n      type: string\n      enum:\n        - ROOT\n        - SUBORDINATE\n    String:\n      type: string\n    CertificateAuthorityStatus:\n      type: string\n      enum:\n        - CREATING\n        - PENDING_CERTIFICATE\n        - ACTIVE\n        - DELETED\n        - DISABLED\n        - EXPIRED\n        - FAILED\n    FailureReason:\n      type: string\n      enum:\n        - REQUEST_TIMED_OUT\n        - UNSUPPORTED_ALGORITHM\n        - OTHER\n    CertificateAuthorityConfiguration:\n      type: object\n      required:\n        - KeyAlgorithm\n        - SigningAlgorithm\n        - Subject\n      properties:\n        KeyAlgorithm:\n          $ref: \"#/components/schemas/KeyAlgorithm\"\n        SigningAlgorithm:\n          $ref: \"#/components/schemas/SigningAlgorithm\"\n        Subject:\n          $ref: \"#/components/schemas/ASN1Subject\"\n      description: \"Contains configuration information for your private certificate\n        authority (CA). This includes information about the class of public key\n        algorithm and the key pair that your private CA creates when it issues a\n        certificate. It also includes the signature algorithm that it uses when\n        issuing certificates, and its X.500 distinguished name. You must specify\n        this information when you call the \u003ca\u003eCreateCertificateAuthority\u003c/a\u003e\n        action. \"\n    RevocationConfiguration:\n      type: object\n      properties:\n        CrlConfiguration:\n          $ref: \"#/components/schemas/CrlConfiguration\"\n      description: Certificate revocation information used by the\n        \u003ca\u003eCreateCertificateAuthority\u003c/a\u003e and \u003ca\u003eUpdateCertificateAuthority\u003c/a\u003e\n        actions. Your private certificate authority (CA) can create and maintain\n        a certificate revocation list (CRL). A CRL contains information about\n        certificates revoked by your CA. For more information, see\n        \u003ca\u003eRevokeCertificate\u003c/a\u003e.\n    KeyAlgorithm:\n      type: string\n      enum:\n        - RSA_2048\n        - RSA_4096\n        - EC_prime256v1\n        - EC_secp384r1\n    SigningAlgorithm:\n      type: string\n      enum:\n        - SHA256WITHECDSA\n        - SHA384WITHECDSA\n        - SHA512WITHECDSA\n        - SHA256WITHRSA\n        - SHA384WITHRSA\n        - SHA512WITHRSA\n    CertificateBody:\n      type: string\n    CertificateBodyBlob:\n      type: string\n      minLength: 1\n      maxLength: 32768\n    CertificateChain:\n      type: string\n    CertificateChainBlob:\n      type: string\n      minLength: 0\n      maxLength: 2097152\n    IdempotencyToken:\n      type: string\n      pattern: \"[\\\\u0009\\\\u000A\\\\u000D\\\\u0020-\\\\u00FF]*\"\n      minLength: 1\n      maxLength: 36\n    TagList:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Tag\"\n      minItems: 1\n      maxItems: 50\n    Principal:\n      type: string\n      pattern: ^[^*]+$\n      minLength: 0\n      maxLength: 128\n    Integer1To5000:\n      type: integer\n      minimum: 1\n      maximum: 5000\n    String253:\n      type: string\n      minLength: 0\n      maxLength: 253\n    String3To255:\n      type: string\n      minLength: 3\n      maxLength: 255\n    CrlConfiguration:\n      type: object\n      required:\n        - Enabled\n      properties:\n        Enabled:\n          $ref: \"#/components/schemas/Boolean\"\n        ExpirationInDays:\n          $ref: \"#/components/schemas/Integer1To5000\"\n        CustomCname:\n          $ref: \"#/components/schemas/String253\"\n        S3BucketName:\n          $ref: \"#/components/schemas/String3To255\"\n      description: \"\u003cp\u003eContains configuration information for a certificate revocation list\n        (CRL). Your private certificate authority (CA) creates base CRLs. Delta\n        CRLs are not supported. You can enable CRLs for your new or an existing\n        private CA by setting the \u003cb\u003eEnabled\u003c/b\u003e parameter to \u003ccode\u003etrue\u003c/code\u003e.\n        Your private CA writes CRLs to an S3 bucket that you specify in the\n        \u003cb\u003eS3BucketName\u003c/b\u003e parameter. You can hide the name of your bucket by\n        specifying a value for the \u003cb\u003eCustomCname\u003c/b\u003e parameter. Your private CA\n        copies the CNAME or the S3 bucket name to the \u003cb\u003eCRL Distribution\n        Points\u003c/b\u003e extension of each certificate it issues. Your S3 bucket\n        policy must give write permission to ACM Private CA. \u003c/p\u003e \u003cp\u003eYour\n        private CA uses the value in the \u003cb\u003eExpirationInDays\u003c/b\u003e parameter to\n        calculate the \u003cb\u003enextUpdate\u003c/b\u003e field in the CRL. The CRL is refreshed\n        at 1/2 the age of next update or when a certificate is revoked. When a\n        certificate is revoked, it is recorded in the next CRL that is generated\n        and in the next audit report. Only time valid certificates are listed in\n        the CRL. Expired certificates are not included. \u003c/p\u003e \u003cp\u003eCRLs contain the\n        following fields:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003cb\u003eVersion\u003c/b\u003e: The current version\n        number defined in RFC 5280 is V2. The integer value is 0x1. \u003c/p\u003e \u003c/li\u003e\n        \u003cli\u003e \u003cp\u003e \u003cb\u003eSignature Algorithm\u003c/b\u003e: The name of the algorithm used to\n        sign the CRL.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003cb\u003eIssuer\u003c/b\u003e: The X.500 distinguished\n        name of your private CA that issued the CRL.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003cb\u003eLast\n        Update\u003c/b\u003e: The issue date and time of this CRL.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\n        \u003cb\u003eNext Update\u003c/b\u003e: The day and time by which the next CRL will be\n        issued.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003cb\u003eRevoked Certificates\u003c/b\u003e: List of revoked\n        certificates. Each list item contains the following information.\u003c/p\u003e\n        \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003cb\u003eSerial Number\u003c/b\u003e: The serial number, in hexadecimal\n        format, of the revoked certificate.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003cb\u003eRevocation\n        Date\u003c/b\u003e: Date and time the certificate was revoked.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\n        \u003cb\u003eCRL Entry Extensions\u003c/b\u003e: Optional extensions for the CRL entry.\u003c/p\u003e\n        \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003cb\u003eX509v3 CRL Reason Code\u003c/b\u003e: Reason the certificate was\n        revoked.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003cb\u003eCRL\n        Extensions\u003c/b\u003e: Optional extensions for the CRL.\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\n        \u003cb\u003eX509v3 Authority Key Identifier\u003c/b\u003e: Identifies the public key\n        associated with the private key used to sign the certificate.\u003c/p\u003e \u003c/li\u003e\n        \u003cli\u003e \u003cp\u003e \u003cb\u003eX509v3 CRL Number:\u003c/b\u003e: Decimal sequence number for the\n        CRL.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003cb\u003eSignature Algorithm\u003c/b\u003e:\n        Algorithm used by your private CA to sign the CRL.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\n        \u003cb\u003eSignature Value\u003c/b\u003e: Signature computed over the CRL.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e\n        \u003cp\u003eCertificate revocation lists created by ACM Private CA are\n        DER-encoded. You can use the following OpenSSL command to list a\n        CRL.\u003c/p\u003e \u003cp\u003e \u003ccode\u003eopenssl crl -inform DER -text -in \u003ci\u003ecrl_path\u003c/i\u003e\n        -noout\u003c/code\u003e \u003c/p\u003e\"\n    CsrBlob:\n      type: string\n      minLength: 1\n      maxLength: 32768\n    CsrBody:\n      type: string\n    PermanentDeletionTimeInDays:\n      type: integer\n      minimum: 7\n      maximum: 30\n    Validity:\n      type: object\n      required:\n        - Value\n        - Type\n      properties:\n        Value:\n          $ref: \"#/components/schemas/PositiveLong\"\n        Type:\n          $ref: \"#/components/schemas/ValidityPeriodType\"\n      description: Length of time for which the certificate issued by your private\n        certificate authority (CA), or by the private CA itself, is valid in\n        days, months, or years. You can issue a certificate by calling the\n        \u003ca\u003eIssueCertificate\u003c/a\u003e action.\n    NextToken:\n      type: string\n      minLength: 1\n      maxLength: 500\n    MaxResults:\n      type: integer\n      minimum: 1\n      maximum: 1000\n    PermissionList:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Permission\"\n      minItems: 0\n    Permission:\n      type: object\n      properties:\n        CertificateAuthorityArn:\n          $ref: \"#/components/schemas/Arn\"\n        CreatedAt:\n          $ref: \"#/components/schemas/TStamp\"\n        Principal:\n          $ref: \"#/components/schemas/String\"\n        SourceAccount:\n          $ref: \"#/components/schemas/String\"\n        Actions:\n          $ref: \"#/components/schemas/ActionList\"\n        Policy:\n          $ref: \"#/components/schemas/String\"\n      description: Permissions designate which private CA actions can be performed by an\n        AWS service or entity. In order for ACM to automatically renew private\n        certificates, you must give the ACM service principal all available\n        permissions (\u003ccode\u003eIssueCertificate\u003c/code\u003e, \u003ccode\u003eGetCertificate\u003c/code\u003e,\n        and \u003ccode\u003eListPermissions\u003c/code\u003e). Permissions can be assigned with the\n        \u003ca\u003eCreatePermission\u003c/a\u003e action, removed with the \u003ca\u003eDeletePermission\u003c/a\u003e\n        action, and listed with the \u003ca\u003eListPermissions\u003c/a\u003e action.\n    PositiveLong:\n      type: integer\n      minimum: 1\n    RevocationReason:\n      type: string\n      enum:\n        - UNSPECIFIED\n        - KEY_COMPROMISE\n        - CERTIFICATE_AUTHORITY_COMPROMISE\n        - AFFILIATION_CHANGED\n        - SUPERSEDED\n        - CESSATION_OF_OPERATION\n        - PRIVILEGE_WITHDRAWN\n        - A_A_COMPROMISE\n    TagKey:\n      type: string\n      pattern: ^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$\n      minLength: 1\n      maxLength: 128\n    TagValue:\n      type: string\n      pattern: ^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$\n      minLength: 0\n      maxLength: 256\n    Tag:\n      type: object\n      required:\n        - Key\n      properties:\n        Key:\n          $ref: \"#/components/schemas/TagKey\"\n        Value:\n          $ref: \"#/components/schemas/TagValue\"\n      description: \"Tags are labels that you can use to identify and organize your private\n        CAs. Each tag consists of a key and an optional value. You can associate\n        up to 50 tags with a private CA. To add one or more tags to a private\n        CA, call the \u003ca\u003eTagCertificateAuthority\u003c/a\u003e action. To remove a tag,\n        call the \u003ca\u003eUntagCertificateAuthority\u003c/a\u003e action. \"\n    ValidityPeriodType:\n      type: string\n      enum:\n        - END_DATE\n        - ABSOLUTE\n        - DAYS\n        - MONTHS\n        - YEARS\n",
			"canonicalURL": "/github.com/restful-ma/thresholds@5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/-/blob/benchmark-repository/openapi/amazonaws.com-acm-pca-2017-08-22-swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/restful-ma/thresholds/blob/5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/benchmark-repository/openapi/amazonaws.com-acm-pca-2017-08-22-swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /#X-Amz-Target=ACMPrivateCA.ImportCertificateAuthorityCertificate: post: operation \"ImportCertificateAuthorityCertificate\": parse path \"/#X-Amz-Target=ACMPrivateCA.ImportCertificateAuthorityCertificate\": path MUST NOT contain a fragment"
}