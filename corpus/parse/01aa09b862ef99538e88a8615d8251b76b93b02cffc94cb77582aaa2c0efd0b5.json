{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/georchestra/georchestra"
		},
		"file": {
			"name": "api-1.0.yaml",
			"size": 0,
			"path": "extractorapp/src/main/resources/api-1.0.yaml",
			"byteSize": 8528,
			"content": "openapi: 3.0.0\n# Added by API Auto Mocking Plugin\nservers:\n  - description: Default Server\n    url: https://georchestra.mydomain.org/extractorapp/\ninfo:\n  version: \"1.0.0\"\n  title: 'Extractorapp 1.0 API'\n  description: Extractorapp 1.0 API\n\ntags: \n  - name: Jobs\n    description: Jobs tasks\n  - name: Extractor\n    description: extractor tasks\n  \npaths:\n  /jobs/list:\n    get:\n      tags: \n        - Jobs\n      summary: List current tasks\n      operationId: listTasks\n      parameters:\n        - $ref: '#/components/parameters/sec-username'\n        - $ref: '#/components/parameters/sec-roles'\n        - $ref: '#/components/parameters/sec-orgname'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TaskList'\n                \n  /extractor/package:\n    get:\n      tags: \n        - Extractor\n      summary: ''\n      operationId: getExtractionResults\n      parameters: \n        - $ref: '#/components/parameters/uuid'\n        - $ref: '#/components/parameters/sec-username'\n        - $ref: '#/components/parameters/sec-roles'\n        - $ref: '#/components/parameters/sec-orgname'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/zip:\n              schema:\n                $ref: '#/components/schemas/ZipFile'\n          headers:\n            Content-Disposition:\n              schema:\n                type: string\n  \n  /extractor/initiate:\n    post:\n      tags: \n        - Extractor\n      summary: 'Initiate an extraction for the provided layers and their settings'\n      operationId: extract\n      parameters:\n        - $ref: '#/components/parameters/sec-username'\n        - $ref: '#/components/parameters/sec-roles'\n        - $ref: '#/components/parameters/sec-orgname'\n      requestBody:\n        $ref: '#/components/requestBodies/ExtractRequestBody'\n      responses:\n        200:\n          description: \"Extraction started\"\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/ExtractResponse'\n\n  /extractor/tasks:\n    get:\n      tags: \n        - Extractor\n      summary: 'Lists the tasks waiting in the extraction queue'\n      operationId: getTaskQueue\n      parameters:\n        - $ref: '#/components/parameters/sec-username'\n        - $ref: '#/components/parameters/sec-roles'\n        - $ref: '#/components/parameters/sec-orgname'\n      responses:\n        200:\n          description: \"Task queue\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TaskQueue'\n  \n  /extractor/task/{uuid}:\n    parameters:\n    - name: uuid\n      in: path\n      description: Task identifier\n      required: true\n      schema:\n        type: string\n        format: uuid\n    put:\n      tags: \n        - Extractor\n      description: Analyzes the changes required in the task described in the parameter. \n                   This method supposes that only one change is done in one call.\n      operationId: updateTask\n      parameters:\n        - $ref: '#/components/parameters/sec-username'\n        - $ref: '#/components/parameters/sec-roles'\n        - $ref: '#/components/parameters/sec-orgname'\n      requestBody:\n        content:\n          application:json:\n            schema:\n              $ref: '#/components/schemas/TaskDescriptor'\n      responses:\n        200:\n          description: \"Task updated, no content\"\n\ncomponents:\n  parameters:\n    uuid:\n      in: query\n      name: uuid\n      required: true\n      schema:\n        type: string\n        format: uuid\n      description: Unique extraction identifier\n    sec-username:\n      in: header\n      name: sec-username\n      schema:\n        type: string\n    sec-roles:\n      in: header\n      name: sec-roles\n      schema:\n        type: string\n      example: ROLE_SUPERUSER, ROLE_ADMINISTRATOR\n    sec-orgname:\n      in: header\n      name: sec-orgname\n      schema:\n        type: string\n  \n  requestBodies:\n    ExtractRequestBody:\n      description: request to initiate an extraction\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ExtractRequest'\n  schemas:\n    ExtractRequest:\n      type: object\n      properties:\n        emails:\n          type: array\n          items:\n            type: string\n          example: [psc@georchestra.org, user@example.com]\n        globalProperties:\n          $ref: '#/components/schemas/ExtractionOptions'\n        layers:\n          $ref: '#/components/schemas/ExtractorLayer'\n          \n    ExtractResponse:\n      type: object\n      xml: \n        name: response\n      properties:\n        success:\n          type: boolean\n        link:\n          type: string\n          format: url\n          example: 'https://georchestra.mydomain.org/extractorapp/extractor/package?uuid={requestUuid}'\n        emails:\n          type: string\n          example: '[psc@georchestra.org, user@example.com]'\n        \n    BoundingBox:\n      description: '[minx, miny, maxx, maxy]'\n      type: array\n      items:\n        type: number\n        format: double\n      example:\n        [-180, -90, 180, 90]\n\n    ReferencedBoundingBox:\n      type: object\n      properties:\n        srs:\n          type: string\n          example: 'EPSG:4326'\n        value:\n          $ref: '#/components/schemas/BoundingBox'\n            \n    ExtractionOptions:\n      type: object\n      properties:\n        projection:\n          type: string\n          example: 'EPSG:4326'\n        vectorFormat:\n          type: string\n          enum: [shp, mif, tab, kml]\n        rasterFormat:\n          type: string\n          enum: [jpeg2000, jp2, jp2ecw, jp2k, geotiff, gtiff, geotif, gtif, png, gif, jpeg, tiff, tif, ecw]\n        bbox:\n          $ref: '#/components/schemas/ReferencedBoundingBox'\n        resolution:\n          type: number\n          format: double\n\n    ExtractorLayer:\n      type: object\n      required:\n        - layerName\n        - owsUrl\n        - owsType\n      properties:\n        layerName:\n          type: string\n          example: roads\n        owsUrl:\n          type: string\n          format: url\n          example: https://georchestra.mydomain.org/services/geoserver/ows\n        owsType:\n          type: string\n          enum: [WFS, WCS]\n        format:\n          type: string\n          enum: [shp, mif, tab, kml, jpeg2000, jp2, jp2ecw, jp2k, geotiff, gtiff, geotif, gtif, png, gif, jpeg, tiff, tif, ecw]\n        namespace:\n          type: string\n          example: georchestra\n        isoMetadataURL:\n          type: string\n          format: url\n        projection:\n          type: string\n          example: 'EPSG:4326'\n        bbox:\n          $ref: '#/components/schemas/ReferencedBoundingBox'\n        resolution:\n          type: number\n          format: double\n\n    ZipFile:\n      type: string\n      format: binary\n      \n    ExecutionState:\n      type: string \n      enum: [WAITING, RUNNING, PAUSED, COMPLETED, CANCELLED]\n    ExecutionPriority:\n      type: string \n      enum: [LOW, MEDIUM, HIGH]\n\n    TaskList:\n      type: object\n      properties:\n        status:\n          type: string\n          example: success\n        tasks:\n          type: array\n          items:\n            $ref: '#/components/schemas/TaskInfo'\n    TaskInfo:\n      type: object\n      properties:\n        uuid:\n          type: string\n          format: uuid\n        state:\n          $ref: '#/components/schemas/ExecutionState'\n        priority:\n          $ref: '#/components/schemas/ExecutionPriority'\n        \n    TaskQueue:\n      type: object\n      properties:\n        tasks:\n          type: array\n          items:\n            $ref: '#/components/schemas/TaskDescriptor'\n    TaskDescriptor:\n      type: object\n      properties:\n        uuid:\n          type: string\n          format: uuid\n        requestor:\n          type: string\n        priority:\n          type: integer\n          format: int32\n        status:\n          $ref: '#/components/schemas/ExecutionState'\n        request_ts:\n          type: string\n          format: date_time\n        begin_ts:\n          type: string\n          format: date_time\n        end_ts:\n          type: string\n          format: date_time\n        spec:\n          $ref: '#/components/schemas/ExtractRequest'\n\n  securitySchemes:\n    password:\n      type: oauth2\n      flows:\n        password:\n          tokenUrl: 'http://example.com/oauth/token'\n          scopes:\n            write: allows modifying resources\n            read: allows reading resources",
			"canonicalURL": "/github.com/georchestra/georchestra@f1893307fd9b0639b25c27c1e6320375645e5eb4/-/blob/extractorapp/src/main/resources/api-1.0.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/georchestra/georchestra/blob/f1893307fd9b0639b25c27c1e6320375645e5eb4/extractorapp/src/main/resources/api-1.0.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/extractor/task/{uuid}\": put: operation \"updateTask\": requestBody: parse content: at 1:5689: content type \"application:json\": mime: expected slash after first token"
}