{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/plantbreeding/BrAPI"
		},
		"file": {
			"name": "Images_GET_POST.yaml",
			"size": 0,
			"path": "Specification/BrAPI-Phenotyping/Images/Images_GET_POST.yaml",
			"byteSize": 5081,
			"content": "info:\n  title: BrAPI\n  version: ''\nopenapi: 3.0.0\npaths:\n  /images:\n    get:\n      summary: Get the image metadata summaries\n      description: |-\n        Get filtered set of image metadata\n\n        Implementation Notes\n\n        - ''imageURL'' should be a complete URL describing the location of the image. There is no BrAPI call for \n        retrieving the image content, so it could be on a different path, or a different host.\n\n        - ''descriptiveOntologyTerm'' can be thought of as Tags for the image. These could be simple descriptive \n        words, or ontology references, or full ontology URI''s.\n      parameters:\n      - description: The unique identifier for a image\n        in: query\n        name: imageDbId\n        required: false\n        schema:\n          type: string\n      - description: The human readable name of an image\n        in: query\n        name: imageName\n        required: false\n        schema:\n          type: string\n      - description: The unique identifier of the observation unit an image is portraying\n        in: query\n        name: observationUnitDbId\n        required: false\n        schema:\n          type: string\n      - description: The unique identifier of the observation an image is associated with\n        in: query\n        name: observationDbId\n        required: false\n        schema:\n          type: string\n      - description: A descriptive term associated with an image\n        in: query\n        name: descriptiveOntologyTerm\n        required: false\n        schema:\n          type: string\n      - $ref: '#/components/parameters/commonCropName'\n      - $ref: '#/components/parameters/programDbId'\n      - $ref: '#/components/parameters/externalReferenceID'\n      - $ref: '#/components/parameters/externalReferenceId'\n      - $ref: '#/components/parameters/externalReferenceSource'\n      - $ref: '#/components/parameters/page'\n      - $ref: '#/components/parameters/pageSize'\n      - $ref: '#/components/parameters/authorizationHeader'\n      responses:\n        '200':\n          $ref: '#/components/responses/ImageListResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequest'\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n      tags:\n      - Images\n    post:\n      summary: Create new image metadata records\n      description: |-\n        Create new image metadata records\n\n        Implementation Notes\n        \n        - This endpoint should be implemented with 'PUT /images/{imageDbId}/imagecontent' for full image upload capability\n\n        - ''imageURL'' should be a complete URL describing the location of the image. There is no BrAPI call for retrieving \n        the image content, so it could be on a different path, or a different host.\n\n        - ''descriptiveOntologyTerm'' can be thought of as Tags for the image. These could be simple descriptive words, or \n        ontology references, or full ontology URI's.\n\n        - The '/images' calls support a GeoJSON object structure for describing their location. The BrAPI spec for GeoJSON \n        only supports two of the possible geometries; Points and Polygons.\n\n        - With most images, the Point geometry should be used, and it should indicate the longitude and latitude of the camera.\n\n        - For top down images (ie from drones, cranes, etc), the Point geometry may be used to indicate the longitude and \n        latitude of the centroid of the image content, and the Polygon geometry may be used to indicate the border of the \n        image content.\n\n        An example use case is available on the BrAPI Wiki -\u003e https://wiki.brapi.org/index.php/Image_Upload\n      parameters:\n      - $ref: '#/components/parameters/authorizationHeader'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/ImageNewRequest'\n      responses:\n        '200':\n          $ref: '#/components/responses/ImageListResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequest'\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n      tags:\n      - Images\ncomponents:\n  responses:\n    ImageListResponse:\n      content:\n        application/json:\n          schema:\n            title: ImageListResponse\n            type: object\n            properties:\n              '@context':\n                $ref: '#/components/schemas/Context'\n              metadata:\n                $ref: '#/components/schemas/metadata'\n              result:\n                type: object\n                properties:\n                  data:\n                    description: Array of image metadata\n                    items:\n                      $ref: '#/components/schemas/Image'\n                    type: array\n                required:\n                - data\n            required:\n            - metadata\n            - result\n      description: OK\n      headers: {}\n      \n",
			"canonicalURL": "/github.com/plantbreeding/BrAPI@a45723dba8753a1c1177ec8f7759d57ebcf5f5b1/-/blob/Specification/BrAPI-Phenotyping/Images/Images_GET_POST.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/plantbreeding/BrAPI/blob/a45723dba8753a1c1177ec8f7759d57ebcf5f5b1/Specification/BrAPI-Phenotyping/Images/Images_GET_POST.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: at 1:15: responses: \"ImageListResponse\": at 1:49: at 1:60: content: application/json: at 1:80: schema: at 1:90: parse schema: property \"@context\": at 1:116: parse schema: resolve \"#/components/schemas/Context\": find schema: resolve: can't find value for \"components/schemas/Context\""
}