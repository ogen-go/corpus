{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/camaraproject/QualityOnDemand"
		},
		"file": {
			"name": "qod-api.yaml",
			"size": 0,
			"path": "code/API_code/api/src/main/resources/qod-api.yaml",
			"byteSize": 9912,
			"content": "openapi: 3.0.1\ninfo:\n  title: QoS for stable latency and throughput API\n  description: Service Enabling Network Function API for QoS control\n  termsOfService: http://swagger.io/terms/\n  contact:\n    email: project-email@sample.com\n  license:\n    name: Apache 2.0\n    url: https://www.apache.org/licenses/LICENSE-2.0.html\n  version: 0.1.0\nexternalDocs:\n  description: Product documentation at Camara\n  url: https://github.com/camaraproject/\nsecurity:\n  - oAuth2ClientCredentials: []\nservers:\n  - url: '{apiRoot}/{basePath}'\n    variables:\n      apiRoot:\n        default: http://localhost:9091\n        description: API root\n      basePath:\n        default: qod-api/v0\n        description: Base path for the QoD API\npaths:\n  /sessions:\n    post:\n      tags:\n        - QoS sessions\n      summary: 'Reserve resources for QoS session'\n      description: In case of successfully created session, actually granted QoS level will be returned. The underlying mobile network can grant qos level that is lower than requested one.\n      operationId: createSession\n      requestBody:\n        description: Creates a new session without changing a QoS profile.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateSession'\n        required: true\n      callbacks:\n        notifications:\n          '{$request.body#/notificationUrl}/notifications':\n            $ref: '#/paths/~1notifications'\n      responses:\n        201:\n          description: Session created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SessionInfo'\n        400:\n          description: Invalid input\n          content: { }\n        401:\n          description: Unauthorized\n          content: { }\n        403:\n          description: Forbidden\n          content: { }\n        409:\n          description: Conflict\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorInfo'\n        500:\n          description: Session not created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorInfo'\n        503:\n          description: Service unavailable\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorInfo'\n  /sessions/{sessionId}:\n    get:\n      tags:\n        - QoS sessions\n      summary: 'Get session information'\n      operationId: getSession\n      parameters:\n        - name: sessionId\n          in: path\n          description: Session ID that was obtained from the createSession operation\n          required: true\n          schema:\n            $ref: '#/components/schemas/SessionId'\n      responses:\n        200:\n          description: Contains information about active session\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SessionInfo'\n        401:\n          description: Unauthorized\n          content: { }\n        403:\n          description: Forbidden\n          content: { }\n        404:\n          description: Session not found\n          content: { }\n        503:\n          description: Service unavailable\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorInfo'\n    delete:\n      tags:\n        - QoS sessions\n      summary: 'Free resources related to QoS session'\n      operationId: deleteSession\n      parameters:\n        - name: sessionId\n          in: path\n          description: Session ID that was obtained from the createSession operation\n          required: true\n          schema:\n            $ref: '#/components/schemas/SessionId'\n      responses:\n        204:\n          description: Session deleted\n          content: { }\n        401:\n          description: Unauthorized\n          content: { }\n        403:\n          description: Forbidden\n          content: { }\n        404:\n          description: Session not found\n          content: { }\n        503:\n          description: Service unavailable\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorInfo'\n  /notifications:\n    post:\n      tags:\n        - Session notifications callback\n      summary: 'Session notifications callback'\n      description: |\n        Important: this endpoint is to be implemented by the API consumer.\n        The QoD server will call this endpoint whenever any network related event occurs.\n        Currently only SESSION_TERMINATED event is implemented. Any other network events are ignored.\n      operationId: postNotification\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Notification'\n      responses:\n        '204':\n          description: Successful notification\n          content: { }\n      security:\n        - apiKey: [ ]\ncomponents:\n  securitySchemes:\n    oAuth2ClientCredentials:\n      type: oauth2\n      description: This API uses OAuth 2 with the client credentials grant flow.\n      flows:\n        clientCredentials:\n          tokenUrl: '{tokenUrl}'\n          scopes: { }\n    apiKey:\n      type: apiKey\n      description: API key to authorize requests\n      name: apikey\n      in: query\n  schemas:\n    SessionId:\n      type: string\n      format: uuid\n      description: Session ID in UUID format\n    SessionInfo:\n      allOf:\n        - $ref: '#/components/schemas/CreateSession'\n      type: object\n      required:\n        - id\n        - duration\n        - startedAt\n        - expiresAt\n      properties:\n        id:\n          $ref: '#/components/schemas/SessionId'\n        startedAt:\n          type: integer\n          example: 1639479600\n          description: Timestamp of session start in seconds since unix epoch\n          format: int64\n        expiresAt:\n          type: integer\n          example: 1639566000\n          description: Timestamp of session expiration if the session was not deleted, in seconds since unix epoch\n          format: int64\n      description: Session related information.\n    CreateSession:\n      description: Data type with attributes required for creating a session\n      type: object\n      properties:\n        duration:\n          type: integer\n          example: 86400\n          description: |\n            Session duration in seconds. Maximal value of 24 hours is used if not set.\n            After session has expired the client will receive SESSION_TERMINATED event. See notification callback.\n          format: int32\n          minimum: 1\n          maximum: 86400\n        ueAddr:\n          $ref: '#/components/schemas/Ipv4Addr'\n        asAddr:\n          $ref: '#/components/schemas/Ipv4Addr'\n        uePorts:\n          $ref: '#/components/schemas/PortsSpec'\n        asPorts:\n          $ref: '#/components/schemas/PortsSpec'\n        protocolIn:\n          $ref: '#/components/schemas/Protocol'\n        protocolOut:\n          $ref: '#/components/schemas/Protocol'\n        qos:\n          $ref: '#/components/schemas/QosProfile'\n        notificationUri:\n          type: string\n          format: uri\n          example: 'https://application-server.com/notifications'\n          description: Allows asynchronous delivery of session related events\n        notificationAuthToken:\n          type: string\n          example: 'c8974e592c2fa383d4a3960714'\n          description: Authentification token for callback API\n      required:\n        - ueAddr\n        - asAddr\n        - protocolIn\n        - protocolOut\n        - qos\n    Ipv4Addr:\n      type: string\n      format: ipv4\n      pattern: '^([01]?\\d\\d?|2[0-4]\\d|25[0-5])(?:\\.(?:[01]?\\d\\d?|2[0-4]\\d|25[0-5])){3}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$'\n      example: '192.168.0.1/24'\n      description: |\n        IPv4 address may be specified in form \u003caddress/mask\u003e as:\n          - address - an IPv4 number in dotted-quad form 1.2.3.4. Only this exact IP number will match the flow control rule.\n          - address/mask - an IP number as above with a mask width of the form 1.2.3.4/24.\n            In this case, all IP numbers from 1.2.3.0 to 1.2.3.255 will match. The bit width MUST be valid for the IP version.\n    PortsSpec:\n      type: string\n      example: '5010-5020,5021,5022'\n      description: |\n        Ports may be specified as \u003c{port/port-port}[,ports[,...]]\u003e. The '-' notation specifies a range of ports (including boundaries).\n    Protocol:\n      type: string\n      enum:\n        - TCP\n        - UDP\n        - ANY\n      description: |\n        * `TCP` - Qualifier for TCP protocol\n        * `UDP` - Qualifier for UDP protocol\n        * `ANY` - Qualifier for all protocols\n    QosProfile:\n      type: string\n      enum:\n        - LOW_LATENCY\n        - THROUGHPUT_S\n        - THROUGHPUT_M\n        - THROUGHPUT_L\n      description: |\n        * `LOW_LATENCY` - Corresponds to a specific set of network parameters that will be negotiated with the network provider in advance\n        * `THROUGHPUT_S` - Qualifier for the requested throughput profile _S_\n        * `THROUGHPUT_M` - Qualifier for the requested throughput profile _M_\n        * `THROUGHPUT_L` - Qualifier for the requested throughput profile _L_\n    Notification:\n      type: object\n      required:\n        - sessionId\n        - event\n      properties:\n        sessionId:\n          $ref: '#/components/schemas/SessionId'\n        event:\n          $ref: '#/components/schemas/SessionEvent'\n    SessionEvent:\n      type: string\n      enum:\n        - SESSION_TERMINATED\n    QosChanged:\n      type: object\n      properties:\n        id:\n          $ref: '#/components/schemas/SessionId'\n        qos:\n          $ref: '#/components/schemas/QosProfile'\n    ErrorInfo:\n      type: object\n      properties:\n        message:\n          type: string\n          description: Detailed error description\n",
			"canonicalURL": "/github.com/camaraproject/QualityOnDemand@b44695d4e6af991d9346138c744ded58b3d2c3a1/-/blob/code/API_code/api/src/main/resources/qod-api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/camaraproject/QualityOnDemand/blob/b44695d4e6af991d9346138c744ded58b3d2c3a1/code/API_code/api/src/main/resources/qod-api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/sessions\": post: operation \"createSession\": security: parse security scheme \"oAuth2ClientCredentials\": oauth2: flow \"clientCredentials\": at code/API_code/api/src/main/resources/qod-api.yaml:174:21: \"tokenUrl\" MUST be in the form of a URL: parse \"{tokenUrl}\": invalid URI for request"
}