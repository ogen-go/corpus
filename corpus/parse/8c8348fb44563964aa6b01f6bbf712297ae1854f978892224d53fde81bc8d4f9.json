{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/nuts-foundation/nuts-node"
		},
		"file": {
			"name": "v1.yaml",
			"size": 0,
			"path": "docs/_static/auth/v1.yaml",
			"byteSize": 25670,
			"content": "openapi: 3.0.0\ninfo:\n  title: Nuts Auth Service API\n  version: 1.0.0\nservers:\n  - url: http://localhost:1323\npaths:\n  /internal/auth/v1/signature/session:\n    post:\n      operationId: createSignSession\n      summary: Create a signing session for a supported means.\n      description: |\n        Create a signing session for a supported means.\n\n        error returns:\n        * 400 - one of the parameters has the wrong format\n      tags:\n        - contract\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/SignSessionRequest\"\n      responses:\n        201:\n          description: When the signing session was successfully created.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SignSessionResponse\"\n        default:\n          $ref: '../common/error_response.yaml'\n\n  /internal/auth/v1/signature/session/{sessionID}:\n    get:\n      operationId: getSignSessionStatus\n      summary: Get the current status of a signing session\n      description: |\n        Get the current status of a signing session\n\n        error returns:\n        * 404 - session could not be found\n        * 500 - internal server error\n      tags:\n        - contract\n      parameters:\n        - name: sessionID\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: When the session is found. Contains the current session status.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SignSessionStatusResponse\"\n        default:\n          $ref: '../common/error_response.yaml'\n\n  /internal/auth/v1/signature/verify:\n    put:\n      operationId: verifySignature\n      summary: Verify a signature in the form of a verifiable presentation\n      description: |\n        Verify a signature in the form of a verifiable presentation\n\n        error returns:\n        * 400 - one of the parameters has the wrong format\n        * 500 - internal server error\n      tags:\n        - contract\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/SignatureVerificationRequest\"\n      responses:\n        200:\n          description: \"When the verification could be performed. The response contains the verification result. Note: This status code does not indicate the validity of the signature.\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SignatureVerificationResponse\"\n        default:\n          $ref: '../common/error_response.yaml'\n\n  /public/auth/v1/contract/{contractType}:\n    get:\n      operationId: getContractByType\n      summary: Get a contract by type and version\n      description: |\n        Get contract by type and version\n\n        error returns:\n        * 404 - contract does not exists\n      tags:\n        - contract\n      parameters:\n        - name: contractType\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: version\n          description: The version of this contract. If omitted, the most recent version will be returned\n          required: false\n          in: query\n          schema:\n            type: string\n        - name: language\n          in: query\n          required: false\n          schema:\n            type: string\n            default: nl\n      responses:\n        '200':\n          description: Returns the contract of this type, version, and language\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Contract\"\n        default:\n          $ref: '../common/error_response.yaml'\n\n  /internal/auth/v1/contract/drawup:\n    put:\n      operationId: drawUpContract\n      summary: Draw up a contract using a specified contract template, language and version\n      description: |\n        Draw up a contract using a specified contract template, language and version\n\n        error returns:\n        * 400 - one of the parameters has the wrong format\n        * 404 - combinetaion of template, language, and version not found\n      tags:\n        - contract\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/DrawUpContractRequest\"\n      responses:\n        200:\n          description: When the contract was drawn up successfully.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ContractResponse\"\n        default:\n          $ref: '../common/error_response.yaml'\n\n  /internal/auth/v1/jwt-grant:\n    post:\n      operationId: createJwtGrant\n      summary: Create a JWT Grant\n      description: |\n        Create a JWT Grant which can be used in the createAccessToken request in the assertion field\n\n        error returns:\n        * 400 - one of the parameters has the wrong format\n      tags:\n        - auth\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CreateJwtGrantRequest\"\n      responses:\n        '200':\n          description: Successful request. Responds with JWT encoded Bearer Token\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/JwtGrantResponse\"\n        default:\n          $ref: '../common/error_response.yaml'\n\n  /internal/auth/v1/request-access-token:\n    post:\n      operationId: requestAccessToken\n      summary: Request an accesstoken from the authorizer\n      description: |\n        Create a JWT Grant and use it as authorization grant to get an accesstoken from the authorizer.\n\n        error returns:\n        * 400 - one of the parameters has the wrong format\n      tags:\n        - auth\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/RequestAccessTokenRequest\"\n      responses:\n        '200':\n          description: Successful request. Responds with an accesstoken.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AccessTokenResponse\"\n        default:\n          $ref: '../common/error_response.yaml'\n\n  /n2n/auth/v1/accesstoken:\n    post:\n      operationId: createAccessToken\n      summary: Create an access token using a JWT as authorization grant\n      description: |\n        Create an access token using a JWT as authorization grant.\n        This endpoint must be available to other nodes for other applications to request access tokens.\n        It requires a two-way TLS connection according to the network agreement.\n\n        error returns:\n        * Follows the oauth framework error response: RFC6749\n      tags:\n        - auth\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: \"#/components/schemas/CreateAccessTokenRequest\"\n      responses:\n        '200':\n          description: The posted JWT is valid. Responds with access token\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AccessTokenResponse\"\n        '400':\n          description: The posted JWT is invalid.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AccessTokenRequestFailedResponse\"\n\n  /internal/auth/v1/accesstoken/verify:\n    head:\n      operationId: verifyAccessToken\n      summary: Verifies the provided access token\n      description: |\n        Verifies the access token given in the Authorization header (as bearer token). If it's a valid access token issued by this server, it'll return a 200 status code.\n\n        error returns:\n        * 403 - Token cannot be verified. Note that the contents of the access token are not returned. The introspection API is for that.\n      tags:\n        - auth\n      parameters:\n        - name: Authorization\n          in: header\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: The access token is valid. It has been signed by this server.\n        '403':\n          description: The given access token is invalid or couldn't be verified.\n\n  /internal/auth/v1/accesstoken/introspect:\n    post:\n      operationId: introspectAccessToken\n      summary: Introspection endpoint to retrieve information from an Access Token as described by RFC7662\n      tags:\n        - auth\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              required:\n                - token\n              properties:\n                token:\n                  type: string\n                  description: JWT access token\n      responses:\n        '200':\n          description: An Introspection response as described in RFC7662 section 2.2\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TokenIntrospectionResponse\"\n\ncomponents:\n  schemas:\n    VerifiableCredential:\n      type: object\n      description: A credential according to the W3C and Nuts specs.\n      required:\n        - \"@context\"\n        - type\n        - issuer\n        - issuanceDate\n        - credentialSubject\n        - proof\n      properties:\n        \"@context\":\n          description: List of URIs\n          type: array\n          items:\n            type: string\n        id:\n          description: credential ID. A Nuts DID followed by a large number.\n          example: \"did:nuts:B8PUHs2AUHbFF1xLLK4eZjgErEcMXHxs68FteY7NDtCY\"\n          type: string\n        type:\n          description: List of type definitions for the credential. Always includes 'VerifiableCredential'\n          type: array\n          items:\n            type: string\n        issuer:\n          $ref: '#/components/schemas/DID'\n        issuanceDate:\n          description: rfc3339 time string when the credential was issued.\n          type: string\n          example: \"2012-01-02T12:00:00Z\"\n        expirationDate:\n          description: rfc3339 time string untill when the credential is valid.\n          type: string\n          example: \"2012-01-02T12:00:00Z\"\n        credentialSubject:\n          $ref: '#/components/schemas/CredentialSubject'\n        proof:\n          description: one or multiple cryptographic proofs\n          type: object\n    CredentialSubject:\n      type: object\n      description: Subject of a Verifiable Credential identifying the holder and expressing claims.\n    CredentialIssuer:\n      type: object\n      required:\n        - issuer\n        - credentialType\n      properties:\n        issuer:\n          description: the DID of an issuer\n          example: \"did:nuts:B8PUHs2AUHbFF1xLLK4eZjgErEcMXHxs68FteY7NDtCY\"\n          type: string\n        credentialType:\n          description: a credential type\n          example: NutsOrganizationCredential\n          type: string\n    DID:\n      type: string\n      description: DID according to Nuts specification\n      example: \"did:nuts:B8PUHs2AUHbFF1xLLK4eZjgErEcMXHxs68FteY7NDtCY\"\n    #\n    # Everthing related to sessions and signing\n    #\n    SignSessionRequest:\n      required:\n        - means\n        - payload\n        - params\n      properties:\n        means:\n          type: string\n          enum: [ irma, dummy ]\n          example: irma\n        params:\n          type: object\n          description: Params are passed to the means. Should be documented in the means documentation.\n        payload:\n          type: string\n          description: Base64 encoded payload what needs to be signed.\n    SignSessionResponse:\n      required:\n        - sessionID\n        - sessionPtr\n        - means\n      properties:\n        sessionID:\n          description: Unique identifier of this sign session.\n          type: string\n        sessionPtr:\n          description: A pointer to a sign session. This is an opaque value which only has meaning in the context of the signing means. Can be an URL, base64 encoded image of a QRCode etc.\n          type: object\n        means:\n          description: The means this session uses to sign.\n          type: string\n          enum: [ irma, dummy ]\n          example: irma\n    SignSessionStatusResponse:\n      required:\n        - status\n      properties:\n        status:\n          description: Status indicates the status of the signing proces. Values depend on the implementation of the signing means.\n          type: string\n        verifiablePresentation:\n          $ref: \"#/components/schemas/VerifiablePresentation\"\n    VerifiablePresentation:\n      description: If the signature session is completed, this property contains the signature embedded in an w3c verifiable presentation.\n      type: object\n      required:\n        - \"@context\"\n        - type\n        - proof\n      properties:\n        \"@context\":\n          type: array\n          items:\n            type: string\n        type:\n          type: array\n          items:\n            type: string\n        proof:\n          type: object\n    SignatureVerificationRequest:\n      type: object\n      required:\n        - VerifiablePresentation\n      properties:\n        VerifiablePresentation:\n          $ref: \"#/components/schemas/VerifiablePresentation\"\n        checkTime:\n          description: Moment in time to check the validity of the signature. If omitted, the current time is used.\n          type: string\n          example: \"2019-06-24T14:32:00+02:00\"\n    SignatureVerificationResponse:\n      description: Contains the signature verification result.\n      type: object\n      required:\n        - validity\n      properties:\n        validity:\n          type: boolean\n          description: Indicates the validity of the signature.\n        vpType:\n          description: Type of Verifiable credential.\n          example: NutsDelegation\n          type: string\n        issuerAttributes:\n          description: Key vale pairs containing the attributes of the issuer.\n          type: object\n          example:\n            uziNr: 9000382\n            firstName: Henk\n            lastName: de Vries\n        credentials:\n          description: Key value pairs containing claims and their values.\n          type: object\n          example:\n            organization: Zorgcentrum de Oosterlanden\n            validFrom: 2020-12-16T10:57:00\n            validTo: 2020-12-16T12:57:00\n    #\n    # Everything related to Contracts\n    #\n    ContractType:\n      type: string\n      description: Type of which contract to sign.\n      example: \"BehandelaarLogin\"\n    ContractLanguage:\n      type: string\n      description: Language of the contract in all caps.\n      example: \"NL\"\n    ContractVersion:\n      type: string\n      description: Version of the contract.\n      example: \"v1\"\n    LegalEntity:\n      type: string\n      description: DID of the organization as registered in the Nuts registry.\n      example: \"did:nuts:128903fjgfslcnmgpe84\"\n    Contract:\n      required:\n        - type\n        - version\n        - language\n      properties:\n        type:\n          $ref: \"#/components/schemas/ContractType\"\n        language:\n          $ref: \"#/components/schemas/ContractLanguage\"\n        version:\n          $ref: \"#/components/schemas/ContractVersion\"\n        signer_attributes:\n          example:\n          type: array\n          items:\n            type: string\n        template:\n          type: string\n          example: ik verklaar dat ${acting_party} namens mij request mag maken\n        template_attributes:\n          type: array\n          items:\n            type: string\n          example: [ \"irma-demo.MijnOverheid.ageLower.over12\",\n                     \"irma-demo.MijnOverheid.fullName\"\n          ]\n    ContractSigningRequest:\n      required:\n        - type\n        - version\n        - language\n        - legalEntity\n      properties:\n        type:\n          $ref: \"#/components/schemas/ContractType\"\n        language:\n          $ref: \"#/components/schemas/ContractLanguage\"\n        version:\n          $ref: \"#/components/schemas/ContractVersion\"\n        legalEntity:\n          $ref: \"#/components/schemas/LegalEntity\"\n        valid_from:\n          type: string\n          description: \"ValidFrom describes the time from which this contract should be considered valid\"\n          example: \"2019-06-24T14:32:00+02:00\"\n        valid_to:\n          type: string\n          description: \"ValidTo describes the time until this contract should be considered valid\"\n          example: \"2019-12-24T14:32:00+02:00\"\n    ContractResponse:\n      required:\n        - message\n        - type\n        - version\n        - language\n      properties:\n        message:\n          type: string\n          description: The contract message.\n          example: I hereby declare that Pro Gen - Italia should be make requests in my name\n        type:\n          $ref: \"#/components/schemas/ContractType\"\n        language:\n          $ref: \"#/components/schemas/ContractLanguage\"\n        version:\n          $ref: \"#/components/schemas/ContractVersion\"\n    DrawUpContractRequest:\n      required:\n        - type\n        - version\n        - language\n        - legalEntity\n      properties:\n        type:\n          $ref: \"#/components/schemas/ContractType\"\n        language:\n          $ref: \"#/components/schemas/ContractLanguage\"\n        version:\n          $ref: \"#/components/schemas/ContractVersion\"\n        legalEntity:\n          $ref: \"#/components/schemas/LegalEntity\"\n        validFrom:\n          type: string\n          description: validFrom describes the time from which this contract should be considered valid. Current time is used when omitted.\n          example: \"2019-06-24T14:32:00+02:00\"\n        validDuration:\n          type: string\n          description: \"The duration this contract is valid, starting from validFrom or current time if validFrom is omitted. Uses this node default when omitted. Valid time units are: 's', 'm', 'h'\"\n          example: \"2h\"\n    #\n    # Everything related to JWT Grants\n    #\n    CreateJwtGrantRequest:\n      description: Request for a JWT Grant. The grant can be used during a Access Token Request in the assertion field\n      required:\n        - authorizer\n        - requester\n        - service\n        - credentials\n      properties:\n        authorizer:\n          type: string\n        requester:\n          type: string\n        identity:\n          $ref: \"#/components/schemas/VerifiablePresentation\"\n        service:\n          type: string\n          description: The service for which this access-token can be used. The right oauth endpoint is selected based on the service.\n          example: nuts-patient-transfer\n        credentials:\n          type: array\n          items:\n            $ref: '#/components/schemas/VerifiableCredential'\n    JwtGrantResponse:\n      description: Response with a JWT Grant. It contains a JWT, signed with the private key of the requestor software vendor.\n      required:\n        - bearer_token\n        - authorization_server_endpoint\n      properties:\n        bearer_token:\n          type: string\n        authorization_server_endpoint:\n          description: The URL that corresponds to the oauth endpoint of the selected service.\n          type: string\n\n    #\n    # Everything related to Access Tokens\n    #\n    RequestAccessTokenRequest:\n      description: Request for a JWT Grant and use it as authorization grant to get the access token from the authorizer\n      required:\n        - authorizer\n        - requester\n        - service\n        - credentials\n      properties:\n        authorizer:\n          type: string\n        requester:\n          type: string\n        identity:\n          $ref: '#/components/schemas/VerifiablePresentation'\n        service:\n          type: string\n          description: The service for which this access-token can be used. The right oauth endpoint is selected based on the service.\n          example: nuts-patient-transfer\n        credentials:\n          type: array\n          items:\n            $ref: '#/components/schemas/VerifiableCredential'\n    CreateAccessTokenRequest:\n      description: Request as described in RFC7523 section 2.1\n      required:\n        - grant_type\n        - assertion\n      properties:\n        grant_type:\n          type: string\n          description: always must contain the value \"urn:ietf:params:oauth:grant-type:jwt-bearer\"\n          example: urn:ietf:params:oauth:grant-type:jwt-bearer\n        assertion:\n          type: string\n          description: Base64 encoded JWT following rfc7523 and the Nuts documentation\n          example: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ1cm46b2lkOjIuMTYuODQwLjEuMTEzODgzLjIuNC42LjE6NDgwMDAwMDAiLCJzdWIiOiJ1cm46b2lkOjIuMTYuODQwLjEuMTEzODgzLjIuNC42LjE6MTI0ODEyNDgiLCJzaWQiOiJ1cm46b2lkOjIuMTYuODQwLjEuMTEzODgzLjIuNC42LjM6OTk5OTk5MCIsImF1ZCI6Imh0dHBzOi8vdGFyZ2V0X3Rva2VuX2VuZHBvaW50IiwidXNpIjoiYmFzZTY0IGVuY29kZWQgc2lnbmF0dXJlIiwiZXhwIjoxNTc4MTEwNDgxLCJpYXQiOjE1Nzg5MTA0ODEsImp0aSI6IjEyMy00NTYtNzg5In0.76XtU81IyR3Ak_2fgrYsuLcvxndf0eedT1mFPa-rPXk\"\n    AccessTokenResponse:\n      description: Successful response as described in rfc6749 section 5.1\n      required:\n        - access_token\n        - token_type\n        - expires_in\n      properties:\n        access_token:\n          description: |\n            The access token issued by the authorization server.\n            Could be a signed JWT or a random number. It should not have a meaning to the client.\n          type: string\n          example:\n            \"12345\"\n        token_type:\n          description: The type of the token issued\n          type: string\n          example: \"nuts_session_token\"\n        expires_in:\n          type: integer\n          description: The lifetime in seconds of the access token.\n          example: 900\n    AccessTokenRequestFailedResponse:\n      description: Error response when access token request fails as described in rfc6749 sectionn 5.2\n      required:\n        - error\n        - error_description\n      properties:\n        error:\n          type: string\n          enum: [ invalid_request, invalid_grant, unsupported_grant_type ]\n        error_description:\n          description: \u003e\n            Human-readable ASCII text providing\n            additional information, used to assist the client developer in\n            understanding the error that occurred.\n          type: string\n    TokenIntrospectionRequest:\n      description: Token introspection request as described in RFC7662 section 2.1\n      required:\n        - token\n      properties:\n        token:\n          type: string\n          example:\n            eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJhaWQiOiJ1cm46b2lkOjIuMTYuODQwLjEuMTEzODgzLjIuNC42LjE6MDAwMDAwMDAiLCJleHAiOjE1ODE0MTI2NjcsImlhdCI6MTU4MTQxMTc2NywiaXNzIjoidXJuOm9pZDoyLjE2Ljg0MC4xLjExMzg4My4yLjQuNi4xOjAwMDAwMDAxIiwic2lkIjoidXJuOm9pZDoyLjE2Ljg0MC4xLjExMzg4My4yLjQuNi4zOjk5OTk5OTk5MCIsInN1YiI6IiJ9.OhniTJcPS45nhJVqXfxsngG5eYS_0BvqFg-96zaWFO90I_5_N9Eg_k7NmIF5eNZ9Xutl1aqSxlSp80EX07Gmk8uzZO9PEReo0YZxnNQV-Zeq1njCMmfdwusmiczFlwcBi5Bl1xYGmLrxP7NcAoljmDgMgmLH0xaKfP4VVim6snPkPHqBdSzAgSrrc-cgVDLl-9V2obPB1HiVsFMYfbHEIb4MPsnPRnSGavYHTxt34mHbRsS8BvoBy3v6VNYaewLr6yz-_Zstrnr4I_wxtYbSiPJUeVQHcD-a9Ck53BdjspnhVHZ4IFVvuNrpflVaB1A7P3A2xZ7G_a8gF_SHMynYSA\n    TokenIntrospectionResponse:\n      description: Token introspection response as described in RFC7662 section 2.2\n      required:\n        - active\n      properties:\n        active:\n          type: boolean\n          description: |\n            True if the token is active, false if the token is expired, malformed etc.\n        service:\n          type: string\n        iss:\n          type: string\n          description: |\n            The subject (not a Nuts subject) contains the DID of the authorizer.\n          example: \"did:nuts:128903fjgfslcnmgpe84\"\n        sub:\n          type: string\n          description: |\n            The subject is always the acting party, thus the care organization requesting access to data.\n          example: \"did:nuts:128903fjgfslcnmgpe84\"\n        aud:\n          type: string\n          description: |\n            As per rfc7523 https://tools.ietf.org/html/rfc7523\u003e, the aud must be the\n            token endpoint. This can be taken from the Nuts registry.\n          example: \"https://target_token_endpoint\"\n        vcs:\n          type: array\n          items:\n            type: string\n            description: credential ID as string\n        resolvedVCs:\n          type: array\n          items:\n            $ref: '#/components/schemas/VerifiableCredential'\n          description: credentials resolved from `vcs` (VC IDs). It contains only those VCs that could be resolved.\n        osi:\n          type: string\n          description: encoded ops signature. (TBD)\n        exp:\n          type: integer\n        iat:\n          type: integer\n        family_name:\n          type: string\n          description: Surname(s) or last name(s) of the End-User.\n          example: Bruijn\n        prefix:\n          type: string\n          description: Surname prefix\n          example: de\n        initials:\n          type: string\n          description: Initials of the End-User.\n          example: I.\n        email:\n          type: string\n          description: End-User's preferred e-mail address. Should be a personal email and can be used to uniquely identify a user. Just like the email used for an account.\n          example: w.debruijn@example.org\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /internal/auth/v1/contract/drawup: put: operation \"drawUpContract\": responses: default: resolve \"../common/error_response.yaml\" reference: invalid response reference"
}