{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/bkuczenski/lca-tools"
		},
		"file": {
			"name": "antelope_v2_oapi.yaml",
			"size": 0,
			"path": "antelope_v2_oapi.yaml",
			"byteSize": 21469,
			"content": "\u2028\u2028openapi: 3.0.0\ninfo:\n  version: \"1.0.0\"\n  title: 'Antelope Type 2 - Open-ended access to LCA resources'\n  description: 'LCA Data Archival and Computation.'\n  contact: \n    name: \"Antelope API Support\"\n    url: \"http://vault.lc/support\"\n    email: \"support@vault.lc\"\npaths:\n  ###################\n  # Index Interface #\n  ###################\n  /{entity_types}:\n    summary: retrieve process entities known to the server, with optional filter by query param\n    parameters:\n      - $ref: '#/components/parameters/entity_types'\n      - $ref: '#/components/parameters/freeForm'\n    get:\n      responses:\n        '200':\n          description: Successful query\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EntityArray'\n  /count/{entity_types}:\n    summary: Count the number of entities of a given type\n    parameters:\n      - $ref: '#/components/parameters/entity_types'\n    get:\n      responses:\n        '200':\n          description: Successful query\n          content:\n            application/json:\n              schema:\n                type: integer\n  /synonyms/{term}:\n    summary: Return a list of synonyms for the given term\n    parameters:\n      - name: term\n        in: path\n        description: The term to be looked up- could be a flowable, context, quantity, or lcia method (processes don't generally have synonyms)\n        required: true\n        schema:\n          type: string\n    get:\n      responses:\n        '200':\n          description: Successful query\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n  /{entity_types}/{entity}:\n    summary: Retrieve metadata for a specific entity\n    parameters:\n      - $ref: '#/components/parameters/entity_types'\n      - $ref: '#/components/parameters/entity'\n    get:\n      responses:\n        '200':\n          description: successful query\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Entity'\n  /terminate/{flowable_id}:\n    summary: Return a list of processes that list the reported flow as a reference exchange (if optional direction query param is provided, match its complement)\n    parameters:\n      - $ref: '#/components/parameters/flowable_id'\n      - $ref: '#/components/parameters/direction_query'\n    get:\n      responses:\n        '200':\n          description: Successful termination query\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EntityArray'  # array of processes\n  /originate/{flowable_id}:\n    summary: Return a list of processes that list the reported flow as a reference exchange (if optional direction query param is provided, match it)\n    parameters:\n      - $ref: '#/components/parameters/flowable_id'\n      - $ref: '#/components/parameters/direction_query'\n    get:\n      responses:\n        '200':\n          description: Successful termination query\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EntityArray'  # array of processes\n  #######################\n  # Inventory Interface #\n  #######################\n  /exchanges/{process_id}:\n    summary: return a list of exchanges belonging to the identified process\n    parameters:\n      - $ref: '#/components/parameters/process_id'\n      - $ref: '#/components/parameters/direction_query'\n      - $ref: '#/components/parameters/termination_query'\n    get:\n      responses:\n        '200':\n          description: Successful exchanges query\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExchangeArray'\n  /exchanges/{process_id}/{direction}/{flow_id}:\n    summary: return a list of exchanges belonging to the identified process\n    parameters:\n      - $ref: '#/components/parameters/process_id'\n      - $ref: '#/components/parameters/direction_path'\n      - $ref: '#/components/parameters/flowable_id'\n      - $ref: '#/components/parameters/reference_flow'\n    get:\n      responses:\n        '200':\n          description: Successful exchanges query.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExchangeArray'\n  /exchanges/{process_id}/{direction}/{flow_id}/{termination}:\n    summary: return a single numeric value corresponding to the exchange ratio of the specified flowable, direction, and termination with respect to the reference.\n    parameters:\n      - $ref: '#/components/parameters/process_id'\n      - $ref: '#/components/parameters/direction_path'\n      - $ref: '#/components/parameters/flowable_id'\n      - $ref: '#/components/parameters/termination'\n      - $ref: '#/components/parameters/reference_flow'\n    get:\n      responses:\n        '200':\n          description: Successfully computed exchange relation.\n          content:\n            application/json:\n              schema:\n                type: number\n  /traverse/{fragment_id}:\n    summary: return a list of fragment flows that result from traversal of the named fragment with optionally specified scenario strings\n    parameters:\n      - $ref: '#/components/parameters/fragment_id'\n      - $ref: '#/components/parameters/scenarios_query'\n    get:\n      responses:\n        '200':\n          description: Successful traversal query\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FragmentFlowArray'\n  /inventory/{entity}:\n    summary: The unit process inventory of the named object\n    description: Return a set of quantified exchanges across the foreground system boundary of the named object.  If the object is a fragment, then the inventory is computed from traversal of the fragment, and scenarios may be specified as query params. If the object is a process, then a reference flow specified as query param may be required. \n    parameters:\n      - $ref: '#/components/parameters/entity'\n      - $ref: '#/components/parameters/reference_flow'\n      - $ref: '#/components/parameters/scenarios_query'\n    get:\n      responses:\n        '200':\n          description: Successful inventory query\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExchangeArray'\n  ########################\n  # Background Interface #\n  ########################\n                \n  ######################\n  # Quantity Interface #\n  ######################\n  /profile/{flowable_id}/{termination}:\n    summary: report properties of the named flowable with the given termination\n    parameters:\n      - $ref: '#/components/parameters/flowable_id'\n      - $ref: '#/components/parameters/termination'\n      - $ref: '#/components/parameters/locale_query'\n    get:\n      responses:\n        '200':\n          description: Successful profile query\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/FlowPropertyMagnitude'\n  /lcia/{lcia_id}/{process_id}:\n    summary: return LCIA result for any direct environmental exchanges belonging to the named process\n    parameters:\n      - $ref: '#/components/parameters/lcia_id'\n      - $ref: '#/components/parameters/process_id'\n      - $ref: '#/components/parameters/reference_flow'\n    get:\n      responses:\n        '200':\n          description: Successful foreground LCIA\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LciaResult'\n  /lcia/{lcia_id}/factors:\n    summary: return a list of LCIA characterization factors for the given method.\n    parameters:\n      - $ref: '#/components/parameters/lcia_id'\n      - $ref: '#/components/parameters/locale_query'\n    get:\n      responses:\n        '200':\n          description: Successful LCIA query\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Characterization'\n  /quantity/{ref_qty}/{flowable_id}:\n    summary: Lookup known terminations for a given flowable\n    description: progressively build a quantity relation query. Step 1, identify a flowable; step 2, find valid terminations for that flowable\n    parameters:\n      - $ref: '#/components/parameters/ref_qty'\n      - $ref: '#/components/parameters/flowable_id'\n      - $ref: '#/components/parameters/locale_query'\n    get:\n      responses:\n        '200':\n          description: Successful termination lookup\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n  /quantity/{ref_qty}/{flowable_id}/{termination}:\n    summary: Lookup known query quantities for a given flowable and termination\n    description: progressively build a quantity relation query. Step 1, identify a flowable; step 2, find valid terminations for that flowable; step 3, find known query quantities for that flowable and termination\n    parameters:\n      - $ref: '#/components/parameters/ref_qty'\n      - $ref: '#/components/parameters/flowable_id'\n      - $ref: '#/components/parameters/termination'\n      - $ref: '#/components/parameters/locale_query'\n    get:\n      responses:\n        '200':\n          description: Successful query quantity lookup -- list of query quantities\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EntityArray'\n  /quantity/{ref_qty}/{flowable_id}/{termination}/{query_qty}:\n    summary: Compute the quantity relation\n    description: progressively build a quantity relation query. Step 1, identify a flowable; step 2, find valid terminations for that flowable; step 3, find known query quantities for that flowable and termination; step 4, pick one and find its characterization\n    parameters:\n      - $ref: '#/components/parameters/ref_qty'\n      - $ref: '#/components/parameters/flowable_id'\n      - $ref: '#/components/parameters/termination'\n      - $ref: '#/components/parameters/locale_query'\n      - $ref: '#/components/parameters/query_qty'\n    get:\n      responses:\n        '200':\n          description: Successful quantity relation\n          content:\n            application/json:\n              schema:\n                type: number\n\ncomponents:\n  responses:\n    EntityNotFound:\n      description: One entity specified in the query could not be located\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              item:\n                type: string\n                description: The query term that was not found\n              message:\n                type: string\n            required:\n              - item\n              - message\n    ReferenceFlowRequired:\n      description: If a process has multiple reference flows, one must be specified in order to resolve many queries\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              message:\n                type: string\n            required:\n              - message\n  schemas:\n    # enums\n    entity_type:\n      type: string\n      enum: ['process', 'flow', 'flowable', 'quantity', 'lcia_method', 'context']\n      example: 'flow'\n    entity_types:\n      type: string\n      enum: ['processes', 'flows', 'flowables', 'quantities', 'lcia_methods', 'contexts']\n      example: 'flows'\n    directions:\n      type: string\n      enum: ['in', 'input', 'out', 'output']\n      example: 'input'\n    # queries that return entities\n    Entity:\n      type: object\n      properties:\n        entityType:\n          $ref: '#/components/schemas/entity_type'\n        externalId:\n          type: string\n          example: 'Acetic acid, at plant'\n        origin:\n          type: string\n          example: 'uslci.ecospold'\n        referenceEntity:\n          oneOf:\n            - type: string\n            - $ref: '#/components/schemas/Entity'\n            - $ref: '#/components/schemas/ReferenceExchanges'\n    EntityArray:\n      type: array\n      items:\n        $ref: '#/components/schemas/Entity'\n    ReferenceExchange:\n      type: object\n      properties:\n        flowId:\n          type: string\n        direction:\n          $ref: '#/components/schemas/directions'\n        value:\n          type: number\n    ReferenceExchanges:\n      type: array\n      items:\n        $ref: '#/components/schemas/ReferenceExchange'\n    FlowPropertyMagnitude:\n      type: object\n      properties:\n        quantityId:\n          type: string\n        magnitude:\n          type: number\n        isReference:\n          type: boolean\n          default: false\n        locale:\n          type: string\n    # queries that return exchanges or exchange values\n    Exchange:\n      type: object\n      properties:\n        processId:\n          type: string\n        flowId:\n          type: string\n        direction:\n          $ref: '#/components/schemas/directions'\n        termination:\n          type: string\n      required: ['processId', 'flowId', 'direction']\n    ExchangeValue:\n      description: 'A particular flowable, direction, and termination that is accompanied by a single exchange value with respect to a unit operation of the process.  If the reference exchange is specified at query time, the exchange value will correspond to a unit of the specified reference; otherwise the exchange value will correspond to the collected reference exchanges in their natively specified quantities.'\n      allOf:\n        - $ref: '#/components/schemas/Exchange'\n        - type: object\n          properties:\n            value:\n              type: number\n    AllocatedExchange:\n      description: 'A particular flowable, direction, and termination that has also been allocated to all reference exchanges.'\n      allOf:\n        - $ref: '#/components/schemas/Exchange'\n        - type: object\n          properties:\n            allocatedArray:\n              description: A mapping of flowable ID for reference exchange to allocated exchange value of the query exchange.  The values in the mapping, when scaled by the natively specified quantities for the respective reference exchanges, should equal the unallocated exchange value.\n              type: object\n              additionalProperties:\n                type: number\n    ExchangeArray:\n      type: array\n      items:\n        oneOf:\n          - $ref: '#/components/schemas/Exchange'\n          - $ref: '#/components/schemas/AllocatedExchange'\n          - $ref: '#/components/schemas/ExchangeValue'\n    # traversal results\n    FlowTermination:\n      type: object\n      properties:\n        origin:\n          type: string\n        terminationId:\n          type: string\n        termFlow:\n          oneOf:\n            - type: object\n              properties:\n                origin:\n                  type: string\n                externalId:\n                  type: string\n            - type: string\n        inboundExchangeValue:\n          type: number\n          default: 1.0\n        scenarios:\n          type: array\n          items:\n            type: string\n          description: an array of scenarios that apply to the termination\n    FragmentFlow:\n      type: object\n      properties:\n        fragmentFlowID:\n          type: string\n        nodeWeight:\n          type: number\n        flowPropertyMagnitudes:\n          type: array\n          items:\n            $ref: '#/components/schemas/FlowPropertyMagnitude'\n        termination:\n          $ref: '#/components/schemas/FlowTermination'\n        scenario:\n          type: string\n          description: A single scenario that determined the exchange value of the fragment\n    FragmentFlowArray:\n      type: array\n      items:\n        $ref: '#/components/schemas/FragmentFlow'\n    # queries that return LCIA Results:\n    Characterization:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/FlowPropertyMagnitude'\n        - type: object\n          properties:\n            flowableId:\n              type: string\n            context:\n              type: string\n    DetailedLciaResult:\n      type: object\n      properties:\n        flowId:\n          type: string\n        direction:\n          $ref: '#/components/schemas/directions'\n        quantity:\n          type: number\n        factor:\n          type: number\n        result:\n          type: number\n    AggregateLciaScore:\n      type: object\n      properties:\n        processId:\n          type: string\n        stage:\n          type: string\n        cumulativeResult:\n          type: number\n        lciaDetail:\n          type: array\n          items: \n            $ref: '#/components/schemas/DetailedLciaResult'\n    LciaResult:\n      type: object\n      properties:\n        lciaMethodId: \n          type: string\n        scenarioId:\n          type: array\n          items: \n            type: string\n        total:\n          type: number\n        lciaScore:\n          type: array\n          items: \n            $ref: '#/components/schemas/AggregateLciaScore'\n          \n  parameters:\n    # query parameters\n    freeForm:\n      name: 'freeForm'\n      in: query\n      schema:\n        type: object\n        additionalProperties:\n          type: string\n      description: Filter responses by free-form query parameter. Key is any attribute; Value is interpreted as a case-insensitive regex. Provide a parameter key with no value to return a list of all entities with that key. Entity lists greater than a [server-configurable] length will return abbreviated entity objects with just an entity ID and the requested attribute.\n    direction_query:\n      name: direction\n      in: query\n      description: Filters result set to only include exchanges that match the specified direction, relative to the specified process\n      schema:\n        $ref: '#/components/schemas/directions'\n      required: false\n    termination_query:\n      name: term\n      in: query\n      description: Filters result set to only include exchanges that match the specified termination.  It is still an open question whether this will be able to accommodate nested contexts (i.e. to air includes to urban air)\n      schema:\n        type: string\n      required: false\n    reference_flow:\n      name: ref\n      in: query\n      schema:\n        type: string\n      description: Optional parameter to specify, for multi-output processes, which allocated exchange value, LCI, or LCIA result to report for a given query. The parameter value should be a flowable ID that matches one entry in the process's reference set.  If omitted, multi-output processes will report unallocated exchange values, and may be unable to report LCI or LCIA results.\n    scenarios_query:\n      name: scenario\n      in: query\n      schema: \n        type: array\n        items:\n          type: string\n      explode: true\n      description: Optional scenario specifier for fragment traversal and fragment LCIA queries.  Can be specified multiple times to modify the traversal in combinatorial ways.\n    locale_query:\n      name: locale\n      in: query\n      schema: \n        type: string\n      description: Optional locale parameter for profile / factor / quantity relation lookup\n    # path parameters\n    entity_types:\n      name: entity_types\n      in: path\n      description: Core param for index queries\n      schema:\n        $ref: '#/components/schemas/entity_types'\n      required: true\n    direction_path:\n      name: direction\n      in: path\n      description: Constructs an exchange specification in a path\n      schema:\n        $ref: '#/components/schemas/directions'\n      required: true\n    entity:\n      name: 'entity_id'\n      in: path\n      description: An entity ID, or synonym in the case of flowables or contexts\n      schema:\n        type: string\n      required: true\n    process_id:\n      name: 'process_id'\n      in: path\n      schema:\n        type: string\n        example: 'Acetic acid, at plant'\n      required: true\n    fragment_id:\n      name: 'fragment_id'\n      in: path\n      schema:\n        type: string\n      required: true\n    flowable_id:\n      name: 'flowable_id'\n      in: path\n      description: The flowable ID must unambiguously define a particular flowable substance or concept, distinguishable by synonym.  \n      schema:\n        type: string\n        example: '000124-38-9'\n      required: true\n    termination:\n      name: 'termination'\n      in: path\n      description: A termination specifier.  Either a process_id or a synonym to a context ID\n      schema:\n        type: string\n        example: 'to urban air'\n      required: true\n    lcia_id:\n      name: lcia_id\n      in: path\n      description: A signifier for an LCIA method known to the server.  This cannot be a fully specified semantic reference.\n      schema:\n        type: string\n      required: true\n    ref_qty:\n      name: ref_qty\n      in: path\n      required: true\n      schema:\n        type: string\n      description: Reference quantity for the flowable (convert FROM quantity)\n    query_qty:\n      name: ref_qty\n      in: path\n      required: true\n      schema:\n        type: string\n      description: Query quantity for the quantity relation (convert TO quantity)\n\n# Added by API Auto Mocking Plugin\nservers:\n  - description: SwaggerHub API Auto Mocking\n    url: https://virtserver.swaggerhub.com/Vault8/Antelope_v2/1\n    ",
			"canonicalURL": "/github.com/bkuczenski/lca-tools@6f0e460a8ce847b74446becec908e6c1db681816/-/blob/antelope_v2_oapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/bkuczenski/lca-tools/blob/6f0e460a8ce847b74446becec908e6c1db681816/antelope_v2_oapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/exchanges/{process_id}/{direction}/{flow_id}\": get: at 1:9882: parse path \"/exchanges/{process_id}/{direction}/{flow_id}\": path parameter not specified: \"flow_id\""
}