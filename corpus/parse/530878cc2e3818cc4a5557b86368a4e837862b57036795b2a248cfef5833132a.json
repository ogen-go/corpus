{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/zuriinternship/zurichat"
		},
		"file": {
			"name": "zuricore.yaml",
			"size": 0,
			"path": "api/zuricore.yaml",
			"byteSize": 24176,
			"content": "openapi: 3.0.0\ninfo:\n  version: 1.0.0\n  title: Zuri Chat Core API\n  description: Zuri Chat is an open source slack clone. However, it offers a lot more functionality via a plugin system where each room can be provided by a different plugin provider.\n  contact:\n    email: developer@zuri.chat\nservers:\n  - description: Zuri Chat Core API\n    url: 'https://api.zuri.chat/v1'\ntags:\n- name: auth\n  description: Controls user registration, login and password recovery\npaths:\n  /auth/register:\n    post:\n      tags:\n      - auth\n      description: Gets user details and creates a record for the user in the database\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n        required: true\n      responses:\n        \"201\":\n          description: User successfully registered\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegistrationResponse'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /auth/login:\n    post:\n      tags:\n      - auth\n      description: Checks if user is registered and is using the right credentials, and returns user data and token on success\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/login_data'\n        required: true\n      responses:\n        \"200\":\n          description: User logged in successfully\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LoginResponse'\n        default:\n          description: Login attempt unsuccessful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n\n  /users/{user_id}:\n    put:\n      summary: Updates the details of a user\n      security:\n        - bearerAuth: [] \n      parameters:\n        - $ref: '#/components/parameters/user_id'\n\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n\n      tags:\n        - Users\n\n      responses:\n        '200':\n          description: User was successfully updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n\n        '404':\n          description: No user with the specified user_id was found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n        '500':\n          description: Someting went wrong\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n    get:\n      summary: Retrieves the information about a user\n      security:\n        - bearerAuth: [] \n      parameters:\n        - $ref: '#/components/parameters/user_id'\n\n      responses:\n        '200':\n          description: Returns the full info about a user\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n\n        '404':\n          description: No user with the specified user_id was found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n        '500':\n          description: Something went wrong\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n      tags:\n        - Users\n\n    delete:\n      summary: Deactivates a user's account\n      security:\n        - bearerAuth: [] \n      parameters:\n        - $ref: '#/components/parameters/user_id'\n\n      tags:\n        - Users\n\n      responses:\n        '204':\n          description: User was successfully deactivated\n\n        '404':\n          description: No user with the specified user_id was found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n        '500':\n          description: Something went wrong\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /users/{user_id}/verify:\n    get:\n      summary: Sends an email verification link to a user\n      security:\n        - bearerAuth: [] \n      parameters:\n        - $ref: '#/components/parameters/user_id'\n\n      responses:\n        '204':\n          description: Email verification code successfully sent\n\n        '404':\n          description: User not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n        '403':\n          description: Forbidden, the requesting user's _id doesn't match the provided user_id\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n      tags:\n        - Users\n\n    patch:\n      summary: Verifies a user's email address and updates their verification status\n      description: Code should be the otp in the email verification link recieved by the user\n      security:\n        - bearerAuth: [] \n      parameters:\n        - $ref: '#/components/parameters/user_id'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/VerifyEmail'\n\n      responses:\n        '200':\n          description: The user's email has been verified successfully\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n\n        '400':\n          description: Invalid email verification code\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n      tags:\n        - Users\n\n\n  /organizations:\n    get:\n      tags:\n        - Organisations\n      summary: Displays a list of organizations\n      security:\n        - bearerAuth: [] \n      responses:\n        '200':\n          description: Successfuly returned list of organizations, including an empty array if there are no organizations\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Organization'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      tags:\n        - Organisations\n      summary: Create an organization\n      security:\n        - bearerAuth: [] \n      requestBody:\n        description: The structure for the entire request\n        content:\n          'application/json':\n            schema:\n              properties:\n                user_id:\n                  type: integer\n                  description: This is the id of the owner(creator) of the organization\n                  example: 2\n                name:\n                  type: string\n                  description: Name of the organization\n                  example: 'hng@email.com'\n                email:\n                  type: string\n                  description: Email of the organization\n                  example: 'hng@email.com'\n                organization_logo_url:\n                  type: string\n                  description: Url of organization logo\n                  example: 'http://api.zuri.chat/media/fddpofdg.svg'\n                organization_settings:\n                  type: string\n                  description: Json object of organization settings\n                  example: {\"global_settings\": {\"allow_user_add_plugins\": true, \"allow_only_admin_invite\": true}, \"plugin_settings\": {\"chess_plugin\": {\"allow_in_every_channel\": false}}}\n\n      responses:\n        '201':\n          description: Organization successfully created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Organization'\n\n        '401':\n          description: Unauthorized\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/Error'\n        '400':\n          description: Bad Request, e.g wrong user id\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: Internal server error\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /organizations/{organization_id}:\n    get: \n      tags:\n        - Organisations\n      summary: Get an organization\n      security:\n        - bearerAuth: [] \n      parameters:\n        - $ref: '#/components/parameters/organization_id'\n      responses:\n        '200':\n          description: Organization successfully returned\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/Organization'\n        '401':\n          description: Unauthorized\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/Error'\n        '400':\n          description: Bad Request, e.g wrong user id\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: Internal server error\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/Error'\n    put: \n      tags:\n        - Organisations\n      summary: Update organization information\n      security:\n        - bearerAuth: [] \n      parameters:\n        - $ref: '#/components/parameters/organization_id'\n      requestBody:\n        description: The structure for the entire request\n        content:\n          'application/json':\n              schema:\n                $ref: '#/components/schemas/Organization'\n\n      responses:\n        '200':\n          description: Organization successfully returned\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/Organization'\n        '401':\n          description: Unauthorized\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/Error'\n        '400':\n          description: Bad Request, e.g wrong user id\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: Internal server error\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /organizations/{organization_id}/users:\n    get: \n      tags:\n        - Organisations\n      summary: Get a list of users in an organization\n      security:\n        - bearerAuth: [] \n      parameters:\n        - $ref: '#/components/parameters/organization_id'\n      responses:\n        '200':\n          description: Organization successfully returned\n          content:\n              'application/json':\n                schema:\n                  type: array\n                  $ref: '#/components/schemas/User'\n        '401':\n          description: Unauthorized\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Organization with organization_id not found\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: Internal server error\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/Error'\n    post: \n      tags:\n        - Organisations\n      summary: Add user to an organization\n      security:\n        - bearerAuth: [] \n      parameters:\n        - $ref: '#/components/parameters/organization_id'\n      requestBody:\n        description: The structure for the entire request\n        content:\n          'application/json':\n            schema:\n              properties:\n                user_id:\n                  type: integer\n                  description: This is the id of the user to be added to the organization\n                  example: 2\n      responses:\n        '201':\n          description: Organization successfully returned\n          content:\n              'application/json':\n                schema:\n                  $ref: '#/components/schemas/User'\n        '401':\n          description: Unauthorized\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/Error'\n        '400':\n          description: Bad Request\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: Internal server error\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /organizations/{organization_id}/users/{user_id}:\n    put:\n      tags:\n        - Organisations\n      summary: Update user\n      description: This endpoint will be used to update the user's organization information. e.g user roles and permissions\n      security:\n        - bearerAuth: [] \n      parameters:\n        - $ref: '#/components/parameters/organization_id'\n        - $ref: '#/components/parameters/user_id'\n      requestBody:\n        description: The structure for the entire request\n        required: true\n        content:\n          'application/json':\n            schema:\n              properties:\n                data:\n                  type: string\n                  description: Data to be updated\n                  example: 2\n      responses:\n        '200':\n          description: User successfully updated\n          content:\n              'application/json':\n                schema:\n                  $ref: '#/components/schemas/User'\n        '401':\n          description: Unauthorized\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/Error'\n        '400':\n          description: Bad Request\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: Internal server error\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete: \n      tags:\n        - Organisations\n      summary: Delete user\n      description: Remove a user from an organization\n      security:\n        - bearerAuth: [] \n      parameters:\n        - $ref: '#/components/parameters/organization_id'\n        - $ref: '#/components/parameters/user_id'\n      responses:\n        '200':\n          description: User successfully deleted\n          content:\n              'application/json':\n                schema:\n                  $ref: '#/components/schemas/User'\n        '401':\n          description: Unauthorized\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/Error'\n        '400':\n          description: Bad Request\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: Internal server error\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/Error'\n\n\n  /marketplace/apps:\n    get:\n      summary: Returns a paginated list of apps on the marketplace\n      operationId: listApps\n      tags:\n        - marketplace\n      parameters:\n        - name: search\n          in: query\n          description: use to filter by app names\n          required: false\n          schema:\n            type: string\n        - name: category\n          in: query\n          description: filter by category slug\n          required: false\n          schema:\n            type: string\n        - name: page-number\n          in: query\n          description: page to return\n          required: false\n          schema:\n            type: integer\n            format: int64\n            default: 1\n      responses:\n        '200':\n          description: List of Apps on marketplace\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - data\n                  - total\n                  - current_page\n                  - last_page\n                properties:\n                  data:      \n                    type: array\n                    items:\n                      $ref: '#/components/schemas/MarketplaceAppList'\n                  total:\n                    type: integer\n                    format: int64\n                  current_page:\n                    type: integer\n                    format: int64\n                  last_page:\n                    type: integer\n                    format: int64\n        '500':\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /marketplace/apps/{app_id}:\n    get:\n      summary: get single marketplace app details\n      operationId: singleApp\n      tags:\n        - marketplace\n      parameters:\n        - name: app_id\n          in: path\n          description: App Id\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: User was successfully updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MarketplaceApp'\n\n        '404':\n          description: App not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /data:\n    post:\n      tags:\n      - Data\n      description: Saves data to the database\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/data'\n        required: true\n      responses:\n        \"201\":\n          description: Data save successfully\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DataSavedResponse'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n    get:\n      tags:\n      - Data\n      description: Retrieves data from the database\n      parameters:\n        - in: path\n          name: dataID\n          description: provide the ID of the data to be retrieved. \n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Data retrieved successfully\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DataSavedResponse'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\ncomponents:\n\n  parameters:\n    user_id:\n      in: path\n      name: user_id\n      required: true\n      schema:\n        type: string\n\n    organization_id:\n      in: path\n      name: organization_id\n      required: true\n      schema:\n        type: integer\n\n  schemas:\n    User:\n      type: object\n      properties:\n         first_name:\n           type: string\n         last_name:\n           type: string\n         phone_number:\n           type: number\n         password:\n           type: string\n         email:\n           type: string\n         email_verified:\n           type: boolean\n\n    Organization:\n      type: object\n      properties:\n        user_id:\n          type: integer\n          example: 12\n        name:\n          type: string\n          example: 'HNG'\n        email:\n          type: string\n          example: 'hng@email.com'\n        organization_logo_url:\n          type: integer\n          example: 12\n        organization_settings:\n          type: string\n          example: {\"global_settings\": {\"allow_user_add_plugins\": true, \"allow_only_admin_invite\": true}, \"plugin_settings\": {\"chess_plugin\": {\"allow_in_every_channel\": false}}}\n\n    Error:\n      required:\n      - code\n      - message\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string\n        metadata:\n          type: object\n\n    VerifyEmail:\n      type: object\n      properties:\n        code:\n          type: string\n\n    login_data:\n      required:\n      - email\n      - password\n      type: object\n      properties:\n        email:\n          type: string\n          pattern: ^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$\n          example: email@example.com\n        password:\n          type: string\n          example: Tgf23@E!yF0$\n\n    LoginResponse:\n      type: object\n      properties:\n        success:\n          type: boolean\n          example: true\n        data:\n          type: object\n          $ref:  \"#/components/schemas/User\"\n        token:\n          type: string\n          example: 3djfb313fi71ibrf9278754b2cbjhwbjab8e78873bcbjsbcjemwnenvrwejvVSGJWVjavibkwrejbvjiwu5793489t3fibjsbac\n\n\n    RegistrationResponse:\n      type: object\n      properties:\n        success:\n          type: boolean\n          example: true\n\n    MarketplaceAppList:\n      type: object\n      required:\n        - id\n        - name\n        - slug\n        - short_description\n        - categories\n      properties:\n        id:\n          type: string\n          format: uuid\n        name:\n          type: string\n        slug:\n          type: string\n          pattern: '^[a-z0-9-]+$'\n        short_description:\n          type: string\n        categories:\n          type: array\n          items:\n              type: string\n              description: category slug\n\n    MarketplaceApp:\n      type: object\n      required:\n        - id\n        - name\n        - slug\n        - description\n        - categories\n        - features\n        - permissions\n        - security_compliace\n      properties:\n        id:\n          type: string\n          format: uuid\n        name:\n          type: string\n        slug:\n          type: string\n          pattern: '^[a-z0-9-]+$'\n        description:\n          type: string\n        categories:\n          type: array\n          items:\n              type: string\n              description: category slug\n        features:\n          type: array\n        permissions:\n          type: object\n          description: what the app will be able to do on zuri chat\n        security_compliace:\n          type: array\n          items:\n            type: object\n            description: 'would contain keys like: general, privacy and data governance, certifications and compliance, security, 0auth scopes'\n\n    data:\n        type: object\n\n\n    DataSavedResponse:\n      type: object\n      properties:\n        success:\n          type: boolean\n          example: true",
			"canonicalURL": "/github.com/zuriinternship/zurichat@21571b7a3fd3760fe3898136b7934ee0bcd83384/-/blob/api/zuricore.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/zuriinternship/zurichat/blob/21571b7a3fd3760fe3898136b7934ee0bcd83384/api/zuricore.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/organizations/{organization_id}/users/{user_id}\": at 1:12515: put: at 1:13275: security: unknown security schema \"bearerAuth\""
}