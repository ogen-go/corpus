{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Azure/osdu-infrastructure"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi.yaml",
			"byteSize": 178051,
			"content": "openapi: 3.0.0\ninfo:\n  title: Platform APIs\n  description: Platform APIs\n  version: 0.11.0\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0\ntags:\n  - name: Partition\n    description: \u003e-\n      The partition service provides internal APIs to dynamically pull the correct connection information at runtime to connect to a partition.\n\n      https://community.opengroup.org/osdu/platform/system/partition/-/blob/master/docs/tutorial/Partition.md\n  - name: Entitlement\n    description: \u003e-\n      The entitlement service provides the enablement of users and RBAC.\n\n      https://community.opengroup.org/osdu/platform/security-and-compliance/entitlements/-/blob/master/docs/tutorial/Entitlements-Service.md\n  - name: Legal\n    description: \u003e-\n      The legal service provides platform legal compliance.\n\n      https://community.opengroup.org/osdu/platform/security-and-compliance/legal/-/blob/master/docs/tutorial/ComplianceService.md\n  - name: Schema\n    description: \u003e-\n      The schema service provides platform schema management.\n\n      https://community.opengroup.org/osdu/platform/system/schema-service/-/blob/master/docs/SchemaService-OSDU.md\n  - name: Storage\n    description: \u003e-\n      The storage service provides platform record managment.\n\n      https://community.opengroup.org/osdu/platform/system/storage/-/blob/master/docs/tutorial/StorageService.md\n  - name: Search\n    description: \u003e-\n      The search service supports full text search on string fields, range queries on date, numeric or string fields, along with geo-spatial search.\n\n      https://community.opengroup.org/osdu/platform/system/search-service\n  - name: File\n    description: \u003e-\n      The file service provides internal and external APIs to request for file location data.\n\n      https://community.opengroup.org/osdu/platform/system/file/-/blob/master/docs/File-Service.md\n  - name: Workflow\n    description: \u003e-\n      The workflow service provides execution and status of workflows.\n\n      https://community.opengroup.org/osdu/platform/data-flow/ingestion/ingestion-workflow\n  - name: Register\n    description: \u003e-\n      The register service provides registration of actions.\n\n      https://community.opengroup.org/osdu/platform/system/register/-/blob/master/docs/tutorial/ActionService.md\n  - name: Notification\n    description: \u003e-\n      The notification service provides platform pub/sub capability.\n\n      https://community.opengroup.org/osdu/platform/system/notification/-/blob/master/docs/tutorial/DataNotification.md\npaths:\n  /api/partition/v1/partitions:\n    get:\n      tags:\n        - Partition\n      summary: List Partitions\n      operationId: listUsingGET\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n      security:\n        - Bearer: []\n  /api/partition/v1/partitions/{partitionId}:\n    get:\n      tags:\n        - Partition\n      summary: Get Single Partition\n      description: \u003e\n        By passing in a partition Id, you can retrieve the partition\n        information.\n      operationId: getUsingGET\n      parameters:\n        - name: partitionId\n          in: path\n          description: partitionId\n          required: true\n          example: opendes\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  $ref: '#/components/schemas/PartitionProperty'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n      security:\n        - Bearer: []\n    post:\n      tags:\n        - Partition\n      summary: Create Partition\n      description: \u003e\n        By passing in a partition Id and a partition info object you can create\n        a partition.\n      operationId: createUsingPOST\n      parameters:\n        - name: partitionId\n          in: path\n          description: partitionId\n          required: true\n          example: common\n          schema:\n            type: string\n      requestBody:\n        $ref: '#/components/requestBodies/PartitionDto'\n      responses:\n        '201':\n          description: Created\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n      security:\n        - Bearer: []\n    patch:\n      tags:\n        - Partition\n      summary: Update Partition\n      description: \u003e\n        By passing in a partition Id and a partition info object you can update\n        a partition.\n      operationId: updateUsingPATCH\n      parameters:\n        - name: partitionId\n          in: path\n          description: partitionId\n          required: true\n          example: common\n          schema:\n            type: string\n      requestBody:\n        $ref: '#/components/requestBodies/PartitionDto'\n      responses:\n        '204':\n          description: No Content\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n      security:\n        - Bearer: []\n    delete:\n      tags:\n        - Partition\n      summary: Delete Partition\n      description: |\n        By passing in a single partition Id, you can delete a partition.\n      operationId: deleteUsingDELETE\n      parameters:\n        - name: partitionId\n          in: path\n          description: partitionId\n          required: true\n          example: common\n          schema:\n            type: string\n      responses:\n        '204':\n          description: No Content\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n      security:\n        - Bearer: []\n  /api/entitlements/v2/groups:\n    get:\n      tags:\n        - Entitlement\n      summary: List Assigned Groups\n      operationId: listGroupsUsingGET\n      parameters:\n        - name: data-partition-id\n          in: header\n          description: tenant\n          required: true\n          example: opendes\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EntitlementGroupResponse'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n      security:\n        - Bearer: []\n    post:\n      tags:\n        - Entitlement\n      summary: Create a Group\n      operationId: createGroupUsingPOST\n      parameters:\n        - name: data-partition-id\n          in: header\n          description: Partition Id\n          required: true\n          example: opendes\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n        '201':\n          description: Created\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n      security:\n        - Bearer: []\n  /api/entitlements/v2/groups/{group_email}/members:\n    get:\n      tags:\n        - Entitlement\n      summary: List Group Members\n      operationId: listGroupMembersUsingGET\n      parameters:\n        - name: data-partition-id\n          in: header\n          description: Data Partition Id\n          required: true\n          example: opendes\n          schema:\n            type: string\n        - name: group_email\n          in: path\n          description: group_email\n          required: true\n          example: users@opendes.contoso.com\n          schema:\n            type: string\n        - name: role\n          in: query\n          description: role\n          required: false\n          schema:\n            type: string\n            enum:\n              - MEMBER\n              - OWNER\n        - name: includeType\n          in: query\n          description: includeType\n          required: false\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: OK\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n      security:\n        - Bearer: []\n    post:\n      tags:\n        - Entitlement\n      summary: Add Member to Group\n      operationId: addMemberUsingPOST\n      parameters:\n        - name: data-partition-id\n          in: header\n          description: Partition Name\n          required: true\n          example: opendes\n          schema:\n            type: string\n        - name: group_email\n          in: path\n          description: group_email\n          required: true\n          example: users@opendes.contoso.com\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/EntitlementMemberDto'\n        description: partitionInfo\n        required: true\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EntitlementMemberDto'\n        '201':\n          description: Created\n        '400':\n          description: Bad Request\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '409':\n          description: Conflict\n      security:\n        - Bearer: []\n  /api/entitlements/v2/groups/{group_email}/members/{member_email}:\n    delete:\n      tags:\n        - Entitlement\n      summary: Remove Member from Group\n      operationId: deleteMemberUsingDELETE_1\n      parameters:\n        - name: data-partition-id\n          in: header\n          description: Data Partition Id\n          required: true\n          example: opendes\n          schema:\n            type: string\n        - name: group_email\n          in: path\n          description: group_email\n          required: true\n          example: users@opendes.contoso.com\n          schema:\n            type: string\n        - name: member_email\n          in: path\n          description: member_email\n          required: true\n          example: email@domain.com\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: string\n        '204':\n          description: No Content\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n      security:\n        - Bearer: []\n  /api/entitlements/v2/groups/{group_email}:\n    delete:\n      tags:\n        - Entitlement\n      summary: Delete a Group\n      operationId: deleteGroupUsingDELETE\n      parameters:\n        - name: data-partition-id\n          in: header\n          description: tenant\n          required: true\n          example: common\n          schema:\n            type: string\n        - name: group_email\n          in: path\n          description: group_email\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n        '204':\n          description: No Content\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n      security:\n        - Bearer: []\n    patch:\n      tags:\n        - Entitlement\n      summary: Updates Items in Group\n      operationId: updateGroupUsingPATCH\n      parameters:\n        - name: data-partition-id\n          in: header\n          description: tenant\n          required: true\n          example: common\n          schema:\n            type: string\n        - name: group_email\n          in: path\n          description: group_email\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n        '204':\n          description: No Content\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n      security:\n        - Bearer: []\n  /api/entitlements/v2/members/{member_email}:\n    delete:\n      tags:\n        - Entitlement\n      summary: Delete a User\n      operationId: deleteMemberUsingDELETE\n      parameters:\n        - name: data-partition-id\n          in: header\n          description: Data Partition Id\n          required: true\n          example: opendes\n          schema:\n            type: string\n        - name: member_email\n          in: path\n          description: member_email\n          required: true\n          example: email@domain.com\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n        '204':\n          description: No Content\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n      security:\n        - Bearer: []\n  /api/entitlements/v2/members/{member_email}/groups:\n    get:\n      tags:\n        - Entitlement\n      summary: List Assigned Groups for User\n      operationId: listGroupsOnBehalfOfUsingGET\n      parameters:\n        - name: data-partition-id\n          in: header\n          description: tenant\n          required: true\n          example: opendes\n          schema:\n            type: string\n        - name: member_email\n          in: path\n          description: member_email\n          required: true\n          schema:\n            type: string\n        - name: type\n          in: query\n          description: type\n          required: false\n          schema:\n            type: string\n        - name: appid\n          in: query\n          description: appid\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n      security:\n        - Bearer: []\n  /api/legal/v1/legaltags:properties:\n    get:\n      tags:\n        - Legal\n      summary: Gets LegalTag property values.\n      description: This allows for the retrieval of allowed values for LegalTag properties.\n      operationId: getLegalTagProperties\n      parameters:\n        - name: data-partition-id\n          in: header\n          description: Partition Id\n          required: true\n          example: opendes\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Retrieved proeprties successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LegalTagPropertyValues'\n        '401':\n          description: You do not have permissions to access this API.\n      security:\n        - Bearer: []\n  /api/legal/v1/legaltags:validate:\n    post:\n      tags:\n        - Legal\n      summary: Retrieves the invalid LegalTag names with reasons for the given names.\n      description: \u003e-\n        This allows for the retrieval of the reason why your LegalTag is not\n        valid. A maximum of 25 can be retrieved at once.\n      operationId: validateLegalTags\n      parameters:\n        - name: OSDU-Account-Id\n          in: header\n          description: Users account e.g. OSDU\n          required: true\n          schema:\n            type: string\n        - name: OSDU-On-Behalf-Of\n          in: header\n          description: User's email or auth token\n          required: false\n          schema:\n            type: string\n      requestBody:\n        $ref: '#/components/requestBodies/LegalTagRequest'\n      responses:\n        '200':\n          description: Retrieved LegalTag names with reason successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LegalTagInvalidResponseList'\n        '400':\n          description: Invalid parameters were given on request.\n        '401':\n          description: You do not have permissions to access this API.\n        '404':\n          description: LegalTag names were not found.\n      security:\n        - Bearer: []\n  /api/legal/v1/legaltags:batchRetrieve:\n    post:\n      tags:\n        - Legal\n      summary: Retrieves the LegalTags for the given names.\n      description: \u003e-\n        This allows for the retrieval of your LegalTags using the 'name'\n        associated with it. A maximum of 25 can be retrieved at once.\n      operationId: getLegalTags\n      parameters:\n        - name: OSDU-Account-Id\n          in: header\n          description: Users account e.g. OSDU\n          required: true\n          schema:\n            type: string\n        - name: OSDU-On-Behalf-Of\n          in: header\n          description: User's email or auth token\n          required: false\n          schema:\n            type: string\n      requestBody:\n        $ref: '#/components/requestBodies/LegalTagRequest'\n      responses:\n        '200':\n          description: Retrieved LegalTags successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LegalTagDtos'\n        '400':\n          description: Invalid parameters were given on request.\n        '401':\n          description: You do not have permissions to access this API.\n        '404':\n          description: One or more requested LegalTags were not found.\n      security:\n        - Bearer: []\n  /api/legal/v1/legaltags:\n    get:\n      tags:\n        - Legal\n      summary: Gets all LegalTags.\n      description: This allows for the retrieval of all LegalTags.\n      operationId: listLegalTags\n      parameters:\n        - name: valid\n          in: query\n          description: \u003e-\n            If true returns only valid LegalTags, if false returns only invalid\n            LegalTags.  Default value is true.\n          required: false\n          schema:\n            type: boolean\n            default: true\n        - name: data-partition-id\n          in: header\n          description: Partition Id\n          required: true\n          example: opendes\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Retrieved LegalTags successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LegalTagDtos'\n        '400':\n          description: Invalid parameters were given on request.\n        '401':\n          description: You do not have permissions to access this API.\n      security:\n        - Bearer: []\n    post:\n      tags:\n        - Legal\n      summary: Creates the LegalTag for the given 'name'.\n      description: \u003e-\n        This allows for the creation of your LegalTag. There can only be 1\n        LegalTag per 'name'. A LegalTag must be created before you can start\n        ingesting data for that name.\n      operationId: createLegalTag\n      parameters:\n        - name: data-partition-id\n          in: header\n          description: Partition Id\n          required: true\n          example: opendes\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LegalTagDto'\n      responses:\n        '201':\n          description: Created LegalTag successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LegalTagDto'\n        '400':\n          description: Invalid parameters were given on request.\n        '401':\n          description: You do not have permissions to access this API.\n        '409':\n          description: A LegalTag with the given name already exists.\n      security:\n        - Bearer: []\n    put:\n      tags:\n        - Legal\n      summary: Updates the LegalTag for the given 'name'.\n      description: \u003e-\n        This allows to update certain properties of your LegalTag using the\n        'name' associated with it.\n      operationId: updateLegalTag\n      parameters:\n        - name: data-partition-id\n          in: header\n          description: Partition Id\n          required: true\n          example: opendes\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LegalTagUpdateDto'\n      responses:\n        '200':\n          description: Updated LegalTag successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LegalTagDto'\n        '400':\n          description: Invalid parameters were given on request.\n        '401':\n          description: You do not have permissions to access this API.\n        '404':\n          description: Requested LegalTag to update was not found.\n      security:\n        - Bearer: []\n  /api/legal/v1/legaltags/{name}:\n    get:\n      tags:\n        - Legal\n      summary: Gets a LegalTag for the given 'name'.\n      description: \u003e-\n        This allows for the retrieval of your LegalTag using the 'name'\n        associated with it.\n      operationId: getLegalTag\n      parameters:\n        - name: data-partition-id\n          in: header\n          description: Partition Id\n          required: true\n          example: opendes\n          schema:\n            type: string\n        - name: name\n          in: path\n          required: true\n          example: opendes-public-usa-swagger\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Retrieved LegalTag successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LegalTagDto'\n        '400':\n          description: Invalid parameters were given on request.\n        '401':\n          description: You do not have permissions to access this API.\n        '404':\n          description: Requested LegalTag was not found.\n      security:\n        - Bearer: []\n    delete:\n      tags:\n        - Legal\n      summary: Delete Legal Tag\n      description: \u003e\n        This allows for the deletion of your LegalTag using the 'name'\n        associated with it.\n      operationId: deleteLegalTag\n      parameters:\n        - name: data-partition-id\n          in: header\n          description: Partition Id\n          required: true\n          example: opendes\n          schema:\n            type: string\n        - name: name\n          in: path\n          required: true\n          example: opendes-public-usa-test-1\n          schema:\n            type: string\n      responses:\n        '204':\n          description: No Content\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n      security:\n        - Bearer: []\n  /api/schema-service/v1/schema:\n    post:\n      tags:\n        - Schema\n      summary: Adds a schema to the schema repository.\n      description: \u003e-\n        Adds a schema to the schema repository. The schemaIdentity must be\n        unique. The `authority`, `source` and `entityType` will be registered if\n        not present. If lower minor versions are registered the service\n        validates the new schema against breaking changes; if breaking changes\n        are discovered the request fails. **Note:** The schema must not\n        reference other schemas with status `DEVELOPMENT`. Scope to a schema\n        will be set by system based on partition id (`SHARED` for common tenant\n        and `INTERNAL` for private tenant). Required roles\n        'users.datalake.editors' or 'users.datalake.admins' groups to create\n        schema.\n      operationId: Create Schema\n      parameters:\n        - name: data-partition-id\n          in: header\n          description: \u003e-\n            Specifies the data partition to use. This should be either the\n            partition name or crm account ID associated with the partition.\n          required: true\n          example: opendes\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SchemaRequest'\n        required: true\n      responses:\n        '201':\n          description: Schema created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SchemaInfo'\n        '400':\n          description: \u003e-\n            Bad user input. Mandatory fields missing or unacceptable value\n            passed to API\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SchemaErrorResponseFormat'\n        '401':\n          description: Unknown or invalid user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SchemaErrorResponseFormat'\n        '403':\n          description: User not authorised to access the API\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SchemaErrorResponseFormat'\n      security:\n        - Bearer: []\n    put:\n      tags:\n        - Schema\n      summary: Creates/Updates a schema in development status\n      description: \u003e-\n        Creates a new schema or updates an already existing schema with status\n        `DEVELOPMENT` in the schema repository. If a user tries to create/update\n        a schema with status other then `DEVELOPMENT`, API will throw an\n        exception. Any schema instance with the same schemaIdentity is replaced\n        (in contrast to the immutability of `PUBLISHED` or `OBSOLETE` schemas).\n        A schema state can also be changed from `DEVELOPMENT` to `PUBLISHED` or\n        `OBSOLETE` while updating schema content or by providing the same schema\n        content. **Note:** The schema may refer to other schema definitions in\n        `DEVELOPMENT` state. If those schemas are updated themselves, it is the\n        developer's responsibility to PUT the dependent schemas again to update\n        the schemas. Scope for a schema can't be updated, its a system defined\n        value. Required roles  'users.datalake.editors' or\n        'users.datalake.admins' groups to update schema.\n      operationId: Update Schema\n      parameters:\n        - name: data-partition-id\n          in: header\n          description: \u003e-\n            Specifies the data partition to use. This should be either the\n            partition name or crm account ID associated with the partition.\n          required: true\n          example: opendes\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SchemaRequest'\n        description: SchemaRequest\n        required: true\n      responses:\n        '200':\n          description: Schema updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SchemaInfo'\n        '201':\n          description: Schema created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SchemaInfo'\n        '400':\n          description: \u003e-\n            Bad user input. Mandatory fields missing or unacceptable value\n            passed to API\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SchemaErrorResponseFormat'\n        '401':\n          description: Unknown or invalid user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SchemaErrorResponseFormat'\n        '403':\n          description: User not authorised to access the API\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SchemaErrorResponseFormat'\n      security:\n        - Bearer: []\n    get:\n      tags:\n        - Schema\n      summary: Searches schemaInfo repository\n      description: \u003e-\n        Searches for information of available schema (SchemInfo) in schema\n        repository. Supports options to filter out the search contents. Required\n        roles 'users.datalake.viewers' or 'users.datalake.editors' or\n        'users.datalake.admins' groups to get the schema.\n      operationId: searchSchemaInfoRepository\n      parameters:\n        - name: data-partition-id\n          in: header\n          description: \u003e-\n            Specifies the data partition to use. This should be either the\n            partition name or crm account ID associated with the partition.\n          required: true\n          example: opendes\n          schema:\n            type: string\n        - in: query\n          name: authority\n          description: pass an optional string to search for a specific authority\n          required: false\n          example: osdu\n          schema:\n            type: string\n            default: '*'\n        - in: query\n          name: source\n          description: pass an optional string to search for a specific source\n          required: false\n          example: wks\n          schema:\n            type: string\n            default: '*'\n        - in: query\n          name: entityType\n          description: pass an optional string to search for a specific entityType\n          required: false\n          example: wellbore\n          schema:\n            type: string\n            default: '*'\n        - in: query\n          name: schemaVersionMajor\n          description: pass an optional string to search for a specific schemaVersionMajor\n          required: false\n          example: 1\n          schema:\n            type: string\n            default: '*'\n        - in: query\n          name: schemaVersionMinor\n          description: pass an optional string to search for a specific schemaVersionMinor\n          required: false\n          example: 1\n          schema:\n            type: string\n            default: '*'\n        - in: query\n          name: status\n          description: The schema status specification\n          example: PUBLISHED\n          schema:\n            type: string\n            enum:\n              - PUBLISHED\n              - DEVELOPMENT\n              - OBSOLETE\n            default: PUBLISHED\n        - in: query\n          name: scope\n          description: The scope or schema visibility specification\n          example: INTERNAL\n          schema:\n            type: string\n            enum:\n              - SHARED\n              - INTERNAL\n            default: INTERNAL\n        - in: query\n          name: latestVersion\n          description: if True, only return the latest version\n          required: false\n          example: true\n          schema:\n            type: boolean\n            default: false\n        - in: query\n          name: limit\n          description: maximum number of schema records to return\n          example: 10\n          schema:\n            type: integer\n            minimum: 0\n            maximum: 100\n        - in: query\n          name: offset\n          description: number of records to skip for pagination\n          example: 0\n          schema:\n            type: integer\n            minimum: 0\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SchemaInfoResponse'\n        '400':\n          description: \u003e-\n            Bad user input. Mandatory fields missing or unacceptable value\n            passed to API\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SchemaErrorResponseFormat'\n        '401':\n          description: Unknown or invalid user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SchemaErrorResponseFormat'\n        '403':\n          description: User not authorised to access the API\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SchemaErrorResponseFormat'\n      security:\n        - Bearer: []\n  /api/schema-service/v1/schema/{id}:\n    get:\n      tags:\n        - Schema\n      summary: Gets schema from the schema repository.\n      description: \u003e-\n        Retrieve a schema using its system defined id. Required roles\n        'users.datalake.viewers' or 'users.datalake.editors' or\n        'users.datalake.admins' groups to get the schema.\n      operationId: Get Schema\n      parameters:\n        - name: data-partition-id\n          in: header\n          description: \u003e-\n            Specifies the data partition to use. This should be either the\n            partition name or crm account ID associated with the partition.\n          required: true\n          example: osdu\n          schema:\n            type: string\n        - name: id\n          in: path\n          description: the system id of the schema\n          required: true\n          example: osdu:wks:wellbore:1.0.0\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Search results matching criteria\n          content:\n            application/json:\n              schema:\n                type: object\n                example:\n                  $schema: http://json-schema.org/draft-07/schema#\n                  description: The entity shapefile.\n                  title: ShapeFile\n                  type: object\n                  definitions: {}\n                  properties: {}\n        '400':\n          description: \u003e-\n            Bad user input. Mandatory fields missing or unacceptable value\n            passed to API\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SchemaErrorResponseFormat'\n        '401':\n          description: Unknown or invalid user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SchemaErrorResponseFormat'\n        '403':\n          description: User not authorised to access the API\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SchemaErrorResponseFormat'\n        '404':\n          description: Requested Schema not found in repository\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SchemaErrorResponseFormat'\n      security:\n        - Bearer: []\n  /api/storage/v2/query/records:\n    get:\n      tags:\n        - Storage\n      summary: Get all record from kind\n      description: \u003e-\n        The API returns a list of all record ids which belong to the specified\n        kind. Allowed roles: service.storage.admin.\n      operationId: Get all record from kind\n      parameters:\n        - name: cursor\n          in: query\n          description: Cursor\n          required: false\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: Page Size\n          required: false\n          schema:\n            type: integer\n            format: int32\n            default: 10\n        - name: kind\n          in: query\n          description: Filter Kind\n          required: false\n          schema:\n            type: string\n            default: tenant1:public:well:1.0.2\n        - name: data-partition-id\n          in: header\n          description: Partition Id\n          required: true\n          example: opendes\n          schema:\n            type: string\n        - name: frame-of-reference\n          in: header\n          description: reference\n          required: false\n          example: none\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Record Ids retrieved successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StorageQueryResponse'\n        '404':\n          description: Kind or cursor not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StorageErrorResponse'\n      security:\n        - Bearer: []\n    post:\n      tags:\n        - Storage\n      summary: Fetch records\n      description: \u003e-\n        The API fetches multiple records at once. Allowed roles:\n        service.storage.viewer, service.storage.creator and\n        service.storage.admin.\n      operationId: Fetch records\n      parameters:\n        - name: data-partition-id\n          in: header\n          description: Partition Id\n          required: true\n          example: opendes\n          schema:\n            type: string\n        - name: frame-of-reference\n          in: header\n          description: reference\n          required: false\n          example: none\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/StorageMultiRecordIds'\n      responses:\n        '200':\n          description: Fetch multiple records successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StorageMultiRecordIds'\n        '500':\n          description: Unknown storage error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StorageErrorResponse'\n      security:\n        - Bearer: []\n  /api/records/{id}:delete:\n    post:\n      tags:\n        - Storage\n      summary: Delete record\n      description: \u003e-\n        The API performs a logical deletion of the given record. This operation\n        can be reverted later. Allowed roles: service.storage.creator and\n        service.storage.admin.\n      operationId: Delete record\n      parameters:\n        - name: id\n          in: path\n          description: Record id\n          required: true\n          schema:\n            type: string\n            default: tenant1:well:123456789\n        - name: data-partition-id\n          in: header\n          description: Partition Id\n          required: true\n          example: opendes\n          schema:\n            type: string\n        - name: frame-of-reference\n          in: header\n          description: reference\n          required: false\n          example: none\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Record deleted successfully.\n        '404':\n          description: Record not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StorageErrorResponse'\n      security:\n        - Bearer: []\n  /api/storage/v2/records/delete:\n    post:\n      tags:\n        - Storage\n      summary: Soft delete of multiple records\n      description: \u003e-\n        The API performs a soft deletion of the given list of records. Required\n        roles: 'users.datalake.editors' or 'users.datalake.admins'.\n      operationId: Delete records\n      parameters:\n        - name: data-partition-id\n          in: header\n          description: Partition Id\n          required: true\n          example: opendes\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                type: string\n        description: partitionInfo\n        required: true\n      responses:\n        '204':\n          description: All records deleted successfully.\n        '207':\n          description: Some of the records weren't deleted successfully.\n          content:\n            '*/*':\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/StorageDeleteRecordError'\n        '400':\n          description: Invalid id format\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/StorageErrorResponse'\n      security:\n        - Bearer: []\n  /api/storage/v2/records/{id}:\n    get:\n      tags:\n        - Storage\n      summary: Get record\n      description: \u003e-\n        This API returns the latest version of the given record. Allowed roles:\n        service.storage.viewer, service.storage.creator and\n        service.storage.admin.\n      operationId: Get record\n      parameters:\n        - name: id\n          in: path\n          description: Record id\n          required: true\n          schema:\n            type: string\n            default: tenant1:well:123456789\n        - name: attribute\n          in: query\n          description: \u003e-\n            Filter attributes to restrict the returned fields of the record.\n            Usage: data.{record-data-field-name}.\n          required: false\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n              default: data.wellName\n        - name: data-partition-id\n          in: header\n          description: Partition Id\n          required: true\n          example: opendes\n          schema:\n            type: string\n        - name: frame-of-reference\n          in: header\n          description: reference\n          required: false\n          example: none\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Record retrieved successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StorageRecordData'\n        '404':\n          description: Record not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StorageErrorResponse'\n      security:\n        - Bearer: []\n    delete:\n      tags:\n        - Storage\n      summary: Purge record\n      description: \u003e-\n        The API performs the physical deletion of the given record and all of\n        its versions. This operation cannot be undone. Allowed roles:\n        service.storage.admin.\n      operationId: Purge record\n      parameters:\n        - name: id\n          in: path\n          description: Record id\n          required: true\n          schema:\n            type: string\n            default: tenant1:well:123456789\n        - name: data-partition-id\n          in: header\n          description: Partition Id\n          required: true\n          example: opendes\n          schema:\n            type: string\n        - name: frame-of-reference\n          in: header\n          description: reference\n          required: false\n          example: none\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Record purged successfully.\n        '404':\n          description: Record not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StorageErrorResponse'\n      security:\n        - Bearer: []\n  /api/storage/v2/records/{id}/{version}:\n    get:\n      tags:\n        - Storage\n      summary: Get record version\n      description: \u003e-\n        The API retrieves the specific version of the given record. Allowed\n        roles: service.storage.viewer, service.storage.creator and\n        service.storage.admin.\n      operationId: Get record version\n      parameters:\n        - name: id\n          in: path\n          description: Record id\n          required: true\n          schema:\n            type: string\n        - name: version\n          in: path\n          description: Record version\n          required: true\n          schema:\n            type: integer\n            format: int64\n            default: 123456789\n        - name: attribute\n          in: query\n          description: \u003e-\n            Filter attributes to restrict the returned fields of the record.\n            Usage: data.{record-data-field-name}.\n          required: false\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n              default: data.wellName\n        - name: data-partition-id\n          in: header\n          description: Partition Id\n          required: true\n          example: opendes\n          schema:\n            type: string\n        - name: frame-of-reference\n          in: header\n          description: reference\n          required: false\n          example: none\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Record retrieved successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StorageRecordData'\n        '404':\n          description: Record id or version not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StorageErrorResponse'\n      security:\n        - Bearer: []\n  /api/storage/v2/records/versions/{id}:\n    get:\n      tags:\n        - Storage\n      summary: Get all record versions\n      description: \u003e-\n        The API returns a list containing all versions for the given record id.\n        Allowed roles: service.storage.viewer, service.storage.creator and\n        service.storage.admin.\n      operationId: Get all record versions\n      parameters:\n        - name: id\n          in: path\n          description: Record id\n          required: true\n          schema:\n            type: string\n            default: tenant1:well:123456789\n        - name: data-partition-id\n          in: header\n          description: Partition Id\n          required: true\n          example: opendes\n          schema:\n            type: string\n        - name: frame-of-reference\n          in: header\n          description: reference\n          required: false\n          example: none\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Record versions retrieved successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StorageRecordVersions'\n        '404':\n          description: Record id or version not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StorageErrorResponse'\n      security:\n        - Bearer: []\n  /api/storage/v2/records:\n    put:\n      tags:\n        - Storage\n      summary: Create or update records\n      description: \u003e-\n        The API represents the main injection mechanism into the Data Lake. It\n        allows records creation and/or update. When no record id is provided or\n        when the provided id is not already present in the Data Lake then a new\n        record is created. If the id is related to an existing record in the\n        Data Lake then an update operation takes place and a new version of the\n        record is created. Allowed roles: service.storage.creator and\n        service.storage.admin.\n      operationId: Create or update records\n      parameters:\n        - name: skipdupes\n          in: query\n          description: Skip duplicates when updating records with the same value.\n          required: false\n          schema:\n            type: boolean\n            default: true\n        - name: data-partition-id\n          in: header\n          description: Partition Id\n          required: true\n          example: opendes\n          schema:\n            type: string\n        - name: frame-of-reference\n          in: header\n          description: reference\n          required: false\n          example: none\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/StorageRecord'\n      responses:\n        '201':\n          description: Records created and/or updated successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StorageRecord'\n        '400':\n          description: Invalid record format.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StorageErrorResponse'\n        '403':\n          description: User not authorized to perform the action.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StorageErrorResponse'\n        '404':\n          description: Invalid acl group.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StorageErrorResponse'\n      security:\n        - Bearer: []\n    patch:\n      tags:\n        - Storage\n      summary: Modify record metadata attributes using patch operations\n      description: \u003e-\n        The API represents the patch update mechanism for records. It allows\n        updating multiple records in one request. The currently supported\n        operations are replace, add, and remove for Legal Tags, ACLs, and Tags.\n        Required roles: 'users.datalake.editors' or 'users.datalake.admins'.\n      operationId: Patch update records\n      parameters:\n        - name: data-partition-id\n          in: header\n          description: Partition Id\n          required: true\n          example: opendes\n          schema:\n            type: string\n        - name: frame-of-reference\n          in: header\n          description: reference\n          required: false\n          example: none\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/StorageRecordBulkUpdateParam'\n      responses:\n        '200':\n          description: Records updated successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StorageBulkUpdateRecordsResponse'\n        '206':\n          description: Records updated successful partially.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StorageBulkUpdateRecordsResponse'\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StorageErrorResponse'\n        '403':\n          description: User not authorized to perform the action.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StorageErrorResponse'\n      security:\n        - Bearer: []\n  /api/search/v2/query:\n    post:\n      tags:\n        - Search\n      summary: Queries the index for the specified kind using the input query string.\n      description: \u003e-\n        The API supports full text search on string fields, range queries on\n        date, numeric or string fields, along with geo-spatial search. Required\n        access levels to use this API are service.search.user,\n        service.search.admin. In addition, users must be a member of data groups\n        to access the data.\n      operationId: queryRecords\n      parameters:\n        - name: data-partition-id\n          in: header\n          description: Partition Id\n          required: true\n          example: opendes\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SearchQueryRequest'\n        description: \u003e-\n          Specifies the API parameters. The only required parameter is the kind\n          which needs to be formatted correctly.\n        required: true\n      responses:\n        '200':\n          description: Success.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SearchQueryResponse'\n        '400':\n          description: \u003e-\n            Invalid parameters were given on request / Unrecognized fields found\n            on request/ Bad JSON format.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SearchAppError'\n        '403':\n          description: User not authorized to perform the action.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SearchAppError'\n        '404':\n          description: Resource you are trying to find does not exists\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SearchAppError'\n      security:\n        - Bearer: []\n  /api/search/v2/query_with_cursor:\n    post:\n      tags:\n        - Search\n      summary: \u003e-\n        Query the index using cursor and optionally return only requested\n        fields.\n      description: \u003e-\n        The API supports full text search on string fields, range queries on\n        date, numeric or string fields, along with geo-spatial search. Required\n        access levels to use this API are service.search.user,\n        service.search.admin. In addition, users must be a member of data groups\n        to access the data. It can be used to retrieve large numbers of results\n        (or even all results) from a single search request, in much the same way\n        as you would use a cursor on a traditional database.\n      operationId: queryWithCursor\n      parameters:\n        - name: data-partition-id\n          in: header\n          description: Partition Id\n          required: true\n          example: opendes\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SearchCursorQueryRequest'\n        description: \u003e-\n          Specifies the API parameters. The only required parameter is the kind\n          which needs to be formatted correctly.\n        required: true\n      responses:\n        '200':\n          description: Success.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SearchCursorQueryResponse'\n        '400':\n          description: \u003e-\n            Invalid parameters were given on request / Unrecognized fields found\n            on request/ Bad JSON format.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SearchAppError'\n        '403':\n          description: User not authorized to perform the action.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SearchAppError'\n        '404':\n          description: Resource you are trying to find does not exists\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SearchAppError'\n      security:\n        - Bearer: []\n  /api/file/v2/getLocation:\n    post:\n      tags:\n        - File\n      summary: Get a location in Landing Zone to upload a file.\n      operationId: Get a location in Landing Zone to upload a file.\n      description: \u003e\n        Create a new location in the landing zone to upload a file.\n\n        **Required roles**: 'users.datalake.editors' or 'users.datalake.admins'\n        or 'users.datalake.ops'.\n      parameters:\n        - name: data-partition-id\n          in: header\n          description: \u003e-\n            Specifies the data partition to use. This should either be the\n            partition name or crm account ID associated with the partition.\n          required: true\n          example: opendes\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FileLocationRequest'\n      responses:\n        '200':\n          description: Created location\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileLandingZoneLocationResponse'\n        '400':\n          description: \u003e-\n            Bad user input. Mandatory fields missing or unacceptable value\n            passed to API\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileApplicationError'\n        '401':\n          description: Invalid/Expired Credential\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileApplicationError'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileApplicationError'\n        '404':\n          description: Record Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileApplicationError'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileApplicationError'\n      security:\n        - Bearer: []\n  /api/file/v2/files/uploadURL:\n    get:\n      tags:\n        - File\n      summary: Get a location in Landing Zone to upload a file.\n      description: \u003e-\n        Gets a temporary signed URL to upload a file.The generated URL is time\n        bound and expires after 24 hours.\n\n        User will receive a FileSource in the response.This is the relative path\n        where the uploaded file will persist.\n\n        Once the file is uploaded, FileSource can then be used to post metadata\n        of the file. The uploaded file gets automatically deleted, if the\n        metadata is not posted within 24 hours of uploading the file.\n\n        **Required roles**: 'users.datalake.viewers' or 'users.datalake.editors'\n        or 'users.datalake.admins' or 'users.datalake.ops'.\n      operationId: Get the location to upload a file\n      parameters:\n        - name: data-partition-id\n          in: header\n          description: \u003e-\n            Specifies the data partition to use. This should either be the\n            partition name or crm account ID associated with the partition.\n          required: true\n          example: opendes\n          schema:\n            type: string\n      responses:\n        '200':\n          description: |\n            Created location\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileSourceLocationResponse'\n        '400':\n          description: \u003e-\n            Bad user input. Mandatory fields missing or unacceptable value\n            passed to API\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileApplicationError'\n        '401':\n          description: Invalid/Expired Credential\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileApplicationError'\n        '403':\n          description: Forbidden.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileApplicationError'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileApplicationError'\n      security:\n        - Bearer: []\n  /api/file/v2/files/metadata:\n    post:\n      tags:\n        - File\n      summary: Creates metadata for a file\n      description: \u003e-\n        This API creates a metadata record for a file that is already uploaded.\n        The Metadata is linked to the file via `FileSource` provided in the\n        request body.\n\n        If `FileSource` attribute is missing in the request body or there is no\n        file present, then the request fails with an error.\n\n        When metadata is successfully updated in the system, it returns the `Id`\n        of the file metadata record.\n\n        **Required roles**: 'users.datalake.viewers' or 'users.datalake.editors'\n        or 'users.datalake.admins' or 'users.datalake.ops'.\n      operationId: Publish file metadata for a file.\n      parameters:\n        - name: data-partition-id\n          in: header\n          description: \u003e-\n            Specifies the data partition to use. This should either be the\n            partition name or crm account ID associated with the partition.\n          required: true\n          example: opendes\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FileMetadata'\n        description: File metadata content\n      responses:\n        '201':\n          description: Metadata created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileMetadataResponse'\n        '400':\n          description: \u003e-\n            Bad user input. Mandatory fields missing or unacceptable value\n            passed to API\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileApplicationError'\n        '401':\n          description: Invalid/Expired Credential\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileApplicationError'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileApplicationError'\n        '404':\n          description: Record Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileApplicationError'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileApplicationError'\n      security:\n        - Bearer: []\n  /api/file/v2/files/{Id}/metadata:\n    get:\n      tags:\n        - File\n      description: \u003e-\n        Gets the latest version of File metadata record identified by the given\n        id. **Required roles**: 'users.datalake.viewers' or\n        'users.datalake.editors' or 'users.datalake.admins' or\n        'users.datalake.ops'.\n      operationId: Gets metadata record for the given id\n      summary: Gets metadata record for the given id\n      parameters:\n        - name: data-partition-id\n          in: header\n          description: \u003e-\n            Specifies the data partition to use. This should either be the\n            partition name or crm account ID associated with the partition.\n          required: true\n          example: opendes\n          schema:\n            type: string\n        - name: Id\n          description: File metadata record Id.\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileRecordVersion'\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileApplicationError'\n        '401':\n          description: Invalid/Expired Credential\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileApplicationError'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileApplicationError'\n        '404':\n          description: Record Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileApplicationError'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileApplicationError'\n      security:\n        - Bearer: []\n    delete:\n      tags:\n        - File\n      description: \u003e-\n        Deletes the File metadata record identified by the given id and file\n        associated with that metadata record. **Required roles**:\n        'users.datalake.editors'  or 'users.datalake.admins'.\n      operationId: Deletes metadata record \u0026 File for the given id\n      summary: \u003e-\n        Deletes metadata record \u0026 file assocaited with that record for the given\n        id\n      parameters:\n        - name: data-partition-id\n          in: header\n          description: \u003e-\n            Specifies the data partition to use. This should either be the\n            partition name or crm account ID associated with the partition.\n          required: true\n          example: opendes\n          schema:\n            type: string\n        - name: Id\n          description: File metadata record Id.\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Record deleted successfully.\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileApplicationError'\n        '401':\n          description: Invalid/Expired Credential\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileApplicationError'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileApplicationError'\n        '404':\n          description: Record Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileApplicationError'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileApplicationError'\n      security:\n        - Bearer: []\n  /api/file/v2/files/{Id}/DownloadURL:\n    get:\n      tags:\n        - File\n      summary: Gets a URL to download the file\n      description: \u003e-\n        Gets a URL for downloading the file associated with the unique `id`.\n\n        **Required roles**: 'users.datalake.viewers' or 'users.datalake.editors'\n        or 'users.datalake.admins' or 'users.datalake.ops'.\n      operationId: Gets URL to download the file associated with the given id.\n      parameters:\n        - name: data-partition-id\n          in: header\n          description: \u003e-\n            Specifies the data partition to use. This should either be the\n            partition name or crm account ID associated with the partition.\n          required: true\n          example: opendes\n          schema:\n            type: string\n        - name: Id\n          in: path\n          description: File Metadata record Id.\n          required: true\n          schema:\n            type: string\n        - name: expiryTime\n          description: \u003e-\n            The Time for which Signed URL to be valid. Accepted Regex patterns\n            are \"^[0-9]+M$\", \"^[0-9]+H$\", \"^[0-9]+D$\" denoting Integer values in\n            Minutes, Hours, Days respectively. In absence of this parameter the\n            URL would be valid for 7 Days.\n          required: false\n          in: query\n          example: 5M\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileDownloadResponse'\n        '400':\n          description: \u003e-\n            Bad user input. Mandatory fields missing or unacceptable value\n            passed to API\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileApplicationError'\n        '401':\n          description: Invalid/Expired Credential\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileApplicationError'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileApplicationError'\n        '404':\n          description: Record Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileApplicationError'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileApplicationError'\n      security:\n        - Bearer: []\n  /api/file/v2/delivery/getFileSignedUrl:\n    post:\n      tags:\n        - File\n      description: Returns delivery instructions for File(s) using SRNs\n      operationId: Returns delivery instructions for File(s) using SRNs\n      parameters:\n        - name: data-partition-id\n          in: header\n          description: \u003e-\n            Specifies the data partition to use. This should either be the\n            partition name or crm account ID associated with the partition.\n          required: true\n          example: opendes\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FileDeliveryGetFileSignedURLRequest'\n      responses:\n        '200':\n          description: File location\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileDeliveryGetFileSignedURLResponse'\n        '400':\n          description: \u003e-\n            Bad user input. Mandatory fields missing or unacceptable value\n            passed to API\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileApplicationError'\n        '401':\n          description: Invalid/Expired Credential\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileApplicationError'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileApplicationError'\n      security:\n        - Bearer: []\n  /api/workflow/v1/workflow:\n    post:\n      tags:\n        - Workflow\n      summary: Creates workflow definition with standard orchestrator operators.\n      operationId: deployWorkflow\n      description: API to create a new workflow using standard operators of orchestrator.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Workflow'\n        description: Request payload for deploying new workflow.\n      responses:\n        '200':\n          description: Workflow created\\updated successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Workflow'\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WorkflowError'\n        '401':\n          description: Invalid/Expired Credential\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WorkflowError'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WorkflowError'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WorkflowError'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WorkflowError'\n      security:\n        - Bearer: []\n    get:\n      tags:\n        - Workflow\n      summary: List all the workflow applicable for a tenant.\n      operationId: listAllWorkflow\n      description: List all the workflows for the tenant.\n      parameters:\n        - name: prefix\n          in: query\n          description: Filter workflow names which start with  the full prefix specified.\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: List of all the workflows.\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Workflow'\n                type: array\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WorkflowError'\n        '401':\n          description: Invalid/Expired Credential\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WorkflowError'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WorkflowError'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WorkflowError'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WorkflowError'\n      security:\n        - Bearer: []\n  /api/workflow/v1/workflow/{workflow_name}:\n    delete:\n      tags:\n        - Workflow\n      summary: Delete a workflow defintion.\n      operationId: deleteWorkflow\n      description: Delete a workflow by it's name.\n      parameters:\n        - name: workflow_name\n          in: path\n          description: Unique Name of the Workflow to be deleted.\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Workflow deleted successfully.\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WorkflowError'\n        '401':\n          description: Invalid/Expired Credential\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WorkflowError'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WorkflowError'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WorkflowError'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WorkflowError'\n      security:\n        - Bearer: []\n    get:\n      tags:\n        - Workflow\n      summary: Get complete details for a workflow.\n      operationId: viewWorkflow\n      description: Get complete details for an workflow.\n      parameters:\n        - name: workflow_name\n          in: path\n          description: Name of the Workflow.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Workflow Details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Workflow'\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WorkflowError'\n        '401':\n          description: Invalid/Expired Credential\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WorkflowError'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WorkflowError'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WorkflowError'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WorkflowError'\n      security:\n        - Bearer: []\n  /api/workflow/v1/workflow/{workflow_name}/workflowRun:\n    post:\n      tags:\n        - Workflow\n      summary: Trigger a workflow.\n      operationId: triggerWorkflow\n      description: Trigger a workflow mentioned in payload.\n      parameters:\n        - name: workflow_name\n          in: path\n          description: Unique Name of the Workflow to run.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/WorkflowTriggerRequest'\n      responses:\n        '200':\n          description: Workflow successully triggered.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WorkflowRun'\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WorkflowError'\n        '401':\n          description: Invalid/Expired Credential\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WorkflowError'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WorkflowError'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WorkflowError'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WorkflowError'\n      security:\n        - Bearer: []\n    get:\n      tags:\n        - Workflow\n      summary: Get all run instances of a workflow.\n      operationId: getAllWorkflowRuns\n      description: Get all run instances for a worflow.\n      parameters:\n        - name: workflow_name\n          in: path\n          description: \u003e-\n            Unique Name of the Workflow for which the execution details has to\n            be fetched.\n          required: true\n          schema:\n            type: string\n        - name: prefix\n          in: query\n          description: \u003e-\n            A prefix used when generating the runId of the workflow run. Prefix\n            cannot contain the word \"backfill\"\n          required: false\n          schema:\n            type: string\n        - name: startDate\n          in: query\n          description: \u003e-\n            The start date where this call should start creating workflow runs\n            from (inclusive)\n          required: false\n          schema:\n            type: string\n        - name: endDate\n          in: query\n          description: \u003e-\n            The end date where this call should stop creating workflow runs at\n            (inclusive)\n          required: false\n          schema:\n            type: boolean\n        - name: limit\n          in: query\n          description: \u003e-\n            The maximum number of workflow runs to create in a single request.\n            Maximum is 500.\n          required: false\n          schema:\n            type: integer\n        - name: cursor\n          in: query\n          description: Cursor for subsequent request.\n          required: false\n          schema:\n            type: string\n        - name: partial\n          in: query\n          description: \u003e-\n            Whether or not a partial batch can be created. If true, and the\n            number of workflow runs that would be created between the start and\n            end exceeds the limit, no workflow runs will be created.\n          required: false\n          schema:\n            type: boolean\n        - name: conf\n          in: query\n          description: JSON configuration added to the Workflow run conf attribute\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: History of workflow runs.\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/WorkflowRun'\n                type: array\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WorkflowError'\n        '401':\n          description: Invalid/Expired Credential\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WorkflowError'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WorkflowError'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WorkflowError'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WorkflowError'\n      security:\n        - Bearer: []\n  /api/workflow/v1/workflow/{workflow_name}/workflowRun/{runId}:\n    get:\n      tags:\n        - Workflow\n      summary: Get details for a speciffic workflow run instance.\n      operationId: getWorkflowRun\n      description: Get an execution instances for a workflow.\n      parameters:\n        - name: workflow_name\n          in: path\n          description: Unique Name of Workflow.\n          required: true\n          schema:\n            type: string\n        - name: runId\n          in: path\n          description: Run id for the worfkow.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Workflow execution detail.\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/WorkflowRun'\n        '400':\n          description: Bad Request\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/WorkflowError'\n        '401':\n          description: Invalid/Expired Credential\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/WorkflowError'\n        '403':\n          description: Forbidden\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/WorkflowError'\n        '404':\n          description: Not Found\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/WorkflowError'\n        '500':\n          description: Internal Server Error\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/WorkflowError'\n      security:\n        - Bearer: []\n    put:\n      tags:\n        - Workflow\n      summary: Update the workflow run instance.\n      operationId: updateWorkflowRun\n      description: Update workflow run.\n      parameters:\n        - name: workflow_name\n          in: path\n          description: Unique Name of Workflow.\n          required: true\n          schema:\n            type: string\n        - name: runId\n          in: path\n          description: Run id for the worfkow.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/WorkflowRun'\n      responses:\n        '200':\n          description: Workflow updated successfully.\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/Workflow'\n        '400':\n          description: Bad Request\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/WorkflowError'\n        '401':\n          description: Invalid/Expired Credential\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/WorkflowError'\n        '403':\n          description: Forbidden\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/WorkflowError'\n        '404':\n          description: Not Found\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/WorkflowError'\n        '500':\n          description: Internal Server Error\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/WorkflowError'\n      security:\n        - Bearer: []\n  /api/register/v1/ddms/{id}:\n    get:\n      tags:\n        - Register\n      summary: Get a DDMS registration\n      description: \u003e-\n        Get a DDMS registration with the given id. Required roles:\n        'users.datalake.viewers' or 'users.datalake.editors' or\n        'users.datalake.admins'\n      operationId: Get a DDMS registration\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n            pattern: ^[A-Za-z0-9-]{2,50}\n        - name: data-partition-id\n          in: header\n          description: \u003e-\n            Specifies the partition to use. This should be either the partition\n            name associated with the partition.\n          required: true\n          example: opendes\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterDdms'\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '429':\n          description: Too Many Requests\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '500':\n          description: Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '502':\n          description: Bad Gateway\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '503':\n          description: Service Unavailable\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n      security:\n        - Bearer: []\n    delete:\n      tags:\n        - Register\n      summary: Delete a DDMS registration\n      description: \u003e-\n        Delete a DDMS registration with the given id. Required roles:\n        'users.datalake.admins'\n      operationId: Delete a DDMS registration\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n            pattern: ^[A-Za-z0-9-]{2,50}\n        - name: data-partition-id\n          in: header\n          description: \u003e-\n            Specifies the partition to use. This should be either the partition\n            name associated with the partition.\n          required: true\n          example: opendes\n          schema:\n            type: string\n      responses:\n        '204':\n          description: No Content\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '404':\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '429':\n          description: Too Many Requests\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '500':\n          description: Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '502':\n          description: Bad Gateway\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '503':\n          description: Service Unavailable\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n      security:\n        - Bearer: []\n  /api/register/v1/ddms:\n    post:\n      tags:\n        - Register\n      summary: Create a DDMS registration\n      description: \u003e-\n        Create a DDMS registration using an OpenApi spec V3 document. Required\n        roles: 'users.datalake.editors' or 'users.datalake.admins'\n      operationId: Create a DDMS registration\n      parameters:\n        - name: data-partition-id\n          in: header\n          description: \u003e-\n            Specifies the partition to use. This should be either the partition\n            name associated with the partition.\n          required: true\n          example: opendes\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RegisterDdms'\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterDdms'\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '409':\n          description: Conflict\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '429':\n          description: Too Many Requests\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '500':\n          description: Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '502':\n          description: Bad Gateway\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '503':\n          description: Service Unavailable\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n      security:\n        - Bearer: []\n    get:\n      tags:\n        - Register\n      summary: Query for DDMS registrations\n      description: \u003e-\n        Query for DDMS registrations allowing retrievals by type. Required\n        roles: 'users.datalake.viewers' or 'users.datalake.editors' or\n        'users.datalake.admins'\n      operationId: Query a DDMS registration\n      parameters:\n        - name: type\n          in: query\n          required: true\n          schema:\n            type: string\n            pattern: ^[A-Za-z0-9 ]{2,50}\n        - name: data-partition-id\n          in: header\n          description: \u003e-\n            Specifies the partition to use. This should be either the partition\n            name associated with the partition.\n          required: true\n          example: opendes\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RegisterDdms'\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '429':\n          description: Too Many Requests\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '500':\n          description: Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '502':\n          description: Bad Gateway\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '503':\n          description: Service Unavailable\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n      security:\n        - Bearer: []\n  /api/register/v1/action/{id}:\n    get:\n      tags:\n        - Register\n      summary: Get an action registration\n      description: \u003e-\n        Get an action registration with the given id. Required roles:\n        'users.datalake.viewers' or 'users.datalake.editors' or\n        'users.datalake.admins'\n      operationId: Get an action registration\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n            pattern: ^[A-Za-z0-9-]{2,50}\n        - name: data-partition-id\n          in: header\n          description: \u003e-\n            Specifies the partition to use. This should be either the partition\n            name associated with the partition.\n          required: true\n          example: opendes\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAction'\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '429':\n          description: Too Many Requests\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '500':\n          description: Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '502':\n          description: Bad Gateway\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '503':\n          description: Service Unavailable\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n      security:\n        - Bearer: []\n    delete:\n      tags:\n        - Register\n      summary: Delete an action  registration\n      description: \u003e-\n        Delete an action registration with the given id. Required role:\n        'users.datalake.admins'\n      operationId: Delete an action registration\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n            pattern: ^[A-Za-z0-9-]{2,50}\n        - name: data-partition-id\n          in: header\n          description: \u003e-\n            Specifies the partition to use. This should be either the partition\n            name associated with the partition.\n          required: true\n          example: opendes\n          schema:\n            type: string\n      responses:\n        '204':\n          description: No Content\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '404':\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '429':\n          description: Too Many Requests\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '500':\n          description: Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '502':\n          description: Bad Gateway\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '503':\n          description: Service Unavailable\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n      security:\n        - Bearer: []\n  /api/register/v1/action:\n    post:\n      tags:\n        - Register\n      summary: Create an action registration\n      description: 'Create an action registration. Required role: ''users.datalake.admins'''\n      operationId: Create an action registration\n      parameters:\n        - name: data-partition-id\n          in: header\n          description: \u003e-\n            Specifies the partition to use. This should be either the partition\n            name associated with the partition.\n          required: true\n          example: opendes\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RegisterCreateAction'\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAction'\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '409':\n          description: Conflict\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '429':\n          description: Too Many Requests\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '500':\n          description: Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '502':\n          description: Bad Gateway\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '503':\n          description: Service Unavailable\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n      security:\n        - Bearer: []\n  /api/register/v1/action:test:\n    post:\n      tags:\n        - Register\n      summary: Test an action registration\n      description: \u003e-\n        Test an action registration. Required roles: 'users.datalake.viewers' or\n        'users.datalake.editors' or 'users.datalake.admins'\n      operationId: Test an action registration\n      parameters:\n        - name: data-partition-id\n          in: header\n          description: \u003e-\n            Specifies the partition to use. This should be either the partition\n            name associated with the partition.\n          required: true\n          example: opendes\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RegisterTestAction'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterTestActionResult'\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '409':\n          description: Conflict\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '429':\n          description: Too Many Requests\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '500':\n          description: Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '502':\n          description: Bad Gateway\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '503':\n          description: Service Unavailable\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n      security:\n        - Bearer: []\n  /api/register/v1/action:retrieve:\n    post:\n      tags:\n        - Register\n      summary: \u003e-\n        Query for action registrations and substitutes any action with the given\n        parameters\n      description: \u003e-\n        Retrieve an action registration. Required roles:\n        'users.datalake.viewers' or 'users.datalake.editors' or\n        'users.datalake.admins'\n      operationId: Retrieve an action registration\n      parameters:\n        - name: data-partition-id\n          in: header\n          description: \u003e-\n            Specifies the partition to use. This should be either the partition\n            name associated with the partition.\n          required: true\n          schema:\n            type: string\n            default: opendes\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RegisterRecord'\n        description: The Record to find matching actions for and apply the template for.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RegisterAction'\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '409':\n          description: Conflict\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '429':\n          description: Too Many Requests\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '500':\n          description: Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '502':\n          description: Bad Gateway\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '503':\n          description: Service Unavailable\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n      security:\n        - Bearer: []\n  /api/register/v1/subscription:\n    post:\n      tags:\n        - Register\n      summary: Create a subscription\n      description: \u003e-\n        Create a subscription. Required roles: 'users.datalake.editors' or\n        'users.datalake.admins'\n      operationId: Create a subscription\n      parameters:\n        - name: data-partition-id\n          in: header\n          description: \u003e-\n            Specifies the partition to use. This should be either the partition\n            name associated with the partition.\n          required: true\n          example: opendes\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RegisterSubscription'\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterSubscriptionCreateResult'\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '409':\n          description: Conflict\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '429':\n          description: Too Many Requests\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '500':\n          description: Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '502':\n          description: Bad Gateway\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '503':\n          description: Service Unavailable\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n      security:\n        - Bearer: []\n  /api/register/v1/subscription/{id}:\n    get:\n      tags:\n        - Register\n      summary: Get a subscription\n      description: \u003e-\n        Get a subscription with its Id. Required role: 'users.datalake.editors'\n        or 'users.datalake.admins'\n      operationId: Get a subscription by Id\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: data-partition-id\n          in: header\n          description: \u003e-\n            Specifies the partition to use. This should be either the partition\n            name associated with the partition.\n          required: true\n          example: opendes\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterGetSubscriptionResult'\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '404':\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '429':\n          description: Too Many Requests\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '500':\n          description: Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '502':\n          description: Bad Gateway\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '503':\n          description: Service Unavailable\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n      security:\n        - Bearer: []\n    delete:\n      tags:\n        - Register\n      summary: Delete a subscription\n      description: \u003e-\n        Delete a subscription with its Id. Required role:\n        'users.datalake.admins'\n      operationId: Delete a subscription by Id\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: data-partition-id\n          in: header\n          description: \u003e-\n            Specifies the partition to use. This should be either the partition\n            name associated with the partition.\n          required: true\n          example: opendes\n          schema:\n            type: string\n      responses:\n        '204':\n          description: No Content\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '404':\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '429':\n          description: Too Many Requests\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '500':\n          description: Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '502':\n          description: Bad Gateway\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '503':\n          description: Service Unavailable\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n      security:\n        - Bearer: []\n  /api/register/v1/subscription/{id}/secret:\n    put:\n      tags:\n        - Register\n      summary: Update secret for subscription\n      description: \u003e-\n        Update secret for a subscription. Required role:\n        'users.datalake.editors' or 'users.datalake.admins'\n      operationId: Update secret for subscription\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: data-partition-id\n          in: header\n          description: \u003e-\n            Specifies the partition to use. This should be either the partition\n            name associated with the partition.\n          required: true\n          example: opendes\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RegisterSecret'\n      responses:\n        '204':\n          description: No Content\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '404':\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '429':\n          description: Too Many Requests\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '500':\n          description: Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '502':\n          description: Bad Gateway\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '503':\n          description: Service Unavailable\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n      security:\n        - Bearer: []\n  /api/register/v1/topics:\n    get:\n      tags:\n        - Register\n      summary: List all topics\n      description: \u003e-\n        List all topics that you can create a subscription for, along with the\n        corresponding sample messages. Required role: 'users.datalake.editors'\n        or 'users.datalake.admins'\n      operationId: List all topics\n      parameters:\n        - name: data-partition-id\n          in: header\n          description: \u003e-\n            Specifies the partition to use. This should be either the partition\n            name associated with the partition.\n          required: true\n          example: opendes\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RegisterTopic'\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '404':\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '429':\n          description: Too Many Requests\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '500':\n          description: Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '502':\n          description: Bad Gateway\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n        '503':\n          description: Service Unavailable\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterAppError'\n      security:\n        - Bearer: []\n  /api/notification/v1/push-handlers/records-changed:\n    post:\n      tags:\n        - Notification\n      summary: Notifies subscribers that records have changed\n      operationId: recordChangedUsingPOST\n      parameters:\n        - name: data-partition-id\n          in: header\n          description: tenant\n          required: true\n          example: opendes\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/NotificationResponseEntity'\n        '201':\n          description: Created\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n      security:\n        - Bearer: []\ncomponents:\n  requestBodies:\n    LegalTagRequest:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/LegalTagRequest'\n    PartitionDto:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/PartitionDto'\n      description: partitionInfo\n      required: true\n  securitySchemes:\n    Bearer:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n  schemas:\n    PartitionProperty:\n      type: object\n      properties:\n        sensitive:\n          type: boolean\n        value:\n          type: object\n    PartitionDto:\n      type: object\n      required:\n        - properties\n      properties:\n        properties:\n          type: object\n          description: \u003e-\n            Free form key value pair object for any data partition specific\n            values\n          additionalProperties:\n            $ref: '#/components/schemas/PartitionProperty'\n      example:\n        properties:\n          compliance-ruleset:\n            sensitive: false\n            value: shared\n          elastic-endpoint:\n            sensitive: true\n            value: elastic-endpoint\n          cosmos-connection:\n            sensitive: true\n            value: cosmos-connection\n    EntitlementGroupProperties:\n      type: object\n      required:\n        - name\n        - description\n        - email\n      properties:\n        name:\n          type: string\n          example: service.entitlements.user\n          description: The name of an entitlement or group.\n        description:\n          type: string\n          example: A service entitlement\n          description: The description of an entitlement or group.\n        email:\n          type: string\n          example: service.entitlements.user@partition.contoso.com\n          description: The fully qualified group name.\n      description: Group properties\n    EntitlementGroupResponse:\n      type: object\n      properties:\n        desId:\n          type: string\n        memberEmail:\n          type: string\n        groups:\n          type: array\n          description: A collection of groups.\n          items:\n            $ref: '#/components/schemas/EntitlementGroupProperties'\n    EntitlementMemberDto:\n      type: object\n      properties:\n        email:\n          type: string\n          example: email@domain.com\n          description: Object ID or Email Address\n        role:\n          type: string\n          example: MEMBER\n          description: Role Name\n    LegalTagProperties:\n      type: object\n      required:\n        - contractId\n        - countryOfOrigin\n        - dataType\n        - expirationDate\n        - exportClassification\n        - originator\n        - personalData\n        - securityClassification\n      properties:\n        contractId:\n          type: string\n          example: A1234\n          description: \u003e-\n            The Id of the physical contract associated with the data being\n            ingested.\n        countryOfOrigin:\n          type: array\n          example: [US]\n          description: The ISO Alpha 2 country code(s) of where the data relates to.\n          items:\n            type: string\n        dataType:\n          type: string\n          example: Transferred Data\n          description: The type of data being ingested.\n        expirationDate:\n          type: string\n          example: 2023-12-31\n          description: \u003e-\n            The optional expiration date of the contract in the format\n            YYYY-MM-DD\n        exportClassification:\n          type: string\n          example: EAR99\n          description: The ECCN value of the data if one applies.\n        originator:\n          type: string\n          example: Contoso\n          description: The company who owns the data.\n        personalData:\n          type: string\n          example: No Personal Data\n          description: Whether the data contains any personally identifiable data.\n        securityClassification:\n          type: string\n          example: Public\n          description: The security classification of the data.\n      description: LegalTag properties\n    LegalTagPropertyValues:\n      type: object\n      properties:\n        countriesOfOrigin:\n          type: object\n          description: \u003e-\n            The values of all the allowed Countries of Origin with the ISO Alpha\n            2 code and country name.\n          additionalProperties:\n            type: string\n        otherRelevantDataCountries:\n          type: object\n          description: \u003e-\n            The values of all the allowed Other Relevant Data Countries with the\n            ISO Alpha 2 code and country name.\n          additionalProperties:\n            type: string\n        securityClassifications:\n          type: array\n          description: The values of all the allowed Security Classifications.\n          uniqueItems: true\n          items:\n            type: string\n        exportClassificationControlNumbers:\n          type: array\n          description: The name of all the allowed Export Classifications.\n          uniqueItems: true\n          items:\n            type: string\n        personalDataTypes:\n          type: array\n          description: The name of all the allowed Personal Data Type values.\n          uniqueItems: true\n          items:\n            type: string\n      description: Shows the allowed values of the fields of a LegalTag.\n    LegalTagInvalidResponse:\n      type: object\n      properties:\n        name:\n          type: string\n          description: The name of the LegalTag.\n        reason:\n          type: string\n          description: The reason the LegalTag is currently invalid.\n      description: Represents a single invalid LegalTag.\n    LegalTagInvalidResponseList:\n      type: object\n      properties:\n        invalidLegalTags:\n          type: array\n          description: A collection of invalid LegalTags.\n          items:\n            $ref: '#/components/schemas/LegalTagInvalidResponse'\n      description: Represents a collection invalid LegalTags.\n    LegalTagRequest:\n      type: object\n      required:\n        - names\n      properties:\n        names:\n          type: array\n          description: The name of all the LegalTags to retrieve.\n          items:\n            type: string\n          maxItems: 25\n          minItems: 1\n      description: The model to retrieve multiple LegalTags in batch.\n    LegalTagDto:\n      type: object\n      properties:\n        name:\n          type: string\n          example: public-usa-test-1\n          description: The name of the LegalTag.\n        description:\n          type: string\n          example: A sample legal tag\n          description: The description of the LegalTag.\n        properties:\n          $ref: '#/components/schemas/LegalTagProperties'\n      description: Represents a single LegalTag.\n    LegalTagDtos:\n      type: object\n      properties:\n        legalTags:\n          type: array\n          description: A collection of complete LegalTags\n          items:\n            $ref: '#/components/schemas/LegalTagDto'\n      description: Represents a collection of LegalTags.\n    LegalTagUpdateDto:\n      type: object\n      required:\n        - contractId\n        - name\n      properties:\n        name:\n          type: string\n          description: The name of the LegalTag.\n        contractId:\n          type: string\n          example: No Contract Related\n          description: \u003e-\n            The Id of the physical contract associated with the data being\n            ingested.\n        description:\n          type: string\n          description: \u003e-\n            The optional description if the LegalTag to allow for easier\n            discoverability of Legaltags overtime.\n        expirationDate:\n          type: string\n          example: '2025-12-25'\n          description: \u003e-\n            The optional expiration date of the contract in the format\n            YYYY-MM-DD\n      description: The model to update an existing LegalTag\n    StorageQueryResponse:\n      type: object\n      properties:\n        cursor:\n          type: string\n        results:\n          type: array\n          items:\n            type: string\n    StorageErrorResponse:\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        reason:\n          type: string\n        message:\n          type: string\n      description: An error that occurs during normal application logic\n    StorageMultiRecordIds:\n      type: object\n      required:\n        - records\n      properties:\n        records:\n          type: array\n          example: tenant1:well:123456789\n          description: \u003e-\n            List of record ids. Each record id must follow the naming convention\n            {OSDU-Account-Id}:{dataset-name}:{record-type}:{version}.\n          items:\n            type: string\n        attributes:\n          type: array\n          example: data.wellName\n          description: \u003e-\n            Filter attributes to restrict the returned fields of the record.\n            Usage: data.{record-data-field-name}.\n          items:\n            type: string\n      description: Multiple storage record ids and filter attributes.\n      example:\n        records:\n          - tenant1:well:123456789\n          - tenant1:wellTop:abc789456\n          - tenant1:wellLog:654abc987\n        attributes:\n          - data.msg\n    StorageDeleteRecordError:\n      type: object\n      properties:\n        notDeletedRecordId:\n          type: string\n          example: common:welldb:123456\n          description: Record id which wasn't deleted successfully.\n        message:\n          type: string\n          example: Record with id 'common:welldb:123456' not found\n          description: Brief description of the cause why record wasn't delete\n      description: Delete Records Response Body\n    StorageRecordData:\n      type: object\n      properties:\n        data:\n          type: object\n          additionalProperties:\n            type: object\n        meta:\n          type: array\n          items:\n            type: object\n            additionalProperties:\n              type: object\n      description: Storage record\n    StorageRecordVersions:\n      type: object\n      properties:\n        recordId:\n          type: string\n        versions:\n          type: array\n          items:\n            type: integer\n            format: int64\n      description: Storage record versions.\n    StorageRecord:\n      type: object\n      required:\n        - acl\n        - data\n        - kind\n        - legal\n      properties:\n        id:\n          type: string\n          example: tenant1:well:123456789\n          description: \u003e-\n            Unique identifier in whole Data Lake. When not provided, Data Lake\n            will create and assign an id to the record. Must follow the naming\n            convention: {OSDU-Account-Id}:{object-type}:{uuid}.\n          pattern: ^[\\w\\-\\.]+:[\\w-\\.\\/]+:.+$\n        kind:\n          type: string\n          example: tenant1:public:well:1.0.2\n          description: \u003e-\n            Kind of data it is being ingested. Must follow the naming\n            convention:\n            {OSDU-Account-Id}:{dataset-name}:{record-type}:{version}.\n          pattern: ^[\\w\\-\\.]+:[\\w\\-\\.]+:[\\w\\-\\.\\/]+:[0-9]+.[0-9]+.[0-9]+$\n        acl:\n          $ref: '#/components/schemas/StorageAcl'\n        legal:\n          $ref: '#/components/schemas/StorageLegal'\n        data:\n          type: object\n          description: Record payload represented as a list of key-value pairs.\n          additionalProperties:\n            type: object\n        history:\n          $ref: '#/components/schemas/StorageRecordHistory'\n      description: Storage record\n      example:\n        - id: tenant1:well:123456789\n          kind: tenant1:public:well:1.0.2\n          acl:\n            viewers:\n              - my-viewer-group@[OSDU].com\n            owners:\n              - my-owner-group@[OSDU].com\n          legal:\n            legaltags:\n              - sample-legal-tag\n            otherRelevantDataCountries:\n              - US\n          data:\n            msg: hello world from Data Lake\n          history:\n            parents:\n              - OSDU:parent-record:1.0.0\n    StorageAcl:\n      type: object\n      required:\n        - owners\n        - viewers\n      properties:\n        viewers:\n          type: array\n          description: \u003e-\n            List of valid groups which will have view/read privileges over the\n            record.\n          items:\n            type: string\n        owners:\n          type: array\n          description: \u003e-\n            List of valid groups which will have write privileges over the\n            record.\n          items:\n            type: string\n    StorageLegal:\n      type: object\n      properties:\n        legaltags:\n          type: array\n          description: List of legaltag names associated with the record.\n          uniqueItems: true\n          items:\n            type: string\n        otherRelevantDataCountries:\n          type: array\n          description: \u003e-\n            List of other relevant data countries. Must have 2 values: where the\n            data was ingested from and where Data Lake stores the data.\n          uniqueItems: true\n          items:\n            type: string\n    StorageRecordHistory:\n      type: object\n      properties:\n        parents:\n          type: array\n          description: \u003e-\n            List of parent records. Must follow the naming convention:\n            {parent-record-id}:{parent-record-version}.\n          uniqueItems: true\n          items:\n            type: string\n    StorageRecordBulkUpdateParam:\n      type: object\n      required:\n        - query\n        - ops\n      properties:\n        query:\n          $ref: '#/components/schemas/StorageRecordQuery'\n        ops:\n          type: array\n          description: List of operations for records pathc update\n          items:\n            $ref: '#/components/schemas/StoragePatchOperation'\n      description: Patch update input information\n      example:\n        query:\n          - ids:\n              - tenant:type:unique-identifier:version\n        ops:\n          - op: replace or add or remove\n            path: /acl/viewers or /acl/owners or /legal/legaltags\n            value:\n              - value1\n              - value2\n              - value3\n          - op: replace or add\n            path: /tags\n            value:\n              - key1:value1\n              - key2:value2\n              - key3:value3\n          - op: remove\n            path: /tags\n            value:\n              - key1\n              - key2\n              - key3\n    StoragePatchOperation:\n      type: object\n      required:\n        - op\n        - path\n        - value\n      properties:\n        op:\n          type: string\n          description: Type of patch operation\n          enum:\n            - add\n            - replace\n            - remove\n        path:\n          type: string\n          description: Path for batch operation\n        value:\n          type: array\n          description: Path for batch operation\n          items:\n            type: string\n      description: Patch api operation specific information\n    StorageBulkUpdateRecordsResponse:\n      type: object\n      properties:\n        recordCount:\n          type: integer\n          format: int32\n          description: Number of records which updated successfully.\n        recordIds:\n          type: array\n          description: List of successfully updated record ids.\n          items:\n            type: string\n        notFoundRecordIds:\n          type: array\n          description: List of record ids for whom RecordMetadata was not found\n          items:\n            type: string\n        unAuthorizedRecordIds:\n          type: array\n          description: List of record ids for whom user does not has owner permissions\n          items:\n            type: string\n        lockedRecordIds:\n          type: array\n          description: List of locked record ids\n          items:\n            type: string\n      description: Result of the record batch update request.\n    StorageRecordQuery:\n      type: object\n      required:\n        - ids\n      properties:\n        ids:\n          type: array\n          description: Records ids for whom patch operations going to be applied\n          items:\n            type: string\n      description: Patch api query specific information\n    SearchAppError:\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        reason:\n          type: string\n        message:\n          type: string\n    SearchQueryResponse:\n      type: object\n      properties:\n        results:\n          type: array\n          items:\n            type: object\n            additionalProperties:\n              type: object\n        totalCount:\n          type: integer\n          format: int64\n    SearchByBoundingBox:\n      description: \u003e-\n        A spatial filter criteria to allow to filter documents based on a point\n        location within a bounding box.\n      type: object\n      required:\n        - topLeft\n        - bottomRight\n      properties:\n        topLeft:\n          $ref: '#/components/schemas/SearchPoint'\n        bottomRight:\n          $ref: '#/components/schemas/SearchPoint'\n    SearchByDistance:\n      description: \u003e-\n        A spatial filter criteria to filter documents that exist within a\n        specific distance from a geo point.\n      type: object\n      required:\n        - point\n      properties:\n        distance:\n          type: number\n          format: double\n          minimum: 0\n        point:\n          $ref: '#/components/schemas/SearchPoint'\n    SearchByGeoPolygon:\n      description: \u003e-\n        A spatial filter criteria to filter documents which falls within a\n        polygon of points.\n      type: array\n      items:\n        $ref: '#/components/schemas/SearchPoint'\n      required:\n        - points\n      properties:\n        points:\n          type: array\n          items:\n            $ref: '#/components/schemas/SearchPoint'\n    SearchPoint:\n      description: Geo-point with latitude and longitude\n      type: object\n      properties:\n        latitude:\n          type: number\n          format: double\n          minimum: -90\n          maximum: 90\n        longitude:\n          type: number\n          format: double\n          minimum: -180\n          maximum: 180\n    SearchQueryRequest:\n      description: Json object to query the Search API\n      type: object\n      required:\n        - kind\n      properties:\n        offset:\n          type: integer\n          format: int32\n          minimum: 0\n          description: The starting offset from which to return results\n        kind:\n          type: string\n          description: The kind of the record to query e.g. 'tenant1:test:well:1.0.0'.\n        limit:\n          type: integer\n          format: int32\n          minimum: 0\n          description: \u003e-\n            The maximum number of results to return from the given offset. If no\n            limit is provided, then it will return 10 items. Max number of items\n            which can be fetched by the query is 1000.\n        query:\n          type: string\n          description: The query string in Lucene query string syntax.\n        spatialFilter:\n          $ref: '#/components/schemas/SearchSpatialFilter'\n        returnedFields:\n          type: array\n          items:\n            type: string\n          description: The fields on which to project the results.\n      example:\n        offset: 10\n        kind: tenant1:test:well:1.0.0\n        limit: 30\n        query: Status:Active\n        spatialFilter:\n          field: Location\n          byBoundingBox:\n            topLeft:\n              latitude: 37.450727\n              longitude: -122.174762\n            bottomRight:\n              latitude: 36.450727\n              longitude: 122.174762\n        returnedFields:\n          - Location\n    SearchSpatialFilter:\n      description: \u003e-\n        This filter is used to filter geo-point geo data which supports lat/lon\n        pairs. The queries in this group are Geo Distance, Geo Polygon and\n        Bounding Box. Only one spatial criteria can be used while defining\n        filter.\n      type: object\n      required:\n        - field\n      properties:\n        field:\n          type: string\n          description: geo-point field in the index on which filtering will be performed.\n        byBoundingBox:\n          $ref: '#/components/schemas/SearchByBoundingBox'\n        byDistance:\n          $ref: '#/components/schemas/SearchByDistance'\n        byGeoPolygon:\n          $ref: '#/components/schemas/SearchByGeoPolygon'\n    SearchCursorQueryResponse:\n      type: object\n      properties:\n        cursor:\n          type: string\n        results:\n          type: array\n          items:\n            type: object\n            additionalProperties:\n              type: object\n        totalCount:\n          type: integer\n          format: int64\n    SearchCursorQueryRequest:\n      description: Json object to query the Search API\n      type: object\n      required:\n        - kind\n      properties:\n        cursor:\n          type: string\n          description: The cursor value returned from a previous query.\n        kind:\n          type: string\n          description: The kind of the record to query e.g. 'tenant1:test:well:1.0.0'.\n        limit:\n          type: integer\n          format: int32\n          minimum: 0\n          description: \u003e-\n            The maximum number of results to return from the given offset. If no\n            limit is provided, then it will return 10 items. Max number of items\n            which can be fetched by the query is 1000.\n        query:\n          type: string\n          description: The query string in Lucene query string syntax.\n        spatialFilter:\n          $ref: '#/components/schemas/SearchSpatialFilter'\n        returnedFields:\n          type: array\n          items:\n            type: string\n          description: The fields on which to project the results.\n      example:\n        cursor: yyyyyyy\n        kind: tenant1:test:well:1.0.0\n        limit: 30\n        query: Status:Active\n        spatialFilter:\n          field: Location\n          byBoundingBox:\n            topLeft:\n              latitude: 37.450727\n              longitude: -122.174762\n            bottomRight:\n              latitude: 36.450727\n              longitude: 122.174762\n        returnedFields:\n          - Location\n    SchemaError:\n      type: object\n      properties:\n        message:\n          type: string\n        reason:\n          type: string\n        domain:\n          type: string\n    SchemaErrorModel:\n      type: object\n      properties:\n        errors:\n          type: array\n          items:\n            $ref: '#/components/schemas/SchemaError'\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string\n    SchemaErrorResponseFormat:\n      type: object\n      properties:\n        error:\n          $ref: '#/components/schemas/SchemaErrorModel'\n      description: An error that occurs during normal application logic\n    SchemaInfoResponse:\n      description: The response for a GET schema request\n      title: SchemaInfo Response\n      properties:\n        schemaInfos:\n          type: array\n          items:\n            $ref: '#/components/schemas/SchemaInfo'\n        offset:\n          type: integer\n          description: The offset for the next query\n          title: Offset\n          minimum: 0\n        count:\n          type: integer\n          description: The number of schema versions in this response\n          title: Count\n          minimum: 0\n        totalCount:\n          type: integer\n          description: The total number of entity type codes in the repositories\n          title: Count\n          minimum: 0\n    SchemaInfo:\n      type: object\n      required:\n        - schemaIdentity\n        - status\n      properties:\n        createdBy:\n          type: string\n          example: user@opendes.com\n          description: \u003e-\n            The user who created the schema. This value is taken from API caller\n            token.\n        dateCreated:\n          type: string\n          format: date-time\n          example: '2019-05-23T11:16:03.000Z'\n          description: The UTC date time of the entity creation\n        schemaIdentity:\n          $ref: '#/components/schemas/SchemaIdentity'\n        scope:\n          type: string\n          example: INTERNAL\n          description: \u003e-\n            Schema Scope - is it internal or shared. This is a system defined\n            attribute based on partition-id passed.\n          enum:\n            - INTERNAL\n            - SHARED\n        status:\n          type: string\n          description: Schema lifecycle status\n          enum:\n            - PUBLISHED\n            - OBSOLETE\n            - DEVELOPMENT\n        supersededBy:\n          $ref: '#/components/schemas/SchemaIdentity'\n      title: Schema Info\n      description: Schema info including status, creation and schemaIdentity\n    SchemaIdentity:\n      type: object\n      required:\n        - authority\n        - entityType\n        - source\n        - schemaVersionMajor\n        - schemaVersionMinor\n        - schemaVersionPatch\n      properties:\n        authority:\n          type: string\n          example: osdu\n          description: Entity authority\n        entityType:\n          type: string\n          example: wellbore\n          description: EntityType Code\n        id:\n          type: string\n          example: osdu:wks:wellbore:1.0.0\n          description: A read-only system defined id used for referencing of a schema.\n        schemaVersionMajor:\n          type: integer\n          example: 1\n          description: Major Schema Version Number\n        schemaVersionMinor:\n          type: integer\n          example: 1\n          description: Minor Schema Version Number\n        schemaVersionPatch:\n          type: integer\n          example: 0\n          description: Patch Schema Version Number\n        source:\n          type: string\n          example: wks\n          description: Entity source\n      title: SchemaIdentity\n      description: Schema authority source and type description\n    SchemaRequest:\n      type: object\n      required:\n        - schema\n        - schemaInfo\n      properties:\n        schema:\n          type: object\n        schemaInfo:\n          $ref: '#/components/schemas/SchemaInfo'\n      title: SchemaRequest\n      example:\n        schemaInfo:\n          schemaIdentity:\n            authority: osdu\n            source: wks\n            entityType: wellbore\n            schemaVersionMajor: 1\n            schemaVersionMinor: 0\n            schemaVersionPatch: 0\n          status: PUBLISHED\n        schema: {}\n    FileExtensionProperties:\n      title: Extension Property\n      type: object\n      description: \u003e-\n        Useful for providing the user defined attributes to be associated with\n        the file metadata record.\n      properties:\n        kind:\n          title: Extension Schema ID\n          type: string\n          description: The schema ID for this schema fragment\n          example: os:npd:csvFileExtDetails:1.0.0\n    FileMetaItem:\n      title: Frame of Reference Meta Data Item (FoR of File)\n      required:\n        - kind\n        - persistableReference\n      type: object\n      properties:\n        kind:\n          title: Reference Kind\n          type: string\n          description: The kind of reference, unit, measurement, CRS or azimuth reference.\n          enum:\n            - CRS\n            - Unit\n            - Measurement\n            - AzimuthReference\n            - DateTime\n        name:\n          title: Name or Symbol\n          type: string\n          description: The name of the CRS or the symbol/name of the unit\n          example: '[\"NAD27 * OGP-Usa Conus / North Dakota South [32021,15851]\",\"ft\"]'\n        persistableReference:\n          title: Persistable Reference\n          type: string\n          description: \u003e-\n            The persistable reference string uniquely identifying the CRS or\n            Unit\n          example: \u003e-\n            {\"scaleOffset\":{\"scale\":0.3048006096012192,\"offset\":0.0},\"symbol\":\"ftUS\",\"baseMeasurement\":{\"ancestry\":\"Length\",\"type\":\"UM\"},\"type\":\"USO\"}\n        propertyNames:\n          title: Attribute Names\n          type: array\n          description: \u003e-\n            The list of property names, to which this meta data item provides\n            Unit/CRS context to. Data structures, which come in a single frame\n            of reference, can register the property name, others require a full\n            path like \"data.structureA.propertyB\" to define a unique context.\n          example:\n            - elevationFromMsl\n            - '\"totalDepthMdDriller'\n            - wellHeadProjected\n          items:\n            type: string\n        propertyValues:\n          title: Attribute Names\n          type: array\n          description: \u003e-\n            The list of property values, to which this meta data item provides\n            Unit/CRS context to. Typically a unit symbol is a value to a data\n            structure; this symbol is then registered in this propertyValues\n            array and the persistableReference provides the absolute reference.\n          example:\n            - F\n            - ftUS\n            - deg\n          items:\n            type: string\n        uncertainty:\n          title: Uncertainty\n          type: number\n          description: The uncertainty of the values measured given the unit or CRS unit.\n      description: \u003e-\n        A meta data item, which allows the association of named properties or\n        property values to a Unit/Measurement/CRS/Azimuth/Time context.\n    FileLegal:\n      title: Legal Meta Data\n      type: object\n      properties:\n        legaltags:\n          title: Legal Tags\n          type: array\n          description: The list of legal tags, see compliance API.\n          items:\n            type: string\n        otherRelevantDataCountries:\n          title: Other Relevant Data Countries\n          type: array\n          description: \u003e-\n            The list of other relevant data countries using the ISO 2-letter\n            codes, see compliance API.\n          items:\n            type: string\n        status:\n          title: Legal Status\n          type: string\n          description: The legal status.\n      description: Legal meta data like legal tags, relevant other countries, legal status.\n    FileAcl:\n      required:\n        - owners\n        - viewers\n      type: object\n      properties:\n        viewers:\n          type: array\n          description: \u003e-\n            List of valid groups which will have view/read privileges over the\n            record.\n          items:\n            type: string\n        owners:\n          type: array\n          description: \u003e-\n            List of valid groups which will have write privileges over the\n            record.\n          items:\n            type: string\n    FileMetadataResponse:\n      title: File Metadata response\n      properties:\n        Id:\n          type: string\n    FileDownloadResponse:\n      title: Download URL response\n      properties:\n        SignedURL:\n          type: string\n    FileError:\n      type: object\n      properties:\n        message:\n          type: string\n        reason:\n          type: string\n        domain:\n          type: string\n    FileErrorModel:\n      type: object\n      properties:\n        errors:\n          type: array\n          items:\n            $ref: '#/components/schemas/FileError'\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string\n    FileApplicationError:\n      type: object\n      properties:\n        error:\n          $ref: '#/components/schemas/FileErrorModel'\n      description: An error that occurs during normal application logic.\n    FileToManyRelationship:\n      properties:\n        confidences:\n          title: Relationship Confidences\n          type: array\n          description: \u003e-\n            The confidences of the relationships. Keep all the arrays ordered\n            and aligned.\n          items:\n            type: number\n        ids:\n          title: Related Object Id\n          type: array\n          description: \u003e-\n            The ids of the related objects. It is populated for an explicit\n            relationship where the target entity is present as a record in the\n            data ecosystem. Keep all the arrays ordered and aligned.\n          format: link\n          items:\n            type: string\n        names:\n          title: Related Object Names\n          type: array\n          description: \u003e-\n            The names or natural keys of the related objects. Keep all the\n            arrays ordered and aligned.\n          items:\n            type: string\n        versions:\n          title: To Many Relationship\n          type: array\n          description: \u003e-\n            The specific version numbers of the related instances. This is only\n            specified if a specific version is required. If not populated the\n            last version is implied. Keep all the arrays ordered and aligned.\n          items:\n            type: number\n            format: int64\n      description: \u003e-\n        A relationship from this entity to many other entities either by natural\n        key (name) or explicit id, optionally classified by confidence level.\n    FileToOneRelationship:\n      title: To One Relationship\n      type: object\n      properties:\n        confidence:\n          title: Relationship Confidence\n          type: number\n          description: \u003e-\n            The confidence of the relationship. If the property is absent a\n            well-known relation is implied.\n          example: 1\n        id:\n          title: Related Object Id\n          type: string\n          description: \u003e-\n            The id of the related object in the Data Ecosystem. If set, the id\n            has priority over the natural key in the name property.\n          format: link\n          example: data_partition:namespace:entity_845934c40e8d922bc57b678990d55722\n        name:\n          title: Related Object Name\n          type: string\n          description: \u003e-\n            The name or natural key of the related object. This property is\n            required if the target object id could not (yet) be identified.\n          example: Survey ST2016\n        version:\n          title: Entity Version Number\n          type: number\n          description: \u003e-\n            The version number of the related entity. If no version number is\n            specified, the last version is implied.\n          format: int64\n      description: \u003e-\n        A relationship from this entity to one other entity either by natural\n        key (name) or id, optionally classified by confidence level\n    FileRelationships:\n      title: Relationships\n      type: object\n      properties:\n        parentEntity:\n          $ref: '#/components/schemas/FileToOneRelationship'\n        relatedItems:\n          $ref: '#/components/schemas/FileToManyRelationship'\n      description: All relationships from this entity.\n    FileDeliveryGetFileSignedURLRequest:\n      type: object\n      properties:\n        srn:\n          description: A list of SRNs to fetch\n          type: array\n          items:\n            type: string\n      example:\n        srns:\n          - srn:some-valid-srn\n          - srn:some-invalid-srn\n    FileDeliveryGetFileSignedURLResponse:\n      type: object\n      properties:\n        unprocessed:\n          description: A list of SRNs which could not be processed\n          type: array\n          items:\n            type: string\n        processed:\n          description: Each key is equal to an SRN that was able to be processed\n          type: object\n          additionalProperties:\n            description: Signed URL and/or related properties for the processed SRN\n            type: object\n            properties:\n              signedUrl:\n                type: string\n      example:\n        unprocessed:\n          - srn:some-invalid-srn\n        processed:\n          srn:some-valid-srn:\n            signedUrl: https://...\n    FileDetails:\n      title: Opaque/Generic File Content Details\n      type: object\n      properties:\n        TargetKind:\n          title: Target Schema ID\n          type: string\n          description: The target kind or schema ID which is to be used by the parser.\n          example: os:npd:wellbore:1:*.*\n        FileType:\n          title: File Type\n          type: string\n          description: Type of File to decide what kind of ingestion to be triggered\n          example: csv\n        FrameOfReference:\n          title: Frame of Reference for data present in file.\n          type: array\n          description: \u003e-\n            The list metaItem definitions which maps a named frame of reference\n            symbol or name to the self-contained persistableReference.\n          items:\n            $ref: '#/components/schemas/FileMetaItem'\n        ExtensionProperties:\n          $ref: '#/components/schemas/FileExtensionProperties'\n        ParentReference:\n          title: Parent Reference\n          type: string\n          description: The parent reference for this file.\n          example: CSBE0417\n      description: Further information about File being uploaded.\n    Files:\n      title: File Metadata\n      required:\n        - Name\n        - DatasetProperties\n        - Endian\n      type: object\n      properties:\n        Name:\n          type: string\n          description: \u003e-\n            An optional name of the dataset, e.g. a user friendly file or file\n            collection name.\n        Description:\n          type: string\n          description: An optional, textual description of the dataset.\n        TotalSize:\n          type: string\n          description: \u003e-\n            Total size of the dataset in bytes; for files it is the same as\n            declared in FileSourceInfo.FileSize or the sum of all individual\n            files. Implemented as string. The value must be convertible to a\n            long integer (sizes can become very large).\n          pattern: ^[0-9]+$\n        EncodingFormatTypeID:\n          type: string\n          description: Encoding Format Type ID\n          pattern: ^srn:\u003cnamespace\u003e:reference-data\\\\/EncodingFormatType:[^:]+:[0-9]*$\n        SchemaFormatTypeID:\n          type: string\n          description: Schema Format Type ID\n          pattern: ^srn:\u003cnamespace\u003e:reference-data\\\\/SchemaFormatType:[^:]+:[0-9]*$\n        Endian:\n          description: \u003e-\n            Endianness of binary value. Enumeration- \\BIG\\ \\LITTLE\\.  If absent\n            applications will need to interpret from context indicators.\n          type: string\n          enum:\n            - BIG LITTLE\n        Checksum:\n          description: MD5 checksum of file bytes - a 32 byte hexadecimal number\n          type: string\n          pattern: ^[0-9a-fA-F]32}$\n        DatasetProperties:\n          type: object\n          required:\n            - FileSourceInfo\n          properties:\n            FileSourceInfo:\n              type: object\n              required:\n                - FileSource\n              properties:\n                Name:\n                  type: string\n                  description: user-friendly file name.\n                PreLoadFilePath:\n                  type: string\n                  description: \u003e-\n                    File system path to the data file as it existed before\n                    loading to the data platform\n                FileSource:\n                  type: string\n                  description: Relative file path for the data in the file\n                PreloadFileCreateUser:\n                  type: string\n                  description: \u003e-\n                    Optional user name or reference, who created the file prior\n                    to up-loading to the platform.\n                PreloadFileCreateDate:\n                  type: string\n                  description: \u003e-\n                    Optional create date and time of the file prior to uploading\n                    to the platform.\n                PreloadFileModifyUser:\n                  type: string\n                  description: \u003e-\n                    Optional user name or reference, who last modified the file\n                    prior to up-loading to the platform.\n                PreloadFileModifyDate:\n                  type: string\n                  description: \u003e-\n                    Optional last modified date and time of the file prior to\n                    up-loading to the platform.\n                FileSize:\n                  type: string\n                  description: \u003e-\n                    Length of file in bytes. Implemented as string. The value\n                    must be convertible to a long integer (sizes can become very\n                    large).\n                EncodingFormatTypeID:\n                  type: string\n                  description: Encoding Format Type ID\n                  pattern: \u003e-\n                    ^srn:\u003cnamespace\u003e:reference-data\\\\/EncodingFormatType:[^:]+:[0-9]*$\n        ExtensionProperties:\n          title: File DMS Extension Properties\n          type: object\n          properties:\n            Name:\n              description: \u003e-\n                The name of the file. Note- this is an additional property,\n                which is not part of OSDU File.1.0.0\n              example: File\n              title: File Name\n              type: string\n            Classification:\n              description: The well-known entity classification code.\n              example: Raw File\n              title: File Classification\n              type: string\n            Description:\n              description: A text describing the entity.\n              example: An text further describing this file example.\n              title: Entity Description\n              type: string\n            ExternalIds:\n              description: \u003e-\n                An array of identities (e.g. some kind if URL to be resolved in\n                an external data store) which links to external realizations of\n                the same entity.\n              format: link\n              items:\n                type: string\n              title: Array of External IDs\n              type: array\n            FileDateCreated:\n              description: The UTC date time of the file creation\n              example: '2013-03-22T11:16:03.000Z'\n              format: date-time\n              title: Creation Date and Time\n              type: string\n            FileDateModified:\n              description: The UTC date time of the last file modification\n              example: '2013-03-22T11:16:03.000Z'\n              format: date-time\n              title: Last Modification Date and Time\n              type: string\n            FileContentsDetails:\n              $ref: '#/components/schemas/FileDetails'\n            relationships:\n              $ref: '#/components/schemas/FileRelationships'\n      description: \u003e-\n        The file data container containing all necessary details of the file\n        record\n    FileMetadata:\n      description: Metadata record.\n      type: object\n      required:\n        - legal\n        - data\n        - acl\n        - kind\n      properties:\n        id:\n          type: string\n          readOnly: true\n          description: \u003e-\n            Unique identifier generated by the system for the file metadata\n            record.\n        kind:\n          type: string\n          example: osdu:wks:dataset--File.Generic:1.0.0\n          description: \u003e-\n            Kind of data being ingested. Must follow the naming\n            convention:data-Partition-Id}:dataset-name}:record-type}:version}.\n        acl:\n          $ref: '#/components/schemas/FileAcl'\n        legal:\n          $ref: '#/components/schemas/FileLegal'\n        data:\n          $ref: '#/components/schemas/Files'\n        ancestry:\n          $ref: '#/components/schemas/FileAncestry'\n    FileRecordVersion:\n      description: Metadata record.\n      type: object\n      properties:\n        id:\n          type: string\n          readOnly: true\n          description: \u003e-\n            Unique identifier generated by the system for the file metadata\n            record.\n        kind:\n          type: string\n          example: osdu:wks:dataset--File.Generic:1.0.0\n          description: \u003e-\n            Kind of data being ingested. Must follow the naming\n            convention:data-Partition-Id}:dataset-name}:record-type}:version}.\n        acl:\n          $ref: '#/components/schemas/FileAcl'\n        legal:\n          $ref: '#/components/schemas/FileLegal'\n        data:\n          $ref: '#/components/schemas/Files'\n        ancestry:\n          $ref: '#/components/schemas/FileAncestry'\n        version:\n          description: The version number of this OSDU resource; set by the framework.\n          title: Version Number\n          type: integer\n          format: int64\n          example: 1831253916104085\n    FileID:\n      type: string\n    FileLocationRequest:\n      type: object\n      properties:\n        FileID:\n          $ref: '#/components/schemas/FileID'\n    FileSourceLocationResponse:\n      type: object\n      properties:\n        FileID:\n          $ref: '#/components/schemas/FileID'\n        Location:\n          type: object\n          additionalProperties:\n            type: string\n    FileLandingZoneLocationResponse:\n      type: object\n      properties:\n        FileID:\n          $ref: '#/components/schemas/FileID'\n        Location:\n          type: object\n          additionalProperties:\n            type: string\n          example:\n            SignedURL: GCS signed URL\n    FileAncestry:\n      type: object\n      properties:\n        parents:\n          type: array\n          items:\n            type: string\n    WorkflowTriggerRequest:\n      title: Workflow Trigger Request\n      type: object\n      properties:\n        runId:\n          type: string\n          description: Optional. Explicit setting up workflow run id.\n        executionContext:\n          type: object\n          properties:\n            key1:\n              type: string\n              example: value1\n          description: Map to configure workflow speciffic key value pairs.\n    Workflow:\n      type: object\n      title: Workflow\n      properties:\n        workflowId:\n          readOnly: true\n          description: System generated id, which uniquely recongnizes a workflow.\n          type: string\n        workflowName:\n          description: Workfow name given as input from user while deploying the workflow.\n          type: string\n        registrationInstructions:\n          description: |\n            Workfow registration instructions which could contains:\n            - Name of already registered Airflow DAG\n            - Cotent of python DAG file\n            - etc\n            By default this is Airflow DAG named `workflowName`\n          type: object\n          properties:\n            dagName:\n              type: string\n              example: osdu-default\n            dagContent:\n              type: string\n              example: null\n            etc:\n              type: string\n        description:\n          type: string\n          description: \u003e-\n            Description of workflow provided by user at time of creation of\n            workflow.\n        createdby:\n          readOnly: true\n          type: string\n          description: System captured user info who created workflow.\n        creationTimestamp:\n          readOnly: true\n          type: number\n          description: System date of creation of workflow.Epoch tiemstamp.\n        version:\n          readOnly: true\n          type: string\n          description: \u003e-\n            Sematic versions of workflow. These numbers are assigned in\n            increasing order and correspond to edits\\modifications to workflow\n            definitions.\n    WorkflowRun:\n      title: Workflow Run\n      description: Reperesent one workflow run.\n      type: object\n      properties:\n        workflowId:\n          readOnly: true\n          type: string\n          description: Workflow id for the workflow.\n        runId:\n          readOnly: true\n          type: string\n          description: Run id for the workflow.\n        startTimestamp:\n          readOnly: true\n          type: number\n          description: Start timestamp of the workflow run.Epoch time stamp.\n        endTimestamp:\n          readOnly: true\n          type: number\n          description: End timestamp of the workflow run.Epoch timestamp.\n        status:\n          description: Task execution status\n          enum:\n            - INPROGRESS\n            - PARTIAL_SUCCESS\n            - SUCCESS\n            - FAILED\n            - SUBMITTED\n          title: status\n          type: string\n        submittedBy:\n          readOnly: true\n          type: string\n          description: System captured user details which triggered the  run.\n    WorkflowError:\n      title: Error\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        errors:\n          type: array\n          items:\n            $ref: '#/components/schemas/WorkflowErrorDetails'\n        message:\n          type: string\n    WorkflowErrorDetails:\n      title: Error Details\n      type: object\n      properties:\n        message:\n          type: string\n        reason:\n          type: string\n    RegisterDdms:\n      type: object\n      required:\n        - schema\n      properties:\n        id:\n          type: string\n          pattern: ^[A-Za-z0-9-]{2,50}\n        name:\n          type: string\n          pattern: ^[A-Za-z0-9- ]{2,50}\n        description:\n          type: string\n          pattern: ^[A-Za-z0-9. ]{0,255}\n        contactEmail:\n          type: string\n        interfaces:\n          type: array\n          items:\n            $ref: '#/components/schemas/RegisterDdmsInterface'\n      example:\n        id: example-id-123\n        name: example-name\n        description: example-description\n        contactEmail: abc@test.com\n        interfaces:\n          - entityType: wellbore\n            schema: {}\n    RegisterAppError:\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        reason:\n          type: string\n        message:\n          type: string\n      description: An error that occurs during normal application logic\n    RegisterDdmsInterface:\n      type: object\n      required:\n        - schema\n      properties:\n        entityType:\n          type: string\n          pattern: ^[A-Za-z0-9-]{2,50}\n        schema:\n          type: object\n    RegisterCreateAction:\n      type: object\n      required:\n        - schema\n      properties:\n        id:\n          type: string\n          pattern: ^[A-Za-z0-9-]{2,50}\n        name:\n          type: string\n          pattern: ^[A-Za-z0-9- ]{2,50}\n        description:\n          type: string\n          pattern: ^[A-Za-z0-9. ]{0,255}\n        contactEmail:\n          type: string\n        img:\n          type: string\n          pattern: \u003e-\n            ^(https:\\/\\/)[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$\u0026\\(\\)\\*\\+,;=.]+$\n          description: \u003e-\n            Reference link to an image file that can be usd in an UI to\n            represent the action.\n        url:\n          type: string\n          pattern: \u003e-\n            ^(https:\\/\\/)[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$\u0026\\(\\)\\*\\+,;=.]+$\n          example: https://myapp.osdu.com/action/{type}/{id}\n        filter:\n          $ref: '#/components/schemas/RegisterFilter'\n      example:\n        id: petrel-launch-project\n        name: Petrel Project\n        description: \u003e-\n          This action launches the Petrel projects landing page that holds the\n          selected data.\n        img: https://mycdn.com/img.png\n        contactEmail: abc@test.com\n        url: https://myapp.osdu.com/action/{type}/{id}\n        filter:\n          entityType:\n            - regularheightfield\n          source:\n            - petrel\n          version:\n            - '*'\n    RegisterTestAction:\n      type: object\n      required:\n        - schema\n      properties:\n        action:\n          $ref: '#/components/schemas/RegisterCreateAction'\n        testPayload:\n          type: object\n      example:\n        action:\n          id: petrel-launch-project\n          name: Petrel Project\n          description: \u003e-\n            This action launches the Petrel projects landing page that holds the\n            selected data.\n          contactEmail: abc@test.com\n          img: https://mycdn.com/img.png\n          url: \u003e-\n            https://myapp.osdu.com/action/{data.uri:^(?:[^\\/]*(?:\\/(?:\\/[^\\/]*\\/?)?)?([^?]+)(?:\\??.+)?)$}\n          filter:\n            entityType:\n              - regularheightfield\n              - project\n            source:\n              - petrel\n            version:\n              - '*'\n        testPayload:\n          id: common:regularheightfield:123456\n          kind: common:petrel:regularheightfield:1.0.0\n          data:\n            uri: https://myproj.com/abc123\n    RegisterTestActionResult:\n      type: object\n      required:\n        - schema\n      properties:\n        url:\n          type: string\n        errors:\n          type: string\n      example:\n        url: https://myapp.osdu.com/action/abc123\n        errors: ''\n    RegisterAction:\n      type: object\n      required:\n        - schema\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        description:\n          type: string\n        contactEmail:\n          type: string\n        img:\n          type: string\n        url:\n          type: string\n          example: https://myapp.osdu.com/action/{type}/{id}\n        filter:\n          $ref: '#/components/schemas/RegisterFilter'\n        createdOnEpoch:\n          type: object\n          properties:\n            seconds:\n              type: integer\n            nanos:\n              type: integer\n    RegisterRecord:\n      type: object\n      required:\n        - schema\n      properties:\n        id:\n          type: string\n        kind:\n          type: string\n        acl:\n          $ref: '#/components/schemas/RegisterAcl'\n        legal:\n          $ref: '#/components/schemas/RegisterLegal'\n        data:\n          $ref: '#/components/schemas/RegisterData'\n      example:\n        id: common:regularheightfield:123456\n        kind: common:petrel:regularheightfield:1.0.0\n        acl:\n          viewers:\n            - data.default.viewers@{datapartition}.{domain}.com\n          owners:\n            - data.default.owners@{datapartition}.{domain}.com\n        legal:\n          legaltags:\n            - common-sample-legaltag\n          otherRelevantDataCountries:\n            - US\n        data:\n          msg: Hello\n          uri: https://myproj.com/abc123\n    RegisterAcl:\n      type: object\n      required:\n        - schema\n      properties:\n        viewers:\n          type: array\n          items:\n            type: string\n            example:\n              - data.default.viewers@{datapartition}.{domain}.com\n        owners:\n          type: array\n          items:\n            type: string\n            example:\n              - data.default.owners@{datapartition}.{domain}.com\n    RegisterData:\n      type: object\n      required:\n        - schema\n      properties:\n        msg:\n          type: string\n          example: Hello\n        uri:\n          type: string\n          example: https://myproj.com/abc123\n    RegisterLegal:\n      type: object\n      required:\n        - schema\n      properties:\n        legaltags:\n          type: array\n          items:\n            type: string\n            example:\n              - common-sample-legaltag\n        otherRelevantDataCountries:\n          type: array\n          items:\n            type: string\n            example:\n              - US\n    RegisterFilter:\n      type: object\n      required:\n        - schema\n      properties:\n        entityType:\n          type: array\n          items:\n            type: string\n            pattern: ^[a-z0-9-]{0,50}\n            example:\n              - regularheightfield\n        source:\n          type: array\n          items:\n            type: string\n            pattern: ^[a-z0-9-]{0,50}\n            example:\n              - petrel\n        version:\n          type: array\n          items:\n            type: string\n            pattern: ^[0-9.]{0,10}\n            example:\n              - '*'\n    RegisterSubscription:\n      type: object\n      required:\n        - schema\n      properties:\n        name:\n          type: string\n          pattern: ^[A-Za-z0-9- ]{2,50}\n          example: test-subscription\n        description:\n          type: string\n          pattern: ^[A-Za-z0-9. ]{0,255}\n          example: test description\n        topic:\n          type: string\n          example: data-changed-v1\n        pushEndpoint:\n          type: string\n          example: https://myListener.com\n        secret:\n          $ref: '#/components/schemas/RegisterSecret'\n    RegisterGetSubscriptionResult:\n      type: object\n      required:\n        - schema\n      properties:\n        id:\n          type: string\n          example: dGVzdC1uYW1l\n        name:\n          type: string\n          example: test-subscription\n        description:\n          type: string\n          example: test description\n        topic:\n          type: string\n          example: data-changed-v1\n        pushEndpoint:\n          type: string\n          example: https://myListener.com\n        createdBy:\n          type: string\n          example: test@myapp.com\n        notificationId:\n          type: string\n          example: de-6ee609b9-620e-477b-86f9-3b8907643a12\n    RegisterSubscriptionCreateResult:\n      type: object\n      required:\n        - schema\n      properties:\n        id:\n          type: string\n          example: dGVzdC1uYW1l\n        name:\n          type: string\n          pattern: ^[A-Za-z0-9- ]{2,50}\n          example: test-subscription\n        description:\n          type: string\n          pattern: ^[A-Za-z0-9. ]{0,255}\n          example: test description\n        topic:\n          type: string\n          example: data-changed-v1\n        pushEndpoint:\n          type: string\n          example: https://myListener.com\n        createdBy:\n          type: string\n          example: test@myapp.com\n        notificationId:\n          type: string\n          example: de-6ee609b9-620e-477b-86f9-3b8907643a12\n        createdOnEpoch:\n          $ref: '#/components/schemas/RegisterCreatedOnEpoch'\n        secret:\n          $ref: '#/components/schemas/RegisterSecret'\n    RegisterSecret:\n      type: object\n      required:\n        - schema\n      properties:\n        secretType:\n          type: string\n          enum:\n            - HMAC\n            - GSA\n        value:\n          type: object\n          example: hmacsecret\n    RegisterCreatedOnEpoch:\n      type: object\n      required:\n        - schema\n      properties:\n        seconds:\n          type: integer\n          example: 1572275081\n        nanos:\n          type: integer\n          example: 51000000\n    RegisterTopic:\n      type: object\n      required:\n        - schema\n      properties:\n        name:\n          type: string\n          example: records-changed\n        description:\n          type: string\n          example: \u003e-\n            This notification is sent whenever a record is created, updated or\n            deleted.\n        state:\n          type: string\n          example: ACTIVE\n        example:\n          type: array\n          items:\n            $ref: '#/components/schemas/RegisterTopicExample'\n    RegisterTopicExample:\n      type: object\n      required:\n        - schema\n      properties:\n        id:\n          type: string\n          example: common:test:123\n        kind:\n          type: string\n          example: common:source:type:1.0.0\n        op:\n          type: string\n          example: deleted\n    NotificationResponseEntity:\n      type: object\n      properties:\n        body:\n          type: object\n        statusCode:\n          type: string\n        statusCodeValue:\n          type: integer\n          format: int32\n",
			"canonicalURL": "/github.com/Azure/osdu-infrastructure@5957262e0c3372a96140805dd08bc71fa36d45d6/-/blob/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/Azure/osdu-infrastructure/blob/5957262e0c3372a96140805dd08bc71fa36d45d6/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"SearchCursorQueryRequest\": parse schema: property \"spatialFilter\": parse schema: resolve \"#/components/schemas/SearchSpatialFilter\": parse schema: property \"byGeoPolygon\": parse schema: resolve \"#/components/schemas/SearchByGeoPolygon\": parse schema: array cannot contain properties"
}