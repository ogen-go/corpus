{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/sidoh/esp8266_milight_hub"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "docs/openapi.yaml",
			"byteSize": 33462,
			"content": "openapi: 3.0.1\ninfo:\n  title: ESP8266 MiLight Hub\n  description: Official documention for MiLight Hub's REST API.\n  contact:\n    email: chris@sidoh.org\n  license:\n    name: MIT\n  version: 1.0.0\nservers:\n  - url: http://milight-hub\ntags:\n  - name: System\n    description: \u003e\n      Routes that return system information and allow you to control the device.\n  - name: Settings\n    description: Read and write settings\n  - name: Device Control\n    description: Control lighting devices\n  - name: Device Control by Alias\n    description: Control lighting devices using aliases rather than raw IDs\n  - name: Raw Packet Handling\n    description: Read and write raw Milight packets\n  - name: Transitions\n    description: Control transitions\nx-tagGroups:\n  - name: Admin\n    tags:\n      - System\n      - Settings\n  - name: Devices\n    tags:\n      - Device Control\n      - Device Control by Alias\n      - Raw Packet Handling\n  - name: Transitions\n    tags:\n      - Transitions\n\npaths:\n  /about:\n    get:\n      tags:\n      - System\n      summary: Get system information\n      responses:\n        200:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/About'\n  /remote_configs:\n    get:\n      tags:\n        - System\n      summary: List supported remote types\n      responses:\n        200:\n          description: success\n          content:\n            applicaiton/json:\n              schema:\n                type: array\n                items:\n                  type: string\n                example:\n                  $ref: '#/components/schemas/RemoteType/enum'\n  /system:\n    post:\n      tags:\n      - System\n      summary: Send a system command\n      description: \u003e\n        Send commands to the system.  Supported commands:\n\n        1. `restart`. Restart the ESP8266.\n\n        1. `clear_wifi_config`. Clears on-board wifi information. ESP8266 will reboot and enter wifi config mode.\n\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n              - command\n              properties:\n                command:\n                  type: string\n                  enum:\n                  - restart\n                  - clear_wifi_config\n      responses:\n        200:\n          description: command handled successfully\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BooleanResponse'\n        400:\n          description: error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BooleanResponse'\n  /settings:\n    get:\n      tags:\n      - Settings\n      summary: Get existing settings\n      responses:\n        200:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Settings'\n    put:\n      tags:\n      - Settings\n      summary: Patch existing settings\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Settings'\n      responses:\n        200:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BooleanResponse'\n    post:\n      tags:\n      - Settings\n      summary: Overwrite existing settings with a file\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Settings'\n      responses:\n        200:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BooleanResponse'\n\n  /gateway_traffic/{remote-type}:\n    get:\n      tags:\n      - Raw Packet Handling\n      summary: Read a packet from a specific remote\n      description:\n        Read a packet from the given remote type.  Does not return a response until a packet is read.\n        If `remote-type` is unspecified, will read from all remote types simultaneously.\n      parameters:\n        - $ref: '#/components/parameters/RemoteType'\n      responses:\n        200:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ReadPacket'\n  /gateway_traffic:\n    get:\n      tags:\n      - Raw Packet Handling\n      summary: Read a packet from any remote\n      description:\n        Read a packet from any remote type.  Does not return a response until a packet is read.\n      responses:\n        200:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ReadPacket'\n\n  /gateways/{device-id}/{remote-type}/{group-id}:\n    parameters:\n      - $ref: '#/components/parameters/DeviceId'\n      - $ref: '#/components/parameters/RemoteType'\n      - $ref: '#/components/parameters/GroupId'\n    get:\n      tags:\n        - Device Control\n      summary:\n        Get device state\n      description:\n        If `blockOnQueue` is provided, a response will not be returned until any unprocessed\n        packets in the command queue are finished sending.\n      parameters:\n        - $ref: '#/components/parameters/BlockOnQueue'\n      responses:\n        200:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GroupState'\n    put:\n      tags:\n        - Device Control\n      summary:\n        Patch device state\n      description:\n        Update state of the bulbs with the provided parameters.  Existing parameters will be\n        unchanged.\n\n        if `blockOnQueue` is set to true, the response will not return until packets corresponding\n        to the commands sent are processed, and the updated `GroupState` will be returned.  If\n        `blockOnQueue` is false or not provided, a simple response indicating success will be\n        returned.\n      parameters:\n        - $ref: '#/components/parameters/BlockOnQueue'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              allOf:\n                - $ref: '#/components/schemas/GroupState'\n                - $ref: '#/components/schemas/GroupStateCommands'\n      responses:\n        400:\n          description: error with request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BooleanResponse'\n        200:\n          description: \u003e\n            Success.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/BooleanResponse'\n                  - $ref: '#/components/schemas/GroupState'\n    delete:\n      tags:\n        - Device Control\n      summary:\n        Delete kept state\n      description:\n        Usets all known values for state fields for the corresponding device.  If MQTT is\n        configured, the retained state message corresponding to this device will also be\n        deleted.\n      responses:\n        200:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BooleanResponse'\n  /gateways/{device-alias}:\n    parameters:\n      - $ref: '#/components/parameters/DeviceAlias'\n    get:\n      tags:\n        - Device Control by Alias\n      summary: Get device state by alias\n      responses:\n        404:\n          description: provided device alias does not exist\n        200:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GroupState'\n    put:\n      tags:\n        - Device Control by Alias\n      summary: Patch device state by alias\n      parameters:\n        - $ref: '#/components/parameters/BlockOnQueue'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              allOf:\n                - $ref: '#/components/schemas/GroupState'\n                - $ref: '#/components/schemas/GroupStateCommands'\n      responses:\n        400:\n          description: error with request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BooleanResponse'\n        200:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GroupState'\n    delete:\n      tags:\n        - Device Control by Alias\n      summary: Delete kept state for alias\n      description:\n        Usets all known values for state fields for the corresponding device.  If MQTT is\n        configured, the retained state message corresponding to this device will also be\n        deleted.\n      responses:\n        200:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BooleanResponse'\n\n  /raw_commands/{remote-type}:\n    parameters:\n      - $ref: '#/components/parameters/RemoteType'\n    post:\n      tags:\n        - Raw Packet Handling\n      summary: Send a raw packet\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                packet:\n                  type: string\n                  pattern: \"([A-Fa-f0-9]{2}[ ])+\"\n                  description: Raw packet to send\n                  example: '01 02 03 04 05 06 07 08 09'\n                num_repeats:\n                  type: integer\n                  minimum: 1\n                  description: Number of repeated packets to send\n                  example: 50\n      responses:\n        200:\n            description: success\n            content:\n              applicaiton/json:\n                schema:\n                  $ref: '#/components/schemas/BooleanResponse'\n\n\n  /transitions:\n    get:\n      tags:\n        - Transitions\n      summary: List all active transitions\n      responses:\n        200:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/TransitionData'\n    post:\n      tags:\n        - Transitions\n      summary: Create a new transition\n      requestBody:\n        content:\n          application/json:\n            schema:\n              allOf:\n                - $ref: '#/components/schemas/TransitionData'\n                - $ref: '#/components/schemas/BulbId'\n      responses:\n        400:\n          description: error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BooleanResponse'\n        200:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BooleanResponse'\n  /transitions/{id}:\n    parameters:\n      - name: id\n        in: path\n        description: ID of transition.  This will be an auto-incrementing number reset after a restart.\n        schema:\n          type: integer\n        required: true\n    get:\n      tags:\n        - Transitions\n      summary: Get properties for a transition\n      responses:\n        404:\n          description: Provided transition ID not found\n        200:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransitionData'\n    delete:\n      tags:\n        - Transitions\n      summary: Delete a transition\n      responses:\n        404:\n          description: Provided transition ID not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BooleanResponse'\n        200:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BooleanResponse'\n  /firmware:\n    post:\n      tags:\n        - System\n      summary:\n        Update firmware\n      requestBody:\n        description: Firmware file\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                fileName:\n                  type: string\n                  format: binary\n      responses:\n        200:\n          description: success\n        500:\n          description: server error\ncomponents:\n  parameters:\n    DeviceAlias:\n      name: device-alias\n      in: path\n      description: Device alias saved in settings\n      schema:\n        type: string\n      required: true\n    BlockOnQueue:\n      name: blockOnQueue\n      in: query\n      description: If true, response will block on update packets being sent before returning\n      schema:\n        type: boolean\n      required: false\n    GroupId:\n      name: group-id\n      in: path\n      description: \u003e\n        Group ID.  Should be 0-8, depending on remote type.  Group 0 is a \"wildcard\" group.  All bulbs paired with the same device ID will respond to commands sent to Group 0.\n      schema:\n        type: integer\n        minimum: 0\n        maximum: 8\n      required: true\n    DeviceId:\n      name: device-id\n      in: path\n      description: 2-byte device ID.  Can be decimal or hexadecimal.\n      schema:\n        oneOf:\n          - type: integer\n            minimum: 0\n            maximum: 65535\n          - type: string\n            pattern: '0x[a-fA-F0-9]+'\n      example: '0x1234'\n      required: true\n    RemoteType:\n      name: remote-type\n      in: path\n      description: Type of remote to read a packet from.  If unspecified, will read packets from all remote types.\n      schema:\n        $ref: '#/components/schemas/RemoteType'\n      required: true\n  schemas:\n    State:\n      description: \"On/Off state\"\n      type: string\n      enum:\n        - On\n        - Off\n      example: On\n    GroupStateCommand:\n      type: string\n      enum:\n        - unpair\n        - pair\n        - set_white\n        - night_mode\n        - level_up\n        - level_down\n        - temperature_up\n        - temperature_down\n        - next_mode\n        - previous_mode\n        - mode_speed_down\n        - mode_speed_up\n        - toggle\n      example: pair\n      description: \u003e\n        Commands that affect a given group.  Descriptiosn follow:\n\n        * `pair`. Emulates the pairing process. Send this command right as you connect an unpaired bulb and it will pair with the device ID being used.\n\n        * `unpair`. Emulates the unpairing process. Send as you connect a paired bulb to have it disassociate with the device ID being used.\n\n        * `set_white`. Turns off RGB and enters WW/CW mode.\n\n        * `night_mode`.  Most devices support a \"night mode,\" which has LEDs turned to a very dim setting -- lower than brightness 0.\n\n        * `level_up`. Turns down the brightness. Not all dimmable bulbs support this command.\n\n        * `level_down`. Turns down the brightness. Not all dimmable bulbs support this command.\n\n        * `temperature_up`. Turns up the white temperature. Not all bulbs with adjustable white temperature support this command.\n\n        * `temperature_down`. Turns down the white temperature. Not all bulbs with adjustable white temperature support this command.\n\n        * `next_mode`. Cycles to the next \"disco mode\".\n\n        * `previous_mode`. Cycles to the previous disco mode.\n\n        * `mode_speed_up`. Turn transition speed for current mode up.\n\n        * `mode_speed_down`. Turn transition speed for current mode down.\n\n        * `toggle`. Toggle on/off state.\n\n    TransitionField:\n      type: string\n      enum:\n        - hue\n        - saturation\n        - brightness\n        - level\n        - kelvin\n        - color_temp\n        - color\n        - status\n      example: brightness\n      description: \u003e\n        If transitioning `status`:\n\n        * If transitioning to `OFF`, will fade to 0 brightness and then turn off.\n\n        * If transitioning to `ON`, will turn on, set brightness to 0, and fade to brightness 100.\n    TransitionValue:\n      oneOf:\n        - type: integer\n        - type: string\n          pattern: '[0-9]{1,3},[0-9]{1,3},[0-9]{1,3}'\n      description: Either an int value or a color\n    TransitionArgs:\n      type: object\n      properties:\n        field:\n          $ref: '#/components/schemas/TransitionField'\n        start_value:\n          $ref: '#/components/schemas/TransitionValue'\n        end_value:\n          $ref: '#/components/schemas/TransitionValue'\n        duration:\n          type: number\n          format: float\n          description: Duration of transition, measured in seconds\n        period:\n          type: integer\n          description: Length of time between updates in a transition, measured in milliseconds\n    TransitionData:\n      allOf:\n        - $ref: '#/components/schemas/TransitionArgs'\n        - type: object\n          properties:\n            id:\n              readOnly: true\n              type: integer\n            last_sent:\n              readOnly: true\n              type: integer\n              description: Timestamp since last update was sent.\n            bulb:\n              readOnly: true\n              allOf:\n                - $ref: '#/components/schemas/BulbId'\n            type:\n              readOnly: true\n              description: \u003e\n                Specifies whether this is a simple field transition, or a color transition.\n              type: string\n              enum:\n                - field\n                - color\n            current_value:\n              readOnly: true\n              allOf:\n                - $ref: '#/components/schemas/TransitionValue'\n            end_value:\n              readOnly: true\n              allOf:\n                - $ref: '#/components/schemas/TransitionValue'\n\n    BulbId:\n      type: object\n      properties:\n        device_id:\n          type: integer\n          minimum: 0\n          maximum: 65536\n          example: 1234\n        group_id:\n          type: integer\n          minimum: 0\n          maximum: 8\n          example: 1\n        device_type:\n          $ref: '#/components/schemas/RemoteType'\n    GroupStateCommands:\n      type: object\n      properties:\n        command:\n          oneOf:\n            - $ref: '#/components/schemas/GroupStateCommand'\n            - type: object\n              properties:\n                command:\n                  type: string\n                  enum:\n                    - transition\n                args:\n                  $ref: '#/components/schemas/TransitionArgs'\n        commands:\n          type: array\n          items:\n            $ref: '#/components/schemas/GroupStateCommand'\n          example:\n            - level_up\n            - temperature_up\n    GroupState:\n      type: object\n      description: Group state\n      properties:\n        state:\n          $ref: '#/components/schemas/State'\n        status:\n          $ref: '#/components/schemas/State'\n        hue:\n          type: integer\n          minimum: 0\n          maximum: 359\n          description: Color hue.  Will change bulb to color mode.\n        saturation:\n          type: integer\n          minimum: 0\n          maximum: 100\n          description: Color saturation.  Will normally change bulb to color mode.\n        kelvin:\n          type: integer\n          minimum: 0\n          maximum: 100\n          description: White temperature.  0 is coolest, 100 is warmest.\n        temperature:\n          type: integer\n          minimum: 0\n          maximum: 100\n          description: Alias for `kelvin`.\n        color_temp:\n          type: integer\n          minimum: 153\n          maximum: 370\n          description: White temperature measured in mireds.  Lower values are cooler.\n        mode:\n          type: integer\n          description: Party mode ID.  Actual effect depends on the bulb.\n        color:\n          oneOf:\n            - type: string\n              pattern: '[0-9]{1,3},[0-9]{1,3},[0-9]{1,3}'\n              example: '255,255,0'\n            - type: object\n              properties:\n                r:\n                  type: integer\n                g:\n                  type: integer\n                b:\n                  type: integer\n              example:\n                r: 255\n                g: 255\n                b: 0\n          example:\n            '255,0,255'\n        level:\n          type: integer\n          minimum: 0\n          maximum: 100\n          description: Brightness on a 0-100 scale.\n          example: 50\n        brightness:\n          type: integer\n          minimum: 0\n          maximum: 255\n          description: Brightness on a 0-255 scale.\n          example: 170\n        effect:\n          type: string\n          enum:\n            - night_mode\n            - white_mode\n        transition:\n          type: number\n          description: \u003e\n            Enables a transition from current state to the provided state.\n          example: 2.0\n\n    RemoteType:\n      type: string\n      enum:\n      - \"rgbw\"\n      - \"cct\"\n      - \"rgb_cct\"\n      - \"rgb\"\n      - \"fut089\"\n      - \"fut091\"\n      - \"fut020\"\n      example: rgb_cct\n    RF24Channel:\n      type: string\n      enum:\n      - LOW\n      - MID\n      - HIGH\n    LedMode:\n      type: string\n      enum:\n      - Off\n      - Slow toggle\n      - Fast toggle\n      - Slow blip\n      - Fast blip\n      - Flicker\n      - On\n    GroupStateField:\n      type: string\n      enum:\n      - state\n      - status\n      - brightness\n      - level\n      - hue\n      - saturation\n      - color\n      - mode\n      - kelvin\n      - color_temp\n      - bulb_mode\n      - computed_color\n      - effect\n      - device_id\n      - group_id\n      - device_type\n      - oh_color\n      - hex_color\n      description: \u003e\n        Defines a field which is a part of state for a particular light device.  Most fields are self-explanatory, but documentation for each follows:\n\n        * `state` / `status` - same value with different keys (useful if your platform expects one or the other).\n\n        * `brightness` / `level` - [0, 255] and [0, 100] scales of the same value.\n\n        * `kelvin / color_temp` - [0, 100] and [153, 370] scales for the same value.  The later's unit is mireds.\n\n        * `bulb_mode` - what mode the bulb is in: white, rgb, etc.\n\n        * `color` / `computed_color` - behaves the same when bulb is in rgb mode.  `computed_color` will send RGB = 255,255,255 when in white mode.  This is useful for HomeAssistant where it always expects the color to be set.\n\n        * `oh_color` - same as `color` with a format compatible with [OpenHAB's colorRGB channel type](https://www.openhab.org/addons/bindings/mqtt.generic/#channel-type-colorrgb-colorhsb).\n\n        * `hex_color` - same as `color` except in hex color (e.g., `#FF0000` for red).\n\n        * `device_id` / `device_type` / `group_id` - this information is in the MQTT topic or REST route, but can be included in the payload in the case that processing the topic or route is more difficult.\n    DeviceId:\n      type: array\n      items: {}\n      example:\n        - 1234\n        - \"rgb_cct\"\n        - 1\n    Settings:\n      type: object\n      properties:\n        admin_username:\n          type: string\n          description: If spcified along with `admin_password`, HTTP basic auth will be enabled to access all REST endpoints.\n          default: \"\"\n        admin_password:\n          type: string\n          description: If spcified along with `admin_username`, HTTP basic auth will be enabled to access all REST endpoints.\n          default: \"\"\n        ce_pin:\n          type: integer\n          description: CE pin to use for SPI radio (nRF24, LT8900)\n          default: 4\n        csn_pin:\n          type: integer\n          description: CSN pin to use with nRF24\n          default: 15\n        reset_pin:\n          type: integer\n          description: Reset pin to use with LT8900\n          default: 0\n        led_pin:\n          type: integer\n          description: Pin to control for status LED.  Set to a negative value to invert on/off status.\n          default: -2\n        packet_repeats:\n          type: integer\n          description: Number of times to resend the same 2.4 GHz milight packet when a command is sent.\n          default: 50\n        http_repeat_factor:\n          type: integer\n          description: Packet repeats resulting from REST commands will be multiplied by this number.\n          default: 1\n        auto_restart_period:\n          type: integer\n          description: Automatically restart the device after the number of specified minutes.  Use 0 to disable.\n          default: 0\n        mqtt_server:\n          type: string\n          description: MQTT server to connect to.\n          format: hostname\n        mqtt_username:\n          type: string\n          description: If specified, use this username to authenticate with the MQTT server.\n        mqtt_password:\n          type: string\n          description: If specified, use this password to authenticate with the MQTT server.\n        mqtt_topic_pattern:\n          type: string\n          description: Topic pattern to listen on for commands.  More detail on the format in README.\n          example: milight/commands/:device_id/:device_type/:group_id\n        mqtt_update_topic_pattern:\n          type: string\n          description: Topic pattern individual intercepted commands will be sent to.  More detail on the format in README.\n          example: milight/updates/:device_id/:device_type/:group_id\n        mqtt_update_state_pattern:\n          type: string\n          description: Topic pattern device state will be sent to.  More detail on the format in README.\n          example: milight/state/:device_id/:device_type/:group_id\n        mqtt_client_status_topic:\n          type: string\n          description: Topic client status will be sent to.\n          example: milight/status\n        simple_mqtt_client_status:\n          type: boolean\n          description: If true, will use a simple enum flag (`connected` or `disconnected`) to indicate status.  If false, will send a rich JSON message including IP address, version, etc.\n          default: true\n        discovery_port:\n          type: integer\n          description: UDP discovery port\n          default: 48899\n        listen_repeats:\n          type: integer\n          description: Controls how many cycles are spent listening for packets.  Set to 0 to disable passive listening.\n          default: 3\n        state_flush_interval:\n          type: integer\n          description: Controls how many miliseconds must pass between states being flushed to persistent storage.  Set to 0 to disable throttling.\n          default: 10000\n        mqtt_state_rate_limit:\n          type: integer\n          description: Controls how many miliseconds must pass between MQTT state updates.  Set to 0 to disable throttling.\n          default: 500\n        mqtt_debounce_delay:\n          type: integer\n          description: Controls how much time has to pass after the last status update was queued.\n          default: 500\n        packet_repeat_throttle_threshold:\n          type: integer\n          description:\n            Controls how packet repeats are throttled.  Packets sent with less time (measured in milliseconds) between them than this value (in milliseconds) will cause packet repeats to be throttled down.  More than this value will unthrottle up.\n          default: 200\n        packet_repeat_throttle_sensitivity:\n          type: integer\n          description:\n            Controls how packet repeats are throttled. Higher values cause packets to be throttled up and down faster.  Set to 0 to disable throttling.\n          default: 0\n          minimum: 0\n          maximum: 1000\n        packet_repeat_minimum:\n          type: integer\n          description:\n            Controls how far throttling can decrease the number of repeated packets\n          default: 3\n        enable_automatic_mode_switching:\n          type: boolean\n          description:\n            When making updates to hue or white temperature in a different bulb mode, switch back to the original bulb mode after applying the setting change.\n          default: false\n        led_mode_wifi_config:\n          $ref: '#/components/schemas/LedMode'\n        led_mode_wifi_failed:\n          $ref: '#/components/schemas/LedMode'\n        led_mode_operating:\n          $ref: '#/components/schemas/LedMode'\n        led_mode_packet:\n          $ref: '#/components/schemas/LedMode'\n        led_mode_packet_count:\n          type: integer\n          description: Number of times the LED will flash when packets are changing\n          default: 3\n        hostname:\n          type: string\n          description: Hostname that will be advertized on a DHCP request\n          pattern: \"[a-zA-Z0-9-]+\"\n          default: milight-hub\n        rf24_power_level:\n          type: string\n          enum:\n            - MIN\n            - LOW\n            - HIGH\n            - MAX\n          description: Power level used when packets are sent.  See nRF24 documentation for further detail.\n          default: MAX\n        rf24_listen_channel:\n          $ref: '#/components/schemas/RF24Channel'\n        wifi_static_ip:\n          type: string\n          format: ipv4\n          description: If specified, the static IP address to use\n        wifi_static_ip_gateway:\n          type: string\n          format: ipv4\n          description: If specified along with static IP, the gateway address to use\n        wifi_static_ip_netmask:\n          type: string\n          format: ipv4\n          description: If specified along with static IP, the netmask to use\n        packet_repeats_per_loop:\n          type: integer\n          default: 10\n          description: Packets are sent asynchronously.  This number controls the number of repeats sent during each iteration.  Increase this number to improve packet throughput.  Decrease to improve system multi-tasking.\n        home_assistant_discovery_prefix:\n          type: string\n          description: If specified along with MQTT settings, will enable HomeAssistant MQTT discovery using the specified discovery prefix.  HomeAssistant's default is `homeassistant/`.\n        wifi_mode:\n          type: string\n          enum:\n            - B\n            - G\n            - N\n          description: Forces WiFi into the spcified mode.  Try using B or G mode if you are having stability issues.\n          default: N\n        rf24_channels:\n          type: array\n          items:\n            $ref: '#/components/schemas/RF24Channel'\n          description: Defines which channels we send on.  Each remote type has three channels.  We can send on any subset of these.\n        device_ids:\n          type: array\n          items:\n            $ref: '#/components/schemas/DeviceId'\n          description:\n            \"List of saved device IDs, stored as 3-long arrays.  Elements are: 1) remote ID, 2) remote type, 3) group ID\"\n          example:\n            - [1234, 'rgb_cct', 1]\n            - [5678, 'fut089', 5]\n        gateway_configs:\n          type: array\n          items:\n            type: integer\n          description: \"List of UDP servers, stored as 3-long arrays.  Elements are 1) remote ID to bind to, 2) UDP port to listen on, 3) protocol version (5 or 6)\"\n          example:\n            - [1234, 5555, 6]\n        group_state_fields:\n          type: array\n          items:\n            $ref: '#/components/schemas/GroupStateField'\n        group_id_aliases:\n          type: object\n          description: Keys are aliases, values are 3-long arrays with same schema as items in `device_ids`.\n          example:\n            alias1: [1234, 'rgb_cct', 1]\n            alias2: [1234, 'rgb_cct', 2]\n        default_transition_period:\n          type: integer\n          description: |\n            Default number of milliseconds between transition packets.  Set this value lower for more granular transitions, or higher if\n            you are having performance issues during transitions.\n\n    BooleanResponse:\n      type: object\n      required:\n      - success\n      properties:\n        success:\n          type: boolean\n        error:\n          type: string\n          description: If an error occurred, message specifying what went wrong\n    About:\n      type: object\n      properties:\n        firmware:\n          type: string\n          description: Always set to \"milight-hub\"\n        version:\n          type: string\n          description: Semver version string\n        ip_address:\n          type: string\n        reset_reason:\n          type: string\n          description: Reason the system was last rebooted\n        variant:\n          type: string\n          description: Firmware variant (e.g., d1_mini, nodemcuv2)\n        free_heap:\n          type: integer\n          format: int64\n          description: Amount of free heap remaining (measured in bytes)\n        arduino_version:\n          type: string\n          description: Version of Arduino SDK firmware was built with\n        queue_stats:\n          type: object\n          properties:\n            length:\n              type: integer\n              description: Number of enqueued packets to be sent\n            dropped_packets:\n              type: integer\n              description: Number of packets that have been dropped since last reboot\n    ReadPacket:\n      type: object\n      properties:\n        packet_info:\n          type: string",
			"canonicalURL": "/github.com/sidoh/esp8266_milight_hub@9df17f435012650a28c91f0335a30fcf4569b425/-/blob/docs/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/sidoh/esp8266_milight_hub/blob/9df17f435012650a28c91f0335a30fcf4569b425/docs/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"GroupState\": parse schema: property \"state\": at 1:3718: parse schema: resolve \"#/components/schemas/State\": parse enum values: parse value \"true\": expected type \"string\", got \"bool\""
}