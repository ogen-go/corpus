{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/mimicry-tech/mimicry"
		},
		"file": {
			"name": "products-with-examples.yaml",
			"size": 0,
			"path": "test/fixtures/specs/products-with-examples.yaml",
			"byteSize": 3273,
			"content": "openapi: \"3.0.3\"\ninfo:\n  title: ProductsAPI for Testing\n  version: \"1.0\"\n  contact:\n    name: Florian Kraft\n    url: http://floriank.engineer\n    email: schnuffifk+mimicry@gmail.com\n  license:\n    name: MIT\n  description: 'A simple products API'\nservers:\n  - url: https://products.production.info\n    description: Production system, get your Swag here!\n  - url: https://products.staging.info\n    description: Staging system without billing integration\npaths:\n  '/products':\n    get:\n      summary: GET all products\n      operationId: get-products\n      description: Gets all products in the collection\n      tags:\n        - product\n        - collection\n      responses:\n        default:\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/Product'\n              examples:\n                products-example:\n                  $ref: '#/components/examples/my-cool-products'\n                inline-example:\n                  summary: A list of products\n                  value:\n                    - productId: barfoo\n                      name: A barfoo product!\n                      dimensions:\n                        height: 42\n                        width: 10\n                        depth: 99\n                    - productId: foobar\n                      name: A foobar product!\n                      dimensions:\n                        height: 23\n                        width: 8\n                        depth: 12\n  '/products/{productId}':\n    get:\n      summary: GET product\n      tags:\n        - product\n      responses:\n        default:\n          description: Displaying a product\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Product'\n              examples:\n                foobar:\n                  $ref: '#/components/examples/my-cool-product'\n        '404':\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundError'\n      operationId: get-product\n      description: Returns a product\n    parameters: []\ncomponents:\n  schemas:\n    Product:\n      title: A product\n      description: Represents a single, really cool product\n      type: object\n      x-examples:\n        - productId: foobar\n          dimension:\n            height: 42\n            width: 12\n            depth: 90\n\n    NotFoundError:\n      title: An error when something cannot be found\n      description: Represents a NotFound error\n      type: object\n      x-examples:\n        - message: Not found!\n          error_code: 131\n\n  examples:\n    my-cool-product:\n      summary: A really cool product\n      value:\n        productId: foobar\n        name: CoolProduct\n        dimension:\n          height: 23\n          width: 8\n          depth: 12\n    my-cool-products:\n      summary: A set of really cool products\n      value:\n        - productId: foobar\n          name: CoolProduct\n          dimension:\n            height: 23\n            width: 8\n            depth: 12\n        - productId: foobaz\n          name: CoolProduct 2\n          dimension:\n            height: 23\n            width: 8\n            depth: 12\n"
		}
	},
	"Error": "parse: parse spec: paths: /products/{productId}: get: operation \"get-product\": parse path: path parameter not specified: \"productId\""
}