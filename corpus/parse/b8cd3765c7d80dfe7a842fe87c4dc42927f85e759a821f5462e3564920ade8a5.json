{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/gojek/turing-experiments"
		},
		"file": {
			"name": "experiments.yaml",
			"size": 0,
			"path": "api/experiments.yaml",
			"byteSize": 48011,
			"content": "openapi: 3.0.1\ninfo:\n  title: Experimentation Management APIs\n  description: CRUD APIs for experiment management\n  version: v1\nservers:\n  - url: /v1\ntags: []\npaths:\n  /validate:\n    post:\n      operationId: ValidateEntity\n      tags:\n        - validate\n        - treatment\n      summary: validates an entity against a given treatment schema or validation url\n      requestBody:\n        $ref: '#/components/requestBodies/ValidateEntityRequestBody'\n      responses:\n        200:\n          description: Validation success\n          content: {}\n        400:\n          $ref: '#/components/responses/BadRequest'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /projects:\n    get:\n      operationId: ListProjects\n      tags:\n        - project\n      summary: List info of all projects set up for Experimentation\n      responses:\n        200:\n          $ref: '#/components/responses/ListProjectsSuccess'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /projects/{project_id}/experiment-variables:\n    get:\n      operationId: GetProjectExperimentVariables\n      tags:\n        - project\n      summary: Get all parameters required for generating treatments for the given project\n      parameters:\n        - name: project_id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        200:\n          $ref: '#/components/responses/GetProjectExperimentVariablesSuccess'\n        404:\n          $ref: '#/components/responses/NotFound'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /projects/{project_id}/segmenters:\n    get:\n      operationId: ListSegmenters\n      tags:\n        - segmenters\n      summary: Get all segmenter configurations required for generating experiments for the given project\n      parameters:\n        - name: project_id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: scope\n          in: query\n          required: false\n          schema:\n            $ref: 'schema.yaml#/components/schemas/SegmenterScope'\n        - name: status\n          in: query\n          required: false\n          schema:\n            $ref: 'schema.yaml#/components/schemas/SegmenterStatus'\n        - name: search\n          description: Search treatment name for a partial match of the search text\n          in: query\n          schema:\n            type: string\n      responses:\n        200:\n          $ref: '#/components/responses/ListSegmentersSuccess'\n        404:\n          $ref: '#/components/responses/NotFound'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n    post:\n      operationId: CreateSegmenter\n      tags:\n        - segmenters\n      summary: Create a new project-specific segmenter\n      parameters:\n        - name: project_id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        $ref: '#/components/requestBodies/CreateSegmenterRequestBody'\n      responses:\n        200:\n          $ref: '#/components/responses/CreateSegmenterSuccess'\n        400:\n          $ref: '#/components/responses/BadRequest'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /projects/{project_id}/segmenters/{name}:\n    get:\n      operationId: GetSegmenter\n      tags:\n        - segmenters\n      summary: Get the global/project-specific segmenter by name\n      parameters:\n        - name: project_id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: name\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          $ref: '#/components/responses/GetSegmenterSuccess'\n        404:\n          $ref: '#/components/responses/NotFound'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n    put:\n      operationId: UpdateSegmenter\n      tags:\n        - segmenters\n      summary: Update an existing project-specific segmenter\n      parameters:\n        - name: project_id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: name\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: '#/components/requestBodies/UpdateSegmenterRequestBody'\n      responses:\n        200:\n          $ref: '#/components/responses/UpdateSegmenterSuccess'\n        400:\n          $ref: '#/components/responses/BadRequest'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n    delete:\n      operationId: DeleteSegmenter\n      tags:\n        - segmenters\n      summary: Delete a project-specific segmenter\n      parameters:\n        - name: project_id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: name\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          $ref: '#/components/responses/DeleteSegmenterSuccess'\n        400:\n          $ref: '#/components/responses/BadRequest'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n\n  /projects/{project_id}/settings:\n    post:\n      operationId: CreateProjectSettings\n      tags:\n        - settings\n      summary: Set up new project for Experimentation\n      parameters:\n        - name: project_id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        $ref: '#/components/requestBodies/CreateProjectSettingsRequestBody'\n      responses:\n        200:\n          $ref: '#/components/responses/CreateProjectSettingsSuccess'\n        400:\n          $ref: '#/components/responses/BadRequest'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n    get:\n      operationId: GetProjectSettings\n      tags:\n        - settings\n      summary: Get the settings for the given project\n      parameters:\n        - name: project_id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        200:\n          $ref: '#/components/responses/GetProjectSettingsSuccess'\n        404:\n          $ref: '#/components/responses/NotFound'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n    put:\n      operationId: UpdateProjectSettings\n      tags:\n        - settings\n      summary: Update the settings for the given project\n      parameters:\n        - name: project_id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        $ref: '#/components/requestBodies/UpdateProjectSettingsRequestBody'\n      responses:\n        200:\n          $ref: '#/components/responses/UpdateProjectSettingsSuccess'\n        400:\n          $ref: '#/components/responses/BadRequest'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /projects/{project_id}/experiments:\n    get:\n      operationId: ListExperiments\n      tags:\n        - experiment\n      summary: Get experiments for a project w.r.t. query params\n      parameters:\n        - name: project_id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: status\n          in: query\n          schema:\n            $ref: 'schema.yaml#/components/schemas/ExperimentStatus'\n        - name: end_time\n          description: Used together with the start_time, to filter experiments that are at least partially running in the input range.\n          in: query\n          schema:\n            type: string\n            format: date-time\n        - name: tier\n          in: query\n          schema:\n            $ref: 'schema.yaml#/components/schemas/ExperimentTier'\n        - name: type\n          in: query\n          schema:\n            $ref: 'schema.yaml#/components/schemas/ExperimentType'\n        - name: name\n          in: query\n          schema:\n            type: string\n        - name: updated_by\n          in: query\n          schema:\n            type: string\n        - name: search\n          description: Search experiment name and description for a partial match of the search text\n          in: query\n          schema:\n            type: string\n        - name: page\n          description: Result page number. It defaults to 1.\n          in: query\n          schema:\n            type: integer\n            format: int32\n        - name: page_size\n          description: Number of items on each page. It defaults to 10.\n          in: query\n          schema:\n            type: integer\n            format: int32\n        - name: start_time\n          description: Used together with the end_time, to filter experiments that are at least partially running in the input range.\n          in: query\n          schema:\n            type: string\n            format: date-time\n        - name: segment\n          in: query\n          schema:\n            type: object\n        - name: include_weak_match\n          description: controls whether or not weak segmenter matches (experiments where the segmenter is optional) should be returned\n          in: query\n          schema:\n            type: boolean\n      responses:\n        200:\n          $ref: '#/components/responses/ListExperimentsSuccess'\n        400:\n          $ref: '#/components/responses/BadRequest'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n    post:\n      operationId: CreateExperiment\n      tags:\n        - experiment\n      summary: Create a new experiment for a project\n      parameters:\n        - name: project_id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        $ref: '#/components/requestBodies/CreateExperimentRequestBody'\n      responses:\n        200:\n          $ref: '#/components/responses/CreateExperimentSuccess'\n        400:\n          $ref: '#/components/responses/BadRequest'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n      x-codegen-request-body-name: CreateExperimentRequest\n  /projects/{project_id}/experiments/{experiment_id}:\n    get:\n      operationId: GetExperiment\n      tags:\n        - experiment\n      summary: Get details of an experiment with the given experiment_id and project_id\n      parameters:\n        - name: project_id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: experiment_id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        200:\n          $ref: '#/components/responses/GetExperimentSuccess'\n        404:\n          $ref: '#/components/responses/NotFound'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n    put:\n      operationId: UpdateExperiment\n      tags:\n        - experiment\n      summary: Update an experiment with the given experiment_id and project_id\n      parameters:\n        - name: project_id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: experiment_id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        $ref: '#/components/requestBodies/UpdateExperimentRequestBody'\n      responses:\n        200:\n          $ref: '#/components/responses/UpdateExperimentSuccess'\n        400:\n          $ref: '#/components/responses/BadRequest'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n      x-codegen-request-body-name: UpdateExperimentRequest\n  /projects/{project_id}/experiments/{experiment_id}/enable:\n    put:\n      operationId: EnableExperiment\n      tags:\n        - experiment\n      summary: Enable an experiment with the given experiment_id and project_id\n      parameters:\n        - name: project_id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: experiment_id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        204:\n          description: Enabled experiment\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /projects/{project_id}/experiments/{experiment_id}/disable:\n    put:\n      operationId: DisableExperiment\n      tags:\n        - experiment\n      summary: Disable an experiment with the given experiment_id and project_id\n      parameters:\n        - name: project_id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: experiment_id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        204:\n          description: Disabled experiment\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /projects/{project_id}/experiments/{experiment_id}/history:\n    get:\n      operationId: ListExperimentHistory\n      tags:\n        - experiment\n      summary: List an experiment's historical versions\n      parameters:\n        - name: project_id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: experiment_id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: page\n          description: Result page number. It defaults to 1.\n          in: query\n          schema:\n            type: integer\n            format: int32\n        - name: page_size\n          description: Number of items on each page. It defaults to 10.\n          in: query\n          schema:\n            type: integer\n            format: int32\n      responses:\n        200:\n          $ref: '#/components/responses/ListExperimentHistorySuccess'\n        404:\n          $ref: '#/components/responses/NotFound'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /projects/{project_id}/experiments/{experiment_id}/history/{version}:\n    get:\n      operationId: GetExperimentHistory\n      tags:\n        - experiment\n      summary: List an experiment's historical versions\n      parameters:\n        - name: project_id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: experiment_id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: version\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        200:\n          $ref: '#/components/responses/GetExperimentHistorySuccess'\n        404:\n          $ref: '#/components/responses/NotFound'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /projects/{project_id}/treatments:\n    get:\n      operationId: ListTreatments\n      tags:\n        - treatment\n      summary: Get treatments for a project w.r.t query params\n      parameters:\n        - name: project_id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: updated_by\n          in: query\n          schema:\n            type: string\n        - name: search\n          description: Search treatment name for a partial match of the search text\n          in: query\n          schema:\n            type: string\n        - name: page\n          description: Result page number. If empty and neither `fields` nor `page` is set, it defaults to 1.\n          in: query\n          schema:\n            type: integer\n            format: int32\n        - name: page_size\n          description: Number of items on each page. If empty and neither `fields` nor `page_size` is set, it defaults to 10.\n          in: query\n          schema:\n            type: integer\n            format: int32\n        - name: fields\n          description: |\n            A selector to restrict the list of returned objects by their fields. If unset, all the fields will be returned.\n            Paginated responses will be returned if both or either of `page` and `page_size` parameters are provided.\n          in: query\n          schema:\n            type: array\n            items:\n              $ref: 'schema.yaml#/components/schemas/TreatmentField'\n      responses:\n        200:\n          $ref: '#/components/responses/ListTreatmentsSuccess'\n        400:\n          $ref: '#/components/responses/BadRequest'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n    post:\n      operationId: CreateTreatment\n      tags:\n        - treatment\n      summary: Create a new treatment for a project\n      parameters:\n        - name: project_id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        $ref: '#/components/requestBodies/CreateTreatmentRequestBody'\n      responses:\n        200:\n          $ref: '#/components/responses/CreateTreatmentSuccess'\n        400:\n          $ref: '#/components/responses/BadRequest'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n      x-codegen-request-body-name: CreateTreatmentRequest\n  /projects/{project_id}/treatments/{treatment_id}:\n    get:\n      operationId: GetTreatment\n      tags:\n        - treatment\n      summary: Get details of a treatment with the given treatment_id and project_id\n      parameters:\n        - name: project_id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: treatment_id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        200:\n          $ref: '#/components/responses/GetTreatmentSuccess'\n        404:\n          $ref: '#/components/responses/NotFound'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n    put:\n      operationId: UpdateTreatment\n      tags:\n        - treatment\n      summary: Update a treatment with the given treatment_id and project_id\n      parameters:\n        - name: project_id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: treatment_id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        $ref: '#/components/requestBodies/UpdateTreatmentRequestBody'\n      responses:\n        200:\n          $ref: '#/components/responses/UpdateTreatmentSuccess'\n        400:\n          $ref: '#/components/responses/BadRequest'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n      x-codegen-request-body-name: UpdateTreatmentRequest\n    delete:\n      operationId: DeleteTreatment\n      tags:\n        - treatment\n      summary: Delete a treatment with the given treatment_id and project_id\n      description: Deleting a treatment will remove it from the database permanently, along with its historical versions.\n      parameters:\n        - name: project_id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: treatment_id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        200:\n          $ref: '#/components/responses/DeleteTreatmentSuccess'\n        400:\n          $ref: '#/components/responses/BadRequest'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n      x-codegen-request-body-name: DeleteTreatmentRequest\n  /projects/{project_id}/treatments/{treatment_id}/history:\n    get:\n      operationId: ListTreatmentHistory\n      tags:\n        - treatment\n      summary: List a treatment's historical versions\n      parameters:\n        - name: project_id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: treatment_id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: page\n          description: Result page number. If empty, it defaults to 1.\n          in: query\n          schema:\n            type: integer\n            format: int32\n        - name: page_size\n          description: Number of items on each page. If empty, it defaults to 10.\n          in: query\n          schema:\n            type: integer\n            format: int32\n      responses:\n        200:\n          $ref: '#/components/responses/ListTreatmentHistorySuccess'\n        404:\n          $ref: '#/components/responses/NotFound'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /projects/{project_id}/treatments/{treatment_id}/history/{version}:\n    get:\n      operationId: GetTreatmentHistory\n      tags:\n        - treatment\n      summary: List a treatment's historical versions\n      parameters:\n        - name: project_id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: treatment_id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: version\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        200:\n          $ref: '#/components/responses/GetTreatmentHistorySuccess'\n        404:\n          $ref: '#/components/responses/NotFound'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /projects/{project_id}/segments:\n    get:\n      operationId: ListSegments\n      tags:\n        - segment\n      summary: Get segments for a project w.r.t query params\n      parameters:\n        - name: project_id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: updated_by\n          in: query\n          schema:\n            type: string\n        - name: search\n          description: Search segment name for a partial match of the search text\n          in: query\n          schema:\n            type: string\n        - name: page\n          description: Result page number. If empty and neither `fields` nor `page` is set, it defaults to 1.\n          in: query\n          schema:\n            type: integer\n            format: int32\n        - name: page_size\n          description: Number of items on each page. If empty and neither `fields` nor `page_size` is set, it defaults to 10.\n          in: query\n          schema:\n            type: integer\n            format: int32\n        - name: fields\n          description: |\n            A selector to restrict the list of returned objects by their fields. If unset, all the fields will be returned.\n            Paginated responses will be returned if both or either of `page` and `page_size` parameters are provided.\n          in: query\n          schema:\n            type: array\n            items:\n              $ref: 'schema.yaml#/components/schemas/SegmentField'\n      responses:\n        200:\n          $ref: '#/components/responses/ListSegmentsSuccess'\n        400:\n          $ref: '#/components/responses/BadRequest'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n    post:\n      operationId: CreateSegment\n      tags:\n        - segment\n      summary: Create a new segment for a project\n      parameters:\n        - name: project_id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        $ref: '#/components/requestBodies/CreateSegmentRequestBody'\n      responses:\n        200:\n          $ref: '#/components/responses/CreateSegmentSuccess'\n        400:\n          $ref: '#/components/responses/BadRequest'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n      x-codegen-request-body-name: CreateSegmentRequest\n  /projects/{project_id}/segments/{segment_id}:\n    get:\n      operationId: GetSegment\n      tags:\n        - segment\n      summary: Get details of a segment with the given segment_id and project_id\n      parameters:\n        - name: project_id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: segment_id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        200:\n          $ref: '#/components/responses/GetSegmentSuccess'\n        404:\n          $ref: '#/components/responses/NotFound'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n    put:\n      operationId: UpdateSegment\n      tags:\n        - segment\n      summary: Update a segment with the given segment_id and project_id\n      parameters:\n        - name: project_id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: segment_id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        $ref: '#/components/requestBodies/UpdateSegmentRequestBody'\n      responses:\n        200:\n          $ref: '#/components/responses/UpdateSegmentSuccess'\n        400:\n          $ref: '#/components/responses/BadRequest'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n      x-codegen-request-body-name: UpdateSegmentRequest\n    delete:\n      operationId: DeleteSegment\n      tags:\n        - segment\n      summary: Delete a segment with the given segment_id and project_id\n      description: Deleting a segment will remove it from the database permanently, along with its historical versions.\n      parameters:\n        - name: project_id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: segment_id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        200:\n          $ref: '#/components/responses/DeleteSegmentSuccess'\n        400:\n          $ref: '#/components/responses/BadRequest'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n      x-codegen-request-body-name: DeleteSegmentRequest\n  /projects/{project_id}/segments/{segment_id}/history:\n    get:\n      operationId: ListSegmentHistory\n      tags:\n        - segment\n      summary: List a segment's historical versions\n      parameters:\n        - name: project_id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: segment_id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: page\n          description: Result page number. It defaults to 1.\n          in: query\n          schema:\n            type: integer\n            format: int32\n        - name: page_size\n          description: Number of items on each page. It defaults to 10.\n          in: query\n          schema:\n            type: integer\n            format: int32\n      responses:\n        200:\n          $ref: '#/components/responses/ListSegmentHistorySuccess'\n        404:\n          $ref: '#/components/responses/NotFound'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /projects/{project_id}/segments/{segment_id}/history/{version}:\n    get:\n      operationId: GetSegmentHistory\n      tags:\n        - segment\n      summary: Get a segment's historical version\n      parameters:\n        - name: project_id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: segment_id\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: version\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        200:\n          $ref: '#/components/responses/GetSegmentHistorySuccess'\n        404:\n          $ref: '#/components/responses/NotFound'\n        500:\n          $ref: '#/components/responses/InternalServerError'\ncomponents:\n  requestBodies:\n    ValidateEntityRequestBody:\n      content:\n        application/json:\n          schema:\n            required:\n              - data\n            type: object\n            properties:\n              validation_url:\n                type: string\n              treatment_schema:\n                $ref: 'schema.yaml#/components/schemas/TreatmentSchema'\n              data:\n                type: object\n      required: true\n    CreateProjectSettingsRequestBody:\n      content:\n        application/json:\n          schema:\n            required:\n              - randomization_key\n              - segmenters\n            type: object\n            properties:\n              randomization_key:\n                type: string\n              segmenters:\n                $ref: 'schema.yaml#/components/schemas/ProjectSegmenters'\n              enable_s2id_clustering:\n                type: boolean\n              treatment_schema:\n                $ref: 'schema.yaml#/components/schemas/TreatmentSchema'\n              validation_url:\n                type: string\n      required: true\n    UpdateProjectSettingsRequestBody:\n      content:\n        application/json:\n          schema:\n            required:\n              - randomization_key\n              - segmenters\n            type: object\n            properties:\n              randomization_key:\n                type: string\n              segmenters:\n                $ref: 'schema.yaml#/components/schemas/ProjectSegmenters'\n              enable_s2id_clustering:\n                type: boolean\n              treatment_schema:\n                $ref: 'schema.yaml#/components/schemas/TreatmentSchema'\n              validation_url:\n                type: string\n    CreateSegmenterRequestBody:\n      content:\n        application/json:\n          schema:\n            required:\n              - name\n              - type\n              - multi_valued\n              - required\n            type: object\n            properties:\n              name:\n                type: string\n              type:\n                $ref: 'schema.yaml#/components/schemas/SegmenterType'\n              options:\n                $ref: 'schema.yaml#/components/schemas/SegmenterOptions'\n              multi_valued:\n                type: boolean\n              constraints:\n                type: array\n                items:\n                  $ref: 'schema.yaml#/components/schemas/Constraint'\n              required:\n                type: boolean\n              description:\n                type: string\n      required: true\n    UpdateSegmenterRequestBody:\n      content:\n        application/json:\n          schema:\n            required:\n              - multi_valued\n              - required\n            type: object\n            properties:\n              options:\n                $ref: 'schema.yaml#/components/schemas/SegmenterOptions'\n              multi_valued:\n                type: boolean\n              constraints:\n                type: array\n                items:\n                  $ref: 'schema.yaml#/components/schemas/Constraint'\n              required:\n                type: boolean\n              description:\n                type: string\n      required: true\n    CreateExperimentRequestBody:\n      content:\n        application/json:\n          schema:\n            required:\n              - end_time\n              - name\n              - segment\n              - start_time\n              - status\n              - treatments\n              - type\n            type: object\n            properties:\n              description:\n                type: string\n                nullable: true\n              treatments:\n                type: array\n                items:\n                  $ref: 'schema.yaml#/components/schemas/ExperimentTreatment'\n              name:\n                type: string\n              start_time:\n                type: string\n                format: date-time\n              tier:\n                $ref: 'schema.yaml#/components/schemas/ExperimentTier'\n              type:\n                $ref: 'schema.yaml#/components/schemas/ExperimentType'\n              end_time:\n                type: string\n                format: date-time\n              updated_by:\n                type: string\n              status:\n                $ref: 'schema.yaml#/components/schemas/ExperimentStatus'\n              segment:\n                $ref: 'schema.yaml#/components/schemas/ExperimentSegment'\n              interval:\n                type: integer\n                format: int32\n                nullable: true\n      required: true\n    UpdateExperimentRequestBody:\n      content:\n        application/json:\n          schema:\n            required:\n              - description\n              - end_time\n              - interval\n              - segment\n              - start_time\n              - status\n              - treatments\n              - type\n            type: object\n            properties:\n              description:\n                type: string\n                nullable: true\n              treatments:\n                type: array\n                items:\n                  $ref: 'schema.yaml#/components/schemas/ExperimentTreatment'\n              start_time:\n                type: string\n                format: date-time\n              tier:\n                $ref: 'schema.yaml#/components/schemas/ExperimentTier'\n              type:\n                $ref: 'schema.yaml#/components/schemas/ExperimentType'\n              end_time:\n                type: string\n                format: date-time\n              updated_by:\n                type: string\n              status:\n                $ref: 'schema.yaml#/components/schemas/ExperimentStatus'\n              segment:\n                $ref: 'schema.yaml#/components/schemas/ExperimentSegment'\n              interval:\n                type: integer\n                format: int32\n                nullable: true\n      required: true\n    CreateTreatmentRequestBody:\n      content:\n        application/json:\n          schema:\n            required:\n              - name\n              - configuration\n            type: object\n            properties:\n              name:\n                type: string\n              configuration:\n                type: object\n              updated_by:\n                type: string\n      required: true\n    UpdateTreatmentRequestBody:\n      content:\n        application/json:\n          schema:\n            required:\n              - configuration\n            type: object\n            properties:\n              configuration:\n                type: object\n              updated_by:\n                type: string\n      required: true\n    CreateSegmentRequestBody:\n      content:\n        application/json:\n          schema:\n            required:\n              - name\n              - segment\n            type: object\n            properties:\n              name:\n                type: string\n              segment:\n                $ref: 'schema.yaml#/components/schemas/ExperimentSegment'\n              updated_by:\n                type: string\n      required: true\n    UpdateSegmentRequestBody:\n      content:\n        application/json:\n          schema:\n            required:\n              - segment\n            type: object\n            properties:\n              segment:\n                $ref: 'schema.yaml#/components/schemas/ExperimentSegment'\n              updated_by:\n                type: string\n      required: true\n  responses:\n    BadRequest:\n      description: Bad request\n      content:\n        application/json:\n          schema:\n            $ref: 'schema.yaml#/components/schemas/Error'\n    NotFound:\n      description: Resource not found\n      content:\n        application/json:\n          schema:\n            $ref: 'schema.yaml#/components/schemas/Error'\n    InternalServerError:\n      description: Internal Server Error\n      content:\n        application/json:\n          schema:\n            $ref: 'schema.yaml#/components/schemas/Error'\n    ListProjectsSuccess:\n      description: Returns details of all projects set up for experimentation\n      content:\n        application/json:\n          schema:\n            required:\n              - data\n            type: object\n            properties:\n              data:\n                type: array\n                items:\n                  $ref: 'schema.yaml#/components/schemas/Project'\n    CreateProjectSettingsSuccess:\n      description: Creates experimentation settings for the project with the given project_id\n      content:\n        application/json:\n          schema:\n            required:\n              - data\n            type: object\n            properties:\n              data:\n                $ref: 'schema.yaml#/components/schemas/ProjectSettings'\n    ListSegmentersSuccess:\n      description: Get segmenters of the project with the given project_id\n      content:\n        application/json:\n          schema:\n            required:\n              - data\n            type: object\n            properties:\n              data:\n                type: array\n                items:\n                  $ref: 'schema.yaml#/components/schemas/Segmenter'\n    CreateSegmenterSuccess:\n      description: Creates a segmenter for the given project\n      content:\n        application/json:\n          schema:\n            required:\n              - data\n            type: object\n            properties:\n              data:\n                $ref: 'schema.yaml#/components/schemas/Segmenter'\n    GetSegmenterSuccess:\n      description: Get segmenter of the project with the given project_id and name\n      content:\n        application/json:\n          schema:\n            required:\n              - data\n            type: object\n            properties:\n              data:\n                $ref: 'schema.yaml#/components/schemas/Segmenter'\n    UpdateSegmenterSuccess:\n      description: Updated segmenter\n      content:\n        application/json:\n          schema:\n            required:\n              - data\n            type: object\n            properties:\n              data:\n                $ref: 'schema.yaml#/components/schemas/Segmenter'\n    DeleteSegmenterSuccess:\n      description: Deleted segmenter\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              name:\n                type: string\n    GetProjectSettingsSuccess:\n      description: Get experimentation settings of the project with the given project_id\n      content:\n        application/json:\n          schema:\n            required:\n              - data\n            type: object\n            properties:\n              data:\n                $ref: 'schema.yaml#/components/schemas/ProjectSettings'\n    UpdateProjectSettingsSuccess:\n      description: Updates experimentation settings of the project with the given project_id\n      content:\n        application/json:\n          schema:\n            required:\n              - data\n            type: object\n            properties:\n              data:\n                $ref: 'schema.yaml#/components/schemas/ProjectSettings'\n    GetProjectExperimentVariablesSuccess:\n      description: Returns request parameters for a project\n      content:\n        application/json:\n          schema:\n            required:\n              - data\n            type: object\n            properties:\n              data:\n                type: array\n                items:\n                  type: string\n    ListExperimentsSuccess:\n      description: Returns experiments with the given project_id. If pagination options were used, the results are scoped accordingly and the paging info in the response body is set.\n      content:\n        application/json:\n          schema:\n            required:\n              - data\n            type: object\n            properties:\n              data:\n                type: array\n                items:\n                  $ref: 'schema.yaml#/components/schemas/Experiment'\n              paging:\n                $ref: \"schema.yaml#/components/schemas/Paging\"\n    CreateExperimentSuccess:\n      description: Creates an experiment for the given project\n      content:\n        application/json:\n          schema:\n            required:\n              - data\n            type: object\n            properties:\n              data:\n                $ref: 'schema.yaml#/components/schemas/Experiment'\n    GetExperimentSuccess:\n      description: Returns experiment details with given project_id and experiment_id\n      content:\n        application/json:\n          schema:\n            required:\n              - data\n            type: object\n            properties:\n              data:\n                $ref: 'schema.yaml#/components/schemas/Experiment'\n    UpdateExperimentSuccess:\n      description: Updated experiment\n      content:\n        application/json:\n          schema:\n            required:\n              - data\n            type: object\n            properties:\n              data:\n                $ref: 'schema.yaml#/components/schemas/Experiment'\n    ListExperimentHistorySuccess:\n      description: List of all historical versions of an experiment\n      content:\n        application/json:\n          schema:\n            required:\n              - data\n            type: object\n            properties:\n              data:\n                type: array\n                items:\n                  $ref: \"schema.yaml#/components/schemas/ExperimentHistory\"\n              paging:\n                $ref: \"schema.yaml#/components/schemas/Paging\"\n    GetExperimentHistorySuccess:\n      description: Get the specified historical version of an experiment\n      content:\n        application/json:\n          schema:\n            required:\n              - data\n            type: object\n            properties:\n              data:\n                $ref: \"schema.yaml#/components/schemas/ExperimentHistory\"\n    ListTreatmentsSuccess:\n      description: Returns treatments with the given project_id. If pagination options were used, the results are scoped accordingly and the paging info in the response body is set.\n      content:\n        application/json:\n          schema:\n            required:\n              - data\n            type: object\n            properties:\n              data:\n                type: array\n                items:\n                  $ref: 'schema.yaml#/components/schemas/Treatment'\n              paging:\n                $ref: \"schema.yaml#/components/schemas/Paging\"\n    CreateTreatmentSuccess:\n      description: Creates a treatment for the given project\n      content:\n        application/json:\n          schema:\n            required:\n              - data\n            type: object\n            properties:\n              data:\n                $ref: 'schema.yaml#/components/schemas/Treatment'\n    GetTreatmentSuccess:\n      description: Returns treatment details with given project_id and experiment_id\n      content:\n        application/json:\n          schema:\n            required:\n              - data\n            type: object\n            properties:\n              data:\n                $ref: 'schema.yaml#/components/schemas/Treatment'\n    UpdateTreatmentSuccess:\n      description: Updated treatment\n      content:\n        application/json:\n          schema:\n            required:\n              - data\n            type: object\n            properties:\n              data:\n                $ref: 'schema.yaml#/components/schemas/Treatment'\n    DeleteTreatmentSuccess:\n      description: Deleted treatment\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              id:\n                type: integer\n    ListTreatmentHistorySuccess:\n      description: List of all historical versions of a treatment\n      content:\n        application/json:\n          schema:\n            required:\n              - data\n            type: object\n            properties:\n              data:\n                type: array\n                items:\n                  $ref: \"schema.yaml#/components/schemas/TreatmentHistory\"\n              paging:\n                $ref: \"schema.yaml#/components/schemas/Paging\"\n    GetTreatmentHistorySuccess:\n      description: Get the specified historical version of a treatment\n      content:\n        application/json:\n          schema:\n            required:\n              - data\n            type: object\n            properties:\n              data:\n                $ref: \"schema.yaml#/components/schemas/TreatmentHistory\"\n    ListSegmentsSuccess:\n      description: Returns segments with the given project_id. The results are paginated and the paging info in the response body is set.\n      content:\n        application/json:\n          schema:\n            required:\n              - data\n            type: object\n            properties:\n              data:\n                type: array\n                items:\n                  $ref: 'schema.yaml#/components/schemas/Segment'\n              paging:\n                $ref: \"schema.yaml#/components/schemas/Paging\"\n    CreateSegmentSuccess:\n      description: Creates a segment for the given project\n      content:\n        application/json:\n          schema:\n            required:\n              - data\n            type: object\n            properties:\n              data:\n                $ref: 'schema.yaml#/components/schemas/Segment'\n    GetSegmentSuccess:\n      description: Returns segment details with given project_id and experiment_id\n      content:\n        application/json:\n          schema:\n            required:\n              - data\n            type: object\n            properties:\n              data:\n                $ref: 'schema.yaml#/components/schemas/Segment'\n    UpdateSegmentSuccess:\n      description: Updated segment\n      content:\n        application/json:\n          schema:\n            required:\n              - data\n            type: object\n            properties:\n              data:\n                $ref: 'schema.yaml#/components/schemas/Segment'\n    DeleteSegmentSuccess:\n      description: Deleted segment\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              id:\n                type: integer\n    ListSegmentHistorySuccess:\n      description: List of all historical versions of a segment\n      content:\n        application/json:\n          schema:\n            required:\n              - data\n            type: object\n            properties:\n              data:\n                type: array\n                items:\n                  $ref: \"schema.yaml#/components/schemas/SegmentHistory\"\n              paging:\n                $ref: \"schema.yaml#/components/schemas/Paging\"\n    GetSegmentHistorySuccess:\n      description: Get the specified historical version of a segment\n      content:\n        application/json:\n          schema:\n            required:\n              - data\n            type: object\n            properties:\n              data:\n                $ref: \"schema.yaml#/components/schemas/SegmentHistory\"\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n\nsecurity:\n  - bearerAuth: []\n",
			"canonicalURL": "/github.com/gojek/turing-experiments@d547ba91dcadcc664258f15f7776fe7f98b9044a/-/blob/api/experiments.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/gojek/turing-experiments/blob/d547ba91dcadcc664258f15f7776fe7f98b9044a/api/experiments.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"GetSegmentSuccess\": content: application/json: schema: parse schema: property \"data\": parse schema: at 1:8059: external \"schema.yaml\": get: file: local file reference is not allowed"
}