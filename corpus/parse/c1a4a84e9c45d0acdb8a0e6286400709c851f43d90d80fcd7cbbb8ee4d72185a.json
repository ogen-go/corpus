{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/gchq/stroom"
		},
		"file": {
			"name": "stroom.yaml",
			"size": 0,
			"path": "stroom-app/src/main/resources/ui/noauth/swagger/stroom.yaml",
			"byteSize": 298077,
			"content": "openapi: 3.0.1\ninfo:\n  contact:\n    name: stroom\n    url: https://github.com/gchq/stroom\n  description: Various APIs for interacting with Stroom and its data\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  title: Stroom API\n  version: v1/v2\nservers:\n- url: /api\nsecurity:\n- ApiKeyAuth: []\npaths:\n  /account/v1:\n    get:\n      operationId: listAccounts\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccountResultPage'\n          description: default response\n      summary: Get all accounts.\n      tags:\n      - Account\n    post:\n      operationId: createAccount\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateAccountRequest'\n        description: account\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: integer\n                format: int32\n          description: default response\n      summary: Create an account.\n      tags:\n      - Account\n  /account/v1/search:\n    post:\n      operationId: searchAccounts\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SearchAccountRequest'\n        description: account\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccountResultPage'\n          description: default response\n      summary: Search for an account by email.\n      tags:\n      - Account\n  /account/v1/{id}:\n    delete:\n      operationId: deleteAccount\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          format: int32\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: boolean\n          description: default response\n      summary: Delete an account by ID.\n      tags:\n      - Account\n    get:\n      operationId: fetchAccount\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          format: int32\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Account'\n          description: default response\n      summary: Get an account by ID.\n      tags:\n      - Account\n    put:\n      operationId: updateAccount\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          format: int32\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateAccountRequest'\n        description: account\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: boolean\n          description: default response\n      summary: Update an account.\n      tags:\n      - Account\n  /activity/v1:\n    get:\n      operationId: listActivities\n      parameters:\n      - in: query\n        name: filter\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResultPageActivity'\n          description: default response\n      summary: Lists activities\n      tags:\n      - Activities\n    post:\n      operationId: createActivity\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Activity'\n          description: default response\n      summary: Create an Activity\n      tags:\n      - Activities\n  /activity/v1/acknowledge:\n    post:\n      operationId: acknowledgeSplash\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AcknowledgeSplashRequest'\n        description: request\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: boolean\n          description: default response\n      summary: Acknowledge the slash screen\n      tags:\n      - Activities\n  /activity/v1/current:\n    get:\n      operationId: getCurrentActivity\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Activity'\n          description: default response\n      summary: Gets the current activity\n      tags:\n      - Activities\n    put:\n      operationId: setCurrentActivity\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Activity'\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Activity'\n          description: default response\n      summary: Gets the current activity\n      tags:\n      - Activities\n  /activity/v1/fields:\n    get:\n      operationId: listActivityFieldDefinitions\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/FilterFieldDefinition'\n          description: default response\n      summary: Lists activity field definitions\n      tags:\n      - Activities\n  /activity/v1/validate:\n    post:\n      operationId: validateActivity\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Activity'\n        description: activity\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ActivityValidationResult'\n          description: default response\n      summary: Create an Activity\n      tags:\n      - Activities\n  /activity/v1/{id}:\n    delete:\n      operationId: deleteActivity\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          format: int32\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: boolean\n          description: default response\n      summary: Delete an activity\n      tags:\n      - Activities\n    get:\n      operationId: fetchActivity\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          format: int32\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Activity'\n          description: default response\n      summary: Fetch an Activity\n      tags:\n      - Activities\n    put:\n      operationId: updateActivity\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          format: int32\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Activity'\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Activity'\n          description: default response\n      summary: Update an Activity\n      tags:\n      - Activities\n  /annotation/v1:\n    get:\n      operationId: getAnnotationDetail\n      parameters:\n      - in: query\n        name: annotationId\n        schema:\n          type: integer\n          format: int64\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AnnotationDetail'\n          description: default response\n      summary: Gets an annotation\n      tags:\n      - Annotations\n    post:\n      operationId: createAnnotationEntry\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateEntryRequest'\n        description: request\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AnnotationDetail'\n          description: default response\n      summary: Gets an annotation\n      tags:\n      - Annotations\n  /annotation/v1/comment:\n    get:\n      operationId: getAnnotationComments\n      parameters:\n      - in: query\n        name: filter\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n          description: default response\n      summary: Gets a list of predefined comments\n      tags:\n      - Annotations\n  /annotation/v1/link:\n    post:\n      operationId: linkAnnotationEvents\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/EventLink'\n        description: eventLink\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/EventId'\n          description: default response\n      summary: Links an annotation to an event\n      tags:\n      - Annotations\n  /annotation/v1/linkedEvents:\n    get:\n      operationId: getAnnotationLinkedEvents\n      parameters:\n      - in: query\n        name: annotationId\n        schema:\n          type: integer\n          format: int64\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/EventId'\n          description: default response\n      summary: Gets a list of events linked to this annotation\n      tags:\n      - Annotations\n  /annotation/v1/setAssignedTo:\n    post:\n      operationId: setAnnotationAssignedTo\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SetAssignedToRequest'\n        description: request\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: integer\n                format: int32\n          description: default response\n      summary: Bulk action to set the assignment for several annotations\n      tags:\n      - Annotations\n  /annotation/v1/setStatus:\n    post:\n      operationId: setAnnotationStatus\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SetStatusRequest'\n        description: request\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: integer\n                format: int32\n          description: default response\n      summary: Bulk action to set the status for several annotations\n      tags:\n      - Annotations\n  /annotation/v1/status:\n    get:\n      operationId: getAnnotationDStatus\n      parameters:\n      - in: query\n        name: filter\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n          description: default response\n      summary: Gets a list of allowed statuses\n      tags:\n      - Annotations\n  /annotation/v1/unlink:\n    post:\n      operationId: unlinkAnnotationEvents\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/EventLink'\n        description: eventLink\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/EventId'\n          description: default response\n      summary: Unlinks an annotation from an event\n      tags:\n      - Annotations\n  /apikey/v1:\n    delete:\n      operationId: deleteAllApiKeys\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: integer\n                format: int32\n          description: default response\n      summary: Delete all API keys.\n      tags:\n      - Api Keys\n    post:\n      operationId: createApiKey\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateApiKeyRequest'\n        description: CreateApiKeyRequest\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiKey'\n          description: default response\n      summary: Create a new API key.\n      tags:\n      - Api Keys\n  /apikey/v1/byData/{data}:\n    delete:\n      operationId: deleteApiKeyByData\n      parameters:\n      - in: path\n        name: data\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: integer\n                format: int32\n          description: default response\n      summary: Delete an API key by the data itself.\n      tags:\n      - Api Keys\n    get:\n      operationId: fetchApiKeyByData\n      parameters:\n      - in: path\n        name: data\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiKey'\n          description: default response\n      summary: Read a API key by the data itself.\n      tags:\n      - Api Keys\n  /apikey/v1/noauth/getDefaultApiKeyExpirySeconds:\n    get:\n      operationId: getDefaultApiKeyExpirySeconds\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: integer\n                format: int64\n          description: default response\n      summary: Get the default time taken for API keys to expire\n      tags:\n      - Api Keys\n  /apikey/v1/search:\n    post:\n      operationId: searchApiKeys\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SearchApiKeyRequest'\n        description: SearchRequest\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiKeyResultPage'\n          description: default response\n      summary: Submit a search request for API keys\n      tags:\n      - Api Keys\n  /apikey/v1/{id}:\n    delete:\n      operationId: deleteApiKey\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          format: int32\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: integer\n                format: int32\n          description: default response\n      summary: Delete a API key by ID.\n      tags:\n      - Api Keys\n    get:\n      operationId: fetchApiKey\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          format: int32\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiKey'\n          description: default response\n      summary: Read a API key by ID.\n      tags:\n      - Api Keys\n  /apikey/v1/{id}/enabled:\n    get:\n      operationId: toggleApiKeyEnabled\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          format: int32\n      - in: query\n        name: enabled\n        required: true\n        schema:\n          type: boolean\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: integer\n                format: int32\n          description: default response\n      summary: Enable or disable the state of an API key.\n      tags:\n      - Api Keys\n  /application-instance/v1/register:\n    get:\n      operationId: applicationInstanceRegister\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApplicationInstanceInfo'\n          description: default response\n      summary: Register a new application instance\n      tags:\n      - Application\n  /application-instance/v1/remove:\n    post:\n      operationId: applicationInstanceRemove\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DestroyRequest'\n        description: destroyRequest\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: boolean\n          description: default response\n      summary: Remove an application instance\n      tags:\n      - Application\n  /authentication/v1/needsPasswordChange:\n    get:\n      operationId: needsPasswordChange\n      parameters:\n      - in: query\n        name: email\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: boolean\n          description: default response\n      summary: Check if a user's password needs changing.\n      tags:\n      - Authentication\n  /authentication/v1/noauth/changePassword:\n    post:\n      operationId: changePassword\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ChangePasswordRequest'\n        description: changePasswordRequest\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ChangePasswordResponse'\n          description: default response\n      summary: Change a user's password.\n      tags:\n      - Authentication\n  /authentication/v1/noauth/confirmPassword:\n    post:\n      operationId: confirmPassword\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConfirmPasswordRequest'\n        description: confirmPasswordRequest\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConfirmPasswordResponse'\n          description: default response\n      summary: Confirm an authenticated user's current password.\n      tags:\n      - Authentication\n  /authentication/v1/noauth/fetchPasswordPolicy:\n    get:\n      operationId: fetchPasswordPolicy\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PasswordPolicyConfig'\n          description: default response\n      summary: Get the password policy\n      tags:\n      - Authentication\n  /authentication/v1/noauth/getAuthenticationState:\n    get:\n      operationId: getAuthenticationState\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AuthenticationState'\n          description: default response\n      summary: Get the current authentication state\n      tags:\n      - Authentication\n  /authentication/v1/noauth/login:\n    post:\n      operationId: login\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LoginRequest'\n        description: Credentials\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LoginResponse'\n          description: default response\n      summary: Handle a login request made using username and password credentials.\n      tags:\n      - Authentication\n  /authentication/v1/noauth/logout:\n    get:\n      operationId: logout\n      parameters:\n      - in: query\n        name: redirect_uri\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: boolean\n          description: default response\n      summary: Log a user out of their session\n      tags:\n      - Authentication\n  /authentication/v1/noauth/reset/{email}:\n    get:\n      operationId: resetEmail\n      parameters:\n      - in: path\n        name: email\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: boolean\n          description: default response\n      summary: Reset a user account using an email address.\n      tags:\n      - Authentication\n  /authentication/v1/resetPassword:\n    post:\n      operationId: resetPassword\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ResetPasswordRequest'\n        description: changePasswordRequest\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ChangePasswordResponse'\n          description: default response\n      summary: Reset an authenticated user's password.\n      tags:\n      - Authentication\n  /cache/v1:\n    delete:\n      operationId: clearCache\n      parameters:\n      - in: query\n        name: cacheName\n        schema:\n          type: string\n      - in: query\n        name: nodeName\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: integer\n                format: int64\n          description: default response\n      summary: Clears a cache\n      tags:\n      - Caches\n  /cache/v1/info:\n    get:\n      operationId: getCacheInfo\n      parameters:\n      - in: query\n        name: cacheName\n        schema:\n          type: string\n      - in: query\n        name: nodeName\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CacheInfoResponse'\n          description: default response\n      summary: Gets cache info\n      tags:\n      - Caches\n  /cache/v1/list:\n    get:\n      operationId: listCaches\n      parameters:\n      - in: query\n        name: nodeName\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CacheNamesResponse'\n          description: default response\n      summary: Lists caches\n      tags:\n      - Caches\n  /cluster/lock/v1/keepALive/{nodeName}:\n    put:\n      operationId: keepClusterLockAlive\n      parameters:\n      - in: path\n        name: nodeName\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ClusterLockKey'\n        description: key\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: boolean\n          description: default response\n      summary: Keep a lock alive\n      tags:\n      - Cluster lock\n  /cluster/lock/v1/release/{nodeName}:\n    put:\n      operationId: releaseClusterLock\n      parameters:\n      - in: path\n        name: nodeName\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ClusterLockKey'\n        description: key\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: boolean\n          description: default response\n      summary: Release a lock\n      tags:\n      - Cluster lock\n  /cluster/lock/v1/try/{nodeName}:\n    put:\n      operationId: tryClusterLock\n      parameters:\n      - in: path\n        name: nodeName\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ClusterLockKey'\n        description: key\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: boolean\n          description: default response\n      summary: Try to lock\n      tags:\n      - Cluster lock\n  /config/v1:\n    post:\n      operationId: createConfigProperty\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConfigProperty'\n        description: configProperty\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConfigProperty'\n          description: default response\n      summary: Create a configuration property\n      tags:\n      - Global Config\n  /config/v1/clusterProperties/{propertyName}:\n    put:\n      operationId: updateConfigProperty\n      parameters:\n      - in: path\n        name: propertyName\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConfigProperty'\n        description: configProperty\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConfigProperty'\n          description: default response\n      summary: Update a configuration property\n      tags:\n      - Global Config\n  /config/v1/clusterProperties/{propertyName}/yamlOverrideValue/{nodeName}:\n    get:\n      operationId: getConfigYamlValueByNodeAndName\n      parameters:\n      - in: path\n        name: propertyName\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: nodeName\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OverrideValueString'\n          description: default response\n      summary: Get the property value from the YAML configuration in the specified\n        node.\n      tags:\n      - Global Config\n  /config/v1/noauth/fetchUiConfig:\n    get:\n      operationId: fetchUiConfig\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UiConfig'\n          description: default response\n      summary: Fetch the UI configuration\n      tags:\n      - Global Config\n  /config/v1/nodeProperties/{nodeName}:\n    post:\n      operationId: listConfigPropertiesByNode\n      parameters:\n      - in: path\n        name: nodeName\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/GlobalConfigCriteria'\n        description: criteria\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ListConfigResponse'\n          description: default response\n      summary: List all properties matching the criteria on the requested node.\n      tags:\n      - Global Config\n  /config/v1/properties:\n    post:\n      operationId: listConfigProperties\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/GlobalConfigCriteria'\n        description: criteria\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ListConfigResponse'\n          description: default response\n      summary: List all properties matching the criteria on the current node.\n      tags:\n      - Global Config\n  /config/v1/properties/{propertyName}:\n    get:\n      operationId: getConfigPropertyByName\n      parameters:\n      - in: path\n        name: propertyName\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConfigProperty'\n          description: default response\n      summary: Fetch a property by its name, e.g. 'stroom.path.home'\n      tags:\n      - Global Config\n  /content/v1/export:\n    post:\n      operationId: exportContent\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DocRefs'\n        description: docRefs\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceGeneration'\n          description: default response\n      summary: Export content\n      tags:\n      - Content\n  /content/v1/fetchDependencies:\n    post:\n      operationId: fetchContentDependencies\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DependencyCriteria'\n        description: criteria\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResultPageDependency'\n          description: default response\n      summary: Fetch content dependencies\n      tags:\n      - Content\n  /content/v1/import:\n    post:\n      operationId: importContent\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ImportConfigRequest'\n        description: request\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ImportConfigResponse'\n          description: default response\n      summary: Import content\n      tags:\n      - Content\n  /dashboard/v1/destroy:\n    post:\n      operationId: dashboardDestroySearch\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DestroySearchRequest'\n        description: request\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: boolean\n          description: default response\n      summary: Destroy a running search\n      tags:\n      - Dashboards\n  /dashboard/v1/downloadQuery:\n    post:\n      operationId: downloadDashboardQuery\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DashboardSearchRequest'\n        description: downloadQueryRequest\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceGeneration'\n          description: default response\n      summary: Download a query\n      tags:\n      - Dashboards\n  /dashboard/v1/downloadSearchResults:\n    post:\n      operationId: downloadDashboardSearchResults\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DownloadSearchResultsRequest'\n        description: request\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceGeneration'\n          description: default response\n      summary: Download search results\n      tags:\n      - Dashboards\n  /dashboard/v1/fetchTimeZones:\n    get:\n      operationId: fetchTimeZones\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n          description: default response\n      summary: Fetch time zone data from the server\n      tags:\n      - Dashboards\n  /dashboard/v1/functions:\n    get:\n      operationId: fetchDashboardFunctions\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/FunctionSignature'\n          description: default response\n      summary: Fetch all expression functions\n      tags:\n      - Dashboards\n  /dashboard/v1/search:\n    post:\n      operationId: dashboardSearch\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DashboardSearchRequest'\n        description: request\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DashboardSearchResponse'\n          description: default response\n      summary: Perform a new search or get new results\n      tags:\n      - Dashboards\n  /dashboard/v1/validateExpression:\n    post:\n      operationId: validateDashboardExpression\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: string\n        description: expression\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidateExpressionResult'\n          description: default response\n      summary: Validate an expression\n      tags:\n      - Dashboards\n  /dashboard/v1/{uuid}:\n    get:\n      operationId: fetchDashboard\n      parameters:\n      - in: path\n        name: uuid\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DashboardDoc'\n          description: default response\n      summary: Fetch a dashboard doc by its UUID\n      tags:\n      - Dashboards\n    put:\n      operationId: updateDashboard\n      parameters:\n      - in: path\n        name: uuid\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DashboardDoc'\n        description: doc\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DashboardDoc'\n          description: default response\n      summary: Update a dashboard doc\n      tags:\n      - Dashboards\n  /data/v1/download:\n    post:\n      operationId: downloadData\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FindMetaCriteria'\n        description: criteria\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceGeneration'\n          description: default response\n      summary: Download matching data\n      tags:\n      - Data\n  /data/v1/fetch:\n    post:\n      operationId: fetchData\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FetchDataRequest'\n        description: request\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AbstractFetchDataResult'\n          description: default response\n      summary: Fetch matching data\n      tags:\n      - Data\n  /data/v1/upload:\n    post:\n      operationId: uploadData\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UploadDataRequest'\n        description: request\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceKey'\n          description: default response\n      summary: Upload data\n      tags:\n      - Data\n  /data/v1/{id}/info:\n    get:\n      operationId: viewDataInfo\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DataInfoSection'\n          description: default response\n      summary: Find full info about a data item\n      tags:\n      - Data\n  /data/v1/{id}/parts/{partNo}/child-types:\n    get:\n      operationId: getChildStreamTypes\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - in: path\n        name: partNo\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n                uniqueItems: true\n          description: default response\n      summary: List child types for a stream\n      tags:\n      - Data\n  /dataDownload/v1/downloadZip:\n    post:\n      operationId: downloadZip\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FindMetaCriteria'\n        description: criteria\n        required: true\n      responses:\n        default:\n          description: Returns Stroom content data as a zip file\n      summary: Retrieve content matching the provided criteria as a zip file\n      tags:\n      - Data Download\n  /dataRetentionRules/v1:\n    get:\n      operationId: fetchDataRetentionRules\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DataRetentionRules'\n          description: default response\n      summary: Get data retention rules\n      tags:\n      - Data Retention Rules\n    put:\n      operationId: updateDataRetentionRules\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DataRetentionRules'\n        description: dataRetentionRules\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DataRetentionRules'\n          description: default response\n      summary: Update data retention rules\n      tags:\n      - Data Retention Rules\n  /dataRetentionRules/v1/impactSummary:\n    post:\n      operationId: getDataRetentionImpactSummary\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DataRetentionDeleteSummaryRequest'\n        description: request\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DataRetentionDeleteSummaryResponse'\n          description: default response\n      summary: Get a summary of meta deletions with the passed data retention rules\n      tags:\n      - Data Retention Rules\n  /dataRetentionRules/v1/impactSummary/{queryId}:\n    delete:\n      operationId: stopDataRetentionImpactSummary\n      parameters:\n      - in: path\n        name: queryId\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: boolean\n          description: default response\n      summary: Stop a running query\n      tags:\n      - Data Retention Rules\n  /dataSource/v1/fetchFields:\n    post:\n      operationId: fetchDataSourceFields\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DocRef'\n        description: dataSourceRef\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AbstractField'\n          description: default response\n      summary: Fetch data source fields\n      tags:\n      - Data Sources\n  /dbStatus/v1:\n    get:\n      operationId: getDbSystemTableStatus\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResultPageDBTableStatus'\n          description: default response\n      summary: Find status of the DB\n      tags:\n      - Database Status\n    post:\n      operationId: findDbSystemTableStatus\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FindDBTableCriteria'\n        description: criteria\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResultPageDBTableStatus'\n          description: default response\n      summary: Find status of the DB\n      tags:\n      - Database Status\n  /dictionary/v1/download:\n    post:\n      operationId: downloadDictionary\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DocRef'\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceGeneration'\n          description: default response\n      summary: Download a dictionary doc\n      tags:\n      - Dictionaries (v1)\n  /dictionary/v1/{uuid}:\n    get:\n      operationId: fetchDictionary\n      parameters:\n      - in: path\n        name: uuid\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DictionaryDoc'\n          description: default response\n      summary: Fetch a dictionary doc by its UUID\n      tags:\n      - Dictionaries (v1)\n    put:\n      operationId: updateDictionary\n      parameters:\n      - in: path\n        name: uuid\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DictionaryDoc'\n        description: doc\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DictionaryDoc'\n          description: default response\n      summary: Update a dictionary doc\n      tags:\n      - Dictionaries (v1)\n  /elasticCluster/v1/testCluster:\n    post:\n      operationId: testElasticCluster\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ElasticClusterDoc'\n        description: elasticClusterDoc\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ElasticClusterTestResponse'\n          description: default response\n      summary: Test connection to the Elasticsearch cluster\n      tags:\n      - Elastic Clusters\n  /elasticCluster/v1/{uuid}:\n    get:\n      operationId: fetchElasticCluster\n      parameters:\n      - in: path\n        name: uuid\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ElasticClusterDoc'\n          description: default response\n      summary: Fetch an Elasticsearch cluster doc by its UUID\n      tags:\n      - Elastic Clusters\n    put:\n      operationId: updateElasticCluster\n      parameters:\n      - in: path\n        name: uuid\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ElasticClusterDoc'\n        description: doc\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ElasticClusterDoc'\n          description: default response\n      summary: Update an Elasticsearch cluster doc\n      tags:\n      - Elastic Clusters\n  /elasticIndex/v1/testIndex:\n    post:\n      operationId: testElasticIndex\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ElasticIndexDoc'\n        description: elasticIndexDoc\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ElasticIndexTestResponse'\n          description: default response\n      summary: Test the Elasticsearch index\n      tags:\n      - Elastic Indices\n  /elasticIndex/v1/{uuid}:\n    get:\n      operationId: fetchElasticIndex\n      parameters:\n      - in: path\n        name: uuid\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ElasticIndexDoc'\n          description: default response\n      summary: Fetch an Elasticsearch index doc by its UUID\n      tags:\n      - Elastic Indices\n    put:\n      operationId: updateElasticIndex\n      parameters:\n      - in: path\n        name: uuid\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ElasticIndexDoc'\n        description: doc\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ElasticIndexDoc'\n          description: default response\n      summary: Update an Elasticsearch index doc\n      tags:\n      - Elastic Indices\n  /entityEvent/v1/{nodeName}:\n    put:\n      operationId: fireEntityEvent\n      parameters:\n      - in: path\n        name: nodeName\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/EntityEvent'\n        description: entityevent\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: boolean\n          description: default response\n      summary: Sends an entity event\n      tags:\n      - Entity Events\n  /explorer/v2/copy:\n    post:\n      operationId: copyExplorerItems\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ExplorerServiceCopyRequest'\n        description: request\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BulkActionResult'\n          description: default response\n      summary: Copy explorer items\n      tags:\n      - Explorer (v2)\n  /explorer/v2/create:\n    post:\n      operationId: createExplorerItem\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ExplorerServiceCreateRequest'\n        description: request\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DocRef'\n          description: default response\n      summary: Create explorer item\n      tags:\n      - Explorer (v2)\n  /explorer/v2/delete:\n    delete:\n      operationId: deleteExplorerItems\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ExplorerServiceDeleteRequest'\n        description: request\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BulkActionResult'\n          description: default response\n      summary: Delete explorer items\n      tags:\n      - Explorer (v2)\n  /explorer/v2/fetchDocRefs:\n    post:\n      operationId: fetchExplorerDocRefs\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/DocRef'\n              uniqueItems: true\n        description: docRefs\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DocRef'\n                uniqueItems: true\n          description: default response\n      summary: Fetch document references\n      tags:\n      - Explorer (v2)\n  /explorer/v2/fetchDocumentTypes:\n    get:\n      operationId: fetchExplorerDocumentTypes\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DocumentTypes'\n          description: default response\n      summary: Fetch document types\n      tags:\n      - Explorer (v2)\n  /explorer/v2/fetchExplorerNodes:\n    post:\n      operationId: fetchExplorerNodes\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FindExplorerNodeCriteria'\n        description: request\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FetchExplorerNodeResult'\n          description: default response\n      summary: Fetch explorer nodes\n      tags:\n      - Explorer (v2)\n  /explorer/v2/fetchExplorerPermissions:\n    post:\n      operationId: fetchExplorerPermissions\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/ExplorerNode'\n        description: explorerNodes\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ExplorerNodePermissions'\n                uniqueItems: true\n          description: default response\n      summary: Fetch permissions for explorer items\n      tags:\n      - Explorer (v2)\n  /explorer/v2/info:\n    post:\n      operationId: fetchExplorerItemInfo\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DocRef'\n        description: docRef\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DocRefInfo'\n          description: default response\n      summary: Get document info\n      tags:\n      - Explorer (v2)\n  /explorer/v2/move:\n    put:\n      operationId: moveExplorerItems\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ExplorerServiceMoveRequest'\n        description: request\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BulkActionResult'\n          description: default response\n      summary: Move explorer items\n      tags:\n      - Explorer (v2)\n  /explorer/v2/rename:\n    put:\n      operationId: renameExplorerItems\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ExplorerServiceRenameRequest'\n        description: request\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DocRef'\n          description: default response\n      summary: Rename explorer items\n      tags:\n      - Explorer (v2)\n  /export/v1:\n    get:\n      operationId: exportAllContent\n      responses:\n        default:\n          description: Returns Stroom content data in a zip file\n      summary: Exports all configuration to a file.\n      tags:\n      - Export\n  /feed/v1/fetchSupportedEncodings:\n    get:\n      operationId: fetchSupportedEncodings\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n          description: default response\n      summary: Fetch supported encodings\n      tags:\n      - Feeds\n  /feed/v1/{uuid}:\n    get:\n      operationId: fetchFeed\n      parameters:\n      - in: path\n        name: uuid\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FeedDoc'\n          description: default response\n      summary: Fetch a feed doc by its UUID\n      tags:\n      - Feeds\n    put:\n      operationId: updateFeed\n      parameters:\n      - in: path\n        name: uuid\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FeedDoc'\n        description: doc\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FeedDoc'\n          description: default response\n      summary: Update a feed doc\n      tags:\n      - Feeds\n  /feedStatus/v1/getFeedStatus:\n    post:\n      operationId: getFeedStatus\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/GetFeedStatusRequest'\n        description: GetFeedStatusRequest\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetFeedStatusResponse'\n          description: default response\n      summary: Submit a request to get the status of a feed\n      tags:\n      - Feed Status\n  /fsVolume/v1:\n    post:\n      operationId: createFsVolume\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FsVolume'\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FsVolume'\n          description: default response\n      summary: Create a volume\n      tags:\n      - Filesystem Volumes\n  /fsVolume/v1/find:\n    post:\n      operationId: findFsVolumes\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FindFsVolumeCriteria'\n        description: criteria\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResultPageFsVolume'\n          description: default response\n      summary: Finds volumes\n      tags:\n      - Filesystem Volumes\n  /fsVolume/v1/rescan:\n    get:\n      operationId: rescanFsVolumes\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: boolean\n          description: default response\n      summary: Rescans volumes\n      tags:\n      - Filesystem Volumes\n  /fsVolume/v1/validate:\n    post:\n      operationId: validateFsVolume\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FsVolume'\n        description: request\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationResult'\n          description: default response\n      summary: Validates a volume\n      tags:\n      - Filesystem Volumes\n  /fsVolume/v1/{id}:\n    delete:\n      operationId: deleteFsVolume\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          format: int32\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: boolean\n          description: default response\n      summary: Delete a volume\n      tags:\n      - Filesystem Volumes\n    get:\n      operationId: fetchFsVolume\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          format: int32\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FsVolume'\n          description: default response\n      summary: Get a volume\n      tags:\n      - Filesystem Volumes\n    put:\n      operationId: updateFsVolume\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          format: int32\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FsVolume'\n        description: volume\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FsVolume'\n          description: default response\n      summary: Update a volume\n      tags:\n      - Filesystem Volumes\n  /index/v2/shard/delete:\n    post:\n      operationId: deleteIndexShards\n      parameters:\n      - in: query\n        name: nodeName\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FindIndexShardCriteria'\n        description: criteria\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: integer\n                format: int64\n          description: default response\n      summary: Delete matching index shards\n      tags:\n      - Indexes (v2)\n  /index/v2/shard/find:\n    post:\n      operationId: findIndexShards\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FindIndexShardCriteria'\n        description: criteria\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResultPageIndexShard'\n          description: default response\n      summary: Find matching index shards\n      tags:\n      - Indexes (v2)\n  /index/v2/shard/flush:\n    post:\n      operationId: flushIndexShards\n      parameters:\n      - in: query\n        name: nodeName\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FindIndexShardCriteria'\n        description: criteria\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: integer\n                format: int64\n          description: default response\n      summary: Flush matching index shards\n      tags:\n      - Indexes (v2)\n  /index/v2/{uuid}:\n    get:\n      operationId: fetchIndex\n      parameters:\n      - in: path\n        name: uuid\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IndexDoc'\n          description: default response\n      summary: Fetch a index doc by its UUID\n      tags:\n      - Indexes (v2)\n    put:\n      operationId: updateIndex\n      parameters:\n      - in: path\n        name: uuid\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/IndexDoc'\n        description: doc\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IndexDoc'\n          description: default response\n      summary: Update an index doc\n      tags:\n      - Indexes (v2)\n  /index/volume/v2:\n    post:\n      operationId: createIndexVolume\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/IndexVolume'\n        description: request\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IndexVolume'\n          description: default response\n      summary: Creates an index volume\n      tags:\n      - Index Volumes\n  /index/volume/v2/find:\n    post:\n      operationId: findIndexVolumes\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ExpressionCriteria'\n        description: request\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResultPageIndexVolume'\n          description: default response\n      summary: Finds index volumes matching request\n      tags:\n      - Index Volumes\n  /index/volume/v2/rescan:\n    get:\n      operationId: rescanIndexVolumes\n      parameters:\n      - in: query\n        name: nodeName\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: boolean\n          description: default response\n      summary: Rescans index volumes\n      tags:\n      - Index Volumes\n  /index/volume/v2/validate:\n    post:\n      operationId: validateIndexVolume\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/IndexVolume'\n        description: request\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationResult'\n          description: default response\n      summary: Validates an index volume\n      tags:\n      - Index Volumes\n  /index/volume/v2/{id}:\n    delete:\n      operationId: deleteIndexVolume\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          format: int32\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: boolean\n          description: default response\n      summary: Deletes an index volume\n      tags:\n      - Index Volumes\n    get:\n      operationId: fetchIndexVolume\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          format: int32\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IndexVolume'\n          description: default response\n      summary: Fetch an index volume\n      tags:\n      - Index Volumes\n    put:\n      operationId: updateIndexVolume\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          format: int32\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/IndexVolume'\n        description: indexVolume\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IndexVolume'\n          description: default response\n      summary: Updates an index volume\n      tags:\n      - Index Volumes\n  /index/volumeGroup/v2:\n    post:\n      operationId: createIndexVolumeGroup\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: string\n        description: name\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IndexVolumeGroup'\n          description: default response\n      summary: Creates an index volume group\n      tags:\n      - Index Volume Groups\n  /index/volumeGroup/v2/fetchByName/{name}:\n    get:\n      operationId: fetchIndexVolumeGroupByName\n      parameters:\n      - in: path\n        name: name\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IndexVolumeGroup'\n          description: default response\n      summary: Gets an index volume group by name\n      tags:\n      - Index Volume Groups\n  /index/volumeGroup/v2/find:\n    post:\n      operationId: findIndexVolumeGroups\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ExpressionCriteria'\n        description: request\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResultPageIndexVolumeGroup'\n          description: default response\n      summary: Finds index volume groups matching request\n      tags:\n      - Index Volume Groups\n  /index/volumeGroup/v2/{id}:\n    delete:\n      operationId: deleteIndexVolumeGroup\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          format: int32\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: boolean\n          description: default response\n      summary: Deletes an index volume group\n      tags:\n      - Index Volume Groups\n    get:\n      operationId: fetchIndexVolumeGroup\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          format: int32\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IndexVolumeGroup'\n          description: default response\n      summary: Gets an index volume group\n      tags:\n      - Index Volume Groups\n    put:\n      operationId: updateIndexVolumeGroup\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          format: int32\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/IndexVolumeGroup'\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IndexVolumeGroup'\n          description: default response\n      summary: Updates an index volume group\n      tags:\n      - Index Volume Groups\n  /job/v1:\n    get:\n      operationId: listJobs\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResultPageJob'\n          description: default response\n      summary: Lists jobs\n      tags:\n      - Jobs\n  /job/v1/setJobsEnabled/{nodeName}:\n    put:\n      operationId: setNodeJobsEnabled\n      parameters:\n      - in: path\n        name: nodeName\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NodeSetJobsEnabledRequest'\n        description: Request parameters\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NodeSetJobsEnabledResponse'\n          description: default response\n      summary: Sets the enabled state of jobs for the selected node. If both `includeJobs`\n        and `excludeJobs` are unspecified or empty, this action will apply to ALL\n        jobs.\n      tags:\n      - Jobs\n  /job/v1/{id}/enabled:\n    put:\n      operationId: setJobEnabled\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          format: int32\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: boolean\n        description: enabled\n        required: true\n      responses:\n        default:\n          content:\n            application/json: {}\n          description: default response\n      summary: Sets the enabled status of the job\n      tags:\n      - Jobs\n  /jobNode/v1:\n    get:\n      operationId: listJobNodes\n      parameters:\n      - in: query\n        name: jobName\n        schema:\n          type: string\n      - in: query\n        name: nodeName\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResultPageJobNode'\n          description: default response\n      summary: Lists job nodes\n      tags:\n      - Jobs (Node)\n  /jobNode/v1/find:\n    post:\n      operationId: findJobNodes\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FindJobNodeCriteria'\n        description: findJobNodeCriteria\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResultPageJobNode'\n          description: default response\n      summary: Finds job nodes matching criteria and sort order\n      tags:\n      - Jobs (Node)\n  /jobNode/v1/info:\n    get:\n      operationId: fetchJobNodeInfo\n      parameters:\n      - in: query\n        name: jobName\n        schema:\n          type: string\n      - in: query\n        name: nodeName\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobNodeInfo'\n          description: default response\n      summary: Gets current info for a job node\n      tags:\n      - Jobs (Node)\n  /jobNode/v1/{id}/enabled:\n    put:\n      operationId: setJobNodeEnabled\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          format: int32\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: boolean\n        description: enabled\n        required: true\n      responses:\n        default:\n          content:\n            application/json: {}\n          description: default response\n      summary: Sets the enabled status of the job node\n      tags:\n      - Jobs (Node)\n  /jobNode/v1/{id}/schedule:\n    put:\n      operationId: setJobNodeSchedule\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          format: int32\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: string\n        description: schedule\n        required: true\n      responses:\n        default:\n          content:\n            application/json: {}\n          description: default response\n      summary: Sets the schedule job node\n      tags:\n      - Jobs (Node)\n  /jobNode/v1/{id}/taskLimit:\n    put:\n      operationId: setJobNodeTaskLimit\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          format: int32\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: integer\n              format: int32\n        description: taskLimit\n        required: true\n      responses:\n        default:\n          content:\n            application/json: {}\n          description: default response\n      summary: Sets the task limit for the job node\n      tags:\n      - Jobs (Node)\n  /kafkaConfig/v1/download:\n    post:\n      operationId: downloadKafkaConfig\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DocRef'\n        description: docRef\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceGeneration'\n          description: default response\n      summary: Download a kafkaConfig doc\n      tags:\n      - Kafka Config\n  /kafkaConfig/v1/{uuid}:\n    get:\n      operationId: fetchKafkaConfig\n      parameters:\n      - in: path\n        name: uuid\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/KafkaConfigDoc'\n          description: default response\n      summary: Fetch a kafkaConfig doc by its UUID\n      tags:\n      - Kafka Config\n    put:\n      operationId: updateKafkaConfig\n      parameters:\n      - in: path\n        name: uuid\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/KafkaConfigDoc'\n        description: doc\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/KafkaConfigDoc'\n          description: default response\n      summary: Update a kafkaConfig doc\n      tags:\n      - Kafka Config\n  /meta/v1/find:\n    post:\n      operationId: findMetaRow\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FindMetaCriteria'\n        description: criteria\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResultPageMetaRow'\n          description: default response\n      summary: Find matching meta data\n      tags:\n      - Meta\n  /meta/v1/getReprocessSelectionSummary:\n    post:\n      operationId: getMetaReprocessSelectionSummary\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FindMetaCriteria'\n        description: criteria\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SelectionSummary'\n          description: default response\n      summary: Get a summary of the parent items of the selected meta data\n      tags:\n      - Meta\n  /meta/v1/getSelectionSummary:\n    post:\n      operationId: getMetaSelectionSummary\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FindMetaCriteria'\n        description: criteria\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SelectionSummary'\n          description: default response\n      summary: Get a summary of the selected meta data\n      tags:\n      - Meta\n  /meta/v1/getTypes:\n    get:\n      operationId: getStreamTypes\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n          description: default response\n      summary: Get a list of possible stream types\n      tags:\n      - Meta\n  /meta/v1/update/status:\n    put:\n      operationId: updateMetaStatus\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateStatusRequest'\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: integer\n                format: int32\n          description: default response\n      summary: Update status on matching meta data\n      tags:\n      - Meta\n  /meta/v1/{id}:\n    get:\n      operationId: fetch\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Meta'\n          description: default response\n      summary: Get a meta record for a given id, if permitted.\n      tags:\n      - Meta\n  /node/v1/all:\n    get:\n      operationId: listAllNodes\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n          description: default response\n      summary: Lists all nodes\n      tags:\n      - Nodes\n  /node/v1/enabled:\n    get:\n      operationId: listEnabledNodes\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n          description: default response\n      summary: Lists enabled nodes\n      tags:\n      - Nodes\n  /node/v1/enabled/{nodeName}:\n    put:\n      operationId: setNodeEnabled\n      parameters:\n      - in: path\n        name: nodeName\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: boolean\n        description: enabled\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: boolean\n          description: default response\n      summary: Sets whether a node is enabled\n      tags:\n      - Nodes\n  /node/v1/find:\n    post:\n      operationId: findNodes\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FindNodeStatusCriteria'\n        description: findNodeStatusCriteria\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FetchNodeStatusResponse'\n          description: default response\n      summary: Finds nodes matching criteria and sort order\n      tags:\n      - Nodes\n  /node/v1/info/{nodeName}:\n    get:\n      operationId: fetchNodeInfo\n      parameters:\n      - in: path\n        name: nodeName\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClusterNodeInfo'\n          description: default response\n      summary: Gets detailed information about a node\n      tags:\n      - Nodes\n  /node/v1/ping/{nodeName}:\n    get:\n      operationId: pingNode\n      parameters:\n      - in: path\n        name: nodeName\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: integer\n                format: int64\n          description: default response\n      summary: Gets a ping time for a node\n      tags:\n      - Nodes\n  /node/v1/priority/{nodeName}:\n    put:\n      operationId: setNodePriority\n      parameters:\n      - in: path\n        name: nodeName\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: integer\n              format: int32\n        description: nodeName\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: boolean\n          description: default response\n      summary: Sets the priority of a node\n      tags:\n      - Nodes\n  /oauth2/v1/noauth/.well-known/openid-configuration:\n    get:\n      operationId: openIdConfiguration\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: string\n          description: default response\n      summary: Provides discovery for openid configuration\n      tags:\n      - API Keys\n      - Authentication\n  /oauth2/v1/noauth/auth:\n    get:\n      operationId: openIdAuth\n      parameters:\n      - in: query\n        name: scope\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: response_type\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: client_id\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: redirect_uri\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: nonce\n        schema:\n          type: string\n      - in: query\n        name: state\n        schema:\n          type: string\n      - in: query\n        name: prompt\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json: {}\n          description: default response\n      summary: Submit an OpenId AuthenticationRequest.\n      tags:\n      - Authentication\n  /oauth2/v1/noauth/certs:\n    get:\n      operationId: openIdCerts\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: array\n                  items:\n                    type: object\n                    additionalProperties:\n                      type: object\n          description: default response\n      summary: Provides access to this service's current public key. A client may\n        use these keys to verify JWTs issued by this service.\n      tags:\n      - API Keys\n      - Authentication\n  /oauth2/v1/noauth/token:\n    post:\n      operationId: openIdToken\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TokenResponse'\n          description: default response\n      summary: Get a token from an access code or refresh token\n      tags:\n      - Authentication\n  /permission/app/v1:\n    get:\n      operationId: getUserAndPermissions\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserAndPermissions'\n          description: default response\n      summary: User and app permissions for the current session\n      tags:\n      - Application Permissions\n  /permission/app/v1/changeUser:\n    post:\n      operationId: changeUserPermissions\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ChangeUserRequest'\n        description: changeUserRequest\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: boolean\n          description: default response\n      summary: User and app permissions for the current session\n      tags:\n      - Application Permissions\n  /permission/app/v1/fetchAllPermissions:\n    get:\n      operationId: fetchAllPermissions\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n          description: default response\n      summary: Get all possible permissions\n      tags:\n      - Application Permissions\n  /permission/app/v1/fetchUserAppPermissions:\n    post:\n      operationId: fetchUserAppPermissions\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n        description: user\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserAndPermissions'\n          description: default response\n      summary: User and app permissions for the specified user\n      tags:\n      - Application Permissions\n  /permission/changeEvent/v1/fireChange/{nodeName}:\n    post:\n      operationId: firePermissionChangeEvent\n      parameters:\n      - in: path\n        name: nodeName\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PermissionChangeRequest'\n        description: request\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: boolean\n          description: default response\n      summary: Fires a permission change event\n      tags:\n      - Application Permissions\n  /permission/doc/v1/changeDocumentPermissions:\n    post:\n      operationId: changeDocumentPermissions\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ChangeDocumentPermissionsRequest'\n        description: request\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: boolean\n          description: default response\n      summary: Change document permissions\n      tags:\n      - Doc Permissions\n  /permission/doc/v1/checkDocumentPermission:\n    post:\n      operationId: checkDocumentPermission\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CheckDocumentPermissionRequest'\n        description: request\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: boolean\n          description: default response\n      summary: Check document permission\n      tags:\n      - Doc Permissions\n  /permission/doc/v1/copyPermissionsFromParent:\n    post:\n      operationId: copyPermissionFromParent\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CopyPermissionsFromParentRequest'\n        description: request\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DocumentPermissions'\n          description: default response\n      summary: Copy permissions from parent\n      tags:\n      - Doc Permissions\n  /permission/doc/v1/fetchAllDocumentPermissions:\n    post:\n      operationId: fetchAllDocumentPermissions\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FetchAllDocumentPermissionsRequest'\n        description: request\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DocumentPermissions'\n          description: default response\n      summary: Fetch document permissions\n      tags:\n      - Doc Permissions\n  /permission/doc/v1/filterUsers:\n    post:\n      operationId: filterUsers\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FilterUsersRequest'\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/SimpleUser'\n          description: default response\n      summary: Get all permissions for a given document type\n      tags:\n      - Doc Permissions\n  /permission/doc/v1/getPermissionForDocType/${docType}:\n    get:\n      operationId: getPermissionForDocType\n      parameters:\n      - in: path\n        name: docType\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n          description: default response\n      summary: Get all permissions for a given document type\n      tags:\n      - Doc Permissions\n  /pipeline/v1/fetchPipelineData:\n    post:\n      operationId: fetchPipelineData\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DocRef'\n        description: pipeline\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/PipelineData'\n          description: default response\n      summary: Fetch data for a pipeline\n      tags:\n      - Pipelines\n  /pipeline/v1/fetchPipelineXml:\n    post:\n      operationId: fetchPipelineXml\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DocRef'\n        description: pipeline\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FetchPipelineXmlResponse'\n          description: default response\n      summary: Fetch the XML for a pipeline\n      tags:\n      - Pipelines\n  /pipeline/v1/propertyTypes:\n    get:\n      operationId: getPipelinePropertyTypes\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/FetchPropertyTypesResult'\n          description: default response\n      summary: Get pipeline property types\n      tags:\n      - Pipelines\n  /pipeline/v1/savePipelineXml:\n    put:\n      operationId: savePipelineXml\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SavePipelineXmlRequest'\n        description: request\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: boolean\n          description: default response\n      summary: Update a pipeline doc with XML directly\n      tags:\n      - Pipelines\n  /pipeline/v1/{uuid}:\n    get:\n      operationId: fetchPipeline\n      parameters:\n      - in: path\n        name: uuid\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PipelineDoc'\n          description: default response\n      summary: Fetch a pipeline doc by its UUID\n      tags:\n      - Pipelines\n    put:\n      operationId: updatePipeline\n      parameters:\n      - in: path\n        name: uuid\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PipelineDoc'\n        description: doc\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PipelineDoc'\n          description: default response\n      summary: Update a pipeline doc\n      tags:\n      - Pipelines\n  /preferences/v1:\n    get:\n      operationId: fetchUserPreferences\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserPreferences'\n          description: default response\n      summary: Fetch user preferences.\n      tags:\n      - Preferences\n    post:\n      operationId: updateUserPreferences\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserPreferences'\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: boolean\n          description: default response\n      summary: Update user preferences\n      tags:\n      - Preferences\n  /preferences/v1/resetToDefaultUserPreferences:\n    post:\n      operationId: resetToDefaultUserPreferences\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserPreferences'\n          description: default response\n      summary: Resets preferences to the defaults\n      tags:\n      - Preferences\n  /preferences/v1/setDefaultUserPreferences:\n    post:\n      operationId: setDefaultUserPreferences\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserPreferences'\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserPreferences'\n          description: default response\n      summary: Sets the default preferences for all users\n      tags:\n      - Preferences\n  /processor/v1/{id}:\n    delete:\n      operationId: deleteProcessor\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          format: int32\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: boolean\n          description: default response\n      summary: Deletes a processor\n      tags:\n      - Processors\n    get:\n      operationId: fetchProcessor\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          format: int32\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Processor'\n          description: default response\n      summary: Fetch a processor\n      tags:\n      - Processors\n  /processor/v1/{id}/enabled:\n    put:\n      operationId: setProcessorEnabled\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          format: int32\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: boolean\n        description: enabled\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: boolean\n          description: default response\n      summary: Sets the enabled/disabled state for a processor\n      tags:\n      - Processors\n  /processorFilter/v1:\n    post:\n      operationId: createProcessorFilter\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateProcessFilterRequest'\n        description: request\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProcessorFilter'\n          description: default response\n      summary: Creates a filter\n      tags:\n      - Processor Filters\n  /processorFilter/v1/find:\n    post:\n      operationId: findProcessorFilters\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FetchProcessorRequest'\n        description: request\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProcessorListRowResultPage'\n          description: default response\n      summary: Finds processors and filters matching request\n      tags:\n      - Processor Filters\n  /processorFilter/v1/reprocess:\n    post:\n      operationId: reprocessData\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateProcessFilterRequest'\n        description: criteria\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ReprocessDataInfo'\n          description: default response\n      summary: Create filters to reprocess data\n      tags:\n      - Processor Filters\n  /processorFilter/v1/{id}:\n    delete:\n      operationId: deleteProcessorFilter\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          format: int32\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: boolean\n          description: default response\n      summary: Deletes a filter\n      tags:\n      - Processor Filters\n    get:\n      operationId: fetchProcessorFilter\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          format: int32\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProcessorFilter'\n          description: default response\n      summary: Fetch a filter\n      tags:\n      - Processor Filters\n    put:\n      operationId: updateProcessorFilter\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          format: int32\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ProcessorFilter'\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProcessorFilter'\n          description: default response\n      summary: Updates a filter\n      tags:\n      - Processor Filters\n  /processorFilter/v1/{id}/enabled:\n    put:\n      operationId: setProcessorFilterEnabled\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          format: int32\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: boolean\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: boolean\n          description: default response\n      summary: Sets the enabled/disabled state for a filter\n      tags:\n      - Processor Filters\n  /processorFilter/v1/{id}/priority:\n    put:\n      operationId: setProcessorFilterPriority\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          format: int32\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: integer\n              format: int32\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: boolean\n          description: default response\n      summary: Sets the priority for a filter\n      tags:\n      - Processor Filters\n  /processorTask/v1/abandon/{nodeName}:\n    post:\n      operationId: abandonProcessorTasks\n      parameters:\n      - in: path\n        name: nodeName\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ProcessorTaskList'\n        description: request\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: boolean\n          description: default response\n      summary: Abandon some tasks\n      tags:\n      - Processor Tasks\n  /processorTask/v1/assign/{nodeName}:\n    post:\n      operationId: assignProcessorTasks\n      parameters:\n      - in: path\n        name: nodeName\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AssignTasksRequest'\n        description: request\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProcessorTaskList'\n          description: default response\n      summary: Assign some tasks\n      tags:\n      - Processor Tasks\n  /processorTask/v1/find:\n    post:\n      operationId: findProcessorTasks\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ExpressionCriteria'\n        description: expressionCriteria\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResultPageProcessorTask'\n          description: default response\n      summary: Finds processors tasks\n      tags:\n      - Processor Tasks\n  /processorTask/v1/summary:\n    post:\n      operationId: findProcessorTaskSummary\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ExpressionCriteria'\n        description: expressionCriteria\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResultPageProcessorTaskSummary'\n          description: default response\n      summary: Finds processor task summaries\n      tags:\n      - Processor Tasks\n  /refData/v1/clearBufferPool:\n    delete:\n      operationId: clearBufferPool\n      parameters:\n      - in: query\n        name: nodeName\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json: {}\n          description: default response\n      summary: Clear all buffers currently available in the buffer pool to reclaim\n        memory. Performed on the named node or all nodes if null.\n      tags:\n      - Reference Data\n  /refData/v1/entries:\n    get:\n      description: This is primarily intended  for small scale debugging in non-production\n        environments. If no limit is set a default limit is applied else the results\n        will be limited to limit entries.\n      operationId: getReferenceStoreEntries\n      parameters:\n      - in: query\n        name: limit\n        schema:\n          type: integer\n          format: int32\n      - in: query\n        name: refStreamId\n        schema:\n          type: integer\n          format: int64\n      - in: query\n        name: mapName\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RefStoreEntry'\n          description: default response\n      summary: List entries from the reference data store on the node called.\n      tags:\n      - Reference Data\n  /refData/v1/lookup:\n    post:\n      operationId: lookupReferenceData\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RefDataLookupRequest'\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: string\n          description: default response\n      summary: Perform a reference data lookup using the supplied lookup request.\n        Reference data will be loaded if required using the supplied reference pipeline.\n        Performed on this node only.\n      tags:\n      - Reference Data\n  /refData/v1/purgeByAge/{purgeAge}:\n    delete:\n      operationId: purgeReferenceDataByAge\n      parameters:\n      - in: path\n        name: purgeAge\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: nodeName\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: boolean\n          description: default response\n      summary: Explicitly delete all entries that are older than purgeAge. Performed\n        on the named node, or all nodes if null.\n      tags:\n      - Reference Data\n  /refData/v1/purgeByStream/{refStreamId}:\n    delete:\n      operationId: purgeReferenceDataByStream\n      parameters:\n      - in: path\n        name: refStreamId\n        required: true\n        schema:\n          type: integer\n          format: int64\n          minimum: 1\n      - in: query\n        name: nodeName\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: boolean\n          description: default response\n      summary: Delete all entries for a reference stream. Performed on the named node\n        or all nodes if null.\n      tags:\n      - Reference Data\n  /refData/v1/refStreamInfo:\n    get:\n      description: This is primarily intended  for small scale debugging in non-production\n        environments. If no limit is set a default limit is applied else the results\n        will be limited to limit entries. Performed on this node only.\n      operationId: getReferenceStreamProcessingInfoEntries\n      parameters:\n      - in: query\n        name: limit\n        schema:\n          type: integer\n          format: int32\n      - in: query\n        name: refStreamId\n        schema:\n          type: integer\n          format: int64\n      - in: query\n        name: mapName\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ProcessingInfoResponse'\n          description: default response\n      summary: List processing info entries for all ref streams\n      tags:\n      - Reference Data\n  /remoteSearch/v1/destroy:\n    get:\n      operationId: destroyRemoteSearch\n      parameters:\n      - in: query\n        name: queryKey\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: boolean\n          description: default response\n      summary: Destroy search results\n      tags:\n      - Remote Search\n  /remoteSearch/v1/poll:\n    get:\n      operationId: pollRemoteSearch\n      parameters:\n      - in: query\n        name: queryKey\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/octet-stream: {}\n          description: default response\n      summary: Poll the server for search results for the supplied queryKey\n      tags:\n      - Remote Search\n  /remoteSearch/v1/start:\n    post:\n      operationId: startRemoteSearch\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ClusterSearchTask'\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: boolean\n          description: default response\n      summary: Start a search\n      tags:\n      - Remote Search\n  /ruleset/v2/export:\n    post:\n      operationId: exportReceiveDataRules\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DocRef'\n        description: DocRef\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Base64EncodedDocumentData'\n          description: default response\n      summary: Submit an export request\n      tags:\n      - Rule Set\n  /ruleset/v2/import:\n    post:\n      operationId: importReceiveDataRules\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Base64EncodedDocumentData'\n        description: DocumentData\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DocRef'\n          description: default response\n      summary: Submit an import request\n      tags:\n      - Rule Set\n  /ruleset/v2/list:\n    get:\n      operationId: listReceiveDataRules\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DocRef'\n                uniqueItems: true\n          description: default response\n      summary: Submit a request for a list of doc refs held by this service\n      tags:\n      - Rule Set\n  /ruleset/v2/{uuid}:\n    get:\n      operationId: fetchReceiveDataRules\n      parameters:\n      - in: path\n        name: uuid\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ReceiveDataRules'\n          description: default response\n      summary: Fetch a rules doc by its UUID\n      tags:\n      - Rule Set\n    put:\n      operationId: updateReceiveDataRules\n      parameters:\n      - in: path\n        name: uuid\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ReceiveDataRules'\n        description: doc\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ReceiveDataRules'\n          description: default response\n      summary: Update a rules doc\n      tags:\n      - Rule Set\n  /scheduledTime/v1:\n    post:\n      operationId: getScheduledTimes\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/GetScheduledTimesRequest'\n        description: request\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ScheduledTimes'\n          description: default response\n      summary: Gets scheduled time info\n      tags:\n      - Scheduled Time\n  /script/v1/fetchLinkedScripts:\n    post:\n      operationId: fetchLinkedScripts\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FetchLinkedScriptRequest'\n        description: request\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ScriptDoc'\n          description: default response\n      summary: Fetch related scripts\n      tags:\n      - Scripts\n  /script/v1/{uuid}:\n    get:\n      operationId: fetchScript\n      parameters:\n      - in: path\n        name: uuid\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ScriptDoc'\n          description: default response\n      summary: Fetch a script doc by its UUID\n      tags:\n      - Scripts\n    put:\n      operationId: updateScript\n      parameters:\n      - in: path\n        name: uuid\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ScriptDoc'\n        description: doc\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ScriptDoc'\n          description: default response\n      summary: Update a script doc\n      tags:\n      - Scripts\n  /searchable/v2/dataSource:\n    post:\n      operationId: getSearchableDataSource\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DocRef'\n        description: DocRef\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DataSource'\n          description: default response\n      summary: Submit a request for a data source definition, supplying the DocRef\n        for the data source\n      tags:\n      - Searchable\n  /searchable/v2/destroy:\n    post:\n      operationId: destroySearchableQuery\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/QueryKey'\n        description: QueryKey\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: boolean\n          description: default response\n      summary: Destroy a running query\n      tags:\n      - Searchable\n  /searchable/v2/keepAlive:\n    post:\n      operationId: keepAliveSearchableQuery\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/QueryKey'\n        description: QueryKey\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: boolean\n          description: default response\n      summary: Keep a running query alive\n      tags:\n      - Searchable\n  /searchable/v2/search:\n    post:\n      operationId: startSearchableQuery\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SearchRequest'\n        description: SearchRequest\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SearchResponse'\n          description: default response\n      summary: Submit a search request\n      tags:\n      - Searchable\n  /session/v1/list:\n    get:\n      operationId: listSessions\n      parameters:\n      - in: query\n        name: nodeName\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SessionListResponse'\n          description: default response\n      summary: Lists user sessions for a node, or all nodes in the cluster if nodeName\n        is null\n      tags:\n      - Sessions\n  /session/v1/logout:\n    get:\n      operationId: stroomLogout\n      parameters:\n      - in: query\n        name: redirect_uri\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UrlResponse'\n          description: default response\n      summary: Logout of Stroom session\n      tags:\n      - Sessions\n  /session/v1/noauth/validateSession:\n    get:\n      operationId: validateStroomSession\n      parameters:\n      - in: query\n        name: redirect_uri\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidateSessionResponse'\n          description: default response\n      summary: Validate the current session, return a redirect Uri if invalid.\n      tags:\n      - Sessions\n  /sessionInfo/v1:\n    get:\n      operationId: getSessionInfo\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SessionInfo'\n          description: default response\n      summary: Get information for the current session\n      tags:\n      - Session Info\n  /solrIndex/v1/fetchSolrTypes:\n    post:\n      operationId: fetchSolrTypes\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SolrIndexDoc'\n        description: solrIndexDoc\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n          description: default response\n      summary: Fetch Solr types\n      tags:\n      - Solr Indices\n  /solrIndex/v1/solrConnectionTest:\n    post:\n      operationId: solrConnectionTest\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SolrIndexDoc'\n        description: solrIndexDoc\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SolrConnectionTestResponse'\n          description: default response\n      summary: Test connection to Solr\n      tags:\n      - Solr Indices\n  /solrIndex/v1/{uuid}:\n    get:\n      operationId: fetchSolrIndex\n      parameters:\n      - in: path\n        name: uuid\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SolrIndexDoc'\n          description: default response\n      summary: Fetch a solr index doc by its UUID\n      tags:\n      - Solr Indices\n    put:\n      operationId: updateSolrIndex\n      parameters:\n      - in: path\n        name: uuid\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SolrIndexDoc'\n        description: doc\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SolrIndexDoc'\n          description: default response\n      summary: Update a solr index doc\n      tags:\n      - Solr Indices\n  /sqlstatistics/v2/dataSource:\n    post:\n      operationId: getSqlStatisticsDataSource\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DocRef'\n        description: DocRef\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DataSource'\n          description: default response\n      summary: Submit a request for a data source definition, supplying the DocRef\n        for the data source\n      tags:\n      - Sql Statistics Query\n  /sqlstatistics/v2/destroy:\n    post:\n      operationId: destroySqlStatisticsQuery\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/QueryKey'\n        description: QueryKey\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: boolean\n          description: default response\n      summary: Destroy a running query\n      tags:\n      - Sql Statistics Query\n  /sqlstatistics/v2/keepAlive:\n    post:\n      operationId: keepAliveSqlStatisticsQuery\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/QueryKey'\n        description: QueryKey\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: boolean\n          description: default response\n      summary: Keep a running query alive\n      tags:\n      - Sql Statistics Query\n  /sqlstatistics/v2/search:\n    post:\n      operationId: startSqlStatisticsQuery\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SearchRequest'\n        description: SearchRequest\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SearchResponse'\n          description: default response\n      summary: Submit a search request\n      tags:\n      - Sql Statistics Query\n  /statistic/rollUp/v1/bitMaskConversion:\n    post:\n      operationId: statisticBitMaskConversion\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                type: integer\n                format: int32\n        description: maskValues\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/CustomRollUpMaskFields'\n          description: default response\n      summary: Get rollup bit mask\n      tags:\n      - SQL Statistics RollUps\n  /statistic/rollUp/v1/bitMaskPermGeneration:\n    post:\n      operationId: statisticBitMaskPermGeneration\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: integer\n              format: int32\n        description: fieldCount\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/CustomRollUpMask'\n          description: default response\n      summary: Create rollup bit mask\n      tags:\n      - SQL Statistics RollUps\n  /statistic/rollUp/v1/dataSourceFieldChange:\n    post:\n      operationId: statisticFieldChange\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/StatisticsDataSourceFieldChangeRequest'\n        description: request\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StatisticsDataSourceData'\n          description: default response\n      summary: Change fields\n      tags:\n      - SQL Statistics RollUps\n  /statistic/v1/{uuid}:\n    get:\n      operationId: fetchStatisticStore\n      parameters:\n      - in: path\n        name: uuid\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StatisticStoreDoc'\n          description: default response\n      summary: Fetch a statistic doc by its UUID\n      tags:\n      - SQL Statistics Stores\n    put:\n      operationId: updateStatisticStore\n      parameters:\n      - in: path\n        name: uuid\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/StatisticStoreDoc'\n        description: doc\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StatisticStoreDoc'\n          description: default response\n      summary: Update a statistic doc\n      tags:\n      - SQL Statistics Stores\n  /statsStore/rollUp/v1/bitMaskConversion:\n    post:\n      operationId: statsBitMaskConversion\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                type: integer\n                format: int32\n        description: maskValues\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResultPageCustomRollUpMaskFields'\n          description: default response\n      summary: Get rollup bit mask\n      tags:\n      - Stroom Stats RollUps\n  /statsStore/rollUp/v1/bitMaskPermGeneration:\n    post:\n      operationId: statsBitMaskPermGeneration\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: integer\n              format: int32\n        description: fieldCount\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResultPageCustomRollUpMask'\n          description: default response\n      summary: Create rollup bit mask\n      tags:\n      - Stroom Stats RollUps\n  /statsStore/rollUp/v1/dataSourceFieldChange:\n    post:\n      operationId: statsFieldChange\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/StroomStatsStoreFieldChangeRequest'\n        description: request\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StroomStatsStoreEntityData'\n          description: default response\n      summary: Change fields\n      tags:\n      - Stroom Stats RollUps\n  /statsStore/v1/{uuid}:\n    get:\n      operationId: fetchStroomStatsStore\n      parameters:\n      - in: path\n        name: uuid\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StroomStatsStoreDoc'\n          description: default response\n      summary: Fetch a store doc doc by its UUID\n      tags:\n      - Stroom Stats Stores\n    put:\n      operationId: updateStroomStatsStore\n      parameters:\n      - in: path\n        name: uuid\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/StroomStatsStoreDoc'\n        description: doc\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StroomStatsStoreDoc'\n          description: default response\n      summary: Update a stats store doc\n      tags:\n      - Stroom Stats Stores\n  /stepping/v1/findElementDoc:\n    post:\n      operationId: findElementDoc\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FindElementDocRequest'\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DocRef'\n          description: default response\n      summary: Load the document for an element\n      tags:\n      - Stepping\n  /stepping/v1/getPipelineForStepping:\n    post:\n      operationId: getPipelineForStepping\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/GetPipelineForMetaRequest'\n        description: request\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DocRef'\n          description: default response\n      summary: Get a pipeline for stepping\n      tags:\n      - Stepping\n  /stepping/v1/step:\n    post:\n      operationId: step\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PipelineStepRequest'\n        description: request\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SteppingResult'\n          description: default response\n      summary: Step a pipeline\n      tags:\n      - Stepping\n  /storedQuery/v1/create:\n    post:\n      operationId: createStoredQuery\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/StoredQuery'\n        description: storedQuery\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StoredQuery'\n          description: default response\n      summary: Create a stored query\n      tags:\n      - Stored Queries\n  /storedQuery/v1/delete:\n    delete:\n      operationId: deleteStoredQuery\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/StoredQuery'\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: boolean\n          description: default response\n      summary: Delete a stored query\n      tags:\n      - Stored Queries\n  /storedQuery/v1/find:\n    post:\n      operationId: findStoredQueries\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FindStoredQueryCriteria'\n        description: criteria\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResultPageStoredQuery'\n          description: default response\n      summary: Find stored queries\n      tags:\n      - Stored Queries\n  /storedQuery/v1/read:\n    post:\n      operationId: fetchStoredQuery\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/StoredQuery'\n        description: storedQuery\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StoredQuery'\n          description: default response\n      summary: Fetch a stored query\n      tags:\n      - Stored Queries\n  /storedQuery/v1/update:\n    put:\n      operationId: updateStoredQuery\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/StoredQuery'\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StoredQuery'\n          description: default response\n      summary: Update a stored query\n      tags:\n      - Stored Queries\n  /stroom-elastic-index/v2/dataSource:\n    post:\n      operationId: getElasticIndexDataSource\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DocRef'\n        description: DocRef\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DataSource'\n          description: default response\n      summary: Submit a request for a data source definition, supplying the DocRef\n        for the data source\n      tags:\n      - Elasticsearch Queries\n  /stroom-elastic-index/v2/destroy:\n    post:\n      operationId: destroyElasticIndexQuery\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/QueryKey'\n        description: QueryKey\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: boolean\n          description: default response\n      summary: Destroy a running query\n      tags:\n      - Elasticsearch Queries\n  /stroom-elastic-index/v2/keepAlive:\n    post:\n      operationId: keepAliveElasticIndexQuery\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/QueryKey'\n        description: QueryKey\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: boolean\n          description: default response\n      summary: Keep a running query alive\n      tags:\n      - Elasticsearch Queries\n  /stroom-elastic-index/v2/search:\n    post:\n      operationId: searchElasticIndex\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SearchRequest'\n        description: SearchRequest\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SearchResponse'\n          description: default response\n      summary: Submit a search request\n      tags:\n      - Elasticsearch Queries\n  /stroom-index/v2/dataSource:\n    post:\n      operationId: getStroomIndexDataSource\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DocRef'\n        description: DocRef\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DataSource'\n          description: default response\n      summary: Submit a request for a data source definition, supplying the DocRef\n        for the data source\n      tags:\n      - Stroom-Index Queries\n  /stroom-index/v2/destroy:\n    post:\n      operationId: destroyStroomIndexQuery\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/QueryKey'\n        description: QueryKey\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: boolean\n          description: default response\n      summary: Destroy a running query\n      tags:\n      - Stroom-Index Queries\n  /stroom-index/v2/keepAlive:\n    post:\n      operationId: keepAliveStroomIndexQuery\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/QueryKey'\n        description: QueryKey\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: boolean\n          description: default response\n      summary: Keep a running query alive\n      tags:\n      - Stroom-Index Queries\n  /stroom-index/v2/search:\n    post:\n      operationId: startStroomIndexQuery\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SearchRequest'\n        description: SearchRequest\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SearchResponse'\n          description: default response\n      summary: Submit a search request\n      tags:\n      - Stroom-Index Queries\n  /stroom-solr-index/v2/dataSource:\n    post:\n      operationId: getSolrIndexDataSource\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DocRef'\n        description: DocRef\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DataSource'\n          description: default response\n      summary: Submit a request for a data source definition, supplying the DocRef\n        for the data source\n      tags:\n      - Solr Queries\n  /stroom-solr-index/v2/destroy:\n    post:\n      operationId: destroySolrIndexQuery\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/QueryKey'\n        description: QueryKey\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: boolean\n          description: default response\n      summary: Destroy a running query\n      tags:\n      - Solr Queries\n  /stroom-solr-index/v2/keepAlive:\n    post:\n      operationId: keepAliveSolrIndexQuery\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/QueryKey'\n        description: QueryKey\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: boolean\n          description: default response\n      summary: Keep a running query alive\n      tags:\n      - Solr Queries\n  /stroom-solr-index/v2/search:\n    post:\n      operationId: startSolrIndexQuery\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SearchRequest'\n        description: SearchRequest\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SearchResponse'\n          description: default response\n      summary: Submit a search request\n      tags:\n      - Solr Queries\n  /suggest/v1:\n    post:\n      operationId: fetchSuggestions\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FetchSuggestionsRequest'\n        description: request\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n          description: default response\n      summary: Fetch some suggestions\n      tags:\n      - Suggestions\n  /systemInfo/v1:\n    get:\n      operationId: getAllSystemInfo\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SystemInfoResultList'\n          description: default response\n      summary: Get all system info results\n      tags:\n      - System Info\n  /systemInfo/v1/names:\n    get:\n      operationId: getSystemInfoNames\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n          description: default response\n      summary: Get all system info result names\n      tags:\n      - System Info\n  /systemInfo/v1/params/{name}:\n    get:\n      operationId: getSystemInfoParams\n      parameters:\n      - in: path\n        name: name\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ParamInfo'\n          description: default response\n      summary: Gets the parameters for this system info provider\n      tags:\n      - System Info\n  /systemInfo/v1/{name}:\n    get:\n      operationId: getSystemInfoByName\n      parameters:\n      - in: path\n        name: name\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SystemInfoResult'\n          description: default response\n      summary: Get a system info result by name\n      tags:\n      - System Info\n  /task/v1/find/{nodeName}:\n    post:\n      operationId: findTasks\n      parameters:\n      - in: path\n        name: nodeName\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FindTaskProgressRequest'\n        description: request\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TaskProgressResponse'\n          description: default response\n      summary: Finds tasks for a node\n      tags:\n      - Tasks\n  /task/v1/list/{nodeName}:\n    get:\n      operationId: listTasks\n      parameters:\n      - in: path\n        name: nodeName\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TaskProgressResponse'\n          description: default response\n      summary: Lists tasks for a node\n      tags:\n      - Tasks\n  /task/v1/terminate/{nodeName}:\n    post:\n      operationId: terminateTasks\n      parameters:\n      - in: path\n        name: nodeName\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TerminateTaskProgressRequest'\n        description: request\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: boolean\n          description: default response\n      summary: Terminates tasks for a node\n      tags:\n      - Tasks\n  /task/v1/user/{nodeName}:\n    get:\n      operationId: listUserTasks\n      parameters:\n      - in: path\n        name: nodeName\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TaskProgressResponse'\n          description: default response\n      summary: Lists tasks for a node\n      tags:\n      - Tasks\n  /textConverter/v1/{uuid}:\n    get:\n      operationId: fetchTextConverter\n      parameters:\n      - in: path\n        name: uuid\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TextConverterDoc'\n          description: default response\n      summary: Fetch a text converter doc by its UUID\n      tags:\n      - Text Converters\n    put:\n      operationId: updateTextConverter\n      parameters:\n      - in: path\n        name: uuid\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TextConverterDoc'\n        description: doc\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TextConverterDoc'\n          description: default response\n      summary: Update a text converter doc\n      tags:\n      - Text Converters\n  /userNames/v1/find:\n    post:\n      operationId: findUserNames\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FindUserNameCriteria'\n        description: criteria\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResultPageString'\n          description: default response\n      summary: Find the user names matching the supplied criteria\n      tags:\n      - Authorisation\n  /users/v1:\n    get:\n      operationId: findUsers\n      parameters:\n      - in: query\n        name: name\n        schema:\n          type: string\n      - in: query\n        name: isGroup\n        schema:\n          type: boolean\n      - in: query\n        name: uuid\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n          description: default response\n      summary: Find the users matching the supplied criteria\n      tags:\n      - Authorisation\n  /users/v1/associates:\n    get:\n      operationId: getAssociatedUsers\n      parameters:\n      - in: query\n        name: filter\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n          description: default response\n      summary: Gets a list of associated users\n      tags:\n      - Authorisation\n  /users/v1/create/{name}/{isGroup}:\n    post:\n      operationId: createUser\n      parameters:\n      - in: path\n        name: name\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: isGroup\n        required: true\n        schema:\n          type: boolean\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n          description: default response\n      summary: Creates a user or group with the supplied name\n      tags:\n      - Authorisation\n  /users/v1/find:\n    post:\n      operationId: findUsersByCriteria\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FindUserCriteria'\n        description: criteria\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResultPageUser'\n          description: default response\n      summary: Find the users matching the supplied criteria\n      tags:\n      - Authorisation\n  /users/v1/{userUuid}:\n    get:\n      operationId: fetchUser\n      parameters:\n      - in: path\n        name: userUuid\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n          description: default response\n      summary: Fetches the user with the supplied UUID\n      tags:\n      - Authorisation\n  /users/v1/{userUuid}/{groupUuid}:\n    delete:\n      operationId: removeUserFromGroup\n      parameters:\n      - in: path\n        name: userUuid\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: groupUuid\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: boolean\n          description: default response\n      summary: Removes user with UUID userUuid from the group with UUID groupUuid\n      tags:\n      - Authorisation\n    put:\n      operationId: addUserToGroup\n      parameters:\n      - in: path\n        name: userUuid\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: groupUuid\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: boolean\n          description: default response\n      summary: Adds user with UUID userUuid to the group with UUID groupUuid\n      tags:\n      - Authorisation\n  /users/v1/{uuid}:\n    delete:\n      operationId: deleteUser\n      parameters:\n      - in: path\n        name: uuid\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: boolean\n          description: default response\n      summary: Deletes the user with the supplied UUID\n      tags:\n      - Authorisation\n  /visualisation/v1/{uuid}:\n    get:\n      operationId: fetchVisualisation\n      parameters:\n      - in: path\n        name: uuid\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VisualisationDoc'\n          description: default response\n      summary: Fetch a visualisation doc by its UUID\n      tags:\n      - Visualisations\n    put:\n      operationId: updateVisualisation\n      parameters:\n      - in: path\n        name: uuid\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/VisualisationDoc'\n        description: doc\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VisualisationDoc'\n          description: default response\n      summary: Update a visualisation doc\n      tags:\n      - Visualisations\n  /welcome/v1:\n    get:\n      operationId: fetchWelcome\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Welcome'\n          description: default response\n      summary: Get the configured HTML welcome message\n      tags:\n      - Welcome\n  /xmlSchema/v1/{uuid}:\n    get:\n      operationId: fetchXmlSchema\n      parameters:\n      - in: path\n        name: uuid\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/XmlSchemaDoc'\n          description: default response\n      summary: Fetch a xml schema doc by its UUID\n      tags:\n      - XML Schemas\n    put:\n      operationId: updateXmlSchema\n      parameters:\n      - in: path\n        name: uuid\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/XmlSchemaDoc'\n        description: doc\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/XmlSchemaDoc'\n          description: default response\n      summary: Update a xml schema doc\n      tags:\n      - XML Schemas\n  /xslt/v1/{uuid}:\n    get:\n      operationId: fetchXslt\n      parameters:\n      - in: path\n        name: uuid\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/XsltDoc'\n          description: default response\n      summary: Fetch an xslt doc by its UUID\n      tags:\n      - XSLTs\n    put:\n      operationId: updateXslt\n      parameters:\n      - in: path\n        name: uuid\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/XsltDoc'\n        description: doc\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/XsltDoc'\n          description: default response\n      summary: Update a an xslt doc\n      tags:\n      - XSLTs\ncomponents:\n  schemas:\n    AbstractFetchDataResult:\n      type: object\n      discriminator:\n        propertyName: type\n      properties:\n        availableChildStreamTypes:\n          type: array\n          items:\n            type: string\n          uniqueItems: true\n        classification:\n          type: string\n        displayMode:\n          type: string\n          enum:\n          - TEXT\n          - HEX\n          - MARKER\n        errors:\n          type: array\n          items:\n            type: string\n        feedName:\n          type: string\n        itemRange:\n          $ref: '#/components/schemas/OffsetRange'\n        sourceLocation:\n          $ref: '#/components/schemas/SourceLocation'\n        streamTypeName:\n          type: string\n        totalCharacterCount:\n          $ref: '#/components/schemas/CountLong'\n        totalItemCount:\n          $ref: '#/components/schemas/CountLong'\n        type:\n          type: string\n      required:\n      - type\n    AbstractField:\n      type: object\n      discriminator:\n        propertyName: type\n      properties:\n        conditions:\n          type: array\n          items:\n            type: string\n            enum:\n            - CONTAINS\n            - EQUALS\n            - GREATER_THAN\n            - GREATER_THAN_OR_EQUAL_TO\n            - LESS_THAN\n            - LESS_THAN_OR_EQUAL_TO\n            - BETWEEN\n            - IN\n            - IN_DICTIONARY\n            - IN_FOLDER\n            - IS_DOC_REF\n            - IS_NULL\n            - IS_NOT_NULL\n            - MATCHES_REGEX\n        name:\n          type: string\n        queryable:\n          type: boolean\n        type:\n          type: string\n    Account:\n      type: object\n      properties:\n        comments:\n          type: string\n        createTimeMs:\n          type: integer\n          format: int64\n        createUser:\n          type: string\n        email:\n          type: string\n        enabled:\n          type: boolean\n        firstName:\n          type: string\n        forcePasswordChange:\n          type: boolean\n        id:\n          type: integer\n          format: int32\n        inactive:\n          type: boolean\n        lastLoginMs:\n          type: integer\n          format: int64\n        lastName:\n          type: string\n        locked:\n          type: boolean\n        loginCount:\n          type: integer\n          format: int32\n        loginFailures:\n          type: integer\n          format: int32\n        neverExpires:\n          type: boolean\n        processingAccount:\n          type: boolean\n        reactivatedMs:\n          type: integer\n          format: int64\n        updateTimeMs:\n          type: integer\n          format: int64\n        updateUser:\n          type: string\n        userId:\n          type: string\n        version:\n          type: integer\n          format: int32\n    AccountResultPage:\n      type: object\n      properties:\n        pageResponse:\n          $ref: '#/components/schemas/PageResponse'\n        qualifiedFilterInput:\n          type: string\n        values:\n          type: array\n          items:\n            $ref: '#/components/schemas/Account'\n    AcknowledgeSplashRequest:\n      type: object\n      properties:\n        message:\n          type: string\n        version:\n          type: string\n    Activity:\n      type: object\n      properties:\n        createTimeMs:\n          type: integer\n          format: int64\n        createUser:\n          type: string\n        details:\n          $ref: '#/components/schemas/ActivityDetails'\n        id:\n          type: integer\n          format: int32\n        json:\n          type: string\n        updateTimeMs:\n          type: integer\n          format: int64\n        updateUser:\n          type: string\n        userId:\n          type: string\n        version:\n          type: integer\n          format: int32\n    ActivityConfig:\n      type: object\n      properties:\n        chooseOnStartup:\n          type: boolean\n        editorBody:\n          type: string\n        editorTitle:\n          type: string\n        enabled:\n          type: boolean\n        managerTitle:\n          type: string\n    ActivityDetails:\n      type: object\n      properties:\n        properties:\n          type: array\n          items:\n            $ref: '#/components/schemas/Prop'\n    ActivityValidationResult:\n      type: object\n      properties:\n        messages:\n          type: string\n        valid:\n          type: boolean\n    AddPermissionEvent:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/PermissionChangeEvent'\n      - type: object\n        properties:\n          documentUuid:\n            type: string\n          permission:\n            type: string\n          userUuid:\n            type: string\n    Annotation:\n      type: object\n      properties:\n        assignedTo:\n          type: string\n        comment:\n          type: string\n        createTime:\n          type: integer\n          format: int64\n        createUser:\n          type: string\n        history:\n          type: string\n        id:\n          type: integer\n          format: int64\n        status:\n          type: string\n        subject:\n          type: string\n        title:\n          type: string\n        updateTime:\n          type: integer\n          format: int64\n        updateUser:\n          type: string\n        version:\n          type: integer\n          format: int32\n    AnnotationDetail:\n      type: object\n      properties:\n        annotation:\n          $ref: '#/components/schemas/Annotation'\n        entries:\n          type: array\n          items:\n            $ref: '#/components/schemas/AnnotationEntry'\n    AnnotationEntry:\n      type: object\n      properties:\n        createTime:\n          type: integer\n          format: int64\n        createUser:\n          type: string\n        data:\n          type: string\n        entryType:\n          type: string\n        id:\n          type: integer\n          format: int64\n        updateTime:\n          type: integer\n          format: int64\n        updateUser:\n          type: string\n        version:\n          type: integer\n          format: int32\n    ApiKey:\n      type: object\n      properties:\n        comments:\n          type: string\n        createTimeMs:\n          type: integer\n          format: int64\n        createUser:\n          type: string\n        data:\n          type: string\n        enabled:\n          type: boolean\n        expiresOnMs:\n          type: integer\n          format: int64\n        id:\n          type: integer\n          format: int32\n        type:\n          type: string\n        updateTimeMs:\n          type: integer\n          format: int64\n        updateUser:\n          type: string\n        userEmail:\n          type: string\n        userId:\n          type: string\n        version:\n          type: integer\n          format: int32\n    ApiKeyResultPage:\n      type: object\n      properties:\n        pageResponse:\n          $ref: '#/components/schemas/PageResponse'\n        qualifiedFilterInput:\n          type: string\n        values:\n          type: array\n          items:\n            $ref: '#/components/schemas/ApiKey'\n    ApplicationInstanceInfo:\n      type: object\n      properties:\n        createTime:\n          type: integer\n          format: int64\n        userId:\n          type: string\n        uuid:\n          type: string\n    Arg:\n      type: object\n      properties:\n        allowedValues:\n          type: array\n          items:\n            type: string\n        argType:\n          type: string\n          enum:\n          - UNKNOWN\n          - BOOLEAN\n          - DOUBLE\n          - ERROR\n          - INTEGER\n          - LONG\n          - \"NULL\"\n          - NUMBER\n          - STRING\n        defaultValue:\n          type: string\n        description:\n          type: string\n        minVarargsCount:\n          type: integer\n          format: int32\n        name:\n          type: string\n        optional:\n          type: boolean\n        varargs:\n          type: boolean\n    AssignTasksRequest:\n      type: object\n      properties:\n        count:\n          type: integer\n          format: int32\n        nodeName:\n          type: string\n    AuthenticationState:\n      type: object\n      properties:\n        allowPasswordResets:\n          type: boolean\n        userId:\n          type: string\n    Automate:\n      type: object\n      properties:\n        open:\n          type: boolean\n        refresh:\n          type: boolean\n        refreshInterval:\n          type: string\n    Base64EncodedDocumentData:\n      type: object\n      properties:\n        dataMap:\n          type: object\n          additionalProperties:\n            type: string\n        docRef:\n          $ref: '#/components/schemas/DocRef'\n    BooleanField:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/AbstractField'\n    BuildInfo:\n      type: object\n      properties:\n        buildTime:\n          type: integer\n          format: int64\n        buildVersion:\n          type: string\n        upTime:\n          type: integer\n          format: int64\n    BulkActionResult:\n      type: object\n      properties:\n        docRefs:\n          type: array\n          items:\n            $ref: '#/components/schemas/DocRef'\n        message:\n          type: string\n    CacheIdentity:\n      type: object\n      properties:\n        basePropertyPath:\n          $ref: '#/components/schemas/PropertyPath'\n        cacheName:\n          type: string\n    CacheInfo:\n      type: object\n      properties:\n        basePropertyPath:\n          $ref: '#/components/schemas/PropertyPath'\n        map:\n          type: object\n          additionalProperties:\n            type: string\n        name:\n          type: string\n        nodeName:\n          type: string\n    CacheInfoResponse:\n      type: object\n      properties:\n        pageResponse:\n          $ref: '#/components/schemas/PageResponse'\n        values:\n          type: array\n          items:\n            $ref: '#/components/schemas/CacheInfo'\n    CacheNamesResponse:\n      type: object\n      properties:\n        pageResponse:\n          $ref: '#/components/schemas/PageResponse'\n        values:\n          type: array\n          items:\n            $ref: '#/components/schemas/CacheIdentity'\n    ChangeDocumentPermissionsRequest:\n      type: object\n      properties:\n        cascade:\n          type: string\n          enum:\n          - \"NO\"\n          - CHANGES_ONLY\n          - ALL\n        changes:\n          $ref: '#/components/schemas/Changes'\n        docRef:\n          $ref: '#/components/schemas/DocRef'\n    ChangePasswordRequest:\n      type: object\n      properties:\n        confirmNewPassword:\n          type: string\n        currentPassword:\n          type: string\n        newPassword:\n          type: string\n        userId:\n          type: string\n    ChangePasswordResponse:\n      type: object\n      properties:\n        changeSucceeded:\n          type: boolean\n        forceSignIn:\n          type: boolean\n        message:\n          type: string\n    ChangeSetString:\n      type: object\n      properties:\n        addSet:\n          type: array\n          items:\n            type: string\n          uniqueItems: true\n        removeSet:\n          type: array\n          items:\n            type: string\n          uniqueItems: true\n    ChangeSetUser:\n      type: object\n      properties:\n        addSet:\n          type: array\n          items:\n            $ref: '#/components/schemas/User'\n          uniqueItems: true\n        removeSet:\n          type: array\n          items:\n            $ref: '#/components/schemas/User'\n          uniqueItems: true\n    ChangeUserRequest:\n      type: object\n      properties:\n        changedAppPermissions:\n          $ref: '#/components/schemas/ChangeSetString'\n        changedLinkedUsers:\n          $ref: '#/components/schemas/ChangeSetUser'\n        user:\n          $ref: '#/components/schemas/User'\n    Changes:\n      type: object\n      properties:\n        add:\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              type: string\n            uniqueItems: true\n        remove:\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              type: string\n            uniqueItems: true\n    CheckDocumentPermissionRequest:\n      type: object\n      properties:\n        documentUuid:\n          type: string\n        permission:\n          type: string\n    ClearDocumentPermissionsEvent:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/PermissionChangeEvent'\n      - type: object\n        properties:\n          documentUuid:\n            type: string\n    ClusterLockKey:\n      type: object\n      properties:\n        creationTime:\n          type: integer\n          format: int64\n        name:\n          type: string\n        nodeName:\n          type: string\n    ClusterNodeInfo:\n      type: object\n      properties:\n        buildInfo:\n          $ref: '#/components/schemas/BuildInfo'\n        discoverTime:\n          type: integer\n          format: int64\n        endpointUrl:\n          type: string\n        error:\n          type: string\n        itemList:\n          type: array\n          items:\n            $ref: '#/components/schemas/ClusterNodeInfoItem'\n        nodeName:\n          type: string\n        ping:\n          type: integer\n          format: int64\n    ClusterNodeInfoItem:\n      type: object\n      properties:\n        active:\n          type: boolean\n        master:\n          type: boolean\n        nodeName:\n          type: string\n    ClusterSearchTask:\n      type: object\n      properties:\n        dateTimeSettings:\n          $ref: '#/components/schemas/DateTimeSettings'\n        key:\n          $ref: '#/components/schemas/QueryKey'\n        now:\n          type: integer\n          format: int64\n        query:\n          $ref: '#/components/schemas/Query'\n        settings:\n          type: array\n          items:\n            $ref: '#/components/schemas/CoprocessorSettings'\n        shards:\n          type: array\n          items:\n            type: integer\n            format: int64\n        sourceTaskId:\n          $ref: '#/components/schemas/TaskId'\n        taskName:\n          type: string\n    ComponentConfig:\n      type: object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        settings:\n          $ref: '#/components/schemas/ComponentSettings'\n        type:\n          type: string\n    ComponentResultRequest:\n      type: object\n      discriminator:\n        propertyName: type\n      properties:\n        componentId:\n          type: string\n          description: The ID of the component that will receive the results corresponding\n            to this ResultRequest\n        fetch:\n          type: string\n          enum:\n          - NONE\n          - CHANGES\n          - ALL\n        type:\n          type: string\n      required:\n      - componentId\n      - type\n    ComponentSelectionHandler:\n      type: object\n      properties:\n        componentId:\n          type: string\n        enabled:\n          type: boolean\n        expression:\n          $ref: '#/components/schemas/ExpressionOperator'\n        id:\n          type: string\n    ComponentSettings:\n      type: object\n      discriminator:\n        propertyName: type\n      properties:\n        type:\n          type: string\n      required:\n      - type\n    ConfigProperty:\n      type: object\n      properties:\n        createTimeMs:\n          type: integer\n          format: int64\n        createUser:\n          type: string\n        dataTypeName:\n          type: string\n        databaseOverrideValue:\n          $ref: '#/components/schemas/OverrideValueString'\n        defaultValue:\n          type: string\n        description:\n          type: string\n        editable:\n          type: boolean\n        id:\n          type: integer\n          format: int32\n        name:\n          $ref: '#/components/schemas/PropertyPath'\n        password:\n          type: boolean\n        requireRestart:\n          type: boolean\n        requireUiRestart:\n          type: boolean\n        updateTimeMs:\n          type: integer\n          format: int64\n        updateUser:\n          type: string\n        version:\n          type: integer\n          format: int32\n        yamlOverrideValue:\n          $ref: '#/components/schemas/OverrideValueString'\n    ConfirmPasswordRequest:\n      type: object\n      properties:\n        password:\n          type: string\n    ConfirmPasswordResponse:\n      type: object\n      properties:\n        message:\n          type: string\n        valid:\n          type: boolean\n    CoprocessorSettings:\n      type: object\n      discriminator:\n        propertyName: type\n      properties:\n        coprocessorId:\n          type: integer\n          format: int32\n        type:\n          type: string\n      required:\n      - type\n    CopyPermissionsFromParentRequest:\n      type: object\n      properties:\n        docRef:\n          $ref: '#/components/schemas/DocRef'\n    CountLong:\n      type: object\n      properties:\n        count:\n          type: integer\n          format: int64\n        exact:\n          type: boolean\n    CreateAccountRequest:\n      type: object\n      properties:\n        comments:\n          type: string\n        confirmPassword:\n          type: string\n        email:\n          type: string\n        firstName:\n          type: string\n        forcePasswordChange:\n          type: boolean\n        lastName:\n          type: string\n        neverExpires:\n          type: boolean\n        password:\n          type: string\n        userId:\n          type: string\n    CreateApiKeyRequest:\n      type: object\n      properties:\n        comments:\n          type: string\n        enabled:\n          type: boolean\n        expiresOnMs:\n          type: integer\n          format: int64\n        tokenType:\n          type: string\n          pattern: ^user$|^api$|^email_reset$\n        userId:\n          type: string\n      required:\n      - tokenType\n      - userId\n    CreateEntryRequest:\n      type: object\n      properties:\n        annotation:\n          $ref: '#/components/schemas/Annotation'\n        data:\n          type: string\n        linkedEvents:\n          type: array\n          items:\n            $ref: '#/components/schemas/EventId'\n        type:\n          type: string\n    CreateProcessFilterRequest:\n      type: object\n      properties:\n        autoPriority:\n          type: boolean\n        enabled:\n          type: boolean\n        maxMetaCreateTimeMs:\n          type: integer\n          format: int64\n        minMetaCreateTimeMs:\n          type: integer\n          format: int64\n        pipeline:\n          $ref: '#/components/schemas/DocRef'\n        priority:\n          type: integer\n          format: int32\n        queryData:\n          $ref: '#/components/schemas/QueryData'\n        reprocess:\n          type: boolean\n    CriteriaFieldSort:\n      type: object\n      properties:\n        desc:\n          type: boolean\n        id:\n          type: string\n        ignoreCase:\n          type: boolean\n    CustomRollUpMask:\n      type: object\n      properties:\n        rolledUpTagPosition:\n          type: array\n          items:\n            type: integer\n            format: int32\n    CustomRollUpMaskFields:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int32\n        maskValue:\n          type: integer\n          format: int32\n        rolledUpFieldPositions:\n          type: array\n          items:\n            type: integer\n            format: int32\n          uniqueItems: true\n    DBTableStatus:\n      type: object\n      properties:\n        count:\n          type: integer\n          format: int64\n        dataSize:\n          type: integer\n          format: int64\n        db:\n          type: string\n        indexSize:\n          type: integer\n          format: int64\n        table:\n          type: string\n    DashboardConfig:\n      type: object\n      properties:\n        components:\n          type: array\n          items:\n            $ref: '#/components/schemas/ComponentConfig'\n          xml:\n            wrapped: true\n        layout:\n          $ref: '#/components/schemas/LayoutConfig'\n        parameters:\n          type: string\n        tabVisibility:\n          type: string\n          enum:\n          - SHOW_ALL\n          - HIDE_SINGLE\n          - HIDE_ALL\n      xml:\n        name: dashboard\n    DashboardDoc:\n      type: object\n      properties:\n        createTimeMs:\n          type: integer\n          format: int64\n        createUser:\n          type: string\n        dashboardConfig:\n          $ref: '#/components/schemas/DashboardConfig'\n        name:\n          type: string\n        type:\n          type: string\n        updateTimeMs:\n          type: integer\n          format: int64\n        updateUser:\n          type: string\n        uuid:\n          type: string\n        version:\n          type: string\n    DashboardSearchRequest:\n      type: object\n      properties:\n        applicationInstanceUuid:\n          type: string\n        componentId:\n          type: string\n        componentResultRequests:\n          type: array\n          items:\n            $ref: '#/components/schemas/ComponentResultRequest'\n        dashboardUuid:\n          type: string\n        dateTimeSettings:\n          $ref: '#/components/schemas/DateTimeSettings'\n        queryKey:\n          $ref: '#/components/schemas/QueryKey'\n        search:\n          $ref: '#/components/schemas/Search'\n        storeHistory:\n          type: boolean\n        timeout:\n          type: integer\n          format: int64\n          description: Set the maximum time (in ms) for the server to wait for a complete\n            result set. The timeout applies to both incremental and non incremental\n            queries, though the behaviour is slightly different. The timeout will\n            make the server wait for which ever comes first out of the query completing\n            or the timeout period being reached. If no value is supplied then for\n            an incremental query a default value of 0 will be used (i.e. returning\n            immediately) and for a non-incremental query the server's default timeout\n            period will be used. For an incremental query, if the query has not completed\n            by the end of the timeout period, it will return the currently know results\n            with complete=false, however for a non-incremental query it will return\n            no results, complete=false and details of the timeout in the error field\n    DashboardSearchResponse:\n      type: object\n      properties:\n        complete:\n          type: boolean\n        errors:\n          type: array\n          items:\n            type: string\n        highlights:\n          type: array\n          items:\n            type: string\n          uniqueItems: true\n        queryKey:\n          $ref: '#/components/schemas/QueryKey'\n        results:\n          type: array\n          items:\n            $ref: '#/components/schemas/Result'\n    DataInfoSection:\n      type: object\n      properties:\n        entries:\n          type: array\n          items:\n            $ref: '#/components/schemas/Entry'\n        title:\n          type: string\n    DataRange:\n      type: object\n      properties:\n        byteOffsetFrom:\n          type: integer\n          format: int64\n        byteOffsetTo:\n          type: integer\n          format: int64\n        charOffsetFrom:\n          type: integer\n          format: int64\n        charOffsetTo:\n          type: integer\n          format: int64\n        length:\n          type: integer\n          format: int64\n        locationFrom:\n          $ref: '#/components/schemas/Location'\n        locationTo:\n          $ref: '#/components/schemas/Location'\n    DataRetentionDeleteSummary:\n      type: object\n      properties:\n        count:\n          type: integer\n          format: int32\n        feed:\n          type: string\n        ruleName:\n          type: string\n        ruleNumber:\n          type: integer\n          format: int32\n        type:\n          type: string\n    DataRetentionDeleteSummaryRequest:\n      type: object\n      properties:\n        criteria:\n          $ref: '#/components/schemas/FindDataRetentionImpactCriteria'\n        dataRetentionRules:\n          $ref: '#/components/schemas/DataRetentionRules'\n        queryId:\n          type: string\n    DataRetentionDeleteSummaryResponse:\n      type: object\n      properties:\n        pageResponse:\n          $ref: '#/components/schemas/PageResponse'\n        queryId:\n          type: string\n        values:\n          type: array\n          items:\n            $ref: '#/components/schemas/DataRetentionDeleteSummary'\n    DataRetentionRule:\n      type: object\n      properties:\n        age:\n          type: integer\n          format: int32\n        creationTime:\n          type: integer\n          format: int64\n        enabled:\n          type: boolean\n        expression:\n          $ref: '#/components/schemas/ExpressionOperator'\n        forever:\n          type: boolean\n        name:\n          type: string\n        ruleNumber:\n          type: integer\n          format: int32\n        timeUnit:\n          type: string\n          enum:\n          - MINUTES\n          - HOURS\n          - DAYS\n          - WEEKS\n          - MONTHS\n          - YEARS\n      xml:\n        name: dataRetentionRule\n    DataRetentionRules:\n      type: object\n      properties:\n        createTimeMs:\n          type: integer\n          format: int64\n        createUser:\n          type: string\n        name:\n          type: string\n        rules:\n          type: array\n          items:\n            $ref: '#/components/schemas/DataRetentionRule'\n        type:\n          type: string\n        updateTimeMs:\n          type: integer\n          format: int64\n        updateUser:\n          type: string\n        uuid:\n          type: string\n        version:\n          type: string\n      xml:\n        name: dataRetentionPolicy\n    DataSource:\n      type: object\n      properties:\n        fields:\n          type: array\n          items:\n            $ref: '#/components/schemas/AbstractField'\n    DateField:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/AbstractField'\n    DateTimeFormatSettings:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/FormatSettings'\n      - type: object\n        properties:\n          pattern:\n            type: string\n            description: A date time formatting pattern string conforming to the specification\n              of java.time.format.DateTimeFormatter\n          timeZone:\n            $ref: '#/components/schemas/TimeZone'\n          usePreferences:\n            type: boolean\n            description: Choose if you want to use the user preference to determine\n              the date/time format\n      description: The string formatting to apply to a date value\n      required:\n      - pattern\n      - timeZone\n      - usePreferences\n    DateTimeSettings:\n      type: object\n      description: The client date/time settings\n      properties:\n        dateTimePattern:\n          type: string\n          description: A date time formatting pattern string conforming to the specification\n            of java.time.format.DateTimeFormatter\n        localZoneId:\n          type: string\n          description: The local zone id to use when formatting date values in the\n            search results. The value is the string form of a java.time.ZoneId\n        timeZone:\n          $ref: '#/components/schemas/TimeZone'\n      required:\n      - localZoneId\n    DefaultLocation:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/Location'\n    Dependency:\n      type: object\n      properties:\n        from:\n          $ref: '#/components/schemas/DocRef'\n        ok:\n          type: boolean\n        to:\n          $ref: '#/components/schemas/DocRef'\n    DependencyCriteria:\n      type: object\n      properties:\n        pageRequest:\n          $ref: '#/components/schemas/PageRequest'\n        partialName:\n          type: string\n        sort:\n          type: string\n          writeOnly: true\n        sortList:\n          type: array\n          items:\n            $ref: '#/components/schemas/CriteriaFieldSort'\n    DestroyRequest:\n      type: object\n      properties:\n        applicationInstanceInfo:\n          $ref: '#/components/schemas/ApplicationInstanceInfo'\n        reason:\n          type: string\n    DestroySearchRequest:\n      type: object\n      properties:\n        applicationInstanceUuid:\n          type: string\n        componentId:\n          type: string\n        dashboardUuid:\n          type: string\n        queryKey:\n          $ref: '#/components/schemas/QueryKey'\n    DictionaryDoc:\n      type: object\n      properties:\n        createTimeMs:\n          type: integer\n          format: int64\n        createUser:\n          type: string\n        data:\n          type: string\n        description:\n          type: string\n        imports:\n          type: array\n          items:\n            $ref: '#/components/schemas/DocRef'\n        name:\n          type: string\n        type:\n          type: string\n        updateTimeMs:\n          type: integer\n          format: int64\n        updateUser:\n          type: string\n        uuid:\n          type: string\n        version:\n          type: string\n    DocRef:\n      type: object\n      description: A class for describing a unique reference to a 'document' in stroom.  A\n        'document' is an entity in stroom such as a data source dictionary or pipeline.\n      properties:\n        name:\n          type: string\n          description: The name for the data source\n          example: MyStatistic\n        type:\n          type: string\n          description: The type of the 'document' that this DocRef refers to\n          example: StroomStatsStore\n        uuid:\n          type: string\n          description: The unique identifier for this 'document'\n          example: 9f6184b4-bd78-48bc-b0cd-6e51a357f6a6\n      required:\n      - name\n      - type\n      - uuid\n      xml:\n        name: doc\n    DocRefField:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/AbstractField'\n      - type: object\n        properties:\n          docRefType:\n            type: string\n    DocRefInfo:\n      type: object\n      properties:\n        createTime:\n          type: integer\n          format: int64\n        createUser:\n          type: string\n        docRef:\n          $ref: '#/components/schemas/DocRef'\n        otherInfo:\n          type: string\n        updateTime:\n          type: integer\n          format: int64\n        updateUser:\n          type: string\n    DocRefs:\n      type: object\n      properties:\n        docRefs:\n          type: array\n          items:\n            $ref: '#/components/schemas/DocRef'\n          uniqueItems: true\n    DocumentPermissions:\n      type: object\n      properties:\n        docUuid:\n          type: string\n        groups:\n          type: array\n          items:\n            $ref: '#/components/schemas/User'\n        permissions:\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              type: string\n            uniqueItems: true\n        users:\n          type: array\n          items:\n            $ref: '#/components/schemas/User'\n    DocumentType:\n      type: object\n      properties:\n        displayType:\n          type: string\n        group:\n          type: string\n          enum:\n          - STRUCTURE\n          - DATA_PROCESSING\n          - TRANSFORMATION\n          - SEARCH\n          - INDEXING\n          - CONFIGURATION\n          - SYSTEM\n        iconClassName:\n          type: string\n        type:\n          type: string\n    DocumentTypes:\n      type: object\n      properties:\n        nonSystemTypes:\n          type: array\n          items:\n            $ref: '#/components/schemas/DocumentType'\n        visibleTypes:\n          type: array\n          items:\n            $ref: '#/components/schemas/DocumentType'\n    DoubleField:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/AbstractField'\n    DownloadSearchResultsRequest:\n      type: object\n      properties:\n        componentId:\n          type: string\n        fileType:\n          type: string\n          enum:\n          - EXCEL\n          - CSV\n          - TSV\n        percent:\n          type: integer\n          format: int32\n        sample:\n          type: boolean\n        searchRequest:\n          $ref: '#/components/schemas/DashboardSearchRequest'\n    ElasticClusterDoc:\n      type: object\n      properties:\n        connection:\n          $ref: '#/components/schemas/ElasticConnectionConfig'\n        createTimeMs:\n          type: integer\n          format: int64\n        createUser:\n          type: string\n        description:\n          type: string\n        name:\n          type: string\n        type:\n          type: string\n        updateTimeMs:\n          type: integer\n          format: int64\n        updateUser:\n          type: string\n        uuid:\n          type: string\n        version:\n          type: string\n    ElasticClusterTestResponse:\n      type: object\n      properties:\n        message:\n          type: string\n        ok:\n          type: boolean\n    ElasticConnectionConfig:\n      type: object\n      properties:\n        apiKeyId:\n          type: string\n        apiKeySecret:\n          type: string\n        caCertificate:\n          type: string\n        connectionUrls:\n          type: array\n          items:\n            type: string\n        socketTimeoutMillis:\n          type: integer\n          format: int32\n        useAuthentication:\n          type: boolean\n    ElasticIndexDoc:\n      type: object\n      properties:\n        clusterRef:\n          $ref: '#/components/schemas/DocRef'\n        createTimeMs:\n          type: integer\n          format: int64\n        createUser:\n          type: string\n        description:\n          type: string\n        fields:\n          type: array\n          items:\n            $ref: '#/components/schemas/ElasticIndexField'\n        indexName:\n          type: string\n        name:\n          type: string\n        retentionExpression:\n          $ref: '#/components/schemas/ExpressionOperator'\n        searchScrollSize:\n          type: integer\n          format: int32\n        searchSlices:\n          type: integer\n          format: int32\n        type:\n          type: string\n        updateTimeMs:\n          type: integer\n          format: int64\n        updateUser:\n          type: string\n        uuid:\n          type: string\n        version:\n          type: string\n    ElasticIndexField:\n      type: object\n      properties:\n        fieldName:\n          type: string\n        fieldType:\n          type: string\n        fieldUse:\n          type: string\n          enum:\n          - ID\n          - BOOLEAN\n          - INTEGER\n          - LONG\n          - FLOAT\n          - DOUBLE\n          - DATE\n          - TEXT\n          - IPV4_ADDRESS\n        indexed:\n          type: boolean\n    ElasticIndexTestResponse:\n      type: object\n      properties:\n        message:\n          type: string\n        ok:\n          type: boolean\n    EntityEvent:\n      type: object\n      properties:\n        action:\n          type: string\n          enum:\n          - CREATE\n          - UPDATE\n          - DELETE\n          - CLEAR_CACHE\n        docRef:\n          $ref: '#/components/schemas/DocRef'\n        oldDocRef:\n          $ref: '#/components/schemas/DocRef'\n    Entry:\n      type: object\n      properties:\n        key:\n          type: string\n        value:\n          type: string\n    EntryCounts:\n      type: object\n      properties:\n        keyValueCount:\n          type: integer\n          format: int64\n        rangeValueCount:\n          type: integer\n          format: int64\n    EventCoprocessorSettings:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/CoprocessorSettings'\n      - type: object\n        properties:\n          maxEvent:\n            $ref: '#/components/schemas/EventRef'\n          maxEvents:\n            type: integer\n            format: int64\n          maxEventsPerStream:\n            type: integer\n            format: int64\n          maxStreams:\n            type: integer\n            format: int64\n          minEvent:\n            $ref: '#/components/schemas/EventRef'\n    EventId:\n      type: object\n      properties:\n        eventId:\n          type: integer\n          format: int64\n        streamId:\n          type: integer\n          format: int64\n    EventLink:\n      type: object\n      properties:\n        annotationId:\n          type: integer\n          format: int64\n        eventId:\n          $ref: '#/components/schemas/EventId'\n    EventRef:\n      type: object\n      properties:\n        eventId:\n          type: integer\n          format: int64\n        streamId:\n          type: integer\n          format: int64\n    Expander:\n      type: object\n      properties:\n        depth:\n          type: integer\n          format: int32\n        expanded:\n          type: boolean\n        leaf:\n          type: boolean\n    ExplorerNode:\n      type: object\n      properties:\n        children:\n          type: array\n          items:\n            $ref: '#/components/schemas/ExplorerNode'\n        depth:\n          type: integer\n          format: int32\n        iconClassName:\n          type: string\n        name:\n          type: string\n        nodeState:\n          type: string\n          enum:\n          - OPEN\n          - CLOSED\n          - LEAF\n        tags:\n          type: string\n        type:\n          type: string\n        uuid:\n          type: string\n    ExplorerNodePermissions:\n      type: object\n      properties:\n        admin:\n          type: boolean\n        createPermissions:\n          type: array\n          items:\n            type: string\n          uniqueItems: true\n        documentPermissions:\n          type: array\n          items:\n            type: string\n          uniqueItems: true\n        explorerNode:\n          $ref: '#/components/schemas/ExplorerNode'\n    ExplorerServiceCopyRequest:\n      type: object\n      properties:\n        destinationFolderRef:\n          $ref: '#/components/schemas/DocRef'\n        docRefs:\n          type: array\n          items:\n            $ref: '#/components/schemas/DocRef'\n        permissionInheritance:\n          type: string\n          enum:\n          - NONE\n          - SOURCE\n          - DESTINATION\n          - COMBINED\n    ExplorerServiceCreateRequest:\n      type: object\n      properties:\n        destinationFolderRef:\n          $ref: '#/components/schemas/DocRef'\n        docName:\n          type: string\n        docType:\n          type: string\n        permissionInheritance:\n          type: string\n          enum:\n          - NONE\n          - SOURCE\n          - DESTINATION\n          - COMBINED\n    ExplorerServiceDeleteRequest:\n      type: object\n      properties:\n        docRefs:\n          type: array\n          items:\n            $ref: '#/components/schemas/DocRef'\n    ExplorerServiceMoveRequest:\n      type: object\n      properties:\n        destinationFolderRef:\n          $ref: '#/components/schemas/DocRef'\n        docRefs:\n          type: array\n          items:\n            $ref: '#/components/schemas/DocRef'\n        permissionInheritance:\n          type: string\n          enum:\n          - NONE\n          - SOURCE\n          - DESTINATION\n          - COMBINED\n    ExplorerServiceRenameRequest:\n      type: object\n      properties:\n        docName:\n          type: string\n        docRef:\n          $ref: '#/components/schemas/DocRef'\n    ExplorerTreeFilter:\n      type: object\n      properties:\n        includedTypes:\n          type: array\n          items:\n            type: string\n          uniqueItems: true\n        nameFilter:\n          type: string\n        nameFilterChange:\n          type: boolean\n        requiredPermissions:\n          type: array\n          items:\n            type: string\n          uniqueItems: true\n        tags:\n          type: array\n          items:\n            type: string\n          uniqueItems: true\n    ExpressionCriteria:\n      type: object\n      properties:\n        expression:\n          $ref: '#/components/schemas/ExpressionOperator'\n        pageRequest:\n          $ref: '#/components/schemas/PageRequest'\n        sort:\n          type: string\n          writeOnly: true\n        sortList:\n          type: array\n          items:\n            $ref: '#/components/schemas/CriteriaFieldSort'\n    ExpressionItem:\n      type: object\n      description: Base type for an item in an expression tree\n      discriminator:\n        propertyName: type\n      properties:\n        enabled:\n          type: boolean\n          description: Whether this item in the expression tree is enabled or not\n          example: true\n        type:\n          type: string\n      required:\n      - type\n    ExpressionOperator:\n      type: object\n      description: A logical addOperator term in a query expression tree\n      properties:\n        children:\n          type: array\n          items:\n            $ref: '#/components/schemas/ExpressionItem'\n          xml:\n            wrapped: true\n        enabled:\n          type: boolean\n          description: Whether this item in the expression tree is enabled or not\n          example: true\n        op:\n          type: string\n          description: The logical addOperator type\n          enum:\n          - AND\n          - OR\n          - NOT\n      required:\n      - op\n    ExpressionTerm:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/ExpressionItem'\n      - type: object\n        properties:\n          condition:\n            type: string\n            description: The condition of the predicate term\n            enum:\n            - CONTAINS\n            - EQUALS\n            - GREATER_THAN\n            - GREATER_THAN_OR_EQUAL_TO\n            - LESS_THAN\n            - LESS_THAN_OR_EQUAL_TO\n            - BETWEEN\n            - IN\n            - IN_DICTIONARY\n            - IN_FOLDER\n            - IS_DOC_REF\n            - IS_NULL\n            - IS_NOT_NULL\n            - MATCHES_REGEX\n          docRef:\n            $ref: '#/components/schemas/DocRef'\n          field:\n            type: string\n            description: The name of the field that is being evaluated in this predicate\n              term\n          value:\n            type: string\n            description: The value that the field value is being evaluated against.\n              Not required if a dictionary is supplied\n      description: A predicate term in a query expression tree\n      required:\n      - condition\n      - field\n    FeedDoc:\n      type: object\n      properties:\n        classification:\n          type: string\n        contextEncoding:\n          type: string\n        createTimeMs:\n          type: integer\n          format: int64\n        createUser:\n          type: string\n        description:\n          type: string\n        encoding:\n          type: string\n        name:\n          type: string\n        reference:\n          type: boolean\n        retentionDayAge:\n          type: integer\n          format: int32\n        status:\n          type: string\n          enum:\n          - RECEIVE\n          - REJECT\n          - DROP\n        streamType:\n          type: string\n        type:\n          type: string\n        updateTimeMs:\n          type: integer\n          format: int64\n        updateUser:\n          type: string\n        uuid:\n          type: string\n        version:\n          type: string\n    FetchAllDocumentPermissionsRequest:\n      type: object\n      properties:\n        docRef:\n          $ref: '#/components/schemas/DocRef'\n    FetchDataRequest:\n      type: object\n      properties:\n        displayMode:\n          type: string\n          enum:\n          - TEXT\n          - HEX\n          - MARKER\n        expandedSeverities:\n          type: array\n          items:\n            type: string\n            enum:\n            - INFO\n            - WARN\n            - ERROR\n            - FATAL\n        pipeline:\n          $ref: '#/components/schemas/DocRef'\n        recordCount:\n          type: integer\n          format: int64\n        showAsHtml:\n          type: boolean\n        sourceLocation:\n          $ref: '#/components/schemas/SourceLocation'\n    FetchDataResult:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/AbstractFetchDataResult'\n      - type: object\n        properties:\n          data:\n            type: string\n          dataType:\n            type: string\n            enum:\n            - SEGMENTED\n            - NON_SEGMENTED\n            - MARKER\n          html:\n            type: boolean\n          totalBytes:\n            type: integer\n            format: int64\n    FetchExplorerNodeResult:\n      type: object\n      properties:\n        openedItems:\n          type: array\n          items:\n            type: string\n        qualifiedFilterInput:\n          type: string\n        rootNodes:\n          type: array\n          items:\n            $ref: '#/components/schemas/ExplorerNode'\n        temporaryOpenedItems:\n          type: array\n          items:\n            type: string\n          uniqueItems: true\n    FetchLinkedScriptRequest:\n      type: object\n      properties:\n        loadedScripts:\n          type: array\n          items:\n            $ref: '#/components/schemas/DocRef'\n          uniqueItems: true\n        script:\n          $ref: '#/components/schemas/DocRef'\n    FetchMarkerResult:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/AbstractFetchDataResult'\n      - type: object\n        properties:\n          markers:\n            type: array\n            items:\n              $ref: '#/components/schemas/Marker'\n    FetchNodeStatusResponse:\n      type: object\n      properties:\n        pageResponse:\n          $ref: '#/components/schemas/PageResponse'\n        values:\n          type: array\n          items:\n            $ref: '#/components/schemas/NodeStatusResult'\n    FetchPipelineXmlResponse:\n      type: object\n      properties:\n        pipeline:\n          $ref: '#/components/schemas/DocRef'\n        xml:\n          type: string\n    FetchProcessorRequest:\n      type: object\n      properties:\n        expandedRows:\n          type: array\n          items:\n            $ref: '#/components/schemas/ProcessorListRow'\n          uniqueItems: true\n        expression:\n          $ref: '#/components/schemas/ExpressionOperator'\n    FetchPropertyTypesResult:\n      type: object\n      properties:\n        pipelineElementType:\n          $ref: '#/components/schemas/PipelineElementType'\n        propertyTypes:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/PipelinePropertyType'\n    FetchSuggestionsRequest:\n      type: object\n      properties:\n        dataSource:\n          $ref: '#/components/schemas/DocRef'\n        field:\n          $ref: '#/components/schemas/AbstractField'\n        text:\n          type: string\n      required:\n      - dataSource\n      - field\n    Field:\n      type: object\n      description: Describes a field in a result set. The field can have various expressions\n        applied to it, e.g. SUM(), along with sorting, filtering, formatting and grouping\n      properties:\n        expression:\n          type: string\n          description: The expression to use to generate the value for this field\n          example: SUM(${count})\n        filter:\n          $ref: '#/components/schemas/Filter'\n        format:\n          $ref: '#/components/schemas/Format'\n        group:\n          type: integer\n          format: int32\n        id:\n          type: string\n        name:\n          type: string\n        sort:\n          $ref: '#/components/schemas/Sort'\n      required:\n      - expression\n    Filter:\n      type: object\n      description: A pair of regular expression filters (inclusion and exclusion)\n        to apply to the field.  Either or both can be supplied\n      properties:\n        excludes:\n          type: string\n          description: Only results NOT matching this filter will be included\n          example: ^[0-9]{3}$\n        includes:\n          type: string\n          description: Only results matching this filter will be included\n          example: ^[0-9]{3}$\n    FilterFieldDefinition:\n      type: object\n      properties:\n        defaultField:\n          type: boolean\n        displayName:\n          type: string\n        filterQualifier:\n          type: string\n    FilterUsersRequest:\n      type: object\n      properties:\n        quickFilterInput:\n          type: string\n        users:\n          type: array\n          items:\n            $ref: '#/components/schemas/SimpleUser'\n    FindDBTableCriteria:\n      type: object\n      properties:\n        pageRequest:\n          $ref: '#/components/schemas/PageRequest'\n        sort:\n          type: string\n          writeOnly: true\n        sortList:\n          type: array\n          items:\n            $ref: '#/components/schemas/CriteriaFieldSort'\n    FindDataRetentionImpactCriteria:\n      type: object\n      properties:\n        expression:\n          $ref: '#/components/schemas/ExpressionOperator'\n        pageRequest:\n          $ref: '#/components/schemas/PageRequest'\n        sort:\n          type: string\n          writeOnly: true\n        sortList:\n          type: array\n          items:\n            $ref: '#/components/schemas/CriteriaFieldSort'\n    FindElementDocRequest:\n      type: object\n      properties:\n        feedName:\n          type: string\n        pipelineElement:\n          $ref: '#/components/schemas/PipelineElement'\n        pipelineName:\n          type: string\n        properties:\n          type: array\n          items:\n            $ref: '#/components/schemas/PipelineProperty'\n    FindExplorerNodeCriteria:\n      type: object\n      properties:\n        ensureVisible:\n          type: array\n          items:\n            type: string\n          uniqueItems: true\n        filter:\n          $ref: '#/components/schemas/ExplorerTreeFilter'\n        minDepth:\n          type: integer\n          format: int32\n        openItems:\n          type: array\n          items:\n            type: string\n          uniqueItems: true\n        temporaryOpenedItems:\n          type: array\n          items:\n            type: string\n          uniqueItems: true\n    FindFsVolumeCriteria:\n      type: object\n      properties:\n        pageRequest:\n          $ref: '#/components/schemas/PageRequest'\n        selection:\n          $ref: '#/components/schemas/SelectionVolumeUseStatus'\n        sort:\n          type: string\n          writeOnly: true\n        sortList:\n          type: array\n          items:\n            $ref: '#/components/schemas/CriteriaFieldSort'\n    FindIndexShardCriteria:\n      type: object\n      properties:\n        documentCountRange:\n          $ref: '#/components/schemas/RangeInteger'\n        indexShardIdSet:\n          $ref: '#/components/schemas/SelectionLong'\n        indexShardStatusSet:\n          $ref: '#/components/schemas/SelectionIndexShardStatus'\n        indexUuidSet:\n          $ref: '#/components/schemas/SelectionString'\n        nodeNameSet:\n          $ref: '#/components/schemas/SelectionString'\n        pageRequest:\n          $ref: '#/components/schemas/PageRequest'\n        partition:\n          $ref: '#/components/schemas/StringCriteria'\n        sort:\n          type: string\n          writeOnly: true\n        sortList:\n          type: array\n          items:\n            $ref: '#/components/schemas/CriteriaFieldSort'\n        volumeIdSet:\n          $ref: '#/components/schemas/SelectionInteger'\n    FindJobNodeCriteria:\n      type: object\n      properties:\n        jobName:\n          $ref: '#/components/schemas/StringCriteria'\n        nodeName:\n          $ref: '#/components/schemas/StringCriteria'\n        pageRequest:\n          $ref: '#/components/schemas/PageRequest'\n        sort:\n          type: string\n          writeOnly: true\n        sortList:\n          type: array\n          items:\n            $ref: '#/components/schemas/CriteriaFieldSort'\n    FindMetaCriteria:\n      type: object\n      properties:\n        expression:\n          $ref: '#/components/schemas/ExpressionOperator'\n        fetchRelationships:\n          type: boolean\n        pageRequest:\n          $ref: '#/components/schemas/PageRequest'\n        sort:\n          type: string\n          writeOnly: true\n        sortList:\n          type: array\n          items:\n            $ref: '#/components/schemas/CriteriaFieldSort'\n    FindNodeStatusCriteria:\n      type: object\n      properties:\n        pageRequest:\n          $ref: '#/components/schemas/PageRequest'\n        sort:\n          type: string\n          writeOnly: true\n        sortList:\n          type: array\n          items:\n            $ref: '#/components/schemas/CriteriaFieldSort'\n    FindStoredQueryCriteria:\n      type: object\n      properties:\n        componentId:\n          type: string\n        dashboardUuid:\n          type: string\n        favourite:\n          type: boolean\n        name:\n          $ref: '#/components/schemas/StringCriteria'\n        pageRequest:\n          $ref: '#/components/schemas/PageRequest'\n        requiredPermission:\n          type: string\n        sort:\n          type: string\n          writeOnly: true\n        sortList:\n          type: array\n          items:\n            $ref: '#/components/schemas/CriteriaFieldSort'\n        userId:\n          type: string\n    FindTaskCriteria:\n      type: object\n      properties:\n        ancestorIdSet:\n          type: array\n          items:\n            $ref: '#/components/schemas/TaskId'\n          uniqueItems: true\n        idSet:\n          type: array\n          items:\n            $ref: '#/components/schemas/TaskId'\n          uniqueItems: true\n        sessionId:\n          type: string\n    FindTaskProgressCriteria:\n      type: object\n      properties:\n        expandedTasks:\n          type: array\n          items:\n            $ref: '#/components/schemas/TaskProgress'\n          uniqueItems: true\n        nameFilter:\n          type: string\n        pageRequest:\n          $ref: '#/components/schemas/PageRequest'\n        sessionId:\n          type: string\n        sort:\n          type: string\n          writeOnly: true\n        sortList:\n          type: array\n          items:\n            $ref: '#/components/schemas/CriteriaFieldSort'\n    FindTaskProgressRequest:\n      type: object\n      properties:\n        criteria:\n          $ref: '#/components/schemas/FindTaskProgressCriteria'\n    FindUserCriteria:\n      type: object\n      properties:\n        group:\n          type: boolean\n        pageRequest:\n          $ref: '#/components/schemas/PageRequest'\n        quickFilterInput:\n          type: string\n        relatedUser:\n          $ref: '#/components/schemas/User'\n        sort:\n          type: string\n          writeOnly: true\n        sortList:\n          type: array\n          items:\n            $ref: '#/components/schemas/CriteriaFieldSort'\n    FindUserNameCriteria:\n      type: object\n      properties:\n        pageRequest:\n          $ref: '#/components/schemas/PageRequest'\n        quickFilterInput:\n          type: string\n        sort:\n          type: string\n          writeOnly: true\n        sortList:\n          type: array\n          items:\n            $ref: '#/components/schemas/CriteriaFieldSort'\n    FlatResult:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/Result'\n      - type: object\n        properties:\n          size:\n            type: integer\n            format: int64\n          structure:\n            type: array\n            items:\n              $ref: '#/components/schemas/Field'\n          values:\n            type: array\n            items:\n              type: array\n              items:\n                type: object\n      description: A result structure used primarily for visualisation data\n      required:\n      - componentId\n    FloatField:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/AbstractField'\n    Format:\n      type: object\n      description: Describes the formatting that will be applied to values in a field\n      properties:\n        settings:\n          $ref: '#/components/schemas/FormatSettings'\n        type:\n          type: string\n          description: The formatting type to apply\n          enum:\n          - GENERAL\n          - NUMBER\n          - DATE_TIME\n          - TEXT\n          example: NUMBER\n        wrap:\n          type: boolean\n      required:\n      - type\n    FormatSettings:\n      type: object\n      discriminator:\n        propertyName: type\n      properties:\n        default:\n          type: boolean\n        type:\n          type: string\n      required:\n      - type\n    FsVolume:\n      type: object\n      properties:\n        byteLimit:\n          type: integer\n          format: int64\n        createTimeMs:\n          type: integer\n          format: int64\n        createUser:\n          type: string\n        id:\n          type: integer\n          format: int32\n        path:\n          type: string\n        status:\n          type: string\n          enum:\n          - ACTIVE\n          - INACTIVE\n          - CLOSED\n        updateTimeMs:\n          type: integer\n          format: int64\n        updateUser:\n          type: string\n        version:\n          type: integer\n          format: int32\n        volumeState:\n          $ref: '#/components/schemas/FsVolumeState'\n    FsVolumeState:\n      type: object\n      properties:\n        bytesFree:\n          type: integer\n          format: int64\n        bytesTotal:\n          type: integer\n          format: int64\n        bytesUsed:\n          type: integer\n          format: int64\n        id:\n          type: integer\n          format: int32\n        updateTimeMs:\n          type: integer\n          format: int64\n        version:\n          type: integer\n          format: int32\n    FunctionSignature:\n      type: object\n      properties:\n        aliases:\n          type: array\n          items:\n            type: string\n        args:\n          type: array\n          items:\n            $ref: '#/components/schemas/Arg'\n        categoryPath:\n          type: array\n          items:\n            type: string\n        description:\n          type: string\n        name:\n          type: string\n        returnDescription:\n          type: string\n        returnType:\n          type: string\n          enum:\n          - UNKNOWN\n          - BOOLEAN\n          - DOUBLE\n          - ERROR\n          - INTEGER\n          - LONG\n          - \"NULL\"\n          - NUMBER\n          - STRING\n    GetFeedStatusRequest:\n      type: object\n      properties:\n        feedName:\n          type: string\n        senderDn:\n          type: string\n    GetFeedStatusResponse:\n      type: object\n      properties:\n        message:\n          type: string\n        status:\n          type: string\n          enum:\n          - Receive\n          - Reject\n          - Drop\n        stroomStatusCode:\n          type: string\n          enum:\n          - 200 - 0 - OK\n          - 406 - 100 - Feed must be specified\n          - 406 - 101 - Feed is not defined\n          - 406 - 102 - Data type is invalid\n          - 406 - 110 - Feed is not set to receive data\n          - 406 - 120 - Unexpected data type\n          - 406 - 200 - Unknown compression\n          - 401 - 300 - Client Certificate Required\n          - 401 - 301 - Client Token Required\n          - 403 - 310 - Client Certificate not authorised\n          - 403 - 311 - Client Token not authorised\n          - 500 - 400 - Compressed stream invalid\n          - 500 - 999 - Unknown error\n    GetPipelineForMetaRequest:\n      type: object\n      properties:\n        childMetaId:\n          type: integer\n          format: int64\n        metaId:\n          type: integer\n          format: int64\n    GetScheduledTimesRequest:\n      type: object\n      properties:\n        jobType:\n          type: string\n          enum:\n          - UNKNOWN\n          - CRON\n          - FREQUENCY\n          - DISTRIBUTED\n        lastExecutedTime:\n          type: integer\n          format: int64\n        schedule:\n          type: string\n        scheduleReferenceTime:\n          type: integer\n          format: int64\n    GlobalConfigCriteria:\n      type: object\n      properties:\n        pageRequest:\n          $ref: '#/components/schemas/PageRequest'\n        quickFilterInput:\n          type: string\n        sort:\n          type: string\n          writeOnly: true\n        sortList:\n          type: array\n          items:\n            $ref: '#/components/schemas/CriteriaFieldSort'\n    IdField:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/AbstractField'\n    ImportConfigRequest:\n      type: object\n      properties:\n        confirmList:\n          type: array\n          items:\n            $ref: '#/components/schemas/ImportState'\n        importSettings:\n          $ref: '#/components/schemas/ImportSettings'\n        resourceKey:\n          $ref: '#/components/schemas/ResourceKey'\n    ImportConfigResponse:\n      type: object\n      properties:\n        confirmList:\n          type: array\n          items:\n            $ref: '#/components/schemas/ImportState'\n        resourceKey:\n          $ref: '#/components/schemas/ResourceKey'\n    ImportSettings:\n      type: object\n      properties:\n        enableFilters:\n          type: boolean\n        enableFiltersFromTime:\n          type: integer\n          format: int64\n        importMode:\n          type: string\n          enum:\n          - CREATE_CONFIRMATION\n          - ACTION_CONFIRMATION\n          - IGNORE_CONFIRMATION\n        rootDocRef:\n          $ref: '#/components/schemas/DocRef'\n        useImportFolders:\n          type: boolean\n        useImportNames:\n          type: boolean\n    ImportState:\n      type: object\n      properties:\n        action:\n          type: boolean\n        destPath:\n          type: string\n        docRef:\n          $ref: '#/components/schemas/DocRef'\n        messageList:\n          type: array\n          items:\n            $ref: '#/components/schemas/Message'\n        sourcePath:\n          type: string\n        state:\n          type: string\n          enum:\n          - NEW\n          - UPDATE\n          - EQUAL\n          - IGNORE\n        updatedFieldList:\n          type: array\n          items:\n            type: string\n    IndexDoc:\n      type: object\n      properties:\n        createTimeMs:\n          type: integer\n          format: int64\n        createUser:\n          type: string\n        description:\n          type: string\n        fields:\n          type: array\n          items:\n            $ref: '#/components/schemas/IndexField'\n        maxDocsPerShard:\n          type: integer\n          format: int32\n        name:\n          type: string\n        partitionBy:\n          type: string\n          enum:\n          - DAY\n          - WEEK\n          - MONTH\n          - YEAR\n        partitionSize:\n          type: integer\n          format: int32\n        retentionDayAge:\n          type: integer\n          format: int32\n        shardsPerPartition:\n          type: integer\n          format: int32\n        type:\n          type: string\n        updateTimeMs:\n          type: integer\n          format: int64\n        updateUser:\n          type: string\n        uuid:\n          type: string\n        version:\n          type: string\n        volumeGroupName:\n          type: string\n    IndexField:\n      type: object\n      properties:\n        analyzerType:\n          type: string\n          enum:\n          - KEYWORD\n          - ALPHA\n          - NUMERIC\n          - ALPHA_NUMERIC\n          - WHITESPACE\n          - STOP\n          - STANDARD\n        caseSensitive:\n          type: boolean\n        fieldName:\n          type: string\n        fieldType:\n          type: string\n          enum:\n          - ID\n          - BOOLEAN_FIELD\n          - INTEGER_FIELD\n          - LONG_FIELD\n          - FLOAT_FIELD\n          - DOUBLE_FIELD\n          - DATE_FIELD\n          - FIELD\n          - NUMERIC_FIELD\n        indexed:\n          type: boolean\n        stored:\n          type: boolean\n        termPositions:\n          type: boolean\n    IndexShard:\n      type: object\n      properties:\n        commitDocumentCount:\n          type: integer\n          format: int32\n        commitDurationMs:\n          type: integer\n          format: int64\n        commitMs:\n          type: integer\n          format: int64\n        documentCount:\n          type: integer\n          format: int32\n        fileSize:\n          type: integer\n          format: int64\n        id:\n          type: integer\n          format: int64\n        indexUuid:\n          type: string\n        indexVersion:\n          type: string\n        nodeName:\n          type: string\n        partition:\n          type: string\n        partitionFromTime:\n          type: integer\n          format: int64\n        partitionToTime:\n          type: integer\n          format: int64\n        status:\n          type: string\n          enum:\n          - CLOSED\n          - OPEN\n          - CLOSING\n          - OPENING\n          - NEW\n          - DELETED\n          - CORRUPT\n        volume:\n          $ref: '#/components/schemas/IndexVolume'\n    IndexVolume:\n      type: object\n      properties:\n        bytesFree:\n          type: integer\n          format: int64\n        bytesLimit:\n          type: integer\n          format: int64\n        bytesTotal:\n          type: integer\n          format: int64\n        bytesUsed:\n          type: integer\n          format: int64\n        createTimeMs:\n          type: integer\n          format: int64\n        createUser:\n          type: string\n        id:\n          type: integer\n          format: int32\n        indexVolumeGroupId:\n          type: integer\n          format: int32\n        nodeName:\n          type: string\n        path:\n          type: string\n        state:\n          type: string\n          enum:\n          - ACTIVE\n          - INACTIVE\n          - CLOSED\n        statusMs:\n          type: integer\n          format: int64\n        updateTimeMs:\n          type: integer\n          format: int64\n        updateUser:\n          type: string\n        version:\n          type: integer\n          format: int32\n    IndexVolumeGroup:\n      type: object\n      properties:\n        createTimeMs:\n          type: integer\n          format: int64\n        createUser:\n          type: string\n        id:\n          type: integer\n          format: int32\n        name:\n          type: string\n        updateTimeMs:\n          type: integer\n          format: int64\n        updateUser:\n          type: string\n        version:\n          type: integer\n          format: int32\n    Indicators:\n      type: object\n      properties:\n        errorCount:\n          type: object\n          additionalProperties:\n            type: integer\n            format: int32\n        errorList:\n          type: array\n          items:\n            $ref: '#/components/schemas/StoredError'\n        uniqueErrorSet:\n          type: array\n          items:\n            $ref: '#/components/schemas/StoredError'\n          uniqueItems: true\n    InfoPopupConfig:\n      type: object\n      properties:\n        enabled:\n          type: boolean\n        title:\n          type: string\n        validationRegex:\n          type: string\n    IntegerField:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/AbstractField'\n    IpV4AddressField:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/AbstractField'\n    Job:\n      type: object\n      properties:\n        advanced:\n          type: boolean\n        createTimeMs:\n          type: integer\n          format: int64\n        createUser:\n          type: string\n        description:\n          type: string\n        enabled:\n          type: boolean\n        id:\n          type: integer\n          format: int32\n        name:\n          type: string\n        updateTimeMs:\n          type: integer\n          format: int64\n        updateUser:\n          type: string\n        version:\n          type: integer\n          format: int32\n    JobNode:\n      type: object\n      properties:\n        createTimeMs:\n          type: integer\n          format: int64\n        createUser:\n          type: string\n        enabled:\n          type: boolean\n        id:\n          type: integer\n          format: int32\n        job:\n          $ref: '#/components/schemas/Job'\n        jobType:\n          type: string\n          enum:\n          - UNKNOWN\n          - CRON\n          - FREQUENCY\n          - DISTRIBUTED\n        nodeName:\n          type: string\n        schedule:\n          type: string\n        taskLimit:\n          type: integer\n          format: int32\n        updateTimeMs:\n          type: integer\n          format: int64\n        updateUser:\n          type: string\n        version:\n          type: integer\n          format: int32\n    JobNodeInfo:\n      type: object\n      properties:\n        currentTaskCount:\n          type: integer\n          format: int32\n        lastExecutedTime:\n          type: integer\n          format: int64\n        scheduleReferenceTime:\n          type: integer\n          format: int64\n    KafkaConfigDoc:\n      type: object\n      properties:\n        createTimeMs:\n          type: integer\n          format: int64\n        createUser:\n          type: string\n        data:\n          type: string\n        description:\n          type: string\n        name:\n          type: string\n        type:\n          type: string\n        updateTimeMs:\n          type: integer\n          format: int64\n        updateUser:\n          type: string\n        uuid:\n          type: string\n        version:\n          type: string\n    LayoutConfig:\n      type: object\n      discriminator:\n        propertyName: type\n      properties:\n        preferredSize:\n          $ref: '#/components/schemas/Size'\n        type:\n          type: string\n      required:\n      - type\n    Limits:\n      type: object\n      properties:\n        durationMs:\n          type: integer\n          format: int64\n        eventCount:\n          type: integer\n          format: int64\n        streamCount:\n          type: integer\n          format: int64\n      xml:\n        name: limits\n    ListConfigResponse:\n      type: object\n      description: List of config properties\n      properties:\n        nodeName:\n          type: string\n        pageResponse:\n          $ref: '#/components/schemas/PageResponse'\n        qualifiedFilterInput:\n          type: string\n        values:\n          type: array\n          items:\n            $ref: '#/components/schemas/ConfigProperty'\n    Location:\n      type: object\n      discriminator:\n        propertyName: type\n      properties:\n        colNo:\n          type: integer\n          format: int32\n        lineNo:\n          type: integer\n          format: int32\n        type:\n          type: string\n      required:\n      - type\n    LoginRequest:\n      type: object\n      properties:\n        password:\n          type: string\n        userId:\n          type: string\n    LoginResponse:\n      type: object\n      properties:\n        loginSuccessful:\n          type: boolean\n        message:\n          type: string\n        requirePasswordChange:\n          type: boolean\n    LongField:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/AbstractField'\n    MapDefinition:\n      type: object\n      properties:\n        mapName:\n          type: string\n        refStreamDefinition:\n          $ref: '#/components/schemas/RefStreamDefinition'\n    Marker:\n      type: object\n      discriminator:\n        propertyName: type\n      properties:\n        severity:\n          type: string\n          enum:\n          - INFO\n          - WARN\n          - ERROR\n          - FATAL\n        type:\n          type: string\n      required:\n      - type\n    Message:\n      type: object\n      properties:\n        message:\n          type: string\n        severity:\n          type: string\n          enum:\n          - INFO\n          - WARN\n          - ERROR\n          - FATAL\n    Meta:\n      type: object\n      properties:\n        createMs:\n          type: integer\n          format: int64\n        effectiveMs:\n          type: integer\n          format: int64\n        feedName:\n          type: string\n        id:\n          type: integer\n          format: int64\n        parentMetaId:\n          type: integer\n          format: int64\n        pipelineUuid:\n          type: string\n        processorFilterId:\n          type: integer\n          format: int32\n        processorTaskId:\n          type: integer\n          format: int64\n        processorUuid:\n          type: string\n        status:\n          type: string\n          enum:\n          - UNLOCKED\n          - LOCKED\n          - DELETED\n        statusMs:\n          type: integer\n          format: int64\n        typeName:\n          type: string\n    MetaRow:\n      type: object\n      properties:\n        attributes:\n          type: object\n          additionalProperties:\n            type: string\n        meta:\n          $ref: '#/components/schemas/Meta'\n        pipelineName:\n          type: string\n    Node:\n      type: object\n      properties:\n        createTimeMs:\n          type: integer\n          format: int64\n        createUser:\n          type: string\n        enabled:\n          type: boolean\n        id:\n          type: integer\n          format: int32\n        name:\n          type: string\n        priority:\n          type: integer\n          format: int32\n        updateTimeMs:\n          type: integer\n          format: int64\n        updateUser:\n          type: string\n        url:\n          type: string\n        version:\n          type: integer\n          format: int32\n    NodeSetJobsEnabledRequest:\n      type: object\n      properties:\n        enabled:\n          type: boolean\n        excludeJobs:\n          type: array\n          items:\n            type: string\n          uniqueItems: true\n        includeJobs:\n          type: array\n          items:\n            type: string\n          uniqueItems: true\n    NodeSetJobsEnabledResponse:\n      type: object\n      properties:\n        modifiedCount:\n          type: integer\n          format: int32\n    NodeStatusResult:\n      type: object\n      properties:\n        master:\n          type: boolean\n        node:\n          $ref: '#/components/schemas/Node'\n    NumberFormatSettings:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/FormatSettings'\n      - type: object\n        properties:\n          decimalPlaces:\n            type: integer\n            format: int32\n            description: The number of decimal places\n            example: 2\n          useSeparator:\n            type: boolean\n            description: Whether to use a thousands separator or not. Defaults to\n              false\n            example: true\n      description: The definition of a format to apply to numeric data\n      required:\n      - decimalPlaces\n    OffsetRange:\n      type: object\n      description: The offset and length of a range of data in a sub-set of a query\n        result set\n      properties:\n        length:\n          type: integer\n          format: int64\n          description: The length in records of the sub-set of results\n          example: 100\n        offset:\n          type: integer\n          format: int64\n          description: The start offset for this sub-set of data, where zero is the\n            offset of the first record in the full result set\n          example: 0\n      required:\n      - length\n      - offset\n    OverrideValueString:\n      type: object\n      properties:\n        hasOverride:\n          type: boolean\n        value:\n          type: string\n    PageRequest:\n      type: object\n      properties:\n        length:\n          type: integer\n          format: int32\n        offset:\n          type: integer\n          format: int32\n    PageResponse:\n      type: object\n      description: Details of the page of results being returned.\n      properties:\n        exact:\n          type: boolean\n        length:\n          type: integer\n          format: int32\n        offset:\n          type: integer\n          format: int64\n        total:\n          type: integer\n          format: int64\n    Param:\n      type: object\n      description: A key value pair that describes a property of a query\n      properties:\n        key:\n          type: string\n          description: The property key\n        value:\n          type: string\n          description: The property value\n      required:\n      - key\n      - value\n    ParamInfo:\n      type: object\n      properties:\n        description:\n          type: string\n        name:\n          type: string\n        paramType:\n          type: string\n          enum:\n          - OPTIONAL\n          - MANDATORY\n    PasswordPolicyConfig:\n      type: object\n      properties:\n        allowPasswordResets:\n          type: boolean\n        forcePasswordChangeOnFirstLogin:\n          type: boolean\n        mandatoryPasswordChangeDuration:\n          type: string\n        minimumPasswordLength:\n          type: integer\n          format: int32\n          minimum: 0\n        minimumPasswordStrength:\n          type: integer\n          format: int32\n          maximum: 5\n          minimum: 0\n        neverUsedAccountDeactivationThreshold:\n          type: string\n        passwordComplexityRegex:\n          type: string\n        passwordPolicyMessage:\n          type: string\n        unusedAccountDeactivationThreshold:\n          type: string\n      required:\n      - mandatoryPasswordChangeDuration\n      - minimumPasswordLength\n      - minimumPasswordStrength\n      - neverUsedAccountDeactivationThreshold\n      - unusedAccountDeactivationThreshold\n    PermissionChangeEvent:\n      type: object\n      discriminator:\n        propertyName: type\n      properties:\n        type:\n          type: string\n      required:\n      - type\n    PermissionChangeRequest:\n      type: object\n      properties:\n        event:\n          $ref: '#/components/schemas/PermissionChangeEvent'\n    PipelineData:\n      type: object\n      properties:\n        elements:\n          $ref: '#/components/schemas/PipelineElements'\n        links:\n          $ref: '#/components/schemas/PipelineLinks'\n        pipelineReferences:\n          $ref: '#/components/schemas/PipelineReferences'\n        processors:\n          type: array\n          items:\n            $ref: '#/components/schemas/Processor'\n        properties:\n          $ref: '#/components/schemas/PipelineProperties'\n      xml:\n        name: pipeline\n    PipelineDoc:\n      type: object\n      properties:\n        createTimeMs:\n          type: integer\n          format: int64\n        createUser:\n          type: string\n        description:\n          type: string\n        name:\n          type: string\n        parentPipeline:\n          $ref: '#/components/schemas/DocRef'\n        pipelineData:\n          $ref: '#/components/schemas/PipelineData'\n        type:\n          type: string\n        updateTimeMs:\n          type: integer\n          format: int64\n        updateUser:\n          type: string\n        uuid:\n          type: string\n        version:\n          type: string\n    PipelineElement:\n      type: object\n      properties:\n        elementType:\n          $ref: '#/components/schemas/PipelineElementType'\n        id:\n          type: string\n        type:\n          type: string\n      required:\n      - id\n      - type\n    PipelineElementType:\n      type: object\n      properties:\n        category:\n          type: string\n          enum:\n          - INTERNAL\n          - READER\n          - PARSER\n          - FILTER\n          - WRITER\n          - DESTINATION\n        icon:\n          type: string\n        roles:\n          type: array\n          items:\n            type: string\n        type:\n          type: string\n    PipelineElements:\n      type: object\n      properties:\n        add:\n          type: array\n          items:\n            $ref: '#/components/schemas/PipelineElement'\n          xml:\n            wrapped: true\n        remove:\n          type: array\n          items:\n            $ref: '#/components/schemas/PipelineElement'\n          xml:\n            wrapped: true\n    PipelineLink:\n      type: object\n      properties:\n        from:\n          type: string\n        sourcePipeline:\n          $ref: '#/components/schemas/DocRef'\n        to:\n          type: string\n      required:\n      - from\n      - to\n    PipelineLinks:\n      type: object\n      properties:\n        add:\n          type: array\n          items:\n            $ref: '#/components/schemas/PipelineLink'\n          xml:\n            wrapped: true\n        remove:\n          type: array\n          items:\n            $ref: '#/components/schemas/PipelineLink'\n          xml:\n            wrapped: true\n    PipelineProperties:\n      type: object\n      properties:\n        add:\n          type: array\n          items:\n            $ref: '#/components/schemas/PipelineProperty'\n          xml:\n            wrapped: true\n        remove:\n          type: array\n          items:\n            $ref: '#/components/schemas/PipelineProperty'\n          xml:\n            wrapped: true\n    PipelineProperty:\n      type: object\n      properties:\n        element:\n          type: string\n        name:\n          type: string\n        propertyType:\n          $ref: '#/components/schemas/PipelinePropertyType'\n        sourcePipeline:\n          $ref: '#/components/schemas/DocRef'\n        value:\n          $ref: '#/components/schemas/PipelinePropertyValue'\n      required:\n      - element\n      - name\n    PipelinePropertyType:\n      type: object\n      properties:\n        defaultValue:\n          type: string\n        description:\n          type: string\n        displayPriority:\n          type: integer\n          format: int32\n        docRefTypes:\n          type: array\n          items:\n            type: string\n        elementType:\n          $ref: '#/components/schemas/PipelineElementType'\n        name:\n          type: string\n        pipelineReference:\n          type: boolean\n        type:\n          type: string\n    PipelinePropertyValue:\n      type: object\n      properties:\n        boolean:\n          type: boolean\n        entity:\n          $ref: '#/components/schemas/DocRef'\n        integer:\n          type: integer\n          format: int32\n        long:\n          type: integer\n          format: int64\n        string:\n          type: string\n    PipelineReference:\n      type: object\n      properties:\n        element:\n          type: string\n        feed:\n          $ref: '#/components/schemas/DocRef'\n        name:\n          type: string\n        pipeline:\n          $ref: '#/components/schemas/DocRef'\n        sourcePipeline:\n          $ref: '#/components/schemas/DocRef'\n        streamType:\n          type: string\n      required:\n      - element\n      - feed\n      - name\n      - pipeline\n      - streamType\n    PipelineReferences:\n      type: object\n      properties:\n        add:\n          type: array\n          items:\n            $ref: '#/components/schemas/PipelineReference'\n          xml:\n            wrapped: true\n        remove:\n          type: array\n          items:\n            $ref: '#/components/schemas/PipelineReference'\n          xml:\n            wrapped: true\n    PipelineStepRequest:\n      type: object\n      properties:\n        childStreamType:\n          type: string\n        code:\n          type: object\n          additionalProperties:\n            type: string\n        criteria:\n          $ref: '#/components/schemas/FindMetaCriteria'\n        pipeline:\n          $ref: '#/components/schemas/DocRef'\n        stepFilterMap:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/SteppingFilterSettings'\n        stepLocation:\n          $ref: '#/components/schemas/StepLocation'\n        stepSize:\n          type: integer\n          format: int32\n        stepType:\n          type: string\n          enum:\n          - FIRST\n          - FORWARD\n          - BACKWARD\n          - LAST\n          - REFRESH\n    ProcessConfig:\n      type: object\n      properties:\n        defaultRecordLimit:\n          type: integer\n          format: int64\n        defaultTimeLimit:\n          type: integer\n          format: int64\n    ProcessingInfoResponse:\n      type: object\n      properties:\n        createTime:\n          type: string\n        effectiveTime:\n          type: string\n        lastAccessedTime:\n          type: string\n        maps:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/EntryCounts'\n        processingState:\n          type: string\n          enum:\n          - LOAD_IN_PROGRESS\n          - PURGE_IN_PROGRESS\n          - COMPLETE\n          - FAILED\n          - TERMINATED\n          - PURGE_FAILED\n        refStreamDefinition:\n          $ref: '#/components/schemas/RefStreamDefinition'\n    Processor:\n      type: object\n      properties:\n        createTimeMs:\n          type: integer\n          format: int64\n        createUser:\n          type: string\n        deleted:\n          type: boolean\n        enabled:\n          type: boolean\n        id:\n          type: integer\n          format: int32\n        pipelineName:\n          type: string\n        pipelineUuid:\n          type: string\n        taskType:\n          type: string\n        updateTimeMs:\n          type: integer\n          format: int64\n        updateUser:\n          type: string\n        uuid:\n          type: string\n        version:\n          type: integer\n          format: int32\n      xml:\n        name: parameters\n    ProcessorFilter:\n      type: object\n      properties:\n        createTimeMs:\n          type: integer\n          format: int64\n        createUser:\n          type: string\n        data:\n          type: string\n        deleted:\n          type: boolean\n        enabled:\n          type: boolean\n        id:\n          type: integer\n          format: int32\n        maxMetaCreateTimeMs:\n          type: integer\n          format: int64\n        minMetaCreateTimeMs:\n          type: integer\n          format: int64\n        pipelineName:\n          type: string\n        pipelineUuid:\n          type: string\n        priority:\n          type: integer\n          format: int32\n        processor:\n          $ref: '#/components/schemas/Processor'\n        processorFilterTracker:\n          $ref: '#/components/schemas/ProcessorFilterTracker'\n        processorUuid:\n          type: string\n        queryData:\n          $ref: '#/components/schemas/QueryData'\n        reprocess:\n          type: boolean\n        updateTimeMs:\n          type: integer\n          format: int64\n        updateUser:\n          type: string\n        uuid:\n          type: string\n        version:\n          type: integer\n          format: int32\n    ProcessorFilterRow:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/ProcessorListRow'\n      - type: object\n        properties:\n          processorFilter:\n            $ref: '#/components/schemas/ProcessorFilter'\n    ProcessorFilterTracker:\n      type: object\n      properties:\n        eventCount:\n          type: integer\n          format: int64\n        id:\n          type: integer\n          format: int32\n        lastPollMs:\n          type: integer\n          format: int64\n        lastPollTaskCount:\n          type: integer\n          format: int32\n        maxMetaCreateMs:\n          type: integer\n          format: int64\n        metaCount:\n          type: integer\n          format: int64\n        metaCreateMs:\n          type: integer\n          format: int64\n        minEventId:\n          type: integer\n          format: int64\n        minMetaCreateMs:\n          type: integer\n          format: int64\n        minMetaId:\n          type: integer\n          format: int64\n        status:\n          type: string\n        version:\n          type: integer\n          format: int32\n    ProcessorListRow:\n      type: object\n      discriminator:\n        propertyName: type\n      properties:\n        expander:\n          $ref: '#/components/schemas/Expander'\n        type:\n          type: string\n      required:\n      - type\n    ProcessorListRowResultPage:\n      type: object\n      properties:\n        pageResponse:\n          $ref: '#/components/schemas/PageResponse'\n        values:\n          type: array\n          items:\n            $ref: '#/components/schemas/ProcessorListRow'\n    ProcessorRow:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/ProcessorListRow'\n      - type: object\n        properties:\n          processor:\n            $ref: '#/components/schemas/Processor'\n    ProcessorTask:\n      type: object\n      properties:\n        createTimeMs:\n          type: integer\n          format: int64\n        data:\n          type: string\n        endTimeMs:\n          type: integer\n          format: int64\n        feedName:\n          type: string\n        id:\n          type: integer\n          format: int64\n        metaId:\n          type: integer\n          format: int64\n        nodeName:\n          type: string\n        processorFilter:\n          $ref: '#/components/schemas/ProcessorFilter'\n        startTimeMs:\n          type: integer\n          format: int64\n        status:\n          type: string\n          enum:\n          - UNPROCESSED\n          - ASSIGNED\n          - PROCESSING\n          - COMPLETE\n          - FAILED\n          - DELETED\n        statusTimeMs:\n          type: integer\n          format: int64\n        version:\n          type: integer\n          format: int32\n    ProcessorTaskList:\n      type: object\n      properties:\n        list:\n          type: array\n          items:\n            $ref: '#/components/schemas/ProcessorTask'\n        nodeName:\n          type: string\n    ProcessorTaskSummary:\n      type: object\n      properties:\n        count:\n          type: integer\n          format: int64\n        feed:\n          type: string\n        pipeline:\n          $ref: '#/components/schemas/DocRef'\n        priority:\n          type: integer\n          format: int32\n        status:\n          type: string\n          enum:\n          - UNPROCESSED\n          - ASSIGNED\n          - PROCESSING\n          - COMPLETE\n          - FAILED\n          - DELETED\n    Prop:\n      type: object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        showInList:\n          type: boolean\n        showInSelection:\n          type: boolean\n        validation:\n          type: string\n        validationMessage:\n          type: string\n        value:\n          type: string\n    PropertyPath:\n      type: object\n      properties:\n        parts:\n          type: array\n          items:\n            type: string\n    Query:\n      type: object\n      description: The query terms for the search\n      properties:\n        dataSource:\n          $ref: '#/components/schemas/DocRef'\n        expression:\n          $ref: '#/components/schemas/ExpressionOperator'\n        params:\n          type: array\n          items:\n            $ref: '#/components/schemas/Param'\n      required:\n      - dataSource\n      - expression\n    QueryComponentSettings:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/ComponentSettings'\n      - type: object\n        properties:\n          automate:\n            $ref: '#/components/schemas/Automate'\n          dataSource:\n            $ref: '#/components/schemas/DocRef'\n          expression:\n            $ref: '#/components/schemas/ExpressionOperator'\n          selectionHandlers:\n            type: array\n            items:\n              $ref: '#/components/schemas/ComponentSelectionHandler'\n    QueryConfig:\n      type: object\n      properties:\n        infoPopup:\n          $ref: '#/components/schemas/InfoPopupConfig'\n    QueryData:\n      type: object\n      properties:\n        dataSource:\n          $ref: '#/components/schemas/DocRef'\n        expression:\n          $ref: '#/components/schemas/ExpressionOperator'\n        limits:\n          $ref: '#/components/schemas/Limits'\n        params:\n          type: string\n      xml:\n        name: query\n    QueryKey:\n      type: object\n      description: A unique key to identify the instance of the search by. This key\n        is used to identify multiple requests for the same search when running in\n        incremental mode.\n      properties:\n        uuid:\n          type: string\n          description: The UUID that makes up the query key\n          example: 7740bcd0-a49e-4c22-8540-044f85770716\n      required:\n      - uuid\n    RangeInteger:\n      type: object\n      properties:\n        from:\n          type: integer\n          format: int32\n        matchNull:\n          type: boolean\n        to:\n          type: integer\n          format: int32\n    RangeLong:\n      type: object\n      properties:\n        from:\n          type: integer\n          format: int64\n        matchNull:\n          type: boolean\n        to:\n          type: integer\n          format: int64\n    Rec:\n      type: object\n      properties:\n        metaId:\n          type: integer\n          format: int64\n        recordIndex:\n          type: integer\n          format: int64\n    ReceiveDataRule:\n      type: object\n      properties:\n        action:\n          type: string\n          enum:\n          - RECEIVE\n          - REJECT\n          - DROP\n        creationTime:\n          type: integer\n          format: int64\n        enabled:\n          type: boolean\n        expression:\n          $ref: '#/components/schemas/ExpressionOperator'\n        name:\n          type: string\n        ruleNumber:\n          type: integer\n          format: int32\n      xml:\n        name: dataReceiptRule\n    ReceiveDataRules:\n      type: object\n      properties:\n        createTimeMs:\n          type: integer\n          format: int64\n        createUser:\n          type: string\n        fields:\n          type: array\n          items:\n            $ref: '#/components/schemas/AbstractField'\n        name:\n          type: string\n        rules:\n          type: array\n          items:\n            $ref: '#/components/schemas/ReceiveDataRule'\n        type:\n          type: string\n        updateTimeMs:\n          type: integer\n          format: int64\n        updateUser:\n          type: string\n        uuid:\n          type: string\n        version:\n          type: string\n    RefDataLookupRequest:\n      type: object\n      properties:\n        effectiveTime:\n          type: string\n        key:\n          type: string\n        mapName:\n          type: string\n        referenceLoaders:\n          type: array\n          items:\n            $ref: '#/components/schemas/ReferenceLoader'\n      required:\n      - key\n      - mapName\n      - referenceLoaders\n    RefDataProcessingInfo:\n      type: object\n      properties:\n        createTimeEpochMs:\n          type: integer\n          format: int64\n        effectiveTimeEpochMs:\n          type: integer\n          format: int64\n        lastAccessedTimeEpochMs:\n          type: integer\n          format: int64\n        processingState:\n          type: string\n          enum:\n          - LOAD_IN_PROGRESS\n          - PURGE_IN_PROGRESS\n          - COMPLETE\n          - FAILED\n          - TERMINATED\n          - PURGE_FAILED\n    RefStoreEntry:\n      type: object\n      properties:\n        key:\n          type: string\n        mapDefinition:\n          $ref: '#/components/schemas/MapDefinition'\n        refDataProcessingInfo:\n          $ref: '#/components/schemas/RefDataProcessingInfo'\n        value:\n          type: string\n        valueReferenceCount:\n          type: integer\n          format: int32\n    RefStreamDefinition:\n      type: object\n      properties:\n        partIndex:\n          type: integer\n          format: int64\n        pipelineDocRef:\n          $ref: '#/components/schemas/DocRef'\n        pipelineVersion:\n          type: string\n        streamId:\n          type: integer\n          format: int64\n    ReferenceLoader:\n      type: object\n      properties:\n        loaderPipeline:\n          $ref: '#/components/schemas/DocRef'\n        referenceFeed:\n          $ref: '#/components/schemas/DocRef'\n        streamType:\n          type: string\n      required:\n      - loaderPipeline\n      - referenceFeed\n    RemovePermissionEvent:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/PermissionChangeEvent'\n      - type: object\n        properties:\n          documentUuid:\n            type: string\n          permission:\n            type: string\n          userUuid:\n            type: string\n    ReprocessDataInfo:\n      type: object\n      properties:\n        details:\n          type: string\n        message:\n          type: string\n        severity:\n          type: string\n          enum:\n          - INFO\n          - WARN\n          - ERROR\n          - FATAL\n    ResetPasswordRequest:\n      type: object\n      properties:\n        confirmNewPassword:\n          type: string\n        newPassword:\n          type: string\n    ResourceGeneration:\n      type: object\n      properties:\n        messageList:\n          type: array\n          items:\n            $ref: '#/components/schemas/Message'\n        resourceKey:\n          $ref: '#/components/schemas/ResourceKey'\n    ResourceKey:\n      type: object\n      properties:\n        key:\n          type: string\n        name:\n          type: string\n    Result:\n      type: object\n      description: Base object for describing a set of result data\n      discriminator:\n        propertyName: type\n      properties:\n        componentId:\n          type: string\n          description: The ID of the component that this result set was requested\n            for. See ResultRequest in SearchRequest\n        errors:\n          type: array\n          description: If an error has occurred producing this result set then this\n            will have details of the error\n          items:\n            type: string\n            description: If an error has occurred producing this result set then this\n              will have details of the error\n        type:\n          type: string\n      required:\n      - componentId\n      - type\n    ResultPageActivity:\n      type: object\n      description: A page of results.\n      properties:\n        pageResponse:\n          $ref: '#/components/schemas/PageResponse'\n        values:\n          type: array\n          items:\n            $ref: '#/components/schemas/Activity'\n    ResultPageCustomRollUpMask:\n      type: object\n      description: A page of results.\n      properties:\n        pageResponse:\n          $ref: '#/components/schemas/PageResponse'\n        values:\n          type: array\n          items:\n            $ref: '#/components/schemas/CustomRollUpMask'\n    ResultPageCustomRollUpMaskFields:\n      type: object\n      description: A page of results.\n      properties:\n        pageResponse:\n          $ref: '#/components/schemas/PageResponse'\n        values:\n          type: array\n          items:\n            $ref: '#/components/schemas/CustomRollUpMaskFields'\n    ResultPageDBTableStatus:\n      type: object\n      description: A page of results.\n      properties:\n        pageResponse:\n          $ref: '#/components/schemas/PageResponse'\n        values:\n          type: array\n          items:\n            $ref: '#/components/schemas/DBTableStatus'\n    ResultPageDependency:\n      type: object\n      description: A page of results.\n      properties:\n        pageResponse:\n          $ref: '#/components/schemas/PageResponse'\n        values:\n          type: array\n          items:\n            $ref: '#/components/schemas/Dependency'\n    ResultPageFsVolume:\n      type: object\n      description: A page of results.\n      properties:\n        pageResponse:\n          $ref: '#/components/schemas/PageResponse'\n        values:\n          type: array\n          items:\n            $ref: '#/components/schemas/FsVolume'\n    ResultPageIndexShard:\n      type: object\n      description: A page of results.\n      properties:\n        pageResponse:\n          $ref: '#/components/schemas/PageResponse'\n        values:\n          type: array\n          items:\n            $ref: '#/components/schemas/IndexShard'\n    ResultPageIndexVolume:\n      type: object\n      description: A page of results.\n      properties:\n        pageResponse:\n          $ref: '#/components/schemas/PageResponse'\n        values:\n          type: array\n          items:\n            $ref: '#/components/schemas/IndexVolume'\n    ResultPageIndexVolumeGroup:\n      type: object\n      description: A page of results.\n      properties:\n        pageResponse:\n          $ref: '#/components/schemas/PageResponse'\n        values:\n          type: array\n          items:\n            $ref: '#/components/schemas/IndexVolumeGroup'\n    ResultPageJob:\n      type: object\n      description: A page of results.\n      properties:\n        pageResponse:\n          $ref: '#/components/schemas/PageResponse'\n        values:\n          type: array\n          items:\n            $ref: '#/components/schemas/Job'\n    ResultPageJobNode:\n      type: object\n      description: A page of results.\n      properties:\n        pageResponse:\n          $ref: '#/components/schemas/PageResponse'\n        values:\n          type: array\n          items:\n            $ref: '#/components/schemas/JobNode'\n    ResultPageMetaRow:\n      type: object\n      description: A page of results.\n      properties:\n        pageResponse:\n          $ref: '#/components/schemas/PageResponse'\n        values:\n          type: array\n          items:\n            $ref: '#/components/schemas/MetaRow'\n    ResultPageProcessorTask:\n      type: object\n      description: A page of results.\n      properties:\n        pageResponse:\n          $ref: '#/components/schemas/PageResponse'\n        values:\n          type: array\n          items:\n            $ref: '#/components/schemas/ProcessorTask'\n    ResultPageProcessorTaskSummary:\n      type: object\n      description: A page of results.\n      properties:\n        pageResponse:\n          $ref: '#/components/schemas/PageResponse'\n        values:\n          type: array\n          items:\n            $ref: '#/components/schemas/ProcessorTaskSummary'\n    ResultPageStoredQuery:\n      type: object\n      description: A page of results.\n      properties:\n        pageResponse:\n          $ref: '#/components/schemas/PageResponse'\n        values:\n          type: array\n          items:\n            $ref: '#/components/schemas/StoredQuery'\n    ResultPageString:\n      type: object\n      description: A page of results.\n      properties:\n        pageResponse:\n          $ref: '#/components/schemas/PageResponse'\n        values:\n          type: array\n          items:\n            type: string\n    ResultPageUser:\n      type: object\n      description: A page of results.\n      properties:\n        pageResponse:\n          $ref: '#/components/schemas/PageResponse'\n        values:\n          type: array\n          items:\n            $ref: '#/components/schemas/User'\n    ResultRequest:\n      type: object\n      description: A definition for how to return the raw results of the query in\n        the SearchResponse, e.g. sorted, grouped, limited, etc.\n      properties:\n        componentId:\n          type: string\n          description: The ID of the component that will receive the results corresponding\n            to this ResultRequest\n        fetch:\n          type: string\n          enum:\n          - NONE\n          - CHANGES\n          - ALL\n        mappings:\n          type: array\n          items:\n            $ref: '#/components/schemas/TableSettings'\n        openGroups:\n          type: array\n          description: TODO\n          items:\n            type: string\n            description: TODO\n          uniqueItems: true\n        requestedRange:\n          $ref: '#/components/schemas/OffsetRange'\n        resultStyle:\n          type: string\n          description: The style of results required. FLAT will provide a FlatResult\n            object, while TABLE will provide a TableResult object\n          enum:\n          - FLAT\n          - TABLE\n      required:\n      - componentId\n      - mappings\n      - openGroups\n      - requestedRange\n      - resultStyle\n    Row:\n      type: object\n      description: A row of data in a result set\n      properties:\n        backgroundColor:\n          type: string\n        depth:\n          type: integer\n          format: int32\n          description: The grouping depth, where 0 is the top level of grouping, or\n            where there is no grouping\n          example: 0\n        groupKey:\n          type: string\n          description: TODO\n        textColor:\n          type: string\n        values:\n          type: array\n          description: The value for this row of data. The values in the list are\n            in the same order as the fields in the ResultRequest\n          items:\n            type: string\n            description: The value for this row of data. The values in the list are\n              in the same order as the fields in the ResultRequest\n      required:\n      - depth\n      - groupKey\n      - values\n    SavePipelineXmlRequest:\n      type: object\n      properties:\n        pipeline:\n          $ref: '#/components/schemas/DocRef'\n        xml:\n          type: string\n    ScheduledTimes:\n      type: object\n      properties:\n        lastExecutedTime:\n          type: string\n        nextScheduledTime:\n          type: string\n    ScriptDoc:\n      type: object\n      properties:\n        createTimeMs:\n          type: integer\n          format: int64\n        createUser:\n          type: string\n        data:\n          type: string\n        dependencies:\n          type: array\n          items:\n            $ref: '#/components/schemas/DocRef'\n        description:\n          type: string\n        name:\n          type: string\n        type:\n          type: string\n        updateTimeMs:\n          type: integer\n          format: int64\n        updateUser:\n          type: string\n        uuid:\n          type: string\n        version:\n          type: string\n    Search:\n      type: object\n      properties:\n        componentSettingsMap:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/ComponentSettings'\n        dataSourceRef:\n          $ref: '#/components/schemas/DocRef'\n        expression:\n          $ref: '#/components/schemas/ExpressionOperator'\n        incremental:\n          type: boolean\n        params:\n          type: array\n          items:\n            $ref: '#/components/schemas/Param'\n        queryInfo:\n          type: string\n    SearchAccountRequest:\n      type: object\n      properties:\n        pageRequest:\n          $ref: '#/components/schemas/PageRequest'\n        quickFilter:\n          type: string\n        sort:\n          type: string\n          writeOnly: true\n        sortList:\n          type: array\n          items:\n            $ref: '#/components/schemas/CriteriaFieldSort'\n    SearchApiKeyRequest:\n      type: object\n      properties:\n        pageRequest:\n          $ref: '#/components/schemas/PageRequest'\n        quickFilter:\n          type: string\n        sort:\n          type: string\n          writeOnly: true\n        sortList:\n          type: array\n          items:\n            $ref: '#/components/schemas/CriteriaFieldSort'\n    SearchRequest:\n      type: object\n      description: A request for new search or a follow up request for more data for\n        an existing iterative search\n      properties:\n        dateTimeSettings:\n          $ref: '#/components/schemas/DateTimeSettings'\n        incremental:\n          type: boolean\n          description: If true the response will contain all results found so far,\n            typically no results on the first request. Future requests for the same\n            query key may return more results. Intended for use on longer running\n            searches to allow partial result sets to be returned as soon as they are\n            available rather than waiting for the full result set.\n        key:\n          $ref: '#/components/schemas/QueryKey'\n        query:\n          $ref: '#/components/schemas/Query'\n        resultRequests:\n          type: array\n          items:\n            $ref: '#/components/schemas/ResultRequest'\n          xml:\n            wrapped: true\n        timeout:\n          type: integer\n          format: int64\n          description: Set the maximum time (in ms) for the server to wait for a complete\n            result set. The timeout applies to both incremental and non incremental\n            queries, though the behaviour is slightly different. The timeout will\n            make the server wait for which ever comes first out of the query completing\n            or the timeout period being reached. If no value is supplied then for\n            an incremental query a default value of 0 will be used (i.e. returning\n            immediately) and for a non-incremental query the server's default timeout\n            period will be used. For an incremental query, if the query has not completed\n            by the end of the timeout period, it will return the currently know results\n            with complete=false, however for a non-incremental query it will return\n            no results, complete=false and details of the timeout in the error field\n      required:\n      - incremental\n      - key\n      - query\n      - resultRequests\n      xml:\n        name: searchRequest\n    SearchResponse:\n      type: object\n      description: The response to a search request, that may or may not contain results.\n        The results may only be a partial set if an iterative screech was requested\n      properties:\n        complete:\n          type: boolean\n        errors:\n          type: array\n          items:\n            type: string\n        highlights:\n          type: array\n          description: A list of strings to highlight in the UI that should correlate\n            with the search query.\n          items:\n            type: string\n            description: A list of strings to highlight in the UI that should correlate\n              with the search query.\n        queryKey:\n          $ref: '#/components/schemas/QueryKey'\n        results:\n          type: array\n          items:\n            $ref: '#/components/schemas/Result'\n      required:\n      - highlights\n      - queryKey\n    SelectionIndexShardStatus:\n      type: object\n      properties:\n        matchAll:\n          type: boolean\n        set:\n          type: array\n          items:\n            type: string\n            enum:\n            - CLOSED\n            - OPEN\n            - CLOSING\n            - OPENING\n            - NEW\n            - DELETED\n            - CORRUPT\n          uniqueItems: true\n    SelectionInteger:\n      type: object\n      properties:\n        matchAll:\n          type: boolean\n        set:\n          type: array\n          items:\n            type: integer\n            format: int32\n          uniqueItems: true\n    SelectionLong:\n      type: object\n      properties:\n        matchAll:\n          type: boolean\n        set:\n          type: array\n          items:\n            type: integer\n            format: int64\n          uniqueItems: true\n    SelectionString:\n      type: object\n      properties:\n        matchAll:\n          type: boolean\n        set:\n          type: array\n          items:\n            type: string\n          uniqueItems: true\n    SelectionSummary:\n      type: object\n      properties:\n        ageRange:\n          $ref: '#/components/schemas/RangeLong'\n        feedCount:\n          type: integer\n          format: int64\n        itemCount:\n          type: integer\n          format: int64\n        pipelineCount:\n          type: integer\n          format: int64\n        processorCount:\n          type: integer\n          format: int64\n        statusCount:\n          type: integer\n          format: int64\n        typeCount:\n          type: integer\n          format: int64\n    SelectionVolumeUseStatus:\n      type: object\n      properties:\n        matchAll:\n          type: boolean\n        set:\n          type: array\n          items:\n            type: string\n            enum:\n            - ACTIVE\n            - INACTIVE\n            - CLOSED\n          uniqueItems: true\n    SessionDetails:\n      type: object\n      properties:\n        createMs:\n          type: integer\n          format: int64\n        lastAccessedAgent:\n          type: string\n        lastAccessedMs:\n          type: integer\n          format: int64\n        nodeName:\n          type: string\n        userName:\n          type: string\n    SessionInfo:\n      type: object\n      properties:\n        buildInfo:\n          $ref: '#/components/schemas/BuildInfo'\n        nodeName:\n          type: string\n        userName:\n          type: string\n    SessionListResponse:\n      type: object\n      properties:\n        pageResponse:\n          $ref: '#/components/schemas/PageResponse'\n        values:\n          type: array\n          items:\n            $ref: '#/components/schemas/SessionDetails'\n    SetAssignedToRequest:\n      type: object\n      properties:\n        annotationIdList:\n          type: array\n          items:\n            type: integer\n            format: int64\n        assignedTo:\n          type: string\n    SetStatusRequest:\n      type: object\n      properties:\n        annotationIdList:\n          type: array\n          items:\n            type: integer\n            format: int64\n        status:\n          type: string\n    SharedElementData:\n      type: object\n      properties:\n        codeIndicators:\n          $ref: '#/components/schemas/Indicators'\n        formatInput:\n          type: boolean\n        formatOutput:\n          type: boolean\n        input:\n          type: string\n        output:\n          type: string\n        outputIndicators:\n          $ref: '#/components/schemas/Indicators'\n    SharedStepData:\n      type: object\n      properties:\n        elementMap:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/SharedElementData'\n        sourceLocation:\n          $ref: '#/components/schemas/SourceLocation'\n    SimpleUser:\n      type: object\n      properties:\n        name:\n          type: string\n        uuid:\n          type: string\n    Size:\n      type: object\n      properties:\n        height:\n          type: integer\n          format: int32\n        width:\n          type: integer\n          format: int32\n      xml:\n        name: size\n    SolrConnectionConfig:\n      type: object\n      properties:\n        instanceType:\n          type: string\n          enum:\n          - SINGLE_NOOE\n          - SOLR_CLOUD\n        solrUrls:\n          type: array\n          items:\n            type: string\n        useZk:\n          type: boolean\n        zkHosts:\n          type: array\n          items:\n            type: string\n        zkPath:\n          type: string\n      xml:\n        name: connection\n    SolrConnectionTestResponse:\n      type: object\n      properties:\n        message:\n          type: string\n        ok:\n          type: boolean\n    SolrIndexDoc:\n      type: object\n      properties:\n        collection:\n          type: string\n        createTimeMs:\n          type: integer\n          format: int64\n        createUser:\n          type: string\n        deletedFields:\n          type: array\n          items:\n            $ref: '#/components/schemas/SolrIndexField'\n        description:\n          type: string\n        fields:\n          type: array\n          items:\n            $ref: '#/components/schemas/SolrIndexField'\n        name:\n          type: string\n        retentionExpression:\n          $ref: '#/components/schemas/ExpressionOperator'\n        solrConnectionConfig:\n          $ref: '#/components/schemas/SolrConnectionConfig'\n        solrSynchState:\n          $ref: '#/components/schemas/SolrSynchState'\n        type:\n          type: string\n        updateTimeMs:\n          type: integer\n          format: int64\n        updateUser:\n          type: string\n        uuid:\n          type: string\n        version:\n          type: string\n    SolrIndexField:\n      type: object\n      properties:\n        defaultValue:\n          type: string\n        docValues:\n          type: boolean\n        fieldName:\n          type: string\n        fieldType:\n          type: string\n        fieldUse:\n          type: string\n          enum:\n          - ID\n          - BOOLEAN_FIELD\n          - INTEGER_FIELD\n          - LONG_FIELD\n          - FLOAT_FIELD\n          - DOUBLE_FIELD\n          - DATE_FIELD\n          - FIELD\n          - NUMERIC_FIELD\n        indexed:\n          type: boolean\n        multiValued:\n          type: boolean\n        omitNorms:\n          type: boolean\n        omitPositions:\n          type: boolean\n        omitTermFreqAndPositions:\n          type: boolean\n        required:\n          type: boolean\n        sortMissingFirst:\n          type: boolean\n        sortMissingLast:\n          type: boolean\n        stored:\n          type: boolean\n        supportedConditions:\n          type: array\n          items:\n            type: string\n            enum:\n            - CONTAINS\n            - EQUALS\n            - GREATER_THAN\n            - GREATER_THAN_OR_EQUAL_TO\n            - LESS_THAN\n            - LESS_THAN_OR_EQUAL_TO\n            - BETWEEN\n            - IN\n            - IN_DICTIONARY\n            - IN_FOLDER\n            - IS_DOC_REF\n            - IS_NULL\n            - IS_NOT_NULL\n            - MATCHES_REGEX\n        termOffsets:\n          type: boolean\n        termPayloads:\n          type: boolean\n        termPositions:\n          type: boolean\n        termVectors:\n          type: boolean\n        uninvertible:\n          type: boolean\n    SolrSynchState:\n      type: object\n      properties:\n        lastSynchronized:\n          type: integer\n          format: int64\n        messages:\n          type: array\n          items:\n            type: string\n    Sort:\n      type: object\n      description: Describes the sorting applied to a field\n      properties:\n        direction:\n          type: string\n          description: The direction to sort in, ASCENDING or DESCENDING\n          enum:\n          - ASCENDING\n          - DESCENDING\n          example: ASCENDING\n        order:\n          type: integer\n          format: int32\n          description: Where multiple fields are sorted this value describes the sort\n            order, with 0 being the first field to sort on\n          example: 0\n      required:\n      - direction\n      - order\n    SourceConfig:\n      type: object\n      properties:\n        maxCharactersInPreviewFetch:\n          type: integer\n          format: int64\n          minimum: 1\n        maxCharactersPerFetch:\n          type: integer\n          format: int64\n          minimum: 1\n        maxCharactersToCompleteLine:\n          type: integer\n          format: int64\n          minimum: 0\n        maxHexDumpLines:\n          type: integer\n          format: int32\n          minimum: 1\n    SourceLocation:\n      type: object\n      properties:\n        childType:\n          type: string\n        dataRange:\n          $ref: '#/components/schemas/DataRange'\n        highlights:\n          type: array\n          items:\n            $ref: '#/components/schemas/DataRange'\n        metaId:\n          type: integer\n          format: int64\n        partIndex:\n          type: integer\n          format: int64\n        recordIndex:\n          type: integer\n          format: int64\n    SplashConfig:\n      type: object\n      properties:\n        body:\n          type: string\n        enabled:\n          type: boolean\n        title:\n          type: string\n        version:\n          type: string\n    SplitLayoutConfig:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/LayoutConfig'\n      - type: object\n        properties:\n          children:\n            type: array\n            items:\n              $ref: '#/components/schemas/LayoutConfig'\n            xml:\n              wrapped: true\n          dimension:\n            type: integer\n            format: int32\n      xml:\n        name: splitLayout\n    StatisticField:\n      type: object\n      properties:\n        fieldName:\n          type: string\n    StatisticStoreDoc:\n      type: object\n      properties:\n        config:\n          $ref: '#/components/schemas/StatisticsDataSourceData'\n        createTimeMs:\n          type: integer\n          format: int64\n        createUser:\n          type: string\n        description:\n          type: string\n        enabled:\n          type: boolean\n        name:\n          type: string\n        precision:\n          type: integer\n          format: int64\n        rollUpType:\n          type: string\n          enum:\n          - NONE\n          - ALL\n          - CUSTOM\n        statisticType:\n          type: string\n          enum:\n          - COUNT\n          - VALUE\n        type:\n          type: string\n        updateTimeMs:\n          type: integer\n          format: int64\n        updateUser:\n          type: string\n        uuid:\n          type: string\n        version:\n          type: string\n    StatisticsDataSourceData:\n      type: object\n      properties:\n        customRollUpMasks:\n          type: array\n          items:\n            $ref: '#/components/schemas/CustomRollUpMask'\n          uniqueItems: true\n        fields:\n          type: array\n          items:\n            $ref: '#/components/schemas/StatisticField'\n    StatisticsDataSourceFieldChangeRequest:\n      type: object\n      properties:\n        newStatisticsDataSourceData:\n          $ref: '#/components/schemas/StatisticsDataSourceData'\n        oldStatisticsDataSourceData:\n          $ref: '#/components/schemas/StatisticsDataSourceData'\n    StepLocation:\n      type: object\n      properties:\n        metaId:\n          type: integer\n          format: int64\n        partIndex:\n          type: integer\n          format: int64\n        recordIndex:\n          type: integer\n          format: int64\n    SteppingFilterSettings:\n      type: object\n      properties:\n        filters:\n          type: array\n          items:\n            $ref: '#/components/schemas/XPathFilter'\n        skipToOutput:\n          type: string\n          enum:\n          - NOT_EMPTY\n          - EMPTY\n        skipToSeverity:\n          type: string\n          enum:\n          - INFO\n          - WARN\n          - ERROR\n          - FATAL\n    SteppingResult:\n      type: object\n      properties:\n        currentStreamOffset:\n          type: integer\n          format: int32\n        foundRecord:\n          type: boolean\n        generalErrors:\n          type: array\n          items:\n            type: string\n          uniqueItems: true\n        segmentedData:\n          type: boolean\n        stepData:\n          $ref: '#/components/schemas/SharedStepData'\n        stepFilterMap:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/SteppingFilterSettings'\n        stepLocation:\n          $ref: '#/components/schemas/StepLocation'\n    StoredError:\n      type: object\n      properties:\n        elementId:\n          type: string\n        location:\n          $ref: '#/components/schemas/Location'\n        message:\n          type: string\n        severity:\n          type: string\n          enum:\n          - INFO\n          - WARN\n          - ERROR\n          - FATAL\n    StoredQuery:\n      type: object\n      properties:\n        componentId:\n          type: string\n        createTimeMs:\n          type: integer\n          format: int64\n        createUser:\n          type: string\n        dashboardUuid:\n          type: string\n        data:\n          type: string\n        favourite:\n          type: boolean\n        id:\n          type: integer\n          format: int32\n        name:\n          type: string\n        query:\n          $ref: '#/components/schemas/Query'\n        updateTimeMs:\n          type: integer\n          format: int64\n        updateUser:\n          type: string\n        version:\n          type: integer\n          format: int32\n    StreamLocation:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/Location'\n      - type: object\n        properties:\n          partIndex:\n            type: integer\n            format: int64\n    StringCriteria:\n      type: object\n      properties:\n        caseInsensitive:\n          type: boolean\n        matchNull:\n          type: boolean\n        matchStyle:\n          type: string\n          enum:\n          - Wild\n          - WildStart\n          - WildEnd\n          - WildStartAndEnd\n        string:\n          type: string\n        stringUpper:\n          type: string\n    StroomStatsStoreDoc:\n      type: object\n      properties:\n        config:\n          $ref: '#/components/schemas/StroomStatsStoreEntityData'\n        createTimeMs:\n          type: integer\n          format: int64\n        createUser:\n          type: string\n        description:\n          type: string\n        enabled:\n          type: boolean\n        name:\n          type: string\n        precision:\n          type: string\n          enum:\n          - SECOND\n          - MINUTE\n          - HOUR\n          - DAY\n          - FOREVER\n        rollUpType:\n          type: string\n          enum:\n          - NONE\n          - ALL\n          - CUSTOM\n        statisticType:\n          type: string\n          enum:\n          - COUNT\n          - VALUE\n        type:\n          type: string\n        updateTimeMs:\n          type: integer\n          format: int64\n        updateUser:\n          type: string\n        uuid:\n          type: string\n        version:\n          type: string\n    StroomStatsStoreEntityData:\n      type: object\n      properties:\n        customRollUpMasks:\n          type: array\n          items:\n            $ref: '#/components/schemas/CustomRollUpMask'\n          uniqueItems: true\n        fields:\n          type: array\n          items:\n            $ref: '#/components/schemas/StatisticField'\n    StroomStatsStoreFieldChangeRequest:\n      type: object\n      properties:\n        newEntityData:\n          $ref: '#/components/schemas/StroomStatsStoreEntityData'\n        oldEntityData:\n          $ref: '#/components/schemas/StroomStatsStoreEntityData'\n    Summary:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/Marker'\n      - type: object\n        properties:\n          count:\n            type: integer\n            format: int32\n          expander:\n            $ref: '#/components/schemas/Expander'\n          total:\n            type: integer\n            format: int32\n    SystemInfoResult:\n      type: object\n      properties:\n        description:\n          type: string\n        details:\n          type: object\n          additionalProperties:\n            type: object\n        name:\n          type: string\n      required:\n      - name\n    SystemInfoResultList:\n      type: object\n      properties:\n        results:\n          type: array\n          items:\n            $ref: '#/components/schemas/SystemInfoResult'\n    TabConfig:\n      type: object\n      properties:\n        id:\n          type: string\n        visible:\n          type: boolean\n      xml:\n        name: tab\n    TabLayoutConfig:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/LayoutConfig'\n      - type: object\n        properties:\n          selected:\n            type: integer\n            format: int32\n          tabs:\n            type: array\n            items:\n              $ref: '#/components/schemas/TabConfig'\n            xml:\n              wrapped: true\n      xml:\n        name: tabLayout\n    TableComponentSettings:\n      type: object\n      properties:\n        extractValues:\n          type: boolean\n          description: TODO\n        extractionPipeline:\n          $ref: '#/components/schemas/DocRef'\n        fields:\n          type: array\n          items:\n            $ref: '#/components/schemas/Field'\n        maxResults:\n          type: array\n          description: Defines the maximum number of results to return at each grouping\n            level, e.g. '1000,10,1' means 1000 results at group level 0, 10 at level\n            1 and 1 at level 2. In the absence of this field system defaults will\n            apply\n          example: 1000,10,1\n          items:\n            type: integer\n            format: int32\n            description: Defines the maximum number of results to return at each grouping\n              level, e.g. '1000,10,1' means 1000 results at group level 0, 10 at level\n              1 and 1 at level 2. In the absence of this field system defaults will\n              apply\n        queryId:\n          type: string\n          description: TODO\n        showDetail:\n          type: boolean\n      required:\n      - fields\n      - queryId\n    TableCoprocessorSettings:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/CoprocessorSettings'\n      - type: object\n        properties:\n          componentIds:\n            type: array\n            items:\n              type: string\n          tableSettings:\n            $ref: '#/components/schemas/TableSettings'\n    TableResult:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/Result'\n      - type: object\n        properties:\n          fields:\n            type: array\n            items:\n              $ref: '#/components/schemas/Field'\n          resultRange:\n            $ref: '#/components/schemas/OffsetRange'\n          rows:\n            type: array\n            items:\n              $ref: '#/components/schemas/Row'\n          totalResults:\n            type: integer\n            format: int32\n      description: Object for describing a set of results in a table form that supports\n        grouped data\n      required:\n      - componentId\n      - fields\n      - resultRange\n      - rows\n    TableResultRequest:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/ComponentResultRequest'\n      - type: object\n        properties:\n          openGroups:\n            type: array\n            items:\n              type: string\n            uniqueItems: true\n          requestedRange:\n            $ref: '#/components/schemas/OffsetRange'\n          tableSettings:\n            $ref: '#/components/schemas/TableSettings'\n      required:\n      - componentId\n    TableSettings:\n      type: object\n      description: An object to describe how the query results should be returned,\n        including which fields should be included and what sorting, grouping, filtering,\n        limiting, etc. should be applied\n      properties:\n        extractValues:\n          type: boolean\n        extractionPipeline:\n          $ref: '#/components/schemas/DocRef'\n        fields:\n          type: array\n          items:\n            $ref: '#/components/schemas/Field'\n        maxResults:\n          type: array\n          description: Defines the maximum number of results to return at each grouping\n            level, e.g. '1000,10,1' means 1000 results at group level 0, 10 at level\n            1 and 1 at level 2. In the absence of this field system defaults will\n            apply\n          example: 1000,10,1\n          items:\n            type: integer\n            format: int32\n            description: Defines the maximum number of results to return at each grouping\n              level, e.g. '1000,10,1' means 1000 results at group level 0, 10 at level\n              1 and 1 at level 2. In the absence of this field system defaults will\n              apply\n        queryId:\n          type: string\n          description: TODO\n        showDetail:\n          type: boolean\n          description: When grouping is used a value of true indicates that the results\n            will include the full detail of any results aggregated into a group as\n            well as their aggregates. A value of false will only include the aggregated\n            values for each group. Defaults to false.\n      required:\n      - fields\n      - queryId\n    TaskId:\n      type: object\n      properties:\n        id:\n          type: string\n        parentId:\n          $ref: '#/components/schemas/TaskId'\n    TaskProgress:\n      type: object\n      properties:\n        expander:\n          $ref: '#/components/schemas/Expander'\n        filterMatchState:\n          type: string\n          enum:\n          - MATCHED\n          - NOT_MATCHED\n        id:\n          $ref: '#/components/schemas/TaskId'\n        nodeName:\n          type: string\n        submitTimeMs:\n          type: integer\n          format: int64\n        taskInfo:\n          type: string\n        taskName:\n          type: string\n        threadName:\n          type: string\n        timeNowMs:\n          type: integer\n          format: int64\n        userName:\n          type: string\n    TaskProgressResponse:\n      type: object\n      properties:\n        errors:\n          type: array\n          items:\n            type: string\n        pageResponse:\n          $ref: '#/components/schemas/PageResponse'\n        values:\n          type: array\n          items:\n            $ref: '#/components/schemas/TaskProgress'\n    TerminateTaskProgressRequest:\n      type: object\n      properties:\n        criteria:\n          $ref: '#/components/schemas/FindTaskCriteria'\n    TextComponentSettings:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/ComponentSettings'\n      - type: object\n        properties:\n          colFromField:\n            $ref: '#/components/schemas/Field'\n          colToField:\n            $ref: '#/components/schemas/Field'\n          lineFromField:\n            $ref: '#/components/schemas/Field'\n          lineToField:\n            $ref: '#/components/schemas/Field'\n          modelVersion:\n            type: string\n          partNoField:\n            $ref: '#/components/schemas/Field'\n          pipeline:\n            $ref: '#/components/schemas/DocRef'\n          recordNoField:\n            $ref: '#/components/schemas/Field'\n          showAsHtml:\n            type: boolean\n          showStepping:\n            type: boolean\n          streamIdField:\n            $ref: '#/components/schemas/Field'\n          tableId:\n            type: string\n    TextConverterDoc:\n      type: object\n      properties:\n        converterType:\n          type: string\n          enum:\n          - NONE\n          - DATA_SPLITTER\n          - XML_FRAGMENT\n        createTimeMs:\n          type: integer\n          format: int64\n        createUser:\n          type: string\n        data:\n          type: string\n        description:\n          type: string\n        name:\n          type: string\n        type:\n          type: string\n        updateTimeMs:\n          type: integer\n          format: int64\n        updateUser:\n          type: string\n        uuid:\n          type: string\n        version:\n          type: string\n    TextField:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/AbstractField'\n    ThemeConfig:\n      type: object\n      properties:\n        backgroundAttachment:\n          type: string\n        backgroundColour:\n          type: string\n        backgroundImage:\n          type: string\n        backgroundOpacity:\n          type: string\n        backgroundPosition:\n          type: string\n        backgroundRepeat:\n          type: string\n        labelColours:\n          type: string\n        topMenuTextColour:\n          type: string\n        tubeOpacity:\n          type: string\n        tubeVisible:\n          type: string\n    TimeZone:\n      type: object\n      description: The timezone to apply to a date time value\n      properties:\n        id:\n          type: string\n          description: The id of the time zone, conforming to java.time.ZoneId\n          example: GMT\n        offsetHours:\n          type: integer\n          format: int32\n          description: The number of hours this timezone is offset from UTC\n          example: -1\n        offsetMinutes:\n          type: integer\n          format: int32\n          description: The number of minutes this timezone is offset from UTC\n          example: -30\n        use:\n          type: string\n          description: How the time zone will be specified, e.g. from provided client\n            'Local' time, 'UTC', a recognised timezone 'Id' or an 'Offset' from UTC\n            in hours and minutes.\n          enum:\n          - Local\n          - UTC\n          - Id\n          - Offset\n      required:\n      - use\n    TokenResponse:\n      type: object\n      properties:\n        access_token:\n          type: string\n        expires_in:\n          type: integer\n          format: int64\n        id_token:\n          type: string\n        refresh_token:\n          type: string\n        refresh_token_expires_in:\n          type: integer\n          format: int64\n        token_type:\n          type: string\n    UiConfig:\n      type: object\n      properties:\n        aboutHtml:\n          type: string\n        activity:\n          $ref: '#/components/schemas/ActivityConfig'\n        applicationInstanceKeepAliveIntervalMs:\n          type: integer\n          format: int32\n        defaultMaxResults:\n          type: string\n        helpSubPathExpressions:\n          type: string\n        helpSubPathJobs:\n          type: string\n        helpSubPathProperties:\n          type: string\n        helpSubPathQuickFilter:\n          type: string\n        helpUrl:\n          type: string\n        htmlTitle:\n          type: string\n        maintenanceMessage:\n          type: string\n        namePattern:\n          type: string\n        oncontextmenu:\n          type: string\n          pattern: ^return (true|false);$\n        process:\n          $ref: '#/components/schemas/ProcessConfig'\n        query:\n          $ref: '#/components/schemas/QueryConfig'\n        requireReactWrapper:\n          type: boolean\n        source:\n          $ref: '#/components/schemas/SourceConfig'\n        splash:\n          $ref: '#/components/schemas/SplashConfig'\n        theme:\n          $ref: '#/components/schemas/ThemeConfig'\n        welcomeHtml:\n          type: string\n    UpdateAccountRequest:\n      type: object\n      properties:\n        account:\n          $ref: '#/components/schemas/Account'\n        confirmPassword:\n          type: string\n        password:\n          type: string\n    UpdateStatusRequest:\n      type: object\n      properties:\n        criteria:\n          $ref: '#/components/schemas/FindMetaCriteria'\n        currentStatus:\n          type: string\n          enum:\n          - UNLOCKED\n          - LOCKED\n          - DELETED\n        newStatus:\n          type: string\n          enum:\n          - UNLOCKED\n          - LOCKED\n          - DELETED\n    UploadDataRequest:\n      type: object\n      properties:\n        effectiveMs:\n          type: integer\n          format: int64\n        feedName:\n          type: string\n        fileName:\n          type: string\n        key:\n          $ref: '#/components/schemas/ResourceKey'\n        metaData:\n          type: string\n        streamTypeName:\n          type: string\n    UrlResponse:\n      type: object\n      properties:\n        url:\n          type: string\n    User:\n      type: object\n      properties:\n        createTimeMs:\n          type: integer\n          format: int64\n        createUser:\n          type: string\n        group:\n          type: boolean\n        id:\n          type: integer\n          format: int32\n        name:\n          type: string\n        updateTimeMs:\n          type: integer\n          format: int64\n        updateUser:\n          type: string\n        uuid:\n          type: string\n        version:\n          type: integer\n          format: int32\n    UserAndPermissions:\n      type: object\n      properties:\n        permissions:\n          type: array\n          items:\n            type: string\n          uniqueItems: true\n        userId:\n          type: string\n    UserPreferences:\n      type: object\n      properties:\n        dateTimePattern:\n          type: string\n          description: A date time formatting pattern string conforming to the specification\n            of java.time.format.DateTimeFormatter\n        density:\n          type: string\n        editorTheme:\n          type: string\n        font:\n          type: string\n        fontSize:\n          type: string\n        theme:\n          type: string\n        timeZone:\n          $ref: '#/components/schemas/TimeZone'\n    ValidateExpressionResult:\n      type: object\n      properties:\n        ok:\n          type: boolean\n        string:\n          type: string\n    ValidateSessionResponse:\n      type: object\n      properties:\n        redirectUri:\n          type: string\n        userId:\n          type: string\n        valid:\n          type: boolean\n    ValidationResult:\n      type: object\n      properties:\n        message:\n          type: string\n        severity:\n          type: string\n          enum:\n          - INFO\n          - WARN\n          - ERROR\n          - FATAL\n    VisComponentSettings:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/ComponentSettings'\n      - type: object\n        properties:\n          json:\n            type: string\n          tableId:\n            type: string\n          tableSettings:\n            $ref: '#/components/schemas/TableComponentSettings'\n          visualisation:\n            $ref: '#/components/schemas/DocRef'\n    VisResult:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/Result'\n      - type: object\n        properties:\n          dataPoints:\n            type: integer\n            format: int64\n          jsonData:\n            type: string\n      required:\n      - componentId\n    VisResultRequest:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/ComponentResultRequest'\n      - type: object\n        properties:\n          requestedRange:\n            $ref: '#/components/schemas/OffsetRange'\n          visDashboardSettings:\n            $ref: '#/components/schemas/VisComponentSettings'\n      required:\n      - componentId\n    VisualisationDoc:\n      type: object\n      properties:\n        createTimeMs:\n          type: integer\n          format: int64\n        createUser:\n          type: string\n        description:\n          type: string\n        functionName:\n          type: string\n        name:\n          type: string\n        scriptRef:\n          $ref: '#/components/schemas/DocRef'\n        settings:\n          type: string\n        type:\n          type: string\n        updateTimeMs:\n          type: integer\n          format: int64\n        updateUser:\n          type: string\n        uuid:\n          type: string\n        version:\n          type: string\n    Welcome:\n      type: object\n      properties:\n        html:\n          type: string\n    XPathFilter:\n      type: object\n      properties:\n        ignoreCase:\n          type: boolean\n        matchType:\n          type: string\n          enum:\n          - EXISTS\n          - CONTAINS\n          - EQUALS\n          - UNIQUE\n        path:\n          type: string\n        uniqueValues:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/Rec'\n        value:\n          type: string\n    XmlSchemaDoc:\n      type: object\n      properties:\n        createTimeMs:\n          type: integer\n          format: int64\n        createUser:\n          type: string\n        data:\n          type: string\n        deprecated:\n          type: boolean\n        description:\n          type: string\n        name:\n          type: string\n        namespaceURI:\n          type: string\n        schemaGroup:\n          type: string\n        systemId:\n          type: string\n        type:\n          type: string\n        updateTimeMs:\n          type: integer\n          format: int64\n        updateUser:\n          type: string\n        uuid:\n          type: string\n        version:\n          type: string\n    XsltDoc:\n      type: object\n      properties:\n        createTimeMs:\n          type: integer\n          format: int64\n        createUser:\n          type: string\n        data:\n          type: string\n        description:\n          type: string\n        name:\n          type: string\n        type:\n          type: string\n        updateTimeMs:\n          type: integer\n          format: int64\n        updateUser:\n          type: string\n        uuid:\n          type: string\n        version:\n          type: string\n  securitySchemes:\n    ApiKeyAuth:\n      in: header\n      name: Authorization\n      type: apiKey\n",
			"canonicalURL": "/github.com/gchq/stroom@56fe2a831d70e8aaabeb408b2c71674edc7a7911/-/blob/stroom-app/src/main/resources/ui/noauth/swagger/stroom.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/gchq/stroom/blob/56fe2a831d70e8aaabeb408b2c71674edc7a7911/stroom-app/src/main/resources/ui/noauth/swagger/stroom.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: at stroom-app/src/main/resources/ui/noauth/swagger/stroom.yaml:5743:3: duplicate path: \"/users/v1/{uuid}\""
}