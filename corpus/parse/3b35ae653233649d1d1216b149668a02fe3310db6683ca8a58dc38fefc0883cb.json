{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/dariusbakunas/truenas-go-sdk"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "cfg/openapi.yaml",
			"byteSize": 55288,
			"content": "openapi: 3.0.0\ninfo:\n  title: TrueNAS RESTful API\n  description: Go SDK for interacting with TrueNAS APIs (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n  version: v2.0\npaths:\n  /pool:\n    get:\n      operationId: listPools\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - pool\n      responses:\n        '200':\n          description: 'A list of pools'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PoolsResponse'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n      parameters:\n        - name: limit\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: offset\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: count\n          in: query\n          required: false\n          schema:\n            type: boolean\n        - name: sort\n          in: query\n          required: false\n          schema:\n            type: string\n  /pool/dataset:\n    post:\n      tags:\n        - dataset\n      operationId: createDataset\n      security:\n        - bearerAuth: [ ]\n      description: |+\n        Creates a dataset/zvol.\n\n        `volsize` is required for type=VOLUME and is supposed to be a multiple of the block size.\n        `sparse` and `volblocksize` are only used for type=VOLUME.\n\n        `encryption` when enabled will create an ZFS encrypted root dataset for `name` pool.\n        There are 2 cases where ZFS encryption is not allowed for a dataset:\n        1) Pool in question is GELI encrypted.\n        2) If the parent dataset is encrypted with a passphrase and `name` is being created\n          with a key for encrypting the dataset.\n\n        `encryption_options` specifies configuration for encryption of dataset for `name` pool.\n        `encryption_options.passphrase` must be specified if encryption for dataset is desired with a passphrase\n        as a key.\n        Otherwise a hex encoded key can be specified by providing `encryption_options.key`.\n        `encryption_options.generate_key` when enabled automatically generates the key to be used\n        for dataset encryption.\n\n        It should be noted that keys are stored by the system for automatic locking/unlocking\n        on import/export of encrypted datasets. If that is not desired, dataset should be created\n        with a passphrase as a key.\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateDatasetParams'\n      responses:\n        '200':\n          description: 'Dataset details'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Dataset'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n  /pool/dataset/id/{id}:\n    get:\n      tags:\n        - dataset\n      operationId: getDataset\n      security:\n        - bearerAuth: [ ]\n      description: |-\n        Query Pool Datasets with `query-filters` and `query-options`.\n\n        We provide two ways to retrieve datasets. The first is a flat structure (default), where\n        all datasets in the system are returned as separate objects which contain all data\n        there is for their children. This retrieval type is slightly slower because of duplicates in each object.\n        The second type is hierarchical, where only top level datasets are returned in the list. They contain all the\n        children in the `children` key. This retrieval type is slightly faster.\n        These options are controlled by the `query-options.extra.flat` attribute (default true).\n      parameters:\n        - name: id\n          in: path\n          description: ID of the dataset\n          required: true\n          schema:\n            type: string\n        - name: limit\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: offset\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: count\n          in: query\n          required: false\n          schema:\n            type: boolean\n        - name: sort\n          in: query\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: 'Dataset details'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Dataset'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n    put:\n      tags:\n        - dataset\n      operationId: updateDataset\n      security:\n        - bearerAuth: [ ]\n      description: Update dataset\n      parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateDatasetParams'\n      responses:\n        '200':\n          description: 'Dataset details'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Dataset'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n    delete:\n      tags:\n      - dataset\n      operationId: deleteDataset\n      security:\n        - bearerAuth: [ ]\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      description: |+\n        Delete dataset/zvol\n\n        `recursive` will also delete/destroy all children datasets.\n        `force` will force delete busy datasets.\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n  /cronjob/id/{id}:\n    get:\n      tags:\n        - cronjob\n      operationId: getCronJob\n      security:\n        - bearerAuth: [ ]\n      parameters:\n        - name: id\n          in: path\n          description: ID of the cronjob\n          required: true\n          schema:\n            type: integer\n        - name: limit\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: offset\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: count\n          in: query\n          required: false\n          schema:\n            type: boolean\n        - name: sort\n          in: query\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: 'CronJob details'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CronJob'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n    delete:\n      tags:\n        - cronjob\n      operationId: deleteCronJob\n      security:\n        - bearerAuth: [ ]\n      parameters:\n      - name: id\n        in: path\n        description: ID of the cronjob\n        required: true\n        schema:\n          type: integer\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n    put:\n      tags:\n        - cronjob\n      operationId: updateCronJob\n      description: Update cronjob\n      security:\n        - bearerAuth: [ ]\n      parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateCronjobParams'\n      responses:\n        '200':\n          description: 'CronJob details'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CronJob'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n  /cronjob:\n    post:\n      tags:\n       - cronjob\n      operationId: createCronJob\n      security:\n        - bearerAuth: [ ]\n      description:\n        Create a new cron job.\n\n        `stderr` and `stdout` are boolean values which if `true`, represent that we would like to suppress\n        standard error / standard output respectively.\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateCronjobParams'\n      responses:\n        '200':\n          description: 'CronJob details'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CronJob'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n  /group:\n    get:\n      tags:\n        - group\n      operationId: listGroups\n      description: Get a list of (local) groups\n      # description: |-\n      #   Query groups with `query-filters` and `query-options`. As a performance optimization, only local groups\n      #   will be queried by default.\n\n      #   Groups from directory services such as NIS, LDAP, or Active Directory will be included in query results\n      #   if the option `{'extra': {'search_dscache': True}}` is specified.\n      security:\n        - bearerAuth: [ ]\n      responses:\n        '200':\n          $ref: '#/components/responses/GroupsResponse'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n      parameters:\n        - name: limit\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: offset\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: count\n          in: query\n          required: false\n          schema:\n            type: boolean\n        - name: sort\n          in: query\n          required: false\n          schema:\n            type: string\n    post:\n      tags:\n        - group\n      operationId: createGroup\n      description: |-\n        Create a new group.\n\n        If `gid` is not provided it is automatically filled with the next one available.\n\n        `allow_duplicate_gid` allows distinct group names to share the same gid.\n\n        `users` is a list of user ids (`id` attribute from `user.query`).\n\n        `smb` specifies whether the group should be mapped into an NT group.\n      security:\n        - bearerAuth: [ ]\n      responses:\n        '200':\n          description: 'Group details'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GroupResponse'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateGroupParams'\n  '/group/id/{id}':\n    delete:\n      tags:\n        - group\n      operationId: deleteGroup\n      description: |-\n        Delete group `id`.\n\n        The `delete_users` option deletes all users that have this group as their primary group.\n      security:\n        - bearerAuth: [ ]\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DeleteGroupParams'\n    get:\n      tags:\n        - group\n      operationId: getGroup\n      description: Get group of `id`.\n      # description: |-\n      #   Query groups with `query-filters` and `query-options`. As a performance optimization, only local groups\n      #   will be queried by default.\n\n      #   Groups from directory services such as NIS, LDAP, or Active Directory will be included in query results\n      #   if the option `{'extra': {'search_dscache': True}}` is specified.\n      security:\n        - bearerAuth: [ ]\n      responses:\n        '200':\n          description: 'Group details'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Group'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n      parameters:\n        - name: limit\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: offset\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: count\n          in: query\n          required: false\n          schema:\n            type: boolean\n        - name: sort\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: integer\n    put:\n      tags:\n        - group\n      operationId: updateGroup\n      description: Update attributes of an existing group.\n      security:\n        - bearerAuth: [ ]\n      responses:\n        '200':\n          description: 'Group details'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GroupResponse'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              # Same payload as create group\n              $ref: '#/components/schemas/CreateGroupParams'\n  /network/configuration:\n    get:\n      tags:\n        - network\n      operationId: getNetworkConfiguration\n      security:\n        - bearerAuth: [ ]\n      parameters: []\n      responses:\n        '200':\n          description: 'General network configuration'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NetworkConfig'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n  /network/general/summary:\n    get:\n      tags:\n        - network\n      operationId: getNetworkSummary\n      security:\n        - bearerAuth: [ ]\n      parameters: [ ]\n      responses:\n        '200':\n          description: 'General network summary'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NetworkSummary'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n  /service/id/{id}:\n    get:\n      tags:\n        - service\n      operationId: getService\n      security:\n        - bearerAuth: [ ]\n      parameters:\n        - name: id\n          in: path\n          description: ID of the cronjob\n          required: true\n          schema:\n            type: integer\n        - name: limit\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: offset\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: count\n          in: query\n          required: false\n          schema:\n            type: boolean\n        - name: sort\n          in: query\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: 'Service details'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Service'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n  /sharing/nfs:\n    get:\n      tags:\n        - sharing\n      operationId: listSharesNFS\n      description: Get a list of NFS shares\n      security:\n        - bearerAuth: [ ]\n      responses:\n        '200':\n          description: 'List of NFS shares'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SharesNFSResponse'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n      parameters:\n        - name: limit\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: offset\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: count\n          in: query\n          required: false\n          schema:\n            type: boolean\n        - name: sort\n          in: query\n          required: false\n          schema:\n            type: string\n    post:\n      tags:\n        - sharing\n      operationId: createShareNFS\n      security:\n        - bearerAuth: [ ]\n      responses:\n        '200':\n          description: 'NFS share details'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ShareNFS'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n      parameters: []\n      description: |-\n        Create a new NFS Share.\n\n        `paths` is a list of valid paths which are configured to be shared on this share.\n\n        `networks` is a list of authorized networks that are allowed to access the share having format\n        \"network/mask\" CIDR notation. If empty, all networks are allowed.\n\n        `hosts` is a list of IP's/hostnames which are allowed to access the share. If empty, all IP's/hostnames are\n        allowed.\n\n        `alldirs` is a boolean value which when set indicates that the client can mount any subdirectories of the\n        selected pool or dataset.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateShareNFSParams'\n  '/sharing/nfs/id/{id}':\n    delete:\n      tags:\n        - sharing\n      operationId: removeShareNFS\n      description: Delete NFS Share of `id`.\n      security:\n        - bearerAuth: [ ]\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: integer\n    get:\n      tags:\n        - sharing\n      operationId: getShareNFS\n      description: Get NFS Share of `id`.\n      security:\n        - bearerAuth: [ ]\n      responses:\n        '200':\n          description: 'NFS Share details'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ShareNFS'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n      parameters:\n        - name: limit\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: offset\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: count\n          in: query\n          required: false\n          schema:\n            type: boolean\n        - name: sort\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: integer\n    put:\n      tags:\n        - sharing\n      operationId: updateShareNFS\n      description: Update NFS Share of `id`.\n      security:\n        - bearerAuth: [ ]\n      responses:\n        '200':\n          description: 'NFS Share details'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ShareNFS'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              # using CreateShareNFSParams since it's the same payload as UpdateShareNFSParams\n              $ref: '#/components/schemas/CreateShareNFSParams'\n  /sharing/smb:\n    get:\n      tags:\n        - sharing\n      operationId: listSharesSMB\n      description: Get a list of SMB shares\n      security:\n        - bearerAuth: [ ]\n      responses:\n        '200':\n          description: 'List of SMB shares'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SharesSMBResponse'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n      parameters:\n        - name: limit\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: offset\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: count\n          in: query\n          required: false\n          schema:\n            type: boolean\n        - name: sort\n          in: query\n          required: false\n          schema:\n            type: string\n    post:\n      tags:\n        - sharing\n      operationId: createShareSMB\n      security:\n        - bearerAuth: [ ]\n      responses:\n        '200':\n          description: 'SMB Share details'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ShareSMB'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n      parameters: []\n      description: |-\n        Create an SMB Share.\n\n        `purpose` applies common configuration presets depending on intended purpose.\n\n        `timemachine` when set, enables Time Machine backups for this share.\n\n        `ro` when enabled, prohibits write access to the share.\n\n        `guestok` when enabled, allows access to this share without a password.\n\n        `hostsallow` is a list of hostnames / IP addresses which have access to this share.\n\n        `hostsdeny` is a list of hostnames / IP addresses which are not allowed access to this share. If a handful\n        of hostnames are to be only allowed access, `hostsdeny` can be passed \"ALL\" which means that it will deny\n        access to ALL hostnames except for the ones which have been listed in `hostsallow`.\n\n        `acl` enables support for storing the SMB Security Descriptor as a Filesystem ACL.\n\n        `streams` enables support for storing alternate datastreams as filesystem extended attributes.\n\n        `fsrvp` enables support for the filesystem remote VSS protocol. This allows clients to create\n        ZFS snapshots through RPC.\n\n        `shadowcopy` enables support for the volume shadow copy service.\n\n        `auxsmbconf` is a string of additional smb4.conf parameters not covered by the system's API.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateShareSMBParams'\n  '/sharing/smb/id/{id}':\n    delete:\n      tags:\n        - sharing\n      operationId: removeShareSMB\n      security:\n        - bearerAuth: [ ]\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: integer\n      description: |-\n        Delete SMB Share of `id`. This will forcibly disconnect SMB clients\n        that are accessing the share.\n    get:\n      tags:\n        - sharing\n      operationId: getShareSMB\n      description: Get SMB Share of `id`.\n      security:\n        - bearerAuth: [ ]\n      responses:\n        '200':\n          description: 'SMB Share details'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ShareSMB'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n      parameters:\n        - name: limit\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: offset\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: count\n          in: query\n          required: false\n          schema:\n            type: boolean\n        - name: sort\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: integer\n    put:\n      tags:\n        - sharing\n      operationId: updateShareSMB\n      description: Update SMB Share of `id`.\n      security:\n        - bearerAuth: [ ]\n      responses:\n        '200':\n          description: 'SMB Share details'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ShareSMB'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              # using CreateShareSMBParams because it is the same payload as Update\n              $ref: '#/components/schemas/CreateShareSMBParams'\n  /user:\n    get:\n      tags:\n        - user\n      operationId: listUsers\n      description: Get a list of (local) users.\n      # description: |-\n      #   Query users with `query-filters` and `query-options`. As a performance optimization, only local users\n      #   will be queried by default.\n\n      #   Users from directory services such as NIS, LDAP, or Active Directory will be included in query results\n      #   if the option `{'extra': {'search_dscache': True}}` is specified.\n      security:\n        - bearerAuth: [ ]\n      responses:\n        '200':\n          description: 'List of local users'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UsersResponse'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n      parameters:\n        - name: limit\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: offset\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: count\n          in: query\n          required: false\n          schema:\n            type: boolean\n        - name: sort\n          in: query\n          required: false\n          schema:\n            type: string\n    post:\n      tags:\n        - user\n      operationId: createUser\n      description: |-\n        Create a new user.\n\n        If `uid` is not provided it is automatically filled with the next one available.\n\n        `group` is required if `group_create` is false.\n\n        `password` is required if `password_disabled` is false.\n\n        Available choices for `shell` can be retrieved with `user.shell_choices`.\n\n        `attributes` is a general-purpose object for storing arbitrary user information.\n\n        `smb` specifies whether the user should be allowed access to SMB shares. User\n        willl also automatically be added to the `builtin_users` group.\n      security:\n        - bearerAuth: [ ]\n      responses:\n        '200':\n          description: 'User ID'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserResponse'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateUserParams'\n  '/user/id/{id}':\n    delete:\n      tags:\n        - user\n      operationId: deleteUser\n      description: |-\n        Delete user `id`.\n\n        The `delete_group` option deletes the user primary group if it is not being used by\n        any other user.\n      security:\n        - bearerAuth: [ ]\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DeleteUserParams'\n    get:\n      tags:\n        - user\n      operationId: getUser\n      description: Get user of `id`.\n      # description: |-\n      #   Query users with `query-filters` and `query-options`. As a performance optimization, only local users\n      #   will be queried by default.\n\n      #   Users from directory services such as NIS, LDAP, or Active Directory will be included in query results\n      #   if the option `{'extra': {'search_dscache': True}}` is specified.\n      security:\n        - bearerAuth: [ ]\n      responses:\n        '200':\n          description: 'User details'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n      parameters:\n        - name: limit\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: offset\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: count\n          in: query\n          required: false\n          schema:\n            type: boolean\n        - name: sort\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: integer\n    put:\n      tags:\n        - user\n      operationId: updateUser\n      description: Update attributes of an existing user.\n      security:\n        - bearerAuth: [ ]\n      responses:\n        '200':\n          description: 'User ID'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserResponse'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateUserParams'\n  /user/shell_choices:\n    post:\n      tags:\n        - user\n      operationId: getUserShellChoices\n      description: |-\n        Return the available shell choices to be used in `user.create` and `user.update`.\n\n        If `user_id` is provided, shell choices are filtered to ensure the user can access the shell choices provided.\n      security:\n        - bearerAuth: [ ]\n      responses:\n        '200':\n          description: 'Valid shell choices'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserShellChoices'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserShellChoicesParams'\n  /vm:\n    get:\n      tags:\n        - vm\n      operationId: listVMS\n      description: Get a list of VMs\n      security:\n        - bearerAuth: [ ]\n      responses:\n        '200':\n          description: 'List of VMs'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VMSResponse'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n      parameters:\n        - name: limit\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: offset\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: count\n          in: query\n          required: false\n          schema:\n            type: boolean\n        - name: sort\n          in: query\n          required: false\n          schema:\n            type: string\n  /vm/id/{id}:\n    get:\n      tags:\n        - vm\n      operationId: getVM\n      security:\n        - bearerAuth: [ ]\n      description: Get VM details\n      parameters:\n        - name: limit\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: offset\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: count\n          in: query\n          required: false\n          schema:\n            type: boolean\n        - name: sort\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: 'VM details'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VM'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\ncomponents:\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: APIKey\n  schemas:\n    CreateCronjobParams:\n      type: object\n      required:\n        - user\n        - command\n      properties:\n        user:\n          type: string\n        command:\n          type: string\n        description:\n          type: string\n        enabled:\n          type: boolean\n        stdout:\n          type: boolean\n        stderr:\n          type: boolean\n        schedule:\n          $ref: '#/components/schemas/CronJobSchedule'\n    CreateDatasetParams:\n      type: object\n      required:\n        - name\n      properties:\n        atime:\n          type: string\n        aclmode:\n          type: string\n        name:\n          type: string\n        comments:\n          type: string\n        compression:\n          type: string\n        casesensitivity:\n          type: string\n        copies:\n          type: integer\n        deduplication:\n          type: string\n        encryption:\n          type: boolean\n        encryption_options:\n          type: object\n          properties:\n            algorithm:\n              type: string\n            generate_key:\n              type: boolean\n            passphrase:\n              type: string\n            key:\n              type: string\n        exec:\n          type: string\n        force_size:\n          type: boolean\n        inherit_encryption:\n          type: boolean\n        quota:\n          type: integer\n          format: int64\n        quota_critical:\n          type: integer\n          format: int64\n        quota_warning:\n          type: integer\n          format: int64\n        volsize:\n          type: integer\n          format: int64\n        volblocksize:\n          type: string\n        readonly:\n          type: string\n        recordsize:\n          type: string\n        refquota:\n          type: integer\n          format: int64\n        refquota_critical:\n          type: integer\n          format: int64\n        refquota_warning:\n          type: integer\n          format: int64\n        refreservation:\n          type: integer\n          format: int64\n        reservation:\n          type: integer\n          format: int64\n        share_type:\n          type: string\n        snapdir:\n          type: string\n        sync:\n          type: string\n        type:\n          type: string\n    UpdateDatasetParams:\n      type: object\n      properties:\n        atime:\n          type: string\n        aclmode:\n          type: string\n        comments:\n          type: string\n        compression:\n          type: string\n        copies:\n          type: integer\n        deduplication:\n          type: string\n        exec:\n          type: string\n        force_size:\n          type: boolean\n        quota:\n          type: integer\n          format: int64\n        readonly:\n          type: string\n        recordsize:\n          type: string\n        refquota:\n          type: integer\n          format: int64\n        refreservation:\n          type: integer\n          format: int64\n        volsize:\n          type: integer\n          format: int64\n        snapdir:\n          type: string\n        sync:\n          type: string\n    CreateGroupParams:\n      type: object\n      required:\n        - name\n      properties:\n        gid:\n          type: integer\n        name:\n          type: string\n        smb:\n          type: boolean\n        sudo:\n          type: boolean\n        sudo_nopasswd:\n          type: boolean\n        sudo_commands:\n          type: array\n          items:\n            type: string\n        allow_duplicate_gid:\n          type: boolean\n        users:\n          type: array\n          items:\n            type: integer\n    DeleteGroupParams:\n      type: object\n      properties:\n        delete_users:\n          type: boolean\n    CreateShareNFSParams:\n      type: object\n      required:\n        - paths\n      properties:\n        paths:\n          type: array\n          items:\n            type: string\n        comment:\n          type: string\n        networks:\n          type: array\n          items:\n            type: string\n        hosts:\n          type: array\n          items:\n            type: string\n        alldirs:\n          type: boolean\n        ro:\n          type: boolean\n        quiet:\n          type: boolean\n        maproot_user:\n          type: string\n        maproot_group:\n          type: string\n        mapall_user:\n          type: string\n        mapall_group:\n          type: string\n        security:\n          type: array\n          items:\n            type: string\n        enabled:\n          type: boolean\n    # UpdateShareNFSParams:\n    #   type: object\n    #   properties:\n    #     paths:\n    #       type: array\n    #       items:\n    #         type: string\n    #     comment:\n    #       type: string\n    #     networks:\n    #       type: array\n    #       items:\n    #         type: string\n    #     hosts:\n    #       type: array\n    #       items:\n    #         type: string\n    #     alldirs:\n    #       type: boolean\n    #     ro:\n    #       type: boolean\n    #     quiet:\n    #       type: boolean\n    #     maproot_user:\n    #       type: string\n    #     maproot_group:\n    #       type: string\n    #     mapall_user:\n    #       type: string\n    #     mapall_group:\n    #       type: string\n    #     security:\n    #       type: array\n    #       items:\n    #         type: string\n    #     enabled:\n    #       type: boolean\n    CreateShareSMBParams:\n      type: object\n      required:\n        - path\n      properties:\n        purpose:\n          type: string\n        path:\n          type: string\n        path_suffix:\n          type: string\n        home:\n          type: boolean\n        name:\n          type: string\n        comment:\n          type: string\n        ro:\n          type: boolean\n        browsable:\n          type: boolean\n        timemachine:\n          type: boolean\n        recyclebin:\n          type: boolean\n        guestok:\n          type: boolean\n        abe:\n          type: boolean\n        hostsallow:\n          type: array\n          items:\n            type: string\n        hostsdeny:\n          type: array\n          items:\n            type: string\n        aapl_name_mangling:\n          type: boolean\n        acl:\n          type: boolean\n        durablehandle:\n          type: boolean\n        shadowcopy:\n          type: boolean\n        streams:\n          type: boolean\n        fsrvp:\n          type: boolean\n        auxsmbconf:\n          type: string\n        enabled:\n          type: boolean\n    # UpdateShareSMBParams:\n    #   type: object\n    #   properties:\n    #     purpose:\n    #       type: string\n    #     path:\n    #       type: string\n    #     path_suffix:\n    #       type: string\n    #     home:\n    #       type: boolean\n    #     name:\n    #       type: string\n    #     comment:\n    #       type: string\n    #     ro:\n    #       type: boolean\n    #     browsable:\n    #       type: boolean\n    #     timemachine:\n    #       type: boolean\n    #     recyclebin:\n    #       type: boolean\n    #     guestok:\n    #       type: boolean\n    #     abe:\n    #       type: boolean\n    #     hostsallow:\n    #       type: array\n    #       items:\n    #         type: string\n    #     hostsdeny:\n    #       type: array\n    #       items:\n    #         type: string\n    #     aapl_name_mangling:\n    #       type: boolean\n    #     acl:\n    #       type: boolean\n    #     durablehandle:\n    #       type: boolean\n    #     shadowcopy:\n    #       type: boolean\n    #     streams:\n    #       type: boolean\n    #     fsrvp:\n    #       type: boolean\n    #     auxsmbconf:\n    #       type: string\n    #     enabled:\n    #       type: boolean\n    CreateUserParams:\n      type: object\n      required:\n        - username\n        - full_name\n      properties:\n        uid:\n          type: integer\n        username:\n          type: string\n        group:\n          type: integer\n        group_create:\n          type: boolean\n        home:\n          type: string\n        home_mode:\n          type: string\n        shell:\n          type: string\n        full_name:\n          type: string\n        email:\n          type: string\n          nullable: true\n        password:\n          type: string\n        password_disabled:\n          type: boolean\n        locked:\n          type: boolean\n        microsoft_account:\n          type: boolean\n        smb:\n          type: boolean\n        sudo:\n          type: boolean\n        sudo_nopasswd:\n          type: boolean\n        sudo_commands:\n          type: array\n          items:\n            type: string\n        sshpubkey:\n          type: string\n          nullable: true\n        groups:\n          type: array\n          items:\n            type: integer\n        attributes:\n          type: object\n          properties: {}\n          additionalProperties: true\n    DeleteUserParams:\n      type: object\n      properties:\n        delete_group:\n          type: boolean\n    UpdateUserParams:\n      type: object\n      properties:\n        uid:\n          type: integer\n        username:\n          type: string\n        group:\n          type: integer\n        home:\n          type: string\n        home_mode:\n          type: string\n        shell:\n          type: string\n        full_name:\n          type: string\n        email:\n          type: string\n          nullable: true\n        password:\n          type: string\n        password_disabled:\n          type: boolean\n        locked:\n          type: boolean\n        microsoft_account:\n          type: boolean\n        smb:\n          type: boolean\n        sudo:\n          type: boolean\n        sudo_nopasswd:\n          type: boolean\n        sudo_commands:\n          type: array\n          items:\n            type: string\n        sshpubkey:\n          type: string\n          nullable: true\n        groups:\n          type: array\n          items:\n            type: integer\n        attributes:\n          type: object\n          properties: {}\n          additionalProperties: true\n    UserShellChoicesParams:\n      type: integer\n      title: user_id\n      default: null\n      nullable: true\n    CompositeValue:\n      type: object\n      required:\n        - rawvalue\n      properties:\n        value:\n          type: string\n        rawvalue:\n          type: string\n#        Does not seem to work yet:\n#        parsed:\n#          anyOf:\n#            - type: string\n#            - type: number\n        source:\n          type: string\n    CronJob:\n      type: object\n      properties:\n        id:\n          type: integer\n        user:\n          type: string\n        command:\n          type: string\n        description:\n          type: string\n        enabled:\n          type: boolean\n        stdout:\n          type: boolean\n        stderr:\n          type: boolean\n        schedule:\n          $ref: '#/components/schemas/CronJobSchedule'\n    CronJobSchedule:\n      type: object\n      properties:\n        minute:\n          type: string\n        hour:\n          type: string\n        dom:\n          type: string\n        month:\n          type: string\n        dow:\n          type: string\n    Dataset:\n      type: object\n      required:\n        - id\n        - name\n        - pool\n        - type\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        pool:\n          type: string\n        type:\n          type: string\n        mountpoint:\n          type: string\n        encrypted:\n          type: boolean\n        encryption_root:\n          type: string\n        key_loaded:\n          type: boolean\n        locked:\n          type: boolean\n        encryption_algorithm:\n          $ref: '#/components/schemas/CompositeValue'\n        aclmode:\n          $ref: '#/components/schemas/CompositeValue'\n        acltype:\n          $ref: '#/components/schemas/CompositeValue'\n        atime:\n          $ref: '#/components/schemas/CompositeValue'\n        casesensitivity:\n          $ref: '#/components/schemas/CompositeValue'\n        comments:\n          $ref: '#/components/schemas/CompositeValue'\n        compression:\n          $ref: '#/components/schemas/CompositeValue'\n        deduplication:\n          $ref: '#/components/schemas/CompositeValue'\n        exec:\n          $ref: '#/components/schemas/CompositeValue'\n        key_format:\n          $ref: '#/components/schemas/CompositeValue'\n        managedby:\n          $ref: '#/components/schemas/CompositeValue'\n        copies:\n          $ref: '#/components/schemas/CompositeValue'\n        quota:\n          $ref: '#/components/schemas/CompositeValue'\n        quota_critical:\n          $ref: '#/components/schemas/CompositeValue'\n        quota_warning:\n          $ref: '#/components/schemas/CompositeValue'\n        reservation:\n          $ref: '#/components/schemas/CompositeValue'\n        refreservation:\n          $ref: '#/components/schemas/CompositeValue'\n        refquota:\n          $ref: '#/components/schemas/CompositeValue'\n        refquota_critical:\n          $ref: '#/components/schemas/CompositeValue'\n        refquota_warning:\n          $ref: '#/components/schemas/CompositeValue'\n        readonly:\n          $ref: '#/components/schemas/CompositeValue'\n        recordsize:\n          $ref: '#/components/schemas/CompositeValue'\n        sync:\n          $ref: '#/components/schemas/CompositeValue'\n        snapdir:\n          $ref: '#/components/schemas/CompositeValue'\n        pbkdf2iters:\n          $ref: '#/components/schemas/CompositeValue'\n        origin:\n          $ref: '#/components/schemas/CompositeValue'\n        xattr:\n          $ref: '#/components/schemas/CompositeValue'\n        volsize:\n          $ref: '#/components/schemas/CompositeValue'\n        volblocksize:\n          $ref: '#/components/schemas/CompositeValue'\n    GroupsResponse:\n      type: array\n      items:\n        $ref: '#/components/schemas/Group'\n    GroupResponse:\n      # POST/PUT only returns group ID\n      type: integer\n      title: group_id\n    Group:\n      type: object\n      required:\n        - id\n        - group\n      properties:\n        id:\n          type: integer\n        gid:\n          type: integer\n        group:\n          type: string\n        builtin:\n          type: boolean\n        sudo:\n          type: boolean\n        sudo_nopasswd:\n          type: boolean\n        sudo_commands:\n          type: array\n          items:\n            type: string\n        smb:\n          type: boolean\n        users:\n          type: array\n          items:\n            type: integer\n        local:\n          type: boolean\n        id_type_both:\n          type: boolean\n    NetworkConfig:\n      type: object\n      properties:\n        id:\n          type: integer\n        hostname:\n          type: string\n        domain:\n          type: string\n        ipv4gateway:\n          type: string\n        ipv6gateway:\n          type: string\n        nameserver1:\n          type: string\n        nameserver2:\n          type: string\n        nameserver3:\n          type: string\n        httpproxy:\n          type: string\n        netwait_enabled:\n          type: boolean\n        netwait_ip:\n          type: array\n          items:\n            type: string\n        hosts:\n          type: string\n        domains:\n          type: array\n          items:\n            type: string\n        service_announcement:\n          type: object\n          properties:\n            netbios:\n              type: boolean\n            mdns:\n              type: boolean\n            wsd:\n              type: boolean\n        hostname_local:\n          type: string\n    NetworkSummary:\n      type: object\n      properties:\n        ips:\n          type: object\n          additionalProperties:\n            type: object\n            properties:\n              IPV4:\n                type: array\n                items:\n                  type: string\n              IPV6:\n                type: array\n                items:\n                  type: string\n        default_routes:\n          type: array\n          items:\n            type: string\n        nameservers:\n          type: array\n          items:\n            type: string\n    PoolsResponse:\n      type: array\n      items:\n        $ref: '#/components/schemas/Pool'\n    Pool:\n      type: object\n      required:\n        - id\n        - name\n        - path\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n        guid:\n          type: string\n        path:\n          type: string\n        status:\n          type: string\n        healthy:\n          type: boolean\n        is_decrypted:\n          type: boolean\n        encryptkey_path:\n          type: string\n    Service:\n      type: object\n      required:\n        - id\n        - service\n      properties:\n        id:\n          type: integer\n        service:\n          type: string\n        enable:\n          type: boolean\n        state:\n          type: string\n        pids:\n          type: array\n          items:\n            type: integer\n    ShareNFS:\n      type: object\n      required:\n        - id\n        - paths\n      properties:\n        id:\n          type: integer\n        comment:\n          type: string\n        hosts:\n          type: array\n          items:\n            type: string\n        alldirs:\n          type: boolean\n        ro:\n          type: boolean\n        quiet:\n          type: boolean\n        maproot_user:\n          type: string\n        maproot_group:\n          type: string\n        mapall_user:\n          type: string\n        mapall_group:\n          type: string\n        security:\n          type: array\n          items:\n            type: string\n        enabled:\n          type: boolean\n        locked:\n          type: boolean\n        paths:\n          type: array\n          items:\n            type: string\n        networks:\n          type: array\n          items:\n            type: string\n    ShareSMB:\n      type: object\n      required:\n        - id\n        - path\n      properties:\n        id:\n          type: integer\n        path:\n          type: string\n        path_suffix:\n          type: string\n        purpose:\n          type: string\n        home:\n          type: boolean\n        timemachine:\n          type: boolean\n        name:\n          type: string\n        comment:\n          type: string\n        ro:\n          type: boolean\n        browsable:\n          type: boolean\n        recyclebin:\n          type: boolean\n        shadowcopy:\n          type: boolean\n        guestok:\n          type: boolean\n        abe:\n          type: boolean\n        hostsallow:\n          type: array\n          items:\n            type: string\n        hostsdeny:\n          type: array\n          items:\n            type: string\n        aapl_name_mangling:\n          type: boolean\n        acl:\n          type: boolean\n        durablehandle:\n          type: boolean\n        streams:\n          type: boolean\n        fsrvp:\n          type: boolean\n        auxsmbconf:\n          type: string\n        enabled:\n          type: boolean\n        locked:\n          type: boolean\n        vuid:\n          type: string\n    SharesNFSResponse:\n      type: array\n      items:\n        $ref: '#/components/schemas/ShareNFS'\n    SharesSMBResponse:\n      type: array\n      items:\n        $ref: '#/components/schemas/ShareSMB'\n    User:\n      type: object\n      required:\n        - id\n        - username\n        - full_name\n      properties:\n        id:\n          type: integer\n        uid:\n          type: integer\n        username:\n          type: string\n        unixhash:\n          type: string\n        smbhash:\n          type: string\n        home:\n          type: string\n        shell:\n          type: string\n        full_name:\n          type: string\n        builtin:\n          type: bool\n        smb:\n          type: bool\n        password_disabled:\n          type: bool\n        locked:\n          type: bool\n        sudo:\n          type: bool\n        sudo_nopasswd:\n          type: bool\n        sudo_commands:\n          type: array\n          items:\n            type: string\n        microsoft_account:\n          type: bool\n        attributes:\n          type: object\n          properties: {}\n          additionalProperties: true\n        email:\n          type: string\n          nullable: true\n        group:\n          type: object\n          properties:\n            id:\n              type: integer\n            bsdgrp_gid:\n              type: integer\n            bsdgrp_group:\n              type: string\n            bsdgrp_builtin:\n              type: bool\n            bsdgrp_sudo:\n              type: bool\n            bsdgrp_sudo_nopasswd:\n              type: bool\n            bsdgrp_sudo_commands:\n              type: array\n              items:\n                type: string\n            bsdgrp_smb:\n              type: bool\n        groups:\n          type: array\n          items:\n            type: integer\n        sshpubkey:\n          type: string\n          nullable: true\n        local:\n          type: bool\n        id_type_both:\n          type: bool\n    UsersResponse:\n      type: array\n      items:\n        $ref: '#/components/schemas/User'\n    UserResponse:\n      # POST/PUT only returns user ID\n      type: integer\n      title: user_id\n    UserShellChoices:\n      type: object\n      additionalProperties:\n        type: string\n    VM:\n      type: object\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n        description:\n          type: string\n        vcpus:\n          type: integer\n        memory:\n          type: integer\n        autostart:\n          type: boolean\n        time:\n          type: string\n        bootloader:\n          type: string\n        cores:\n          type: integer\n        threads:\n          type: integer\n        shutdown_timeout:\n          type: integer\n        devices:\n          type: array\n          items:\n            type: object\n            required:\n              - id\n              - dtype\n            properties:\n              id:\n                type: integer\n              dtype:\n                type: string\n              order:\n                type: integer\n              vm:\n                type: integer\n              attributes:\n                type: object\n        status:\n          type: object\n          properties:\n            state:\n              type: string\n            pid:\n              type: integer\n            domain_state:\n              type: string\n    VMSResponse:\n      type: array\n      items:\n        $ref: '#/components/schemas/VM'\n  responses:\n    NotFound:\n      description: Endpoint not found\n    Unauthorized:\n      description: No authorization for this endpoint\n    Success:\n      description: Operation succeeded\n",
			"canonicalURL": "/github.com/dariusbakunas/truenas-go-sdk@ce220a1b0eb25203d05ae50db631bdb99bd1b5a1/-/blob/cfg/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/dariusbakunas/truenas-go-sdk/blob/ce220a1b0eb25203d05ae50db631bdb99bd1b5a1/cfg/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"User\": parse schema: property \"builtin\": parse schema: unexpected schema type: \"bool\""
}