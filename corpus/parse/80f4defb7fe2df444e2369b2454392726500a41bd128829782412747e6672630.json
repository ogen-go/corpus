{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Regaez/grav-plugin-api"
		},
		"file": {
			"name": "specification.yaml",
			"size": 0,
			"path": "docs/specification.yaml",
			"byteSize": 40026,
			"content": "openapi: 3.0.2\ninfo:\n  description: The GravCMS Plugin API exposes a REST API on top of your existing GravCMS site that allows you to manipulate the site's content and configuration programmatically.\n  version: 0.0.1\n  title: GravCMS Plugin API\n  contact:\n    name: Plugin Support\n    url: https://github.com/Regaez/grav-plugin-api/issues\n  license:\n    name: MIT\n    url: https://github.com/Regaez/grav-plugin-api/blob/master/LICENSE\ntags:\n  - name: pages\n  - name: users\n  - name: plugins\n  - name: configs\npaths:\n  /pages:\n    get:\n      tags:\n        - pages\n      summary: Get all the pages on the site\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/PageResponse'\n                  meta:\n                    $ref: '#/components/schemas/ResponseMetadata'\n        401:\n          description: Invalid authentication\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              examples:\n                InvalidAuth:\n                  $ref: '#/components/examples/InvalidAuthResponse'\n    post:\n      tags:\n        - pages\n      summary: Add a new page to the site\n      security:\n        - basic: ['api.super', 'admin.super']\n      description: \u003e-\n        In order to create a new page, one must **not** already exist at the specified route.\n\n\n        There are a minimum of two required fields you must provide for the `POST` request to be successful. These are: `route` and `header`. If neither of these are specified, then the page will not be created. Additionally, the `header` field must be **valid JSON**.\n\n\n        There are two further optional fields you may specify: `content` and `template`. If a `template` is not defined, it will fallback to `default`.\n\n        \u003e NOTE: You should **not** include an extension in the template value.\n\n\n        The `content` should be a plain string, formatted using markdown syntax. If no `content` is given, then the page will simply be empty.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PageRequestBody'\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PageResponse'\n        400:\n          description: Bad request. You must provide a `route` and a valid `header` field.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              examples:\n                BadRequest:\n                  $ref: '#/components/examples/BadRequestResponse'\n        401:\n          description: Invalid authentication\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              examples:\n                InvalidAuth:\n                  $ref: '#/components/examples/InvalidAuthResponse'\n        403:\n          description: Forbidden. This page already exists.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              examples:\n                Forbidden:\n                  $ref: '#/components/examples/ForbiddenResponse'\n  /pages/searches:\n    post:\n      tags:\n        - pages\n      summary: Find pages on the site\n      description: \u003e-\n        There are two optional fields you may specify: `taxonomyFilter` and `operation`. If a `taxonomyFilter` is not defined, it will fallback to an empty filter, returning no pages. If an `operation` is not defined, it will default to `or`.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FindPagesRequestBody'\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/PageResponse'\n                  meta:\n                    $ref: '#/components/schemas/ResponseMetadata'\n        401:\n          description: Invalid authentication\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              examples:\n                InvalidAuth:\n                  $ref: '#/components/examples/InvalidAuthResponse'\n  /pages/{id}:\n    get:\n      tags:\n        - pages\n      summary: Get a specific page\n      parameters:\n        - name: id\n          in: path\n          description: The id/route of the page to return\n          required: true\n          schema:\n            type: string\n            example: \"blog/my-first-post\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PageResponse'\n        401:\n          description: Invalid authentication\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              examples:\n                InvalidAuth:\n                  $ref: '#/components/examples/InvalidAuthResponse'\n        404:\n          description: Page not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              examples:\n                NotFound:\n                  $ref: '#/components/examples/NotFoundResponse'\n    patch:\n      tags:\n        - pages\n      summary: Update a specific page\n      security:\n        - basic: ['api.super', 'admin.super']\n      description: \u003e-\n        When passing new content via a `PATCH` request, the existing page content will be _entirely overridden_.\n\n\n        Existing `header` information will not be changed, unless the corresponding key is explicitly set. In order to remove an existing field, you must set the field's value to null, such as \"custom_field\" in the example above.\n\n\n        Setting `template` to a new value will rename the file to the newly specified `template`. If undefined, the template will not be changed.\n      parameters:\n        - name: id\n          in: path\n          description: The id/route of the page to update\n          required: true\n          schema:\n            type: string\n            example: \"blog/my-first-post\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PageRequestBody'\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PageResponse'\n        400:\n          description: Bad request. You must provide a `route` field.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              examples:\n                BadRequest:\n                  $ref: '#/components/examples/BadRequestResponse'\n        401:\n          description: Invalid authentication\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              examples:\n                InvalidAuth:\n                  $ref: '#/components/examples/InvalidAuthResponse'\n        404:\n          description: Resource not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              examples:\n                NotFound:\n                  $ref: '#/components/examples/NotFoundResponse'\n    delete:\n      tags:\n        - pages\n      summary: Delete a specific page\n      security:\n        - basic: ['api.super', 'admin.super']\n      description: \u003e-\n        If the deletion is successful, the API will respond with a `204` no-content status code.\n\n        \u003e **WARNING:** THIS WILL PERMANENTLY DELETE A PAGE. IT CANNOT BE UNDONE. It is recommended to instead `PATCH` a page and set `\"published\": false` in the page's `header` if you do not want the page active on your site.\n      parameters:\n        - name: id\n          in: path\n          description: The id/route of the page to delete\n          required: true\n          schema:\n            type: string\n            example: \"blog/my-first-post\"\n      responses:\n        204:\n          description: Successful operation\n        401:\n          description: Invalid authentication\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              examples:\n                InvalidAuth:\n                  $ref: '#/components/examples/InvalidAuthResponse'\n        404:\n          description: Page not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              examples:\n                NotFound:\n                  $ref: '#/components/examples/NotFoundResponse'\n  /users:\n    get:\n      tags:\n        - users\n      summary: Get all the users on the site\n      security:\n        - basic: ['api.super', 'admin.super']\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/UserResponse'\n                  meta:\n                    $ref: '#/components/schemas/ResponseMetadata'\n        401:\n          description: Invalid authentication\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              examples:\n                InvalidAuth:\n                  $ref: '#/components/examples/InvalidAuthResponse'\n    post:\n      tags:\n        - users\n      summary: Add a new user\n      security:\n        - basic: ['api.super', 'admin.super']\n      description: \u003e-\n        There are a minimum of three required fields you must provide for the POST request to be successful. These are: `username`, `password` and `email`. If any of these are not specified, then the user will not be created. They are all expected as plain strings. Additionally, the `email` field must be a **valid email format**.\n\n\n        There are further optional fields you may specify: `fullname`, `title`, `state`, and `access`.\n\n\n        The `fullname` should be a plain string. If no `fullname` is provided, then the user will simply be a fullname which is a [titleized](https://learn.getgrav.org/themes/twig-filters-functions#titleize) version of their username.\n\n\n        The `title` field should be a plain string. If no `title` is provided, then the user will simply be given the title: \"User\".\n\n\n        The `state` field should be a string, either `'enabled'` or `'disabled'`. If this field is not provided, then the user will be `enabled` by default.\n\n\n        The `access` field should be a JSON structure, matching a set of access roles on the site.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserRequestBody'\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserResponse'\n        400:\n          description: Bad request. You must provide a `username`, `password` and a valid `email` field.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              examples:\n                BadRequest:\n                  $ref: '#/components/examples/BadRequestResponse'\n        401:\n          description: Invalid authentication\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              examples:\n                InvalidAuth:\n                  $ref: '#/components/examples/InvalidAuthResponse'\n        403:\n          description: Forbidden. This user already exists.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              examples:\n                Forbidden:\n                  $ref: '#/components/examples/ForbiddenResponse'\n  /users/{id}:\n    get:\n      tags:\n        - users\n      summary: Get a specific user\n      security:\n        - basic: ['api.super', 'admin.super']\n      parameters:\n        - name: id\n          in: path\n          description: The username of the user to return\n          required: true\n          schema:\n            type: string\n            example: \"joe\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserResponse'\n        401:\n          description: Invalid authentication\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              examples:\n                InvalidAuth:\n                  $ref: '#/components/examples/InvalidAuthResponse'\n        404:\n          description: Page not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              examples:\n                NotFound:\n                  $ref: '#/components/examples/NotFoundResponse'\n    patch:\n      tags:\n        - users\n      summary: Update a specific user\n      security:\n        - basic: ['api.super', 'admin.super']\n      description: \u003e-\n        In order to change user information, you **must** provide a valid `password` for that user.\n\n\n        Similarly to a `POST` request, you can also submit the following fields: `email`, `title`, `fullname`, and `new_password`.\n\n\n        Additionally, if you authenticate as an `admin`, you may also change the `access` rights for the user.\n\n\n        Existing `access` information will not changed, unless the corresponding key is explicitly set. In order to remove an existing role, you must set the field's value to `null`.\n      parameters:\n        - name: id\n          in: path\n          description: The username of the user to update\n          required: true\n          schema:\n            type: string\n            example: \"joe\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserUpdateRequestBody'\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserResponse'\n        400:\n          description: Bad request. You must provide a `password` field.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              examples:\n                BadRequest:\n                  $ref: '#/components/examples/BadRequestResponse'\n        401:\n          description: Invalid authentication\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              examples:\n                InvalidAuth:\n                  $ref: '#/components/examples/InvalidAuthResponse'\n        404:\n          description: Resource not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              examples:\n                NotFound:\n                  $ref: '#/components/examples/NotFoundResponse'\n    delete:\n      tags:\n        - users\n      summary: Delete a specific user\n      security:\n        - basic: ['api.super', 'admin.super']\n      description: \u003e-\n        If the deletion is successful, the API will respond with a `204` no-content status code.\n\n        \u003e **WARNING:** THIS WILL PERMANENTLY DELETE A USER. IT CANNOT BE UNDONE. It is recommended to instead `PATCH` a user and set `\"state\": \"disabled\"` for the user, if you do not want the user active any longer.\n      parameters:\n        - name: id\n          in: path\n          description: The username of the user to delete\n          required: true\n          schema:\n            type: string\n            example: \"joe\"\n      responses:\n        204:\n          description: Successful operation\n        401:\n          description: Invalid authentication\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              examples:\n                InvalidAuth:\n                  $ref: '#/components/examples/InvalidAuthResponse'\n        404:\n          description: Page not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              examples:\n                NotFound:\n                  $ref: '#/components/examples/NotFoundResponse'\n  /plugins:\n    get:\n      tags:\n        - plugins\n      summary: Get all the plugins installed on the site\n      security:\n        - basic: ['api.super', 'admin.super']\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/PluginResponse'\n                  meta:\n                    $ref: '#/components/schemas/ResponseMetadata'\n        401:\n          description: Invalid authentication\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              examples:\n                InvalidAuth:\n                  $ref: '#/components/examples/InvalidAuthResponse'\n  /plugins/{id}:\n    get:\n      tags:\n        - plugins\n      summary: Get a specific plugin\n      security:\n        - basic: ['api.super', 'admin.super']\n      parameters:\n        - name: id\n          in: path\n          description: The id of the plugin to return\n          required: true\n          schema:\n            type: string\n            example: \"api\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PluginResponse'\n        401:\n          description: Invalid authentication\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              examples:\n                InvalidAuth:\n                  $ref: '#/components/examples/InvalidAuthResponse'\n        404:\n          description: Plugin not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              examples:\n                NotFound:\n                  $ref: '#/components/examples/NotFoundResponse'\n    patch:\n      tags:\n        - plugins\n      summary: Update a specific plugin\n      description: The request's body JSON should match the config structure of the plugin which you wish to update. If you wish to remove existing properties from the config, you can set their values to `null` and they will be unset.\n      security:\n        - basic: ['api.super', 'admin.super']\n      parameters:\n        - name: id\n          in: path\n          description: The id of the plugin to update\n          required: true\n          schema:\n            type: string\n            example: \"api\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                enabled:\n                  type: boolean\n                plugin_field:\n                  type: string\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PluginResponse'\n        400:\n          description: Invalid authentication\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              examples:\n                InvalidAuth:\n                  $ref: '#/components/examples/BadRequestResponse'\n        401:\n          description: Invalid authentication\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              examples:\n                InvalidAuth:\n                  $ref: '#/components/examples/InvalidAuthResponse'\n        404:\n          description: Plugin not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              examples:\n                NotFound:\n                  $ref: '#/components/examples/NotFoundResponse'\n  /configs:\n    get:\n      tags:\n        - configs\n      summary: Get all the site configuration files\n      security:\n        - basic: ['api.super', 'admin.super']\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/ConfigResponse'\n                  meta:\n                    $ref: '#/components/schemas/ResponseMetadata'\n        401:\n          description: Invalid authentication\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              examples:\n                InvalidAuth:\n                  $ref: '#/components/examples/InvalidAuthResponse'\n  /configs/{id}:\n    get:\n      tags:\n        - configs\n      summary: Get a specific config file\n      security:\n        - basic: ['api.super', 'admin.super']\n      parameters:\n        - name: id\n          in: path\n          description: The id of the config file to return\n          required: true\n          schema:\n            type: string\n            example: \"site\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConfigResponse'\n        401:\n          description: Invalid authentication\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              examples:\n                InvalidAuth:\n                  $ref: '#/components/examples/InvalidAuthResponse'\n        404:\n          description: Configuration file not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              examples:\n                NotFound:\n                  $ref: '#/components/examples/NotFoundResponse'\ncomponents:\n  securitySchemes:\n    basic:\n      type: http\n      scheme: Basic\n  schemas:\n    ConfigHypermedia:\n      type: object\n      properties:\n        related:\n          type: object\n          properties:\n            self:\n              type: string\n              description: A link to this resource through the API\n              example: \"https://www.mysite.com/api/config/site\"\n    ConfigResponse:\n      type: object\n      properties:\n        type:\n          type: string\n          description: The resource type\n          example: \"config\"\n        id:\n          type: string\n          description: The ID of the config\n          example: \"api\"\n        attributes:\n          $ref: '#/components/schemas/ConfigResource'\n        links:\n          $ref: '#/components/schemas/ConfigHypermedia'\n    ConfigResource:\n      type: object\n      description: The configuration file's properties. The returned fields vary depending on the configuration file.\n      properties:\n        some_field:\n          type: string\n          description: Each config file will have different fields\n          example: \"An example config field\"\n    ErrorResponse:\n      type: object\n      properties:\n        message:\n          type: string\n          description: A short message describing the error\n          example: \"Resource not found\"\n        documentation:\n          type: string\n          description: A URL to the documentation for reference\n          example: \"https://github.com/regaez/grav-plugin-api/tree/master/docs\"\n    PageResponse:\n      type: object\n      properties:\n        type:\n          type: string\n          description: The resource type\n          example: \"page\"\n        id:\n          type: string\n          description: The ID of the page (this is the page's route)\n          example: \"blog/my-first-post\"\n        attributes:\n          $ref: '#/components/schemas/PageResource'\n        links:\n          $ref: '#/components/schemas/PageHypermedia'\n    PageResource:\n      type: object\n      properties:\n        title:\n          type: string\n          description: The page's title\n          example: \"My first post\"\n        frontmatter:\n          type: string\n          description: The page's frontmatter, formatted as yaml\n          example: \"title: My first post\\ncustom_field: You can add custom frontmatter fields, too!\"\n        header:\n          type: object\n          description: An object representation of the frontmatter\n          example:\n            title: My first post\n            custom_field: You can add custom frontmatter fields, too!\n        rawMarkdown:\n          type: string\n          description: The page content, formatted as raw markdown text\n          example: \"# My first post\\n\\nThis is some **markdown**.\"\n        content:\n          type: string\n          description: The page content, formatted as HTML markup\n          example: \"\u003ch1\u003eMy first post\u003c/h1\u003e\u003cp\u003eThis is some \u003cstrong\u003emarkdown\u003c/strong\u003e.\u003c/p\u003e\"\n        children:\n          type: array\n          items:\n            type: string\n            description: The route of the child page\n            example: \"/blog/my-first-post/child-page\"\n          description: An array of routes for the children of the page\n        route:\n          type: string\n          description: The route for this page\n          example: \"/blog/my-first-post\"\n        slug:\n          type: string\n          description: The slug for the page\n          example: \"my-first-post\"\n        permalink:\n          type: string\n          description: The URL for the page, including the site domain\n          example: \"https://www.mysite.com/blog/my-first-post\"\n        template:\n          type: string\n          description: The theme template used for the page\n          example: \"post\"\n        published:\n          type: boolean\n          description: True or False depending on whether the page has been published\n        date:\n          type: number\n          description: The date/time of when the post was created, as UNIX timestamp\n          example: 1564936730\n        modified:\n          type: number\n          description: The date/time of when the post was last modified, as UNIX timestamp\n          example: 1564936730\n    PageRequestBody:\n      type: object\n      properties:\n        route:\n          type: string\n          description: The page route to create\n          example: \"/the-new-page-slug\"\n        header:\n          type: object\n          description: The page frontmatter\n          properties:\n            title:\n              type: string\n              example: \"The new page's title\"\n            custom_field:\n              type: string\n              example: \"You can add custom frontmatter fields, too!\"\n          required:\n            - title\n        template:\n          type: string\n          description: The theme template to be used for the page\n          example: \"post\"\n        content:\n          type: string\n          description: The new page's content, formatted as markdown\n          example: \"This is a _new_ page's content in **markdown**!\"\n        order:\n          description: Set page order by specifying a number. To remove page order, set to false.\n          oneOf:\n            - type: integer\n              format: int32\n            - type: boolean\n      required:\n        - route\n    FindPagesRequestBody:\n      type: object\n      properties:\n        taxonomyFilter:\n          type: object\n          nullable: true\n          description: The taxonomy filters\n          properties:\n            custom_taxonomy_key:\n              type: array\n              items:\n                type: string\n                description: The taxonomy value\n                example: \"custom_taxonomy_value\"\n        operation:\n          type: string\n          nullable: true\n          enum:\n            - or\n            - and\n          description: The operation to apply with the filters\n          example: \"or\"\n    PageHypermedia:\n      type: object\n      properties:\n        self:\n          type: string\n          description: A link to this resource on the site\n          example: \"https://www.mysite.com/blog/my-first-post\"\n        children:\n          type: array\n          description: An array of links to this resource's children on the site\n          items:\n            type: string\n          example:\n            - \"https://www.mysite.com/blog/my-first-post/child-1\"\n            - \"https://www.mysite.com/blog/my-first-post/child-2\"\n        parent:\n          type: string\n          description: A link to this resource's parent page on the site\n          example: \"https://www.mysite.com/blog\"\n        related:\n          type: object\n          properties:\n            self:\n              type: string\n              description: A link to this resource through the API\n              example: \"https://www.mysite.com/api/pages/blog/my-first-post\"\n            children:\n              type: array\n              description: An array of links to this resource's children through the API\n              items:\n                type: string\n              example:\n                - \"https://www.mysite.com/api/pages/blog/my-first-post/child-1\"\n                - \"https://www.mysite.com/api/pages/blog/my-first-post/child-2\"\n            parent:\n              type: string\n              description: A link to this resource's parent page through the API\n              example: \"https://www.mysite.com/api/pages/blog\"\n    PluginHypermedia:\n      type: object\n      properties:\n        related:\n          type: object\n          properties:\n            self:\n              type: string\n              description: A link to this resource through the API\n              example: \"https://www.mysite.com/api/plugins/api\"\n    PluginResponse:\n      type: object\n      properties:\n        type:\n          type: string\n          description: The resource type\n          example: \"plugin\"\n        id:\n          type: string\n          description: The ID of the plugin\n          example: \"api\"\n        attributes:\n          $ref: '#/components/schemas/PluginResource'\n        links:\n          $ref: '#/components/schemas/PluginHypermedia'\n    PluginResource:\n      type: object\n      description: The plugin's configuration options. The returned fields vary depending on the plugin.\n      properties:\n        enabled:\n          type: boolean\n          description: Whether or not the plugin is active\n          example: true\n        custom_field:\n          type: string\n          description: Each plugin might have different custom fields\n          example: \"An example plugin custom field\"\n    ResponseMetadata:\n      type: object\n      properties:\n        count:\n          type: number\n          description: The number of pages returned by the request\n          example: 2\n      required:\n        - count\n    UserHypermedia:\n      type: object\n      properties:\n        related:\n          type: object\n          properties:\n            self:\n              type: string\n              description: A link to this resource through the API\n              example: \"https://www.mysite.com/api/users/joe\"\n    UserResponse:\n      type: object\n      properties:\n        type:\n          type: string\n          description: The resource type\n          example: \"user\"\n        id:\n          type: string\n          description: The ID of the user (this is also the username)\n          example: \"admin\"\n        attributes:\n          $ref: '#/components/schemas/UserResource'\n        links:\n          $ref: '#/components/schemas/UserHypermedia'\n    UserResource:\n      type: object\n      properties:\n        username:\n          type: string\n          description: The username\n          example: \"admin\"\n        email:\n          type: string\n          description: The user's registered email address\n          example: \"admin@mysite.com\"\n        fullname:\n          type: string\n          description: The user's fullname\n          example: \"Joe Bloggs\"\n        title:\n          type: string\n          description: The user's title\n          example: \"Administrator\"\n        access:\n          $ref: '#/components/schemas/UserResourceAccessProperty'\n        groups:\n          $ref: '#/components/schemas/UserResourceGroupsProperty'\n    UserRequestBody:\n      type: object\n      properties:\n        username:\n          type: string\n          description: The new user's username\n          example: \"joe\"\n        password:\n          type: string\n          description: The new user's password\n          example: \"P4ssw0rd!\"\n        email:\n          type: string\n          description: The new user's email\n          example: \"joe@bloggs.com\"\n        fullname:\n          type: string\n          description: The new user's fullname.\n          example: \"Joe Bloggs\"\n        title:\n          type: string\n          description: The new user's title.\n          example: \"Editor\"\n          default: \"User\"\n        state:\n          type: string\n          enum:\n            - enabled\n            - disabled\n          description: Whether or not the user account should be active.\n          default: enabled\n        access:\n          $ref: '#/components/schemas/UserResourceAccessProperty'\n        groups:\n          $ref: '#/components/schemas/UserResourceGroupsProperty'\n      required:\n        - username\n        - password\n        - email\n    UserUpdateRequestBody:\n      type: object\n      properties:\n        password:\n          type: string\n          description: The user's existing password\n          example: \"P4ssw0rd!\"\n        new_password:\n          type: string\n          description: The user's new password\n          example: \"P4ssw0rd!\"\n        email:\n          type: string\n          description: The user's new email\n          example: \"joe@bloggs.com\"\n        fullname:\n          type: string\n          description: The user's new fullname.\n          example: \"Joe Bloggs\"\n        title:\n          type: string\n          description: The user's new title.\n          example: \"Editor\"\n        state:\n          type: string\n          enum:\n            - enabled\n            - disabled\n          description: Whether or not the user account should be active.\n        access:\n          $ref: '#/components/schemas/UserResourceAccessProperty'\n        groups:\n          $ref: '#/components/schemas/UserResourceGroupsProperty'\n      required:\n        - password\n    UserResourceGroupsProperty:\n      type: array\n      description: The Grav groups to which the user belongs. These are defined in the grav/user/config/groups.yaml file.\n      items:\n        type: string\n      example: [\"administrators\"]\n    UserResourceAccessProperty:\n      type: object\n      description: The user's new access roles. Can only be set by an administrator.\n      properties:\n        admin:\n          type: object\n          properties:\n            login:\n              type: boolean\n              example: true\n            super:\n              type: boolean\n              description: This role will also grant access to ALL API resources\n              example: true\n        api:\n          type: object\n          properties:\n            super:\n              type: boolean\n              description: Grants access to ALL API resources\n              example: true\n            pages_read:\n              type: boolean\n              description: Grants access to read page resources\n              example: true\n            pages_delete:\n              type: boolean\n              description: Grants access to delete page resources\n              example: true\n            pages_edit:\n              type: boolean\n              description: Grants access to edit page resources\n              example: true\n            pages_create:\n              type: boolean\n              description: Grants access to create page resources\n              example: true\n            users_read:\n              type: boolean\n              description: Grants access to read user resources\n              example: true\n            users_delete:\n              type: boolean\n              description: Grants access to delete user resources\n              example: true\n            users_create:\n              type: boolean\n              description: Grants access to create user resources\n              example: true\n            users_edit:\n              type: boolean\n              description: Grants access to edit user resources\n              example: true\n            plugins_read:\n              type: boolean\n              description: Grants access to read plugin resources\n              example: true\n            plugins_edit:\n              type: boolean\n              description: Grants access to edit plugin resources\n              example: true\n            plugins_install:\n              type: boolean\n              description: Grants access to install new plugins\n              example: true\n            plugins_uninstall:\n              type: boolean\n              description: Grants access to uninstall existing plugins\n              example: true\n            configs_read:\n              type: boolean\n              description: Grants access to read config resources\n              example: true\n            configs_edit:\n              type: boolean\n              description: Grants access to edit config resources\n              example: true\n        site:\n          type: object\n          properties:\n            login:\n              type: boolean\n              example: true\n      default:\n            site:\n              login: true\n  examples:\n    InvalidAuthResponse:\n      value:\n        message: \"Invalid authentication\"\n        documentation: \"https://github.com/regaez/grav-plugin-api/tree/master/docs\"\n    BadRequestResponse:\n      value:\n        message: \"Bad request.\"\n        documentation: \"https://github.com/regaez/grav-plugin-api/tree/master/docs\"\n    ForbiddenResponse:\n      value:\n        message: \"Forbidden. Resource already exists.\"\n        documentation: \"https://github.com/regaez/grav-plugin-api/tree/master/docs\"\n    NotFoundResponse:\n      value:\n        message: \"Resource not found\"\n        documentation: \"https://github.com/regaez/grav-plugin-api/tree/master/docs\"\n",
			"canonicalURL": "/github.com/Regaez/grav-plugin-api@440138d372778a3487bceefabd3f0f3062262bbf/-/blob/docs/specification.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/Regaez/grav-plugin-api/blob/440138d372778a3487bceefabd3f0f3062262bbf/docs/specification.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"UserResource\": parse schema: property \"access\": parse schema: resolve \"#/components/schemas/UserResourceAccessProperty\": at 1:9192: parse default: unexpected type: \"object\""
}