{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/opengeospatial/ogcapi-maps"
		},
		"file": {
			"name": "map_tiles.yaml",
			"size": 0,
			"path": "openapi/swaggerhub/map_tiles.yaml",
			"byteSize": 81743,
			"content": "---\nopenapi: 3.0.0\ninfo:\n  title: Map Tiles service example.\n  description: |-\n    Map tiles of more that one collection.\n    This is a draft of an example of a service following the OGC API maps and tiles that produces tiled map data.\n\n    It is elaborated in the Testbed-15 Open Portrayal Framework in collaboration with the WMS.SWG. The Map Tile API is a Web API for fetching and managing maps and tiles.\n\n    It illustrated how to request tiled maps from one or more than one collections\n  contact:\n    name: Joan Maso\n    email: joan.maso@uab.cat\n  license:\n    name: OGC License\n    url: https://raw.githubusercontent.com/opengeospatial/OGC-API-Map-Tiles/master/LICENSE\n  version: 1.0.0\nservers:\n- url: https://virtserver.swaggerhub.com/UAB-CREAF/ogc-api-map-tiles-opf-xmp-mt-more-1-collection/1.0.0\n  description: SwaggerHub API Auto Mocking\n- url: http://data.example.org\n  description: Server examples\ntags:\n- name: OGC API Common\n  description: Common characteristics of this API\n- name: Map resources\n  description: Map resources and descriptions\n- name: Tileset resources\n  description: Tileset resources and descriptions\n- name: Tilesets resources\n  description: Tilesets resources and descriptions\n- name: Tile Matrix Set Resources\n  description: Metadata about tiles and tileMatrixSets\n- name: Geospatial Resource Tiled Maps\n  description: map (renderizations or vector tiles) partitioned into a hierarchy of tiles  of a collection\n- name: Dataset tiled Maps\n  description: access to maps, partitioned into a hierarchy of tiles of one or more geospatial data resources\npaths:\n  /:\n    get:\n      tags:\n      - OGC API Common\n      summary: landing page\n      description: The landing page provides links to the API definition, the conformance statements and to the feature collections in this dataset.\n      operationId: getLandingPage\n      parameters:\n      - name: f\n        in: query\n        description: |-\n          The format of the response. If no value is provided, the standard http\n          rules apply, i.e., the accept header is used to determine the format.\n\n          Pre-defined values are \"json\" and \"html\". The response to other\n          values is determined by the server.\n        required: false\n        style: form\n        explode: false\n        schema:\n          type: string\n          enum:\n          - application/json\n          - text/html\n        example: application/json\n      responses:\n        \"200\":\n          description: Links to the API capabilities and the TileMatrixSets shared by this API.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/landingPage'\n            text/html:\n              schema:\n                type: string\n        \"500\":\n          description: A server error occurred\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/exception'\n            text/html:\n              schema:\n                type: string\n  /conformance:\n    get:\n      tags:\n      - OGC API Common\n      description: |-\n        A list of all requirements classes specified in a standard that the\n        server conforms to.\n      operationId: getConformanceDeclaration\n      parameters:\n      - name: f\n        in: query\n        description: |-\n          The format of the response. If no value is provided, the standard http\n          rules apply, i.e., the accept header is used to determine the format.\n\n          The only pre-defined value is \"json\". The response to other values is\n          determined by the server.\n        required: false\n        style: form\n        explode: false\n        schema:\n          type: string\n          enum:\n          - application/json\n        example: application/json\n      responses:\n        \"200\":\n          description: the URIs of all requirements classes supported by this API\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/confClasses'\n              example:\n                conformsTo:\n                - http://www.opengis.net/spec/ogcapi-common-1/1.0/conf/core\n                - http://www.opengis.net/spec/ogcapi-common-2/1.0/conf/collections\n                - http://www.opengis.net/spec/ogcapi-maps-1/1.0/conf/core\n                - http://www.opengis.net/spec/ogcapi-maps-1/1.0/conf/dataset\n                - http://www.opengis.net/spec/ogcapi-maps-1/1.0/conf/geodata\n                - http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/tileset\n                - http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/geodata\n                - http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/dataset\n                - http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/maptiles\n                - http://www.opengis.net/spec/ogcapi-tiles-2/1.0/conf/tmxs\n                - http://www.opengis.net/spec/ogcapi-tiles-2/1.0/conf/info\n        \"400\":\n          description: Invalid or unknown query parameters\n        \"406\":\n          description: The media types accepted by the client are not supported for this resource\n        \"500\":\n          description: A server error occurred\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/exception'\n            text/html:\n              schema:\n                type: string\n  /collections:\n    get:\n      tags:\n      - OGC API Common\n      summary: the collections in the dataset\n      description: A list of all collections available in this dataset.\n      operationId: getCollections\n      parameters:\n      - name: f\n        in: query\n        description: |-\n          The format of the response. If no value is provided, the standard http\n          rules apply, i.e., the accept header is used to determine the format.\n\n          Pre-defined values are \"json\" and \"html\". The response to other\n          values is determined by the server.\n        required: false\n        style: form\n        explode: false\n        schema:\n          type: string\n          enum:\n          - application/json\n          - text/html\n        example: application/json\n      responses:\n        \"200\":\n          description: |-\n            The collections (geospatial data resources) shared by this API.\n\n            This response can be references directly for every service that wants only essential information at the collections level. /collections/collectionId might return more information.\n\n            The dataset is organized as one or more collections. This resource provides information about and how to access the collections.\n\n            The response contains the list of collections. For each collection, a link\n            to other resources present (e.g. the items in the collection, path `/collections/{collectionId}/items`,\n            link relation `items`, a map created with data from  collection, path `/collections/{collectionId}/map`,\n            link relation `map`) as well as key information about the collection.\n            This information includes, but is not limited to:\n\n            * A local identifier for the collection that is unique for the dataset;\n            * A list of coordinate reference systems (CRS) in which geometries may be returned by the server. The first CRS is the default coordinate reference system (the default is always WGS84 with axis order longitude/latitude);\n            * An optional title and description for the collection;\n            * An optional extent that can be used to provide an indication of the spatial and temporal extent of the collection - typically derived from the data;\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/collections'\n            text/html:\n              schema:\n                type: string\n        \"500\":\n          description: A server error occurred\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/exception'\n            text/html:\n              schema:\n                type: string\n  /collections/{collectionId}:\n    get:\n      tags:\n      - OGC API Common\n      summary: describe a collection\n      operationId: describeCollection\n      parameters:\n      - name: collectionId\n        in: path\n        description: local identifier of a collection\n        required: true\n        schema:\n          type: string\n      - name: f\n        in: query\n        description: |-\n          The format of the response. If no value is provided, the standard http\n          rules apply, i.e., the accept header is used to determine the format.\n\n          Pre-defined values are \"json\" and \"html\". The response to other\n          values is determined by the server.\n        required: false\n        style: form\n        explode: false\n        schema:\n          type: string\n          enum:\n          - application/json\n          - text/html\n        example: application/json\n      responses:\n        \"200\":\n          description: Metadata about the collection including style information.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/collection'\n            text/html:\n              schema:\n                type: string\n        \"404\":\n          description: The requested URI was not found\n        \"500\":\n          description: A server error occurred\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/exception'\n            text/html:\n              schema:\n                type: string\n  /tileMatrixSets:\n    get:\n      tags:\n      - Tile Matrix Set Resources\n      summary: fetch all available tile matrix sets (tiling schemes)\n      operationId: getTileMatrixSets\n      parameters:\n      - name: f\n        in: query\n        description: |-\n          The format of the response. If no value is provided, the standard http\n          rules apply, i.e., the accept header is used to determine the format.\n\n          The only pre-defined value is \"json\". The response to other values is\n          determined by the server.\n        required: false\n        style: form\n        explode: false\n        schema:\n          type: string\n          enum:\n          - application/json\n        example: application/json\n      responses:\n        \"200\":\n          description: An array of tile matrix sets (tiling schemes).\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/tileMatrixSets'\n        \"500\":\n          description: A server error occurred\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/exception'\n            text/html:\n              schema:\n                type: string\n  /tileMatrixSets/{tileMatrixSetId}:\n    get:\n      tags:\n      - Tile Matrix Set Resources\n      summary: fetch a tile matrix sets (tiling scheme) by id\n      operationId: getTileMatrixSetDescription\n      parameters:\n      - name: tileMatrixSetId\n        in: path\n        description: Identifier of a specific tiling scheme. It can be one of those specified in Annex D.1 of the OGC 17-083r2 standard or one defined in this service.\n        required: true\n        schema:\n          type: string\n        example: WebMercatorQuad\n      - name: f\n        in: query\n        description: |-\n          The format of the response. If no value is provided, the standard http\n          rules apply, i.e., the accept header is used to determine the format.\n\n          The only pre-defined value is \"json\". The response to other values is\n          determined by the server.\n        required: false\n        style: form\n        explode: false\n        schema:\n          type: string\n          enum:\n          - application/json\n        example: application/json\n      responses:\n        \"200\":\n          description: tile matrix sets (a tiling scheme).\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/tileMatrixSet'\n        \"404\":\n          description: The requested URI was not found\n        \"500\":\n          description: A server error occurred\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/exception'\n            text/html:\n              schema:\n                type: string\n  /collections/{collectionId}/map/metadata:\n    get:\n      tags:\n      - Map resources\n      summary: Fetch a maps description\n      description: Retrieves the maps description for this collection including the `links` to get a `map`, and the `infoTemplate`\n      operationId: describeGeoDataMaps\n      parameters:\n      - name: collectionId\n        in: path\n        description: local identifier of a collection\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: Metadata about the maps.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/geodata-map-metadata'\n            text/html:\n              schema:\n                type: string\n        \"404\":\n          description: The requested URI was not found\n        \"500\":\n          description: A server error occurred\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/exception'\n            text/html:\n              schema:\n                type: string\n  /collections/{collectionId}/styles/{styleId}/map/tiles:\n    get:\n      tags:\n      - Tilesets resources\n      summary: fetch a tiles description\n      description: Retrieves the tiles description for this collection including the `links` to get a `tile`, the `TileMatrixSetLink` and the `infoTemplate`\n      operationId: describeMapTiles\n      parameters:\n      - name: styleId\n        in: path\n        description: The styleId that should be included in the map. Each maps description includes a valid list of stylesIds.\n        required: true\n        schema:\n          type: string\n      - name: collectionId\n        in: path\n        description: local identifier of a collection\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: Description of the map tiles.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/map-tiles'\n        \"404\":\n          description: The requested URI was not found\n        \"500\":\n          description: A server error occurred\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/exception'\n            text/html:\n              schema:\n                type: string\n  /collections/{collectionId}/styles/{styleId}/map/tiles/{tileMatrixSetId}:\n    get:\n      tags:\n      - Tileset resources\n      summary: fetch a tiles description\n      description: Retrieves the tiles description for this collection including the `links` to get a `tile`, the `TileMatrixSetLink` and the `infoTemplate`\n      operationId: describeMapTilesets\n      parameters:\n      - name: styleId\n        in: path\n        description: The styleId that should be included in the map. Each maps description includes a valid list of stylesIds.\n        required: true\n        schema:\n          type: string\n      - name: collectionId\n        in: path\n        description: local identifier of a collection\n        required: true\n        schema:\n          type: string\n      - name: tileMatrixSetId\n        in: path\n        description: Identifier of a specific tiling scheme. It can be one of those specified in Annex D.1 of the OGC 17-083r2 standard or one defined in this service.\n        required: true\n        schema:\n          type: string\n        example: WebMercatorQuad\n      responses:\n        \"200\":\n          description: Description of the map tiles.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/map-tiles'\n            text/xml:\n              schema:\n                $ref: '#/components/schemas/mapml'\n        \"404\":\n          description: The requested URI was not found\n        \"500\":\n          description: A server error occurred\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/exception'\n            text/html:\n              schema:\n                type: string\n  /map/metadata:\n    get:\n      tags:\n      - Map resources\n      summary: Fetch a maps description\n      description: Retrieves the maps description for this collection including the `links` to get a `map`, and the `infoTemplate`\n      operationId: describeDataSetMaps\n      responses:\n        \"200\":\n          description: Metadata about the maps.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/dataset-map-metadata'\n            text/html:\n              schema:\n                type: string\n        \"404\":\n          description: The requested URI was not found\n        \"500\":\n          description: A server error occurred\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/exception'\n            text/html:\n              schema:\n                type: string\n  /styles/{styleId}/map/tiles:\n    get:\n      tags:\n      - Tilesets resources\n      summary: fetch a map tiles description\n      description: Retrieves the map tiles description including the `links` to get a `map`\n      operationId: describeMapTilesCollections\n      parameters:\n      - name: styleId\n        in: path\n        description: The styleId that should be included in the map. Each maps description includes a valid list of stylesIds.\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: Links to the map tiles.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_200'\n  /styles/{styleId}/map/tiles/{tileMatrixSetId}:\n    get:\n      tags:\n      - Tileset resources\n      summary: fetch a map tiles description\n      description: Retrieves the map tiles description including the `links` to get a `map`\n      operationId: describeMapTilesetsCollections\n      parameters:\n      - name: styleId\n        in: path\n        description: The styleId that should be included in the map. Each maps description includes a valid list of stylesIds.\n        required: true\n        schema:\n          type: string\n      - name: tileMatrixSetId\n        in: path\n        description: Identifier of a specific tiling scheme. It can be one of those specified in Annex D.1 of the OGC 17-083r2 standard or one defined in this service.\n        required: true\n        schema:\n          type: string\n        example: WebMercatorQuad\n      responses:\n        \"200\":\n          description: Links to the map tiles.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_200'\n  /collections/{collectionId}/styles/{styleId}/map/tiles/{tileMatrixSetId}/{tileMatrix}/{tileRow}/{tileCol}:\n    get:\n      tags:\n      - Geospatial Resource Tiled Maps\n      summary: fetch a tile from a geospatial resource\n      description: Retrieves the tile in the requested tileMatrixSet, on the requested tileMatrix in the TileMatrixSet, with the requested tile indices (tileRow, tileCol). The tile has a single collection (formerly refered as layer) with all selected features in the bounding box of the tile. The feature properties to include in the tile representation can be limited using a query parameter.\n      operationId: getMapTileOfCollectionId\n      parameters:\n      - name: collectionId\n        in: path\n        description: local identifier of a collection\n        required: true\n        schema:\n          type: string\n      - name: styleId\n        in: path\n        description: The styleId that should be included in the map. Each maps description includes a valid list of stylesIds.\n        required: true\n        schema:\n          type: string\n      - name: transparent\n        in: query\n        description: Background transparency of map (default=true).\n        required: false\n        style: form\n        explode: false\n        schema:\n          type: boolean\n          default: true\n      - name: bgcolor\n        in: query\n        description: Hexadecimal red-green-blue[-alpha] color value for the background color (default=0xFFFFFF). The first and second characters specify a the intensity of red, the third and forth characters specify a the intensity of green, and the fifth and sixth two characters specify a the intensity of blue. Optionally the seventh and eighth characters specify the level of opacity (alpha channel) where 00 is completely transparent and FF is completely opaque. If opacity is not specified \"opaque\" opacity is assumed.\n        required: false\n        style: form\n        explode: false\n        schema:\n          type: string\n          default: 0xFFFFFF\n      - name: tileMatrixSetId\n        in: path\n        description: Identifier of a specific tiling scheme. It can be one of those specified in Annex D.1 of the OGC 17-083r2 standard or one defined in this service.\n        required: true\n        schema:\n          type: string\n        example: WebMercatorQuad\n      - name: tileMatrix\n        in: path\n        description: |-\n          Identifier selecting one of the scales defined in the TileMatrixSet and representing the scaleDenominator the tile. For example,\n          Ireland is fully within the Tile at tileMatrix=5, tileRow=10 and tileCol=15.\n        required: true\n        schema:\n          type: string\n        example: \"11\"\n      - name: tileRow\n        in: path\n        description: Row index of the tile on the selected TileMatrix. It cannot exceed the MatrixWidth-1 for the selected TileMatrix. For example, Ireland is fully within the Tile at tileMatrix=5, tileRow=10 and tileCol=15.\n        required: true\n        schema:\n          minimum: 0\n          type: integer\n        example: \"827\"\n      - name: tileCol\n        in: path\n        description: Column index of the tile on the selected TileMatrix. It cannot exceed the MatrixHeight-1 for the selected TileMatrix. For example, Ireland is fully within the Tile at tileMatrix=5, tileRow=10 and tileCol=15.\n        required: true\n        schema:\n          minimum: 0\n          type: integer\n        example: 1231\n      - name: datetime\n        in: query\n        description: |-\n          Either a date-time or an interval, open or closed. Date and time expressions\n          adhere to RFC 3339. Open intervals are expressed using double-dots.\n\n          Examples:\n\n          * A date-time: \"2018-02-12T23:20:50Z\"\n          * A closed interval: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\"\n          * Open intervals: \"2018-02-12T00:00:00Z/..\" or \"../2018-03-18T12:31:12Z\"\n\n          Only elemenets that have a temporal property that intersects the value of\n          `datetime` are selected.\n\n          If a element has multiple temporal properties, it is the decision of the\n          server whether only a single temporal property is used to determine\n          the extent or all relevant temporal properties.\n        required: false\n        style: form\n        explode: false\n        schema:\n          type: string\n      - name: elevation\n        in: query\n        description: Elevation value\n        required: false\n        style: form\n        explode: false\n        schema:\n          type: number\n      - name: f\n        in: query\n        description: |-\n          The format of the response. If no value is provided, the standard http rules apply, i.e., the accept header is used to determine the format.\n\n          Pre-defined values jpeg, png or gif for image based tiles\n          The response to other values is determined by the server.\n        required: false\n        style: form\n        explode: false\n        schema:\n          type: string\n          enum:\n          - image/png\n          - image/jpeg\n          - image/gif\n        example: image/png\n      responses:\n        \"200\":\n          description: A tile of the collection.\n          content:\n            image/jpeg:\n              schema:\n                type: string\n                format: binary\n              example: JPEG image\n            image/png:\n              schema:\n                type: string\n                format: binary\n              example: PNG image\n            image/gif:\n              schema:\n                type: string\n                format: binary\n              example: GIF image\n            image/mvt:\n              schema:\n                type: string\n              example: MVT tile\n            application/geo+json:\n              schema:\n                $ref: '#/components/schemas/featureCollectionGeoJSON'\n        \"404\":\n          description: The requested URI was not found\n        \"500\":\n          description: A server error occurred\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/exception'\n            text/html:\n              schema:\n                type: string\n  /collections/{collectionId}/styles/{styleId}/map/tiles/{tileMatrixSetId}/{tileMatrix}/{tileRow}/{tileCol}/info:\n    get:\n      tags:\n      - Geospatial Resource Tiled Maps\n      summary: fetch information about a point on a tile from a collection\n      description: Retrieves inforamtion on a point of a tile in the requested tileMatrixSet, on the requested tileMatrix in the TileMatrixSet, with the requested tile indices (tileRow, tileCol). The tile has a single collection (formerly refered as layer) with all selected features in the bounding box of the tile. The feature properties to include in the tile representation can be limited using a query parameter.\n      operationId: getFeatureInfoMapTileOfCollectionId\n      parameters:\n      - name: collectionId\n        in: path\n        description: local identifier of a collection\n        required: true\n        schema:\n          type: string\n      - name: styleId\n        in: path\n        description: The styleId that should be included in the map. Each maps description includes a valid list of stylesIds.\n        required: true\n        schema:\n          type: string\n      - name: tileMatrixSetId\n        in: path\n        description: Identifier of a specific tiling scheme. It can be one of those specified in Annex D.1 of the OGC 17-083r2 standard or one defined in this service.\n        required: true\n        schema:\n          type: string\n        example: WebMercatorQuad\n      - name: tileMatrix\n        in: path\n        description: |-\n          Identifier selecting one of the scales defined in the TileMatrixSet and representing the scaleDenominator the tile. For example,\n          Ireland is fully within the Tile at tileMatrix=5, tileRow=10 and tileCol=15.\n        required: true\n        schema:\n          type: string\n        example: \"11\"\n      - name: tileRow\n        in: path\n        description: Row index of the tile on the selected TileMatrix. It cannot exceed the MatrixWidth-1 for the selected TileMatrix. For example, Ireland is fully within the Tile at tileMatrix=5, tileRow=10 and tileCol=15.\n        required: true\n        schema:\n          minimum: 0\n          type: integer\n        example: \"827\"\n      - name: tileCol\n        in: path\n        description: Column index of the tile on the selected TileMatrix. It cannot exceed the MatrixHeight-1 for the selected TileMatrix. For example, Ireland is fully within the Tile at tileMatrix=5, tileRow=10 and tileCol=15.\n        required: true\n        schema:\n          minimum: 0\n          type: integer\n        example: 1231\n      - name: i\n        in: query\n        description: Horizontal (x) coordinate within a map or tile.\n        required: true\n        schema:\n          type: number\n      - name: j\n        in: query\n        description: Vertical (y) coordinate within a map or tile.\n        required: true\n        schema:\n          type: number\n      - name: infoTemplate\n        in: query\n        description: Template used for the information response. This parameter can be used to select among GML application schemas or JSON schemas and provide alternative presentations for the same information. If the parameter is missing, the server will select the first template available.\n        explode: false\n        schema:\n          type: string\n      - name: fTile\n        in: query\n        description: \"The format of the response. \\nPre-defined values are jpeg, png or gif for image based tiles\\nThe response to other values is determined by the server.\"\n        required: false\n        style: form\n        explode: false\n        schema:\n          type: string\n          enum:\n          - image/png\n          - image/jpeg\n          - image/gif\n        example: image/png\n      - name: datetime\n        in: query\n        description: |-\n          Either a date-time or an interval, open or closed. Date and time expressions\n          adhere to RFC 3339. Open intervals are expressed using double-dots.\n\n          Examples:\n\n          * A date-time: \"2018-02-12T23:20:50Z\"\n          * A closed interval: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\"\n          * Open intervals: \"2018-02-12T00:00:00Z/..\" or \"../2018-03-18T12:31:12Z\"\n\n          Only elemenets that have a temporal property that intersects the value of\n          `datetime` are selected.\n\n          If a element has multiple temporal properties, it is the decision of the\n          server whether only a single temporal property is used to determine\n          the extent or all relevant temporal properties.\n        required: false\n        style: form\n        explode: false\n        schema:\n          type: string\n      - name: elevation\n        in: query\n        description: Elevation value\n        required: false\n        style: form\n        explode: false\n        schema:\n          type: number\n      - name: f\n        in: query\n        description: |-\n          The format of the response. If no value is provided, the standard http\n          rules apply, i.e., the accept header is used to determine the format.\n\n          Pre-defined values are \"json\" and \"html\". The response to other\n          values is determined by the server.\n        required: false\n        style: form\n        explode: false\n        schema:\n          type: string\n          enum:\n          - application/json\n          - text/html\n        example: application/json\n      responses:\n        \"200\":\n          description: Retrieves a map that renders objects of the collectionId in the requested crs, on the requested bbox desigend to be shown in a rendering device of a width and a height.\n          content:\n            application/geo+json:\n              schema:\n                $ref: '#/components/schemas/featureCollectionGeoJSON'\n        \"404\":\n          description: The requested URI was not found\n        \"500\":\n          description: A server error occurred\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/exception'\n            text/html:\n              schema:\n                type: string\n  /styles/{styleId}/map/tiles/{tileMatrixSetId}/{tileMatrix}/{tileRow}/{tileCol}:\n    get:\n      tags:\n      - Dataset tiled Maps\n      summary: retrieves a map composed by one or more geospatial data resources\n      description: Retrieves a map in the requested crs, on the requested bbox desigend to be shown in a device of a width and a height. Some formats require to apply a style in the server side (e.g. png, jpeg, gif) and some others might include a reference to a style to be applied in the client side. The feature properties to include in the tile representation can be limited using a query parameter.\n      operationId: GetMapTileCollections\n      parameters:\n      - name: styleId\n        in: path\n        description: The styleId that should be included in the map. Each maps description includes a valid list of stylesIds.\n        required: true\n        schema:\n          type: string\n      - name: collections\n        in: query\n        description: The collections that should be included in the response. The parameter value is a comma-separated list of collection identifiers. If the parameters is missing, some or all collections will be included.\n        required: false\n        style: form\n        explode: false\n        schema:\n          type: array\n          items:\n            type: string\n      - name: transparent\n        in: query\n        description: Background transparency of map (default=true).\n        required: false\n        style: form\n        explode: false\n        schema:\n          type: boolean\n          default: true\n      - name: bgcolor\n        in: query\n        description: Hexadecimal red-green-blue[-alpha] color value for the background color (default=0xFFFFFF). The first and second characters specify a the intensity of red, the third and forth characters specify a the intensity of green, and the fifth and sixth two characters specify a the intensity of blue. Optionally the seventh and eighth characters specify the level of opacity (alpha channel) where 00 is completely transparent and FF is completely opaque. If opacity is not specified \"opaque\" opacity is assumed.\n        required: false\n        style: form\n        explode: false\n        schema:\n          type: string\n          default: 0xFFFFFF\n      - name: tileMatrixSetId\n        in: path\n        description: Identifier of a specific tiling scheme. It can be one of those specified in Annex D.1 of the OGC 17-083r2 standard or one defined in this service.\n        required: true\n        schema:\n          type: string\n        example: WebMercatorQuad\n      - name: tileMatrix\n        in: path\n        description: |-\n          Identifier selecting one of the scales defined in the TileMatrixSet and representing the scaleDenominator the tile. For example,\n          Ireland is fully within the Tile at tileMatrix=5, tileRow=10 and tileCol=15.\n        required: true\n        schema:\n          type: string\n        example: \"11\"\n      - name: tileRow\n        in: path\n        description: Row index of the tile on the selected TileMatrix. It cannot exceed the MatrixWidth-1 for the selected TileMatrix. For example, Ireland is fully within the Tile at tileMatrix=5, tileRow=10 and tileCol=15.\n        required: true\n        schema:\n          minimum: 0\n          type: integer\n        example: \"827\"\n      - name: tileCol\n        in: path\n        description: Column index of the tile on the selected TileMatrix. It cannot exceed the MatrixHeight-1 for the selected TileMatrix. For example, Ireland is fully within the Tile at tileMatrix=5, tileRow=10 and tileCol=15.\n        required: true\n        schema:\n          minimum: 0\n          type: integer\n        example: 1231\n      - name: datetime\n        in: query\n        description: |-\n          Either a date-time or an interval, open or closed. Date and time expressions\n          adhere to RFC 3339. Open intervals are expressed using double-dots.\n\n          Examples:\n\n          * A date-time: \"2018-02-12T23:20:50Z\"\n          * A closed interval: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\"\n          * Open intervals: \"2018-02-12T00:00:00Z/..\" or \"../2018-03-18T12:31:12Z\"\n\n          Only elemenets that have a temporal property that intersects the value of\n          `datetime` are selected.\n\n          If a element has multiple temporal properties, it is the decision of the\n          server whether only a single temporal property is used to determine\n          the extent or all relevant temporal properties.\n        required: false\n        style: form\n        explode: false\n        schema:\n          type: string\n      - name: elevation\n        in: query\n        description: Elevation value\n        required: false\n        style: form\n        explode: false\n        schema:\n          type: number\n      - name: f\n        in: query\n        description: |-\n          The format of the response. If no value is provided, the standard http rules apply, i.e., the accept header is used to determine the format.\n\n          Pre-defined values jpeg, png or gif for image based tiles\n          The response to other values is determined by the server.\n        required: false\n        style: form\n        explode: false\n        schema:\n          type: string\n          enum:\n          - image/png\n          - image/jpeg\n          - image/gif\n        example: image/png\n      responses:\n        \"200\":\n          description: A multi-collection tile of the dataset.\n          content:\n            image/jpeg:\n              schema:\n                type: string\n                format: binary\n              example: JPEG image\n            image/png:\n              schema:\n                type: string\n                format: binary\n              example: PNG image\n            image/gif:\n              schema:\n                type: string\n                format: binary\n              example: GIF image\n            image/mvt:\n              schema:\n                type: string\n              example: MVT tile\n            application/geo+json:\n              schema:\n                $ref: '#/components/schemas/featureCollectionGeoJSON'\n        \"404\":\n          description: The requested URI was not found\n        \"500\":\n          description: A server error occurred\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/exception'\n            text/html:\n              schema:\n                type: string\n  /styles/{styleId}/map/tiles/{tileMatrixSetId}/{tileMatrix}/{tileRow}/{tileCol}/info:\n    get:\n      tags:\n      - Dataset tiled Maps\n      summary: retrieves a map composed by one or more geospatial resource\n      description: Retrieves a map in the requested crs, on the requested bbox desigend to be shown in a device of a width and a height. Some formats require to apply a style in the server side (e.g. png, jpeg, gif) and some others might include a reference to a style to be applied in the client side. The feature properties to include in the tile representation can be limited using a query parameter.\n      operationId: GetFeatureInfoTileCollections\n      parameters:\n      - name: styleId\n        in: path\n        description: The styleId that should be included in the map. Each maps description includes a valid list of stylesIds.\n        required: true\n        schema:\n          type: string\n      - name: collections\n        in: query\n        description: The collections that should be included in the response. The parameter value is a comma-separated list of collection identifiers. If the parameters is missing, some or all collections will be included.\n        required: false\n        style: form\n        explode: false\n        schema:\n          type: array\n          items:\n            type: string\n      - name: styles\n        in: query\n        description: |-\n          The styleId that should be included in the map or tile. Each collectionId has a valid list of stylesId. To know the valid styleId values of each collectionId use /collections/{collectionId}.\n          The parameter value is a list of comma separated styles identifiers. If the parameter 'collections' exists, the list should be as long as 'collections' and each style identifier corresponds to one collection identifier. Default style can be represented as a blank name or with the `default` word.\n          If the parameter is missing, the default style is assumed for all collections.\n        required: false\n        style: form\n        explode: false\n        schema:\n          type: string\n      - name: transparent\n        in: query\n        description: Background transparency of map (default=true).\n        required: false\n        style: form\n        explode: false\n        schema:\n          type: boolean\n          default: true\n      - name: bgcolor\n        in: query\n        description: Hexadecimal red-green-blue[-alpha] color value for the background color (default=0xFFFFFF). The first and second characters specify a the intensity of red, the third and forth characters specify a the intensity of green, and the fifth and sixth two characters specify a the intensity of blue. Optionally the seventh and eighth characters specify the level of opacity (alpha channel) where 00 is completely transparent and FF is completely opaque. If opacity is not specified \"opaque\" opacity is assumed.\n        required: false\n        style: form\n        explode: false\n        schema:\n          type: string\n          default: 0xFFFFFF\n      - name: tileMatrixSetId\n        in: path\n        description: Identifier of a specific tiling scheme. It can be one of those specified in Annex D.1 of the OGC 17-083r2 standard or one defined in this service.\n        required: true\n        schema:\n          type: string\n        example: WebMercatorQuad\n      - name: tileMatrix\n        in: path\n        description: |-\n          Identifier selecting one of the scales defined in the TileMatrixSet and representing the scaleDenominator the tile. For example,\n          Ireland is fully within the Tile at tileMatrix=5, tileRow=10 and tileCol=15.\n        required: true\n        schema:\n          type: string\n        example: \"11\"\n      - name: tileRow\n        in: path\n        description: Row index of the tile on the selected TileMatrix. It cannot exceed the MatrixWidth-1 for the selected TileMatrix. For example, Ireland is fully within the Tile at tileMatrix=5, tileRow=10 and tileCol=15.\n        required: true\n        schema:\n          minimum: 0\n          type: integer\n        example: \"827\"\n      - name: tileCol\n        in: path\n        description: Column index of the tile on the selected TileMatrix. It cannot exceed the MatrixHeight-1 for the selected TileMatrix. For example, Ireland is fully within the Tile at tileMatrix=5, tileRow=10 and tileCol=15.\n        required: true\n        schema:\n          minimum: 0\n          type: integer\n        example: 1231\n      - name: datetime\n        in: query\n        description: |-\n          Either a date-time or an interval, open or closed. Date and time expressions\n          adhere to RFC 3339. Open intervals are expressed using double-dots.\n\n          Examples:\n\n          * A date-time: \"2018-02-12T23:20:50Z\"\n          * A closed interval: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\"\n          * Open intervals: \"2018-02-12T00:00:00Z/..\" or \"../2018-03-18T12:31:12Z\"\n\n          Only elemenets that have a temporal property that intersects the value of\n          `datetime` are selected.\n\n          If a element has multiple temporal properties, it is the decision of the\n          server whether only a single temporal property is used to determine\n          the extent or all relevant temporal properties.\n        required: false\n        style: form\n        explode: false\n        schema:\n          type: string\n      - name: elevation\n        in: query\n        description: Elevation value\n        required: false\n        style: form\n        explode: false\n        schema:\n          type: number\n      - name: fTile\n        in: query\n        description: \"The format of the response. \\nPre-defined values are jpeg, png or gif for image based tiles\\nThe response to other values is determined by the server.\"\n        required: false\n        style: form\n        explode: false\n        schema:\n          type: string\n          enum:\n          - image/png\n          - image/jpeg\n          - image/gif\n        example: image/png\n      - name: i\n        in: query\n        description: Horizontal (x) coordinate within a map or tile.\n        required: true\n        schema:\n          type: number\n      - name: j\n        in: query\n        description: Vertical (y) coordinate within a map or tile.\n        required: true\n        schema:\n          type: number\n      - name: infoTemplate\n        in: query\n        description: Template used for the information response. This parameter can be used to select among GML application schemas or JSON schemas and provide alternative presentations for the same information. If the parameter is missing, the server will select the first template available.\n        explode: false\n        schema:\n          type: string\n      - name: f\n        in: query\n        description: |-\n          The format of the response. If no value is provided, the standard http\n          rules apply, i.e., the accept header is used to determine the format.\n\n          Pre-defined values are \"json\" and \"html\". The response to other\n          values is determined by the server.\n        required: false\n        style: form\n        explode: false\n        schema:\n          type: string\n          enum:\n          - application/json\n          - text/html\n        example: application/json\n      responses:\n        \"200\":\n          description: Retrieves a map that renders objects of the collectionId in the requested crs, on the requested bbox desigend to be shown in a rendering device of a width and a height.\n          content:\n            application/geo+json:\n              schema:\n                $ref: '#/components/schemas/featureCollectionGeoJSON'\n        \"404\":\n          description: The requested URI was not found\n        \"500\":\n          description: A server error occurred\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/exception'\n            text/html:\n              schema:\n                type: string\ncomponents:\n  schemas:\n    landingPage:\n      allOf:\n      - $ref: '#/components/schemas/landingPage_1'\n      - $ref: '#/components/schemas/landingPage-link'\n    landingPage-link:\n      required:\n      - links\n      type: object\n      properties:\n        links:\n          type: array\n          example:\n          - href: http://data.example.org/?f=json\n            rel: self\n            type: application/json\n            title: This document\n          - href: http://data.example.org/?f=html\n            rel: alternate\n            type: text/html\n            title: This document in HTML\n          - href: http://data.example.org/api?f=json\n            rel: service-desc\n            type: application/vnd.oai.openapi+json;version=3.0\n            title: The API definition in OpenAPI 3.0 JSON\n          - href: http://data.example.org/api?f=html\n            rel: service-desc\n            type: text/html\n            title: The API definition in HTML\n          - href: http://data.example.org/conformance?f=json\n            rel: http://www.opengis.net/def/rel/ogc/1.0/conformance\n            type: application/json\n            title: Conformance classes implemented by this API\n          - href: http://data.example.org/collections?f=json\n            rel: http://www.opengis.net/def/rel/ogc/1.0/data\n            type: application/json\n            title: Collections in the dataset in JSON\n          - href: http://data.example.org/collections?f=html\n            rel: http://www.opengis.net/def/rel/ogc/1.0/data\n            type: text/html\n            title: Collections in the dataset in HTML\n          - href: http://data.example.org/tileMatrixSets?f=json\n            rel: http://www.opengis.net/def/rel/ogc/1.0/tiling-schemes\n            type: application/json\n            title: TileMatrixSets implemented by this API in JSON\n          - href: http://data.example.org/tileMatrixSets?f=html\n            rel: http://www.opengis.net/def/rel/ogc/1.0/tiling-schemes\n            type: text/html\n            title: TileMatrixSets implemented by this API in HTML\n          - href: http://data.example.org/styles?f=json\n            rel: http://www.opengis.net/def/rel/ogc/1.0/styles\n            type: application/json\n            title: The set of available styles\n          - href: http://data.example.org/tiles\n            rel: http://www.opengis.net/def/rel/ogc/1.0/tilesets-vector\n            type: application/json\n            title: Information on tiles in the dataset\n          - href: http://data.example.org/map\n            rel: http://www.opengis.net/def/rel/ogc/1.0/map\n            title: Map combining collections in the dataset\n          - href: http://data.example.org/map/metadata\n            rel: http://www.opengis.net/def/rel/ogc/1.0/map-meta\n            type: application/json\n            title: Metadata of the map combining collections in the dataset\n          - href: http://data.example.org/map/tiles\n            rel: http://www.opengis.net/def/rel/ogc/1.0/tilesets-map\n            type: application/json\n            title: Information on map tiles in the dataset\n          items:\n            $ref: '#/components/schemas/link'\n    collection:\n      allOf:\n      - $ref: '#/components/schemas/collection_1'\n      - $ref: '#/components/schemas/collection-link'\n    collection-link:\n      required:\n      - links\n      type: object\n      properties:\n        links:\n          type: array\n          example:\n          - href: http://data.example.com/collections/buildings?f=json\n            rel: self\n            type: application/json\n            title: This document\n          - href: http://data.example.com/concepts/buildings.html\n            rel: describedby\n            type: text/html'\n          - href: https://creativecommons.org/publicdomain/zero/1.0/\n            rel: license\n            type: text/html\n            title: CC0-1.0\n          - href: https://creativecommons.org/publicdomain/zero/1.0/rdf\n            rel: license\n            type: application/rdf+xml\n            title: CC0-1.0\n          - href: http://data.example.com/collections/buildings/items\n            rel: http://www.opengis.net/def/rel/ogc/1.0/items\n            title: Retrieve the items of the buildings collection\n            type: application/geo+json\n          - href: http://data.example.com/collections/buildings/map\n            rel: http://www.opengis.net/def/rel/ogc/1.0/map\n          - href: http://data.example.com/collections/buildings/map/metadata\n            rel: map-meta\n          - href: http://data.example.com/collections/buildings/map/tiles\n            rel: http://www.opengis.net/def/rel/ogc/1.0/tilesets-map\n            type: application/json\n          items:\n            $ref: '#/components/schemas/link'\n    map-tiles:\n      allOf:\n      - $ref: '#/components/schemas/tiles'\n      - $ref: '#/components/schemas/map-tiles-link'\n    map-tiles-link:\n      required:\n      - links\n      type: object\n      properties:\n        links:\n          type: array\n          example:\n          - href: http://data.example.com/collections/buildings/map/tiles\n            rel: self\n            type: application/json\n          - href: http://data.example.com/collections/buildings/styles/{styleId}/tiles/map/{tileMatrixSetId}/{tileMatrix}/{tileRow}/{tileCol}.png\n            rel: http://www.opengis.net/def/rel/ogc/1.0/tile\n            type: image/png\n          - href: http://data.example.com/collections/buildings/styles/{styleId}/map/tiles/{tileMatrixSetId}/{tileMatrix}/{tileRow}/{tileCol}/info\n            rel: http://www.opengis.net/def/rel/ogc/1.0/info\n            type: text/html\n          items:\n            $ref: '#/components/schemas/link'\n    geodata-map-metadata:\n      allOf:\n      - $ref: '#/components/schemas/geodata-map-metadata_1'\n      - $ref: '#/components/schemas/geodata-map-metadata-link'\n    geodata-map-metadata-link:\n      required:\n      - links\n      type: object\n      properties:\n        links:\n          type: array\n          example:\n          - href: http://data.example.com/collections/buildings/map/metadata\n            rel: self\n            type: application/json\n          items:\n            $ref: '#/components/schemas/link'\n    dataset-map-metadata:\n      allOf:\n      - $ref: '#/components/schemas/dataset-map-metadata_1'\n      - $ref: '#/components/schemas/dataset-map-metadata-link'\n    dataset-map-metadata-link:\n      required:\n      - links\n      type: object\n      properties:\n        links:\n          type: array\n          example:\n          - href: http://data.example.com/map/metadata\n            rel: self\n            type: application/json\n          items:\n            $ref: '#/components/schemas/link'\n    mapml:\n      type: object\n      properties:\n        extent:\n          $ref: '#/components/schemas/mapml_extent'\n    exception:\n      required:\n      - code\n      type: object\n      properties:\n        code:\n          type: string\n        description:\n          type: string\n      example:\n        code: \"500\"\n        description: 'An internal server error occured. Incident ID: 1234567. Please contact admin@example.org.'\n    confClasses:\n      required:\n      - conformsTo\n      type: object\n      properties:\n        conformsTo:\n          type: array\n          example:\n          - http://www.opengis.net/spec/ogcapi-common-1/1.0/req/core\n          items:\n            type: string\n            format: uri\n    collections:\n      required:\n      - collections\n      - links\n      type: object\n      properties:\n        links:\n          type: array\n          nullable: true\n          example:\n          - href: http://data.example.org/collections?f=json\n            rel: self\n            type: application/json\n            title: this document\n          - href: http://data.example.org/collections?f=html\n            rel: alternate\n            type: text/html\n            title: this document as HTML\n          - href: http://schemas.example.org/1.0/dataset.xsd\n            rel: describedby\n            type: application/xml\n            title: GML application schema for Acme Corporation dataset data\n          - href: http://download.example.org/dataset.gpkg\n            rel: enclosure\n            type: application/geopackage+sqlite3\n            title: Bulk download (GeoPackage)\n            length: 472546\n          items:\n            $ref: '#/components/schemas/link'\n        collections:\n          type: array\n          items:\n            allOf:\n            - $ref: '#/components/schemas/collection_1'\n            - $ref: '#/components/schemas/collection-link_1'\n    link:\n      required:\n      - href\n      type: object\n      properties:\n        href:\n          type: string\n          example: http://data.example.com/buildings/123\n        rel:\n          type: string\n          example: alternate\n        type:\n          pattern: ^(?=[-a-z]{1,127}/[-\\.a-z0-9]{1,127}$)[a-z]+(-[a-z]+)*/[a-z0-9]+([-\\.][a-z0-9]+)*$\n          type: string\n          example: application/geo+json\n        hreflang:\n          type: string\n          example: en\n        title:\n          type: string\n          example: Trierer Strasse 70, 53115 Bonn\n        length:\n          minimum: 0\n          type: integer\n        templated:\n          type: boolean\n          description: Use `true` if the `href` property contains a URI template with variables that needs to be substituted by values to get a URI\n          example: false\n          default: false\n        types:\n          type: array\n          description: \"Without this parameter you should repeat a link for each media type the resource is offered. \\nAdding this parameter allows listing alternative media types that you can use for this resource. The value in the `type` parameter becomes the recommended media type.\"\n          example: image/png, image/jpeg, image/tiff\n          items:\n            type: string\n    collection_1:\n      required:\n      - id\n      type: object\n      properties:\n        id:\n          type: string\n          description: identifier of the collection used, for example, in URIs\n          example: buildings\n        title:\n          type: string\n          description: human readable title of the collection\n          example: Buildings in the city of Bonn\n        description:\n          type: string\n          description: a description of the collection\n          example: This collection contains buildings\n        keywords:\n          type: array\n          description: keywords about the elements in the collection\n          items:\n            $ref: '#/components/schemas/keyword'\n        attribution:\n          type: string\n          description: The provider of the source data for the collection. Map viewers normally show this information at the bottom of the map\n          example: OpenStreetMap\n        extent:\n          $ref: '#/components/schemas/extent'\n        crs:\n          type: array\n          description: The list of coordinate reference systems supported by the service. The first item is the default coordinate reference system.\n          example:\n          - http://www.opengis.net/def/crs/OGC/1.3/CRS84\n          - http://www.opengis.net/def/crs/EPSG/0/4326\n          items:\n            type: string\n          default:\n          - http://www.opengis.net/def/crs/OGC/1.3/CRS84\n    keyword:\n      required:\n      - keyword\n      type: object\n      properties:\n        keyword:\n          type: string\n          example: land cover\n        code:\n          type: string\n          example: \"4612\"\n        codeSpace:\n          type: string\n          example: https://www.eionet.europa.eu/gemet/en/concept/\n      nullable: true\n    extent:\n      type: object\n      properties:\n        spatial:\n          $ref: '#/components/schemas/spatialExtent'\n        temporal:\n          $ref: '#/components/schemas/temporalExtent'\n      description: |-\n        The extent of the collection. In the Core only spatial and temporal extents are specified. Extensions may add additional members to represent other  extents, for example, thermal or pressure ranges.\n        It is recommended that the statial extent is expected in CRS84 except if this is not possible.\n    spatialExtent:\n      required:\n      - bbox\n      type: object\n      properties:\n        bbox:\n          $ref: '#/components/schemas/bbox'\n        crs:\n          $ref: '#/components/schemas/crs'\n      description: The spatial extent of the element in the collection.\n    bbox:\n      minItems: 1\n      type: array\n      description: |-\n        One or more bounding boxes that describe the spatial extent of the dataset.\n        In the Core only a single bounding box is supported. Extensions may support\n        additional areas. If multiple areas are provided, the union of the bounding\n        boxes describes the spatial extent.\n      example:\n      - - 7.01\n        - 50.63\n        - 7.22\n        - 50.78\n      items:\n        maxItems: 6\n        minItems: 4\n        type: array\n        description: |-\n          West, south, east, north edges of the bounding box. The coordinates\n          are in the coordinate reference system specified in `crs`. By default\n          this is WGS 84 longitude/latitude (CRS84).\n        items:\n          type: number\n    crs:\n      type: string\n      description: |-\n        Coordinate reference system of the coordinates in the spatial extent\n        (property `bbox`). The default reference system is WGS 84 longitude/latitude.\n        In the Core this is the only supported coordinate reference system.\n        Extensions may support additional coordinate reference systems and add\n        additional enum values.\n      default: http://www.opengis.net/def/crs/OGC/1.3/CRS84\n      enum:\n      - http://www.opengis.net/def/crs/OGC/1.3/CRS84\n    temporalExtent:\n      type: object\n      properties:\n        interval:\n          $ref: '#/components/schemas/temporalInterval'\n        trs:\n          $ref: '#/components/schemas/trs'\n      description: The temporal extent of the element in the collection.\n      nullable: true\n    temporalInterval:\n      minItems: 1\n      type: array\n      description: |-\n        One or more time intervals that describe the temporal extent of the dataset.\n        The value `null` is supported and indicates an open time intervall.\n        In the Core only a single time interval is supported. Extensions may support\n        multiple intervals. If multiple intervals are provided, the union of the\n        intervals describes the temporal extent.\n      nullable: true\n      items:\n        maxItems: 2\n        minItems: 2\n        type: array\n        description: |-\n          Begin and end times of the time interval. The timestamps\n          are in the coordinate reference system specified in `trs`. By default\n          this is the Gregorian calendar.\n        example:\n        - 2010-02-15T12:34:56Z\n        - null\n        items:\n          type: string\n          format: date-time\n          nullable: true\n    trs:\n      type: string\n      description: |-\n        Coordinate reference system of the coordinates in the temporal extent\n        (property `interval`). The default reference system is the Gregorian calendar.\n        In the Core this is the only supported temporal reference system.\n        Extensions may support additional temporal reference systems and add\n        additional enum values.\n      default: http://www.opengis.net/def/uom/ISO-8601/0/Gregorian\n      enum:\n      - http://www.opengis.net/def/uom/ISO-8601/0/Gregorian\n    collection-link_1:\n      required:\n      - links\n      type: object\n      properties:\n        links:\n          type: array\n          example:\n          - href: http://example.com/collections/buildings?f=json\n            rel: item\n            type: application/json\n            title: CollectionId path description in the OpenAPI\n          - href: http://example.com/concepts/buildings.html\n            rel: describedby\n            type: text/html'\n          - href: https://creativecommons.org/publicdomain/zero/1.0/\n            rel: license\n            type: text/html\n            title: CC0-1.0\n          - href: https://creativecommons.org/publicdomain/zero/1.0/rdf\n            rel: license\n            type: application/rdf+xml\n            title: CC0-1.0\n          items:\n            $ref: '#/components/schemas/link'\n    tileMatrixSets:\n      required:\n      - tileMatrixSets\n      type: object\n      properties:\n        tileMatrixSets:\n          type: array\n          example:\n          - id: MyWebMercatorQuad\n            title: My Google Maps Compatible for the World\n            links:\n            - href: https://data.example.org/tileMatrixSet/MyWebMercatorQuad\n              rel: item\n              type: application/json\n          items:\n            $ref: '#/components/schemas/id-link'\n    id-link:\n      required:\n      - id\n      - links\n      type: object\n      properties:\n        id:\n          type: string\n        title:\n          type: string\n        links:\n          minItems: 1\n          type: array\n          items:\n            $ref: '#/components/schemas/link'\n      description: |-\n        Reusable object that contains an id to a resource and links where the object is described or a representation retrieved. Typically it is useful for paths like `\\resources` and `\\resources\\{resourceId}`.   `\\resources` will respond an array of id-link listing the `resourceId` and the links to get it. \\collections and \\collections\\{collectionId} is an exception to this pattern.\n        The fact that `links` is an array can be used to advertise the same object representation in different formats.\n      example:\n        id: night\n        title: Topographic night style\n        links:\n        - href: https://example.com/api/1.0/styles/night?f=mapbox\n          rel: stylesheet\n          type: application/vnd.mapbox.style+json\n        - href: https://example.com/api/1.0/styles/night?f=sld10\n          rel: stylesheet\n          type: application/vnd.ogc.sld+xml;version=1.0\n    tileMatrixSet:\n      required:\n      - identifier\n      type: object\n      properties:\n        title:\n          type: string\n          description: Title of this tile matrix set, normally used for display to a human\n          example: Google Maps Compatible for the World\n        abstract:\n          type: string\n          description: Brief narrative description of this tile matrix set, normally available for display to a human\n          example: The most common TileMatrixSet, used in most of the main IT map browsers. It was initially popularized by Google Maps\n        keywords:\n          type: array\n          description: Unordered list of one or more commonly used or formalized word(s) or phrase(s) used to describe this dataset\n          items:\n            $ref: '#/components/schemas/keyword'\n        identifier:\n          type: string\n          description: Tile matrix set identifier,\n          example: WebMercatorQuad\n        supportedCRS:\n          type: string\n          description: Reference to one coordinate reference system (CRS)\n          format: uri\n          example: http://www.opengis.net/def/crs/EPSG/0/3857\n        wellKnownScaleSet:\n          type: string\n          description: Reference to a well-known scale set\n          example: http://www.opengis.net/def/wkss/OGC/1.0/GoogleMapsCompatible\n        tileMatrix:\n          type: array\n          description: Describes a scale level and its tile matrix\n          items:\n            $ref: '#/components/schemas/tileMatrix'\n    tileMatrix:\n      required:\n      - identifier\n      - matrixHeight\n      - matrixWidth\n      - pointOfOrigin\n      - scaleDenominator\n      - tileHeight\n      - tileWidth\n      type: object\n      properties:\n        title:\n          type: string\n          description: Title of this tile matrix, normally used for display to a human\n          example: Google Maps Compatible for the World zoom level 3\n        abstract:\n          type: string\n          description: Brief narrative description of this tile matrix, normally available for display to a human\n          example: Google Maps Compatible zoom level 3 that is equivalent to a scale of 1:69885283.00358972 and has 19567.87924100512 meters of pixel size in the equator\n        keywords:\n          type: array\n          description: keywords about the elements in the collection\n          items:\n            $ref: '#/components/schemas/keyword'\n        identifier:\n          type: string\n          description: Identifier selecting one of the scales defined in the TileMatrixSet and representing the scaleDenominator the tile.\n          example: \"3\"\n        scaleDenominator:\n          type: number\n          description: Scale denominator level of this tile matrix\n          example: 69885283.00358972\n        cornerOfOrigin:\n          type: string\n          description: Position of the corner of origin with respect of the tiles of this tile matrix\n          example: topLeft\n          default: topLeft\n          enum:\n          - topLeft\n          - bottonLeft\n        pointOfOrigin:\n          type: array\n          description: Position in CRS coordinates of the corner of origin of this tile matrix. In previous version was `topLeftCorner` and `cornerOfOrigin` did not exist.\n          example:\n          - -2.00375083427892E7\n          - 2.00375083427892E7\n          items:\n            type: number\n            format: double\n        tileWidth:\n          minimum: 1\n          type: number\n          description: Width of each tile of this tile matrix in pixels\n          format: integer\n          example: 256\n        tileHeight:\n          minimum: 1\n          type: number\n          description: Height of each tile of this tile matrix in pixels\n          format: integer\n          example: 256\n        matrixHeight:\n          minimum: 1\n          type: number\n          description: Width of the matrix (number of tiles in width)\n          format: integer\n          example: 8\n        matrixWidth:\n          minimum: 1\n          type: number\n          description: Height of the matrix (number of tiles in height)\n          format: integer\n          example: 8\n    featureCollectionGeoJSON:\n      required:\n      - features\n      - type\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n          - FeatureCollection\n        features:\n          type: array\n          items:\n            $ref: '#/components/schemas/featureGeoJSON'\n        links:\n          type: array\n          items:\n            $ref: '#/components/schemas/link'\n        timeStamp:\n          $ref: '#/components/schemas/timeStamp'\n        numberMatched:\n          minimum: 0\n          type: integer\n        numberReturned:\n          minimum: 0\n          type: integer\n    featureGeoJSON:\n      required:\n      - geometry\n      - properties\n      - type\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n          - Feature\n        geometry:\n          $ref: '#/components/schemas/geometryGeoJSON'\n        properties:\n          type: object\n          nullable: true\n        id:\n          oneOf:\n          - type: string\n          - type: integer\n        links:\n          type: array\n          items:\n            $ref: '#/components/schemas/link'\n    geometryGeoJSON:\n      oneOf:\n      - $ref: '#/components/schemas/pointGeoJSON'\n      - $ref: '#/components/schemas/multipointGeoJSON'\n      - $ref: '#/components/schemas/linestringGeoJSON'\n      - $ref: '#/components/schemas/multilinestringGeoJSON'\n      - $ref: '#/components/schemas/polygonGeoJSON'\n      - $ref: '#/components/schemas/multipolygonGeoJSON'\n      - $ref: '#/components/schemas/geometrycollectionGeoJSON'\n    pointGeoJSON:\n      required:\n      - coordinates\n      - type\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n          - Point\n        coordinates:\n          minItems: 2\n          type: array\n          items:\n            type: number\n    multipointGeoJSON:\n      required:\n      - coordinates\n      - type\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n          - MultiPoint\n        coordinates:\n          type: array\n          items:\n            minItems: 2\n            type: array\n            items:\n              type: number\n    linestringGeoJSON:\n      required:\n      - coordinates\n      - type\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n          - LineString\n        coordinates:\n          minItems: 2\n          type: array\n          items:\n            minItems: 2\n            type: array\n            items:\n              type: number\n    multilinestringGeoJSON:\n      required:\n      - coordinates\n      - type\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n          - MultiLineString\n        coordinates:\n          type: array\n          items:\n            minItems: 2\n            type: array\n            items:\n              minItems: 2\n              type: array\n              items:\n                type: number\n    polygonGeoJSON:\n      required:\n      - coordinates\n      - type\n      type: object\n      properties:\n        type:\n          type: string\n          example: Polygon\n          enum:\n          - Polygon\n        coordinates:\n          type: array\n          example:\n          - - - 35.99601746\n              - 32.50426061\n            - - 36.08110064\n              - 32.50426061\n            - - 36.08110064\n              - 32.57551892\n            - - 35.99601746\n              - 32.57551892\n            - - 35.99601746\n              - 32.50426061\n          items:\n            minItems: 4\n            type: array\n            items:\n              minItems: 2\n              type: array\n              items:\n                type: number\n    multipolygonGeoJSON:\n      required:\n      - coordinates\n      - type\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n          - MultiPolygon\n        coordinates:\n          type: array\n          items:\n            type: array\n            items:\n              minItems: 4\n              type: array\n              items:\n                minItems: 2\n                type: array\n                items:\n                  type: number\n    geometrycollectionGeoJSON:\n      required:\n      - geometries\n      - type\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n          - GeometryCollection\n        geometries:\n          type: array\n          items:\n            $ref: '#/components/schemas/geometryGeoJSONNoCollection'\n    geometryGeoJSONNoCollection:\n      oneOf:\n      - $ref: '#/components/schemas/pointGeoJSON'\n      - $ref: '#/components/schemas/multipointGeoJSON'\n      - $ref: '#/components/schemas/linestringGeoJSON'\n      - $ref: '#/components/schemas/multilinestringGeoJSON'\n      - $ref: '#/components/schemas/polygonGeoJSON'\n      - $ref: '#/components/schemas/multipolygonGeoJSON'\n    timeStamp:\n      type: string\n      description: This property indicates the time and date when the response was generated.\n      format: date-time\n      example: 2017-08-17T08:05:32Z\n    landingPage_1:\n      required:\n      - links\n      type: object\n      properties:\n        title:\n          type: string\n          example: Buildings in Bonn\n        description:\n          type: string\n          example: Access to data about buildings in the city of Bonn via a Web API that conforms to the OGC API Features specification.\n        links:\n          type: array\n          items:\n            $ref: '#/components/schemas/link'\n    tiles:\n      required:\n      - tileMatrixSetLink\n      type: object\n      properties:\n        tileMatrixSetLinks:\n          $ref: '#/components/schemas/tileMatrixSetLink-set'\n        infoTemplates:\n          $ref: '#/components/schemas/infoTemplates'\n    tileMatrixSetLink-set:\n      type: array\n      description: This list of tileMatrixSetLink objects, as defined in OGC 17-083r2, supported by this collectionId.\n      items:\n        $ref: '#/components/schemas/tileMatrixSetLink-entry'\n    tileMatrixSetLink-entry:\n      required:\n      - tileMatrixSet\n      type: object\n      properties:\n        tileMatrixSet:\n          type: string\n          example: WorldMercatorWGS84Quad\n        tileMatrixSetURI:\n          type: string\n          format: uri\n          example: http://schemas.opengis.net/tms/1.0/json/examples/WorldMercatorWGS84Quad.json\n        tileMatrixSetLimits:\n          minItems: 1\n          type: array\n          items:\n            $ref: '#/components/schemas/tileMatrixSetLimits-entry'\n    tileMatrixSetLimits-entry:\n      required:\n      - maxTileCol\n      - maxTileRow\n      - minTileCol\n      - minTileRow\n      - tileMatrix\n      type: object\n      properties:\n        tileMatrix:\n          type: string\n          format: uri\n          example: \"5\"\n        minTileRow:\n          type: number\n          format: integer\n          example: 0\n        maxTileRow:\n          type: number\n          format: integer\n          example: 1\n        minTileCol:\n          type: number\n          format: integer\n          example: 3\n        maxTileCol:\n          type: number\n          format: integer\n          example: 4\n    infoTemplates:\n      type: array\n      example:\n      - summary\n      items:\n        type: string\n    geodata-map-metadata_1:\n      allOf:\n      - $ref: '#/components/schemas/map-metadata'\n    map-metadata:\n      type: object\n      properties:\n        wgs84SpatialExtent:\n          $ref: '#/components/schemas/bbox'\n        crsSpatialExtents:\n          $ref: '#/components/schemas/crsSpatialExtents'\n        supportedCRSs:\n          type: array\n          items:\n            type: string\n        minScaleDenominador:\n          type: number\n          description: Minimum scale denominator (inclusive) for which it is appropriate to generate a map of this collection. Requests outside this interval will return an HTTP 404. If it is not present we will assume there is no limit.\n          example: 10\n        maxScaleDenominador:\n          type: number\n          description: Maximum scale denominator (inclusive) for which it is appropriate to generate a map of this collection. Requests outside this interval will return an HTTP 404 If it is not present we will assume there is no limit.\n          example: 10000000\n        minCellSize:\n          type: number\n          description: Minimum cell size (inclusive). If it is not present we will assume there is no limit.\n        maxCellSize:\n          type: number\n          description: Maximum cell size (inclusive). If it is not present we will assume there is no limit.\n          example: 10000000\n        recomendedFormat:\n          type: string\n          description: Recommended output formats for a map request. Depending of the nature of the data, a format might be better than another. Categorical data looks better in a PNG but continuos data and pictures are smaller a JPEG. The map operation details all available formats for the OGC API maps. In contrast, this is the better one for this type of information. It would be one of the supported for the map operation\n          example: image/jpeg\n        maxWidth:\n          type: number\n          description: Maximum width and height values that a client is permitted to include in bbox subset operation.  If absent the server imposes no limit.\n          example: 2048\n        maxHeight:\n          type: number\n          description: Maximum width and height values that a client is permitted to include in bbox subset operation.  If absent the server imposes no limit.\n          example: 2048\n    crsSpatialExtents:\n      type: array\n      description: Available CRSs and minimum spatial extent surrounding the map\n      example:\n      - crs: http://www.opengis.net/def/crs/OGC/1.3/CRS84\n        bbox:\n        - - -180\n          - -90\n          - 180\n          - 90\n      - crs: http://www.opengis.net/def/crs/EPSG/0/3395\n        bbox:\n        - - -2.00375083427892E7\n          - -2.00375083427892E7\n          - 2.00375083427892E7\n          - 2.00375083427892E7\n      items:\n        $ref: '#/components/schemas/crsSpatialExtent'\n    crsSpatialExtent:\n      required:\n      - crs\n      type: object\n      properties:\n        crs:\n          $ref: '#/components/schemas/crs'\n        bbox:\n          $ref: '#/components/schemas/bbox'\n      description: The spatial extent of the element in the collection.\n    dataset-map-metadata_1:\n      allOf:\n      - $ref: '#/components/schemas/map-metadata'\n    inline_response_200:\n      required:\n      - links\n      type: object\n      properties:\n        links:\n          type: array\n          example:\n          - href: http://data.example.com/styles/{styleId}/map/tiles\n            rel: self\n            type: application/json\n          - href: http://data.example.com/styles/{styleId}/map/tiles/{tileMatrixSetId}/{tileMatrix}/{tileRow}/{tileCol}.png\n            rel: http://www.opengis.net/def/rel/ogc/1.0/tile\n            type: image/png\n          - href: http://data.example.com/styles/{styleId}/map/tiles/{tileMatrixSetId}/{tileMatrix}/{tileRow}/{tileCol}/info\n            rel: http://www.opengis.net/def/rel/ogc/1.0/info\n            type: text/html\n          items:\n            $ref: '#/components/schemas/link'\n    mapml_extent_input:\n      type: object\n      properties:\n        name:\n          type: string\n          xml:\n            attribute: true\n        type:\n          type: string\n          xml:\n            attribute: true\n        units:\n          type: string\n          xml:\n            attribute: true\n        axis:\n          type: string\n          xml:\n            attribute: true\n      example: '{\"name\":\"tileCol\",\"type\":\"location\",\"units\":\"tilematrix\",\"axis\":\"column\"}'\n    mapml_extent_link:\n      type: object\n      properties:\n        rel:\n          type: string\n          xml:\n            attribute: true\n        tref:\n          type: string\n          xml:\n            attribute: true\n      example: '{\"rel\":\"http://www.opengis.net/def/rel/ogc/1.0/tile\",\"tref\":\"https://.../tiles/WebMercatorQuad/{tileMatrix}/{tileRow}/{tileCol}/\"}'\n    mapml_extent:\n      type: object\n      properties:\n        units:\n          type: string\n          example: OSMTILE\n          xml:\n            attribute: true\n        input:\n          $ref: '#/components/schemas/mapml_extent_input'\n        link:\n          $ref: '#/components/schemas/mapml_extent_link'\n  responses: {}\n  parameters:\n    f-json-zip:\n      name: f\n      in: query\n      description: |-\n        The format of the response. If no value is provided, the standard http\n        rules apply, i.e., the accept header is used to determine the format.\n\n        The only pre-defined value is \"json\". The response to other values is\n        determined by the server.\n      required: false\n      style: form\n      explode: false\n      schema:\n        type: string\n        enum:\n        - image/json\n        - application/zip\n      example: image/json\n    f-png-jpeg:\n      name: f\n      in: query\n      description: |-\n        The format of the response. If no value is provided, the standard http rules apply, i.e., the accept header is used to determine the format.\n\n        Pre-defined values jpeg, png or gif for image based tiles\n        The response to other values is determined by the server.\n      required: false\n      style: form\n      explode: false\n      schema:\n        type: string\n        enum:\n        - image/png\n        - image/jpeg\n        - image/gif\n      example: image/png\n    f-tile:\n      name: fTile\n      in: query\n      description: \"The format of the response. \\nPre-defined values are jpeg, png or gif for image based tiles\\nThe response to other values is determined by the server.\"\n      required: false\n      style: form\n      explode: false\n      schema:\n        type: string\n        enum:\n        - image/png\n        - image/jpeg\n        - image/gif\n      example: image/png\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /styles/{styleId}/map/tiles/{tileMatrixSetId}/{tileMatrix}/{tileRow}/{tileCol}: get: operation \"GetMapTileCollections\": parameters: parse parameter \"bgcolor\": schema: parse default: expected type \"string\", got \"number\""
}