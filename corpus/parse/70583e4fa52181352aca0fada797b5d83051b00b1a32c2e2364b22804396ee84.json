{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/stackql/stackql-provider-registry"
		},
		"file": {
			"name": "content.yaml",
			"size": 0,
			"path": "providers/src/sumologic/v0.1.1/services/content.yaml",
			"byteSize": 73874,
			"content": "paths:\n  /v2/content/folders:\n    post:\n      tags:\n        - folderManagement\n      summary: Create a new folder.\n      description: Creates a new folder under the given parent folder. Set the header parameter `isAdminMode` to `\"true\"` to create a folder inside \"Admin Recommended\" folder.\n      operationId: createFolder\n      parameters:\n        - name: isAdminMode\n          in: header\n          description: Set this to \"true\" if you want to perform the request as a Content Administrator.\n          required: false\n          schema:\n            type: string\n      requestBody:\n        description: Information about the new folder.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FolderDefinition'\n        required: true\n      responses:\n        '200':\n          description: The folder has been created.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Folder'\n        default:\n          description: The operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /v2/content/folders/{id}:\n    get:\n      tags:\n        - folderManagement\n      summary: Get a folder.\n      description: Get a folder with the given identifier. Set the header parameter `isAdminMode` to `\"true\"` if fetching a folder inside \"Admin Recommended\" folder.\n      operationId: getFolder\n      parameters:\n        - name: id\n          in: path\n          description: Identifier of the folder to fetch.\n          required: true\n          schema:\n            type: string\n        - name: isAdminMode\n          in: header\n          description: Set this to \"true\" if you want to perform the request as a Content Administrator.\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Folder that was requested.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Folder'\n        default:\n          description: The operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n    put:\n      tags:\n        - folderManagement\n      summary: Update a folder.\n      description: Update an existing folder with the given identifier. Set the header parameter `isAdminMode` to `\"true\"` if updating a folder inside \"Admin Recommended\" folder.\n      operationId: updateFolder\n      parameters:\n        - name: id\n          in: path\n          description: Identifier of the folder to update.\n          required: true\n          schema:\n            type: string\n        - name: isAdminMode\n          in: header\n          description: Set this to \"true\" if you want to perform the request as a Content Administrator.\n          required: false\n          schema:\n            type: string\n      requestBody:\n        description: Information to update about the folder.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateFolderRequest'\n        required: true\n      responses:\n        '200':\n          description: The folder was successfully updated.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Folder'\n        default:\n          description: The operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /v2/content/folders/personal:\n    get:\n      tags:\n        - folderManagement\n      summary: Get personal folder.\n      description: Get the personal folder of the current user.\n      operationId: getPersonalFolder\n      responses:\n        '200':\n          description: |\n            The personal folder of the current user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Folder'\n        default:\n          description: The operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /v2/content/folders/global:\n    get:\n      tags:\n        - folderManagement\n      summary: Schedule Global View job\n      description: |-\n        Schedule an asynchronous job to get Global View. Global View contains all top-level content items that a user has permissions to view in the organization. User can traverse the top-level folders using [GetFolder API](#operation/getFolder) to get rest of the content items. Make sure you set `isAdminMode` header parameter to `true` when traversing top-level items.\n\n        _Global View is not a real folder, therefore there is no folder identifier associated with it_.\n\n        _You get back a identifier of asynchronous job in response to this endpoint. See [Asynchronous-Request](#section/Getting-Started/Asynchronous-Request) section for more details on how to work with asynchronous request._\n      operationId: getGlobalFolderAsync\n      parameters:\n        - name: isAdminMode\n          in: header\n          description: Set this to \"true\" if you want to perform the request as a Content Administrator.\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: An asynchronous job to get a list of all content items been scheduled.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BeginAsyncJobResponse'\n        default:\n          description: The operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /v2/content/folders/global/{jobId}/status:\n    get:\n      tags:\n        - folderManagement\n      summary: Get Global View job status\n      description: Get the status of an asynchronous Global View job for the given job identifier. If job succeeds, use [Global View Result](#operation/getGlobalFolderAsyncResult) endpoint to fetch all content items that you have permissions to view.\n      operationId: getGlobalFolderAsyncStatus\n      parameters:\n        - name: jobId\n          in: path\n          description: The identifier of the asynchronous Global View job.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Asynchronous Global View job status.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AsyncJobStatus'\n        default:\n          description: The operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /v2/content/folders/global/{jobId}/result:\n    get:\n      tags:\n        - folderManagement\n      summary: Get Global View job result\n      description: Get result of a Global View job for the given job identifier. The result will be a list of all content items that a user has permissions to view in the organization.\n      operationId: getGlobalFolderAsyncResult\n      parameters:\n        - name: jobId\n          in: path\n          description: The identifier of the asynchronous Global View job.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: List of all content items with view permission.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ContentList'\n        default:\n          description: The operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /v2/content/folders/adminRecommended:\n    get:\n      tags:\n        - folderManagement\n      summary: Schedule Admin Recommended folder job\n      description: |-\n        Schedule an asynchronous job to get the top-level Admin Recommended content items. You can read more about Admin Recommended folder [here](https://help.sumologic.com/Manage/Content_Sharing/Admin_Mode#move-important-content-to-admin-recommended).\n\n        _You get back a identifier of asynchronous job in response to this endpoint. See [Asynchronous-Request](#section/Getting-Started/Asynchronous-Request) section for more details on how to work with asynchronous request._\n      operationId: getAdminRecommendedFolderAsync\n      parameters:\n        - name: isAdminMode\n          in: header\n          description: Set this to \"true\" if you want to perform the request as a Content Administrator.\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: An asynchronous job to get the Admin Recommended folder has been scheduled.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BeginAsyncJobResponse'\n        default:\n          description: The operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /v2/content/folders/adminRecommended/{jobId}/status:\n    get:\n      tags:\n        - folderManagement\n      summary: Get Admin Recommended folder job status\n      description: Get the status of an asynchronous Admin Recommended folder job for the given job identifier. If job succeeds, use [Admin Recommended Job Result](#operation/getAdminRecommendedFolderAsyncResult) endpoint to fetch top-level content items in Admin Recommended folder.\n      operationId: getAdminRecommendedFolderAsyncStatus\n      parameters:\n        - name: jobId\n          in: path\n          description: The identifier of the asynchronous Admin Recommended folder job.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Asynchronous Admin Recommended folder job status.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AsyncJobStatus'\n        default:\n          description: The operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /v2/content/folders/adminRecommended/{jobId}/result:\n    get:\n      tags:\n        - folderManagement\n      summary: Get Admin Recommended folder job result\n      description: Get result of an Admin Recommended job for the given job identifier. The result will be \"Admin Recommended\" folder with a list of top-level Admin Recommended content items in `children` field.\n      operationId: getAdminRecommendedFolderAsyncResult\n      parameters:\n        - name: jobId\n          in: path\n          description: The identifier of the asynchronous Admin Recommended folder job.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Admin Recommended folder.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Folder'\n        default:\n          description: The operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /v2/content/{id}/permissions:\n    get:\n      tags:\n        - contentPermissions\n      summary: Get permissions of a content item\n      description: Returns content permissions of a content item with the given identifier.\n      operationId: getContentPermissions\n      parameters:\n        - name: id\n          in: path\n          description: The identifier of the content item.\n          required: true\n          schema:\n            type: string\n        - name: explicitOnly\n          in: query\n          description: 'There are two permission types: explicit and implicit. Permissions specifically assigned to the content item are explicit. Permissions derived from a parent content item, like a folder are implicit. To return only explicit permissions set this to true.'\n          schema:\n            type: boolean\n            default: false\n        - name: isAdminMode\n          in: header\n          description: Set this to \"true\" if you want to perform the request as a Content Administrator.\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A list of permissions for the requested content item.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ContentPermissionResult'\n        default:\n          description: Operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /v2/content/{id}/permissions/add:\n    put:\n      tags:\n        - contentPermissions\n      summary: Add permissions to a content item.\n      description: Add permissions to a content item with the given identifier.\n      operationId: addContentPermissions\n      parameters:\n        - name: id\n          in: path\n          description: The identifier of the content item.\n          required: true\n          schema:\n            type: string\n        - name: isAdminMode\n          in: header\n          description: Set this to \"true\" if you want to perform the request as a Content Administrator.\n          required: false\n          schema:\n            type: string\n      requestBody:\n        description: New permissions to add to the content item with the given identifier.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ContentPermissionUpdateRequest'\n        required: true\n      responses:\n        '200':\n          description: Updated permission object for the requested content item.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ContentPermissionResult'\n        default:\n          description: Operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /v2/content/{id}/permissions/remove:\n    put:\n      tags:\n        - contentPermissions\n      summary: Remove permissions from a content item.\n      description: Remove permissions from a content item with the given identifier.\n      operationId: removeContentPermissions\n      parameters:\n        - name: id\n          in: path\n          description: The identifier of the content item.\n          required: true\n          schema:\n            type: string\n        - name: isAdminMode\n          in: header\n          description: Set this to \"true\" if you want to perform the request as a Content Administrator.\n          required: false\n          schema:\n            type: string\n      requestBody:\n        description: Permissions to remove from a content item with the given identifier.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ContentPermissionUpdateRequest'\n        required: true\n      responses:\n        '200':\n          description: Updated permissions for the requested content item.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ContentPermissionResult'\n        default:\n          description: Operation failed with an error. Check that your request is valid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /v2/content/path:\n    get:\n      tags:\n        - contentManagement\n      summary: Get content item by path.\n      description: |-\n        Get a content item corresponding to the given path.\n\n        _Path is specified in the required query parameter `path`. The path should be URL encoded._ For example, to get \"Acme Corp\" folder of a user \"user@sumo.com\" you can use the following curl command:\n          ```bash\n          curl https://api.sumologic.com/api/v2/content/path?path=/Library/Users/user%40sumo.com/Acme%20Corp\n          ```\n\n\n        The absolute path to a content item should be specified to get the item. The content library has \"Library\" folder at the root level. For items in \"Personal\" folder, the base path is \"/Library/Users/user@sumo.com\" where \"user@sumo.com\" is the email address of the user. For example if a user with email address `wile@acme.com` has `Rockets` folder inside Personal folder, the path of Rockets folder will be `/Library/Users/wile@acme.com/Rockets`.\n\n        For items in \"Admin Recommended\" folder, the base path is \"/Library/Admin Recommended\". For example, given a folder `Acme` in Admin Recommended folder, the path will be `/Library/Admin Recommended/Acme`.\n      operationId: getItemByPath\n      parameters:\n        - name: path\n          in: query\n          description: Path of the content item to retrieve.\n          required: true\n          schema:\n            type: string\n          example: /Library/Users/user@sumo.com/SampleFolder\n      responses:\n        '200':\n          description: Content item corresponding to the given path.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Content'\n        default:\n          description: Operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /v2/content/{contentId}/path:\n    get:\n      tags:\n        - contentManagement\n      summary: Get path of an item.\n      description: |\n        Get full path of a content item with the given identifier.\n      operationId: getPathById\n      parameters:\n        - name: contentId\n          in: path\n          description: Identifier of the content item to get the path.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Full path of the content item.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ContentPath'\n        default:\n          description: Operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /v2/content/{id}/export:\n    post:\n      tags:\n        - contentManagement\n      summary: Start a content export job.\n      description: |-\n        Schedule an _asynchronous_ export of content with the given identifier. You will get back an asynchronous job identifier on success. Use the [getAsyncExportStatus](#operation/getAsyncExportStatus) endpoint and the job identifier you got back in the response to track the status of an asynchronous export job.\n        If the content item is a folder, everything under the folder is exported recursively. Keep in mind when exporting large folders that there is a limit of 1000 content objects that can be exported at once. If you want to import more than 1000 content objects, then be sure to split the import into batches of 1000 objects or less.\n        The results from the export are compatible with the Library import feature in the Sumo Logic user interface as well as the API content import job.\n      operationId: beginAsyncExport\n      parameters:\n        - name: id\n          in: path\n          description: The identifier of the content item to export. Identifiers from the Library in the Sumo user interface are provided in decimal format which is incompatible with this API. The identifier needs to be in hexadecimal format.\n          required: true\n          schema:\n            type: string\n        - name: isAdminMode\n          in: header\n          description: Set this to \"true\" if you want to perform the request as a Content Administrator.\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Export job has been scheduled.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BeginAsyncJobResponse'\n        default:\n          description: Operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /v2/content/{contentId}/export/{jobId}/status:\n    get:\n      tags:\n        - contentManagement\n      summary: Content export job status.\n      description: Get the status of an asynchronous content export request for the given job identifier. On success, use the [getExportResult](#operation/getAsyncExportResult) endpoint to get the result of the export job.\n      operationId: getAsyncExportStatus\n      parameters:\n        - name: contentId\n          in: path\n          description: The identifier of the exported content item.\n          required: true\n          schema:\n            type: string\n        - name: jobId\n          in: path\n          description: The identifier of the asynchronous export job.\n          required: true\n          schema:\n            type: string\n        - name: isAdminMode\n          in: header\n          description: Set this to \"true\" if you want to perform the request as a Content Administrator.\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: The status of the export job.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AsyncJobStatus'\n        default:\n          description: Operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /v2/content/{contentId}/export/{jobId}/result:\n    get:\n      tags:\n        - contentManagement\n      summary: Content export job result.\n      description: Get results from content export job for the given job identifier. The results from this export are incompatible with the Library import feature in the Sumo user interface.\n      operationId: getAsyncExportResult\n      parameters:\n        - name: contentId\n          in: path\n          description: The identifier of the exported content item.\n          required: true\n          schema:\n            type: string\n        - name: jobId\n          in: path\n          description: The identifier of the asynchronous job.\n          required: true\n          schema:\n            type: string\n        - name: isAdminMode\n          in: header\n          description: Set this to \"true\" if you want to perform the request as a Content Administrator.\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: The result of export job.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ContentSyncDefinition'\n        default:\n          description: Operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /v2/content/folders/{folderId}/import:\n    post:\n      tags:\n        - contentManagement\n      summary: Start a content import job.\n      description: Schedule an asynchronous import of content inside an existing folder with the given identifier. Import requests can be used to create or update content within a folder. Content items need to have a unique name within their folder. If there is already a content item with the same name in the folder, you can set the `overwrite` parameter to `true` to overwrite existing content items. By default, the `overwrite` parameter is set to `false`, where the import will fail if a content item with the same name already exist. Keep in mind when importing large folders that there is a limit of 1000 content objects that can be imported at once. If you want to import more than 1000 content objects, then be sure to split the import into batches of 1000 objects or less.\n      operationId: beginAsyncImport\n      parameters:\n        - name: folderId\n          in: path\n          description: The identifier of the folder to import into. Identifiers from the Library in the Sumo user interface are provided in decimal format which is incompatible with this API. The identifier needs to be in hexadecimal format.\n          required: true\n          schema:\n            type: string\n        - name: isAdminMode\n          in: header\n          description: Set this to \"true\" if you want to perform the request as a Content Administrator.\n          required: false\n          schema:\n            type: string\n        - name: overwrite\n          in: query\n          description: Set this to \"true\" to overwrite a content item if the name already exists.\n          required: false\n          schema:\n            type: boolean\n            default: false\n      requestBody:\n        description: The content to import.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ContentSyncDefinition'\n        required: true\n      responses:\n        '200':\n          description: Import job has been scheduled.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BeginAsyncJobResponse'\n        default:\n          description: The operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /v2/content/folders/{folderId}/import/{jobId}/status:\n    get:\n      tags:\n        - contentManagement\n      summary: Content import job status.\n      description: Get the status of a content import job for the given job identifier.\n      operationId: getAsyncImportStatus\n      parameters:\n        - name: folderId\n          in: path\n          description: The identifier of the folder to import into.\n          required: true\n          schema:\n            type: string\n        - name: jobId\n          in: path\n          description: The identifier of the import request.\n          required: true\n          schema:\n            type: string\n        - name: isAdminMode\n          in: header\n          description: Set this to \"true\" if you want to perform the request as a Content Administrator.\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: The status of the import job.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AsyncJobStatus'\n        default:\n          description: The operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /v2/content/{id}/delete:\n    delete:\n      tags:\n        - contentManagement\n      summary: Start a content deletion job.\n      description: Start an asynchronous content deletion job with the given identifier.\n      operationId: beginAsyncDelete\n      parameters:\n        - name: id\n          in: path\n          description: Identifier of the content to delete. Identifiers from the Library in the Sumo user interface are provided in decimal format which is incompatible with this API. The identifier needs to be in hexadecimal format.\n          required: true\n          schema:\n            type: string\n        - name: isAdminMode\n          in: header\n          description: Set this to \"true\" if you want to perform the request as a Content Administrator.\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Deletion job has been scheduled.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BeginAsyncJobResponse'\n        default:\n          description: Operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /v2/content/{id}/delete/{jobId}/status:\n    get:\n      tags:\n        - contentManagement\n      summary: Content deletion job status.\n      description: Get the status of an asynchronous content deletion job request for the given job identifier.\n      operationId: getAsyncDeleteStatus\n      parameters:\n        - name: id\n          in: path\n          description: Identifier of the content to delete.\n          required: true\n          schema:\n            type: string\n        - name: jobId\n          in: path\n          description: The identifier of the asynchronous job.\n          required: true\n          schema:\n            type: string\n        - name: isAdminMode\n          in: header\n          description: Set this to \"true\" if you want to perform the request as a Content Administrator.\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: The status of the content deletion job.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AsyncJobStatus'\n        default:\n          description: Operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /v2/content/{id}/copy:\n    post:\n      tags:\n        - contentManagement\n      summary: Start a content copy job.\n      description: Start an asynchronous content copy job with the given identifier to the destination folder. If the content item is a folder, everything under the folder is copied recursively.\n      operationId: beginAsyncCopy\n      parameters:\n        - name: id\n          in: path\n          description: The identifier of the content item to copy. Identifiers from the Library in the Sumo user interface are provided in decimal format which is incompatible with this API. The identifier needs to be in hexadecimal format.\n          required: true\n          schema:\n            type: string\n        - name: destinationFolder\n          in: query\n          description: The identifier of the destination folder.\n          required: true\n          schema:\n            type: string\n        - name: isAdminMode\n          in: header\n          description: Set this to \"true\" if you want to perform the request as a Content Administrator.\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Content copy job has been scheduled.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BeginAsyncJobResponse'\n        default:\n          description: Operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /v2/content/{id}/copy/{jobId}/status:\n    get:\n      tags:\n        - contentManagement\n      summary: Content copy job status.\n      description: |\n        Get the status of the copy request with the given job identifier. On success, field `statusMessage` will contain identifier of the newly copied content in format: `id: {hexIdentifier}`.\n      operationId: asyncCopyStatus\n      parameters:\n        - name: id\n          in: path\n          description: The identifier of the content which was copied.\n          required: true\n          schema:\n            type: string\n        - name: jobId\n          in: path\n          description: The identifier of the asynchronous copy request job.\n          required: true\n          schema:\n            type: string\n        - name: isAdminMode\n          in: header\n          description: Set this to \"true\" if you want to perform the request as a Content Administrator.\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: The status of the content copy job.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AsyncJobStatus'\n              example:\n                status: Success\n                statusMessage: 'id: 0000000000000197'\n        default:\n          description: Operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /v2/content/{id}/move:\n    post:\n      tags:\n        - contentManagement\n      summary: Move an item.\n      description: |\n        Moves an item from its current location to another folder.\n      operationId: moveItem\n      parameters:\n        - name: destinationFolderId\n          in: query\n          description: Identifier of the destination folder.\n          required: true\n          schema:\n            type: string\n        - name: id\n          in: path\n          description: Identifier of the item the user wants to move.\n          required: true\n          schema:\n            type: string\n        - name: isAdminMode\n          in: header\n          description: Set this to \"true\" if you want to perform the request as a Content Administrator.\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Content was moved successfully.\n        default:\n          description: Operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\ncomponents:\n  schemas:\n    FolderDefinition:\n      required:\n        - name\n        - parentId\n      type: object\n      properties:\n        name:\n          maxLength: 128\n          minLength: 1\n          type: string\n          description: The name of the folder.\n          example: SampleFolder\n        description:\n          maxLength: 255\n          minLength: 0\n          type: string\n          description: The description of the folder.\n          example: This is a sample folder.\n        parentId:\n          type: string\n          description: The identifier of the parent folder.\n    Folder:\n      allOf:\n        - $ref: '#/components/schemas/Content'\n        - type: object\n          properties:\n            description:\n              maxLength: 255\n              minLength: 0\n              type: string\n              description: The description of the folder.\n              example: This is a sample folder.\n            children:\n              type: array\n              description: A list of the content items.\n              items:\n                $ref: '#/components/schemas/Content'\n    ErrorResponse:\n      required:\n        - errors\n        - id\n      type: object\n      properties:\n        id:\n          type: string\n          description: An identifier for the error; this is unique to the specific API request.\n          example: IUUQI-DGH5I-TJ045\n        errors:\n          type: array\n          description: A list of one or more causes of the error.\n          example:\n            - code: auth:password_too_short\n              message: Your password was too short.\n            - code: auth:password_character_classes\n              message: Your password did not contain any non-alphanumeric characters\n          items:\n            $ref: '#/components/schemas/ErrorDescription'\n    Content:\n      allOf:\n        - $ref: '#/components/schemas/MetadataModel'\n        - required:\n            - id\n            - itemType\n            - name\n            - parentId\n            - permissions\n          properties:\n            id:\n              type: string\n              description: Identifier of the content item.\n              example: 000000000C1C17C6\n            name:\n              type: string\n              description: The name of the content item.\n              example: Personal\n            itemType:\n              type: string\n              description: |-\n                Type of the content item. Supported values are:\n                  1. Folder\n                  2. Search\n                  3. Report (for old dashboards)\n                  4. Dashboard (for new dashboards)\n                  5. Lookups\n              example: Folder\n            parentId:\n              type: string\n              description: Identifier of the parent content item.\n              example: 0000000001C41EF2\n            permissions:\n              type: array\n              description: List of permissions the user has on the content item.\n              example:\n                - View\n                - GrantView\n                - Edit\n              items:\n                type: string\n    ErrorDescription:\n      required:\n        - code\n        - message\n      type: object\n      properties:\n        code:\n          type: string\n          description: An error code describing the type of error.\n          example: auth:password_too_short\n        message:\n          type: string\n          description: A short English-language description of the error.\n          example: Your password was too short.\n        detail:\n          type: string\n          description: An optional fuller English-language description of the error.\n          example: Your password was 5 characters long, the minimum length is 12 characters. See http://example.com/password for more information.\n        meta:\n          type: object\n          description: An optional list of metadata about the error.\n          example:\n            minLength: 12\n            actualLength: 5\n    MetadataModel:\n      required:\n        - createdAt\n        - createdBy\n        - modifiedAt\n        - modifiedBy\n      type: object\n      properties:\n        createdAt:\n          type: string\n          description: Creation timestamp in UTC in [RFC3339](https://tools.ietf.org/html/rfc3339) format.\n          format: date-time\n          example: '2018-10-16T09:10:00Z'\n        createdBy:\n          type: string\n          description: Identifier of the user who created the resource.\n          example: 0000000006743FDD\n        modifiedAt:\n          type: string\n          description: Last modification timestamp in UTC.\n          format: date-time\n          example: '2018-10-16T09:10:00Z'\n        modifiedBy:\n          type: string\n          description: Identifier of the user who last modified the resource.\n          example: 0000000006743FE8\n    UpdateFolderRequest:\n      required:\n        - name\n      type: object\n      properties:\n        name:\n          maxLength: 128\n          minLength: 1\n          type: string\n          description: The name of the folder.\n          example: SampleFolder\n        description:\n          maxLength: 255\n          minLength: 0\n          type: string\n          description: The description of the folder.\n          example: This is a sample folder.\n    BeginAsyncJobResponse:\n      required:\n        - id\n      type: object\n      properties:\n        id:\n          type: string\n          description: Identifier to get the status of an asynchronous job.\n          example: C03E086C137F38B4\n    AsyncJobStatus:\n      required:\n        - status\n      type: object\n      properties:\n        status:\n          type: string\n          description: Whether or not the request is in progress (`InProgress`), has completed successfully (`Success`), or has completed with an error (`Failed`).\n        statusMessage:\n          type: string\n          description: Additional status message generated if the status is not `Failed`.\n        error:\n          $ref: '#/components/schemas/ErrorDescription'\n      example:\n        status: Success\n        statusMessage: ''\n    ContentList:\n      required:\n        - data\n      type: object\n      properties:\n        data:\n          type: array\n          description: A list of the content items.\n          items:\n            $ref: '#/components/schemas/Content'\n    ContentPermissionResult:\n      required:\n        - explicitPermissions\n      type: object\n      properties:\n        explicitPermissions:\n          type: array\n          description: Explicitly assigned content permissions.\n          items:\n            $ref: '#/components/schemas/ContentPermissionAssignment'\n        implicitPermissions:\n          type: array\n          description: Implicitly inherited content permissions.\n          items:\n            $ref: '#/components/schemas/ContentPermissionAssignment'\n    ContentPermissionAssignment:\n      required:\n        - contentId\n        - permissionName\n        - sourceId\n        - sourceType\n      type: object\n      properties:\n        permissionName:\n          pattern: ^(View|GrantView|Edit|GrantEdit|Manage|GrantManage)$\n          type: string\n          description: 'Content permission name. Valid values are: `View`, `GrantView`, `Edit`, `GrantEdit`, `Manage`, and `GrantManage`.'\n          x-pattern-message: 'must be one of the following: `View`, `GrantView`, `Edit`, `GrantEdit`, `Manage`, `GrantManage`'\n        sourceType:\n          pattern: ^(user|role|org)$\n          type: string\n          description: 'Type of source for the permission. Valid values are: `user`, `role`, and `org`.'\n          example: role\n          x-pattern-message: 'must be one of the following: `user`, `role`, `org`'\n        sourceId:\n          type: string\n          description: An identifier that belongs to the source type chosen above. For e.g. if the sourceType is set to \"user\", sourceId should be identifier of a user (same goes for `role` and `org` sourceType)\n        contentId:\n          type: string\n          description: Unique identifier for the content item.\n    ContentPermissionUpdateRequest:\n      required:\n        - contentPermissionAssignments\n        - notificationMessage\n        - notifyRecipients\n      type: object\n      properties:\n        contentPermissionAssignments:\n          type: array\n          description: Content permissions to be updated.\n          items:\n            $ref: '#/components/schemas/ContentPermissionAssignment'\n        notifyRecipients:\n          type: boolean\n          description: Set this to \"true\" to notify the users who had a permission update.\n        notificationMessage:\n          type: string\n          description: The notification message sent to the users who had a permission update.\n    ContentPath:\n      required:\n        - path\n      type: object\n      properties:\n        path:\n          type: string\n          description: Path of the content item.\n          example: /Library/Users/user@test.com/SampleFolder\n    ContentSyncDefinition:\n      required:\n        - name\n        - type\n      type: object\n      properties:\n        type:\n          type: string\n          description: |-\n            The content item type.\n            **Note:**\n             - `MewboardSyncDefinition` _is depreciated, and will soon be removed. Please use_ `DashboardV2SyncDefinition`\n               _instead_.\n             - Dashboard links are not supported for dashboards.\n        name:\n          type: string\n          description: The name of the item.\n      discriminator:\n        propertyName: type\n  parameters: {}\n  responses: {}\n  securitySchemes: {}\n  callbacks: {}\n  examples: {}\n  requestBodies: {}\n  headers: {}\n  links: {}\n  x-stackQL-resources:\n    folders:\n      id: sumologic.content.folders\n      name: folders\n      title: Folders\n      methods:\n        createFolder:\n          operation:\n            $ref: '#/paths/~1v2~1content~1folders/post'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        getFolder:\n          operation:\n            $ref: '#/paths/~1v2~1content~1folders~1{id}/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        updateFolder:\n          operation:\n            $ref: '#/paths/~1v2~1content~1folders~1{id}/put'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select:\n          - $ref: '#/components/x-stackQL-resources/folders/methods/getFolder'\n        insert:\n          - $ref: '#/components/x-stackQL-resources/folders/methods/createFolder'\n        update: []\n        delete: []\n    folders_personal:\n      id: sumologic.content.folders_personal\n      name: folders_personal\n      title: Folders_personal\n      methods:\n        getPersonalFolder:\n          operation:\n            $ref: '#/paths/~1v2~1content~1folders~1personal/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select:\n          - $ref: '#/components/x-stackQL-resources/folders_personal/methods/getPersonalFolder'\n        insert: []\n        update: []\n        delete: []\n    folders_global:\n      id: sumologic.content.folders_global\n      name: folders_global\n      title: Folders_global\n      methods:\n        getGlobalFolderAsync:\n          operation:\n            $ref: '#/paths/~1v2~1content~1folders~1global/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select:\n          - $ref: '#/components/x-stackQL-resources/folders_global/methods/getGlobalFolderAsync'\n        insert: []\n        update: []\n        delete: []\n    folders_global_status:\n      id: sumologic.content.folders_global_status\n      name: folders_global_status\n      title: Folders_global_status\n      methods:\n        getGlobalFolderAsyncStatus:\n          operation:\n            $ref: '#/paths/~1v2~1content~1folders~1global~1{jobId}~1status/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select:\n          - $ref: '#/components/x-stackQL-resources/folders_global_status/methods/getGlobalFolderAsyncStatus'\n        insert: []\n        update: []\n        delete: []\n    folders_global_result:\n      id: sumologic.content.folders_global_result\n      name: folders_global_result\n      title: Folders_global_result\n      methods:\n        getGlobalFolderAsyncResult:\n          operation:\n            $ref: '#/paths/~1v2~1content~1folders~1global~1{jobId}~1result/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n            objectKey: $.data\n      sqlVerbs:\n        select:\n          - $ref: '#/components/x-stackQL-resources/folders_global_result/methods/getGlobalFolderAsyncResult'\n        insert: []\n        update: []\n        delete: []\n    folders_admin_recommended:\n      id: sumologic.content.folders_admin_recommended\n      name: folders_admin_recommended\n      title: Folders_admin_recommended\n      methods:\n        getAdminRecommendedFolderAsync:\n          operation:\n            $ref: '#/paths/~1v2~1content~1folders~1adminRecommended/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select:\n          - $ref: '#/components/x-stackQL-resources/folders_admin_recommended/methods/getAdminRecommendedFolderAsync'\n        insert: []\n        update: []\n        delete: []\n    folders_admin_recommended_status:\n      id: sumologic.content.folders_admin_recommended_status\n      name: folders_admin_recommended_status\n      title: Folders_admin_recommended_status\n      methods:\n        getAdminRecommendedFolderAsyncStatus:\n          operation:\n            $ref: '#/paths/~1v2~1content~1folders~1adminRecommended~1{jobId}~1status/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select:\n          - $ref: '#/components/x-stackQL-resources/folders_admin_recommended_status/methods/getAdminRecommendedFolderAsyncStatus'\n        insert: []\n        update: []\n        delete: []\n    folders_admin_recommended_result:\n      id: sumologic.content.folders_admin_recommended_result\n      name: folders_admin_recommended_result\n      title: Folders_admin_recommended_result\n      methods:\n        getAdminRecommendedFolderAsyncResult:\n          operation:\n            $ref: '#/paths/~1v2~1content~1folders~1adminRecommended~1{jobId}~1result/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select:\n          - $ref: '#/components/x-stackQL-resources/folders_admin_recommended_result/methods/getAdminRecommendedFolderAsyncResult'\n        insert: []\n        update: []\n        delete: []\n    permissions:\n      id: sumologic.content.permissions\n      name: permissions\n      title: Permissions\n      methods:\n        getContentPermissions:\n          operation:\n            $ref: '#/paths/~1v2~1content~1{id}~1permissions/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select:\n          - $ref: '#/components/x-stackQL-resources/permissions/methods/getContentPermissions'\n        insert: []\n        update: []\n        delete: []\n    permissions_add:\n      id: sumologic.content.permissions_add\n      name: permissions_add\n      title: Permissions_add\n      methods:\n        addContentPermissions:\n          operation:\n            $ref: '#/paths/~1v2~1content~1{id}~1permissions~1add/put'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select: []\n        insert: []\n        update: []\n        delete: []\n    permissions_remove:\n      id: sumologic.content.permissions_remove\n      name: permissions_remove\n      title: Permissions_remove\n      methods:\n        removeContentPermissions:\n          operation:\n            $ref: '#/paths/~1v2~1content~1{id}~1permissions~1remove/put'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select: []\n        insert: []\n        update: []\n        delete: []\n    path:\n      id: sumologic.content.path\n      name: path\n      title: Path\n      methods:\n        getItemByPath:\n          operation:\n            $ref: '#/paths/~1v2~1content~1path/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        getPathById:\n          operation:\n            $ref: '#/paths/~1v2~1content~1{contentId}~1path/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select:\n          - $ref: '#/components/x-stackQL-resources/path/methods/getPathById'\n          - $ref: '#/components/x-stackQL-resources/path/methods/getItemByPath'\n        insert: []\n        update: []\n        delete: []\n    export:\n      id: sumologic.content.export\n      name: export\n      title: Export\n      methods:\n        beginAsyncExport:\n          operation:\n            $ref: '#/paths/~1v2~1content~1{id}~1export/post'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select: []\n        insert: []\n        update: []\n        delete: []\n    export_status:\n      id: sumologic.content.export_status\n      name: export_status\n      title: Export_status\n      methods:\n        getAsyncExportStatus:\n          operation:\n            $ref: '#/paths/~1v2~1content~1{contentId}~1export~1{jobId}~1status/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select:\n          - $ref: '#/components/x-stackQL-resources/export_status/methods/getAsyncExportStatus'\n        insert: []\n        update: []\n        delete: []\n    export_result:\n      id: sumologic.content.export_result\n      name: export_result\n      title: Export_result\n      methods:\n        getAsyncExportResult:\n          operation:\n            $ref: '#/paths/~1v2~1content~1{contentId}~1export~1{jobId}~1result/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select:\n          - $ref: '#/components/x-stackQL-resources/export_result/methods/getAsyncExportResult'\n        insert: []\n        update: []\n        delete: []\n    folders_import:\n      id: sumologic.content.folders_import\n      name: folders_import\n      title: Folders_import\n      methods:\n        beginAsyncImport:\n          operation:\n            $ref: '#/paths/~1v2~1content~1folders~1{folderId}~1import/post'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select: []\n        insert: []\n        update: []\n        delete: []\n    folders_import_status:\n      id: sumologic.content.folders_import_status\n      name: folders_import_status\n      title: Folders_import_status\n      methods:\n        getAsyncImportStatus:\n          operation:\n            $ref: '#/paths/~1v2~1content~1folders~1{folderId}~1import~1{jobId}~1status/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select:\n          - $ref: '#/components/x-stackQL-resources/folders_import_status/methods/getAsyncImportStatus'\n        insert: []\n        update: []\n        delete: []\n    delete:\n      id: sumologic.content.delete\n      name: delete\n      title: Delete\n      methods:\n        beginAsyncDelete:\n          operation:\n            $ref: '#/paths/~1v2~1content~1{id}~1delete/delete'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select: []\n        insert: []\n        update: []\n        delete: []\n    delete_status:\n      id: sumologic.content.delete_status\n      name: delete_status\n      title: Delete_status\n      methods:\n        getAsyncDeleteStatus:\n          operation:\n            $ref: '#/paths/~1v2~1content~1{id}~1delete~1{jobId}~1status/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select:\n          - $ref: '#/components/x-stackQL-resources/delete_status/methods/getAsyncDeleteStatus'\n        insert: []\n        update: []\n        delete: []\n    copy:\n      id: sumologic.content.copy\n      name: copy\n      title: Copy\n      methods:\n        beginAsyncCopy:\n          operation:\n            $ref: '#/paths/~1v2~1content~1{id}~1copy/post'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select: []\n        insert: []\n        update: []\n        delete: []\n    copy_status:\n      id: sumologic.content.copy_status\n      name: copy_status\n      title: Copy_status\n      methods:\n        asyncCopyStatus:\n          operation:\n            $ref: '#/paths/~1v2~1content~1{id}~1copy~1{jobId}~1status/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select: []\n        insert: []\n        update: []\n        delete: []\n    move:\n      id: sumologic.content.move\n      name: move\n      title: Move\n      methods:\n        moveItem:\n          operation:\n            $ref: '#/paths/~1v2~1content~1{id}~1move/post'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select: []\n        insert: []\n        update: []\n        delete: []\nopenapi: 3.0.0\nservers:\n  - url: https://api.{region}.sumologic.com/api\n    variables:\n      region:\n        description: SumoLogic region\n        enum:\n          - us2\n          - au\n          - ca\n          - de\n          - eu\n          - fed\n          - in\n          - jp\n        default: us2\n    description: The SumoLogic regional endpoint\nsecurity:\n  - basicAuth: []\ntags:\n  - name: accountManagement\n    description: |\n      Account Management API.\n\n      Manage the custom subdomain for the URL used to access your Sumo Logic account. For more information see [Manage Organization](https://help.sumologic.com/Manage/01Account_Usage/05Manage_Organization).\n    x-displayName: Account\n  - name: appManagement\n    description: |\n      App installation API.\n\n      View and install Sumo Logic Applications that deliver out-of-the-box dashboards, saved searches, and field extraction for popular data sources. For more information see [Sumo Logic Apps](https://help.sumologic.com/07Sumo-Logic-Apps).\n    x-displayName: Apps (Beta)\n  - name: connectionManagement\n    description: |\n      Connection management API.\n\n      Set up connections to send alerts to other tools. For more information see [Connections and Integrations](https://help.sumologic.com/?cid=1044).\n    x-displayName: Connections\n  - name: contentManagement\n    description: |\n      Content management API.\n\n      You can export, import, delete and copy content in your organization’s Library. For more information see [Library](https://help.sumologic.com/?cid=5173). You can perform the request as a Content Administrator by using the `isAdminMode` parameter. For more information see [Admin Mode](https://help.sumologic.com/Manage/Content_Sharing/Admin_Mode).\n      \u003cbr/\u003e \u003cbr/\u003e\n      ### Example\n      The following example uses API endpoints in the US1 deployment. Sumo Logic has several deployments that are assigned depending on the geographic location and the date an account is created. For details determining your account's deployment see [API endpoints](https://help.sumologic.com/?cid=3011).\n      The [Content Import API](#operation/beginAsyncImport) can be used to create or update a Search, Scheduled Search, or Dashboard. Here is an example creating a Scheduled Search:\n      1. Get the identifier of your `Personal` folder.\n        ```bash\n        curl -X GET -u \"\u003caccessId\u003e:\u003caccessKey\u003e\" https://api.sumologic.com/api/v2/content/folders/personal\n        ```\n\n        Find the identifier of your `Personal` folder in the response.\n        ```json\n        {\n            ...\n            \"id\": \"0000000006A2E86F\", \u003c----\n            \"name\": \"Personal\",\n            \"itemType\": \"Folder\",\n            ...\n        }\n        ```\n\n        You can use [getFolder](#operation/getFolder), [getAdminRecommededFolder](#operation/getAdminRecommendedFolderAsync),\n        or [getGlobalFolder](#operation/getGlobalFolderAsync) endpoints to traverse the content tree and find the identifier of any\n        folder you want to manage.\n\n      2. Use the [Content Import API](#operation/beginAsyncImport) to create a new Scheduled Search inside your\n        `Personal` folder.\n        ```bash\n        curl -X POST -u \"\u003caccessId\u003e:\u003caccessKey\u003e\" -H \"Content-Type: application/json\" -d @search.json https://api.sumologic.com/api/v2/content/folders/0000000006A2E86F/import\n        ```\n\n        The data file `search.json` in the above command has the following `SavedSearchWithScheduleSyncDefinition` object.\n        ```json\n        // file: search.json\n        {\n            \"type\": \"SavedSearchWithScheduleSyncDefinition\",\n            \"name\": \"demo-scheduled-search\",\n            \"description\": \"Runs every hour with timerange of 15m and sends email notifications\",\n            \"search\": {\n                \"queryText\": \"\\\"error\\\" and \\\"warn\\\"\",\n                \"defaultTimeRange\": \"-15m\",\n                \"byReceiptTime\": false,\n                \"viewName\": \"\",\n                \"viewStartTime\": null,\n                \"queryParameters\": []\n            },\n            \"searchSchedule\": {\n                \"cronExpression\": \"0 0/15 * * * ? *\",\n                \"displayableTimeRange\": \"-15m\",\n                \"parseableTimeRange\": {\n                    \"from\": {\n                        \"relativeTime\": \"-15m\",\n                        \"type\": \"RelativeTimeRangeBoundary\"\n                    },\n                    \"to\": null,\n                    \"type\": \"BeginBoundedTimeRange\"\n                },\n                \"timeZone\": \"America/Los_Angeles\",\n                \"threshold\": null,\n                \"notification\": {\n                    \"taskType\": \"EmailSearchNotificationSyncDefinition\",\n                    \"toList\": [\n                        \"ops@acme.org\"\n                    ],\n                    \"subjectTemplate\": \"Search Results: {{SearchName}}\",\n                    \"includeQuery\": true,\n                    \"includeResultSet\": true,\n                    \"includeHistogram\": true,\n                    \"includeCsvAttachment\": false\n                },\n                \"muteErrorEmails\": false,\n                \"scheduleType\": \"1Hour\",\n                \"parameters\": []\n            }\n        }\n        ```\n\n        The response of above request will have the job identifier that you can use to track the status of the import job.\n        ```json\n        {\n            \"id\": \"74DC17FA765C7443\"\n        }\n        ```\n\n      3. Use the job identifier from the import request to get the [status](#operation/getAsyncImportStatus) of the\n        import job.\n        ```bash\n        curl -X GET -u \"\u003caccessId\u003e:\u003caccessKey\u003e\" https://api.sumologic.com/api/v2/content/folders/0000000006A2E86F/import/74DC17FA765C7443/status\n        ```\n\n        If you are importing a large item, you might have to wait for the import job to finish. The following is an\n        example response from a completed job.\n        ```json\n        {\n            \"status\": \"Success\",\n            \"statusMessage\": null,\n            \"error\": null\n        }\n        ```\n    x-displayName: Content\n  - name: contentPermissions\n    description: |\n      Content permissions API.\n\n      You can share your folders, searches, and dashboards with specific users or roles. For more information see [Share Content](https://help.sumologic.com/?cid=8675309). You can perform the request as a Content Administrator by using the `isAdminMode` parameter. For more information see [Admin Mode](https://help.sumologic.com/Manage/Content_Sharing/Admin_Mode).\n    x-displayName: Permissions\n  - name: dashboardManagement\n    description: |\n      Dashboard (New) management API.\n\n      Dashboard (New) allows you to analyze metric and log data on the same dashboard, in a seamless view. This gives you control over the visual display of metric and log data. Dashboard (New) streamlines dashboard configurations and on-the-fly analytic visualizations with its new templating features. For more information see [Dashboard (New)](https://help.sumologic.com/?cid=5500).\n    x-displayName: Dashboard (New)\n  - name: dynamicParsingRuleManagement\n    description: |\n      Dynamic Parsing management API.\n\n      Dynamic Parsing allows automatic field extraction from your log messages when you run a search.  This allows you to view fields from logs without having to manually specify parsing logic. For more information  see [Dynamic Parsing](https://help.sumologic.com/?cid=20011).\n    x-displayName: Dynamic Parsing\n  - name: extractionRuleManagement\n    description: |\n      Field Extraction Rule management API.\n\n      Field Extraction Rules allow you to parse fields from your log messages at the time the messages are ingested eliminating the need to parse fields in your query. For more information see [Manage Field Extraction](https://help.sumologic.com/?cid=5313).\n    x-displayName: Field Extraction Rules\n  - name: fieldManagementV1\n    description: |\n      Field management API.\n\n      Fields allow you to reference log data based on meaningful associations. They act as metadata tags that are assigned to your logs so you can search with them. Each field contains a key-value pair, where the field name is the key. Fields may be referred to as Log Metadata Fields. For more information see [Fields](https://help.sumologic.com/?cid=10116).\n    x-displayName: Field Management\n  - name: folderManagement\n    description: |\n      Folder management API.\n\n      You can add folders and subfolders to the Library in order to organize your content for easy access or to share content. For more information see [Add Folders to the Library](https://help.sumologic.com/?cid=5020). You can perform the request as a Content Administrator by using the `isAdminMode` parameter. For more information see [Admin Mode](https://help.sumologic.com/Manage/Content_Sharing/Admin_Mode).\n    x-displayName: Folders\n  - name: ingestBudgetManagementV1\n    description: |\n      Ingest Budget management API.\n\n      Ingest Budgets allow you to control the capacity of daily ingestion volume sent to Sumo Logic from Collectors. For more information see [Ingest Budgets](https://help.sumologic.com/?cid=5235).\n    x-displayName: Ingest Budgets\n  - name: ingestBudgetManagementV2\n    description: |\n      Ingest Budget management API V2.\n\n      Ingest Budgets V2 provide you the ability to create and assign budgets to your log data by Fields instead of using a Field Value. For more information see [Metadata Ingest Budgets](https://help.sumologic.com/?cid=52352).\n    x-displayName: Ingest Budgets V2\n  - name: partitionManagement\n    description: |\n      Partition management API.\n\n      Creating a Partition allows you to improve search performance by searching over a smaller number of messages. For more information see [Manage Partitions](https://help.sumologic.com/?cid=5231).\n    x-displayName: Partitions\n  - name: logsDataForwardingManagement\n    description: |\n      Logs Data Forwarding management API.\n\n      Logs Data Forwarding allows you to forward log data from a Partition or Scheduled View to an S3 bucket. For more information see [Forwarding Data to S3](https://help.sumologic.com/Manage/Data-Forwarding/Configure-Data-Forwarding-from-Sumo-Logic-to-S3).\n    x-displayName: Logs Data Forwarding\n  - name: roleManagement\n    description: |\n      Role management API.\n\n      Roles determine the functions that users are able to perform in Sumo Logic. To manage roles, you must have an administrator role or your role must have been assigned the manage users and roles capability. For more information see [Manage Roles](https://help.sumologic.com/?cid=5234).\n    x-displayName: Roles\n  - name: lookupManagement\n    description: |\n      Lookup Table management API.\n\n      A Lookup Table is a table of data hosted on Sumo Logic that you can use to enrich the log and event data received by Sumo Logic. You must create a table schema before you can populate the table. For more information see [Lookup Tables](https://help.sumologic.com/?cid=10109).\n    x-displayName: Lookup Tables\n  - name: scheduledViewManagement\n    description: |\n      Scheduled View management API.\n\n      Scheduled Views speed the search process for small and historical subsets of your data by functioning as a pre-aggregated index. For more information see [Manage Scheduled Views](https://help.sumologic.com/?cid=5128).\n    x-displayName: Scheduled Views\n  - name: tokensLibraryManagement\n    description: |\n      Tokens management API.\n\n      Tokens are associated with your organization to authorize specific operations. Currently, we support collector registration tokens, which can be used to register Installed Collectors. Managing tokens requires the Manage Tokens role capability. For more information see [Installation Tokens](https://help.sumologic.com/?cid=0100).\n    x-displayName: Tokens\n  - name: transformationRuleManagement\n    description: |\n      Transformation Rule management API.\n      Metrics Transformation Rules allow you control how long raw metrics are retained. You can also aggregate metrics at collection time and specify a separate retention period for the aggregated metrics. For more information see [Metrics Transformation Rules](https://help.sumologic.com/?cid=10117).\n    x-displayName: Transformation Rules (Beta)\n  - name: userManagement\n    description: |\n      User management API.\n\n      To manage users, you must have the administrator role or your role must have been assigned the manage users and roles capability. For more information see [Manage Users](https://help.sumologic.com/?cid=1006).\n    x-displayName: Users\n  - name: metricsSearchesManagement\n    description: |\n      Metrics Search management API.\n\n      Save metrics searches in the content library and organize them in a folder hierarchy. Share useful queries with users in your organization. For more information see [Sharing Metric Charts](https://help.sumologic.com/Metrics/03-Metric-Charts/Share_a_Metric_Chart).\n    x-displayName: Metrics Searches (Beta)\n  - name: metricsQuery\n    description: |\n      Metrics Query API.\n\n      The Metrics Query API allows you to execute queries on various metrics and retrieve multiple time-series (data-points) over time range(s). For more information see [Metrics - Classic](https://help.sumologic.com/?cid=1079).\n    x-displayName: Metrics Query\n  - name: accessKeyManagement\n    description: |\n      Access Key management API.\n\n      Access Keys allow you to securely register new Collectors and access Sumo Logic APIs. For more information see [Access Keys](https://help.sumologic.com/?cid=6690).\n    x-displayName: Access Keys\n  - name: samlConfigurationManagement\n    description: |\n      SAML configuration management API\n\n      Organizations with Enterprise accounts can provision Security Assertion Markup Language (SAML) 2.0 to enable Single Sign-On (SSO) for user access to Sumo Logic. For more information see [SAML Configuration](https://help.sumologic.com/?cid=4016).\n    x-displayName: SAML Configuration\n  - name: serviceAllowlistManagement\n    description: |\n      Service Allowlist management API\n\n      Service Allowlist Settings allow you to explicitly grant access to specific IP addresses and/or CIDR notations for logins, APIs, and dashboard access. For more information see [Service Allowlist Settings](https://help.sumologic.com/?cid=5454).\n    x-displayName: Service Allowlist\n  - name: healthEvents\n    description: |\n      Health Events management API.\n\n      Health Events allow you to keep track of the health of your Collectors and Sources. You can use them to find and investigate common errors and warnings that are known to cause collection issues. For more information see [Health Events](https://help.sumologic.com/?cid=0020).\n    x-displayName: Health Events\n  - name: archiveManagement\n    description: |-\n      Archive Ingestion Management API.\n\n      Archive Ingestion allows you to ingest data from Archive destinations. You can use this API to ingest data from your Archive with an existing AWS S3 Archive Source. You need the Manage or View Collectors role capability to manage or view ingestion jobs. For more information see [Archive](https://help.sumologic.com/?cid=10011).\n    x-displayName: Archive Ingestion Management\n  - name: logSearchesEstimatedUsage\n    description: |\n      Log Search Estimated Usage API.\n\n      Gets the estimated volume of data that would be scanned for a given log search in the Infrequent data tier, over a particular time range. In the Infrequent Data Tier, you pay per query, based on the amount data scanned. You can use this endpoint to get an estimate of the total data that would be scanned before running a query, and refine your query to scan less data, as necessary. For more information see [Infrequent data tier](https://help.sumologic.com/?cid=11987).\n    x-displayName: Log Search Estimated Usage\n  - name: passwordPolicy\n    description: |\n      Password Policy Management API\n\n      The password policy controls how user passwords are managed. The \"Manage Password Policy\" role capability is required to update the password policy. For more information see [how to set a password policy](https://help.sumologic.com/?cid=8595).\n    x-displayName: Password Policy\n  - name: policiesManagement\n    description: |\n      Policies management API.\n\n      Policies control the security and share settings of your organization. For more information see [Security](https://help.sumologic.com/?cid=4041).\n    x-displayName: Policies\n  - name: traces\n    description: |\n      Traces API\n\n      The Traces API allows you to browse traces collected in the system. You can execute queries to find traces matching provided search criteria as well as gather detailed information about individual traces and spans. For more information see [View and investigate traces](https://help.sumologic.com/Traces/View_and_investigate_traces).\n    x-displayName: Traces\n  - name: spanAnalytics\n    description: |\n      Span Analytics API\n\n      The Span Analytics API allows you to browse spans collected in the system. You can execute queries to find individual spans matching provided search criteria as well as run aggregated span queries and retrieve their results. For more information see [Spans](https://help.sumologic.com/Traces/Spans).\n    x-displayName: Span Analytics\n  - name: serviceMap\n    description: |\n      Service Map API\n\n      The Service Map API allows you to fetch a graph representation of the Service Map, which is a high-level view of your application environment, automatically derived from tracing data. For more information see [Service Map](https://help.sumologic.com/Traces/Service_Map_and_Dashboards#service-map).\n    x-displayName: Service Map\n  - name: slosLibraryManagement\n    description: |\n      SLO Management API.\n\n      SLOs are used to monitor and alert on KPIs for your most important services or user experience.\n    x-displayName: SLOs\n  - name: monitorsLibraryManagement\n    description: |\n      Monitor Management API.\n\n\n      Monitors continuously query your data to monitor and send notifications when specific events occur.\n      For more information see [Monitors](https://help.sumologic.com/?cid=10020).\n    x-displayName: Monitors\ninfo:\n  title: Sumo Logic API - content\n  description: content\n  version: 1.0.0\n  x-logo:\n    url: ./sumologic_logo.png\n",
			"canonicalURL": "/github.com/stackql/stackql-provider-registry@e5179141fc8f11e177fa608414aa3177e17c38b7/-/blob/providers/src/sumologic/v0.1.1/services/content.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/stackql/stackql-provider-registry/blob/e5179141fc8f11e177fa608414aa3177e17c38b7/providers/src/sumologic/v0.1.1/services/content.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/v2/content/folders\": post: operation \"createFolder\": security: at providers/src/sumologic/v0.1.1/services/content.yaml:1577:5: unknown security scheme \"basicAuth\""
}