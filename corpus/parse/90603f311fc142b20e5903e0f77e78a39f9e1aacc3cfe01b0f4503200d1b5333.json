{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ifize/api_yamdb"
		},
		"file": {
			"name": "redoc.yaml",
			"size": 0,
			"path": "api_yamdb/static/redoc.yaml",
			"byteSize": 41177,
			"content": "openapi: 3.0.2\ninfo:\n  title: 'YaMDb API'\n  version: ''\n  description: |\n    запросы к API начинаются с `/api/v1/`\n\n    # Описание\n    Проект **YaMDb** собирает отзывы пользователей на различные произведения.\n\n    # Алгоритм регистрации пользователей\n    1. Пользователь отправляет POST-запрос на добавление нового пользователя с параметрами `email` и `username` на эндпоинт `/api/v1/auth/signup/`.\n    2. **YaMDB** отправляет письмо с кодом подтверждения (`confirmation_code`) на адрес  `email`.\n    3. Пользователь отправляет POST-запрос с параметрами `username` и `confirmation_code` на эндпоинт `/api/v1/auth/token/`, в ответе на запрос ему приходит `token` (JWT-токен).\n    4. При желании пользователь отправляет PATCH-запрос на эндпоинт `/api/v1/users/me/` и заполняет поля в своём профайле (описание полей — в документации).\n\n    # Пользовательские роли\n    - **Аноним** — может просматривать описания произведений, читать отзывы и комментарии.\n    - **Аутентифицированный пользователь** (`user`) — может, как и **Аноним**, читать всё, дополнительно он может публиковать отзывы и ставить оценку произведениям (фильмам/книгам/песенкам), может комментировать чужие отзывы; может редактировать и удалять **свои** отзывы и комментарии. Эта роль присваивается по умолчанию каждому новому пользователю.\n    - **Модератор** (`moderator`) — те же права, что и у **Аутентифицированного пользователя** плюс право удалять **любые** отзывы и комментарии.\n    - **Администратор** (`admin`) — полные права на управление всем контентом проекта. Может создавать и удалять произведения, категории и жанры. Может назначать роли пользователям. \n    - **Суперюзер Django** — обладет правами администратора (`admin`)\n\n\nservers:\n  - url: /api/v1/\n\ntags:\n  - name: AUTH\n    description: Регистрация пользователей и выдача токенов\n  - name: CATEGORIES\n    description: Категории (типы) произведений\n  - name: GENRES\n    description: Категории жанров\n  - name: TITLES\n    description: Произведения, к которым пишут отзывы (определённый фильм, книга или песенка).\n  - name: REVIEWS\n    description: Отзывы\n  - name: COMMENTS\n    description: Комментарии к отзывам\n  - name: USERS\n    description: Пользователи\n\npaths:\n  /auth/signup/:\n    post:\n      tags:\n        - AUTH\n      operationId: Регистрация нового пользователя\n      description: |\n        Получить код подтверждения на переданный `email`.\n\n        Права доступа: **Доступно без токена.**\n\n        Использовать имя 'me' в качестве `username` запрещено.\n\n        Поля `email` и `username` должны быть уникальными.\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - email\n                - username\n              properties:\n                email:\n                  type: string\n                username:\n                  type: string\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                properties:\n                  email:\n                    type: string\n                  username:\n                    type: string\n                required:\n                - email\n                - username\n          description: 'Удачное выполнение запроса'\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n          description: 'Отсутствует обязательное поле или оно некорректно'\n  /auth/token/:\n    post:\n      tags:\n        - AUTH\n      operationId: Получение JWT-токена\n      description: |\n        Получение JWT-токена в обмен на username и confirmation code.\n\n        Права доступа: **Доступно без токена.**\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - username\n                - confirmation_code\n              properties:\n                username:\n                  type: string\n                confirmation_code:\n                  type: string\n                  writeOnly: true\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Token'\n          description: 'Удачное выполнение запроса'\n        400:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n          description: 'Отсутствует обязательное поле или оно некорректно'\n        404:\n          description: Пользователь не найден\n\n  /categories/:\n    get:\n      tags:\n        - CATEGORIES\n      operationId: Получение списка всех категорий\n      description: |\n        Получить список всех категорий\n\n        Права доступа: **Доступно без токена**\n      parameters:\n      - name: search\n        in: query\n        description: Поиск по названию категории\n        schema:\n          type: string\n      responses:\n        200:\n          description: Удачное выполнение запроса\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    count:\n                      type: integer\n                    next:\n                      type: string\n                    previous:\n                      type: string\n                    results:\n                      type: array\n                      items:\n                        $ref: '#/components/schemas/Category'\n    post:\n      tags:\n        - CATEGORIES\n      operationId: Добавление новой категории\n      description: |\n        Создать категорию.\n\n        Права доступа: **Администратор.**\n\n        Поле `slug` каждой категории должно быть уникальным.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Category'\n      responses:\n        201:\n          description: Удачное выполнение запроса\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Category'\n        400:\n          description: 'Отсутствует обязательное поле или оно некорректно'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n        401:\n          description: Необходим JWT-токен\n        403:\n          description: Нет прав доступа\n      security:\n      - jwt-token:\n        - write:admin\n  /categories/{slug}/:\n    delete:\n      tags:\n        - CATEGORIES\n      operationId: Удаление категории\n      description: |\n        Удалить категорию.\n\n        Права доступа: **Администратор.**\n      parameters:\n      - name: slug\n        in: path\n        required: true\n        description: Slug категории\n        schema:\n          type: string\n      responses:\n        204:\n          description: 'Удачное выполнение запроса'\n        401:\n          description: Необходим JWT-токен\n        403:\n          description: Нет прав доступа\n        404:\n          description: Категория не найдена\n      security:\n      - jwt-token:\n        - write:admin\n\n  /genres/:\n    get:\n      tags:\n        - GENRES\n      operationId: Получение списка всех жанров\n      description: |\n        Получить список всех жанров.\n\n        Права доступа: **Доступно без токена**\n      parameters:\n      - name: search\n        in: query\n        description: Поиск по названию жанра\n        schema:\n          type: string\n      responses:\n        200:\n          description: Удачное выполнение запроса\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    count:\n                      type: integer\n                    next:\n                      type: string\n                    previous:\n                      type: string\n                    results:\n                      type: array\n                      items:\n                        $ref: '#/components/schemas/Genre'\n    post:\n      tags:\n        - GENRES\n      operationId: Добавление жанра\n      description: |\n        Добавить жанр.\n\n        Права доступа: **Администратор**.\n\n        Поле `slug` каждого жанра должно быть уникальным.\n      responses:\n        201:\n          description: Удачное выполнение запроса\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Genre'\n        400:\n          description: 'Отсутствует обязательное поле или оно некорректно'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n        401:\n          description: Необходим JWT-токен\n        403:\n          description: Нет прав доступа\n      security:\n      - jwt-token:\n        - write:admin\n\n  /genres/{slug}/:\n    delete:\n      tags:\n        - GENRES\n      operationId: Удаление жанра\n      description: |\n        Удалить жанр.\n\n        Права доступа: **Администратор**.\n      parameters:\n      - name: slug\n        in: path\n        required: true\n        description: Slug жанра\n        schema:\n          type: string\n      responses:\n        204:\n          description: 'Удачное выполнение запроса'\n        401:\n          description: Необходим JWT-токен\n        403:\n          description: Нет прав доступа\n        404:\n          description: Жанр не найден\n      security:\n      - jwt-token:\n        - write:admin\n\n  /titles/:\n    get:\n      tags:\n        - TITLES\n      operationId: Получение списка всех произведений\n      description: |\n        Получить список всех объектов.\n\n        Права доступа: **Доступно без токена**\n      parameters:\n        - name: category\n          in: query\n          description: фильтрует по полю slug категории\n          schema:\n            type: string\n        - name: genre\n          in: query\n          description: фильтрует по полю slug жанра\n          schema:\n            type: string\n        - name: name\n          in: query\n          description: фильтрует по названию произведения\n          schema:\n            type: string\n        - name: year\n          in: query\n          description: фильтрует по году\n          schema:\n            type: integer\n      responses:\n        200:\n          description: Удачное выполнение запроса\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    count:\n                      type: integer\n                    next:\n                      type: string\n                    previous:\n                      type: string\n                    results:\n                      type: array\n                      items:\n                        $ref: '#/components/schemas/Title'\n    post:\n      tags:\n        - TITLES\n      operationId: Добавление произведения\n      description: |\n        Добавить новое произведение.\n\n        Права доступа: **Администратор**.\n\n        Нельзя добавлять произведения, которые еще не вышли (год выпуска не может быть больше текущего).\n\n        При добавлении нового произведения требуется указать уже существующие категорию и жанр.\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TitleCreate'\n      responses:\n        201:\n          description: Удачное выполнение запроса\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Title'\n        400:\n          description: 'Отсутствует обязательное поле или оно некорректно'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n        401:\n          description: Необходим JWT-токен\n        403:\n          description: Нет прав доступа\n      security:\n      - jwt-token:\n        - write:admin\n  /titles/{titles_id}/:\n    parameters:\n      - name: titles_id\n        in: path\n        required: true\n        description: ID объекта\n        schema:\n          type: integer\n    get:\n      tags:\n        - TITLES\n      operationId: Получение информации о произведении\n      description: |\n        Информация о произведении\n\n\n        Права доступа: **Доступно без токена**\n      responses:\n        200:\n          description: Удачное выполнение запроса\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Title'\n        404:\n          description: Объект не найден\n    patch:\n      tags:\n        - TITLES\n      operationId: Частичное обновление информации о произведении\n      description: |\n        Обновить информацию о произведении\n\n\n        Права доступа: **Администратор**\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TitleCreate'\n      responses:\n        200:\n          description: Удачное выполнение запроса\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Title'\n        401:\n          description: Необходим JWT-токен\n        403:\n          description: Нет прав доступа\n        404:\n          description: Объект не найден\n      security:\n      - jwt-token:\n        - write:admin\n    delete:\n      tags:\n        - TITLES\n      operationId: Удаление произведения\n      description: |\n        Удалить произведение.\n\n        Права доступа: **Администратор**.\n      responses:\n        204:\n          description: 'Удачное выполнение запроса'\n        401:\n          description: Необходим JWT-токен\n        403:\n          description: Нет прав доступа\n        404:\n          description: Произведение не найдено\n      security:\n      - jwt-token:\n        - write:admin\n\n  /titles/{title_id}/reviews/:\n    parameters:\n      - name: title_id\n        in: path\n        required: true\n        description: ID произведения\n        schema:\n          type: integer\n    get:\n      tags:\n        - REVIEWS\n      operationId: Получение списка всех отзывов\n      description: |\n        Получить список всех отзывов.\n\n        Права доступа: **Доступно без токена**.\n      responses:\n        200:\n          description: Удачное выполнение запроса\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    count:\n                      type: integer\n                    next:\n                      type: string\n                    previous:\n                      type: string\n                    results:\n                      type: array\n                      items:\n                        $ref: '#/components/schemas/Review'\n        404:\n          description: Произведение не найдено\n    post:\n      tags:\n        - REVIEWS\n      operationId: Добавление нового отзыва\n      description: |\n        Добавить новый отзыв. Пользователь может оставить только один отзыв на произведение.\n\n        Права доступа: **Аутентифицированные пользователи.**\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Review'\n      responses:\n        201:\n          description: 'Удачное выполнение запроса'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Review'\n        400:\n          description: 'Отсутствует обязательное поле или оно некорректно'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n        401:\n          description: Необходим JWT-токен\n        404:\n          description: Произведение не найдено\n      security:\n      - jwt-token:\n        - write:user,moderator,admin\n  /titles/{title_id}/reviews/{review_id}/:\n    parameters:\n      - name: title_id\n        in: path\n        required: true\n        description: ID произведения\n        schema:\n          type: integer\n      - name: review_id\n        in: path\n        required: true\n        description: ID отзыва\n        schema:\n          type: integer\n    get:\n      tags:\n        - REVIEWS\n      operationId: Полуение отзыва по id\n      description: |\n        Получить отзыв по id для указанного произведения.\n\n        Права доступа: **Доступно без токена.**\n      responses:\n        200:\n          description: Удачное выполнение запроса\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Review'\n        404:\n          description: Произведение или отзыв не найден\n    patch:\n      tags:\n        - REVIEWS\n      operationId: Частичное обновление отзыва по id\n      description: |\n        Частично обновить отзыв по id.\n\n        Права доступа: **Автор отзыва, модератор или администратор.**\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Review'\n      responses:\n        200:\n          description: Удачное выполнение запроса\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Review'\n        400:\n          description: 'Отсутствует обязательное поле или оно некорректно'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n        401:\n          description: Необходим JWT-токен\n        403:\n          description: Нет прав доступа\n        404:\n          description: Произведение не найдено\n      security:\n      - jwt-token:\n        - write:user,moderator,admin\n    delete:\n      tags:\n        - REVIEWS\n      operationId: Удаление отзыва по id\n      description: |\n        Удалить отзыв по id\n\n        Права доступа: **Автор отзыва, модератор или администратор.**\n      responses:\n        204:\n          description: 'Удачное выполнение запроса'\n        401:\n          description: Необходим JWT-токен\n        403:\n          description: Нет прав доступа\n        404:\n          description: Произведение или отзыв не найдены\n      security:\n      - jwt-token:\n        - write:user,moderator,admin\n\n  /titles/{title_id}/reviews/{review_id}/comments/:\n    parameters:\n      - name: title_id\n        in: path\n        required: true\n        description: ID произведения\n        schema:\n          type: integer\n      - name: review_id\n        in: path\n        required: true\n        description: ID отзыва\n        schema:\n          type: integer\n    get:\n      tags:\n        - COMMENTS\n      operationId: Получение списка всех комментариев к отзыву\n      description: |\n        Получить список всех комментариев к отзыву по id\n\n        Права доступа: **Доступно без токена.**\n      responses:\n        200:\n          description: Удачное выполнение запроса\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    count:\n                      type: integer\n                    next:\n                      type: string\n                    previous:\n                      type: string\n                    results:\n                      type: array\n                      items:\n                        $ref: '#/components/schemas/Comment'\n        404:\n          description: Не найдено произведение или отзыв\n    post:\n      tags:\n        - COMMENTS\n      operationId: Добавление комментария к отзыву\n      description: |\n        Добавить новый комментарий для отзыва.\n\n        Права доступа: **Аутентифицированные пользователи.**\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Comment'\n      responses:\n        201:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Comment'\n          description: 'Удачное выполнение запроса'\n        400:\n          description: 'Отсутствует обязательное поле или оно некорректно'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n        401:\n          description: Необходим JWT-токен\n        404:\n          description: Не найдено произведение или отзыв\n      security:\n      - jwt-token:\n        - write:user,moderator,admin\n\n  /titles/{title_id}/reviews/{review_id}/comments/{comment_id}/:\n    parameters:\n      - name: title_id\n        in: path\n        required: true\n        description: ID произведения\n        schema:\n          type: integer\n      - name: review_id\n        in: path\n        required: true\n        description: ID отзыва\n        schema:\n          type: integer\n      - name: comment_id\n        in: path\n        required: true\n        description: ID комментария\n        schema:\n          type: integer\n    get:\n      tags:\n        - COMMENTS\n      operationId: Получение комментария к отзыву\n      description: |\n        Получить комментарий для отзыва по id.\n\n        Права доступа: **Доступно без токена.**\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Comment'\n          description: 'Удачное выполнение запроса'\n        404:\n          description: Не найдено произведение, отзыв или комментарий\n    patch:\n      tags:\n        - COMMENTS\n      operationId: Частичное обновление комментария к отзыву\n      description: |\n        Частично обновить комментарий к отзыву по id.\n\n        Права доступа: **Автор комментария, модератор или администратор**.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Comment'\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Comment'\n          description: 'Удачное выполнение запроса'\n        400:\n          description: 'Отсутствует обязательное поле или оно некорректно'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n        401:\n          description: Необходим JWT-токен\n        403:\n          description: Нет прав доступа\n        404:\n          description: Не найдено произведение, отзыв или комментарий\n      security:\n      - jwt-token:\n        - write:user,moderator,admin\n    delete:\n      tags:\n        - COMMENTS\n      operationId: Удаление комментария к отзыву\n      description: |\n        Удалить комментарий к отзыву по id.\n\n        Права доступа: **Автор комментария, модератор или администратор**.\n      responses:\n        204:\n          description: 'Удачное выполнение запроса'\n        401:\n          description: Необходим JWT-токен\n        403:\n          description: Нет прав доступа\n        404:\n          description: Не найдено произведение, отзыв или комментарий\n      security:\n      - jwt-token:\n        - write:user,moderator,admin\n\n  /users/:\n    get:\n      tags:\n        - USERS\n      operationId: Получение списка всех пользователей\n      description: |\n        Получить список всех пользователей.\n\n        Права доступа: **Администратор**\n      parameters:\n      - name: search\n        in: query\n        description: Поиск по имени пользователя (username)\n        schema:\n          type: string\n      responses:\n        200:\n          description: Удачное выполнение запроса\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    count:\n                      type: integer\n                    next:\n                      type: string\n                    previous:\n                      type: string\n                    results:\n                      type: array\n                      items:\n                        $ref: '#/components/schemas/User'\n        401:\n          description: Необходим JWT-токен\n      security:\n      - jwt-token:\n        - read:admin\n    post:\n      tags:\n        - USERS\n      operationId: Добавление пользователя\n      description: |\n        Добавить нового пользователя.\n\n        Права доступа: **Администратор**\n\n        Поля `email` и `username` должны быть уникальными.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        201:\n          description: Удачное выполнение запроса\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        400:\n          description: 'Отсутствует обязательное поле или оно некорректно'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n        401:\n          description: Необходим JWT-токен\n        403:\n          description: Нет прав доступа\n      security:\n      - jwt-token:\n        - write:admin\n  /users/{username}/:\n    parameters:\n      - name: username\n        in: path\n        required: true\n        description: Username пользователя\n        schema:\n          type: string\n    get:\n      tags:\n        - USERS\n      operationId: Получение пользователя по username\n      description: |\n        Получить пользователя по username.\n\n        Права доступа: **Администратор**\n      responses:\n        200:\n          description: Удачное выполнение запроса\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        401:\n          description: Необходим JWT-токен\n        403:\n          description: Нет прав доступа\n        404:\n          description: Пользователь не найден\n      security:\n      - jwt-token:\n        - read:admin\n    patch:\n      tags:\n        - USERS\n      operationId: Изменение данных пользователя по username\n      description: |\n        Изменить данные пользователя по username.\n\n        Права доступа: **Администратор.**\n\n        Поля `email` и `username` должны быть уникальными.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        200:\n          description: Удачное выполнение запроса\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        400:\n          description: 'Отсутствует обязательное поле или оно некорректно'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n        401:\n          description: Необходим JWT-токен\n        403:\n          description: Нет прав доступа\n        404:\n          description: Пользователь не найден\n      security:\n      - jwt-token:\n        - write:admin\n    delete:\n      tags:\n        - USERS\n      operationId: Удаление пользователя по username\n      description: |\n        Удалить пользователя по username.\n\n        Права доступа: **Администратор.**\n      responses:\n        204:\n          description: Удачное выполнение запроса\n        401:\n          description: Необходим JWT-токен\n        403:\n          description: Нет прав доступа\n        404:\n          description: Пользователь не найден\n      security:\n      - jwt-token:\n        - write:admin\n\n  /users/me/:\n    get:\n      tags:\n        - USERS\n      operationId: Получение данных своей учетной записи\n      description: |\n        Получить данные своей учетной записи\n\n        Права доступа: **Любой авторизованный пользователь**\n      responses:\n        200:\n          description: Удачное выполнение запроса\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n      security:\n      - jwt-token:\n        - read:admin,moderator,user\n    patch:\n      tags:\n        - USERS\n      operationId: Изменение данных своей учетной записи\n      description: |\n        Изменить данные своей учетной записи\n\n        Права доступа: **Любой авторизованный пользователь**\n\n        Поля `email` и `username` должны быть уникальными.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Me'\n      responses:\n        200:\n          description: Удачное выполнение запроса\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        400:\n          description: 'Отсутствует обязательное поле или оно некорректно'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n      security:\n      - jwt-token:\n        - write:admin,moderator,user\n\ncomponents:\n  schemas:\n\n    User:\n      title: Пользователь\n      type: object\n      description: Детальная информация о пользователе\n      required:\n          - username\n          - email\n      properties:\n        username:\n          type: string\n          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_\n            only.\n          pattern: ^[\\w.@+-]+\\z\n          maxLength: 150\n        email:\n          type: string\n          format: email\n          maxLength: 254\n        first_name:\n          type: string\n          maxLength: 150\n        last_name:\n          type: string\n          maxLength: 150\n        bio:\n          type: string\n        role:\n          type: string\n          description: Администратор, модератор или пользователь. По умолчанию `user`.\n          enum:\n            - user\n            - moderator\n            - admin\n\n    Title:\n      title: Объект\n      type: object\n      required:\n        - name\n      properties:\n        id:\n          type: integer\n          title: ID произведения\n          readOnly: true\n        name:\n          type: string\n          title: Название\n        year:\n          type: integer\n          title: Год выпуска\n        rating:\n          type: integer\n          readOnly: True\n          title: Рейтинг на основе отзывов, если отзывов нет — `None`\n        description:\n          type: string\n          title: Описание\n        genre:\n          type: array\n          items:\n            $ref: '#/components/schemas/Genre'\n        category:\n          $ref: '#/components/schemas/Category'\n\n    TitleCreate:\n      title: Объект для изменения\n      type: object\n      required:\n        - name\n        - year\n        - genre\n        - category\n      properties:\n        name:\n          type: string\n          title: Название\n        year:\n          type: integer\n          title: Год выпуска\n        description:\n          type: string\n          title: Описание\n        genre:\n          type: array\n          items:\n            type: string\n            title: Slug жанра\n        category:\n          type: string\n          title: Slug категории\n\n    Genre:\n      type: object\n      properties:\n        name:\n          type: string\n          maxLength: 256\n        slug:\n          type: string\n          maxLength: 50\n          pattern: ^[-a-zA-Z0-9_]+$\n      required:\n      - name\n      - slug\n\n    Review:\n      title: Отзыв\n      type: object\n      description: Детальная информация отзыва\n      required:\n          - text\n          - score\n      properties:\n        id:\n          type: integer\n          title: ID  отзыва\n          readOnly: true\n        text:\n          type: string\n          title: Текст отзыва\n        author:\n          type: string\n          title: username пользователя\n          readOnly: true\n        score:\n          type: integer\n          title: Оценка\n          minimum: 1\n          maximum: 10\n        pub_date:\n          type: string\n          format: date-time\n          title: Дата публикации отзыва\n          readOnly: true\n\n    ValidationError:\n      title: Ошибка валидации\n      type: object\n      properties:\n        field_name:\n          type: array\n          items:\n            type: string\n\n    Token:\n      title: Токен\n      type: object\n      properties:\n        token:\n          type: string\n          title: access токен\n\n    Comment:\n      title: Комментарий\n      type: object\n      description: Детальная информация комментария\n      required:\n        - text\n      properties:\n        id:\n          type: integer\n          title: ID  комментария\n          readOnly: true\n        text:\n          type: string\n          title: Текст комментария\n        author:\n          type: string\n          title: username автора комментария\n          readOnly: true\n        pub_date:\n          type: string\n          format: date-time\n          title: Дата публикации комментария\n          readOnly: true\n\n    Me:\n      type: object\n      properties:\n        username:\n          type: string\n          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_\n            only.\n          pattern: ^[\\w.@+-]+\\z\n          maxLength: 150\n        role:\n          enum:\n          - admin\n          - moderator\n          - user\n          type: string\n          readOnly: true\n        email:\n          type: string\n          format: email\n          maxLength: 254\n        first_name:\n          type: string\n          maxLength: 150\n        last_name:\n          type: string\n          maxLength: 150\n        bio:\n          type: string\n      required:\n      - username\n      - email\n\n    Category:\n      type: object\n      properties:\n        name:\n          type: string\n          maxLength: 256\n        slug:\n          type: string\n          maxLength: 50\n          pattern: ^[-a-zA-Z0-9_]+$\n      required:\n      - name\n      - slug\n\n  securitySchemes:\n    jwt-token:\n      type: apiKey\n      description: Используется аутентификация с использованием JWT-токенов\n      name: Bearer\n      in: header\n",
			"canonicalURL": "/github.com/ifize/api_yamdb@5c5fc7c65aca841d2877fbf1f36093da82842b22/-/blob/api_yamdb/static/redoc.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ifize/api_yamdb/blob/5c5fc7c65aca841d2877fbf1f36093da82842b22/api_yamdb/static/redoc.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/categories/\": post: operation \"Добавление новой категории\": security: at 1:8348: list of scopes MUST be empty for \"type\" \"apiKey\""
}