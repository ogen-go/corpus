{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/AdobeDocs/experience-manager-cloud-service.en"
		},
		"file": {
			"name": "sync.yaml",
			"size": 0,
			"path": "help/forms/assets/sync.yaml",
			"byteSize": 17994,
			"content": "---\nopenapi: 3.0.0\ninfo:\n  description: |\n    AEM Forms as a Cloud Service - Communications APIs.\n\n    # Introduction\n\n    Communications APIs help you combine XFA-based XDP or PDF templates and Acrobat Forms (AcroForm) with XML data to generate print documents in various formats. It enable you to create applications that let you:\n\n    - Generate documents by populating template files with XML data. For example, receipts, bills, and statements.    \n\n    - Generate forms in various formats, including non-interactive PDF print\n    streams.\n\n    - Generate print PDFs from XFA form PDFs.\n\n    - Generate PDF, PostScript, PCL, and ZPL documents in bulk by merging\n    multiple sets of data with source templates.\n\n\n    You can find out more about document generation at\n\n    [AEM Forms as a Cloud Service - Communications\n    Overview](https://www.adobe.com/go/learn_aemformscs_communications_en)\n\n    # Before you start\n\n    Make user account of your developer or techincal account member of forms-user group. If you do not have a technical account, make a call to AEM as a Cloud Service. When you use service credential a techincal account is created on the first call.\n\n    # Set up Communicaions APIs\n\n    Contact formscsbeta@adobe.com to enable Communications APIs for your organization. Send name of your organization, program details, and email address of your AEM as a Cloud Service administrator. Also, set up a [local development environment](https://experienceleague.adobe.com/docs/experience-manager-forms-cloud-service/forms/setup-environment/setup-local-development-environment.html) to test and develop the functionality using Communication APIs locally. \n\n    \u003cSecurityDefinitions /\u003e\n\n  title: AEM Forms as a Cloud Service - Communications\n  version: 0.0.1\nservers:\n  - url: https://author-p8857-e10452-cmstg.adobeaemcloud.com/adobe/forms/doc/v1\n    description: Author Instance\n  - url: https://publish-p8857-e10452-cmstg.adobeaemcloud.com/adobe/forms/doc/v1\n    description: Publish instance\nsecurity:\n  - Token-based authentication: []\n  - Basic authentication: []\ntags:\n  - name: Communications Services\n    description: Communications Services Capabilities\n  - name: PrintedOutput\n    x-displayName: PrintedOutput\n    description: |\n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/PrintedOutput\" /\u003e\n  - name: PDFOutput\n    x-displayName: PDFOutput\n    description: |\n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/PDFOutput\" /\u003e\n  - name: PrintedOutputOptions\n    x-displayName: PrintedOutputOptions\n    description: |\n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/PrintedOutputOptions\" /\u003e\n  - name: PDFOutputOptions\n    x-displayName: PDFOutputOptions\n    description: |\n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/PDFOutputOptions\" /\u003e\n  - name: PrintConfig\n    x-displayName: PrintConfig\n    description: |\n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/PrintConfig\" /\u003e\nx-tagGroups:\n  - name: Services\n    tags:\n      - Communications Services\n      - store\n  - name: Models\n    tags:\n      - PDFOutput\n      - PDFOutputOptions\n      - PrintedOutput\n      - PrintedOutputOptions\n      - PrintConfig\nexternalDocs:\n  description: Find out more\n  url: https://www.adobe.com/go/learn_aemformscs_communications_en\npaths:\n  /generatePDFOutput:\n    post:\n      tags:\n        - Communications Services\n      summary: Generates a PDF Document from a template and merge data to it.\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              $ref: \"#/components/schemas/PDFOutput\"\n            encoding:\n              template:\n                contentType: application/xml, text/plain, application/pdf\n                style: form\n              data:\n                contentType: application/xml, text/plain\n                style: form\n              xci:\n                contentType: application/xml\n                style: form\n              options:\n                contentType: application/json\n                style: form\n      responses:\n        \"200\":\n          description: Operation successful. The generated PDF Document is included in the respose.\n          content:\n            application/pdf:\n              schema:\n                $ref: \"#/components/schemas/Result\"\n        \"201\":\n          description: Operation successful. The generated PDF Document is sent to the specified URL\n          content:\n            application/pdf:\n              schema:\n                $ref: \"#/components/schemas/Result\"\n        \"400\":\n          description: Bad Request. The request was invalid or cannot be served.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Unauthorized. Authentication credentials are missing or incorrect.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"408\":\n          description: Request timed out. An operation has timed out on the client.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal server error. The server has encountered an error and is unable to process your request at this time.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /generatePrintedOutput:\n    post:\n      tags:\n        - Communications Services\n      summary: Generate a PostScript (PS), Printer Command Language (PCL), Zebra Printing Language (ZPL) document from an XDP file or PDF document.\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              $ref: \"#/components/schemas/PrintedOutput\"\n            encoding:\n              template:\n                contentType: application/xml, text/plain\n                style: form\n              data:\n                contentType: application/xml, text/plain\n                style: form\n              xci:\n                contentType: application/json\n                style: form\n              options:\n                contentType: application/json\n                style: form\n      responses:\n        \"200\":\n          description: Operation successful. The generated PDF Document is included in the response.\n          content:\n            application/pdf:\n              schema:\n                $ref: \"#/components/schemas/Result\"\n        \"201\":\n          description: Operation successful. The generated PDF Document is sent to the specified URL.\n          content:\n            application/pdf:\n              schema:\n                $ref: \"#/components/schemas/Result\"\n        \"400\":\n          description: Bad Request. The request was invalid or cannot be served.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Unauthorized. Authentication credentials were missing or incorrect.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"408\":\n          description: Request timed out. An operation has timed out on the client.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error. The server has encountered an error and is unable to process your request at this time.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\ncomponents:\n  description: Generates a PDF or a PDF/A document from the provided form design and data. Optionally, generate a metadata file for each record and send the output directly to a printer. Use this operation to use a form design that is part of an application in the Applications view. It is recommended that you use the generatePDFOutput operation (deprecated) operation when the form design is located on a network, local file system, or HTTP location.\n  schemas:\n    Error:\n      type: object\n      properties:\n        status:\n          type: string\n        code:\n          type: string\n        message:\n          type: string\n    Result:\n      type: string\n      format: binary\n    Generate:\n      required:\n        - data\n        - template\n      type: object\n      properties:\n        template:\n          description: |\n            The template defines appearance and behavior of the PDF document.\n            The API supports templates of format: XDP, Acrobat Form, and PDF\n            document. You can specify a fully qualified path, reference path of\n            your AEM Repository, or path of a binary file.\n          oneOf:\n            - type: string\n              format: binary\n            - type: string\n        data:\n          description: |\n            An XML or JSON file containing the data to be merged with template.\n            You can specify a fully qualified HTTP location or path of a binary file.\n          oneOf:\n            - type: string\n              format: binary\n            - type: string\n        xci:\n          oneOf:\n            - type: string\n              format: binary\n            - type: string\n          description: |\n            The service uses an XCI configuration file to configure various properties of the PDF document.\n            The XCI parameter has an effect only when the template is of type XDP or an XDP-based PDF document.\n    PrintConfig:\n      type: object\n      description: print configuration.\n      properties:\n        xdcUri:\n          type: string\n          enum:\n            - hppcl5e.xdc\n            - hppcl5c.xdc\n            - ps_plain.xdc\n            - ps_plain_level3.xdc\n            - zpl300.xdc\n            - zpl600.xdc\n            - ipl300.xdc\n            - ipl400.xdc\n            - tpcl600.xdc\n            - dpl300.xdc\n            - dpl406.xdc\n            - dpl600.xdc\n        renderType:\n          type: string\n          enum:\n            - PostScript\n            - PCL\n            - ZPL\n            - DPL\n            - IPL\n            - TPCL\n    PrintedOutputOptions:\n      type: object\n      description: Various options for the API\n      properties:\n        locale:\n          type: string\n          description: Specify locale/language for the output document.\n          default: \"en\"\n        copies:\n          type: integer\n          description: Sets the number of copies to print. The default number is 1.\n          default: 1\n        paginationOverride:\n          type: string\n          description: Set the option to print on one side or both the sides of a page.\n          enum:\n            - simplex\n            - duplexShortEdge\n            - duplexLongEdge\n        printConfig:\n          $ref: \"#/components/schemas/PrintConfig\"\n      required:\n        - printConfig\n      example:\n        $ref: \"#/components/examples/printoptions/value\"\n    PDFOutputOptions:\n      type: object\n      description: Various options for the API\n      properties:\n        locale:\n          type: string\n          description: Locale in which pdf should be rendered.\n          default: \"en\"\n        isTagged:\n          type: boolean\n          description: Specify if the PDF document can be tagged.\n          default: false\n        embedFonts:\n          type: boolean\n          description: Enable the option to embed fonts to the PDF document.\n          default: false\n        linearizedPDF:\n          type: boolean\n          default: false\n          description: Enable the option to optimize the PDF for web viewing.\n        retainFormState:\n          type: boolean\n          default: false\n          description: Set true to retain PDF Form state while flattening PDF. This parameter has effect only when source template is an XFA-based PDF Form and no input data is provided.\n        retainUnsignedSignatureFields:\n          type: boolean\n          default: false\n          description: Set true to retain interactive unsigned signature fields in generated Flat PDF. It allows you to use PDF for gathering signatures.\n        acrobatVersion:\n          type: string\n          description: Set the minimum version of Acrobat Reader required to open the PDF document.\n          enum:\n            - \"Acrobat_10\"\n            - \"Acrobat_10_1\"\n            - \"Acrobat_11\"\n      example:\n        $ref: \"#/components/examples/options/value\"\n    PrintedOutput:\n      allOf:\n        - $ref: \"#/components/schemas/Generate\"\n        - required:\n            - options\n          type: object\n          properties:\n            options:\n              $ref: \"#/components/schemas/PrintedOutputOptions\"\n              description: options to configure the operation\n    PDFOutput:\n      allOf:\n        - $ref: \"#/components/schemas/Generate\"\n        - required:\n            - options\n          type: object\n          properties:\n            options:\n              $ref: \"#/components/schemas/PDFOutputOptions\"\n  responses:\n    LinkResponse:\n      description: The generated PDF Document is sent to the specified URL.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Result\"\n    InlineResponse:\n      description: The generated PDF Document is included in the response.\n      content:\n        application/pdf:\n          schema:\n            type: string\n            format: binary\n    BadRequest:\n      description: Bad Request. The request is invalid or cannot be served.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n    InternalServer:\n      description: Internal Server Error. The server has encountered an error and is unable to process your request at this time.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n    RequestTimeout:\n      description: Request timed out. An operation has timed out on the client.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n    Unauthorized:\n      description: Unauthorized. Authentication credentials were missing or incorrect.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n  examples:\n    pdfoutput:\n      summary: Example of generate pdf output.\n      value:\n        template: \"string\"\n        data: \"string\"\n        xci: \"string\"\n        options:\n          locale: \"en\"\n          isTagged: false\n          embedFonts: false\n          linearizedPDF: false\n          retainFormState: false\n          retainUnsignedSignatureFields: false\n          acrobatVersion: \"Acrobat_11\"\n    output:\n      summary: Example of file type document.\n      value:\n        ref: The \u003coutput_file_content_part\u003e containing the input file in the multipart/form-data request.\n        type: binary\n    http:\n      summary: Example of URL based document.\n      value:\n        ref: The http url which return the value\n        type: http\n    printoptions:\n      value:\n        locale: \"en\"\n        copies: 1\n        paginationOverride: simplex\n        printConfig:\n          renderType: PCL\n          xdcUri: tpcl600.xdc\n    options:\n      value:\n        locale: \"en\"\n        isTagged: false\n        embedFonts: false\n        linearizedPDF: false\n        retainFormState: false\n        retainUnsignedSignatureFields: false\n        acrobatVersion: \"Acrobat_11\"\n  securitySchemes:\n    Token-based authentication:\n      type: https\n      scheme: bearer\n      bearerFormat: JWT\n      description: |\n        In token-based authentication, an access token (Bearer authentication token) is required to make requests to AEM as a Cloud Service.\n        AEM Forms as a Cloud Service provides APIs to securely retrieve the access token.\n        The end-to-end workflow for retrieving and using the token to authenticate a request is:\n\n        - [Retrieve AEM as a Cloud Service credentials from the Developer\n        Console.](https://experienceleague.adobe.com/docs/experience-manager-learn/getting-started-with-aem-headless/authentication/service-credentials.html?lang=en)\n\n        - [Install AEM as a Cloud Service credentials on your\n        environment.](https://experienceleague.adobe.com/docs/experience-manager-learn/getting-started-with-aem-headless/authentication/service-credentials.html?lang=en)\n        (Application Server, Web Server, or other non-AEM servers) configured to\n        send requests to (make calls) the cloud service.\n\n        - [Generate a JWT token and exchanged it with Adobe IMS APIs for an\n        access\n        token.](https://experienceleague.adobe.com/docs/experience-manager-learn/getting-started-with-aem-headless/authentication/service-credentials.html?lang=en#create-a-jwt-and-exchange-for-an-access-token)\n\n        - Run the AEM API with the access token as a Bearer Authentication\n        token.\n\n        - [Set appropriate permissions for the technical account user in the AEM\n        environment.](https://experienceleague.adobe.com/docs/experience-manager-learn/getting-started-with-aem-headless/authentication/service-credentials.html?lang=en#configure-access-in-aem)\n    Basic authentication:\n      type: https\n      scheme: basic\n      description: |\n        Basic authentication is a simple authentication scheme built into the HTTP protocol.\n        The client sends HTTP requests with the Authorization header that contains the word Basic followed by a space and a base64-encoded string username:password.\n        For example, to authorize as admin / admin the client sends Basic [base64-encoded string username]: [base64-encoded string password].\n        For information about retrieving and using token, see [Token-based authentication to AEM as a Cloud Service](https://experienceleague.adobe.com/docs/experience-manager-learn/getting-started-with-aem-headless/authentication/overview.html?lang=en)\n",
			"canonicalURL": "/github.com/AdobeDocs/experience-manager-cloud-service.en@1f8053d6bc16c00eb6c914e88c38b88606c33aed/-/blob/help/forms/assets/sync.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/AdobeDocs/experience-manager-cloud-service.en/blob/1f8053d6bc16c00eb6c914e88c38b88606c33aed/help/forms/assets/sync.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: securitySchemes: at help/forms/assets/sync.yaml:443:5: invalid name: \"Token-based authentication\" doesn't match \"^[a-zA-Z0-9.\\\\-_]+$\""
}