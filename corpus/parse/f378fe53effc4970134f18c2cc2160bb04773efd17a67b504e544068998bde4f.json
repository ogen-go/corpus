{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/SecureIdentityAlliance/osia"
		},
		"file": {
			"name": "rp.yaml",
			"size": 0,
			"path": "src/doc/yaml/rp.yaml",
			"byteSize": 24464,
			"content": "\r\n# (c) Secure Identity Alliance\r\n\r\nopenapi: 3.0.0\r\ninfo:\r\n  description: |\r\n    The OSIA IDUsage Relying Party Interface\r\n    \r\n    Change log:\r\n\r\n    - 1.1.1:\r\n      - Add missing values in BiometricSubType\r\n    - 1.1.0:\r\n      - Change date to date-time\r\n      - Add the encounterId to biometricData\r\n      - Add the impressionType, mimeType, template, templateRef, templateFormat to biometricData\r\n      - Do not mix fixed properties and additional properties, use a subobject for the additional properties\r\n      - add credentialNumber, issuingAuthority, issuingPlace to the credential\r\n      - Add quality, qualityFormat, algorithm, vendor fields to biometricData\r\n      - Mark some fields (ID, etc.) as readOnly\r\n    - 1.0.0: Initial version\r\n\r\n  version: 1.1.1\r\n  title: The OSIA IDUsage Relying Party Interface\r\n  license:\r\n    name: SIA\r\n    url: \"https://raw.githubusercontent.com/SecureIdentityAlliance/osia/master/LICENSE\"\r\nservers:\r\n   - url: https://rp.server.com\r\ntags:\r\n  - name: IDUsage\r\n    description: REST API OSIA interfaces\r\n\r\npaths:\r\n\r\n  /v1/verify/{identifier}:\r\n    post:\r\n      tags:\r\n        - IDUsage\r\n      summary: Verify a set of attributes of a person.\r\n      description: \u003e-\r\n        Verify an Identity based on an identity identifier (UIN, tokenâ€¦) and a\r\n        set of Identity Attributes. Verification is strictly matching all\r\n        provided identity attributes to compute the global Boolean matching\r\n        result.\r\n      operationId: verify\r\n      security:\r\n        - BearerAuth: [id.verify]\r\n      parameters:\r\n        - name: identifier\r\n          in: path\r\n          description: person identifier\r\n          required: true\r\n          schema:\r\n            type: string\r\n          example: \"1235567890\"\r\n        - name: identifierType\r\n          in: query\r\n          description: Type of identifier (default \"uin\", \"token\", \"credentialNumber\", ...)\r\n          required: false\r\n          schema: \r\n            type: string\r\n          example: \"token\"\r\n        - name: verificationProofRequired\r\n          in: query\r\n          description: verification proof required on successful verification (default true)\r\n          required: false\r\n          schema: \r\n            type: boolean\r\n        - name: transactionId\r\n          in: query\r\n          description: The client specified id of the transaction\r\n          required: true\r\n          schema:\r\n            type: string\r\n      requestBody:\r\n        description: \u003e-\r\n            A set of identity attributes associated to the identity identifier\r\n            and to be verified by the system\r\n        content:\r\n          application/json:\r\n            schema:\r\n              $ref: \"#/components/schemas/AttributeSet\"\r\n        required: true\r\n    \r\n      responses:\r\n        200:\r\n          description: Verification execution successful\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/VerifyResult'\r\n        400:\r\n          description: 'Bad Request, Validation Errors, ...'\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        401:\r\n          description: Unauthorized\r\n        403:\r\n          description: Operation not allowed\r\n        404:\r\n          description: Identifier not Found\r\n        500:\r\n          description: Internal server error\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n                \r\n                \r\n  /v1/attributes/{attributeSetName}/{identifier}:\r\n    get:\r\n      tags:\r\n        - IDUsage\r\n      summary: Read a predefined set of a person's attributes. \r\n      description: Note security role must map the requested attributeSetName, e.g. id.DEFAULT_SET_01.read\r\n      operationId: readAttributeSet\r\n      security:\r\n        - BearerAuth: [id.ATTRIBUTESETNAME.read]\r\n      parameters:\r\n        - name: attributeSetName\r\n          in: path\r\n          description: Predefined attribute set name describing what attributes are to be read. e.g. \"DEFAULT_SET_01\", \"SET_BIOM_01\", \"EIDAS\", ...\r\n          required: true\r\n          schema:\r\n            type: string\r\n            example: \"DEFAULT_SET_01\"\r\n        - name: identifier\r\n          in: path\r\n          description: person identifier\r\n          required: true\r\n          schema:\r\n            type: string\r\n            example: \"1235567890\"\r\n        - name: identifierType\r\n          in: query\r\n          description: Type of identifier (default \"uin\", \"token\", \"credentialNumber\", ...)\r\n          required: false\r\n          schema: \r\n            type: string\r\n          example: \"token\"     \r\n        - name: transactionId\r\n          in: query\r\n          description: The client specified id of the transaction\r\n          required: true\r\n          schema:\r\n            type: string\r\n          \r\n      responses:\r\n        200:\r\n          description: Operation successful, AttributeSet will contain fields as predefined by the attributeSetName and when value is available \r\n          content:\r\n            application/json:\r\n              schema:\r\n               $ref: '#/components/schemas/AttributeSet'\r\n        400:\r\n          description: 'Bad Request, Validation Errors, ...'\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        401:\r\n          description: Unauthorized\r\n        403:\r\n          description: Operation not allowed\r\n        404:\r\n          description: Not Found\r\n        500:\r\n          description: Internal server error\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n            \r\n  /v1/attributes/{identifier}:\r\n    post:\r\n      tags:\r\n        - IDUsage\r\n      summary: Read a variable set of a person's attributes.\r\n      description: Returns value of attributes listed in the request parameter 'OutputAttributeSet'\r\n      operationId: readAttributes\r\n      security:\r\n        - BearerAuth: [id.read]\r\n      parameters:\r\n        - name: identifier\r\n          in: path\r\n          description: person identifier\r\n          required: true\r\n          schema:\r\n            type: string\r\n            example: \"1235567890\"\r\n        - name: identifierType\r\n          in: query\r\n          description: Type of identifier (default \"uin\", \"token\", \"credentialNumber\", ...)\r\n          required: false\r\n          schema: \r\n            type: string\r\n          example: \"token\"\r\n        - name: transactionId\r\n          in: query\r\n          description: The client specified id of the transaction\r\n          required: true\r\n          schema:\r\n            type: string\r\n          \r\n      requestBody:\r\n        description: \u003e-\r\n            A description of expected identity attributes  \r\n        content:\r\n          application/json:\r\n            schema:\r\n              $ref: \"#/components/schemas/OutputAttributeSet\"\r\n        required: true\r\n\r\n      responses:\r\n        200:\r\n          description: Operation successful, AttributeSet will contain fields as defined by parameter outputAttributeSet and when value is available \r\n          content:\r\n            application/json:\r\n              schema:\r\n               $ref: '#/components/schemas/AttributeSet'\r\n        400:\r\n          description: 'Bad Request, Validation Errors, ...'\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        401:\r\n          description: Unauthorized\r\n        403:\r\n          description: Operation not allowed\r\n        404:\r\n          description: Not Found\r\n        500:\r\n          description: Internal server error\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n  \r\n  /v1/identify:\r\n    post:\r\n      tags:\r\n        - IDUsage\r\n      summary:  Identify a set of persons matching provided partial attributes\r\n      description: \u003e-\r\n        Identify possibly matching identities against an input set of attributes. Returns an array of predefined datasets as described by outputDataSetName.\r\n        Note this request may be asynchronous or synchronous.\r\n      operationId: identify\r\n      security:\r\n        - BearerAuth: [id.identify]\r\n      parameters:\r\n        - name: transactionId\r\n          in: query\r\n          description: The client specified id of the transaction\r\n          required: true\r\n          schema:\r\n            type: string\r\n      \r\n      requestBody:\r\n        description: \u003e-\r\n            A set of identity attributes to match and an attributeSetName to use as template for returned matching identities.\r\n        content:\r\n          application/json:\r\n            schema:\r\n              $ref: \"#/components/schemas/IdentifyRequest\"\r\n        required: true\r\n    \r\n      responses:\r\n        200:\r\n          description: Identification request execution successful\r\n          content:\r\n            application/json:\r\n              schema:\r\n                type: array\r\n                items:\r\n                  $ref: '#/components/schemas/AttributeSet'\r\n        202:\r\n          description: |\r\n            Request received successfully and correct, result will be available later using the task ID returned\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/TaskId'\r\n        400:\r\n          description: 'Bad Request, Validation Errors, ...'\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        401:\r\n          description: Unauthorized\r\n        403:\r\n          description: Operation not allowed\r\n        404:\r\n          description: Identifier not Found\r\n        500:\r\n          description: Internal server error\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n                \r\n  /v1/identify/{taskID}:\r\n    get:\r\n      tags:\r\n        - IDUsage\r\n      summary: Read the result of a previously sent identify request\r\n      operationId: readIdentifyResult\r\n      security:\r\n        - BearerAuth: [id.identify]\r\n      parameters:\r\n        - name: taskID\r\n          in: path\r\n          description: taskID to get result for.\r\n          required: true\r\n          schema:\r\n            type: string\r\n          example : \"ABCDEFGHIJKLMNO\"\r\n        - name: transactionId\r\n          in: query\r\n          description: The client specified id of the transaction\r\n          required: true\r\n          schema:\r\n            type: string\r\n\r\n      responses:\r\n        200:\r\n          description: Operation successful, array of AttributeSet is available \r\n          content:\r\n            application/json:\r\n              schema:\r\n                type: array\r\n                items:\r\n                  $ref: '#/components/schemas/AttributeSet'\r\n        204:\r\n          description: No content, taskID is valid but identify request is still ongoing, retry later \r\n        400:\r\n          description: 'Bad Request, Validation Errors, ...'\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        401:\r\n          description: Unauthorized\r\n        403:\r\n          description: Operation not allowed\r\n        404:\r\n          description: Not Found\r\n        500:\r\n          description: Internal server error\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n\r\ncomponents:\r\n  securitySchemes:\r\n    BearerAuth:\r\n      type: http\r\n      scheme: bearer\r\n      bearerFormat: JWT\r\n\r\n  schemas:\r\n    AttributeSet:\r\n      type: object\r\n      description: a set of attributes used in verify\r\n      properties:\r\n        biographicData:\r\n          $ref: '#/components/schemas/BiographicData'\r\n        biometricData:\r\n          type: array\r\n          items:\r\n            $ref: '#/components/schemas/BiometricData'\r\n        credentialData:\r\n          type: array\r\n          items:\r\n            $ref: '#/components/schemas/CredentialData'\r\n        contactData:\r\n          $ref: '#/components/schemas/ContactData'\r\n      additionalProperties: false\r\n      \r\n    BiographicData:\r\n      type: object\r\n      description: The set of biographic data.\r\n      additionalProperties: true\r\n      example:\r\n        firstName: John\r\n        lastName: Doo\r\n        dateOfBirth: \"1985-11-30\"\r\n        gender: M\r\n        nationality: FRA\r\n    \r\n    ContactData:\r\n      type: object\r\n      additionalProperties: true\r\n      example:\r\n        email: John.Doo@osia.com\r\n        phone1: \"555666777\"\r\n        phone2: \"555888999\"\r\n        \r\n    BiometricData:\r\n      type: object\r\n      required:\r\n        - biometricType\r\n      properties:\r\n        biometricType:\r\n          $ref: '#/components/schemas/BiometricType'\r\n        biometricSubType:\r\n          $ref: '#/components/schemas/BiometricSubType'\r\n        instance:\r\n          type: string\r\n          description: Used to separate two distincts biometric items of the same type and subtype\r\n        encounterId:\r\n          type: string\r\n          description: the id of the encounter owner of this biometric\r\n          readOnly: true\r\n        image:\r\n          type: string\r\n          format: byte\r\n          description: Base64-encoded image\r\n        imageRef:\r\n          type: string\r\n          format: uri\r\n          description: URI to an image\r\n          example: \"http://imageserver.com/image?id=00003\"\r\n        captureDate:\r\n          type: string\r\n          format: date-time\r\n          example: \"2019-05-21T12:00:00Z\"\r\n        captureDevice:\r\n          type: string\r\n          description: A string identifying the device used to capture the biometric\r\n        impressionType:\r\n          $ref: '#/components/schemas/ImpressionType'\r\n        width:\r\n          type: integer\r\n          description: the width of the image\r\n        height:\r\n          type: integer\r\n          description: the height of the image\r\n        bitdepth:\r\n          type: integer\r\n        mimeType:\r\n          type: string\r\n          description: the nature and format of the image. The mime type definitions should be in compliance with RFC 6838.\r\n        resolution:\r\n          type: integer\r\n          description: the image resolution (in DPI)\r\n        compression:\r\n          $ref: '#/components/schemas/CompressionType'\r\n        missing:\r\n          description: Optional properties indicating if a part of the biometric data is missing\r\n          type: array\r\n          items:\r\n            $ref: '#/components/schemas/MissingType'\r\n        metadata:\r\n          type: string\r\n          description: An optional string used to convey information vendor-specific\r\n        comment:\r\n          type: string\r\n          description: A comment about the biometric data\r\n        template:\r\n          type: string\r\n          format: byte\r\n          description: Base64-encoded template\r\n        templateRef:\r\n          type: string\r\n          format: uri\r\n          description: URI to the template when it is managed in a dedicated data server\r\n          example: \"http://dataserver.com/template?id=00014\"\r\n        templateFormat:\r\n          $ref: '#/components/schemas/TemplateFormat'\r\n        quality:\r\n          type: integer\r\n          format: int64\r\n          description: Quality, as a number, of the biometric\r\n        qualityFormat:\r\n          $ref: '#/components/schemas/QualityFormat'\r\n        algorithm:\r\n          type: string\r\n        vendor:\r\n          type: string\r\n      additionalProperties: false\r\n    TemplateFormat:\r\n      type: string\r\n      description: |\r\n        Format of the template.\r\n        One of ISO_19794_2, ISO_19794_2_NS, ISO_19794_2_CS, ISO_19794_2_2011, ANSI_378_2009 or ANSI_378.\r\n        Can be extended to include additional proprietary template format\r\n    QualityFormat:\r\n      type: string\r\n      description: |\r\n        Format of the quality.\r\n        One of ISO_19794, NFIQ, or NFIQ2.\r\n        Can be extended to include additional proprietary quality format\r\n    ImpressionType:\r\n      type: string\r\n      enum:\r\n        - LIVE_SCAN_PLAIN\r\n        - LIVE_SCAN_ROLLED\r\n        - NONLIVE_SCAN_PLAIN\r\n        - NONLIVE_SCAN_ROLLED\r\n        - LATENT_IMPRESSION\r\n        - LATENT_TRACING\r\n        - LATENT_PHOTO\r\n        - LATENT_LIFT\r\n        - LIVE_SCAN_SWIPE\r\n        - LIVE_SCAN_VERTICAL_ROLL\r\n        - LIVE_SCAN_PALM\r\n        - NONLIVE_SCAN_PALM\r\n        - LATENT_PALM_IMPRESSION\r\n        - LATENT_PALM_TRACING\r\n        - LATENT_PALM_PHOTO\r\n        - LATENT_PALM_LIFT\r\n        - LIVE_SCAN_OPTICAL_CONTACTLESS_PLAIN\r\n        - OTHER\r\n        - UNKNOWN\r\n    BiometricType:\r\n      type: string\r\n      enum:\r\n        - FACE\r\n        - FINGER\r\n        - IRIS\r\n        - SIGNATURE\r\n        - UNKNOWN\r\n      example: FINGER\r\n    BiometricSubType:\r\n      type: string\r\n      enum:\r\n        - UNKNOWN\r\n        - RIGHT_THUMB\r\n        - RIGHT_INDEX\r\n        - RIGHT_MIDDLE\r\n        - RIGHT_RING\r\n        - RIGHT_LITTLE\r\n        - LEFT_THUMB\r\n        - LEFT_INDEX\r\n        - LEFT_MIDDLE\r\n        - LEFT_RING\r\n        - LEFT_LITTLE\r\n        - PLAIN_RIGHT_FOUR_FINGERS\r\n        - PLAIN_LEFT_FOUR_FINGERS\r\n        - PLAIN_THUMBS\r\n        \r\n        - UNKNOWN_PALM\r\n        - RIGHT_FULL_PALM\r\n        - RIGHT_WRITERS_PALM\r\n        - LEFT_FULL_PALM\r\n        - LEFT_WRITERS_PALM\r\n        - RIGHT_LOWER_PALM\r\n        - RIGHT_UPPER_PALM\r\n        - LEFT_LOWER_PALM\r\n        - LEFT_UPPER_PALM\r\n        - RIGHT_OTHER\r\n        - LEFT_OTHER\r\n        - RIGHT_INTERDIGITAL\r\n        - RIGHT_THENAR\r\n        - RIGHT_HYPOTHENAR\r\n        - LEFT_INTERDIGITAL\r\n        - LEFT_THENAR\r\n        - LEFT_HYPOTHENAR\r\n        \r\n        - RIGHT_INDEX_AND_MIDDLE\r\n        - RIGHT_MIDDLE_AND_RING\r\n        - RIGHT_RING_AND_LITTLE\r\n        - LEFT_INDEX_AND_MIDDLE\r\n        - LEFT_MIDDLE_AND_RING\r\n        - LEFT_RING_AND_LITTLE\r\n        - RIGHT_INDEX_AND_LEFT_INDEX\r\n        - RIGHT_INDEX_AND_MIDDLE_AND_RING\r\n        - RIGHT_MIDDLE_AND_RING_AND_LITTLE\r\n        - LEFT_INDEX_AND_MIDDLE_AND_RING\r\n        - LEFT_MIDDLE_AND_RING_AND_LITTLE\r\n        \r\n        - EYE_UNDEF\r\n        - EYE_RIGHT\r\n        - EYE_LEFT\r\n        - EYE_BOTH\r\n        \r\n        - PORTRAIT\r\n        - LEFT_PROFILE\r\n        - RIGHT_PROFILE\r\n      example: RIGHT_INDEX\r\n\r\n    CompressionType:\r\n      type: string\r\n      enum: [NONE, WSQ, JPEG, JPEG2000, PNG]\r\n      example: WSQ\r\n\r\n    MissingType:\r\n      type: object\r\n      properties:\r\n        biometricSubType:\r\n          $ref: '#/components/schemas/BiometricSubType'\r\n        presence:\r\n          type: string\r\n          enum: [BANDAGED, AMPUTATED, DAMAGED]\r\n      additionalProperties: false\r\n    \r\n    CredentialData:\r\n      description: A credential\r\n      type: object\r\n      properties:\r\n        credentialId:\r\n          type: string\r\n          description: The unique id for this credential\r\n          readOnly: true\r\n        status:\r\n          type: string\r\n          description: The status of the credential\r\n          enum: [NEW, ACTIVE, SUSPENDED, REVOKED, OTHER]\r\n          readOnly: true\r\n        statusOther:\r\n          type: string\r\n          description: Details about the status when OTHER is used\r\n          readOnly: true\r\n        credentialNumber:\r\n          type: string\r\n          description: \"The number attached to the credential (ex: passport number)\"\r\n        personId:\r\n          type: string\r\n          description: The unique id of the person that the credential request is for\r\n        credentialType:\r\n            $ref: '#/components/schemas/CredentialType'\r\n        issuedDate:\r\n          type: string\r\n          format: date-time\r\n          description: The date and time that this credential was issued\r\n        expiryDate:\r\n          type: string\r\n          format: date-time\r\n          description: The date and time that this credential expires\r\n        serialNumber:\r\n          type: string\r\n          description: the serial number of the credential\r\n        issuingAuthority:\r\n          type: string\r\n          description: \"The authority issuing the credential (ex: the Ministry of Interior)\"\r\n        issuingPlace:\r\n          type: string\r\n          description: \"The place where the credential was issued (ex: Paris)\"\r\n        others:\r\n          type: object\r\n          additionalProperties: true\r\n      additionalProperties: false\r\n\r\n    CredentialType:\r\n      description: Type of the credential. e.g. \"PASSPORT\", \"ID_CARD\", ...\r\n      type: string\r\n      example: \"ID_CARD\"\r\n    \r\n    Error:\r\n      type: object\r\n      required:\r\n        - code\r\n        - message\r\n      properties:\r\n        code:\r\n          description: Error code\r\n          type: integer\r\n          format: int32\r\n        message:\r\n          description: Error message\r\n          type: string\r\n      additionalProperties: false\r\n    \r\n    VerifyResult:\r\n      description : result of a successful verify request\r\n      type: object\r\n      required:\r\n        - verificationCode\r\n        - verificationMessage\r\n      properties:\r\n        verificationCode:\r\n          type: integer\r\n          format: int64\r\n        verificationMessage:\r\n          type: string\r\n        verificationProof:\r\n          type: string\r\n          \r\n    IdentifyRequest:\r\n      type: object\r\n      description: a set of parameters used in identify\r\n      required:\r\n        - attributeSet\r\n        - outputAttributeSetName\r\n      properties:\r\n        attributeSet:\r\n          $ref: '#/components/schemas/AttributeSet'\r\n        outputAttributeSetName:\r\n          description: Attribute set name describing what attributes are to be read. e.g. \"DEFAULT_SET_01\", \"SET_BIOM_01\", \"EIDAS\", ...\r\n          type: string\r\n          example: \"DEFAULT_SET_01\"\r\n      additionalProperties: false\r\n\r\n    OutputAttributeSet:\r\n      type: object\r\n      description: A template describing the expected attributes of a readAttributes request\r\n      properties:\r\n        outputBiographicData:\r\n          description : list of BiographicData structure fields to include in the answer\r\n          type: array\r\n          items: \r\n              type: string\r\n          example : [\"firstName\",\"lastname\"]\r\n        outputBiometricData:\r\n          type: array\r\n          description : an array of expected biometric data \u0026 fields\r\n          items:\r\n            type: object\r\n            description : biometric type and subtype, list of BiometricData fields to include in the answer\r\n            properties:\r\n              biometricType:\r\n                $ref: '#/components/schemas/BiometricType'\r\n              biometricSubType:\r\n                $ref: '#/components/schemas/BiometricSubType'\r\n              biometricDataFields:\r\n                type: array\r\n                example :  [\"image\",\"captureDate\"]\r\n                items: \r\n                  type: string\r\n        outputCredentialData:\r\n          type: array\r\n          description : an array of expected credential type \u0026 fields\r\n          items:          \r\n            type: object\r\n            description : credential type and list of CredentialData structure fields to include in the answer\r\n            properties:\r\n              #TODO : check credential type vs cms.yaml!!\r\n              credentialType:\r\n                $ref: '#/components/schemas/CredentialType'\r\n              credentialDataFields:\r\n                type: array\r\n                example :  [\"serialNumber\",\"validFromDate\",\"validToDate\"]\r\n                items: \r\n                  type: string\r\n        outputContactData:\r\n          description : list of ContactData structure fields to include in the answer\r\n          type: array\r\n          example : [\"phone1\",\"email\"]\r\n          items: \r\n              type: string\r\n              \r\n      additionalProperties: false\r\n    \r\n    TaskId:\r\n      description: |\r\n        Information about the asynchronous result. Only the taskId is mandatory but\r\n        the implementation is free to return additional details such as: expected\r\n        duration, URL to monitor the task, etc.\r\n      type: object\r\n      required:\r\n        - taskId\r\n      properties:\r\n        taskId:\r\n          type: string\r\n          example: '123e4567-e89b-12d3-a456-426655440000'\r\n        others:\r\n          type: object\r\n          additionalProperties: true\r\n      additionalProperties: false\r\n",
			"canonicalURL": "/github.com/SecureIdentityAlliance/osia@3985bcb9999ca644b07865dd7e1424cd0e47946e/-/blob/src/doc/yaml/rp.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/SecureIdentityAlliance/osia/blob/3985bcb9999ca644b07865dd7e1424cd0e47946e/src/doc/yaml/rp.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/v1/attributes/{attributeSetName}/{identifier}\": at 1:10627: get: operation \"readAttributeSet\": at 1:10634: at 1:12149: security: list of scopes MUST be empty for \"type\" \"http\""
}