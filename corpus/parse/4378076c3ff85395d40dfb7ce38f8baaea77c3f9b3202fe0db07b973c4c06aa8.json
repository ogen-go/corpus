{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/allenheltondev/serverless-multi-tenancy"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi.yaml",
			"byteSize": 11888,
			"content": "openapi: 3.0.0\ninfo:\n  title: Parks API\n  description: |\n    Get involved with the administration of the United States State Parks! Each state manages their own parks.\n  version: 1.0.0\n\nx-amazon-apigateway-request-validators:\n  Validate All:\n    validateRequestParameters: true\n    validateRequestBody: true\nx-amazon-apigateway-gateway-responses:\n  BAD_REQUEST_BODY:\n    statusCode: 400\n    responseTemplates:\n      application/json: '{ \"message\": \"$context.error.validationErrorString\" }'\n  INVALID_API_KEY:\n    statusCode: 401\n    responseTemplates:\n      application/json: '{ \"message\": \"Unauthorized\" }'\n\npaths:\n  /parks:\n    get:\n      summary: View a list of parks for your state\n      description: Returns a list of state parks for your state\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ParkList'\n        500:\n          $ref: '#/components/responses/UnknownError'\n      x-amazon-apigateway-request-validator: Validate All\n      x-amazon-apigateway-integration:\n        credentials:\n          Fn::Sub: ${GetParksRole.Arn}\n        uri:\n          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:dynamodb:action/Query\n        httpMethod: POST\n        type: aws\n        passthroughBehavior: 'never'\n        requestTemplates:\n          application/json:\n            Fn::Sub:\n              - |-\n                {\n                  \"TableName\": \"${TableName}\",\n                  \"IndexName\": \"GSI1\",\n                  \"KeyConditionExpression\": \"#GSI1PK = :GSI1PK\",\n                  \"ExpressionAttributeNames\": {\n                    \"#GSI1PK\": \"GSI1PK\"\n                  },\n                  \"ExpressionAttributeValues\": {\n                    \":GSI1PK\": { \"S\": \"$context.authorizer.customerId#park\" }\n                  }\n                }\n              - { TableName: { Ref: TableName } }\n        responses:\n          200:\n            statusCode: 200\n            responseTemplates:\n              application/json: |\n                #set($context.responseOverride.header.Access-Control-Allow-Origin = '*')\n                #set($inputRoot = $input.path('$'))\n                {\n                  \"items\": [\n                    #foreach($elem in $inputRoot.Items) {\n                      \"id\": \"$elem.keyParts.M.parkId.S\",\n                      \"name\": \"$elem.name.S\",\n                      #if(\"$elem.status.S\" != \"\")\n                      \"status\": \"$elem.status.S\"\n                      #else\n                      \"status\": \"park-opened\"\n                      #end\n                    }#if($foreach.hasNext),#end\n                    #end\n                  ]\n                }\n    post:\n      summary: Add a new park\n      description: Adds a new park to the current tenant\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Park'\n      responses:\n        201:\n          $ref: '#/components/responses/Created'\n        400:\n          $ref: '#/components/responses/BadRequest'\n        500:\n          $ref: '#/components/responses/UnknownError'\n      x-amazon-apigateway-request-validator: Validate All\n      x-amazon-apigateway-integration:\n        credentials:\n          Fn::Sub: ${AddParkRole.Arn}\n        uri:\n          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:dynamodb:action/PutItem\n        httpMethod: POST\n        type: aws\n        passthroughBehavior: 'never'\n        requestTemplates:\n          application/json:\n            Fn::Sub:\n              - |-\n                #set($inputRoot = $input.path('$'))\n                {\n                  \"TableName\": \"${TableName}\",\n                  \"Item\": {\n                    \"pk\": { \"S\": \"$context.authorizer.customerId#$input.path('$.id')\" },\n                    \"sk\": { \"S\": \"park#\" },\n                    \"GSI1PK\": { \"S\": \"$context.authorizer.customerId#park\" },\n                    \"GSI1SK\": { \"S\": \"$input.path('$.id')\" },\n                    \"keyParts\": { \"M\": {\n                      \"customerId\": { \"S\": \"$context.authorizer.customerId\" },\n                      \"parkId\": { \"S\": \"$input.path('$.id')\" }\n                    }},\n                    \"status\": { \"S\": \"$input.path('$.status')\" },\n                    \"name\": { \"S\": \"$input.path('$.name')\" },\n                    \"createdDate\": { \"S\": \"$context.requestTime\" }         \n                  },\n                  \"ReturnValues\": \"NONE\"\n                }\n              - { TableName: { Ref: TableName } }\n        responses:\n          200:\n            statusCode: 201\n            responseTemplates:\n              application/json: |\n                #set($context.responseOverride.header.Access-Control-Allow-Origin = '*')\n                {\n                  \"id\": \"$method.request.body.id\"\n                }\n\n  /parks/{parkId}/statuses:\n    post:\n      summary: Update the status of a park\n      description: Update park status and notify subscribers\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ParkStatus'\n      responses:\n        204:\n          $ref: '#/components/responses/NoContent'\n        400:\n          $ref: '#/components/responses/BadRequest'\n      x-amazon-apigateway-request-validator: Validate All\n      x-amazon-apigateway-integration:\n        credentials:\n          Fn::Sub: ${UpdateParkStatusRole.Arn}\n        uri:\n          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:states:action/StartSyncExecution\n        httpMethod: POST\n        type: aws\n        requestTemplates:\n          application/json:\n            Fn::Sub:  \n              - |-\n                #set($context.responseOverride.header.Access-Control-Allow-Origin = '*')\n                #set($body = \"{\"\"detail\"\" : $input.json('$'), \"\"customerId\"\": \"\"$context.authorizer.customerId\"\", \"\"parkId\"\": \"\"$input.params('parkId')\"\"}\")\n                {\n                    \"input\": \"$util.escapeJavaScript($body)\",\n                    \"stateMachineArn\": \"${StateMachine}\"\n                }\n              - { StateMachine: { \"Ref\": \"UpdateParkStatusStateMachine\" }}\n        responses:\n          200:\n            statusCode: 204\n            responseTemplates:\n              application/json: |\n                #set($context.responseOverride.header.Access-Control-Allow-Origin = '*')\n                #set($inputRoot = $input.path('$'))\n                #set($output = $util.parseJson($input.path('$.output')))\n                #if(\"$inputRoot.error\" == \"UnhandledError\")\n                  #set($context.responseOverride.status = 500)\n                  {\n                  \"message\": \"$inputRoot.cause\"\n                  }\n                #end\n\n  /parks/{parkId}/webhooks:\n    post:\n      summary: Subscribe to notifications for a park\n      description: Register for webhook when specific events occur\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/WebhookSubscription'\n      responses:\n        201:\n          $ref: '#/components/responses/Created'\n        400:\n          $ref: '#/components/responses/BadRequest'\n        500:\n          $ref: '#/components/responses/UnknownError'\n      x-amazon-apigateway-request-validator: Validate All\n      x-amazon-apigateway-integration:\n        credentials:\n          Fn::Sub: ${SubscribeWebhookRole.Arn}\n        uri:\n          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:states:action/StartSyncExecution\n        httpMethod: POST\n        type: aws\n        requestTemplates:\n          application/json:\n            Fn::Sub:  \n              - |-\n                #set($context.responseOverride.header.Access-Control-Allow-Origin = '*')\n                #set($body = \"{\"\"detail\"\" : $input.json('$'), \"\"customerId\"\": \"\"$context.authorizer.customerId\"\", \"\"id\"\": \"\"$context.requestId\"\", \"\"parkId\"\": \"\"$input.params('parkId')\"\"}\")\n                {\n                    \"input\": \"$util.escapeJavaScript($body)\",\n                    \"stateMachineArn\": \"${StateMachine}\"\n                }\n              - { StateMachine: { \"Ref\": \"SubscribeWebhookStateMachine\" }}\n        responses:\n          200:\n            statusCode: 201\n            responseTemplates:\n              application/json: |\n                #set($context.responseOverride.header.Access-Control-Allow-Origin = '*')\n                #set($inputRoot = $input.path('$'))\n                #set($output = $util.parseJson($input.path('$.output')))\n                {\n                  #if(\"$output.id\" != \"\")\n                    \"id\": \"$output.id\"\n                  #end                  \n                  #if(\"$inputRoot.error\" == \"UnhandledError\")\n                    #set($context.responseOverride.status = 500)\n                    \"message\": \"$inputRoot.cause\"\n                  #end                  \n                }\ncomponents:\n  schemas:\n    ParkList:\n      type: object\n      required:\n        - items\n      properties:\n        items:\n          type: array\n          items:\n            type: object\n            required:\n              - id\n              - name\n            properties:\n              id:\n                type: string\n              name: \n                type: string\n    \n    WebhookSubscription:\n      type: object\n      required:\n        - eventType\n        - endpoint\n      properties:\n        eventType:\n          type: string\n          enum: \n            - park-closed\n            - park-opened\n            - natural-disaster\n        endpoint:\n          type: string\n\n    ParkStatus:\n      type: object\n      required:\n        - status\n      properties:\n        status:\n          type: string\n          enum: \n            - park-closed\n            - park-reopened\n            - natural-disaster\n\n    Park:\n      type: object\n      required:\n        - name\n        - id\n      properties:\n        name:\n          type: string\n        id: \n          type: string\n          pattern: ^[a-z]*$\n        status:\n          enum: \n            - park-closed\n            - park-reopened\n            - natural-disaster\n\n  responses:    \n    Created:\n      description: Successfully added into the system\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - id\n            properties:\n              id:\n                type: string\n                description: The identifier for the new entity\n                example: igdLLki4no9ey1aN2rAB3s\n    BadRequest:\n      description: Unable to process request. Likely due to improperly formatted request.\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - message\n            properties:\n              message:\n                type: string\n                description: Message detailing what went wrong\n                example: The 'name' field is required and is missing.\n    NotFound:\n      description: Unable to find entity with a given identifier\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - message\n            properties:\n              message:\n                type: string\n                description: Message stating the entity was not found\n                example: Unable to find entity with the provided id\n    UnknownError:\n      description: An unexpected error occurred on the server.\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - message\n            properties:\n              message:\n                type: string\n                description: Unknown error message\n                example: An unexpected error occurred.\n    NoContent:\n      description: A blank response is returned indicating success\n",
			"canonicalURL": "/github.com/allenheltondev/serverless-multi-tenancy@8f56c11f63aab2e2328fb048c57f125517547b40/-/blob/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/allenheltondev/serverless-multi-tenancy/blob/8f56c11f63aab2e2328fb048c57f125517547b40/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/parks/{parkId}/statuses\": post: at openapi.yaml:141:7: parse path \"/parks/{parkId}/statuses\": path parameter not specified: \"parkId\""
}