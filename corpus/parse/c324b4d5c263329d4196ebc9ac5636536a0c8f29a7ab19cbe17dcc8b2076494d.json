{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/eea-oasis/baseline-standard"
		},
		"file": {
			"name": "baseline-api-v1.0.0.yaml",
			"size": 0,
			"path": "api/baseline-api-v1.0.0.yaml",
			"byteSize": 126257,
			"content": "openapi: 3.0.2\ninfo:\n  description: OASIS standard API specification for the Baseline Protocol\n  license:\n    name: CC0 1.0 Universal License\n    url: https://raw.githubusercontent.com/ethereum-oasis/baseline-standard/main/LICENSE\n  title: Baseline API\n  version: v1.0.0\ntags:\n  - name: Baseline\n    description: Baseline core provides internal integration middleware interfaces for baselining systems of record.\n  - name: CCSM\n    description: Baseline core CCSM API provides interfaces for general interaction with the underlying CCSM.\n  - name: Privacy\n    description: Baseline core privacy provides interfaces supporting general consistency, zero-knowledge cryptography protocols and secure multi-party computation (MPC).\n  - name: Registry\n    description: Utilities for resolving DID documents for arbitrary subjects.\n  - name: Vault\n    description: |- \n      Baseline core vault API provides tools and methods for managing digital authentication credentials for Subjects based on roles and `Workgroup` instances. \npaths:\n  /bpi_accounts:\n    get:\n      deprecated: false\n      description: Returns a list of `BPIAccount` objects in the authorized scope; _normative_\n      operationId: listBPIAccounts\n      parameters:\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/results-per-page'\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/BPIAccount'\n                type: array\n          description: The request was successful and a list of BPI account objects has been returned.\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '503':\n          $ref: '#/components/responses/ServiceUnavailable'\n      servers:\n        - url: http://localhost:8080\n      summary: List BPI account objects\n      tags:\n        - Baseline\n    post:\n      deprecated: false\n      description: 'Creates a `BPIAccount` using the parameters provided in the request body; _normative_'\n      operationId: createBPIAccount\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BPIAccount'\n            example:\n              owners: \n                - 'did:prvd:7cb23e2b-07ed-4562-8afb-73955f8f17c5'\n              security_policies:\n                - type: AuthenticationPolicy\n                  reference: 'https://example.com/policies/authentication-policy.json'\n              nonce: 4114\n              workflows:\n                $ref: '#/components/schemas/WorkflowInstance'\n        required: true\n      responses:\n        '201':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BPIAccount'\n          description: The request was successful and a new BPI account has been created.\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '503':\n          $ref: '#/components/responses/ServiceUnavailable'\n      servers:\n        - url: http://localhost:8080\n      summary: Create BPI account\n      tags:\n        - Baseline\n  /bpi_accounts/{id}:\n    get:\n      deprecated: false\n      description: Retrieves details for a specific `BPIAccount`; _normative_\n      operationId: getBPIAccountDetails\n      parameters:\n        - description: ID of a specific `BPIAccount`; _UUID as specified by RFC4122_\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n          example: '563cb9ed-01cb-49ec-9690-d779ea20f55f'\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/BPIAccount'\n                type: array\n          description: The request was successful and detailed information about the specified BPI account has been returned.\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '503':\n          $ref: '#/components/responses/ServiceUnavailable'\n      servers:\n        - url: http://localhost:8080\n      summary: Get BPI account details\n      tags:\n        - Baseline\n  /protocol_messages:\n    post:\n      summary: Create a Baseline protocol message\n      description: Creates a Baseline protocol message per the parameters provided in the request body; _normative_\n      operationId: createProtocolMessage\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ProtocolMessagePayload'\n        required: true\n      responses:\n        '201':\n          description: The request was successful and a new protocol message was created.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProtocolMessage'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '503':\n          $ref: '#/components/responses/ServiceUnavailable'\n      deprecated: false\n      servers:\n        - url: http://localhost:8080    \n      tags:\n        - Baseline\n  /resolve/{did}:\n    get:\n      description: DID document endpoint for `Subject` instances; _non-normative_\n      operationId: resolveDID\n      parameters: \n        - description: ID of a specific DID to be resolved\n          in: path\n          name: did\n          required: true\n          schema:\n            type: string\n          example: 'did:prvd:8def7853-245b-4743-b702-984417a8ba2f'\n      responses:\n        '200':\n          description: A resolved DID\n          content:\n            application/json; charset=UTF-8:\n              schema:\n                type: object\n                properties:\n                  '@context':\n                    type: array\n                    description: List of @contexts\n                    items: {}\n                  id:\n                    type: string\n                    description: ID of DID\n                  verificationMethod:\n                    type: array\n                    description: Details regarding the verification method used to resolve DID\n                    items:\n                      type: object\n                      properties:\n                        controller:\n                          type: string\n                          description: ID of DID controller\n                        id:\n                          type: string\n                          description: ID of DID\n                        publicKeyJWK:\n                          type: object\n                          description: Public key for JWK\n                          properties:\n                            kid:\n                              type: string\n                            n: \n                              type: string\n                            e:\n                              type: string\n                            fingerprint:\n                              type: string\n                        public_key:\n                          type: string \n                  type:\n                    type: string\n                    description: Type of DID context\n                  assertionMethod:\n                    type: string\n                    description: Assertion method used\n                  authentication:\n                    type: string\n                  capabilityInvocation:\n                    type: string\n                  capabilityDelegation:\n                    type: string\n                  keyAgreement:\n                    type: string\n              example: \n                '@context':\n                  - 'https://www.w3.org/ns/did/v1'\n                  - 'https://w3id.org/security/suites/jws-2020/v1'\n                id: 'did:prvd:54dc7f20-f2ae-49ff-93ab-c3857c64600a'\n                verificationMethod:\n                  - controller: 'did:prvd:54dc7f20-f2ae-49ff-93ab-c3857c64600a'\n                    id: 'did:prvd:54dc7f20-f2ae-49ff-93ab-c3857c64600a#a3:c2:e5:17:c2:19:26:3c:fa:a2:2c:38:7b:ca:0c:60'\n                    publicKeyJwk:\n                      kid: 'a3:c2:e5:17:c2:19:26:3c:fa:a2:2c:38:7b:ca:0c:60'\n                      'n': \u003e-\n                              861483997211088567986679229181848054089604638641344651799629411219132348016278717092102128681135611380326752098936363353495444063202162029673523557773782048024114883574432634108045249947154852742644555192210297230097245140428848581230277818343146223559594512475826760838877076266154044960265352746066723631764046840316942987769580553619014590812187691295364700040641787500269269399045832588373172593121687203191684140294108378584755314277325012894787853550357182542202120051794903430593790088728831567724495129050530806677080541218084315114228795876927064009879284573531870815708443412933965416303038891773876363479243549734042137128368669274726190909529704641365251977820965336530028317042370318858190049737976730950424571654404303776058323774989878709454832673621703315168343354939050427851085442751220892330674377060840075089494965206267742175926300979682121686578985916424314967542319047670046306072654213458712385294663342927553785567808885434950558955088305721767631170042743815215456801539616413473452207339467426842177647739317764485798830023496667390636938833319855298970928615645190825794520784096740427440910286686264656276871411041902304833534185654554399301291984087480695247759311118167876962745932311927957101815475731\n                      e: '10001'\n                      fingerprint: 'a3:c2:e5:17:c2:19:26:3c:fa:a2:2c:38:7b:ca:0c:60'\n                      public_key: |-\n                        -----BEGIN PUBLIC KEY-----\n                        MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA0yqdJMBej1X8WwMMkMZw\n                        DV6zZzup4RHLcln0xfGSm6dMPBDM1G96fuHhOwH5+uU5MQHJP7RqW71Bu5dLIG8Z\n                        RX+XyUtb0sxCV/7X27Nm/bKpDysaSWQ36reAmw5wVaB1SoFeN519FY5rhoCWmH3W\n                        auBAHTzpjg57p7uR0XynYXf8NSGXlysWHppkppqwrPH64G6UZaB7SMl1PFfkJeqZ\n                        zJpzBGYWsixdF1EjXn+Yz0mhUZO2OSPWifOuN7cpn3BuNqegg4iVdz5HDoQhJW7N\n                        uRhf3buKd/mjat8XA3e2Rkrr2h835GloScJkj7I4BZUNkzKQuEK6C9xW/zJtbPqQ\n                        RYEq84A1hMfSZ3G5HFe2JkqiyvXkFwS3qMc5Pur8tZSzBj6AYMoJJso/aOdphpR8\n                        6MaaWXWTwvwfpZbMRqehOcsmQcNLF2gLJPuHzR5WtVCnWrDgvjsWyeDD1WISKusi\n                        aOeHxZjS3Bjl4Imq48l1wi2eI/11F/Xg70F4FJaMYLVHJA2nsmBuuQ9UDYHHq876\n                        clKvIvgIItzJcv9lnmjl1Jks1DwCUF3qF2ugYcs9A3EoEcNzhMgZNJ2j5OUzfx1E\n                        bzVKkqoC9MQpZWXgqV0KQqKK4I3rMY+1hLqk4S4eF9ZAVlT33qfMzlf0qWTOcP1Z\n                        i2dsm0fy4NxWxknlEn5/LhMCAwEAAQ==\n                        -----END PUBLIC KEY-----\n                type: JsonWebKey2020\n                assertionMethod:\n                  'did:prvd:54dc7f20-f2ae-49ff-93ab-c3857c64600a#a3:c2:e5:17:c2:19:26:3c:fa:a2:2c:38:7b:ca:0c:60'\n                authentication:\n                  'did:prvd:54dc7f20-f2ae-49ff-93ab-c3857c64600a#a3:c2:e5:17:c2:19:26:3c:fa:a2:2c:38:7b:ca:0c:60'\n                capabilityInvocation:\n                  'did:prvd:54dc7f20-f2ae-49ff-93ab-c3857c64600a#a3:c2:e5:17:c2:19:26:3c:fa:a2:2c:38:7b:ca:0c:60'\n                capabilityDelegation:\n                  'did:prvd:54dc7f20-f2ae-49ff-93ab-c3857c64600a#a3:c2:e5:17:c2:19:26:3c:fa:a2:2c:38:7b:ca:0c:60'\n                keyAgreement:\n                  'did:prvd:54dc7f20-f2ae-49ff-93ab-c3857c64600a#a3:c2:e5:17:c2:19:26:3c:fa:a2:2c:38:7b:ca:0c:60'\n      summary: Retrieve DID document\n      tags: \n        - Registry\n  /contracts:\n    get:\n      deprecated: false\n      description: Returns a list of smart contracts in the authorized scope; _non-normative_\n      operationId: listContracts\n      parameters:\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/results-per-page'\n        - description: 'Flag to indicate if token contracts should be filtered from the response; default is true'\n          explode: true\n          in: query\n          name: filter_tokens\n          required: false\n          schema:\n            type: boolean\n        - description: 'Indicates how the response should be sorted; currently, recent is the only supported option and returns by accessed_at descending.'\n          explode: true\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          content:\n            application/json; charset=UTF-8:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Contract'\n                type: array\n          description: The request was successful and a list of smart contracts has been returned.\n          headers:\n            X-Total-Results-Count:\n              $ref: '#/components/headers/X-Total-Results-Count'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '503':\n          $ref: '#/components/responses/ServiceUnavailable'\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: unexpected error\n      summary: List contracts\n      tags:\n        - CCSM\n    post:\n      deprecated: false\n      description: 'Deploys a contract using the parameters provided in the request body; _non-normative_'\n      operationId: deployContract\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Contract'\n        required: true\n      responses:\n        '201':\n          content:\n            application/json; charset=UTF-8:\n              schema:\n                $ref: '#/components/schemas/Contract'\n          description: The request was successful and the specified contract has been deployed.\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '503':\n          $ref: '#/components/responses/ServiceUnavailable'\n      summary: Deploy contract\n      tags:\n        - CCSM\n  /contracts/{id}:\n    get:\n      deprecated: false\n      description: 'Retrieves details for a specified `Contract`; _non-normative_'\n      operationId: getContractDetail\n      parameters:\n        - description: 'ID of a specific `Contract` for which detailed information is desired; _UUID as specified by RFC4122_'\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          content:\n            application/json; charset=UTF-8:\n              schema:\n                $ref: '#/components/schemas/Contract'\n          description: The request was successful and detailed information about the specified contract has been returned.\n          headers:\n            X-Total-Results-Count:\n              $ref: '#/components/headers/X-Total-Results-Count'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '503':\n          $ref: '#/components/responses/ServiceUnavailable'\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: unexpected error\n      summary: Get contract detail\n      tags:\n        - CCSM\n  /networks:\n    get:\n      deprecated: false\n      description: Returns a list of available peer-to-peer CCSM `Network` instances; _non-normative_\n      operationId: listNetworks\n      parameters:\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/results-per-page'\n        - $ref: '#/components/parameters/public'\n      responses:\n        '200':\n          content:\n            application/json; charset=UTF-8:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Network'\n                type: array\n          description: The request was successful and a list of CCSM networks has been returned.\n          headers:\n            X-Total-Results-Count:\n              $ref: '#/components/headers/X-Total-Results-Count'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '503':\n          $ref: '#/components/responses/ServiceUnavailable'\n      summary: List CCSM networks\n      tags:\n        - CCSM\n  /networks/{id}/status:\n    get:\n      deprecated: false\n      description: 'Retrieves the syncing status and, if fully-synced, real-time metrics and metadata of a specified CCSM `Network`; _non-normative_'\n      operationId: getNetworkStatus\n      parameters:\n        - description: 'ID of a specific CCSM `Network` for which the status is desired; _UUID as specified by RFC4122_'\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          content:\n            application/json; charset=UTF-8:\n              schema:\n                $ref: '#/components/schemas/NetworkStatus'\n          description: The request was successful and the status of the specified CCSM network has been returned.\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '503':\n          $ref: '#/components/responses/ServiceUnavailable'\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: unexpected error\n      summary: Get CCSM network status\n      tags:\n        - CCSM\n  /provers:\n    get:\n      deprecated: false\n      description: 'Returns a list of `Prover` instances in the authorized scope; _normative_'\n      operationId: listProvers\n      parameters:\n        - description: 'Filter the response by elliptic curve'\n          explode: false\n          in: query\n          name: curve\n          required: false\n          schema:\n            type: string\n        - description: 'Filter the response by identifier'\n          explode: false\n          in: query\n          name: identifier\n          required: false\n          schema:\n            type: string\n        - description: 'Filter the response by provider'\n          explode: false\n          in: query\n          name: provider\n          required: false\n          schema:\n            type: string\n        - description: 'Filter the response by proving scheme'\n          explode: false\n          in: query\n          name: proving_scheme\n          required: false\n          schema:\n            type: string\n        - description: 'Filter the response by the status'\n          explode: false\n          in: query\n          name: status\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          content:\n            application/json; charset=UTF-8:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Prover'\n                type: array\n          description: The request was successful and a list of provers has been returned.\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '503':\n          $ref: '#/components/responses/ServiceUnavailable'\n      summary: List provers\n      tags:\n        - Privacy\n    post:\n      deprecated: false\n      description: |-\n        Creates a baseline `Prover` using the parameters provided in the request body\n\n        Creating a prover entails compiling the prover from source, performing the appropriate setup or multiparty key ceremony and securely persist resulting artifacts.\n\n        You must provision a `Prover` before it can be used to generate and verify proofs. The foregoing holds true regardless of which provider, proving_scheme, curve and prover identifier you specify (or source, if the raw source code of the `Prover` is provided instead of an identifier).\n\n        A persistent store is implicitly initialized upon the creation of a new prover unless an existing store_id is provided and the referenced store is valid in the context of the prover and authorized scope.\n\n        The parameters required to provision a `Prover` vary slightly across providers and proving schemes. Ensure you are using the `source` or `identifier` parameter properly for the selected `provider` and `proving_scheme`. _normative_\n      operationId: createProver\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Prover'\n        required: true\n      responses:\n        '201':\n          description: The request was successful and a new prover has been created.\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '503':\n          $ref: '#/components/responses/ServiceUnavailable'\n      summary: Create prover\n      tags:\n        - Privacy\n  /provers/{id}:\n    get:\n      deprecated: false\n      description: 'Retrieves details for a specific `Prover`; _normative_'\n      operationId: getProverDetails\n      parameters:\n        - description: 'ID of a specific `Prover`; _UUID as specified by RFC4122_'\n          in: path\n          name: id\n          required: true\n          schema:\n            format: uuid\n            type: string\n      responses:\n        '200':\n          content:\n            application/json; charset=UTF-8:\n              schema:\n                $ref: '#/components/schemas/Prover'\n          description: The request was successful and detailed information about the specified prover has been returned.\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '503':\n          $ref: '#/components/responses/ServiceUnavailable'\n      summary: Get prover details\n      tags:\n        - Privacy\n  /provers/{id}/prove:\n    post:\n      deprecated: false\n      description: |-\n        Generates a cryptographic proof given a valid witness parameter; calling this API has an implicit side-effect of writing to the configured `Store`. _normative_\n      operationId: generateProof\n      parameters:\n        - description: ID of a specific `Prover`; _UUID as specified by RFC4122_\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                identifier:\n                  type: string\n                proving_scheme:\n                  description: Proving scheme to be used\n                  example: groth16\n                  readOnly: false\n                  type: string\n                curve:\n                  description: Pairing-friendly elliptic curve\n                  example: BN254\n                  readOnly: false\n                  type: string                \n                provider:\n                  description: Circuit provider\n                  example: gnark\n                  readOnly: false\n                  type: string\n                name:\n                  type: string\n                  description: 'User-defined name for proof'\n                store_id: \n                  description: 'ID of `Store` that will accept the generate proof'\n                  format: uuid\n                  type: string\n                witness:\n                  $ref: '#/components/schemas/Witness'\n              type: object\n        required: true\n      responses:\n        '200':\n          description: The request was successful and a new proof has been created.\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '422':\n          description: The API returns a 422 status code and human-readable error message(s) if (i) the witness parameters is not provided, (ii) required prover arguments (i.e., fields) are not included within the specific witness parameter or (iii) when Prover constraints are not satisfied.\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '503':\n          $ref: '#/components/responses/ServiceUnavailable'\n      summary: Generate proof\n      tags:\n        - Privacy\n  /provers/{id}/verify:\n    post:\n      deprecated: false\n      description: Verifies a `Proof` using the `Witness` parameters provided in the request body; _normative_\n      operationId: verify\n      parameters:\n        - description: ID of a specific `Prover`; _UUID as specified by RFC4122_\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/StateProof'\n        required: true\n      responses:\n        '201':\n          description: The request was successful and a verification result has been returned.\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '503':\n          $ref: '#/components/responses/ServiceUnavailable'\n      summary: Verify proof\n      tags:\n        - Privacy\n  /subjects:\n    get:\n      deprecated: false\n      description: 'Returns a list of BPI `Subject` instances in the authorized scope; _normative_'\n      operationId: listSubjects\n      parameters:\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/results-per-page'\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Subject'\n                type: array\n          description: The request was successful and a list of subjects has been returned.\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '503':\n          $ref: '#/components/responses/ServiceUnavailable'\n      servers:\n        - url: http://localhost:8080\n      summary: List subjects\n      tags:\n        - Baseline\n    post:\n      deprecated: false\n      description: 'Creates a BPI `Subject` using the parameters provided in the request body; _normative_'\n      operationId: createSubject\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Subject'\n            example:\n              wallet_id: '99c404e9-fe10-4ca7-b787-d5943d03591c'\n              credentials: []\n              description: Organization for testing\n              metadata: {}\n              name: ACME Inc.\n              type: Organization\n        required: true\n      responses:\n        '201':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Subject'\n          description: The request was successful and a new Subject has been created.\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '503':\n          $ref: '#/components/responses/ServiceUnavailable'\n      servers:\n        - url: http://localhost:8080\n      summary: Create subject\n      tags:\n        - Baseline\n  /subjects/{id}:\n    get:\n      deprecated: false\n      description: 'Retrieves details for a specified BPI `Subject`; _normative_'\n      operationId: getSubjectDetails\n      parameters:\n        - description: 'ID of a specific `Subject` for which detailed information is desired'\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n          example: 'did:prvd:331156fb-fa5c-4557-ac39-69ae34c72c18'\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Subject'\n          description: The request was successful and the details of the specified subject have been returned.\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '503':\n          $ref: '#/components/responses/ServiceUnavailable'\n      servers:\n        - url: http://localhost:8080\n      summary: Get subject details\n      tags:\n        - Baseline\n    put:\n      deprecated: false\n      description: 'Updates a specified BPI `Subject` using the parameters provided in the request body; _normative_'\n      operationId: updateSubjectDetails\n      parameters:\n        - description: 'ID of a specific `Subject` to be updated; _UUID as specified by RFC4122_'\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n          example: 'did:prvd:99c404e9-fe10-4ca7-b787-d5943d03591c'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Subject'\n            example:\n              wallet_id: '99c404e9-fe10-4ca7-b787-d5943d03591c'\n              credentials: []\n              description: Organization for testing\n              metadata: {}\n              name: ACME Inc.\n              type: Orgnization\n        required: true\n      responses:\n        '204':\n          description: The request was successful and the specified subject has been updated.\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '503':\n          $ref: '#/components/responses/ServiceUnavailable'\n      servers:\n        - url: http://localhost:8080\n      summary: Update subject details\n      tags:\n        - Baseline\n  /subjects/{id}/accounts:\n    get:\n      deprecated: false\n      description: 'Returns a list of BPI `SubjectAccount` for a specified BPI `Subject`; _normative_'\n      operationId: listSubjectAccounts\n      parameters:\n        - description: 'ID of a specific `Subject` for which a list of  `SubjectAccount` objects is desired; _UUID as specified by RFC4122_'\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n          example: 'did:prvd:331156fb-fa5c-4557-ac39-69ae34c72c18'\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/SubjectAccount'\n                type: array\n          description: The request was successful and a list of subject context objects has been returned.\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '503':\n          $ref: '#/components/responses/ServiceUnavailable'\n      servers:\n        - url: http://localhost:8080\n      summary: List subject contexts\n      tags:\n        - Baseline\n    post:\n      deprecated: false\n      description: 'Creates a BPI `SubjectAccount` for a specified BPI `Subject`; _normative_'\n      operationId: createSubjectAccount\n      parameters:\n        - description: 'ID of a specific `Subject` to which the `SubjectAccount` is to be associated'\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n          example: 'did:prvd:331156fb-fa5c-4557-ac39-69ae34c72c18'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SubjectAccount'\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/SubjectAccount'\n          description: The request was successful and a list of subject context objects has been returned.\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '503':\n          $ref: '#/components/responses/ServiceUnavailable'\n      servers:\n        - url: http://localhost:8080\n      summary: List subject contexts\n      tags:\n        - Baseline\n  /subjects/{subject_id}/accounts/{id}:\n    get:\n      deprecated: false\n      description: 'Returns details for a specific BPI `SubjectAccount` for a specified BPI `Subject`; _normative_'\n      operationId: getSubjectAccountDetails\n      parameters:\n        - description: 'ID of a specific `SubjectAccount` for which a list of  `SubjectAccount` objects is desired'\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n          example: 'did:prvd:648142fb-fa5c-4557-ac39-69ae34c72c18'\n        - description: 'ID of a specific `Subject` for which a list of `SubjectAccount` objects is desired'\n          in: path\n          name: subject_id\n          required: true\n          schema:\n            type: string\n          example: 'did:prvd:331156fb-fa5c-4557-ac39-69ae34c72c18'\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/SubjectAccount'\n                type: object\n          description: The request was successful and detailed information about the specified subject context has been returned.\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '503':\n          $ref: '#/components/responses/ServiceUnavailable'\n      servers:\n        - url: http://localhost:8080\n      summary: Get subject context details\n      tags:\n        - Baseline\n  /transactions:\n    get:\n      deprecated: false\n      description: Returns a list of BPI `Transaction` instances in the authorized scope; _normative_\n      operationId: listTransactions\n      parameters:\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/results-per-page'\n        - description: When true, contract creation transactions are filtered\n          explode: true\n          in: query\n          name: filter_contract_creations\n          required: false\n          schema:\n            type: boolean          \n        - description: Comma-delimited list of statuses by which the transactions response is filtered\n          explode: true\n          in: query\n          name: status\n          required: false\n          schema:\n            type: string          \n      responses:\n        '200':\n          content:\n            application/json; charset=UTF-8:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Transaction'\n                type: array\n          description: The request was successful and a list of transactions has been returned.\n          headers:\n            X-Total-Results-Count:\n              $ref: '#/components/headers/X-Total-Results-Count'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '503':\n          $ref: '#/components/responses/ServiceUnavailable'\n      summary: List transactions\n      tags:\n        - CCSM\n    post:\n      deprecated: false\n      description: \u003e\n        Creates and broadcast a BPI transaction in a chain- and protocol-agnostic manner using the parameters provided in the request body\n\n        This API provides an asynchronous, fault-tolerant mechanism for providing some guarantees about how a well-formed transaction will become eventually-consistent with the underlying target Network. Currently, transactions are guaranteed to be successfully broadcast to the target network or timeout within 5 minutes. If a transaction is unable to be broadcast to the network for any reason (i.e., network reachability, invalid nonce etc.) it is retried every 60 seconds. It is likely these retry and timeout constraints will be made more configurable in a future release.\n\n        In addition to the asynchronous and resilient nature of broadcasting transactions using this API, instrumentation of the full transaction lifecycle is captured for each transaction. _normative_\n      operationId: createTransaction\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Transaction'\n        required: true\n      responses:\n        '201':\n          content:\n            application/json; charset=UTF-8:\n              schema:\n                $ref: '#/components/schemas/Transaction'\n          description: The request was successful and a new transaction has been created.\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '503':\n          $ref: '#/components/responses/ServiceUnavailable'\n      summary: Create transaction\n      tags:\n        - CCSM\n  /transactions/{id}:\n    get:\n      deprecated: false\n      description: Retrieves details for a specified BPI `Transaction`; _normative_\n      operationId: getTransactionDetails\n      parameters:\n        - description: ID of a specific `Transaction` for which detailed information is desired; _UUID as specified by RFC4122_\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          content:\n            application/json; charset=UTF-8:\n              schema:\n                $ref: '#/components/schemas/Transaction'\n          description: The request was successful and detailed information about the specified transaction has been returned.\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '503':\n          $ref: '#/components/responses/ServiceUnavailable'\n      summary: Get transaction details\n      tags:\n        - CCSM\n  /unseal:\n    post:\n      deprecated: false\n      description: \u003e\n        Unseals a `Vault` and enables additional interaction within the authorized scope. \n\n        One sealing key is valid for all vaults within a single instance. The SEAL_UNSEAL_VALIDATION_HASH environment variable contains a SHA-256 hash of the 256-bit entropy BIP39 seed phrase used for the seal/unseal key. When a valid sealing key is presented to the vault (i.e. one that has the same SHA-256 hash value as the SEAL_UNSEAL_VALIDATION_HASH environment variable), the seal/unseal key will then be cloaked (i.e., encrypted with a random, ephemeral, in-memory cloaking key) in memory and\n        decrypted only when required for operations by the cloaking key. _non-normative_\n      operationId: unsealVault\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UnsealVault'\n        required: true\n      responses:\n        '204':\n          description: The request was successful and the corresponding vault has been unsealed.\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '503':\n          $ref: '#/components/responses/ServiceUnavailable'\n      summary: Unseal vault\n      tags:\n        - Vault\n  /vaults:\n    get:\n      deprecated: false\n      description: Returns a list of `Vault` instances in the authorized scope; _non-normative_\n      operationId: listVaults\n      parameters:\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/results-per-page'\n      responses:\n        '200':\n          content:\n            application/json; charset=UTF-8:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Vault'\n                type: array\n          description: The request was successful and a list of vaults has been returned.\n          headers:\n            X-Total-Results-Count:\n              $ref: '#/components/headers/X-Total-Results-Count'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '503':\n          $ref: '#/components/responses/ServiceUnavailable'\n      summary: List vaults\n      tags:\n        - Vault\n    post:\n      deprecated: false\n      description: Creates a `Vault` instance using the parameters provided in the request body\n      operationId: createVault\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            example:\n              description: Example vault description\n              name: Example vault name\n            schema:\n              $ref: '#/components/schemas/Vault'\n        required: true\n      responses:\n        '201':\n          content:\n            application/json; charset=UTF-8:\n              schema:\n                $ref: '#/components/schemas/Vault'\n          description: The request was successful and a new vault has been created.\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '503':\n          $ref: '#/components/responses/ServiceUnavailable'\n      summary: Create vault\n      tags:\n        - Vault\n  /vaults/{id}/keys:\n    get:\n      deprecated: false\n      description: Returns a list of keys in a specific `Vault`; _non-normative_\n      operationId: listKeys\n      parameters:\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/results-per-page'\n        - description: ID of a specific `Vault` that contains the desired keys ; _UUID as specified by RFC4122_\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          content:\n            application/json; charset=UTF-8:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Key'\n                type: array\n          description: The request was successful and a list of keys for the specified vault has been returned.\n          headers:\n            X-Total-Results-Count:\n              $ref: '#/components/headers/X-Total-Results-Count'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '503':\n          $ref: '#/components/responses/ServiceUnavailable'\n      summary: List keys\n      tags:\n        - Vault\n    post:\n      deprecated: false\n      description: Creates a `Key` in a specific `Vault`; _non-normative_\n      operationId: createKey\n      parameters:\n        - description: ID of a specific `Vault` in which a desired `Key` is to be created; _UUID as specified by RFC4122_\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            example:\n              description: Secure channel for messaging\n              name: Private chat\n              spec: ChaCha20\n              type: symmetric\n              usage: encrypt/decrypt\n              vault_id: ae3c07d9-8a41-4cd3-92c0-e6358cbd516c\n            schema:\n              $ref: '#/components/schemas/Key'\n        required: true\n      responses:\n        '201':\n          content:\n            application/json; charset=UTF-8:\n              schema:\n                $ref: '#/components/schemas/Key'\n          description: The request was successful and a new key has been created.\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '503':\n          $ref: '#/components/responses/ServiceUnavailable'\n      summary: Create a key\n      tags:\n        - Vault\n  /vaults/{id}/keys/{key_id}:\n    delete:\n      deprecated: false\n      description: Deletes a specific `Key` in a specific `Vault`; _non-normative_\n      operationId: deleteKey\n      parameters:\n        - description: ID of a specific `Vault` that contains a specific `Key` to be deleted; _UUID as specified by RFC4122_\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: ID of a specific `Key` to be deleted; _UUID as specified by RFC4122_\n          in: path\n          name: key_id\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: The request was successful and the specified key has been deleted.\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '503':\n          $ref: '#/components/responses/ServiceUnavailable'\n      summary: Delete a key\n      tags:\n        - Vault\n  /vaults/{id}/keys/{key_id}/derive:\n    post:\n      deprecated: false\n      description: Creates a derived key from a specific `Key` in a specific `Vault`; _non-normative_\n      operationId: deriveKeyRequest\n      parameters:\n        - description: ID of a specific `Vault` in which a derived key is to be created; _UUID as specified by RFC4122_\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: ID of a specific `Key` to be used to create derived key; _UUID as specified by RFC4122_\n          in: path\n          name: key_id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DerivedKey'\n        required: true\n      responses:\n        '201':\n          content:\n            application/json; charset=UTF-8:\n              schema:\n                $ref: '#/components/schemas/DerivedKey'\n          description: The request was successful and a new key has been derived.\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '503':\n          $ref: '#/components/responses/ServiceUnavailable'\n      summary: Creates a derived key\n      tags:\n        - Vault\n  /vaults/{id}/secrets:\n    get:\n      deprecated: false\n      description: Returns a list of secrets stored in a specific `Vault`; _non-normative_\n      operationId: listSecrets\n      parameters:\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/results-per-page'\n        - description: ID of a specific `Vault` in which the desired secrets are stored; _UUID as specified by RFC4122_\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          content:\n            application/json; charset=UTF-8:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Vault'\n                type: array\n          description: The request was successful and a list of secrets has been returned.\n          headers:\n            X-Total-Results-Count:\n              $ref: '#/components/headers/X-Total-Results-Count'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '503':\n          $ref: '#/components/responses/ServiceUnavailable'\n      summary: List secrets\n      tags:\n        - Vault\n    post:\n      deprecated: false\n      description: Stores a `Secret` in a specific `Vault`; _non-normative_\n      operationId: storeSecret\n      parameters:\n        - description: ID of a specific `Vault` in which to store a specific `Secret`; _UUID as specified by RFC4122_\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Secret'\n        required: true\n      responses:\n        '201':\n          content:\n            application/json; charset=UTF-8:\n              schema:\n                $ref: '#/components/schemas/Secret'\n          description: The request was successful and the secret has been stored.\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '503':\n          $ref: '#/components/responses/ServiceUnavailable'\n      summary: Store secret\n      tags:\n        - Vault\n  /vaults/{id}/secrets/{secret_id}:\n    delete:\n      deprecated: false\n      description: Deletes a specific `Secret` from a specific `Vault`; _non-normative_\n      operationId: deleteSecret\n      parameters:\n        - description: ID of a specific `Vault` that contains a `Secret` to be deleted; _UUID as specified by RFC4122_\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: ID of a specific `Secret` to be deleted; _UUID as specified by RFC4122_\n          in: path\n          name: secret_id\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          content:\n            application/json; charset=UTF-8:\n              schema:\n                $ref: '#/components/schemas/Secret'\n          description: The request was successful and the specified secret has been deleted.\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '503':\n          $ref: '#/components/responses/ServiceUnavailable'\n      summary: Delete secret\n      tags:\n        - Vault\n    get:\n      deprecated: false\n      description: Retrieves a specific `Secret` from a specific `Vault`; _non-normative_\n      operationId: retrieveSecret\n      parameters:\n        - description: ID of a specific `Vault` in which a specific `Secret` is stored; _UUID as specified by RFC4122_\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: ID of a specific `Secret` to be retrieved; _UUID as specified by RFC4122_\n          in: path\n          name: secret_id\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          content:\n            application/json; charset=UTF-8:\n              schema:\n                $ref: '#/components/schemas/Secret'\n          description: The request was successful and the specified secret has been returned.\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '503':\n          $ref: '#/components/responses/ServiceUnavailable'\n      summary: Retrieve secret\n      tags:\n        - Vault\n  /wallets:\n    get:\n      deprecated: false\n      description: Returns a list of `Wallet` instances; _non-normative_\n      operationId: listWallets\n      parameters:\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/results-per-page'\n      responses:\n        '200':\n          content:\n            application/json; charset=UTF-8:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Wallet'\n                type: array\n          description: The request was successful and a list of wallets has been returned.\n          headers:\n            X-Total-Results-Count:\n              $ref: '#/components/headers/X-Total-Results-Count'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '503':\n          $ref: '#/components/responses/ServiceUnavailable'\n      summary: List wallets\n      tags:\n        - CCSM\n    post:\n      deprecated: false\n      description: |\n        Creates a `Wallet` using the parameters provided in the request body. A `Wallet` may be setup as custodial or non-custodial. If the Wallet is custodial then the platform will derive addresses and securely persist an `Account` for each of those derived addresses. _non-normative_\n      operationId: createWallet\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Wallet'\n        required: true\n      responses:\n        '201':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Wallet'\n          description: The request was successful and a new wallet has been created.\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '503':\n          $ref: '#/components/responses/ServiceUnavailable'\n      summary: Create wallet\n      tags:\n        - CCSM\n  /wallets/{id}/accounts:\n    get:\n      deprecated: false\n      description: Returns a list of `Account` instances for a specific `Wallet`; _non-normative_\n      operationId: listWalletAccounts\n      parameters:\n        - $ref: '#/components/parameters/results-per-page'\n        - description: ID of a specific `Wallet` containing `Account` instances; _UUID as specified by RFC4122_\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          content:\n            application/json; charset=UTF-8:\n              schema:\n                items:\n                  $ref: '#/components/schemas/BPIAccount'\n                type: array\n          description: The request was successful and a list of accounts has been returned.\n          headers:\n            X-Total-Results-Count:\n              $ref: '#/components/headers/X-Total-Results-Count'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '503':\n          $ref: '#/components/responses/ServiceUnavailable'\n      summary: List wallet accounts\n      tags:\n        - CCSM\n  /workflows:\n    get:\n      description: Returns a list of BPI `Workflow` instances in the authorized scope; _normative_\n      operationId: listWorkflows\n      parameters:\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/results-per-page'\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/WorkflowInstance'\n                type: array\n          description: The request was successful and a list of workflow instances has been returned.\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '503':\n          $ref: '#/components/responses/ServiceUnavailable'\n      servers:\n        - url: http://localhost:8080\n      summary: List workflow instances\n      tags:\n        - Baseline\n    post:\n      description: Creates a BPI `WorkflowInstance` using the parameters provided in the request body; _normative_\n      operationId: createWorkflow\n      requestBody:\n        content:\n          application/json:\n            schema: \n              $ref: '#/components/schemas/WorkflowInstance'\n            example:\n              name: Procure to Pay\n              type: procure_to_pay\n      responses:\n        '201':\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/WorkflowInstance'\n                type: array\n          description: The request was successful and a new workflow instance has been created.\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '503':\n          $ref: '#/components/responses/ServiceUnavailable'\n      servers:\n        - url: http://localhost:8080\n      summary: Create workflow instance\n      tags:\n        - Baseline\n  /workflows/{id}:\n    get:\n      description: Retrieves details for a specific BPI `WorkflowInstance`; _normative_\n      operationId: getWorkflowDetails\n      parameters:\n        - description: ID of a specific `WorkflowInstance`; _UUID as specified by RFC4122_\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n          example: '8def7853-245b-4743-b702-984417a8ba2f'\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WorkflowInstance'\n          description: The request was successful and detailed information about the specified `WorkflowInstance` has been returned.\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '503':\n          $ref: '#/components/responses/ServiceUnavailable'\n      servers:\n        - url: http://localhost:8080\n      summary: Get workflow instance details\n      tags:\n        - Baseline\n  /workflows/{id}/worksteps:\n    get:\n      description: Returns a list of BPI `Workstep` instances in a specific `Workflow` instance; _normative_\n      operationId: listWorksteps\n      parameters:\n        - description: ID of a specific `WorkflowInstance`; _UUID as specified by RFC4122_\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/WorkstepInstance'\n                type: array\n          description: The request was successful and a list of workstep instances has been returned.\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '503':\n          $ref: '#/components/responses/ServiceUnavailable'\n      servers:\n        - url: http://localhost:8080\n      summary: List workstep instances\n      tags:\n        - Baseline\n  /workflows/{id}/worksteps/{workstep_id}:\n    get:\n      description: Retrieves details for a specific BPI workstep instance in a specific BPI `WorkflowInstance`; _normative_\n      operationId: getWorkstepDetails\n      parameters:\n        - description: ID of a specific `WorkflowInstance`; _UUID as specified by RFC4122_\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n          example: '8def7853-245b-4743-b702-984417a8ba2f'\n        - description: ID of a specific `WorkstepInstance`; _UUID as specified by RFC4122_\n          in: path\n          name: workstep_id\n          required: true\n          schema:\n            type: string\n          example: '9299e803-5ed7-4618-b5d1-6a133dc67790'\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/WorkstepInstance'\n                type: object\n              example:\n                created_at: '2021-04-21T02:12:05.000Z'\n                id: '2fffec13-590e-41eb-9a84-69ed881e0036'\n                prover_id: 'dd615561-83e6-4f53-ac0f-aaf1749df139'\n                require_finality: true\n                workflow_id: 'f9227803-5541-4c13-a554-f6980f03362a'\n                type: 'purchase_order'\n          description: The request was successful and detailed information about the specified instance has been returned.\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '503':\n          $ref: '#/components/responses/ServiceUnavailable'\n      servers:\n        - url: http://localhost:8080\n      summary: Get workstep instance details\n      tags:\n        - Baseline\n  /workgroups:\n    get:\n      deprecated: false\n      description: Returns a list of BPI `Workgroup` instances in the authorized scope; _normative_\n      operationId: listWorkgroups\n      parameters:\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/results-per-page'\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Workgroup'\n                type: array\n          description: The request was successful and a list of workgroup instances has been returned.\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '503':\n          $ref: '#/components/responses/ServiceUnavailable'\n      summary: List workgroups\n      tags:\n        - Baseline\n    post:\n      deprecated: false\n      description: Creates a BPI `Workgroup` using the parameters provided in the request body; _normative_\n      operationId: createWorkgroup\n      requestBody:\n        content:\n          application/json:\n            example:\n              subject_id: 'did:prvd:93229a14-5e13-4c45-8352-3ad9948b8ae3'\n              description: An example of the request body for workgroup creation\n              name: Example workgroup\n              network_id: 07102258-5e49-480e-86af-6d0c3260827d\n              type: baseline\n              security_policies: []\n              admins: \n                - 'did:prvd:93229a14-5e13-4c45-8352-3ad9948b8ae3'\n            schema:\n              $ref: '#/components/schemas/Workgroup'\n        required: true\n      responses:\n        '201':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Workgroup'\n          description: The request was successful and a new workgroup has been created.\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '503':\n          $ref: '#/components/responses/ServiceUnavailable'\n      summary: Create workgroup\n      tags:\n        - Baseline\n  /workgroups/{id}:\n    get:\n      description: Retrieves details for a specific BPI `Workgroup`; _normative_\n      operationId: getWorkgroupDetails\n      parameters:\n        - description: ID of a specific `Workgroup` for which detailed information is desired; _UUID as specified by RFC4122_\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Workgroup'\n          description: The request was successful and detailed information about the specified workgroup has been returned.\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '503':\n          $ref: '#/components/responses/ServiceUnavailable'\n      summary: Get workgroup details\n      tags:\n        - Baseline\n    put:\n      deprecated: false\n      description: Updates a specific `Workgroup` using the parameters provided in the request body; _normative_\n      operationId: updateWorkgroup\n      parameters:\n        - description: ID of a specific `Workgroup` to be updated; _UUID as specified by RFC4122_\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            example:\n              subject_id: 'did:prvd:93229a14-5e13-4c45-8352-3ad9948b8ae3'\n              description: An example of the request body for updating a workgroup\n              name: Example workgroup\n              network_id: '07102258-5e49-480e-86af-6d0c3260827d'\n              type: baseline\n              security_policies: []\n              admins:\n                - 'did:prvd:93229a14-5e13-4c45-8352-3ad9948b8ae3'\n            schema:\n              $ref: '#/components/schemas/Workgroup'\n      responses:\n        '204':\n          description: The request was successful and the specified workgroup has been updated.\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '503':\n          $ref: '#/components/responses/ServiceUnavailable'\n      summary: Update workgroup\n      tags:\n        - Baseline\n  /workgroups/{id}/subjects:\n    get:\n      deprecated: false\n      description: Returns a list of BPI `Subject` instances associated with a specific BPI `Workgroup`; _normative_\n      operationId: listWorkgroupSubjects\n      parameters:\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/results-per-page'\n        - description: ID of a specific `Workgroup`; _UUID as specified by RFC4122_\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n          example: '41e89661-d1f0-48e0-9270-3df7a413bdf9'\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Subject'\n                type: array\n          description: The request was successful and a list of Subjects has been returned.\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '503':\n          $ref: '#/components/responses/ServiceUnavailable'\n      servers:\n        - url: http://localhost:8080\n      summary: List workgroup subjects\n      tags:\n        - Baseline\n    post:\n      deprecated: false\n      description: |-\n        Associates a specified BPI `Subject` with a specific BPI `Workgroup`; authorization should be scoped to the BPI `Workgroup` in which the BPI `Subject` is to be included. _normative_\n      operationId: associateWorkgroupSubject\n      parameters:\n        - description: ID of a specific `Workgroup` for which a specific subject is to be associated; _UUID as specified by RFC4122_\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n          example: '41e89661-d1f0-48e0-9270-3df7a413bdf9'\n      requestBody:\n        content:\n          application/json:\n            example:\n              subject_id: 'did:prvd:93229a14-5e13-4c45-8352-3ad9948b8ae3'\n      responses:\n        '201':\n          description: The request was successful and the specified subject has been associated with the specified workgroup.\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '503':\n          $ref: '#/components/responses/ServiceUnavailable'\n      servers:\n        - url: http://localhost:8080\n      summary: Associate workgroup subject\n      tags:\n        - Baseline\ncomponents:\n  headers:\n    X-Total-Results-Count:\n      schema:\n        description: Number of total query hits across all pages\n        example: 14\n        type: integer\n  parameters:\n    page:\n      description: Limits resulting response to the page number specified\n      in: query\n      name: page\n      required: false\n      schema:\n        type: integer\n    public:\n      description: When `TRUE`, limits results to non-private records\n      in: query\n      name: public\n      required: false\n      schema:\n        type: boolean\n    results-per-page:\n      description: Sets the number of results included per page\n      in: query\n      name: rpp\n      required: false\n      schema:\n        type: integer\n  responses:\n    Accepted:\n      description: The request has been accepted for processing, but the processing has not been completed\n    Forbidden:\n      content:\n        application/json:\n          example:\n            code: 403\n            message: The supplied API Authorization header does not have permission to access the requested resource. Please verify that you have sufficient permissions and try again\n          schema:\n            properties:\n              code:\n                type: integer\n              message:\n                type: string\n            type: object\n      description: Forbidden\n    InternalServerError:\n      content:\n        application/json:\n          example:\n            code: 500\n            message: The requested resource is not implemented by the platform\n          schema:\n            properties:\n              code:\n                type: integer\n              message:\n                type: string\n            type: object\n      description: Not Implemented\n    NoContent:\n      description: The request was successful but did not return a response\n    NotFound:\n      content:\n        application/json:\n          example:\n            code: 404\n            message: Platform did not find the requested resource\n          schema:\n            properties:\n              code:\n                type: integer\n              message:\n                type: string\n            type: object\n      description: Not Found\n    OK:\n      description: The request was successful\n    ServiceUnavailable:\n      content:\n        application/json:\n          example:\n            code: 503\n            message: The request cannot be fulfilled due to temporary unavailability of a backend service\n          schema:\n            properties:\n              code:\n                type: integer\n              message:\n                type: string\n            type: object\n      description: Service Unavailable\n    Success:\n      description: The request was successful and a new entity was created\n    TooManyRequests:\n      content:\n        application/json:\n          schema:\n            example:\n              code: 429\n              message: The request was not accepted due to exceeding the rate limit\n            properties:\n              code:\n                type: integer\n              message:\n                type: string\n            type: object\n      description: Too many requests\n    Unauthorized:\n      content:\n        application/json:\n          example:\n            code: 401\n            message: The request required an API Authorization header, or one was provided which could not be authenticated\n          schema:\n            properties:\n              code:\n                type: integer\n              message:\n                type: string\n            type: object\n      description: Unauthorized\n  schemas:\n    BPIAccount:\n      description: The account associated with the (commercial) state of an agreement between counterparties, which must only be changed as a result of a valid BPI transaction (i.e., a successful BPI `Workstep` execution) by way of a `StateClaim`as the new (commercial) state; _normative_\n      properties:\n        '@context':\n          description: Context reference file for SubjectAccount schema validation\n          example: []\n          type: object\n          readOnly: false\n        balances:\n          description: 'Balances for the specified `BPIAccount`'\n          type: object\n          example: {}\n          readOnly: true\n        created_at:\n          description: Date and time of `BPIAccount` creation\n          example: '2021-02-27T14:26:06.864Z'\n          format: date-time\n          readOnly: true\n          type: string\n        owners:\n          description: Must be an array of either a DID or another resolvable unique identifier of the `Subject`\n          example: \n            - 'did:prvd:7cb23e2b-07ed-4562-8afb-73955f8f17c5'\n          type: array\n          items:\n            type: string\n            properties:\n              subject_id: \n                description: ID of a specific `Subject`\n                type: string\n          readOnly: false  \n        id:\n          description: ID of the `BPIAccount`; _UUID as specified by RFC4122_\n          example: 6bb23e2b-07ed-4562-8afb-73955f8f17c5\n          format: uuid\n          readOnly: true\n          type: string\n        metadata:\n          description: Metadata useful for BPI operations and UI implementations\n          example: {}\n          type: object\n          readOnly: false\n        nonce:\n          description: incrementing deterministic counter starting at zero\n          example: 4512\n          format: uint64\n          readOnly: false\n          type: integer\n        security_policies:\n          description: Security policies attached to a `BPIAccount` typically connected to a role but may be independent \n          example: \n            type: 'SecurityPolicy'\n            reference: ''\n          type: array\n          items:\n              type: object\n              required:\n                - type\n                - reference\n              properties:\n                type:\n                  description: Type of security policy\n                  example: 'AuthenticationPolicy'\n                  type: string\n                reference:\n                  description: Resolvable reference link to the security policy object, avoids duplicating policy objects\n                  example: 'https://example.com/policies/authentication-policy.json'\n                  type: string\n                  format: URI\n          readOnly: false          \n        state_claims:\n          description: '`StateClaim` instances associated with the `BPIAccount'\n          example:\n          readOnly: false\n          type: array\n          items:\n            $ref: \"#/components/schemas/StateClaim\"\n        workflows:\n          description: List of `WorkflowInstance` objects related to the specified `BPIAccount`\n          example: []\n          readOnly: false\n          type: array\n          items:\n            $ref: \"#/components/schemas/WorkflowInstance\"\n      required:\n        - owners\n        - nonce\n      title: BPI Account\n      type: object\n    Contract:\n      description: Smart contract object; _non-normative_\n      example:\n        compiled_artifact: {}\n        accessed_at: '2021-02-28T00:41:44.506+0000'\n        address: '0xD3F14c012a8717FF7b5D5AC08C287de58C38D8ba'\n        created_at: '2021-02-27T14:26:06.864Z'\n        id: 84a91108-70db-43c5-9f2f-e1655b9e0b03\n        name: Shuttle\n        network_id: 07102258-5e49-480e-86af-6d0c3260827d\n        params:\n          abi:\n            anonymous: false\n            inputs:\n              indexed: false\n              internal_type: bytes\n              name: message\n              type: bytes\n            name: Ekho\n            type: event\n          wallet_id: df83bcbb-ff5b-4c4c-b1f5-8ca6a61fe460\n          bytecode: 0x\n          contract_name: Ekho\n          outputs: []\n          source: 0x\n          state_mutability: nonpayable\n          pubsub_prefix: 57478604c134ef20b94dff84e52c0fd562ddae56cd50431339766819a7523d09\n          transaction_id: 4c388cca-f11c-4818-96a0-e8ad0b30553d\n        workgroup_id: dc767890-0bbc-4c1d-bc04-f5842330018f\n        type: registry\n      properties:\n        type:\n          description: Type of contract deployed\n          example: 'RegistrySmartContract'\n          readOnly: true\n          type: string\n        compiled_artifact:\n          description: Object for the deployed contract; implementation specific based on chosen contract_type\n          example: {}\n          readOnly: true\n          type: object\n        params:\n          type: object\n          description: Parameters associated with the `Contract`\n          example: {}\n          readOnly: false\n      required:\n          - type\n          - compiled_artifact\n      title: Contract\n      type: object\n    DerivedKey:\n      description: A cryptographic `Key` generated from a password or master key; _non-normative_\n      example:\n        context: channel-6852386c-8a3d-41c6-aa0e-766a31a8faaf\n        description: this is a secure channel\n        name: private chat\n        nonce: 4512\n      properties:\n        context:\n          description: Machine-readable string describing the key derivation context\n          example: ''\n          readOnly: false\n          type: string\n        description:\n          description: User-defined description of derived `Key`\n          example: Example description for example name\n          readOnly: false\n          type: string\n        name:\n          description: User-defined name of derived `Key`\n          example: Example name\n          readOnly: false\n          type: string\n        nonce:\n          description: 'Random 32-bit integer or incrementing counter which must only be used once to avoid exposing the underlying secret; if not provided, a random 32-bit integer is used.'\n          example: 4512\n          format: int32\n          readOnly: false\n          type: integer\n      required:\n        - context\n        - description\n        - name\n      title: Derived key\n      type: object\n    Error:\n      example:\n        code: 400\n        message: The request was successful\n      properties:\n        code:\n          description: Number corresponding to a specific error\n          example: 404\n          readOnly: true\n          type: integer\n        message:\n          description: A human-readable description of an error\n          example: The request was successful\n          readOnly: true\n          type: string\n      required:\n        - code\n        - message\n      title: Error\n      type: object\n    Key:\n      description: A string of data that is used to lock or unlock cryptographic functions; _non-normative_\n      example:\n        created_at: '2021-04-17T21:07:16.098Z'\n        description: Secure channel for messaging\n        id: 02e81595-ef57-4e71-8e27-1c8b2dfdefbf\n        name: Private chat\n        spec: ChaCha20\n        type: symmetric\n        usage: encrypt/decrypt\n        vault_id: 'ae3c07d9-8a41-4cd3-92c0-e6358cbd516c'\n      properties:\n        description:\n          description: User-defined description of `Key` to be generated\n          example: Example description\n          readOnly: false\n          type: string\n        id:\n          description: 'ID of a specific `Key`. _UUID as specified by RFC4122_'\n          example: 6bb23e2b-07ed-4562-8afb-73955f8f17c5\n          format: uuid\n          maxLength: 36\n          minLength: 1\n          readOnly: true\n          type: string\n        name:\n          description: User-defined name of `Key` to be generated\n          example: Example name\n          readOnly: false\n          type: string\n        public_key:\n          description: The public key for a specific `Key`\n          readOnly: true\n          type: string\n        spec:\n          description: Specification to be used for `Key` creation\n          example: BIP39\n          readOnly: false\n          type: string\n        type:\n          description: Type of `Key` being created\n          enum:\n            - asymmetric\n            - symmetric\n          example: symmetric\n          readOnly: false\n          type: string\n        usage:\n          description: Purpose for `Key` being created\n          enum:\n            - encrypt/decrypt\n            - sign/verify\n          example: encrypt/decrypt\n          readOnly: false\n          type: string\n        vault_id:\n          description: ID of a specific `Vault` in which a specific `Key` is stored. _UUID as specified by RFC4122_\n          example: acb91fd4-b377-4732-9c5c-220c2305e665\n          format: uuid\n          maxLength: 36\n          minLength: 1\n          readOnly: false\n          type: string\n      readOnly: true\n      required:\n        - name\n        - spec\n      title: Key\n      type: object\n    Network:\n      description: CCSM Network object; _non-normative_\n      example:\n        type: Provide Network\n        specification: ''\n        chain_id: 8aaf1468-9cc1-4735-8975-aa3909178482\n        config: {}\n        block_explorer_url: https://etherscan.io\n        chainspec_url: https://gist.githubusercontent.com/kthomas/3ac2e29ee1b2fb22d501ae7b52884c24/raw/161c6a9de91db7044fb93852aed7b0fa0e78e55f/mainnet.chainspec.json\n        engine_id: ethash\n        is_ethereum_network: true\n        json_rpc_url: https://node.example.com\n        native_currency: ETH\n        network_id: 324cf211-6d67-4cae-b26c-c424308eabfa\n        platform: evm\n        protocol_id: pow\n        security:\n          egress: '*'\n          ingress:\n            0.0.0.0/0:\n              tcp:\n                - 8050\n                - 8051\n                - 30300\n              udp:\n                - 30300\n        websocket_url: wss://node.example.com\n        created_at: '2018-01-13T22:00:47.947907Z'\n        description: Ethereum mainnet\n        enabled: true\n        id: deca2436-21ba-4ff5-b225-ad1b0b2f5c59\n      required:\n        - type\n        - specification\n      properties:\n        type:\n          description: Type of CCSM `Network`\n          type: string\n          example: ''\n          readOnly: false\n        specification:\n          description: Specification used for CCSM `Network`\n          type: string\n          example: ''\n          readOnly: false\n      title: Network\n      type: object\n    NetworkStatus:\n      example:\n        block: 10051293\n        chain_id: '3'\n        last_block_at: 1618585516000\n        meta:\n          average_blocktime: 0x\n          blocktimes:\n            - '55'\n            - '24'\n            - '8'\n            - '1'\n            - '3'\n            - '20'\n            - '7'\n          last_block_hash: '698465416514684984piouhygiuytfruytdcghbkjhbvjyhdc'\n          last_block_header: {}\n      properties: {}\n      title: Network Status\n      type: object\n    ProtocolMessage:\n      description: 'Baseline protocol message internal to a BPI; _normative_'\n      required:\n        - identifier\n        - payload\n        - sender\n        - recipients\n        - signature\n      properties:\n        workflowinstance_id:\n          description: 'ID of associated workflow instance; _UUID as specified by RFC4122_'\n          format: uuid\n          readOnly: false\n          type: string\n        identifier:\n          description: unique identifier of a message\n          format: uuid\n          readOnly: true\n          type: string\n        messagethread_id:\n          description: unique identifier of a message thread in order to trace causally connected messages\n          format: uuid\n          readOnly: true\n          type: string\n        opcode:\n          description: Type of BPI operation to be executed by the BPI\n          type: string\n        payload:\n          $ref: '#/components/schemas/ProtocolMessagePayload'\n        recipients:\n          type: array\n          items:\n            type: string\n        sender:\n          type: string\n        signature:\n          type: string\n        type:\n          type: string\n      title: 'Protocol Message'\n      type: object\n    ProtocolMessagePayload:\n      title: Protocol Message Payload\n      description: Baseline protocol message payload; _normative_\n      properties:\n        proof:\n          type: string\n          description: Proof to verify\n        type:\n          type: string\n          description: 'Type of payload'\n        witness:\n          $ref: '#/components/schemas/Witness'\n    Prover:\n      description: |-\n        A state synchronization and consistency mechanism for completing on- and off-chain state transitions.\n          \n        **Lifecycle**\n        _________\n\n        |Status|Description   |\n        |------|-----------------------|\n        |init|default status value for all newly-initialized provers|\n        |compiling|prover is currently being compiled|\n        |compiled|prover has been successfully compiled|\n        |pending_setup|trusted setup will begin asynchronously|\n        |running_setup|trusted setup is running asynchronously|\n        |deploying_artifacts|on-chain shield/verifier contract artifacts are being deployed|\n        |provisioned|prover is ready for use|; ; _normative_\n      example:\n        created_at: '2021-02-27T14:26:06.864Z'\n        curve: 'BN254'\n        description: 'Example circuit-type prover'\n        id: '584877fd-6a18-4950-9917-1dd0da26e249'\n        identifier: 'Cubic'\n        name: 'Purchase Order'\n        provider: 'gnark'\n        proving_scheme: 'cubic'\n        store_id: 'f39a4b7a-2e4f-496b-a4f1-8a9635da10e7'\n        type: 'circuit'\n      properties:\n        created_at:\n          description: 'Date and time of `Prover` creation'\n          example: '2021-02-27T14:26:06.864Z'\n          format: date-time\n          readOnly: true\n        description:\n          description: 'User-defined description of the `Prover`'\n          example: 'Prover example description'\n          readOnly: false\n          type: string\n        id:\n          description: 'ID for a specific `Prover`; _UUID as specified by RFC4122_'\n          example: 'ce0319c8-ddc8-4d46-a16c-c506f5dae9a0'\n          format: uuid\n          maxLength: 36\n          minLength: 1\n          readOnly: true\n          type: string\n        identifier:\n          description: 'Prover identifier'\n          example: 'Cubic'\n          type: string\n        name:\n          description: 'User-defined name of `Prover`'\n          example: 'Prover example name'\n          readOnly: false\n          type: string\n        status:\n          description: 'Status of `Prover`'\n          enum:\n            - init\n              compiling\n              compiled\n              pending_setup\n              running_setup\n              deploying_artifacts\n              provisioned\n          type: string\n        store_id:\n          description: 'ID of the persistent store instance; _UUID as specified by RFC4122_'\n          readOnly: false\n          type: string\n        type:\n          description: 'Type of `Prover`'\n          example: circuit\n          readOnly: false\n          type: string\n        vault_id:\n          description: ID of host `Vault`; _UUID as specified by RFC4122_\n          example: 0ca9331a-d3fb-401c-b00b-5ada557c1056\n          format: uuid\n          readOnly: false\n          type: string\n      required:\n        - name\n        - identifier\n        - provider\n        - proving_scheme\n        - curve\n        - type\n      title: Prover\n      type: object\n    RecoveryPolicy:\n      description: 'Recovery policy attached to a BPI `SubjectAccount` typically connected to a role; may be independent; _normative_'\n      example: \n        type: 'recoveryKeyPolicy'\n        reference: ''\n      properties:\n        type:\n          description: type of recovery policy\n          example: 'RecoveryKeyPolicy'\n          type: string\n        reference:\n          description: resolvable reference link to the recovery policy object, avoids duplicating policy objects\n          example: 'https://example.com/policies/recovery-key-policy.json'\n          type: string\n          format: URI\n      readOnly: false\n      required:\n        - type\n        - reference\n      title: Recovery Policy\n      type: object\n    Secret:\n      description: 'Cryptographic secret; _non-normative_'\n      example:\n        created_at: '2021-04-17T20:35:34.062+0000'\n        description: 'This secret is being stored for demonstration purposes'\n        id: 'e9138dd7-b429-410a-bfa8-2a506d9e4297'\n        name: 'Example secret'\n        type: 'ed25519'\n        value: '0x1'\n        vault_id: 22e48752-7bff-4daa-89b3-91053bd509f2\n      properties:\n        created_at:\n          description: Date-time of `Secret` creation\n          format: date-time\n          readOnly: true\n          type: string\n        description:\n          description: User-defined descriptor of specific `Secret`\n          readOnly: false\n          type: string\n        id:\n          description: ID of a specific `Secret`; _UUID as specified by RFC4122_\n          format: uuid\n          maxLength: 36\n          minLength: 1\n          readOnly: true\n          type: string\n        name:\n          description: User-defined name of `Secret`\n          readOnly: false\n          type: string\n        type:\n          description: Type of `Secret`; can be an arbitrary string as of v1.0.0\n          readOnly: false\n          type: string\n        value:\n          readOnly: false\n          type: string\n        vault_id:\n          description: ID of `Vault` in which a specific `Secret` is stored; _UUID as specified by RFC4122_\n          readOnly: false\n          type: string\n      required:\n        - description\n        - name\n        - type\n        - vault_id\n        - value\n      title: Secret\n      type: object\n    StateClaim:\n      description: Representation of a valid state as claimed by a workgroup participant; _normative_\n      example:\n        cardinality: '7'\n        path: '0111111'\n        root: '1fbd47cd5872d379b9846973c2f4d9ec9f9a5da929f0bf212c57de477848c82525c8487847de572c21bff029a95d9a9fecd9f4c2736984b979d37258cd47bd1f'\n        values:\n          - 1d9224378d77925d612c9f926eb9fb92850e6551def8328011b6a972323298d5\n          - 64633297396b6eb9d95ada5d79090c49499d58966aeb44df28b683d7b9632d24\n          - fc94366912a846ca63ecfcffb586a856072eb3238ba90665b6a55b58b6f9aa47\n          - c525c32e7cea02e3f36d7fa6cc2977da7eba1fd85b16261198c879271b2554a9\n          - 616901d6bd3c54537b51672f7b0022b7e6136ba4225a350ebfc3937b6f728f35\n          - 1f64767072db8634f0d9561455682172f3ae9919dc085e45c8a7a27bdf7612a7\n          - c2263710add40de071af658495f4ca12c2703e1bd086012eb5a58e35825fcdf8\n      properties:\n        cardinality:\n          description: Cardinality of the claim\n          format: uint256\n          type: string\n        path:\n          description: Path containing the siblings needed to reconstruct the root at the specified cardinality\n          type: string\n        root:\n          description: Merkle root of the claimed state\n          type: string\n        values:\n          description: List of hashed proofs corresponding to the values at cardinality and each sibling path\n          items:\n            type: string\n          type: array\n      title: State Claim\n      type: object\n    StateProof:\n      description: 'Proposed (commercial) state transition of a BPI State Object via a BPI Transaction; _normative_'\n      example:\n        proof: |- \n          cd50a3d7436610d3ba8e60d7e1be147a\n          65f915326c4debed565fa9f58eac399b\n          36871252fec8852f579ab24bb7e8f35e\n          6e9b14d69ba7c2fa893c4c890d2d68ff\n          fad6ac9a54e291b24b9d86d590d096df\n        store: true\n        witness: {}\n      properties:\n        proof:\n          description: 'The hex-encoded proof to verify'\n          example: |-\n            cd50a3d7436610d3ba8e60d7e1be147a\n            65f915326c4debed565fa9f58eac399b\n            36871252fec8852f579ab24bb7e8f35e\n            6e9b14d69ba7c2fa893c4c890d2d68ff\n            fad6ac9a54e291b24b9d86d590d096df\n          readOnly: false\n          type: string\n        store:\n          description: 'When true, the proof hash is written to the configured prover store'\n          example: true\n          readOnly: false\n          type: boolean\n        witness:\n          $ref: '#/components/schemas/Witness'\n      required:\n        - proof\n        - witness\n      title: 'State Proof'\n      type: object\n    Subject:\n      example:\n        created_at: '2021-04-16T15:05:23.130Z'\n        description: 'Organization for testing'\n        id: 'did:prvd:a7e165dd-2d91-4f1e-b025-6ef2c5514603'\n        metadata: {}\n        name: 'ACME Inc.'\n        type: 'Organization'\n      description: |- \n        'Abstract identifier representing, e.g., an organization or user; a BPI `Subject` interacts with its `BPIAccount` instances by way of a BPI `SubjectAccount`; _normative_'\n      type: object\n      properties:\n        '@context':\n          description: Context reference file for BPI `Subject` schema validation\n          example: []\n          type: object\n          readOnly: false\n        created_at:\n          description: Date and time of BPI `Subject` creation\n          example: '2021-02-27T14:26:06.864Z'\n          format: date-time\n          readOnly: true\n          type: string\n        description:\n          description: 'User-defined description of BPI `Subject`'\n          example: Organization for testing\n          readOnly: false\n          type: string\n        id:\n          description: 'ID of a specific BPI `Subject`'\n          example: 'did:prvd:93229a14-5e13-4c45-8352-3ad9948b8ae3'\n          readOnly: true\n          type: string\n        metadata:\n          nullable: true\n          type: object\n          properties:\n            address:\n              description: '`Wallet` address of associated BPI `Subject`'\n              example: '0x2f90A6D021db21e1B2A077c5a37B3C7E75D15b7e'\n              type: string\n            api_endpoint:\n              description: 'URL of the baseline API, which may not be exposed to the WAN'\n              example: 'https://api_endpoint/api/v1/endpoint'\n              type: string\n            messaging_endpoint:\n              description: 'Publicly-accessible TCP endpoint where the `Subject` receives inbound protocol messages'\n              example: 'https://api_endpoint/api/v1/messaging'\n              type: string\n            interface_metadata:\n              description: 'Arbitrary data as needed for additional external interfaces'\n              type: object\n        name:\n          description: 'Name of `Subject`'\n          example: 'ACME Inc.'\n          readOnly: false\n          type: string\n        subject_id:\n          description: '`Subject` ID of `Subject` creator'\n          example: \n          readOnly: false\n          type: string\n        type: \n          description: Type of `Subject`\n          example: 'Organization'\n          type: string\n          readOnly: false\n      title: Subject\n    SubjectAccount:\n      description: |- \n        A BPI `SubjectAccount` is the context of a `Subject`. _normative_\n      title: Subject Account\n      type: object\n      required:\n          - credentials\n          - id\n          - security_policies\n          - recovery_policy\n          - subject_id\n          - role\n          - bpi_account_ids\n      properties:\n        '@context':\n          description: Context reference file for BPI `SubjectAccount` schema validation\n          example: []\n          type: object\n          readOnly: false\n        id:\n          description: Identifier of the specific BPI `SubjectAccount`\n          example: 'did:prvd:4A252b7e30f6cD6a85d20476Bb291Ef7f3a05293'\n          type: string\n          readOnly: true\n        bpi_account_ids:\n          type: array\n          description: IDs of `BPIAccount` instances associated with the specified BPI `SubjectAccount`\n          items:\n            type: string\n          example:\n            - 6bb23e2b-07ed-4562-8afb-73955f8f17c5\n            - 7cb11a1a-01ca-3421-6fbd-42651c1a32a1\n        created_at:\n          description: Date and time of BPI `SubjectAccount` creation\n          example: '2021-02-27T14:26:06.864Z'\n          format: date-time\n          readOnly: true\n          type: string\n        credentials:\n          description: A list of cryptographically verifiable credentials establishing legal identity\n          example: \n            credential_type: 'JWS'\n            credentials: \n              id: 'https://example.com/issuer/123#ovsDKYBjFemIy8DVhc-w2LSi8CvXMw2AYDzHj04yxkc'\n              type: JsonWebKey2020\n              controller: 'https://example.com/issuer/123'\n              publicKeyJwk:\n                kty: OKP\n                crv: Ed25519\n                x: CV-aGlld3nVdgnhoZK0D36Wk-9aIMlZjZOK2XhPMnkQ\n          type: array\n          items:\n            type: object\n            required:\n              - type\n              - credential\n            properties:\n              type:\n                description: Type of credential associated with account\n                example: 'JWS'\n                type: string\n              credential:\n                description: Credential associated with the BPI `SubjectAccount`. Should be a W3C Verifiable Credential\n                type: object  \n          readOnly: false\n        metadata:\n          description: Metadata useful for BPI operations and UI implementations such as names or API and messaging endpoints\n          example: {}\n          type: object\n          readOnly: false\n        type: \n          description: Type of BPI `SubjectAccount`\n          example: 'ProvideSubjectAccount'\n          type: string\n          readOnly: false\n        recovery_policy:\n            $ref: \"#/components/schemas/RecoveryPolicy\"\n        role:\n          description: Role of the `Subject`; implementation specific\n          example: \n            name: Organization\n            reference: 'https://example.com/roles/organization.json'\n          type: object\n          required:\n            - name\n            - reference\n          properties:\n              name:\n                description: Name of role\n                example: 'Organization'\n                type: string\n              reference:\n                description: Resolvable reference link to the role object, avoids duplicating role objects\n                example: 'https://example.com/roles/organization.json'\n                type: string\n                format: URI\n          readOnly: false\n        subject_id:\n          description: Must be either a DID or another resolvable unique identifier of the `Subject`\n          example: 'did:prvd:93229a14-5e13-4c45-8352-3ad9948b8ae3'\n          maxLength: 1024\n          type: string\n          format: URI\n          readOnly: false        \n        security_policies:\n          description: Security policies attached to a `Subject` typically connected to a role but may be independent \n          example: \n            type: 'AuthenticationPolicy'\n            reference: ''\n          type: array\n          items:\n              type: object\n              required:\n                - type\n                - reference\n              properties:\n                type:\n                  description: Type of security policy\n                  example: 'AuthenticationPolicy'\n                  type: string\n                reference:\n                  description: Resolvable reference link to the security policy object, avoids duplicating policy objects\n                  example: 'https://example.com/policies/authentication-policy.json'\n                  type: string\n                  format: URI\n          readOnly: false\n    Transaction:\n      description:  BPI transaction between two or more subjects to be submitted to a CCSM `Network`; _normative_\n      example:\n        context: {workstep_id: '88b50dd4-73ea-46d1-a434-b6a2a908bc51'}\n        created_at: '2021-04-21T02:12:11.158Z'\n        id: '99a61ee5-73ea-46d1-a434-b6a2a908bc51'\n        data:\n          block: 10079406\n          block_timestamp: '2021-04-21T02:12:05.000Z'\n          broadcast_at: '2021-04-21T02:12:05.000Z'\n          finalized_at: '2021-04-21T02:12:14.277Z'\n          hash: '84f8525882f3bb24cd2d3cbdf0264115e03932b927f928f9e70b72bf90dd54f1'\n          hd_derivation_path: m/44'/60'/0'/0/0\n          network_id: '66d44f30-9092-4182-a3c4-bc02736d6ae5'\n          status: 'success'\n          to: '7c8fe6f1-38c3-4da1-b4b7-7591c6d0ca7c'\n          value: 0\n          wallet_id: '0fda2f96-d957-4f65-9e92-fa5092c51751'\n      properties:\n        context:\n          description: 'Establishes the context of the transaction either within a BPI `Workstep` or `Workflow` instance'\n          type: object\n          items:\n            properties:\n              workflow_id:\n                type: string\n              workstep_id:\n                type: string\n            anyOf:\n              - required:\n                  - workflow_id\n                  - workstep_id\n        created_at:\n          description: 'Date and time for the creation of a specific `Transaction`'\n          example: '2021-04-21T02:12:11.158Z'\n          format: date-time\n          readOnly: true\n          type: string\n        data:\n          description: 'Transaction data'\n          nullable: true\n          type: object\n        description:\n          description: 'A user-defined summary of the transaction'\n          nullable: true\n          type: object\n        id:\n          description: 'ID for a specific `Transaction`; _UUID as specified by RFC4122_'\n          example: 'bb0e8038-8e72-46db-a08d-204f804a24c1'\n          format: uuid\n          maxLength: 36\n          minLength: 1\n          readOnly: true\n          type: string\n      title: 'Transaction'\n    UnsealVault:\n      description: 'Unseals a specified `Vault`; _non-normative_'\n      example:\n        key: 'quantum mirror summer general keep west promote satisfy limit butter mother oyster lazy whip earn spot ticket protect mean play script peace parent intact'\n      properties:\n        key:\n          description: 'Private key required for unsealing a specific `Vault`'\n          type: string\n      required:\n        - key\n      title: 'Unseal Vault'\n      type: object\n    Vault:\n      description: 'Provides key management with a focus on providing advanced privacy and messaging capabilities (i.e., zero-knowledge proofs, SNARK-friendly hash functions, double-ratchet algorithm, etc.); _non-normative_'\n      example:\n        created_at: '2021-08-23T05:40:11.047741Z'\n        description: 'Example Vault for testing and documentation purpose'\n        id: '02093d35-61fd-42c3-b70e-44f5312f5187'\n        name: Example vault\n      properties:\n        created_at:\n          description: 'Date and time of `Vault` creation'\n          example: '2021-04-21T02:12:11.158Z'\n          format: date-time\n          readOnly: true\n          type: string\n        description:\n          description: 'User-defined descriptor for a specific `Vault` instance'\n          example: 'Sample vault description'\n          readOnly: false\n          type: string\n        id:\n          description: 'ID for a specific `Vault` instance; _UUID as specified by RFC4122_'\n          example: 'f1f29322-b8fe-4adf-95ad-af1585e823c5'\n          format: uuid\n          readOnly: true\n          type: string\n        name:\n          description: 'User-defined name for a specific `Vault` instance'\n          example: 'Example vault name'\n          readOnly: false\n          type: string\n      title: Vault\n      type: object\n    Wallet:\n      description: 'Hierarchical deterministic (HD) wallet in accordance with BIP44; _non-normative_'\n      example:\n        created_at: '2021-03-30T02:50:17.155Z'\n        id: 'bbc1195e-d131-4b2f-b1a8-1b6f34b55d3e'\n        key_id: 'db9e6e21-23b0-497d-a02c-8a8813f8bf2d'\n        public_key: 'xpub661MyMwAqRbcGdYXwwnwcnrH51AxyF3kkTeEt6iZfNDXsg4MLPgV7bEZ2v4uCx9djAboy6vSv3VbHPc6hf4Do8wb7FpJCuG7aMBwH2QgLJu'\n        purpose: 44\n        subject_id: 'did:prvd:7c8fe6f1-38c3-4da1-b4b7-7591c6d0ca7c'\n        vault_id: '190822c9-62f5-4caf-a419-df735a793b2f'\n      properties:\n        created_at:\n          description: Date and time of `Wallet` creation\n          example: '2021-01-27T03:19:33.349Z'\n          readOnly: true\n          type: string\n        id:\n          description: 'ID for a specific `Wallet`; _UUID as specified by RFC4122_'\n          example: '4ee831ae-327f-4a79-bd74-7e9f56ce40fa'\n          format: uuid\n          readOnly: true\n          type: string\n        key_id:\n          description: 'ID of a specific private key used to sign a specific `Wallet`; _UUID as specified by RFC4122_'\n          example: '5c928a43-9897-417a-9851-768e19b3cecd'\n          format: uuid\n          maxLength: 36\n          minLength: 1\n          readOnly: true\n          type: string\n        network_id:\n          description: 'ID for a specific `Network` for which a specific `Wallet` is intended; _UUID as specified by RFC4122_'\n          example: '84a139c0-2e20-476c-91d0-618f7332189e'\n          format: uuid\n          maxLength: 36\n          minLength: 1\n          readOnly: false\n          type: string\n        public_key:\n          description: 'Public signing key of a specific `Wallet`'\n          example: 'xpub661MyMwAqRbcGdYXwwnwcnrH51AxyF3kkTeEt6iZfNDXsg4MLPgV7bEZ2v4uCx9djAboy6vSv3VbHPc6hf4Do8wb7FpJCuG7aMBwH2QgLJu'\n          readOnly: true\n          type: string\n        purpose:\n          description: 'Purpose is a constant set to 44 (or 0x8000002C) following the BIP43 recommendation. It indicates that the subtree of this node is used according to this specification. Hardened derivation is used at this level'\n          example: 44\n          format: string\n          readOnly: false\n          type: integer\n        subject_id:\n          description: 'ID for a specific `Subject` that created a specific `Wallet`'\n          example: 'did:prvd:93229a14-5e13-4c45-8352-3ad9948b8ae3'\n          maxLength: 1024\n          minLength: 1\n          readOnly: true\n          type: string\n        vault_id:\n          description: 'ID for a specific `Vault` in which a specific `Wallet` is stored; _UUID as specified by RFC4122_'\n          example: 'aa1b60d4-4f77-438d-8fca-cb514596e6c3'\n          format: uuid\n          maxLength: 36\n          minLength: 1\n          readOnly: true\n          type: string\n      title: 'Wallet'\n      type: object\n    Witness:\n      description: 'Public and private inputs used to generate the `Proof`. Payload can be delivered as a JSON object or chunked and streamed. Example is dependent on `Prover` parameters. _normative_'\n      example: {}\n      properties: {}\n      title: Witness\n      type: object\n    WorkflowInstance:\n      description: 'A BPI `WorkflowInstance` consisting of a set of stepwise BPI workstep instances; _normative_ '\n      example:\n        id: 'ed509f33-cbe4-4e3d-86ff-e508e6496f85'\n        name: Procure to Pay\n        type: procure_to_pay\n        workstep_ids: \n          - 'ed509f33-cbe4-4e3d-86ff-e508e6496f85'\n          - 'eg922g62-ghr6-1c2c-09cc-f601e5715g28'\n      properties:\n        id:\n          description: 'ID of a specific baseline `WorkflowInstance`; _UUID as specified by RFC4122_'\n          example: ed509f33-cbe4-4e3d-86ff-e508e6496f85\n          format: uuid\n          maxLength: 36\n          minLength: 1\n          readOnly: True\n          type: string\n        name:\n          description: 'User-defined name for a specific `WorkflowInstance`'\n          example: 'Test workflow'\n          type: string\n        type:\n          description: 'Type of `WorkflowInstance'\n          example: Purchase order\n          readOnly: false\n          type: string\n        workstep_ids:\n          description: List of `WorkstepInstance` ids included in the `WorkflowInstance`\n          example: \n            - 'ed509f33-cbe4-4e3d-86ff-e508e6496f85'\n          readOnly: true\n          type: array\n          items: \n            type: string\n      required:\n        - type\n      title: Workflow Instance\n      type: object\n    Workgroup:\n      description: |-\n        'A BPI `Workgroup` represents a logical collection of resources provisioned within a BPI. A BPI `Workgroup` is immutably configured upon initialization with support for a primary CCSM `Network`. _normative_'\n      example:\n        subject_id: 'did:prvd:93229a14-5e13-4c45-8352-3ad9948b8ae3'\n        config:\n          baselined: true\n          webhook_secret: '1dfd34519a06420d8a6ed18afdffe932'\n        created_at: '2021-05-21T12:36:52.977Z'\n        description: 'Workgroup intended for demonstration purposes'\n        id: 'did:prvd:bdf94fc0-63ad-4ee9-ac75-7eb63365d0f6'\n        name: 'Example Workgroup'\n        network_id: '07102258-5e49-480e-86af-6d0c3260827d'\n        type: 'baseline'\n        security_policies: []\n        admins: \n          - 'did:prvd:93229a14-5e13-4c45-8352-3ad9948b8ae3'\n      properties:\n        config:\n          description: BPI-specific workgroup data\n          example: {}\n          type: object\n        created_at:\n          description: 'Date and time of `Workgroup` creation'\n          example: '2021-05-21T12:36:52.977Z'\n          format: date-time\n          minLength: 1\n          readOnly: true\n          type: string\n        description:\n          description: 'User-defined `Workgroup` descriptor'\n          example: 'Example workgroup description'\n          maxLength: 255\n          type: string\n        id:\n          description: 'ID for a specific `Workgroup`'\n          example: 'did:prvd:bdf94fc0-63ad-4ee9-ac75-7eb63365d0f6'\n          minLength: 1\n          readOnly: true\n          type: string\n        name:\n          description: 'User-defined name of the `Workgroup`'\n          maxLength: 255\n          minLength: 1\n          type: string\n        network_id:\n          description: 'ID for a specific `Network` host of a specific `Workgroup`; _UUID as specified by RFC4122_'\n          example: '07102258-5e49-480e-86af-6d0c3260827d'\n          format: uuid\n          maxLength: 36\n          minLength: 1\n          type: string\n        type:\n          default: baseline\n          description: 'Designates `Workgroup` type. In a Baseline `Workgroup`, will always be baseline'\n          example: baseline\n          minLength: 1\n          type: string\n        participants:\n          description: '`Subject` identifiers that are `Workgroup` participants'\n          minLength: 1\n          readOnly: false\n          type: array\n          items:\n            $ref: \"#/components/schemas/Subject\"\n          example:\n            - 'did:prvd:93229a14-5e13-4c45-8352-3ad9948b8ae3'\n        security_policies:\n          description: 'Security policies attached to a Workgroup' \n          example: \n            type: AuthenticationPolicy\n            reference: https://example.com/policies/authentication-policy.json\n          minLength: 1\n          type: array\n          items:\n              type: object\n              required:\n                - type\n                - reference\n              properties:\n                type:\n                  description: type of security policy\n                  example: 'AuthenticationPolicy'\n                  type: string\n                reference:\n                  description: resolvable reference link to the security policy object, avoids duplicating policy objects\n                  example: 'https://example.com/policies/authentication-policy.json'\n                  type: string\n                  format: URI\n          readOnly: false\n        subject_id:\n          description: ID of `Subject` that created `Workgroup`\n          example: 'did:prvd:93229a14-5e13-4c45-8352-3ad9948b8ae3'\n          type: string\n        admins:\n          description: 'IDs of `Subject` instances with administrative control of `Workgroup`'\n          example:\n          type: array\n          minLength: 1\n          items:\n            type: string\n      required:\n        - name\n        - type\n        - subject_id\n        - security_policies\n        - admins\n      title: Workgroup\n      type: object\n    WorkstepInstance:\n      description: 'One stepwise state transition in a `WorkflowInstance` represented by a `Prover` instance. A `Workstep` may or may not be required to reach on-chain finality prior to the execution of the next `Workstep` in a `Workflow`. _normative_'\n      example:\n        created_at: '2021-04-21T02:12:05.000Z'\n        id: '2fffec13-590e-41eb-9a84-69ed881e0036'\n        prover_id: 'dd615561-83e6-4f53-ac0f-aaf1749df139'\n        require_finality: true\n        workflow_id: 'f9227803-5541-4c13-a554-f6980f03362a'\n        type: 'purchase_order'\n        participants: []\n        subject_id: 'did:prvd:93229a14-5e13-4c45-8352-3ad9948b8ae3'\n      properties:\n        id:\n          description: 'ID of a specific `WorkstepInstance`; _UUID as specified by RFC4122_'\n          example: '2fffec13-590e-41eb-9a84-69ed881e0036'\n          format: uuid\n          maxLength: 36\n          minLength: 1\n          readOnly: true\n          type: string\n        created_at:\n          description: 'Date and time of `WorkstepInstance` creation'\n          example: '2021-05-21T12:36:52.977Z'\n          format: date-time\n          minLength: 1\n          readOnly: true\n          type: string\n        participants:\n          description: 'List of `Subject` instances that are associated with the `WorkstepInstance`'\n          type: array\n          items:\n            $ref: '#/components/schemas/Subject'\n        prover_id:\n          description: 'ID of the a specific `Prover` instance that is represented in a specific `WorkstepInstance`; _UUID as specified by RFC4122_'\n          example: 'dd615561-83e6-4f53-ac0f-aaf1749df139'\n          format: uuid\n          maxLength: 36\n          minLength: 1\n          readOnly: false\n          type: string\n        require_finality:\n          default: false\n          description: 'When true, the resulting proof from the referenced `WorkstepInstance` will be written to the underlying mainnet.'\n          example: true\n          type: boolean\n        state_claims:\n          items:\n            $ref: '#/components/schemas/StateClaim'\n          type: array\n        subject_id:\n          description: 'ID of associated `Subject'\n          type: string\n          readOnly: false\n          example: \n        type:\n          description: 'Type of workstep'\n          example: 'purchase_order'\n          type: string\n          readOnly: false\n        workflow_id:\n          description: 'ID of a specific `WorkflowInstance` that a specific `WorkstepInstance` is part of; _UUID as specified by RFC4122_'\n          example: f9227803-5541-4c13-a554-f6980f03362a\n          format: uuid\n          maxLength: 36\n          minLength: 1\n          readOnly: false\n          type: string\n      required:\n        - subject_id\n        - participants\n        - workflow_id\n      title: Workstep\n      type: object\n  securitySchemes:\n    OAuth2:\n      description: |-\n        In accordance with the OAuth 2.0 specification, when a `Subject` is authorized and the requested `scope` includes `offline_access`, a refresh token is vended and returned on behalf of the caller. This refresh token is long-lived and can be used to authorize short-lived access tokens using the `refresh_token `grant type on subsequent authorization requests. This pattern is useful for machine-to-machine applications; a secure practice is to store the\n        long-lived refresh token in a Vault instance (i.e., as a secret), read it into application memory during container initialization and then use it to authorize a short-lived access token. If the container remains running long enough for the access token to expire, the refresh token should once again be used to seamlessly authorize a new access token. _non-normative_\n      flows:\n        implicit:\n          authorizationUrl: https://ca.example.com/api/v1/oauth/authorize\n          scopes:\n            email: email and password\n            offline_access: access/refresh token authorization model\n      type: oauth2\n    bearerAuth:\n      bearerFormat: JWT\n      description: |-\n        'The presence of a `bearer` API token is required to authorize most Baseline API calls. A `bearer` API token is an encoded JWT which contains a subject claim (`sub`) which references an authorized `Subject`. The authorized entity uses a signed `bearer` authorization Token xto access one or more resources for which the Token was authorized.  Unless otherwise noted, all API requests must include a header such as `Authorization: bearer \u003cjwt\u003e` _normative_'\n      scheme: bearer\n      type: http\nexternalDocs:\n  description: Privacy Policy\n  url: https://example.com/privacy-policy\nsecurity:\n  - bearerAuth: []\n  - OAuth2: []\nservers:\n  - description: Baseline Operator\n    url: https://baseline.provide.network\n  - description: Local Baseline Integration Stack \n    url: http://localhost:8080\n  - description: Local BRI-1 Stack\n    url: http://localhost:9999",
			"canonicalURL": "/github.com/eea-oasis/baseline-standard@2ff6fe784c18314f866ebbfadcc61f66ef8b0eee/-/blob/api/baseline-api-v1.0.0.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/eea-oasis/baseline-standard/blob/2ff6fe784c18314f866ebbfadcc61f66ef8b0eee/api/baseline-api-v1.0.0.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"Transaction\": parse schema: property \"context\": at 1:25179: parse schema: object cannot contain 'items' field"
}