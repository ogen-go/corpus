{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/apache/incubator-sdap-nexus"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "analysis/webservice/apidocs/openapi.yml",
			"byteSize": 30357,
			"content": "openapi: 3.0.3\ninfo:\n  description: The next generation cloud-based science data service platform.\n  version: 0.4.2\n  title: Science Data Analytics Platform (SDAP)\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\ntags:\n  - name: Matchup\n    description: Data Matchup API\n  - name: Analytics\n    description: Data Analytics API\n  - name: Subsetting\n    description: Data Subsetting API\npaths:\n  /match_spark_doms:\n    get:\n      summary: Execute matchup request\n      operationId: matchup\n      tags:\n        - Matchup\n      parameters:\n        - in: query\n          name: primary\n          description: |\n            The primary dataset used to find matches for. One of the\n            satellite \"shortName\" as supplied by /domslist endpoint.\n          required: true\n          schema:\n            type: string\n            x-dspopulate:\n             - satellite\n          example: avhrr-l4-glob-v2-daily-ncei-ghrsst-sstblend-avhrr-oi-glob-v020-fv020\n        - in: query\n          name: secondary\n          description: |\n            The dataset(s) being searched for measurements that match\n            the measurements in primary. One or more (comma-separated)\n            of the insitu or satellite \"name\" as supplied by\n            https://doms.jpl.nasa.gov/domslist\n          required: true\n          schema:\n            type: string\n            x-dspopulate:\n             - satellite\n             - insitu\n          example: icoads\n        - in: query\n          name: startTime\n          description: |\n            Starting time in format YYYY-MM-DDTHH:mm:ssZ or seconds\n            since epoch\n          required: true\n          schema:\n            type: string\n            format: date-time\n          example: '2012-09-25T00:00:00Z'\n        - in: query\n          name: endTime\n          description: |\n            Ending time in format YYYY-MM-DDTHH:mm:ssZ or seconds\n            since epoch\n          required: true\n          schema:\n            type: string\n            format: date-time\n          example: '2012-09-30T23:59:59Z'\n        - in: query\n          name: b\n          description: |\n            Minimum (Western) Longitude, Minimum (Southern) Latitude,\n            Maximum (Eastern) Longitude, Maximum (Northern) Latitude\n          required: true\n          schema:\n            type: string\n          example: -45,15,-30,30\n        - in: query\n          name: platforms\n          description: Platforms to include for matchup consideration\n          required: true\n          schema:\n            type: string\n          example: 1,2,3,4,5,6,7,8,9\n        - in: query\n          name: depthMin\n          description: |\n            Minimum depth of measurements allowed to be considered for\n            matchup\n          required: false\n          schema:\n            type: integer\n          example: 0\n        - in: query\n          name: depthMax\n          description: |\n            Maximum depth of measurements allowed to be considered for\n            matchup\n          required: false\n          schema:\n            type: integer\n          example: 5\n        - in: query\n          name: tt\n          description: |\n            Tolerance in time (seconds) when comparing two measurements.\n          required: false\n          schema:\n            type: integer\n            default: 86400\n          example: 86400\n        - in: query\n          name: rt\n          description: |\n            Tolerance in radius (meters) when comparing two\n            measurements.\n          required: false\n          schema:\n            type: number\n            default: 1000.0\n          example: 1000.0\n        - in: query\n          name: parameter\n          description: |\n            The parameter of interest used for the match up.\n          required: false\n          schema:\n            type: string\n            enum: ['sst', 'sss', 'wind']\n            default: sst\n          example: sst\n        - in: query\n          name: matchOnce\n          description: |\n            True/False flag used to determine if more than one match\n            per primary point is returned. If true, only the nearest\n            point will be returned for each primary point. If false,\n            all points within the tolerances will be returned for each\n            primary point.\n          required: false\n          schema:\n            type: boolean\n            default: false\n          example: false\n        - in: query\n          name: resultSizeLimit\n          description: |\n            Optional integer value that limits the number of results\n            returned from the matchup. If the number of primary matches\n            is greater than this limit, the service will respond with\n            (HTTP 202 Accepted) and an empty response body. A value of\n            0 means return all results.\n          required: false\n          schema:\n            type: integer\n            default: 500\n          example: 500\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MatchupResponse'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /match_spark:\n    get:\n      summary: Execute matchup request\n      operationId: matchup\n      tags:\n        - Matchup\n      parameters:\n        - in: query\n          name: primary\n          description: |\n            The primary dataset used to find matches for. One of the\n            satellite \"shortName\" as supplied by /domslist endpoint.\n          required: true\n          schema:\n            type: string\n            x-dspopulate:\n              - satellite\n          example: avhrr-l4-glob-v2-daily-ncei-ghrsst-sstblend-avhrr-oi-glob-v020-fv020\n        - in: query\n          name: secondary\n          description: |\n            The dataset(s) being searched for measurements that match\n            the measurements in primary. One or more (comma-separated)\n            of the insitu or satellite \"name\" as supplied by\n            https://doms.jpl.nasa.gov/domslist\n          required: true\n          schema:\n            type: string\n            x-dspopulate:\n              - satellite\n              - insitu\n          example: icoads\n        - in: query\n          name: startTime\n          description: |\n            Starting time in format YYYY-MM-DDTHH:mm:ssZ or seconds\n            since epoch\n          required: true\n          schema:\n            type: string\n            format: date-time\n          example: '2012-09-25T00:00:00Z'\n        - in: query\n          name: endTime\n          description: |\n            Ending time in format YYYY-MM-DDTHH:mm:ssZ or seconds\n            since epoch\n          required: true\n          schema:\n            type: string\n            format: date-time\n          example: '2012-09-30T23:59:59Z'\n        - in: query\n          name: b\n          description: |\n            Minimum (Western) Longitude, Minimum (Southern) Latitude,\n            Maximum (Eastern) Longitude, Maximum (Northern) Latitude\n          required: true\n          schema:\n            type: string\n          example: -45,15,-30,30\n        - in: query\n          name: platforms\n          description: Platforms to include for matchup consideration\n          required: true\n          schema:\n            type: string\n          example: 1,2,3,4,5,6,7,8,9\n        - in: query\n          name: depthMin\n          description: |\n            Minimum depth of measurements allowed to be considered for\n            matchup\n          required: false\n          schema:\n            type: integer\n          example: 0\n        - in: query\n          name: depthMax\n          description: |\n            Maximum depth of measurements allowed to be considered for\n            matchup\n          required: false\n          schema:\n            type: integer\n          example: 5\n        - in: query\n          name: tt\n          description: |\n            Tolerance in time (seconds) when comparing two measurements.\n          required: false\n          schema:\n            type: integer\n            default: 86400\n          example: 86400\n        - in: query\n          name: rt\n          description: |\n            Tolerance in radius (meters) when comparing two\n            measurements.\n          required: false\n          schema:\n            type: number\n            default: 1000.0\n          example: 1000.0\n        - in: query\n          name: parameter\n          description: |\n            The parameter of interest used for the match up.\n          required: false\n          schema:\n            type: string\n            default: sst\n          example: sst\n        - in: query\n          name: matchOnce\n          description: |\n            True/False flag used to determine if more than one match\n            per primary point is returned. If true, only the nearest\n            point will be returned for each primary point. If false,\n            all points within the tolerances will be returned for each\n            primary point.\n          required: false\n          schema:\n            type: boolean\n            default: false\n          example: false\n        - in: query\n          name: resultSizeLimit\n          description: |\n            Optional integer value that limits the number of results\n            returned from the matchup. If the number of primary matches\n            is greater than this limit, the service will respond with\n            (HTTP 202 Accepted) and an empty response body. A value of\n            0 means return all results.\n          required: false\n          schema:\n            type: integer\n            default: 500\n          example: 500\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MatchupResponse'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /domssubset:\n    get:\n      summary: Subset DOMS sources given the search domain\n      operationId: domssubset\n      tags:\n        - Subsetting\n      parameters:\n        - in: query\n          name: dataset\n          description: |\n            The NEXUS dataset. *Optional but at least one of 'dataset'\n            or 'insitu' are required\n          required: false\n          schema:\n            type: string\n            x-dspopulate:\n             - satellite\n          example: MAVHRR_OI_L4_GHRSST_NCEI\n        - in: query\n          name: insitu\n          description: |\n            The in situ source(s). *Optional but at least one of\n            'dataset' or 'insitu' are required\n          required: false\n          schema:\n            type: string\n            x-dspopulate:\n             - insitu\n          example: icoads,samos,spurs,spurs2\n        - in: query\n          name: startTime\n          description: |\n            Starting time in format YYYY-MM-DDTHH:mm:ssZ or seconds\n            since epoch\n          required: true\n          schema:\n            type: string\n            format: date-time\n          example: '2013-10-21T00:00:00Z'\n        - in: query\n          name: endTime\n          description: |\n            Ending time in format YYYY-MM-DDTHH:mm:ssZ or seconds\n            since epoch\n          required: true\n          schema:\n            type: string\n            format: date-time\n          example: '2013-10-21T01:00:00Z'\n        - in: query\n          name: b\n          description: |\n            Minimum (Western) Longitude, Minimum (Southern) Latitude,\n            Maximum (Eastern) Longitude, Maximum (Northern) Latitude\n          required: true\n          schema:\n            type: string\n          example: -30,15,-45,30\n        - in: query\n          name: parameter\n          description: |\n            The parameter of interest. One of 'sst', 'sss', 'wind'\n          required: true\n          schema:\n            type: string\n            enum: ['sst', 'sss', 'wind']\n          example: sss\n        - in: query\n          name: depthMin\n          description: |\n            Minimum depth of measurements. Must be less than depthMax.\n          required: false\n          schema:\n            type: integer\n          example: 0\n        - in: query\n          name: depthMax\n          description: |\n            Maximum depth of measurements. Must be greater than\n            depthMin.\n          required: false\n          schema:\n            type: integer\n          example: 5\n        - in: query\n          name: platforms\n          description: |\n            Platforms to include for subset consideration.\n          required: false\n          schema:\n            type: string\n            default: 1,2,3,4,5,6,7,8,9\n          example: 1,2,3,4,5,6,7,8,9\n        - in: query\n          name: output\n          description: |\n            Output type. Only 'ZIP' is currently supported\n          required: true\n          schema:\n            type: string\n            enum: ['ZIP']\n            default: ZIP\n          example: ZIP\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/zip:\n              schema:\n                type: string\n                format: binary\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /datainbounds:\n    get:\n      summary: Fetches point values for a given dataset and geographical area\n      operationId: datainbounds\n      tags:\n        - Subsetting\n      parameters:\n        - in: query\n          name: ds\n          description: |\n            The Dataset shortname to use in calculation\n          required: true\n          schema:\n            type: string\n            x-dspopulate:\n             - satellite\n          example: avhrr-l4-glob-v2-daily-ncei-ghrsst-sstblend-avhrr-oi-glob-v020-fv020\n        - in: query\n          name: startTime\n          description: |\n            Starting time in format YYYY-MM-DDTHH:mm:ssZ or seconds\n            since epoch\n          required: true\n          schema:\n            type: string\n            format: date-time\n          example: '2012-09-28T00:00:00Z'\n        - in: query\n          name: endTime\n          description: |\n            Ending time in format YYYY-MM-DDTHH:mm:ssZ or seconds\n            since epoch\n          required: true\n          schema:\n            type: string\n            format: date-time\n          example: '2012-09-28T00:01:00Z'\n        - in: query\n          name: b\n          description: |\n            Minimum (Western) Longitude, Minimum (Southern) Latitude,\n            Maximum (Eastern) Longitude, Maximum (Northern) Latitude\n          required: true\n          schema:\n            type: string\n          example: -45,15,-30,30\n        - in: query\n          name: parameter\n          description: |\n            The parameter of interest. One of 'sst', 'sss', 'wind'\n          required: true\n          schema:\n            type: string\n            enum: ['sst', 'sss', 'wind']\n          example: sst\n        - in: query\n          name: output\n          description: |\n            Output type. Only 'CSV' or 'JSON' is currently supported\n          required: false\n          schema:\n            type: string\n            default: 'JSON'\n            enum: ['CSV', 'JSON']\n          example: JSON\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MatchupResponse'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /version:\n    get:\n      summary: List the version of the API\n      operationId: apiversion\n      tags:\n        - Matchup\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            text/plain:\n              schema:\n                type: string\n                example: 1.6\n        '500':\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /domslist:\n    get:\n      summary: Provides a list of available data sets\n      operationId: domslist\n      tags:\n        - Matchup\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DomsList'\n        '500':\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /domsvalues:\n    get:\n      summary: |\n        Fetches stats and data values for the selected in situ source\n        and bounding box\n      operationId: domsvalues\n      tags:\n        - Matchup\n      parameters:\n        - in: query\n          name: source\n          description: |\n            The insitu shortname to find stats and data for\n          required: true\n          schema:\n            type: string\n            x-dspopulate:\n              - insitu\n          example: samos\n        - in: query\n          name: startTime\n          description: |\n            Starting time in format YYYY-MM-DDTHH:mm:ssZ or seconds\n            since epoch\n          required: true\n          schema:\n            type: string\n            format: date-time\n          example: '2013-10-21T00:00:00Z'\n        - in: query\n          name: endTime\n          description: |\n            Ending time in format YYYY-MM-DDTHH:mm:ssZ or seconds\n            since epoch\n          required: true\n          schema:\n            type: string\n            format: date-time\n          example: '2013-10-21T01:00:00Z'\n        - in: query\n          name: b\n          description: |\n            Minimum (Western) Longitude, Minimum (Southern) Latitude,\n            Maximum (Eastern) Longitude, Maximum (Northern) Latitude\n          required: true\n          schema:\n            type: string\n          example: -30,15,-45,30\n        - in: query\n          name: tt\n          description: |\n            Tolerance in time (seconds) when comparing two measurements.\n          required: true\n          schema:\n            type: integer\n          example: 86400\n        - in: query\n          name: rt\n          description: |\n            Tolerance in radius (meters) when comparing two\n            measurements.\n          required: true\n          schema:\n            type: number\n          example: 1000.0\n        - in: query\n          name: depthMin\n          description: |\n            Minimum depth of measurements. Must be less than depthMax.\n          required: false\n          schema:\n            type: integer\n          example: 0\n        - in: query\n          name: depthMax\n          description: |\n            Maximum depth of measurements. Must be greater than\n            depthMin.\n          required: false\n          schema:\n            type: integer\n          example: 5\n        - in: query\n          name: platforms\n          description: |\n            Platforms to include for subset consideration.\n          required: false\n          schema:\n            type: string\n          example: 1,2,3,4,5,6,7,8,9\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DomsValues'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /stats:\n    get:\n      summary: |\n        Computes time series statistics\n      operationId: stats\n      tags:\n        - Analytics\n      parameters:\n        - in: query\n          name: ds\n          description: |\n            The dataset on which to generate the statistics\n          required: true\n          schema:\n            type: string\n            x-dspopulate:\n             - satellite\n             - insitu\n          example: MUR25-JPL-L4-GLOB-v04.2\n        - in: query\n          name: minLat\n          description: |\n            Minimum latitude on which to generate statistics\n          required: true\n          schema:\n            type: string\n          example: -90\n        - in: query\n          name: maxLat\n          description: |\n            Maximum latitude on which to generate statistics\n          required: true\n          schema:\n            type: string\n          example: 90\n        - in: query\n          name: minLon\n          description: |\n            Minimum longitude on which to generate statistics\n          required: true\n          schema:\n            type: string\n          example: -180\n        - in: query\n          name: maxLon\n          description: |\n            Maximum longitude on which to generate statistics\n          required: true\n          schema:\n            type: string\n          example: 180\n        - in: query\n          name: startTime\n          description: |\n            Starting time in format YYYY-MM-DDTHH:mm:ssZ or seconds\n            since epoch\n          required: true\n          schema:\n            type: string\n            format: date-time\n          example: '2013-10-21T00:00:00Z'\n        - in: query\n          name: endTime\n          description: |\n            Ending time in format YYYY-MM-DDTHH:mm:ssZ or seconds\n            since epoch\n          required: true\n          schema:\n            type: string\n            format: date-time\n          example: '2013-10-31T23:59:59Z'\n        - in: query\n          name: output\n          description: |\n            Data formatting for results. Default is ‘JSON’. Alternative\n            is ‘CSV’ for comma-seperated values.\n          required: false\n          schema:\n            type: string\n            enum: ['JSON', 'CSV']\n          example: JSON\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Stats'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\nexternalDocs:\n  description: Documentation\n  url: https://incubator-sdap-nexus.readthedocs.io/en/latest/index.html\ncomponents:\n  schemas:\n    DomsQueryResult:\n      type: object\n      properties:\n        executionId:\n          type: string\n          format: uuid\n    MatchupResponse:\n      allOf:\n        - $ref: '#/components/schemas/DomsQueryResult'\n        - type: object\n          properties:\n            data:\n              type: array\n              items:\n                $ref: '#/components/schemas/DomsPointPrimary'\n    DomsPointPrimary:\n      allOf:\n        - $ref: '#/components/schemas/DomsPointBase'\n        - type: object\n          properties:\n            matches:\n              type: array\n              items:\n                $ref: '#/components/schemas/DomsPointSecondary'\n        - type: object\n          properties:\n            primary:\n              type: array\n              items:\n                $ref: '#/components/schemas/DomsDataPoint'\n    DomsPointSecondary:\n      allOf:\n        - $ref: '#/components/schemas/DomsPointBase'\n        - type: object\n          properties:\n            secondary:\n              type: array\n              items:\n                $ref: '#/components/schemas/DomsDataPoint'\n    DomsPointBase:\n      type: object\n      properties:\n        platform:\n          type: string\n        device:\n          type: string\n        x:\n          type: string\n        y:\n          type: string\n        point:\n          type: string\n          format: wkt\n        time:\n          type: integer\n        fileurl:\n          type: string\n        id:\n          type: string\n        source:\n          type: string\n    DomsDataPoint:\n      type: object\n      properties:\n        variable_name:\n          type: string\n        cf_variable_name:\n          type: string\n        variable_value:\n          type: number\n    DomsList:\n      allOf:\n        - $ref: '#/components/schemas/DomsQueryResult'\n        - type: object\n          properties:\n            data:\n              type: object\n              properties:\n                satellite:\n                  type: array\n                  items:\n                    type: object\n                    properties:\n                      shortName:\n                        type: string\n                      title:\n                        type: string\n                      tileCount:\n                        type: integer\n                      metadata:\n                        type: string # TODO\n                insitu:\n                  type: array\n                  items:\n                    type: object\n                    properties:\n                      name:\n                        type: string\n                      endpoint:\n                        type: string\n                        format: url\n                      metadata:\n                        type: string # TODO\n                      depths:\n                        type: string # TODO\n                      facets:\n                        type: array\n                        items:\n                          type: object\n                          properties:\n                            field:\n                              type: string\n                            values:\n                              type: array\n                              items:\n                                type: object\n                                properties:\n                                  count:\n                                    type: integer\n                                  value:\n                                    type: string\n                params:\n                  type: string # TODO\n                bounds:\n                  type: object # TODO\n                count:\n                  type: integer\n                details:\n                  type: string # TODO\n    DomsValues:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/DomsQueryResult'\n        - type: object\n          properties:\n            data:\n              type: array\n              items:\n                type: object\n                properties:\n                  x:\n                    type: number\n                  y:\n                    type: number\n                  source:\n                    type: string\n                  time:\n                    type: number\n                  device:\n                    type: string\n                    nullable: true\n                  platform:\n                    type: string\n                  depth:\n                    type: number\n                    nullable: true\n    Stats:\n      type: object\n      properties:\n        meta:\n          type: array\n          items:\n            type: object\n            properties:\n              shortname:\n                type: string\n              bounds:\n                type: object\n                properties:\n                  east:\n                    type: number\n                  west:\n                    type: number\n                  north:\n                    type: number\n                  south:\n                    type: number\n              time:\n                type: object\n                properties:\n                  start:\n                    type: integer\n                  stop:\n                    type: integer\n                  iso_start:\n                    type: string\n                    format: date\n                  iso_stop:\n                    type: string\n                    format: date\n        data:\n          type: array\n          items:\n            type: object\n            properties:\n              min:\n                type: number\n              max:\n                type: number\n              mean:\n                type: number\n              cnt:\n                type: integer\n              std:\n                type: number\n              time:\n                type: integer\n              meanSeasonal:\n                type: number\n              minSeasonal:\n                type: number\n              maxSeasonal:\n                type: number\n              meanLowPass:\n                type: number\n              maxLowPass:\n                type: number\n              meanSeasonalLowPass:\n                type: number\n              minSeasonalLowPass:\n                type: number\n              maxSeasonalLowPass:\n                type: number\n              ds:\n                type: integer\n        stats:\n          type: object\n          properties:\n            slope:\n              type: number\n            intercept:\n              type: number\n            r:\n              type: number\n            p:\n              type: number\n            err:\n              type: string\n    Error:\n      type: object\n      properties:\n        error:\n          type: string\n        code:\n          type: integer",
			"canonicalURL": "/github.com/apache/incubator-sdap-nexus@57f98a7321f74cc046ed0ec4a48f2dd6607528b2/-/blob/analysis/webservice/apidocs/openapi.yml",
			"externalURLs": [
				{
					"url": "https://github.com/apache/incubator-sdap-nexus/blob/57f98a7321f74cc046ed0ec4a48f2dd6607528b2/analysis/webservice/apidocs/openapi.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /match_spark: get: duplicate operationId: \"matchup\""
}