{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/wso2/docs-is"
		},
		"file": {
			"name": "self-service.yaml",
			"size": 0,
			"path": "en/docs/apis/restapis/self-service.yaml",
			"byteSize": 34369,
			"content": "openapi: 3.0.1\ninfo:\n  title: WSO2 Identity Server Rest API - User\n  description: |\n    This document specifies a **RESTful API** for WSO2 **Identity Server** .\n    It is written with [swagger 2](http://swagger.io/).\n  contact:\n    name: WSO2\n    url: http://wso2.com/products/identity-server/\n    email: architecture@wso2.org\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  version: 1.0.0\nservers:\n- url: https://apis.is.com/t/{tenant-domain}/api/identity/user/v1.0\npaths:\n  /me:\n    get:\n      tags:\n      - User Export\n      summary: Export self user information\n      description: This API is used to retrieve the personal information of the authenticated\n        user.\n      operationId: getMe\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExportedUser'\n        401:\n          description: Unauthorized request\n          content: {}\n      x-wso2-request: |\n        curl -X GET -H \"Authorization: Basic \u003cBase64Encoded_username:password\u003e\" -H \"Content-Type: application/json\"  \"https://localhost:9443/api/identity/user/v1.0/me\"\n      x-wso2-curl: |\n        curl -X GET -H \"Authorization: Basic YWRtaW46YWRtaW4=\" -H \"Content-Type: application/json\"  \"https://localhost:9443/api/identity/user/v1.0/me\"\n      x-wso2-response: |\n        {\"security\":{\"challengeQuestions\":[\"City where you were born ?\",\"Model of your first car ?\"]},\"consents\":[{\"version\":\"KI-CR-v1.1.0\",\"jurisdiction\":\"global\",\"consentTimestamp\":1518061604295,\"collectionMethod\":\"string\",\"consentReceiptID\":\"e83fa396-f80e-4835-9d79-754ce3f6ef93\",\"publicKey\":null,\"language\":\"string\",\"piiPrincipalId\":\"admin\",\"tenantDomain\":\"carbon.super\",\"state\":\"ACTIVE\",\"piiControllers\":[{\"piiController\":\"sample\",\"contact\":\"sample\",\"address\":{\"addressCountry\":\"USA\",\"addressLocality\":\"Mountain View\",\"addressRegion\":\"CA\",\"postOfficeBoxNumber\":\"233\",\"postalCode\":\"94043\",\"streetAddress\":\"1600 Amphitheatre Pkwy\"},\"email\":\"sample@abc.com\",\"phone\":\"+01433444333\",\"onBehalf\":false,\"piiControllerUrl\":\"https://sample.piicontroller.url\"}],\"policyUrl\":\"string\",\"services\":[{\"service\":\"travelocity\",\"tenantDomain\":\"carbon.super\",\"purposes\":[{\"purpose\":\"test-purpose\",\"purposeCategory\":[\"test-purpose-category\"],\"consentType\":\"explicit\",\"piiCategory\":[{\"piiCategory\":\"test-category\",\"validity\":\"string\"}],\"primaryPurpose\":true,\"termination\":\"string\",\"thirdPartyDisclosure\":false,\"thirdPartyName\":null}]}],\"sensitive\":true,\"spiCat\":[\"test-category\"]}],\"basic\":{\"http://wso2.org/claims/userid\":\"a42b7c0a-ae21-46c9-bb78-3bfeb8e7625c\",\"http://wso2.org/claims/username\":\"admin\",\"http://wso2.org/claims/created\":\"2018-02-08T14:34:06Z\",\"http://wso2.org/claims/role\":\"Internal/everyone,admin,Application/aaaa\",\"http://wso2.org/claims/fullname\":\"admin\",\"http://wso2.org/claims/modified\":\"2018-02-08T14:34:06Z\",\"http://wso2.org/claims/emailaddress\":\"admin@wso2.com\",\"http://wso2.org/claims/lastname\":\"admin\",\"http://wso2.org/claims/givenname\":\"admin\"}}\n    post:\n      tags:\n      - Self Register\n      summary: |\n        Self register user\n      description: |\n        This API is used for user self registration.\n      requestBody:\n        description: Sends optional property parameters over email based on an email\n          template.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SelfUserRegistrationRequest'\n        required: true\n      responses:\n        201:\n          description: Successfully created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SuccessfulUserCreation'\n        400:\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        409:\n          description: Conflict\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      x-wso2-request: |\n        curl -X POST -H \"Authorization: Basic \u003cBase64Encoded_username:password\u003e\" -H \"Content-Type: application/json\" -d '{\"user\": {\"username\": \"\u003cusername\u003e\",\"realm\": \"\u003cuser_store\u003e\", \"password\": \"\u003cpassword\u003e\",\"claims\": [{\"uri\": \"\u003cclaim_URI\u003e\",\"value\": \"\u003cclaim_value\u003e\" },{\"uri\": \"\u003cclaim_URI2\u003e\",\"value\": \"\u003cclaim_value2\u003e\"},{\"uri\": \"\u003cclaim_URI3\u003e\",\"value\": \"\u003cclaim_value3\u003e\"},{\"uri\": \"\u003cclaim_URI4\u003e\",\"value\": \"\u003cclaim_value4\u003e\"} ] },\"properties\": []}' \"https://localhost:9443/api/identity/user/v1.0/me\"\n      x-wso2-curl: |\n        curl -X POST -H \"Authorization: Basic YWRtaW46YWRtaW4=\" -H \"Content-Type: application/json\" -d '{\"user\": {\"username\": \"kim\",\"realm\": \"PRIMARY\", \"password\": \"Password12!\",\"claims\": [{\"uri\": \"http://wso2.org/claims/givenname\",\"value\": \"kim\" },{\"uri\": \"http://wso2.org/claims/emailaddress\",\"value\": \"kim.anderson@gmail.com\"},{\"uri\": \"http://wso2.org/claims/lastname\",\"value\": \"Anderson\"},{\"uri\": \"http://wso2.org/claims/mobile\",\"value\": \"+947721584558\"} ] },\"properties\": []}' \"https://localhost:9443/api/identity/user/v1.0/me\"\n      x-wso2-response: |\n        \"HTTP/1.1 201 Created\"\n      x-codegen-request-body-name: user\n  /me/resend-code:\n    post:\n      tags:\n      - Self Register\n      summary: |\n        Self resend code\n      description: |\n        This API is used to resend the confirmation code to the authenticated user if it is missing.\n      requestBody:\n        description: Sends property parameters such as the recovery scenario.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MeResendCodeRequest'\n        required: true\n      responses:\n        201:\n          description: Created\n          content:\n            application/json:\n              schema:\n                title: key\n                type: string\n        400:\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      x-wso2-request: |\n        curl -X POST -H \"Authorization: Basic \u003cBase64Encoded_username:password\u003e\" -H \"Content-Type: application/json\" -d '{\"properties\": [{\"key\":\"RecoveryScenario\",\"value\": \"SCENARIO_NAME\"}]}' \"https://localhost:9443/api/identity/user/v1.0/me/resend-code\"\n      x-wso2-curl: |\n        curl -X POST -H \"Authorization: Basic YWRtaW46YWRtaW4=\" -H \"Content-Type: application/json\" -d '{\"properties\": [{\"key\":\"RecoveryScenario\",\"value\": \"MOBILE_VERIFICATION_ON_UPDATE\"}]}' \"https://localhost:9443/api/identity/user/v1.0/me/resend-code\"\n      x-wso2-response: |\n        \"HTTP/1.1 201 Created\"\n      x-codegen-request-body-name: meResendCodeRequest\n  /me/validate-code:\n    post:\n      tags:\n      - Self Register\n      summary: |\n        Self validate code\n      description: |\n        This API is used to validate the code submitted by the authenticated user in a verification scenario.\n      requestBody:\n        description: The validation code retrieved for the verification scenario,\n          and optional property parameters.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MeCodeValidationRequest'\n        required: true\n      responses:\n        202:\n          description: Accepted\n          content: {}\n        400:\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      x-wso2-request: |\n        curl -k -v -X POST -H \"Authorization: \u003cBase64Encoded_username:password\u003e\" -H \"Content-Type: application/json\"\n         -d '{ \"code\": \"\u003cvalidation_code\u003e\",\"properties\": []}' \"https://localhost:9443/api/identity/user/v1.0/me/validate-code\"\n      x-wso2-curl: |\n        curl -k -v -X POST -H \"Authorization: Basic YWRtaW46YWRtaW4=\" -H \"Content-Type: application/json\" -d '{ \"code\": \"84325529-8aa7-4851-8751-5980a7f2d9f7\",\"properties\": []}' \"https://localhost:9443/api/identity/user/v1.0/me/validate-code\"\n      x-wso2-response: |\n        \"HTTP/1.1 202 Accepted\"\n      x-codegen-request-body-name: code\n  /lite:\n    post:\n      tags:\n      - Self Register\n      - Lite\n      summary: |\n        Lite register user\n      description: |\n        This API is used for lite user self registration.\n      requestBody:\n        description: Sends optional property parameters over email based on an email\n          template.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LiteUserRegistrationRequest'\n        required: true\n      responses:\n        201:\n          description: Successfully created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SuccessfulUserCreation'\n        400:\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        409:\n          description: Conflict\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      x-wso2-request: |\n        curl -X POST -H \"Authorization: Basic \u003cBase64Encoded_username:password\u003e\" -H \"Content-Type: application/json\" -d '{\"email\": \"\u003cusername\u003e\",\"realm\": \"\u003cuser_store\u003e\",\"properties\": []}' \"https://localhost:9443/api/identity/user/v1.0/lite\"\n      x-wso2-curl: |\n        curl -X POST -H \"Authorization: Basic YWRtaW5Ad3NvMi5jb206YWRtaW4=\" -H \"Content-Type: application/json\" -d '{\"email\": \"lanka@wso2.com\",\"realm\": \"PRIMARY\",\"properties\": []}' \"https://localhost:9443/api/identity/user/v1.0/lite\"\n        curl -X POST -H \"Authorization: Basic YWRtaW5Ad3NvMi5jb206YWRtaW4=\" -H \"Content-Type: application/json\" -d '{\"email\": \"lanka@wso2.com\",\"realm\": \"PRIMARY\",\"preferredChannel\":\"Email\",\"claims\":[], \"properties\": []}' \"https://localhost:9443/api/identity/user/v1.0/lite\"\n      x-wso2-response: |\n        \"HTTP/1.1 201 Created\"\n      x-codegen-request-body-name: user\n  /validate-code:\n    post:\n      tags:\n      - Self Register\n      summary: |\n        Validate code\n      description: |\n        This API is used to validate the code used by self registered users.\n      requestBody:\n        description: The validation code retrieved after user self registration, and\n          optional property parameters.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CodeValidationRequest'\n        required: true\n      responses:\n        202:\n          description: Accepted\n          content: {}\n        400:\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      x-wso2-request: |\n        curl -k -v -X POST -H \"Authorization: \u003cBase64Encoded_username:password\u003e\" -H \"Content-Type: application/json\"\n         -d '{ \"code\": \"\u003cvalidation_code\u003e\",\"verifiedChannel\":{\"type\":\u003ctype\u003e, \"claim\":\u003cclaim_uri},\n          \"properties\": []}' \"https://localhost:9443/api/identity/user/v1.0/validate-code\"\n      x-wso2-curl: |\n        curl -k -v -X POST -H \"Authorization: Basic YWRtaW46YWRtaW4=\" -H \"Content-Type: application/json\" -d '{ \"code\": \"84325529-8aa7-4851-8751-5980a7f2d9f7\",\"verifiedChannel\":{\"type\":\"SMS\", \"claim\":\"http://wso2.org/claims/mobile\"},\"properties\": []}' \"https://localhost:9443/api/identity/user/v1.0/validate-code\"\n      x-wso2-response: |\n        \"HTTP/1.1 202 Accepted\"\n      x-codegen-request-body-name: code\n  /introspect-code:\n    post:\n      tags:\n      - Self Register\n      - Verification\n      summary: |\n        Introspect code\n      description: |\n        This API is used to validate the code used by self registered users and retrieve the details.\n      requestBody:\n        description: The validation code retrieved after user self registration, and\n          optional property parameters.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CodeValidationRequest'\n        required: true\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CodeValidateInfoResponse'\n        400:\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      x-wso2-request: |\n        curl -k -v -X POST -H \"Authorization: Basic YWRtaW5Ad3NvMi5jb206YWRtaW4=\" -H \"Content-Type: application/json\" -d '{ \"code\": \"17f00958-a1d7-47b9-8183-be99c08a800f\"}' \"https://localhost:9443/api/identity/user/v1.0/introspect-code\"\n      x-wso2-curl: |\n        curl -k -v -X POST -H \"Authorization: Basic YWRtaW5Ad3NvMi5jb206YWRtaW4=\" -H \"Content-Type: application/json\" -d '{ \"code\": \"17f00958-a1d7-47b9-8183-be99c08a800f\"}' \"https://localhost:9443/api/identity/user/v1.0/introspect-code\"\n      x-wso2-response: |\n        \"HTTP/1.1 200 OK\"\n      x-codegen-request-body-name: code\n  /validate-username:\n    post:\n      tags:\n      - Self Register\n      summary: |\n        Validate username\n      description: |\n        This API is used to check whether a given username is available for self registration.\n      requestBody:\n        description: Username for validation.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UsernameValidationRequest'\n        required: true\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UsernameValidateInfoResponse'\n        400:\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      x-wso2-request: |\n        curl -k -v -X POST -H \"Authorization: Basic \u003cBase64Encoded_username:password\u003e\" -H \"Content-Type: application/json\" -d '{ \"username\": \"\u003cusername\u003e\",\"properties\": []}' \"https://localhost:9443/api/identity/user/v1.0/validate-username\"\n      x-wso2-curl: |\n        curl -k -v -X POST -H \"Authorization: Basic YWRtaW46YWRtaW4=\" -H \"Content-Type: application/json\" -d '{ \"username\": \"john@wso2.com\",\"properties\": []}' \"https://localhost:9443/api/identity/user/v1.0/validate-username\"\n      x-wso2-response: |\n        \"HTTP/1.1 200 OK\" { \"statusCode\": 0 }\n      x-codegen-request-body-name: username\n  /resend-code:\n    post:\n      tags:\n      - Self Register\n      summary: |\n        Resend code\n      description: |\n        This API is used to resend the confirmation code if it is missing.\n      requestBody:\n        description: Sends optional property parameters over email based on an email\n          template.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ResendCodeRequest'\n        required: true\n      responses:\n        200:\n          description: Successful\n          content:\n            application/json:\n              schema:\n                title: key\n                type: string\n        400:\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      x-wso2-request: |\n        curl -X POST -H \"Authorization: Basic \u003cBase64Encoded_username:password\u003e\" -H \"Content-Type: application/json\" -d '{\"user\":{\"username\": \"\u003cusername\u003e\",\"realm\": \"\u003cuser_store_name\u003e\"},\"properties\": []}' \"https://localhost:9443/api/identity/user/v1.0/resend-code\"\n      x-wso2-curl: |\n        curl -X POST -H \"Authorization: Basic YWRtaW46YWRtaW4=\" -H \"Content-Type: application/json\" -d '{\"user\":{\"username\": \"kim\",\"realm\": \"PRIMARY\"},\"properties\": []}' \"https://localhost:9443/api/identity/user/v1.0/resend-code\"\n      x-wso2-response: |\n        \"HTTP/1.1 201 Created\"\n      x-codegen-request-body-name: user\n  /pi-info:\n    get:\n      tags:\n      - User Export\n      summary: Search user ID by username\n      description: Returns the user ID of the given username. This ID can be used\n        with the /pi-info endpoint.\n      operationId: searchUserByName\n      parameters:\n      - name: username\n        in: query\n        description: Username pattern used to search for the user ID.\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserSearchResponse'\n        401:\n          description: Unauthorized request\n          content: {}\n        404:\n          description: User not found\n          content: {}\n      x-wso2-request: |\n        curl -X GET -H \"Authorization: Basic \u003cBase64Encoded_username:password\u003e\" -H \"Content-Type: application/json\"  \"https://localhost:9443/api/identity/user/v1.0/pi-info?username=\u003cusername\u003e\"\n      x-wso2-curl: |\n        curl -X GET -H \"Authorization: Basic YWRtaW46YWRtaW4=\" -H \"Content-Type: application/json\"  \"https://localhost:9443/api/identity/user/v1.0/pi-info?username=admin\"\n      x-wso2-response: |\n        [{\"username\":\"admin\",\"userId\":\"YWRtaW4%3D\"}]\n  /pi-info/{userId}:\n    get:\n      tags:\n      - User Export\n      summary: Export user information by ID\n      description: This API is used to retrieve the personal information of a single\n        user using the given user ID.\n      operationId: getUserById\n      parameters:\n      - name: userId\n        in: path\n        description: Unique Identifier of user. First encode the user's username using\n          the Base64 Encoder. Then encode the Base64 Encoded username using the URL\n          Encoder. Use the result you get as the user ID.\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExportedUser'\n        401:\n          description: Unauthorized request\n          content: {}\n        404:\n          description: User not found\n          content: {}\n      x-wso2-request: |\n        curl -X GET -H \"Authorization: Basic \u003cBase64Encoded_username:password\u003e\" -H \"Content-Type: application/json\"  \"https://localhost:9443/api/identity/user/v1.0/pi-info/\u003cBase64\u0026URLEncoded_username\u003e\"\n      x-wso2-curl: |\n        curl -X GET -H \"Authorization: Basic YWRtaW46YWRtaW4=\" -H \"Content-Type: application/json\"  \"https://localhost:9443/api/identity/user/v1.0/pi-info/YWRtaW4%3D\"\n      x-wso2-response: |\n        {\"security\":{\"challengeQuestions\":[\"City where you were born ?\",\"Model of your first car ?\"]},\"consents\":[{\"version\":\"KI-CR-v1.1.0\",\"jurisdiction\":\"global\",\"consentTimestamp\":1518061604295,\"collectionMethod\":\"string\",\"consentReceiptID\":\"e83fa396-f80e-4835-9d79-754ce3f6ef93\",\"publicKey\":null,\"language\":\"string\",\"piiPrincipalId\":\"admin\",\"tenantDomain\":\"carbon.super\",\"state\":\"ACTIVE\",\"piiControllers\":[{\"piiController\":\"sample\",\"contact\":\"sample\",\"address\":{\"addressCountry\":\"USA\",\"addressLocality\":\"Mountain View\",\"addressRegion\":\"CA\",\"postOfficeBoxNumber\":\"233\",\"postalCode\":\"94043\",\"streetAddress\":\"1600 Amphitheatre Pkwy\"},\"email\":\"sample@abc.com\",\"phone\":\"+01433444333\",\"onBehalf\":false,\"piiControllerUrl\":\"https://sample.piicontroller.url\"}],\"policyUrl\":\"string\",\"services\":[{\"service\":\"travelocity\",\"tenantDomain\":\"carbon.super\",\"purposes\":[{\"purpose\":\"test-purpose\",\"purposeCategory\":[\"test-purpose-category\"],\"consentType\":\"explicit\",\"piiCategory\":[{\"piiCategory\":\"test-category\",\"validity\":\"string\"}],\"primaryPurpose\":true,\"termination\":\"string\",\"thirdPartyDisclosure\":false,\"thirdPartyName\":null}]}],\"sensitive\":true,\"spiCat\":[\"test-category\"]}],\"basic\":{\"http://wso2.org/claims/userid\":\"a42b7c0a-ae21-46c9-bb78-3bfeb8e7625c\",\"http://wso2.org/claims/username\":\"admin\",\"http://wso2.org/claims/created\":\"2018-02-08T14:34:06Z\",\"http://wso2.org/claims/role\":\"Internal/everyone,admin,Application/aaaa\",\"http://wso2.org/claims/fullname\":\"admin\",\"http://wso2.org/claims/modified\":\"2018-02-08T14:34:06Z\",\"http://wso2.org/claims/emailaddress\":\"admin@wso2.com\",\"http://wso2.org/claims/lastname\":\"admin\",\"http://wso2.org/claims/givenname\":\"admin\"}}\ncomponents:\n  schemas:\n    SuccessfulUserCreation:\n      type: object\n      properties:\n        code:\n          type: string\n          description: Status code of the operation.\n          example: USR-02007\n        message:\n          type: string\n          description: Descriptive message regarding the operation.\n          example: successful user self registration\n        notificationChannel:\n          type: string\n          description: Account confirmation notification sent channel.\n          example: EMAIL\n    SelfRegistrationUser:\n      type: object\n      properties:\n        username:\n          type: string\n        realm:\n          type: string\n        password:\n          type: string\n        claims:\n          type: array\n          items:\n            $ref: '#/components/schemas/Claim'\n    User:\n      type: object\n      properties:\n        username:\n          type: string\n        realm:\n          type: string\n    Error:\n      type: object\n      properties:\n        code:\n          type: string\n        message:\n          type: string\n        description:\n          type: string\n    Property:\n      type: object\n      properties:\n        key:\n          type: string\n        value:\n          type: string\n    Claim:\n      type: object\n      properties:\n        uri:\n          type: string\n        value:\n          type: string\n    SelfUserRegistrationRequest:\n      type: object\n      properties:\n        user:\n          $ref: '#/components/schemas/SelfRegistrationUser'\n        properties:\n          type: array\n          items:\n            $ref: '#/components/schemas/Property'\n    LiteUserRegistrationRequest:\n      type: object\n      properties:\n        email:\n          type: string\n        mobile:\n          type: string\n        realm:\n          type: string\n        preferredChannel:\n          type: string\n          enum:\n          - Mobile\n          - Email\n        claims:\n          type: array\n          items:\n            $ref: '#/components/schemas/Claim'\n        properties:\n          type: array\n          items:\n            $ref: '#/components/schemas/Property'\n    CodeValidationRequest:\n      type: object\n      properties:\n        code:\n          type: string\n        verifiedChannel:\n          $ref: '#/components/schemas/VerifiedChannel'\n        properties:\n          type: array\n          items:\n            $ref: '#/components/schemas/Property'\n    MeCodeValidationRequest:\n      required:\n      - code\n      type: object\n      properties:\n        code:\n          type: string\n        properties:\n          type: array\n          items:\n            $ref: '#/components/schemas/Property'\n    VerifiedChannel:\n      type: object\n      properties:\n        type:\n          type: string\n          description: verified channel type\n          example: EMAIL\n        claim:\n          type: string\n          description: verified channel claim\n          example: http://wso2.org/claims/emailaddress\n      description: Verified channel information\n    UsernameValidationRequest:\n      type: object\n      properties:\n        username:\n          type: string\n        properties:\n          type: array\n          items:\n            $ref: '#/components/schemas/Property'\n    UsernameValidateInfoResponse:\n      type: object\n      properties:\n        statusCode:\n          type: integer\n          description: status code\n    CodeValidateInfoResponse:\n      type: object\n      properties:\n        user:\n          $ref: '#/components/schemas/User'\n        recoveryScenario:\n          type: string\n        recoveryStep:\n          type: string\n    ResendCodeRequest:\n      type: object\n      properties:\n        user:\n          $ref: '#/components/schemas/User'\n        properties:\n          type: array\n          items:\n            $ref: '#/components/schemas/Property'\n    MeResendCodeRequest:\n      required:\n      - properties\n      type: object\n      properties:\n        properties:\n          type: array\n          items:\n            $ref: '#/components/schemas/Property'\n    BasicProfile:\n      type: object\n      additionalProperties:\n        $ref: '#/components/schemas/BasicInfoEntry'\n    BasicInfoEntry:\n      type: object\n      properties:\n        claimUri:\n          type: string\n          description: Claim Uri\n        value:\n          type: string\n          description: Claim value\n    ConsentReceipt:\n      required:\n      - collectionMethod\n      - consentReceiptID\n      - consentTimestamp\n      - jurisdiction\n      - piiControllers\n      - piiPrincipalId\n      - policyUrl\n      - sensitive\n      - services\n      - spiCat\n      - version\n      type: object\n      properties:\n        version:\n          type: string\n          description: The version of this specification to which a receipt conforms.\n            The value MUST be “KI-CR-v1.1.0” for this version of the specification.\n        jurisdiction:\n          type: string\n          description: The jurisdiction(s) applicable to this transaction.\n        consentTimestamp:\n          type: integer\n          description: Date and time of the consent transaction. The JSON value is\n            expressed as the number of seconds since 1970-01-01 00:00:00 GMT\n          format: int64\n        collectionMethod:\n          type: string\n          description: A description of the method by which consent was obtained.\n        consentReceiptID:\n          type: string\n          description: A unique number for each Consent Receipt.\n        publicKey:\n          type: string\n          description: The PII Controller’s public key.\n        language:\n          type: string\n          description: Language in which the consent was obtained as for ISO 639-1:2002\n            [ISO 639].\n        piiPrincipalId:\n          type: string\n          description: PII Principal-provided identifier. E.g., email address.\n        tenantDomain:\n          type: string\n          description: Tenant domain of the service (SP).\n        state:\n          type: string\n          description: Current state of the receipt.\n        piiControllers:\n          type: array\n          description: An array that contains one or more items where each item represents\n            one PII Controller.\n          items:\n            $ref: '#/components/schemas/piiController'\n        policyUrl:\n          type: string\n          description: A link to the PII Controller’s privacy statement/policy and\n            applicable terms of use in effect when the consent was obtained, and the\n            receipt was issued.\n        services:\n          type: array\n          description: An array that contains one or more items where each item represents\n            one Service.\n          items:\n            $ref: '#/components/schemas/serviceResponse'\n        sensitive:\n          type: boolean\n          description: Indicates whether the consent interaction contains PII that\n            is designated sensitive or not sensitive.\n        spiCat:\n          type: array\n          description: A listing of categories where PII data collected is sensitive.\n          items:\n            type: string\n    ExportedUser:\n      type: object\n      properties:\n        basic:\n          $ref: '#/components/schemas/BasicProfile'\n        consents:\n          type: array\n          items:\n            $ref: '#/components/schemas/ConsentReceipt'\n        security:\n          $ref: '#/components/schemas/Security'\n    piiController:\n      required:\n      - address\n      - contact\n      - email\n      - phone\n      - piiController\n      type: object\n      properties:\n        piiController:\n          type: string\n          description: Name of the first PII Controller who collects the data. This\n            entity is accountable for compliance with the management of PII. The PII\n            Controller determines the purpose(s) and type(s) of PII processing.\n        contact:\n          type: string\n          description: Contact name of the PII Controller. This field MUST contain\n            a non-empty string.\n        address:\n          $ref: '#/components/schemas/address'\n        email:\n          type: string\n          description: Contact email address of the PII Controller. The direct email\n            to contact the PII Controller regarding the consent or privacy contract.\n        phone:\n          type: string\n          description: Contact phone number of the PII Controller. The business phone\n            number to contact the PII Controller regarding the consent.\n        onBehalf:\n          type: boolean\n          description: A PII Processor acting on behalf of a PII Controller or PII\n            Processor. For example, a third-party analytics service would be a PII\n            Processor on behalf of the PII Controller, or a site operator acting on\n            behalf of the PII Controller.\n        piiControllerUrl:\n          type: string\n          description: A URL for contacting the PII Controller.\n    serviceResponse:\n      type: object\n      properties:\n        service:\n          type: string\n          description: The service or group of services being provided for which PII\n            is collected. The name of the service for which consent for the collection,\n            use, and disclosure of PII is being provided.\n        tenantDomain:\n          type: string\n          description: Tenant domain of the SP\n        purposes:\n          type: array\n          items:\n            $ref: '#/components/schemas/purposeResponse'\n    address:\n      type: object\n      properties:\n        addressCountry:\n          type: string\n        addressLocality:\n          type: string\n        addressRegion:\n          type: string\n        postOfficeBoxNumber:\n          type: string\n        postalCode:\n          type: string\n        streetAddress:\n          type: string\n      description: The physical address of PII controller. Postal address for contacting\n        the PII Controller. This is complient with the schema https://schema.org/PostalAddress.\n    purposeResponse:\n      required:\n      - piiCategory\n      - purposeCategory\n      - termination\n      - thirdPartyDisclosure\n      - thirdPartyName\n      type: object\n      properties:\n        purpose:\n          type: string\n          description: A short, clear explanation of why the PII item is required.\n        purposeCategory:\n          type: array\n          description: The reason the PII Controller is collecting the PII.\n          items:\n            type: string\n        consentType:\n          type: string\n          description: The type of the consent used by the PII Controller as their\n            authority to collect, use or disclose PII.\n        piiCategory:\n          type: array\n          description: A list of defined PII categories Ids.  PII Category should\n            reflect the category that will be shared as understood by the PII Principal.\n          items:\n            $ref: '#/components/schemas/piiCategoryNameList'\n        primaryPurpose:\n          type: boolean\n          description: Indicates if a purpose is part of the core service of the PII\n            Controller. Possible values are TRUE or FALSE.\n        termination:\n          type: string\n          description: Conditions for the termination of consent. Link to policy defining\n            how consent or purpose is terminated.\n        thirdPartyDisclosure:\n          type: boolean\n          description: Indicates if the PII Controller is disclosing PII to a third\n            party.  Possible values are TRUE or FALSE.\n        thirdPartyName:\n          type: string\n          description: The name or names of the third party to which the PII Processor\n            may disclose the PII.\n    piiCategoryNameList:\n      type: object\n      properties:\n        piiCategory:\n          type: string\n        validity:\n          type: string\n    UserSearchResponse:\n      type: array\n      items:\n        $ref: '#/components/schemas/UserSearchEntry'\n    UserSearchEntry:\n      type: object\n      properties:\n        username:\n          type: string\n        userId:\n          type: string\n    Security:\n      type: object\n      properties:\n        challengeQuestions:\n          $ref: '#/components/schemas/ChallengeQuestions'\n    ChallengeQuestions:\n      type: array\n      description: Challenge questions configured for the user.\n      items:\n        type: string\n    UsernameUpdateRequest:\n      type: object\n      properties:\n        realm:\n          type: string\n          description: Userstore domain of the User.\n        existingUsername:\n          type: string\n          description: Existing username of the User.\n        newUsername:\n          type: string\n          description: Expected new username of the User.\n",
			"canonicalURL": "/github.com/wso2/docs-is@0e310f5094151a87c47238ec3172ae9c0a5e7b1f/-/blob/en/docs/apis/restapis/self-service.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/wso2/docs-is/blob/0e310f5094151a87c47238ec3172ae9c0a5e7b1f/en/docs/apis/restapis/self-service.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse servers: at en/docs/apis/restapis/self-service.yaml:16:8: path parameter not specified: \"tenant-domain\""
}