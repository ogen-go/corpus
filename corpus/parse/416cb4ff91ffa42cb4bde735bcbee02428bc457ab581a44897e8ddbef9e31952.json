{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "gitlab.com/rluna-gitlab/gitlab-ce"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "doc/api/openapi/openapi.yaml",
			"byteSize": 20454,
			"content": "openapi: 3.0.0\ntags:\n  - name: metadata\n    description: Metadata of the GitLab instance\n  - name: version\n    description: Version\n  - name: access_requests\n    description: Access requests for projects and groups\n  - name: access_tokens\n    description: Access tokens for projects\ninfo:\n  description: |\n    An OpenAPI definition for the GitLab REST API.\n    Few API resources or endpoints are currently included.\n    The intent is to expand this to match the entire Markdown documentation of the API:\n    \u003chttps://docs.gitlab.com/ee/api/\u003e. Contributions are welcome.\n\n    When viewing this on gitlab.com, you can test API calls directly from the browser\n    against the `gitlab.com` instance, if you are logged in.\n    The feature uses the current [GitLab session cookie](https://docs.gitlab.com/ee/api/index.html#session-cookie),\n    so each request is made using your account.\n\n    Instructions for using this tool can be found in [Interactive API Documentation](openapi_interactive.md).\n\n  version: v4\n  title: GitLab API\n  termsOfService: 'https://about.gitlab.com/terms/'\n  license:\n    name: CC BY-SA 4.0\n    url: 'https://gitlab.com/gitlab-org/gitlab/-/blob/master/LICENSE'\nservers:\n  - url: 'https://gitlab.com/api/'\nsecurity:\n  - ApiKeyAuth: []\n\ncomponents:\n  securitySchemes:\n    ApiKeyAuth:\n      type: apiKey\n      in: header\n      name: Private-Token\n\npaths:\n  # METADATA\n  /v4/metadata:\n    $ref: '#/metadata'\n\n  # VERSION\n  /v4/version:\n    $ref: '#/version'\n\n  # ACCESS REQUESTS (PROJECTS)\n  /v4/projects/{id}/access_requests:\n    $ref: '#/accessRequestsProjects'\n\n  /v4/projects/{id}/access_requests/{user_id}/approve:\n    $ref: '#/accessRequestsProjectsApprove'\n\n  /v4/projects/{id}/access_requests/{user_id}:\n    $ref: '#/accessRequestsProjectsDeny'\n\n  # ACCESS REQUESTS (GROUPS)\n  /v4/groups/{id}/access_requests:\n    $ref: '#/accessRequestsGroups'\n\n  /v4/groups/{id}/access_requests/{user_id}/approve:\n    $ref: '#/accessRequestsGroupsApprove'\n\n  /v4/groups/{id}/access_requests/{user_id}:\n    $ref: '#/accessRequestsGroupsDeny'\n\n  # ACCESS REQUESTS (PROJECTS)\n  /v4/projects/{id}/access_tokens:\n    $ref: '#/accessTokens'\n\n  /v4/projects/{id}/access_tokens/{token_id}:\n    $ref: '#/accessTokensRevoke'\n\nmetadata:\n  get:\n    tags:\n      - metadata\n    summary: 'Retrieve metadata information for this GitLab instance.'\n    operationId: 'getMetadata'\n    responses:\n      '401':\n        description: 'unauthorized operation'\n      '200':\n        description: 'successful operation'\n        content:\n          'application/json':\n            schema:\n              title: 'MetadataResponse'\n              type: 'object'\n              properties:\n                version:\n                  type: 'string'\n                revision:\n                  type: 'string'\n                kas:\n                  type: 'object'\n                  properties:\n                    enabled:\n                      type: 'boolean'\n                    externalUrl:\n                      type: 'string'\n                      nullable: true\n                    version:\n                      type: 'string'\n                      nullable: true\n            examples:\n              Example:\n                value:\n                  version: '15.0-pre'\n                  revision: 'c401a659d0c'\n                  kas:\n                    enabled: true\n                    externalUrl: 'grpc://gitlab.example.com:8150'\n                    version: '15.0.0'\n\nversion:\n  get:\n    tags:\n      - version\n    summary: 'Retrieve version information for this GitLab instance.'\n    operationId: 'getVersion'\n    responses:\n      '401':\n        description: 'unauthorized operation'\n      '200':\n        description: 'successful operation'\n        content:\n          'application/json':\n            schema:\n              title: 'VersionResponse'\n              type: 'object'\n              properties:\n                version:\n                  type: 'string'\n                revision:\n                  type: 'string'\n            examples:\n              Example:\n                value:\n                  version: '13.3.0-pre'\n                  revision: 'f2b05afebb0'\n\n#/v4/projects/{id}/access_requests\naccessRequestsProjects:\n  get:\n    description: Lists access requests for a project\n    summary: List access requests for a project\n    operationId: accessRequestsProjects_get\n    tags:\n      - access_requests\n    parameters:\n      - name: id\n        in: path\n        description: The ID or URL-encoded path of the project owned by the authenticated user.\n        required: true\n        schema:\n          oneOf:\n            - type: integer\n            - type: string\n    responses:\n      '401':\n        description: Unauthorized operation\n      '200':\n        description: Successful operation\n        content:\n          application/json:\n            schema:\n              title: ProjectAccessResponse\n              type: object\n              properties:\n                id:\n                  type: integer\n                usename:\n                  type: string\n                name:\n                  type: string\n                state:\n                  type: string\n                created_at:\n                  type: string\n                requested_at:\n                  type: string\n            example:\n              - 'id': 1\n                'username': 'raymond_smith'\n                'name': 'Raymond Smith'\n                'state': 'active'\n                'created_at': '2012-10-22T14:13:35Z'\n                'requested_at': '2012-10-22T14:13:35Z'\n              - 'id': 2\n                'username': 'john_doe'\n                'name': 'John Doe'\n                'state': 'active'\n                'created_at': '2012-10-22T14:13:35Z'\n                'requested_at': '2012-10-22T14:13:35Z'\n  post:\n    description: Requests access for the authenticated user to a project\n    summary: Requests access for the authenticated user to a project\n    operationId: accessRequestsProjects_post\n    tags:\n      - access_requests\n    parameters:\n      - name: id\n        in: path\n        description: The ID or URL-encoded path of the project owned by the authenticated user.\n        required: true\n        schema:\n          oneOf:\n            - type: integer\n            - type: string\n    responses:\n      '401':\n        description: Unauthorized operation\n      '200':\n        description: Successful operation\n        content:\n          application/json:\n            schema:\n              title: ProjectAccessRequest\n              type: object\n              properties:\n                id:\n                  type: integer\n                usename:\n                  type: string\n                name:\n                  type: string\n                state:\n                  type: string\n                created_at:\n                  type: string\n                requested_at:\n                  type: string\n            example:\n              'id': 1\n              'username': 'raymond_smith'\n              'name': 'Raymond Smith'\n              'state': 'active'\n              'created_at': '2012-10-22T14:13:35Z'\n              'requested_at': '2012-10-22T14:13:35Z'\n\n#/v4/projects/{id}/access_requests/{user_id}/approve\naccessRequestsProjectsApprove:\n  put:\n    description: Approves access for the authenticated user to a project\n    summary: Approves access for the authenticated user to a project\n    operationId: accessRequestsProjectsApprove_put\n    tags:\n      - access_requests\n    parameters:\n      - name: id\n        in: path\n        description: The ID or URL-encoded path of the project owned by the authenticated user.\n        required: true\n        schema:\n          oneOf:\n            - type: integer\n            - type: string\n      - name: user_id\n        in: path\n        description: The userID of the access requester\n        required: true\n        schema:\n          type: integer\n      - name: access_level\n        in: query\n        description: A valid project access level.  0 = no access , 10 = guest, 20 = reporter, 30 = developer, 40 = Maintainer.  Default is 30.'\n        required: false\n        schema:\n          enum: [0, 10, 20, 30, 40]\n          default: 30\n          type: integer\n    responses:\n      '401':\n        description: Unauthorized operation\n      '200':\n        description: Successful operation\n        content:\n          application/json:\n            schema:\n              title: ProjectAccessApprove\n              type: object\n              properties:\n                id:\n                  type: integer\n                usename:\n                  type: string\n                name:\n                  type: string\n                state:\n                  type: string\n                created_at:\n                  type: string\n                access_level:\n                  type: integer\n            example:\n              'id': 1\n              'username': 'raymond_smith'\n              'name': 'Raymond Smith'\n              'state': 'active'\n              'created_at': '2012-10-22T14:13:35Z'\n              'access_level': 20\n\n#/v4/projects/{id}/access_requests/{user_id}\naccessRequestsProjectsDeny:\n  delete:\n    description: Denies a project access request for the given user\n    summary: Denies a project access request for the given user\n    operationId: accessRequestProjectsDeny_delete\n    tags:\n      - access_requests\n    parameters:\n      - name: id\n        in: path\n        description: The ID or URL-encoded path of the project owned by the authenticated user.\n        required: true\n        schema:\n          oneOf:\n            - type: integer\n            - type: string\n      - name: user_id\n        in: path\n        description: The user ID of the access requester\n        required: true\n        schema:\n          type: integer\n    responses: # Does anything go here?  Markdown doc does not list a response.\n      '401':\n        description: Unauthorized operation\n      '200':\n        description: Successful operation\n\n#/v4/groups/{id}/access_requests\naccessRequestsGroups:\n  get:\n    description: List access requests for a group\n    summary: List access requests for a group\n    operationId: accessRequestsGroups_get\n    tags:\n      - access_requests\n    parameters:\n      - name: id\n        in: path\n        description: The ID or URL-encoded path of the group owned by the authenticated user.\n        required: true\n        schema:\n          oneOf:\n            - type: integer\n            - type: string\n    responses:\n      '401':\n        description: Unauthorized operation\n      '200':\n        description: Successful operation\n        content:\n          application/json:\n            schema:\n              title: GroupAccessResponse\n              type: object\n              properties:\n                id:\n                  type: integer\n                usename:\n                  type: string\n                name:\n                  type: string\n                state:\n                  type: string\n                created_at:\n                  type: string\n                requested_at:\n                  type: string\n            example:\n              - 'id': 1\n                'username': 'raymond_smith'\n                'name': 'Raymond Smith'\n                'state': 'active'\n                'created_at': '2012-10-22T14:13:35Z'\n                'requested_at': '2012-10-22T14:13:35Z'\n              - 'id': 2\n                'username': 'john_doe'\n                'name': 'John Doe'\n                'state': 'active'\n                'created_at': '2012-10-22T14:13:35Z'\n                'requested_at': '2012-10-22T14:13:35Z'\n  post:\n    description: Requests access for the authenticated user to a group\n    summary: Requests access for the authenticated user to a group\n    operationId: accessRequestsGroups_post\n    tags:\n      - access_requests\n    parameters:\n      - name: id\n        in: path\n        description: The ID or URL-encoded path of the group owned by the authenticated user.\n        required: true\n        schema:\n          oneOf:\n            - type: integer\n            - type: string\n    responses:\n      '401':\n        description: Unauthorized operation\n      '200':\n        description: Successful operation\n        content:\n          application/json:\n            schema:\n              title: GroupAccessRequest\n              type: object\n              properties:\n                id:\n                  type: integer\n                usename:\n                  type: string\n                name:\n                  type: string\n                state:\n                  type: string\n                created_at:\n                  type: string\n                requested_at:\n                  type: string\n            example:\n              'id': 1\n              'username': 'raymond_smith'\n              'name': 'Raymond Smith'\n              'state': 'active'\n              'created_at': '2012-10-22T14:13:35Z'\n              'requested_at': '2012-10-22T14:13:35Z'\n\n#/v4/groups/{id}/access_requests/{user_id}/approve\naccessRequestsGroupsApprove:\n  put:\n    description: Approves access for the authenticated user to a group\n    summary: Approves access for the authenticated user to a group\n    operationId: accessRequestsGroupsApprove_put\n    tags:\n      - access_requests\n    parameters:\n      - name: id\n        in: path\n        description: The ID or URL-encoded path of the group owned by the authenticated user.\n        required: true\n        schema:\n          oneOf:\n            - type: integer\n            - type: string\n      - name: user_id\n        in: path\n        description: The userID of the access requester\n        required: true\n        schema:\n          type: integer\n      - name: access_level\n        in: query\n        description: A valid group access level.  0 = no access , 10 = Guest, 20 = Reporter, 30 = Developer, 40 = Maintainer, 50 = Owner.  Default is 30.\n        required: false\n        schema:\n          enum: [0, 10, 20, 30, 40, 50]\n          default: 30\n          type: integer\n    responses:\n      '401':\n        description: Unauthorized operation\n      '200':\n        description: Successful operation\n        content:\n          application/json:\n            schema:\n              title: GroupAccessApprove\n              type: object\n              properties:\n                id:\n                  type: integer\n                usename:\n                  type: string\n                name:\n                  type: string\n                state:\n                  type: string\n                created_at:\n                  type: string\n                access_level:\n                  type: integer\n            example:\n              'id': 1\n              'username': 'raymond_smith'\n              'name': 'Raymond Smith'\n              'state': 'active'\n              'created_at': '2012-10-22T14:13:35Z'\n              'access_level': 20\n\n#/v4/groups/{id}/access_requests/{user_id}\naccessRequestsGroupsDeny:\n  delete:\n    description: Denies a group access request for the given user\n    summary: Denies a group access request for the given user\n    operationId: accessRequestsGroupsDeny_delete\n    tags:\n      - access_requests\n    parameters:\n      - name: id\n        in: path\n        description: The ID or URL-encoded path of the group owned by the authenticated user.\n        required: true\n        schema:\n          oneOf:\n            - type: integer\n            - type: string\n      - name: user_id\n        in: path\n        description: The userID of the access requester\n        required: true\n        schema:\n          type: integer\n    responses: # Does anything go here?  Markdown doc does not list a response.\n      '401':\n        description: Unauthorized operation\n      '200':\n        description: Successful operation\n#/v4/projects/{id}/access_tokens\naccessTokens:\n  get:\n    description: Lists access tokens for a project\n    summary: List access tokens for a project\n    operationId: accessTokens_get\n    tags:\n      - access_tokens\n    parameters:\n      - name: id\n        in: path\n        description: The ID or URL-encoded path of the project\n        required: true\n        schema:\n          oneOf:\n            - type: integer\n            - type: string\n    responses:\n      '404':\n        description: Not Found\n      '401':\n        description: Unauthorized operation\n      '200':\n        description: Successful operation\n        content:\n          application/json:\n            schema:\n              title: AccessTokenList\n              type: object\n              properties:\n                user_id:\n                  type: integer\n                scopes:\n                  type: array\n                name:\n                  type: string\n                expires_at:\n                  type: date\n                id:\n                  type: integer\n                active:\n                  type: boolean\n                created_at:\n                  type: date\n                revoked:\n                  type: boolean\n            example:\n              'user_id': 141\n              'scopes': ['api']\n              'name': 'token'\n              'expires_at': '2022-01-31'\n              'id': 42\n              'active': true\n              'created_at': '2021-01-20T14:13:35Z'\n              'revoked': false\n  post:\n    description: Creates an access token for a project\n    summary: Creates an access token for a project\n    operationId: accessTokens_post\n    tags:\n      - access_tokens\n    parameters:\n      - name: id\n        in: path\n        description: The ID or URL-encoded path of the project\n        required: true\n        schema:\n          oneOf:\n            - type: integer\n            - type: string\n      - name: name\n        in: query\n        description: The name of the project access token\n        required: true\n        schema:\n          type: string\n      - name: scopes\n        in: query\n        description: Defines read and write permissions for the token\n        required: true\n        schema:\n          type: array\n          items:\n            type: string\n            enum:\n              [\n                'api',\n                'read_api',\n                'read_registry',\n                'write_registry',\n                'read_repository',\n                'write_repository',\n              ]\n      - name: expires_at\n        in: query\n        description: Date when the token expires. Time of day is Midnight UTC of that date.\n        required: false\n        schema:\n          type: date\n    responses:\n      '404':\n        description: Not Found\n      '401':\n        description: Unauthorized operation\n      '200':\n        description: Successful operation\n        content:\n          application/json:\n            schema:\n              title: AccessTokenList\n              type: object\n              properties:\n                user_id:\n                  type: integer\n                scopes:\n                  type: array\n                name:\n                  type: string\n                expires_at:\n                  type: date\n                id:\n                  type: integer\n                active:\n                  type: boolean\n                created_at:\n                  type: date\n                revoked:\n                  type: boolean\n                token:\n                  type: string\n            example:\n              'user_id': 166\n              'scopes': ['api', 'read_repository']\n              'name': 'test'\n              'expires_at': '2022-01-31'\n              'id': 58\n              'active': true\n              'created_at': '2021-01-20T14:13:35Z'\n              'revoked': false\n              'token': 'D4y...Wzr'\n\n#/v4/projects/{id}/access_tokens/{token_id}\naccessTokensRevoke:\n  delete:\n    description: Revokes an access token\n    summary: Revokes an access token\n    operationId: accessTokens_delete\n    tags:\n      - access_tokens\n    parameters:\n      - name: id\n        in: path\n        description: The ID or URL-encoded path of the project\n        required: true\n        schema:\n          oneOf:\n            - type: integer\n            - type: string\n      - name: token_id\n        in: path\n        description: The ID of the project access token\n        required: true\n        schema:\n          oneOf:\n            - type: integer\n            - type: string\n    responses:\n      '400':\n        description: Bad Request\n      '404':\n        description: Not Found\n      '204':\n        description: No content if successfully revoked\n",
			"canonicalURL": "/gitlab.com/rluna-gitlab/gitlab-ce@abbb493d78e42f044d732c7ad46917300cca1516/-/blob/doc/api/openapi/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://gitlab.com/rluna-gitlab/gitlab-ce/blob/abbb493d78e42f044d732c7ad46917300cca1516/doc/api/openapi/openapi.yaml",
					"serviceKind": "GITLAB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/v4/projects/{id}/access_tokens\": get: operation \"accessTokens_get\": responses: 200: content: application/json: schema: parse schema: property \"expires_at\": at doc/api/openapi/openapi.yaml:564:25: type: unexpected schema type: \"date\""
}