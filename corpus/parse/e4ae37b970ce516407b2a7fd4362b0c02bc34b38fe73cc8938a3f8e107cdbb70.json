{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/NCATS-Tangerine/translator-api-registry"
		},
		"file": {
			"name": "smartapi.yaml",
			"size": 0,
			"path": "mydisease.info/smartapi.yaml",
			"byteSize": 46974,
			"content": "openapi: 3.0.3\ninfo:\n  contact:\n    email: help@biothings.io\n    name: Chunlei Wu\n    x-id: https://github.com/newgene\n    x-role: responsible developer\n  description: Documentation of the MyDisease.info disease query web services.  Learn\n    more about [mydisease.info](http://mydisease.info/)\n  termsOfService: http://mydisease.info/terms\n  title: MyDisease.info API\n  version: '1.0'\n  x-translator:\n    infores: \"infores:mydisease-info\"\n    component: KP\n    team:\n      - Service Provider\n    biolink-version: \"2.2.13\"\nservers:\n- description: Production server\n  url: http://mydisease.info/v1\n  x-maturity: production\ntags:\n- name: disease\n- name: annotation\n- name: query\n- name: translator\n- name: biothings\npaths:\n  \"/disease/{id}\":\n    get:\n      parameters:\n      - name: id\n        description: Retrieve disease objects based on ID\n        in: path\n        required: true\n        example: \"MONDO:0000490\"\n        schema:\n          type: string\n      - \"$ref\": \"#/components/parameters/raw\"\n      - \"$ref\": \"#/components/parameters/rawquery\"\n      - \"$ref\": \"#/components/parameters/_source\"\n      - \"$ref\": \"#/components/parameters/size\"\n      - \"$ref\": \"#/components/parameters/dotfield\"\n      - \"$ref\": \"#/components/parameters/_sorted\"\n      - \"$ref\": \"#/components/parameters/always_list\"\n      - \"$ref\": \"#/components/parameters/allow_null\"\n      - \"$ref\": \"#/components/parameters/format\"\n      responses:\n        '200':\n          description: \"Success\"\n      #     content:\n      #       application/json:\n      #         schema:\n      #           $ref: '#/components/schemas/Disease'\n      #   '404':\n      #     description: A response indicating an unknown disease ID\n      # summary: Retrieve disease objects based on ID\n      tags:\n      - disease\n  \"/disease\":\n    post:\n      parameters:\n      - \"$ref\": \"#/components/parameters/raw\"\n      - \"$ref\": \"#/components/parameters/rawquery\"\n      - \"$ref\": \"#/components/parameters/_source\"\n      - \"$ref\": \"#/components/parameters/size\"\n      - \"$ref\": \"#/components/parameters/dotfield\"\n      - \"$ref\": \"#/components/parameters/_sorted\"\n      - \"$ref\": \"#/components/parameters/always_list\"\n      - \"$ref\": \"#/components/parameters/allow_null\"\n      - \"$ref\": \"#/components/parameters/format\"\n      requestBody:\n        content:\n          application/json:\n            example:\n              ids:\n              - \"MONDO:0000490\"\n              - \"MONDO:0019012\"\n            schema:\n              type: object\n              properties:\n                ids:\n                  description: 'multiple disease IDs separated by comma. Note that\n                    currently we only take the input ids up to 1000 maximum, the rest\n                    will be omitted. Type: string (list). Max: 1000.'\n                  type: array\n                  items:\n                    type: string\n      responses:\n        '200':\n          description: \"Success\"\n      tags:\n      - disease\n  \"/metadata\":\n    get:\n      parameters:\n      - \"$ref\": \"#/components/parameters/format\"\n      - \"$ref\": \"#/components/parameters/raw\"\n      - \"$ref\": \"#/components/parameters/dev\"\n      responses:\n        '200':\n          description: Success\n      summary: Get metadata about the data available from the API\n      tags:\n      - metadata\n  \"/metadata/fields\":\n    get:\n      parameters:\n      - \"$ref\": \"#/components/parameters/format\"\n      - \"$ref\": \"#/components/parameters/raw\"\n      - \"$ref\": \"#/components/parameters/search\"\n      - \"$ref\": \"#/components/parameters/prefix\"\n      responses:\n        '200':\n          description: Success\n      summary: Get metadata about the data fields available from a record\n      tags:\n      - metadata\n  \"/query\":\n    get:\n      parameters:\n      - name: q\n        description: 'Query string.  The detailed query syntax can be found from our\n          [docs](http://mydisease.info).  Examples: \"cancer\", \"primary ciliary dyskinesia\",\n          \"DOID:9562\"'\n        in: query\n        required: true\n        example: \"cancer\"\n        schema:\n          type: string\n      - \"$ref\": \"#/components/parameters/aggs\"\n      - \"$ref\": \"#/components/parameters/facet_size\"\n      - \"$ref\": \"#/components/parameters/from\"\n      - \"$ref\": \"#/components/parameters/userquery\"\n      - \"$ref\": \"#/components/parameters/sort\"\n      - \"$ref\": \"#/components/parameters/explain\"\n      - \"$ref\": \"#/components/parameters/fetch_all\"\n      - \"$ref\": \"#/components/parameters/scroll_id\"\n      - \"$ref\": \"#/components/parameters/raw\"\n      - \"$ref\": \"#/components/parameters/rawquery\"\n      - \"$ref\": \"#/components/parameters/_source\"\n      - \"$ref\": \"#/components/parameters/size\"\n      - \"$ref\": \"#/components/parameters/dotfield\"\n      - \"$ref\": \"#/components/parameters/_sorted\"\n      - \"$ref\": \"#/components/parameters/always_list\"\n      - \"$ref\": \"#/components/parameters/allow_null\"\n      - \"$ref\": \"#/components/parameters/format\"\n      responses:\n        '200':\n          description: Success\n      #     content:\n      #       application/json:\n      #         schema:\n      #           \"$ref\": \"#/components/schemas/QueryResult\"\n      #   '400':\n      #     content:\n      #       application/json:\n      #         schema:\n      #           \"$ref\": \"#/components/schemas/ErrorResult\"\n      #     description: A response indicating an improperly formatted query\n      # summary: Make queries and return matching gene hits. Supports JSONP and CORS\n      #   as well.\n      tags:\n      - query\n    post:\n      parameters:\n      - name: q\n        in: query\n        required: false\n        schema:\n          type: array\n          items:\n            type: string\n      - name: scopes\n        in: query\n        required: false\n        schema:\n          type: array\n          items:\n            type: string\n            default:\n            - _id\n      - \"$ref\": \"#/components/parameters/from\"\n      - \"$ref\": \"#/components/parameters/sort\"\n      - \"$ref\": \"#/components/parameters/raw\"\n      - \"$ref\": \"#/components/parameters/rawquery\"\n      - \"$ref\": \"#/components/parameters/_source\"\n      - \"$ref\": \"#/components/parameters/size\"\n      - \"$ref\": \"#/components/parameters/dotfield\"\n      - \"$ref\": \"#/components/parameters/_sorted\"\n      - \"$ref\": \"#/components/parameters/always_list\"\n      - \"$ref\": \"#/components/parameters/allow_null\"\n      - \"$ref\": \"#/components/parameters/format\"\n      requestBody:\n        content:\n          application/json:\n            example:\n              q:\n              - \"MONDO:0000490\"\n              - \"MONDO:0019012\"\n              scopes:\n              - \"mondo.mondo\"\n            schema:\n              type: object\n              properties:\n                q:\n                  description: multiple query terms separated by comma (also \"+\" or\n                    whitespace).  Does not support wildcard queries\n                  type: array\n                  items:\n                    type: string\n                scopes:\n                  description: 'a comma-separated list of fields as the search \"scopes\"\n                    (fields to search through for query term). The available \"fields\"\n                    that can be passed to the \"scopes\" parameter are listed in the\n                    **/metadata/fields** endpoint.string Default: \"scopes=_id\".'\n                  type: array\n                  items:\n                    type: string\n                from:\n                  type: integer\n                sort:\n                  type: array\n                  items:\n                    type: string\n      responses:\n        '200':\n          description: Success\n      #     content:\n      #       application/json:\n      #         schema:\n      #           \"$ref\": \"#/components/schemas/QueryPOSTResult\"\n      #   '400':\n      #     content:\n      #       application/json:\n      #         schema:\n      #           \"$ref\": \"#/components/schemas/ErrorResult\"\n      #     description: A response indicating an improperly formatted query\n      # summary: Make batch gene queries and return matching gene hits\n      tags:\n      - query\n      x-bte-kgs-operations:\n      - \"$ref\": \"#/components/x-bte-kgs-operations/disease-gene\"\n      - \"$ref\": \"#/components/x-bte-kgs-operations/disease-variant\"\n      - \"$ref\": \"#/components/x-bte-kgs-operations/disease-phenotype\"\n      - \"$ref\": \"#/components/x-bte-kgs-operations/disease-phenotype2\"\n      - \"$ref\": \"#/components/x-bte-kgs-operations/disease-chemical\"\n      - \"$ref\": \"#/components/x-bte-kgs-operations/disease-chemical2\"\n      - \"$ref\": \"#/components/x-bte-kgs-operations/gene-disease\"\n      - \"$ref\": \"#/components/x-bte-kgs-operations/variant-disease\"\n      - \"$ref\": \"#/components/x-bte-kgs-operations/phenotype-disease\"\n      - \"$ref\": \"#/components/x-bte-kgs-operations/phenotype-disease2\"\n      - \"$ref\": \"#/components/x-bte-kgs-operations/chemical-disease\"\n      - \"$ref\": \"#/components/x-bte-kgs-operations/chemical-disease2\"\n      - \"$ref\": \"#/components/x-bte-kgs-operations/has_subclass\"\n      - \"$ref\": \"#/components/x-bte-kgs-operations/subclass_of\"\n      - \"$ref\": \"#/components/x-bte-kgs-operations/predisposes_towards\"\n      - \"$ref\": \"#/components/x-bte-kgs-operations/predisposes_towards-rev\"\n      - \"$ref\": \"#/components/x-bte-kgs-operations/disease_shares_features_of\"\n      - \"$ref\": \"#/components/x-bte-kgs-operations/disease_shares_features_of-rev\"\n      - \"$ref\": \"#/components/x-bte-kgs-operations/disease_has_major_feature\"\n      - \"$ref\": \"#/components/x-bte-kgs-operations/disease_has_major_feature-rev\"\n      - \"$ref\": \"#/components/x-bte-kgs-operations/disease_has_feature\"\n      - \"$ref\": \"#/components/x-bte-kgs-operations/disease_has_feature-rev\"\n      - \"$ref\": \"#/components/x-bte-kgs-operations/disease_causes_feature\"\n      - \"$ref\": \"#/components/x-bte-kgs-operations/disease_causes_feature-rev\"\n      - \"$ref\": \"#/components/x-bte-kgs-operations/disease_arises_from_feature\"\n      - \"$ref\": \"#/components/x-bte-kgs-operations/disease_arises_from_feature-rev\"\ncomponents:\n  parameters:\n    _sorted:\n      name: _sorted\n      in: query\n      required: false\n      schema:\n        type: boolean\n        default: true\n    _source:\n      name: _source\n      in: query\n      required: false\n      schema:\n        type: array\n        items:\n          type: string\n    aggs:\n      name: aggs\n      in: query\n      required: false\n      schema:\n        type: array\n        items:\n          type: string\n    allow_null:\n      name: allow_null\n      in: query\n      required: false\n      schema:\n        type: array\n        items:\n          type: string\n    always_list:\n      name: always_list\n      in: query\n      required: false\n      schema:\n        type: array\n        items:\n          type: string\n    dev:\n      name: dev\n      in: query\n      required: false\n      schema:\n        type: boolean\n    dotfield:\n      name: dotfield\n      in: query\n      required: false\n      schema:\n        type: boolean\n    explain:\n      name: explain\n      in: query\n      required: false\n      schema:\n        type: boolean\n    facet_size:\n      name: facet_size\n      in: query\n      required: false\n      schema:\n        type: integer\n        default: 10\n    fetch_all:\n      name: fetch_all\n      in: query\n      required: false\n      schema:\n        type: boolean\n    format:\n      name: format\n      description: 'controls output format of server response, currently supports:\n        \"json\", \"jsonld\", \"html\". Type: string. Default: json.'\n      in: query\n      required: false\n      schema:\n        type: string\n        default: json\n    from:\n      name: from\n      in: query\n      required: false\n      schema:\n        type: integer\n    prefix:\n      name: prefix\n      in: query\n      required: false\n      schema:\n        type: string\n    raw:\n      name: raw\n      in: query\n      required: false\n      schema:\n        type: boolean\n    rawquery:\n      name: rawquery\n      in: query\n      required: false\n      schema:\n        type: boolean\n    scroll_id:\n      name: scroll_id\n      in: query\n      required: false\n      schema:\n        type: string\n    search:\n      name: search\n      in: query\n      required: false\n      schema:\n        type: string\n    size:\n      name: size\n      description: \"default: 10 objects/records in response\"\n      in: query\n      required: false\n      schema:\n        type: integer\n    sort:\n      name: sort\n      in: query\n      required: false\n      schema:\n        type: array\n        items:\n          type: string\n    userquery:\n      name: userquery\n      in: query\n      required: false\n      schema:\n        type: string\n  schemas:\n    Disease:\n      properties:\n        _id:\n          type: string\n      required:\n      - _id\n      type: object\n    ErrorResult:\n      properties:\n        message:\n          type: string\n        success:\n          type: boolean\n      type: object\n    QueryPOSTResult:\n      items:\n        allOf:\n        - \"$ref\": \"#/components/schemas/Disease\"\n        - properties:\n            _score:\n              format: float\n              type: number\n            query:\n              type: string\n          type: object\n      type: array\n    QueryResult:\n      properties:\n        hits:\n          items:\n            \"$ref\": \"#/components/schemas/Disease\"\n          type: array\n        max_score:\n          format: float\n          type: number\n        took:\n          type: integer\n        total:\n          type: integer\n      type: object\n    int64_or_array:\n      oneOf:\n      - items:\n          format: int64\n          type: integer\n        type: array\n      - format: int64\n        type: integer\n    string_or_array:\n      oneOf:\n      - items:\n          type: string\n        type: array\n      - type: string\n  x-bte-response-mapping:\n    ## not including \"name\" field since BTE isn't ingesting / using it to annotate nodes...\n    disease-gene:\n      NCBIGene: disgenet.genes_related_to_disease.gene_id  ## no prefix\n      pubmed: disgenet.genes_related_to_disease.pubmed     ## no prefix\n      source: disgenet.genes_related_to_disease.source\n      ## could remove \"disgenet-\" prefix from the key\n      ##  if the key becomes the TRAPI attribute \"original_attribute_name\"\n      disgenet-DPI: disgenet.genes_related_to_disease.DPI\n      disgenet-DSI: disgenet.genes_related_to_disease.DSI\n      disgenet-EI: disgenet.genes_related_to_disease.EI\n      disgenet-score: disgenet.genes_related_to_disease.score\n    disease-variant:\n      DBSNP: disgenet.variants_related_to_disease.rsid       ## no prefix\n      pubmed: disgenet.variants_related_to_disease.pubmed    ## no prefix\n      source: disgenet.variants_related_to_disease.source\n      ## could remove \"disgenet-\" prefix from the key\n      ##  if the key becomes the TRAPI attribute \"original_attribute_name\"\n      disgenet-DPI: disgenet.variants_related_to_disease.DPI\n      disgenet-DSI: disgenet.variants_related_to_disease.DSI\n      disgenet-EI: disgenet.variants_related_to_disease.EI\n      disgenet-score: disgenet.variants_related_to_disease.score\n    disease-phenotype:\n      HP: hpo.phenotype_related_to_disease.hpo_id             ## HAS PREFIX (HP)\n      ## note: there are 6 reference-related fields (parser created based on ID namespace)\n      pubmed: hpo.phenotype_related_to_disease.pmid_refs                 ## HAS PREFIX (PMID)\n      isbn_refs: hpo.phenotype_related_to_disease.isbn_refs              ## HAS PREFIX (ISBN)\n      website_refs: hpo.phenotype_related_to_disease.website_refs        ## no prefix\n      decipher_refs: hpo.phenotype_related_to_disease.decipher_refs      ## HAS PREFIX (DECIPHER)\n      omim_refs: hpo.phenotype_related_to_disease.omim_refs              ## HAS PREFIX (OMIM)\n      orphanet_refs: hpo.phenotype_related_to_disease.orphanet_refs      ## HAS PREFIX (ORPHANET)\n      ## note: there are 4 frequency-related fields (parser created based on different data types)\n      numeric_freq: hpo.phenotype_related_to_disease.numeric_freq           ## decimal freq\n      hp_freq: hpo.phenotype_related_to_disease.hp_freq                     ## HP ontology freq term\n      freq_numerator: hpo.phenotype_related_to_disease.freq_numerator       ## frequency as a fraction (numerator)\n      freq_denominator: hpo.phenotype_related_to_disease.freq_denominator   ## frequency as a fraction (denominator)\n      ## value of this field is evidence codes (IEA, TAS, PCS)\n      hpoa_evidence_code: hpo.phenotype_related_to_disease.evidence\n      ## supposed to provide context (only present in some records)\n      ## - modifier/onset fields are HP terms w/ prefix\n      ## - sex will be \"male\" or \"female\"\n      \"biolink:clinical_modifier_qualifier\": hpo.phenotype_related_to_disease.modifier\n      \"biolink:onset_qualifier\": hpo.phenotype_related_to_disease.onset\n      \"biolink:sex_qualifier\": hpo.phenotype_related_to_disease.sex\n    disease-chemical:\n      MESH: ctd.chemical_related_to_disease.mesh_chemical_id    ## no prefix\n      # name: ctd.chemical_related_to_disease.chemical_name\n      ## direct_evidence has two values, 'marker/mechanism' or 'therapeutic'\n      ctd_evidence_type: ctd.chemical_related_to_disease.direct_evidence\n      pubmed: ctd.chemical_related_to_disease.pubmed     ## no prefix\n    umls:\n      UMLS: disgenet.xrefs.umls     ## no prefix\n    omim:\n      OMIM: hpo.omim  ## no prefix\n    orphanet:\n      ORPHANET: hpo.orphanet  ## no prefix\n    mondo:  ## added for a bunch of operations\n      MONDO: mondo.mondo  ## HAS PREFIX (MONDO)\n    ctd-mesh-disease:  ## added for chemical-disease operation\n      MESH: ctd.mesh  ## no prefix\n    ctd-omim-disease:  ## added for chemical-disease2 operation\n      OMIM: ctd.omim  ## no prefix\n    has_subclass:\n      MONDO: mondo.children    ## HAS PREFIX (MONDO)\n    subclass_of:\n      MONDO: mondo.parents    ## HAS PREFIX (MONDO)\n    predisposes_towards:\n      MONDO: mondo.predisposes_towards.mondo    ## HAS PREFIX (MONDO)\n    disease_shares_features_of:\n      MONDO: mondo.disease_shares_features_of.mondo    ## HAS PREFIX (MONDO)\n    disease_has_major_feature:\n      MONDO: mondo.disease_has_major_feature.mondo    ## HAS PREFIX (MONDO)\n    disease_has_feature:\n      MONDO: mondo.disease_has_feature.mondo    ## HAS PREFIX (MONDO)\n    disease_causes_feature:\n      MONDO: mondo.disease_causes_feature.mondo    ## HAS PREFIX (MONDO)\n    disease_arises_from_feature:\n      MONDO: mondo.disease_arises_from_feature.mondo    ## HAS PREFIX (MONDO)\n  x-bte-kgs-operations:\n  ## NOTES:\n  ## - there isn't more distinct operations because we can't retrieve subsets of the data under a disease / data_source. \n  ##   for example, https://mydisease.info/v1/query?q=%20disgenet.variants_related_to_disease.source:CLINVAR \n  ##    will NOT restrict the info under the variants_related_to_disease to only records with source == CLINVAR\n  ##   instead, it will retrieve ALL the info for diseases where AT LEAST 1 variants_related_to_disease record exists that matches that restriction\n  ## - the disgenet data files also lack more specific relationship terms...\n    disease-gene:\n    ## 22942 / 27762 disgenet.genes_related_to_disease records have disgenet.xrefs.umls\n      - supportBatch: true\n        inputSeparator: \",\"\n        parameters:\n        ## see https://www.disgenet.org/dbinfo#section44\n        ## not including YearFinal, YearInitial, gene_name \n          fields: \u003e- \n            disgenet.genes_related_to_disease.gene_id,\n            disgenet.genes_related_to_disease.pubmed,\n            disgenet.genes_related_to_disease.source,\n            disgenet.genes_related_to_disease.DPI,\n            disgenet.genes_related_to_disease.DSI,\n            disgenet.genes_related_to_disease.EI,\n            disgenet.genes_related_to_disease.score\n        requestBody:\n          body:\n            q: \"{inputs[0]}\"  ## no prefix\n            scopes: disgenet.xrefs.umls\n          header: application/x-www-form-urlencoded\n        inputs:\n        - id: UMLS\n          semantic: Disease\n        outputs:\n        - id: NCBIGene\n          semantic: Gene\n        ## can't be more specific because we can't restrict (see note above)\n        predicate: condition_associated_with_gene \n        source: \"infores:disgenet\"\n        response_mapping:\n          \"$ref\": \"#/components/x-bte-response-mapping/disease-gene\"\n        # testExamples:\n        #   - qInput: \"UMLS:C0023264\"     ## Leigh Disease\n        #     oneOutput: \"NCBIGene:4694\"  ## NDUFA1\n    disease-variant:\n    ## 11200 / 12605 disgenet.variants_related_to_disease records have disgenet.xrefs.umls\n      - supportBatch: true\n        inputSeparator: \",\"\n        parameters:\n        ## see https://www.disgenet.org/dbinfo#section45\n        ## not including YearFinal, YearInitial, chrom, pos \n          fields: \u003e- \n            disgenet.variants_related_to_disease.rsid,\n            disgenet.variants_related_to_disease.pubmed,\n            disgenet.variants_related_to_disease.source,\n            disgenet.variants_related_to_disease.DPI,\n            disgenet.variants_related_to_disease.DSI,\n            disgenet.variants_related_to_disease.EI,\n            disgenet.variants_related_to_disease.score\n        requestBody:\n          body:\n            q: \"{inputs[0]}\"  ## no prefix\n            scopes: disgenet.xrefs.umls\n          header: application/x-www-form-urlencoded\n        inputs:\n        - id: UMLS\n          semantic: Disease\n        outputs:\n        - id: DBSNP\n          semantic: SequenceVariant\n        ## can't be more specific because we can't restrict (see note above)\n        predicate: related_to\n        source: \"infores:disgenet\"\n        response_mapping:\n          \"$ref\": \"#/components/x-bte-response-mapping/disease-variant\"\n        # testExamples:\n        #   - qInput: \"UMLS:C0023264\"     ## Leigh Disease\n        #     oneOutput: \"DBSNP:rs1161932777\"\n  ## for hpo-annotation-based operations:\n  ## - currently, the mydisease parser for hpo maps the resources' IDs (OMIM or ORPHANET) to MONDO. \n  ##   If two IDs (ex: OMIM:218340 and ORPHANET:1777 for Temtamy syndrome) map to the same MONDO ID, it looks like only the OMIM data was kept.\n  ##   However, then data is missing: in the raw data, those two IDs have different sets of annotated phenotypes...\n  ## - there is DECIPHER-ID-based disease-pheno info that isn't captured by BTE right now.\n  ##   however, this is not much info (~22 diseases) and we don't have mappings from SRI-based ID resolver\n    disease-phenotype:\n      - supportBatch: true\n        inputSeparator: \",\"\n        parameters:\n        ## not including biocuration field\n          fields: \u003e-\n            hpo.phenotype_related_to_disease.hpo_id,\n            hpo.phenotype_related_to_disease.pmid_refs,\n            hpo.phenotype_related_to_disease.isbn_refs,\n            hpo.phenotype_related_to_disease.website_refs,\n            hpo.phenotype_related_to_disease.decipher_refs,\n            hpo.phenotype_related_to_disease.omim_refs,\n            hpo.phenotype_related_to_disease.orphanet_refs,\n            hpo.phenotype_related_to_disease.numeric_freq,\n            hpo.phenotype_related_to_disease.hp_freq,\n            hpo.phenotype_related_to_disease.freq_numerator,\n            hpo.phenotype_related_to_disease.freq_denominator,\n            hpo.phenotype_related_to_disease.evidence,\n            hpo.phenotype_related_to_disease.modifier,\n            hpo.phenotype_related_to_disease.onset,\n            hpo.phenotype_related_to_disease.sex\n        requestBody:\n          body:\n            q: \"{inputs[0]}\"  ## no prefix\n            scopes: hpo.omim\n          header: application/x-www-form-urlencoded\n        inputs:\n        - id: OMIM\n          semantic: Disease\n        outputs:\n        - id: HP\n          semantic: PhenotypicFeature\n        predicate: has_phenotype\n        ## includes annotations with aspect == \"P\"\n        ##   (aspect as \"I\" became hpo.inheritance, \"C\" became hpo.course, \"M\" became hpo.modifier)\n        source: \"infores:hpo-annotations\"\n        response_mapping:\n          \"$ref\": \"#/components/x-bte-response-mapping/disease-phenotype\"\n        # testExamples:\n        #   - qInput: \"OMIM:246900\"     ## Dihydrolipoamide Dehydrogenase Deficiency\n        #     oneOutput: \"HP:0001254\"   ## Lethargy\n    disease-phenotype2:\n      - supportBatch: true\n        inputSeparator: \",\"\n        parameters:\n          fields: \u003e-\n            hpo.phenotype_related_to_disease.hpo_id,\n            hpo.phenotype_related_to_disease.pmid_refs,\n            hpo.phenotype_related_to_disease.isbn_refs,\n            hpo.phenotype_related_to_disease.website_refs,\n            hpo.phenotype_related_to_disease.decipher_refs,\n            hpo.phenotype_related_to_disease.omim_refs,\n            hpo.phenotype_related_to_disease.orphanet_refs,\n            hpo.phenotype_related_to_disease.numeric_freq,\n            hpo.phenotype_related_to_disease.hp_freq,\n            hpo.phenotype_related_to_disease.freq_numerator,\n            hpo.phenotype_related_to_disease.freq_denominator,\n            hpo.phenotype_related_to_disease.evidence,\n            hpo.phenotype_related_to_disease.modifier,\n            hpo.phenotype_related_to_disease.onset,\n            hpo.phenotype_related_to_disease.sex\n        requestBody:\n          body:\n            q: \"{inputs[0]}\"  ## no prefix\n            scopes: hpo.orphanet\n          header: application/x-www-form-urlencoded\n        inputs:\n        - id: ORPHANET\n          semantic: Disease\n        outputs:\n        - id: HP\n          semantic: PhenotypicFeature\n        predicate: has_phenotype\n        source: \"infores:hpo-annotations\"\n        response_mapping:\n          \"$ref\": \"#/components/x-bte-response-mapping/disease-phenotype\"\n        # testExamples:\n        #   - qInput: \"ORPHANET:881\"    ## Turner Syndrome\n        #     oneOutput: \"HP:0000137\"   ## Abnormality of the ovary\n  ## for ctd-based operations:\n  ## - when the mydisease parser maps the resources' IDs to MONDO, are there situations where a MESH and a OMIM ID map to the same MONDO? \n  ##   If so, 1) Is only one of them kept?, \n  ##          2) Do those IDs have different data linked to them? (so data is missing with the current behavior)\n  ##   From what I can tell, CTD does their own entity resolution. \n  ##   If a disease has MESH and OMIM IDs, the raw data has its info under the MESH ID only. The OMIM ID is only used as the main disease ID if there isn't a matching MESH ID\n  ## - we wanted to add CTD direct disease-gene data, operations\n  ## - we removed CTD disease-pathway data because that info is all indirect\n    disease-chemical:\n      - supportBatch: true\n        inputSeparator: \",\"\n        parameters:\n        ## not including: cas_registry_number, source, name\n        ## BTE currently isn't ingesting name correctly\n          fields: \u003e-\n            ctd.chemical_related_to_disease.mesh_chemical_id,\n            ctd.chemical_related_to_disease.direct_evidence,\n            ctd.chemical_related_to_disease.pubmed\n        requestBody:\n          body:\n            q: \"{inputs[0]}\"  ## no prefix\n            scopes: ctd.mesh\n          header: application/x-www-form-urlencoded\n        inputs:\n        - id: MESH\n          semantic: Disease\n        outputs:\n        - id: MESH\n          semantic: SmallMolecule\n          ## note that 3085 / 3253 have cas_registry_number field that can be used as well\n        predicate: related_to\n        ## direct_evidence is kinda like a relation....\n        ##   can have value \"marker/mechanism\" or \"therapeutic\").\n        source: \"infores:ctd\"\n        response_mapping:\n          \"$ref\": \"#/components/x-bte-response-mapping/disease-chemical\"\n        # testExamples:\n        #   - qInput: \"MESH:D009102\"    ## Multiple Organ Failure\n        #     oneOutput: \"MESH:C448659\"   ## Geldanamycin, monohydrochloride\n    disease-chemical2:\n      - supportBatch: true\n        inputSeparator: \",\"\n        parameters:\n          fields: \u003e-\n            ctd.chemical_related_to_disease.mesh_chemical_id,\n            ctd.chemical_related_to_disease.direct_evidence,\n            ctd.chemical_related_to_disease.pubmed\n        requestBody:\n          body:\n            q: \"{inputs[0]}\"  ## no prefix\n            scopes: ctd.omim\n          header: application/x-www-form-urlencoded\n        inputs:\n        - id: OMIM\n          semantic: Disease\n        outputs:\n        - id: MESH\n          semantic: SmallMolecule\n        predicate: related_to\n        source: \"infores:ctd\"\n        response_mapping:\n          \"$ref\": \"#/components/x-bte-response-mapping/disease-chemical\"\n        # testExamples:\n        #   - qInput: \"MESH:D009102\"    ## Multiple Organ Failure\n        #     oneOutput: \"MESH:C448659\"   ## Geldanamycin, monohydrochloride\n##########################################################################\n## with \"reverse\" querying, we will pull up ALL info under the disease, rather than under a specific record...\n##   so we can't retrieve the subset of data for the specific gene / variant / etc's record \n    gene-disease:\n      - supportBatch: true\n        inputSeparator: \",\"\n        parameters:\n          fields: disgenet.xrefs.umls\n          size: 1000  ## note the size limit\n        requestBody:\n          body:\n            q: \"{inputs[0]}\"   ## no prefix\n            scopes: disgenet.genes_related_to_disease.gene_id\n          header: application/x-www-form-urlencoded\n        inputs:\n        - id: NCBIGene\n          semantic: Gene\n        outputs:\n        - id: UMLS\n          semantic: Disease\n        predicate: gene_associated_with_condition\n        source: \"infores:disgenet\"\n        response_mapping:\n          \"$ref\": \"#/components/x-bte-response-mapping/umls\"\n        # testExamples:\n        #   - qInput: \"NCBIGene:1629\"       ## DBT\n        #     oneOutput: \"UMLS:C3658290\"    ## Drug-Induced Acute Liver Injury\n    variant-disease:\n      - supportBatch: true\n        inputSeparator: \",\"\n        parameters:\n          fields: disgenet.xrefs.umls\n          size: 1000  ## note the size limit\n        requestBody:\n          body:\n            q: \"{inputs[0]}\"   ## no prefix\n            scopes: disgenet.variants_related_to_disease.rsid\n          header: application/x-www-form-urlencoded\n        inputs:\n        - id: DBSNP\n          semantic: SequenceVariant\n        outputs:\n        - id: UMLS\n          semantic: Disease\n        predicate: related_to\n        source: \"infores:disgenet\"\n        response_mapping:\n          \"$ref\": \"#/components/x-bte-response-mapping/umls\"\n        # testExamples:\n        #   - qInput: \"DBSNP:rs78655421\"\n        #     oneOutput: \"UMLS:C4021107\"    ## Non-obstructive azoospermia\n    phenotype-disease:\n      - supportBatch: true\n        inputSeparator: \",\"\n        parameters:\n          fields: hpo.omim\n          size: 1000  ## note the size limit\n        requestBody:\n          body:\n            q: \"{inputs[0]}\"   ## HAS PREFIX (HP)\n            scopes: hpo.phenotype_related_to_disease.hpo_id\n          header: application/x-www-form-urlencoded\n        inputs:\n        - id: HP\n          semantic: PhenotypicFeature\n        outputs:\n        - id: OMIM\n          semantic: Disease\n        predicate: phenotype_of\n        source: \"infores:hpo-annotations\"\n        response_mapping:\n          \"$ref\": \"#/components/x-bte-response-mapping/omim\"\n        # testExamples:\n        #   - qInput: \"HP:0000224\"       ## Hypogeusia\n        #     oneOutput: \"OMIM:608720\"   ## Neuropathy, Hereditary Sensory And Autonomic, Adult-onset, With Anosmia\n    phenotype-disease2:\n      - supportBatch: true\n        inputSeparator: \",\"\n        parameters:\n          fields: hpo.orphanet\n          size: 1000  ## note the size limit\n        requestBody:\n          body:\n            q: \"{inputs[0]}\"   ## HAS PREFIX (HP)  \n            scopes: hpo.phenotype_related_to_disease.hpo_id\n          header: application/x-www-form-urlencoded\n        inputs:\n        - id: HP\n          semantic: PhenotypicFeature\n        outputs:\n        - id: ORPHANET\n          semantic: Disease\n        predicate: phenotype_of\n        source: \"infores:hpo-annotations\"\n        response_mapping:\n          \"$ref\": \"#/components/x-bte-response-mapping/orphanet\"\n        # testExamples:\n        #   - qInput: \"HP:0000224\"          ## Hypogeusia\n        #     oneOutput: \"ORPHANET:99857\"   ## Secondary Syringomyelia\n    chemical-disease:\n      - supportBatch: true\n        inputSeparator: \",\"\n        parameters:\n          fields: ctd.mesh\n          size: 1000  ## note the size limit\n        requestBody:\n          body:\n            q: \"{inputs[0]}\"  ## no prefix\n            scopes: ctd.chemical_related_to_disease.mesh_chemical_id\n          header: application/x-www-form-urlencoded\n        inputs:\n        - id: MESH\n          semantic: SmallMolecule\n        outputs:\n        - id: MESH\n          semantic: Disease\n        predicate: related_to\n        source: \"infores:ctd\"\n        response_mapping:\n          \"$ref\": \"#/components/x-bte-response-mapping/ctd-mesh-disease\"\n        # testExamples:\n        #   - qInput: \"MESH:D000655\"      ## Amodiaquine\n        #     oneOutput: \"MESH:D008288\"   ## Malaria (maps to MONDO:0005136)\n    chemical-disease2:\n      - supportBatch: true\n        inputSeparator: \",\"\n        parameters:\n          fields: ctd.omim\n          size: 1000  ## note the size limit\n        requestBody:\n          body:\n            q: \"{inputs[0]}\"    ## no prefix\n            scopes: ctd.chemical_related_to_disease.mesh_chemical_id\n          header: application/x-www-form-urlencoded\n        inputs:\n        - id: MESH\n          semantic: SmallMolecule\n        outputs:\n        - id: OMIM\n          semantic: Disease\n        predicate: related_to\n        source: \"infores:ctd\"\n        response_mapping: \n          \"$ref\": \"#/components/x-bte-response-mapping/ctd-omim-disease\"  \n        # testExamples:\n        #   - qInput: \"MESH:D000655\"     ## Amodiaquine\n        #     oneOutput: \"OMIM:248310\"   ## PLASMODIUM FALCIPARUM BLOOD INFECTION LEVEL (maps to MONDO:0009553)\n############################################################################\n    ## - there's also disease_ontology info (ancestors, children, descendants, parents)\n    ## - there's also mondo info (ancestors, descendants)\n    ## - mondo info we're not including:\n    ##     - do we want to keep or remove parent/children relationships?\n    ##     - part_of_progression_of_disease (only 2 disease-disease relationships)\n    ##     - has_modifier (something is off here, shouldn't be mondo prefix...)\n    ##     - excluded_subClassOf (something is off here, I'm not sure what that means)\n    ##     - disjoint from (this is a negation / NOT relationship)\n    has_subclass:\n      - supportBatch: true\n        inputSeparator: \",\"\n        parameters:\n          fields: mondo.children\n          size: 1000  ## note the size limit\n        requestBody:\n          body:\n            q: \"{inputs[0]}\"  ## HAS PREFIX (MONDO)\n            scopes: mondo.mondo\n          header: application/x-www-form-urlencoded\n        inputs:\n        - id: MONDO\n          semantic: Disease\n        outputs:\n        - id: MONDO\n          semantic: Disease\n        predicate: superclass_of  ## this is the inverse of subclass_of right now\n        ## relation: \"has children\"?\n        source: \"infores:mondo\"\n        response_mapping:\n          \"$ref\": \"#/components/x-bte-response-mapping/has_subclass\"\n        # testExamples:\n        #   - qInput: \"MONDO:0002494\"      ## substance-related disorder\n        #     oneOutput: \"MONDO:0021698\"   ## alcohol-related disorders          \n    subclass_of:\n      - supportBatch: true\n        inputSeparator: \",\"\n        parameters:\n          fields: mondo.parents\n          size: 1000  ## note the size limit\n        requestBody:\n          body:\n            q: \"{inputs[0]}\"   ## HAS PREFIX (MONDO)\n            scopes: mondo.mondo\n          header: application/x-www-form-urlencoded\n        inputs:\n        - id: MONDO\n          semantic: Disease\n        outputs:\n        - id: MONDO\n          semantic: Disease\n        predicate: subclass_of\n        ## relation: \"has parents\"?\n        source: \"infores:mondo\"\n        response_mapping:\n          \"$ref\": \"#/components/x-bte-response-mapping/subclass_of\"\n        # testExamples:\n        #   - qInput: \"MONDO:0002494\"      ## substance-related disorder\n        #     oneOutput: \"MONDO:0002025\"   ## psychiatric disorder\n    predisposes_towards:\n      - supportBatch: true\n        inputSeparator: \",\"\n        parameters:\n          fields: mondo.predisposes_towards.mondo\n          size: 1000  ## note the size limit\n        requestBody:\n          body:\n            q: \"{inputs[0]}\"   ## HAS PREFIX (MONDO)\n            scopes: mondo.mondo\n          header: application/x-www-form-urlencoded\n        inputs:\n        - id: MONDO\n          semantic: Disease\n        outputs:\n        - id: MONDO\n          semantic: Disease\n        predicate: contributes_to  ## maps to \"MONDO:predisposes_towards\"\n        ## could use more specific biolink predicate like predisposes??\n        source: \"infores:mondo\"\n        response_mapping:\n          \"$ref\": \"#/components/x-bte-response-mapping/predisposes_towards\"\n        # testExamples:\n        #   - qInput: \"MONDO:0010940\"      ## inherited susceptibility to asthma\n        #     oneOutput: \"MONDO:0004979\"   ## asthma\n    predisposes_towards-rev:\n      - supportBatch: true\n        inputSeparator: \",\"\n        parameters:\n          fields: mondo.mondo\n          size: 1000  ## note the size limit\n        requestBody:\n          body:\n            q: \"{inputs[0]}\"   ## HAS PREFIX (MONDO)\n            scopes: mondo.predisposes_towards.mondo\n          header: application/x-www-form-urlencoded\n        inputs:\n        - id: MONDO\n          semantic: Disease\n        outputs:\n        - id: MONDO\n          semantic: Disease\n        predicate: contribution_from\n        ## inverse of contributes_to, which is mapped to \"MONDO:predisposes_towards\"\n        ## no relation then...\n        source: \"infores:mondo\"\n        response_mapping:\n          \"$ref\": \"#/components/x-bte-response-mapping/mondo\"\n        # testExamples:\n        #   - qInput: \"MONDO:0004979\"      ## asthma\n        #     oneOutput: \"MONDO:0010940\"   ## inherited susceptibility to asthma\n    disease_shares_features_of:\n      - supportBatch: true\n        inputSeparator: \",\"\n        parameters:\n          fields: mondo.disease_shares_features_of.mondo\n          size: 1000  ## note the size limit\n        requestBody:\n          body:\n            q: \"{inputs[0]}\"   ## HAS PREFIX (MONDO)\n            scopes: mondo.mondo\n          header: application/x-www-form-urlencoded\n        inputs:\n        - id: MONDO\n          semantic: Disease\n        outputs:\n        - id: MONDO\n          semantic: Disease\n        predicate: similar_to  ## could biolink have a more specific predicate?\n        ##   note that relation maps to biolink:related_to right now...\n        source: \"infores:mondo\"\n        response_mapping:\n          \"$ref\": \"#/components/x-bte-response-mapping/disease_shares_features_of\"\n        # testExamples:\n        #   - qInput: \"MONDO:0008711\"      ## Goodman syndrome\n        #     oneOutput: \"MONDO:0019012\"   ## Carpenter syndrome\n    disease_shares_features_of-rev:\n    ## checked and inverse relationship doesn't exist already in the data\n    ##   for example, the record for Carpenter syndrome doesn't have disease_shares_features_of\n      - supportBatch: true\n        inputSeparator: \",\"\n        parameters:\n          fields: mondo.mondo\n          size: 1000  ## note the size limit\n        requestBody:\n          body:\n            q: \"{inputs[0]}\"   ## HAS PREFIX (MONDO)\n            scopes: mondo.disease_shares_features_of.mondo\n          header: application/x-www-form-urlencoded\n        inputs:\n        - id: MONDO\n          semantic: Disease\n        outputs:\n        - id: MONDO\n          semantic: Disease\n        predicate: similar_to  ## could biolink have a more specific predicate?\n        source: \"infores:mondo\"\n        response_mapping:\n          \"$ref\": \"#/components/x-bte-response-mapping/mondo\"\n        # testExamples:\n        #   - qInput: \"MONDO:0019012\"      ## Carpenter syndrome\n        #     oneOutput: \"MONDO:0008711\"   ## Goodman syndrome\n    disease_has_major_feature:\n      - supportBatch: true\n        inputSeparator: \",\"\n        parameters:\n          fields: mondo.disease_has_major_feature.mondo\n          size: 1000  ## note the size limit\n        requestBody:\n          body:\n            q: \"{inputs[0]}\"   ## HAS PREFIX (MONDO)\n            scopes: mondo.mondo\n          header: application/x-www-form-urlencoded\n        inputs:\n        - id: MONDO\n          semantic: Disease\n        outputs:\n        - id: MONDO\n          semantic: Disease\n        predicate: has_part  ## maps to \"MONDO:disease_has_major_feature\"\n        source: \"infores:mondo\"\n        response_mapping:\n          \"$ref\": \"#/components/x-bte-response-mapping/disease_has_major_feature\"\n        # testExamples:\n        #   - qInput: \"MONDO:0015140\"      ## early-onset autosomal dominant Alzheimer disease\n        #     oneOutput: \"MONDO:0001627\"   ## dementia (disease)\n    disease_has_major_feature-rev:\n      - supportBatch: true\n        inputSeparator: \",\"\n        parameters:\n          fields: mondo.mondo\n          size: 1000  ## note the size limit\n        requestBody:\n          body:\n            q: \"{inputs[0]}\"   ## HAS PREFIX (MONDO)\n            scopes: mondo.disease_has_major_feature.mondo\n          header: application/x-www-form-urlencoded\n        inputs:\n        - id: MONDO\n          semantic: Disease\n        outputs:\n        - id: MONDO\n          semantic: Disease\n        predicate: part_of  ## could biolink have a more specific predicate?\n        source: \"infores:mondo\"\n        response_mapping:\n          \"$ref\": \"#/components/x-bte-response-mapping/mondo\"\n        # testExamples:\n        #   - qInput: \"MONDO:0001627\"      ## dementia (disease)\n        #     oneOutput: \"MONDO:0015140\"   ## early-onset autosomal dominant Alzheimer disease\n    disease_has_feature:\n      - supportBatch: true\n        inputSeparator: \",\"\n        parameters:\n          fields: mondo.disease_has_feature.mondo\n          size: 1000  ## note the size limit\n        requestBody:\n          body:\n            q: \"{inputs[0]}\"   ## HAS PREFIX (MONDO)\n            scopes: mondo.mondo\n          header: application/x-www-form-urlencoded\n        inputs:\n        - id: MONDO\n          semantic: Disease\n        outputs:\n        - id: MONDO\n          semantic: Disease\n        predicate: has_part  ## no biolink mapping...\n        source: \"infores:mondo\"\n        response_mapping:\n          \"$ref\": \"#/components/x-bte-response-mapping/disease_has_feature\"\n        # testExamples:\n        #   - qInput: \"MONDO:0005796\"      ## HIV enteropathy\n        #     oneOutput: \"MONDO:0005020\"   ## intestinal disease\n    disease_has_feature-rev:\n      - supportBatch: true\n        inputSeparator: \",\"\n        parameters:\n          fields: mondo.mondo\n          size: 1000  ## note the size limit\n        requestBody:\n          body:\n            q: \"{inputs[0]}\"   ## HAS PREFIX (MONDO)\n            scopes: mondo.disease_has_feature.mondo\n          header: application/x-www-form-urlencoded\n        inputs:\n        - id: MONDO\n          semantic: Disease\n        outputs:\n        - id: MONDO\n          semantic: Disease\n        predicate: part_of\n        source: \"infores:mondo\"\n        response_mapping:\n          \"$ref\": \"#/components/x-bte-response-mapping/mondo\"\n        # testExamples:\n        #   - qInput: \"MONDO:0005020\"      ## intestinal disease\n        #     oneOutput: \"MONDO:0005796\"   ## HIV enteropathy\n    disease_causes_feature:\n      - supportBatch: true\n        inputSeparator: \",\"\n        parameters:\n          fields: mondo.disease_causes_feature.mondo\n          size: 1000  ## note the size limit\n        requestBody:\n          body:\n            q: \"{inputs[0]}\"   ## HAS PREFIX (MONDO)\n            scopes: mondo.mondo\n          header: application/x-www-form-urlencoded\n        inputs:\n        - id: MONDO\n          semantic: Disease\n        outputs:\n        - id: MONDO\n          semantic: Disease\n        predicate: causes  ## maps to \"MONDO:disease_causes_feature\"\n        source: \"infores:mondo\"\n        response_mapping:\n          \"$ref\": \"#/components/x-bte-response-mapping/disease_causes_feature\"\n        # testExamples:\n        #   - qInput: \"MONDO:0000490\"      ## glomerulosclerosis\n        #     oneOutput: \"MONDO:0001106\"   ## kidney failure\n    disease_causes_feature-rev:\n      - supportBatch: true\n        inputSeparator: \",\"\n        parameters:\n          fields: mondo.mondo\n          size: 1000  ## note the size limit\n        requestBody:\n          body:\n            q: \"{inputs[0]}\"   ## HAS PREFIX (MONDO)\n            scopes: mondo.disease_causes_feature.mondo\n          header: application/x-www-form-urlencoded\n        inputs:\n        - id: MONDO\n          semantic: Disease\n        outputs:\n        - id: MONDO\n          semantic: Disease\n        predicate: caused_by\n        source: \"infores:mondo\"\n        response_mapping:\n          \"$ref\": \"#/components/x-bte-response-mapping/mondo\"\n        # testExamples:\n        #   - qInput: \"MONDO:0001106\"      ## kidney failure\n        #     oneOutput: \"MONDO:0000490\"   ## glomerulosclerosis\n    disease_arises_from_feature:\n      - supportBatch: true\n        inputSeparator: \",\"\n        parameters:\n          fields: mondo.disease_arises_from_feature.mondo\n          size: 1000  ## note the size limit\n        requestBody:\n          body:\n            q: \"{inputs[0]}\"   ## HAS PREFIX (MONDO)\n            scopes: mondo.mondo\n          header: application/x-www-form-urlencoded\n        inputs:\n        - id: MONDO\n          semantic: Disease\n        outputs:\n        - id: MONDO\n          semantic: Disease\n        predicate: caused_by\n        source: \"infores:mondo\"\n        response_mapping:\n          \"$ref\": \"#/components/x-bte-response-mapping/disease_arises_from_feature\"\n          # testExamples:\n          #   - qInput: \"MONDO:0009346\"      ## histidinuria due to a renal tubular defect\n          #     oneOutput: \"MONDO:0021568\"   ## renal tubule disease\n    disease_arises_from_feature-rev:\n      - supportBatch: true\n        inputSeparator: \",\"\n        parameters:\n          fields: mondo.mondo\n          size: 1000  ## note the size limit\n        requestBody:\n          body:\n            q: \"{inputs[0]}\"   ## HAS PREFIX (MONDO)\n            scopes: mondo.disease_arises_from_feature.mondo\n          header: application/x-www-form-urlencoded\n        inputs:\n        - id: MONDO\n          semantic: Disease\n        outputs:\n        - id: MONDO\n          semantic: Disease\n        predicate: causes\n        source: \"infores:mondo\"\n        response_mapping:\n          \"$ref\": \"#/components/x-bte-response-mapping/mondo\"\n        # testExamples:\n        #   - qInput: \"MONDO:0021568\"      ## renal tubule disease\n        #     oneOutput: \"MONDO:0009346\"   ## histidinuria due to a renal tubular defect\n",
			"canonicalURL": "/github.com/NCATS-Tangerine/translator-api-registry@6af7db52deaeb5bebcf63fcccbffac9a38ae1df8/-/blob/mydisease.info/smartapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/NCATS-Tangerine/translator-api-registry/blob/6af7db52deaeb5bebcf63fcccbffac9a38ae1df8/mydisease.info/smartapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/query\": post: parameters: parse parameter \"scopes\": schema: parse schema: item: at 1:24161: parse default: expected type \"string\", got \"array\""
}