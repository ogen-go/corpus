{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/APIs-guru/openapi-directory"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "APIs/lgtm.com/v1.0/openapi.yaml",
			"byteSize": 95070,
			"content": "openapi: 3.0.1\nservers:\n  - url: https://lgtm.com/api/v1.0\nx-hasEquivalentPaths: true\ninfo:\n  description: |\n    The REST API for LGTM provides data so that you can customize how you integrate LGTM analysis into your workflow. It includes the following resources:\n      * `/` ([API root](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-API-root))\u0026mdash;get version information or download the specification in OpenAPI format.\n      * `/projects` ([Projects](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Projects))\u0026mdash;list projects, get a summary of the current status for a project, or add new projects.\n      * `/analyses` ([Analyses](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Analyses))\u0026mdash;get a summary of results, download all the alerts, or trigger analysis for a specific commit.\n      * `/codereviews` ([Code reviews](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Code-reviews))\u0026mdash;trigger code review for a patch, and view the results.\n      * `/operations` ([Operations](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Operations))\u0026mdash;get information about long-running tasks, for example, analyses or code reviews that you've requested.\n      * `/snapshots` ([Snapshots](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Snapshots))\u0026mdash;download and upload databases representing a snapshot of a codebase.\n      * `/queryjobs` ([Query jobs](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Query-jobs))\u0026mdash;submit queries to evaluate against existing projects, and download their results.\n      * `/system` ([System](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-System))\u0026mdash;get information on the health or usage of the system.\n\n    For an overview and getting started topics, see [API for LGTM](https://lgtm.com/help/lgtm/api/api-for-lgtm).\n  title: LGTM API specification\n  version: v1.0\n  x-apisguru-categories:\n    - developer_tools\n  x-origin:\n    - format: openapi\n      url: https://lgtm.com/api/v1.0/openapi\n      version: \"3.0\"\n  x-providerName: lgtm.com\ntags:\n  - description: |\n      The `/` endpoints are used to get information about the API:\n        * [Get the API version number](https://lgtm.com/help/lgtm/api/api-v1#opIdgetVersion) for the LGTM server.\n        * [View the API specification](https://lgtm.com/help/lgtm/api/api-v1#opIdgetSpec) in [OpenAPI format](https://github.com/OAI/OpenAPI-Specification).\n    name: API root\n  - description: |\n      The `/projects` endpoints are used to interact with projects:\n        * [List the projects](https://lgtm.com/help/lgtm/api/api-v1#opIdgetProjects) available to the current user.\n        * Get the latest summary for a specific project [by identifier](https://lgtm.com/help/lgtm/api/api-v1#opIdgetProject), \n        or by [URL identifier](https://lgtm.com/help/lgtm/api/api-v1#opIdgetProjectByUrlIdentifier).\n        * LGTM administrators only, [add projects](https://lgtm.com/help/lgtm/api/api-v1#opIdaddProject) to LGTM.\n    name: Projects\n  - description: |\n      Most of the `/analyses` endpoints are used to retrieve the results of analyzing a commit:\n        * [Get the *analysis* identifier and results summary for the latest or a specific commit](https://lgtm.com/help/lgtm/api/api-v1#opIdgetAnalysisForCommit).\n        * [Get the *commit* identifier and results summary for a specific analysis](https://lgtm.com/help/lgtm/api/api-v1#opIdgetAnalysis).\n        * [Download the full results for a specific analysis](https://lgtm.com/help/lgtm/api/api-v1#opIdgetAlerts).\n\n       You can also use this end point to trigger the analysis of a commit that hasn't previously been analyzed.\n       For more information, see [Run analysis of a specific commit](https://lgtm.com/help/lgtm/api/api-v1#opIdrequestAnalysis).\n    name: Analyses\n  - description: |\n      The `/codereviews` endpoint is used to trigger a patch code review and request the results:\n        * [Trigger the review of a patch](https://lgtm.com/help/lgtm/api/api-v1#opIdrequestReview).\n        * [Get the results of a completed code review](https://lgtm.com/help/lgtm/api/api-v1#opIdgetCodeReview).\n    name: Code reviews\n  - description: |\n      The `/operations` endpoint is used to track the progress of long-running tasks,  for example, code review requests. For more information, see [Get operation status](https://lgtm.com/help/lgtm/api/api-v1#opIdgetOperation).\n    name: Operations\n  - description: |\n      The `/snapshots` endpoint is used to download databases, representing a snapshot of the code, to analyze in your IDE.  LGTM administrators can also use it to upload externally-built databases to LGTM.\n    name: Snapshots\n  - description: |\n      The `/system` endpoint is used to retrieve information about the status of the system: \n        * Get the [system health](https://lgtm.com/help/lgtm/api/api-v1#opIdgetHealth).\n        * LGTM administrators only, get the [list of usage metrics](https://lgtm.com/help/lgtm/api/api-v1#opIdgetMetrics).\n        * LGTM administrators only, get the [values of a given metric](https://lgtm.com/help/lgtm/api/api-v1#opIdgetMetric)\n    name: System\n  - description: |\n      The `/queryjobs` endpoint is used to run CodeQL queries on LGTM and check their progress.\n        * [Create a new query job](https://lgtm.com/help/lgtm/api/api-v1#opIdcreateQueryJob).\n        * Get an overview of the [progress of the query job](https://lgtm.com/help/lgtm/api/api-v1#opIdgetQueryJob).\n        * Get a [summary of the results](https://lgtm.com/help/lgtm/api/api-v1#opIdgetQueryJobResultsOverview) for the query job.\n        * Download the [results for a specific project](https://lgtm.com/help/lgtm/api/api-v1#opIdgetQueryJobResultsForProject).\n    name: Query jobs\npaths:\n  /:\n    get:\n      description: Get the version information of this API.\n      operationId: getVersion\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/version\"\n          description: Success. Requested data returned.\n      security:\n        - access-token: []\n      summary: Version information\n      tags:\n        - API root\n      x-auth-mode: UNRESTRICTED\n  \"/analyses/{analysis-id}\":\n    get:\n      description: |\n        Get a summary of the analysis results for a specific analysis identifier.\n\n        To find the analysis identifier for a commit, use the `/analyses/{project-id}/commits/{commit-id}` endpoint. For more information, see [Get analysis summary for a specific commit](https://lgtm.com/help/lgtm/api/api-v1#opIdgetAnalysisForCommit).\n\n        This endpoint reports the commit analyzed and a summary of the results for each language. Alternatively, you can use this identifier to download full details  of all the alerts found by the analysis. For more information, see [Get detailed alert information](https://lgtm.com/help/lgtm/api/api-v1#opIdgetAlerts).\n      operationId: getAnalysis\n      parameters:\n        - description: The analysis identifier.\n          explode: false\n          in: path\n          name: analysis-id\n          required: true\n          schema:\n            maxLength: 40\n            minLength: 40\n            pattern: \"[a-f0-9]+\"\n            type: string\n          style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                analysisExample:\n                  $ref: \"#/components/examples/analysisExample\"\n              schema:\n                $ref: \"#/components/schemas/analysis\"\n          description: Success. Requested data returned.\n      security:\n        - access-token: []\n      summary: Get analysis summary\n      tags:\n        - Analyses\n      x-auth-mode: BINARY\n  \"/analyses/{analysis-id}/alerts\":\n    get:\n      description: |\n        Download all the alerts found by an analysis.\n        Use the `Accept:` request header to specify the output media type as either CSV or [SARIF](https://lgtm.com/help/lgtm/sarif-results-file): \n\n        - `application/sarif+json`: Alerts in SARIF format. If no version is specified the latest supported SARIF version is used.\n        - `application/json`: Alerts in SARIF format (*deprecated*). \n          If no version is specified, [SARIF 2.0.0](http://docs.oasis-open.org/sarif/sarif/v2.0/sarif-v2.0.html) \n          is used for backwards compatibility.\n\n        - `text/csv`: Alerts in CSV format. The `text/csv` media type has two optional parameters:\n           - `charset`: determines the character encoding of the text, by default UTF-8.\n           - `header`: determines whether a header row with column names is `present` or `absent`.\n              The default value for this parameter is `present`.\n              For example, an Accept header with value `text/csv; header=absent` \n              would result in CSV output without a header row.\n            \n\n\n\n        To find the analysis identifier for a commit, use the `/analyses/{project-id}/commits/{commit-id}`  endpoint. For more information, see [Get analysis summary for a specific commit](https://lgtm.com/help/lgtm/api/api-v1#opIdgetAnalysisForCommit). \n      operationId: getAlerts\n      parameters:\n        - description: The analysis identifier.\n          explode: false\n          in: path\n          name: analysis-id\n          required: true\n          schema:\n            type: string\n          style: simple\n        - description: The desired version of the SARIF format. Currently supported versions are `1.0.0`, `2.0.0`, and `2.1.0`.\n          explode: true\n          in: query\n          name: sarif-version\n          required: false\n          schema:\n            type: string\n          style: form\n        - description: Set `true` to include results in files that are excluded from the output by default. This includes results in test code and generated files. For more information, see [File classification](https://lgtm.com/help/lgtm/file-classification).\n          explode: true\n          in: query\n          name: excluded-files\n          required: false\n          schema:\n            default: false\n            type: boolean\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                deprecated: true\n                type: object\n            application/sarif+json:\n              examples: {}\n              schema:\n                type: object\n            text/csv:\n              examples: {}\n              schema:\n                type: string\n          description: Success. Requested data returned.\n      security:\n        - access-token: []\n      summary: Get detailed alert information\n      tags:\n        - Analyses\n      x-auth-mode: BINARY\n  \"/analyses/{project-id}\":\n    post:\n      description: |\n        Trigger the analysis of a specific commit to a project. If a previous attempt to analyze that commit failed, this triggers a fresh analysis.  This is supported for all LGTM projects, regardless of repository type or host. The commit must be available in the main repository, but can be on a branch that isn't tracked by LGTM. For both LGTM.com and LGTM Enterprise, you must include an access token with the `analyses:write` scope.\n\n        When you request the analysis of a commit, the API returns:\n        - `operation-id`: used to track the status of the task using the `/operations` endpoint. For more information, see [Get operation status](https://lgtm.com/help/lgtm/api/api-v1#opIdgetOperation).\n        - `status`: initially pending.\n        - `task-result`: containing information about the progress and results of the analysis.\n      operationId: requestAnalysis\n      parameters:\n        - description: The numeric project identifier.\n          explode: false\n          in: path\n          name: project-id\n          required: true\n          schema:\n            format: int64\n            type: integer\n          style: simple\n        - description: The identifier of the commit to analyze.\n          explode: true\n          in: query\n          name: commit\n          required: true\n          schema:\n            type: string\n          style: form\n        - description: |\n            The language codes of the languages to analyze.\n            For a list of available languages, see [Supported languages](https://lgtm.com/help/lgtm/analysis-faqs#which-languages-are-supported). To specify more than one language, this parameter can be repeated. If no language is specified, all the project's languages will be analyzed.\n          explode: true\n          in: query\n          name: language\n          required: false\n          schema:\n            items:\n              type: string\n            maxItems: 10\n            type: array\n          style: form\n      responses:\n        \"202\":\n          content:\n            application/json:\n              examples:\n                analysisRequestExample:\n                  $ref: \"#/components/examples/analysisRequestExample\"\n              schema:\n                $ref: \"#/components/schemas/operation\"\n          description: Accepted. Analysis triggered. Tracking data returned.\n      security:\n        - access-token: []\n      summary: Run analysis of a specific commit\n      tags:\n        - Analyses\n      x-auth-mode: BINARY\n  \"/analyses/{project-id}/commits/{commit-id}\":\n    get:\n      description: |\n        Get a summary of the analysis results for a specific commit, or the latest commit, to a project. (For projects configured for sparse or upload analysis, only `latest` is supported.) \n\n        This endpoint reports a summary of results for each language, and also the analysis identifier. You can use the analysis identifier to download full details of all the alerts  found by the analysis. For more information, see [Get detailed alert information](https://lgtm.com/help/lgtm/api/api-v1#opIdgetAlerts).\n      operationId: getAnalysisForCommit\n      parameters:\n        - description: The numeric project identifier.\n          explode: false\n          in: path\n          name: project-id\n          required: true\n          schema:\n            format: int64\n            type: integer\n          style: simple\n        - description: The identifier of a specific commit. Alternatively, use `latest` for the most recent analyzed commit.\n          explode: false\n          in: path\n          name: commit-id\n          required: true\n          schema:\n            type: string\n          style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                analysisExample:\n                  $ref: \"#/components/examples/analysisExample\"\n              schema:\n                $ref: \"#/components/schemas/analysis\"\n          description: Success. Data returned.\n      security:\n        - access-token: []\n      summary: Get analysis summary for a specific commit\n      tags:\n        - Analyses\n      x-auth-mode: BINARY\n  \"/codereviews/{project-id}\":\n    post:\n      description: |\n        Trigger the code review of a patch. This is available for projects with Git repositories.\n\n        Your request must include:\n\n          * Identifier for the base commit\n          * Patch generated using `git diff --binary` (see [git diff](https://git-scm.com/docs/git-diff))\n          * Header `Content-Type: application/octet-stream`\n          * For both LGTM.com and LGTM Enterprise, an access token with the `codereviews:write` scope\n\n        Note that if you make a request using Curl, you'll also need to add `--data-binary` to the request to ensure that the patch you supply in the body is sent with newlines unchanged.\n        You can track the progress of the review using the task result URL returned on creation of the task, or by calling the `/operations` endpoint with the operations identifier returned by the request. For more information, see [Get operation status](https://lgtm.com/help/lgtm/api/api-v1#opIdgetOperation). Alternatively, if you supply a callback URL you'll get a post-back automatically on completion of the review.\n\n        When the review is complete, you can access the results using the task result URL.\n      operationId: requestReview\n      parameters:\n        - description: The numeric project identifier.\n          explode: false\n          in: path\n          name: project-id\n          required: true\n          schema:\n            format: int64\n            type: integer\n          style: simple\n        - description: The identifier for the base commit.\n          explode: true\n          in: query\n          name: base\n          required: true\n          schema:\n            type: string\n          style: form\n        - description: Your reference number for the code review.\n          example: integer\n          explode: true\n          in: query\n          name: external-id\n          required: true\n          schema:\n            format: int32\n            type: integer\n          style: form\n        - description: An informative back-link to an external system.\n          explode: true\n          in: query\n          name: review-url\n          required: false\n          schema:\n            type: string\n          style: form\n        - description: |\n            The callback URL for LGTM to post to on completion of the review.\n            When the code review is complete, the API sends an HTTP POST request to the callback URL with the result of the code review in the request body. The code review results in the request body are identical to the results accessed through the [`/codereviews/{review-id}`](https://lgtm.com/help/lgtm/api/api-v1#opIdgetCodeReview) end-point.\n            If you specify a `callback-secret`, the request also includes an `x-lgtm-signature` header with a digital signature of the request's contents.\n          explode: true\n          in: query\n          name: callback-url\n          required: false\n          schema:\n            type: string\n          style: form\n        - description: |\n            The `callback-secret` is used to compute a signature which is included in the `x-lgtm-signature` header of the callback response.\n            The receiver of the callback can check the validity of the response by computing the signature using HMAC-SHA1 and verifying that it matches the `x-lgtm-signature` header value.\n            The HMAC algorithm requires byte sequences as inputs for both the secret and the message. The callback secret string must be converted to bytes using UTF-8 encoding. The response body should ideally be read as a plain byte sequence. Conversion to, for example a JSON object, and back to a byte sequence might change the formatting, and would invalidate the signature.\n          explode: true\n          in: query\n          name: callback-secret\n          required: false\n          schema:\n            type: string\n          style: form\n      requestBody:\n        content:\n          application/octet-stream:\n            examples:\n              patchFile:\n                description: |\n                  The request body must contain a patch file generated using `git diff --binary`, see [git diff](https://git-scm.com/docs/git-diff), for example:\n                  ```text\n                    diff --git a/describe.c b/describe.c\n                    index db827ffaba..510eaf4866 100644\n                    --- a/describe.c\n                    +++ b/describe.c\n                    @@ -132,7 +132,8 @@ void describe(char *arg)\n                        if (n) {\n                          printf(\"%s-g%s\\n\", n-\u003epath,\n                                find(cmit-\u003ekey, abbrev));\n                    -     clear(cmit, SEEN);\n                    +     if (!last_one)\n                    +       clear(cmit, SEEN);\n                          return;\n                        }\n                      }\n                  ```\n                value: The contents of a binary patch file\n            schema:\n              format: binary\n              type: string\n        description: The patch containing the code changes for review.\n        required: true\n      responses:\n        \"202\":\n          content:\n            application/json:\n              examples:\n                requestcode-reviewExample:\n                  $ref: \"#/components/examples/requestcode-reviewExample\"\n              schema:\n                $ref: \"#/components/schemas/operation\"\n          description: Accepted. Code review triggered. Tracking data returned.\n      security:\n        - access-token: []\n      summary: Run code review for a patch\n      tags:\n        - Code reviews\n      x-auth-mode: BINARY\n  \"/codereviews/{review-id}\":\n    get:\n      description: |\n        Get the results of a code review using the review identifier for the task.\n\n        When you request a code review, the response includes a task result URL of the form: `/codereviews/{review-id}`.\n\n        This endpoint reports the results of a complete code review, or the status of a review  that's still in progress.\n      operationId: getCodeReview\n      parameters:\n        - description: The identifier for the review (from the `task-result-url`).\n          explode: false\n          in: path\n          name: review-id\n          required: true\n          schema:\n            type: string\n          style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                code-review:\n                  description: A successful code review with 1 fixed alert.\n                  summary: A successful code review\n                  value:\n                    id: b45e291e7033460949ec986153c5416d22157d3e\n                    languages:\n                      - alerts:\n                          - fixed: 1\n                            new: 0\n                            query:\n                              id: 3717280014\n                              language: javascript\n                              name: Duplicate switch case\n                              pack: com.lgtm/javascript-queries\n                              properties:\n                                id: js/duplicate-switch-case\n                                name: Duplicate switch case\n                                severity: warning\n                                tags:\n                                  - maintainability\n                                  - correctness\n                                  - external/cwe/cwe-561\n                              url: https://lgtm.example.com/rules/3717280014/\n                        fixed: 1\n                        language: javascript\n                        new: 0\n                        status: success\n                        status-message: 1 fixed alert\n                    results-url: https://lgtm.example.com/projects/g/yarnpkg/yarn/rev/pr-b45e291e7033460949ec986153c5416d22157d3e\n                    status: success\n                    status-message: Analysis succeeded\n              schema:\n                items:\n                  $ref: \"#/components/schemas/code-review\"\n                type: array\n          description: Success. Requested data returned.\n      security:\n        - access-token: []\n      summary: Get results of code review\n      tags:\n        - Code reviews\n      x-auth-mode: BINARY\n  \"/issues/{project-id}/{alert-key}\":\n    get:\n      description: |\n        Fetch the alert information for an issue in [SARIF](https://lgtm.com/help/lgtm/sarif-results-file) format.\n      operationId: getIssue\n      parameters:\n        - description: The numeric project identifier.\n          explode: false\n          in: path\n          name: project-id\n          required: true\n          schema:\n            format: int64\n            type: integer\n          style: simple\n        - description: |\n            The alert key is generated by LGTM when it posts an issue `create` webhook request \n             to an external system using the [issue tracker Webhook API](https://lgtm.com/admin/help/issuetracker-webhook-api).\n             This key is an opaque identifier that tracks the alert's location over time. For example, if a file containing the alert\n             is modified, the SARIF data will reflect the updated location of the alert.\n             Note that the key needs to be URL encoded as it may contain characters that are not web-safe.  \n          example: +ja0cf6+84AGgat15W1jooeMfUY=\n          explode: false\n          in: path\n          name: alert-key\n          required: true\n          schema:\n            type: string\n          style: simple\n      responses:\n        \"200\":\n          content:\n            application/sarif+json:\n              examples: {}\n              schema:\n                type: object\n          description: Success. Requested data returned.\n      security:\n        - access-token: []\n      summary: Get detailed alert information for an issue\n      tags:\n        - Issues\n      x-auth-mode: BINARY\n  /openapi:\n    get:\n      description: Get the specification of this API in [OpenAPI](https://github.com/OAI/OpenAPI-Specification) format. This endpoint does not require an access token. This makes it easier for you to use the specification with third-party tools.\n      operationId: getSpec\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                type: object\n          description: Success. Requested data returned.\n      summary: API specification\n      tags:\n        - API root\n      x-auth-mode: UNRESTRICTED\n  \"/operations/{operation-id}\":\n    get:\n      description: |\n        Track progress of a long-running operation using the operations identifier returned when you  created the operation. For example, by triggering the analysis of a commit, or the code review of a patch. For both LGTM.com and LGTM Enterprise, you must include an access token with the `operations:read` scope.\n      operationId: getOperation\n      parameters:\n        - description: The operation identifier returned on creating the task.\n          explode: false\n          in: path\n          name: operation-id\n          required: true\n          schema:\n            format: int64\n            type: integer\n          style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                analysisOperationExample:\n                  $ref: \"#/components/examples/analysisOperationExample\"\n              schema:\n                $ref: \"#/components/schemas/operation\"\n          description: Success. Requested data returned.\n      security:\n        - access-token: []\n      summary: Get operation status\n      tags:\n        - Operations\n      x-auth-mode: BINARY\n  /projects:\n    get:\n      description: |\n        List all the projects the current user has authorization to view. \n\n        A maximum of 100 projects are returned in each response. When further results are available, the response includes the URL you need to request the next page of results.\n\n        Use the optional parameter, `limit`, to change the number of results reported in each response (range of 1\u0026mdash;100). If you supply an invalid value for this  parameter, the default value of 100 is used.\n\n        When more than one page of results is available, each response includes a `nextPageUrl` response parameter. You can use this URL to request the next page of results. The `nextPageUrl` includes an automatically generated `start` parameter, which specifies the projects to return in the next page of results.\n      operationId: getProjects\n      parameters:\n        - description: The maximum number of projects to return in each response (1-100).\n          explode: true\n          in: query\n          name: limit\n          required: false\n          schema:\n            default: 100\n            format: int32\n            maximum: 100\n            minimum: 1\n            type: integer\n          style: form\n        - description: An opaque identifier generated by the API.\n          explode: true\n          in: query\n          name: start\n          required: false\n          schema:\n            type: string\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/project-list\"\n          description: Success. Requested data returned.\n      security:\n        - access-token: []\n      summary: List projects\n      tags:\n        - Projects\n      x-auth-mode: FILTERING\n    post:\n      description: |\n        LGTM administrators can add a new project to LGTM by providing a repository URL. By default, LGTM tries to build and analyze the project in the same way as for projects added through the user interface. If at least one language is successfully analyzed, and the repository doesn't already exist on LGTM, a new project is created. If the project already exists but your API call triggers a successful analysis  of additional languages, LGTM adds those languages to the project.\n\n        You can configure how LGTM processes the project using query parameters to:\n          * Specify the languages to analyze.\n          * Create a new project in [sparse mode](https://help.semmle.com/lgtm-enterprise/user/help/analysis-faqs.html#what-is-sparse-analysis).\n          * Create a new project in [upload mode](https://help.semmle.com/lgtm-enterprise/user/help/analysis-faqs.html#what-is-upload-analysis) to analyze externally-generated databases. Each database represents a snapshot of the codebase. \n          Use this option when you want to upload databases that were generated by the CodeQL CLI (or the QL command-line tools).\n          The version of the command line used to generate the database\n          must be the same version as LGTM Enterprise. \n\n        With any of these options, you can also include an `lgtm.yml` in the body of the request to [customize extraction](https://lgtm.com/help/lgtm/customizing-code-extraction).\n      operationId: addProject\n      parameters:\n        - description: |-\n            The URL of the repository to analyze.\n            LGTM tests this against the [repository providers](https://lgtm.com/admin/help/adding-repository-providers) defined for the system. If it doesn't match any of them, the request fails.\n          explode: true\n          in: query\n          name: repository\n          required: true\n          schema:\n            format: uri\n            type: string\n          style: form\n        - description: |\n            Optional, a [language code](https://lgtm.com/help/lgtm/analysis-faqs#which-languages-are-supported) to specify which language to analyze.\n            To request the analysis of more than one language, specify a query parameter for each language. By default, LGTM tries to analyze all supported languages.\n          explode: true\n          in: query\n          name: language\n          required: false\n          schema:\n            items:\n              type: string\n            type: array\n          style: form\n        - description: |\n            The analysis mode of the new project.\n            When set to `full` all commits of the project are analyzed; when set to `sparse` the latest commit of the project is analyzed periodically; when set to `upload`,  no automatic analysis is performed, instead externally-generated databases should be uploaded.\n            For new projects the default value is `full`. The `mode` parameter cannot be used to change the analysis mode of existing projects. Therefore, for existing projects, it should either be left blank or set to match the analysis mode of the project.\n          explode: true\n          in: query\n          name: mode\n          required: false\n          schema:\n            enum:\n              - full\n              - sparse\n              - upload\n            type: string\n          style: form\n        - description: Required when `mode=upload`, specify the identifier of the commit used to generate the database.\n          explode: true\n          in: query\n          name: commit\n          required: false\n          schema:\n            type: string\n          style: form\n        - description: Optional when `mode=upload`, specify the date and time of the commit used to generate the database; defaults to the current time.\n          explode: true\n          in: query\n          name: date\n          required: false\n          schema:\n            format: date-time\n            type: string\n          style: form\n        - description: |\n            Optional, any [labels](https://lgtm.com/admin/help/defining-worker-labels) required by workers to analyze this project. \n            To specify more than one label, repeat the query parameter.\n          explode: true\n          in: query\n          name: worker-label\n          required: false\n          schema:\n            items:\n              type: string\n            type: array\n          style: form\n      requestBody:\n        content:\n          application/x-yaml:\n            examples:\n              lgtm_yml:\n                description: |\n                  An optional [lgtm.yml project configuration](https://lgtm.com/help/lgtm/lgtm.yml-configuration-file) file to customize the LGTM code analysis and results display for the project.\n                value:\n                  extraction:\n                    java:\n                      index:\n                        build_command: ./build.sh\n            schema:\n              type: string\n        description: An optional [lgtm.yml project configuration](https://lgtm.com/help/lgtm/lgtm.yml-configuration-file) file to customize the LGTM code analysis and results display for the project.\n        required: false\n      responses:\n        \"202\":\n          content:\n            application/json:\n              examples:\n                externalOperationExample:\n                  $ref: \"#/components/examples/externalOperationExample\"\n              schema:\n                $ref: \"#/components/schemas/operation\"\n          description: Accepted. Analysis attempts triggered or upload URLs returned.\n      security:\n        - access-token: []\n      summary: Add a project to LGTM\n      tags:\n        - Projects\n      x-auth-mode: BINARY\n  \"/projects/{project-id}\":\n    delete:\n      description: |\n        Delete a project with a particular numeric project identifier.\n        In addition to access to the project, administrative access to LGTM or the LGTM Enterprise instance is required to delete projects.\n      operationId: deleteProject\n      parameters:\n        - description: The numeric project identifier\n          explode: false\n          in: path\n          name: project-id\n          required: true\n          schema:\n            format: int64\n            minimum: 1\n            type: integer\n          style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/project-details\"\n          description: Success. Details of the deleted project returned.\n      security:\n        - access-token: []\n      summary: Delete project by numeric identifier\n      tags:\n        - Projects\n      x-auth-mode: BINARY\n    get:\n      description: |\n        Get the latest summary for a specific project using the numeric project identifier.\n\n        To find the LGTM identifier for a project, list all projects using the `/projects`  endpoint and look up the project by name. Alternatively, use the `/projects/{provider}/{org}/{name}` endpoint. If you have administration access, the project identifier is also displayed in  the administration page for the project.\n      operationId: getProject\n      parameters:\n        - description: The numeric project identifier\n          explode: false\n          in: path\n          name: project-id\n          required: true\n          schema:\n            format: int64\n            minimum: 1\n            type: integer\n          style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/project-details\"\n          description: Success. Requested data returned.\n      security:\n        - access-token: []\n      summary: Get project by numeric identifier\n      tags:\n        - Projects\n      x-auth-mode: BINARY\n  \"/projects/{project-id}/settings/analysis-configuration\":\n    get:\n      description: Get the latest configuration for a specific project using the numeric project identifier.\n      operationId: getProjectConfig\n      parameters:\n        - description: The numeric project identifier\n          explode: false\n          in: path\n          name: project-id\n          required: true\n          schema:\n            format: int64\n            type: integer\n          style: simple\n        - description: |\n            The type of project configuration to retrieve.\n            If this parameter isn't specified, the request retrieves the effective configuration. That is, the configuration that is actually applied to the project, which may be from:\n            * the repository\n            * the administrator-set, project configuration\n            * the global configuration.\n\n            If you do specify this value, it must be one of:\n\n             * `repository` to retrieve the configuration specified by a YAML file in the repository. A 404 status is returned if there is no repository configuration. \n\n             * `administrator` to retrieve the administrator-set, project configuration. A 404 status is returned if there is no administrator configuration.\n          explode: true\n          in: query\n          name: source\n          required: false\n          schema:\n            enum:\n              - repository\n              - administrator\n            type: string\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/x-yaml:\n              schema:\n                type: object\n          description: Success. Requested data returned.\n        \"400\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Only YAML is supported.\n      security:\n        - access-token: []\n      summary: Get configuration for a project identified by numeric identifier\n      tags:\n        - Projects\n      x-auth-mode: BINARY\n    put:\n      description: Set the administrator configuration for a specific project using the numeric project identifier.\n      operationId: setProjectConfig\n      parameters:\n        - description: The numeric project identifier\n          explode: false\n          in: path\n          name: project-id\n          required: true\n          schema:\n            format: int64\n            type: integer\n          style: simple\n      requestBody:\n        content:\n          application/x-yaml:\n            examples:\n              snapshotPart:\n                $ref: \"#/components/examples/projectConfiguration\"\n            schema:\n              type: string\n        description: |\n          The project configuration to set. Note that this only sets the administrator project configuration. It can be overridden by the repository configuration.\n          In addition to access to the project, administrative access to LGTM or the LGTM Enterprise instance is required to set administrator project configurations.\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/x-yaml:\n              schema:\n                type: object\n          description: Success. The new effective project configuration is returned.\n      security:\n        - access-token: []\n      summary: Set the administrator configuration for a project identified by numeric identifier\n      tags:\n        - Projects\n      x-auth-mode: BINARY\n  \"/projects/{provider}/{org}/{name}\":\n    get:\n      description: |\n        Get the latest summary for a specific project using the project's URL identifier `{provider}/{org}/{name}`.\n\n        To find the URL identifier for a project, view the project overview page in LGTM. The URL identifier follows after `/projects`. For example, for a project with the URL `https://lgtm.example.com/projects/g/apache/commons-io` the URL identifier is `g/apache/commons-io`. In the example, `g` represents the `provider` (repository host), `apache` is the `organization` and `commons-io` is the `name` of the repository.\n      operationId: getProjectByUrlIdentifier\n      parameters:\n        - description: The first part of the URL identifier of a project, which represents the repository host.\n          explode: false\n          in: path\n          name: provider\n          required: true\n          schema:\n            type: string\n          style: simple\n        - description: The second part of the URL identifier of a project, the organization.\n          explode: false\n          in: path\n          name: org\n          required: true\n          schema:\n            type: string\n          style: simple\n        - description: The third part of the URL identifier of a project, the repository name.\n          explode: false\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n          style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/project-details\"\n          description: Success. Requested data returned.\n        \"307\":\n          description: |\n            Redirect. The project has been renamed. Request redirected to numeric identifier for the project.\n      security:\n        - access-token: []\n      summary: Get project by URL identifier\n      tags:\n        - Projects\n      x-auth-mode: BINARY\n  /queryjobs:\n    post:\n      description: |\n        Submit a query to run on one or more projects on LGTM. The query is included in the body of the request.\n      operationId: createQueryJob\n      parameters:\n        - description: |\n            The [language](https://lgtm.com/help/lgtm/analysis-faqs#which-languages-are-supported) you want to analyze.\n          explode: true\n          in: query\n          name: language\n          required: true\n          schema:\n            type: string\n          style: form\n        - description: The identifier of the project to analyze. Either `project-id` or `projects-list` must be specified.\n          explode: true\n          in: query\n          name: project-id\n          required: false\n          schema:\n            items:\n              format: int64\n              type: integer\n            maxItems: 200\n            minItems: 0\n            type: array\n          style: form\n        - description: Name of the list containing the projects to analyze. Either `project-id` or `projects-list` must be specified.\n          explode: true\n          in: query\n          name: projects-list\n          required: false\n          schema:\n            type: string\n          style: form\n      requestBody:\n        content:\n          text/plain:\n            examples:\n              HelloWorld:\n                description: A CodeQL query\n                value: select \"hello\", \"world\"\n            schema:\n              description: The CodeQL query text\n              type: string\n        description: The query to run.\n        required: true\n      responses:\n        \"202\":\n          content:\n            application/json:\n              examples:\n                runqueryExample:\n                  $ref: \"#/components/examples/queryjobsRequestExample\"\n              schema:\n                $ref: \"#/components/schemas/operation\"\n          description: Accepted. Query submitted. Tracking data returned.\n      security:\n        - access-token: []\n      summary: Run a CodeQL query on one or more projects\n      tags:\n        - Query jobs\n      x-auth-mode: BINARY\n  \"/queryjobs/{queryjob-id}\":\n    get:\n      description: |\n        Get the status of a query job using the query job identifier for the task.\n\n        When you create a query job, the response includes a task result URL of the form: `/queryjobs/{queryjob-id}`.\n      operationId: getQueryJob\n      parameters:\n        - description: The identifier of the query job, from the `task-result` given in the response to the initial `POST /queryjobs` request.\n          explode: false\n          in: path\n          name: queryjob-id\n          required: true\n          schema:\n            type: string\n          style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                getqueryjobExample:\n                  $ref: \"#/components/examples/queryjobsResponseExample\"\n              schema:\n                $ref: \"#/components/schemas/queryjob\"\n          description: Success. Requested data returned.\n      security:\n        - access-token: []\n      summary: Get the status of a query job\n      tags:\n        - Query jobs\n      x-auth-mode: BINARY\n  \"/queryjobs/{queryjob-id}/results\":\n    get:\n      description: |\n        This endpoint provides a summary of the results generated by completed query runs for each  project specified in the the POST /queryjobs endpoint.  For completed query jobs, the summary includes:\n\n          * The number of results for successful query runs.\n          * Error information for failed query runs.\n\n        No information is included in the response for any project for which the query  run is still in progress.\n      operationId: getQueryJobResultsOverview\n      parameters:\n        - description: The identifier of the query job, from the `task-result` given in the response to the initial `POST /queryjobs` request.\n          explode: false\n          in: path\n          name: queryjob-id\n          required: true\n          schema:\n            type: string\n          style: simple\n        - description: |\n            An opaque identifier generated by the API used for pagination. \n            This identifier will be included as part of the response for this endpoint whenever more than one page of results is available. \n          explode: true\n          in: query\n          name: start\n          required: false\n          schema:\n            type: string\n          style: form\n        - description: The number of results to return. Useful for pagination.\n          explode: true\n          in: query\n          name: limit\n          required: false\n          schema:\n            default: 100\n            format: int32\n            type: integer\n          style: form\n        - description: Only return a subset of results. Legal values are `w-results`, `wo-results`, `error`.\n          explode: true\n          in: query\n          name: filter\n          required: false\n          schema:\n            type: string\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/queryjob-results-overview\"\n          description: Success. Requested data returned.\n      security:\n        - access-token: []\n      summary: Provide a summary of results for the projects in the query job\n      tags:\n        - Query jobs\n      x-auth-mode: FILTERING\n  \"/queryjobs/{queryjob-id}/results/{project-id}\":\n    get:\n      description: |\n        Fetch the results for a specific project. The endpoint succeeds only if the query was successful,  and returns a `404` error otherwise.  By default, the endpoint provides only results that are within the source tree. To obtain all results, specify the `nofilter` parameter.\n      operationId: getQueryJobResultsForProject\n      parameters:\n        - description: The identifier of the query job, from the `task-result` given in the response to the initial `POST /queryjobs` request.\n          explode: false\n          in: path\n          name: queryjob-id\n          required: true\n          schema:\n            type: string\n          style: simple\n        - description: The identifier for the project.\n          explode: false\n          in: path\n          name: project-id\n          required: true\n          schema:\n            type: string\n          style: simple\n        - description: Start point for the page of results.\n          explode: true\n          in: query\n          name: start\n          required: false\n          schema:\n            format: int32\n            type: integer\n          style: form\n        - description: The maximum number of results to display (less than 100).\n          explode: true\n          in: query\n          name: limit\n          required: false\n          schema:\n            default: 100\n            format: int32\n            type: integer\n          style: form\n        - description: Include results that are not part of the source tree. These results are filtered out by default.\n          explode: true\n          in: query\n          name: nofilter\n          required: false\n          schema:\n            default: false\n            type: boolean\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/queryjob-project-results\"\n          description: \"Success. The result contains three items: column headers, data, and pagination information.\"\n      security:\n        - access-token: []\n      summary: Fetch the results of a query job for a specific project\n      tags:\n        - Query jobs\n      x-auth-mode: BINARY\n  \"/snapshots/uploads/{session-id}\":\n    delete:\n      description: |\n        Aborts the specified upload session and deletes any uploaded parts. After the session is aborted it cannot be restarted.\n        If any part uploads are in progress when the session is aborted, their data may not be deleted. To ensure that uploaded parts are deleted correctly, you should only abort an upload session after all part uploads have completed.\n      operationId: abortUpload\n      parameters:\n        - description: The id of the upload session.\n          explode: false\n          in: path\n          name: session-id\n          required: true\n          schema:\n            type: string\n          style: simple\n      responses:\n        \"202\":\n          content:\n            application/json:\n              examples:\n                abortUploadoperation:\n                  description: A summary of the aborted upload session. Aborted sessions have an analysis status of `failure` in the API response and in LGTM.\n                  summary: An aborted upload session.\n                  value:\n                    commit-id: 04d7a2300feec9bbcc48185e370e3b5d3ae4da9d\n                    id: ec741d71eeb55250ddca33800f0ee06e77ccfd7f\n                    languages:\n                      - language: java\n                        status: failure\n                    log-url: https://lgtm.example.com/projects/g/apache/commons-io/logs/analysis/ec741d71eeb55250ddca33800f0ee06e77ccfd7f\n                    project:\n                      id: 1548859144386\n                      name: apache/commons-io\n                      url: https://lgtm.example.com/projects/g/apache/commons-io\n                      url-identifier: g/apache/commons-io\n                    results-url: https://lgtm.example.com/projects/g/apache/commons-io/analysis/ec741d71eeb55250ddca33800f0ee06e77ccfd7f/files\n              schema:\n                $ref: \"#/components/schemas/operation\"\n          description: Aborted.\n      security:\n        - access-token: []\n      summary: Abort database upload process\n      tags:\n        - Snapshots\n      x-auth-mode: BINARY\n    post:\n      description: |\n        Completes the database upload by closing the upload session, upgrading the database if appropriate, and scheduling analysis of that snapshot of the codebase.\n\n        You can view the analysis progress and access the results using the `task-result-url`.\n      operationId: completeUpload\n      parameters:\n        - description: The id of the upload session.\n          explode: false\n          in: path\n          name: session-id\n          required: true\n          schema:\n            type: string\n          style: simple\n      responses:\n        \"202\":\n          content:\n            application/json:\n              examples:\n                analysisRequestExample:\n                  $ref: \"#/components/examples/analysisRequestExample\"\n              schema:\n                $ref: \"#/components/schemas/operation\"\n          description: Accepted. Analysis triggered. Tracking data returned.\n      security:\n        - access-token: []\n      summary: Complete snapshot upload session\n      tags:\n        - Snapshots\n      x-auth-mode: BINARY\n    put:\n      description: |\n        Upload a database representing a snapshot of a codebase.  The database is sent in one or more parts. Each part is sent in the request body. \n        Use the [`POST /snapshots/{project-id}/{language}`](https://lgtm.com/help/lgtm/api/api-v1#opIdinitSnapshotUpload) endpoint  to start an upload session before uploading a database part. Database parts must have been generated and prepared for upload using the CodeQL CLI or the QL command-line tools. For further information on exporting externally-built databases,  see [Preparing snapshots to upload to LGTM](https://help.semmle.com/wiki/display/SD/Preparing+snapshots+to+upload+to+LGTM).\n\n        Split large databases into multiple parts. Upload the parts by making a separate request for each part.  Don't upload the next part until you've successfully uploaded the previous part.\n\n        If the upload fails you should retry it with the same data.\n      operationId: uploadPart\n      parameters:\n        - description: The id of the upload session.\n          explode: false\n          in: path\n          name: session-id\n          required: true\n          schema:\n            type: string\n          style: simple\n      requestBody:\n        content:\n          application/octet-stream:\n            examples:\n              snapshotPart:\n                $ref: \"#/components/examples/snapshotPart\"\n            schema:\n              format: binary\n              type: string\n          application/zip:\n            examples:\n              snapshotPart:\n                $ref: \"#/components/examples/snapshotPart\"\n            schema:\n              format: binary\n              type: string\n        description: The database or database part to upload.\n        required: true\n      responses:\n        \"204\":\n          description: Success.\n      security:\n        - access-token: []\n      summary: Upload snapshot\n      tags:\n        - Snapshots\n      x-auth-mode: BINARY\n  \"/snapshots/{project-id}/{language}\":\n    get:\n      description: |\n        Download a CodeQL database from LGTM, representing a snapshot of the codebase, to run queries in your IDE.\n\n        This endpoint works for projects that have been successfully analyzed for the language specified in the request.  A successful request redirects you to a URL for downloading a database that represents the code snapshot, as specified in the `Location:` header in the response. Therefore, your HTTP client should be configured to follow redirects. For example, if you are using `curl`, you can add the`-L` flag to the command.\n\n        The database is downloaded as a zip file that can be imported into an IDE equipped with a  CodeQL extension. The extension must be up to date to analyze databases downloaded from LGTM. For more information on running queries locally in your IDE, see [Runnning queries in your IDE](https://lgtm.com/help/lgtm/running-queries-ide). \n      operationId: getSnapshot\n      parameters:\n        - description: The numeric project identifier.\n          explode: false\n          in: path\n          name: project-id\n          required: true\n          schema:\n            format: int64\n            type: integer\n          style: simple\n        - description: The language of the database to download.\n          explode: false\n          in: path\n          name: language\n          required: true\n          schema:\n            type: string\n          style: simple\n      responses:\n        \"303\":\n          description: Redirects to a URL for downloading the CodeQL database as indicated by the `Location:` header.\n          headers:\n            Location:\n              explode: false\n              schema:\n                format: uri\n                type: string\n              style: simple\n      security:\n        - access-token: []\n      summary: Download a snapshot\n      tags:\n        - Snapshots\n      x-auth-mode: BINARY\n    post:\n      description: |\n        Start a session to upload an externally-built database (which represents a snapshot of a codebase) to a project on LGTM. \n\n        This endpoint works for projects that are already on LGTM, and the selected language of  the database must already be configured. The project must be configured with 'upload' analysis mode. You can upload a \"bundled\" CodeQL database or a database exported by  the QL command-line tools (`odasa`).\n\n        If your database was generated using a version of the  command line that is older than LGTM,  LGTM will try to upgrade and analyze it when the upload is complete. You can include cached predicates in the upload, but they are ignored as the cache is  repopulated after the database has been upgraded and analyzed. However, if you want to include results with your database, make sure the database is  compatible before you start the upload session.  Incompatible databases with results won't be upgraded and therefore cannot be uploaded.  For further information on externally-built databases,  see [Preparing snapshots to upload to LGTM using the QL command-line tools](https://help.semmle.com/wiki/display/SD/Preparing+snapshots+to+upload+to+LGTM).\n\n            \n        When the upload session has been successfully started, upload the database to the  upload URL returned in the response. The database can be uploaded to the upload URL in parts using  the [`PUT /snapshots/uploads/{session-id}`](https://lgtm.com/help/lgtm/api/api-v1#opIduploadPart) endpoint. After uploading all the parts you must call  the [`POST /snapshots/uploads/{session-id}`](https://lgtm.com/help/lgtm/api/api-v1#opIdcompleteUpload) endpoint to complete the upload session.\n      operationId: initSnapshotUpload\n      parameters:\n        - description: The numeric project identifier.\n          explode: false\n          in: path\n          name: project-id\n          required: true\n          schema:\n            format: int64\n            type: integer\n          style: simple\n        - description: The language of the database to upload.\n          explode: false\n          in: path\n          name: language\n          required: true\n          schema:\n            type: string\n          style: simple\n        - description: The identifier of the analyzed commit.\n          explode: true\n          in: query\n          name: commit\n          required: true\n          schema:\n            type: string\n          style: form\n        - description: The date and time of the analyzed commit (default the current time).\n          explode: true\n          in: query\n          name: date\n          required: false\n          schema:\n            format: date-time\n            type: string\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/upload-session\"\n          description: Success.\n      security:\n        - access-token: []\n      summary: Start snapshot upload session\n      tags:\n        - Snapshots\n      x-auth-mode: BINARY\n  /system/health:\n    get:\n      description: |\n        Return an indication of whether the application is working as expected (up) or needs  attention (down). \n        \\\u003e The `description` and `details` fields are reported only if the request includes an access token for a user account that has administration rights for this LGTM server.\n      operationId: getHealth\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                healthExample:\n                  $ref: \"#/components/examples/healthExample\"\n              schema:\n                $ref: \"#/components/schemas/health\"\n          description: The application is up.\n        \"503\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/health\"\n          description: The application is down.\n      security:\n        - access-token: []\n      summary: Get a summary of the application's health\n      tags:\n        - System\n      x-auth-mode: BINARY\n  /system/metrics:\n    get:\n      description: |\n        LGTM administrators can use this endpoint to list the usage metrics that are available to download.\n      operationId: getMetrics\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                metricsExample:\n                  $ref: \"#/components/examples/metricsExample\"\n              schema:\n                $ref: \"#/components/schemas/metrics-list\"\n          description: The metric identifiers and descriptions are returned.\n      security:\n        - access-token: []\n      summary: Get the identifiers and descriptions of the usage metrics\n      tags:\n        - System\n      x-auth-mode: BINARY\n  \"/system/metrics/{metric-id}\":\n    get:\n      description: |\n        LGTM administrators can download usage data using this endpoint. The response includes up to 1000 values for the specified metric and reports the date-time that each value was calculated. There is normally one value per day.\n      operationId: getMetric\n      parameters:\n        - description: The identifier of the metric.\n          explode: false\n          in: path\n          name: metric-id\n          required: true\n          schema:\n            type: string\n          style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                metricExample:\n                  $ref: \"#/components/examples/metricExample\"\n              schema:\n                $ref: \"#/components/schemas/metric\"\n          description: Success. Requested data returned.\n      security:\n        - access-token: []\n      summary: Get the computed values of the specified metric\n      tags:\n        - System\n      x-auth-mode: BINARY\ncomponents:\n  examples:\n    analysisExample:\n      description: A summary of the results of analysis. This includes links to the full results in LGTM and also to the log files generated during analysis.\n      summary: A successful analysis\n      value:\n        commit-id: 04d7a2300feec9bbcc48185e370e3b5d3ae4da9d\n        id: 2e65208b2f1872634132566a1a0ce6392407297c\n        languages:\n          - alerts: 139\n            language: java\n            lines: 101498\n            status: success\n          - alerts: 9\n            language: javascript\n            lines: 773\n            status: success\n        log-url: https://lgtm.example.com/projects/g/apache/struts/logs/analysis/2e65208b2f1872634132566a1a0ce6392407297c\n        project:\n          id: 123456789\n          name: Apache Struts\n          url: https://lgtm.example.com/projects/g/apache/struts\n          url-identifier: g/apache/struts\n        results-url: https://lgtm.example.com/projects/g/apache/struts/analysis/2e65208b2f1872634132566a1a0ce6392407297c/files\n    analysisOperationExample:\n      description: Example of the initial response for a request to view the status of an operation. The response includes the task type and a link to the log page for the task.\n      summary: A successfully triggered task\n      value:\n        id: 1548841694385\n        status: pending\n        task-result:\n          languages:\n            - language: cpp\n              status: pending\n            - language: csharp\n              status: pending\n            - language: java\n              status: pending\n            - language: javascript\n              status: pending\n            - language: python\n              status: pending\n          log-url: https://lgtm.com/logs/29a7017f6000333419dbb9829865e5786b91843d\n        task-type: analysis\n    analysisRequestExample:\n      description: An operation entry tracking a running analysis task.\n      summary: A request for an analysis of a commit.\n      value:\n        id: 1508906426111\n        status: pending\n        task-result:\n          commit-id: 559de2c461e94ab636c959149c775bb27111fb48\n          id: 3d5a71d2b87880432aadb8166e79f984b3611fda\n          languages:\n            - language: javascript\n              status: pending\n            - language: java\n              status: pending\n          log-url: https://lgtm.com/projects/g/apache/commons-io/logs/analysis/3d5a71d2b87880432aadb8166e79f984b3611fda\n          project:\n            id: 38901173\n            name: apache/commons-io\n            url: https://lgtm.com/projects/g/apache/commons-io\n            url-identifier: g/apache/commons-io\n          results-url: https://lgtm.com/projects/g/apache/commons-io/analysis/3d5a71d2b87880432aadb8166e79f984b3611fda/files\n        task-result-url: https://lgtm.com/api/v1.0/analyses/3d5a71d2b87880432aadb8166e79f984b3611fda\n        task-type: analysis\n    externalOperationExample:\n      description: Example of the initial response for a task triggered by a request to add a project in `upload` mode for a repository with two languages. This includes the URLs where you should upload the two, externally-generated, databases for the project.\n      summary: A successfully triggered task to add a project in `upload` mode.\n      value:\n        id: 1548865134385\n        status: pending\n        task-result:\n          commit-id: c103e89d2151a9f83a1bab59e112a4bc41a8050d\n          languages:\n            - language: java\n              status: pending\n            - language: javascript\n              status: pending\n          log-url: https://lgtm.example.com/logs/a5cfe527b55cecc91c45dba658775d482177495b\n        task-type: analysis\n        uploads:\n          java:\n            id: 755e8beb6f33c1e7e6a70f8a30dfc0a2d62bbb70e2912e9668a563f21bbcd9fb\n            url: https://lgtm.example.com/api/v1.0/snapshots/uploads/755e8beb6f33c1e7e6a70f8a30dfc0a2d62bbb70e2912e9668a563f21bbcd9fb\n          javascript:\n            id: a8dcd65757901312f53f55d1cde2461a280309683fe99b0b3982f47e8adb9a49\n            url: https://lgtm.example.com/api/v1.0/snapshots/uploads/a8dcd65757901312f53f55d1cde2461a280309683fe99b0b3982f47e8adb9a49\n    healthExample:\n      description: |\n        Example of a response for a system where all the core services are running well. Some of the worker services are not currently available to run tasks because  they are being provisioned or are booting up. The system can run `general` tasks but may not be able to run  `query` tasks that users request through the query console.\n      summary: Response to a request that included an access token with the scope `system:read`.\n      value:\n        details:\n          - database:\n              status: UP\n          - file_storage:\n              status: UP\n          - queue:\n              status: UP\n          - search:\n              status: UP\n          - workers:\n              description: The status of the least healthy worker type is UNKNOWN\n              details:\n                - QUERY:\n                    description: The status of the healthiest of these workers is UNKNOWN\n                    details:\n                      - query-001:\n                          description: BOOTING\n                          status: UNKNOWN\n                    status: UNKNOWN\n                - GENERAL:\n                    description: The status of the healthiest of these workers is UP\n                    details:\n                      - general-001:\n                          description: EXECUTING\n                          status: UP\n                      - general-002:\n                          description: IDLE\n                          status: UP\n                      - general-003:\n                          description: EXECUTING\n                          status: UP\n                      - general-004:\n                          description: UNKNOWN\n                          status: PROVISIONING\n                    status: UP\n              status: UNKNOWN\n        status: UP\n    metricExample:\n      description: A time series of values for the metric.\n      summary: A metric\n      value:\n        measurements:\n          - timestamp: 2019-05-02T12:01:23.000+00:00\n            value: 1357\n          - timestamp: 2019-05-01T11:35:22.000+00:00\n            value: 1234\n        metric-id: active-users\n    metricsExample:\n      description: The list of identifiers (by which the various usage metrics can be referred to in the API), and their corresponding descriptions.\n      summary: A list of metric identifiers and descriptions\n      value:\n        data:\n          - description: Users who have used the LGTM web application in the past 180 days\n            metric-id: active-users\n          - description: Projects with Java analysis\n            metric-id: java-projects\n    projectConfiguration:\n      description: The contents of the LGTM project configuration YAML.\n      summary: An LGTM project configuration.\n      value: |-\n        path_classifiers:\n          test:\n            - test\n    queryjobsRequestExample:\n      description: An operation entry tracking a query job task.\n      summary: Response to a request to run a query.\n      value:\n        id: 1508906426111\n        status: pending\n        task-result:\n          $ref: \"#/components/examples/queryjobsResponseExample\"\n        task-result-url: https://lgtm.com/api/v1.0/queryjobs/987654321\n        task-type: queryjobs\n    queryjobsResponseExample:\n      description: |\n        Example of the response to a request for the status of a running query job. The `stats` section reports the status for each project included in the query job. Use the `result-url` to see the results.\n      summary: Status of a query job.\n      value:\n        id: b45e291e7033460949ec986153c5416d22157d3e\n        result-url: https://lgtm.com/query/b45e291e7033460949ec986153c5416d22157d3e\n        stats:\n          failed: 1\n          pending: 1\n          success-with-result: 3\n          success-without-result: 5\n          successful: 8\n    requestcode-reviewExample:\n      description: A code review request, pending analysis for JavaScript.\n      summary: A code review request.\n      value:\n        id: 1000013\n        status: pending\n        task-result:\n          id: e866b685a22f5d644a3dc1c9c145f56aab7d4350\n          languages:\n            - alerts: []\n              fixed: 0\n              language: javascript\n              new: 0\n              status: pending\n              status-message: Starting up\n          results-url: https://lgtm.com/projects/g/Semmle/code/rev/pr-e866b685a22f5d644a3dc1c9c145f56aab7d4350\n          status: pending\n          status-message: Starting up\n        task-result-url: https://lgtm.com/api/v1.0/codereviews/e866b685a22f5d644a3dc1c9c145f56aab7d4350\n        task-type: codereview\n    snapshotPart:\n      description: |\n        The request body must contain a database part that was generated and prepared for upload to LGTM using the CodeQL CLI or the QL command-line tools.  For more information, see [Preparing snapshots to upload to LGTM](https://help.semmle.com/wiki/display/SD/Preparing+snapshots+to+upload+to+LGTM). \n      value: The name of database file to upload.\n  schemas:\n    analysis:\n      example:\n        commit-id: 04d7a2300feec9bbcc48185e370e3b5d3ae4da9d\n        id: 2e65208b2f1872634132566a1a0ce6392407297c\n        languages:\n          - alerts: 628\n            analysis-date: 2000-01-23T04:56:07.000+00:00\n            commit-date: 2000-01-23T04:56:07.000+00:00\n            commit-id: 04d7a2300feec9bbcc48185e370e3b5d3ae4da9d\n            language: javascript\n            lines: 133298\n            status: success\n          - alerts: 628\n            analysis-date: 2000-01-23T04:56:07.000+00:00\n            commit-date: 2000-01-23T04:56:07.000+00:00\n            commit-id: 04d7a2300feec9bbcc48185e370e3b5d3ae4da9d\n            language: javascript\n            lines: 133298\n            status: success\n        log-url: https://lgtm.example.com/projects/g/yarnpkg/yarn/logs/analysis/2e65208b2f1872634132566a1a0ce6392407297c\n        project:\n          id: 1234567\n          name: Apache Commons IO\n          url: https://lgtm.example.com/projects/g/apache/commons-io\n          url-identifier: g/apache/commons-io\n        results-url: https://lgtm.example.com/projects/g/yarnpkg/yarn/analysis/2e65208b2f1872634132566a1a0ce6392407297c/files\n      properties:\n        commit-id:\n          description: |\n            The commit identifier.\n            The commit identifier is included only if the same commit was successfully analyzed for all languages. A detailed breakdown of which commit was analyzed for each language is provided in the `languages` property.\n          example: 04d7a2300feec9bbcc48185e370e3b5d3ae4da9d\n          type: string\n        id:\n          description: The analysis identifier.\n          example: 2e65208b2f1872634132566a1a0ce6392407297c\n          type: string\n        languages:\n          description: Per-language information.\n          items:\n            $ref: \"#/components/schemas/language-stats\"\n          type: array\n        log-url:\n          description: A page on LGTM to view the logs for this analysis.\n          example: https://lgtm.example.com/projects/g/yarnpkg/yarn/logs/analysis/2e65208b2f1872634132566a1a0ce6392407297c\n          type: string\n        project:\n          $ref: \"#/components/schemas/project\"\n        results-url:\n          description: A page on LGTM to view the results of this analysis.\n          example: https://lgtm.example.com/projects/g/yarnpkg/yarn/analysis/2e65208b2f1872634132566a1a0ce6392407297c/files\n          type: string\n      type: object\n    code-review:\n      example:\n        id: b45e291e7033460949ec986153c5416d22157d3e\n        languages:\n          - alerts:\n              - fixed: 1\n                new: 0\n                query:\n                  name: Incomplete string escaping or encoding\n            fixed: 1\n            language: javascript\n            new: 0\n            status: success\n            status-message: 1 fixed alert\n        results-url: https://lgtm.example.com/projects/g/yarnpkg/yarn/rev/pr-b45e291e7033460949ec986153c5416d22157d3e\n        status: success\n        status-message: Analysis succeeded\n      properties:\n        id:\n          description: The identifier for the review.\n          example: b45e291e7033460949ec986153c5416d22157d3e\n          type: string\n        languages:\n          description: Detailed information for each language analyzed.\n          items:\n            $ref: \"#/components/schemas/codereview_languages\"\n          type: array\n        results-url:\n          description: A page on LGTM to view the status and results of this code review.\n          example: https://lgtm.example.com/projects/g/yarnpkg/yarn/rev/pr-b45e291e7033460949ec986153c5416d22157d3e\n          type: string\n        status:\n          description: The status of the code review.\n          enum:\n            - pending\n            - failure\n            - success\n          example: success\n          type: string\n        status-message:\n          description: A summary of the current status of the code review.\n          example: Analysis succeeded\n          type: string\n      type: object\n    codereview_alerts:\n      properties:\n        fixed:\n          description: The number of alerts fixed by the patch for this query.\n          example: 1\n          format: int32\n          type: integer\n        new:\n          description: The number of alerts introduced by the patch for this query.\n          example: 0\n          format: int32\n          type: integer\n        query:\n          $ref: \"#/components/schemas/query\"\n      type: object\n    codereview_languages:\n      properties:\n        alerts:\n          description: The list of added and fixed alerts per query for this language.\n          items:\n            $ref: \"#/components/schemas/codereview_alerts\"\n          type: array\n        fixed:\n          description: The total number of alerts fixed by the patch for this language.\n          example: 1\n          format: int32\n          type: integer\n        language:\n          description: The language analyzed.\n          example: javascript\n          type: string\n        new:\n          description: The total number of alerts introduced by the patch for this language.\n          example: 0\n          format: int32\n          type: integer\n        status:\n          description: The status for analysis of this language.\n          enum:\n            - pending\n            - failure\n            - success\n          example: success\n          type: string\n        status-message:\n          description: The current state of analysis of this langauge. When available, a summary of analysis results.\n          example: 1 fixed alert\n          type: string\n      type: object\n    health:\n      example:\n        description: description\n        details: {}\n        status: UP\n      properties:\n        description:\n          description: A description of the status of the service.\n          type: string\n        details:\n          additionalProperties:\n            $ref: \"#/components/schemas/health\"\n          description: Details of the health of the service. This contains information about the status of the components on which the service depends.\n          type: object\n        status:\n          description: The status of the service.\n          enum:\n            - UNKNOWN\n            - UP\n            - DOWN\n          example: UP\n          type: string\n      type: object\n    language-stats:\n      example:\n        alerts: 628\n        analysis-date: 2000-01-23T04:56:07.000+00:00\n        commit-date: 2000-01-23T04:56:07.000+00:00\n        commit-id: 04d7a2300feec9bbcc48185e370e3b5d3ae4da9d\n        language: javascript\n        lines: 133298\n        status: success\n      properties:\n        alerts:\n          description: The number of alerts for this language.\n          example: 628\n          format: int32\n          type: integer\n        analysis-date:\n          description: The time the commit was analyzed.\n          format: date-time\n          type: string\n        commit-date:\n          description: The time of the commit.\n          format: date-time\n          type: string\n        commit-id:\n          description: The latest successfully analyzed commit for the language. All statistics refer to this commit.\n          example: 04d7a2300feec9bbcc48185e370e3b5d3ae4da9d\n          type: string\n        language:\n          description: The short name for the language.\n          example: javascript\n          type: string\n        lines:\n          description: The number of lines of code for this language.\n          example: 133298\n          format: int32\n          type: integer\n        status:\n          description: The status of the analysis of this language.\n          enum:\n            - success\n            - failure\n            - pending\n          example: success\n          type: string\n      type: object\n    measurement:\n      example:\n        timestamp: 2000-01-23T04:56:07.000+00:00\n        value: 0.8008281904610115\n      properties:\n        timestamp:\n          description: The date and time when this metric was computed.\n          format: date-time\n          type: string\n        value:\n          description: The value of this metric at the timestamp reported.\n          type: number\n      type: object\n    metric:\n      example:\n        measurements:\n          - timestamp: 2000-01-23T04:56:07.000+00:00\n            value: 0.8008281904610115\n          - timestamp: 2000-01-23T04:56:07.000+00:00\n            value: 0.8008281904610115\n        metric-id: metric-id\n      properties:\n        measurements:\n          description: A time series of values taken by the metric at different timestamps.\n          items:\n            $ref: \"#/components/schemas/measurement\"\n          type: array\n        metric-id:\n          description: The identifier by which this metric is referenced in the API.\n          type: string\n      type: object\n    metric-name:\n      example:\n        description: description\n        metric-id: metric-id\n      properties:\n        description:\n          description: The name by which the metric is listed in the user interface.\n          type: string\n        metric-id:\n          description: The identifier by which this metric is referenced in the API.\n          type: string\n      type: object\n    metrics-list:\n      example:\n        data:\n          - description: description\n            metric-id: metric-id\n          - description: description\n            metric-id: metric-id\n      properties:\n        data:\n          description: The list of names and identifiers by which the metrics are referenced.\n          items:\n            $ref: \"#/components/schemas/metric-name\"\n          type: array\n      type: object\n    operation:\n      example:\n        id: 7654321\n        status: pending\n        task-result: \"\"\n        task-result-url: https://lgtm.example.com/api/v1.0/codereviews/b45e291e7033460949ec986153c5416d22157d3e\n        task-type: analysis\n        uploads:\n          key:\n            id: 0bc9f13977e364395e8527515da9cbfa0e741cb035fe571197e82e0dd549416d\n            url: https://lgtm.example.com/api/v1.0/snapshots/uploads/0bc9f13977e364395e8527515da9cbfa0e741cb035fe571197e82e0dd549416d\n      properties:\n        id:\n          description: The identifier for the operation.\n          example: 7654321\n          format: int64\n          type: integer\n        status:\n          description: Status of the operation.\n          enum:\n            - pending\n            - done\n          example: pending\n          type: string\n        task-result:\n          oneOf:\n            - $ref: \"#/components/schemas/analysis\"\n            - $ref: \"#/components/schemas/code-review\"\n            - $ref: \"#/components/schemas/queryjob\"\n        task-result-url:\n          description: The URL for the result of the task. For some operations, included only on completion.\n          example: https://lgtm.example.com/api/v1.0/codereviews/b45e291e7033460949ec986153c5416d22157d3e\n          type: string\n        task-type:\n          enum:\n            - analysis\n            - codereview\n            - queryjob\n          type: string\n        uploads:\n          additionalProperties:\n            $ref: \"#/components/schemas/upload-session\"\n          type: object\n      required:\n        - task-type\n      type: object\n    project:\n      example:\n        id: 1234567\n        name: Apache Commons IO\n        url: https://lgtm.example.com/projects/g/apache/commons-io\n        url-identifier: g/apache/commons-io\n      properties:\n        id:\n          description: The numeric identifier of the project.\n          example: 1234567\n          format: int64\n          type: integer\n        name:\n          description: The display name of the project.\n          example: Apache Commons IO\n          type: string\n        url:\n          description: The full URL of the project on LGTM.\n          example: https://lgtm.example.com/projects/g/apache/commons-io\n          type: string\n        url-identifier:\n          description: The URL identifier of the project.\n          example: g/apache/commons-io\n          type: string\n      type: object\n    project-details:\n      allOf:\n        - $ref: \"#/components/schemas/project\"\n        - properties:\n            languages:\n              description: Per-language information.\n              items:\n                $ref: \"#/components/schemas/project-language-stats\"\n              type: array\n          type: object\n    project-language-stats:\n      allOf:\n        - $ref: \"#/components/schemas/language-stats\"\n        - properties:\n            grade:\n              description: The grade of the code for this language.\n              enum:\n                - A+\n                - A\n                - B\n                - C\n                - D\n                - E\n              example: A+\n              type: string\n          type: object\n    project-list:\n      example:\n        data:\n          - id: 1234567\n            name: Apache Commons IO\n            url: https://lgtm.example.com/projects/g/apache/commons-io\n            url-identifier: g/apache/commons-io\n          - id: 1234567\n            name: Apache Commons IO\n            url: https://lgtm.example.com/projects/g/apache/commons-io\n            url-identifier: g/apache/commons-io\n        nextPageUrl: https://lgtm.example.com/api/v1.0/projects?start=AVAIySnWtmGBpZjIb27kbrqB2uK2HIU0Zk9Sfh19ya8nxzA4GE5bv9LxVPSjQCwHKThqAADNvp17WuWBuBe8901G-ryeA2tLD6JZh8lue2IM0EuqsqB9Wk5BAM6T0lEnXA\n      properties:\n        data:\n          description: A single page of projects.\n          items:\n            $ref: \"#/components/schemas/project\"\n          type: array\n        nextPageUrl:\n          description: The URL to retrieve the next page of projects. Omitted if there is no next page.\n          example: https://lgtm.example.com/api/v1.0/projects?start=AVAIySnWtmGBpZjIb27kbrqB2uK2HIU0Zk9Sfh19ya8nxzA4GE5bv9LxVPSjQCwHKThqAADNvp17WuWBuBe8901G-ryeA2tLD6JZh8lue2IM0EuqsqB9Wk5BAM6T0lEnXA\n          type: string\n      type: object\n    query:\n      properties:\n        id:\n          description: The numeric identifier of the query.\n          example: 10000\n          format: int64\n          type: integer\n        language:\n          description: The [language code](https://lgtm.com/help/lgtm/analysis-faqs#which-languages-are-supported) of the query.\n          example: javascript\n          type: string\n        name:\n          deprecated: true\n          description: The `@name` of the query.\n          example: Incomplete string escaping or encoding\n          type: string\n        pack:\n          description: The name of the query pack that contains the query.\n          example: com.lgtm/javascript-queries\n          type: string\n        properties:\n          $ref: \"#/components/schemas/query_properties\"\n        url:\n          description: A page on LGTM to view the details of the query.\n          example: https://lgtm.example.com/rules/1000774/\n          type: string\n      type: object\n    query-result-entry:\n      properties:\n        file:\n          type: string\n        line:\n          format: int32\n          type: integer\n        url:\n          format: uri\n          type: string\n        value:\n          type: string\n      type: object\n    query_properties:\n      properties:\n        id:\n          description: The `@id` of the query.\n          example: js/incomplete-sanitization\n          type: string\n        name:\n          description: The `@name` of the query.\n          example: Incomplete string escaping or encoding\n          type: string\n        severity:\n          description: The severity of the query.\n          example: warning\n          type: string\n        tags:\n          description: The `@tags` associated with the query.\n          example:\n            - correctness\n            - security\n            - external/cwe/cwe-116\n          items:\n            type: string\n          type: array\n      type: object\n    queryjob:\n      example:\n        id: b45e291e7033460949ec986153c5416d22157d3e\n        result-url: https://lgtm.com/api/v1.0/query/b45e291e7033460949ec986153c5416d22157d3e\n        stats:\n          failed: 1\n          pending: 1\n          success-with-result: 3\n          success-without-result: 5\n          successful: 8\n      properties:\n        id:\n          description: The identifier for the QueryJob.\n          example: b45e291e7033460949ec986153c5416d22157d3e\n          type: string\n        result-url:\n          description: URL to view the result of the query job.\n          example: https://lgtm.com/api/v1.0/query/b45e291e7033460949ec986153c5416d22157d3e\n          type: string\n        stats:\n          $ref: \"#/components/schemas/queryjob_stats\"\n      type: object\n    queryjob-project-results:\n      example:\n        columns:\n          - Column A\n          - Column B\n        data:\n          - - file: /path/to/file.txt\n              line: 100\n              url: https://lgtm.example.com/projects/g/apache/commons-io/snapshot/271554d09bb63cb546aa5151916588c320533395/files/path/to/file.txt#L100\n              value: Alert 1\n            - value: Value B\n        next: https://lgtm.example.com/api/v1.0/queryjobs/results/1234567?start=AXBe\u0026limit=100\n        project:\n          id: 1234567\n          name: Apache Commons IO\n          url: https://lgtm.example.com/projects/g/apache/commons-io\n          url-identifier: g/apache/commons-io\n      properties:\n        columns:\n          description: Columns returned by the query.\n          items:\n            type: string\n          type: array\n        data:\n          description: Results of the query divided by row.\n          items:\n            items:\n              $ref: \"#/components/schemas/query-result-entry\"\n            type: array\n          type: array\n        next:\n          description: URL for retrieving the next part of the results (if applicable).\n          type: string\n        project:\n          $ref: \"#/components/schemas/project\"\n      type: object\n    queryjob-results-overview:\n      example:\n        data:\n          - project:\n              id: 1234567\n              name: Apache Commons IO\n              url: https://lgtm.example.com/projects/g/apache/commons-io\n              url-identifier: g/apache/commons-io\n            results: 10\n            status: success\n          - error: Generic Error\n            project:\n              id: 42530\n              name: Apache Maven\n              url: https://lgtm.example.com/projects/g/apache/maven\n              url-identifier: g/apache/maven\n            status: error\n        next: https://lgtm.example.com/api/v1.0/queryjobs/2123/results?start=AXBe\n      properties:\n        data:\n          items:\n            $ref: \"#/components/schemas/queryjob-results-overview-entry\"\n          type: array\n        next:\n          type: string\n      type: object\n    queryjob-results-overview-entry:\n      properties:\n        error:\n          description: Error message. Only applies if `status` is `error`.\n          type: string\n        external:\n          description: Number of results that refer to elements outside the source tree (e.g., libraries). Only applies if `status` is `success`.\n          example: 10\n          format: int32\n          type: integer\n        internal:\n          description: Number of results that refer to elements within the source tree. Only applies if `status` is `success`.\n          example: 1\n          format: int32\n          type: integer\n        project:\n          $ref: \"#/components/schemas/project\"\n        status:\n          description: Describes whether the query was sucessfully executed against the project.\n          enum:\n            - success\n            - error\n          example: success\n          type: string\n        total:\n          description: |\n            Number of results returned by the query. This is broken down further into `internal` and `external` results. Only applies if `status` is `success`.\n          example: 11\n          format: int32\n          type: integer\n      type: object\n    queryjob_stats:\n      example:\n        failed: 1\n        pending: 1\n        success-with-result: 3\n        success-without-result: 5\n        successful: 8\n      properties:\n        failed:\n          description: The number of projects for which the query failed.\n          example: 1\n          format: int32\n          type: integer\n        pending:\n          description: |\n            The number of projects scheduled for execution but pending. For very large jobs, not all projects are scheduled at the same time. Therefore, this number might increase as more projects are scheduled. This means that `successful + failed + pending` might be smaller than the total number of project that will be analyzed.\n          example: 1\n          format: int32\n          type: integer\n        success-with-result:\n          description: The number of projects for which the query returned results.\n          example: 3\n          format: int32\n          type: integer\n        success-without-result:\n          description: The number of projects for which the query was successful but returned no results.\n          example: 5\n          format: int32\n          type: integer\n        successful:\n          description: |\n            The number of projects for which the query completed succesfully. These are broken down further between the ones that have results (`success-with-result`) and the ones that do not (`success-without-result`): `successful = success-with-result + success-without-result`.\n          example: 8\n          format: int32\n          type: integer\n      type: object\n    upload-session:\n      example:\n        id: 0bc9f13977e364395e8527515da9cbfa0e741cb035fe571197e82e0dd549416d\n        url: https://lgtm.example.com/api/v1.0/snapshots/uploads/0bc9f13977e364395e8527515da9cbfa0e741cb035fe571197e82e0dd549416d\n      properties:\n        id:\n          description: The identifier of the upload session\n          example: 0bc9f13977e364395e8527515da9cbfa0e741cb035fe571197e82e0dd549416d\n          type: string\n        url:\n          description: The URL for uploading file content.\n          example: https://lgtm.example.com/api/v1.0/snapshots/uploads/0bc9f13977e364395e8527515da9cbfa0e741cb035fe571197e82e0dd549416d\n          format: uri\n          type: string\n      type: object\n    version:\n      example:\n        apiVersion: \"1.0\"\n      properties:\n        apiVersion:\n          description: The version number of the API.\n          example: \"1.0\"\n          type: string\n      type: object\n  securitySchemes:\n    access-token:\n      description: |\n        \n\n        LGTM Enterprise users need to create and use an access token to authenticate with this API. This is optional for LGTM.com users unless they want to submit a CodeQL query for analysis of one or more projects, or to request the analysis of a patch or commit. LGTM.com users also need an access token to  check on the progress of long running tasks using the `/operations` endpoint.\n        Log in to LGTM and use the **Create token** option in your Account settings page. For more detailed information, see [Authentication with the API](https://lgtm.com/help/lgtm/api/authentication-api) and [Managing access tokens](https://lgtm.com/help/lgtm/api/managing-access-tokens).\n        If you include an access token in the header of a request to the API  for data, it must have the scopes required by that endpoint. Access tokens are shown in the examples as: `Authorization: Bearer {access-token}`\n      scheme: bearer\n      type: http\n",
			"canonicalURL": "/github.com/APIs-guru/openapi-directory@3237843a76543b0ee2c1e5f65e28ec6b526e8700/-/blob/APIs/lgtm.com/v1.0/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/APIs-guru/openapi-directory/blob/3237843a76543b0ee2c1e5f65e28ec6b526e8700/APIs/lgtm.com/v1.0/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/codereviews/{project-id}\": at 1:36399: duplicate path: \"/codereviews/{project-id}\""
}