{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Tierion/boltwall"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi.yaml",
			"byteSize": 14356,
			"content": "openapi: 3.0.2\ninfo:\n  title: Boltwall API\n  description:\n    API Documentation for Boltwall - A middleware to enable self-sovereign\n    paywalls for the new internet\n  contact:\n    email: buck@tierion.com\n  license:\n    name: MIT\n    url: https://opensource.org/licenses/MIT\n  version: 2.0.0-beta-oas3\nexternalDocs:\n  url: https://tierion.github.io/boltwall/\nservers:\n  - url: https://tierion-boltwall.tierion.now.sh/\npaths:\n  /api/node:\n    get:\n      summary: get information about the node\n      description: |\n        Get information about the lightning node that is receiving payments. This is useful to get p2p level information, e.g. to create a direct channel with the node.\n      operationId: getNodeInfo\n      responses:\n        \"200\":\n          description: Useful information about the node.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NodeInfo\"\n  /api/token:\n    post:\n      summary: post a request for a new \"token\" to satisfy a challenge caveat\n      description: |\n        Given a macaroon sent in request body, have boltwall sign challenge embedded\n        in the macaroon as a caveat and send back an updated macaroon with challenge\n        signature added as a new caveat. This is only enabled if boltwall is run with `oauth`\n        set to \"true\" in the boltwall config.\n      operationId: satisfyTokenChallenge\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                macaroon: \n                  type: string\n                  description: serialized LSAT macaroon with challenge caveat to be signed\n                  example: 'MDAyM2xvY2F0aW9uIGh0dHA6Ly9sb2NhbGhvc3Q6NDMwMAowMDk0aWRlbnRpZmllciAwMDAwMDk1ZTkxMGNjYmUyNTNmMTg0MzAxZGNiMmVhNGU0YThiZmY4MTNlODhjZGM0MmFjNDYyYmRhYzEzYjJhZDIyMTNjMjM5OGEzNTc2YTliZTEyZjBiY2Y0YTkxZDAxMWExOTkyOWVkYTAyYzAzYWQzZDg5Zjk3NGJkZmMyMzM4OTkKMDA5N2NpZCBjaGFsbGVuZ2U9MGM3MWNmOGQxOTNiZWZjZWU1NzEwZmZhNjg0YTM2M2Q0ZWQ2N2U4N2U2Y2FiNzlhNjM1NGQxNDBiNDI4NTU2ZDowMzI5Nzg3NTJkNTJlZTQ4MWU2MjZiYjI0YTRlZGFlMTExNDJhZjdlYTI1ZTIzMzdjZTllYTc4NmU3ZGJjOTUzMTY6CjAwMmZzaWduYXR1cmUgXpTljRbZvhUCHHodb0rjdTXyLvsKeDJCpMeppm-ek2gK'\n      responses:\n        '200':\n          description: Challenge was successfully signed and updated macaroon is returned\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  macaroon:\n                    type: string\n                    description: updated macaroon with new challenge caveat that includes signature and any other custom caveats\n                    example: 'MDAyM2xvY2F0aW9uIGh0dHA6Ly9sb2NhbGhvc3Q6NDMwMAowMDk0aWRlbnRpZmllciAwMDAwMDk1ZTkxMGNjYmUyNTNmMTg0MzAxZGNiMmVhNGU0YThiZmY4MTNlODhjZGM0MmFjNDYyYmRhYzEzYjJhZDIyMTNjMjM5OGEzNTc2YTliZTEyZjBiY2Y0YTkxZDAxMWExOTkyOWVkYTAyYzAzYWQzZDg5Zjk3NGJkZmMyMzM4OTkKMDA5N2NpZCBjaGFsbGVuZ2U9MGM3MWNmOGQxOTNiZWZjZWU1NzEwZmZhNjg0YTM2M2Q0ZWQ2N2U4N2U2Y2FiNzlhNjM1NGQxNDBiNDI4NTU2ZDowMzI5Nzg3NTJkNTJlZTQ4MWU2MjZiYjI0YTRlZGFlMTExNDJhZjdlYTI1ZTIzMzdjZTllYTc4NmU3ZGJjOTUzMTY6CjAwZmZjaWQgY2hhbGxlbmdlPTBjNzFjZjhkMTkzYmVmY2VlNTcxMGZmYTY4NGEzNjNkNGVkNjdlODdlNmNhYjc5YTYzNTRkMTQwYjQyODU1NmQ6MDMyOTc4NzUyZDUyZWU0ODFlNjI2YmIyNGE0ZWRhZTExMTQyYWY3ZWEyNWUyMzM3Y2U5ZWE3ODZlN2RiYzk1MzE2OnJiaWduYjh3d2lwcG9uMWZqZmM4Y2pyNHNidW5zZWZtaDFjdHFicDNqYXVxczExemhqcnFlamJtbWJkdW8zaXFvNXh4ZnJycXVtNGF6ejlpY25wNGI4ZnFqNDNnc2E1bnhxNmM3bzU1CjAwMmZzaWduYXR1cmUg3FcPL7CU5LhMrTM3IdLHSvOGFBXnpRLb-ouxJKdfLMYK' \n        '400':\n          description: Malformed request. Returns if missing macaroon in request body, macaroon cannot be read, macaroon is missing challenge caveat, challenge caveat public key does not match the lnd node, or the challenge already has a signature.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorMessage\"\n        '402':\n          description: Payment Required- Returned if the invoice associated with the macaroon is unpaid\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorMessage\"\n\n  /api/invoice:\n    get:\n      summary: get status of a given invoice based on request LSAT\n      description: |\n        Given an invoice id or a valid LSAT, get the status of an invoice (i.e. is it paid or not)\n        as well as payment information like payment request and id.\n      operationId: getInvoice\n      parameters:\n        - in: query\n          name: id\n          schema:\n            type: string\n          required: true\n          description: hex encoded string of payment hash for looking up invoice\n      responses:\n        \"200\":\n          description: Status of invoice and payreq string for reference\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvoiceResponse\"\n        \"400\":\n          description: Missing invoice id, problem getting invoice\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorMessage\"\n        \"401\":\n          description: Request sent with an invalid LSAT\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorMessage\"\n        \"404\":\n          description: Invoice with given ID does not exist\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorMessage\"\n    post:\n      summary: generate a new lightning invoice\n      description: |\n        Given a set of metadata and a price, generate a new lightning invoice for sending a payment to.\n      operationId: generateInvoice\n      requestBody:\n        description: creates a new invoice in our lightning node\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/body\"\n      responses:\n        \"200\":\n          description: A valid Invoice Response\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvoiceResponse\"\n        \"400\":\n          description: error creating the invoice against a lightning node\n  /[protected]:\n    get:\n      summary: protected path (applies to all method verbs- GET/PUT/POST/DELETE)\n      security:\n        - http: [LSAT]\n      parameters:\n        - in: query\n          name: amount\n          schema:\n            type: number\n          description: The amount that you would like to pay in the invoice. If this is below the minimum threshold set by the server, the request will be rejected\n        - in: query\n          name: auth_uri\n          schema:\n            type: string\n            format: url\n          description: A valid auth_uri of the 3rd party boltwall server that will be authorizing the client's payment and request. Required if `oauth` is true.\n          example: https://my-boltwall.com\n      description: |\n        A middleware that checks for a valid authorizing LSAT on all requests. Any middleware or router that comes _after_ boltwall will have this check performed on it. \n        Invoice information will be contained in the LSAT WWW-Authenticate header. When an invoice is paid, a valid LSAT can usually\n        be constructed (depending on if there are other caveats on the macaroon)\n\n        **NOTE: The invoice can be paid by anyone from any node**. While authorization itself is tied to the specific session, payment is not. This allows for _accountless_ authorization.\n      responses:\n        \"200\":\n          description:\n            This is just a dummy response. In reality it depends on whatever\n            endpoints the developer is protecting.\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/inline_response_200\"\n        \"400\":\n          description: |\n            Problem checking authorization in macaroon, checking invoice, or generating invoice (e.g. amount requested to pay was \n            below minAmount) or missing `auth_uri` if `oauth` is enabled\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/ErrorMessage\"\n        \"401\":\n          description:\n            Provided LSAT is unauthorized for access e.g. due to expiration\n            or caveat validation error\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/UnauthorizedError\"\n        \"402\":\n          description: |\n            Payment required. Request has not been authorized with payment yet. Sent when a authorization is missing or somehow invalid.\n          headers:\n            X-WWW-Authenticate:\n              schema:\n                $ref: \"#/components/schemas/LSAT-Challenge\"\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/PaymentRequiredError\"\n        \"500\":\n          description: Server side error\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/ErrorMessage\"\ncomponents:\n  securitySchemes:\n    LSAT:\n      type: http\n      scheme: bearer\n      bearerFormat: \"LSAT macaroon:secret\"\n      description: \"LSAT Authorization header which requires prefix 'LSAT' followed by base64 encoded macaroon and the\n       proof of payment (invoice preimage), separated by a colon\"\n      x-lsat:\n        $ref: \"#/components/schemas/LSAT\"\n  schemas:\n    LSAT-Challenge:\n      type: string\n      format: base64\n      description: \"The challenge issued by boltwall with a 402 Response in a WWW-Authenticate header, base64 encoded \n      with macaroon and invoice to be paid\"\n      example: \"LSAT macaroon=\\\"MDAyM2xvY2F0aW9uIGh0dHA6Ly9sb2NhbGhvc3Q6MzAwMAowMDk0aWRlbnRpZmllciAwMD\n      AwN2NlZjkzZjJjNTFhYTY1MjA4YmVjMTQ0N2ZjMzhmYzU4ZDliY2UxMzc1YTUzMmVkYjBkY2QyOTBhMmMzMzBhZWVhNDM5YW\n      U1ZTg2Mjk1YTUwZmQ4MTRiODMyZTQ3NjRjNWMyYTRmM2YzYzUzZGNiOTRlNmM1ZTIwMjllNWRhNjcKMDAyZnNpZ25hdHVyZS\n      AT8u5IrVmkydhKyFw3RzHNjL3FOzUsU33p6ghPVxZ83Ao\\\", invoice=\\\"lntb10u1pw7kfm8pp50nhe8uk9r2n9yz97c9z\n      8lsu0ckxehnsnwkjn9mdsmnffpgkrxzhqdq5w3jhxapqd9h8vmmfvdjscqzpgllq2qvdlgkllc27kpd87lz8pdfsfmtteyc3\n      kwq734jpwnvqt96e4nuy0yauzdrtkumxsvawgda8dlljxu3nnjlhs6w75390wy7ukj6cpfmygah\\\"\"\n    LSAT:\n      type: string\n      format: base64\n      description: \"Base64 encoded LSAT token, prefixed with the type (LSAT) and a macaroon and optional secret, separated with a colon\"\n      example:\n        \"LSAT MDAxNmxvY2F0aW9uIGxvY2F0aW9uCjAwOTRpZGVudGlmaWVyIDAwMDA3Y2VmOTNmMmM1MWFhNjUyMDhiZWMxNDQ3ZmMzOGZjNThkOWJjZTEzNzVhNTMyZWRiMGRjZDI5MGEyYz\n        MzMGFlOWMzMzNjOGM3N2MyNzU0YmI4NWJjMDc4YmY5N2Y2NGE5NTBjNDRhYjg0NTFjM2VmZmIyZTk0OTQ5MmQ0ZjRmZgowMDJmc2lnbmF0dXJlIJ0cCih9DapeVzWrq5AGX643eJC4y9\n        OdIF-yde_va0HjCg:2ca931a1c36b48f54948b898a271a53ed91ff7d0081939a5fa511249e81cba5c\"\n    NodeInfo:\n      required:\n        - pubKey\n        - socket\n      type: object\n      properties:\n        pubKey:\n          type: string\n          example: 03cb9e0a30f17a7b75f3ac9e9f39909811805be22ad6044953220a3c35d2809418\n        alias:\n          type: string\n          description: Alias of lightning node\n          example: foobar node\n        socket:\n          type: string\n          description: host and port where node can be reached\n          example: 123.45.67.87:10009\n        activeChannelsCount:\n          type: number\n          description: Active channels on the node\n          example: 2\n        peersCount:\n          type: number\n          description: total number of peers connected to node\n          example: 1\n    PaymentRequest:\n      type: string\n      format: \u003cBOLT 11 Encoded Payment Request String\u003e\n      example: \"lntb10u1pw7kfm8pp50nhe8uk9r2n9yz97c9z8lsu0ckxehnsnwkjn9mdsmnffpgkrxzhqdq5w3jhxapqd9h8vmmfvdjscqzpg\n      llq2qvdlgkllc27kpd87lz8pdfsfmtteyc3kwq734jpwnvqt96e4nuy0yauzdrtkumxsvawgda8dlljxu3nnjlhs6w75390wy7ukj6cpfmygah\"\n    PaymentRequiredError:\n      required:\n        - message\n      type: object\n      properties:\n        message:\n          type: string\n          example: Payment required\n    UnauthorizedError:\n      required:\n        - message\n      type: object\n      properties:\n        message:\n          type: string\n          example: \"Unauthorized: LSAT invalid\"\n    ErrorMessage:\n      required:\n        - message\n      type: object\n      properties:\n        message:\n          type: string\n          example: _generic error message_\n    InvoiceResponse:\n      type: object\n      properties:\n        id:\n          type: string\n          description: |\n            Payment hash hex string\n          format: hex\n          example: 7cef93f2c51aa65208bec1447fc38fc58d9bce1375a532edb0dcd290a2c330ae\n        payreq:\n          $ref: \"#/components/schemas/PaymentRequest\"\n        createdAt:\n          type: string\n          format: date-time\n          example: 2016-08-29T09:12:33.001Z\n        amount:\n          type: integer\n          description: Amount (in satoshis) of payment\n          example: 30\n        status:\n          type: string\n          description: One of \"paid\", \"unpaid\", or \"held\"\n          example: paid\n        description:\n          type: string\n          example: example invoice description\n    body:\n      required:\n        - amount\n      type: object\n      properties:\n        title:\n          type: string\n          description: |\n            Title of data being requested. Will be used in invoice metadata\n        amount:\n          type: integer\n        time:\n          type: integer\n          description: |\n            For time based APIs. Can be superceded by the `amount` property\n        expiresAt:\n          type: string\n          description: |\n            Optional expiry for the invoice to timeout at in valid UTC string format.\n        appName:\n          type: string\n          description: |\n            Optional name for identifying the app that is requesting the invoice.\n    inline_response_200:\n      type: object\n      properties:\n        message:\n          type: string\n          example:\n            I am protected content. You can only see me if you've paid the\n            price.\n    inline_response_402:\n      type: object\n      properties:\n        message:\n          type: string\n          example: Payment required\n",
			"canonicalURL": "/github.com/Tierion/boltwall@05438cf54cc1a533fe7a51522e57973e20736fbc/-/blob/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/Tierion/boltwall/blob/05438cf54cc1a533fe7a51522e57973e20736fbc/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/[protected]\": get: security: at 1:7020: unknown security schema \"http\""
}