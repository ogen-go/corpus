{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/fabmob/standard-covoiturage"
		},
		"file": {
			"name": "standard-covoiturage_openapi.yaml",
			"size": 0,
			"path": "standard-covoiturage_openapi.yaml",
			"byteSize": 36068,
			"content": "openapi: 3.0.1\n\ninfo:\n  title: \"\"\n  description: \"\"\n  version: 0.0.1\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n\ntags:\n  - name: Search\n    description: API routes to search for journeys. These routes can be left opened to public.\n\n#\n# API Routes\n#\npaths:\n  /driver_journeys:\n    get:\n      tags:\n      - Search\n      summary: Search for matching punctual planned outward driver journeys.\n      description: Route used to retrieve a collection of punctual planned outward driver journeys matching the provided criteria.\n      operationId: getDriverJourneys\n      parameters:\n        - $ref: '#/components/parameters/departureLat'\n        - $ref: '#/components/parameters/departureLng'\n        - $ref: '#/components/parameters/arrivalLat'\n        - $ref: '#/components/parameters/arrivalLng'\n        - $ref: '#/components/parameters/departureDate'\n        - $ref: '#/components/parameters/timeDelta'\n        - $ref: '#/components/parameters/departureRadius'\n        - $ref: '#/components/parameters/arrivalRadius'\n        - $ref: '#/components/parameters/count'\n      responses:\n        200:\n          description: Ok. Request processed successfully.\n          content:\n            application/json:\n              schema:\n                title: DriverJourneys\n                type: array\n                items:\n                  $ref: '#/components/schemas/DriverJourney'\n        400:\n          $ref: '#/components/responses/BadRequest'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        429:\n          $ref: '#/components/responses/TooManyRequests'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n\n  /passenger_journeys:\n    get:\n      tags:\n      - Search\n      summary: Search for matching punctual planned outward passenger journeys.\n      description: Route used to retrieve a collection of punctual planned outward passenger journeys matching the provided criteria.\n      operationId: getPassengerJourneys\n      parameters:\n        - $ref: '#/components/parameters/departureLat'\n        - $ref: '#/components/parameters/departureLng'\n        - $ref: '#/components/parameters/arrivalLat'\n        - $ref: '#/components/parameters/arrivalLng'\n        - $ref: '#/components/parameters/departureDate'\n        - $ref: '#/components/parameters/timeDelta'\n        - $ref: '#/components/parameters/departureRadius'\n        - $ref: '#/components/parameters/arrivalRadius'\n        - $ref: '#/components/parameters/count'\n      responses:\n        200:\n          description: Ok. Request processed successfully.\n          content:\n            application/json:\n              schema:\n                title: PassengerJourneys\n                type: array\n                items:\n                  $ref: '#/components/schemas/PassengerJourney'\n        400:\n          $ref: '#/components/responses/BadRequest'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        429:\n          $ref: '#/components/responses/TooManyRequests'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n\n  /driver_regular_trips:\n    get:\n      tags:\n      - Search\n      summary: Search for matching regular driver trips.\n      description: Route used to retrieve a collection of driver regular trips matching the provided criteria.\n      operationId: getDriverRegularTrips\n      parameters:\n        - $ref: '#/components/parameters/departureLat'\n        - $ref: '#/components/parameters/departureLng'\n        - $ref: '#/components/parameters/arrivalLat'\n        - $ref: '#/components/parameters/arrivalLng'\n        - $ref: '#/components/parameters/departureTimeOfDay'\n        - $ref: '#/components/parameters/departureWeekdays'\n        - $ref: '#/components/parameters/timeDelta'\n        - $ref: '#/components/parameters/departureRadius'\n        - $ref: '#/components/parameters/arrivalRadius'\n        - $ref: '#/components/parameters/minDepartureDate'\n        - $ref: '#/components/parameters/maxDepartureDate'\n        - $ref: '#/components/parameters/count'\n      responses:\n        200:\n          description: Ok. Request processed successfully.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  allOf:\n                    - $ref: '#/components/schemas/DriverTrip'\n                    - type: object\n                      properties:\n                        schedules:\n                          type: array\n                          items:\n                            $ref: '#/components/schemas/Schedule'\n        400:\n          $ref: '#/components/responses/BadRequest'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        429:\n          $ref: '#/components/responses/TooManyRequests'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n\n  /passenger_regular_trips:\n    get:\n      tags:\n      - Search\n      summary: Search for matching passenger regular trips.\n      description: Route used to retrieve a collection of passenger regular trips matching the provided criteria.\n      operationId: getPassengerRegularTrips\n      parameters:\n        - $ref: '#/components/parameters/departureLat'\n        - $ref: '#/components/parameters/departureLng'\n        - $ref: '#/components/parameters/arrivalLat'\n        - $ref: '#/components/parameters/arrivalLng'\n        - $ref: '#/components/parameters/departureTimeOfDay'\n        - $ref: '#/components/parameters/departureWeekdays'\n        - $ref: '#/components/parameters/timeDelta'\n        - $ref: '#/components/parameters/departureRadius'\n        - $ref: '#/components/parameters/arrivalRadius'\n        - $ref: '#/components/parameters/minDepartureDate'\n        - $ref: '#/components/parameters/maxDepartureDate'\n        - $ref: '#/components/parameters/count'\n      responses:\n        200:\n          description: Ok. Request processed successfully.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  allOf:\n                    - $ref: '#/components/schemas/PassengerTrip'\n                    - type: object\n                      properties:\n                        schedules:\n                          type: array\n                          items:\n                            $ref: '#/components/schemas/Schedule'\n        400:\n          $ref: '#/components/responses/BadRequest'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        429:\n          $ref: '#/components/responses/TooManyRequests'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n\n  /booking_events:\n    post:\n      tags:\n      - Webhooks\n      summary:\n        Sends booking information of a user connected with a third-party\n        provider back to the provider.\n      description:\n        Route used to allow a carpool operator to send booking information to a third-party\n        provider. This can be used in the context of a booking flow with deeplinking and\n        when a passenger is using the Connect specification to link their accounts of a\n        third-party service (e.g., a MaaS) and the operator.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CarpoolBookingEvent'\n      responses:\n        200:\n          description: Ok. Request processed successfully.\n        400:\n          $ref: '#/components/responses/BadRequest'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        429:\n          $ref: '#/components/responses/TooManyRequests'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n\n  /messages:\n    post:\n      tags:\n      - Interact\n      summary: Send a message to the owner of a retrieved journey.\n      description: Route used to allow a user to connect back to the owner of a retrieved journey through a texte message.\n      operationId: postConnections\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - from\n                - to\n                - message\n                - recipientCarpoolerType\n              properties:\n                from:\n                  $ref: '#/components/schemas/User'\n                to:\n                  $ref: '#/components/schemas/User'\n                message:\n                  type: string\n                  maxLength: 500\n                  description: Free text content of a message. The message can contain all the details (phone number, email, etc.) allowing the recipient to call back the sender in order to carpool with him/her.\n                recipientCarpoolerType:\n                  type: string\n                  enum:\n                    - DRIVER\n                    - PASSENGER\n                  default: DRIVER\n                  description: Defines if the recipient of this message is either the driver or the passenger.\n                driverJourneyId:\n                  type: string\n                  minLength: 1\n                  maxLength: 255\n                  description: ID of the Driver's journey to which the message is related (if any). Unique given the `Driver`'s `operator` property.\n                passengerJourneyId:\n                  type: string\n                  minLength: 1\n                  maxLength: 255\n                  description: ID of the Passenger's journey to which the message is related (if any). Unique given the `Passenger`'s `operator` property.\n                bookingId:\n                  allOf:\n                    - $ref: '#/components/schemas/bookingId'\n                  description: ID of the booking to which the message is related (if any)\n\n      responses:\n        201:\n          description: Successful operation.\n        404:\n          description: The targeted journey or user no more exists.\n        400:\n          $ref: '#/components/responses/BadRequest'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        429:\n          $ref: '#/components/responses/TooManyRequests'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n\n  /bookings:\n    post:\n      tags:\n      - Interact\n      summary: Create a punctual outward Booking request.\n      description: Route used to synchronize a Booking request initiated by a platform to the second platform involved in the shared punctual outward journey. While posting a new Booking, its status must always be set first as `status=WAITING_CONFIRMATION`. _Reminder:_ In case of booking without deeplink, the sender platform MUST also store the Booking object, and be ready to receive modifications of it through the PATCH /bookings API endpoint.\n      operationId: postBookings\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Booking'\n\n      responses:\n        201:\n          description: Successful operation. A new Booking has been created.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Booking'\n        400:\n          $ref: '#/components/responses/BadRequest'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        429:\n          $ref: '#/components/responses/TooManyRequests'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n\n  /bookings/{bookingId}:\n    patch:\n      tags:\n      - Interact\n      summary: Updates status of an existing Booking request.\n      description: Route used to update the status of an existing Booking request. Should be used usually just to confirm, cancel, etc. an existing Booking.\n      operationId: patchBookings\n      parameters:\n      - name: bookingId\n        in: path\n        required: true\n        schema:\n          $ref: '#/components/schemas/bookingId'\n      - name: status\n        description: New status of the Booking.\n        in: query\n        required: true\n        schema:\n          $ref: '#/components/schemas/bookingStatus'\n      - name: message\n        description: Free text content of a message. The message can contain explanations on the status change.\n        in: query\n        schema:\n          type: string\n          maxLength: 500\n\n      responses:\n        200:\n          description: Successful operation.\n        400:\n          $ref: '#/components/responses/BadRequest'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        429:\n          $ref: '#/components/responses/TooManyRequests'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n        404:\n          description: The targeted journey, booking or user no more exists.  Error code can be among  `missing_journey, missing_booking, missing_user` .\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    description: |-\n                      Explain why the request couldn't be processed.\n        409:\n          description: Conflict. This booking has already the new status requested. Error code is  `status_already_set`.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    description: |-\n                      Explain why the request couldn't be processed.\n\n\n    get:\n      tags:\n      - Interact\n      summary: Retrieves an existing Booking request.\n      description: Route used to retrieve the details of an existing Booking request. Can only be used by the operator having created the Booking request. This route is provided to check if the Booking object state is similar between two operators, but its usage should be required to handle the full use case of a booking.\n      operationId: getBookings\n      parameters:\n      - name: bookingId\n        in: path\n        required: true\n        schema:\n          $ref: '#/components/schemas/bookingId'\n      responses:\n        200:\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Booking'\n        400:\n          $ref: '#/components/responses/BadRequest'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        429:\n          $ref: '#/components/responses/TooManyRequests'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n        404:\n          description: This Booking object no more exists. Error code can be among  `missing_journey, missing_booking, missing_user` .\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    description: |-\n                      Explain why the request couldn't be processed.\n\n  /status:\n    get:\n      tags:\n      - status\n      summary: Give health status of the webservice.\n      responses:\n        200:\n          description: Ok. Webservice is available.\n        429:\n          $ref: '#/components/responses/TooManyRequests'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n\n#\n# Schemas\n#\ncomponents:\n  parameters:\n    departureLat:\n      name: departureLat\n      in: query\n      required: true\n      schema:\n        type: number\n      description: Latitude of searched departure point.\n\n    departureLng:\n      name: departureLng\n      in: query\n      description: Longitude of searched departure point.\n      required: true\n      schema:\n        type: number\n\n    arrivalLat:\n      name: arrivalLat\n      in: query\n      description: Latitude of searched arrival point.\n      required: true\n      schema:\n        type: number\n\n    arrivalLng:\n      name: arrivalLng\n      in: query\n      description: Longitude of searched arrival point.\n      required: true\n      schema:\n        type: number\n\n    departureDate:\n      name: departureDate\n      in: query\n      description: Departure datetime using a UNIX UTC timestamp in seconds.\n      required: true\n      schema:\n        type: integer\n\n    departureTimeOfDay:\n      name: departureTimeOfDay\n      in: query\n      description:\n        Departure time of day represented as\n        [RFC3339 partial-time](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6).\n      required: true\n      schema:\n        type: string\n        format: partial-time\n      example: 07:30:00\n\n    departureWeekdays:\n      name: departureWeekdays\n      in: query\n      style: form\n      explode: false\n      description:\n        Departure days of week. The retrieved trips should have at least one schedule\n        applicable on one of the departureWeekdays.\n      schema:\n        type: array\n        items:\n          type: string\n        default: MON,TUE,WED,THU,FRI,SAT,SUN\n\n    timeDelta:\n      name: timeDelta\n      in: query\n      description: Time margin in seconds. The retrieved journeys must match the\n        given time parameters within a +`timeDelta` / -`timeDelta` interval .\n      schema:\n        type: integer\n        default: 900\n\n    minDepartureDate:\n      name: minDepartureDate\n      in: query\n      description:\n        Minimum date of departure for the returned journeys. Datetime using\n        a UNIX UTC timestamp in seconds.\n      schema:\n        type: integer\n\n    maxDepartureDate:\n      name: maxDepartureDate\n      in: query\n      description:\n        Maximum date of departure for the returned journeys. Datetime using\n        a UNIX UTC timestamp in seconds.\n      schema:\n        type: integer\n\n    departureRadius:\n      name: departureRadius\n      in: query\n      description: Search radius in kilometers around the departure point.\n      schema:\n        type: number\n        default: 1.0\n\n    arrivalRadius:\n      name: arrivalRadius\n      in: query\n      description: Search radius in kilometers around the arrival point.\n      schema:\n        type: number\n        default: 1.0\n\n    count:\n      name: count\n      in: query\n      description:\n        Maximum number of returned results. If missing, all matching results\n        are returned.\n      schema:\n        type: integer\n\n  schemas:\n    Trip:\n      type: object\n      required:\n        - duration\n        - operator\n        - passengerPickupLat\n        - passengerPickupLng\n        - passengerDropLat\n        - passengerDropLng\n      properties:\n        operator:\n          type: string\n          description: The operator identifier. MUST be a Root Domain (example operator.org) owned by the operator or a Fully Qualified Domain Name (example carpool.mycity.com) exclusively operated by the operator. A given operator SHOULD always send the same value.\n        passengerPickupLat:\n          type: \"number\"\n          format: \"double\"\n          description: Latitude of the passenger pick-up point.\n        passengerPickupLng:\n          type: \"number\"\n          format: \"double\"\n          description: Longitude of the passenger pick-up point.\n        passengerDropLat:\n          type: \"number\"\n          format: \"double\"\n          description: Latitude of the passenger drop-off point.\n        passengerDropLng:\n          type: \"number\"\n          format: \"double\"\n          description: Longitude of the passenger drop-off point.\n        passengerPickupAddress:\n          type: string\n          description: String representing the pickup-up address.\n        passengerDropAddress:\n          type: string\n          description: String representing the drop-off address.\n        distance:\n          type: \"integer\"\n          description: Carpooling distance in meters.\n        driverDepartureLat:\n          type: \"number\"\n          format: \"double\"\n          description: Latitude of the departure.\n        driverDepartureLng:\n          type: \"number\"\n          format: \"double\"\n          description: Longitude of the departure.\n        driverArrivalLat:\n          type: \"number\"\n          format: \"double\"\n          description: Latitude of the arrival.\n        driverArrivalLng:\n          type: \"number\"\n          format: \"double\"\n          description: Longitude of the arrival.\n        driverDepartureAddress:\n          type: string\n          description: String representing the departure address of the driver.\n        driverArrivalAddress:\n          type: string\n          description: String representing the arrival address of the driver.\n        duration:\n          type: integer\n          description: Carpooling duration in seconds.\n        journeyPolyline:\n          type: string\n          description: |-\n            Carpooling journey itinerary as a\n            [Google Encoded Polyline](https://developers.google.com/maps/documentation/utilities/polylinealgorithm), compressed at  level 5.\n        preferences:\n          $ref: '#/components/schemas/Preferences'\n        webUrl:\n          type: string\n          description: URL of the trip on the webservice provider platform.\n\n    DriverTrip:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/Trip'\n        - type: object\n          required:\n            - driver\n          properties:\n            driver:\n              $ref: '#/components/schemas/User'\n            departureToPickupWalkingDistance:\n              type: integer\n              description: |-\n                Walking distance from the requested departure location\n                to the pick-up location.\n            departureToPickupWalkingDuration:\n              type: integer\n              description: |-\n                Walking duration from the requested departure location\n                to the pick-up location.\n            departureToPickupWalkingPolyline:\n              type: string\n              description: |-\n                Walking\n                [Google Encoded Polyline](https://developers.google.com/maps/documentation/utilities/polylinealgorithm)\n                from the requested departure location to the pick-up location.\n            dropoffToArrivalWalkingDistance:\n              type: integer\n              description: |-\n                Walking distance to the requested arrival location\n                from the drop-off location.\n            dropoffToArrivalWalkingDuration:\n              type: integer\n              description: |-\n                Walking duration to the requested arrival location\n                from the drop-off location.\n            dropoffToArrivalWalkingPolyline:\n              type: string\n              description: |-\n                Walking\n                [Google Encoded Polyline](https://developers.google.com/maps/documentation/utilities/polylinealgorithm)\n                to the requested arrival location from the drop-off location.\n            car:\n              $ref: '#/components/schemas/Car'\n\n    PassengerTrip:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/Trip'\n        - type: object\n          required:\n            - passenger\n          properties:\n            passenger:\n              $ref: '#/components/schemas/User'\n\n    JourneySchedule:\n      type: object\n      required:\n        - passengerPickupDate\n        - type\n      properties:\n        id:\n          type: string\n          minLength: 1\n          maxLength: 255\n          description: Journey's id. It MUST be unique for a given operator.\n        passengerPickupDate:\n          type: number\n          description: |-\n            Passenger pickup datetime as a UNIX UTC timestamp in seconds.\n          format: long\n        driverDepartureDate:\n          type: number\n          description: |-\n            Driver departure datetime as a UNIX UTC timestamp in seconds.\n          format: long\n        webUrl:\n          type: string\n          description: URL of the journey on the webservice provider platform. Required to support booking by deeplink.\n        type:\n          type: string\n          description: |-\n            Type of journey. A dynamic journey is happening in real time.\n          enum:\n          - PLANNED\n          - DYNAMIC\n          - LINE\n\n    DriverJourney:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/DriverTrip'\n        - $ref: '#/components/schemas/JourneySchedule'\n        - type: object\n          properties:\n            availableSeats:\n              type: integer\n              description: Available seats in the car.\n            price:\n              $ref: '#/components/schemas/Price'\n\n    PassengerJourney:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/PassengerTrip'\n        - $ref: '#/components/schemas/JourneySchedule'\n        - type: object\n          required:\n            - driverDepartureDate\n          properties:\n            requestedSeats:\n              type: integer\n              description: Requested seats by the passenger.\n\n    Schedule:\n      type: object\n      properties:\n        passengerPickupDay:\n          type: string\n          description: Day of week of the passenger pick-up.\n          enum:\n            - MON\n            - TUE\n            - WED\n            - THU\n            - FRI\n            - SAT\n            - SUN\n        passengerPickupTimeOfDay:\n          description: |-\n            Passenger pick-up time of day represented as\n            [RFC3339 partial-time](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6).\n          type: string\n          format: partial-time\n        journeySchedules:\n          type: array\n          items:\n            $ref: '#/components/schemas/JourneySchedule'\n\n    CarpoolBookingEvent:\n      required:\n        - id\n        - idToken\n        - data\n      properties:\n        id:\n          type: string\n          format: uuid\n          description:\n            Unique journey's id in the format of an [UUID](https://datatracker.ietf.org/doc/html/rfc4122).\n            Usage of a [4 UUID](https://datatracker.ietf.org/doc/html/rfc4122#section-4.4) generation algorithm\n            is advised.\n        idToken:\n          type: string\n          description: ID token of the user retrieved using the OpenID Connect flows.\n        data:\n          oneOf:\n          - $ref: '#/components/schemas/DriverCarpoolBooking'\n          - $ref: '#/components/schemas/PassengerCarpoolBooking'\n\n    CarpoolBooking:\n      required:\n      - id\n      - passengerPickupDate\n      - passengerPickupLat\n      - passengerPickupLng\n      - passengerDropLat\n      - passengerDropLng\n      - status\n      - webUrl\n      properties:\n        id:\n          type: \"string\"\n          description: Unique identifier of the booking.\n        passengerPickupDate:\n          type: number\n          description: Passenger pickup datetime as a UNIX UTC timestamp in seconds.\n          format: long\n        passengerPickupLat:\n          type: \"number\"\n          format: \"double\"\n          description: Latitude of the passenger pick-up point.\n        passengerPickupLng:\n          type: \"number\"\n          format: \"double\"\n          description: Longitude of the passenger pick-up point.\n        passengerDropLat:\n          type: \"number\"\n          format: \"double\"\n          description: Latitude of the passenger drop-off point.\n        passengerDropLng:\n          type: \"number\"\n          format: \"double\"\n          description: Longitude of the passenger drop-off point.\n        passengerPickupAddress:\n          type: string\n          description: String representing the pickup-up address.\n        passengerDropAddress:\n          type: string\n          description: String representing the drop-off address.\n        status:\n          type: string\n          enum:\n            - WAITING_CONFIRMATION\n            - CONFIRMED\n            - CANCELLED\n            - COMPLETED_PENDING_VALIDATION\n            - VALIDATED\n        distance:\n          type: \"integer\"\n          description: |\n            Carpooling distance in meters. When the booking is COMPLETED or VALIDATED, this is the actual distance travelled if available.\n        duration:\n          type: integer\n          description: Carpooling duration in seconds.\n        webUrl:\n          type: string\n          description: URL of the booking on the webservice provider platform.\n\n    PassengerCarpoolBooking:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/CarpoolBooking'\n        - type: object\n          required:\n            - passenger\n          properties:\n            passenger:\n              $ref: '#/components/schemas/User'\n\n    DriverCarpoolBooking:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/CarpoolBooking'\n        - type: object\n          required:\n            - driver\n            - price\n          properties:\n            driver:\n              $ref: '#/components/schemas/User'\n            price:\n              $ref: '#/components/schemas/Price'\n            car:\n              $ref: '#/components/schemas/Car'\n\n    Price:\n      type: object\n      properties:\n        type:\n          type: string\n          description: |-\n            Either « FREE », « PAYING » or « UNKNOWN ». « UNKNOWN » is given\n            when it should be « PAYING » but we cannot set the price yet.\n          enum:\n          - FREE\n          - PAYING\n          - UNKNOWN\n        amount:\n          type: number\n          description: Carpooling passenger cost estimate. In the case of integrated booking by API, amount expected by the carpooling operator.\n          format: float\n        currency:\n          type: string\n          description: ISO 4217 code representing the currency of the price.\n\n    User:\n      type: object\n      required:\n        - id\n        - alias\n        - operator\n      properties:\n        id:\n          type: string\n          description: User's identifier. It MUST be unique for a given `operator`.\n        operator:\n          type: string\n          description: The operator identifier. MUST be a Fully Qualified Domain Name (example carpool.mycity.com) owned by the operator or a Partially Qualified Domain Name (example operator.org) owned and exclusively operated by the operator. Operators SHOULD always send the same value.\n        alias:\n          type: string\n          description: User's alias.\n        firstName:\n          type: string\n          description: User's first name.\n        lastName:\n          type: string\n          description: User's last name.\n        grade:\n          type: integer\n          minimum: 1\n          maximum: 5\n          description: User's grade from 1 to 5.\n        picture:\n          type: string\n          description: User's profile picture absolute URL.\n        gender:\n          type: string\n          description: User's gender. 'O' stands for 'Other'.\n          enum:\n            - F\n            - M\n            - O\n        verifiedIdentity:\n          type: boolean\n          description: true if the identity of this user has been verified by the operator or a third party; and the firstName, lastName, birthdate have been confirmed as identitical to an official identity proof document. Can be left empty if the information is not available.\n\n    Preferences:\n      type: object\n      properties:\n        smoking:\n          type: boolean\n          description: |-\n            If driver journey, specifies if the driver allows smoking in the car.\n        animals:\n          type: boolean\n          description: |-\n            If driver journey, specifies if the driver allows animals in the car.\n        music:\n          type: boolean\n          description: |-\n            If driver journey, specifies if the driver enjoys music in the car.\n        isTalker:\n          type: boolean\n          description: |-\n            If driver journey, specifies if the driver enjoys talking with passengers.\n        luggageSize:\n          type: integer\n          minimum: 1\n          maximum: 5\n          description: |-\n            If driver journey, specifies the size of allowed luggages.\n            From very small (1) to very big (5).\n\n    Car:\n      type: object\n      properties:\n        model:\n          type: string\n          description: Model of the car.\n        brand:\n          type: string\n          description: Brand of the car.\n\n    Booking:\n      type: object\n      required:\n        - id\n        - driver\n        - passenger\n        - status\n        - price\n        - passengerPickupDate\n        - passengerPickupLat\n        - passengerPickupLng\n        - passengerDropLat\n        - passengerDropLng\n      properties:\n        id:\n          $ref: '#/components/schemas/bookingId'\n        driver:\n          $ref: '#/components/schemas/User'\n        passenger:\n          $ref: '#/components/schemas/User'\n        passengerPickupDate:\n          type: number\n          description: Passenger pickup datetime as a UNIX UTC timestamp in seconds.\n          format: long\n        passengerPickupLat:\n          type: \"number\"\n          format: \"double\"\n          description: Latitude of the passenger pick-up point.\n        passengerPickupLng:\n          type: \"number\"\n          format: \"double\"\n          description: Longitude of the passenger pick-up point.\n        passengerDropLat:\n          type: \"number\"\n          format: \"double\"\n          description: Latitude of the passenger drop-off point.\n        passengerDropLng:\n          type: \"number\"\n          format: \"double\"\n          description: Longitude of the passenger drop-off point.\n        passengerPickupAddress:\n          type: string\n          description: String representing the pickup-up address.\n        passengerDropAddress:\n          type: string\n          description: String representing the drop-off address.\n        status:\n          $ref: '#/components/schemas/bookingStatus'\n        duration:\n          type: integer\n          description: Carpooling duration in seconds.\n        distance:\n          type: integer\n          description: |\n            Carpooling distance in meters.\n        webUrl:\n          type: string\n          description: URL of the booking on the webservice provider platform.\n        price:\n          $ref: '#/components/schemas/Price'\n        car:\n          $ref: '#/components/schemas/Car'\n        driverJourneyId:\n          type: string\n          minLength: 1\n          maxLength: 255\n          description: ID of the Driver's journey to which the booking is related (if any). Unique given the `User`'s `operator` property.\n        passengerJourneyId:\n          type: string\n          minLength: 1\n          maxLength: 255\n          description: ID of the Passenger's journey to which the booking is related (if any). Unique given the `User`'s `operator` property.\n\n    bookingId:\n      type: string\n      format: uuid\n      description: Booking id is common between both operators, and must be created as a [UUID](https://datatracker.ietf.org/doc/html/rfc4122) by whoever initiates the booking.  Usage of a [4 UUID](https://datatracker.ietf.org/doc/html/rfc4122#section-4.4) generation algorithm is advised.\n\n    bookingStatus:\n      type: string\n      description: Status of the booking.\n      enum:\n        - WAITING_CONFIRMATION\n        - CONFIRMED\n        - CANCELLED\n        - COMPLETED_PENDING_VALIDATION\n        - VALIDATED\n      default: WAITING_CONFIRMATION\n\n  responses:\n    BadRequest:\n      description: Bad Request. See error message.\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              error:\n                type: string\n                description: |-\n                  Explain why the request couldn't be processed.\n    Unauthorized:\n      description: Unauthorized. You must authenticate.\n    TooManyRequests:\n      description: Too Many Requests. Please slow down.\n      headers:\n        Retry-After:\n          description: |-\n            How long to wait before making a new request (in seconds).\n          schema:\n            type: integer\n    InternalServerError:\n      description: Internal Server Error. Please try again later.\n",
			"canonicalURL": "/github.com/fabmob/standard-covoiturage@2467c8aa368234cd71a0cc7360dc759e1ac8a348/-/blob/standard-covoiturage_openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/fabmob/standard-covoiturage/blob/2467c8aa368234cd71a0cc7360dc759e1ac8a348/standard-covoiturage_openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: parameters: \"departureWeekdays\": parse schema: at standard-covoiturage_openapi.yaml:483:18: parse default: expected type \"array\", got \"string\""
}