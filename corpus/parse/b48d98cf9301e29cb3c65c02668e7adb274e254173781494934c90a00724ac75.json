{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/nextcloud/cookbook"
		},
		"file": {
			"name": "internal-cookbook.yaml",
			"size": 0,
			"path": "docs/dev/api/0.1.0/internal-cookbook.yaml",
			"byteSize": 15970,
			"content": "openapi: 3.0.1\ninfo:\n  title: Nextcloud cookbook app\n  description: \u003e-\n    This is the internal API definition of the [cookbook app](https://github.com/nextcloud/cookbook) webapp for the [nextcloud server](http://nextcloud.com).\n    \n    \n    The total API is separated into two parts:\n\n    - There is the public API part that can be used from 3rd party apps and scripts.\n\n    - There is the internal API that is used only by the web app of the cookbook app. This is described here.\n    \n\n    The internal part is intended only to be used by the internal web app.\n    It uses session based authentication and thus requires a `requesttoken` to protect against CSRF attacks.\n    The generation and updating of these tokens is not part of the app but the regular browser capabilities and the nextcloud web frontend is used here instead.\n\n\n    In contrast, the External APIs are intended for use by external services.\n    These endpoints require the user credentials to be present in every request.\n    Thus, no session is created and no cookies or similar needs to be handled.\n    Technically, there is a CORS preflight possible but it is not required for the function of the endpoints.\n\n    \n    Further contact can be found on the matrix.org server in the room [#nextcloud-cookbook:matrix.org](https://matrix.to/#/#nextcloud-cookbook:matrix.org) for general questions.\n    Additionally, there is [#nextcloud-cookbook-integration:matrix.org](https://matrix.to/#/#nextcloud-cookbook-integration:matrix.org) for questions related to the API and third party integration.\n    Further information on the different versions can be found in [the API overview page](https://nextcloud.github.io/cookbook/dev/api/index).\n  #contact:\n    #email: apiteam@swagger.io\n  license:\n    name: AGPL-3\n    url: 'http://www.gnu.org/licenses/agpl-3.0.de.html'\n  version: 0.1.0\n\n#externalDocs:\n#  description: Find out more about Swagger\n#  url: 'http://swagger.io'\n\nservers:\n  - url: 'http://localhost:8000/apps/cookbook'\n  - url: '{protocol}://{server}'\n    variables:\n      protocol:\n        enum:\n          - http\n          - https\n        default: https\n      server:\n        default: 'example.com'\n\ntags:\n  # - name: External API v1 - Recipes\n  #   description: Querying and manipulating recipes using external APIs\n  # - name: External API v1 - Categories\n  #   description: Access to the categories of recipes using external APIs\n  # - name: External API v1 - Tags\n  #   description: Access to tags/keywords of recipes using external APIs\n  # - name: External API v1 - Misc\n  #   description: Other API endpoints for use by external APIs\n\n  - name: Recipes\n    description: Everything related to recipes and their usage\n  - name: Categories\n    description: Access to the categories of the recipes\n  - name: Tags\n    description: Access to tags/keywords of recipes\n  - name: Misc\n    description: Other API endpoints\n\n\n\ncomponents:\n  \n  schemas:\n    Config:\n      $ref: objects.yaml#/Config\n    Error:\n      $ref: objects.yaml#/Error\n    RecipeStub:\n      $ref: objects.yaml#/RecipeStub\n    StubList:\n      $ref: objects.yaml#/StubList\n    Recipe:\n      $ref: objects.yaml#/Recipe\n  \n  securitySchemes:\n    # app_password:\n    #   type: http\n    #   scheme: basic\n    #   description: Use username and app password\n    requesttoken:\n      type: apiKey\n      name: requestkey\n      in: header\n    session:\n      type: apiKey\n      in: cookie\n      name: nc_session_id\n\nsecurity:\n  - requesttoken: []\n    session: []\n\npaths:\n  \n  /webapp/reindex:\n    post:\n      tags: [ Misc ]\n      summary: Trigger a rescan of all recipes into the caching database\n      responses:\n        200:\n          description: The reindex process was done.\n          content:\n            application/json:\n              schema:\n                type: string\n                example: Search index rebuilt successfully\n  /webapp/config:\n    get:\n      tags: [ Misc ]\n      summary: Get the current configuration of the app\n      responses:\n        200:\n          description: The config was read successfully\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Config\"\n    post:\n      tags: [ Misc ]\n      summary: Set the configuration for the current user\n      responses:\n        200:\n          description: The configuration was successfully saved.\n          content:\n            application/json:\n              schema:\n                type: string\n                example: OK\n  \n  /webapp/import:\n    post:\n      tags: [ Recipes ]\n      summary: Import a recipe using schema.org metadata from a website\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                url:\n                  type: string\n                  example: 'http://www.chefkoch.de/2345'\n              required:\n                - url\n      responses:\n        200:\n          description: Successfully imported recipe\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Recipe\"\n        400:\n          description: The URL to be imported was not inserted in the request or any other issue was rosen.\n          content:\n            application/json:\n              schema:\n                type: string\n                example: Field \"url\" is required\n        409:\n          description: There exists a recipe with that name already. Import was aborted.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /webapp/recipes/{id}/image:\n    get:\n      tags: [ Recipes ]\n      summary: Get the main image of a recipe. If no image is stored a fallback image is delivered.\n      parameters:\n        - in: path\n          name: id\n          description: The id of the recipe to obtain the image for.\n          required: true\n          schema:\n            type: integer\n      responses:\n        200:\n          description: Image was obtained and will be in response either as image/jpeg or image/svg+xml\n          content:\n            image/jpeg:\n              schema:\n                type: string\n                format: binary\n            image/svg+xml:\n              schema:\n                type: string\n                format: binary\n        406:\n          description: The recipe has no image whose MIME type matches the Accept header\n  /webapp/search/{query}:\n    parameters:\n      - in: path\n        name: query\n        required: true\n        description: The search string, urlencoded, separated with spaces and/or commas\n        schema:\n          type: string\n    get:\n      tags: [ Recipes ]\n      summary: Search for recipes for keywords, tags and categories with the named search string\n      responses:\n        200:\n          description: The recipes were obtained successfully\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StubList\"\n        500:\n          description: An error has been thrown\n          content:\n            application/json:\n              schema:\n                type: string\n                description: The error message\n  /webapp/recipes:\n    get:\n      tags: [ Recipes ]\n      summary: Get all recipes in the database\n      responses:\n        200:\n          description: Successfully obtained all recipes\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StubList\"\n    post:\n      tags: [ Recipes ]\n      summary: Create a new recipe\n      requestBody:\n        description: |\n          A JSON representation of the recipe to be saved.\n          \n          See also the structure at https://schema.org/Recipe\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n              required: [ \"name\" ]\n              additionalProperties: true\n              example:\n                name: \"Chips\"\n                description: \"A very delicious way of getting kids quiet\"\n                ingredients:\n                  - \"1 pack of pre-fried chips\"\n                tools: [\"common oven\"]\n                instructions:\n                  - \"Put the chips in the oven\"\n                  - \"Wait until the are due\"\n      responses:\n        200:\n          description: Successfully created new recipe\n          content:\n            application/json:\n              schema:\n                type: integer\n                example: 2462\n                description: The id of the newly created recipe\n        409:\n          description: A recipe with the name was already found on the server. No recipe is created.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        422:\n          description: There was no name in the request given for the recipe. Cannot save the recipe.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /webapp/recipes/{id}:\n    parameters:\n      - in: path\n        name: id\n        required: true\n        description: The id of the recipe\n        schema:\n          type: integer\n    get:\n      tags: [ Recipes ]\n      summary: Get a single recipe from the server\n      responses:\n        200:\n          description: Recipe was sucessfully obtained\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Recipe\"\n        404:\n          description: The given recipe id was not found\n          content:\n            application/json:\n              schema:\n                type: integer\n                example: 2345\n                description: The id of the recipe that was not found\n    put:\n      tags: [ Recipes ]\n      summary: Update a recipe\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Recipe\"\n      responses:\n        200:\n          description: The recipe was sucessfully updated\n          content:\n            application/json:\n              schema:\n                type: integer\n                description: The id of the updated recipe\n                example: 2345\n        422:\n          description: There was no name in the request given for the recipe. Cannot save the recipe.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \n    delete:\n      tags: [ Recipes ]\n      summary: Delete an existing recipe\n      responses:\n        200:\n          description: The recipe was deleted successfully\n          content:\n            application/json:\n              schema:\n                type: string\n                example: Recipe 2345 was deletes successfully\n        502:\n          description: An Exception was thrown\n          content:\n            application/json:\n              schema:\n                type: string\n                example: Recipe with id 2345 was not found.\n                description: Error message\n  \n  /webapp/keywords:\n    get:\n      tags: [ Tags ]\n      summary: Get all known keywords\n      responses:\n        '200':\n          description: Successfully obtained all keywords\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    name:\n                      type: string\n                    recipe_count:\n                      type: integer\n                  required:\n                    - name\n                    - recipe_count\n              example:\n                - name: vegetarian\n                  recipe_count: 5\n                - name: sugar-free\n                  recipe_count: 2\n  /webapp/tags/{keywords}:\n    get:\n      tags: [ Tags ]\n      summary: Get all recipes associated with certain keywords\n      parameters:\n        - in: path\n          name: keywords\n          required: true\n          description: Comma separated list of keywords, urlencoded\n          schema:\n            type: string\n            example: vegetarian,sweet\n      responses:\n        200:\n          description: Recipes were successfully obtained\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StubList\"\n        500:\n          description: An error occured\n          content:\n            application/json:\n              schema:\n                type: string\n                example: \"SQLException: Something went wrong.\"\n  \n  /webapp/categories:\n    get:\n      tags: [ Categories ]\n      summary: Get all known categories\n      responses:\n        200:\n          description: \u003e-\n            Sucessfully obtained all categories\n            \n            \n            Please note: A category name of `*` indicates the number of\n            recipes with no category associated.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    name:\n                      type: string\n                    recipe_count:\n                      type: integer\n                  required:\n                    - name\n                    - recipe_count\n              example:\n                - name: Dinner\n                  recipe_count: 21\n                - name: Lunch\n                  recipe_count: 10\n                - name: '*'\n                  recipe_count: 3\n  /webapp/category/{category}:\n    get:\n      tags: [ Categories ]\n      summary: Get all recipes of a certain category\n      parameters:\n        - in: path\n          name: category\n          required: true\n          description: \u003e-\n            The name of the category to be queried as urlencoded string\n            \n            \n            Put the string `_` to obtain all recipes with no category\n          schema:\n            type: string\n      responses:\n        200:\n          description: The filtered recipes belonging to the category\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StubList\"\n        500:\n          description: An exception was issued.\n          content:\n            application/json:\n              schema:\n                type: string\n                description: The error message\n                example: Could not find category foo.\n    put:\n      tags: [ Categories ]\n      summary: Rename a category\n      parameters:\n        - in: path\n          name: category\n          required: true\n          description: \u003e-\n            The name of the category to be queried as urlencoded string\n            \n            \n            Put the string `_` to obtain all recipes with no category\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                  example: Lunch\n                  description: The new name to rename the category to\n              required:\n                - name\n      responses:\n        200:\n          description: The category was renamed successfully\n          content:\n            application/json:\n              schema:\n                type: string\n                example: Lunch\n        400:\n          description: The new category name was not included during the request.\n        500:\n          description: The renaming did not succeed.\n          content:\n            application/json:\n              schema:\n                type: string\n                description: The error message\n                example: There exists already a category of that name.\n",
			"canonicalURL": "/github.com/nextcloud/cookbook@5b0532d6709f104aeeca144644368fc4ec0e0104/-/blob/docs/dev/api/0.1.0/internal-cookbook.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/nextcloud/cookbook/blob/5b0532d6709f104aeeca144644368fc4ec0e0104/docs/dev/api/0.1.0/internal-cookbook.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"Config\": parse schema: at 1:44: external \"objects.yaml\": get: file: local file reference is not allowed"
}