{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/aws-samples/aws-cross-account-private-api-demo"
		},
		"file": {
			"name": "api-backend.yaml",
			"size": 0,
			"path": "api-backend/api-backend.yaml",
			"byteSize": 19689,
			"content": "# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n# SPDX-License-Identifier: MIT-0\r\n#\r\n# Permission is hereby granted, free of charge, to any person obtaining a copy of this\r\n# software and associated documentation files (the \"Software\"), to deal in the Software\r\n# without restriction, including without limitation the rights to use, copy, modify,\r\n# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\r\n# permit persons to whom the Software is furnished to do so.\r\n#\r\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\nAWSTemplateFormatVersion: 2010-09-09\r\nTransform: AWS::Serverless-2016-10-31\r\nDescription: Private API demo backend resources\r\n\r\nMetadata:\r\n  AWS::CloudFormation::Interface:\r\n    ParameterGroups:\r\n      - Label:\r\n          default: Access control\r\n        Parameters:\r\n          - pTrustedPrincipals\r\n          - pAPIAccessList\r\n          - pAllowedVPCEndpoints\r\n          - pEnableWAF\r\n      - Label:\r\n          default: API details\r\n        Parameters:\r\n          - pAPIStageName\r\n          - pAPIAccessLogRetention\r\n          - pAPIGatewayAccountRole\r\n      - Label:\r\n          default: Network details (optional)\r\n        Parameters:\r\n          - pVPCID\r\n          - pLambdaSubnetIDs\r\n          - pCreateDDBEndpoint\r\n          - pLambdaSubnetRouteTable\r\n    ParameterLabels:\r\n      pTrustedPrincipals:\r\n        default: Who can assume the role for API access?\r\n      pAPIAccessList:\r\n        default: Who can access the API directly (without assuming the role)?\r\n      pAllowedVPCEndpoints:\r\n        default: VPC Endpoint IDs to whitelist\r\n      pAPIStageName:\r\n        default: API Stage name\r\n      pAPIAccessLogRetention:\r\n        default: API Access Log retention\r\n      pAPIGatewayAccountRole:\r\n        default: Create a Cloudwatch Logs role for API Gateway?\r\n      pEnableWAF:\r\n        default: Enable AWS WAF on the API?\r\n      pVPCID:\r\n        default: VPC ID \r\n      pLambdaSubnetIDs:\r\n        default: List of Lambda function VPC subnets\r\n      pCreateDDBEndpoint:\r\n        default: Create DDB VPC endpoint?\r\n      pLambdaSubnetRouteTable:\r\n        default: ID of the route table to update with DDB endpoint\r\n\r\nParameters:\r\n  pTrustedPrincipals:\r\n    Description: \u003e-\r\n      For access using assume role: The list of principals (AWS accounts or ARNs) that\r\n      can assume the API execution role\r\n    Type: CommaDelimitedList\r\n    Default: Nobody\r\n  pAPIAccessList:\r\n    Description: \u003e-\r\n      For direct access from the client: List of principals that will be explicitly \r\n      granted access to the API via resource policy\r\n    Type: String\r\n    Default: 'None'\r\n    AllowedPattern: '^[a-zA-Z0-9\\-,_:\\/]*$'\r\n  pAllowedVPCEndpoints:\r\n    Description: \u003e-\r\n      Comma separated whitelist of VPC endpoint IDs that will be added to the condition \r\n      on the API Gateway resource policy. \r\n    Type: String\r\n    Default: 'None'\r\n    AllowedPattern: '^[a-zA-Z0-9\\-,]*$'\r\n  pAPIStageName:\r\n    Description: API stage name (first component of the API path).\r\n    Type: String\r\n    Default: Prod\r\n    AllowedPattern: '^[a-zA-Z0-9\\-_]+$'\r\n  pAPIAccessLogRetention:\r\n    Description: Number of days to retain API Gateway access logs in CloudWatch\r\n    Type: Number\r\n    Default: 60\r\n    # Values as per https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-loggroup.html\r\n    AllowedValues:\r\n      - 1\r\n      - 3\r\n      - 5\r\n      - 7\r\n      - 14\r\n      - 30\r\n      - 60\r\n      - 90\r\n      - 120\r\n      - 150\r\n      - 180\r\n      - 365\r\n      - 400\r\n      - 545\r\n      - 731\r\n      - 1827\r\n      - 3653\r\n  pAPIGatewayAccountRole:\r\n    Description: \u003e-\r\n      Whether to create an account level role for API gateway allowing\r\n      Cloudwatch Logs access.  Required only if it has not already been set.\r\n    Type: String\r\n    Default: 'Yes'\r\n    AllowedValues:\r\n      - 'Yes'\r\n      - 'No'\r\n  pEnableWAF:\r\n    Description: Whether to enable AWS WAF on the API\r\n    Type: String\r\n    Default: 'Yes'\r\n    AllowedValues:\r\n      - 'Yes'\r\n      - 'No'\r\n  pVPCID:\r\n    Description: \u003e-\r\n      VPC ID in which to deploy the API backend Lambda function and DynamoDB endpoint.\r\n      This value is optional, if you do not specify a VPC there will be no VPC configuration\r\n      applied.\r\n    Type: String\r\n    Default: ''\r\n  pLambdaSubnetIDs:\r\n    Description: \u003e-\r\n      List of subnet IDs for the Lambda function ENIs. \r\n      Required only if you are deploying into a VPC.\r\n    Type: CommaDelimitedList\r\n    Default: ''\r\n  pCreateDDBEndpoint:\r\n    Description: \u003e-\r\n      Set to No if there is already a DDB endpoint in your VPC.\r\n      This is ignored if you are not deploying into a VPC.\r\n    Type: String\r\n    Default: 'Yes'\r\n    AllowedValues:\r\n      - 'Yes'\r\n      - 'No'\r\n  pLambdaSubnetRouteTable:\r\n    Description: \u003e-\r\n      ID of the route table to update with the DDB endpoint route.\r\n      Required only if you are deploying into a VPC and creating the DDB endpoint.\r\n    Type: String\r\n    Default: 'None'\r\n    AllowedPattern: '^(None|[a-zA-Z0-9\\-]*)$'\r\n\r\nConditions:\r\n  cHasAllowedEndpoints: !Not [!Equals [!Ref pAllowedVPCEndpoints, 'None']]\r\n  cAPIAccessSpecified: !Not [!Equals [!Ref pAPIAccessList, 'None']]\r\n  cRoleTrustSpecified: !Not [!Equals [!Select [0, !Ref pTrustedPrincipals], 'Nobody']]\r\n  cCreateAPIGatewayAccountRole: !Equals [!Ref pAPIGatewayAccountRole, 'Yes']\r\n  cEnableWAF: !Equals [!Ref pEnableWAF, 'Yes']\r\n  cDeployToVPC: !Not [!Equals [!Ref pVPCID, '']]\r\n  cCreateDDBEndpoint: !And \r\n    - !Condition cDeployToVPC\r\n    - !Equals [!Ref pCreateDDBEndpoint, 'Yes']\r\n  cUpdateRouteTable: !And\r\n    - !Condition cDeployToVPC\r\n    - !Not [!Equals [!Ref pLambdaSubnetRouteTable, 'None']]\r\n\r\nResources:\r\n  # CloudWatch Log group for API Gateway access logs\r\n  rAccessLogsGroup:\r\n    Type: AWS::Logs::LogGroup\r\n    Properties:\r\n      LogGroupName: !Sub '${AWS::StackName}-APIAccessLogs'\r\n      RetentionInDays: !Ref pAPIAccessLogRetention\r\n\r\n  # API Gateway account role, allowing CloudWatch logs access\r\n  rAPIGatewayAccountRole:\r\n    Type: AWS::IAM::Role\r\n    Condition: cCreateAPIGatewayAccountRole\r\n    Properties:\r\n      ManagedPolicyArns:\r\n        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs\r\n      AssumeRolePolicyDocument:\r\n        Version: '2012-10-17'\r\n        Statement:\r\n          - Effect: Allow\r\n            Principal:\r\n              Service: apigateway.amazonaws.com\r\n            Action: sts:AssumeRole\r\n\r\n  rAPIGatewayAccountSettings:\r\n    Type: AWS::ApiGateway::Account\r\n    Condition: cCreateAPIGatewayAccountRole\r\n    DependsOn: rAPI\r\n    Properties:\r\n      CloudWatchRoleArn: !GetAtt rAPIGatewayAccountRole.Arn\r\n\r\n  # A role that will be granted full invoke access to the API.  This is a simple\r\n  # way to enable access to the API, but does not need to be used.\r\n  # The trust policy will be set to this account, or the given ARNs specified\r\n  # in the pWhoToTrust parameter.\r\n  rAPIAccessRole:\r\n    Type: AWS::IAM::Role\r\n    Properties:\r\n      AssumeRolePolicyDocument:\r\n        Version: '2012-10-17'\r\n        Statement:\r\n          - Effect: Allow\r\n            Principal:\r\n              AWS:\r\n                # Trust the local account if no other ARN is specified\r\n                Fn::If:\r\n                  - cRoleTrustSpecified\r\n                  - Ref: pTrustedPrincipals\r\n                  - Ref: AWS::AccountId\r\n            Action: sts:AssumeRole\r\n\r\n  # The IAM policy attached to the above role.  This needs to be separated due\r\n  # to a circular dependency on the API resource which needs to be created\r\n  # first.\r\n  rAPIAccessPolicy:\r\n    Type: AWS::IAM::Policy\r\n    Properties:\r\n      Roles:\r\n        - !Ref rAPIAccessRole\r\n      PolicyName: !Sub '${AWS::StackName}-APIAccessPolicy'\r\n      PolicyDocument:\r\n        Version: '2012-10-17'\r\n        Statement:\r\n          - Effect: Allow\r\n            Action: execute-api:Invoke\r\n            Resource: !Sub \"arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${rAPI}/*\"\r\n\r\n  # API definition, using the Serverless Application Model\r\n  # Sets up IAM auth and a resource policy which controls access based on the\r\n  # defined roles and VPC endpoints.\r\n  rAPI:\r\n    Type: AWS::Serverless::Api\r\n    DependsOn: rAPIFunction\r\n    Properties:\r\n      AccessLogSetting:\r\n        DestinationArn: !GetAtt rAccessLogsGroup.Arn\r\n        # This configures a very detailed access log which is helpful in troubleshooting.\r\n        # https://aws.amazon.com/blogs/compute/troubleshooting-amazon-api-gateway-with-enhanced-observability-variables/\r\n        Format: \u003e-\r\n          { \"requestId\":\"$context.requestId\",\r\n          \"waf-error\":\"$context.waf.error\",\r\n          \"waf-status\":\"$context.waf.status\",\r\n          \"waf-latency\":\"$context.waf.latency\",\r\n          \"waf-response\":\"$context.waf.wafResponseCode\",\r\n          \"authenticate-error\":\"$context.authenticate.error\",\r\n          \"authenticate-status\":\"$context.authenticate.status\",\r\n          \"authenticate-latency\":\"$context.authenticate.latency\",\r\n          \"integration-error\":\"$context.integration.error\",\r\n          \"integration-status\":\"$context.integration.status\",\r\n          \"integration-latency\":\"$context.integration.latency\",\r\n          \"integration-requestId\":\"$context.integration.requestId\",\r\n          \"integration-integrationStatus\":\"$context.integration.integrationStatus\",\r\n          \"response-latency\":\"$context.responseLatency\",\r\n          \"ip\": \"$context.identity.sourceIp\",\r\n          \"caller\":\"$context.identity.caller\",\r\n          \"user\":\"$context.identity.user\",\r\n          \"arn\":\"$context.identity.userArn\",\r\n          \"account\":\"$context.identity.accountId\",\r\n          \"requestTime\":\"$context.requestTime\",\r\n          \"httpMethod\":\"$context.httpMethod\",\r\n          \"resourcePath\":\"$context.resourcePath\",\r\n          \"status\":\"$context.status\",\r\n          \"message\":\"$context.error.message\",\r\n          \"protocol\":\"$context.protocol\",\r\n          \"responseLength\":\"$context.responseLength\" }\r\n      # This will add the appropriate AWS_IAM security scheme to the API spec\r\n      Auth:\r\n        DefaultAuthorizer: AWS_IAM\r\n        InvokeRole: NONE\r\n      # SAM doesn't yet support VPCEndpointIds in the EndpointConfiguration.\r\n      # Once this is supported, this will create an additional DNS name to\r\n      # simplify API invocation.\r\n      EndpointConfiguration: PRIVATE\r\n      Name: !Sub '${AWS::StackName}-API'\r\n      StageName: !Ref pAPIStageName\r\n      # Enable API Gateway logging and metrics collection\r\n      MethodSettings:\r\n        - HttpMethod: '*'\r\n          ResourcePath: '/*'\r\n          LoggingLevel: INFO\r\n          MetricsEnabled: True\r\n      # Intrinsic functions like Fn::Split and Fn::Join don't yet work in the above Auth \r\n      # ResourcePolicy statement, so we need to define the resource policy using the \r\n      # OpenAPI spec and the x-amazon-apigateway-policy extension.\r\n      # https://github.com/aws/serverless-application-model/issues/1501\r\n      DefinitionBody:\r\n        openapi: \"3.0.1\"\r\n        info:\r\n          title: \"Private API Demo\"\r\n          version: \"0.1\"\r\n        paths:\r\n          /:\r\n            get:\r\n              # Set up a Lambda proxy integration.  See here for documentation:\r\n              # https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-extensions-integrations.html\r\n              x-amazon-apigateway-integration:\r\n                uri: !Sub \"arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${rAPIFunction.Arn}/invocations\"\r\n                content_handling: CONVERT_TO_TEXT\r\n                passthroughBehaviour: when_no_match\r\n                httpMethod: POST\r\n                type: aws_proxy\r\n        # API Gateway resource policy definition.  This policy allows access\r\n        # only to specified IAM principals coming from specified VPC endpoint IDs.\r\n        x-amazon-apigateway-policy:\r\n          Version: '2012-10-17'\r\n          Statement:\r\n            # This creates a list of allowed principal ARNs by joining together\r\n            # the list provided in the pAPIAccessList parameter to the ARN of\r\n            # the role created within this template (rAPIAccessRole)\r\n            - Effect: Allow\r\n              Principal:\r\n                AWS:\r\n                  Fn::Split:\r\n                    - ','\r\n                    - Fn::Join:\r\n                      - ','\r\n                      - - Fn::GetAtt: rAPIAccessRole.Arn\r\n                        - Fn::If:\r\n                          - cAPIAccessSpecified\r\n                          - Ref: pAPIAccessList\r\n                          - Ref: AWS::NoValue\r\n              Action: execute-api:Invoke\r\n              Resource: execute-api:/*\r\n            # This section creates the allow list for VPC endpoint IDs that are\r\n            # supplied through the pAllowedVPCEndpoints parameter.  It is\r\n            # implemented as a \"Deny if VPC endpoint is not in \u003clist\u003e\".\r\n            - Fn::If:\r\n              - cHasAllowedEndpoints\r\n              - Effect: Deny\r\n                Principal: \"*\"\r\n                Action: execute-api:Invoke\r\n                Resource: execute-api:/*\r\n                Condition:\r\n                  StringNotEquals:\r\n                    aws:SourceVpce:\r\n                      Fn::Split:\r\n                        - ','\r\n                        - Ref: pAllowedVPCEndpoints\r\n              - Ref: AWS::NoValue\r\n\r\n  # DynamoDB table\r\n  rDDBTable:\r\n    Type: AWS::Serverless::SimpleTable\r\n    Properties:\r\n      SSESpecification:\r\n        SSEEnabled: true\r\n        SSEType: KMS\r\n\r\n  # Definition of the Lambda function invoked through the API Gateway\r\n  rAPIFunction:\r\n    Type: AWS::Serverless::Function\r\n    Properties:\r\n      Handler: api-backend.handler\r\n      Runtime: python3.9\r\n      Description: Receives API requests for invocations through API Gateway\r\n      MemorySize: 128\r\n      Timeout: 10 \r\n      Events:\r\n        GetApi:\r\n          Type: Api\r\n          Properties:\r\n            Path: /\r\n            Method: GET\r\n            RestApiId: !Ref rAPI\r\n      CodeUri: python-backend-lambda/\r\n      Environment:\r\n        Variables:\r\n          DDB_TABLE: !Ref rDDBTable\r\n      VpcConfig:\r\n        # VPC Config is optional\r\n        Fn::If:\r\n          - cDeployToVPC\r\n          - SecurityGroupIds:\r\n            - !GetAtt rAPIFunctionSecurityGroup.GroupId\r\n            # Need to convert subnetID list to a string list\r\n            SubnetIds: !Split [',', !Join [',', !Ref pLambdaSubnetIDs]]\r\n          - !Ref AWS::NoValue\r\n      Policies:\r\n        - VPCAccessPolicy: {}\r\n        - DynamoDBCrudPolicy:\r\n            TableName: !Ref rDDBTable\r\n\r\n  # AWS WAF deployment with the AWS managed rules\r\n  rWAF:\r\n    Type: AWS::WAFv2::WebACL\r\n    Condition: cEnableWAF\r\n    Properties:\r\n      Name: !Sub '${AWS::StackName}-WAF-WebACL'\r\n      Scope: REGIONAL\r\n      Description: WAF WebACL with AWS Managed rules\r\n      DefaultAction:\r\n        Allow: {}\r\n      VisibilityConfig:\r\n        SampledRequestsEnabled: true\r\n        CloudWatchMetricsEnabled: true\r\n        MetricName: !Sub '${AWS::StackName}-API'\r\n      Rules:\r\n        - Name: AWSManagedWAFRules\r\n          Priority: 0\r\n          OverrideAction:\r\n            None: {}\r\n          VisibilityConfig:\r\n            SampledRequestsEnabled: true\r\n            CloudWatchMetricsEnabled: true\r\n            MetricName: !Sub '${AWS::StackName}-AWSCommon'\r\n          Statement:\r\n            ManagedRuleGroupStatement:\r\n              VendorName: AWS\r\n              Name: AWSManagedRulesCommonRuleSet\r\n              ExcludedRules: []\r\n\r\n  rWAFAssociation:\r\n    Type: AWS::WAFv2::WebACLAssociation\r\n    Condition: cEnableWAF\r\n    # rAPIStage is the SAM-generated logical ID for the API stage resource\r\n    DependsOn: rAPIStage\r\n    Properties:\r\n      ResourceArn: !Sub 'arn:aws:apigateway:${AWS::Region}::/restapis/${rAPI}/stages/${pAPIStageName}'\r\n      WebACLArn: !GetAtt rWAF.Arn\r\n\r\n  # OPTIONAL VPC resources\r\n  # The remaining resources are deployed only if the function is being connected to a VPC\r\n\r\n  # VPC Prefix list helper custom resource.  Source:\r\n  # This looks up the AWS managed prefix list for DynamoDB in the local region\r\n  # https://github.com/awslabs/aws-cloudformation-templates/tree/master/aws/solutions/PrefixListResource\r\n  rGetPLResourceFunction:\r\n    Type: AWS::Serverless::Function\r\n    Condition: cDeployToVPC\r\n    Properties:\r\n      Description: Retrieve prefix lists for use in Security Groups\r\n      Runtime: python3.9\r\n      Handler: lambda_function.handler\r\n      CodeUri: prefix-list-resource/.build/\r\n      Timeout: 300\r\n      Environment:\r\n        Variables:\r\n          Logging: Debug\r\n      Policies:\r\n        - Version: '2012-10-17'\r\n          Statement:\r\n            - Effect: Allow\r\n              Action: ec2:DescribePrefixLists\r\n              Resource: \"*\"\r\n\r\n  # Execute the prefix list helper to retrieve the local DDB prefix list ID\r\n  rDDBPrefixListID:\r\n    Type: Custom::GetPLResource\r\n    Condition: cDeployToVPC\r\n    Properties:\r\n      ServiceToken: !GetAtt rGetPLResourceFunction.Arn\r\n      loglevel: debug\r\n      PrefixListName: !Sub 'com.amazonaws.${AWS::Region}.dynamodb'\r\n\r\n  # Security group for the API backend Lambda function\r\n  rAPIFunctionSecurityGroup:\r\n    Type: AWS::EC2::SecurityGroup\r\n    Condition: cDeployToVPC\r\n    Properties:\r\n      Tags:\r\n        - Key: Name\r\n          Value: !Sub '${AWS::StackName}-APIBackend-SecurityGroup'\r\n      GroupDescription: Control API backend function network access\r\n      VpcId: !Ref pVPCID\r\n      SecurityGroupEgress:\r\n        - Description: Allow DNS outbound\r\n          CidrIp: 0.0.0.0/0\r\n          IpProtocol: udp\r\n          FromPort: 53\r\n          ToPort: 53\r\n        # Reference the DDB prefix list ID retrieved by the helper function \r\n        - Description: Allow DynamoDB outbound, using prefix list\r\n          IpProtocol: tcp\r\n          FromPort: 443\r\n          ToPort: 443\r\n          DestinationPrefixListId: !GetAtt rDDBPrefixListID.PrefixListID\r\n\r\n  # DynamoDB gateway endpoint\r\n  rDDBEndpoint:\r\n    Type: AWS::EC2::VPCEndpoint\r\n    Condition: cCreateDDBEndpoint\r\n    Properties:\r\n      VpcEndpointType: Gateway\r\n      VpcId: !Ref pVPCID\r\n      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.dynamodb'\r\n      RouteTableIds:\r\n        - Fn::If:\r\n          - cUpdateRouteTable\r\n          - Ref: pLambdaSubnetRouteTable\r\n          - Ref: AWS::NoValue\r\n      # Allow access only to our specific DDB table\r\n      PolicyDocument:\r\n        Version: '2012-10-17'\r\n        Statement:\r\n          - Effect: Allow\r\n            Principal: '*'\r\n            Action: \r\n              - dynamodb:Batch*\r\n              - dynamodb:DeleteItem\r\n              - dynamodb:DescribeTable\r\n              - dynamodb:GetItem\r\n              - dynamodb:PutItem\r\n              - dynamodb:Query\r\n              - dynamodb:Scan\r\n              - dynamodb:UpdateItem\r\n            Resource: !GetAtt rDDBTable.Arn\r\n\r\nOutputs:\r\n  APIGatewayID:\r\n    Description: API Gateway ID\r\n    Value: !Ref rAPI\r\n  APIGatewayFQDN:\r\n    Description: Fully qualified domain name of the API Gateway\r\n    Value: !Sub '${rAPI}.execute-api.${AWS::Region}.amazonaws.com'\r\n  APIAccessRole:\r\n    Description: ARN of the access role for the function to assume\r\n    Value: !GetAtt rAPIAccessRole.Arn\r\n",
			"canonicalURL": "/github.com/aws-samples/aws-cross-account-private-api-demo@e9b27bfe3654252319c95eb551b4c6cbdaf4500e/-/blob/api-backend/api-backend.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/aws-samples/aws-cross-account-private-api-demo/blob/e9b27bfe3654252319c95eb551b4c6cbdaf4500e/api-backend/api-backend.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse version: at api-backend/api-backend.yaml:17:1: invalid version: invalid major version: strconv.Atoi: parsing \"\": invalid syntax"
}