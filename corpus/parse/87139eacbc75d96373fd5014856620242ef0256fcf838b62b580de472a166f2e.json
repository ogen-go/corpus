{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/dcsaorg/DCSA-OpenAPI"
		},
		"file": {
			"name": "ovs_v3.0.0-Beta-1.yaml",
			"size": 0,
			"path": "ovs/v3/ovs_v3.0.0-Beta-1.yaml",
			"byteSize": 20152,
			"content": "openapi: 3.0.3\ninfo:\n  version: 3.0.0-Beta-1\n  title: 'DCSA OpenAPI specification for Operational Vessel Schedules'\n  description: |\n    API specification issued by DCSA.org\n    \n    This API supports \u003cb\u003eOVS\u003c/b\u003e (Operational Vessel Schedules)\n    \n    OVS is used for sharing Vessel schedules. The Interface Standards for OVS can be read *** [here](https://dcsa.org/wp-content/uploads/2020/07/DCSA-Interface-Standard-for-Operational-Vessel-Schedules-1.0-vF.pdf) ***(Needs to be updated).\n\n    For explanation to specific values or objects please refer to the Information Model v2022.2 *** Will be updated early July ***\n\n    For a changelog please click [here](https://github.com/dcsaorg/DCSA-OpenAPI/blob/master/ovs/v3#v300). Please also [create a GitHub issue](https://github.com/dcsaorg/DCSA-OpenAPI/issues/new) if you have any questions/comments.\n\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  contact:\n    name: Digital Container Shipping Association (DCSA)\n    url: https://dcsa.org\n    email: info@dcsa.org\ntags:\n  - name: Operational Vessel Schedules\n    description: Operational Vessel Schedules operations\n  # - name: Events\npaths:\n  /v3/service-schedules:\n    get:\n      tags:\n        - Operational Vessel Schedules\n      summary: Get a list of Schedules\n      description: |\n        Get a list of service schedules. The result is `Vessel-Centric` - this means that the `Vessel` is in the top of the hierarchy of the response structure. A service is a heirarchical structure with the following elements:\n        - One or more `Services` which can contain one or more `Vessels`\n        - A `Vessel` which can call multiple `Ports` (`TransportCalls`).\n        - A `Port` (`TransportCall`) can contain one or more `TimeStamps`.\n\n        The number of service schedules in the list can be narrowed down by providing filter parameters. The resulting payload will always include **entire voyage(s) being matched**. This means that even though a filter only matches a single `Port` in a `Voyage` or a single `Timestamp` within a `Port` in a `Voyage` - **the entire Voyage matched** is returned. If the `carrierImportVoyageNumber` of the `Port` differs from the `carrierExportVoyageNumber` of the `Port` then the **entire Voyage** for both these Voyage numbers are included.\n        \n        An example of this is when `\u0026UNLocationCode=DEHAM` is used as a filter parameter. In this case **entire Voyages** would be listed where `DEHAM` is a `Port`.\n        \n        Be aware that it is possible to specify filters that are mutially exclusive resulting in an empty response list. An example of this could be when both using `vesselIMONumber` and `vesselName` filters at the same time:\n        \n            \u0026vesselIMONumber=9321483\u0026vesselName=King of the Seas\n            \n        If no `Vessel` exists where `vesselIMONumber` is **9321483** and `vesselName` is **King of the Seas** then the result will be an empty list\n        \n        If no `startDate` filter is provided then **3 months** prior to the request data is used. If no `endDate` filters is provided then **6 months** after the request date is used.\n      parameters:\n        - in: query\n          name: carrierServiceCode\n          description: |\n            The internal carrier service code to filter by. The result will only return schedules including the service code\n          schema:\n            $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.1#/components/schemas/carrierServiceCode'\n        - in: query\n          name: universalServiceReference\n          description: |\n            The **U**niversal **S**ervice **R**eference (`USR`) as defined by **DCSA** to filter by. The service code must match the regular expression pattern: `SR\\d{5}[A-Z]`. The letters `SR` followed by `5 digits`, followed by a checksum-character as a capital letter from `A to Z`. The result will only return schedules including the service reference\n          schema:\n            $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.1#/components/schemas/universalServiceReference'\n        - in: query\n          name: vesselIMONumber\n          description: |\n            The identifier of a vessel. The result will only return schedules including the vessel with the specified IMO number.\n            \n            It is not a requirement for dummy vessels to have an `IMO Number`. In this case filtering by `vesselName` should be used.\n          schema:\n            $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.1#/components/schemas/vesselIMONumber'\n        - in: query\n          name: vesselName\n          description: |\n            The name of a vessel. The result will only return schedules including the vessel with the specified name.\n            \n            Be aware that the `vesselName` is not unique and might match multiple vessels. If possible, filtering by `IMO Number` is preferred.\n            \n            In case of dummy vessels an `IMO Number` might not exist in which case this filter is to be used.\n          schema:\n            $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.1#/components/schemas/vesselName'\n        - in: query\n          name: carrierVoyageNumber\n          description: |\n            The carrier specific identifier of a `Voyage` - can be both **importVoyageNumber** and **exportVoyageNumber**. The result will only return schedules including the `Ports` where `carrierVoyageNumber` is either `carrierImportVoyageNumber` or `carrierExportVoyageNumber`\n          schema:\n            $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.1#/components/schemas/carrierVoyageNumber'\n        - in: query\n          name: universalVoyageReference\n          description: |\n            The Universal Reference of a `Voyage` - can be both **importUniversalVoyageReference** and **exportUniversalVoyageReference**. The result will only return schedules including the `Ports` where `universalVoyageReference` is either `importUniversalVoyageReference` or `exportUniversalVoyageReference`\n          schema:\n            $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.1#/components/schemas/universalVoyageReference'\n        - in: query\n          name: UNLocationCode\n          description: |\n            The `UN Location Code` specifying where a port is located.\n            \n            Specifying this filter will only return schedules including **entire Voyages** related to this particular `UN Location Code`.\n          example: NLRTM\n          schema:\n            $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.1#/components/schemas/UNLocationCode'\n        - in: query\n          name: facilitySMDGCode\n          description: |\n            The `facilitySMDGCode` specifying a specific facility (using SMDG Code). Be aware that the `facilitySMDGCode` does not contain a `UNLocationCode` - this must be specified in the `UNLocationCode` filter.\n            \n            Specifying this filter will only return schedules including **entire Voyages** related to this particular `facilitySMDGCode`.\n          example: APM\n          schema:\n            $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.1#/components/schemas/UNLocationCode'\n        - $ref: '#/components/parameters/startDate'\n        - $ref: '#/components/parameters/endDate'\n\n        # Chunk with pagination parameters needed to be included in all APIs\n        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.1#/components/parameters/limit'\n        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.1#/components/parameters/cursor'\n        - $ref: '#/components/parameters/Api-Version-Major'\n      responses:\n        '200':\n          description: Schedule successfully posted\n          headers:\n            API-Version:\n              $ref: '#/components/headers/API-Version'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/serviceSchedule'\n              # examples:\n              #   Sliding:   # Example 1\n              #     value:\n              #       id: 10\n              #       name: example coming\n              #   PhaseIn PhaseOut:       # Example 2\n              #     value:\n              #       id: 11\n              #       name: example coming\n        default:\n          description: Unexpected error\n          headers:\n            API-Version:\n              $ref: '#/components/headers/API-Version'\n          content:\n            application/json:\n              schema:\n                $ref: 'https://api.swaggerhub.com/domains/dcsaorg/ERROR_DOMAIN/1.1.0#/components/schemas/error'\n\ncomponents:\n  headers:\n    API-Version:\n      schema:\n        type: string\n        example: '3.0.0'\n      description: SemVer used to indicate the version of the contract (API version) returned.\n  parameters: \n\n    ##############\n    # Query params\n    ##############\n\n    Api-Version-Major:\n      in: header\n      name: API-Version\n      required: false\n      schema:\n        type: string\n        example: '3'\n      description: |\n        An API-Version header MAY be added to the request (optional); if added it MUST only contain MAJOR version. API-Version header MUST be aligned with the URI version.\n    endDate:\n      in: query\n      name: endDate\n      description: |\n        The end date of the period for which schedule information is requested. If a date of any Timestamp (`ATA`, `ETA` or `PTA`) inside a `PortCall` matches a date on or before (`≤`) the `endDate` the **entire Voyage**(import- and export-Voyage) matching the `PortCall` will be included in the result. All matching is done towards local Date at the place of the port call.\n        \n        If this filter is not provided the default value is **6 months** after request time.\n        \n        The value is populated in `ISO 8601` date format.\n      required: false\n      schema:\n        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.1#/components/schemas/startDate'\n    startDate:\n      in: query\n      name: startDate\n      description: |\n        The start date of the period for which schedule information is requested. If a date of any Timestamp (`ATA`, `ETA` or `PTA`) inside a `PortCall` matches a date on or after (`≥`) the `startDate` the **entire Voyage** (import- and export-Voyage) matching the `PortCall` will be included in the result. All matching is done towards local Date at the place of the port call.\n        \n        If this filter is not provided the default value is **3 months** prior to request time.\n        \n        The value is populated in `ISO 8601` date format.\n      required: false\n      schema:\n        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.1#/components/schemas/startDate'\n  schemas:\n    serviceSchedule:\n      type: object\n      allOf:\n        - type: object\n          properties:\n            carrierServiceName:\n              allOf:\n                - $ref: '#/components/schemas/carrierServiceName'\n        - type: object\n          properties:\n            carrierServiceCode:\n              allOf:\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.1#/components/schemas/carrierServiceCode'\n        - type: object\n          properties:\n            universalServiceReference:\n              allOf:\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.1#/components/schemas/universalServiceReference'\n        - $ref: '#/components/schemas/vesselSchedules'\n      required:\n        - carrierServiceName\n    vesselSchedules:\n      type: object\n      properties:\n        vesselSchedules:\n          type: array\n          items:\n            $ref: '#/components/schemas/vesselSchedule'\n    vesselSchedule:\n      type: object\n      allOf:\n        - type: object\n          properties:\n            vesselOperatorSMDGLinerCode:\n              allOf:\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.1#/components/schemas/vesselOperatorSMDGLinerCode'\n        - type: object\n          properties:\n            vesselIMONumber:\n              allOf:\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.1#/components/schemas/vesselIMONumber'\n        # Extends the description of VesselIMONumber\n        - type: object\n          properties:\n            vesselIMONumber:\n              description: |\n                The unique reference for a registered Vessel. The reference is the International Maritime Organisation (IMO) number, also sometimes known as the Lloyd's register code, which does not change during the lifetime of the vessel\n                \n                **Condition**: If the vessel is not dummy, there needs to be an IMO. If the vessel is dummy, the IMO is optional. \n        - type: object\n          properties:\n            vesselName:\n              allOf:\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.1#/components/schemas/vesselName'\n        - type: object\n          properties:\n            vesselCallSign:\n              allOf:\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.1#/components/schemas/vesselCallSign'\n        - type: object\n          properties:\n            isDummyVessel:\n              allOf:\n                - $ref: '#/components/schemas/isDummyVessel'\n        - $ref: '#/components/schemas/transportCalls'\n      required:\n        - vesselOperatorSMDGCode\n        - isDummyVessel\n    transportCalls:\n      type: object\n      properties:\n        transportCalls:\n          type: array\n          items:\n            $ref: '#/components/schemas/transportCall'\n    transportCall:\n      type: object\n      description: |\n        A transportCall in the schedule. A transportCall can be either just a Port or further specified as a terminalCall.\n        \n        The order of the list is the sequence of the list\n      allOf:\n        - type: object\n          properties:\n            portVisitReference:\n              allOf:\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.1#/components/schemas/portVisitReference'\n        - type: object\n          properties:\n            transportCallReference:\n              allOf:\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.1#/components/schemas/transportCallReference'\n        # Extends the description of TransportCall\n        - type: object\n          properties:\n            transportCallReference:\n              description: |\n                The unique reference for a transport call. It’s the vessel operator responsibility to provide the Transport Call Reference, other parties are obliged to pick it up and use it. \n        - type: object\n          properties:\n            carrierImportVoyageNumber:\n              allOf:\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.1#/components/schemas/carrierImportVoyageNumber'\n        - type: object\n          properties:\n            carrierExportVoyageNumber:\n              allOf:\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.1#/components/schemas/carrierExportVoyageNumber'\n        - type: object\n          properties:\n            universalImportVoyageReference:\n              allOf:\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.1#/components/schemas/universalImportVoyageReference'\n        - type: object\n          properties:\n            universalExportVoyageReference:\n              allOf:\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.1#/components/schemas/universalExportVoyageReference'\n        - type: object\n          properties:\n            location:\n              allOf:\n                - $ref: '#/components/schemas/location'\n        - type: object\n          properties:\n            statusCode:\n              type: string\n              description: |\n                The set of codes in `Status Code` are ONLY meant to communicate any change / exception to the published schedule. This is not required in case of normal schedule. Possible values are:\n                \n                - OMIT (Omit)\n                - BLNK (Blank)\n                - ADHO (Ad Hoc)\n                - PHOT (Phase Out)\n                - PHIN (Phase In)\n                - SLID (Sliding)\n                - ROTC (Rotation Change)\n\n                More details can be found on [GitHub](https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/portcallstatuscode.csv)\n              enum:\n                - OMIN\n                - PHIN\n                - PHOT\n                - ADHO\n                - BLNK\n                - SLID\n                - ROTC\n              example: OMIT\n        # - type: object\n        #   properties:\n        #     delayReasonCode:\n        #       $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.1#/components/schemas/delayReasonCode'\n        # - type: object\n        #   properties:\n        #     changeRemark:\n        #       $ref: 'https://api.swaggerhub.com/domains/dcsaorg/EVENT_DOMAIN/2.0.0#/components/schemas/changeRemark'\n        - $ref: '#/components/schemas/timestamps'\n      required:\n        - transportCallReference\n        - carrierImportVoyageNumber\n    timestamps:\n      type: object\n      properties:\n        timestamps:\n          type: array\n          items:\n            allOf:\n              - $ref: '#/components/schemas/timestamp'\n    timestamp:\n      type: object\n      description: |\n        A timestamp for a port\n      allOf:\n        - type: object\n          properties:\n            eventTypeCode:\n              allOf:\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/EVENT_DOMAIN/2.0.1#/components/schemas/transportEventTypeCode'\n        - type: object\n          properties:\n            eventClassifierCode:\n              allOf:\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/EVENT_DOMAIN/2.0.1#/components/schemas/eventClassifierCode'\n                - enum:\n                  - ACT\n                  - EST\n                  - PLN\n        - type: object\n          properties:\n            eventDateTime:\n              type: string\n              format: date-time\n              description: |\n                Time in the timstamp\n              example: '2025-01-14T09:21:00+01:00'\n        - type: object\n          properties:\n            delayReasonCode:\n              allOf:\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.1#/components/schemas/delayReasonCode'\n        - type: object\n          properties:\n            changeRemark:\n              allOf:\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/EVENT_DOMAIN/2.0.1#/components/schemas/changeRemark'\n      required:\n        - eventClassifierCode\n        - eventTypeCode\n        - eventDateTime\n    location:\n      type: object\n      description: |\n        General purpose object to capture location-related data, the location can be specified in any of the following ways: `UN Location Code`, a `Facility` or an `Address`.\n      anyOf:\n        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/LOCATION_DOMAIN/2.0.1#/components/schemas/unLocationLocation'\n        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/LOCATION_DOMAIN/2.0.1#/components/schemas/facilitySMDGLocation'\n        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/LOCATION_DOMAIN/2.0.1#/components/schemas/addressLocation'\n      example:\n        UNLocationCode: NLRTM\n        facilitySMDGCode: RWG\n    isDummyVessel:\n      type: boolean\n      description: |\n        Is this a dummy vessel. In case no vessel has been asigned yet - this property can be set to `true` indicating that the vesselIMONumber does not exist.\n    carrierServiceName:\n      type: string\n      maxLength: 50\n      description: |\n        The name of the service \n      example: Great Lion Service\n",
			"canonicalURL": "/github.com/dcsaorg/DCSA-OpenAPI@1b8811d1099e42001cfe448916330eab6f260472/-/blob/ovs/v3/ovs_v3.0.0-Beta-1.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/dcsaorg/DCSA-OpenAPI/blob/1b8811d1099e42001cfe448916330eab6f260472/ovs/v3/ovs_v3.0.0-Beta-1.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"timestamps\": parse schema: property \"timestamps\": parse schema: parse schema: parse schema: parse schema: parse schema: property \"eventTypeCode\": parse schema: parse schema: at 1:3554: external \"https://api.swaggerhub.com/domains/dcsaorg/EVENT_DOMAIN/2.0.1\": get: https: do: Get \"https://api.swaggerhub.com/domains/dcsaorg/EVENT_DOMAIN/2.0.1\": host \"api.swaggerhub.com\" is not allowed"
}