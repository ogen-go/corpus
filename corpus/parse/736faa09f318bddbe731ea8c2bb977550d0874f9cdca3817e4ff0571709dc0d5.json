{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/deepmap/oapi-codegen"
		},
		"file": {
			"name": "components.yaml",
			"size": 0,
			"path": "internal/test/components/components.yaml",
			"byteSize": 14750,
			"content": "openapi: \"3.0.1\"\ninfo:\n  version: 1.0.0\n  title: Test Server\n  license:\n    name: MIT\npaths:\n  /ensure-everything-is-referenced:\n    get:\n      operationId: ensureEverythingIsReferenced\n      description: |\n        This endpoint exists so that components can be created in this\n        spec and not be pruned\n    # TODO: figure out why uncommenting this causes failures\n    #   parameters:\n    #     - $ref: \"#/components/parameters/ParameterObject\"\n      requestBody:\n        $ref: \"#/components/requestBodies/RequestBody\"\n      responses:\n        200:\n          description: placeholder\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  one:\n                    $ref: \"#/components/schemas/AdditionalPropertiesObject1\"\n                  two:\n                    $ref: \"#/components/schemas/AdditionalPropertiesObject2\"\n                  three:\n                    $ref: \"#/components/schemas/AdditionalPropertiesObject3\"\n                  four:\n                    $ref: \"#/components/schemas/AdditionalPropertiesObject4\"\n                  five:\n                    $ref: \"#/components/schemas/AdditionalPropertiesObject5\"\n                  six:\n                    $ref: \"#/components/schemas/AdditionalPropertiesObject6\"\n                  oneOf1:\n                    $ref: \"#/components/schemas/OneOfObject1\"\n                  oneOf2:\n                    $ref: \"#/components/schemas/OneOfObject2\"\n                  oneOf3:\n                    $ref: \"#/components/schemas/OneOfObject3\"\n                  oneOf4:\n                    $ref: \"#/components/schemas/OneOfObject4\"\n                  oneOf5:\n                    $ref: \"#/components/schemas/OneOfObject5\"\n                  oneOf6:\n                    $ref: \"#/components/schemas/OneOfObject6\"\n                  oneOf7:\n                    $ref: \"#/components/schemas/OneOfObject7\"\n                  oneOf8:\n                    $ref: \"#/components/schemas/OneOfObject8\"\n                  oneOf9:\n                    $ref: \"#/components/schemas/OneOfObject9\"\n                  oneOf10:\n                    $ref: \"#/components/schemas/OneOfObject10\"\n                  oneOf11:\n                    $ref: \"#/components/schemas/OneOfObject11\"\n                  oneOf12:\n                    $ref: \"#/components/schemas/OneOfObject12\"\n                  anyOf1:\n                    $ref: \"#/components/schemas/AnyOfObject1\"\n                  jsonField:\n                    $ref: \"#/components/schemas/ObjectWithJsonField\"\n        default:\n          $ref: \"#/components/responses/ResponseObject\"\n  /params_with_add_props:\n    get:\n      operationId: ParamsWithAddProps\n      description: |\n        A path with parameters and a body which require additional properties\n      parameters:\n        - name: p1\n          description: |\n            This parameter has additional properties\n          in: query\n          required: true\n          style: simple\n          schema:\n            type: object\n            additionalProperties: true\n        - name: p2\n          description: |\n            This parameter has an anonymous inner property which needs to be\n            turned into a proper type for additionalProperties to work\n          in: query\n          required: true\n          schema:\n            properties:\n              inner:\n                type: object\n                additionalProperties:\n                  type: string\n            required: [inner]\n      responses:\n        default:\n          description: placeholder\n          content:\n            text/plain:\n              schema:\n                type: string\n    post:\n      operationId: BodyWithAddProps\n      description: |\n        Has a request body which contains a direct additionalProperties, and\n        an anonymous inner property with additionalProperties\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              properties:\n                name:\n                  type: string\n                inner:\n                  type: object\n                  additionalProperties:\n                    type: integer\n              required: [name, inner]\n              additionalProperties: true\n      responses:\n        default:\n          description: placeholder\n          content:\n            text/plain:\n              schema:\n                type: string\ncomponents:\n  schemas:\n    SchemaObject:\n      properties:\n        role:\n          type: string\n        firstName:\n          type: string\n        readOnlyRequiredProp:\n          description: |\n            This property is required and readOnly, so the go model should have it as a pointer, \n            as it will not be included when it is sent from client to server.\n          type: string\n          readOnly: true\n        writeOnlyRequiredProp:\n          type: integer\n          writeOnly: true\n      required:\n        - role\n        - firstName\n        - readOnlyRequiredProp\n        - writeOnlyRequiredProp\n    AdditionalPropertiesObject1:\n      description: Has additional properties of type int\n      type: object\n      properties:\n        name:\n          type: string\n        id:\n          type: integer\n        optional:\n          type: string\n      required: [name, id]\n      additionalProperties:\n        type: integer\n    AdditionalPropertiesObject2:\n      description: Does not allow additional properties\n      type: object\n      properties:\n        name:\n          type: string\n        id:\n          type: integer\n      required: [name, id]\n      additionalProperties: false\n    AdditionalPropertiesObject3:\n      description: Allows any additional property\n      type: object\n      properties:\n        name:\n          type: string\n      required: [name]\n      additionalProperties: true\n    AdditionalPropertiesObject4:\n      description: Has anonymous field which has additional properties\n      type: object\n      properties:\n        name:\n          type: string\n        inner:\n          type: object\n          properties:\n            name:\n              type: string\n          required: [name]\n          additionalProperties: true\n      required: [inner, name]\n      additionalProperties: true\n    AdditionalPropertiesObject5:\n      description: Has additional properties with schema for dictionaries\n      type: object\n      additionalProperties:\n        $ref: '#/components/schemas/SchemaObject'\n    AdditionalPropertiesObject6:\n      description: Array of object with additional properties\n      type: array\n      items:\n        type: object\n        additionalProperties:\n          $ref: '#/components/schemas/SchemaObject'\n    OneOfObject1:\n      description: oneOf with references and no disciminator\n      oneOf:\n        - $ref: '#/components/schemas/OneOfVariant1'\n        - $ref: '#/components/schemas/OneOfVariant2'\n        - $ref: '#/components/schemas/OneOfVariant3'\n    OneOfObject2:\n      description: oneOf with inline elements\n      oneOf:\n        - type: object\n          properties:\n            name:\n              type: string\n        - type: array\n          items:\n            type: number\n        - type: boolean\n    OneOfObject3:\n      description: inline OneOf\n      type: object\n      properties:\n        union:\n          oneOf:\n            - $ref: '#/components/schemas/OneOfVariant1'\n            - $ref: '#/components/schemas/OneOfVariant2'\n            - $ref: '#/components/schemas/OneOfVariant3'\n    OneOfObject4:\n      description: oneOf plus fixed type - custom marshaling/unmarshaling\n      type: object\n      properties:\n        fixedProperty:\n          type: string\n      oneOf:\n        - $ref: '#/components/schemas/OneOfVariant1'\n        - $ref: '#/components/schemas/OneOfVariant2'\n        - $ref: '#/components/schemas/OneOfVariant3'\n    OneOfObject5:\n      description: oneOf with disciminator but no mapping\n      oneOf:\n        - $ref: '#/components/schemas/OneOfVariant4'\n        - $ref: '#/components/schemas/OneOfVariant5'\n      discriminator:\n        propertyName: discriminator\n    OneOfObject6:\n      description: oneOf with discriminator and mapping\n      oneOf:\n        - $ref: '#/components/schemas/OneOfVariant4'\n        - $ref: '#/components/schemas/OneOfVariant5'\n      discriminator:\n        propertyName: discriminator\n        mapping:\n          v4: '#/components/schemas/OneOfVariant4'\n          v5: '#/components/schemas/OneOfVariant5'\n    OneOfObject7:\n      description: array of oneOf\n      type: array\n      items:\n        oneOf:\n          - $ref: '#/components/schemas/OneOfVariant1'\n          - $ref: '#/components/schemas/OneOfVariant2'\n    OneOfObject8:\n      description: oneOf with fixed properties\n      type: object\n      properties:\n        fixed:\n          type: string\n      oneOf:\n        - $ref: '#/components/schemas/OneOfVariant1'\n        - $ref: '#/components/schemas/OneOfVariant2'\n    OneOfObject9:\n      description: oneOf with fixed descriminator\n      type: object\n      properties:\n        type:\n          type: string\n      oneOf:\n        - $ref: '#/components/schemas/OneOfVariant1'\n        - $ref: '#/components/schemas/OneOfVariant6'\n      discriminator:\n        propertyName: type\n        mapping:\n          v1: '#/components/schemas/OneOfVariant1'\n          v6: '#/components/schemas/OneOfVariant6'\n      required:\n        - type\n    OneOfObject10:\n      description: fixed properties, variable required - will compile, but not much sense\n      type: object\n      properties:\n        one:\n          type: string\n        two:\n          type: integer\n        three:\n          type: boolean\n      oneOf:\n        - required:\n            - one\n        - required:\n            - two\n            - three\n    OneOfObject11:\n      description: additional properties of oneOf\n      type: object\n      additionalProperties:\n        oneOf:\n          - type: boolean\n          - type: number\n          - type: string\n    OneOfObject12:\n      description: allOf of oneOfs\n      allOf:\n        - oneOf:\n            - type: string\n            - type: number\n        - oneOf:\n            - $ref: '#/components/schemas/OneOfVariant3'\n            - $ref: '#/components/schemas/OneOfVariant4'\n    AnyOfObject1:\n      description: simple anyOf case\n      anyOf:\n        - $ref: '#/components/schemas/OneOfVariant4'\n        - $ref: '#/components/schemas/OneOfVariant5'\n    OneOfVariant1:\n      type: object\n      properties:\n        name:\n          type: string\n      required:\n        - name\n    OneOfVariant2:\n      type: array\n      items:\n        type: integer\n    OneOfVariant3:\n      type: boolean\n    OneOfVariant4:\n      type: object\n      properties:\n        discriminator:\n          type: string\n        name:\n          type: string\n      required:\n        - discriminator\n        - name\n    OneOfVariant5:\n      type: object\n      properties:\n        discriminator:\n          type: string\n        id:\n          type: integer\n      required:\n        - discriminator\n        - id\n    OneOfVariant6:\n      type: object\n      properties:\n        values:\n          $ref: '#/components/schemas/OneOfVariant2'\n      required:\n        - values\n    ObjectWithJsonField:\n      type: object\n      properties:\n        name:\n          type: string\n        value1:\n          type: string\n          format: json\n        value2:\n          type: string\n          format: json\n      required: [name, value1]\n    Enum1:\n      description: |\n        Conflicts with Enum2, enum values need to be prefixed with type\n        name.\n      type: string\n      enum: [One, Two, Three]\n    Enum2:\n      description: |\n        Conflicts with Enum1, enum values need to be prefixed with type\n        name.\n      type: string\n      enum: [ Two, Three, Four ]\n    Enum3:\n      description: |\n        Enum values conflict with Enums above, need to be prefixed\n        with type name.\n      type: string\n      enum: [ Enum1One, Foo, Bar ]\n    Enum4:\n      description: |\n        No conflicts here, should have unmodified enums\n      type: string\n      enum: [ Cat, Dog, Mouse ]\n    Enum5:\n      description: |\n        Numerical enum\n      type: integer\n      enum: [ 5, 6, 7 ]\n    EnumUnion:\n      description: |\n        Two enums of the same type combined with allOf.\n      allOf:\n        - $ref: \"#/components/schemas/Enum1\"\n        - $ref: \"#/components/schemas/Enum2\"\n    EnumUnion2:\n      description: |\n        Two enums of the same type combined with allOf.\n      allOf:\n      - $ref: \"#/components/schemas/Enum1\"\n      - enum: [ Seven ]\n    FunnyValues:\n      description: Edge cases for enum names\n      type: string\n      enum:\n        - '*'\n        - '5'\n        - '\u0026'\n        - ''\n    RenameMe:\n      description: This schema should be renamed via x-go-name when generating\n      x-go-name: NewName\n      type: object\n      properties:\n        prop1:\n          type: string\n        prop2:\n          type: string\n      required: [prop1, prop2]\n    ReferenceToRenameMe:\n      description: When a Schema is renamed, $ref should refer to the new name\n      type: object\n      properties:\n        ToNewName:\n          $ref: \"#/components/schemas/RenameMe\"\n      required: [ToNewName]\n  responses:\n    ResponseObject:\n      x-go-name: RenamedResponseObject\n      description: A simple response object\n      content:\n        application/json:\n          schema:\n            properties:\n              Field:\n                $ref: \"#/components/schemas/SchemaObject\"\n            required: [ Field ]\n        text/plain:\n          schema:\n            type: string\n  parameters:\n    ParameterObject:\n      x-go-name: RenamedParameterObject\n      name: ParameterObject\n      description: a parameter\n      in: query\n      content:\n        application/json:\n          schema:\n            properties:\n              Field:\n                $ref: \"#/components/schemas/SchemaObject\"\n            required: [ Field ]\n        text/plain:\n          schema:\n            type: string\n    EnumParam1:\n      name: ParamEnum1\n      description: a parameter\n      in: query\n      schema:\n        type: string\n        enum: [on, off, both]\n    EnumParam2:\n      name: ParamEnum2\n      description: a parameter\n      in: query\n      schema:\n        type: string\n        enum: [ on, off, both ]\n    EnumParam3:\n      name: ParamEnum3\n      description: a parameter\n      in: query\n      schema:\n        type: string\n        enum: [ alice, eve, bob ]\n  requestBodies:\n    RequestBody:\n      x-go-name: RenamedRequestBody\n      content:\n        application/json:\n          schema:\n            properties:\n              Field:\n                $ref: \"#/components/schemas/SchemaObject\"\n            required: [ Field ]\n        text/plain:\n          schema:\n            type: string\n"
		}
	},
	"Error": "parse: parse spec: parse components: parameters: \"ParameterObject\": content: \"content\" map MUST only contain one entry"
}