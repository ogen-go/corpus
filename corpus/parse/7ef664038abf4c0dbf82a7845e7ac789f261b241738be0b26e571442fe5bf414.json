{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/JanssenProject/jans"
		},
		"file": {
			"name": "user-mgt-plugin-swagger.yaml",
			"size": 0,
			"path": "jans-config-api/plugins/docs/user-mgt-plugin-swagger.yaml",
			"byteSize": 7707,
			"content": "openapi: 3.0.1\ninfo:\n  title: Jans Config API - User-Mgt\n  contact:\n    name: Gluu Support\n    url: https://support.gluu.org\n    email: xxx@gluu.org\n  license:\n    name: Apache 2.0\n    url: https://github.com/JanssenProject/jans/blob/main/LICENSE\n  version: 1.0.0\nservers:\n- url: https://jans.io/\n  description: The Jans server\n  variables: {}\ntags:\n- name: Configuration – User Management\npaths:\n  /mgt/configuser:\n    get:\n      tags:\n      - Configuration – User Management\n      summary: Gets list of users\n      description: Gets list of users\n      operationId: get-user\n      parameters:\n      - name: limit\n        in: query\n        schema:\n          type: integer\n          format: int32\n          default: 50\n      - name: pattern\n        in: query\n        schema:\n          type: string\n          default: \"\"\n      - name: startIndex\n        in: query\n        schema:\n          type: integer\n          format: int32\n          default: 1\n      - name: sortBy\n        in: query\n        schema:\n          type: string\n      - name: sortOrder\n        in: query\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserPagedResult'\n        \"401\":\n          description: Unauthorized\n        \"500\":\n          description: InternalServerError\n      security:\n      - oauth2:\n        - https://jans.io/oauth/config/user.readonly\n    put:\n      tags:\n      - Configuration – User Management\n      summary: Update User\n      description: Update User\n      operationId: put-user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CustomUser'\n      responses:\n        \"200\":\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CustomUser'\n        \"401\":\n          description: Unauthorized\n        \"404\":\n          description: Not Found\n        \"500\":\n          description: InternalServerError\n      security:\n      - oauth2:\n        - https://jans.io/oauth/config/user.write\n    post:\n      tags:\n      - Configuration – User Management\n      summary: Create new User\n      description: Create new User\n      operationId: post-user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CustomUser'\n      responses:\n        \"201\":\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CustomUser'\n        \"401\":\n          description: Unauthorized\n        \"500\":\n          description: InternalServerError\n      security:\n      - oauth2:\n        - https://jans.io/oauth/config/user.write\n  /mgt/configuser/{inum}:\n    get:\n      tags:\n      - Configuration – User Management\n      summary: Get User by Inum\n      description: Get User by Inum\n      operationId: get-user-by-inum\n      parameters:\n      - name: inum\n        in: path\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CustomUser'\n        \"401\":\n          description: Unauthorized\n        \"404\":\n          description: Not Found\n        \"500\":\n          description: InternalServerError\n      security:\n      - oauth2:\n        - https://jans.io/oauth/config/user.readonly\n    delete:\n      tags:\n      - Configuration – User Management\n      summary: Delete User\n      description: Delete User\n      operationId: delete-user\n      parameters:\n      - name: inum\n        in: path\n        required: true\n        schema:\n          type: string\n      responses:\n        \"204\":\n          description: No Content\n        \"401\":\n          description: Unauthorized\n        \"404\":\n          description: Not Found\n        \"500\":\n          description: InternalServerError\n      security:\n      - oauth2:\n        - https://jans.io/oauth/config/user.delete\n    patch:\n      tags:\n      - Configuration – User Management\n      summary: Patch user properties by Inum\n      description: Patch user properties by Inum\n      operationId: patch-user-by-inum\n      parameters:\n      - name: inum\n        in: path\n        required: true\n        schema:\n          type: string\n      requestBody:\n        description: UserPatchRequest\n        content:\n          application/json-patch+json:\n            schema:\n              $ref: '#/components/schemas/UserPatchRequest'\n            example:\n            - jsonPatchString:\n                op: add\n                path: userId\n                value: test-user\n              customAttributes:\n              - name: \"name, displayName, birthdate, email\"\n                multiValued: true\n                values:\n                - string\n      responses:\n        \"200\":\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CustomUser'\n        \"401\":\n          description: Unauthorized\n        \"404\":\n          description: Not Found\n        \"500\":\n          description: InternalServerError\n      security:\n      - oauth2:\n        - https://jans.io/oauth/config/user.write\ncomponents:\n  schemas:\n    CustomObjectAttribute:\n      type: object\n      properties:\n        name:\n          type: string\n        multiValued:\n          type: boolean\n        values:\n          type: array\n          items:\n            type: object\n        value:\n          type: object\n        displayValue:\n          type: string\n    CustomUser:\n      type: object\n      properties:\n        dn:\n          type: string\n        userId:\n          type: string\n        updatedAt:\n          type: string\n          format: date-time\n        createdAt:\n          type: string\n          format: date-time\n        oxAuthPersistentJwt:\n          type: array\n          items:\n            type: string\n        customAttributes:\n          type: array\n          items:\n            $ref: '#/components/schemas/CustomObjectAttribute'\n        customObjectClasses:\n          type: array\n          items:\n            type: string\n        inum:\n          type: string\n        mail:\n          type: string\n        displayName:\n          type: string\n        jansStatus:\n          type: string\n        givenName:\n          type: string\n        userPassword:\n          type: string\n        status:\n          type: string\n        baseDn:\n          type: string\n    UserPagedResult:\n      type: object\n      properties:\n        start:\n          type: integer\n          format: int32\n        totalEntriesCount:\n          type: integer\n          format: int32\n        entriesCount:\n          type: integer\n          format: int32\n        entries:\n          type: array\n          items:\n            $ref: '#/components/schemas/CustomUser'\n    UserPatchRequest:\n      type: object\n      properties:\n        jsonPatchString:\n          type: string\n        customAttributes:\n          type: array\n          items:\n            $ref: '#/components/schemas/CustomObjectAttribute'\n  securitySchemes:\n    oauth2:\n      type: oauth2\n      flows:\n        clientCredentials:\n          tokenUrl: \"https://{op-hostname}/.../token\"\n          scopes:\n            https://jans.io/oauth/config/user.readonly: View user related information\n            https://jans.io/oauth/config/user.write: Manage user related information\n            https://jans.io/oauth/config/user.delete: Delete user related information\n",
			"canonicalURL": "/github.com/JanssenProject/jans@80fa911512d38cd28324f4941fcaa24634d4d35f/-/blob/jans-config-api/plugins/docs/user-mgt-plugin-swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/JanssenProject/jans/blob/80fa911512d38cd28324f4941fcaa24634d4d35f/jans-config-api/plugins/docs/user-mgt-plugin-swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/mgt/configuser\": get: operation \"get-user\": security: parse security scheme \"oauth2\": oauth2: flow \"clientCredentials\": at 1:1687: \"tokenUrl\" MUST be in the form of a URL: parse \"https://{op-hostname}/.../token\": invalid character \"{\" in host name"
}