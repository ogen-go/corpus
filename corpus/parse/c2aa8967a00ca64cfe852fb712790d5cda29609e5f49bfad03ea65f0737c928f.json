{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/briancaffey/django-step-by-step"
		},
		"file": {
			"name": "schema.yml",
			"size": 0,
			"path": "backend/static/openapi/schema.yml",
			"byteSize": 19443,
			"content": "openapi: 3.0.2\ninfo:\n  title: ''\n  version: ''\npaths:\n  /api/drf/fbv/posts/{id}/:\n    get:\n      operationId: retrieveget_post\n      description: Retrieve a single post\n      parameters:\n      - name: id\n        in: path\n        required: true\n        description: ''\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema: {}\n          description: ''\n      tags:\n      - api\n  /api/drf/fbv/posts/:\n    get:\n      operationId: listlist_posts\n      description: Retrieve a paginated list of posts with like info\n      parameters: []\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                type: array\n                items: {}\n          description: ''\n      tags:\n      - api\n  /api/drf/cbv/posts/:\n    get:\n      operationId: listPosts\n      description: ''\n      parameters:\n      - name: limit\n        required: false\n        in: query\n        description: Number of results to return per page.\n        schema:\n          type: integer\n      - name: offset\n        required: false\n        in: query\n        description: The initial index from which to return the results.\n        schema:\n          type: integer\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  count:\n                    type: integer\n                    example: 123\n                  next:\n                    type: string\n                    nullable: true\n                    format: uri\n                    example: http://api.example.org/accounts/?offset=400\u0026limit=100\n                  previous:\n                    type: string\n                    nullable: true\n                    format: uri\n                    example: http://api.example.org/accounts/?offset=200\u0026limit=100\n                  results:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Post'\n          description: ''\n      tags:\n      - api\n    post:\n      operationId: createPost\n      description: ''\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Post'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Post'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/Post'\n      responses:\n        '201':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Post'\n          description: ''\n      tags:\n      - api\n  /api/drf/cbv/posts/{id}/:\n    get:\n      operationId: retrievePost\n      description: ''\n      parameters:\n      - name: id\n        in: path\n        required: true\n        description: ''\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Post'\n          description: ''\n      tags:\n      - api\n    put:\n      operationId: updatePost\n      description: ''\n      parameters:\n      - name: id\n        in: path\n        required: true\n        description: ''\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Post'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Post'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/Post'\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Post'\n          description: ''\n      tags:\n      - api\n    patch:\n      operationId: partialUpdatePost\n      description: ''\n      parameters:\n      - name: id\n        in: path\n        required: true\n        description: ''\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Post'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Post'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/Post'\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Post'\n          description: ''\n      tags:\n      - api\n    delete:\n      operationId: destroyPost\n      description: ''\n      parameters:\n      - name: id\n        in: path\n        required: true\n        description: ''\n        schema:\n          type: string\n      responses:\n        '204':\n          description: ''\n      tags:\n      - api\n  /api/users/{id}/:\n    get:\n      operationId: retrieveget_user\n      description: Returns email and id for a single user\n      parameters:\n      - name: id\n        in: path\n        required: true\n        description: ''\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema: {}\n          description: ''\n      tags:\n      - api\n  /api/users/:\n    get:\n      operationId: listget_users\n      description: Get list of users\n      parameters: []\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                type: array\n                items: {}\n          description: ''\n      tags:\n      - api\n  /api/profile/:\n    get:\n      operationId: listget_profiles\n      description: Get profile for a single user\n      parameters: []\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                type: array\n                items: {}\n          description: ''\n      tags:\n      - api\n  /api/exception/:\n    post:\n      operationId: createtrigger_exception\n      description: Triggers an exception. used for testing\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema: {}\n          application/x-www-form-urlencoded:\n            schema: {}\n          multipart/form-data:\n            schema: {}\n      responses:\n        '201':\n          content:\n            application/json:\n              schema: {}\n          description: ''\n      tags:\n      - api\n  /api/email-admins/:\n    post:\n      operationId: createemail_admins\n      description: ''\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema: {}\n          application/x-www-form-urlencoded:\n            schema: {}\n          multipart/form-data:\n            schema: {}\n      responses:\n        '201':\n          content:\n            application/json:\n              schema: {}\n          description: ''\n      tags:\n      - api\n  /api/token/:\n    post:\n      operationId: createTokenObtainPair\n      description: 'Takes a set of user credentials and returns an access and refresh\n        JSON web\n\n        token pair to prove the authentication of those credentials.'\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TokenObtainPair'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/TokenObtainPair'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/TokenObtainPair'\n      responses:\n        '201':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TokenObtainPair'\n          description: ''\n      tags:\n      - api\n  /api/token/refresh/:\n    post:\n      operationId: createTokenRefresh\n      description: 'Takes a refresh type JSON web token and returns an access type\n        JSON web\n\n        token if the refresh token is valid.'\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TokenRefresh'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/TokenRefresh'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/TokenRefresh'\n      responses:\n        '201':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TokenRefresh'\n          description: ''\n      tags:\n      - api\n  /api/drf/fbv/posts/new/:\n    post:\n      operationId: createcreate_post\n      description: Create a single post\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema: {}\n          application/x-www-form-urlencoded:\n            schema: {}\n          multipart/form-data:\n            schema: {}\n      responses:\n        '201':\n          content:\n            application/json:\n              schema: {}\n          description: ''\n      tags:\n      - api\n  /api/drf/fbv/posts/{id}/like/:\n    post:\n      operationId: createlike_post\n      description: Like a post. Returns the post with like info.\n      parameters:\n      - name: id\n        in: path\n        required: true\n        description: ''\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema: {}\n          application/x-www-form-urlencoded:\n            schema: {}\n          multipart/form-data:\n            schema: {}\n      responses:\n        '201':\n          content:\n            application/json:\n              schema: {}\n          description: ''\n      tags:\n      - api\n  /api/drf/cbv/posts/{id}/like/:\n    post:\n      operationId: likePost\n      description: Like a post. Returns the post with like info.\n      parameters:\n      - name: id\n        in: path\n        required: true\n        description: ''\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Post'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Post'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/Post'\n      responses:\n        '201':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Post'\n          description: ''\n      tags:\n      - api\n  /api/activate/{uidb64}/{token}/:\n    post:\n      operationId: createverify_email\n      description: 'Function-based view for verifying new user''s email\n\n\n        This view should be called by a POST request from a frontend application'\n      parameters:\n      - name: uidb64\n        in: path\n        required: true\n        description: ''\n        schema:\n          type: string\n      - name: token\n        in: path\n        required: true\n        description: ''\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema: {}\n          application/x-www-form-urlencoded:\n            schema: {}\n          multipart/form-data:\n            schema: {}\n      responses:\n        '201':\n          content:\n            application/json:\n              schema: {}\n          description: ''\n      tags:\n      - api\n  /api/register/:\n    post:\n      operationId: createregister\n      description: Function-based view for registering a new user\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema: {}\n          application/x-www-form-urlencoded:\n            schema: {}\n          multipart/form-data:\n            schema: {}\n      responses:\n        '201':\n          content:\n            application/json:\n              schema: {}\n          description: ''\n      tags:\n      - api\n  /api/api/auth/jwt/token/:\n    post:\n      operationId: createTokenObtainPair\n      description: ''\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TokenObtainPair'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/TokenObtainPair'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/TokenObtainPair'\n      responses:\n        '201':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TokenObtainPair'\n          description: ''\n      tags:\n      - api\n  /api/api/auth/jwt/token/refresh/:\n    post:\n      operationId: createCookieTokenRefresh\n      description: ''\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CookieTokenRefresh'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/CookieTokenRefresh'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/CookieTokenRefresh'\n      responses:\n        '201':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CookieTokenRefresh'\n          description: ''\n      tags:\n      - api\n  /api/api/auth/jwt/token/logout/:\n    post:\n      operationId: createlogout\n      description: 'This view is called from the frontend to remove the refresh token\n\n        This effectively logs out the user'\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema: {}\n          application/x-www-form-urlencoded:\n            schema: {}\n          multipart/form-data:\n            schema: {}\n      responses:\n        '201':\n          content:\n            application/json:\n              schema: {}\n          description: ''\n      tags:\n      - api\n  /api/auth/jwt/token/:\n    post:\n      operationId: createTokenObtainPair\n      description: ''\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TokenObtainPair'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/TokenObtainPair'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/TokenObtainPair'\n      responses:\n        '201':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TokenObtainPair'\n          description: ''\n      tags:\n      - api\n  /api/auth/jwt/token/refresh/:\n    post:\n      operationId: createCookieTokenRefresh\n      description: ''\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CookieTokenRefresh'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/CookieTokenRefresh'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/CookieTokenRefresh'\n      responses:\n        '201':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CookieTokenRefresh'\n          description: ''\n      tags:\n      - api\n  /api/auth/jwt/token/logout/:\n    post:\n      operationId: createlogout\n      description: 'This view is called from the frontend to remove the refresh token\n\n        This effectively logs out the user'\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema: {}\n          application/x-www-form-urlencoded:\n            schema: {}\n          multipart/form-data:\n            schema: {}\n      responses:\n        '201':\n          content:\n            application/json:\n              schema: {}\n          description: ''\n      tags:\n      - api\n  /exception/:\n    post:\n      operationId: createtrigger_exception\n      description: Triggers an exception. used for testing\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema: {}\n          application/x-www-form-urlencoded:\n            schema: {}\n          multipart/form-data:\n            schema: {}\n      responses:\n        '201':\n          content:\n            application/json:\n              schema: {}\n          description: ''\n      tags:\n      - exception\n  /email-admins/:\n    post:\n      operationId: createemail_admins\n      description: ''\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema: {}\n          application/x-www-form-urlencoded:\n            schema: {}\n          multipart/form-data:\n            schema: {}\n      responses:\n        '201':\n          content:\n            application/json:\n              schema: {}\n          description: ''\n      tags:\n      - email-admins\n  /api/drf/fbv/posts/{id}/update/:\n    put:\n      operationId: updateupdate_post\n      description: Update a post\n      parameters:\n      - name: id\n        in: path\n        required: true\n        description: ''\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema: {}\n          application/x-www-form-urlencoded:\n            schema: {}\n          multipart/form-data:\n            schema: {}\n      responses:\n        '200':\n          content:\n            application/json:\n              schema: {}\n          description: ''\n      tags:\n      - api\n  /api/drf/fbv/posts/{id}/delete/:\n    delete:\n      operationId: destroydelete_post\n      description: Delete a post\n      parameters:\n      - name: id\n        in: path\n        required: true\n        description: ''\n        schema:\n          type: string\n      responses:\n        '204':\n          description: ''\n      tags:\n      - api\ncomponents:\n  schemas:\n    Post:\n      type: object\n      properties:\n        id:\n          type: integer\n          readOnly: true\n        body:\n          type: string\n          maxLength: 200\n        created_by:\n          type: object\n          properties:\n            email:\n              type: string\n              format: email\n              maxLength: 254\n            id:\n              type: integer\n              readOnly: true\n          required:\n          - email\n          readOnly: true\n        modified_on:\n          type: string\n          format: date-time\n          readOnly: true\n        liked:\n          type: boolean\n          readOnly: true\n        like_count:\n          type: integer\n          readOnly: true\n        image:\n          type: string\n          format: binary\n      required:\n      - body\n    TokenObtainPair:\n      type: object\n      properties:\n        email:\n          type: string\n        password:\n          type: string\n          writeOnly: true\n      required:\n      - email\n      - password\n    TokenRefresh:\n      type: object\n      properties:\n        refresh:\n          type: string\n        access:\n          type: string\n          readOnly: true\n      required:\n      - refresh\n    CookieTokenRefresh:\n      type: object\n      properties:\n        access:\n          type: string\n          readOnly: true\n",
			"canonicalURL": "/github.com/briancaffey/django-step-by-step@29f7480e0f3a495bebf5d6bf695fec7511325373/-/blob/backend/static/openapi/schema.yml",
			"externalURLs": [
				{
					"url": "https://github.com/briancaffey/django-step-by-step/blob/29f7480e0f3a495bebf5d6bf695fec7511325373/backend/static/openapi/schema.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/api/exception/\": at 1:10807: post: duplicate operationId: \"createtrigger_exception\""
}