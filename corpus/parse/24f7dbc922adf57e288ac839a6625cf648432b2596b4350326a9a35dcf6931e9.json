{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/commaai/comma-api"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi.yaml",
			"byteSize": 73435,
			"content": "openapi: 3.1.0\ninfo:\n  title: comma API\n  version: 3.1.0\n  termsOfService: https://comma.ai/terms\n  license:\n    name: MIT\n    url: https://opensource.org/licenses/MIT\n  x-logo:\n    url: https://api.comma.ai/images/logo-806c3186.png\n    altText: comma logo\nservers:\n  - url: 'https://api.comma.ai'\n    description: Production server\ntags:\n  - name: definitions\n    description: |\n      ### Dongle ID\n      A dongle ID is a 16-character alphanumeric identifier. Each comma device has a unique dongle ID. Authenticated\n      users also have a dongle ID associated with their profile. For example, `1a2b3c4d5e6f7a8b`.\n\n      ### Segment\n      A segment is one minute of driving. openpilot rotates log and camera files at this interval. Segments are\n      numbered in a 0-indexed fashion.\n      Segment names are of the form `dongle_id|YYYY-MM-DD--HH-MM-SS--N`, where `N` is the segment number. For example,\n      `1a2b3c4d5e6f7a8b|2019-01-01--00-00-00--0`.\n\n      ### Route\n      A route is a sequence of segments recorded while the device is \"onroad\" (between car ignition and off). Route\n      names are of the form `dongle_id|YYYY-MM-DD--HH-MM-SS`. For example, `1a2b3c4d5e6f7a8b|2019-01-01--00-00-00`.\n  - name: authentication\n    description: |\n      ### Public access\n      Some endpoints do not require authentication, or provide access to resources which may be marked as public. These\n      are listed with the `AuthPublic` security scheme.\n\n      ### User auth\n      Authenticated resources require a header comprised of a JWT and are listed with the `AuthUser` security scheme. A\n      token can be generated at https://jwt.comma.ai. Include a header formatted like the following in your requests:\n      ```\n      curl -H 'Authorization: JWT {{token}}' https://api.comma.ai/v1/me\n      ```\n\n      ### Device auth\n      Some resources are only accessible to openpilot devices. These endpoints are listed with the `AuthDevice` security\n      scheme. A device running openpilot may authenticate using the `/v2/pilotauth` endpoint.\n  - name: account\n    description: Get information about your account, including the devices you have access to.\n  - name: devices\n    description: Manage your devices.\n  - name: user management\n    description: Grant and revoke permissions for other users to access your devices.\n  - name: routes\n    description: List drives uploaded from your coma device.\n  - name: logs\n    description: |\n      Retrieve files uploaded from your devices.\n\n      ### Log types\n      For each segment of an openpilot drive, the following files are created:\n      | Type | Description |\n      | ---- | ----------- |\n      | `qcamera.ts` | Compressed road camera |\n      | `fcamera.hevc` | Road camera uncompressed |\n      | `dcamera.hevc` | Driver camera uncompressed |\n      | `ecamera.hevc` | Wide road camera uncompressed |\n      | `rlog.bz2` | Full openpilot logs - all messages published by every service |\n      | `qlog.bz2` | Decimated openpilot logs |\n\n      `dcamera.hevc` is not logged unless the \"Record and upload driver camera\" toggle is enabled. `qcamera.ts` and\n      `qlog.bz2` files are uploaded automatically when the device is connected to the internet. Other files must be\n      manually requested from the device - this is managed by the athena service.\n  - name: athena\n    description: Communicate with your device in real time.\n  - name: navigation\n    description: Send navigation routes to your device. Requires [comma prime](https://comma.ai/prime).\n  - name: clips\n    description: Create shareable video clips from your uploaded log files. Requires [comma prime](https://comma.ai/prime).\n  - name: openpilot auth\n    description: Endpoints used to pair or authenticate a device running openpilot.\n  - name: superuser\n    description: These endpoints are only accessible to [superusers](https://comma.ai/jobs).\npaths:\n  /v1/me:\n    get:\n      operationId: getProfile\n      summary: User profile\n      description: Returns information about the authenticated user\n      tags:\n        - account\n      security:\n        - AuthUser: []\n      responses:\n        '200':\n          description: JSON object containing the user's profile information\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Profile'\n  /v1/me/devices:\n    get:\n      operationId: getDevices\n      summary: Device list\n      description: List devices owned or readable by authenticated user\n      tags:\n        - account\n      security:\n        - AuthUser: []\n      responses:\n        '200':\n          description: JSON array of device objects\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Device'\n  /v1/{dongleId}/devices:\n    parameters:\n      - $ref: '#/components/parameters/dongleId'\n    get:\n      operationId: getUserDevices\n      summary: List devices (superuser)\n      description: List devices owned or readable by specified user\n      tags:\n        - superuser\n      security:\n        - AuthUser: []\n      responses:\n        '200':\n          description: JSON array of device objects\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Device'\n  /v1.1/devices/{dongleId}:\n    parameters:\n      - $ref: '#/components/parameters/dongleId'\n    get:\n      operationId: getDevice\n      summary: Device details\n      description: Returns information about the specified device\n      tags:\n        - devices\n      security:\n        - AuthUser: []\n      responses:\n        '200':\n          description: JSON object containing the device's information\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Device'\n  /v1/devices/{dongleId}:\n    parameters:\n      - $ref: '#/components/parameters/dongleId'\n    patch:\n      operationId: updateDevice\n      summary: Update device alias\n      tags:\n        - devices\n      security:\n        - AuthUser: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                alias:\n                  type: string\n              required:\n                - alias\n      responses:\n        '200':\n          description: JSON object containing the updated device's information\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Device'\n  /v1/devices/{dongleId}/location:\n    parameters:\n      - $ref: '#/components/parameters/dongleId'\n    get:\n      operationId: getDeviceLocation\n      summary: Device location\n      tags:\n        - devices\n      security:\n        - AuthUser: []\n      responses:\n        '200':\n          description: JSON object containing device location, or an error message if the location is not known.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - allOf:\n                      - $ref: '#/components/schemas/DeviceLocation'\n                      - type: object\n                        properties:\n                          dongle_id:\n                            $ref: '#/components/schemas/DongleID'\n                        required:\n                          - dongle_id\n                  - type: object\n                    properties:\n                      error:\n                        type: string\n                        enum:\n                          - \"Location unavailable\"\n                    required:\n                      - error\n  /v1/devices/{dongleId}/pair:\n    parameters:\n      - $ref: '#/components/parameters/dongleId'\n    post:\n      operationId: pairDeviceToUser\n      summary: Pair device\n      description: Pair a device to a user's account.\n      tags:\n        - devices\n      security:\n        - AuthUser: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                user_id:\n                  $ref: '#/components/schemas/DongleID'\n              required:\n                - user_id\n      responses:\n        '200':\n          $ref: '#/components/responses/SuccessInteger'\n  /v1/devices/{dongleId}/unpair:\n    parameters:\n      - $ref: '#/components/parameters/dongleId'\n    post:\n      operationId: unpairDevice\n      summary: Unpair device\n      description: Unpair device from authenticated user's account. Any comma prime subscription linked to the device will be cancelled.\n      tags:\n        - devices\n      security:\n        - AuthUser: []\n      responses:\n        '200':\n          $ref: '#/components/responses/SuccessInteger'\n  /v1/devices/{dongleId}/owner:\n    parameters:\n      - $ref: '#/components/parameters/dongleId'\n    get:\n      operationId: getDeviceOwner\n      summary: Device owner\n      description: Returns the owner of a device.\n      tags:\n        - devices\n      security:\n        - AuthUser: []\n      responses:\n        '200':\n          description: JSON object containing information about the device owner\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  user_id:\n                    type: string\n                    description: OAuth2 user ID\n                  points:\n                    type: integer\n                    description: comma points\n                  username:\n                    type: string\n                    deprecated: true\n                    nullable: true\n                  email:\n                    type: string\n  /v1/devices/{dongleId}/users:\n    parameters:\n      - $ref: '#/components/parameters/dongleId'\n    get:\n      operationId: getDeviceUsers\n      summary: Device users\n      description: List users with access to a device\n      tags:\n        - user management\n      security:\n        - AuthUser: []\n      responses:\n        '200':\n          description: JSON array of device user objects\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DeviceUser'\n  /v1/devices/{dongleId}/add_user:\n    parameters:\n      - $ref: '#/components/parameters/dongleId'\n    post:\n      operationId: addDeviceUser\n      summary: Grant device access\n      description: Grant read permissions to a user by email. Authed user must be device owner to perform. If multiple users are attached to an email address, device access is granted to all users.\n      tags:\n        - user management\n      security:\n        - AuthUser: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                email:\n                  type: string\n                  description: Email of user to add\n                email_userid:\n                  type: string\n                  description: OAuth2 user ID of user to add\n      responses:\n        '200':\n          $ref: '#/components/responses/SuccessInteger'\n  /v1/devices/{dongleId}/del_user:\n    parameters:\n      - $ref: '#/components/parameters/dongleId'\n    post:\n      operationId: revokeDeviceUser\n      summary: Revoke device access\n      description: Revoke read permissions from a user by email. Authed user must be device owner to perform. If multiple users are attached to an email address, device access is removed from all users.\n      tags:\n        - user management\n      security:\n        - AuthUser: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                email:\n                  type: string\n              required:\n                - email\n      responses:\n        '200':\n          $ref: '#/components/responses/SuccessInteger'\n  /v1.1/devices/{dongleId}/stats:\n    parameters:\n      - $ref: '#/components/parameters/dongleId'\n    get:\n      operationId: getDeviceStatistics\n      summary: Device driving statistics\n      description: Returns aggregate driving statistics for a device over the past 7 days and all time.\n      tags:\n        - devices\n      security:\n        - AuthUser: []\n        - AuthDevice: []\n      responses:\n        '200':\n          description: JSON object containing driving statistics\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  all:\n                    $ref: '#/components/schemas/DrivingStatistics'\n                  week:\n                    $ref: '#/components/schemas/DrivingStatistics'\n                required:\n                  - all\n                  - week\n  /v1/devices/{dongleId}/bootlogs:\n    parameters:\n      - $ref: '#/components/parameters/dongleId'\n    get:\n      operationId: getDeviceBootLogs\n      summary: Device boot logs\n      description: Retrieve boot logs uploaded from a device.\n      tags:\n        - logs\n      security:\n        - AuthUser: []\n      responses:\n        '200':\n          description: JSON array of URLs to boot log files. Files are available at each URL for one hour from the time of the request.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n  /v1/devices/{dongleId}/crashlogs:\n    parameters:\n      - $ref: '#/components/parameters/dongleId'\n    get:\n      operationId: getDeviceCrashLogs\n      summary: Device crash logs\n      description: Retrieve crash logs uploaded from a device.\n      tags:\n        - logs\n      security:\n        - AuthUser: []\n      responses:\n        '200':\n          description: JSON array of URLs to crash log files. Files are available at each URL for one hour from the time of the request.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n  /v1/devices/{dongleId}/routes:\n    parameters:\n      - $ref: '#/components/parameters/dongleId'\n    get:\n      operationId: getDeviceRoutes\n      summary: Device routes\n      description: Returns a list of routes uploaded from a device.\n      tags:\n        - routes\n      security:\n        - AuthUser: []\n      parameters:\n        - name: limit\n          in: query\n          description: Maximum number of routes to return\n          schema:\n            type: integer\n            default: 20\n        - name: created_after\n          in: query\n          description: Return routes created after this timestamp\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: JSON array of route objects\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Route'\n  /v1/devices/{dongleId}/routes/preserved:\n    parameters:\n      - $ref: '#/components/parameters/dongleId'\n    get:\n      operationId: getDevicePreservedRoutes\n      summary: Device preserved routes\n      description: Returns a list of preserved routes uploaded from a device.\n      tags:\n        - routes\n      security:\n        - AuthUser: []\n      responses:\n        '200':\n          description: JSON array of route objects\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Route'\n  /v1/devices/{dongleId}/routes_segments:\n    parameters:\n      - $ref: '#/components/parameters/dongleId'\n    get:\n      operationId: getDeviceRoutesSegments\n      summary: Device routes segments\n      description: Returns a list of route segments uploaded from a device between a start and end timestamp.\n      tags:\n        - routes\n      security:\n        - AuthUser: []\n        - AuthPublic: []\n      parameters:\n        - name: start\n          in: query\n          description: Start timestamp in milliseconds\n          required: true\n          schema:\n            type: integer\n        - name: end\n          in: query\n          description: End timestamp in milliseconds\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: JSON array of route segment objects\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RouteSegment'\n  /v1/devices/{dongleId}/segments:\n    parameters:\n      - $ref: '#/components/parameters/dongleId'\n    get:\n      operationId: getDeviceSegments\n      summary: Device segments\n      description: Returns time-sorted list of segments, each of which includes basic metadata derived from openpilot logs.\n      tags:\n        - routes\n      security:\n        - AuthUser: []\n        - AuthPublic: []\n      parameters:\n        - name: from\n          description: Start timestamp in milliseconds\n          in: query\n          required: true\n          schema:\n            type: number\n        - name: to\n          description: End timestamp in milliseconds. If omitted, the current time is used.\n          in: query\n          schema:\n            type: number\n      responses:\n        '200':\n          description: JSON array of segments\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Segment'\n  /{dongleId}:\n    servers:\n      - url: https://athena.comma.ai\n    parameters:\n      - $ref: '#/components/parameters/dongleId'\n    post:\n      operationId: submitAthenaPayload\n      summary: Submit Athena payload\n      description: |\n        Send JSON-RPC requests to the active websocket connection for a given device, identified by its dongle ID.\n\n        Some method types support offline queueing of messages until the device comes online (see `expiry`). The\n        response will indicate whether the message was queued or not.\n      tags:\n        - athena\n      security:\n        - AuthUser: []\n      requestBody:\n        description: JSON-RPC payload containing athena method name and parameters\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AthenaPayload'\n      responses:\n        '200':\n          description: JSON-RPC response containing the result of the method call\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AthenaResponse'\n  /v1/devices/{dongleId}/athena_offline_queue:\n    parameters:\n      - $ref: '#/components/parameters/dongleId'\n    get:\n      operationId: getDeviceAthenaOfflineQueue\n      summary: Athena offline queue\n      description: Return a list of queued payloads for delivery to device when it is online.\n      tags:\n        - athena\n      security:\n        - AuthUser: []\n      responses:\n        '200':\n          description: JSON array of queued payloads\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  oneOf:\n                    - $ref: '#/components/schemas/UploadFilesToUrlsMethod'\n  /v1.4/{dongleId}/upload_url:\n    parameters:\n      - $ref: '#/components/parameters/dongleId'\n    get:\n      operationId: getUploadUrl\n      summary: Log file upload\n      description: Request a URL to which an openpilot file an be uploaded via HTTP PUT. This endpoint only accepts tokens signed with a device private key.\n      tags:\n        - logs\n      security:\n        - AuthUser: []\n        - AuthDevice: []\n      parameters:\n        - name: path\n          in: query\n          description: File to upload from openpilot data directory.\n          required: true\n          schema:\n            type: string\n            example: \"2019-06-06--11-30-31--9/fcamera.hevc\"\n        - name: expiry_days\n          in: query\n          description: Number of days the url should be valid.\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 30\n            default: 1\n            example: 1\n      responses:\n        '200':\n          description: JSON object containing upload URL\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  url:\n                    type: string\n                    description: URL to which a PUT request can be sent with file contents\n                required:\n                  - url\n                example:\n                    url: \"https://commaincoming.blob.core.windows.net/commaincoming/239e82a1d3c855f2/2019-06-06--11-30-31/9/fcamera.hevc?sr=b\u0026sp=c\u0026sig=cMCrZt5fje7SDXlKcOIjHgA0wEVAol71FL6ac08Q2Iw%3D\u0026sv=2018-03-28\u0026se=2019-06-13T18%3A43%3A01Z\"\n  /v1/{dongleId}/upload_urls:\n    parameters:\n      - $ref: '#/components/parameters/dongleId'\n    post:\n      operationId: getUploadUrls\n      summary: Batch log file upload\n      description: Request URLs to which openpilot files can be uploaded via HTTP PUT. This endpoint only accepts tokens signed with a device private key.\n      tags:\n        - logs\n      security:\n        - AuthUser: []\n        - AuthDevice: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                paths:\n                  type: array\n                  items:\n                    type: string\n                  description: Files to upload from openpilot data directory.\n                expiry_days:\n                  type: integer\n                  minimum: 1\n                  maximum: 30\n                  default: 1\n                  description: number of days the url should be valid\n              required:\n                - paths\n            example:\n              paths:\n                - \"2019-06-06--11-30-31--9/fcamera.hevc\"\n                - \"2019-06-06--11-30-31--9/ecamera.hevc\"\n              expiry_days: 1\n      responses:\n        '200':\n          description: JSON array containing upload URLs\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    url:\n                      type: string\n                      description: URL to which a PUT request can be sent with file contents\n                  required:\n                    - url\n                example:\n                  - url: \"https://commaincoming.blob.core.windows.net/commaincoming/239e82a1d3c855f2/2019-06-06--11-30-31/9/fcamera.hevc?sr=b\u0026sp=c\u0026sig=cMCrZt5fje7SDXlKcOIjHgA0wEVAol71FL6ac08Q2Iw%3D\u0026sv=2018-03-28\u0026se=2019-06-13T18%3A43%3A01Z\"\n                  - url: \"https://commaincoming.blob.core.windows.net/commaincoming/239e82a1d3c855f2/2019-06-06--11-30-31/9/ecamera.hevc?sr=b\u0026sp=c\u0026sig=cMCrZt5fje7SDXlKcOIjHgA0wEVAol71FL6ac08Q2Iw%3D\u0026sv=2018-03-28\u0026se=2019-06-13T18%3A43%3A01Z\"\n  /v2/pilotpair:\n    post:\n      operationId: pilotPair\n      summary: Pair device\n      description: Pair a device to the authenticated user's account.\n      tags:\n        - openpilot auth\n      security:\n        - AuthUser: []\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                pair_token:\n                  type: string\n                  description: \"JWT signed by your device private key. Payload contains `{\\\"identity\\\": \u003cdongle-id\u003e, \\\"pair\\\": true}`\"\n              required:\n                - pair_token\n      responses:\n        '200':\n          description: JSON object containing pairing result\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  first_pair:\n                    type: boolean\n                    description: True if the device was unpaired prior to this call. False if the device was previously paired by an authenticated user.\n                required:\n                  - first_pair\n  /v2/pilotauth:\n    post:\n      operationId: pilotAuth\n      summary: Authenticate device (openpilot)\n      tags:\n        - openpilot auth\n      security:\n        - AuthPublic: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                imei:\n                  type: string\n                  description: Device IMEI\n                imei2:\n                  type: string\n                  description: Device IMEI, second slot\n                serial:\n                  type: string\n                  description: Device serial number\n                public_key:\n                  type: string\n                  description: 2048-bit RSA public key\n                register_token:\n                  type: string\n                  description: \"JWT signed by private key. Payload must contain `{\\\"register\\\": true}`.\"\n              required:\n                - imei\n                - serial\n                - public_key\n                - register_token\n      responses:\n        '200':\n          description: JSON object containing authenticated dongle ID and token\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  dongle_id:\n                    $ref: '#/components/schemas/DongleID'\n                  access_token:\n                    type: string\n                    description: JWT\n                required:\n                  - dongle_id\n                  - access_token\n  /v1/route/{routeName}:\n    parameters:\n      - $ref: '#/components/parameters/routeName'\n    get:\n      operationId: getRoute\n      summary: Route details\n      description: Returns information about the specified route. Authenticated user must have ownership of, or read access to, the device from which the route was uploaded.\n      tags:\n        - routes\n      security:\n        - AuthUser: []\n        - AuthPublic: []\n      responses:\n        '200':\n          description: JSON object containing route information\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Route'\n    patch:\n      operationId: updateRoute\n      summary: Update route\n      description: Update route metadata. Authenticated user must have ownership of the device from which the route was uploaded.\n      tags:\n        - routes\n      security:\n        - AuthUser: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                rating:\n                  type: integer\n                  minimum: 1\n                  maximum: 5\n                  description: Route rating\n                  deprecated: true\n                  example: 4\n                is_public:\n                  type: boolean\n                  description: Whether the route is publicly accessible\n                  example: true\n      responses:\n        '200':\n          description: JSON object containing updated route information\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Route'\n  /v1/route/{routeName}/segments:\n    parameters:\n      - $ref: '#/components/parameters/routeName'\n    get:\n      operationId: getRouteSegments\n      summary: Route segments\n      description: Returns list of segments comprising a route. Authenticated user must have ownership of, or read access to, the device from which the route was uploaded.\n      tags:\n        - routes\n      security:\n        - AuthUser: []\n      responses:\n        '200':\n          description: JSON array of segments\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Segment'\n  /v1/route/{routeName}/files:\n    parameters:\n      - $ref: '#/components/parameters/routeName'\n    get:\n      operationId: getRouteFiles\n      summary: Raw log files\n      description: Retrieve uploaded files for a route. Calls to this API are rate limited to 5 per minute.\n      tags:\n        - routes\n        - logs\n      security:\n        - AuthUser: []\n        - AuthPublic: []\n      responses:\n        '200':\n          description: JSON object containing signed URLs to various log files. URLs are valid for 1 hour. All arrays are sorted by segment number ascending.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  qlogs:\n                    type: array\n                    description: Array of signed URLs to qlog.bz2 files\n                    items:\n                      type: string\n                  qcameras:\n                    type: array\n                    description: Array of signed URLs to qcamera.ts files\n                    items:\n                      type: string\n                  logs:\n                    type: array\n                    description: Array of signed URLs to rlog.bz2 files\n                    items:\n                      type: string\n                  cameras:\n                    type: array\n                    description: Array of signed URLs to fcamera.hevc files\n                    items:\n                      type: string\n                  dcameras:\n                    type: array\n                    description: Array of signed URLs to dcamera.hevc files\n                    items:\n                      type: string\n                  ecameras:\n                    type: array\n                    description: Array of signed URLs to ecamera.hevc files\n                    items:\n                      type: string\n                required:\n                  - qlogs\n                  - qcameras\n                  - logs\n                  - cameras\n                  - dcameras\n                  - ecameras\n  /v1/route/{routeName}/qcamera.m3u8:\n    parameters:\n      - $ref: '#/components/parameters/routeName'\n    get:\n      operationId: getRouteStream\n      summary: Route HLS stream\n      description: Returns rear camera HLS stream index of MPEG-TS fragments.\n      tags:\n        - routes\n      security:\n        - AuthUser: []\n        - AuthPublic: []\n      responses:\n        '200':\n          description: m3u8 playlist\n          content:\n            application/x-mpegURL:\n              schema:\n                type: string\n                example: |\n                  #EXTM3U\n                  #EXT-X-VERSION:3\n                  #EXT-X-TARGETDURATION:4\n                  #EXT-X-MEDIA-SEQUENCE:0\n                  #EXT-X-PLAYLIST-TYPE:VOD\n\n                  #EXTINF:3.049958,\n                  8_61.ts?v=2\n                  #EXTINF:3.049955,\n                  69_61.ts?v=2\n                  #EXTINF:3.049955,\n                  130_61.ts?v=2\n                  #EXTINF:3.049958,\n                  191_61.ts?v=2\n                  #EXTINF:3.049970,\n                  252_61.ts?v=2\n                  #EXTINF:3.049955,\n                  313_61.ts?v=2\n                  #EXTINF:3.050007,\n                  374_61.ts?v=2\n                  #EXTINF:3.049913,\n                  435_61.ts?v=2\n                  #EXTINF:3.049942,\n                  496_61.ts?v=2\n                  #EXTINF:3.049964,\n                  557_61.ts?v=2\n                  #EXTINF:3.049955,\n                  618_61.ts?v=2\n  /v1/route/{routeName}/share_signature:\n    parameters:\n      - $ref: '#/components/parameters/routeName'\n    get:\n      operationId: getRouteShareSignature\n      summary: Route sharing signature\n      description: Return route share URL signature. Expires in 365 days.\n      tags:\n        - routes\n      security:\n        - AuthUser: []\n      responses:\n        '200':\n          description: JSON object containing route share signature\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  exp:\n                    type: string\n                    description: Unix timestamp of expiration\n                  sig:\n                    type: string\n                    description: Signature\n                required:\n                  - exp\n                  - sig\n  /v1/route/{routeName}/preserve:\n    parameters:\n      - $ref: '#/components/parameters/routeName'\n    post:\n      operationId: preserveRoute\n      summary: Preserve route\n      description: Preserve route from deletion. Authenticated user must have ownership of the device from which the route was uploaded.\n      tags:\n        - routes\n      security:\n        - AuthUser: []\n      responses:\n        '200':\n          $ref: '#/components/responses/SuccessInteger'\n    delete:\n      operationId: unpreserveRoute\n      summary: Unpreserve route\n      description: Unpreserve route from deletion. Authenticated user must have ownership of the device from which the route was uploaded.\n      tags:\n        - routes\n      security:\n        - AuthUser: []\n      responses:\n        '200':\n          $ref: '#/components/responses/SuccessInteger'\n  /v1/tokens/mapbox/{dongleId}:\n    parameters:\n      - $ref: '#/components/parameters/dongleId'\n    get:\n      operationId: getMapboxToken\n      summary: Mapbox token\n      description: Returns a Mapbox token for the specified dongle ID. Authenticated user must have ownership of the dongle ID.\n      tags:\n        - openpilot auth\n      security:\n        - AuthUser: []\n        - AuthDevice: []\n      responses:\n        '200':\n          description: JSON object containing Mapbox token\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  token:\n                    type: string\n                    description: Mapbox token\n                required:\n                  - token\n  /v1/navigation/{dongleId}/set_destination:\n    parameters:\n      - $ref: '#/components/parameters/dongleId'\n    post:\n      operationId: setDestination\n      summary: Set nav destination\n      description: Set destination for navigation. Authenticated user must have ownership of the dongle ID.\n      tags:\n        - navigation\n      security:\n        - AuthUser: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NavigationDestination'\n      responses:\n        '200':\n          description: Destination set\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                    const: true\n                  saved_next:\n                    type: boolean\n                    description: True if the destination was stored and will be applied when the device is next online. False if the destination was set immediately.\n                required:\n                  - success\n                  - saved_next\n  /v1/navigation/{dongleId}/next:\n    parameters:\n      - $ref: '#/components/parameters/dongleId'\n    get:\n      operationId: getNavigationNext\n      summary: Get nav destination\n      description: Retrieve next location from database. This was set on Set destination if the device was offline. Next location is removed from the database after this call or when a new destination is set.\n      tags:\n        - navigation\n      security:\n        - AuthUser: []\n        - AuthDevice: []\n      responses:\n        '200':\n          description: JSON object containing next destination, or null if no destination is set\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/NavigationDestination'\n                  - type: string\n                    enum:\n                      - \"null\"\n    delete:\n      operationId: clearNavigationNext\n      summary: Clear nav destination\n      description: Delete next destination from database.\n      tags:\n        - navigation\n      security:\n        - AuthUser: []\n        - AuthDevice: []\n      responses:\n        '200':\n          description: Destination cleared\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                    const: true\n                  deleted:\n                    $ref: '#/components/schemas/NavigationDestination'\n                required:\n                  - success\n                  - deleted\n  /v1/navigation/{dongleId}/locations:\n    parameters:\n      - $ref: '#/components/parameters/dongleId'\n    get:\n      operationId: getNavigationSavedLocations\n      summary: Saved locations\n      description: Retrieve saved locations from database.\n      tags:\n        - navigation\n      security:\n        - AuthUser: []\n        - AuthDevice: []\n      responses:\n        '200':\n          description: JSON object containing saved locations\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/NavigationSavedLocation'\n    put:\n      operationId: saveNavigationLocation\n      summary: Save location\n      tags:\n        - navigation\n      security:\n        - AuthUser: []\n        - AuthDevice: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NavigationSavedLocation'\n      responses:\n        '200':\n          $ref: '#/components/responses/SuccessBoolean'\n    patch:\n      operationId: updateNavigationLocation\n      summary: Update location\n      tags:\n        - navigation\n      security:\n        - AuthUser: []\n        - AuthDevice: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              allOf:\n                - $ref: '#/components/schemas/NavigationSavedLocation'\n                - type: object\n                  properties:\n                    id:\n                      $ref: '#/components/schemas/NavigationSavedLocationID'\n      responses:\n        '200':\n          $ref: '#/components/responses/SuccessBoolean'\n    delete:\n      operationId: deleteNavigationLocation\n      summary: Delete location\n      tags:\n        - navigation\n      security:\n        - AuthUser: []\n        - AuthDevice: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                id:\n                  $ref: '#/components/schemas/NavigationSavedLocationID'\n      responses:\n        '200':\n          $ref: '#/components/responses/SuccessBoolean'\n  /v1/clips/create:\n    post:\n      operationId: createClip\n      summary: Create clip\n      description: Create a clip from a route.\n      tags:\n        - clips\n      security:\n        - AuthUser: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ClipProperties'\n      responses:\n        '200':\n          description: JSON object containing clip ID, or an error message\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - type: object\n                    properties:\n                      success:\n                        type: boolean\n                        const: true\n                      clip_id:\n                        $ref: '#/components/schemas/ClipID'\n                    required:\n                      - success\n                      - clip_id\n                  - type: object\n                    properties:\n                      error:\n                        type: string\n                        description: Error code\n                        enum:\n                          - \"too_many_pending\"\n                    required:\n                      - error\n  /v1/clips/list:\n    get:\n      operationId: getClips\n      summary: List clips\n      description: List clips created for the specified device.\n      tags:\n        - clips\n      security:\n        - AuthUser: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                dongle_id:\n                  $ref: '#/components/schemas/DongleID'\n      responses:\n        '200':\n          description: JSON array of clip objects\n          content:\n            application/json:\n              schema:\n                type: object\n                oneOf:\n                  - $ref: '#/components/schemas/PendingClip'\n                  - $ref: '#/components/schemas/DoneClip'\n                  - $ref: '#/components/schemas/FailedClip'\n  /v1/clips/details:\n    get:\n      operationId: getClip\n      summary: Get clip details\n      tags:\n        - clips\n      security:\n        - AuthUser: []\n        - AuthPublic: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                clip_id:\n                  $ref: '#/components/schemas/ClipID'\n                dongle_id:\n                  $ref: '#/components/schemas/DongleID'\n              required:\n                - clip_id\n                - dongle_id\n      responses:\n        '200':\n          description: JSON object containing clip details\n          content:\n            application/json:\n              schema:\n                type: object\n                oneOf:\n                  - $ref: '#/components/schemas/PendingClip'\n                  - $ref: '#/components/schemas/DoneClip'\n                  - $ref: '#/components/schemas/FailedClip'\n  /v1/clips/update:\n    patch:\n      operationId: updateClip\n      summary: Update clip\n      tags:\n        - clips\n      security:\n        - AuthUser: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                clip_id:\n                  $ref: '#/components/schemas/ClipID'\n                dongle_id:\n                  $ref: '#/components/schemas/DongleID'\n                is_public:\n                  type: boolean\n                  description: Whether the clip is public or not\n              required:\n                - clip_id\n                - dongle_id\n                - is_public\n      responses:\n        '200':\n          $ref: '#/components/responses/SuccessBoolean'\n    delete:\n      operationId: deleteClip\n      summary: Delete clip\n      tags:\n        - clips\n      security:\n        - AuthUser: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                clip_id:\n                  $ref: '#/components/schemas/ClipID'\n                dongle_id:\n                  $ref: '#/components/schemas/DongleID'\n              required:\n                - clip_id\n                - dongle_id\n      responses:\n        '200':\n          $ref: '#/components/responses/SuccessBoolean'\ncomponents:\n  securitySchemes:\n    AuthUser:\n      summary: Authenticated User\n      description: Generate a JWT using the service at https://jwt.comma.ai.\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n    AuthDevice:\n      summary: Authenticated Device\n      description: Device can authenticate using the `/v2/pilotauth` endpoint.\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n  responses:\n    SuccessInteger:\n      description: Operation successful\n      content:\n        application/json:\n          schema:\n            properties:\n              success:\n                type: integer\n                const: 1\n            required:\n              - success\n    SuccessBoolean:\n      description: Operation successful\n      content:\n        application/json:\n          schema:\n            properties:\n              success:\n                type: boolean\n                const: true\n            required:\n              - success\n  schemas:\n    Profile:\n      type: object\n      properties:\n        email:\n          type: string\n          format: email\n          description: Email address\n          example: \"commaphone3@gmail.com\"\n        id:\n          type: string\n          description: Dongle ID\n          example: \"2e9eeac96ea4e6a6\"\n        points:\n          type: integer\n          description: comma points\n          deprecated: true\n          example: 34933\n        regdate:\n          type: integer\n          description: Unix timestamp at time of registration\n          example: 1465103707\n        superuser:\n          type: boolean\n          description: \u003ca href=\"https://comma.ai/jobs\"\u003eApply for superuser here\u003c/a\u003e\n          example: false\n        username:\n          type: string\n          description: Username\n          deprecated: true\n          nullable: true\n          example: \"joeyjoejoe\"\n        user_id:\n          type: string\n          description: OAuth2 user ID\n          example: google_111803823964622526972\n      required:\n        - email\n        - id\n        - points\n        - regdate\n        - superuser\n        - user_id\n    Device:\n      type: object\n      properties:\n        dongle_id:\n          $ref: '#/components/schemas/DongleID'\n          readOnly: true\n        alias:\n          type: string\n          readOnly: true\n          description: Device nickname\n        serial:\n          type: string\n          readOnly: true\n          description: Device serial number\n        athena_host:\n          type: string\n          nullable: true\n          readOnly: true\n          description: Last connected athena server hostname\n        last_athena_ping:\n          type: integer\n          readOnly: true\n          description: Unix timestamp of last athena ping\n        ignore_uploads:\n          type: boolean\n          nullable: true\n          readOnly: true\n          description: Uploads are ignored from this device\n        is_paired:\n          type: boolean\n          readOnly: true\n          description: Device has an owner\n        is_owner:\n          type: boolean\n          readOnly: true\n          description: Authenticated user has write-access to the device\n        public_key:\n          type: string\n          nullable: true\n          readOnly: true\n          description: 2048-bit public RSA key\n        prime:\n          type: boolean\n          readOnly: true\n          description: Device has a prime subscription\n        prime_type:\n          type: number\n          enum:\n            - 0\n            - 1\n            - 2\n            - 3\n            - 4\n          readOnly: true\n          description: |\n            Prime subscription type\n            - 0 = None\n            - 1 = Magenta\n            - 2 = Lite\n            - 3 = Blue\n            - 4 = Magenta New\n        trial_claimed:\n          type: boolean\n          nullable: true\n          description: Device prime trial is claimed\n          readOnly: true\n        device_type:\n          type: string\n          enum:\n            - app\n            - neo\n            - panda\n            - two\n            - freon\n            - pc\n            - three\n          readOnly: true\n          description: Device type\n        last_gps_time:\n          type: integer\n          nullable: true\n          readOnly: true\n          description: Unix timestamp, in milliseconds\n        last_gps_lat:\n          type: number\n          nullable: true\n          readOnly: true\n          description: Latitude, in decimal degrees\n        last_gps_lng:\n          type: number\n          nullable: true\n          readOnly: true\n          description: Longitude, in decimal degrees\n        last_gps_accuracy:\n          type: number\n          nullable: true\n          readOnly: true\n          description: Accuracy, in metres\n        last_gps_speed:\n          type: number\n          nullable: true\n          readOnly: true\n          description: Speed, in metres per second\n        last_gps_bearing:\n          type: number\n          nullable: true\n          readOnly: true\n          description: Direction angle, in degrees from north\n        openpilot_version:\n          type: string\n          nullable: true\n          readOnly: true\n          description: openpilot version\n        sim_id:\n          type: string\n          nullable: true\n          readOnly: true\n          description: Last known SIM ID of the device\n      required:\n        - dongle_id\n        - alias\n        - serial\n        - is_paired\n        - public_key\n        - prime\n        - prime_type\n        - trial_claimed\n        - device_type\n        - last_gps_time\n        - last_gps_lat\n        - last_gps_lng\n        - last_gps_accuracy\n        - last_gps_speed\n        - last_gps_bearing\n        - sim_id\n    DeviceUser:\n      type: object\n      properties:\n        email:\n          type: string\n          description: User email\n        permission:\n          $ref: '#/components/schemas/DeviceUserPermission'\n      required:\n        - email\n        - permission\n    DeviceUserPermission:\n      type: string\n      description: Device user permission\n      enum:\n        - read_access\n        - owner\n    DeviceLocation:\n      type: object\n      properties:\n        lat:\n          type: number\n          description: Latitude, in decimal degrees\n        lng:\n          type: number\n          description: Longitude, in decimal degrees\n        time:\n          type: integer\n          description: Unix timestamp, in milliseconds\n        accuracy:\n          type: number\n          description: Accuracy, in metres\n        speed:\n          type: number\n          description: Speed, in metres per second\n        bearing:\n          type: number\n          description: Direction angle, in degrees from north\n      required:\n        - lat\n        - lng\n        - time\n        - accuracy\n        - speed\n        - bearing\n    DrivingStatistics:\n      type: object\n      description: Summary of drives over a period of time\n      properties:\n        distance:\n          type: number\n          description: Sum of distance driven in time period, in miles\n        minutes:\n          type: integer\n          description: Sum of time driven in time period, in minutes\n        routes:\n          type: integer\n          description: Count of routes in time period\n      required:\n        - distance\n        - minutes\n        - routes\n    Segment:\n      type: object\n      description: A single segment of a route is up to 60 seconds in length.\n      properties:\n        canonical_name:\n          $ref: '#/components/schemas/SegmentName'\n        number:\n          type: integer\n          description: Segment number\n          minimum: 0\n        canonical_route_name:\n          $ref: '#/components/schemas/RouteName'\n        dongle_id:\n          $ref: '#/components/schemas/DongleID'\n        create_time:\n          type: integer\n          description: Unix timestamp at which upload_url was first called for file in segment\n        start_time_utc_millis:\n          type: integer\n          description: Segment start time, milliseconds since epoch\n        end_time_utc_millis:\n          type: integer\n          description: Segment end time, milliseconds since epoch\n        url:\n          type: string\n          description: Signed URL from which route.coords and JPEGs can be downloaded\n        length:\n          type: number\n          description: Sum of distances between GPS points in miles\n        can:\n          type: boolean\n          description: Segment contains CAN messages\n        hpgps:\n          type: boolean\n          description: Segment has ublox packets\n        radar:\n          type: boolean\n          description: Segment contains radar tracks in CAN\n        devicetype:\n          $ref: '#/components/schemas/SegmentDataSource'\n        proc_log:\n          $ref: '#/components/schemas/FileProcStatus'\n        proc_qlog:\n          $ref: '#/components/schemas/FileProcStatus'\n        proc_camera:\n          $ref: '#/components/schemas/FileProcStatus'\n        proc_dcamera:\n          $ref: '#/components/schemas/FileProcStatus'\n        passive:\n          type: boolean\n          description: openpilot is running in passive mode\n        version:\n          type: string\n          description: openpilot version\n        git_commit:\n          type: string\n          description: git commit hash\n        git_branch:\n          type: string\n          description: git branch\n        git_remote:\n          type: string\n          description: git remote url\n        git_dirty:\n          type: boolean\n          description: git working tree is dirty\n      required:\n        - canonical_name\n        - number\n        - canonical_route_name\n        - dongle_id\n        - create_time\n        - start_time_utc_millis\n        - end_time_utc_millis\n        - url\n        - length\n        - can\n        - hpgps\n        - radar\n        - devicetype\n        - proc_log\n        - proc_qlog\n        - proc_camera\n        - proc_dcamera\n        - passive\n        - version\n        - git_commit\n        - git_branch\n        - git_remote\n        - git_dirty\n    Route:\n      type: object\n      properties:\n        fullname:\n          $ref: '#/components/schemas/RouteName'\n        dongle_id:\n          $ref: '#/components/schemas/DongleID'\n        user_id:\n          $ref: '#/components/schemas/DongleID'\n        is_public:\n          type: boolean\n          description: Route is publicly accessible\n        create_time:\n          type: integer\n          description: Unix timestamp at which upload_url was first called for file in route\n        url:\n          type: string\n          description: Signed storage bucket URL from which route.coords and JPEGs can be downloaded\n        share_expiry:\n          type: integer\n          description: Unix timestamp at which signed URL expires\n        share_sig:\n          type: string\n          description: URL signature\n        length:\n          type: number\n          description: Sum of distances between GPS points in miles\n        can:\n          type: boolean\n          description: Route contains CAN messages\n        hpgps:\n          type: boolean\n          description: Route has ublox packets\n        radar:\n          type: boolean\n          description: Route contains radar tracks in CAN\n        devicetype:\n          $ref: '#/components/schemas/SegmentDataSource'\n        maxqlog:\n          type: integer\n          description: Maximum qlog segment number uploaded\n        maxqcamera:\n          type: integer\n          description: Maximum qcamera segment number uploaded\n        maxlog:\n          type: integer\n          description: Maximum log segment number uploaded\n        maxcamera:\n          type: integer\n          description: Maximum road camera segment number uploaded\n        maxdcamera:\n          type: integer\n          description: Maximum driver camera segment number uploaded\n        maxecamera:\n          type: integer\n          description: Maximum wide road camera segment number uploaded\n        procqlog:\n          type: integer\n          description: Maximum qlog segment number processed\n        procqcamera:\n          type: integer\n          description: Maximum qcamera segment number processed\n        proclog:\n          type: integer\n          description: Maximum log segment number processed\n        proccamera:\n          type: integer\n          description: Maximum road camera segment number processed\n        start_lat:\n          type: number\n          description: First latitude recorded in route from GPS\n        start_lng:\n          type: number\n          description: First longitude recorded in route from GPS\n        start_time:\n          type: number\n          description: Unix timestamp at beginning of route\n        end_lat:\n          type: number\n          description: Last latitude recorded in route from GPS\n        end_lng:\n          type: number\n          description: Last longitude recorded in route from GPS\n        end_time:\n          type: number\n          description: Unix timestamp at end of last segment in route\n        passive:\n          type: boolean\n          description: openpilot is running in passive mode\n        version:\n          type: string\n          description: openpilot version\n        git_commit:\n          type: string\n          description: git commit hash\n        git_branch:\n          type: string\n          description: git branch\n        git_remote:\n          type: string\n          description: git remote url\n        git_dirty:\n          type: boolean\n          description: git working tree is dirty\n        platform:\n          type: string\n          description: openpilot platform name\n        vin:\n          $ref: '#/components/schemas/VIN'\n        init_logmonotime:\n          type: integer\n          description: Minimum logMonoTime from openpilot log\n      required:\n        - fullname\n        - dongle_id\n        - user_id\n        - create_time\n        - url\n        - share_expiry\n        - share_sig\n        - length\n        - devicetype\n        - maxlog\n        - maxcamera\n        - maxdcamera\n        - proclog\n        - proccamera\n        - start_time\n        - end_time\n    RouteSegment:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/Route'\n        - type: object\n          properties:\n            segment_numbers:\n              type: array\n              description: Segment numbers in route\n              items:\n                type: integer\n                minimum: 0\n            segment_start_times:\n              type: array\n              description: Segment start times in milliseconds since epoch\n              items:\n                type: integer\n            segment_end_times:\n              type: array\n              description: Segment end times in milliseconds since epoch\n              items:\n                type: integer\n          required:\n            - segment_numbers\n            - segment_start_times\n            - segment_end_times\n    DeviceType:\n      type: string\n      description: Device type\n      enum:\n        - app\n        - neo\n        - panda\n        - two\n        - freon\n        - pc\n        - three\n    SegmentDataSource:\n      type: integer\n      description: |\n        Data source\n        - 3 = eon\n        - 6 = comma two\n        - 7 = comma three\n      enum:\n        - 3\n        - 6\n        - 7\n    FileProcStatus:\n      type: integer\n      description: |\n        Log file status\n        - -1 = Not received\n        - 0 = Upload URL sent\n        - 10 = Received\n        - 20 = Enqueued\n        - 30 = Processing\n        - 40 = Processed\n        - 50 = Errored\n      enum:\n        - -1\n        - 0\n        - 10\n        - 20\n        - 30\n        - 40\n        - 50\n    FileType:\n      type: integer\n      description: |\n        File type\n        1. Road camera (fcamera)\n        2. Driver camera (dcamera)\n        3. Raw log (rlog)\n        4. Qlog\n        5. QCamera\n        6. Wide road camera (extended, ecamera)\n      enum:\n        - 1\n        - 2\n        - 3\n        - 4\n        - 5\n        - 6\n    DongleID:\n      title: Dongle ID\n      description: A unique 16-character hexadecimal string. Can represent a device or a user.\n      type: string\n      pattern: '^[0-9a-f]{16}$'\n      readOnly: true\n      example: \"1a2b3c4d5e6f7a8b\"\n    RouteName:\n      title: Canonical route name\n      description: Contains a dongle ID and timestamp of the beginning of the route\n      type: string\n      pattern: '^[0-9a-f]{16}\\|[0-9]{4}-[0-9]{2}-[0-9]{2}--[0-9]{2}-[0-9]{2}-[0-9]{2}$'\n      example: \"1a2b3c4d5e6f7a8b|2019-01-01--00-00-00\"\n    SegmentName:\n      title: Canonical segment name\n      description: Contains a dongle ID, timestamp of the beginning of the route, and segment number\n      type: string\n      pattern: '^[0-9a-f]{16}\\|[0-9]{4}-[0-9]{2}-[0-9]{2}--[0-9]{2}-[0-9]{2}-[0-9]{2}--[0-9]+$'\n      example: \"1a2b3c4d5e6f7a8b|2019-01-01--00-00-00--0\"\n    VIN:\n      title: Vehicle identification number\n      description: 17-character alphanumeric string\n      type: string\n      pattern: '^[0-9A-Z]{17}$'\n      example: \"5YJ3E1EA7HF000000\"\n    NavigationDestination:\n      title: Navigation destination\n      type: object\n      properties:\n        place_name:\n          type: string\n          description: Short name of destination\n          example: \"1441 State St\"\n        place_details:\n          type: string\n          description: Address details of destination. Should not include short name.\n          example: \"San Diego, CA 92101, United States\"\n        latitude:\n          type: number\n          description: Latitude, decimal degrees\n          example: 32.720450\n        longitude:\n          type: number\n          description: Longitude, decimal degrees\n          example: -117.166210\n      required:\n        - place_name\n        - place_details\n        - latitude\n        - longitude\n    NavigationSavedLocationID:\n      title: Navigation saved location ID\n      description: Identifier for a saved location\n      type: number\n    NavigationSavedLocation:\n      title: Navigation saved location\n      type: object\n      allOf:\n        - type: object\n          properties:\n            id:\n              $ref: '#/components/schemas/NavigationSavedLocationID'\n              readOnly: true\n            dongle_id:\n              $ref: '#/components/schemas/DongleID'\n              readOnly: true\n            save_type:\n              $ref: '#/components/schemas/NavigationLocationType'\n            label:\n              type: string\n              description: Optional label for locations with type \"favorite\"\n              nullable: true\n            modified:\n              type: string\n              description: When this saved location was last modified\n              readOnly: true\n          required:\n            - id\n            - dongle_id\n            - save_type\n            - modified\n        - $ref: '#/components/schemas/NavigationDestination'\n    NavigationLocationType:\n      type: string\n      description: Navigation location type\n      enum:\n        - favorite\n        - recent\n    ClipID:\n      title: Clip ID\n      description: Unique identifier for a clip\n      type: integer\n      readOnly: true\n    ClipProperties:\n      type: object\n      properties:\n        id:\n          $ref: '#/components/schemas/ClipID'\n        create_time:\n          description: Unix timestamp when clip was created, in milliseconds\n          type: integer\n          readOnly: true\n          example: 1670109391000\n        dongle_id:\n          $ref: '#/components/schemas/DongleID'\n        route_name:\n          $ref: '#/components/schemas/RouteName'\n        start_time:\n          type: integer\n          description: Unix timestamp when clip starts, in milliseconds\n        end_time:\n          type: integer\n          description: Unix timestamp when clip ends, in milliseconds\n        title:\n          type: string\n          description: Optional title for clip\n          nullable: true\n          maxLength: 128\n        video_type:\n          description: |\n            - `q` = QCamera\n            - `f` = Road camera\n            - `e` = Wide road camera\n            - `d` = Driver camera\n            - `360` = 360 video\n          type: string\n          enum:\n            - q\n            - f\n            - e\n            - d\n            - \"360\"\n        is_public:\n          type: boolean\n          description: Clip is publicly accessible\n      required:\n        - id\n        - create_time\n        - dongle_id\n        - route_name\n        - start_time\n        - end_time\n        - video_type\n    PendingClip:\n      title: Pending Clip\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/ClipProperties'\n        - type: object\n          properties:\n            status:\n              type: string\n              enum:\n                - pending\n            pending_status:\n              description: Pending clip status\n              type: string\n              enum:\n                - waiting_jobs\n                - processing\n              readOnly: true\n              example: processing\n            pending_progress:\n              description: Processing progress, from 0 to 1\n              type: number\n              minimum: 0\n              maximum: 1\n              readOnly: true\n              example: 0.5\n      required:\n        - status\n        - is_public\n        - title\n    DoneClip:\n      title: Done Clip\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/ClipProperties'\n        - type: object\n          properties:\n            status:\n              type: string\n              enum:\n                - done\n            url:\n              type: string\n              description: URL to clip\n              readOnly: true\n            thumbnail:\n              type: string\n              description: URL to clip thumbnail\n              readOnly: true\n      required:\n        - status\n        - is_public\n        - title\n    FailedClip:\n      title: Failed Clip\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/ClipProperties'\n        - type: object\n          properties:\n            status:\n              type: string\n              enum:\n                - failed\n            error_status:\n              description: Error message\n              type: string\n              enum:\n                - upload_failed_request\n                - upload_failed\n                - upload_failed_dcam\n                - upload_timed_out\n                - export_failed\n              readOnly: true\n              example: upload_failed\n      required:\n        - status\n        - is_public\n        - title\n    Clip:\n      description: Video clip created from part of a route\n      type: object\n      oneOf:\n        - $ref: '#/components/schemas/PendingClip'\n        - $ref: '#/components/schemas/DoneClip'\n        - $ref: '#/components/schemas/FailedClip'\n    JSONRPCPayload:\n      type: object\n      properties:\n        method:\n          type: string\n          description: JSON-RPC method name\n        jsonrpc:\n          type: string\n          description: JSON-RPC version\n          enum:\n            - \"2.0\"\n        id:\n          type: integer\n          description: JSON-RPC request ID\n          enum:\n            - 0\n      required:\n        - method\n        - jsonrpc\n        - id\n    JSONRPCResponse:\n      type: object\n      properties:\n        jsonrpc:\n          type: string\n          description: JSON-RPC version\n          enum:\n            - \"2.0\"\n        id:\n          type: integer\n          description: JSON-RPC request ID\n          enum:\n            - 0\n        result:\n          description: Method-specific result\n      required:\n        - jsonrpc\n        - id\n    GetMessageMethod:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/JSONRPCPayload'\n        - type: object\n          properties:\n            method:\n              type: string\n              enum:\n                - getMessage\n            params:\n              type: object\n              properties:\n                service:\n                  type: string\n                  description: service name\n                  example: peripheralState\n                timeout:\n                  type: integer\n                  description: time to wait for a message in milliseconds\n                  example: 5000\n              required:\n                - service\n          required:\n            - params\n    GetVersionMethod:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/JSONRPCPayload'\n        - type: object\n          properties:\n            method:\n              type: string\n              enum:\n                - getVersion\n    SetNavDestinationMethod:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/JSONRPCPayload'\n        - type: object\n          properties:\n            method:\n              type: string\n              enum:\n                - setNavDestination\n            params:\n              $ref: '#/components/schemas/NavigationDestination'\n          required:\n            - params\n    RebootMethod:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/JSONRPCPayload'\n        - type: object\n          properties:\n            method:\n              type: string\n              enum:\n                - reboot\n    UploadFilesToUrlsMethod:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/JSONRPCPayload'\n        - type: object\n          properties:\n            method:\n              type: string\n              enum:\n                - uploadFilesToUrls\n            params:\n              type: array\n              items:\n                type: object\n                properties:\n                  fn:\n                    type: string\n                  url:\n                    type: string\n                  headers:\n                    type: object\n                    additionalProperties:\n                      type: string\n                    default: {}\n                    example:\n                      x-ms-blob-type: BlockBlob\n                  allow_cellular:\n                    type: boolean\n                    default: false\n                required:\n                  - fn\n                  - url\n            expiry:\n              type: integer\n              description: |\n                Unix timestamp at which this message will be removed from the offline queue, after\n                which it will no longer be sent to the device if it comes online. If not specified,\n                this message will not be added to the offline queue.\n          required:\n            - params\n    ListUploadQueueMethod:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/JSONRPCPayload'\n        - type: object\n          properties:\n            method:\n              type: string\n              enum:\n                - listUploadQueue\n    GetPublicKeyMethod:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/JSONRPCPayload'\n        - type: object\n          properties:\n            method:\n              type: string\n              enum:\n                - getPublicKey\n    GetSshAuthorizedKeysMethod:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/JSONRPCPayload'\n        - type: object\n          properties:\n            method:\n              type: string\n              enum:\n                - getSshAuthorizedKeys\n    GetSimInfoMethod:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/JSONRPCPayload'\n        - type: object\n          properties:\n            method:\n              type: string\n              enum:\n                - getSimInfo\n    GetNetworkTypeMethod:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/JSONRPCPayload'\n        - type: object\n          properties:\n            method:\n              type: string\n              enum:\n                - getNetworkType\n    GetNetworkMeteredMethod:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/JSONRPCPayload'\n        - type: object\n          properties:\n            method:\n              type: string\n              enum:\n                  - getNetworkMetered\n    GetNetworksMethod:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/JSONRPCPayload'\n        - type: object\n          properties:\n            method:\n              type: string\n              enum:\n                - getNetworks\n    TakeSnapshotMethod:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/JSONRPCPayload'\n        - type: object\n          properties:\n            method:\n              type: string\n              enum:\n                - takeSnapshot\n    AthenaPayload:\n      type: object\n      oneOf:\n        - $ref: '#/components/schemas/GetMessageMethod'\n        - $ref: '#/components/schemas/GetVersionMethod'\n        - $ref: '#/components/schemas/SetNavDestinationMethod'\n        - $ref: '#/components/schemas/RebootMethod'\n        - $ref: '#/components/schemas/UploadFilesToUrlsMethod'\n        - $ref: '#/components/schemas/ListUploadQueueMethod'\n        - $ref: '#/components/schemas/GetPublicKeyMethod'\n        - $ref: '#/components/schemas/GetSshAuthorizedKeysMethod'\n        - $ref: '#/components/schemas/GetSimInfoMethod'\n        - $ref: '#/components/schemas/GetNetworkTypeMethod'\n        - $ref: '#/components/schemas/GetNetworkMeteredMethod'\n        - $ref: '#/components/schemas/GetNetworksMethod'\n        - $ref: '#/components/schemas/TakeSnapshotMethod'\n    AthenaResponse:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/JSONRPCResponse'\n      example:\n        jsonrpc: \"2.0\"\n        id: 0\n        result:\n          success: 1\n  parameters:\n    dongleId:\n      name: dongleId\n      description: Dongle ID\n      in: path\n      required: true\n      schema:\n        $ref: '#/components/schemas/DongleID'\n    routeName:\n      name: routeName\n      description: Canonical route name\n      in: path\n      required: true\n      schema:\n        $ref: '#/components/schemas/RouteName'\n",
			"canonicalURL": "/github.com/commaai/comma-api@bd70c65e31708b5f9a8460e6063685a2e068e2f1/-/blob/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/commaai/comma-api/blob/bd70c65e31708b5f9a8460e6063685a2e068e2f1/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"AthenaPayload\": resolve \"#/components/schemas/AthenaPayload\": oneOf: $ref: resolve \"#/components/schemas/UploadFilesToUrlsMethod\": allOf: property \"params\": items: property \"headers\": at openapi.yaml:2268:30: parse default: unexpected type: \"object\""
}